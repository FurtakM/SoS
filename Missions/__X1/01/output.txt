// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3629 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3476 0 0
// PrepareSheikGroup ;
 123: CALL 3114 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 3026 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3877 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: IFFALSE 699
 692: PUSH
 693: LD_EXP 19
 697: NOT
 698: AND
 699: IFFALSE 708
 701: PUSH
 702: LD_EXP 22
 706: NOT
 707: AND
 708: IFFALSE 769
 710: GO 712
 712: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 713: LD_EXP 1
 717: PPUSH
 718: LD_STRING DH-spot-1
 720: PPUSH
 721: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 725: LD_INT 47
 727: PPUSH
 728: LD_INT 68
 730: PPUSH
 731: CALL_OW 428
 735: PPUSH
 736: CALL_OW 313
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PPUSH
 745: LD_STRING DRa-spot-3
 747: PPUSH
 748: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 752: LD_INT 90
 754: PPUSH
 755: LD_INT 41
 757: PPUSH
 758: LD_INT 2
 760: PPUSH
 761: LD_INT 6
 763: NEG
 764: PPUSH
 765: CALL_OW 330
// end ;
 769: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 770: LD_INT 2
 772: PPUSH
 773: LD_INT 93
 775: PPUSH
 776: LD_INT 89
 778: PPUSH
 779: CALL_OW 293
 783: IFFALSE 792
 785: PUSH
 786: LD_EXP 19
 790: NOT
 791: AND
 792: IFFALSE 801
 794: PUSH
 795: LD_EXP 22
 799: NOT
 800: AND
 801: IFFALSE 862
 803: GO 805
 805: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 806: LD_EXP 1
 810: PPUSH
 811: LD_STRING DH-spot-1
 813: PPUSH
 814: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 818: LD_INT 93
 820: PPUSH
 821: LD_INT 89
 823: PPUSH
 824: CALL_OW 428
 828: PPUSH
 829: CALL_OW 313
 833: PUSH
 834: LD_INT 1
 836: ARRAY
 837: PPUSH
 838: LD_STRING DRa-spot-2
 840: PPUSH
 841: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 845: LD_INT 90
 847: PPUSH
 848: LD_INT 41
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 6
 856: NEG
 857: PPUSH
 858: CALL_OW 330
// end ;
 862: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 863: LD_INT 2
 865: PPUSH
 866: LD_INT 71
 868: PPUSH
 869: LD_INT 84
 871: PPUSH
 872: CALL_OW 428
 876: PPUSH
 877: CALL_OW 292
 881: IFFALSE 890
 883: PUSH
 884: LD_EXP 19
 888: NOT
 889: AND
 890: IFFALSE 899
 892: PUSH
 893: LD_EXP 22
 897: NOT
 898: AND
 899: IFFALSE 951
 901: GO 903
 903: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 904: LD_EXP 1
 908: PPUSH
 909: LD_STRING DH-spot-1
 911: PPUSH
 912: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 916: LD_INT 71
 918: PPUSH
 919: LD_INT 84
 921: PPUSH
 922: CALL_OW 428
 926: PPUSH
 927: LD_STRING DRa-spot-1
 929: PPUSH
 930: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 934: LD_INT 90
 936: PPUSH
 937: LD_INT 41
 939: PPUSH
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 6
 945: NEG
 946: PPUSH
 947: CALL_OW 330
// end ;
 951: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 952: LD_INT 2
 954: PPUSH
 955: LD_INT 35
 957: PPUSH
 958: LD_INT 35
 960: PPUSH
 961: CALL_OW 428
 965: PPUSH
 966: CALL_OW 292
 970: IFFALSE 979
 972: PUSH
 973: LD_EXP 22
 977: NOT
 978: AND
 979: IFFALSE 1029
 981: GO 983
 983: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 984: LD_INT 35
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: CALL_OW 428
 994: PPUSH
 995: LD_EXP 1
 999: PPUSH
1000: CALL_OW 119
// wait ( 0 0$1 ) ;
1004: LD_INT 35
1006: PPUSH
1007: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
1011: LD_INT 35
1013: PPUSH
1014: LD_INT 35
1016: PPUSH
1017: CALL_OW 428
1021: PPUSH
1022: LD_STRING DRa-spot-4
1024: PPUSH
1025: CALL_OW 88
// end ;
1029: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1030: LD_EXP 21
1034: IFFALSE 1057
1036: PUSH
1037: LD_EXP 14
1041: PPUSH
1042: LD_INT 101
1044: PUSH
1045: LD_INT 2
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 72
1056: AND
1057: IFFALSE 1066
1059: PUSH
1060: LD_EXP 22
1064: NOT
1065: AND
1066: IFFALSE 1390
1068: GO 1070
1070: DISABLE
1071: LD_INT 0
1073: PPUSH
1074: PPUSH
1075: PPUSH
1076: PPUSH
1077: PPUSH
// begin enable ;
1078: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1079: LD_ADDR_VAR 0 1
1083: PUSH
1084: LD_EXP 14
1088: PPUSH
1089: LD_INT 101
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PPUSH
1099: CALL_OW 72
1103: ST_TO_ADDR
// if not tmp then
1104: LD_VAR 0 1
1108: NOT
1109: IFFALSE 1113
// exit ;
1111: GO 1390
// InGameOn ;
1113: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1117: LD_EXP 1
1121: PUSH
1122: LD_EXP 5
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PPUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_EXP 1
1157: PPUSH
1158: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1162: LD_VAR 0 1
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: LD_STRING DG-meeting-1
1173: PPUSH
1174: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1178: LD_ADDR_VAR 0 3
1182: PUSH
1183: LD_INT 81
1185: PUSH
1186: LD_INT 10
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 63
1195: PUSH
1196: LD_INT 25
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 108
1205: PUSH
1206: LD_INT 73
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 9999
1225: PUSH
1226: EMPTY
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// for i := 1 to 3 do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: DOUBLE
1238: LD_INT 1
1240: DEC
1241: ST_TO_ADDR
1242: LD_INT 3
1244: PUSH
1245: FOR_TO
1246: IFFALSE 1330
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_EXP 1
1257: PPUSH
1258: LD_VAR 0 3
1262: PUSH
1263: LD_VAR 0 2
1267: ARRAY
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: LD_VAR 0 3
1277: PUSH
1278: LD_VAR 0 2
1282: ARRAY
1283: PUSH
1284: LD_INT 2
1286: ARRAY
1287: PPUSH
1288: CALL_OW 297
1292: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1293: LD_VAR 0 4
1297: PUSH
1298: LD_INT 1
1300: ARRAY
1301: PUSH
1302: LD_VAR 0 5
1306: GREATER
1307: IFFALSE 1328
// dist := [ tdist , i ] ;
1309: LD_ADDR_VAR 0 4
1313: PUSH
1314: LD_VAR 0 5
1318: PUSH
1319: LD_VAR 0 2
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: ST_TO_ADDR
// end ;
1328: GO 1245
1330: POP
1331: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1332: LD_EXP 1
1336: PPUSH
1337: LD_VAR 0 3
1341: PUSH
1342: LD_VAR 0 4
1346: PUSH
1347: LD_INT 2
1349: ARRAY
1350: ARRAY
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: PPUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_VAR 0 4
1365: PUSH
1366: LD_INT 2
1368: ARRAY
1369: ARRAY
1370: PUSH
1371: LD_INT 2
1373: ARRAY
1374: PPUSH
1375: CALL_OW 111
// wait ( 0 0$3 ) ;
1379: LD_INT 105
1381: PPUSH
1382: CALL_OW 67
// InGameOff ;
1386: CALL_OW 9
// end ;
1390: PPOPN 5
1392: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1393: LD_EXP 1
1397: PPUSH
1398: LD_INT 14
1400: PPUSH
1401: CALL_OW 296
1405: PUSH
1406: LD_INT 40
1408: GREATER
1409: IFFALSE 1422
1411: PUSH
1412: LD_EXP 1
1416: PPUSH
1417: CALL_OW 316
1421: AND
1422: IFFALSE 1431
1424: PUSH
1425: LD_EXP 22
1429: NOT
1430: AND
1431: IFFALSE 1448
1433: GO 1435
1435: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1436: LD_EXP 5
1440: PPUSH
1441: LD_STRING DK-idle-1
1443: PPUSH
1444: CALL_OW 88
// end ;
1448: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1449: LD_INT 2
1451: PPUSH
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: CALL_OW 293
1462: IFFALSE 1471
1464: PUSH
1465: LD_EXP 22
1469: NOT
1470: AND
1471: IFFALSE 1628
1473: GO 1475
1475: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1476: LD_INT 59
1478: PPUSH
1479: LD_INT 47
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 10
1487: NEG
1488: PPUSH
1489: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1493: LD_INT 59
1495: PPUSH
1496: LD_INT 47
1498: PPUSH
1499: CALL_OW 86
// goWithHeike := false ;
1503: LD_ADDR_EXP 18
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// baseSpotted := true ;
1511: LD_ADDR_EXP 19
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// InGameOn ;
1519: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1523: LD_EXP 1
1527: PUSH
1528: LD_EXP 5
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: LD_INT 54
1539: PPUSH
1540: LD_INT 45
1542: PPUSH
1543: CALL_OW 111
// wait ( 0 0$1 ) ;
1547: LD_INT 35
1549: PPUSH
1550: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1554: LD_EXP 1
1558: PUSH
1559: LD_EXP 5
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: LD_INT 59
1570: PPUSH
1571: LD_INT 47
1573: PPUSH
1574: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1578: LD_EXP 1
1582: PPUSH
1583: LD_STRING DH-base-1
1585: PPUSH
1586: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1590: LD_EXP 5
1594: PPUSH
1595: LD_STRING DK-base-1
1597: PPUSH
1598: CALL_OW 88
// InGameOff ;
1602: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1606: LD_ADDR_EXP 17
1610: PUSH
1611: LD_EXP 17
1615: PUSH
1616: LD_INT 1
1618: PLUS
1619: ST_TO_ADDR
// goWithHeike := true ;
1620: LD_ADDR_EXP 18
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// end ;
1628: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1629: LD_INT 2
1631: PPUSH
1632: LD_EXP 8
1636: PPUSH
1637: CALL_OW 292
1641: IFFALSE 1650
1643: PUSH
1644: LD_EXP 22
1648: NOT
1649: AND
1650: IFFALSE 2996
1652: GO 1654
1654: DISABLE
1655: LD_INT 0
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
// begin meetingActive := false ;
1661: LD_ADDR_EXP 21
1665: PUSH
1666: LD_INT 0
1668: ST_TO_ADDR
// goWithHeike := false ;
1669: LD_ADDR_EXP 18
1673: PUSH
1674: LD_INT 0
1676: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: LD_INT 6
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: CALL_OW 517
1692: ST_TO_ADDR
// for i := 1 to 4 do
1693: LD_ADDR_VAR 0 1
1697: PUSH
1698: DOUBLE
1699: LD_INT 1
1701: DEC
1702: ST_TO_ADDR
1703: LD_INT 4
1705: PUSH
1706: FOR_TO
1707: IFFALSE 1774
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1709: LD_EXP 15
1713: PUSH
1714: LD_VAR 0 1
1718: ARRAY
1719: PPUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 1
1727: ARRAY
1728: PUSH
1729: LD_VAR 0 1
1733: ARRAY
1734: PPUSH
1735: LD_VAR 0 2
1739: PUSH
1740: LD_INT 2
1742: ARRAY
1743: PUSH
1744: LD_VAR 0 1
1748: ARRAY
1749: PPUSH
1750: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1754: LD_EXP 15
1758: PUSH
1759: LD_VAR 0 1
1763: ARRAY
1764: PPUSH
1765: LD_INT 14
1767: PPUSH
1768: CALL_OW 179
// end ;
1772: GO 1706
1774: POP
1775: POP
// InGameOn ;
1776: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1780: LD_EXP 8
1784: PPUSH
1785: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1789: LD_EXP 1
1793: PPUSH
1794: LD_EXP 8
1798: PPUSH
1799: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_EXP 1
1812: PPUSH
1813: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1817: LD_INT 10
1819: PPUSH
1820: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1824: LD_EXP 1
1828: PPUSH
1829: LD_EXP 8
1833: PPUSH
1834: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1838: LD_EXP 5
1842: PPUSH
1843: LD_EXP 1
1847: PPUSH
1848: CALL_OW 250
1852: PPUSH
1853: LD_INT 5
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 272
1863: PPUSH
1864: LD_EXP 1
1868: PPUSH
1869: CALL_OW 251
1873: PPUSH
1874: LD_INT 5
1876: PPUSH
1877: LD_INT 1
1879: PPUSH
1880: CALL_OW 273
1884: PPUSH
1885: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1889: LD_EXP 1
1893: PPUSH
1894: LD_EXP 8
1898: PPUSH
1899: CALL_OW 296
1903: PUSH
1904: LD_INT 5
1906: LESS
1907: IFFALSE 1929
1909: PUSH
1910: LD_EXP 5
1914: PPUSH
1915: LD_EXP 8
1919: PPUSH
1920: CALL_OW 296
1924: PUSH
1925: LD_INT 6
1927: LESS
1928: AND
1929: IFFALSE 1817
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1931: LD_EXP 1
1935: PUSH
1936: LD_EXP 5
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PPUSH
1945: LD_EXP 8
1949: PPUSH
1950: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1954: LD_EXP 8
1958: PUSH
1959: LD_EXP 4
1963: PUSH
1964: LD_EXP 9
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PPUSH
1974: LD_EXP 1
1978: PPUSH
1979: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1983: LD_INT 7
1985: PPUSH
1986: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1990: LD_EXP 8
1994: PPUSH
1995: LD_STRING DKu-Kurt-1
1997: PPUSH
1998: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
2002: LD_EXP 5
2006: PPUSH
2007: LD_STRING DK-Kurt-1
2009: PPUSH
2010: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
2014: LD_EXP 8
2018: PPUSH
2019: LD_STRING DKu-Kurt-2
2021: PPUSH
2022: CALL_OW 88
// wait ( 0 0$0.2 ) ;
2026: LD_INT 7
2028: PPUSH
2029: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2033: LD_EXP 1
2037: PPUSH
2038: LD_STRING DH-Kurt-1
2040: PPUSH
2041: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2045: LD_EXP 8
2049: PPUSH
2050: LD_STRING DKu-Kurt-3
2052: PPUSH
2053: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2057: LD_EXP 5
2061: PPUSH
2062: LD_STRING DK-Kurt-3
2064: PPUSH
2065: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2069: LD_EXP 9
2073: PPUSH
2074: LD_STRING DHa-Kurt-3
2076: PPUSH
2077: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2081: LD_EXP 4
2085: PPUSH
2086: LD_STRING DO-Kurt-3
2088: PPUSH
2089: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: LD_EXP 8
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 9
2112: PUSH
2113: LD_EXP 5
2117: PUSH
2118: LD_EXP 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_EXP 16
2134: UNION
2135: ST_TO_ADDR
// for i = 1 to tmp2 do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: DOUBLE
2142: LD_INT 1
2144: DEC
2145: ST_TO_ADDR
2146: LD_VAR 0 3
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2227
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2154: LD_VAR 0 3
2158: PUSH
2159: LD_VAR 0 1
2163: ARRAY
2164: PPUSH
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_VAR 0 1
2178: PUSH
2179: LD_INT 4
2181: PLUS
2182: ARRAY
2183: PPUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 2
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 1
2197: PUSH
2198: LD_INT 4
2200: PLUS
2201: ARRAY
2202: PPUSH
2203: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2207: LD_VAR 0 3
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: PPUSH
2218: LD_INT 14
2220: PPUSH
2221: CALL_OW 179
// end ;
2225: GO 2151
2227: POP
2228: POP
// wait ( 0 0$2 ) ;
2229: LD_INT 70
2231: PPUSH
2232: CALL_OW 67
// CenterOnUnits ( eon ) ;
2236: LD_INT 14
2238: PPUSH
2239: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2243: LD_INT 90
2245: PPUSH
2246: LD_INT 43
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: LD_INT 21
2254: NEG
2255: PPUSH
2256: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2260: LD_EXP 2
2264: PPUSH
2265: LD_INT 84
2267: PPUSH
2268: LD_INT 36
2270: PPUSH
2271: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2275: LD_EXP 2
2279: PPUSH
2280: LD_INT 14
2282: PPUSH
2283: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2287: LD_EXP 11
2291: PPUSH
2292: LD_INT 85
2294: PPUSH
2295: LD_INT 36
2297: PPUSH
2298: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2302: LD_EXP 11
2306: PPUSH
2307: LD_INT 14
2309: PPUSH
2310: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2314: LD_EXP 10
2318: PPUSH
2319: LD_INT 86
2321: PPUSH
2322: LD_INT 36
2324: PPUSH
2325: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2329: LD_EXP 10
2333: PPUSH
2334: LD_INT 14
2336: PPUSH
2337: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2341: LD_EXP 7
2345: PPUSH
2346: LD_INT 87
2348: PPUSH
2349: LD_INT 36
2351: PPUSH
2352: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2356: LD_EXP 7
2360: PPUSH
2361: LD_INT 14
2363: PPUSH
2364: CALL_OW 179
// wait ( 0 0$3 ) ;
2368: LD_INT 105
2370: PPUSH
2371: CALL_OW 67
// p := 0 ;
2375: LD_ADDR_VAR 0 4
2379: PUSH
2380: LD_INT 0
2382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2383: LD_INT 35
2385: PPUSH
2386: CALL_OW 67
// p := p + 1 ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_VAR 0 4
2399: PUSH
2400: LD_INT 1
2402: PLUS
2403: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 6
2411: PPUSH
2412: CALL_OW 308
2416: IFTRUE 2428
2418: PUSH
2419: LD_VAR 0 4
2423: PUSH
2424: LD_INT 10
2426: GREATER
2427: OR
2428: IFFALSE 2383
// heikeNearbyEon := true ;
2430: LD_ADDR_EXP 20
2434: PUSH
2435: LD_INT 1
2437: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2438: LD_EXP 6
2442: PPUSH
2443: LD_INT 88
2445: PPUSH
2446: LD_INT 37
2448: PPUSH
2449: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2453: LD_EXP 6
2457: PPUSH
2458: LD_EXP 13
2462: PUSH
2463: LD_INT 1
2465: ARRAY
2466: PPUSH
2467: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2471: LD_EXP 13
2475: PUSH
2476: LD_INT 1
2478: ARRAY
2479: PPUSH
2480: LD_INT 89
2482: PPUSH
2483: LD_INT 37
2485: PPUSH
2486: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2490: LD_EXP 13
2494: PUSH
2495: LD_INT 2
2497: ARRAY
2498: PPUSH
2499: LD_INT 91
2501: PPUSH
2502: LD_INT 39
2504: PPUSH
2505: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2509: LD_EXP 13
2513: PPUSH
2514: LD_EXP 11
2518: PPUSH
2519: CALL_OW 179
// wait ( 0 0$1 ) ;
2523: LD_INT 35
2525: PPUSH
2526: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2530: LD_EXP 13
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: LD_STRING DS-eon-1
2541: PPUSH
2542: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2546: LD_EXP 6
2550: PPUSH
2551: LD_STRING DSh-eon-1
2553: PPUSH
2554: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2558: LD_EXP 13
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PPUSH
2567: LD_STRING DS-eon-2
2569: PPUSH
2570: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2574: LD_EXP 6
2578: PPUSH
2579: LD_STRING DSh-eon-1a
2581: PPUSH
2582: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2586: LD_EXP 13
2590: PUSH
2591: LD_INT 1
2593: ARRAY
2594: PPUSH
2595: LD_INT 92
2597: PPUSH
2598: LD_INT 43
2600: PPUSH
2601: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2605: LD_EXP 13
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: PPUSH
2614: LD_INT 14
2616: PPUSH
2617: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2621: LD_EXP 13
2625: PUSH
2626: LD_INT 2
2628: ARRAY
2629: PPUSH
2630: LD_INT 93
2632: PPUSH
2633: LD_INT 41
2635: PPUSH
2636: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2640: LD_EXP 13
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_INT 93
2651: PPUSH
2652: LD_INT 40
2654: PPUSH
2655: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2659: LD_EXP 6
2663: PPUSH
2664: LD_INT 88
2666: PPUSH
2667: LD_INT 41
2669: PPUSH
2670: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2674: LD_EXP 6
2678: PPUSH
2679: LD_INT 87
2681: PPUSH
2682: LD_INT 41
2684: PPUSH
2685: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2696: LD_EXP 6
2700: PPUSH
2701: LD_INT 88
2703: PPUSH
2704: LD_INT 41
2706: PPUSH
2707: CALL_OW 307
2711: IFFALSE 2689
// wait ( 0 0$1 ) ;
2713: LD_INT 35
2715: PPUSH
2716: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2720: LD_EXP 6
2724: PPUSH
2725: LD_STRING DSh-eon-2
2727: PPUSH
2728: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2732: LD_EXP 11
2736: PPUSH
2737: LD_INT 87
2739: PPUSH
2740: LD_INT 40
2742: PPUSH
2743: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2747: LD_EXP 11
2751: PPUSH
2752: LD_INT 86
2754: PPUSH
2755: LD_INT 40
2757: PPUSH
2758: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2762: LD_INT 35
2764: PPUSH
2765: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2769: LD_EXP 11
2773: PPUSH
2774: LD_INT 87
2776: PPUSH
2777: LD_INT 40
2779: PPUSH
2780: CALL_OW 307
2784: IFFALSE 2762
// Say ( Shariff , DShar-eon-3 ) ;
2786: LD_EXP 11
2790: PPUSH
2791: LD_STRING DShar-eon-3
2793: PPUSH
2794: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2798: LD_INT 10
2800: PPUSH
2801: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2805: LD_EXP 5
2809: PPUSH
2810: LD_EXP 1
2814: PPUSH
2815: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2819: LD_EXP 11
2823: PPUSH
2824: LD_STRING DShar-eon-4
2826: PPUSH
2827: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2831: LD_EXP 5
2835: PPUSH
2836: LD_STRING DK-eon-4
2838: PPUSH
2839: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2843: LD_EXP 5
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2855: LD_INT 35
2857: PPUSH
2858: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2862: LD_EXP 5
2866: PPUSH
2867: CALL_OW 305
2871: NOT
2872: IFFALSE 2855
// ComTurnUnit ( Shariff , Heike ) ;
2874: LD_EXP 11
2878: PPUSH
2879: LD_EXP 1
2883: PPUSH
2884: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2888: LD_EXP 11
2892: PPUSH
2893: LD_STRING DShar-eon-5
2895: PPUSH
2896: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2900: LD_EXP 1
2904: PPUSH
2905: LD_INT 91
2907: PPUSH
2908: LD_INT 44
2910: PPUSH
2911: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2915: LD_EXP 1
2919: PPUSH
2920: LD_INT 14
2922: PPUSH
2923: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2927: LD_INT 35
2929: PPUSH
2930: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2934: LD_EXP 1
2938: PPUSH
2939: LD_INT 91
2941: PPUSH
2942: LD_INT 44
2944: PPUSH
2945: CALL_OW 307
2949: IFFALSE 2927
// Say ( Heike , DH-eon-5 ) ;
2951: LD_EXP 1
2955: PPUSH
2956: LD_STRING DH-eon-5
2958: PPUSH
2959: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2963: LD_EXP 1
2967: PPUSH
2968: LD_INT 14
2970: PPUSH
2971: CALL_OW 120
// wait ( 0 0$2 ) ;
2975: LD_INT 70
2977: PPUSH
2978: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2982: LD_INT 1
2984: PPUSH
2985: LD_STRING %_cont
2987: PPUSH
2988: CALL_OW 340
// InGameOff ;
2992: CALL_OW 9
// end ;
2996: PPOPN 4
2998: END
// every 3 trigger IsSelected ( Kaia ) do
2999: LD_EXP 5
3003: PPUSH
3004: CALL_OW 306
3008: IFFALSE 3025
3010: GO 3012
3012: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
3013: LD_EXP 5
3017: PPUSH
3018: LD_INT 42
3020: PPUSH
3021: CALL_OW 582
3025: END
// export function PrepareHeikeGroup ; begin
3026: LD_INT 0
3028: PPUSH
// uc_side := 2 ;
3029: LD_ADDR_OWVAR 20
3033: PUSH
3034: LD_INT 2
3036: ST_TO_ADDR
// uc_nation := 2 ;
3037: LD_ADDR_OWVAR 21
3041: PUSH
3042: LD_INT 2
3044: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3045: LD_ADDR_EXP 1
3049: PUSH
3050: LD_STRING Heike
3052: PPUSH
3053: CALL_OW 25
3057: ST_TO_ADDR
// uc_side := 5 ;
3058: LD_ADDR_OWVAR 20
3062: PUSH
3063: LD_INT 5
3065: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3066: LD_ADDR_EXP 5
3070: PUSH
3071: LD_STRING Kaia
3073: PPUSH
3074: CALL_OW 25
3078: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3079: LD_EXP 1
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3094: LD_EXP 5
3098: PPUSH
3099: LD_INT 3
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 49
// end ;
3109: LD_VAR 0 1
3113: RET
// export function PrepareSheikGroup ; var un , i ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
// uc_side := 5 ;
3119: LD_ADDR_OWVAR 20
3123: PUSH
3124: LD_INT 5
3126: ST_TO_ADDR
// uc_nation := 2 ;
3127: LD_ADDR_OWVAR 21
3131: PUSH
3132: LD_INT 2
3134: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3135: LD_ADDR_EXP 10
3139: PUSH
3140: LD_STRING Ali
3142: PPUSH
3143: CALL_OW 25
3147: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3148: LD_ADDR_EXP 11
3152: PUSH
3153: LD_STRING Abdul
3155: PPUSH
3156: CALL_OW 25
3160: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3161: LD_ADDR_EXP 2
3165: PUSH
3166: LD_STRING Omar
3168: PPUSH
3169: CALL_OW 25
3173: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3174: LD_ADDR_EXP 7
3178: PUSH
3179: LD_STRING Mahtab
3181: PPUSH
3182: CALL_OW 25
3186: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3187: LD_ADDR_EXP 6
3191: PUSH
3192: LD_STRING Shahrzad
3194: PPUSH
3195: CALL_OW 25
3199: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3200: LD_EXP 10
3204: PPUSH
3205: LD_INT 85
3207: PPUSH
3208: LD_INT 37
3210: PPUSH
3211: LD_INT 0
3213: PPUSH
3214: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3218: LD_EXP 11
3222: PPUSH
3223: LD_INT 87
3225: PPUSH
3226: LD_INT 37
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3236: LD_EXP 2
3240: PPUSH
3241: LD_INT 85
3243: PPUSH
3244: LD_INT 35
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3254: LD_EXP 7
3258: PPUSH
3259: LD_INT 86
3261: PPUSH
3262: LD_INT 39
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3272: LD_EXP 6
3276: PPUSH
3277: LD_INT 88
3279: PPUSH
3280: LD_INT 39
3282: PPUSH
3283: LD_INT 0
3285: PPUSH
3286: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3290: LD_EXP 10
3294: PPUSH
3295: LD_EXP 11
3299: PPUSH
3300: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3304: LD_EXP 11
3308: PPUSH
3309: LD_EXP 10
3313: PPUSH
3314: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3318: LD_EXP 2
3322: PPUSH
3323: LD_EXP 11
3327: PPUSH
3328: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3332: LD_EXP 7
3336: PUSH
3337: LD_EXP 6
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PPUSH
3346: LD_EXP 11
3350: PPUSH
3351: CALL_OW 119
// for i := 1 to 2 do
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 2
3367: PUSH
3368: FOR_TO
3369: IFFALSE 3455
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3371: LD_INT 2
3373: PPUSH
3374: LD_INT 4
3376: PPUSH
3377: LD_INT 6
3379: PPUSH
3380: CALL_OW 380
// un := CreateHuman ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: CALL_OW 44
3393: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3394: LD_VAR 0 2
3398: PPUSH
3399: LD_INT 90
3401: PPUSH
3402: LD_INT 44
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3415: LD_VAR 0 2
3419: PPUSH
3420: LD_INT 91
3422: PPUSH
3423: LD_INT 43
3425: PPUSH
3426: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3430: LD_ADDR_EXP 13
3434: PUSH
3435: LD_EXP 13
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_VAR 0 2
3447: PPUSH
3448: CALL_OW 2
3452: ST_TO_ADDR
// end ;
3453: GO 3368
3455: POP
3456: POP
// scientists := scientists diff 0 ;
3457: LD_ADDR_EXP 13
3461: PUSH
3462: LD_EXP 13
3466: PUSH
3467: LD_INT 0
3469: DIFF
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 1
3475: RET
// export function PrepareKurtGroup ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 5 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 5
3487: ST_TO_ADDR
// uc_nation := 2 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 2
3495: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3496: LD_ADDR_EXP 8
3500: PUSH
3501: LD_STRING Kurt
3503: PPUSH
3504: CALL_OW 25
3508: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3509: LD_ADDR_EXP 4
3513: PUSH
3514: LD_STRING Olaf
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3522: LD_ADDR_EXP 9
3526: PUSH
3527: LD_STRING Hans
3529: PPUSH
3530: CALL_OW 25
3534: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: LD_EXP 8
3544: PUSH
3545: LD_EXP 9
3549: PUSH
3550: LD_EXP 4
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: FOR_IN
3561: IFFALSE 3580
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3563: LD_VAR 0 2
3567: PPUSH
3568: LD_INT 10
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 49
3578: GO 3560
3580: POP
3581: POP
// ComTurnUnit ( Kurt , Hans ) ;
3582: LD_EXP 8
3586: PPUSH
3587: LD_EXP 9
3591: PPUSH
3592: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3596: LD_EXP 4
3600: PPUSH
3601: LD_EXP 9
3605: PPUSH
3606: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3610: LD_EXP 9
3614: PPUSH
3615: LD_EXP 4
3619: PPUSH
3620: CALL_OW 119
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
3634: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3635: LD_ADDR_VAR 0 2
3639: PUSH
3640: LD_INT 21
3642: PUSH
3643: LD_INT 3
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 69
3654: PUSH
3655: LD_INT 14
3657: DIFF
3658: PUSH
3659: FOR_IN
3660: IFFALSE 3740
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3662: LD_VAR 0 2
3666: PPUSH
3667: CALL_OW 266
3671: PUSH
3672: LD_INT 6
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: IN
3682: IFFALSE 3706
// SetLives ( i , rand ( 500 , 600 ) ) else
3684: LD_VAR 0 2
3688: PPUSH
3689: LD_INT 500
3691: PPUSH
3692: LD_INT 600
3694: PPUSH
3695: CALL_OW 12
3699: PPUSH
3700: CALL_OW 234
3704: GO 3726
// SetLives ( i , rand ( 300 , 499 ) ) ;
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 300
3713: PPUSH
3714: LD_INT 499
3716: PPUSH
3717: CALL_OW 12
3721: PPUSH
3722: CALL_OW 234
// SetSide ( i , 5 ) ;
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_INT 5
3733: PPUSH
3734: CALL_OW 235
// end ;
3738: GO 3659
3740: POP
3741: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_INT 9
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 517
3757: ST_TO_ADDR
// uc_side := 4 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_INT 4
3765: ST_TO_ADDR
// uc_nation := 1 ;
3766: LD_ADDR_OWVAR 21
3770: PUSH
3771: LD_INT 1
3773: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3774: LD_ADDR_VAR 0 2
3778: PUSH
3779: DOUBLE
3780: LD_INT 1
3782: DEC
3783: ST_TO_ADDR
3784: LD_VAR 0 4
3788: PUSH
3789: LD_INT 1
3791: ARRAY
3792: PUSH
3793: FOR_TO
3794: IFFALSE 3870
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3796: LD_INT 0
3798: PPUSH
3799: LD_INT 1
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_VAR 0 2
3817: PUSH
3818: LD_INT 3
3820: MOD
3821: PUSH
3822: LD_INT 1
3824: PLUS
3825: ARRAY
3826: PPUSH
3827: LD_INT 0
3829: PPUSH
3830: CALL_OW 380
// un := CreateHuman ;
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: CALL_OW 44
3843: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 9
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// KillUnit ( un ) ;
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 66
// end ;
3868: GO 3793
3870: POP
3871: POP
// end ;
3872: LD_VAR 0 1
3876: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
// uc_side := 5 ;
3886: LD_ADDR_OWVAR 20
3890: PUSH
3891: LD_INT 5
3893: ST_TO_ADDR
// uc_nation := 2 ;
3894: LD_ADDR_OWVAR 21
3898: PUSH
3899: LD_INT 2
3901: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3902: LD_ADDR_VAR 0 6
3906: PUSH
3907: LD_INT 2
3909: PUSH
3910: LD_INT 4
3912: PUSH
3913: LD_INT 5
3915: PUSH
3916: LD_INT 14
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: ST_TO_ADDR
// InitHc ;
3925: CALL_OW 19
// for i in area do
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_VAR 0 6
3938: PUSH
3939: FOR_IN
3940: IFFALSE 4104
// begin tmp := AreaToList ( i , 0 ) ;
3942: LD_ADDR_VAR 0 5
3946: PUSH
3947: LD_VAR 0 2
3951: PPUSH
3952: LD_INT 0
3954: PPUSH
3955: CALL_OW 517
3959: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: DOUBLE
3966: LD_INT 1
3968: DEC
3969: ST_TO_ADDR
3970: LD_VAR 0 5
3974: PUSH
3975: LD_INT 1
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4100
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3982: LD_INT 1
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: LD_INT 3
3990: PPUSH
3991: CALL_OW 380
// un := CreateHuman ;
3995: LD_ADDR_VAR 0 7
3999: PUSH
4000: CALL_OW 44
4004: ST_TO_ADDR
// if i = spawnBaseArea3 then
4005: LD_VAR 0 2
4009: PUSH
4010: LD_INT 5
4012: EQUAL
4013: IFFALSE 4031
// eonGuards := eonGuards ^ un ;
4015: LD_ADDR_EXP 14
4019: PUSH
4020: LD_EXP 14
4024: PUSH
4025: LD_VAR 0 7
4029: ADD
4030: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4031: LD_VAR 0 7
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// ComHold ( un ) ;
4048: LD_VAR 0 7
4052: PPUSH
4053: CALL_OW 140
// if i = spawnBaseArea4 then
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 14
4064: EQUAL
4065: IFFALSE 4098
// begin firstGroup := firstGroup ^ un ;
4067: LD_ADDR_EXP 15
4071: PUSH
4072: LD_EXP 15
4076: PUSH
4077: LD_VAR 0 7
4081: ADD
4082: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4083: LD_VAR 0 7
4087: PPUSH
4088: LD_INT 108
4090: PPUSH
4091: LD_INT 47
4093: PPUSH
4094: CALL_OW 118
// end ; end ;
4098: GO 3979
4100: POP
4101: POP
// end ;
4102: GO 3939
4104: POP
4105: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4106: LD_ADDR_VAR 0 2
4110: PUSH
4111: DOUBLE
4112: LD_INT 1
4114: DEC
4115: ST_TO_ADDR
4116: LD_INT 30
4118: PUSH
4119: LD_INT 31
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PPUSH
4126: CALL_OW 69
4130: PUSH
4131: FOR_TO
4132: IFFALSE 4226
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 30
4141: PUSH
4142: LD_INT 31
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_VAR 0 2
4158: ARRAY
4159: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4160: LD_INT 1
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 3
4168: PPUSH
4169: CALL_OW 380
// un := CreateHuman ;
4173: LD_ADDR_VAR 0 7
4177: PUSH
4178: CALL_OW 44
4182: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4183: LD_VAR 0 7
4187: PPUSH
4188: LD_VAR 0 4
4192: PPUSH
4193: CALL_OW 254
4197: PUSH
4198: LD_INT 3
4200: PLUS
4201: PUSH
4202: LD_INT 6
4204: MOD
4205: PPUSH
4206: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4210: LD_VAR 0 7
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4131
4226: POP
4227: POP
// PrepareSoldier ( sex_male , 3 ) ;
4228: LD_INT 1
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 381
// un := CreateHuman ;
4238: LD_ADDR_VAR 0 7
4242: PUSH
4243: CALL_OW 44
4247: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4248: LD_VAR 0 7
4252: PPUSH
4253: LD_INT 71
4255: PPUSH
4256: LD_INT 84
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 67348 0 5
// ComHold ( un ) ;
4269: LD_VAR 0 7
4273: PPUSH
4274: CALL_OW 140
// un := CreateHuman ;
4278: LD_ADDR_VAR 0 7
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4288: LD_VAR 0 7
4292: PPUSH
4293: LD_INT 35
4295: PPUSH
4296: LD_INT 35
4298: PPUSH
4299: LD_INT 3
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: CALL 67348 0 5
// ComHold ( un ) ;
4309: LD_VAR 0 7
4313: PPUSH
4314: CALL_OW 140
// end ; end_of_file
4318: LD_VAR 0 1
4322: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4323: LD_VAR 0 1
4327: PUSH
4328: LD_INT 2
4330: EQUAL
4331: IFFALSE 4343
4333: PUSH
4334: LD_VAR 0 2
4338: PUSH
4339: LD_INT 5
4341: EQUAL
4342: AND
4343: IFFALSE 4369
// begin kaiaAttacked := true ;
4345: LD_ADDR_EXP 22
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4353: LD_INT 2
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: LD_INT 2
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: CALL_OW 80
// end ; end ;
4369: PPOPN 2
4371: END
// every 0 0$1 trigger scientists do var i ;
4372: LD_EXP 13
4376: IFFALSE 4584
4378: GO 4380
4380: DISABLE
4381: LD_INT 0
4383: PPUSH
// begin repeat for i in scientists do
4384: LD_ADDR_VAR 0 1
4388: PUSH
4389: LD_EXP 13
4393: PUSH
4394: FOR_IN
4395: IFFALSE 4569
// begin wait ( 0 0$1 ) ;
4397: LD_INT 35
4399: PPUSH
4400: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4404: LD_VAR 0 1
4408: PPUSH
4409: LD_INT 11
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_VAR 0 1
4423: PUSH
4424: LD_INT 2
4426: MOD
4427: PUSH
4428: LD_INT 1
4430: PLUS
4431: ARRAY
4432: PPUSH
4433: CALL_OW 308
4437: NOT
4438: IFFALSE 4473
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_INT 11
4447: PUSH
4448: LD_INT 13
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_VAR 0 1
4459: PUSH
4460: LD_INT 2
4462: MOD
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: ARRAY
4468: PPUSH
4469: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 14
4480: PPUSH
4481: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 70
4492: PPUSH
4493: CALL_OW 202
// if rand ( 0 , 1 ) then
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL_OW 12
4507: IFFALSE 4521
// AddComAnim ( i , 15 ) ;
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 15
4516: PPUSH
4517: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4521: LD_VAR 0 1
4525: PPUSH
4526: LD_INT 35
4528: PPUSH
4529: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4533: LD_VAR 0 1
4537: PPUSH
4538: LD_INT 12
4540: PPUSH
4541: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4545: LD_VAR 0 1
4549: PPUSH
4550: LD_INT 93
4552: PPUSH
4553: LD_INT 40
4555: PPUSH
4556: CALL_OW 178
// wait ( 0 0$1 ) ;
4560: LD_INT 35
4562: PPUSH
4563: CALL_OW 67
// end ;
4567: GO 4394
4569: POP
4570: POP
// wait ( 0 0$10 ) ;
4571: LD_INT 350
4573: PPUSH
4574: CALL_OW 67
// until heikeNearbyEon ;
4578: LD_EXP 20
4582: IFFALSE 4384
// end ; end_of_file
4584: PPOPN 1
4586: END
// export globalGameSaveCounter ; every 0 0$1 do
4587: GO 4589
4589: DISABLE
// begin enable ;
4590: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4591: LD_STRING updateTimer(
4593: PUSH
4594: LD_OWVAR 1
4598: STR
4599: PUSH
4600: LD_STRING );
4602: STR
4603: PPUSH
4604: CALL_OW 559
// end ;
4608: END
// every 0 0$1 do
4609: GO 4611
4611: DISABLE
// begin globalGameSaveCounter := 0 ;
4612: LD_ADDR_EXP 23
4616: PUSH
4617: LD_INT 0
4619: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4620: LD_STRING setGameSaveCounter(0)
4622: PPUSH
4623: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4627: LD_STRING initStreamRollete();
4629: PPUSH
4630: CALL_OW 559
// InitStreamMode ;
4634: CALL 5979 0 0
// DefineStreamItems ( false ) ;
4638: LD_INT 0
4640: PPUSH
4641: CALL 6443 0 1
// end ;
4645: END
// export function SOS_MapStart ( ) ; begin
4646: LD_INT 0
4648: PPUSH
// if streamModeActive then
4649: LD_EXP 24
4653: IFFALSE 4662
// DefineStreamItems ( true ) ;
4655: LD_INT 1
4657: PPUSH
4658: CALL 6443 0 1
// UpdateLuaVariables ( ) ;
4662: CALL 4679 0 0
// UpdateFactoryWaypoints ( ) ;
4666: CALL 19565 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4670: CALL 19817 0 0
// end ;
4674: LD_VAR 0 1
4678: RET
// function UpdateLuaVariables ( ) ; begin
4679: LD_INT 0
4681: PPUSH
// if globalGameSaveCounter then
4682: LD_EXP 23
4686: IFFALSE 4720
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4688: LD_ADDR_EXP 23
4692: PUSH
4693: LD_EXP 23
4697: PPUSH
4698: CALL 66561 0 1
4702: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4703: LD_STRING setGameSaveCounter(
4705: PUSH
4706: LD_EXP 23
4710: STR
4711: PUSH
4712: LD_STRING )
4714: STR
4715: PPUSH
4716: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4720: LD_STRING setGameDifficulty(
4722: PUSH
4723: LD_OWVAR 67
4727: STR
4728: PUSH
4729: LD_STRING )
4731: STR
4732: PPUSH
4733: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4737: LD_STRING displayDifficulty(
4739: PUSH
4740: LD_OWVAR 67
4744: STR
4745: PUSH
4746: LD_STRING )
4748: STR
4749: PPUSH
4750: CALL_OW 559
// end ;
4754: LD_VAR 0 1
4758: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4759: LD_INT 0
4761: PPUSH
// if p2 = stream_mode then
4762: LD_VAR 0 2
4766: PUSH
4767: LD_INT 100
4769: EQUAL
4770: IFFALSE 5773
// begin if not StreamModeActive then
4772: LD_EXP 24
4776: NOT
4777: IFFALSE 4787
// StreamModeActive := true ;
4779: LD_ADDR_EXP 24
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 0 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 0
4794: EQUAL
4795: IFFALSE 4801
// InitStreamMode ;
4797: CALL 5979 0 0
// if p3 = 1 then
4801: LD_VAR 0 3
4805: PUSH
4806: LD_INT 1
4808: EQUAL
4809: IFFALSE 4819
// sRocket := true ;
4811: LD_ADDR_EXP 29
4815: PUSH
4816: LD_INT 1
4818: ST_TO_ADDR
// if p3 = 2 then
4819: LD_VAR 0 3
4823: PUSH
4824: LD_INT 2
4826: EQUAL
4827: IFFALSE 4837
// sSpeed := true ;
4829: LD_ADDR_EXP 28
4833: PUSH
4834: LD_INT 1
4836: ST_TO_ADDR
// if p3 = 3 then
4837: LD_VAR 0 3
4841: PUSH
4842: LD_INT 3
4844: EQUAL
4845: IFFALSE 4855
// sEngine := true ;
4847: LD_ADDR_EXP 30
4851: PUSH
4852: LD_INT 1
4854: ST_TO_ADDR
// if p3 = 4 then
4855: LD_VAR 0 3
4859: PUSH
4860: LD_INT 4
4862: EQUAL
4863: IFFALSE 4873
// sSpec := true ;
4865: LD_ADDR_EXP 27
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// if p3 = 5 then
4873: LD_VAR 0 3
4877: PUSH
4878: LD_INT 5
4880: EQUAL
4881: IFFALSE 4891
// sLevel := true ;
4883: LD_ADDR_EXP 31
4887: PUSH
4888: LD_INT 1
4890: ST_TO_ADDR
// if p3 = 6 then
4891: LD_VAR 0 3
4895: PUSH
4896: LD_INT 6
4898: EQUAL
4899: IFFALSE 4909
// sArmoury := true ;
4901: LD_ADDR_EXP 32
4905: PUSH
4906: LD_INT 1
4908: ST_TO_ADDR
// if p3 = 7 then
4909: LD_VAR 0 3
4913: PUSH
4914: LD_INT 7
4916: EQUAL
4917: IFFALSE 4927
// sRadar := true ;
4919: LD_ADDR_EXP 33
4923: PUSH
4924: LD_INT 1
4926: ST_TO_ADDR
// if p3 = 8 then
4927: LD_VAR 0 3
4931: PUSH
4932: LD_INT 8
4934: EQUAL
4935: IFFALSE 4945
// sBunker := true ;
4937: LD_ADDR_EXP 34
4941: PUSH
4942: LD_INT 1
4944: ST_TO_ADDR
// if p3 = 9 then
4945: LD_VAR 0 3
4949: PUSH
4950: LD_INT 9
4952: EQUAL
4953: IFFALSE 4963
// sHack := true ;
4955: LD_ADDR_EXP 35
4959: PUSH
4960: LD_INT 1
4962: ST_TO_ADDR
// if p3 = 10 then
4963: LD_VAR 0 3
4967: PUSH
4968: LD_INT 10
4970: EQUAL
4971: IFFALSE 4981
// sFire := true ;
4973: LD_ADDR_EXP 36
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// if p3 = 11 then
4981: LD_VAR 0 3
4985: PUSH
4986: LD_INT 11
4988: EQUAL
4989: IFFALSE 4999
// sRefresh := true ;
4991: LD_ADDR_EXP 37
4995: PUSH
4996: LD_INT 1
4998: ST_TO_ADDR
// if p3 = 12 then
4999: LD_VAR 0 3
5003: PUSH
5004: LD_INT 12
5006: EQUAL
5007: IFFALSE 5017
// sExp := true ;
5009: LD_ADDR_EXP 38
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// if p3 = 13 then
5017: LD_VAR 0 3
5021: PUSH
5022: LD_INT 13
5024: EQUAL
5025: IFFALSE 5035
// sDepot := true ;
5027: LD_ADDR_EXP 39
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// if p3 = 14 then
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 14
5042: EQUAL
5043: IFFALSE 5053
// sFlag := true ;
5045: LD_ADDR_EXP 40
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// if p3 = 15 then
5053: LD_VAR 0 3
5057: PUSH
5058: LD_INT 15
5060: EQUAL
5061: IFFALSE 5071
// sKamikadze := true ;
5063: LD_ADDR_EXP 48
5067: PUSH
5068: LD_INT 1
5070: ST_TO_ADDR
// if p3 = 16 then
5071: LD_VAR 0 3
5075: PUSH
5076: LD_INT 16
5078: EQUAL
5079: IFFALSE 5089
// sTroll := true ;
5081: LD_ADDR_EXP 49
5085: PUSH
5086: LD_INT 1
5088: ST_TO_ADDR
// if p3 = 17 then
5089: LD_VAR 0 3
5093: PUSH
5094: LD_INT 17
5096: EQUAL
5097: IFFALSE 5107
// sSlow := true ;
5099: LD_ADDR_EXP 50
5103: PUSH
5104: LD_INT 1
5106: ST_TO_ADDR
// if p3 = 18 then
5107: LD_VAR 0 3
5111: PUSH
5112: LD_INT 18
5114: EQUAL
5115: IFFALSE 5125
// sLack := true ;
5117: LD_ADDR_EXP 51
5121: PUSH
5122: LD_INT 1
5124: ST_TO_ADDR
// if p3 = 19 then
5125: LD_VAR 0 3
5129: PUSH
5130: LD_INT 19
5132: EQUAL
5133: IFFALSE 5143
// sTank := true ;
5135: LD_ADDR_EXP 53
5139: PUSH
5140: LD_INT 1
5142: ST_TO_ADDR
// if p3 = 20 then
5143: LD_VAR 0 3
5147: PUSH
5148: LD_INT 20
5150: EQUAL
5151: IFFALSE 5161
// sRemote := true ;
5153: LD_ADDR_EXP 54
5157: PUSH
5158: LD_INT 1
5160: ST_TO_ADDR
// if p3 = 21 then
5161: LD_VAR 0 3
5165: PUSH
5166: LD_INT 21
5168: EQUAL
5169: IFFALSE 5179
// sPowell := true ;
5171: LD_ADDR_EXP 55
5175: PUSH
5176: LD_INT 1
5178: ST_TO_ADDR
// if p3 = 22 then
5179: LD_VAR 0 3
5183: PUSH
5184: LD_INT 22
5186: EQUAL
5187: IFFALSE 5197
// sTeleport := true ;
5189: LD_ADDR_EXP 58
5193: PUSH
5194: LD_INT 1
5196: ST_TO_ADDR
// if p3 = 23 then
5197: LD_VAR 0 3
5201: PUSH
5202: LD_INT 23
5204: EQUAL
5205: IFFALSE 5215
// sOilTower := true ;
5207: LD_ADDR_EXP 60
5211: PUSH
5212: LD_INT 1
5214: ST_TO_ADDR
// if p3 = 24 then
5215: LD_VAR 0 3
5219: PUSH
5220: LD_INT 24
5222: EQUAL
5223: IFFALSE 5233
// sShovel := true ;
5225: LD_ADDR_EXP 61
5229: PUSH
5230: LD_INT 1
5232: ST_TO_ADDR
// if p3 = 25 then
5233: LD_VAR 0 3
5237: PUSH
5238: LD_INT 25
5240: EQUAL
5241: IFFALSE 5251
// sSheik := true ;
5243: LD_ADDR_EXP 62
5247: PUSH
5248: LD_INT 1
5250: ST_TO_ADDR
// if p3 = 26 then
5251: LD_VAR 0 3
5255: PUSH
5256: LD_INT 26
5258: EQUAL
5259: IFFALSE 5269
// sEarthquake := true ;
5261: LD_ADDR_EXP 64
5265: PUSH
5266: LD_INT 1
5268: ST_TO_ADDR
// if p3 = 27 then
5269: LD_VAR 0 3
5273: PUSH
5274: LD_INT 27
5276: EQUAL
5277: IFFALSE 5287
// sAI := true ;
5279: LD_ADDR_EXP 65
5283: PUSH
5284: LD_INT 1
5286: ST_TO_ADDR
// if p3 = 28 then
5287: LD_VAR 0 3
5291: PUSH
5292: LD_INT 28
5294: EQUAL
5295: IFFALSE 5305
// sCargo := true ;
5297: LD_ADDR_EXP 68
5301: PUSH
5302: LD_INT 1
5304: ST_TO_ADDR
// if p3 = 29 then
5305: LD_VAR 0 3
5309: PUSH
5310: LD_INT 29
5312: EQUAL
5313: IFFALSE 5323
// sDLaser := true ;
5315: LD_ADDR_EXP 69
5319: PUSH
5320: LD_INT 1
5322: ST_TO_ADDR
// if p3 = 30 then
5323: LD_VAR 0 3
5327: PUSH
5328: LD_INT 30
5330: EQUAL
5331: IFFALSE 5341
// sExchange := true ;
5333: LD_ADDR_EXP 70
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// if p3 = 31 then
5341: LD_VAR 0 3
5345: PUSH
5346: LD_INT 31
5348: EQUAL
5349: IFFALSE 5359
// sFac := true ;
5351: LD_ADDR_EXP 71
5355: PUSH
5356: LD_INT 1
5358: ST_TO_ADDR
// if p3 = 32 then
5359: LD_VAR 0 3
5363: PUSH
5364: LD_INT 32
5366: EQUAL
5367: IFFALSE 5377
// sPower := true ;
5369: LD_ADDR_EXP 72
5373: PUSH
5374: LD_INT 1
5376: ST_TO_ADDR
// if p3 = 33 then
5377: LD_VAR 0 3
5381: PUSH
5382: LD_INT 33
5384: EQUAL
5385: IFFALSE 5395
// sRandom := true ;
5387: LD_ADDR_EXP 73
5391: PUSH
5392: LD_INT 1
5394: ST_TO_ADDR
// if p3 = 34 then
5395: LD_VAR 0 3
5399: PUSH
5400: LD_INT 34
5402: EQUAL
5403: IFFALSE 5413
// sShield := true ;
5405: LD_ADDR_EXP 74
5409: PUSH
5410: LD_INT 1
5412: ST_TO_ADDR
// if p3 = 35 then
5413: LD_VAR 0 3
5417: PUSH
5418: LD_INT 35
5420: EQUAL
5421: IFFALSE 5431
// sTime := true ;
5423: LD_ADDR_EXP 75
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// if p3 = 36 then
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 36
5438: EQUAL
5439: IFFALSE 5449
// sTools := true ;
5441: LD_ADDR_EXP 76
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// if p3 = 101 then
5449: LD_VAR 0 3
5453: PUSH
5454: LD_INT 101
5456: EQUAL
5457: IFFALSE 5467
// sSold := true ;
5459: LD_ADDR_EXP 41
5463: PUSH
5464: LD_INT 1
5466: ST_TO_ADDR
// if p3 = 102 then
5467: LD_VAR 0 3
5471: PUSH
5472: LD_INT 102
5474: EQUAL
5475: IFFALSE 5485
// sDiff := true ;
5477: LD_ADDR_EXP 42
5481: PUSH
5482: LD_INT 1
5484: ST_TO_ADDR
// if p3 = 103 then
5485: LD_VAR 0 3
5489: PUSH
5490: LD_INT 103
5492: EQUAL
5493: IFFALSE 5503
// sFog := true ;
5495: LD_ADDR_EXP 45
5499: PUSH
5500: LD_INT 1
5502: ST_TO_ADDR
// if p3 = 104 then
5503: LD_VAR 0 3
5507: PUSH
5508: LD_INT 104
5510: EQUAL
5511: IFFALSE 5521
// sReset := true ;
5513: LD_ADDR_EXP 46
5517: PUSH
5518: LD_INT 1
5520: ST_TO_ADDR
// if p3 = 105 then
5521: LD_VAR 0 3
5525: PUSH
5526: LD_INT 105
5528: EQUAL
5529: IFFALSE 5539
// sSun := true ;
5531: LD_ADDR_EXP 47
5535: PUSH
5536: LD_INT 1
5538: ST_TO_ADDR
// if p3 = 106 then
5539: LD_VAR 0 3
5543: PUSH
5544: LD_INT 106
5546: EQUAL
5547: IFFALSE 5557
// sTiger := true ;
5549: LD_ADDR_EXP 43
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// if p3 = 107 then
5557: LD_VAR 0 3
5561: PUSH
5562: LD_INT 107
5564: EQUAL
5565: IFFALSE 5575
// sBomb := true ;
5567: LD_ADDR_EXP 44
5571: PUSH
5572: LD_INT 1
5574: ST_TO_ADDR
// if p3 = 108 then
5575: LD_VAR 0 3
5579: PUSH
5580: LD_INT 108
5582: EQUAL
5583: IFFALSE 5593
// sWound := true ;
5585: LD_ADDR_EXP 52
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// if p3 = 109 then
5593: LD_VAR 0 3
5597: PUSH
5598: LD_INT 109
5600: EQUAL
5601: IFFALSE 5611
// sBetray := true ;
5603: LD_ADDR_EXP 56
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// if p3 = 110 then
5611: LD_VAR 0 3
5615: PUSH
5616: LD_INT 110
5618: EQUAL
5619: IFFALSE 5629
// sContamin := true ;
5621: LD_ADDR_EXP 57
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// if p3 = 111 then
5629: LD_VAR 0 3
5633: PUSH
5634: LD_INT 111
5636: EQUAL
5637: IFFALSE 5647
// sOil := true ;
5639: LD_ADDR_EXP 59
5643: PUSH
5644: LD_INT 1
5646: ST_TO_ADDR
// if p3 = 112 then
5647: LD_VAR 0 3
5651: PUSH
5652: LD_INT 112
5654: EQUAL
5655: IFFALSE 5665
// sStu := true ;
5657: LD_ADDR_EXP 63
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// if p3 = 113 then
5665: LD_VAR 0 3
5669: PUSH
5670: LD_INT 113
5672: EQUAL
5673: IFFALSE 5683
// sBazooka := true ;
5675: LD_ADDR_EXP 66
5679: PUSH
5680: LD_INT 1
5682: ST_TO_ADDR
// if p3 = 114 then
5683: LD_VAR 0 3
5687: PUSH
5688: LD_INT 114
5690: EQUAL
5691: IFFALSE 5701
// sMortar := true ;
5693: LD_ADDR_EXP 67
5697: PUSH
5698: LD_INT 1
5700: ST_TO_ADDR
// if p3 = 115 then
5701: LD_VAR 0 3
5705: PUSH
5706: LD_INT 115
5708: EQUAL
5709: IFFALSE 5719
// sRanger := true ;
5711: LD_ADDR_EXP 77
5715: PUSH
5716: LD_INT 1
5718: ST_TO_ADDR
// if p3 = 116 then
5719: LD_VAR 0 3
5723: PUSH
5724: LD_INT 116
5726: EQUAL
5727: IFFALSE 5737
// sComputer := true ;
5729: LD_ADDR_EXP 78
5733: PUSH
5734: LD_INT 1
5736: ST_TO_ADDR
// if p3 = 117 then
5737: LD_VAR 0 3
5741: PUSH
5742: LD_INT 117
5744: EQUAL
5745: IFFALSE 5755
// s30 := true ;
5747: LD_ADDR_EXP 79
5751: PUSH
5752: LD_INT 1
5754: ST_TO_ADDR
// if p3 = 118 then
5755: LD_VAR 0 3
5759: PUSH
5760: LD_INT 118
5762: EQUAL
5763: IFFALSE 5773
// s60 := true ;
5765: LD_ADDR_EXP 80
5769: PUSH
5770: LD_INT 1
5772: ST_TO_ADDR
// end ; if p2 = hack_mode then
5773: LD_VAR 0 2
5777: PUSH
5778: LD_INT 101
5780: EQUAL
5781: IFFALSE 5909
// begin case p3 of 1 :
5783: LD_VAR 0 3
5787: PUSH
5788: LD_INT 1
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5796
5794: GO 5803
5796: POP
// hHackUnlimitedResources ; 2 :
5797: CALL 18172 0 0
5801: GO 5909
5803: LD_INT 2
5805: DOUBLE
5806: EQUAL
5807: IFTRUE 5811
5809: GO 5818
5811: POP
// hHackSetLevel10 ; 3 :
5812: CALL 18305 0 0
5816: GO 5909
5818: LD_INT 3
5820: DOUBLE
5821: EQUAL
5822: IFTRUE 5826
5824: GO 5833
5826: POP
// hHackSetLevel10YourUnits ; 4 :
5827: CALL 18390 0 0
5831: GO 5909
5833: LD_INT 4
5835: DOUBLE
5836: EQUAL
5837: IFTRUE 5841
5839: GO 5848
5841: POP
// hHackInvincible ; 5 :
5842: CALL 18838 0 0
5846: GO 5909
5848: LD_INT 5
5850: DOUBLE
5851: EQUAL
5852: IFTRUE 5856
5854: GO 5863
5856: POP
// hHackInvisible ; 6 :
5857: CALL 18949 0 0
5861: GO 5909
5863: LD_INT 6
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5878
5871: POP
// hHackChangeYourSide ; 7 :
5872: CALL 19006 0 0
5876: GO 5909
5878: LD_INT 7
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5893
5886: POP
// hHackChangeUnitSide ; 8 :
5887: CALL 19048 0 0
5891: GO 5909
5893: LD_INT 8
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5908
5901: POP
// hHackFog ; end ;
5902: CALL 19149 0 0
5906: GO 5909
5908: POP
// end ; if p2 = game_save_mode then
5909: LD_VAR 0 2
5913: PUSH
5914: LD_INT 102
5916: EQUAL
5917: IFFALSE 5974
// begin if p3 = 1 then
5919: LD_VAR 0 3
5923: PUSH
5924: LD_INT 1
5926: EQUAL
5927: IFFALSE 5939
// globalGameSaveCounter := p4 ;
5929: LD_ADDR_EXP 23
5933: PUSH
5934: LD_VAR 0 4
5938: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 2
5946: EQUAL
5947: IFFALSE 5955
5949: PUSH
5950: LD_EXP 23
5954: AND
5955: IFFALSE 5974
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5957: LD_STRING setGameSaveCounter(
5959: PUSH
5960: LD_EXP 23
5964: STR
5965: PUSH
5966: LD_STRING )
5968: STR
5969: PPUSH
5970: CALL_OW 559
// end ; end ;
5974: LD_VAR 0 7
5978: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5979: LD_INT 0
5981: PPUSH
// streamModeActive := false ;
5982: LD_ADDR_EXP 24
5986: PUSH
5987: LD_INT 0
5989: ST_TO_ADDR
// normalCounter := 36 ;
5990: LD_ADDR_EXP 25
5994: PUSH
5995: LD_INT 36
5997: ST_TO_ADDR
// hardcoreCounter := 18 ;
5998: LD_ADDR_EXP 26
6002: PUSH
6003: LD_INT 18
6005: ST_TO_ADDR
// sRocket := false ;
6006: LD_ADDR_EXP 29
6010: PUSH
6011: LD_INT 0
6013: ST_TO_ADDR
// sSpeed := false ;
6014: LD_ADDR_EXP 28
6018: PUSH
6019: LD_INT 0
6021: ST_TO_ADDR
// sEngine := false ;
6022: LD_ADDR_EXP 30
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sSpec := false ;
6030: LD_ADDR_EXP 27
6034: PUSH
6035: LD_INT 0
6037: ST_TO_ADDR
// sLevel := false ;
6038: LD_ADDR_EXP 31
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// sArmoury := false ;
6046: LD_ADDR_EXP 32
6050: PUSH
6051: LD_INT 0
6053: ST_TO_ADDR
// sRadar := false ;
6054: LD_ADDR_EXP 33
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// sBunker := false ;
6062: LD_ADDR_EXP 34
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// sHack := false ;
6070: LD_ADDR_EXP 35
6074: PUSH
6075: LD_INT 0
6077: ST_TO_ADDR
// sFire := false ;
6078: LD_ADDR_EXP 36
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// sRefresh := false ;
6086: LD_ADDR_EXP 37
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// sExp := false ;
6094: LD_ADDR_EXP 38
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// sDepot := false ;
6102: LD_ADDR_EXP 39
6106: PUSH
6107: LD_INT 0
6109: ST_TO_ADDR
// sFlag := false ;
6110: LD_ADDR_EXP 40
6114: PUSH
6115: LD_INT 0
6117: ST_TO_ADDR
// sKamikadze := false ;
6118: LD_ADDR_EXP 48
6122: PUSH
6123: LD_INT 0
6125: ST_TO_ADDR
// sTroll := false ;
6126: LD_ADDR_EXP 49
6130: PUSH
6131: LD_INT 0
6133: ST_TO_ADDR
// sSlow := false ;
6134: LD_ADDR_EXP 50
6138: PUSH
6139: LD_INT 0
6141: ST_TO_ADDR
// sLack := false ;
6142: LD_ADDR_EXP 51
6146: PUSH
6147: LD_INT 0
6149: ST_TO_ADDR
// sTank := false ;
6150: LD_ADDR_EXP 53
6154: PUSH
6155: LD_INT 0
6157: ST_TO_ADDR
// sRemote := false ;
6158: LD_ADDR_EXP 54
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// sPowell := false ;
6166: LD_ADDR_EXP 55
6170: PUSH
6171: LD_INT 0
6173: ST_TO_ADDR
// sTeleport := false ;
6174: LD_ADDR_EXP 58
6178: PUSH
6179: LD_INT 0
6181: ST_TO_ADDR
// sOilTower := false ;
6182: LD_ADDR_EXP 60
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// sShovel := false ;
6190: LD_ADDR_EXP 61
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// sSheik := false ;
6198: LD_ADDR_EXP 62
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// sEarthquake := false ;
6206: LD_ADDR_EXP 64
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// sAI := false ;
6214: LD_ADDR_EXP 65
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// sCargo := false ;
6222: LD_ADDR_EXP 68
6226: PUSH
6227: LD_INT 0
6229: ST_TO_ADDR
// sDLaser := false ;
6230: LD_ADDR_EXP 69
6234: PUSH
6235: LD_INT 0
6237: ST_TO_ADDR
// sExchange := false ;
6238: LD_ADDR_EXP 70
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// sFac := false ;
6246: LD_ADDR_EXP 71
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// sPower := false ;
6254: LD_ADDR_EXP 72
6258: PUSH
6259: LD_INT 0
6261: ST_TO_ADDR
// sRandom := false ;
6262: LD_ADDR_EXP 73
6266: PUSH
6267: LD_INT 0
6269: ST_TO_ADDR
// sShield := false ;
6270: LD_ADDR_EXP 74
6274: PUSH
6275: LD_INT 0
6277: ST_TO_ADDR
// sTime := false ;
6278: LD_ADDR_EXP 75
6282: PUSH
6283: LD_INT 0
6285: ST_TO_ADDR
// sTools := false ;
6286: LD_ADDR_EXP 76
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// sSold := false ;
6294: LD_ADDR_EXP 41
6298: PUSH
6299: LD_INT 0
6301: ST_TO_ADDR
// sDiff := false ;
6302: LD_ADDR_EXP 42
6306: PUSH
6307: LD_INT 0
6309: ST_TO_ADDR
// sFog := false ;
6310: LD_ADDR_EXP 45
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// sReset := false ;
6318: LD_ADDR_EXP 46
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// sSun := false ;
6326: LD_ADDR_EXP 47
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// sTiger := false ;
6334: LD_ADDR_EXP 43
6338: PUSH
6339: LD_INT 0
6341: ST_TO_ADDR
// sBomb := false ;
6342: LD_ADDR_EXP 44
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// sWound := false ;
6350: LD_ADDR_EXP 52
6354: PUSH
6355: LD_INT 0
6357: ST_TO_ADDR
// sBetray := false ;
6358: LD_ADDR_EXP 56
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// sContamin := false ;
6366: LD_ADDR_EXP 57
6370: PUSH
6371: LD_INT 0
6373: ST_TO_ADDR
// sOil := false ;
6374: LD_ADDR_EXP 59
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// sStu := false ;
6382: LD_ADDR_EXP 63
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// sBazooka := false ;
6390: LD_ADDR_EXP 66
6394: PUSH
6395: LD_INT 0
6397: ST_TO_ADDR
// sMortar := false ;
6398: LD_ADDR_EXP 67
6402: PUSH
6403: LD_INT 0
6405: ST_TO_ADDR
// sRanger := false ;
6406: LD_ADDR_EXP 77
6410: PUSH
6411: LD_INT 0
6413: ST_TO_ADDR
// sComputer := false ;
6414: LD_ADDR_EXP 78
6418: PUSH
6419: LD_INT 0
6421: ST_TO_ADDR
// s30 := false ;
6422: LD_ADDR_EXP 79
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// s60 := false ;
6430: LD_ADDR_EXP 80
6434: PUSH
6435: LD_INT 0
6437: ST_TO_ADDR
// end ;
6438: LD_VAR 0 1
6442: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
6451: PPUSH
// result := [ ] ;
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: EMPTY
6458: ST_TO_ADDR
// if campaign_id = 1 then
6459: LD_OWVAR 69
6463: PUSH
6464: LD_INT 1
6466: EQUAL
6467: IFFALSE 9633
// begin case mission_number of 1 :
6469: LD_OWVAR 70
6473: PUSH
6474: LD_INT 1
6476: DOUBLE
6477: EQUAL
6478: IFTRUE 6482
6480: GO 6558
6482: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6483: LD_ADDR_VAR 0 2
6487: PUSH
6488: LD_INT 2
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: LD_INT 11
6496: PUSH
6497: LD_INT 12
6499: PUSH
6500: LD_INT 15
6502: PUSH
6503: LD_INT 16
6505: PUSH
6506: LD_INT 22
6508: PUSH
6509: LD_INT 23
6511: PUSH
6512: LD_INT 26
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 101
6528: PUSH
6529: LD_INT 102
6531: PUSH
6532: LD_INT 106
6534: PUSH
6535: LD_INT 116
6537: PUSH
6538: LD_INT 117
6540: PUSH
6541: LD_INT 118
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: ST_TO_ADDR
6556: GO 9631
6558: LD_INT 2
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6650
6566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6567: LD_ADDR_VAR 0 2
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 4
6577: PUSH
6578: LD_INT 11
6580: PUSH
6581: LD_INT 12
6583: PUSH
6584: LD_INT 15
6586: PUSH
6587: LD_INT 16
6589: PUSH
6590: LD_INT 22
6592: PUSH
6593: LD_INT 23
6595: PUSH
6596: LD_INT 26
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 101
6612: PUSH
6613: LD_INT 102
6615: PUSH
6616: LD_INT 105
6618: PUSH
6619: LD_INT 106
6621: PUSH
6622: LD_INT 108
6624: PUSH
6625: LD_INT 116
6627: PUSH
6628: LD_INT 117
6630: PUSH
6631: LD_INT 118
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: ST_TO_ADDR
6648: GO 9631
6650: LD_INT 3
6652: DOUBLE
6653: EQUAL
6654: IFTRUE 6658
6656: GO 6746
6658: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6659: LD_ADDR_VAR 0 2
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: LD_INT 11
6675: PUSH
6676: LD_INT 12
6678: PUSH
6679: LD_INT 15
6681: PUSH
6682: LD_INT 16
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_INT 26
6690: PUSH
6691: LD_INT 36
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 101
6708: PUSH
6709: LD_INT 102
6711: PUSH
6712: LD_INT 105
6714: PUSH
6715: LD_INT 106
6717: PUSH
6718: LD_INT 108
6720: PUSH
6721: LD_INT 116
6723: PUSH
6724: LD_INT 117
6726: PUSH
6727: LD_INT 118
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: ST_TO_ADDR
6744: GO 9631
6746: LD_INT 4
6748: DOUBLE
6749: EQUAL
6750: IFTRUE 6754
6752: GO 6850
6754: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: LD_INT 4
6765: PUSH
6766: LD_INT 5
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 22
6786: PUSH
6787: LD_INT 23
6789: PUSH
6790: LD_INT 26
6792: PUSH
6793: LD_INT 36
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 101
6812: PUSH
6813: LD_INT 102
6815: PUSH
6816: LD_INT 105
6818: PUSH
6819: LD_INT 106
6821: PUSH
6822: LD_INT 108
6824: PUSH
6825: LD_INT 116
6827: PUSH
6828: LD_INT 117
6830: PUSH
6831: LD_INT 118
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
6848: GO 9631
6850: LD_INT 5
6852: DOUBLE
6853: EQUAL
6854: IFTRUE 6858
6856: GO 6970
6858: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6859: LD_ADDR_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: PUSH
6867: LD_INT 4
6869: PUSH
6870: LD_INT 5
6872: PUSH
6873: LD_INT 6
6875: PUSH
6876: LD_INT 8
6878: PUSH
6879: LD_INT 11
6881: PUSH
6882: LD_INT 12
6884: PUSH
6885: LD_INT 15
6887: PUSH
6888: LD_INT 16
6890: PUSH
6891: LD_INT 22
6893: PUSH
6894: LD_INT 23
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 26
6902: PUSH
6903: LD_INT 36
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: LD_INT 109
6939: PUSH
6940: LD_INT 112
6942: PUSH
6943: LD_INT 116
6945: PUSH
6946: LD_INT 117
6948: PUSH
6949: LD_INT 118
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: ST_TO_ADDR
6968: GO 9631
6970: LD_INT 6
6972: DOUBLE
6973: EQUAL
6974: IFTRUE 6978
6976: GO 7110
6978: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 4
6989: PUSH
6990: LD_INT 5
6992: PUSH
6993: LD_INT 6
6995: PUSH
6996: LD_INT 8
6998: PUSH
6999: LD_INT 11
7001: PUSH
7002: LD_INT 12
7004: PUSH
7005: LD_INT 15
7007: PUSH
7008: LD_INT 16
7010: PUSH
7011: LD_INT 20
7013: PUSH
7014: LD_INT 21
7016: PUSH
7017: LD_INT 22
7019: PUSH
7020: LD_INT 23
7022: PUSH
7023: LD_INT 25
7025: PUSH
7026: LD_INT 26
7028: PUSH
7029: LD_INT 30
7031: PUSH
7032: LD_INT 31
7034: PUSH
7035: LD_INT 32
7037: PUSH
7038: LD_INT 36
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 101
7064: PUSH
7065: LD_INT 102
7067: PUSH
7068: LD_INT 105
7070: PUSH
7071: LD_INT 106
7073: PUSH
7074: LD_INT 108
7076: PUSH
7077: LD_INT 109
7079: PUSH
7080: LD_INT 112
7082: PUSH
7083: LD_INT 116
7085: PUSH
7086: LD_INT 117
7088: PUSH
7089: LD_INT 118
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: ST_TO_ADDR
7108: GO 9631
7110: LD_INT 7
7112: DOUBLE
7113: EQUAL
7114: IFTRUE 7118
7116: GO 7230
7118: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7119: LD_ADDR_VAR 0 2
7123: PUSH
7124: LD_INT 2
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: LD_INT 5
7132: PUSH
7133: LD_INT 7
7135: PUSH
7136: LD_INT 11
7138: PUSH
7139: LD_INT 12
7141: PUSH
7142: LD_INT 15
7144: PUSH
7145: LD_INT 16
7147: PUSH
7148: LD_INT 20
7150: PUSH
7151: LD_INT 21
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_INT 23
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 26
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 101
7184: PUSH
7185: LD_INT 102
7187: PUSH
7188: LD_INT 103
7190: PUSH
7191: LD_INT 105
7193: PUSH
7194: LD_INT 106
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 112
7202: PUSH
7203: LD_INT 116
7205: PUSH
7206: LD_INT 117
7208: PUSH
7209: LD_INT 118
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: ST_TO_ADDR
7228: GO 9631
7230: LD_INT 8
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7378
7238: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7239: LD_ADDR_VAR 0 2
7243: PUSH
7244: LD_INT 2
7246: PUSH
7247: LD_INT 4
7249: PUSH
7250: LD_INT 5
7252: PUSH
7253: LD_INT 6
7255: PUSH
7256: LD_INT 7
7258: PUSH
7259: LD_INT 8
7261: PUSH
7262: LD_INT 11
7264: PUSH
7265: LD_INT 12
7267: PUSH
7268: LD_INT 15
7270: PUSH
7271: LD_INT 16
7273: PUSH
7274: LD_INT 20
7276: PUSH
7277: LD_INT 21
7279: PUSH
7280: LD_INT 22
7282: PUSH
7283: LD_INT 23
7285: PUSH
7286: LD_INT 25
7288: PUSH
7289: LD_INT 26
7291: PUSH
7292: LD_INT 30
7294: PUSH
7295: LD_INT 31
7297: PUSH
7298: LD_INT 32
7300: PUSH
7301: LD_INT 36
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 101
7328: PUSH
7329: LD_INT 102
7331: PUSH
7332: LD_INT 103
7334: PUSH
7335: LD_INT 105
7337: PUSH
7338: LD_INT 106
7340: PUSH
7341: LD_INT 108
7343: PUSH
7344: LD_INT 109
7346: PUSH
7347: LD_INT 112
7349: PUSH
7350: LD_INT 116
7352: PUSH
7353: LD_INT 117
7355: PUSH
7356: LD_INT 118
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: ST_TO_ADDR
7376: GO 9631
7378: LD_INT 9
7380: DOUBLE
7381: EQUAL
7382: IFTRUE 7386
7384: GO 7534
7386: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_INT 2
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: LD_INT 5
7400: PUSH
7401: LD_INT 6
7403: PUSH
7404: LD_INT 7
7406: PUSH
7407: LD_INT 8
7409: PUSH
7410: LD_INT 11
7412: PUSH
7413: LD_INT 12
7415: PUSH
7416: LD_INT 15
7418: PUSH
7419: LD_INT 16
7421: PUSH
7422: LD_INT 20
7424: PUSH
7425: LD_INT 21
7427: PUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 23
7433: PUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 26
7439: PUSH
7440: LD_INT 28
7442: PUSH
7443: LD_INT 30
7445: PUSH
7446: LD_INT 31
7448: PUSH
7449: LD_INT 32
7451: PUSH
7452: LD_INT 36
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 101
7480: PUSH
7481: LD_INT 102
7483: PUSH
7484: LD_INT 103
7486: PUSH
7487: LD_INT 105
7489: PUSH
7490: LD_INT 106
7492: PUSH
7493: LD_INT 108
7495: PUSH
7496: LD_INT 109
7498: PUSH
7499: LD_INT 112
7501: PUSH
7502: LD_INT 114
7504: PUSH
7505: LD_INT 116
7507: PUSH
7508: LD_INT 117
7510: PUSH
7511: LD_INT 118
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: ST_TO_ADDR
7532: GO 9631
7534: LD_INT 10
7536: DOUBLE
7537: EQUAL
7538: IFTRUE 7542
7540: GO 7738
7542: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7543: LD_ADDR_VAR 0 2
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: LD_INT 5
7556: PUSH
7557: LD_INT 6
7559: PUSH
7560: LD_INT 7
7562: PUSH
7563: LD_INT 8
7565: PUSH
7566: LD_INT 9
7568: PUSH
7569: LD_INT 10
7571: PUSH
7572: LD_INT 11
7574: PUSH
7575: LD_INT 12
7577: PUSH
7578: LD_INT 13
7580: PUSH
7581: LD_INT 14
7583: PUSH
7584: LD_INT 15
7586: PUSH
7587: LD_INT 16
7589: PUSH
7590: LD_INT 17
7592: PUSH
7593: LD_INT 18
7595: PUSH
7596: LD_INT 19
7598: PUSH
7599: LD_INT 20
7601: PUSH
7602: LD_INT 21
7604: PUSH
7605: LD_INT 22
7607: PUSH
7608: LD_INT 23
7610: PUSH
7611: LD_INT 24
7613: PUSH
7614: LD_INT 25
7616: PUSH
7617: LD_INT 26
7619: PUSH
7620: LD_INT 28
7622: PUSH
7623: LD_INT 30
7625: PUSH
7626: LD_INT 31
7628: PUSH
7629: LD_INT 32
7631: PUSH
7632: LD_INT 36
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 101
7668: PUSH
7669: LD_INT 102
7671: PUSH
7672: LD_INT 103
7674: PUSH
7675: LD_INT 104
7677: PUSH
7678: LD_INT 105
7680: PUSH
7681: LD_INT 106
7683: PUSH
7684: LD_INT 107
7686: PUSH
7687: LD_INT 108
7689: PUSH
7690: LD_INT 109
7692: PUSH
7693: LD_INT 110
7695: PUSH
7696: LD_INT 111
7698: PUSH
7699: LD_INT 112
7701: PUSH
7702: LD_INT 114
7704: PUSH
7705: LD_INT 116
7707: PUSH
7708: LD_INT 117
7710: PUSH
7711: LD_INT 118
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: ST_TO_ADDR
7736: GO 9631
7738: LD_INT 11
7740: DOUBLE
7741: EQUAL
7742: IFTRUE 7746
7744: GO 7950
7746: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 3
7757: PUSH
7758: LD_INT 4
7760: PUSH
7761: LD_INT 5
7763: PUSH
7764: LD_INT 6
7766: PUSH
7767: LD_INT 7
7769: PUSH
7770: LD_INT 8
7772: PUSH
7773: LD_INT 9
7775: PUSH
7776: LD_INT 10
7778: PUSH
7779: LD_INT 11
7781: PUSH
7782: LD_INT 12
7784: PUSH
7785: LD_INT 13
7787: PUSH
7788: LD_INT 14
7790: PUSH
7791: LD_INT 15
7793: PUSH
7794: LD_INT 16
7796: PUSH
7797: LD_INT 17
7799: PUSH
7800: LD_INT 18
7802: PUSH
7803: LD_INT 19
7805: PUSH
7806: LD_INT 20
7808: PUSH
7809: LD_INT 21
7811: PUSH
7812: LD_INT 22
7814: PUSH
7815: LD_INT 23
7817: PUSH
7818: LD_INT 24
7820: PUSH
7821: LD_INT 25
7823: PUSH
7824: LD_INT 26
7826: PUSH
7827: LD_INT 28
7829: PUSH
7830: LD_INT 30
7832: PUSH
7833: LD_INT 31
7835: PUSH
7836: LD_INT 32
7838: PUSH
7839: LD_INT 34
7841: PUSH
7842: LD_INT 36
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 101
7880: PUSH
7881: LD_INT 102
7883: PUSH
7884: LD_INT 103
7886: PUSH
7887: LD_INT 104
7889: PUSH
7890: LD_INT 105
7892: PUSH
7893: LD_INT 106
7895: PUSH
7896: LD_INT 107
7898: PUSH
7899: LD_INT 108
7901: PUSH
7902: LD_INT 109
7904: PUSH
7905: LD_INT 110
7907: PUSH
7908: LD_INT 111
7910: PUSH
7911: LD_INT 112
7913: PUSH
7914: LD_INT 114
7916: PUSH
7917: LD_INT 116
7919: PUSH
7920: LD_INT 117
7922: PUSH
7923: LD_INT 118
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 9631
7950: LD_INT 12
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 8178
7958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 1
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 3
7972: PUSH
7973: LD_INT 4
7975: PUSH
7976: LD_INT 5
7978: PUSH
7979: LD_INT 6
7981: PUSH
7982: LD_INT 7
7984: PUSH
7985: LD_INT 8
7987: PUSH
7988: LD_INT 9
7990: PUSH
7991: LD_INT 10
7993: PUSH
7994: LD_INT 11
7996: PUSH
7997: LD_INT 12
7999: PUSH
8000: LD_INT 13
8002: PUSH
8003: LD_INT 14
8005: PUSH
8006: LD_INT 15
8008: PUSH
8009: LD_INT 16
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: LD_INT 18
8017: PUSH
8018: LD_INT 19
8020: PUSH
8021: LD_INT 20
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 22
8029: PUSH
8030: LD_INT 23
8032: PUSH
8033: LD_INT 24
8035: PUSH
8036: LD_INT 25
8038: PUSH
8039: LD_INT 26
8041: PUSH
8042: LD_INT 27
8044: PUSH
8045: LD_INT 28
8047: PUSH
8048: LD_INT 30
8050: PUSH
8051: LD_INT 31
8053: PUSH
8054: LD_INT 32
8056: PUSH
8057: LD_INT 33
8059: PUSH
8060: LD_INT 34
8062: PUSH
8063: LD_INT 36
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 101
8104: PUSH
8105: LD_INT 102
8107: PUSH
8108: LD_INT 103
8110: PUSH
8111: LD_INT 104
8113: PUSH
8114: LD_INT 105
8116: PUSH
8117: LD_INT 106
8119: PUSH
8120: LD_INT 107
8122: PUSH
8123: LD_INT 108
8125: PUSH
8126: LD_INT 109
8128: PUSH
8129: LD_INT 110
8131: PUSH
8132: LD_INT 111
8134: PUSH
8135: LD_INT 112
8137: PUSH
8138: LD_INT 113
8140: PUSH
8141: LD_INT 114
8143: PUSH
8144: LD_INT 116
8146: PUSH
8147: LD_INT 117
8149: PUSH
8150: LD_INT 118
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: ST_TO_ADDR
8176: GO 9631
8178: LD_INT 13
8180: DOUBLE
8181: EQUAL
8182: IFTRUE 8186
8184: GO 8394
8186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8187: LD_ADDR_VAR 0 2
8191: PUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 3
8200: PUSH
8201: LD_INT 4
8203: PUSH
8204: LD_INT 5
8206: PUSH
8207: LD_INT 8
8209: PUSH
8210: LD_INT 9
8212: PUSH
8213: LD_INT 10
8215: PUSH
8216: LD_INT 11
8218: PUSH
8219: LD_INT 12
8221: PUSH
8222: LD_INT 14
8224: PUSH
8225: LD_INT 15
8227: PUSH
8228: LD_INT 16
8230: PUSH
8231: LD_INT 17
8233: PUSH
8234: LD_INT 18
8236: PUSH
8237: LD_INT 19
8239: PUSH
8240: LD_INT 20
8242: PUSH
8243: LD_INT 21
8245: PUSH
8246: LD_INT 22
8248: PUSH
8249: LD_INT 23
8251: PUSH
8252: LD_INT 24
8254: PUSH
8255: LD_INT 25
8257: PUSH
8258: LD_INT 26
8260: PUSH
8261: LD_INT 27
8263: PUSH
8264: LD_INT 28
8266: PUSH
8267: LD_INT 30
8269: PUSH
8270: LD_INT 31
8272: PUSH
8273: LD_INT 32
8275: PUSH
8276: LD_INT 33
8278: PUSH
8279: LD_INT 34
8281: PUSH
8282: LD_INT 36
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 101
8320: PUSH
8321: LD_INT 102
8323: PUSH
8324: LD_INT 103
8326: PUSH
8327: LD_INT 104
8329: PUSH
8330: LD_INT 105
8332: PUSH
8333: LD_INT 106
8335: PUSH
8336: LD_INT 107
8338: PUSH
8339: LD_INT 108
8341: PUSH
8342: LD_INT 109
8344: PUSH
8345: LD_INT 110
8347: PUSH
8348: LD_INT 111
8350: PUSH
8351: LD_INT 112
8353: PUSH
8354: LD_INT 113
8356: PUSH
8357: LD_INT 114
8359: PUSH
8360: LD_INT 116
8362: PUSH
8363: LD_INT 117
8365: PUSH
8366: LD_INT 118
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: ST_TO_ADDR
8392: GO 9631
8394: LD_INT 14
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8626
8402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8403: LD_ADDR_VAR 0 2
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 4
8419: PUSH
8420: LD_INT 5
8422: PUSH
8423: LD_INT 6
8425: PUSH
8426: LD_INT 7
8428: PUSH
8429: LD_INT 8
8431: PUSH
8432: LD_INT 9
8434: PUSH
8435: LD_INT 10
8437: PUSH
8438: LD_INT 11
8440: PUSH
8441: LD_INT 12
8443: PUSH
8444: LD_INT 13
8446: PUSH
8447: LD_INT 14
8449: PUSH
8450: LD_INT 15
8452: PUSH
8453: LD_INT 16
8455: PUSH
8456: LD_INT 17
8458: PUSH
8459: LD_INT 18
8461: PUSH
8462: LD_INT 19
8464: PUSH
8465: LD_INT 20
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 22
8473: PUSH
8474: LD_INT 23
8476: PUSH
8477: LD_INT 24
8479: PUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 26
8485: PUSH
8486: LD_INT 27
8488: PUSH
8489: LD_INT 28
8491: PUSH
8492: LD_INT 29
8494: PUSH
8495: LD_INT 30
8497: PUSH
8498: LD_INT 31
8500: PUSH
8501: LD_INT 32
8503: PUSH
8504: LD_INT 33
8506: PUSH
8507: LD_INT 34
8509: PUSH
8510: LD_INT 36
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 101
8552: PUSH
8553: LD_INT 102
8555: PUSH
8556: LD_INT 103
8558: PUSH
8559: LD_INT 104
8561: PUSH
8562: LD_INT 105
8564: PUSH
8565: LD_INT 106
8567: PUSH
8568: LD_INT 107
8570: PUSH
8571: LD_INT 108
8573: PUSH
8574: LD_INT 109
8576: PUSH
8577: LD_INT 110
8579: PUSH
8580: LD_INT 111
8582: PUSH
8583: LD_INT 112
8585: PUSH
8586: LD_INT 113
8588: PUSH
8589: LD_INT 114
8591: PUSH
8592: LD_INT 116
8594: PUSH
8595: LD_INT 117
8597: PUSH
8598: LD_INT 118
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: ST_TO_ADDR
8624: GO 9631
8626: LD_INT 15
8628: DOUBLE
8629: EQUAL
8630: IFTRUE 8634
8632: GO 8858
8634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8635: LD_ADDR_VAR 0 2
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: LD_INT 3
8648: PUSH
8649: LD_INT 4
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: LD_INT 6
8657: PUSH
8658: LD_INT 7
8660: PUSH
8661: LD_INT 8
8663: PUSH
8664: LD_INT 9
8666: PUSH
8667: LD_INT 10
8669: PUSH
8670: LD_INT 11
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: LD_INT 13
8678: PUSH
8679: LD_INT 14
8681: PUSH
8682: LD_INT 15
8684: PUSH
8685: LD_INT 16
8687: PUSH
8688: LD_INT 17
8690: PUSH
8691: LD_INT 18
8693: PUSH
8694: LD_INT 19
8696: PUSH
8697: LD_INT 20
8699: PUSH
8700: LD_INT 21
8702: PUSH
8703: LD_INT 22
8705: PUSH
8706: LD_INT 23
8708: PUSH
8709: LD_INT 24
8711: PUSH
8712: LD_INT 25
8714: PUSH
8715: LD_INT 26
8717: PUSH
8718: LD_INT 27
8720: PUSH
8721: LD_INT 28
8723: PUSH
8724: LD_INT 29
8726: PUSH
8727: LD_INT 30
8729: PUSH
8730: LD_INT 31
8732: PUSH
8733: LD_INT 32
8735: PUSH
8736: LD_INT 33
8738: PUSH
8739: LD_INT 34
8741: PUSH
8742: LD_INT 36
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 101
8784: PUSH
8785: LD_INT 102
8787: PUSH
8788: LD_INT 103
8790: PUSH
8791: LD_INT 104
8793: PUSH
8794: LD_INT 105
8796: PUSH
8797: LD_INT 106
8799: PUSH
8800: LD_INT 107
8802: PUSH
8803: LD_INT 108
8805: PUSH
8806: LD_INT 109
8808: PUSH
8809: LD_INT 110
8811: PUSH
8812: LD_INT 111
8814: PUSH
8815: LD_INT 112
8817: PUSH
8818: LD_INT 113
8820: PUSH
8821: LD_INT 114
8823: PUSH
8824: LD_INT 116
8826: PUSH
8827: LD_INT 117
8829: PUSH
8830: LD_INT 118
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: ST_TO_ADDR
8856: GO 9631
8858: LD_INT 16
8860: DOUBLE
8861: EQUAL
8862: IFTRUE 8866
8864: GO 9002
8866: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8867: LD_ADDR_VAR 0 2
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: LD_INT 4
8877: PUSH
8878: LD_INT 5
8880: PUSH
8881: LD_INT 7
8883: PUSH
8884: LD_INT 11
8886: PUSH
8887: LD_INT 12
8889: PUSH
8890: LD_INT 15
8892: PUSH
8893: LD_INT 16
8895: PUSH
8896: LD_INT 20
8898: PUSH
8899: LD_INT 21
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 23
8907: PUSH
8908: LD_INT 25
8910: PUSH
8911: LD_INT 26
8913: PUSH
8914: LD_INT 30
8916: PUSH
8917: LD_INT 31
8919: PUSH
8920: LD_INT 32
8922: PUSH
8923: LD_INT 33
8925: PUSH
8926: LD_INT 34
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 101
8952: PUSH
8953: LD_INT 102
8955: PUSH
8956: LD_INT 103
8958: PUSH
8959: LD_INT 106
8961: PUSH
8962: LD_INT 108
8964: PUSH
8965: LD_INT 112
8967: PUSH
8968: LD_INT 113
8970: PUSH
8971: LD_INT 114
8973: PUSH
8974: LD_INT 116
8976: PUSH
8977: LD_INT 117
8979: PUSH
8980: LD_INT 118
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: ST_TO_ADDR
9000: GO 9631
9002: LD_INT 17
9004: DOUBLE
9005: EQUAL
9006: IFTRUE 9010
9008: GO 9234
9010: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9011: LD_ADDR_VAR 0 2
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: LD_INT 2
9021: PUSH
9022: LD_INT 3
9024: PUSH
9025: LD_INT 4
9027: PUSH
9028: LD_INT 5
9030: PUSH
9031: LD_INT 6
9033: PUSH
9034: LD_INT 7
9036: PUSH
9037: LD_INT 8
9039: PUSH
9040: LD_INT 9
9042: PUSH
9043: LD_INT 10
9045: PUSH
9046: LD_INT 11
9048: PUSH
9049: LD_INT 12
9051: PUSH
9052: LD_INT 13
9054: PUSH
9055: LD_INT 14
9057: PUSH
9058: LD_INT 15
9060: PUSH
9061: LD_INT 16
9063: PUSH
9064: LD_INT 17
9066: PUSH
9067: LD_INT 18
9069: PUSH
9070: LD_INT 19
9072: PUSH
9073: LD_INT 20
9075: PUSH
9076: LD_INT 21
9078: PUSH
9079: LD_INT 22
9081: PUSH
9082: LD_INT 23
9084: PUSH
9085: LD_INT 24
9087: PUSH
9088: LD_INT 25
9090: PUSH
9091: LD_INT 26
9093: PUSH
9094: LD_INT 27
9096: PUSH
9097: LD_INT 28
9099: PUSH
9100: LD_INT 29
9102: PUSH
9103: LD_INT 30
9105: PUSH
9106: LD_INT 31
9108: PUSH
9109: LD_INT 32
9111: PUSH
9112: LD_INT 33
9114: PUSH
9115: LD_INT 34
9117: PUSH
9118: LD_INT 36
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 101
9160: PUSH
9161: LD_INT 102
9163: PUSH
9164: LD_INT 103
9166: PUSH
9167: LD_INT 104
9169: PUSH
9170: LD_INT 105
9172: PUSH
9173: LD_INT 106
9175: PUSH
9176: LD_INT 107
9178: PUSH
9179: LD_INT 108
9181: PUSH
9182: LD_INT 109
9184: PUSH
9185: LD_INT 110
9187: PUSH
9188: LD_INT 111
9190: PUSH
9191: LD_INT 112
9193: PUSH
9194: LD_INT 113
9196: PUSH
9197: LD_INT 114
9199: PUSH
9200: LD_INT 116
9202: PUSH
9203: LD_INT 117
9205: PUSH
9206: LD_INT 118
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: ST_TO_ADDR
9232: GO 9631
9234: LD_INT 18
9236: DOUBLE
9237: EQUAL
9238: IFTRUE 9242
9240: GO 9390
9242: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9243: LD_ADDR_VAR 0 2
9247: PUSH
9248: LD_INT 2
9250: PUSH
9251: LD_INT 4
9253: PUSH
9254: LD_INT 5
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: LD_INT 11
9262: PUSH
9263: LD_INT 12
9265: PUSH
9266: LD_INT 15
9268: PUSH
9269: LD_INT 16
9271: PUSH
9272: LD_INT 20
9274: PUSH
9275: LD_INT 21
9277: PUSH
9278: LD_INT 22
9280: PUSH
9281: LD_INT 23
9283: PUSH
9284: LD_INT 25
9286: PUSH
9287: LD_INT 26
9289: PUSH
9290: LD_INT 30
9292: PUSH
9293: LD_INT 31
9295: PUSH
9296: LD_INT 32
9298: PUSH
9299: LD_INT 33
9301: PUSH
9302: LD_INT 34
9304: PUSH
9305: LD_INT 35
9307: PUSH
9308: LD_INT 36
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: LD_INT 101
9336: PUSH
9337: LD_INT 102
9339: PUSH
9340: LD_INT 103
9342: PUSH
9343: LD_INT 106
9345: PUSH
9346: LD_INT 108
9348: PUSH
9349: LD_INT 112
9351: PUSH
9352: LD_INT 113
9354: PUSH
9355: LD_INT 114
9357: PUSH
9358: LD_INT 115
9360: PUSH
9361: LD_INT 116
9363: PUSH
9364: LD_INT 117
9366: PUSH
9367: LD_INT 118
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: ST_TO_ADDR
9388: GO 9631
9390: LD_INT 19
9392: DOUBLE
9393: EQUAL
9394: IFTRUE 9398
9396: GO 9630
9398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9399: LD_ADDR_VAR 0 2
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: LD_INT 4
9415: PUSH
9416: LD_INT 5
9418: PUSH
9419: LD_INT 6
9421: PUSH
9422: LD_INT 7
9424: PUSH
9425: LD_INT 8
9427: PUSH
9428: LD_INT 9
9430: PUSH
9431: LD_INT 10
9433: PUSH
9434: LD_INT 11
9436: PUSH
9437: LD_INT 12
9439: PUSH
9440: LD_INT 13
9442: PUSH
9443: LD_INT 14
9445: PUSH
9446: LD_INT 15
9448: PUSH
9449: LD_INT 16
9451: PUSH
9452: LD_INT 17
9454: PUSH
9455: LD_INT 18
9457: PUSH
9458: LD_INT 19
9460: PUSH
9461: LD_INT 20
9463: PUSH
9464: LD_INT 21
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_INT 23
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 27
9484: PUSH
9485: LD_INT 28
9487: PUSH
9488: LD_INT 29
9490: PUSH
9491: LD_INT 30
9493: PUSH
9494: LD_INT 31
9496: PUSH
9497: LD_INT 32
9499: PUSH
9500: LD_INT 33
9502: PUSH
9503: LD_INT 34
9505: PUSH
9506: LD_INT 35
9508: PUSH
9509: LD_INT 36
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 101
9552: PUSH
9553: LD_INT 102
9555: PUSH
9556: LD_INT 103
9558: PUSH
9559: LD_INT 104
9561: PUSH
9562: LD_INT 105
9564: PUSH
9565: LD_INT 106
9567: PUSH
9568: LD_INT 107
9570: PUSH
9571: LD_INT 108
9573: PUSH
9574: LD_INT 109
9576: PUSH
9577: LD_INT 110
9579: PUSH
9580: LD_INT 111
9582: PUSH
9583: LD_INT 112
9585: PUSH
9586: LD_INT 113
9588: PUSH
9589: LD_INT 114
9591: PUSH
9592: LD_INT 115
9594: PUSH
9595: LD_INT 116
9597: PUSH
9598: LD_INT 117
9600: PUSH
9601: LD_INT 118
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: ST_TO_ADDR
9628: GO 9631
9630: POP
// end else
9631: GO 9862
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 4
9649: PUSH
9650: LD_INT 5
9652: PUSH
9653: LD_INT 6
9655: PUSH
9656: LD_INT 7
9658: PUSH
9659: LD_INT 8
9661: PUSH
9662: LD_INT 9
9664: PUSH
9665: LD_INT 10
9667: PUSH
9668: LD_INT 11
9670: PUSH
9671: LD_INT 12
9673: PUSH
9674: LD_INT 13
9676: PUSH
9677: LD_INT 14
9679: PUSH
9680: LD_INT 15
9682: PUSH
9683: LD_INT 16
9685: PUSH
9686: LD_INT 17
9688: PUSH
9689: LD_INT 18
9691: PUSH
9692: LD_INT 19
9694: PUSH
9695: LD_INT 20
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 22
9703: PUSH
9704: LD_INT 23
9706: PUSH
9707: LD_INT 24
9709: PUSH
9710: LD_INT 25
9712: PUSH
9713: LD_INT 26
9715: PUSH
9716: LD_INT 27
9718: PUSH
9719: LD_INT 28
9721: PUSH
9722: LD_INT 29
9724: PUSH
9725: LD_INT 30
9727: PUSH
9728: LD_INT 31
9730: PUSH
9731: LD_INT 32
9733: PUSH
9734: LD_INT 33
9736: PUSH
9737: LD_INT 34
9739: PUSH
9740: LD_INT 35
9742: PUSH
9743: LD_INT 36
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 101
9786: PUSH
9787: LD_INT 102
9789: PUSH
9790: LD_INT 103
9792: PUSH
9793: LD_INT 104
9795: PUSH
9796: LD_INT 105
9798: PUSH
9799: LD_INT 106
9801: PUSH
9802: LD_INT 107
9804: PUSH
9805: LD_INT 108
9807: PUSH
9808: LD_INT 109
9810: PUSH
9811: LD_INT 110
9813: PUSH
9814: LD_INT 111
9816: PUSH
9817: LD_INT 112
9819: PUSH
9820: LD_INT 113
9822: PUSH
9823: LD_INT 114
9825: PUSH
9826: LD_INT 115
9828: PUSH
9829: LD_INT 116
9831: PUSH
9832: LD_INT 117
9834: PUSH
9835: LD_INT 118
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// if result then
9862: LD_VAR 0 2
9866: IFFALSE 10652
// begin normal :=  ;
9868: LD_ADDR_VAR 0 5
9872: PUSH
9873: LD_STRING 
9875: ST_TO_ADDR
// hardcore :=  ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: LD_STRING 
9883: ST_TO_ADDR
// active :=  ;
9884: LD_ADDR_VAR 0 7
9888: PUSH
9889: LD_STRING 
9891: ST_TO_ADDR
// for i = 1 to normalCounter do
9892: LD_ADDR_VAR 0 8
9896: PUSH
9897: DOUBLE
9898: LD_INT 1
9900: DEC
9901: ST_TO_ADDR
9902: LD_EXP 25
9906: PUSH
9907: FOR_TO
9908: IFFALSE 10009
// begin tmp := 0 ;
9910: LD_ADDR_VAR 0 3
9914: PUSH
9915: LD_STRING 0
9917: ST_TO_ADDR
// if result [ 1 ] then
9918: LD_VAR 0 2
9922: PUSH
9923: LD_INT 1
9925: ARRAY
9926: IFFALSE 9991
// if result [ 1 ] [ 1 ] = i then
9928: LD_VAR 0 2
9932: PUSH
9933: LD_INT 1
9935: ARRAY
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PUSH
9941: LD_VAR 0 8
9945: EQUAL
9946: IFFALSE 9991
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9948: LD_ADDR_VAR 0 2
9952: PUSH
9953: LD_VAR 0 2
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: LD_VAR 0 2
9965: PUSH
9966: LD_INT 1
9968: ARRAY
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 3
9977: PPUSH
9978: CALL_OW 1
9982: ST_TO_ADDR
// tmp := 1 ;
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: LD_STRING 1
9990: ST_TO_ADDR
// end ; normal := normal & tmp ;
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: LD_VAR 0 5
10000: PUSH
10001: LD_VAR 0 3
10005: STR
10006: ST_TO_ADDR
// end ;
10007: GO 9907
10009: POP
10010: POP
// for i = 1 to hardcoreCounter do
10011: LD_ADDR_VAR 0 8
10015: PUSH
10016: DOUBLE
10017: LD_INT 1
10019: DEC
10020: ST_TO_ADDR
10021: LD_EXP 26
10025: PUSH
10026: FOR_TO
10027: IFFALSE 10132
// begin tmp := 0 ;
10029: LD_ADDR_VAR 0 3
10033: PUSH
10034: LD_STRING 0
10036: ST_TO_ADDR
// if result [ 2 ] then
10037: LD_VAR 0 2
10041: PUSH
10042: LD_INT 2
10044: ARRAY
10045: IFFALSE 10114
// if result [ 2 ] [ 1 ] = 100 + i then
10047: LD_VAR 0 2
10051: PUSH
10052: LD_INT 2
10054: ARRAY
10055: PUSH
10056: LD_INT 1
10058: ARRAY
10059: PUSH
10060: LD_INT 100
10062: PUSH
10063: LD_VAR 0 8
10067: PLUS
10068: EQUAL
10069: IFFALSE 10114
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10071: LD_ADDR_VAR 0 2
10075: PUSH
10076: LD_VAR 0 2
10080: PPUSH
10081: LD_INT 2
10083: PPUSH
10084: LD_VAR 0 2
10088: PUSH
10089: LD_INT 2
10091: ARRAY
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 3
10100: PPUSH
10101: CALL_OW 1
10105: ST_TO_ADDR
// tmp := 1 ;
10106: LD_ADDR_VAR 0 3
10110: PUSH
10111: LD_STRING 1
10113: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10114: LD_ADDR_VAR 0 6
10118: PUSH
10119: LD_VAR 0 6
10123: PUSH
10124: LD_VAR 0 3
10128: STR
10129: ST_TO_ADDR
// end ;
10130: GO 10026
10132: POP
10133: POP
// if isGameLoad then
10134: LD_VAR 0 1
10138: IFFALSE 10613
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10140: LD_ADDR_VAR 0 4
10144: PUSH
10145: LD_EXP 29
10149: PUSH
10150: LD_EXP 28
10154: PUSH
10155: LD_EXP 30
10159: PUSH
10160: LD_EXP 27
10164: PUSH
10165: LD_EXP 31
10169: PUSH
10170: LD_EXP 32
10174: PUSH
10175: LD_EXP 33
10179: PUSH
10180: LD_EXP 34
10184: PUSH
10185: LD_EXP 35
10189: PUSH
10190: LD_EXP 36
10194: PUSH
10195: LD_EXP 37
10199: PUSH
10200: LD_EXP 38
10204: PUSH
10205: LD_EXP 39
10209: PUSH
10210: LD_EXP 40
10214: PUSH
10215: LD_EXP 48
10219: PUSH
10220: LD_EXP 49
10224: PUSH
10225: LD_EXP 50
10229: PUSH
10230: LD_EXP 51
10234: PUSH
10235: LD_EXP 53
10239: PUSH
10240: LD_EXP 54
10244: PUSH
10245: LD_EXP 55
10249: PUSH
10250: LD_EXP 58
10254: PUSH
10255: LD_EXP 60
10259: PUSH
10260: LD_EXP 61
10264: PUSH
10265: LD_EXP 62
10269: PUSH
10270: LD_EXP 64
10274: PUSH
10275: LD_EXP 65
10279: PUSH
10280: LD_EXP 68
10284: PUSH
10285: LD_EXP 69
10289: PUSH
10290: LD_EXP 70
10294: PUSH
10295: LD_EXP 71
10299: PUSH
10300: LD_EXP 72
10304: PUSH
10305: LD_EXP 73
10309: PUSH
10310: LD_EXP 74
10314: PUSH
10315: LD_EXP 75
10319: PUSH
10320: LD_EXP 76
10324: PUSH
10325: LD_EXP 41
10329: PUSH
10330: LD_EXP 42
10334: PUSH
10335: LD_EXP 45
10339: PUSH
10340: LD_EXP 46
10344: PUSH
10345: LD_EXP 47
10349: PUSH
10350: LD_EXP 43
10354: PUSH
10355: LD_EXP 44
10359: PUSH
10360: LD_EXP 52
10364: PUSH
10365: LD_EXP 56
10369: PUSH
10370: LD_EXP 57
10374: PUSH
10375: LD_EXP 59
10379: PUSH
10380: LD_EXP 63
10384: PUSH
10385: LD_EXP 66
10389: PUSH
10390: LD_EXP 67
10394: PUSH
10395: LD_EXP 77
10399: PUSH
10400: LD_EXP 78
10404: PUSH
10405: LD_EXP 79
10409: PUSH
10410: LD_EXP 80
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: ST_TO_ADDR
// tmp :=  ;
10471: LD_ADDR_VAR 0 3
10475: PUSH
10476: LD_STRING 
10478: ST_TO_ADDR
// for i = 1 to normalCounter do
10479: LD_ADDR_VAR 0 8
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_EXP 25
10493: PUSH
10494: FOR_TO
10495: IFFALSE 10531
// begin if flags [ i ] then
10497: LD_VAR 0 4
10501: PUSH
10502: LD_VAR 0 8
10506: ARRAY
10507: IFFALSE 10529
// tmp := tmp & i & ; ;
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: LD_VAR 0 3
10518: PUSH
10519: LD_VAR 0 8
10523: STR
10524: PUSH
10525: LD_STRING ;
10527: STR
10528: ST_TO_ADDR
// end ;
10529: GO 10494
10531: POP
10532: POP
// for i = 1 to hardcoreCounter do
10533: LD_ADDR_VAR 0 8
10537: PUSH
10538: DOUBLE
10539: LD_INT 1
10541: DEC
10542: ST_TO_ADDR
10543: LD_EXP 26
10547: PUSH
10548: FOR_TO
10549: IFFALSE 10595
// begin if flags [ normalCounter + i ] then
10551: LD_VAR 0 4
10555: PUSH
10556: LD_EXP 25
10560: PUSH
10561: LD_VAR 0 8
10565: PLUS
10566: ARRAY
10567: IFFALSE 10593
// tmp := tmp & ( 100 + i ) & ; ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_INT 100
10581: PUSH
10582: LD_VAR 0 8
10586: PLUS
10587: STR
10588: PUSH
10589: LD_STRING ;
10591: STR
10592: ST_TO_ADDR
// end ;
10593: GO 10548
10595: POP
10596: POP
// if tmp then
10597: LD_VAR 0 3
10601: IFFALSE 10613
// active := tmp ;
10603: LD_ADDR_VAR 0 7
10607: PUSH
10608: LD_VAR 0 3
10612: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10613: LD_STRING getStreamItemsFromMission("
10615: PUSH
10616: LD_VAR 0 5
10620: STR
10621: PUSH
10622: LD_STRING ","
10624: STR
10625: PUSH
10626: LD_VAR 0 6
10630: STR
10631: PUSH
10632: LD_STRING ","
10634: STR
10635: PUSH
10636: LD_VAR 0 7
10640: STR
10641: PUSH
10642: LD_STRING ")
10644: STR
10645: PPUSH
10646: CALL_OW 559
// end else
10650: GO 10659
// ToLua ( getStreamItemsFromMission("","","") ) ;
10652: LD_STRING getStreamItemsFromMission("","","")
10654: PPUSH
10655: CALL_OW 559
// end ;
10659: LD_VAR 0 2
10663: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10664: LD_EXP 24
10668: IFFALSE 10676
10670: PUSH
10671: LD_EXP 29
10675: AND
10676: IFFALSE 10800
10678: GO 10680
10680: DISABLE
10681: LD_INT 0
10683: PPUSH
10684: PPUSH
// begin enable ;
10685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 22
10693: PUSH
10694: LD_OWVAR 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 34
10708: PUSH
10709: LD_INT 7
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 34
10718: PUSH
10719: LD_INT 45
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 34
10728: PUSH
10729: LD_INT 28
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 34
10738: PUSH
10739: LD_INT 47
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: ST_TO_ADDR
// if not tmp then
10762: LD_VAR 0 2
10766: NOT
10767: IFFALSE 10771
// exit ;
10769: GO 10800
// for i in tmp do
10771: LD_ADDR_VAR 0 1
10775: PUSH
10776: LD_VAR 0 2
10780: PUSH
10781: FOR_IN
10782: IFFALSE 10798
// begin SetLives ( i , 0 ) ;
10784: LD_VAR 0 1
10788: PPUSH
10789: LD_INT 0
10791: PPUSH
10792: CALL_OW 234
// end ;
10796: GO 10781
10798: POP
10799: POP
// end ;
10800: PPOPN 2
10802: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10803: LD_EXP 24
10807: IFFALSE 10815
10809: PUSH
10810: LD_EXP 30
10814: AND
10815: IFFALSE 10899
10817: GO 10819
10819: DISABLE
10820: LD_INT 0
10822: PPUSH
10823: PPUSH
// begin enable ;
10824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10825: LD_ADDR_VAR 0 2
10829: PUSH
10830: LD_INT 22
10832: PUSH
10833: LD_OWVAR 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 32
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: ST_TO_ADDR
// if not tmp then
10861: LD_VAR 0 2
10865: NOT
10866: IFFALSE 10870
// exit ;
10868: GO 10899
// for i in tmp do
10870: LD_ADDR_VAR 0 1
10874: PUSH
10875: LD_VAR 0 2
10879: PUSH
10880: FOR_IN
10881: IFFALSE 10897
// begin SetLives ( i , 0 ) ;
10883: LD_VAR 0 1
10887: PPUSH
10888: LD_INT 0
10890: PPUSH
10891: CALL_OW 234
// end ;
10895: GO 10880
10897: POP
10898: POP
// end ;
10899: PPOPN 2
10901: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10902: LD_EXP 24
10906: IFFALSE 10914
10908: PUSH
10909: LD_EXP 27
10913: AND
10914: IFFALSE 11007
10916: GO 10918
10918: DISABLE
10919: LD_INT 0
10921: PPUSH
// begin enable ;
10922: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10923: LD_ADDR_VAR 0 1
10927: PUSH
10928: LD_INT 22
10930: PUSH
10931: LD_OWVAR 2
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 9
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PPUSH
10983: CALL_OW 69
10987: PUSH
10988: FOR_IN
10989: IFFALSE 11005
// begin SetClass ( i , 1 ) ;
10991: LD_VAR 0 1
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 336
// end ;
11003: GO 10988
11005: POP
11006: POP
// end ;
11007: PPOPN 1
11009: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11010: LD_EXP 24
11014: IFFALSE 11022
11016: PUSH
11017: LD_EXP 28
11021: AND
11022: IFFALSE 11034
11024: PUSH
11025: LD_OWVAR 65
11029: PUSH
11030: LD_INT 7
11032: LESS
11033: AND
11034: IFFALSE 11048
11036: GO 11038
11038: DISABLE
// begin enable ;
11039: ENABLE
// game_speed := 7 ;
11040: LD_ADDR_OWVAR 65
11044: PUSH
11045: LD_INT 7
11047: ST_TO_ADDR
// end ;
11048: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11049: LD_EXP 24
11053: IFFALSE 11061
11055: PUSH
11056: LD_EXP 31
11060: AND
11061: IFFALSE 11263
11063: GO 11065
11065: DISABLE
11066: LD_INT 0
11068: PPUSH
11069: PPUSH
11070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: LD_INT 81
11078: PUSH
11079: LD_OWVAR 2
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 69
11106: ST_TO_ADDR
// if not tmp then
11107: LD_VAR 0 3
11111: NOT
11112: IFFALSE 11116
// exit ;
11114: GO 11263
// if tmp > 5 then
11116: LD_VAR 0 3
11120: PUSH
11121: LD_INT 5
11123: GREATER
11124: IFFALSE 11136
// k := 5 else
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 5
11133: ST_TO_ADDR
11134: GO 11146
// k := tmp ;
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: LD_VAR 0 3
11145: ST_TO_ADDR
// for i := 1 to k do
11146: LD_ADDR_VAR 0 1
11150: PUSH
11151: DOUBLE
11152: LD_INT 1
11154: DEC
11155: ST_TO_ADDR
11156: LD_VAR 0 2
11160: PUSH
11161: FOR_TO
11162: IFFALSE 11261
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11164: LD_VAR 0 3
11168: PUSH
11169: LD_VAR 0 1
11173: ARRAY
11174: PPUSH
11175: LD_VAR 0 1
11179: PUSH
11180: LD_INT 4
11182: MOD
11183: PUSH
11184: LD_INT 1
11186: PLUS
11187: PPUSH
11188: CALL_OW 259
11192: PUSH
11193: LD_INT 10
11195: LESS
11196: IFFALSE 11259
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11198: LD_VAR 0 3
11202: PUSH
11203: LD_VAR 0 1
11207: ARRAY
11208: PPUSH
11209: LD_VAR 0 1
11213: PUSH
11214: LD_INT 4
11216: MOD
11217: PUSH
11218: LD_INT 1
11220: PLUS
11221: PPUSH
11222: LD_VAR 0 3
11226: PUSH
11227: LD_VAR 0 1
11231: ARRAY
11232: PPUSH
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 4
11240: MOD
11241: PUSH
11242: LD_INT 1
11244: PLUS
11245: PPUSH
11246: CALL_OW 259
11250: PUSH
11251: LD_INT 1
11253: PLUS
11254: PPUSH
11255: CALL_OW 237
11259: GO 11161
11261: POP
11262: POP
// end ;
11263: PPOPN 3
11265: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11266: LD_EXP 24
11270: IFFALSE 11278
11272: PUSH
11273: LD_EXP 32
11277: AND
11278: IFFALSE 11298
11280: GO 11282
11282: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11283: LD_INT 4
11285: PPUSH
11286: LD_OWVAR 2
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 324
11298: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11299: LD_EXP 24
11303: IFFALSE 11311
11305: PUSH
11306: LD_EXP 61
11310: AND
11311: IFFALSE 11331
11313: GO 11315
11315: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11316: LD_INT 19
11318: PPUSH
11319: LD_OWVAR 2
11323: PPUSH
11324: LD_INT 0
11326: PPUSH
11327: CALL_OW 324
11331: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11332: LD_EXP 24
11336: IFFALSE 11344
11338: PUSH
11339: LD_EXP 33
11343: AND
11344: IFFALSE 11446
11346: GO 11348
11348: DISABLE
11349: LD_INT 0
11351: PPUSH
11352: PPUSH
// begin enable ;
11353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: LD_INT 22
11361: PUSH
11362: LD_OWVAR 2
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 34
11376: PUSH
11377: LD_INT 11
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 34
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 69
11407: ST_TO_ADDR
// if not tmp then
11408: LD_VAR 0 2
11412: NOT
11413: IFFALSE 11417
// exit ;
11415: GO 11446
// for i in tmp do
11417: LD_ADDR_VAR 0 1
11421: PUSH
11422: LD_VAR 0 2
11426: PUSH
11427: FOR_IN
11428: IFFALSE 11444
// begin SetLives ( i , 0 ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 0
11437: PPUSH
11438: CALL_OW 234
// end ;
11442: GO 11427
11444: POP
11445: POP
// end ;
11446: PPOPN 2
11448: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11449: LD_EXP 24
11453: IFFALSE 11461
11455: PUSH
11456: LD_EXP 34
11460: AND
11461: IFFALSE 11481
11463: GO 11465
11465: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11466: LD_INT 32
11468: PPUSH
11469: LD_OWVAR 2
11473: PPUSH
11474: LD_INT 0
11476: PPUSH
11477: CALL_OW 324
11481: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11482: LD_EXP 24
11486: IFFALSE 11494
11488: PUSH
11489: LD_EXP 35
11493: AND
11494: IFFALSE 11677
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
11502: PPUSH
11503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_INT 22
11511: PUSH
11512: LD_OWVAR 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PPUSH
11535: CALL_OW 69
11539: ST_TO_ADDR
// if not tmp then
11540: LD_VAR 0 2
11544: NOT
11545: IFFALSE 11549
// exit ;
11547: GO 11677
// side := 0 ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_INT 0
11556: ST_TO_ADDR
// for i := 1 to 8 do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_INT 8
11569: PUSH
11570: FOR_TO
11571: IFFALSE 11621
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11573: LD_OWVAR 2
11577: PUSH
11578: LD_VAR 0 1
11582: NONEQUAL
11583: IFFALSE 11605
11585: PUSH
11586: LD_OWVAR 2
11590: PPUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 81
11600: PUSH
11601: LD_INT 2
11603: EQUAL
11604: AND
11605: IFFALSE 11619
// begin side := i ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 1
11616: ST_TO_ADDR
// break ;
11617: GO 11621
// end ;
11619: GO 11570
11621: POP
11622: POP
// if not side then
11623: LD_VAR 0 3
11627: NOT
11628: IFFALSE 11632
// exit ;
11630: GO 11677
// for i := 1 to tmp do
11632: LD_ADDR_VAR 0 1
11636: PUSH
11637: DOUBLE
11638: LD_INT 1
11640: DEC
11641: ST_TO_ADDR
11642: LD_VAR 0 2
11646: PUSH
11647: FOR_TO
11648: IFFALSE 11675
// if Prob ( 60 ) then
11650: LD_INT 60
11652: PPUSH
11653: CALL_OW 13
11657: IFFALSE 11673
// SetSide ( i , side ) ;
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: CALL_OW 235
11673: GO 11647
11675: POP
11676: POP
// end ;
11677: PPOPN 3
11679: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11680: LD_EXP 24
11684: IFFALSE 11692
11686: PUSH
11687: LD_EXP 37
11691: AND
11692: IFFALSE 11811
11694: GO 11696
11696: DISABLE
11697: LD_INT 0
11699: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11700: LD_ADDR_VAR 0 1
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_OWVAR 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 21
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 3
11729: PUSH
11730: LD_INT 23
11732: PUSH
11733: LD_INT 0
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11809
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 257
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: LD_INT 3
11775: PUSH
11776: LD_INT 4
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: IN
11785: IFFALSE 11807
// SetClass ( un , rand ( 1 , 4 ) ) ;
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 4
11797: PPUSH
11798: CALL_OW 12
11802: PPUSH
11803: CALL_OW 336
11807: GO 11754
11809: POP
11810: POP
// end ;
11811: PPOPN 1
11813: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11814: LD_EXP 24
11818: IFFALSE 11826
11820: PUSH
11821: LD_EXP 36
11825: AND
11826: IFFALSE 11905
11828: GO 11830
11830: DISABLE
11831: LD_INT 0
11833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 22
11841: PUSH
11842: LD_OWVAR 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 21
11853: PUSH
11854: LD_INT 3
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 69
11869: ST_TO_ADDR
// if not tmp then
11870: LD_VAR 0 1
11874: NOT
11875: IFFALSE 11879
// exit ;
11877: GO 11905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11879: LD_VAR 0 1
11883: PUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 12
11896: ARRAY
11897: PPUSH
11898: LD_INT 100
11900: PPUSH
11901: CALL_OW 234
// end ;
11905: PPOPN 1
11907: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11908: LD_EXP 24
11912: IFFALSE 11920
11914: PUSH
11915: LD_EXP 38
11919: AND
11920: IFFALSE 12018
11922: GO 11924
11924: DISABLE
11925: LD_INT 0
11927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_OWVAR 2
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: ST_TO_ADDR
// if not tmp then
11964: LD_VAR 0 1
11968: NOT
11969: IFFALSE 11973
// exit ;
11971: GO 12018
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: PPUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 12
11990: ARRAY
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: LD_INT 4
11997: PPUSH
11998: CALL_OW 12
12002: PPUSH
12003: LD_INT 3000
12005: PPUSH
12006: LD_INT 9000
12008: PPUSH
12009: CALL_OW 12
12013: PPUSH
12014: CALL_OW 492
// end ;
12018: PPOPN 1
12020: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12021: LD_EXP 24
12025: IFFALSE 12033
12027: PUSH
12028: LD_EXP 39
12032: AND
12033: IFFALSE 12053
12035: GO 12037
12037: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12038: LD_INT 1
12040: PPUSH
12041: LD_OWVAR 2
12045: PPUSH
12046: LD_INT 0
12048: PPUSH
12049: CALL_OW 324
12053: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12054: LD_EXP 24
12058: IFFALSE 12066
12060: PUSH
12061: LD_EXP 40
12065: AND
12066: IFFALSE 12149
12068: GO 12070
12070: DISABLE
12071: LD_INT 0
12073: PPUSH
12074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12075: LD_ADDR_VAR 0 2
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_OWVAR 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: ST_TO_ADDR
// if not tmp then
12111: LD_VAR 0 2
12115: NOT
12116: IFFALSE 12120
// exit ;
12118: GO 12149
// for i in tmp do
12120: LD_ADDR_VAR 0 1
12124: PUSH
12125: LD_VAR 0 2
12129: PUSH
12130: FOR_IN
12131: IFFALSE 12147
// SetBLevel ( i , 10 ) ;
12133: LD_VAR 0 1
12137: PPUSH
12138: LD_INT 10
12140: PPUSH
12141: CALL_OW 241
12145: GO 12130
12147: POP
12148: POP
// end ;
12149: PPOPN 2
12151: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12152: LD_EXP 24
12156: IFFALSE 12164
12158: PUSH
12159: LD_EXP 41
12163: AND
12164: IFFALSE 12275
12166: GO 12168
12168: DISABLE
12169: LD_INT 0
12171: PPUSH
12172: PPUSH
12173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12174: LD_ADDR_VAR 0 3
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_OWVAR 2
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: ST_TO_ADDR
// if not tmp then
12210: LD_VAR 0 3
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12275
// un := tmp [ rand ( 1 , tmp ) ] ;
12219: LD_ADDR_VAR 0 2
12223: PUSH
12224: LD_VAR 0 3
12228: PUSH
12229: LD_INT 1
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: CALL_OW 12
12241: ARRAY
12242: ST_TO_ADDR
// if Crawls ( un ) then
12243: LD_VAR 0 2
12247: PPUSH
12248: CALL_OW 318
12252: IFFALSE 12263
// ComWalk ( un ) ;
12254: LD_VAR 0 2
12258: PPUSH
12259: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 5
12270: PPUSH
12271: CALL_OW 336
// end ;
12275: PPOPN 3
12277: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12278: LD_EXP 24
12282: IFFALSE 12290
12284: PUSH
12285: LD_EXP 42
12289: AND
12290: IFFALSE 12302
12292: PUSH
12293: LD_OWVAR 67
12297: PUSH
12298: LD_INT 4
12300: LESS
12301: AND
12302: IFFALSE 12321
12304: GO 12306
12306: DISABLE
// begin Difficulty := Difficulty + 1 ;
12307: LD_ADDR_OWVAR 67
12311: PUSH
12312: LD_OWVAR 67
12316: PUSH
12317: LD_INT 1
12319: PLUS
12320: ST_TO_ADDR
// end ;
12321: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12322: LD_EXP 24
12326: IFFALSE 12334
12328: PUSH
12329: LD_EXP 43
12333: AND
12334: IFFALSE 12437
12336: GO 12338
12338: DISABLE
12339: LD_INT 0
12341: PPUSH
// begin for i := 1 to 5 do
12342: LD_ADDR_VAR 0 1
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_INT 5
12354: PUSH
12355: FOR_TO
12356: IFFALSE 12435
// begin uc_nation := nation_nature ;
12358: LD_ADDR_OWVAR 21
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
// uc_side := 0 ;
12366: LD_ADDR_OWVAR 20
12370: PUSH
12371: LD_INT 0
12373: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12374: LD_ADDR_OWVAR 29
12378: PUSH
12379: LD_INT 12
12381: PUSH
12382: LD_INT 12
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: ST_TO_ADDR
// hc_agressivity := 20 ;
12389: LD_ADDR_OWVAR 35
12393: PUSH
12394: LD_INT 20
12396: ST_TO_ADDR
// hc_class := class_tiger ;
12397: LD_ADDR_OWVAR 28
12401: PUSH
12402: LD_INT 14
12404: ST_TO_ADDR
// hc_gallery :=  ;
12405: LD_ADDR_OWVAR 33
12409: PUSH
12410: LD_STRING 
12412: ST_TO_ADDR
// hc_name :=  ;
12413: LD_ADDR_OWVAR 26
12417: PUSH
12418: LD_STRING 
12420: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12421: CALL_OW 44
12425: PPUSH
12426: LD_INT 0
12428: PPUSH
12429: CALL_OW 51
// end ;
12433: GO 12355
12435: POP
12436: POP
// end ;
12437: PPOPN 1
12439: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12440: LD_EXP 24
12444: IFFALSE 12452
12446: PUSH
12447: LD_EXP 44
12451: AND
12452: IFFALSE 12461
12454: GO 12456
12456: DISABLE
// StreamSibBomb ;
12457: CALL 12462 0 0
12461: END
// export function StreamSibBomb ; var i , x , y ; begin
12462: LD_INT 0
12464: PPUSH
12465: PPUSH
12466: PPUSH
12467: PPUSH
// result := false ;
12468: LD_ADDR_VAR 0 1
12472: PUSH
12473: LD_INT 0
12475: ST_TO_ADDR
// for i := 1 to 16 do
12476: LD_ADDR_VAR 0 2
12480: PUSH
12481: DOUBLE
12482: LD_INT 1
12484: DEC
12485: ST_TO_ADDR
12486: LD_INT 16
12488: PUSH
12489: FOR_TO
12490: IFFALSE 12689
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_INT 10
12499: PUSH
12500: LD_INT 20
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 40
12508: PUSH
12509: LD_INT 50
12511: PUSH
12512: LD_INT 60
12514: PUSH
12515: LD_INT 70
12517: PUSH
12518: LD_INT 80
12520: PUSH
12521: LD_INT 90
12523: PUSH
12524: LD_INT 100
12526: PUSH
12527: LD_INT 110
12529: PUSH
12530: LD_INT 120
12532: PUSH
12533: LD_INT 130
12535: PUSH
12536: LD_INT 140
12538: PUSH
12539: LD_INT 150
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 1
12561: PPUSH
12562: LD_INT 15
12564: PPUSH
12565: CALL_OW 12
12569: ARRAY
12570: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12571: LD_ADDR_VAR 0 4
12575: PUSH
12576: LD_INT 10
12578: PUSH
12579: LD_INT 20
12581: PUSH
12582: LD_INT 30
12584: PUSH
12585: LD_INT 40
12587: PUSH
12588: LD_INT 50
12590: PUSH
12591: LD_INT 60
12593: PUSH
12594: LD_INT 70
12596: PUSH
12597: LD_INT 80
12599: PUSH
12600: LD_INT 90
12602: PUSH
12603: LD_INT 100
12605: PUSH
12606: LD_INT 110
12608: PUSH
12609: LD_INT 120
12611: PUSH
12612: LD_INT 130
12614: PUSH
12615: LD_INT 140
12617: PUSH
12618: LD_INT 150
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 1
12640: PPUSH
12641: LD_INT 15
12643: PPUSH
12644: CALL_OW 12
12648: ARRAY
12649: ST_TO_ADDR
// if ValidHex ( x , y ) then
12650: LD_VAR 0 3
12654: PPUSH
12655: LD_VAR 0 4
12659: PPUSH
12660: CALL_OW 488
12664: IFFALSE 12687
// begin result := [ x , y ] ;
12666: LD_ADDR_VAR 0 1
12670: PUSH
12671: LD_VAR 0 3
12675: PUSH
12676: LD_VAR 0 4
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
// break ;
12685: GO 12689
// end ; end ;
12687: GO 12489
12689: POP
12690: POP
// if result then
12691: LD_VAR 0 1
12695: IFFALSE 12755
// begin ToLua ( playSibBomb() ) ;
12697: LD_STRING playSibBomb()
12699: PPUSH
12700: CALL_OW 559
// wait ( 0 0$14 ) ;
12704: LD_INT 490
12706: PPUSH
12707: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: PPUSH
12720: LD_VAR 0 1
12724: PUSH
12725: LD_INT 2
12727: ARRAY
12728: PPUSH
12729: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12733: LD_VAR 0 1
12737: PUSH
12738: LD_INT 1
12740: ARRAY
12741: PPUSH
12742: LD_VAR 0 1
12746: PUSH
12747: LD_INT 2
12749: ARRAY
12750: PPUSH
12751: CALL_OW 429
// end ; end ;
12755: LD_VAR 0 1
12759: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12760: LD_EXP 24
12764: IFFALSE 12772
12766: PUSH
12767: LD_EXP 46
12771: AND
12772: IFFALSE 12784
12774: GO 12776
12776: DISABLE
// YouLost (  ) ;
12777: LD_STRING 
12779: PPUSH
12780: CALL_OW 104
12784: END
// every 0 0$1 trigger StreamModeActive and sFog do
12785: LD_EXP 24
12789: IFFALSE 12797
12791: PUSH
12792: LD_EXP 45
12796: AND
12797: IFFALSE 12811
12799: GO 12801
12801: DISABLE
// FogOff ( your_side ) ;
12802: LD_OWVAR 2
12806: PPUSH
12807: CALL_OW 344
12811: END
// every 0 0$1 trigger StreamModeActive and sSun do
12812: LD_EXP 24
12816: IFFALSE 12824
12818: PUSH
12819: LD_EXP 47
12823: AND
12824: IFFALSE 12852
12826: GO 12828
12828: DISABLE
// begin solar_recharge_percent := 0 ;
12829: LD_ADDR_OWVAR 79
12833: PUSH
12834: LD_INT 0
12836: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12837: LD_INT 10500
12839: PPUSH
12840: CALL_OW 67
// solar_recharge_percent := 100 ;
12844: LD_ADDR_OWVAR 79
12848: PUSH
12849: LD_INT 100
12851: ST_TO_ADDR
// end ;
12852: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12853: LD_EXP 24
12857: IFFALSE 12865
12859: PUSH
12860: LD_EXP 48
12864: AND
12865: IFFALSE 13104
12867: GO 12869
12869: DISABLE
12870: LD_INT 0
12872: PPUSH
12873: PPUSH
12874: PPUSH
// begin tmp := [ ] ;
12875: LD_ADDR_VAR 0 3
12879: PUSH
12880: EMPTY
12881: ST_TO_ADDR
// for i := 1 to 6 do
12882: LD_ADDR_VAR 0 1
12886: PUSH
12887: DOUBLE
12888: LD_INT 1
12890: DEC
12891: ST_TO_ADDR
12892: LD_INT 6
12894: PUSH
12895: FOR_TO
12896: IFFALSE 13001
// begin uc_nation := nation_nature ;
12898: LD_ADDR_OWVAR 21
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// uc_side := 0 ;
12906: LD_ADDR_OWVAR 20
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12914: LD_ADDR_OWVAR 29
12918: PUSH
12919: LD_INT 12
12921: PUSH
12922: LD_INT 12
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: ST_TO_ADDR
// hc_agressivity := 20 ;
12929: LD_ADDR_OWVAR 35
12933: PUSH
12934: LD_INT 20
12936: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12937: LD_ADDR_OWVAR 28
12941: PUSH
12942: LD_INT 17
12944: ST_TO_ADDR
// hc_gallery :=  ;
12945: LD_ADDR_OWVAR 33
12949: PUSH
12950: LD_STRING 
12952: ST_TO_ADDR
// hc_name :=  ;
12953: LD_ADDR_OWVAR 26
12957: PUSH
12958: LD_STRING 
12960: ST_TO_ADDR
// un := CreateHuman ;
12961: LD_ADDR_VAR 0 2
12965: PUSH
12966: CALL_OW 44
12970: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12971: LD_VAR 0 2
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 51
// tmp := tmp ^ un ;
12983: LD_ADDR_VAR 0 3
12987: PUSH
12988: LD_VAR 0 3
12992: PUSH
12993: LD_VAR 0 2
12997: ADD
12998: ST_TO_ADDR
// end ;
12999: GO 12895
13001: POP
13002: POP
// repeat wait ( 0 0$1 ) ;
13003: LD_INT 35
13005: PPUSH
13006: CALL_OW 67
// for un in tmp do
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_VAR 0 3
13019: PUSH
13020: FOR_IN
13021: IFFALSE 13095
// begin if IsDead ( un ) then
13023: LD_VAR 0 2
13027: PPUSH
13028: CALL_OW 301
13032: IFFALSE 13052
// begin tmp := tmp diff un ;
13034: LD_ADDR_VAR 0 3
13038: PUSH
13039: LD_VAR 0 3
13043: PUSH
13044: LD_VAR 0 2
13048: DIFF
13049: ST_TO_ADDR
// continue ;
13050: GO 13020
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13052: LD_VAR 0 2
13056: PPUSH
13057: LD_INT 3
13059: PUSH
13060: LD_INT 22
13062: PUSH
13063: LD_INT 0
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: PPUSH
13079: LD_VAR 0 2
13083: PPUSH
13084: CALL_OW 74
13088: PPUSH
13089: CALL_OW 115
// end ;
13093: GO 13020
13095: POP
13096: POP
// until not tmp ;
13097: LD_VAR 0 3
13101: NOT
13102: IFFALSE 13003
// end ;
13104: PPOPN 3
13106: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13107: LD_EXP 24
13111: IFFALSE 13119
13113: PUSH
13114: LD_EXP 49
13118: AND
13119: IFFALSE 13173
13121: GO 13123
13123: DISABLE
// begin ToLua ( displayTroll(); ) ;
13124: LD_STRING displayTroll();
13126: PPUSH
13127: CALL_OW 559
// wait ( 3 3$00 ) ;
13131: LD_INT 6300
13133: PPUSH
13134: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13138: LD_STRING hideTroll();
13140: PPUSH
13141: CALL_OW 559
// wait ( 1 1$00 ) ;
13145: LD_INT 2100
13147: PPUSH
13148: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13152: LD_STRING displayTroll();
13154: PPUSH
13155: CALL_OW 559
// wait ( 1 1$00 ) ;
13159: LD_INT 2100
13161: PPUSH
13162: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13166: LD_STRING hideTroll();
13168: PPUSH
13169: CALL_OW 559
// end ;
13173: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13174: LD_EXP 24
13178: IFFALSE 13186
13180: PUSH
13181: LD_EXP 50
13185: AND
13186: IFFALSE 13249
13188: GO 13190
13190: DISABLE
13191: LD_INT 0
13193: PPUSH
// begin p := 0 ;
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// repeat game_speed := 1 ;
13202: LD_ADDR_OWVAR 65
13206: PUSH
13207: LD_INT 1
13209: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13210: LD_INT 35
13212: PPUSH
13213: CALL_OW 67
// p := p + 1 ;
13217: LD_ADDR_VAR 0 1
13221: PUSH
13222: LD_VAR 0 1
13226: PUSH
13227: LD_INT 1
13229: PLUS
13230: ST_TO_ADDR
// until p >= 60 ;
13231: LD_VAR 0 1
13235: PUSH
13236: LD_INT 60
13238: GREATEREQUAL
13239: IFFALSE 13202
// game_speed := 4 ;
13241: LD_ADDR_OWVAR 65
13245: PUSH
13246: LD_INT 4
13248: ST_TO_ADDR
// end ;
13249: PPOPN 1
13251: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13252: LD_EXP 24
13256: IFFALSE 13264
13258: PUSH
13259: LD_EXP 51
13263: AND
13264: IFFALSE 13410
13266: GO 13268
13268: DISABLE
13269: LD_INT 0
13271: PPUSH
13272: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13273: LD_ADDR_VAR 0 1
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_OWVAR 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 2
13292: PUSH
13293: LD_INT 30
13295: PUSH
13296: LD_INT 0
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 30
13305: PUSH
13306: LD_INT 1
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: ST_TO_ADDR
// if not depot then
13327: LD_VAR 0 1
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13410
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13336: LD_ADDR_VAR 0 2
13340: PUSH
13341: LD_VAR 0 1
13345: PUSH
13346: LD_INT 1
13348: PPUSH
13349: LD_VAR 0 1
13353: PPUSH
13354: CALL_OW 12
13358: ARRAY
13359: PPUSH
13360: CALL_OW 274
13364: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13365: LD_VAR 0 2
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13380: LD_VAR 0 2
13384: PPUSH
13385: LD_INT 2
13387: PPUSH
13388: LD_INT 0
13390: PPUSH
13391: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13395: LD_VAR 0 2
13399: PPUSH
13400: LD_INT 3
13402: PPUSH
13403: LD_INT 0
13405: PPUSH
13406: CALL_OW 277
// end ;
13410: PPOPN 2
13412: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13413: LD_EXP 24
13417: IFFALSE 13425
13419: PUSH
13420: LD_EXP 52
13424: AND
13425: IFFALSE 13522
13427: GO 13429
13429: DISABLE
13430: LD_INT 0
13432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13433: LD_ADDR_VAR 0 1
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_OWVAR 2
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 3
13462: PUSH
13463: LD_INT 23
13465: PUSH
13466: LD_INT 0
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: ST_TO_ADDR
// if not tmp then
13487: LD_VAR 0 1
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 13522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13496: LD_VAR 0 1
13500: PUSH
13501: LD_INT 1
13503: PPUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 12
13513: ARRAY
13514: PPUSH
13515: LD_INT 200
13517: PPUSH
13518: CALL_OW 234
// end ;
13522: PPOPN 1
13524: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13525: LD_EXP 24
13529: IFFALSE 13537
13531: PUSH
13532: LD_EXP 53
13536: AND
13537: IFFALSE 13616
13539: GO 13541
13541: DISABLE
13542: LD_INT 0
13544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13545: LD_ADDR_VAR 0 1
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_OWVAR 2
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 21
13564: PUSH
13565: LD_INT 2
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 69
13580: ST_TO_ADDR
// if not tmp then
13581: LD_VAR 0 1
13585: NOT
13586: IFFALSE 13590
// exit ;
13588: GO 13616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13590: LD_VAR 0 1
13594: PUSH
13595: LD_INT 1
13597: PPUSH
13598: LD_VAR 0 1
13602: PPUSH
13603: CALL_OW 12
13607: ARRAY
13608: PPUSH
13609: LD_INT 60
13611: PPUSH
13612: CALL_OW 234
// end ;
13616: PPOPN 1
13618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13619: LD_EXP 24
13623: IFFALSE 13631
13625: PUSH
13626: LD_EXP 54
13630: AND
13631: IFFALSE 13730
13633: GO 13635
13635: DISABLE
13636: LD_INT 0
13638: PPUSH
13639: PPUSH
// begin enable ;
13640: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13641: LD_ADDR_VAR 0 1
13645: PUSH
13646: LD_INT 22
13648: PUSH
13649: LD_OWVAR 2
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 61
13660: PUSH
13661: EMPTY
13662: LIST
13663: PUSH
13664: LD_INT 33
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if not tmp then
13684: LD_VAR 0 1
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 13730
// for i in tmp do
13693: LD_ADDR_VAR 0 2
13697: PUSH
13698: LD_VAR 0 1
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13728
// if IsControledBy ( i ) then
13706: LD_VAR 0 2
13710: PPUSH
13711: CALL_OW 312
13715: IFFALSE 13726
// ComUnlink ( i ) ;
13717: LD_VAR 0 2
13721: PPUSH
13722: CALL_OW 136
13726: GO 13703
13728: POP
13729: POP
// end ;
13730: PPOPN 2
13732: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13733: LD_EXP 24
13737: IFFALSE 13745
13739: PUSH
13740: LD_EXP 55
13744: AND
13745: IFFALSE 13885
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
13753: PPUSH
// begin ToLua ( displayPowell(); ) ;
13754: LD_STRING displayPowell();
13756: PPUSH
13757: CALL_OW 559
// uc_side := 0 ;
13761: LD_ADDR_OWVAR 20
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// uc_nation := 2 ;
13769: LD_ADDR_OWVAR 21
13773: PUSH
13774: LD_INT 2
13776: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13777: LD_ADDR_OWVAR 37
13781: PUSH
13782: LD_INT 14
13784: ST_TO_ADDR
// vc_engine := engine_siberite ;
13785: LD_ADDR_OWVAR 39
13789: PUSH
13790: LD_INT 3
13792: ST_TO_ADDR
// vc_control := control_apeman ;
13793: LD_ADDR_OWVAR 38
13797: PUSH
13798: LD_INT 5
13800: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13801: LD_ADDR_OWVAR 40
13805: PUSH
13806: LD_INT 29
13808: ST_TO_ADDR
// un := CreateVehicle ;
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: CALL_OW 45
13818: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13819: LD_VAR 0 2
13823: PPUSH
13824: LD_INT 1
13826: PPUSH
13827: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13831: LD_INT 35
13833: PPUSH
13834: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13838: LD_VAR 0 2
13842: PPUSH
13843: LD_INT 22
13845: PUSH
13846: LD_OWVAR 2
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PPUSH
13855: CALL_OW 69
13859: PPUSH
13860: LD_VAR 0 2
13864: PPUSH
13865: CALL_OW 74
13869: PPUSH
13870: CALL_OW 115
// until IsDead ( un ) ;
13874: LD_VAR 0 2
13878: PPUSH
13879: CALL_OW 301
13883: IFFALSE 13831
// end ;
13885: PPOPN 2
13887: END
// every 0 0$1 trigger StreamModeActive and sStu do
13888: LD_EXP 24
13892: IFFALSE 13900
13894: PUSH
13895: LD_EXP 63
13899: AND
13900: IFFALSE 13916
13902: GO 13904
13904: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13905: LD_STRING displayStucuk();
13907: PPUSH
13908: CALL_OW 559
// ResetFog ;
13912: CALL_OW 335
// end ;
13916: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13917: LD_EXP 24
13921: IFFALSE 13929
13923: PUSH
13924: LD_EXP 56
13928: AND
13929: IFFALSE 14070
13931: GO 13933
13933: DISABLE
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 21
13957: PUSH
13958: LD_INT 1
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: ST_TO_ADDR
// if not tmp then
13974: LD_VAR 0 2
13978: NOT
13979: IFFALSE 13983
// exit ;
13981: GO 14070
// un := tmp [ rand ( 1 , tmp ) ] ;
13983: LD_ADDR_VAR 0 1
13987: PUSH
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: PPUSH
13996: LD_VAR 0 2
14000: PPUSH
14001: CALL_OW 12
14005: ARRAY
14006: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 0
14014: PPUSH
14015: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_OWVAR 3
14028: PUSH
14029: LD_VAR 0 1
14033: DIFF
14034: PPUSH
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 74
14044: PPUSH
14045: CALL_OW 115
// wait ( 0 0$20 ) ;
14049: LD_INT 700
14051: PPUSH
14052: CALL_OW 67
// SetSide ( un , your_side ) ;
14056: LD_VAR 0 1
14060: PPUSH
14061: LD_OWVAR 2
14065: PPUSH
14066: CALL_OW 235
// end ;
14070: PPOPN 2
14072: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14073: LD_EXP 24
14077: IFFALSE 14085
14079: PUSH
14080: LD_EXP 57
14084: AND
14085: IFFALSE 14191
14087: GO 14089
14089: DISABLE
14090: LD_INT 0
14092: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14093: LD_ADDR_VAR 0 1
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 1
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 69
14146: ST_TO_ADDR
// if not depot then
14147: LD_VAR 0 1
14151: NOT
14152: IFFALSE 14156
// exit ;
14154: GO 14191
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14156: LD_VAR 0 1
14160: PUSH
14161: LD_INT 1
14163: ARRAY
14164: PPUSH
14165: CALL_OW 250
14169: PPUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: PPUSH
14179: CALL_OW 251
14183: PPUSH
14184: LD_INT 70
14186: PPUSH
14187: CALL_OW 495
// end ;
14191: PPOPN 1
14193: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14194: LD_EXP 24
14198: IFFALSE 14206
14200: PUSH
14201: LD_EXP 58
14205: AND
14206: IFFALSE 14417
14208: GO 14210
14210: DISABLE
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_OWVAR 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 21
14237: PUSH
14238: LD_INT 1
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if not tmp then
14254: LD_VAR 0 5
14258: NOT
14259: IFFALSE 14263
// exit ;
14261: GO 14417
// for i in tmp do
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: LD_VAR 0 5
14272: PUSH
14273: FOR_IN
14274: IFFALSE 14415
// begin d := rand ( 0 , 5 ) ;
14276: LD_ADDR_VAR 0 4
14280: PUSH
14281: LD_INT 0
14283: PPUSH
14284: LD_INT 5
14286: PPUSH
14287: CALL_OW 12
14291: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 250
14306: PPUSH
14307: LD_VAR 0 4
14311: PPUSH
14312: LD_INT 3
14314: PPUSH
14315: LD_INT 12
14317: PPUSH
14318: CALL_OW 12
14322: PPUSH
14323: CALL_OW 272
14327: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 251
14342: PPUSH
14343: LD_VAR 0 4
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: LD_INT 12
14353: PPUSH
14354: CALL_OW 12
14358: PPUSH
14359: CALL_OW 273
14363: ST_TO_ADDR
// if ValidHex ( x , y ) then
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 488
14378: IFFALSE 14413
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_VAR 0 2
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: LD_INT 3
14397: PPUSH
14398: LD_INT 6
14400: PPUSH
14401: CALL_OW 12
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 483
// end ;
14413: GO 14273
14415: POP
14416: POP
// end ;
14417: PPOPN 5
14419: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14420: LD_EXP 24
14424: IFFALSE 14432
14426: PUSH
14427: LD_EXP 59
14431: AND
14432: IFFALSE 14526
14434: GO 14436
14436: DISABLE
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_INT 22
14448: PUSH
14449: LD_OWVAR 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 32
14460: PUSH
14461: LD_INT 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 2
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: PPUSH
14483: CALL_OW 69
14487: ST_TO_ADDR
// if not tmp then
14488: LD_VAR 0 2
14492: NOT
14493: IFFALSE 14497
// exit ;
14495: GO 14526
// for i in tmp do
14497: LD_ADDR_VAR 0 1
14501: PUSH
14502: LD_VAR 0 2
14506: PUSH
14507: FOR_IN
14508: IFFALSE 14524
// SetFuel ( i , 0 ) ;
14510: LD_VAR 0 1
14514: PPUSH
14515: LD_INT 0
14517: PPUSH
14518: CALL_OW 240
14522: GO 14507
14524: POP
14525: POP
// end ;
14526: PPOPN 2
14528: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14529: LD_EXP 24
14533: IFFALSE 14541
14535: PUSH
14536: LD_EXP 60
14540: AND
14541: IFFALSE 14607
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: LD_INT 22
14556: PUSH
14557: LD_OWVAR 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 30
14568: PUSH
14569: LD_INT 29
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 1
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14607
// DestroyUnit ( tmp [ 1 ] ) ;
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PPUSH
14603: CALL_OW 65
// end ;
14607: PPOPN 1
14609: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14610: LD_EXP 24
14614: IFFALSE 14622
14616: PUSH
14617: LD_EXP 62
14621: AND
14622: IFFALSE 14751
14624: GO 14626
14626: DISABLE
14627: LD_INT 0
14629: PPUSH
// begin uc_side := 0 ;
14630: LD_ADDR_OWVAR 20
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// uc_nation := nation_arabian ;
14638: LD_ADDR_OWVAR 21
14642: PUSH
14643: LD_INT 2
14645: ST_TO_ADDR
// hc_gallery :=  ;
14646: LD_ADDR_OWVAR 33
14650: PUSH
14651: LD_STRING 
14653: ST_TO_ADDR
// hc_name :=  ;
14654: LD_ADDR_OWVAR 26
14658: PUSH
14659: LD_STRING 
14661: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14662: LD_INT 1
14664: PPUSH
14665: LD_INT 11
14667: PPUSH
14668: LD_INT 10
14670: PPUSH
14671: CALL_OW 380
// un := CreateHuman ;
14675: LD_ADDR_VAR 0 1
14679: PUSH
14680: CALL_OW 44
14684: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14685: LD_VAR 0 1
14689: PPUSH
14690: LD_INT 1
14692: PPUSH
14693: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14697: LD_INT 35
14699: PPUSH
14700: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14704: LD_VAR 0 1
14708: PPUSH
14709: LD_INT 22
14711: PUSH
14712: LD_OWVAR 2
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: PPUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 74
14735: PPUSH
14736: CALL_OW 115
// until IsDead ( un ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 301
14749: IFFALSE 14697
// end ;
14751: PPOPN 1
14753: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14754: LD_EXP 24
14758: IFFALSE 14766
14760: PUSH
14761: LD_EXP 64
14765: AND
14766: IFFALSE 14778
14768: GO 14770
14770: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14771: LD_STRING earthquake(getX(game), 0, 32)
14773: PPUSH
14774: CALL_OW 559
14778: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14779: LD_EXP 24
14783: IFFALSE 14791
14785: PUSH
14786: LD_EXP 65
14790: AND
14791: IFFALSE 14882
14793: GO 14795
14795: DISABLE
14796: LD_INT 0
14798: PPUSH
// begin enable ;
14799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_OWVAR 2
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 21
14819: PUSH
14820: LD_INT 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 33
14829: PUSH
14830: LD_INT 3
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 69
14846: ST_TO_ADDR
// if not tmp then
14847: LD_VAR 0 1
14851: NOT
14852: IFFALSE 14856
// exit ;
14854: GO 14882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14856: LD_VAR 0 1
14860: PUSH
14861: LD_INT 1
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 12
14873: ARRAY
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 234
// end ;
14882: PPOPN 1
14884: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14885: LD_EXP 24
14889: IFFALSE 14897
14891: PUSH
14892: LD_EXP 66
14896: AND
14897: IFFALSE 15038
14899: GO 14901
14901: DISABLE
14902: LD_INT 0
14904: PPUSH
14905: PPUSH
14906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 22
14914: PUSH
14915: LD_OWVAR 2
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 25
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PPUSH
14938: CALL_OW 69
14942: ST_TO_ADDR
// if not tmp then
14943: LD_VAR 0 3
14947: NOT
14948: IFFALSE 14952
// exit ;
14950: GO 15038
// un := tmp [ rand ( 1 , tmp ) ] ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_VAR 0 3
14961: PUSH
14962: LD_INT 1
14964: PPUSH
14965: LD_VAR 0 3
14969: PPUSH
14970: CALL_OW 12
14974: ARRAY
14975: ST_TO_ADDR
// if Crawls ( un ) then
14976: LD_VAR 0 2
14980: PPUSH
14981: CALL_OW 318
14985: IFFALSE 14996
// ComWalk ( un ) ;
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14996: LD_VAR 0 2
15000: PPUSH
15001: LD_INT 9
15003: PPUSH
15004: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15008: LD_INT 28
15010: PPUSH
15011: LD_OWVAR 2
15015: PPUSH
15016: LD_INT 2
15018: PPUSH
15019: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15023: LD_INT 29
15025: PPUSH
15026: LD_OWVAR 2
15030: PPUSH
15031: LD_INT 2
15033: PPUSH
15034: CALL_OW 322
// end ;
15038: PPOPN 3
15040: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15041: LD_EXP 24
15045: IFFALSE 15053
15047: PUSH
15048: LD_EXP 67
15052: AND
15053: IFFALSE 15164
15055: GO 15057
15057: DISABLE
15058: LD_INT 0
15060: PPUSH
15061: PPUSH
15062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15063: LD_ADDR_VAR 0 3
15067: PUSH
15068: LD_INT 22
15070: PUSH
15071: LD_OWVAR 2
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 25
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 69
15098: ST_TO_ADDR
// if not tmp then
15099: LD_VAR 0 3
15103: NOT
15104: IFFALSE 15108
// exit ;
15106: GO 15164
// un := tmp [ rand ( 1 , tmp ) ] ;
15108: LD_ADDR_VAR 0 2
15112: PUSH
15113: LD_VAR 0 3
15117: PUSH
15118: LD_INT 1
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: CALL_OW 12
15130: ARRAY
15131: ST_TO_ADDR
// if Crawls ( un ) then
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL_OW 318
15141: IFFALSE 15152
// ComWalk ( un ) ;
15143: LD_VAR 0 2
15147: PPUSH
15148: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_INT 8
15159: PPUSH
15160: CALL_OW 336
// end ;
15164: PPOPN 3
15166: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15167: LD_EXP 24
15171: IFFALSE 15179
15173: PUSH
15174: LD_EXP 68
15178: AND
15179: IFFALSE 15323
15181: GO 15183
15183: DISABLE
15184: LD_INT 0
15186: PPUSH
15187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15188: LD_ADDR_VAR 0 2
15192: PUSH
15193: LD_INT 22
15195: PUSH
15196: LD_OWVAR 2
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: LD_INT 34
15220: PUSH
15221: LD_INT 12
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 34
15230: PUSH
15231: LD_INT 51
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 34
15240: PUSH
15241: LD_INT 32
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL_OW 69
15263: ST_TO_ADDR
// if not tmp then
15264: LD_VAR 0 2
15268: NOT
15269: IFFALSE 15273
// exit ;
15271: GO 15323
// for i in tmp do
15273: LD_ADDR_VAR 0 1
15277: PUSH
15278: LD_VAR 0 2
15282: PUSH
15283: FOR_IN
15284: IFFALSE 15321
// if GetCargo ( i , mat_artifact ) = 0 then
15286: LD_VAR 0 1
15290: PPUSH
15291: LD_INT 4
15293: PPUSH
15294: CALL_OW 289
15298: PUSH
15299: LD_INT 0
15301: EQUAL
15302: IFFALSE 15319
// SetCargo ( i , mat_siberit , 100 ) ;
15304: LD_VAR 0 1
15308: PPUSH
15309: LD_INT 3
15311: PPUSH
15312: LD_INT 100
15314: PPUSH
15315: CALL_OW 290
15319: GO 15283
15321: POP
15322: POP
// end ;
15323: PPOPN 2
15325: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15326: LD_EXP 24
15330: IFFALSE 15338
15332: PUSH
15333: LD_EXP 69
15337: AND
15338: IFFALSE 15521
15340: GO 15342
15342: DISABLE
15343: LD_INT 0
15345: PPUSH
15346: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15347: LD_ADDR_VAR 0 2
15351: PUSH
15352: LD_INT 22
15354: PUSH
15355: LD_OWVAR 2
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PPUSH
15364: CALL_OW 69
15368: ST_TO_ADDR
// if not tmp then
15369: LD_VAR 0 2
15373: NOT
15374: IFFALSE 15378
// exit ;
15376: GO 15521
// for i := 1 to 2 do
15378: LD_ADDR_VAR 0 1
15382: PUSH
15383: DOUBLE
15384: LD_INT 1
15386: DEC
15387: ST_TO_ADDR
15388: LD_INT 2
15390: PUSH
15391: FOR_TO
15392: IFFALSE 15519
// begin uc_side := your_side ;
15394: LD_ADDR_OWVAR 20
15398: PUSH
15399: LD_OWVAR 2
15403: ST_TO_ADDR
// uc_nation := nation_american ;
15404: LD_ADDR_OWVAR 21
15408: PUSH
15409: LD_INT 1
15411: ST_TO_ADDR
// vc_chassis := us_morphling ;
15412: LD_ADDR_OWVAR 37
15416: PUSH
15417: LD_INT 5
15419: ST_TO_ADDR
// vc_engine := engine_siberite ;
15420: LD_ADDR_OWVAR 39
15424: PUSH
15425: LD_INT 3
15427: ST_TO_ADDR
// vc_control := control_computer ;
15428: LD_ADDR_OWVAR 38
15432: PUSH
15433: LD_INT 3
15435: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15436: LD_ADDR_OWVAR 40
15440: PUSH
15441: LD_INT 10
15443: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15444: LD_VAR 0 2
15448: PUSH
15449: LD_INT 1
15451: ARRAY
15452: PPUSH
15453: CALL_OW 310
15457: NOT
15458: IFFALSE 15505
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15460: CALL_OW 45
15464: PPUSH
15465: LD_VAR 0 2
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: CALL_OW 250
15478: PPUSH
15479: LD_VAR 0 2
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: CALL_OW 251
15492: PPUSH
15493: LD_INT 12
15495: PPUSH
15496: LD_INT 1
15498: PPUSH
15499: CALL_OW 50
15503: GO 15517
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15505: CALL_OW 45
15509: PPUSH
15510: LD_INT 1
15512: PPUSH
15513: CALL_OW 51
// end ;
15517: GO 15391
15519: POP
15520: POP
// end ;
15521: PPOPN 2
15523: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15524: LD_EXP 24
15528: IFFALSE 15536
15530: PUSH
15531: LD_EXP 70
15535: AND
15536: IFFALSE 15758
15538: GO 15540
15540: DISABLE
15541: LD_INT 0
15543: PPUSH
15544: PPUSH
15545: PPUSH
15546: PPUSH
15547: PPUSH
15548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15549: LD_ADDR_VAR 0 6
15553: PUSH
15554: LD_INT 22
15556: PUSH
15557: LD_OWVAR 2
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 3
15578: PUSH
15579: LD_INT 23
15581: PUSH
15582: LD_INT 0
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: PPUSH
15598: CALL_OW 69
15602: ST_TO_ADDR
// if not tmp then
15603: LD_VAR 0 6
15607: NOT
15608: IFFALSE 15612
// exit ;
15610: GO 15758
// s1 := rand ( 1 , 4 ) ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 4
15622: PPUSH
15623: CALL_OW 12
15627: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15628: LD_ADDR_VAR 0 4
15632: PUSH
15633: LD_VAR 0 6
15637: PUSH
15638: LD_INT 1
15640: ARRAY
15641: PPUSH
15642: LD_VAR 0 2
15646: PPUSH
15647: CALL_OW 259
15651: ST_TO_ADDR
// if s1 = 1 then
15652: LD_VAR 0 2
15656: PUSH
15657: LD_INT 1
15659: EQUAL
15660: IFFALSE 15680
// s2 := rand ( 2 , 4 ) else
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 2
15669: PPUSH
15670: LD_INT 4
15672: PPUSH
15673: CALL_OW 12
15677: ST_TO_ADDR
15678: GO 15688
// s2 := 1 ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_INT 1
15687: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15688: LD_ADDR_VAR 0 5
15692: PUSH
15693: LD_VAR 0 6
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: CALL_OW 259
15711: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15712: LD_VAR 0 6
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 5
15730: PPUSH
15731: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15735: LD_VAR 0 6
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_VAR 0 4
15753: PPUSH
15754: CALL_OW 237
// end ;
15758: PPOPN 6
15760: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15761: LD_EXP 24
15765: IFFALSE 15773
15767: PUSH
15768: LD_EXP 71
15772: AND
15773: IFFALSE 15852
15775: GO 15777
15777: DISABLE
15778: LD_INT 0
15780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15781: LD_ADDR_VAR 0 1
15785: PUSH
15786: LD_INT 22
15788: PUSH
15789: LD_OWVAR 2
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 30
15800: PUSH
15801: LD_INT 3
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PPUSH
15812: CALL_OW 69
15816: ST_TO_ADDR
// if not tmp then
15817: LD_VAR 0 1
15821: NOT
15822: IFFALSE 15826
// exit ;
15824: GO 15852
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15826: LD_VAR 0 1
15830: PUSH
15831: LD_INT 1
15833: PPUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 12
15843: ARRAY
15844: PPUSH
15845: LD_INT 1
15847: PPUSH
15848: CALL_OW 234
// end ;
15852: PPOPN 1
15854: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15855: LD_EXP 24
15859: IFFALSE 15867
15861: PUSH
15862: LD_EXP 72
15866: AND
15867: IFFALSE 15979
15869: GO 15871
15871: DISABLE
15872: LD_INT 0
15874: PPUSH
15875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15876: LD_ADDR_VAR 0 2
15880: PUSH
15881: LD_INT 22
15883: PUSH
15884: LD_OWVAR 2
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 27
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 30
15908: PUSH
15909: LD_INT 26
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 30
15918: PUSH
15919: LD_INT 28
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PPUSH
15936: CALL_OW 69
15940: ST_TO_ADDR
// if not tmp then
15941: LD_VAR 0 2
15945: NOT
15946: IFFALSE 15950
// exit ;
15948: GO 15979
// for i in tmp do
15950: LD_ADDR_VAR 0 1
15954: PUSH
15955: LD_VAR 0 2
15959: PUSH
15960: FOR_IN
15961: IFFALSE 15977
// SetLives ( i , 1 ) ;
15963: LD_VAR 0 1
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 234
15975: GO 15960
15977: POP
15978: POP
// end ;
15979: PPOPN 2
15981: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15982: LD_EXP 24
15986: IFFALSE 15994
15988: PUSH
15989: LD_EXP 73
15993: AND
15994: IFFALSE 16281
15996: GO 15998
15998: DISABLE
15999: LD_INT 0
16001: PPUSH
16002: PPUSH
16003: PPUSH
// begin i := rand ( 1 , 7 ) ;
16004: LD_ADDR_VAR 0 1
16008: PUSH
16009: LD_INT 1
16011: PPUSH
16012: LD_INT 7
16014: PPUSH
16015: CALL_OW 12
16019: ST_TO_ADDR
// case i of 1 :
16020: LD_VAR 0 1
16024: PUSH
16025: LD_INT 1
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16043
16033: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16034: LD_STRING earthquake(getX(game), 0, 32)
16036: PPUSH
16037: CALL_OW 559
16041: GO 16281
16043: LD_INT 2
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16065
16051: POP
// begin ToLua ( displayStucuk(); ) ;
16052: LD_STRING displayStucuk();
16054: PPUSH
16055: CALL_OW 559
// ResetFog ;
16059: CALL_OW 335
// end ; 3 :
16063: GO 16281
16065: LD_INT 3
16067: DOUBLE
16068: EQUAL
16069: IFTRUE 16073
16071: GO 16177
16073: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16074: LD_ADDR_VAR 0 2
16078: PUSH
16079: LD_INT 22
16081: PUSH
16082: LD_OWVAR 2
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PPUSH
16105: CALL_OW 69
16109: ST_TO_ADDR
// if not tmp then
16110: LD_VAR 0 2
16114: NOT
16115: IFFALSE 16119
// exit ;
16117: GO 16281
// un := tmp [ rand ( 1 , tmp ) ] ;
16119: LD_ADDR_VAR 0 3
16123: PUSH
16124: LD_VAR 0 2
16128: PUSH
16129: LD_INT 1
16131: PPUSH
16132: LD_VAR 0 2
16136: PPUSH
16137: CALL_OW 12
16141: ARRAY
16142: ST_TO_ADDR
// if Crawls ( un ) then
16143: LD_VAR 0 3
16147: PPUSH
16148: CALL_OW 318
16152: IFFALSE 16163
// ComWalk ( un ) ;
16154: LD_VAR 0 3
16158: PPUSH
16159: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16163: LD_VAR 0 3
16167: PPUSH
16168: LD_INT 8
16170: PPUSH
16171: CALL_OW 336
// end ; 4 :
16175: GO 16281
16177: LD_INT 4
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16259
16185: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16186: LD_ADDR_VAR 0 2
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_OWVAR 2
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: LD_INT 30
16205: PUSH
16206: LD_INT 29
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: ST_TO_ADDR
// if not tmp then
16222: LD_VAR 0 2
16226: NOT
16227: IFFALSE 16231
// exit ;
16229: GO 16281
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16244: LD_VAR 0 2
16248: PUSH
16249: LD_INT 1
16251: ARRAY
16252: PPUSH
16253: CALL_OW 65
// end ; 5 .. 7 :
16257: GO 16281
16259: LD_INT 5
16261: DOUBLE
16262: GREATEREQUAL
16263: IFFALSE 16271
16265: LD_INT 7
16267: DOUBLE
16268: LESSEQUAL
16269: IFTRUE 16273
16271: GO 16280
16273: POP
// StreamSibBomb ; end ;
16274: CALL 12462 0 0
16278: GO 16281
16280: POP
// end ;
16281: PPOPN 3
16283: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16284: LD_EXP 24
16288: IFFALSE 16296
16290: PUSH
16291: LD_EXP 74
16295: AND
16296: IFFALSE 16452
16298: GO 16300
16300: DISABLE
16301: LD_INT 0
16303: PPUSH
16304: PPUSH
16305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16306: LD_ADDR_VAR 0 2
16310: PUSH
16311: LD_INT 81
16313: PUSH
16314: LD_OWVAR 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: LD_INT 21
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 21
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PPUSH
16355: CALL_OW 69
16359: ST_TO_ADDR
// if not tmp then
16360: LD_VAR 0 2
16364: NOT
16365: IFFALSE 16369
// exit ;
16367: GO 16452
// p := 0 ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16377: LD_INT 35
16379: PPUSH
16380: CALL_OW 67
// p := p + 1 ;
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: LD_VAR 0 3
16393: PUSH
16394: LD_INT 1
16396: PLUS
16397: ST_TO_ADDR
// for i in tmp do
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: LD_VAR 0 2
16407: PUSH
16408: FOR_IN
16409: IFFALSE 16440
// if GetLives ( i ) < 1000 then
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 256
16420: PUSH
16421: LD_INT 1000
16423: LESS
16424: IFFALSE 16438
// SetLives ( i , 1000 ) ;
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_INT 1000
16433: PPUSH
16434: CALL_OW 234
16438: GO 16408
16440: POP
16441: POP
// until p > 20 ;
16442: LD_VAR 0 3
16446: PUSH
16447: LD_INT 20
16449: GREATER
16450: IFFALSE 16377
// end ;
16452: PPOPN 3
16454: END
// every 0 0$1 trigger StreamModeActive and sTime do
16455: LD_EXP 24
16459: IFFALSE 16467
16461: PUSH
16462: LD_EXP 75
16466: AND
16467: IFFALSE 16502
16469: GO 16471
16471: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16472: LD_INT 28
16474: PPUSH
16475: LD_OWVAR 2
16479: PPUSH
16480: LD_INT 2
16482: PPUSH
16483: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16487: LD_INT 30
16489: PPUSH
16490: LD_OWVAR 2
16494: PPUSH
16495: LD_INT 2
16497: PPUSH
16498: CALL_OW 322
// end ;
16502: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16503: LD_EXP 24
16507: IFFALSE 16515
16509: PUSH
16510: LD_EXP 76
16514: AND
16515: IFFALSE 16636
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
16523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16524: LD_ADDR_VAR 0 2
16528: PUSH
16529: LD_INT 22
16531: PUSH
16532: LD_OWVAR 2
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 3
16553: PUSH
16554: LD_INT 23
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: ST_TO_ADDR
// if not tmp then
16578: LD_VAR 0 2
16582: NOT
16583: IFFALSE 16587
// exit ;
16585: GO 16636
// for i in tmp do
16587: LD_ADDR_VAR 0 1
16591: PUSH
16592: LD_VAR 0 2
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16634
// begin if Crawls ( i ) then
16600: LD_VAR 0 1
16604: PPUSH
16605: CALL_OW 318
16609: IFFALSE 16620
// ComWalk ( i ) ;
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 138
// SetClass ( i , 2 ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: LD_INT 2
16627: PPUSH
16628: CALL_OW 336
// end ;
16632: GO 16597
16634: POP
16635: POP
// end ;
16636: PPOPN 2
16638: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16639: LD_EXP 24
16643: IFFALSE 16651
16645: PUSH
16646: LD_EXP 77
16650: AND
16651: IFFALSE 16941
16653: GO 16655
16655: DISABLE
16656: LD_INT 0
16658: PPUSH
16659: PPUSH
16660: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16661: LD_OWVAR 2
16665: PPUSH
16666: LD_INT 9
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16679: LD_INT 9
16681: PPUSH
16682: LD_OWVAR 2
16686: PPUSH
16687: CALL_OW 343
// uc_side := 9 ;
16691: LD_ADDR_OWVAR 20
16695: PUSH
16696: LD_INT 9
16698: ST_TO_ADDR
// uc_nation := 2 ;
16699: LD_ADDR_OWVAR 21
16703: PUSH
16704: LD_INT 2
16706: ST_TO_ADDR
// hc_name := Dark Warrior ;
16707: LD_ADDR_OWVAR 26
16711: PUSH
16712: LD_STRING Dark Warrior
16714: ST_TO_ADDR
// hc_gallery :=  ;
16715: LD_ADDR_OWVAR 33
16719: PUSH
16720: LD_STRING 
16722: ST_TO_ADDR
// hc_noskilllimit := true ;
16723: LD_ADDR_OWVAR 76
16727: PUSH
16728: LD_INT 1
16730: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16731: LD_ADDR_OWVAR 31
16735: PUSH
16736: LD_INT 30
16738: PUSH
16739: LD_INT 30
16741: PUSH
16742: LD_INT 30
16744: PUSH
16745: LD_INT 30
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: ST_TO_ADDR
// un := CreateHuman ;
16754: LD_ADDR_VAR 0 3
16758: PUSH
16759: CALL_OW 44
16763: ST_TO_ADDR
// hc_noskilllimit := false ;
16764: LD_ADDR_OWVAR 76
16768: PUSH
16769: LD_INT 0
16771: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16772: LD_VAR 0 3
16776: PPUSH
16777: LD_INT 1
16779: PPUSH
16780: CALL_OW 51
// ToLua ( playRanger() ) ;
16784: LD_STRING playRanger()
16786: PPUSH
16787: CALL_OW 559
// p := 0 ;
16791: LD_ADDR_VAR 0 2
16795: PUSH
16796: LD_INT 0
16798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16799: LD_INT 35
16801: PPUSH
16802: CALL_OW 67
// p := p + 1 ;
16806: LD_ADDR_VAR 0 2
16810: PUSH
16811: LD_VAR 0 2
16815: PUSH
16816: LD_INT 1
16818: PLUS
16819: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16820: LD_VAR 0 3
16824: PPUSH
16825: CALL_OW 256
16829: PUSH
16830: LD_INT 1000
16832: LESS
16833: IFFALSE 16847
// SetLives ( un , 1000 ) ;
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_INT 1000
16842: PPUSH
16843: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16847: LD_VAR 0 3
16851: PPUSH
16852: LD_INT 81
16854: PUSH
16855: LD_OWVAR 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 91
16866: PUSH
16867: LD_VAR 0 3
16871: PUSH
16872: LD_INT 30
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PPUSH
16884: CALL_OW 69
16888: PPUSH
16889: LD_VAR 0 3
16893: PPUSH
16894: CALL_OW 74
16898: PPUSH
16899: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16903: LD_VAR 0 2
16907: PUSH
16908: LD_INT 80
16910: GREATER
16911: IFTRUE 16924
16913: PUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: CALL_OW 301
16923: OR
16924: IFFALSE 16799
// if un then
16926: LD_VAR 0 3
16930: IFFALSE 16941
// RemoveUnit ( un ) ;
16932: LD_VAR 0 3
16936: PPUSH
16937: CALL_OW 64
// end ;
16941: PPOPN 3
16943: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16944: LD_EXP 78
16948: IFFALSE 17064
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_INT 81
16965: PUSH
16966: LD_OWVAR 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 21
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 69
16993: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16994: LD_STRING playComputer()
16996: PPUSH
16997: CALL_OW 559
// if not tmp then
17001: LD_VAR 0 2
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17064
// for i in tmp do
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_VAR 0 2
17019: PUSH
17020: FOR_IN
17021: IFFALSE 17062
// for j := 1 to 4 do
17023: LD_ADDR_VAR 0 3
17027: PUSH
17028: DOUBLE
17029: LD_INT 1
17031: DEC
17032: ST_TO_ADDR
17033: LD_INT 4
17035: PUSH
17036: FOR_TO
17037: IFFALSE 17058
// SetSkill ( i , j , 10 ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_VAR 0 3
17048: PPUSH
17049: LD_INT 10
17051: PPUSH
17052: CALL_OW 237
17056: GO 17036
17058: POP
17059: POP
17060: GO 17020
17062: POP
17063: POP
// end ;
17064: PPOPN 3
17066: END
// every 0 0$1 trigger s30 do var i , tmp ;
17067: LD_EXP 79
17071: IFFALSE 17140
17073: GO 17075
17075: DISABLE
17076: LD_INT 0
17078: PPUSH
17079: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17080: LD_ADDR_VAR 0 2
17084: PUSH
17085: LD_INT 22
17087: PUSH
17088: LD_OWVAR 2
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PPUSH
17097: CALL_OW 69
17101: ST_TO_ADDR
// if not tmp then
17102: LD_VAR 0 2
17106: NOT
17107: IFFALSE 17111
// exit ;
17109: GO 17140
// for i in tmp do
17111: LD_ADDR_VAR 0 1
17115: PUSH
17116: LD_VAR 0 2
17120: PUSH
17121: FOR_IN
17122: IFFALSE 17138
// SetLives ( i , 300 ) ;
17124: LD_VAR 0 1
17128: PPUSH
17129: LD_INT 300
17131: PPUSH
17132: CALL_OW 234
17136: GO 17121
17138: POP
17139: POP
// end ;
17140: PPOPN 2
17142: END
// every 0 0$1 trigger s60 do var i , tmp ;
17143: LD_EXP 80
17147: IFFALSE 17216
17149: GO 17151
17151: DISABLE
17152: LD_INT 0
17154: PPUSH
17155: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17156: LD_ADDR_VAR 0 2
17160: PUSH
17161: LD_INT 22
17163: PUSH
17164: LD_OWVAR 2
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: ST_TO_ADDR
// if not tmp then
17178: LD_VAR 0 2
17182: NOT
17183: IFFALSE 17187
// exit ;
17185: GO 17216
// for i in tmp do
17187: LD_ADDR_VAR 0 1
17191: PUSH
17192: LD_VAR 0 2
17196: PUSH
17197: FOR_IN
17198: IFFALSE 17214
// SetLives ( i , 600 ) ;
17200: LD_VAR 0 1
17204: PPUSH
17205: LD_INT 600
17207: PPUSH
17208: CALL_OW 234
17212: GO 17197
17214: POP
17215: POP
// end ;
17216: PPOPN 2
17218: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17219: LD_INT 0
17221: PPUSH
// case cmd of 301 :
17222: LD_VAR 0 1
17226: PUSH
17227: LD_INT 301
17229: DOUBLE
17230: EQUAL
17231: IFTRUE 17235
17233: GO 17267
17235: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17236: LD_VAR 0 6
17240: PPUSH
17241: LD_VAR 0 7
17245: PPUSH
17246: LD_VAR 0 8
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: LD_VAR 0 5
17260: PPUSH
17261: CALL 18480 0 5
17265: GO 17388
17267: LD_INT 302
17269: DOUBLE
17270: EQUAL
17271: IFTRUE 17275
17273: GO 17312
17275: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17276: LD_VAR 0 6
17280: PPUSH
17281: LD_VAR 0 7
17285: PPUSH
17286: LD_VAR 0 8
17290: PPUSH
17291: LD_VAR 0 9
17295: PPUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: LD_VAR 0 5
17305: PPUSH
17306: CALL 18571 0 6
17310: GO 17388
17312: LD_INT 303
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17357
17320: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17321: LD_VAR 0 6
17325: PPUSH
17326: LD_VAR 0 7
17330: PPUSH
17331: LD_VAR 0 8
17335: PPUSH
17336: LD_VAR 0 9
17340: PPUSH
17341: LD_VAR 0 4
17345: PPUSH
17346: LD_VAR 0 5
17350: PPUSH
17351: CALL 17393 0 6
17355: GO 17388
17357: LD_INT 304
17359: DOUBLE
17360: EQUAL
17361: IFTRUE 17365
17363: GO 17387
17365: POP
// hHackTeleport ( unit , x , y ) ; end ;
17366: LD_VAR 0 2
17370: PPUSH
17371: LD_VAR 0 4
17375: PPUSH
17376: LD_VAR 0 5
17380: PPUSH
17381: CALL 19164 0 3
17385: GO 17388
17387: POP
// end ;
17388: LD_VAR 0 12
17392: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17393: LD_INT 0
17395: PPUSH
17396: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17397: LD_VAR 0 1
17401: PUSH
17402: LD_INT 1
17404: LESS
17405: IFTRUE 17417
17407: PUSH
17408: LD_VAR 0 1
17412: PUSH
17413: LD_INT 3
17415: GREATER
17416: OR
17417: IFTRUE 17435
17419: PUSH
17420: LD_VAR 0 5
17424: PPUSH
17425: LD_VAR 0 6
17429: PPUSH
17430: CALL_OW 428
17434: OR
17435: IFFALSE 17439
// exit ;
17437: GO 18167
// uc_side := your_side ;
17439: LD_ADDR_OWVAR 20
17443: PUSH
17444: LD_OWVAR 2
17448: ST_TO_ADDR
// uc_nation := nation ;
17449: LD_ADDR_OWVAR 21
17453: PUSH
17454: LD_VAR 0 1
17458: ST_TO_ADDR
// bc_level = 1 ;
17459: LD_ADDR_OWVAR 43
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// case btype of 1 :
17467: LD_VAR 0 2
17471: PUSH
17472: LD_INT 1
17474: DOUBLE
17475: EQUAL
17476: IFTRUE 17480
17478: GO 17491
17480: POP
// bc_type := b_depot ; 2 :
17481: LD_ADDR_OWVAR 42
17485: PUSH
17486: LD_INT 0
17488: ST_TO_ADDR
17489: GO 18111
17491: LD_INT 2
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17510
17499: POP
// bc_type := b_warehouse ; 3 :
17500: LD_ADDR_OWVAR 42
17504: PUSH
17505: LD_INT 1
17507: ST_TO_ADDR
17508: GO 18111
17510: LD_INT 3
17512: DOUBLE
17513: EQUAL
17514: IFTRUE 17518
17516: GO 17529
17518: POP
// bc_type := b_lab ; 4 .. 9 :
17519: LD_ADDR_OWVAR 42
17523: PUSH
17524: LD_INT 6
17526: ST_TO_ADDR
17527: GO 18111
17529: LD_INT 4
17531: DOUBLE
17532: GREATEREQUAL
17533: IFFALSE 17541
17535: LD_INT 9
17537: DOUBLE
17538: LESSEQUAL
17539: IFTRUE 17543
17541: GO 17603
17543: POP
// begin bc_type := b_lab_half ;
17544: LD_ADDR_OWVAR 42
17548: PUSH
17549: LD_INT 7
17551: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17552: LD_ADDR_OWVAR 44
17556: PUSH
17557: LD_INT 10
17559: PUSH
17560: LD_INT 11
17562: PUSH
17563: LD_INT 12
17565: PUSH
17566: LD_INT 15
17568: PUSH
17569: LD_INT 14
17571: PUSH
17572: LD_INT 13
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: PUSH
17583: LD_VAR 0 2
17587: PUSH
17588: LD_INT 3
17590: MINUS
17591: ARRAY
17592: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17593: LD_ADDR_OWVAR 45
17597: PUSH
17598: LD_INT 9
17600: ST_TO_ADDR
// end ; 10 .. 13 :
17601: GO 18111
17603: LD_INT 10
17605: DOUBLE
17606: GREATEREQUAL
17607: IFFALSE 17615
17609: LD_INT 13
17611: DOUBLE
17612: LESSEQUAL
17613: IFTRUE 17617
17615: GO 17694
17617: POP
// begin bc_type := b_lab_full ;
17618: LD_ADDR_OWVAR 42
17622: PUSH
17623: LD_INT 8
17625: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17626: LD_ADDR_OWVAR 44
17630: PUSH
17631: LD_INT 10
17633: PUSH
17634: LD_INT 12
17636: PUSH
17637: LD_INT 14
17639: PUSH
17640: LD_INT 13
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: LD_VAR 0 2
17653: PUSH
17654: LD_INT 9
17656: MINUS
17657: ARRAY
17658: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17659: LD_ADDR_OWVAR 45
17663: PUSH
17664: LD_INT 11
17666: PUSH
17667: LD_INT 15
17669: PUSH
17670: LD_INT 12
17672: PUSH
17673: LD_INT 15
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: PUSH
17682: LD_VAR 0 2
17686: PUSH
17687: LD_INT 9
17689: MINUS
17690: ARRAY
17691: ST_TO_ADDR
// end ; 14 :
17692: GO 18111
17694: LD_INT 14
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17713
17702: POP
// bc_type := b_workshop ; 15 :
17703: LD_ADDR_OWVAR 42
17707: PUSH
17708: LD_INT 2
17710: ST_TO_ADDR
17711: GO 18111
17713: LD_INT 15
17715: DOUBLE
17716: EQUAL
17717: IFTRUE 17721
17719: GO 17732
17721: POP
// bc_type := b_factory ; 16 :
17722: LD_ADDR_OWVAR 42
17726: PUSH
17727: LD_INT 3
17729: ST_TO_ADDR
17730: GO 18111
17732: LD_INT 16
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17751
17740: POP
// bc_type := b_ext_gun ; 17 :
17741: LD_ADDR_OWVAR 42
17745: PUSH
17746: LD_INT 17
17748: ST_TO_ADDR
17749: GO 18111
17751: LD_INT 17
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17787
17759: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17760: LD_ADDR_OWVAR 42
17764: PUSH
17765: LD_INT 19
17767: PUSH
17768: LD_INT 23
17770: PUSH
17771: LD_INT 19
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: LD_VAR 0 1
17783: ARRAY
17784: ST_TO_ADDR
17785: GO 18111
17787: LD_INT 18
17789: DOUBLE
17790: EQUAL
17791: IFTRUE 17795
17793: GO 17806
17795: POP
// bc_type := b_ext_radar ; 19 :
17796: LD_ADDR_OWVAR 42
17800: PUSH
17801: LD_INT 20
17803: ST_TO_ADDR
17804: GO 18111
17806: LD_INT 19
17808: DOUBLE
17809: EQUAL
17810: IFTRUE 17814
17812: GO 17825
17814: POP
// bc_type := b_ext_radio ; 20 :
17815: LD_ADDR_OWVAR 42
17819: PUSH
17820: LD_INT 22
17822: ST_TO_ADDR
17823: GO 18111
17825: LD_INT 20
17827: DOUBLE
17828: EQUAL
17829: IFTRUE 17833
17831: GO 17844
17833: POP
// bc_type := b_ext_siberium ; 21 :
17834: LD_ADDR_OWVAR 42
17838: PUSH
17839: LD_INT 21
17841: ST_TO_ADDR
17842: GO 18111
17844: LD_INT 21
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17863
17852: POP
// bc_type := b_ext_computer ; 22 :
17853: LD_ADDR_OWVAR 42
17857: PUSH
17858: LD_INT 24
17860: ST_TO_ADDR
17861: GO 18111
17863: LD_INT 22
17865: DOUBLE
17866: EQUAL
17867: IFTRUE 17871
17869: GO 17882
17871: POP
// bc_type := b_ext_track ; 23 :
17872: LD_ADDR_OWVAR 42
17876: PUSH
17877: LD_INT 16
17879: ST_TO_ADDR
17880: GO 18111
17882: LD_INT 23
17884: DOUBLE
17885: EQUAL
17886: IFTRUE 17890
17888: GO 17901
17890: POP
// bc_type := b_ext_laser ; 24 :
17891: LD_ADDR_OWVAR 42
17895: PUSH
17896: LD_INT 25
17898: ST_TO_ADDR
17899: GO 18111
17901: LD_INT 24
17903: DOUBLE
17904: EQUAL
17905: IFTRUE 17909
17907: GO 17920
17909: POP
// bc_type := b_control_tower ; 25 :
17910: LD_ADDR_OWVAR 42
17914: PUSH
17915: LD_INT 36
17917: ST_TO_ADDR
17918: GO 18111
17920: LD_INT 25
17922: DOUBLE
17923: EQUAL
17924: IFTRUE 17928
17926: GO 17939
17928: POP
// bc_type := b_breastwork ; 26 :
17929: LD_ADDR_OWVAR 42
17933: PUSH
17934: LD_INT 31
17936: ST_TO_ADDR
17937: GO 18111
17939: LD_INT 26
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 17947
17945: GO 17958
17947: POP
// bc_type := b_bunker ; 27 :
17948: LD_ADDR_OWVAR 42
17952: PUSH
17953: LD_INT 32
17955: ST_TO_ADDR
17956: GO 18111
17958: LD_INT 27
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17977
17966: POP
// bc_type := b_turret ; 28 :
17967: LD_ADDR_OWVAR 42
17971: PUSH
17972: LD_INT 33
17974: ST_TO_ADDR
17975: GO 18111
17977: LD_INT 28
17979: DOUBLE
17980: EQUAL
17981: IFTRUE 17985
17983: GO 17996
17985: POP
// bc_type := b_armoury ; 29 :
17986: LD_ADDR_OWVAR 42
17990: PUSH
17991: LD_INT 4
17993: ST_TO_ADDR
17994: GO 18111
17996: LD_INT 29
17998: DOUBLE
17999: EQUAL
18000: IFTRUE 18004
18002: GO 18015
18004: POP
// bc_type := b_barracks ; 30 :
18005: LD_ADDR_OWVAR 42
18009: PUSH
18010: LD_INT 5
18012: ST_TO_ADDR
18013: GO 18111
18015: LD_INT 30
18017: DOUBLE
18018: EQUAL
18019: IFTRUE 18023
18021: GO 18034
18023: POP
// bc_type := b_solar_power ; 31 :
18024: LD_ADDR_OWVAR 42
18028: PUSH
18029: LD_INT 27
18031: ST_TO_ADDR
18032: GO 18111
18034: LD_INT 31
18036: DOUBLE
18037: EQUAL
18038: IFTRUE 18042
18040: GO 18053
18042: POP
// bc_type := b_oil_power ; 32 :
18043: LD_ADDR_OWVAR 42
18047: PUSH
18048: LD_INT 26
18050: ST_TO_ADDR
18051: GO 18111
18053: LD_INT 32
18055: DOUBLE
18056: EQUAL
18057: IFTRUE 18061
18059: GO 18072
18061: POP
// bc_type := b_siberite_power ; 33 :
18062: LD_ADDR_OWVAR 42
18066: PUSH
18067: LD_INT 28
18069: ST_TO_ADDR
18070: GO 18111
18072: LD_INT 33
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18091
18080: POP
// bc_type := b_oil_mine ; 34 :
18081: LD_ADDR_OWVAR 42
18085: PUSH
18086: LD_INT 29
18088: ST_TO_ADDR
18089: GO 18111
18091: LD_INT 34
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18099
18097: GO 18110
18099: POP
// bc_type := b_siberite_mine ; end ;
18100: LD_ADDR_OWVAR 42
18104: PUSH
18105: LD_INT 30
18107: ST_TO_ADDR
18108: GO 18111
18110: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18111: LD_ADDR_VAR 0 8
18115: PUSH
18116: LD_VAR 0 5
18120: PPUSH
18121: LD_VAR 0 6
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: CALL_OW 47
18135: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18136: LD_OWVAR 42
18140: PUSH
18141: LD_INT 32
18143: PUSH
18144: LD_INT 33
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: IN
18151: IFFALSE 18167
// PlaceWeaponTurret ( b , weapon ) ;
18153: LD_VAR 0 8
18157: PPUSH
18158: LD_VAR 0 4
18162: PPUSH
18163: CALL_OW 431
// end ;
18167: LD_VAR 0 7
18171: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18172: LD_INT 0
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18178: LD_ADDR_VAR 0 4
18182: PUSH
18183: LD_INT 22
18185: PUSH
18186: LD_OWVAR 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: LD_INT 30
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PPUSH
18227: CALL_OW 69
18231: ST_TO_ADDR
// if not tmp then
18232: LD_VAR 0 4
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18300
// for i in tmp do
18241: LD_ADDR_VAR 0 2
18245: PUSH
18246: LD_VAR 0 4
18250: PUSH
18251: FOR_IN
18252: IFFALSE 18298
// for j = 1 to 3 do
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: DOUBLE
18260: LD_INT 1
18262: DEC
18263: ST_TO_ADDR
18264: LD_INT 3
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18294
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 274
18279: PPUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_INT 99999
18287: PPUSH
18288: CALL_OW 277
18292: GO 18267
18294: POP
18295: POP
18296: GO 18251
18298: POP
18299: POP
// end ;
18300: LD_VAR 0 1
18304: RET
// export function hHackSetLevel10 ; var i , j ; begin
18305: LD_INT 0
18307: PPUSH
18308: PPUSH
18309: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18310: LD_ADDR_VAR 0 2
18314: PUSH
18315: LD_INT 21
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PPUSH
18325: CALL_OW 69
18329: PUSH
18330: FOR_IN
18331: IFFALSE 18383
// if IsSelected ( i ) then
18333: LD_VAR 0 2
18337: PPUSH
18338: CALL_OW 306
18342: IFFALSE 18381
// begin for j := 1 to 4 do
18344: LD_ADDR_VAR 0 3
18348: PUSH
18349: DOUBLE
18350: LD_INT 1
18352: DEC
18353: ST_TO_ADDR
18354: LD_INT 4
18356: PUSH
18357: FOR_TO
18358: IFFALSE 18379
// SetSkill ( i , j , 10 ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_VAR 0 3
18369: PPUSH
18370: LD_INT 10
18372: PPUSH
18373: CALL_OW 237
18377: GO 18357
18379: POP
18380: POP
// end ;
18381: GO 18330
18383: POP
18384: POP
// end ;
18385: LD_VAR 0 1
18389: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18390: LD_INT 0
18392: PPUSH
18393: PPUSH
18394: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18395: LD_ADDR_VAR 0 2
18399: PUSH
18400: LD_INT 22
18402: PUSH
18403: LD_OWVAR 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 21
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PPUSH
18426: CALL_OW 69
18430: PUSH
18431: FOR_IN
18432: IFFALSE 18473
// begin for j := 1 to 4 do
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: DOUBLE
18440: LD_INT 1
18442: DEC
18443: ST_TO_ADDR
18444: LD_INT 4
18446: PUSH
18447: FOR_TO
18448: IFFALSE 18469
// SetSkill ( i , j , 10 ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 10
18462: PPUSH
18463: CALL_OW 237
18467: GO 18447
18469: POP
18470: POP
// end ;
18471: GO 18431
18473: POP
18474: POP
// end ;
18475: LD_VAR 0 1
18479: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18480: LD_INT 0
18482: PPUSH
// uc_side := your_side ;
18483: LD_ADDR_OWVAR 20
18487: PUSH
18488: LD_OWVAR 2
18492: ST_TO_ADDR
// uc_nation := nation ;
18493: LD_ADDR_OWVAR 21
18497: PUSH
18498: LD_VAR 0 1
18502: ST_TO_ADDR
// InitHc ;
18503: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18507: LD_INT 0
18509: PPUSH
18510: LD_VAR 0 2
18514: PPUSH
18515: LD_VAR 0 3
18519: PPUSH
18520: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18524: LD_VAR 0 4
18528: PPUSH
18529: LD_VAR 0 5
18533: PPUSH
18534: CALL_OW 428
18538: PUSH
18539: LD_INT 0
18541: EQUAL
18542: IFFALSE 18566
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18544: CALL_OW 44
18548: PPUSH
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_VAR 0 5
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 48
// end ;
18566: LD_VAR 0 6
18570: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
// uc_side := your_side ;
18575: LD_ADDR_OWVAR 20
18579: PUSH
18580: LD_OWVAR 2
18584: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18585: LD_VAR 0 1
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: LD_INT 4
18601: PUSH
18602: LD_INT 5
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: IN
18612: IFFALSE 18624
// uc_nation := nation_american else
18614: LD_ADDR_OWVAR 21
18618: PUSH
18619: LD_INT 1
18621: ST_TO_ADDR
18622: GO 18667
// if chassis in [ 11 , 12 , 13 , 14 ] then
18624: LD_VAR 0 1
18628: PUSH
18629: LD_INT 11
18631: PUSH
18632: LD_INT 12
18634: PUSH
18635: LD_INT 13
18637: PUSH
18638: LD_INT 14
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: IN
18647: IFFALSE 18659
// uc_nation := nation_arabian else
18649: LD_ADDR_OWVAR 21
18653: PUSH
18654: LD_INT 2
18656: ST_TO_ADDR
18657: GO 18667
// uc_nation := nation_russian ;
18659: LD_ADDR_OWVAR 21
18663: PUSH
18664: LD_INT 3
18666: ST_TO_ADDR
// vc_chassis := chassis ;
18667: LD_ADDR_OWVAR 37
18671: PUSH
18672: LD_VAR 0 1
18676: ST_TO_ADDR
// vc_engine := engine ;
18677: LD_ADDR_OWVAR 39
18681: PUSH
18682: LD_VAR 0 2
18686: ST_TO_ADDR
// vc_control := control ;
18687: LD_ADDR_OWVAR 38
18691: PUSH
18692: LD_VAR 0 3
18696: ST_TO_ADDR
// vc_weapon := weapon ;
18697: LD_ADDR_OWVAR 40
18701: PUSH
18702: LD_VAR 0 4
18706: ST_TO_ADDR
// un := CreateVehicle ;
18707: LD_ADDR_VAR 0 8
18711: PUSH
18712: CALL_OW 45
18716: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18717: LD_VAR 0 8
18721: PPUSH
18722: LD_INT 0
18724: PPUSH
18725: LD_INT 5
18727: PPUSH
18728: CALL_OW 12
18732: PPUSH
18733: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18737: LD_VAR 0 8
18741: PPUSH
18742: LD_VAR 0 5
18746: PPUSH
18747: LD_VAR 0 6
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 48
// end ;
18759: LD_VAR 0 7
18763: RET
// export hInvincible ; every 1 do
18764: GO 18766
18766: DISABLE
// hInvincible := [ ] ;
18767: LD_ADDR_EXP 81
18771: PUSH
18772: EMPTY
18773: ST_TO_ADDR
18774: END
// every 10 do var i ;
18775: GO 18777
18777: DISABLE
18778: LD_INT 0
18780: PPUSH
// begin enable ;
18781: ENABLE
// if not hInvincible then
18782: LD_EXP 81
18786: NOT
18787: IFFALSE 18791
// exit ;
18789: GO 18835
// for i in hInvincible do
18791: LD_ADDR_VAR 0 1
18795: PUSH
18796: LD_EXP 81
18800: PUSH
18801: FOR_IN
18802: IFFALSE 18833
// if GetLives ( i ) < 1000 then
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 256
18813: PUSH
18814: LD_INT 1000
18816: LESS
18817: IFFALSE 18831
// SetLives ( i , 1000 ) ;
18819: LD_VAR 0 1
18823: PPUSH
18824: LD_INT 1000
18826: PPUSH
18827: CALL_OW 234
18831: GO 18801
18833: POP
18834: POP
// end ;
18835: PPOPN 1
18837: END
// export function hHackInvincible ; var i ; begin
18838: LD_INT 0
18840: PPUSH
18841: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: LD_INT 2
18849: PUSH
18850: LD_INT 21
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 21
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 69
18879: PUSH
18880: FOR_IN
18881: IFFALSE 18942
// if IsSelected ( i ) then
18883: LD_VAR 0 2
18887: PPUSH
18888: CALL_OW 306
18892: IFFALSE 18940
// begin if i in hInvincible then
18894: LD_VAR 0 2
18898: PUSH
18899: LD_EXP 81
18903: IN
18904: IFFALSE 18924
// hInvincible := hInvincible diff i else
18906: LD_ADDR_EXP 81
18910: PUSH
18911: LD_EXP 81
18915: PUSH
18916: LD_VAR 0 2
18920: DIFF
18921: ST_TO_ADDR
18922: GO 18940
// hInvincible := hInvincible union i ;
18924: LD_ADDR_EXP 81
18928: PUSH
18929: LD_EXP 81
18933: PUSH
18934: LD_VAR 0 2
18938: UNION
18939: ST_TO_ADDR
// end ;
18940: GO 18880
18942: POP
18943: POP
// end ;
18944: LD_VAR 0 1
18948: RET
// export function hHackInvisible ; var i , j ; begin
18949: LD_INT 0
18951: PPUSH
18952: PPUSH
18953: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18954: LD_ADDR_VAR 0 2
18958: PUSH
18959: LD_INT 21
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PPUSH
18969: CALL_OW 69
18973: PUSH
18974: FOR_IN
18975: IFFALSE 18999
// if IsSelected ( i ) then
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL_OW 306
18986: IFFALSE 18997
// ComForceInvisible ( i ) ;
18988: LD_VAR 0 2
18992: PPUSH
18993: CALL_OW 496
18997: GO 18974
18999: POP
19000: POP
// end ;
19001: LD_VAR 0 1
19005: RET
// export function hHackChangeYourSide ; begin
19006: LD_INT 0
19008: PPUSH
// if your_side = 8 then
19009: LD_OWVAR 2
19013: PUSH
19014: LD_INT 8
19016: EQUAL
19017: IFFALSE 19029
// your_side := 0 else
19019: LD_ADDR_OWVAR 2
19023: PUSH
19024: LD_INT 0
19026: ST_TO_ADDR
19027: GO 19043
// your_side := your_side + 1 ;
19029: LD_ADDR_OWVAR 2
19033: PUSH
19034: LD_OWVAR 2
19038: PUSH
19039: LD_INT 1
19041: PLUS
19042: ST_TO_ADDR
// end ;
19043: LD_VAR 0 1
19047: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19048: LD_INT 0
19050: PPUSH
19051: PPUSH
19052: PPUSH
// for i in all_units do
19053: LD_ADDR_VAR 0 2
19057: PUSH
19058: LD_OWVAR 3
19062: PUSH
19063: FOR_IN
19064: IFFALSE 19142
// if IsSelected ( i ) then
19066: LD_VAR 0 2
19070: PPUSH
19071: CALL_OW 306
19075: IFFALSE 19140
// begin j := GetSide ( i ) ;
19077: LD_ADDR_VAR 0 3
19081: PUSH
19082: LD_VAR 0 2
19086: PPUSH
19087: CALL_OW 255
19091: ST_TO_ADDR
// if j = 8 then
19092: LD_VAR 0 3
19096: PUSH
19097: LD_INT 8
19099: EQUAL
19100: IFFALSE 19112
// j := 0 else
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
19110: GO 19126
// j := j + 1 ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 1
19124: PLUS
19125: ST_TO_ADDR
// SetSide ( i , j ) ;
19126: LD_VAR 0 2
19130: PPUSH
19131: LD_VAR 0 3
19135: PPUSH
19136: CALL_OW 235
// end ;
19140: GO 19063
19142: POP
19143: POP
// end ;
19144: LD_VAR 0 1
19148: RET
// export function hHackFog ; begin
19149: LD_INT 0
19151: PPUSH
// FogOff ( true ) ;
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 344
// end ;
19159: LD_VAR 0 1
19163: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19164: LD_INT 0
19166: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 483
// CenterOnXY ( x , y ) ;
19192: LD_VAR 0 2
19196: PPUSH
19197: LD_VAR 0 3
19201: PPUSH
19202: CALL_OW 84
// end ;
19206: LD_VAR 0 4
19210: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19211: LD_INT 0
19213: PPUSH
19214: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19215: LD_VAR 0 1
19219: NOT
19220: IFTRUE 19239
19222: PUSH
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL_OW 488
19237: NOT
19238: OR
19239: IFTRUE 19274
19241: PUSH
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 266
19251: PUSH
19252: LD_INT 3
19254: NONEQUAL
19255: IFFALSE 19273
19257: PUSH
19258: LD_VAR 0 1
19262: PPUSH
19263: CALL_OW 247
19267: PUSH
19268: LD_INT 1
19270: EQUAL
19271: NOT
19272: AND
19273: OR
19274: IFFALSE 19278
// exit ;
19276: GO 19560
// if GetType ( factory ) = unit_human then
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 247
19287: PUSH
19288: LD_INT 1
19290: EQUAL
19291: IFFALSE 19308
// factory := IsInUnit ( factory ) ;
19293: LD_ADDR_VAR 0 1
19297: PUSH
19298: LD_VAR 0 1
19302: PPUSH
19303: CALL_OW 310
19307: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 266
19317: PUSH
19318: LD_INT 3
19320: NONEQUAL
19321: IFFALSE 19325
// exit ;
19323: GO 19560
// for i := 1 to Count ( factoryWaypoints ) do
19325: LD_ADDR_VAR 0 5
19329: PUSH
19330: DOUBLE
19331: LD_INT 1
19333: DEC
19334: ST_TO_ADDR
19335: LD_EXP 82
19339: PPUSH
19340: CALL 29256 0 1
19344: PUSH
19345: FOR_TO
19346: IFFALSE 19508
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19348: LD_VAR 0 2
19352: PPUSH
19353: LD_VAR 0 3
19357: PPUSH
19358: CALL_OW 428
19362: PUSH
19363: LD_EXP 82
19367: PUSH
19368: LD_VAR 0 5
19372: ARRAY
19373: PUSH
19374: LD_INT 2
19376: ARRAY
19377: EQUAL
19378: IFFALSE 19410
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19380: LD_ADDR_EXP 82
19384: PUSH
19385: LD_EXP 82
19389: PPUSH
19390: LD_VAR 0 5
19394: PPUSH
19395: CALL_OW 3
19399: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19400: CALL 19565 0 0
// exit ;
19404: POP
19405: POP
19406: GO 19560
// end else
19408: GO 19506
// if factory = factoryWaypoints [ i ] [ 2 ] then
19410: LD_VAR 0 1
19414: PUSH
19415: LD_EXP 82
19419: PUSH
19420: LD_VAR 0 5
19424: ARRAY
19425: PUSH
19426: LD_INT 2
19428: ARRAY
19429: EQUAL
19430: IFFALSE 19506
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19432: LD_ADDR_EXP 82
19436: PUSH
19437: LD_EXP 82
19441: PPUSH
19442: LD_VAR 0 5
19446: PPUSH
19447: CALL_OW 3
19451: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19452: LD_ADDR_EXP 82
19456: PUSH
19457: LD_EXP 82
19461: PPUSH
19462: LD_VAR 0 1
19466: PPUSH
19467: CALL_OW 255
19471: PUSH
19472: LD_VAR 0 1
19476: PUSH
19477: LD_VAR 0 2
19481: PUSH
19482: LD_VAR 0 3
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL 65188 0 2
19497: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19498: CALL 19565 0 0
// exit ;
19502: POP
19503: POP
19504: GO 19560
// end ; end ;
19506: GO 19345
19508: POP
19509: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19510: LD_ADDR_EXP 82
19514: PUSH
19515: LD_EXP 82
19519: PPUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 255
19529: PUSH
19530: LD_VAR 0 1
19534: PUSH
19535: LD_VAR 0 2
19539: PUSH
19540: LD_VAR 0 3
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL 65188 0 2
19555: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19556: CALL 19565 0 0
// end ;
19560: LD_VAR 0 4
19564: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19565: LD_INT 0
19567: PPUSH
19568: PPUSH
19569: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19570: LD_STRING resetFactoryWaypoint();
19572: PPUSH
19573: CALL_OW 559
// if factoryWaypoints then
19577: LD_EXP 82
19581: IFFALSE 19702
// begin list := factoryWaypoints ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: LD_EXP 82
19592: ST_TO_ADDR
// for i := 1 to list do
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: DOUBLE
19599: LD_INT 1
19601: DEC
19602: ST_TO_ADDR
19603: LD_VAR 0 3
19607: PUSH
19608: FOR_TO
19609: IFFALSE 19700
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19611: LD_STRING setFactoryWaypointXY(
19613: PUSH
19614: LD_VAR 0 3
19618: PUSH
19619: LD_VAR 0 2
19623: ARRAY
19624: PUSH
19625: LD_INT 1
19627: ARRAY
19628: STR
19629: PUSH
19630: LD_STRING ,
19632: STR
19633: PUSH
19634: LD_VAR 0 3
19638: PUSH
19639: LD_VAR 0 2
19643: ARRAY
19644: PUSH
19645: LD_INT 2
19647: ARRAY
19648: STR
19649: PUSH
19650: LD_STRING ,
19652: STR
19653: PUSH
19654: LD_VAR 0 3
19658: PUSH
19659: LD_VAR 0 2
19663: ARRAY
19664: PUSH
19665: LD_INT 3
19667: ARRAY
19668: STR
19669: PUSH
19670: LD_STRING ,
19672: STR
19673: PUSH
19674: LD_VAR 0 3
19678: PUSH
19679: LD_VAR 0 2
19683: ARRAY
19684: PUSH
19685: LD_INT 4
19687: ARRAY
19688: STR
19689: PUSH
19690: LD_STRING )
19692: STR
19693: PPUSH
19694: CALL_OW 559
19698: GO 19608
19700: POP
19701: POP
// end ; end ;
19702: LD_VAR 0 1
19706: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19707: LD_INT 0
19709: PPUSH
// if HexInfo ( x , y ) = warehouse then
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: CALL_OW 428
19724: PUSH
19725: LD_VAR 0 1
19729: EQUAL
19730: IFFALSE 19757
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19732: LD_ADDR_EXP 84
19736: PUSH
19737: LD_EXP 84
19741: PPUSH
19742: LD_VAR 0 1
19746: PPUSH
19747: LD_INT 0
19749: PPUSH
19750: CALL_OW 1
19754: ST_TO_ADDR
19755: GO 19808
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19757: LD_ADDR_EXP 84
19761: PUSH
19762: LD_EXP 84
19766: PPUSH
19767: LD_VAR 0 1
19771: PPUSH
19772: LD_VAR 0 1
19776: PPUSH
19777: CALL_OW 255
19781: PUSH
19782: LD_VAR 0 1
19786: PUSH
19787: LD_VAR 0 2
19791: PUSH
19792: LD_VAR 0 3
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 1
19807: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19808: CALL 19817 0 0
// end ;
19812: LD_VAR 0 4
19816: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19817: LD_INT 0
19819: PPUSH
19820: PPUSH
19821: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19822: LD_STRING resetWarehouseGatheringPoints();
19824: PPUSH
19825: CALL_OW 559
// if warehouseGatheringPoints then
19829: LD_EXP 84
19833: IFFALSE 19959
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19835: LD_ADDR_VAR 0 3
19839: PUSH
19840: LD_EXP 84
19844: PPUSH
19845: CALL 69122 0 1
19849: ST_TO_ADDR
// for i := 1 to list do
19850: LD_ADDR_VAR 0 2
19854: PUSH
19855: DOUBLE
19856: LD_INT 1
19858: DEC
19859: ST_TO_ADDR
19860: LD_VAR 0 3
19864: PUSH
19865: FOR_TO
19866: IFFALSE 19957
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19868: LD_STRING setWarehouseGatheringPointXY(
19870: PUSH
19871: LD_VAR 0 3
19875: PUSH
19876: LD_VAR 0 2
19880: ARRAY
19881: PUSH
19882: LD_INT 1
19884: ARRAY
19885: STR
19886: PUSH
19887: LD_STRING ,
19889: STR
19890: PUSH
19891: LD_VAR 0 3
19895: PUSH
19896: LD_VAR 0 2
19900: ARRAY
19901: PUSH
19902: LD_INT 2
19904: ARRAY
19905: STR
19906: PUSH
19907: LD_STRING ,
19909: STR
19910: PUSH
19911: LD_VAR 0 3
19915: PUSH
19916: LD_VAR 0 2
19920: ARRAY
19921: PUSH
19922: LD_INT 3
19924: ARRAY
19925: STR
19926: PUSH
19927: LD_STRING ,
19929: STR
19930: PUSH
19931: LD_VAR 0 3
19935: PUSH
19936: LD_VAR 0 2
19940: ARRAY
19941: PUSH
19942: LD_INT 4
19944: ARRAY
19945: STR
19946: PUSH
19947: LD_STRING )
19949: STR
19950: PPUSH
19951: CALL_OW 559
19955: GO 19865
19957: POP
19958: POP
// end ; end ;
19959: LD_VAR 0 1
19963: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19964: LD_EXP 84
19968: IFFALSE 20663
19970: GO 19972
19972: DISABLE
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
19982: PPUSH
19983: PPUSH
// begin enable ;
19984: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19985: LD_ADDR_VAR 0 3
19989: PUSH
19990: LD_EXP 84
19994: PPUSH
19995: CALL 69122 0 1
19999: ST_TO_ADDR
// if not list then
20000: LD_VAR 0 3
20004: NOT
20005: IFFALSE 20009
// exit ;
20007: GO 20663
// for i := 1 to list do
20009: LD_ADDR_VAR 0 1
20013: PUSH
20014: DOUBLE
20015: LD_INT 1
20017: DEC
20018: ST_TO_ADDR
20019: LD_VAR 0 3
20023: PUSH
20024: FOR_TO
20025: IFFALSE 20661
// begin depot := list [ i ] [ 2 ] ;
20027: LD_ADDR_VAR 0 8
20031: PUSH
20032: LD_VAR 0 3
20036: PUSH
20037: LD_VAR 0 1
20041: ARRAY
20042: PUSH
20043: LD_INT 2
20045: ARRAY
20046: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20047: LD_ADDR_VAR 0 5
20051: PUSH
20052: LD_VAR 0 3
20056: PUSH
20057: LD_VAR 0 1
20061: ARRAY
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20067: LD_VAR 0 8
20071: PPUSH
20072: CALL_OW 301
20076: IFTRUE 20095
20078: PUSH
20079: LD_VAR 0 5
20083: PUSH
20084: LD_VAR 0 8
20088: PPUSH
20089: CALL_OW 255
20093: NONEQUAL
20094: OR
20095: IFFALSE 20124
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20097: LD_ADDR_EXP 84
20101: PUSH
20102: LD_EXP 84
20106: PPUSH
20107: LD_VAR 0 8
20111: PPUSH
20112: LD_INT 0
20114: PPUSH
20115: CALL_OW 1
20119: ST_TO_ADDR
// exit ;
20120: POP
20121: POP
20122: GO 20663
// end ; x := list [ i ] [ 3 ] ;
20124: LD_ADDR_VAR 0 6
20128: PUSH
20129: LD_VAR 0 3
20133: PUSH
20134: LD_VAR 0 1
20138: ARRAY
20139: PUSH
20140: LD_INT 3
20142: ARRAY
20143: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20144: LD_ADDR_VAR 0 7
20148: PUSH
20149: LD_VAR 0 3
20153: PUSH
20154: LD_VAR 0 1
20158: ARRAY
20159: PUSH
20160: LD_INT 4
20162: ARRAY
20163: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20164: LD_ADDR_VAR 0 9
20168: PUSH
20169: LD_VAR 0 6
20173: PPUSH
20174: LD_VAR 0 7
20178: PPUSH
20179: LD_INT 16
20181: PPUSH
20182: CALL 67696 0 3
20186: ST_TO_ADDR
// if not cratesNearbyPoint then
20187: LD_VAR 0 9
20191: NOT
20192: IFFALSE 20198
// exit ;
20194: POP
20195: POP
20196: GO 20663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20198: LD_ADDR_VAR 0 4
20202: PUSH
20203: LD_INT 22
20205: PUSH
20206: LD_VAR 0 5
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 60
20220: PUSH
20221: EMPTY
20222: LIST
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 91
20230: PUSH
20231: LD_VAR 0 8
20235: PUSH
20236: LD_INT 6
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: LD_INT 25
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 25
20259: PUSH
20260: LD_INT 16
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 69
20282: PUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: CALL_OW 313
20292: PPUSH
20293: LD_INT 3
20295: PUSH
20296: LD_INT 60
20298: PUSH
20299: EMPTY
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 25
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 25
20321: PUSH
20322: LD_INT 16
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 72
20342: UNION
20343: ST_TO_ADDR
// if tmp then
20344: LD_VAR 0 4
20348: IFFALSE 20428
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20350: LD_ADDR_VAR 0 4
20354: PUSH
20355: LD_VAR 0 4
20359: PPUSH
20360: LD_INT 3
20362: PPUSH
20363: CALL 65503 0 2
20367: ST_TO_ADDR
// for j in tmp do
20368: LD_ADDR_VAR 0 2
20372: PUSH
20373: LD_VAR 0 4
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20422
// begin if IsInUnit ( j ) then
20381: LD_VAR 0 2
20385: PPUSH
20386: CALL_OW 310
20390: IFFALSE 20401
// ComExit ( j ) ;
20392: LD_VAR 0 2
20396: PPUSH
20397: CALL 65586 0 1
// AddComCollect ( j , x , y ) ;
20401: LD_VAR 0 2
20405: PPUSH
20406: LD_VAR 0 6
20410: PPUSH
20411: LD_VAR 0 7
20415: PPUSH
20416: CALL_OW 177
// end ;
20420: GO 20378
20422: POP
20423: POP
// exit ;
20424: POP
20425: POP
20426: GO 20663
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20428: LD_ADDR_VAR 0 4
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_VAR 0 5
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 91
20447: PUSH
20448: LD_VAR 0 8
20452: PUSH
20453: LD_INT 8
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 34
20466: PUSH
20467: LD_INT 12
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 34
20476: PUSH
20477: LD_INT 51
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 34
20486: PUSH
20487: LD_INT 32
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 34
20496: PUSH
20497: LD_INT 89
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PPUSH
20516: CALL_OW 69
20520: ST_TO_ADDR
// if tmp then
20521: LD_VAR 0 4
20525: IFFALSE 20659
// begin for j in tmp do
20527: LD_ADDR_VAR 0 2
20531: PUSH
20532: LD_VAR 0 4
20536: PUSH
20537: FOR_IN
20538: IFFALSE 20657
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20540: LD_VAR 0 2
20544: PPUSH
20545: CALL_OW 262
20549: PUSH
20550: LD_INT 3
20552: EQUAL
20553: IFTRUE 20570
20555: PUSH
20556: LD_VAR 0 2
20560: PPUSH
20561: CALL_OW 261
20565: PUSH
20566: LD_INT 20
20568: GREATER
20569: OR
20570: IFFALSE 20584
20572: PUSH
20573: LD_VAR 0 2
20577: PPUSH
20578: CALL_OW 314
20582: NOT
20583: AND
20584: IFFALSE 20614
20586: PUSH
20587: LD_VAR 0 2
20591: PPUSH
20592: CALL_OW 263
20596: PUSH
20597: LD_INT 1
20599: NONEQUAL
20600: IFTRUE 20613
20602: PUSH
20603: LD_VAR 0 2
20607: PPUSH
20608: CALL_OW 311
20612: OR
20613: AND
20614: IFFALSE 20655
// begin ComCollect ( j , x , y ) ;
20616: LD_VAR 0 2
20620: PPUSH
20621: LD_VAR 0 6
20625: PPUSH
20626: LD_VAR 0 7
20630: PPUSH
20631: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20635: LD_VAR 0 2
20639: PPUSH
20640: LD_VAR 0 8
20644: PPUSH
20645: CALL_OW 172
// exit ;
20649: POP
20650: POP
20651: POP
20652: POP
20653: GO 20663
// end ;
20655: GO 20537
20657: POP
20658: POP
// end ; end ;
20659: GO 20024
20661: POP
20662: POP
// end ; end_of_file
20663: PPOPN 9
20665: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20666: LD_VAR 0 1
20670: PUSH
20671: LD_INT 200
20673: DOUBLE
20674: GREATEREQUAL
20675: IFFALSE 20683
20677: LD_INT 299
20679: DOUBLE
20680: LESSEQUAL
20681: IFTRUE 20685
20683: GO 20717
20685: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 2
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: LD_VAR 0 4
20705: PPUSH
20706: LD_VAR 0 5
20710: PPUSH
20711: CALL 21498 0 5
20715: GO 20794
20717: LD_INT 300
20719: DOUBLE
20720: GREATEREQUAL
20721: IFFALSE 20729
20723: LD_INT 399
20725: DOUBLE
20726: LESSEQUAL
20727: IFTRUE 20731
20729: GO 20793
20731: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_VAR 0 4
20751: PPUSH
20752: LD_VAR 0 5
20756: PPUSH
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: LD_VAR 0 8
20771: PPUSH
20772: LD_VAR 0 9
20776: PPUSH
20777: LD_VAR 0 10
20781: PPUSH
20782: LD_VAR 0 11
20786: PPUSH
20787: CALL 17219 0 11
20791: GO 20794
20793: POP
// end ;
20794: PPOPN 11
20796: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: LD_VAR 0 4
20816: PPUSH
20817: LD_VAR 0 5
20821: PPUSH
20822: CALL 20879 0 5
// end ; end_of_file
20826: PPOPN 5
20828: END
// export function SOS_UnitDestroyed ( un ) ; begin
20829: LD_INT 0
20831: PPUSH
// ComRadiation ( un ) ;
20832: LD_VAR 0 1
20836: PPUSH
20837: CALL 21918 0 1
// end ;
20841: LD_VAR 0 2
20845: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20846: LD_INT 0
20848: PPUSH
// ComRadiation ( un ) ;
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL 21918 0 1
// end ;
20858: LD_VAR 0 2
20862: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20863: LD_INT 0
20865: PPUSH
// end ;
20866: LD_VAR 0 4
20870: RET
// export function SOS_Command ( cmd ) ; begin
20871: LD_INT 0
20873: PPUSH
// end ;
20874: LD_VAR 0 2
20878: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20879: LD_INT 0
20881: PPUSH
// end ;
20882: LD_VAR 0 6
20886: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
20887: LD_INT 0
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
// if not vehicle or not factory then
20893: LD_VAR 0 1
20897: NOT
20898: IFTRUE 20907
20900: PUSH
20901: LD_VAR 0 2
20905: NOT
20906: OR
20907: IFFALSE 20911
// exit ;
20909: GO 21493
// if not factoryWaypoints then
20911: LD_EXP 82
20915: NOT
20916: IFFALSE 20920
// exit ;
20918: GO 21493
// for i := 1 to Count ( factoryWaypoints ) do
20920: LD_ADDR_VAR 0 4
20924: PUSH
20925: DOUBLE
20926: LD_INT 1
20928: DEC
20929: ST_TO_ADDR
20930: LD_EXP 82
20934: PPUSH
20935: CALL 29256 0 1
20939: PUSH
20940: FOR_TO
20941: IFFALSE 21491
// if factoryWaypoints [ i ] [ 2 ] = factory then
20943: LD_EXP 82
20947: PUSH
20948: LD_VAR 0 4
20952: ARRAY
20953: PUSH
20954: LD_INT 2
20956: ARRAY
20957: PUSH
20958: LD_VAR 0 2
20962: EQUAL
20963: IFFALSE 21489
// begin if GetControl ( vehicle ) = control_manual then
20965: LD_VAR 0 1
20969: PPUSH
20970: CALL_OW 263
20974: PUSH
20975: LD_INT 1
20977: EQUAL
20978: IFFALSE 21342
// begin driver := IsDrivenBy ( vehicle ) ;
20980: LD_ADDR_VAR 0 5
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 311
20994: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
20995: LD_VAR 0 5
20999: PUSH
21000: LD_EXP 83
21004: IN
21005: IFTRUE 21019
21007: PUSH
21008: LD_VAR 0 1
21012: PUSH
21013: LD_EXP 83
21017: IN
21018: OR
21019: IFFALSE 21025
// exit ;
21021: POP
21022: POP
21023: GO 21493
// if not HasTask ( driver ) then
21025: LD_VAR 0 5
21029: PPUSH
21030: CALL_OW 314
21034: NOT
21035: IFFALSE 21340
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21037: LD_ADDR_EXP 83
21041: PUSH
21042: LD_EXP 83
21046: PPUSH
21047: LD_VAR 0 5
21051: PPUSH
21052: CALL 65188 0 2
21056: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21057: LD_ADDR_EXP 83
21061: PUSH
21062: LD_EXP 83
21066: PPUSH
21067: LD_VAR 0 1
21071: PPUSH
21072: CALL 65188 0 2
21076: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21077: LD_ADDR_VAR 0 6
21081: PUSH
21082: LD_EXP 82
21086: PUSH
21087: LD_VAR 0 4
21091: ARRAY
21092: PUSH
21093: LD_INT 3
21095: ARRAY
21096: PPUSH
21097: LD_EXP 82
21101: PUSH
21102: LD_VAR 0 4
21106: ARRAY
21107: PUSH
21108: LD_INT 4
21110: ARRAY
21111: PPUSH
21112: CALL_OW 428
21116: ST_TO_ADDR
// if hex then
21117: LD_VAR 0 6
21121: IFFALSE 21139
// ComMoveUnit ( driver , hex ) else
21123: LD_VAR 0 5
21127: PPUSH
21128: LD_VAR 0 6
21132: PPUSH
21133: CALL_OW 112
21137: GO 21223
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21139: LD_VAR 0 1
21143: PPUSH
21144: LD_EXP 82
21148: PUSH
21149: LD_VAR 0 4
21153: ARRAY
21154: PUSH
21155: LD_INT 3
21157: ARRAY
21158: PPUSH
21159: LD_EXP 82
21163: PUSH
21164: LD_VAR 0 4
21168: ARRAY
21169: PUSH
21170: LD_INT 4
21172: ARRAY
21173: PPUSH
21174: CALL_OW 297
21178: PUSH
21179: LD_INT 0
21181: GREATER
21182: IFFALSE 21223
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21184: LD_VAR 0 5
21188: PPUSH
21189: LD_EXP 82
21193: PUSH
21194: LD_VAR 0 4
21198: ARRAY
21199: PUSH
21200: LD_INT 3
21202: ARRAY
21203: PPUSH
21204: LD_EXP 82
21208: PUSH
21209: LD_VAR 0 4
21213: ARRAY
21214: PUSH
21215: LD_INT 4
21217: ARRAY
21218: PPUSH
21219: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21223: LD_VAR 0 5
21227: PPUSH
21228: CALL_OW 181
// if Multiplayer then
21232: LD_OWVAR 4
21236: IFFALSE 21285
// begin repeat wait ( 10 ) ;
21238: LD_INT 10
21240: PPUSH
21241: CALL_OW 67
// until not IsInUnit ( driver ) ;
21245: LD_VAR 0 5
21249: PPUSH
21250: CALL_OW 310
21254: NOT
21255: IFFALSE 21238
// if not HasTask ( driver ) then
21257: LD_VAR 0 5
21261: PPUSH
21262: CALL_OW 314
21266: NOT
21267: IFFALSE 21283
// ComEnterUnit ( driver , factory ) ;
21269: LD_VAR 0 5
21273: PPUSH
21274: LD_VAR 0 2
21278: PPUSH
21279: CALL_OW 120
// end else
21283: GO 21299
// AddComEnterUnit ( driver , factory ) ;
21285: LD_VAR 0 5
21289: PPUSH
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 180
// wait ( 0 0$1 ) ;
21299: LD_INT 35
21301: PPUSH
21302: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21306: LD_ADDR_EXP 83
21310: PUSH
21311: LD_EXP 83
21315: PUSH
21316: LD_VAR 0 5
21320: DIFF
21321: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21322: LD_ADDR_EXP 83
21326: PUSH
21327: LD_EXP 83
21331: PUSH
21332: LD_VAR 0 1
21336: DIFF
21337: ST_TO_ADDR
// break ;
21338: GO 21491
// end ; end else
21340: GO 21489
// if GetControl ( vehicle ) = control_remote then
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 263
21351: PUSH
21352: LD_INT 2
21354: EQUAL
21355: IFFALSE 21441
// begin wait ( 0 0$2 ) ;
21357: LD_INT 70
21359: PPUSH
21360: CALL_OW 67
// repeat wait ( 10 ) ;
21364: LD_INT 10
21366: PPUSH
21367: CALL_OW 67
// Connect ( vehicle ) ;
21371: LD_VAR 0 1
21375: PPUSH
21376: CALL 35500 0 1
// until IsControledBy ( vehicle ) ;
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 312
21389: IFFALSE 21364
// wait ( 10 ) ;
21391: LD_INT 10
21393: PPUSH
21394: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_EXP 82
21407: PUSH
21408: LD_VAR 0 4
21412: ARRAY
21413: PUSH
21414: LD_INT 3
21416: ARRAY
21417: PPUSH
21418: LD_EXP 82
21422: PUSH
21423: LD_VAR 0 4
21427: ARRAY
21428: PUSH
21429: LD_INT 4
21431: ARRAY
21432: PPUSH
21433: CALL_OW 111
// break ;
21437: GO 21491
// end else
21439: GO 21489
// begin wait ( 0 0$3 ) ;
21441: LD_INT 105
21443: PPUSH
21444: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: LD_EXP 82
21457: PUSH
21458: LD_VAR 0 4
21462: ARRAY
21463: PUSH
21464: LD_INT 3
21466: ARRAY
21467: PPUSH
21468: LD_EXP 82
21472: PUSH
21473: LD_VAR 0 4
21477: ARRAY
21478: PUSH
21479: LD_INT 4
21481: ARRAY
21482: PPUSH
21483: CALL_OW 111
// break ;
21487: GO 21491
// end ; end ;
21489: GO 20940
21491: POP
21492: POP
// end ;
21493: LD_VAR 0 3
21497: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21498: LD_INT 0
21500: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21501: LD_VAR 0 1
21505: PUSH
21506: LD_INT 250
21508: EQUAL
21509: IFFALSE 21526
21511: PUSH
21512: LD_VAR 0 2
21516: PPUSH
21517: CALL_OW 264
21521: PUSH
21522: LD_INT 81
21524: EQUAL
21525: AND
21526: IFFALSE 21547
// MinerPlaceMine ( unit , x , y ) ;
21528: LD_VAR 0 2
21532: PPUSH
21533: LD_VAR 0 4
21537: PPUSH
21538: LD_VAR 0 5
21542: PPUSH
21543: CALL 24679 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21547: LD_VAR 0 1
21551: PUSH
21552: LD_INT 251
21554: EQUAL
21555: IFFALSE 21572
21557: PUSH
21558: LD_VAR 0 2
21562: PPUSH
21563: CALL_OW 264
21567: PUSH
21568: LD_INT 81
21570: EQUAL
21571: AND
21572: IFFALSE 21593
// MinerDetonateMine ( unit , x , y ) ;
21574: LD_VAR 0 2
21578: PPUSH
21579: LD_VAR 0 4
21583: PPUSH
21584: LD_VAR 0 5
21588: PPUSH
21589: CALL 24958 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21593: LD_VAR 0 1
21597: PUSH
21598: LD_INT 252
21600: EQUAL
21601: IFFALSE 21618
21603: PUSH
21604: LD_VAR 0 2
21608: PPUSH
21609: CALL_OW 264
21613: PUSH
21614: LD_INT 81
21616: EQUAL
21617: AND
21618: IFFALSE 21639
// MinerCreateMinefield ( unit , x , y ) ;
21620: LD_VAR 0 2
21624: PPUSH
21625: LD_VAR 0 4
21629: PPUSH
21630: LD_VAR 0 5
21634: PPUSH
21635: CALL 25377 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21639: LD_VAR 0 1
21643: PUSH
21644: LD_INT 253
21646: EQUAL
21647: IFFALSE 21664
21649: PUSH
21650: LD_VAR 0 2
21654: PPUSH
21655: CALL_OW 257
21659: PUSH
21660: LD_INT 5
21662: EQUAL
21663: AND
21664: IFFALSE 21685
// ComBinocular ( unit , x , y ) ;
21666: LD_VAR 0 2
21670: PPUSH
21671: LD_VAR 0 4
21675: PPUSH
21676: LD_VAR 0 5
21680: PPUSH
21681: CALL 25752 0 3
// if selectedUnit then
21685: LD_VAR 0 3
21689: IFFALSE 21749
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21691: LD_VAR 0 1
21695: PUSH
21696: LD_INT 254
21698: EQUAL
21699: IFFALSE 21716
21701: PUSH
21702: LD_VAR 0 2
21706: PPUSH
21707: CALL_OW 264
21711: PUSH
21712: LD_INT 99
21714: EQUAL
21715: AND
21716: IFFALSE 21733
21718: PUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: CALL_OW 263
21728: PUSH
21729: LD_INT 3
21731: EQUAL
21732: AND
21733: IFFALSE 21749
// HackDestroyVehicle ( unit , selectedUnit ) ;
21735: LD_VAR 0 2
21739: PPUSH
21740: LD_VAR 0 3
21744: PPUSH
21745: CALL 24039 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21749: LD_VAR 0 1
21753: PUSH
21754: LD_INT 255
21756: EQUAL
21757: IFFALSE 21781
21759: PUSH
21760: LD_VAR 0 2
21764: PPUSH
21765: CALL_OW 264
21769: PUSH
21770: LD_INT 14
21772: PUSH
21773: LD_INT 53
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: IN
21780: AND
21781: IFFALSE 21799
21783: PUSH
21784: LD_VAR 0 4
21788: PPUSH
21789: LD_VAR 0 5
21793: PPUSH
21794: CALL_OW 488
21798: AND
21799: IFFALSE 21823
// CutTreeXYR ( unit , x , y , 12 ) ;
21801: LD_VAR 0 2
21805: PPUSH
21806: LD_VAR 0 4
21810: PPUSH
21811: LD_VAR 0 5
21815: PPUSH
21816: LD_INT 12
21818: PPUSH
21819: CALL 22014 0 4
// if cmd = 256 then
21823: LD_VAR 0 1
21827: PUSH
21828: LD_INT 256
21830: EQUAL
21831: IFFALSE 21852
// SetFactoryWaypoint ( unit , x , y ) ;
21833: LD_VAR 0 2
21837: PPUSH
21838: LD_VAR 0 4
21842: PPUSH
21843: LD_VAR 0 5
21847: PPUSH
21848: CALL 19211 0 3
// if cmd = 257 then
21852: LD_VAR 0 1
21856: PUSH
21857: LD_INT 257
21859: EQUAL
21860: IFFALSE 21881
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21862: LD_VAR 0 2
21866: PPUSH
21867: LD_VAR 0 4
21871: PPUSH
21872: LD_VAR 0 5
21876: PPUSH
21877: CALL 19707 0 3
// if cmd = 258 then
21881: LD_VAR 0 1
21885: PUSH
21886: LD_INT 258
21888: EQUAL
21889: IFFALSE 21913
// BurnTreeXYR ( unit , x , y , 8 ) ;
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 4
21900: PPUSH
21901: LD_VAR 0 5
21905: PPUSH
21906: LD_INT 8
21908: PPUSH
21909: CALL 22414 0 4
// end ;
21913: LD_VAR 0 6
21917: RET
// export function ComRadiation ( un ) ; var eff ; begin
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 264
21931: PUSH
21932: LD_INT 91
21934: NONEQUAL
21935: IFFALSE 21939
// exit ;
21937: GO 22009
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21939: LD_INT 68
21941: PPUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 255
21951: PPUSH
21952: CALL_OW 321
21956: PUSH
21957: LD_INT 2
21959: EQUAL
21960: IFFALSE 21972
// eff := 50 else
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: LD_INT 50
21969: ST_TO_ADDR
21970: GO 21980
// eff := 25 ;
21972: LD_ADDR_VAR 0 3
21976: PUSH
21977: LD_INT 25
21979: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 250
21989: PPUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 251
21999: PPUSH
22000: LD_VAR 0 3
22004: PPUSH
22005: CALL_OW 495
// end ;
22009: LD_VAR 0 2
22013: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
22019: PPUSH
22020: PPUSH
22021: PPUSH
22022: PPUSH
22023: PPUSH
22024: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 302
22034: NOT
22035: IFTRUE 22054
22037: PUSH
22038: LD_VAR 0 2
22042: PPUSH
22043: LD_VAR 0 3
22047: PPUSH
22048: CALL_OW 488
22052: NOT
22053: OR
22054: IFTRUE 22063
22056: PUSH
22057: LD_VAR 0 4
22061: NOT
22062: OR
22063: IFFALSE 22067
// exit ;
22065: GO 22409
// list := [ ] ;
22067: LD_ADDR_VAR 0 13
22071: PUSH
22072: EMPTY
22073: ST_TO_ADDR
// if x - r < 0 then
22074: LD_VAR 0 2
22078: PUSH
22079: LD_VAR 0 4
22083: MINUS
22084: PUSH
22085: LD_INT 0
22087: LESS
22088: IFFALSE 22100
// min_x := 0 else
22090: LD_ADDR_VAR 0 7
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
22098: GO 22116
// min_x := x - r ;
22100: LD_ADDR_VAR 0 7
22104: PUSH
22105: LD_VAR 0 2
22109: PUSH
22110: LD_VAR 0 4
22114: MINUS
22115: ST_TO_ADDR
// if y - r < 0 then
22116: LD_VAR 0 3
22120: PUSH
22121: LD_VAR 0 4
22125: MINUS
22126: PUSH
22127: LD_INT 0
22129: LESS
22130: IFFALSE 22142
// min_y := 0 else
22132: LD_ADDR_VAR 0 8
22136: PUSH
22137: LD_INT 0
22139: ST_TO_ADDR
22140: GO 22158
// min_y := y - r ;
22142: LD_ADDR_VAR 0 8
22146: PUSH
22147: LD_VAR 0 3
22151: PUSH
22152: LD_VAR 0 4
22156: MINUS
22157: ST_TO_ADDR
// max_x := x + r ;
22158: LD_ADDR_VAR 0 9
22162: PUSH
22163: LD_VAR 0 2
22167: PUSH
22168: LD_VAR 0 4
22172: PLUS
22173: ST_TO_ADDR
// max_y := y + r ;
22174: LD_ADDR_VAR 0 10
22178: PUSH
22179: LD_VAR 0 3
22183: PUSH
22184: LD_VAR 0 4
22188: PLUS
22189: ST_TO_ADDR
// for _x = min_x to max_x do
22190: LD_ADDR_VAR 0 11
22194: PUSH
22195: DOUBLE
22196: LD_VAR 0 7
22200: DEC
22201: ST_TO_ADDR
22202: LD_VAR 0 9
22206: PUSH
22207: FOR_TO
22208: IFFALSE 22327
// for _y = min_y to max_y do
22210: LD_ADDR_VAR 0 12
22214: PUSH
22215: DOUBLE
22216: LD_VAR 0 8
22220: DEC
22221: ST_TO_ADDR
22222: LD_VAR 0 10
22226: PUSH
22227: FOR_TO
22228: IFFALSE 22323
// begin if not ValidHex ( _x , _y ) then
22230: LD_VAR 0 11
22234: PPUSH
22235: LD_VAR 0 12
22239: PPUSH
22240: CALL_OW 488
22244: NOT
22245: IFFALSE 22249
// continue ;
22247: GO 22227
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22249: LD_VAR 0 11
22253: PPUSH
22254: LD_VAR 0 12
22258: PPUSH
22259: CALL_OW 351
22263: IFFALSE 22281
22265: PUSH
22266: LD_VAR 0 11
22270: PPUSH
22271: LD_VAR 0 12
22275: PPUSH
22276: CALL_OW 554
22280: AND
22281: IFFALSE 22321
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22283: LD_ADDR_VAR 0 13
22287: PUSH
22288: LD_VAR 0 13
22292: PPUSH
22293: LD_VAR 0 13
22297: PUSH
22298: LD_INT 1
22300: PLUS
22301: PPUSH
22302: LD_VAR 0 11
22306: PUSH
22307: LD_VAR 0 12
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 2
22320: ST_TO_ADDR
// end ;
22321: GO 22227
22323: POP
22324: POP
22325: GO 22207
22327: POP
22328: POP
// if not list then
22329: LD_VAR 0 13
22333: NOT
22334: IFFALSE 22338
// exit ;
22336: GO 22409
// for i in list do
22338: LD_ADDR_VAR 0 6
22342: PUSH
22343: LD_VAR 0 13
22347: PUSH
22348: FOR_IN
22349: IFFALSE 22407
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22351: LD_VAR 0 1
22355: PPUSH
22356: LD_STRING M
22358: PUSH
22359: LD_VAR 0 6
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PUSH
22368: LD_VAR 0 6
22372: PUSH
22373: LD_INT 2
22375: ARRAY
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: PUSH
22398: EMPTY
22399: LIST
22400: PPUSH
22401: CALL_OW 447
22405: GO 22348
22407: POP
22408: POP
// end ;
22409: LD_VAR 0 5
22413: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 302
22435: NOT
22436: IFTRUE 22455
22438: PUSH
22439: LD_VAR 0 2
22443: PPUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: CALL_OW 488
22453: NOT
22454: OR
22455: IFTRUE 22464
22457: PUSH
22458: LD_VAR 0 4
22462: NOT
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 22985
// list := [ ] ;
22468: LD_ADDR_VAR 0 13
22472: PUSH
22473: EMPTY
22474: ST_TO_ADDR
// if x - r < 0 then
22475: LD_VAR 0 2
22479: PUSH
22480: LD_VAR 0 4
22484: MINUS
22485: PUSH
22486: LD_INT 0
22488: LESS
22489: IFFALSE 22501
// min_x := 0 else
22491: LD_ADDR_VAR 0 7
22495: PUSH
22496: LD_INT 0
22498: ST_TO_ADDR
22499: GO 22517
// min_x := x - r ;
22501: LD_ADDR_VAR 0 7
22505: PUSH
22506: LD_VAR 0 2
22510: PUSH
22511: LD_VAR 0 4
22515: MINUS
22516: ST_TO_ADDR
// if y - r < 0 then
22517: LD_VAR 0 3
22521: PUSH
22522: LD_VAR 0 4
22526: MINUS
22527: PUSH
22528: LD_INT 0
22530: LESS
22531: IFFALSE 22543
// min_y := 0 else
22533: LD_ADDR_VAR 0 8
22537: PUSH
22538: LD_INT 0
22540: ST_TO_ADDR
22541: GO 22559
// min_y := y - r ;
22543: LD_ADDR_VAR 0 8
22547: PUSH
22548: LD_VAR 0 3
22552: PUSH
22553: LD_VAR 0 4
22557: MINUS
22558: ST_TO_ADDR
// max_x := x + r ;
22559: LD_ADDR_VAR 0 9
22563: PUSH
22564: LD_VAR 0 2
22568: PUSH
22569: LD_VAR 0 4
22573: PLUS
22574: ST_TO_ADDR
// max_y := y + r ;
22575: LD_ADDR_VAR 0 10
22579: PUSH
22580: LD_VAR 0 3
22584: PUSH
22585: LD_VAR 0 4
22589: PLUS
22590: ST_TO_ADDR
// for _x = min_x to max_x do
22591: LD_ADDR_VAR 0 11
22595: PUSH
22596: DOUBLE
22597: LD_VAR 0 7
22601: DEC
22602: ST_TO_ADDR
22603: LD_VAR 0 9
22607: PUSH
22608: FOR_TO
22609: IFFALSE 22728
// for _y = min_y to max_y do
22611: LD_ADDR_VAR 0 12
22615: PUSH
22616: DOUBLE
22617: LD_VAR 0 8
22621: DEC
22622: ST_TO_ADDR
22623: LD_VAR 0 10
22627: PUSH
22628: FOR_TO
22629: IFFALSE 22724
// begin if not ValidHex ( _x , _y ) then
22631: LD_VAR 0 11
22635: PPUSH
22636: LD_VAR 0 12
22640: PPUSH
22641: CALL_OW 488
22645: NOT
22646: IFFALSE 22650
// continue ;
22648: GO 22628
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22650: LD_VAR 0 11
22654: PPUSH
22655: LD_VAR 0 12
22659: PPUSH
22660: CALL_OW 351
22664: IFFALSE 22682
22666: PUSH
22667: LD_VAR 0 11
22671: PPUSH
22672: LD_VAR 0 12
22676: PPUSH
22677: CALL_OW 554
22681: AND
22682: IFFALSE 22722
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22684: LD_ADDR_VAR 0 13
22688: PUSH
22689: LD_VAR 0 13
22693: PPUSH
22694: LD_VAR 0 13
22698: PUSH
22699: LD_INT 1
22701: PLUS
22702: PPUSH
22703: LD_VAR 0 11
22707: PUSH
22708: LD_VAR 0 12
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 2
22721: ST_TO_ADDR
// end ;
22722: GO 22628
22724: POP
22725: POP
22726: GO 22608
22728: POP
22729: POP
// if not list then
22730: LD_VAR 0 13
22734: NOT
22735: IFFALSE 22739
// exit ;
22737: GO 22985
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22739: LD_ADDR_VAR 0 13
22743: PUSH
22744: LD_VAR 0 1
22748: PPUSH
22749: LD_VAR 0 13
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: LD_INT 1
22759: PPUSH
22760: CALL 32628 0 4
22764: ST_TO_ADDR
// ComStop ( flame ) ;
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 141
// for i in list do
22774: LD_ADDR_VAR 0 6
22778: PUSH
22779: LD_VAR 0 13
22783: PUSH
22784: FOR_IN
22785: IFFALSE 22816
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22787: LD_VAR 0 1
22791: PPUSH
22792: LD_VAR 0 6
22796: PUSH
22797: LD_INT 1
22799: ARRAY
22800: PPUSH
22801: LD_VAR 0 6
22805: PUSH
22806: LD_INT 2
22808: ARRAY
22809: PPUSH
22810: CALL_OW 176
22814: GO 22784
22816: POP
22817: POP
// repeat wait ( 0 0$1 ) ;
22818: LD_INT 35
22820: PPUSH
22821: CALL_OW 67
// task := GetTaskList ( flame ) ;
22825: LD_ADDR_VAR 0 14
22829: PUSH
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 437
22839: ST_TO_ADDR
// if not task then
22840: LD_VAR 0 14
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 22985
// if task [ 1 ] [ 1 ] <> | then
22849: LD_VAR 0 14
22853: PUSH
22854: LD_INT 1
22856: ARRAY
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PUSH
22862: LD_STRING |
22864: NONEQUAL
22865: IFFALSE 22869
// exit ;
22867: GO 22985
// _x := task [ 1 ] [ 2 ] ;
22869: LD_ADDR_VAR 0 11
22873: PUSH
22874: LD_VAR 0 14
22878: PUSH
22879: LD_INT 1
22881: ARRAY
22882: PUSH
22883: LD_INT 2
22885: ARRAY
22886: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22887: LD_ADDR_VAR 0 12
22891: PUSH
22892: LD_VAR 0 14
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PUSH
22901: LD_INT 3
22903: ARRAY
22904: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22905: LD_VAR 0 11
22909: PPUSH
22910: LD_VAR 0 12
22914: PPUSH
22915: CALL_OW 351
22919: NOT
22920: IFTRUE 22939
22922: PUSH
22923: LD_VAR 0 11
22927: PPUSH
22928: LD_VAR 0 12
22932: PPUSH
22933: CALL_OW 554
22937: NOT
22938: OR
22939: IFFALSE 22973
// begin task := Delete ( task , 1 ) ;
22941: LD_ADDR_VAR 0 14
22945: PUSH
22946: LD_VAR 0 14
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 3
22958: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22959: LD_VAR 0 1
22963: PPUSH
22964: LD_VAR 0 14
22968: PPUSH
22969: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22973: LD_VAR 0 1
22977: PPUSH
22978: CALL_OW 314
22982: NOT
22983: IFFALSE 22818
// end ;
22985: LD_VAR 0 5
22989: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22990: LD_EXP 86
22994: NOT
22995: IFFALSE 23045
22997: GO 22999
22999: DISABLE
// begin initHack := true ;
23000: LD_ADDR_EXP 86
23004: PUSH
23005: LD_INT 1
23007: ST_TO_ADDR
// hackTanks := [ ] ;
23008: LD_ADDR_EXP 87
23012: PUSH
23013: EMPTY
23014: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23015: LD_ADDR_EXP 88
23019: PUSH
23020: EMPTY
23021: ST_TO_ADDR
// hackLimit := 3 ;
23022: LD_ADDR_EXP 89
23026: PUSH
23027: LD_INT 3
23029: ST_TO_ADDR
// hackDist := 12 ;
23030: LD_ADDR_EXP 90
23034: PUSH
23035: LD_INT 12
23037: ST_TO_ADDR
// hackCounter := [ ] ;
23038: LD_ADDR_EXP 91
23042: PUSH
23043: EMPTY
23044: ST_TO_ADDR
// end ;
23045: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23046: LD_EXP 86
23050: IFFALSE 23068
23052: PUSH
23053: LD_INT 34
23055: PUSH
23056: LD_INT 99
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PPUSH
23063: CALL_OW 69
23067: AND
23068: IFFALSE 23321
23070: GO 23072
23072: DISABLE
23073: LD_INT 0
23075: PPUSH
23076: PPUSH
// begin enable ;
23077: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23078: LD_ADDR_VAR 0 1
23082: PUSH
23083: LD_INT 34
23085: PUSH
23086: LD_INT 99
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PPUSH
23093: CALL_OW 69
23097: PUSH
23098: FOR_IN
23099: IFFALSE 23319
// begin if not i in hackTanks then
23101: LD_VAR 0 1
23105: PUSH
23106: LD_EXP 87
23110: IN
23111: NOT
23112: IFFALSE 23195
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23114: LD_ADDR_EXP 87
23118: PUSH
23119: LD_EXP 87
23123: PPUSH
23124: LD_EXP 87
23128: PUSH
23129: LD_INT 1
23131: PLUS
23132: PPUSH
23133: LD_VAR 0 1
23137: PPUSH
23138: CALL_OW 1
23142: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23143: LD_ADDR_EXP 88
23147: PUSH
23148: LD_EXP 88
23152: PPUSH
23153: LD_EXP 88
23157: PUSH
23158: LD_INT 1
23160: PLUS
23161: PPUSH
23162: EMPTY
23163: PPUSH
23164: CALL_OW 1
23168: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23169: LD_ADDR_EXP 91
23173: PUSH
23174: LD_EXP 91
23178: PPUSH
23179: LD_EXP 91
23183: PUSH
23184: LD_INT 1
23186: PLUS
23187: PPUSH
23188: EMPTY
23189: PPUSH
23190: CALL_OW 1
23194: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 302
23204: NOT
23205: IFFALSE 23218
// begin HackUnlinkAll ( i ) ;
23207: LD_VAR 0 1
23211: PPUSH
23212: CALL 23324 0 1
// continue ;
23216: GO 23098
// end ; HackCheckCapturedStatus ( i ) ;
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL 23769 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23227: LD_ADDR_VAR 0 2
23231: PUSH
23232: LD_INT 81
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 255
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 33
23251: PUSH
23252: LD_INT 3
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 91
23261: PUSH
23262: LD_VAR 0 1
23266: PUSH
23267: LD_EXP 90
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 50
23279: PUSH
23280: EMPTY
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: PPUSH
23289: CALL_OW 69
23293: ST_TO_ADDR
// if not tmp then
23294: LD_VAR 0 2
23298: NOT
23299: IFFALSE 23303
// continue ;
23301: GO 23098
// HackLink ( i , tmp ) ;
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_VAR 0 2
23312: PPUSH
23313: CALL 23460 0 2
// end ;
23317: GO 23098
23319: POP
23320: POP
// end ;
23321: PPOPN 2
23323: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23324: LD_INT 0
23326: PPUSH
23327: PPUSH
23328: PPUSH
// if not hack in hackTanks then
23329: LD_VAR 0 1
23333: PUSH
23334: LD_EXP 87
23338: IN
23339: NOT
23340: IFFALSE 23344
// exit ;
23342: GO 23455
// index := GetElementIndex ( hackTanks , hack ) ;
23344: LD_ADDR_VAR 0 4
23348: PUSH
23349: LD_EXP 87
23353: PPUSH
23354: LD_VAR 0 1
23358: PPUSH
23359: CALL 31923 0 2
23363: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23364: LD_EXP 88
23368: PUSH
23369: LD_VAR 0 4
23373: ARRAY
23374: IFFALSE 23455
// begin for i in hackTanksCaptured [ index ] do
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_EXP 88
23385: PUSH
23386: LD_VAR 0 4
23390: ARRAY
23391: PUSH
23392: FOR_IN
23393: IFFALSE 23419
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23395: LD_VAR 0 3
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PPUSH
23404: LD_VAR 0 3
23408: PUSH
23409: LD_INT 2
23411: ARRAY
23412: PPUSH
23413: CALL_OW 235
23417: GO 23392
23419: POP
23420: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23421: LD_ADDR_EXP 88
23425: PUSH
23426: LD_EXP 88
23430: PPUSH
23431: LD_VAR 0 4
23435: PPUSH
23436: EMPTY
23437: PPUSH
23438: CALL_OW 1
23442: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23443: LD_VAR 0 1
23447: PPUSH
23448: LD_INT 0
23450: PPUSH
23451: CALL_OW 505
// end ; end ;
23455: LD_VAR 0 2
23459: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
23464: PPUSH
// if not hack in hackTanks or not vehicles then
23465: LD_VAR 0 1
23469: PUSH
23470: LD_EXP 87
23474: IN
23475: NOT
23476: IFTRUE 23485
23478: PUSH
23479: LD_VAR 0 2
23483: NOT
23484: OR
23485: IFFALSE 23489
// exit ;
23487: GO 23764
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23489: LD_ADDR_VAR 0 2
23493: PUSH
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL 32575 0 4
23514: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: LD_EXP 87
23524: PPUSH
23525: LD_VAR 0 1
23529: PPUSH
23530: CALL 31923 0 2
23534: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23535: LD_EXP 88
23539: PUSH
23540: LD_VAR 0 5
23544: ARRAY
23545: PUSH
23546: LD_EXP 89
23550: LESS
23551: IFFALSE 23740
// begin for i := 1 to vehicles do
23553: LD_ADDR_VAR 0 4
23557: PUSH
23558: DOUBLE
23559: LD_INT 1
23561: DEC
23562: ST_TO_ADDR
23563: LD_VAR 0 2
23567: PUSH
23568: FOR_TO
23569: IFFALSE 23738
// begin if hackTanksCaptured [ index ] = hackLimit then
23571: LD_EXP 88
23575: PUSH
23576: LD_VAR 0 5
23580: ARRAY
23581: PUSH
23582: LD_EXP 89
23586: EQUAL
23587: IFFALSE 23591
// break ;
23589: GO 23738
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23591: LD_ADDR_EXP 91
23595: PUSH
23596: LD_EXP 91
23600: PPUSH
23601: LD_VAR 0 5
23605: PPUSH
23606: LD_EXP 91
23610: PUSH
23611: LD_VAR 0 5
23615: ARRAY
23616: PUSH
23617: LD_INT 1
23619: PLUS
23620: PPUSH
23621: CALL_OW 1
23625: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23626: LD_ADDR_EXP 88
23630: PUSH
23631: LD_EXP 88
23635: PPUSH
23636: LD_VAR 0 5
23640: PUSH
23641: LD_EXP 88
23645: PUSH
23646: LD_VAR 0 5
23650: ARRAY
23651: PUSH
23652: LD_INT 1
23654: PLUS
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PPUSH
23660: LD_VAR 0 2
23664: PUSH
23665: LD_VAR 0 4
23669: ARRAY
23670: PUSH
23671: LD_VAR 0 2
23675: PUSH
23676: LD_VAR 0 4
23680: ARRAY
23681: PPUSH
23682: CALL_OW 255
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL 32140 0 3
23695: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23696: LD_VAR 0 2
23700: PUSH
23701: LD_VAR 0 4
23705: ARRAY
23706: PPUSH
23707: LD_VAR 0 1
23711: PPUSH
23712: CALL_OW 255
23716: PPUSH
23717: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23721: LD_VAR 0 2
23725: PUSH
23726: LD_VAR 0 4
23730: ARRAY
23731: PPUSH
23732: CALL_OW 141
// end ;
23736: GO 23568
23738: POP
23739: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: LD_EXP 88
23749: PUSH
23750: LD_VAR 0 5
23754: ARRAY
23755: PUSH
23756: LD_INT 0
23758: PLUS
23759: PPUSH
23760: CALL_OW 505
// end ;
23764: LD_VAR 0 3
23768: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23769: LD_INT 0
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
// if not hack in hackTanks then
23775: LD_VAR 0 1
23779: PUSH
23780: LD_EXP 87
23784: IN
23785: NOT
23786: IFFALSE 23790
// exit ;
23788: GO 24034
// index := GetElementIndex ( hackTanks , hack ) ;
23790: LD_ADDR_VAR 0 4
23794: PUSH
23795: LD_EXP 87
23799: PPUSH
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL 31923 0 2
23809: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23810: LD_ADDR_VAR 0 3
23814: PUSH
23815: DOUBLE
23816: LD_EXP 88
23820: PUSH
23821: LD_VAR 0 4
23825: ARRAY
23826: INC
23827: ST_TO_ADDR
23828: LD_INT 1
23830: PUSH
23831: FOR_DOWNTO
23832: IFFALSE 24008
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23834: LD_ADDR_VAR 0 5
23838: PUSH
23839: LD_EXP 88
23843: PUSH
23844: LD_VAR 0 4
23848: ARRAY
23849: PUSH
23850: LD_VAR 0 3
23854: ARRAY
23855: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23856: LD_VAR 0 5
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: CALL_OW 302
23869: NOT
23870: IFTRUE 23898
23872: PUSH
23873: LD_VAR 0 5
23877: PUSH
23878: LD_INT 1
23880: ARRAY
23881: PPUSH
23882: CALL_OW 255
23886: PUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 255
23896: NONEQUAL
23897: OR
23898: IFFALSE 24006
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23900: LD_VAR 0 5
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: CALL_OW 305
23913: IFFALSE 23941
23915: PUSH
23916: LD_VAR 0 5
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PPUSH
23925: CALL_OW 255
23929: PUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 255
23939: EQUAL
23940: AND
23941: IFFALSE 23965
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23943: LD_VAR 0 5
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PPUSH
23952: LD_VAR 0 5
23956: PUSH
23957: LD_INT 2
23959: ARRAY
23960: PPUSH
23961: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23965: LD_ADDR_EXP 88
23969: PUSH
23970: LD_EXP 88
23974: PPUSH
23975: LD_VAR 0 4
23979: PPUSH
23980: LD_EXP 88
23984: PUSH
23985: LD_VAR 0 4
23989: ARRAY
23990: PPUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: CALL_OW 3
24000: PPUSH
24001: CALL_OW 1
24005: ST_TO_ADDR
// end ; end ;
24006: GO 23831
24008: POP
24009: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24010: LD_VAR 0 1
24014: PPUSH
24015: LD_EXP 88
24019: PUSH
24020: LD_VAR 0 4
24024: ARRAY
24025: PUSH
24026: LD_INT 0
24028: PLUS
24029: PPUSH
24030: CALL_OW 505
// end ;
24034: LD_VAR 0 2
24038: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24039: LD_INT 0
24041: PPUSH
24042: PPUSH
24043: PPUSH
24044: PPUSH
// if not hack in hackTanks then
24045: LD_VAR 0 1
24049: PUSH
24050: LD_EXP 87
24054: IN
24055: NOT
24056: IFFALSE 24060
// exit ;
24058: GO 24145
// index := GetElementIndex ( hackTanks , hack ) ;
24060: LD_ADDR_VAR 0 5
24064: PUSH
24065: LD_EXP 87
24069: PPUSH
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL 31923 0 2
24079: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24080: LD_ADDR_VAR 0 4
24084: PUSH
24085: DOUBLE
24086: LD_INT 1
24088: DEC
24089: ST_TO_ADDR
24090: LD_EXP 88
24094: PUSH
24095: LD_VAR 0 5
24099: ARRAY
24100: PUSH
24101: FOR_TO
24102: IFFALSE 24143
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24104: LD_EXP 88
24108: PUSH
24109: LD_VAR 0 5
24113: ARRAY
24114: PUSH
24115: LD_VAR 0 4
24119: ARRAY
24120: PUSH
24121: LD_INT 1
24123: ARRAY
24124: PUSH
24125: LD_VAR 0 2
24129: EQUAL
24130: IFFALSE 24141
// KillUnit ( vehicle ) ;
24132: LD_VAR 0 2
24136: PPUSH
24137: CALL_OW 66
24141: GO 24101
24143: POP
24144: POP
// end ;
24145: LD_VAR 0 3
24149: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24150: LD_EXP 92
24154: NOT
24155: IFFALSE 24190
24157: GO 24159
24159: DISABLE
// begin initMiner := true ;
24160: LD_ADDR_EXP 92
24164: PUSH
24165: LD_INT 1
24167: ST_TO_ADDR
// minersList := [ ] ;
24168: LD_ADDR_EXP 93
24172: PUSH
24173: EMPTY
24174: ST_TO_ADDR
// minerMinesList := [ ] ;
24175: LD_ADDR_EXP 94
24179: PUSH
24180: EMPTY
24181: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24182: LD_ADDR_EXP 95
24186: PUSH
24187: LD_INT 5
24189: ST_TO_ADDR
// end ;
24190: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24191: LD_EXP 92
24195: IFFALSE 24213
24197: PUSH
24198: LD_INT 34
24200: PUSH
24201: LD_INT 81
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 69
24212: AND
24213: IFFALSE 24676
24215: GO 24217
24217: DISABLE
24218: LD_INT 0
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
// begin enable ;
24224: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24225: LD_ADDR_VAR 0 1
24229: PUSH
24230: LD_INT 34
24232: PUSH
24233: LD_INT 81
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 69
24244: PUSH
24245: FOR_IN
24246: IFFALSE 24318
// begin if not i in minersList then
24248: LD_VAR 0 1
24252: PUSH
24253: LD_EXP 93
24257: IN
24258: NOT
24259: IFFALSE 24316
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24261: LD_ADDR_EXP 93
24265: PUSH
24266: LD_EXP 93
24270: PPUSH
24271: LD_EXP 93
24275: PUSH
24276: LD_INT 1
24278: PLUS
24279: PPUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 1
24289: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24290: LD_ADDR_EXP 94
24294: PUSH
24295: LD_EXP 94
24299: PPUSH
24300: LD_EXP 94
24304: PUSH
24305: LD_INT 1
24307: PLUS
24308: PPUSH
24309: EMPTY
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// end end ;
24316: GO 24245
24318: POP
24319: POP
// for i := minerMinesList downto 1 do
24320: LD_ADDR_VAR 0 1
24324: PUSH
24325: DOUBLE
24326: LD_EXP 94
24330: INC
24331: ST_TO_ADDR
24332: LD_INT 1
24334: PUSH
24335: FOR_DOWNTO
24336: IFFALSE 24674
// begin if IsLive ( minersList [ i ] ) then
24338: LD_EXP 93
24342: PUSH
24343: LD_VAR 0 1
24347: ARRAY
24348: PPUSH
24349: CALL_OW 300
24353: IFFALSE 24381
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24355: LD_EXP 93
24359: PUSH
24360: LD_VAR 0 1
24364: ARRAY
24365: PPUSH
24366: LD_EXP 94
24370: PUSH
24371: LD_VAR 0 1
24375: ARRAY
24376: PPUSH
24377: CALL_OW 505
// if not minerMinesList [ i ] then
24381: LD_EXP 94
24385: PUSH
24386: LD_VAR 0 1
24390: ARRAY
24391: NOT
24392: IFFALSE 24396
// continue ;
24394: GO 24335
// for j := minerMinesList [ i ] downto 1 do
24396: LD_ADDR_VAR 0 2
24400: PUSH
24401: DOUBLE
24402: LD_EXP 94
24406: PUSH
24407: LD_VAR 0 1
24411: ARRAY
24412: INC
24413: ST_TO_ADDR
24414: LD_INT 1
24416: PUSH
24417: FOR_DOWNTO
24418: IFFALSE 24670
// begin side := GetSide ( minersList [ i ] ) ;
24420: LD_ADDR_VAR 0 3
24424: PUSH
24425: LD_EXP 93
24429: PUSH
24430: LD_VAR 0 1
24434: ARRAY
24435: PPUSH
24436: CALL_OW 255
24440: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24441: LD_ADDR_VAR 0 4
24445: PUSH
24446: LD_EXP 94
24450: PUSH
24451: LD_VAR 0 1
24455: ARRAY
24456: PUSH
24457: LD_VAR 0 2
24461: ARRAY
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: PPUSH
24467: LD_EXP 94
24471: PUSH
24472: LD_VAR 0 1
24476: ARRAY
24477: PUSH
24478: LD_VAR 0 2
24482: ARRAY
24483: PUSH
24484: LD_INT 2
24486: ARRAY
24487: PPUSH
24488: CALL_OW 428
24492: ST_TO_ADDR
// if not tmp then
24493: LD_VAR 0 4
24497: NOT
24498: IFFALSE 24502
// continue ;
24500: GO 24417
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24502: LD_VAR 0 4
24506: PUSH
24507: LD_INT 81
24509: PUSH
24510: LD_VAR 0 3
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PPUSH
24519: CALL_OW 69
24523: IN
24524: IFFALSE 24574
24526: PUSH
24527: LD_EXP 94
24531: PUSH
24532: LD_VAR 0 1
24536: ARRAY
24537: PUSH
24538: LD_VAR 0 2
24542: ARRAY
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: PPUSH
24548: LD_EXP 94
24552: PUSH
24553: LD_VAR 0 1
24557: ARRAY
24558: PUSH
24559: LD_VAR 0 2
24563: ARRAY
24564: PUSH
24565: LD_INT 2
24567: ARRAY
24568: PPUSH
24569: CALL_OW 458
24573: AND
24574: IFFALSE 24668
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24576: LD_EXP 94
24580: PUSH
24581: LD_VAR 0 1
24585: ARRAY
24586: PUSH
24587: LD_VAR 0 2
24591: ARRAY
24592: PUSH
24593: LD_INT 1
24595: ARRAY
24596: PPUSH
24597: LD_EXP 94
24601: PUSH
24602: LD_VAR 0 1
24606: ARRAY
24607: PUSH
24608: LD_VAR 0 2
24612: ARRAY
24613: PUSH
24614: LD_INT 2
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24627: LD_ADDR_EXP 94
24631: PUSH
24632: LD_EXP 94
24636: PPUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: LD_EXP 94
24646: PUSH
24647: LD_VAR 0 1
24651: ARRAY
24652: PPUSH
24653: LD_VAR 0 2
24657: PPUSH
24658: CALL_OW 3
24662: PPUSH
24663: CALL_OW 1
24667: ST_TO_ADDR
// end ; end ;
24668: GO 24417
24670: POP
24671: POP
// end ;
24672: GO 24335
24674: POP
24675: POP
// end ;
24676: PPOPN 4
24678: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// result := false ;
24683: LD_ADDR_VAR 0 4
24687: PUSH
24688: LD_INT 0
24690: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 264
24700: PUSH
24701: LD_INT 81
24703: EQUAL
24704: NOT
24705: IFFALSE 24709
// exit ;
24707: GO 24953
// index := GetElementIndex ( minersList , unit ) ;
24709: LD_ADDR_VAR 0 5
24713: PUSH
24714: LD_EXP 93
24718: PPUSH
24719: LD_VAR 0 1
24723: PPUSH
24724: CALL 31923 0 2
24728: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24729: LD_EXP 94
24733: PUSH
24734: LD_VAR 0 5
24738: ARRAY
24739: PUSH
24740: LD_EXP 95
24744: GREATEREQUAL
24745: IFFALSE 24749
// exit ;
24747: GO 24953
// ComMoveXY ( unit , x , y ) ;
24749: LD_VAR 0 1
24753: PPUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: LD_VAR 0 3
24763: PPUSH
24764: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24768: LD_INT 35
24770: PPUSH
24771: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24775: LD_VAR 0 1
24779: PPUSH
24780: LD_VAR 0 2
24784: PPUSH
24785: LD_VAR 0 3
24789: PPUSH
24790: CALL 63969 0 3
24794: NOT
24795: IFFALSE 24808
24797: PUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 314
24807: AND
24808: IFFALSE 24812
// exit ;
24810: GO 24953
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: CALL_OW 428
24826: PUSH
24827: LD_VAR 0 1
24831: EQUAL
24832: IFFALSE 24846
24834: PUSH
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 314
24844: NOT
24845: AND
24846: IFFALSE 24768
// PlaySoundXY ( x , y , PlantMine ) ;
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_VAR 0 3
24857: PPUSH
24858: LD_STRING PlantMine
24860: PPUSH
24861: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24865: LD_VAR 0 2
24869: PPUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: LD_VAR 0 1
24879: PPUSH
24880: CALL_OW 255
24884: PPUSH
24885: LD_INT 0
24887: PPUSH
24888: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24892: LD_ADDR_EXP 94
24896: PUSH
24897: LD_EXP 94
24901: PPUSH
24902: LD_VAR 0 5
24906: PUSH
24907: LD_EXP 94
24911: PUSH
24912: LD_VAR 0 5
24916: ARRAY
24917: PUSH
24918: LD_INT 1
24920: PLUS
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: LD_VAR 0 2
24930: PUSH
24931: LD_VAR 0 3
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL 32140 0 3
24944: ST_TO_ADDR
// result := true ;
24945: LD_ADDR_VAR 0 4
24949: PUSH
24950: LD_INT 1
24952: ST_TO_ADDR
// end ;
24953: LD_VAR 0 4
24957: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24958: LD_INT 0
24960: PPUSH
24961: PPUSH
24962: PPUSH
// if not unit in minersList then
24963: LD_VAR 0 1
24967: PUSH
24968: LD_EXP 93
24972: IN
24973: NOT
24974: IFFALSE 24978
// exit ;
24976: GO 25372
// index := GetElementIndex ( minersList , unit ) ;
24978: LD_ADDR_VAR 0 6
24982: PUSH
24983: LD_EXP 93
24987: PPUSH
24988: LD_VAR 0 1
24992: PPUSH
24993: CALL 31923 0 2
24997: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24998: LD_ADDR_VAR 0 5
25002: PUSH
25003: DOUBLE
25004: LD_EXP 94
25008: PUSH
25009: LD_VAR 0 6
25013: ARRAY
25014: INC
25015: ST_TO_ADDR
25016: LD_INT 1
25018: PUSH
25019: FOR_DOWNTO
25020: IFFALSE 25183
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25022: LD_EXP 94
25026: PUSH
25027: LD_VAR 0 6
25031: ARRAY
25032: PUSH
25033: LD_VAR 0 5
25037: ARRAY
25038: PUSH
25039: LD_INT 1
25041: ARRAY
25042: PUSH
25043: LD_VAR 0 2
25047: EQUAL
25048: IFFALSE 25078
25050: PUSH
25051: LD_EXP 94
25055: PUSH
25056: LD_VAR 0 6
25060: ARRAY
25061: PUSH
25062: LD_VAR 0 5
25066: ARRAY
25067: PUSH
25068: LD_INT 2
25070: ARRAY
25071: PUSH
25072: LD_VAR 0 3
25076: EQUAL
25077: AND
25078: IFFALSE 25181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25080: LD_EXP 94
25084: PUSH
25085: LD_VAR 0 6
25089: ARRAY
25090: PUSH
25091: LD_VAR 0 5
25095: ARRAY
25096: PUSH
25097: LD_INT 1
25099: ARRAY
25100: PPUSH
25101: LD_EXP 94
25105: PUSH
25106: LD_VAR 0 6
25110: ARRAY
25111: PUSH
25112: LD_VAR 0 5
25116: ARRAY
25117: PUSH
25118: LD_INT 2
25120: ARRAY
25121: PPUSH
25122: LD_VAR 0 1
25126: PPUSH
25127: CALL_OW 255
25131: PPUSH
25132: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25136: LD_ADDR_EXP 94
25140: PUSH
25141: LD_EXP 94
25145: PPUSH
25146: LD_VAR 0 6
25150: PPUSH
25151: LD_EXP 94
25155: PUSH
25156: LD_VAR 0 6
25160: ARRAY
25161: PPUSH
25162: LD_VAR 0 5
25166: PPUSH
25167: CALL_OW 3
25171: PPUSH
25172: CALL_OW 1
25176: ST_TO_ADDR
// exit ;
25177: POP
25178: POP
25179: GO 25372
// end ; end ;
25181: GO 25019
25183: POP
25184: POP
// for i := minerMinesList [ index ] downto 1 do
25185: LD_ADDR_VAR 0 5
25189: PUSH
25190: DOUBLE
25191: LD_EXP 94
25195: PUSH
25196: LD_VAR 0 6
25200: ARRAY
25201: INC
25202: ST_TO_ADDR
25203: LD_INT 1
25205: PUSH
25206: FOR_DOWNTO
25207: IFFALSE 25370
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25209: LD_EXP 94
25213: PUSH
25214: LD_VAR 0 6
25218: ARRAY
25219: PUSH
25220: LD_VAR 0 5
25224: ARRAY
25225: PUSH
25226: LD_INT 1
25228: ARRAY
25229: PPUSH
25230: LD_EXP 94
25234: PUSH
25235: LD_VAR 0 6
25239: ARRAY
25240: PUSH
25241: LD_VAR 0 5
25245: ARRAY
25246: PUSH
25247: LD_INT 2
25249: ARRAY
25250: PPUSH
25251: LD_VAR 0 2
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: CALL_OW 298
25265: PUSH
25266: LD_INT 6
25268: LESS
25269: IFFALSE 25368
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25271: LD_EXP 94
25275: PUSH
25276: LD_VAR 0 6
25280: ARRAY
25281: PUSH
25282: LD_VAR 0 5
25286: ARRAY
25287: PUSH
25288: LD_INT 1
25290: ARRAY
25291: PPUSH
25292: LD_EXP 94
25296: PUSH
25297: LD_VAR 0 6
25301: ARRAY
25302: PUSH
25303: LD_VAR 0 5
25307: ARRAY
25308: PUSH
25309: LD_INT 2
25311: ARRAY
25312: PPUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: CALL_OW 255
25322: PPUSH
25323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25327: LD_ADDR_EXP 94
25331: PUSH
25332: LD_EXP 94
25336: PPUSH
25337: LD_VAR 0 6
25341: PPUSH
25342: LD_EXP 94
25346: PUSH
25347: LD_VAR 0 6
25351: ARRAY
25352: PPUSH
25353: LD_VAR 0 5
25357: PPUSH
25358: CALL_OW 3
25362: PPUSH
25363: CALL_OW 1
25367: ST_TO_ADDR
// end ; end ;
25368: GO 25206
25370: POP
25371: POP
// end ;
25372: LD_VAR 0 4
25376: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25377: LD_INT 0
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 264
25397: PUSH
25398: LD_INT 81
25400: EQUAL
25401: NOT
25402: IFTRUE 25417
25404: PUSH
25405: LD_VAR 0 1
25409: PUSH
25410: LD_EXP 93
25414: IN
25415: NOT
25416: OR
25417: IFFALSE 25421
// exit ;
25419: GO 25747
// index := GetElementIndex ( minersList , unit ) ;
25421: LD_ADDR_VAR 0 6
25425: PUSH
25426: LD_EXP 93
25430: PPUSH
25431: LD_VAR 0 1
25435: PPUSH
25436: CALL 31923 0 2
25440: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25441: LD_ADDR_VAR 0 8
25445: PUSH
25446: LD_EXP 95
25450: PUSH
25451: LD_EXP 94
25455: PUSH
25456: LD_VAR 0 6
25460: ARRAY
25461: MINUS
25462: ST_TO_ADDR
// if not minesFreeAmount then
25463: LD_VAR 0 8
25467: NOT
25468: IFFALSE 25472
// exit ;
25470: GO 25747
// tmp := [ ] ;
25472: LD_ADDR_VAR 0 7
25476: PUSH
25477: EMPTY
25478: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25479: LD_ADDR_VAR 0 5
25483: PUSH
25484: DOUBLE
25485: LD_INT 1
25487: DEC
25488: ST_TO_ADDR
25489: LD_VAR 0 8
25493: PUSH
25494: FOR_TO
25495: IFFALSE 25694
// begin _d := rand ( 0 , 5 ) ;
25497: LD_ADDR_VAR 0 11
25501: PUSH
25502: LD_INT 0
25504: PPUSH
25505: LD_INT 5
25507: PPUSH
25508: CALL_OW 12
25512: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25513: LD_ADDR_VAR 0 12
25517: PUSH
25518: LD_INT 2
25520: PPUSH
25521: LD_INT 6
25523: PPUSH
25524: CALL_OW 12
25528: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25529: LD_ADDR_VAR 0 9
25533: PUSH
25534: LD_VAR 0 2
25538: PPUSH
25539: LD_VAR 0 11
25543: PPUSH
25544: LD_VAR 0 12
25548: PPUSH
25549: CALL_OW 272
25553: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25554: LD_ADDR_VAR 0 10
25558: PUSH
25559: LD_VAR 0 3
25563: PPUSH
25564: LD_VAR 0 11
25568: PPUSH
25569: LD_VAR 0 12
25573: PPUSH
25574: CALL_OW 273
25578: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25579: LD_VAR 0 9
25583: PPUSH
25584: LD_VAR 0 10
25588: PPUSH
25589: CALL_OW 488
25593: IFFALSE 25617
25595: PUSH
25596: LD_VAR 0 9
25600: PUSH
25601: LD_VAR 0 10
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_VAR 0 7
25614: IN
25615: NOT
25616: AND
25617: IFFALSE 25636
25619: PUSH
25620: LD_VAR 0 9
25624: PPUSH
25625: LD_VAR 0 10
25629: PPUSH
25630: CALL_OW 458
25634: NOT
25635: AND
25636: IFFALSE 25678
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25638: LD_ADDR_VAR 0 7
25642: PUSH
25643: LD_VAR 0 7
25647: PPUSH
25648: LD_VAR 0 7
25652: PUSH
25653: LD_INT 1
25655: PLUS
25656: PPUSH
25657: LD_VAR 0 9
25661: PUSH
25662: LD_VAR 0 10
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: CALL_OW 1
25675: ST_TO_ADDR
25676: GO 25692
// i := i - 1 ;
25678: LD_ADDR_VAR 0 5
25682: PUSH
25683: LD_VAR 0 5
25687: PUSH
25688: LD_INT 1
25690: MINUS
25691: ST_TO_ADDR
// end ;
25692: GO 25494
25694: POP
25695: POP
// for i in tmp do
25696: LD_ADDR_VAR 0 5
25700: PUSH
25701: LD_VAR 0 7
25705: PUSH
25706: FOR_IN
25707: IFFALSE 25745
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25709: LD_VAR 0 1
25713: PPUSH
25714: LD_VAR 0 5
25718: PUSH
25719: LD_INT 1
25721: ARRAY
25722: PPUSH
25723: LD_VAR 0 5
25727: PUSH
25728: LD_INT 2
25730: ARRAY
25731: PPUSH
25732: CALL 24679 0 3
25736: NOT
25737: IFFALSE 25743
// exit ;
25739: POP
25740: POP
25741: GO 25747
25743: GO 25706
25745: POP
25746: POP
// end ;
25747: LD_VAR 0 4
25751: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
// if GetClass ( unit ) <> class_sniper then
25763: LD_VAR 0 1
25767: PPUSH
25768: CALL_OW 257
25772: PUSH
25773: LD_INT 5
25775: NONEQUAL
25776: IFFALSE 25780
// exit ;
25778: GO 26250
// dist := 8 ;
25780: LD_ADDR_VAR 0 5
25784: PUSH
25785: LD_INT 8
25787: ST_TO_ADDR
// viewRange := 12 ;
25788: LD_ADDR_VAR 0 8
25792: PUSH
25793: LD_INT 12
25795: ST_TO_ADDR
// side := GetSide ( unit ) ;
25796: LD_ADDR_VAR 0 6
25800: PUSH
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 255
25810: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25811: LD_INT 61
25813: PPUSH
25814: LD_VAR 0 6
25818: PPUSH
25819: CALL_OW 321
25823: PUSH
25824: LD_INT 2
25826: EQUAL
25827: IFFALSE 25837
// viewRange := 16 ;
25829: LD_ADDR_VAR 0 8
25833: PUSH
25834: LD_INT 16
25836: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25837: LD_VAR 0 1
25841: PPUSH
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: CALL_OW 297
25856: PUSH
25857: LD_VAR 0 5
25861: GREATER
25862: IFFALSE 25941
// begin ComMoveXY ( unit , x , y ) ;
25864: LD_VAR 0 1
25868: PPUSH
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 3
25878: PPUSH
25879: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25883: LD_INT 35
25885: PPUSH
25886: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25890: LD_VAR 0 1
25894: PPUSH
25895: LD_VAR 0 2
25899: PPUSH
25900: LD_VAR 0 3
25904: PPUSH
25905: CALL 63969 0 3
25909: NOT
25910: IFFALSE 25914
// exit ;
25912: GO 26250
// until GetDistUnitXY ( unit , x , y ) < dist ;
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_VAR 0 2
25923: PPUSH
25924: LD_VAR 0 3
25928: PPUSH
25929: CALL_OW 297
25933: PUSH
25934: LD_VAR 0 5
25938: LESS
25939: IFFALSE 25883
// end ; ComTurnXY ( unit , x , y ) ;
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_VAR 0 2
25950: PPUSH
25951: LD_VAR 0 3
25955: PPUSH
25956: CALL_OW 118
// repeat if Multiplayer then
25960: LD_OWVAR 4
25964: IFFALSE 25975
// wait ( 35 ) else
25966: LD_INT 35
25968: PPUSH
25969: CALL_OW 67
25973: GO 25982
// wait ( 5 ) ;
25975: LD_INT 5
25977: PPUSH
25978: CALL_OW 67
// _d := GetDir ( unit ) ;
25982: LD_ADDR_VAR 0 11
25986: PUSH
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 254
25996: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25997: LD_ADDR_VAR 0 7
26001: PUSH
26002: LD_VAR 0 1
26006: PPUSH
26007: CALL_OW 250
26011: PPUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 251
26021: PPUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: LD_VAR 0 3
26031: PPUSH
26032: CALL 66605 0 4
26036: ST_TO_ADDR
// until dir = _d ;
26037: LD_VAR 0 7
26041: PUSH
26042: LD_VAR 0 11
26046: EQUAL
26047: IFFALSE 25960
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26049: LD_ADDR_VAR 0 9
26053: PUSH
26054: LD_VAR 0 1
26058: PPUSH
26059: CALL_OW 250
26063: PPUSH
26064: LD_VAR 0 7
26068: PPUSH
26069: LD_VAR 0 5
26073: PPUSH
26074: CALL_OW 272
26078: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26079: LD_ADDR_VAR 0 10
26083: PUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: CALL_OW 251
26093: PPUSH
26094: LD_VAR 0 7
26098: PPUSH
26099: LD_VAR 0 5
26103: PPUSH
26104: CALL_OW 273
26108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26109: LD_VAR 0 9
26113: PPUSH
26114: LD_VAR 0 10
26118: PPUSH
26119: CALL_OW 488
26123: NOT
26124: IFFALSE 26128
// exit ;
26126: GO 26250
// ComAnimCustom ( unit , 1 ) ;
26128: LD_VAR 0 1
26132: PPUSH
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 592
// p := 0 ;
26140: LD_ADDR_VAR 0 12
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26148: LD_VAR 0 9
26152: PPUSH
26153: LD_VAR 0 10
26157: PPUSH
26158: LD_VAR 0 6
26162: PPUSH
26163: LD_VAR 0 8
26167: PPUSH
26168: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26172: LD_INT 35
26174: PPUSH
26175: CALL_OW 67
// p := Inc ( p ) ;
26179: LD_ADDR_VAR 0 12
26183: PUSH
26184: LD_VAR 0 12
26188: PPUSH
26189: CALL 66561 0 1
26193: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26194: LD_VAR 0 12
26198: PUSH
26199: LD_INT 3
26201: EQUAL
26202: IFTRUE 26216
26204: PUSH
26205: LD_VAR 0 1
26209: PPUSH
26210: CALL_OW 302
26214: NOT
26215: OR
26216: IFTRUE 26229
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 301
26228: OR
26229: IFFALSE 26172
// RemoveSeeing ( _x , _y , side ) ;
26231: LD_VAR 0 9
26235: PPUSH
26236: LD_VAR 0 10
26240: PPUSH
26241: LD_VAR 0 6
26245: PPUSH
26246: CALL_OW 331
// end ;
26250: LD_VAR 0 4
26254: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26255: LD_INT 0
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
26266: PPUSH
26267: PPUSH
// if not unit then
26268: LD_VAR 0 1
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26548
// side := GetSide ( unit ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 255
26291: ST_TO_ADDR
// x := GetX ( unit ) ;
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 250
26306: ST_TO_ADDR
// y := GetY ( unit ) ;
26307: LD_ADDR_VAR 0 6
26311: PUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 251
26321: ST_TO_ADDR
// r := 8 ;
26322: LD_ADDR_VAR 0 4
26326: PUSH
26327: LD_INT 8
26329: ST_TO_ADDR
// if x - r < 0 then
26330: LD_VAR 0 5
26334: PUSH
26335: LD_VAR 0 4
26339: MINUS
26340: PUSH
26341: LD_INT 0
26343: LESS
26344: IFFALSE 26356
// min_x := 0 else
26346: LD_ADDR_VAR 0 7
26350: PUSH
26351: LD_INT 0
26353: ST_TO_ADDR
26354: GO 26372
// min_x := x - r ;
26356: LD_ADDR_VAR 0 7
26360: PUSH
26361: LD_VAR 0 5
26365: PUSH
26366: LD_VAR 0 4
26370: MINUS
26371: ST_TO_ADDR
// if y - r < 0 then
26372: LD_VAR 0 6
26376: PUSH
26377: LD_VAR 0 4
26381: MINUS
26382: PUSH
26383: LD_INT 0
26385: LESS
26386: IFFALSE 26398
// min_y := 0 else
26388: LD_ADDR_VAR 0 8
26392: PUSH
26393: LD_INT 0
26395: ST_TO_ADDR
26396: GO 26414
// min_y := y - r ;
26398: LD_ADDR_VAR 0 8
26402: PUSH
26403: LD_VAR 0 6
26407: PUSH
26408: LD_VAR 0 4
26412: MINUS
26413: ST_TO_ADDR
// max_x := x + r ;
26414: LD_ADDR_VAR 0 9
26418: PUSH
26419: LD_VAR 0 5
26423: PUSH
26424: LD_VAR 0 4
26428: PLUS
26429: ST_TO_ADDR
// max_y := y + r ;
26430: LD_ADDR_VAR 0 10
26434: PUSH
26435: LD_VAR 0 6
26439: PUSH
26440: LD_VAR 0 4
26444: PLUS
26445: ST_TO_ADDR
// for _x = min_x to max_x do
26446: LD_ADDR_VAR 0 11
26450: PUSH
26451: DOUBLE
26452: LD_VAR 0 7
26456: DEC
26457: ST_TO_ADDR
26458: LD_VAR 0 9
26462: PUSH
26463: FOR_TO
26464: IFFALSE 26546
// for _y = min_y to max_y do
26466: LD_ADDR_VAR 0 12
26470: PUSH
26471: DOUBLE
26472: LD_VAR 0 8
26476: DEC
26477: ST_TO_ADDR
26478: LD_VAR 0 10
26482: PUSH
26483: FOR_TO
26484: IFFALSE 26542
// begin if not ValidHex ( _x , _y ) then
26486: LD_VAR 0 11
26490: PPUSH
26491: LD_VAR 0 12
26495: PPUSH
26496: CALL_OW 488
26500: NOT
26501: IFFALSE 26505
// continue ;
26503: GO 26483
// if MineAtPos ( _x , _y ) then
26505: LD_VAR 0 11
26509: PPUSH
26510: LD_VAR 0 12
26514: PPUSH
26515: CALL_OW 458
26519: IFFALSE 26540
// ViewMineAtPos ( _x , _y , side ) ;
26521: LD_VAR 0 11
26525: PPUSH
26526: LD_VAR 0 12
26530: PPUSH
26531: LD_VAR 0 3
26535: PPUSH
26536: CALL_OW 457
// end ;
26540: GO 26483
26542: POP
26543: POP
26544: GO 26463
26546: POP
26547: POP
// end ;
26548: LD_VAR 0 2
26552: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
26553: LD_INT 0
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
26559: PPUSH
26560: PPUSH
// if not units then
26561: LD_VAR 0 1
26565: NOT
26566: IFFALSE 26570
// exit ;
26568: GO 27000
// scaners := [ ] ;
26570: LD_ADDR_VAR 0 6
26574: PUSH
26575: EMPTY
26576: ST_TO_ADDR
// for i in units do
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 1
26586: PUSH
26587: FOR_IN
26588: IFFALSE 26745
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26590: LD_VAR 0 3
26594: PPUSH
26595: CALL_OW 264
26599: PUSH
26600: LD_INT 11
26602: NONEQUAL
26603: IFTRUE 26617
26605: PUSH
26606: LD_VAR 0 3
26610: PPUSH
26611: CALL_OW 302
26615: NOT
26616: OR
26617: IFTRUE 26634
26619: PUSH
26620: LD_VAR 0 3
26624: PPUSH
26625: CALL_OW 110
26629: PUSH
26630: LD_INT 502
26632: EQUAL
26633: OR
26634: IFFALSE 26638
// continue ;
26636: GO 26587
// ComStop ( i ) ;
26638: LD_VAR 0 3
26642: PPUSH
26643: CALL_OW 141
// x := GetX ( i ) ;
26647: LD_ADDR_VAR 0 4
26651: PUSH
26652: LD_VAR 0 3
26656: PPUSH
26657: CALL_OW 250
26661: ST_TO_ADDR
// y := GetY ( i ) ;
26662: LD_ADDR_VAR 0 5
26666: PUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 251
26676: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26677: LD_VAR 0 3
26681: PPUSH
26682: CALL_OW 255
26686: PUSH
26687: LD_OWVAR 2
26691: EQUAL
26692: IFFALSE 26711
// PlaySoundXY ( x , y , mineDetector ) ;
26694: LD_VAR 0 4
26698: PPUSH
26699: LD_VAR 0 5
26703: PPUSH
26704: LD_STRING mineDetector
26706: PPUSH
26707: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26711: LD_ADDR_VAR 0 6
26715: PUSH
26716: LD_VAR 0 6
26720: PPUSH
26721: LD_VAR 0 3
26725: PPUSH
26726: CALL 65188 0 2
26730: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26731: LD_VAR 0 3
26735: PPUSH
26736: LD_INT 502
26738: PPUSH
26739: CALL_OW 109
// end ;
26743: GO 26587
26745: POP
26746: POP
// if not scaners then
26747: LD_VAR 0 6
26751: NOT
26752: IFFALSE 26756
// exit ;
26754: GO 27000
// wait ( 3 ) ;
26756: LD_INT 3
26758: PPUSH
26759: CALL_OW 67
// timer := 6 ;
26763: LD_ADDR_VAR 0 7
26767: PUSH
26768: LD_INT 6
26770: ST_TO_ADDR
// repeat for i in scaners do
26771: LD_ADDR_VAR 0 3
26775: PUSH
26776: LD_VAR 0 6
26780: PUSH
26781: FOR_IN
26782: IFFALSE 26898
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
26784: LD_VAR 0 3
26788: PPUSH
26789: CALL_OW 302
26793: NOT
26794: IFTRUE 26807
26796: PUSH
26797: LD_VAR 0 3
26801: PPUSH
26802: CALL_OW 314
26806: OR
26807: IFTRUE 26838
26809: PUSH
26810: LD_VAR 0 3
26814: PPUSH
26815: CALL_OW 263
26819: PUSH
26820: LD_INT 1
26822: EQUAL
26823: IFFALSE 26837
26825: PUSH
26826: LD_VAR 0 3
26830: PPUSH
26831: CALL_OW 311
26835: NOT
26836: AND
26837: OR
26838: IFFALSE 26882
// begin SetUnitDisplayNumber ( i , 0 ) ;
26840: LD_VAR 0 3
26844: PPUSH
26845: LD_INT 0
26847: PPUSH
26848: CALL_OW 505
// SetTag ( i , 0 ) ;
26852: LD_VAR 0 3
26856: PPUSH
26857: LD_INT 0
26859: PPUSH
26860: CALL_OW 109
// scaners := scaners diff i ;
26864: LD_ADDR_VAR 0 6
26868: PUSH
26869: LD_VAR 0 6
26873: PUSH
26874: LD_VAR 0 3
26878: DIFF
26879: ST_TO_ADDR
// continue ;
26880: GO 26781
// end ; SetUnitDisplayNumber ( i , timer ) ;
26882: LD_VAR 0 3
26886: PPUSH
26887: LD_VAR 0 7
26891: PPUSH
26892: CALL_OW 505
// end ;
26896: GO 26781
26898: POP
26899: POP
// if not scaners then
26900: LD_VAR 0 6
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27000
// timer := Dec ( timer ) ;
26909: LD_ADDR_VAR 0 7
26913: PUSH
26914: LD_VAR 0 7
26918: PPUSH
26919: CALL 66583 0 1
26923: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26924: LD_INT 35
26926: PPUSH
26927: CALL_OW 67
// until timer = 0 ;
26931: LD_VAR 0 7
26935: PUSH
26936: LD_INT 0
26938: EQUAL
26939: IFFALSE 26771
// if not scaners then
26941: LD_VAR 0 6
26945: NOT
26946: IFFALSE 26950
// exit ;
26948: GO 27000
// for i in scaners do
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 6
26959: PUSH
26960: FOR_IN
26961: IFFALSE 26998
// begin SetUnitDisplayNumber ( i , 0 ) ;
26963: LD_VAR 0 3
26967: PPUSH
26968: LD_INT 0
26970: PPUSH
26971: CALL_OW 505
// SetTag ( i , 0 ) ;
26975: LD_VAR 0 3
26979: PPUSH
26980: LD_INT 0
26982: PPUSH
26983: CALL_OW 109
// RevealDetectorMine ( i ) ;
26987: LD_VAR 0 3
26991: PPUSH
26992: CALL 26255 0 1
// end ;
26996: GO 26960
26998: POP
26999: POP
// end ;
27000: LD_VAR 0 2
27004: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27005: LD_INT 0
27007: PPUSH
// if p1 = mine_detector_mode then
27008: LD_VAR 0 2
27012: PUSH
27013: LD_INT 103
27015: EQUAL
27016: IFFALSE 27027
// DetectMine ( units ) ;
27018: LD_VAR 0 1
27022: PPUSH
27023: CALL 26553 0 1
// end ; end_of_file end_of_file
27027: LD_VAR 0 7
27031: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27032: LD_INT 0
27034: PPUSH
27035: PPUSH
// if exist_mode then
27036: LD_VAR 0 2
27040: IFFALSE 27086
// begin unit := CreateCharacter ( prefix & ident ) ;
27042: LD_ADDR_VAR 0 5
27046: PUSH
27047: LD_VAR 0 3
27051: PUSH
27052: LD_VAR 0 1
27056: STR
27057: PPUSH
27058: CALL_OW 34
27062: ST_TO_ADDR
// if unit then
27063: LD_VAR 0 5
27067: IFFALSE 27084
// DeleteCharacters ( prefix & ident ) ;
27069: LD_VAR 0 3
27073: PUSH
27074: LD_VAR 0 1
27078: STR
27079: PPUSH
27080: CALL_OW 40
// end else
27084: GO 27101
// unit := NewCharacter ( ident ) ;
27086: LD_ADDR_VAR 0 5
27090: PUSH
27091: LD_VAR 0 1
27095: PPUSH
27096: CALL_OW 25
27100: ST_TO_ADDR
// result := unit ;
27101: LD_ADDR_VAR 0 4
27105: PUSH
27106: LD_VAR 0 5
27110: ST_TO_ADDR
// end ;
27111: LD_VAR 0 4
27115: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27116: LD_INT 0
27118: PPUSH
27119: PPUSH
// if exist_mode then
27120: LD_VAR 0 2
27124: IFFALSE 27149
// unit := CreateCharacter ( prefix & ident ) else
27126: LD_ADDR_VAR 0 5
27130: PUSH
27131: LD_VAR 0 3
27135: PUSH
27136: LD_VAR 0 1
27140: STR
27141: PPUSH
27142: CALL_OW 34
27146: ST_TO_ADDR
27147: GO 27164
// unit := NewCharacter ( ident ) ;
27149: LD_ADDR_VAR 0 5
27153: PUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 25
27163: ST_TO_ADDR
// result := unit ;
27164: LD_ADDR_VAR 0 4
27168: PUSH
27169: LD_VAR 0 5
27173: ST_TO_ADDR
// end ;
27174: LD_VAR 0 4
27178: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
// if not side or not nation then
27183: LD_VAR 0 1
27187: NOT
27188: IFTRUE 27197
27190: PUSH
27191: LD_VAR 0 2
27195: NOT
27196: OR
27197: IFFALSE 27201
// exit ;
27199: GO 27995
// case nation of nation_american :
27201: LD_VAR 0 2
27205: PUSH
27206: LD_INT 1
27208: DOUBLE
27209: EQUAL
27210: IFTRUE 27214
27212: GO 27436
27214: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
27215: LD_ADDR_VAR 0 4
27219: PUSH
27220: LD_INT 35
27222: PUSH
27223: LD_INT 45
27225: PUSH
27226: LD_INT 46
27228: PUSH
27229: LD_INT 47
27231: PUSH
27232: LD_INT 82
27234: PUSH
27235: LD_INT 83
27237: PUSH
27238: LD_INT 84
27240: PUSH
27241: LD_INT 85
27243: PUSH
27244: LD_INT 86
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: LD_INT 6
27255: PUSH
27256: LD_INT 15
27258: PUSH
27259: LD_INT 16
27261: PUSH
27262: LD_INT 7
27264: PUSH
27265: LD_INT 12
27267: PUSH
27268: LD_INT 13
27270: PUSH
27271: LD_INT 10
27273: PUSH
27274: LD_INT 14
27276: PUSH
27277: LD_INT 20
27279: PUSH
27280: LD_INT 21
27282: PUSH
27283: LD_INT 22
27285: PUSH
27286: LD_INT 25
27288: PUSH
27289: LD_INT 32
27291: PUSH
27292: LD_INT 27
27294: PUSH
27295: LD_INT 36
27297: PUSH
27298: LD_INT 69
27300: PUSH
27301: LD_INT 39
27303: PUSH
27304: LD_INT 34
27306: PUSH
27307: LD_INT 40
27309: PUSH
27310: LD_INT 48
27312: PUSH
27313: LD_INT 49
27315: PUSH
27316: LD_INT 50
27318: PUSH
27319: LD_INT 51
27321: PUSH
27322: LD_INT 52
27324: PUSH
27325: LD_INT 53
27327: PUSH
27328: LD_INT 54
27330: PUSH
27331: LD_INT 55
27333: PUSH
27334: LD_INT 56
27336: PUSH
27337: LD_INT 57
27339: PUSH
27340: LD_INT 58
27342: PUSH
27343: LD_INT 59
27345: PUSH
27346: LD_INT 60
27348: PUSH
27349: LD_INT 61
27351: PUSH
27352: LD_INT 62
27354: PUSH
27355: LD_INT 80
27357: PUSH
27358: LD_INT 82
27360: PUSH
27361: LD_INT 83
27363: PUSH
27364: LD_INT 84
27366: PUSH
27367: LD_INT 85
27369: PUSH
27370: LD_INT 86
27372: PUSH
27373: LD_INT 90
27375: PUSH
27376: LD_INT 93
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
27434: GO 27917
27436: LD_INT 2
27438: DOUBLE
27439: EQUAL
27440: IFTRUE 27444
27442: GO 27678
27444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27445: LD_ADDR_VAR 0 4
27449: PUSH
27450: LD_INT 35
27452: PUSH
27453: LD_INT 45
27455: PUSH
27456: LD_INT 46
27458: PUSH
27459: LD_INT 47
27461: PUSH
27462: LD_INT 82
27464: PUSH
27465: LD_INT 83
27467: PUSH
27468: LD_INT 84
27470: PUSH
27471: LD_INT 85
27473: PUSH
27474: LD_INT 87
27476: PUSH
27477: LD_INT 70
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 11
27485: PUSH
27486: LD_INT 3
27488: PUSH
27489: LD_INT 4
27491: PUSH
27492: LD_INT 5
27494: PUSH
27495: LD_INT 6
27497: PUSH
27498: LD_INT 15
27500: PUSH
27501: LD_INT 18
27503: PUSH
27504: LD_INT 7
27506: PUSH
27507: LD_INT 17
27509: PUSH
27510: LD_INT 8
27512: PUSH
27513: LD_INT 20
27515: PUSH
27516: LD_INT 21
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_INT 72
27524: PUSH
27525: LD_INT 26
27527: PUSH
27528: LD_INT 69
27530: PUSH
27531: LD_INT 39
27533: PUSH
27534: LD_INT 40
27536: PUSH
27537: LD_INT 41
27539: PUSH
27540: LD_INT 42
27542: PUSH
27543: LD_INT 43
27545: PUSH
27546: LD_INT 48
27548: PUSH
27549: LD_INT 49
27551: PUSH
27552: LD_INT 50
27554: PUSH
27555: LD_INT 51
27557: PUSH
27558: LD_INT 52
27560: PUSH
27561: LD_INT 53
27563: PUSH
27564: LD_INT 54
27566: PUSH
27567: LD_INT 55
27569: PUSH
27570: LD_INT 56
27572: PUSH
27573: LD_INT 60
27575: PUSH
27576: LD_INT 61
27578: PUSH
27579: LD_INT 62
27581: PUSH
27582: LD_INT 66
27584: PUSH
27585: LD_INT 67
27587: PUSH
27588: LD_INT 68
27590: PUSH
27591: LD_INT 81
27593: PUSH
27594: LD_INT 82
27596: PUSH
27597: LD_INT 83
27599: PUSH
27600: LD_INT 84
27602: PUSH
27603: LD_INT 85
27605: PUSH
27606: LD_INT 87
27608: PUSH
27609: LD_INT 88
27611: PUSH
27612: LD_INT 92
27614: PUSH
27615: LD_INT 94
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: ST_TO_ADDR
27676: GO 27917
27678: LD_INT 3
27680: DOUBLE
27681: EQUAL
27682: IFTRUE 27686
27684: GO 27916
27686: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27687: LD_ADDR_VAR 0 4
27691: PUSH
27692: LD_INT 46
27694: PUSH
27695: LD_INT 47
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 82
27706: PUSH
27707: LD_INT 83
27709: PUSH
27710: LD_INT 84
27712: PUSH
27713: LD_INT 85
27715: PUSH
27716: LD_INT 86
27718: PUSH
27719: LD_INT 11
27721: PUSH
27722: LD_INT 9
27724: PUSH
27725: LD_INT 20
27727: PUSH
27728: LD_INT 19
27730: PUSH
27731: LD_INT 21
27733: PUSH
27734: LD_INT 24
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_INT 25
27742: PUSH
27743: LD_INT 28
27745: PUSH
27746: LD_INT 29
27748: PUSH
27749: LD_INT 30
27751: PUSH
27752: LD_INT 31
27754: PUSH
27755: LD_INT 37
27757: PUSH
27758: LD_INT 38
27760: PUSH
27761: LD_INT 32
27763: PUSH
27764: LD_INT 27
27766: PUSH
27767: LD_INT 33
27769: PUSH
27770: LD_INT 69
27772: PUSH
27773: LD_INT 39
27775: PUSH
27776: LD_INT 34
27778: PUSH
27779: LD_INT 40
27781: PUSH
27782: LD_INT 71
27784: PUSH
27785: LD_INT 23
27787: PUSH
27788: LD_INT 44
27790: PUSH
27791: LD_INT 48
27793: PUSH
27794: LD_INT 49
27796: PUSH
27797: LD_INT 50
27799: PUSH
27800: LD_INT 51
27802: PUSH
27803: LD_INT 52
27805: PUSH
27806: LD_INT 53
27808: PUSH
27809: LD_INT 54
27811: PUSH
27812: LD_INT 55
27814: PUSH
27815: LD_INT 56
27817: PUSH
27818: LD_INT 57
27820: PUSH
27821: LD_INT 58
27823: PUSH
27824: LD_INT 59
27826: PUSH
27827: LD_INT 63
27829: PUSH
27830: LD_INT 64
27832: PUSH
27833: LD_INT 65
27835: PUSH
27836: LD_INT 82
27838: PUSH
27839: LD_INT 83
27841: PUSH
27842: LD_INT 84
27844: PUSH
27845: LD_INT 85
27847: PUSH
27848: LD_INT 86
27850: PUSH
27851: LD_INT 89
27853: PUSH
27854: LD_INT 91
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: ST_TO_ADDR
27914: GO 27917
27916: POP
// if state > - 1 and state < 3 then
27917: LD_VAR 0 3
27921: PUSH
27922: LD_INT 1
27924: NEG
27925: GREATER
27926: IFFALSE 27938
27928: PUSH
27929: LD_VAR 0 3
27933: PUSH
27934: LD_INT 3
27936: LESS
27937: AND
27938: IFFALSE 27995
// for i in result do
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 4
27949: PUSH
27950: FOR_IN
27951: IFFALSE 27993
// if GetTech ( i , side ) <> state then
27953: LD_VAR 0 5
27957: PPUSH
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 321
27967: PUSH
27968: LD_VAR 0 3
27972: NONEQUAL
27973: IFFALSE 27991
// result := result diff i ;
27975: LD_ADDR_VAR 0 4
27979: PUSH
27980: LD_VAR 0 4
27984: PUSH
27985: LD_VAR 0 5
27989: DIFF
27990: ST_TO_ADDR
27991: GO 27950
27993: POP
27994: POP
// end ;
27995: LD_VAR 0 4
27999: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28000: LD_INT 0
28002: PPUSH
28003: PPUSH
28004: PPUSH
// result := true ;
28005: LD_ADDR_VAR 0 3
28009: PUSH
28010: LD_INT 1
28012: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28013: LD_ADDR_VAR 0 5
28017: PUSH
28018: LD_VAR 0 2
28022: PPUSH
28023: CALL_OW 480
28027: ST_TO_ADDR
// if not tmp then
28028: LD_VAR 0 5
28032: NOT
28033: IFFALSE 28037
// exit ;
28035: GO 28086
// for i in tmp do
28037: LD_ADDR_VAR 0 4
28041: PUSH
28042: LD_VAR 0 5
28046: PUSH
28047: FOR_IN
28048: IFFALSE 28084
// if GetTech ( i , side ) <> state_researched then
28050: LD_VAR 0 4
28054: PPUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 321
28064: PUSH
28065: LD_INT 2
28067: NONEQUAL
28068: IFFALSE 28082
// begin result := false ;
28070: LD_ADDR_VAR 0 3
28074: PUSH
28075: LD_INT 0
28077: ST_TO_ADDR
// exit ;
28078: POP
28079: POP
28080: GO 28086
// end ;
28082: GO 28047
28084: POP
28085: POP
// end ;
28086: LD_VAR 0 3
28090: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28091: LD_INT 0
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28106: LD_VAR 0 1
28110: NOT
28111: IFTRUE 28128
28113: PUSH
28114: LD_VAR 0 1
28118: PPUSH
28119: CALL_OW 257
28123: PUSH
28124: LD_INT 9
28126: NONEQUAL
28127: OR
28128: IFFALSE 28132
// exit ;
28130: GO 28711
// side := GetSide ( unit ) ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_VAR 0 1
28141: PPUSH
28142: CALL_OW 255
28146: ST_TO_ADDR
// tech_space := tech_spacanom ;
28147: LD_ADDR_VAR 0 12
28151: PUSH
28152: LD_INT 29
28154: ST_TO_ADDR
// tech_time := tech_taurad ;
28155: LD_ADDR_VAR 0 13
28159: PUSH
28160: LD_INT 28
28162: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28163: LD_ADDR_VAR 0 11
28167: PUSH
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL_OW 310
28177: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28178: LD_VAR 0 11
28182: PPUSH
28183: CALL_OW 247
28187: PUSH
28188: LD_INT 2
28190: EQUAL
28191: IFFALSE 28195
// exit ;
28193: GO 28711
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28195: LD_ADDR_VAR 0 8
28199: PUSH
28200: LD_INT 81
28202: PUSH
28203: LD_VAR 0 9
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: LD_INT 21
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PPUSH
28233: CALL_OW 69
28237: ST_TO_ADDR
// if not tmp then
28238: LD_VAR 0 8
28242: NOT
28243: IFFALSE 28247
// exit ;
28245: GO 28711
// if in_unit then
28247: LD_VAR 0 11
28251: IFFALSE 28275
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28253: LD_ADDR_VAR 0 10
28257: PUSH
28258: LD_VAR 0 8
28262: PPUSH
28263: LD_VAR 0 11
28267: PPUSH
28268: CALL_OW 74
28272: ST_TO_ADDR
28273: GO 28295
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28275: LD_ADDR_VAR 0 10
28279: PUSH
28280: LD_VAR 0 8
28284: PPUSH
28285: LD_VAR 0 1
28289: PPUSH
28290: CALL_OW 74
28294: ST_TO_ADDR
// if not enemy then
28295: LD_VAR 0 10
28299: NOT
28300: IFFALSE 28304
// exit ;
28302: GO 28711
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28304: LD_VAR 0 11
28308: IFFALSE 28330
28310: PUSH
28311: LD_VAR 0 11
28315: PPUSH
28316: LD_VAR 0 10
28320: PPUSH
28321: CALL_OW 296
28325: PUSH
28326: LD_INT 13
28328: GREATER
28329: AND
28330: IFTRUE 28352
28332: PUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_VAR 0 10
28342: PPUSH
28343: CALL_OW 296
28347: PUSH
28348: LD_INT 12
28350: GREATER
28351: OR
28352: IFFALSE 28356
// exit ;
28354: GO 28711
// missile := [ 1 ] ;
28356: LD_ADDR_VAR 0 14
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: EMPTY
28365: LIST
28366: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28367: LD_VAR 0 9
28371: PPUSH
28372: LD_VAR 0 12
28376: PPUSH
28377: CALL_OW 325
28381: IFFALSE 28410
// missile := Replace ( missile , missile + 1 , 2 ) ;
28383: LD_ADDR_VAR 0 14
28387: PUSH
28388: LD_VAR 0 14
28392: PPUSH
28393: LD_VAR 0 14
28397: PUSH
28398: LD_INT 1
28400: PLUS
28401: PPUSH
28402: LD_INT 2
28404: PPUSH
28405: CALL_OW 1
28409: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28410: LD_VAR 0 9
28414: PPUSH
28415: LD_VAR 0 13
28419: PPUSH
28420: CALL_OW 325
28424: IFFALSE 28448
28426: PUSH
28427: LD_VAR 0 10
28431: PPUSH
28432: CALL_OW 255
28436: PPUSH
28437: LD_VAR 0 13
28441: PPUSH
28442: CALL_OW 325
28446: NOT
28447: AND
28448: IFFALSE 28477
// missile := Replace ( missile , missile + 1 , 3 ) ;
28450: LD_ADDR_VAR 0 14
28454: PUSH
28455: LD_VAR 0 14
28459: PPUSH
28460: LD_VAR 0 14
28464: PUSH
28465: LD_INT 1
28467: PLUS
28468: PPUSH
28469: LD_INT 3
28471: PPUSH
28472: CALL_OW 1
28476: ST_TO_ADDR
// if missile < 2 then
28477: LD_VAR 0 14
28481: PUSH
28482: LD_INT 2
28484: LESS
28485: IFFALSE 28489
// exit ;
28487: GO 28711
// x := GetX ( enemy ) ;
28489: LD_ADDR_VAR 0 4
28493: PUSH
28494: LD_VAR 0 10
28498: PPUSH
28499: CALL_OW 250
28503: ST_TO_ADDR
// y := GetY ( enemy ) ;
28504: LD_ADDR_VAR 0 5
28508: PUSH
28509: LD_VAR 0 10
28513: PPUSH
28514: CALL_OW 251
28518: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28519: LD_ADDR_VAR 0 6
28523: PUSH
28524: LD_VAR 0 4
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PPUSH
28533: LD_INT 1
28535: PPUSH
28536: CALL_OW 12
28540: PLUS
28541: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28542: LD_ADDR_VAR 0 7
28546: PUSH
28547: LD_VAR 0 5
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PPUSH
28556: LD_INT 1
28558: PPUSH
28559: CALL_OW 12
28563: PLUS
28564: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28565: LD_VAR 0 6
28569: PPUSH
28570: LD_VAR 0 7
28574: PPUSH
28575: CALL_OW 488
28579: NOT
28580: IFFALSE 28602
// begin _x := x ;
28582: LD_ADDR_VAR 0 6
28586: PUSH
28587: LD_VAR 0 4
28591: ST_TO_ADDR
// _y := y ;
28592: LD_ADDR_VAR 0 7
28596: PUSH
28597: LD_VAR 0 5
28601: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_INT 1
28609: PPUSH
28610: LD_VAR 0 14
28614: PPUSH
28615: CALL_OW 12
28619: ST_TO_ADDR
// case i of 1 :
28620: LD_VAR 0 3
28624: PUSH
28625: LD_INT 1
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 28650
28633: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28634: LD_VAR 0 1
28638: PPUSH
28639: LD_VAR 0 10
28643: PPUSH
28644: CALL_OW 115
28648: GO 28711
28650: LD_INT 2
28652: DOUBLE
28653: EQUAL
28654: IFTRUE 28658
28656: GO 28680
28658: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28659: LD_VAR 0 1
28663: PPUSH
28664: LD_VAR 0 6
28668: PPUSH
28669: LD_VAR 0 7
28673: PPUSH
28674: CALL_OW 153
28678: GO 28711
28680: LD_INT 3
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28710
28688: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28689: LD_VAR 0 1
28693: PPUSH
28694: LD_VAR 0 6
28698: PPUSH
28699: LD_VAR 0 7
28703: PPUSH
28704: CALL_OW 154
28708: GO 28711
28710: POP
// end ;
28711: LD_VAR 0 2
28715: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28716: LD_INT 0
28718: PPUSH
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
// if not unit or not building then
28724: LD_VAR 0 1
28728: NOT
28729: IFTRUE 28738
28731: PUSH
28732: LD_VAR 0 2
28736: NOT
28737: OR
28738: IFFALSE 28742
// exit ;
28740: GO 28900
// x := GetX ( building ) ;
28742: LD_ADDR_VAR 0 5
28746: PUSH
28747: LD_VAR 0 2
28751: PPUSH
28752: CALL_OW 250
28756: ST_TO_ADDR
// y := GetY ( building ) ;
28757: LD_ADDR_VAR 0 6
28761: PUSH
28762: LD_VAR 0 2
28766: PPUSH
28767: CALL_OW 251
28771: ST_TO_ADDR
// for i := 0 to 5 do
28772: LD_ADDR_VAR 0 4
28776: PUSH
28777: DOUBLE
28778: LD_INT 0
28780: DEC
28781: ST_TO_ADDR
28782: LD_INT 5
28784: PUSH
28785: FOR_TO
28786: IFFALSE 28898
// begin _x := ShiftX ( x , i , 3 ) ;
28788: LD_ADDR_VAR 0 7
28792: PUSH
28793: LD_VAR 0 5
28797: PPUSH
28798: LD_VAR 0 4
28802: PPUSH
28803: LD_INT 3
28805: PPUSH
28806: CALL_OW 272
28810: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28811: LD_ADDR_VAR 0 8
28815: PUSH
28816: LD_VAR 0 6
28820: PPUSH
28821: LD_VAR 0 4
28825: PPUSH
28826: LD_INT 3
28828: PPUSH
28829: CALL_OW 273
28833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28834: LD_VAR 0 7
28838: PPUSH
28839: LD_VAR 0 8
28843: PPUSH
28844: CALL_OW 488
28848: NOT
28849: IFFALSE 28853
// continue ;
28851: GO 28785
// if HexInfo ( _x , _y ) = 0 then
28853: LD_VAR 0 7
28857: PPUSH
28858: LD_VAR 0 8
28862: PPUSH
28863: CALL_OW 428
28867: PUSH
28868: LD_INT 0
28870: EQUAL
28871: IFFALSE 28896
// begin ComMoveXY ( unit , _x , _y ) ;
28873: LD_VAR 0 1
28877: PPUSH
28878: LD_VAR 0 7
28882: PPUSH
28883: LD_VAR 0 8
28887: PPUSH
28888: CALL_OW 111
// exit ;
28892: POP
28893: POP
28894: GO 28900
// end ; end ;
28896: GO 28785
28898: POP
28899: POP
// end ;
28900: LD_VAR 0 3
28904: RET
// export function ScanBase ( side , base_area ) ; begin
28905: LD_INT 0
28907: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_VAR 0 2
28917: PPUSH
28918: LD_INT 81
28920: PUSH
28921: LD_VAR 0 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PPUSH
28930: CALL_OW 70
28934: ST_TO_ADDR
// end ;
28935: LD_VAR 0 3
28939: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28940: LD_INT 0
28942: PPUSH
28943: PPUSH
28944: PPUSH
28945: PPUSH
// result := false ;
28946: LD_ADDR_VAR 0 2
28950: PUSH
28951: LD_INT 0
28953: ST_TO_ADDR
// side := GetSide ( unit ) ;
28954: LD_ADDR_VAR 0 3
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 255
28968: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28969: LD_ADDR_VAR 0 4
28973: PUSH
28974: LD_VAR 0 1
28978: PPUSH
28979: CALL_OW 248
28983: ST_TO_ADDR
// case nat of 1 :
28984: LD_VAR 0 4
28988: PUSH
28989: LD_INT 1
28991: DOUBLE
28992: EQUAL
28993: IFTRUE 28997
28995: GO 29008
28997: POP
// tech := tech_lassight ; 2 :
28998: LD_ADDR_VAR 0 5
29002: PUSH
29003: LD_INT 12
29005: ST_TO_ADDR
29006: GO 29047
29008: LD_INT 2
29010: DOUBLE
29011: EQUAL
29012: IFTRUE 29016
29014: GO 29027
29016: POP
// tech := tech_mortar ; 3 :
29017: LD_ADDR_VAR 0 5
29021: PUSH
29022: LD_INT 41
29024: ST_TO_ADDR
29025: GO 29047
29027: LD_INT 3
29029: DOUBLE
29030: EQUAL
29031: IFTRUE 29035
29033: GO 29046
29035: POP
// tech := tech_bazooka ; end ;
29036: LD_ADDR_VAR 0 5
29040: PUSH
29041: LD_INT 44
29043: ST_TO_ADDR
29044: GO 29047
29046: POP
// if Researched ( side , tech ) then
29047: LD_VAR 0 3
29051: PPUSH
29052: LD_VAR 0 5
29056: PPUSH
29057: CALL_OW 325
29061: IFFALSE 29088
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29063: LD_ADDR_VAR 0 2
29067: PUSH
29068: LD_INT 5
29070: PUSH
29071: LD_INT 8
29073: PUSH
29074: LD_INT 9
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: PUSH
29082: LD_VAR 0 4
29086: ARRAY
29087: ST_TO_ADDR
// end ;
29088: LD_VAR 0 2
29092: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29093: LD_INT 0
29095: PPUSH
29096: PPUSH
29097: PPUSH
// if not mines then
29098: LD_VAR 0 2
29102: NOT
29103: IFFALSE 29107
// exit ;
29105: GO 29251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29107: LD_ADDR_VAR 0 5
29111: PUSH
29112: LD_INT 81
29114: PUSH
29115: LD_VAR 0 1
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 21
29129: PUSH
29130: LD_INT 3
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// for i in mines do
29150: LD_ADDR_VAR 0 4
29154: PUSH
29155: LD_VAR 0 2
29159: PUSH
29160: FOR_IN
29161: IFFALSE 29249
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29163: LD_VAR 0 4
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PPUSH
29172: LD_VAR 0 4
29176: PUSH
29177: LD_INT 2
29179: ARRAY
29180: PPUSH
29181: CALL_OW 458
29185: NOT
29186: IFFALSE 29190
// continue ;
29188: GO 29160
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29190: LD_VAR 0 4
29194: PUSH
29195: LD_INT 1
29197: ARRAY
29198: PPUSH
29199: LD_VAR 0 4
29203: PUSH
29204: LD_INT 2
29206: ARRAY
29207: PPUSH
29208: CALL_OW 428
29212: PUSH
29213: LD_VAR 0 5
29217: IN
29218: IFFALSE 29247
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29220: LD_VAR 0 4
29224: PUSH
29225: LD_INT 1
29227: ARRAY
29228: PPUSH
29229: LD_VAR 0 4
29233: PUSH
29234: LD_INT 2
29236: ARRAY
29237: PPUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 456
// end ;
29247: GO 29160
29249: POP
29250: POP
// end ;
29251: LD_VAR 0 3
29255: RET
// export function Count ( array ) ; begin
29256: LD_INT 0
29258: PPUSH
// result := array + 0 ;
29259: LD_ADDR_VAR 0 2
29263: PUSH
29264: LD_VAR 0 1
29268: PUSH
29269: LD_INT 0
29271: PLUS
29272: ST_TO_ADDR
// end ;
29273: LD_VAR 0 2
29277: RET
// export function IsEmpty ( building ) ; begin
29278: LD_INT 0
29280: PPUSH
// if not building then
29281: LD_VAR 0 1
29285: NOT
29286: IFFALSE 29290
// exit ;
29288: GO 29333
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29290: LD_ADDR_VAR 0 2
29294: PUSH
29295: LD_VAR 0 1
29299: PUSH
29300: LD_INT 22
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 255
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 58
29319: PUSH
29320: EMPTY
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PPUSH
29327: CALL_OW 69
29331: IN
29332: ST_TO_ADDR
// end ;
29333: LD_VAR 0 2
29337: RET
// export function IsNotFull ( building ) ; var places ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
// if not building then
29342: LD_VAR 0 1
29346: NOT
29347: IFFALSE 29351
// exit ;
29349: GO 29379
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29351: LD_ADDR_VAR 0 2
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 62
29366: PUSH
29367: EMPTY
29368: LIST
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PPUSH
29374: CALL_OW 72
29378: ST_TO_ADDR
// end ;
29379: LD_VAR 0 2
29383: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29384: LD_INT 0
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
// tmp := [ ] ;
29390: LD_ADDR_VAR 0 3
29394: PUSH
29395: EMPTY
29396: ST_TO_ADDR
// list := [ ] ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: EMPTY
29403: ST_TO_ADDR
// for i = 16 to 25 do
29404: LD_ADDR_VAR 0 4
29408: PUSH
29409: DOUBLE
29410: LD_INT 16
29412: DEC
29413: ST_TO_ADDR
29414: LD_INT 25
29416: PUSH
29417: FOR_TO
29418: IFFALSE 29491
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_VAR 0 3
29429: PUSH
29430: LD_INT 22
29432: PUSH
29433: LD_VAR 0 1
29437: PPUSH
29438: CALL_OW 255
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 91
29449: PUSH
29450: LD_VAR 0 1
29454: PUSH
29455: LD_INT 6
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 30
29465: PUSH
29466: LD_VAR 0 4
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: PPUSH
29483: CALL_OW 69
29487: ADD
29488: ST_TO_ADDR
29489: GO 29417
29491: POP
29492: POP
// for i = 1 to tmp do
29493: LD_ADDR_VAR 0 4
29497: PUSH
29498: DOUBLE
29499: LD_INT 1
29501: DEC
29502: ST_TO_ADDR
29503: LD_VAR 0 3
29507: PUSH
29508: FOR_TO
29509: IFFALSE 29597
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29511: LD_ADDR_VAR 0 5
29515: PUSH
29516: LD_VAR 0 5
29520: PUSH
29521: LD_VAR 0 3
29525: PUSH
29526: LD_VAR 0 4
29530: ARRAY
29531: PPUSH
29532: CALL_OW 266
29536: PUSH
29537: LD_VAR 0 3
29541: PUSH
29542: LD_VAR 0 4
29546: ARRAY
29547: PPUSH
29548: CALL_OW 250
29552: PUSH
29553: LD_VAR 0 3
29557: PUSH
29558: LD_VAR 0 4
29562: ARRAY
29563: PPUSH
29564: CALL_OW 251
29568: PUSH
29569: LD_VAR 0 3
29573: PUSH
29574: LD_VAR 0 4
29578: ARRAY
29579: PPUSH
29580: CALL_OW 254
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: ADD
29594: ST_TO_ADDR
29595: GO 29508
29597: POP
29598: POP
// result := list ;
29599: LD_ADDR_VAR 0 2
29603: PUSH
29604: LD_VAR 0 5
29608: ST_TO_ADDR
// end ;
29609: LD_VAR 0 2
29613: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29614: LD_INT 0
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
// if not factory then
29623: LD_VAR 0 1
29627: NOT
29628: IFFALSE 29632
// exit ;
29630: GO 30235
// if control = control_apeman then
29632: LD_VAR 0 4
29636: PUSH
29637: LD_INT 5
29639: EQUAL
29640: IFFALSE 29749
// begin tmp := UnitsInside ( factory ) ;
29642: LD_ADDR_VAR 0 8
29646: PUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 313
29656: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29657: LD_VAR 0 8
29661: PPUSH
29662: LD_INT 25
29664: PUSH
29665: LD_INT 12
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PPUSH
29672: CALL_OW 72
29676: NOT
29677: IFFALSE 29687
// control := control_manual ;
29679: LD_ADDR_VAR 0 4
29683: PUSH
29684: LD_INT 1
29686: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29687: LD_ADDR_VAR 0 8
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL 29384 0 1
29701: ST_TO_ADDR
// if tmp then
29702: LD_VAR 0 8
29706: IFFALSE 29749
// begin for i in tmp do
29708: LD_ADDR_VAR 0 7
29712: PUSH
29713: LD_VAR 0 8
29717: PUSH
29718: FOR_IN
29719: IFFALSE 29747
// if i [ 1 ] = b_ext_radio then
29721: LD_VAR 0 7
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: PUSH
29730: LD_INT 22
29732: EQUAL
29733: IFFALSE 29745
// begin control := control_remote ;
29735: LD_ADDR_VAR 0 4
29739: PUSH
29740: LD_INT 2
29742: ST_TO_ADDR
// break ;
29743: GO 29747
// end ;
29745: GO 29718
29747: POP
29748: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29749: LD_VAR 0 1
29753: PPUSH
29754: LD_VAR 0 2
29758: PPUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: LD_VAR 0 5
29773: PPUSH
29774: CALL_OW 448
29778: IFFALSE 29813
// begin result := [ chassis , engine , control , weapon ] ;
29780: LD_ADDR_VAR 0 6
29784: PUSH
29785: LD_VAR 0 2
29789: PUSH
29790: LD_VAR 0 3
29794: PUSH
29795: LD_VAR 0 4
29799: PUSH
29800: LD_VAR 0 5
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: ST_TO_ADDR
// exit ;
29811: GO 30235
// end ; _chassis := AvailableChassisList ( factory ) ;
29813: LD_ADDR_VAR 0 9
29817: PUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: CALL_OW 475
29827: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29828: LD_ADDR_VAR 0 11
29832: PUSH
29833: LD_VAR 0 1
29837: PPUSH
29838: CALL_OW 476
29842: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29843: LD_ADDR_VAR 0 12
29847: PUSH
29848: LD_VAR 0 1
29852: PPUSH
29853: CALL_OW 477
29857: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29858: LD_ADDR_VAR 0 10
29862: PUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 478
29872: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29873: LD_VAR 0 9
29877: NOT
29878: IFTRUE 29887
29880: PUSH
29881: LD_VAR 0 11
29885: NOT
29886: OR
29887: IFTRUE 29896
29889: PUSH
29890: LD_VAR 0 12
29894: NOT
29895: OR
29896: IFTRUE 29905
29898: PUSH
29899: LD_VAR 0 10
29903: NOT
29904: OR
29905: IFFALSE 29940
// begin result := [ chassis , engine , control , weapon ] ;
29907: LD_ADDR_VAR 0 6
29911: PUSH
29912: LD_VAR 0 2
29916: PUSH
29917: LD_VAR 0 3
29921: PUSH
29922: LD_VAR 0 4
29926: PUSH
29927: LD_VAR 0 5
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// exit ;
29938: GO 30235
// end ; if not chassis in _chassis then
29940: LD_VAR 0 2
29944: PUSH
29945: LD_VAR 0 9
29949: IN
29950: NOT
29951: IFFALSE 29977
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29953: LD_ADDR_VAR 0 2
29957: PUSH
29958: LD_VAR 0 9
29962: PUSH
29963: LD_INT 1
29965: PPUSH
29966: LD_VAR 0 9
29970: PPUSH
29971: CALL_OW 12
29975: ARRAY
29976: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29977: LD_VAR 0 2
29981: PPUSH
29982: LD_VAR 0 3
29986: PPUSH
29987: CALL 30240 0 2
29991: NOT
29992: IFFALSE 30053
// repeat engine := _engine [ 1 ] ;
29994: LD_ADDR_VAR 0 3
29998: PUSH
29999: LD_VAR 0 11
30003: PUSH
30004: LD_INT 1
30006: ARRAY
30007: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30008: LD_ADDR_VAR 0 11
30012: PUSH
30013: LD_VAR 0 11
30017: PPUSH
30018: LD_INT 1
30020: PPUSH
30021: CALL_OW 3
30025: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30026: LD_VAR 0 2
30030: PPUSH
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL 30240 0 2
30040: IFTRUE 30051
30042: PUSH
30043: LD_VAR 0 11
30047: PUSH
30048: EMPTY
30049: EQUAL
30050: OR
30051: IFFALSE 29994
// if not control in _control then
30053: LD_VAR 0 4
30057: PUSH
30058: LD_VAR 0 12
30062: IN
30063: NOT
30064: IFFALSE 30090
// control := _control [ rand ( 1 , _control ) ] ;
30066: LD_ADDR_VAR 0 4
30070: PUSH
30071: LD_VAR 0 12
30075: PUSH
30076: LD_INT 1
30078: PPUSH
30079: LD_VAR 0 12
30083: PPUSH
30084: CALL_OW 12
30088: ARRAY
30089: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30090: LD_VAR 0 2
30094: PPUSH
30095: LD_VAR 0 5
30099: PPUSH
30100: CALL 30462 0 2
30104: NOT
30105: IFFALSE 30166
// repeat weapon := _weapon [ 1 ] ;
30107: LD_ADDR_VAR 0 5
30111: PUSH
30112: LD_VAR 0 10
30116: PUSH
30117: LD_INT 1
30119: ARRAY
30120: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30121: LD_ADDR_VAR 0 10
30125: PUSH
30126: LD_VAR 0 10
30130: PPUSH
30131: LD_INT 1
30133: PPUSH
30134: CALL_OW 3
30138: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30139: LD_VAR 0 2
30143: PPUSH
30144: LD_VAR 0 5
30148: PPUSH
30149: CALL 30462 0 2
30153: IFTRUE 30164
30155: PUSH
30156: LD_VAR 0 10
30160: PUSH
30161: EMPTY
30162: EQUAL
30163: OR
30164: IFFALSE 30107
// result := [ ] ;
30166: LD_ADDR_VAR 0 6
30170: PUSH
30171: EMPTY
30172: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30173: LD_VAR 0 1
30177: PPUSH
30178: LD_VAR 0 2
30182: PPUSH
30183: LD_VAR 0 3
30187: PPUSH
30188: LD_VAR 0 4
30192: PPUSH
30193: LD_VAR 0 5
30197: PPUSH
30198: CALL_OW 448
30202: IFFALSE 30235
// result := [ chassis , engine , control , weapon ] ;
30204: LD_ADDR_VAR 0 6
30208: PUSH
30209: LD_VAR 0 2
30213: PUSH
30214: LD_VAR 0 3
30218: PUSH
30219: LD_VAR 0 4
30223: PUSH
30224: LD_VAR 0 5
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// end ;
30235: LD_VAR 0 6
30239: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30240: LD_INT 0
30242: PPUSH
// if not chassis or not engine then
30243: LD_VAR 0 1
30247: NOT
30248: IFTRUE 30257
30250: PUSH
30251: LD_VAR 0 2
30255: NOT
30256: OR
30257: IFFALSE 30261
// exit ;
30259: GO 30457
// case engine of engine_solar :
30261: LD_VAR 0 2
30265: PUSH
30266: LD_INT 2
30268: DOUBLE
30269: EQUAL
30270: IFTRUE 30274
30272: GO 30312
30274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30275: LD_ADDR_VAR 0 3
30279: PUSH
30280: LD_INT 11
30282: PUSH
30283: LD_INT 12
30285: PUSH
30286: LD_INT 13
30288: PUSH
30289: LD_INT 14
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30441
30312: LD_INT 1
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30320
30318: GO 30382
30320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30321: LD_ADDR_VAR 0 3
30325: PUSH
30326: LD_INT 11
30328: PUSH
30329: LD_INT 12
30331: PUSH
30332: LD_INT 13
30334: PUSH
30335: LD_INT 14
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: LD_INT 3
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: LD_INT 5
30352: PUSH
30353: LD_INT 21
30355: PUSH
30356: LD_INT 23
30358: PUSH
30359: LD_INT 22
30361: PUSH
30362: LD_INT 24
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
30380: GO 30441
30382: LD_INT 3
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30440
30390: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: LD_INT 13
30398: PUSH
30399: LD_INT 14
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: LD_INT 4
30410: PUSH
30411: LD_INT 5
30413: PUSH
30414: LD_INT 21
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_INT 23
30422: PUSH
30423: LD_INT 24
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
30438: GO 30441
30440: POP
// result := ( chassis in result ) ;
30441: LD_ADDR_VAR 0 3
30445: PUSH
30446: LD_VAR 0 1
30450: PUSH
30451: LD_VAR 0 3
30455: IN
30456: ST_TO_ADDR
// end ;
30457: LD_VAR 0 3
30461: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30462: LD_INT 0
30464: PPUSH
// if not chassis or not weapon then
30465: LD_VAR 0 1
30469: NOT
30470: IFTRUE 30479
30472: PUSH
30473: LD_VAR 0 2
30477: NOT
30478: OR
30479: IFFALSE 30483
// exit ;
30481: GO 31543
// case weapon of us_machine_gun :
30483: LD_VAR 0 2
30487: PUSH
30488: LD_INT 2
30490: DOUBLE
30491: EQUAL
30492: IFTRUE 30496
30494: GO 30526
30496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30497: LD_ADDR_VAR 0 3
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 4
30513: PUSH
30514: LD_INT 5
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
30524: GO 31527
30526: LD_INT 3
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30564
30534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: ST_TO_ADDR
30562: GO 31527
30564: LD_INT 11
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30572
30570: GO 30602
30572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: LD_INT 2
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
30600: GO 31527
30602: LD_INT 4
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30636
30610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: LD_INT 4
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
30634: GO 31527
30636: LD_INT 5
30638: DOUBLE
30639: EQUAL
30640: IFTRUE 30644
30642: GO 30670
30644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30645: LD_ADDR_VAR 0 3
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
30668: GO 31527
30670: LD_INT 9
30672: DOUBLE
30673: EQUAL
30674: IFTRUE 30678
30676: GO 30704
30678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: ST_TO_ADDR
30702: GO 31527
30704: LD_INT 7
30706: DOUBLE
30707: EQUAL
30708: IFTRUE 30712
30710: GO 30738
30712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30713: LD_ADDR_VAR 0 3
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
30736: GO 31527
30738: LD_INT 12
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30772
30746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30747: LD_ADDR_VAR 0 3
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: LD_INT 4
30760: PUSH
30761: LD_INT 5
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
30770: GO 31527
30772: LD_INT 13
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30806
30780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30781: LD_ADDR_VAR 0 3
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: LD_INT 4
30794: PUSH
30795: LD_INT 5
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
30804: GO 31527
30806: LD_INT 14
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30832
30814: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30815: LD_ADDR_VAR 0 3
30819: PUSH
30820: LD_INT 4
30822: PUSH
30823: LD_INT 5
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: ST_TO_ADDR
30830: GO 31527
30832: LD_INT 6
30834: DOUBLE
30835: EQUAL
30836: IFTRUE 30840
30838: GO 30858
30840: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30841: LD_ADDR_VAR 0 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: LD_INT 5
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: ST_TO_ADDR
30856: GO 31527
30858: LD_INT 10
30860: DOUBLE
30861: EQUAL
30862: IFTRUE 30866
30864: GO 30884
30866: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30867: LD_ADDR_VAR 0 3
30871: PUSH
30872: LD_INT 4
30874: PUSH
30875: LD_INT 5
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: ST_TO_ADDR
30882: GO 31527
30884: LD_INT 22
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30918
30892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30893: LD_ADDR_VAR 0 3
30897: PUSH
30898: LD_INT 11
30900: PUSH
30901: LD_INT 12
30903: PUSH
30904: LD_INT 13
30906: PUSH
30907: LD_INT 14
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: ST_TO_ADDR
30916: GO 31527
30918: LD_INT 23
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30952
30926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 11
30934: PUSH
30935: LD_INT 12
30937: PUSH
30938: LD_INT 13
30940: PUSH
30941: LD_INT 14
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
30950: GO 31527
30952: LD_INT 24
30954: DOUBLE
30955: EQUAL
30956: IFTRUE 30960
30958: GO 30986
30960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 11
30968: PUSH
30969: LD_INT 12
30971: PUSH
30972: LD_INT 13
30974: PUSH
30975: LD_INT 14
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: ST_TO_ADDR
30984: GO 31527
30986: LD_INT 30
30988: DOUBLE
30989: EQUAL
30990: IFTRUE 30994
30992: GO 31020
30994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30995: LD_ADDR_VAR 0 3
30999: PUSH
31000: LD_INT 11
31002: PUSH
31003: LD_INT 12
31005: PUSH
31006: LD_INT 13
31008: PUSH
31009: LD_INT 14
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
31018: GO 31527
31020: LD_INT 25
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31046
31028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_INT 13
31036: PUSH
31037: LD_INT 14
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: ST_TO_ADDR
31044: GO 31527
31046: LD_INT 27
31048: DOUBLE
31049: EQUAL
31050: IFTRUE 31054
31052: GO 31072
31054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31055: LD_ADDR_VAR 0 3
31059: PUSH
31060: LD_INT 13
31062: PUSH
31063: LD_INT 14
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: ST_TO_ADDR
31070: GO 31527
31072: LD_INT 92
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31106
31080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 11
31088: PUSH
31089: LD_INT 12
31091: PUSH
31092: LD_INT 13
31094: PUSH
31095: LD_INT 14
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
31104: GO 31527
31106: LD_INT 28
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31132
31114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31115: LD_ADDR_VAR 0 3
31119: PUSH
31120: LD_INT 13
31122: PUSH
31123: LD_INT 14
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: ST_TO_ADDR
31130: GO 31527
31132: LD_INT 29
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31158
31140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 13
31148: PUSH
31149: LD_INT 14
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: ST_TO_ADDR
31156: GO 31527
31158: LD_INT 31
31160: DOUBLE
31161: EQUAL
31162: IFTRUE 31166
31164: GO 31184
31166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31167: LD_ADDR_VAR 0 3
31171: PUSH
31172: LD_INT 13
31174: PUSH
31175: LD_INT 14
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: ST_TO_ADDR
31182: GO 31527
31184: LD_INT 26
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31210
31192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_INT 13
31200: PUSH
31201: LD_INT 14
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: ST_TO_ADDR
31208: GO 31527
31210: LD_INT 42
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31244
31218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_INT 21
31226: PUSH
31227: LD_INT 22
31229: PUSH
31230: LD_INT 23
31232: PUSH
31233: LD_INT 24
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
31242: GO 31527
31244: LD_INT 43
31246: DOUBLE
31247: EQUAL
31248: IFTRUE 31252
31250: GO 31278
31252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31253: LD_ADDR_VAR 0 3
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_INT 23
31266: PUSH
31267: LD_INT 24
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
31276: GO 31527
31278: LD_INT 44
31280: DOUBLE
31281: EQUAL
31282: IFTRUE 31286
31284: GO 31312
31286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31287: LD_ADDR_VAR 0 3
31291: PUSH
31292: LD_INT 21
31294: PUSH
31295: LD_INT 22
31297: PUSH
31298: LD_INT 23
31300: PUSH
31301: LD_INT 24
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
31310: GO 31527
31312: LD_INT 45
31314: DOUBLE
31315: EQUAL
31316: IFTRUE 31320
31318: GO 31346
31320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31321: LD_ADDR_VAR 0 3
31325: PUSH
31326: LD_INT 21
31328: PUSH
31329: LD_INT 22
31331: PUSH
31332: LD_INT 23
31334: PUSH
31335: LD_INT 24
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31527
31346: LD_INT 49
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31380
31354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 22
31365: PUSH
31366: LD_INT 23
31368: PUSH
31369: LD_INT 24
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
31378: GO 31527
31380: LD_INT 51
31382: DOUBLE
31383: EQUAL
31384: IFTRUE 31388
31386: GO 31414
31388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_INT 21
31396: PUSH
31397: LD_INT 22
31399: PUSH
31400: LD_INT 23
31402: PUSH
31403: LD_INT 24
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: ST_TO_ADDR
31412: GO 31527
31414: LD_INT 52
31416: DOUBLE
31417: EQUAL
31418: IFTRUE 31422
31420: GO 31448
31422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31423: LD_ADDR_VAR 0 3
31427: PUSH
31428: LD_INT 21
31430: PUSH
31431: LD_INT 22
31433: PUSH
31434: LD_INT 23
31436: PUSH
31437: LD_INT 24
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
31446: GO 31527
31448: LD_INT 53
31450: DOUBLE
31451: EQUAL
31452: IFTRUE 31456
31454: GO 31474
31456: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31457: LD_ADDR_VAR 0 3
31461: PUSH
31462: LD_INT 23
31464: PUSH
31465: LD_INT 24
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: ST_TO_ADDR
31472: GO 31527
31474: LD_INT 46
31476: DOUBLE
31477: EQUAL
31478: IFTRUE 31482
31480: GO 31500
31482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: LD_INT 23
31490: PUSH
31491: LD_INT 24
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: ST_TO_ADDR
31498: GO 31527
31500: LD_INT 47
31502: DOUBLE
31503: EQUAL
31504: IFTRUE 31508
31506: GO 31526
31508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31509: LD_ADDR_VAR 0 3
31513: PUSH
31514: LD_INT 23
31516: PUSH
31517: LD_INT 24
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: ST_TO_ADDR
31524: GO 31527
31526: POP
// result := ( chassis in result ) ;
31527: LD_ADDR_VAR 0 3
31531: PUSH
31532: LD_VAR 0 1
31536: PUSH
31537: LD_VAR 0 3
31541: IN
31542: ST_TO_ADDR
// end ;
31543: LD_VAR 0 3
31547: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31548: LD_INT 0
31550: PPUSH
31551: PPUSH
31552: PPUSH
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
// result := array ;
31557: LD_ADDR_VAR 0 5
31561: PUSH
31562: LD_VAR 0 1
31566: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31567: LD_VAR 0 1
31571: NOT
31572: IFTRUE 31581
31574: PUSH
31575: LD_VAR 0 2
31579: NOT
31580: OR
31581: IFTRUE 31590
31583: PUSH
31584: LD_VAR 0 3
31588: NOT
31589: OR
31590: IFTRUE 31604
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: LD_VAR 0 1
31602: GREATER
31603: OR
31604: IFTRUE 31618
31606: PUSH
31607: LD_VAR 0 3
31611: PUSH
31612: LD_VAR 0 1
31616: GREATER
31617: OR
31618: IFFALSE 31622
// exit ;
31620: GO 31918
// if direction then
31622: LD_VAR 0 4
31626: IFFALSE 31690
// begin d := 1 ;
31628: LD_ADDR_VAR 0 9
31632: PUSH
31633: LD_INT 1
31635: ST_TO_ADDR
// if i_from > i_to then
31636: LD_VAR 0 2
31640: PUSH
31641: LD_VAR 0 3
31645: GREATER
31646: IFFALSE 31672
// length := ( array - i_from ) + i_to else
31648: LD_ADDR_VAR 0 11
31652: PUSH
31653: LD_VAR 0 1
31657: PUSH
31658: LD_VAR 0 2
31662: MINUS
31663: PUSH
31664: LD_VAR 0 3
31668: PLUS
31669: ST_TO_ADDR
31670: GO 31688
// length := i_to - i_from ;
31672: LD_ADDR_VAR 0 11
31676: PUSH
31677: LD_VAR 0 3
31681: PUSH
31682: LD_VAR 0 2
31686: MINUS
31687: ST_TO_ADDR
// end else
31688: GO 31751
// begin d := - 1 ;
31690: LD_ADDR_VAR 0 9
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: ST_TO_ADDR
// if i_from > i_to then
31699: LD_VAR 0 2
31703: PUSH
31704: LD_VAR 0 3
31708: GREATER
31709: IFFALSE 31729
// length := i_from - i_to else
31711: LD_ADDR_VAR 0 11
31715: PUSH
31716: LD_VAR 0 2
31720: PUSH
31721: LD_VAR 0 3
31725: MINUS
31726: ST_TO_ADDR
31727: GO 31751
// length := ( array - i_to ) + i_from ;
31729: LD_ADDR_VAR 0 11
31733: PUSH
31734: LD_VAR 0 1
31738: PUSH
31739: LD_VAR 0 3
31743: MINUS
31744: PUSH
31745: LD_VAR 0 2
31749: PLUS
31750: ST_TO_ADDR
// end ; if not length then
31751: LD_VAR 0 11
31755: NOT
31756: IFFALSE 31760
// exit ;
31758: GO 31918
// tmp := array ;
31760: LD_ADDR_VAR 0 10
31764: PUSH
31765: LD_VAR 0 1
31769: ST_TO_ADDR
// for i = 1 to length do
31770: LD_ADDR_VAR 0 6
31774: PUSH
31775: DOUBLE
31776: LD_INT 1
31778: DEC
31779: ST_TO_ADDR
31780: LD_VAR 0 11
31784: PUSH
31785: FOR_TO
31786: IFFALSE 31906
// begin for j = 1 to array do
31788: LD_ADDR_VAR 0 7
31792: PUSH
31793: DOUBLE
31794: LD_INT 1
31796: DEC
31797: ST_TO_ADDR
31798: LD_VAR 0 1
31802: PUSH
31803: FOR_TO
31804: IFFALSE 31892
// begin k := j + d ;
31806: LD_ADDR_VAR 0 8
31810: PUSH
31811: LD_VAR 0 7
31815: PUSH
31816: LD_VAR 0 9
31820: PLUS
31821: ST_TO_ADDR
// if k > array then
31822: LD_VAR 0 8
31826: PUSH
31827: LD_VAR 0 1
31831: GREATER
31832: IFFALSE 31842
// k := 1 ;
31834: LD_ADDR_VAR 0 8
31838: PUSH
31839: LD_INT 1
31841: ST_TO_ADDR
// if not k then
31842: LD_VAR 0 8
31846: NOT
31847: IFFALSE 31859
// k := array ;
31849: LD_ADDR_VAR 0 8
31853: PUSH
31854: LD_VAR 0 1
31858: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31859: LD_ADDR_VAR 0 10
31863: PUSH
31864: LD_VAR 0 10
31868: PPUSH
31869: LD_VAR 0 8
31873: PPUSH
31874: LD_VAR 0 1
31878: PUSH
31879: LD_VAR 0 7
31883: ARRAY
31884: PPUSH
31885: CALL_OW 1
31889: ST_TO_ADDR
// end ;
31890: GO 31803
31892: POP
31893: POP
// array := tmp ;
31894: LD_ADDR_VAR 0 1
31898: PUSH
31899: LD_VAR 0 10
31903: ST_TO_ADDR
// end ;
31904: GO 31785
31906: POP
31907: POP
// result := array ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_VAR 0 1
31917: ST_TO_ADDR
// end ;
31918: LD_VAR 0 5
31922: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31923: LD_INT 0
31925: PPUSH
31926: PPUSH
// result := 0 ;
31927: LD_ADDR_VAR 0 3
31931: PUSH
31932: LD_INT 0
31934: ST_TO_ADDR
// if not array or not value in array then
31935: LD_VAR 0 1
31939: NOT
31940: IFTRUE 31955
31942: PUSH
31943: LD_VAR 0 2
31947: PUSH
31948: LD_VAR 0 1
31952: IN
31953: NOT
31954: OR
31955: IFFALSE 31959
// exit ;
31957: GO 32013
// for i = 1 to array do
31959: LD_ADDR_VAR 0 4
31963: PUSH
31964: DOUBLE
31965: LD_INT 1
31967: DEC
31968: ST_TO_ADDR
31969: LD_VAR 0 1
31973: PUSH
31974: FOR_TO
31975: IFFALSE 32011
// if value = array [ i ] then
31977: LD_VAR 0 2
31981: PUSH
31982: LD_VAR 0 1
31986: PUSH
31987: LD_VAR 0 4
31991: ARRAY
31992: EQUAL
31993: IFFALSE 32009
// begin result := i ;
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_VAR 0 4
32004: ST_TO_ADDR
// exit ;
32005: POP
32006: POP
32007: GO 32013
// end ;
32009: GO 31974
32011: POP
32012: POP
// end ;
32013: LD_VAR 0 3
32017: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32018: LD_INT 0
32020: PPUSH
// vc_chassis := chassis ;
32021: LD_ADDR_OWVAR 37
32025: PUSH
32026: LD_VAR 0 1
32030: ST_TO_ADDR
// vc_engine := engine ;
32031: LD_ADDR_OWVAR 39
32035: PUSH
32036: LD_VAR 0 2
32040: ST_TO_ADDR
// vc_control := control ;
32041: LD_ADDR_OWVAR 38
32045: PUSH
32046: LD_VAR 0 3
32050: ST_TO_ADDR
// vc_weapon := weapon ;
32051: LD_ADDR_OWVAR 40
32055: PUSH
32056: LD_VAR 0 4
32060: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32061: LD_ADDR_OWVAR 41
32065: PUSH
32066: LD_VAR 0 5
32070: ST_TO_ADDR
// end ;
32071: LD_VAR 0 6
32075: RET
// export function WantPlant ( unit ) ; var task ; begin
32076: LD_INT 0
32078: PPUSH
32079: PPUSH
// result := false ;
32080: LD_ADDR_VAR 0 2
32084: PUSH
32085: LD_INT 0
32087: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 437
32102: ST_TO_ADDR
// if task then
32103: LD_VAR 0 3
32107: IFFALSE 32135
// if task [ 1 ] [ 1 ] = p then
32109: LD_VAR 0 3
32113: PUSH
32114: LD_INT 1
32116: ARRAY
32117: PUSH
32118: LD_INT 1
32120: ARRAY
32121: PUSH
32122: LD_STRING p
32124: EQUAL
32125: IFFALSE 32135
// result := true ;
32127: LD_ADDR_VAR 0 2
32131: PUSH
32132: LD_INT 1
32134: ST_TO_ADDR
// end ;
32135: LD_VAR 0 2
32139: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32140: LD_INT 0
32142: PPUSH
32143: PPUSH
32144: PPUSH
32145: PPUSH
// if pos < 1 then
32146: LD_VAR 0 2
32150: PUSH
32151: LD_INT 1
32153: LESS
32154: IFFALSE 32158
// exit ;
32156: GO 32461
// if pos = 1 then
32158: LD_VAR 0 2
32162: PUSH
32163: LD_INT 1
32165: EQUAL
32166: IFFALSE 32199
// result := Replace ( arr , pos [ 1 ] , value ) else
32168: LD_ADDR_VAR 0 4
32172: PUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: LD_VAR 0 2
32182: PUSH
32183: LD_INT 1
32185: ARRAY
32186: PPUSH
32187: LD_VAR 0 3
32191: PPUSH
32192: CALL_OW 1
32196: ST_TO_ADDR
32197: GO 32461
// begin tmp := arr ;
32199: LD_ADDR_VAR 0 6
32203: PUSH
32204: LD_VAR 0 1
32208: ST_TO_ADDR
// s_arr := [ tmp ] ;
32209: LD_ADDR_VAR 0 7
32213: PUSH
32214: LD_VAR 0 6
32218: PUSH
32219: EMPTY
32220: LIST
32221: ST_TO_ADDR
// for i = 1 to pos - 1 do
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: DOUBLE
32228: LD_INT 1
32230: DEC
32231: ST_TO_ADDR
32232: LD_VAR 0 2
32236: PUSH
32237: LD_INT 1
32239: MINUS
32240: PUSH
32241: FOR_TO
32242: IFFALSE 32287
// begin tmp := tmp [ pos [ i ] ] ;
32244: LD_ADDR_VAR 0 6
32248: PUSH
32249: LD_VAR 0 6
32253: PUSH
32254: LD_VAR 0 2
32258: PUSH
32259: LD_VAR 0 5
32263: ARRAY
32264: ARRAY
32265: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32266: LD_ADDR_VAR 0 7
32270: PUSH
32271: LD_VAR 0 7
32275: PUSH
32276: LD_VAR 0 6
32280: PUSH
32281: EMPTY
32282: LIST
32283: ADD
32284: ST_TO_ADDR
// end ;
32285: GO 32241
32287: POP
32288: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32289: LD_ADDR_VAR 0 6
32293: PUSH
32294: LD_VAR 0 6
32298: PPUSH
32299: LD_VAR 0 2
32303: PUSH
32304: LD_VAR 0 2
32308: ARRAY
32309: PPUSH
32310: LD_VAR 0 3
32314: PPUSH
32315: CALL_OW 1
32319: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32320: LD_ADDR_VAR 0 7
32324: PUSH
32325: LD_VAR 0 7
32329: PPUSH
32330: LD_VAR 0 7
32334: PPUSH
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 1
32344: ST_TO_ADDR
// for i = s_arr downto 2 do
32345: LD_ADDR_VAR 0 5
32349: PUSH
32350: DOUBLE
32351: LD_VAR 0 7
32355: INC
32356: ST_TO_ADDR
32357: LD_INT 2
32359: PUSH
32360: FOR_DOWNTO
32361: IFFALSE 32445
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32363: LD_ADDR_VAR 0 6
32367: PUSH
32368: LD_VAR 0 7
32372: PUSH
32373: LD_VAR 0 5
32377: PUSH
32378: LD_INT 1
32380: MINUS
32381: ARRAY
32382: PPUSH
32383: LD_VAR 0 2
32387: PUSH
32388: LD_VAR 0 5
32392: PUSH
32393: LD_INT 1
32395: MINUS
32396: ARRAY
32397: PPUSH
32398: LD_VAR 0 7
32402: PUSH
32403: LD_VAR 0 5
32407: ARRAY
32408: PPUSH
32409: CALL_OW 1
32413: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32414: LD_ADDR_VAR 0 7
32418: PUSH
32419: LD_VAR 0 7
32423: PPUSH
32424: LD_VAR 0 5
32428: PUSH
32429: LD_INT 1
32431: MINUS
32432: PPUSH
32433: LD_VAR 0 6
32437: PPUSH
32438: CALL_OW 1
32442: ST_TO_ADDR
// end ;
32443: GO 32360
32445: POP
32446: POP
// result := s_arr [ 1 ] ;
32447: LD_ADDR_VAR 0 4
32451: PUSH
32452: LD_VAR 0 7
32456: PUSH
32457: LD_INT 1
32459: ARRAY
32460: ST_TO_ADDR
// end ; end ;
32461: LD_VAR 0 4
32465: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32466: LD_INT 0
32468: PPUSH
32469: PPUSH
// if not list then
32470: LD_VAR 0 1
32474: NOT
32475: IFFALSE 32479
// exit ;
32477: GO 32570
// i := list [ pos1 ] ;
32479: LD_ADDR_VAR 0 5
32483: PUSH
32484: LD_VAR 0 1
32488: PUSH
32489: LD_VAR 0 2
32493: ARRAY
32494: ST_TO_ADDR
// if not i then
32495: LD_VAR 0 5
32499: NOT
32500: IFFALSE 32504
// exit ;
32502: GO 32570
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32504: LD_ADDR_VAR 0 1
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: LD_VAR 0 2
32518: PPUSH
32519: LD_VAR 0 1
32523: PUSH
32524: LD_VAR 0 3
32528: ARRAY
32529: PPUSH
32530: CALL_OW 1
32534: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32535: LD_ADDR_VAR 0 1
32539: PUSH
32540: LD_VAR 0 1
32544: PPUSH
32545: LD_VAR 0 3
32549: PPUSH
32550: LD_VAR 0 5
32554: PPUSH
32555: CALL_OW 1
32559: ST_TO_ADDR
// result := list ;
32560: LD_ADDR_VAR 0 4
32564: PUSH
32565: LD_VAR 0 1
32569: ST_TO_ADDR
// end ;
32570: LD_VAR 0 4
32574: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32575: LD_INT 0
32577: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32578: LD_ADDR_VAR 0 5
32582: PUSH
32583: LD_VAR 0 1
32587: PPUSH
32588: CALL_OW 250
32592: PPUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 251
32602: PPUSH
32603: LD_VAR 0 2
32607: PPUSH
32608: LD_VAR 0 3
32612: PPUSH
32613: LD_VAR 0 4
32617: PPUSH
32618: CALL 33000 0 5
32622: ST_TO_ADDR
// end ;
32623: LD_VAR 0 5
32627: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32628: LD_INT 0
32630: PPUSH
32631: PPUSH
32632: PPUSH
32633: PPUSH
// if not list or not unit then
32634: LD_VAR 0 2
32638: NOT
32639: IFTRUE 32648
32641: PUSH
32642: LD_VAR 0 1
32646: NOT
32647: OR
32648: IFFALSE 32652
// exit ;
32650: GO 32995
// result := [ ] ;
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: EMPTY
32658: ST_TO_ADDR
// for i in list do
32659: LD_ADDR_VAR 0 6
32663: PUSH
32664: LD_VAR 0 2
32668: PUSH
32669: FOR_IN
32670: IFFALSE 32888
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32672: LD_ADDR_VAR 0 8
32676: PUSH
32677: LD_VAR 0 1
32681: PPUSH
32682: LD_VAR 0 6
32686: PUSH
32687: LD_INT 1
32689: ARRAY
32690: PPUSH
32691: LD_VAR 0 6
32695: PUSH
32696: LD_INT 2
32698: ARRAY
32699: PPUSH
32700: CALL_OW 297
32704: ST_TO_ADDR
// if not Count ( result ) then
32705: LD_VAR 0 5
32709: PPUSH
32710: CALL 29256 0 1
32714: NOT
32715: IFFALSE 32748
// begin result := Join ( result , [ i , tmp ] ) ;
32717: LD_ADDR_VAR 0 5
32721: PUSH
32722: LD_VAR 0 5
32726: PPUSH
32727: LD_VAR 0 6
32731: PUSH
32732: LD_VAR 0 8
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PPUSH
32741: CALL 65188 0 2
32745: ST_TO_ADDR
// continue ;
32746: GO 32669
// end ; if result [ result ] [ 2 ] <= tmp then
32748: LD_VAR 0 5
32752: PUSH
32753: LD_VAR 0 5
32757: ARRAY
32758: PUSH
32759: LD_INT 2
32761: ARRAY
32762: PUSH
32763: LD_VAR 0 8
32767: LESSEQUAL
32768: IFFALSE 32801
// result := Join ( result , [ i , tmp ] ) else
32770: LD_ADDR_VAR 0 5
32774: PUSH
32775: LD_VAR 0 5
32779: PPUSH
32780: LD_VAR 0 6
32784: PUSH
32785: LD_VAR 0 8
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PPUSH
32794: CALL 65188 0 2
32798: ST_TO_ADDR
32799: GO 32886
// begin for j := 1 to Count ( result ) do
32801: LD_ADDR_VAR 0 7
32805: PUSH
32806: DOUBLE
32807: LD_INT 1
32809: DEC
32810: ST_TO_ADDR
32811: LD_VAR 0 5
32815: PPUSH
32816: CALL 29256 0 1
32820: PUSH
32821: FOR_TO
32822: IFFALSE 32884
// begin if tmp < result [ j ] [ 2 ] then
32824: LD_VAR 0 8
32828: PUSH
32829: LD_VAR 0 5
32833: PUSH
32834: LD_VAR 0 7
32838: ARRAY
32839: PUSH
32840: LD_INT 2
32842: ARRAY
32843: LESS
32844: IFFALSE 32882
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32846: LD_ADDR_VAR 0 5
32850: PUSH
32851: LD_VAR 0 5
32855: PPUSH
32856: LD_VAR 0 7
32860: PPUSH
32861: LD_VAR 0 6
32865: PUSH
32866: LD_VAR 0 8
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PPUSH
32875: CALL_OW 2
32879: ST_TO_ADDR
// break ;
32880: GO 32884
// end ; end ;
32882: GO 32821
32884: POP
32885: POP
// end ; end ;
32886: GO 32669
32888: POP
32889: POP
// if result and not asc then
32890: LD_VAR 0 5
32894: IFFALSE 32903
32896: PUSH
32897: LD_VAR 0 3
32901: NOT
32902: AND
32903: IFFALSE 32920
// result := ReverseArray ( result ) ;
32905: LD_ADDR_VAR 0 5
32909: PUSH
32910: LD_VAR 0 5
32914: PPUSH
32915: CALL 60278 0 1
32919: ST_TO_ADDR
// tmp := [ ] ;
32920: LD_ADDR_VAR 0 8
32924: PUSH
32925: EMPTY
32926: ST_TO_ADDR
// if mode then
32927: LD_VAR 0 4
32931: IFFALSE 32995
// begin for i := 1 to result do
32933: LD_ADDR_VAR 0 6
32937: PUSH
32938: DOUBLE
32939: LD_INT 1
32941: DEC
32942: ST_TO_ADDR
32943: LD_VAR 0 5
32947: PUSH
32948: FOR_TO
32949: IFFALSE 32983
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32951: LD_ADDR_VAR 0 8
32955: PUSH
32956: LD_VAR 0 8
32960: PPUSH
32961: LD_VAR 0 5
32965: PUSH
32966: LD_VAR 0 6
32970: ARRAY
32971: PUSH
32972: LD_INT 1
32974: ARRAY
32975: PPUSH
32976: CALL 65188 0 2
32980: ST_TO_ADDR
32981: GO 32948
32983: POP
32984: POP
// result := tmp ;
32985: LD_ADDR_VAR 0 5
32989: PUSH
32990: LD_VAR 0 8
32994: ST_TO_ADDR
// end ; end ;
32995: LD_VAR 0 5
32999: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33000: LD_INT 0
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
// if not list then
33006: LD_VAR 0 3
33010: NOT
33011: IFFALSE 33015
// exit ;
33013: GO 33405
// result := [ ] ;
33015: LD_ADDR_VAR 0 6
33019: PUSH
33020: EMPTY
33021: ST_TO_ADDR
// for i in list do
33022: LD_ADDR_VAR 0 7
33026: PUSH
33027: LD_VAR 0 3
33031: PUSH
33032: FOR_IN
33033: IFFALSE 33235
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33035: LD_ADDR_VAR 0 9
33039: PUSH
33040: LD_VAR 0 7
33044: PPUSH
33045: LD_VAR 0 1
33049: PPUSH
33050: LD_VAR 0 2
33054: PPUSH
33055: CALL_OW 297
33059: ST_TO_ADDR
// if not result then
33060: LD_VAR 0 6
33064: NOT
33065: IFFALSE 33091
// result := [ [ i , tmp ] ] else
33067: LD_ADDR_VAR 0 6
33071: PUSH
33072: LD_VAR 0 7
33076: PUSH
33077: LD_VAR 0 9
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: EMPTY
33087: LIST
33088: ST_TO_ADDR
33089: GO 33233
// begin if result [ result ] [ 2 ] <= tmp then
33091: LD_VAR 0 6
33095: PUSH
33096: LD_VAR 0 6
33100: ARRAY
33101: PUSH
33102: LD_INT 2
33104: ARRAY
33105: PUSH
33106: LD_VAR 0 9
33110: LESSEQUAL
33111: IFFALSE 33153
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33113: LD_ADDR_VAR 0 6
33117: PUSH
33118: LD_VAR 0 6
33122: PPUSH
33123: LD_VAR 0 6
33127: PUSH
33128: LD_INT 1
33130: PLUS
33131: PPUSH
33132: LD_VAR 0 7
33136: PUSH
33137: LD_VAR 0 9
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PPUSH
33146: CALL_OW 2
33150: ST_TO_ADDR
33151: GO 33233
// for j := 1 to result do
33153: LD_ADDR_VAR 0 8
33157: PUSH
33158: DOUBLE
33159: LD_INT 1
33161: DEC
33162: ST_TO_ADDR
33163: LD_VAR 0 6
33167: PUSH
33168: FOR_TO
33169: IFFALSE 33231
// begin if tmp < result [ j ] [ 2 ] then
33171: LD_VAR 0 9
33175: PUSH
33176: LD_VAR 0 6
33180: PUSH
33181: LD_VAR 0 8
33185: ARRAY
33186: PUSH
33187: LD_INT 2
33189: ARRAY
33190: LESS
33191: IFFALSE 33229
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33193: LD_ADDR_VAR 0 6
33197: PUSH
33198: LD_VAR 0 6
33202: PPUSH
33203: LD_VAR 0 8
33207: PPUSH
33208: LD_VAR 0 7
33212: PUSH
33213: LD_VAR 0 9
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PPUSH
33222: CALL_OW 2
33226: ST_TO_ADDR
// break ;
33227: GO 33231
// end ; end ;
33229: GO 33168
33231: POP
33232: POP
// end ; end ;
33233: GO 33032
33235: POP
33236: POP
// if result and not asc then
33237: LD_VAR 0 6
33241: IFFALSE 33250
33243: PUSH
33244: LD_VAR 0 4
33248: NOT
33249: AND
33250: IFFALSE 33325
// begin tmp := result ;
33252: LD_ADDR_VAR 0 9
33256: PUSH
33257: LD_VAR 0 6
33261: ST_TO_ADDR
// for i = tmp downto 1 do
33262: LD_ADDR_VAR 0 7
33266: PUSH
33267: DOUBLE
33268: LD_VAR 0 9
33272: INC
33273: ST_TO_ADDR
33274: LD_INT 1
33276: PUSH
33277: FOR_DOWNTO
33278: IFFALSE 33323
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33280: LD_ADDR_VAR 0 6
33284: PUSH
33285: LD_VAR 0 6
33289: PPUSH
33290: LD_VAR 0 9
33294: PUSH
33295: LD_VAR 0 7
33299: MINUS
33300: PUSH
33301: LD_INT 1
33303: PLUS
33304: PPUSH
33305: LD_VAR 0 9
33309: PUSH
33310: LD_VAR 0 7
33314: ARRAY
33315: PPUSH
33316: CALL_OW 1
33320: ST_TO_ADDR
33321: GO 33277
33323: POP
33324: POP
// end ; tmp := [ ] ;
33325: LD_ADDR_VAR 0 9
33329: PUSH
33330: EMPTY
33331: ST_TO_ADDR
// if mode then
33332: LD_VAR 0 5
33336: IFFALSE 33405
// begin for i = 1 to result do
33338: LD_ADDR_VAR 0 7
33342: PUSH
33343: DOUBLE
33344: LD_INT 1
33346: DEC
33347: ST_TO_ADDR
33348: LD_VAR 0 6
33352: PUSH
33353: FOR_TO
33354: IFFALSE 33393
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33356: LD_ADDR_VAR 0 9
33360: PUSH
33361: LD_VAR 0 9
33365: PPUSH
33366: LD_VAR 0 7
33370: PPUSH
33371: LD_VAR 0 6
33375: PUSH
33376: LD_VAR 0 7
33380: ARRAY
33381: PUSH
33382: LD_INT 1
33384: ARRAY
33385: PPUSH
33386: CALL_OW 1
33390: ST_TO_ADDR
33391: GO 33353
33393: POP
33394: POP
// result := tmp ;
33395: LD_ADDR_VAR 0 6
33399: PUSH
33400: LD_VAR 0 9
33404: ST_TO_ADDR
// end ; end ;
33405: LD_VAR 0 6
33409: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33410: LD_INT 0
33412: PPUSH
33413: PPUSH
33414: PPUSH
33415: PPUSH
33416: PPUSH
33417: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33418: LD_ADDR_VAR 0 5
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: ST_TO_ADDR
// if not x or not y then
33440: LD_VAR 0 2
33444: NOT
33445: IFTRUE 33454
33447: PUSH
33448: LD_VAR 0 3
33452: NOT
33453: OR
33454: IFFALSE 33458
// exit ;
33456: GO 35114
// if not range then
33458: LD_VAR 0 4
33462: NOT
33463: IFFALSE 33473
// range := 10 ;
33465: LD_ADDR_VAR 0 4
33469: PUSH
33470: LD_INT 10
33472: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33473: LD_ADDR_VAR 0 8
33477: PUSH
33478: LD_INT 81
33480: PUSH
33481: LD_VAR 0 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 92
33492: PUSH
33493: LD_VAR 0 2
33497: PUSH
33498: LD_VAR 0 3
33502: PUSH
33503: LD_VAR 0 4
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: LD_INT 21
33519: PUSH
33520: LD_INT 3
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: PPUSH
33536: CALL_OW 69
33540: ST_TO_ADDR
// if not tmp then
33541: LD_VAR 0 8
33545: NOT
33546: IFFALSE 33550
// exit ;
33548: GO 35114
// for i in tmp do
33550: LD_ADDR_VAR 0 6
33554: PUSH
33555: LD_VAR 0 8
33559: PUSH
33560: FOR_IN
33561: IFFALSE 35089
// begin points := [ 0 , 0 , 0 ] ;
33563: LD_ADDR_VAR 0 9
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// bpoints := 1 ;
33582: LD_ADDR_VAR 0 10
33586: PUSH
33587: LD_INT 1
33589: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33590: LD_VAR 0 6
33594: PPUSH
33595: CALL_OW 247
33599: PUSH
33600: LD_INT 1
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33608
33606: GO 34190
33608: POP
// begin if GetClass ( i ) = 1 then
33609: LD_VAR 0 6
33613: PPUSH
33614: CALL_OW 257
33618: PUSH
33619: LD_INT 1
33621: EQUAL
33622: IFFALSE 33643
// points := [ 10 , 5 , 3 ] ;
33624: LD_ADDR_VAR 0 9
33628: PUSH
33629: LD_INT 10
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33643: LD_VAR 0 6
33647: PPUSH
33648: CALL_OW 257
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: LD_INT 3
33658: PUSH
33659: LD_INT 4
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: IN
33667: IFFALSE 33688
// points := [ 3 , 2 , 1 ] ;
33669: LD_ADDR_VAR 0 9
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33688: LD_VAR 0 6
33692: PPUSH
33693: CALL_OW 257
33697: PUSH
33698: LD_INT 5
33700: EQUAL
33701: IFFALSE 33722
// points := [ 130 , 5 , 2 ] ;
33703: LD_ADDR_VAR 0 9
33707: PUSH
33708: LD_INT 130
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33722: LD_VAR 0 6
33726: PPUSH
33727: CALL_OW 257
33731: PUSH
33732: LD_INT 8
33734: EQUAL
33735: IFFALSE 33756
// points := [ 35 , 35 , 30 ] ;
33737: LD_ADDR_VAR 0 9
33741: PUSH
33742: LD_INT 35
33744: PUSH
33745: LD_INT 35
33747: PUSH
33748: LD_INT 30
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33756: LD_VAR 0 6
33760: PPUSH
33761: CALL_OW 257
33765: PUSH
33766: LD_INT 9
33768: EQUAL
33769: IFFALSE 33790
// points := [ 20 , 55 , 40 ] ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_INT 20
33778: PUSH
33779: LD_INT 55
33781: PUSH
33782: LD_INT 40
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33790: LD_VAR 0 6
33794: PPUSH
33795: CALL_OW 257
33799: PUSH
33800: LD_INT 12
33802: PUSH
33803: LD_INT 16
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: IN
33810: IFFALSE 33831
// points := [ 5 , 3 , 2 ] ;
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33831: LD_VAR 0 6
33835: PPUSH
33836: CALL_OW 257
33840: PUSH
33841: LD_INT 17
33843: EQUAL
33844: IFFALSE 33865
// points := [ 100 , 50 , 75 ] ;
33846: LD_ADDR_VAR 0 9
33850: PUSH
33851: LD_INT 100
33853: PUSH
33854: LD_INT 50
33856: PUSH
33857: LD_INT 75
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: LIST
33864: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33865: LD_VAR 0 6
33869: PPUSH
33870: CALL_OW 257
33874: PUSH
33875: LD_INT 15
33877: EQUAL
33878: IFFALSE 33899
// points := [ 10 , 5 , 3 ] ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: LD_INT 10
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 3
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33899: LD_VAR 0 6
33903: PPUSH
33904: CALL_OW 257
33908: PUSH
33909: LD_INT 14
33911: EQUAL
33912: IFFALSE 33933
// points := [ 10 , 0 , 0 ] ;
33914: LD_ADDR_VAR 0 9
33918: PUSH
33919: LD_INT 10
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33933: LD_VAR 0 6
33937: PPUSH
33938: CALL_OW 257
33942: PUSH
33943: LD_INT 11
33945: EQUAL
33946: IFFALSE 33967
// points := [ 30 , 10 , 5 ] ;
33948: LD_ADDR_VAR 0 9
33952: PUSH
33953: LD_INT 30
33955: PUSH
33956: LD_INT 10
33958: PUSH
33959: LD_INT 5
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33967: LD_VAR 0 1
33971: PPUSH
33972: LD_INT 5
33974: PPUSH
33975: CALL_OW 321
33979: PUSH
33980: LD_INT 2
33982: EQUAL
33983: IFFALSE 34000
// bpoints := bpoints * 1.8 ;
33985: LD_ADDR_VAR 0 10
33989: PUSH
33990: LD_VAR 0 10
33994: PUSH
33995: LD_REAL  1.80000000000000E+0000
33998: MUL
33999: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 257
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: LD_INT 4
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: IN
34028: IFFALSE 34048
34030: PUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_INT 51
34038: PPUSH
34039: CALL_OW 321
34043: PUSH
34044: LD_INT 2
34046: EQUAL
34047: AND
34048: IFFALSE 34065
// bpoints := bpoints * 1.2 ;
34050: LD_ADDR_VAR 0 10
34054: PUSH
34055: LD_VAR 0 10
34059: PUSH
34060: LD_REAL  1.20000000000000E+0000
34063: MUL
34064: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34065: LD_VAR 0 6
34069: PPUSH
34070: CALL_OW 257
34074: PUSH
34075: LD_INT 5
34077: PUSH
34078: LD_INT 7
34080: PUSH
34081: LD_INT 9
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: IN
34089: IFFALSE 34109
34091: PUSH
34092: LD_VAR 0 1
34096: PPUSH
34097: LD_INT 52
34099: PPUSH
34100: CALL_OW 321
34104: PUSH
34105: LD_INT 2
34107: EQUAL
34108: AND
34109: IFFALSE 34126
// bpoints := bpoints * 1.5 ;
34111: LD_ADDR_VAR 0 10
34115: PUSH
34116: LD_VAR 0 10
34120: PUSH
34121: LD_REAL  1.50000000000000E+0000
34124: MUL
34125: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34126: LD_VAR 0 1
34130: PPUSH
34131: LD_INT 66
34133: PPUSH
34134: CALL_OW 321
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: IFFALSE 34159
// bpoints := bpoints * 1.1 ;
34144: LD_ADDR_VAR 0 10
34148: PUSH
34149: LD_VAR 0 10
34153: PUSH
34154: LD_REAL  1.10000000000000E+0000
34157: MUL
34158: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34159: LD_ADDR_VAR 0 10
34163: PUSH
34164: LD_VAR 0 10
34168: PUSH
34169: LD_VAR 0 6
34173: PPUSH
34174: LD_INT 1
34176: PPUSH
34177: CALL_OW 259
34181: PUSH
34182: LD_REAL  1.15000000000000E+0000
34185: MUL
34186: MUL
34187: ST_TO_ADDR
// end ; unit_vehicle :
34188: GO 35018
34190: LD_INT 2
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 35006
34198: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34199: LD_VAR 0 6
34203: PPUSH
34204: CALL_OW 264
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 42
34214: PUSH
34215: LD_INT 24
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: IN
34223: IFFALSE 34244
// points := [ 25 , 5 , 3 ] ;
34225: LD_ADDR_VAR 0 9
34229: PUSH
34230: LD_INT 25
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34244: LD_VAR 0 6
34248: PPUSH
34249: CALL_OW 264
34253: PUSH
34254: LD_INT 4
34256: PUSH
34257: LD_INT 43
34259: PUSH
34260: LD_INT 25
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: IN
34268: IFFALSE 34289
// points := [ 40 , 15 , 5 ] ;
34270: LD_ADDR_VAR 0 9
34274: PUSH
34275: LD_INT 40
34277: PUSH
34278: LD_INT 15
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34289: LD_VAR 0 6
34293: PPUSH
34294: CALL_OW 264
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 23
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: IN
34309: IFFALSE 34330
// points := [ 7 , 25 , 8 ] ;
34311: LD_ADDR_VAR 0 9
34315: PUSH
34316: LD_INT 7
34318: PUSH
34319: LD_INT 25
34321: PUSH
34322: LD_INT 8
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34330: LD_VAR 0 6
34334: PPUSH
34335: CALL_OW 264
34339: PUSH
34340: LD_INT 5
34342: PUSH
34343: LD_INT 27
34345: PUSH
34346: LD_INT 44
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: LIST
34353: IN
34354: IFFALSE 34375
// points := [ 14 , 50 , 16 ] ;
34356: LD_ADDR_VAR 0 9
34360: PUSH
34361: LD_INT 14
34363: PUSH
34364: LD_INT 50
34366: PUSH
34367: LD_INT 16
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34375: LD_VAR 0 6
34379: PPUSH
34380: CALL_OW 264
34384: PUSH
34385: LD_INT 6
34387: PUSH
34388: LD_INT 46
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: IN
34395: IFFALSE 34416
// points := [ 32 , 120 , 70 ] ;
34397: LD_ADDR_VAR 0 9
34401: PUSH
34402: LD_INT 32
34404: PUSH
34405: LD_INT 120
34407: PUSH
34408: LD_INT 70
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34416: LD_VAR 0 6
34420: PPUSH
34421: CALL_OW 264
34425: PUSH
34426: LD_INT 7
34428: PUSH
34429: LD_INT 28
34431: PUSH
34432: LD_INT 45
34434: PUSH
34435: LD_INT 92
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: IN
34444: IFFALSE 34465
// points := [ 35 , 20 , 45 ] ;
34446: LD_ADDR_VAR 0 9
34450: PUSH
34451: LD_INT 35
34453: PUSH
34454: LD_INT 20
34456: PUSH
34457: LD_INT 45
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34465: LD_VAR 0 6
34469: PPUSH
34470: CALL_OW 264
34474: PUSH
34475: LD_INT 47
34477: PUSH
34478: EMPTY
34479: LIST
34480: IN
34481: IFFALSE 34502
// points := [ 67 , 45 , 75 ] ;
34483: LD_ADDR_VAR 0 9
34487: PUSH
34488: LD_INT 67
34490: PUSH
34491: LD_INT 45
34493: PUSH
34494: LD_INT 75
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34502: LD_VAR 0 6
34506: PPUSH
34507: CALL_OW 264
34511: PUSH
34512: LD_INT 26
34514: PUSH
34515: EMPTY
34516: LIST
34517: IN
34518: IFFALSE 34539
// points := [ 120 , 30 , 80 ] ;
34520: LD_ADDR_VAR 0 9
34524: PUSH
34525: LD_INT 120
34527: PUSH
34528: LD_INT 30
34530: PUSH
34531: LD_INT 80
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34539: LD_VAR 0 6
34543: PPUSH
34544: CALL_OW 264
34548: PUSH
34549: LD_INT 22
34551: PUSH
34552: EMPTY
34553: LIST
34554: IN
34555: IFFALSE 34576
// points := [ 40 , 1 , 1 ] ;
34557: LD_ADDR_VAR 0 9
34561: PUSH
34562: LD_INT 40
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: LIST
34575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34576: LD_VAR 0 6
34580: PPUSH
34581: CALL_OW 264
34585: PUSH
34586: LD_INT 29
34588: PUSH
34589: EMPTY
34590: LIST
34591: IN
34592: IFFALSE 34613
// points := [ 70 , 200 , 400 ] ;
34594: LD_ADDR_VAR 0 9
34598: PUSH
34599: LD_INT 70
34601: PUSH
34602: LD_INT 200
34604: PUSH
34605: LD_INT 400
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34613: LD_VAR 0 6
34617: PPUSH
34618: CALL_OW 264
34622: PUSH
34623: LD_INT 14
34625: PUSH
34626: LD_INT 53
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: IN
34633: IFFALSE 34654
// points := [ 40 , 10 , 20 ] ;
34635: LD_ADDR_VAR 0 9
34639: PUSH
34640: LD_INT 40
34642: PUSH
34643: LD_INT 10
34645: PUSH
34646: LD_INT 20
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34654: LD_VAR 0 6
34658: PPUSH
34659: CALL_OW 264
34663: PUSH
34664: LD_INT 9
34666: PUSH
34667: EMPTY
34668: LIST
34669: IN
34670: IFFALSE 34691
// points := [ 5 , 70 , 20 ] ;
34672: LD_ADDR_VAR 0 9
34676: PUSH
34677: LD_INT 5
34679: PUSH
34680: LD_INT 70
34682: PUSH
34683: LD_INT 20
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34691: LD_VAR 0 6
34695: PPUSH
34696: CALL_OW 264
34700: PUSH
34701: LD_INT 10
34703: PUSH
34704: EMPTY
34705: LIST
34706: IN
34707: IFFALSE 34728
// points := [ 35 , 110 , 70 ] ;
34709: LD_ADDR_VAR 0 9
34713: PUSH
34714: LD_INT 35
34716: PUSH
34717: LD_INT 110
34719: PUSH
34720: LD_INT 70
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34728: LD_VAR 0 6
34732: PPUSH
34733: CALL_OW 265
34737: PUSH
34738: LD_INT 25
34740: EQUAL
34741: IFFALSE 34762
// points := [ 80 , 65 , 100 ] ;
34743: LD_ADDR_VAR 0 9
34747: PUSH
34748: LD_INT 80
34750: PUSH
34751: LD_INT 65
34753: PUSH
34754: LD_INT 100
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34762: LD_VAR 0 6
34766: PPUSH
34767: CALL_OW 263
34771: PUSH
34772: LD_INT 1
34774: EQUAL
34775: IFFALSE 34810
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34777: LD_ADDR_VAR 0 10
34781: PUSH
34782: LD_VAR 0 10
34786: PUSH
34787: LD_VAR 0 6
34791: PPUSH
34792: CALL_OW 311
34796: PPUSH
34797: LD_INT 3
34799: PPUSH
34800: CALL_OW 259
34804: PUSH
34805: LD_INT 4
34807: MUL
34808: MUL
34809: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34810: LD_VAR 0 6
34814: PPUSH
34815: CALL_OW 263
34819: PUSH
34820: LD_INT 2
34822: EQUAL
34823: IFFALSE 34874
// begin j := IsControledBy ( i ) ;
34825: LD_ADDR_VAR 0 7
34829: PUSH
34830: LD_VAR 0 6
34834: PPUSH
34835: CALL_OW 312
34839: ST_TO_ADDR
// if j then
34840: LD_VAR 0 7
34844: IFFALSE 34874
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34846: LD_ADDR_VAR 0 10
34850: PUSH
34851: LD_VAR 0 10
34855: PUSH
34856: LD_VAR 0 7
34860: PPUSH
34861: LD_INT 3
34863: PPUSH
34864: CALL_OW 259
34868: PUSH
34869: LD_INT 3
34871: MUL
34872: MUL
34873: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34874: LD_VAR 0 6
34878: PPUSH
34879: CALL_OW 264
34883: PUSH
34884: LD_INT 5
34886: PUSH
34887: LD_INT 6
34889: PUSH
34890: LD_INT 46
34892: PUSH
34893: LD_INT 44
34895: PUSH
34896: LD_INT 47
34898: PUSH
34899: LD_INT 45
34901: PUSH
34902: LD_INT 28
34904: PUSH
34905: LD_INT 7
34907: PUSH
34908: LD_INT 27
34910: PUSH
34911: LD_INT 29
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: IN
34926: IFFALSE 34946
34928: PUSH
34929: LD_VAR 0 1
34933: PPUSH
34934: LD_INT 52
34936: PPUSH
34937: CALL_OW 321
34941: PUSH
34942: LD_INT 2
34944: EQUAL
34945: AND
34946: IFFALSE 34963
// bpoints := bpoints * 1.2 ;
34948: LD_ADDR_VAR 0 10
34952: PUSH
34953: LD_VAR 0 10
34957: PUSH
34958: LD_REAL  1.20000000000000E+0000
34961: MUL
34962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34963: LD_VAR 0 6
34967: PPUSH
34968: CALL_OW 264
34972: PUSH
34973: LD_INT 6
34975: PUSH
34976: LD_INT 46
34978: PUSH
34979: LD_INT 47
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: IN
34987: IFFALSE 35004
// bpoints := bpoints * 1.2 ;
34989: LD_ADDR_VAR 0 10
34993: PUSH
34994: LD_VAR 0 10
34998: PUSH
34999: LD_REAL  1.20000000000000E+0000
35002: MUL
35003: ST_TO_ADDR
// end ; unit_building :
35004: GO 35018
35006: LD_INT 3
35008: DOUBLE
35009: EQUAL
35010: IFTRUE 35014
35012: GO 35017
35014: POP
// ; end ;
35015: GO 35018
35017: POP
// for j = 1 to 3 do
35018: LD_ADDR_VAR 0 7
35022: PUSH
35023: DOUBLE
35024: LD_INT 1
35026: DEC
35027: ST_TO_ADDR
35028: LD_INT 3
35030: PUSH
35031: FOR_TO
35032: IFFALSE 35085
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: LD_VAR 0 5
35043: PPUSH
35044: LD_VAR 0 7
35048: PPUSH
35049: LD_VAR 0 5
35053: PUSH
35054: LD_VAR 0 7
35058: ARRAY
35059: PUSH
35060: LD_VAR 0 9
35064: PUSH
35065: LD_VAR 0 7
35069: ARRAY
35070: PUSH
35071: LD_VAR 0 10
35075: MUL
35076: PLUS
35077: PPUSH
35078: CALL_OW 1
35082: ST_TO_ADDR
35083: GO 35031
35085: POP
35086: POP
// end ;
35087: GO 33560
35089: POP
35090: POP
// result := Replace ( result , 4 , tmp ) ;
35091: LD_ADDR_VAR 0 5
35095: PUSH
35096: LD_VAR 0 5
35100: PPUSH
35101: LD_INT 4
35103: PPUSH
35104: LD_VAR 0 8
35108: PPUSH
35109: CALL_OW 1
35113: ST_TO_ADDR
// end ;
35114: LD_VAR 0 5
35118: RET
// export function DangerAtRange ( unit , range ) ; begin
35119: LD_INT 0
35121: PPUSH
// if not unit then
35122: LD_VAR 0 1
35126: NOT
35127: IFFALSE 35131
// exit ;
35129: GO 35176
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35131: LD_ADDR_VAR 0 3
35135: PUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 255
35145: PPUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL_OW 250
35155: PPUSH
35156: LD_VAR 0 1
35160: PPUSH
35161: CALL_OW 251
35165: PPUSH
35166: LD_VAR 0 2
35170: PPUSH
35171: CALL 33410 0 4
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 3
35180: RET
// export function DangerInArea ( side , area ) ; begin
35181: LD_INT 0
35183: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35184: LD_ADDR_VAR 0 3
35188: PUSH
35189: LD_VAR 0 2
35193: PPUSH
35194: LD_INT 81
35196: PUSH
35197: LD_VAR 0 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PPUSH
35206: CALL_OW 70
35210: ST_TO_ADDR
// end ;
35211: LD_VAR 0 3
35215: RET
// export function IsExtension ( b ) ; begin
35216: LD_INT 0
35218: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35219: LD_ADDR_VAR 0 2
35223: PUSH
35224: LD_VAR 0 1
35228: PUSH
35229: LD_INT 23
35231: PUSH
35232: LD_INT 20
35234: PUSH
35235: LD_INT 22
35237: PUSH
35238: LD_INT 17
35240: PUSH
35241: LD_INT 24
35243: PUSH
35244: LD_INT 21
35246: PUSH
35247: LD_INT 19
35249: PUSH
35250: LD_INT 16
35252: PUSH
35253: LD_INT 25
35255: PUSH
35256: LD_INT 18
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: IN
35271: ST_TO_ADDR
// end ;
35272: LD_VAR 0 2
35276: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35277: LD_INT 0
35279: PPUSH
35280: PPUSH
35281: PPUSH
// result := [ ] ;
35282: LD_ADDR_VAR 0 4
35286: PUSH
35287: EMPTY
35288: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_INT 21
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PPUSH
35309: CALL_OW 70
35313: ST_TO_ADDR
// if not tmp then
35314: LD_VAR 0 5
35318: NOT
35319: IFFALSE 35323
// exit ;
35321: GO 35387
// if checkLink then
35323: LD_VAR 0 3
35327: IFFALSE 35377
// begin for i in tmp do
35329: LD_ADDR_VAR 0 6
35333: PUSH
35334: LD_VAR 0 5
35338: PUSH
35339: FOR_IN
35340: IFFALSE 35375
// if GetBase ( i ) <> base then
35342: LD_VAR 0 6
35346: PPUSH
35347: CALL_OW 274
35351: PUSH
35352: LD_VAR 0 1
35356: NONEQUAL
35357: IFFALSE 35373
// ComLinkToBase ( base , i ) ;
35359: LD_VAR 0 1
35363: PPUSH
35364: LD_VAR 0 6
35368: PPUSH
35369: CALL_OW 169
35373: GO 35339
35375: POP
35376: POP
// end ; result := tmp ;
35377: LD_ADDR_VAR 0 4
35381: PUSH
35382: LD_VAR 0 5
35386: ST_TO_ADDR
// end ;
35387: LD_VAR 0 4
35391: RET
// export function ComComplete ( units , b ) ; var i ; begin
35392: LD_INT 0
35394: PPUSH
35395: PPUSH
// if not units then
35396: LD_VAR 0 1
35400: NOT
35401: IFFALSE 35405
// exit ;
35403: GO 35495
// for i in units do
35405: LD_ADDR_VAR 0 4
35409: PUSH
35410: LD_VAR 0 1
35414: PUSH
35415: FOR_IN
35416: IFFALSE 35493
// if BuildingStatus ( b ) = bs_build then
35418: LD_VAR 0 2
35422: PPUSH
35423: CALL_OW 461
35427: PUSH
35428: LD_INT 1
35430: EQUAL
35431: IFFALSE 35491
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35433: LD_VAR 0 4
35437: PPUSH
35438: LD_STRING h
35440: PUSH
35441: LD_VAR 0 2
35445: PPUSH
35446: CALL_OW 250
35450: PUSH
35451: LD_VAR 0 2
35455: PPUSH
35456: CALL_OW 251
35460: PUSH
35461: LD_VAR 0 2
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: PPUSH
35487: CALL_OW 446
35491: GO 35415
35493: POP
35494: POP
// end ;
35495: LD_VAR 0 3
35499: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35500: LD_INT 0
35502: PPUSH
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35508: LD_VAR 0 1
35512: NOT
35513: IFTRUE 35530
35515: PUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 263
35525: PUSH
35526: LD_INT 2
35528: NONEQUAL
35529: OR
35530: IFFALSE 35534
// exit ;
35532: GO 35850
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35534: LD_ADDR_VAR 0 6
35538: PUSH
35539: LD_INT 22
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 255
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 30
35561: PUSH
35562: LD_INT 36
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 34
35571: PUSH
35572: LD_INT 31
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PPUSH
35588: CALL_OW 69
35592: ST_TO_ADDR
// if not tmp then
35593: LD_VAR 0 6
35597: NOT
35598: IFFALSE 35602
// exit ;
35600: GO 35850
// result := [ ] ;
35602: LD_ADDR_VAR 0 2
35606: PUSH
35607: EMPTY
35608: ST_TO_ADDR
// for i in tmp do
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_VAR 0 6
35618: PUSH
35619: FOR_IN
35620: IFFALSE 35691
// begin t := UnitsInside ( i ) ;
35622: LD_ADDR_VAR 0 4
35626: PUSH
35627: LD_VAR 0 3
35631: PPUSH
35632: CALL_OW 313
35636: ST_TO_ADDR
// if t then
35637: LD_VAR 0 4
35641: IFFALSE 35689
// for j in t do
35643: LD_ADDR_VAR 0 7
35647: PUSH
35648: LD_VAR 0 4
35652: PUSH
35653: FOR_IN
35654: IFFALSE 35687
// result := Replace ( result , result + 1 , j ) ;
35656: LD_ADDR_VAR 0 2
35660: PUSH
35661: LD_VAR 0 2
35665: PPUSH
35666: LD_VAR 0 2
35670: PUSH
35671: LD_INT 1
35673: PLUS
35674: PPUSH
35675: LD_VAR 0 7
35679: PPUSH
35680: CALL_OW 1
35684: ST_TO_ADDR
35685: GO 35653
35687: POP
35688: POP
// end ;
35689: GO 35619
35691: POP
35692: POP
// if not result then
35693: LD_VAR 0 2
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35850
// mech := result [ 1 ] ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_INT 1
35714: ARRAY
35715: ST_TO_ADDR
// if result > 1 then
35716: LD_VAR 0 2
35720: PUSH
35721: LD_INT 1
35723: GREATER
35724: IFFALSE 35836
// begin for i = 2 to result do
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: DOUBLE
35732: LD_INT 2
35734: DEC
35735: ST_TO_ADDR
35736: LD_VAR 0 2
35740: PUSH
35741: FOR_TO
35742: IFFALSE 35834
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 3
35758: ARRAY
35759: PPUSH
35760: LD_INT 3
35762: PPUSH
35763: CALL_OW 259
35767: PUSH
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 3
35777: ARRAY
35778: PPUSH
35779: CALL_OW 432
35783: MINUS
35784: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35785: LD_VAR 0 4
35789: PUSH
35790: LD_VAR 0 5
35794: PPUSH
35795: LD_INT 3
35797: PPUSH
35798: CALL_OW 259
35802: PUSH
35803: LD_VAR 0 5
35807: PPUSH
35808: CALL_OW 432
35812: MINUS
35813: GREATEREQUAL
35814: IFFALSE 35832
// mech := result [ i ] ;
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 2
35825: PUSH
35826: LD_VAR 0 3
35830: ARRAY
35831: ST_TO_ADDR
// end ;
35832: GO 35741
35834: POP
35835: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_VAR 0 5
35845: PPUSH
35846: CALL_OW 135
// end ;
35850: LD_VAR 0 2
35854: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35855: LD_INT 0
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
// result := [ ] ;
35870: LD_ADDR_VAR 0 7
35874: PUSH
35875: EMPTY
35876: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 266
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: IN
35897: NOT
35898: IFFALSE 35902
// exit ;
35900: GO 37542
// if name then
35902: LD_VAR 0 3
35906: IFFALSE 35922
// SetBName ( base_dep , name ) ;
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_VAR 0 3
35917: PPUSH
35918: CALL_OW 500
// base := GetBase ( base_dep ) ;
35922: LD_ADDR_VAR 0 15
35926: PUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 274
35936: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35937: LD_ADDR_VAR 0 16
35941: PUSH
35942: LD_VAR 0 1
35946: PPUSH
35947: CALL_OW 255
35951: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35952: LD_ADDR_VAR 0 17
35956: PUSH
35957: LD_VAR 0 1
35961: PPUSH
35962: CALL_OW 248
35966: ST_TO_ADDR
// if sources then
35967: LD_VAR 0 5
35971: IFFALSE 36018
// for i = 1 to 3 do
35973: LD_ADDR_VAR 0 8
35977: PUSH
35978: DOUBLE
35979: LD_INT 1
35981: DEC
35982: ST_TO_ADDR
35983: LD_INT 3
35985: PUSH
35986: FOR_TO
35987: IFFALSE 36016
// AddResourceType ( base , i , sources [ i ] ) ;
35989: LD_VAR 0 15
35993: PPUSH
35994: LD_VAR 0 8
35998: PPUSH
35999: LD_VAR 0 5
36003: PUSH
36004: LD_VAR 0 8
36008: ARRAY
36009: PPUSH
36010: CALL_OW 276
36014: GO 35986
36016: POP
36017: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36018: LD_ADDR_VAR 0 18
36022: PUSH
36023: LD_VAR 0 15
36027: PPUSH
36028: LD_VAR 0 2
36032: PPUSH
36033: LD_INT 1
36035: PPUSH
36036: CALL 35277 0 3
36040: ST_TO_ADDR
// InitHc ;
36041: CALL_OW 19
// InitUc ;
36045: CALL_OW 18
// uc_side := side ;
36049: LD_ADDR_OWVAR 20
36053: PUSH
36054: LD_VAR 0 16
36058: ST_TO_ADDR
// uc_nation := nation ;
36059: LD_ADDR_OWVAR 21
36063: PUSH
36064: LD_VAR 0 17
36068: ST_TO_ADDR
// if buildings then
36069: LD_VAR 0 18
36073: IFFALSE 37401
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36075: LD_ADDR_VAR 0 19
36079: PUSH
36080: LD_VAR 0 18
36084: PPUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 30
36090: PUSH
36091: LD_INT 29
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 30
36100: PUSH
36101: LD_INT 30
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 72
36117: ST_TO_ADDR
// if tmp then
36118: LD_VAR 0 19
36122: IFFALSE 36170
// for i in tmp do
36124: LD_ADDR_VAR 0 8
36128: PUSH
36129: LD_VAR 0 19
36133: PUSH
36134: FOR_IN
36135: IFFALSE 36168
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36137: LD_VAR 0 8
36141: PPUSH
36142: CALL_OW 250
36146: PPUSH
36147: LD_VAR 0 8
36151: PPUSH
36152: CALL_OW 251
36156: PPUSH
36157: LD_VAR 0 16
36161: PPUSH
36162: CALL_OW 441
36166: GO 36134
36168: POP
36169: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36170: LD_VAR 0 18
36174: PPUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 30
36180: PUSH
36181: LD_INT 32
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 30
36190: PUSH
36191: LD_INT 33
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: PPUSH
36203: CALL_OW 72
36207: IFFALSE 36295
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36209: LD_ADDR_VAR 0 8
36213: PUSH
36214: LD_VAR 0 18
36218: PPUSH
36219: LD_INT 2
36221: PUSH
36222: LD_INT 30
36224: PUSH
36225: LD_INT 32
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 30
36234: PUSH
36235: LD_INT 33
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: PPUSH
36247: CALL_OW 72
36251: PUSH
36252: FOR_IN
36253: IFFALSE 36293
// begin if not GetBWeapon ( i ) then
36255: LD_VAR 0 8
36259: PPUSH
36260: CALL_OW 269
36264: NOT
36265: IFFALSE 36291
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36267: LD_VAR 0 8
36271: PPUSH
36272: LD_VAR 0 8
36276: PPUSH
36277: LD_VAR 0 2
36281: PPUSH
36282: CALL 37547 0 2
36286: PPUSH
36287: CALL_OW 431
// end ;
36291: GO 36252
36293: POP
36294: POP
// end ; for i = 1 to personel do
36295: LD_ADDR_VAR 0 8
36299: PUSH
36300: DOUBLE
36301: LD_INT 1
36303: DEC
36304: ST_TO_ADDR
36305: LD_VAR 0 6
36309: PUSH
36310: FOR_TO
36311: IFFALSE 37381
// begin if i > 4 then
36313: LD_VAR 0 8
36317: PUSH
36318: LD_INT 4
36320: GREATER
36321: IFFALSE 36325
// break ;
36323: GO 37381
// case i of 1 :
36325: LD_VAR 0 8
36329: PUSH
36330: LD_INT 1
36332: DOUBLE
36333: EQUAL
36334: IFTRUE 36338
36336: GO 36418
36338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36339: LD_ADDR_VAR 0 12
36343: PUSH
36344: LD_VAR 0 18
36348: PPUSH
36349: LD_INT 22
36351: PUSH
36352: LD_VAR 0 16
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 58
36363: PUSH
36364: EMPTY
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 30
36372: PUSH
36373: LD_INT 32
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 30
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 30
36392: PUSH
36393: LD_INT 5
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL_OW 72
36415: ST_TO_ADDR
36416: GO 36640
36418: LD_INT 2
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36426
36424: GO 36488
36426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_VAR 0 18
36436: PPUSH
36437: LD_INT 22
36439: PUSH
36440: LD_VAR 0 16
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: LD_INT 30
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 30
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PPUSH
36481: CALL_OW 72
36485: ST_TO_ADDR
36486: GO 36640
36488: LD_INT 3
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36496
36494: GO 36558
36496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36497: LD_ADDR_VAR 0 12
36501: PUSH
36502: LD_VAR 0 18
36506: PPUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 30
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PPUSH
36551: CALL_OW 72
36555: ST_TO_ADDR
36556: GO 36640
36558: LD_INT 4
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36639
36566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36567: LD_ADDR_VAR 0 12
36571: PUSH
36572: LD_VAR 0 18
36576: PPUSH
36577: LD_INT 22
36579: PUSH
36580: LD_VAR 0 16
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 6
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 30
36604: PUSH
36605: LD_INT 7
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 30
36614: PUSH
36615: LD_INT 8
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PPUSH
36632: CALL_OW 72
36636: ST_TO_ADDR
36637: GO 36640
36639: POP
// if i = 1 then
36640: LD_VAR 0 8
36644: PUSH
36645: LD_INT 1
36647: EQUAL
36648: IFFALSE 36759
// begin tmp := [ ] ;
36650: LD_ADDR_VAR 0 19
36654: PUSH
36655: EMPTY
36656: ST_TO_ADDR
// for j in f do
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_VAR 0 12
36666: PUSH
36667: FOR_IN
36668: IFFALSE 36741
// if GetBType ( j ) = b_bunker then
36670: LD_VAR 0 9
36674: PPUSH
36675: CALL_OW 266
36679: PUSH
36680: LD_INT 32
36682: EQUAL
36683: IFFALSE 36710
// tmp := Insert ( tmp , 1 , j ) else
36685: LD_ADDR_VAR 0 19
36689: PUSH
36690: LD_VAR 0 19
36694: PPUSH
36695: LD_INT 1
36697: PPUSH
36698: LD_VAR 0 9
36702: PPUSH
36703: CALL_OW 2
36707: ST_TO_ADDR
36708: GO 36739
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36710: LD_ADDR_VAR 0 19
36714: PUSH
36715: LD_VAR 0 19
36719: PPUSH
36720: LD_VAR 0 19
36724: PUSH
36725: LD_INT 1
36727: PLUS
36728: PPUSH
36729: LD_VAR 0 9
36733: PPUSH
36734: CALL_OW 2
36738: ST_TO_ADDR
36739: GO 36667
36741: POP
36742: POP
// if tmp then
36743: LD_VAR 0 19
36747: IFFALSE 36759
// f := tmp ;
36749: LD_ADDR_VAR 0 12
36753: PUSH
36754: LD_VAR 0 19
36758: ST_TO_ADDR
// end ; x := personel [ i ] ;
36759: LD_ADDR_VAR 0 13
36763: PUSH
36764: LD_VAR 0 6
36768: PUSH
36769: LD_VAR 0 8
36773: ARRAY
36774: ST_TO_ADDR
// if x = - 1 then
36775: LD_VAR 0 13
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: EQUAL
36784: IFFALSE 36995
// begin for j in f do
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: LD_VAR 0 12
36795: PUSH
36796: FOR_IN
36797: IFFALSE 36991
// repeat InitHc ;
36799: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36803: LD_VAR 0 9
36807: PPUSH
36808: CALL_OW 266
36812: PUSH
36813: LD_INT 5
36815: EQUAL
36816: IFFALSE 36886
// begin if UnitsInside ( j ) < 3 then
36818: LD_VAR 0 9
36822: PPUSH
36823: CALL_OW 313
36827: PUSH
36828: LD_INT 3
36830: LESS
36831: IFFALSE 36867
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36833: LD_INT 0
36835: PPUSH
36836: LD_INT 5
36838: PUSH
36839: LD_INT 8
36841: PUSH
36842: LD_INT 9
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 17
36854: ARRAY
36855: PPUSH
36856: LD_VAR 0 4
36860: PPUSH
36861: CALL_OW 380
36865: GO 36884
// PrepareHuman ( false , i , skill ) ;
36867: LD_INT 0
36869: PPUSH
36870: LD_VAR 0 8
36874: PPUSH
36875: LD_VAR 0 4
36879: PPUSH
36880: CALL_OW 380
// end else
36884: GO 36903
// PrepareHuman ( false , i , skill ) ;
36886: LD_INT 0
36888: PPUSH
36889: LD_VAR 0 8
36893: PPUSH
36894: LD_VAR 0 4
36898: PPUSH
36899: CALL_OW 380
// un := CreateHuman ;
36903: LD_ADDR_VAR 0 14
36907: PUSH
36908: CALL_OW 44
36912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36913: LD_ADDR_VAR 0 7
36917: PUSH
36918: LD_VAR 0 7
36922: PPUSH
36923: LD_INT 1
36925: PPUSH
36926: LD_VAR 0 14
36930: PPUSH
36931: CALL_OW 2
36935: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36936: LD_VAR 0 14
36940: PPUSH
36941: LD_VAR 0 9
36945: PPUSH
36946: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36950: LD_VAR 0 9
36954: PPUSH
36955: CALL_OW 313
36959: PUSH
36960: LD_INT 6
36962: EQUAL
36963: IFTRUE 36987
36965: PUSH
36966: LD_VAR 0 9
36970: PPUSH
36971: CALL_OW 266
36975: PUSH
36976: LD_INT 32
36978: PUSH
36979: LD_INT 31
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: IN
36986: OR
36987: IFFALSE 36799
36989: GO 36796
36991: POP
36992: POP
// end else
36993: GO 37379
// for j = 1 to x do
36995: LD_ADDR_VAR 0 9
36999: PUSH
37000: DOUBLE
37001: LD_INT 1
37003: DEC
37004: ST_TO_ADDR
37005: LD_VAR 0 13
37009: PUSH
37010: FOR_TO
37011: IFFALSE 37377
// begin InitHc ;
37013: CALL_OW 19
// if not f then
37017: LD_VAR 0 12
37021: NOT
37022: IFFALSE 37111
// begin PrepareHuman ( false , i , skill ) ;
37024: LD_INT 0
37026: PPUSH
37027: LD_VAR 0 8
37031: PPUSH
37032: LD_VAR 0 4
37036: PPUSH
37037: CALL_OW 380
// un := CreateHuman ;
37041: LD_ADDR_VAR 0 14
37045: PUSH
37046: CALL_OW 44
37050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37051: LD_ADDR_VAR 0 7
37055: PUSH
37056: LD_VAR 0 7
37060: PPUSH
37061: LD_INT 1
37063: PPUSH
37064: LD_VAR 0 14
37068: PPUSH
37069: CALL_OW 2
37073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37074: LD_VAR 0 14
37078: PPUSH
37079: LD_VAR 0 1
37083: PPUSH
37084: CALL_OW 250
37088: PPUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 251
37098: PPUSH
37099: LD_INT 10
37101: PPUSH
37102: LD_INT 0
37104: PPUSH
37105: CALL_OW 50
// continue ;
37109: GO 37010
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37111: LD_VAR 0 12
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PPUSH
37120: CALL_OW 313
37124: IFFALSE 37152
37126: PUSH
37127: LD_VAR 0 12
37131: PUSH
37132: LD_INT 1
37134: ARRAY
37135: PPUSH
37136: CALL_OW 266
37140: PUSH
37141: LD_INT 32
37143: PUSH
37144: LD_INT 31
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: IN
37151: AND
37152: IFTRUE 37173
37154: PUSH
37155: LD_VAR 0 12
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: CALL_OW 313
37168: PUSH
37169: LD_INT 6
37171: EQUAL
37172: OR
37173: IFFALSE 37193
// f := Delete ( f , 1 ) ;
37175: LD_ADDR_VAR 0 12
37179: PUSH
37180: LD_VAR 0 12
37184: PPUSH
37185: LD_INT 1
37187: PPUSH
37188: CALL_OW 3
37192: ST_TO_ADDR
// if not f then
37193: LD_VAR 0 12
37197: NOT
37198: IFFALSE 37216
// begin x := x + 2 ;
37200: LD_ADDR_VAR 0 13
37204: PUSH
37205: LD_VAR 0 13
37209: PUSH
37210: LD_INT 2
37212: PLUS
37213: ST_TO_ADDR
// continue ;
37214: GO 37010
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37216: LD_VAR 0 12
37220: PUSH
37221: LD_INT 1
37223: ARRAY
37224: PPUSH
37225: CALL_OW 266
37229: PUSH
37230: LD_INT 5
37232: EQUAL
37233: IFFALSE 37307
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37235: LD_VAR 0 12
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: CALL_OW 313
37248: PUSH
37249: LD_INT 3
37251: LESS
37252: IFFALSE 37288
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37254: LD_INT 0
37256: PPUSH
37257: LD_INT 5
37259: PUSH
37260: LD_INT 8
37262: PUSH
37263: LD_INT 9
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: PUSH
37271: LD_VAR 0 17
37275: ARRAY
37276: PPUSH
37277: LD_VAR 0 4
37281: PPUSH
37282: CALL_OW 380
37286: GO 37305
// PrepareHuman ( false , i , skill ) ;
37288: LD_INT 0
37290: PPUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: LD_VAR 0 4
37300: PPUSH
37301: CALL_OW 380
// end else
37305: GO 37324
// PrepareHuman ( false , i , skill ) ;
37307: LD_INT 0
37309: PPUSH
37310: LD_VAR 0 8
37314: PPUSH
37315: LD_VAR 0 4
37319: PPUSH
37320: CALL_OW 380
// un := CreateHuman ;
37324: LD_ADDR_VAR 0 14
37328: PUSH
37329: CALL_OW 44
37333: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37334: LD_ADDR_VAR 0 7
37338: PUSH
37339: LD_VAR 0 7
37343: PPUSH
37344: LD_INT 1
37346: PPUSH
37347: LD_VAR 0 14
37351: PPUSH
37352: CALL_OW 2
37356: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37357: LD_VAR 0 14
37361: PPUSH
37362: LD_VAR 0 12
37366: PUSH
37367: LD_INT 1
37369: ARRAY
37370: PPUSH
37371: CALL_OW 52
// end ;
37375: GO 37010
37377: POP
37378: POP
// end ;
37379: GO 36310
37381: POP
37382: POP
// result := result ^ buildings ;
37383: LD_ADDR_VAR 0 7
37387: PUSH
37388: LD_VAR 0 7
37392: PUSH
37393: LD_VAR 0 18
37397: ADD
37398: ST_TO_ADDR
// end else
37399: GO 37542
// begin for i = 1 to personel do
37401: LD_ADDR_VAR 0 8
37405: PUSH
37406: DOUBLE
37407: LD_INT 1
37409: DEC
37410: ST_TO_ADDR
37411: LD_VAR 0 6
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37540
// begin if i > 4 then
37419: LD_VAR 0 8
37423: PUSH
37424: LD_INT 4
37426: GREATER
37427: IFFALSE 37431
// break ;
37429: GO 37540
// x := personel [ i ] ;
37431: LD_ADDR_VAR 0 13
37435: PUSH
37436: LD_VAR 0 6
37440: PUSH
37441: LD_VAR 0 8
37445: ARRAY
37446: ST_TO_ADDR
// if x = - 1 then
37447: LD_VAR 0 13
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: EQUAL
37456: IFFALSE 37460
// continue ;
37458: GO 37416
// PrepareHuman ( false , i , skill ) ;
37460: LD_INT 0
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_VAR 0 4
37472: PPUSH
37473: CALL_OW 380
// un := CreateHuman ;
37477: LD_ADDR_VAR 0 14
37481: PUSH
37482: CALL_OW 44
37486: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37487: LD_VAR 0 14
37491: PPUSH
37492: LD_VAR 0 1
37496: PPUSH
37497: CALL_OW 250
37501: PPUSH
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 251
37511: PPUSH
37512: LD_INT 10
37514: PPUSH
37515: LD_INT 0
37517: PPUSH
37518: CALL_OW 50
// result := result ^ un ;
37522: LD_ADDR_VAR 0 7
37526: PUSH
37527: LD_VAR 0 7
37531: PUSH
37532: LD_VAR 0 14
37536: ADD
37537: ST_TO_ADDR
// end ;
37538: GO 37416
37540: POP
37541: POP
// end ; end ;
37542: LD_VAR 0 7
37546: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37547: LD_INT 0
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
// result := false ;
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_INT 0
37572: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37573: LD_VAR 0 1
37577: NOT
37578: IFTRUE 37603
37580: PUSH
37581: LD_VAR 0 1
37585: PPUSH
37586: CALL_OW 266
37590: PUSH
37591: LD_INT 32
37593: PUSH
37594: LD_INT 33
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: IN
37601: NOT
37602: OR
37603: IFFALSE 37607
// exit ;
37605: GO 38742
// nat := GetNation ( tower ) ;
37607: LD_ADDR_VAR 0 12
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 248
37621: ST_TO_ADDR
// side := GetSide ( tower ) ;
37622: LD_ADDR_VAR 0 16
37626: PUSH
37627: LD_VAR 0 1
37631: PPUSH
37632: CALL_OW 255
37636: ST_TO_ADDR
// x := GetX ( tower ) ;
37637: LD_ADDR_VAR 0 10
37641: PUSH
37642: LD_VAR 0 1
37646: PPUSH
37647: CALL_OW 250
37651: ST_TO_ADDR
// y := GetY ( tower ) ;
37652: LD_ADDR_VAR 0 11
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 251
37666: ST_TO_ADDR
// if not x or not y then
37667: LD_VAR 0 10
37671: NOT
37672: IFTRUE 37681
37674: PUSH
37675: LD_VAR 0 11
37679: NOT
37680: OR
37681: IFFALSE 37685
// exit ;
37683: GO 38742
// weapon := 0 ;
37685: LD_ADDR_VAR 0 18
37689: PUSH
37690: LD_INT 0
37692: ST_TO_ADDR
// fac_list := [ ] ;
37693: LD_ADDR_VAR 0 17
37697: PUSH
37698: EMPTY
37699: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37700: LD_ADDR_VAR 0 6
37704: PUSH
37705: LD_VAR 0 1
37709: PPUSH
37710: CALL_OW 274
37714: PPUSH
37715: LD_VAR 0 2
37719: PPUSH
37720: LD_INT 0
37722: PPUSH
37723: CALL 35277 0 3
37727: PPUSH
37728: LD_INT 30
37730: PUSH
37731: LD_INT 3
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PPUSH
37738: CALL_OW 72
37742: ST_TO_ADDR
// if not factories then
37743: LD_VAR 0 6
37747: NOT
37748: IFFALSE 37752
// exit ;
37750: GO 38742
// for i in factories do
37752: LD_ADDR_VAR 0 8
37756: PUSH
37757: LD_VAR 0 6
37761: PUSH
37762: FOR_IN
37763: IFFALSE 37788
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37765: LD_ADDR_VAR 0 17
37769: PUSH
37770: LD_VAR 0 17
37774: PUSH
37775: LD_VAR 0 8
37779: PPUSH
37780: CALL_OW 478
37784: UNION
37785: ST_TO_ADDR
37786: GO 37762
37788: POP
37789: POP
// if not fac_list then
37790: LD_VAR 0 17
37794: NOT
37795: IFFALSE 37799
// exit ;
37797: GO 38742
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37799: LD_ADDR_VAR 0 5
37803: PUSH
37804: LD_INT 4
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: LD_INT 9
37812: PUSH
37813: LD_INT 10
37815: PUSH
37816: LD_INT 6
37818: PUSH
37819: LD_INT 7
37821: PUSH
37822: LD_INT 11
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 27
37836: PUSH
37837: LD_INT 28
37839: PUSH
37840: LD_INT 26
37842: PUSH
37843: LD_INT 30
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 43
37854: PUSH
37855: LD_INT 44
37857: PUSH
37858: LD_INT 46
37860: PUSH
37861: LD_INT 45
37863: PUSH
37864: LD_INT 47
37866: PUSH
37867: LD_INT 49
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: PUSH
37883: LD_VAR 0 12
37887: ARRAY
37888: ST_TO_ADDR
// list := list isect fac_list ;
37889: LD_ADDR_VAR 0 5
37893: PUSH
37894: LD_VAR 0 5
37898: PUSH
37899: LD_VAR 0 17
37903: ISECT
37904: ST_TO_ADDR
// if not list then
37905: LD_VAR 0 5
37909: NOT
37910: IFFALSE 37914
// exit ;
37912: GO 38742
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37914: LD_VAR 0 12
37918: PUSH
37919: LD_INT 3
37921: EQUAL
37922: IFFALSE 37934
37924: PUSH
37925: LD_INT 49
37927: PUSH
37928: LD_VAR 0 5
37932: IN
37933: AND
37934: IFFALSE 37954
37936: PUSH
37937: LD_INT 31
37939: PPUSH
37940: LD_VAR 0 16
37944: PPUSH
37945: CALL_OW 321
37949: PUSH
37950: LD_INT 2
37952: EQUAL
37953: AND
37954: IFFALSE 38014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37956: LD_INT 22
37958: PUSH
37959: LD_VAR 0 16
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 35
37970: PUSH
37971: LD_INT 49
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 91
37980: PUSH
37981: LD_VAR 0 1
37985: PUSH
37986: LD_INT 10
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 69
38003: NOT
38004: IFFALSE 38014
// weapon := ru_time_lapser ;
38006: LD_ADDR_VAR 0 18
38010: PUSH
38011: LD_INT 49
38013: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38014: LD_VAR 0 12
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: IN
38029: IFFALSE 38053
38031: PUSH
38032: LD_INT 11
38034: PUSH
38035: LD_VAR 0 5
38039: IN
38040: IFTRUE 38052
38042: PUSH
38043: LD_INT 30
38045: PUSH
38046: LD_VAR 0 5
38050: IN
38051: OR
38052: AND
38053: IFFALSE 38073
38055: PUSH
38056: LD_INT 6
38058: PPUSH
38059: LD_VAR 0 16
38063: PPUSH
38064: CALL_OW 321
38068: PUSH
38069: LD_INT 2
38071: EQUAL
38072: AND
38073: IFFALSE 38240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38075: LD_INT 22
38077: PUSH
38078: LD_VAR 0 16
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: LD_INT 35
38092: PUSH
38093: LD_INT 11
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 35
38102: PUSH
38103: LD_INT 30
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 91
38117: PUSH
38118: LD_VAR 0 1
38122: PUSH
38123: LD_INT 18
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 69
38140: NOT
38141: IFFALSE 38217
38143: PUSH
38144: LD_INT 22
38146: PUSH
38147: LD_VAR 0 16
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: LD_INT 30
38161: PUSH
38162: LD_INT 32
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 30
38171: PUSH
38172: LD_INT 33
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 91
38186: PUSH
38187: LD_VAR 0 1
38191: PUSH
38192: LD_INT 12
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: PPUSH
38208: CALL_OW 69
38212: PUSH
38213: LD_INT 2
38215: GREATER
38216: AND
38217: IFFALSE 38240
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38219: LD_ADDR_VAR 0 18
38223: PUSH
38224: LD_INT 11
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_VAR 0 12
38238: ARRAY
38239: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38240: LD_VAR 0 18
38244: NOT
38245: IFFALSE 38265
38247: PUSH
38248: LD_INT 40
38250: PPUSH
38251: LD_VAR 0 16
38255: PPUSH
38256: CALL_OW 321
38260: PUSH
38261: LD_INT 2
38263: EQUAL
38264: AND
38265: IFFALSE 38301
38267: PUSH
38268: LD_INT 7
38270: PUSH
38271: LD_VAR 0 5
38275: IN
38276: IFTRUE 38288
38278: PUSH
38279: LD_INT 28
38281: PUSH
38282: LD_VAR 0 5
38286: IN
38287: OR
38288: IFTRUE 38300
38290: PUSH
38291: LD_INT 45
38293: PUSH
38294: LD_VAR 0 5
38298: IN
38299: OR
38300: AND
38301: IFFALSE 38555
// begin hex := GetHexInfo ( x , y ) ;
38303: LD_ADDR_VAR 0 4
38307: PUSH
38308: LD_VAR 0 10
38312: PPUSH
38313: LD_VAR 0 11
38317: PPUSH
38318: CALL_OW 546
38322: ST_TO_ADDR
// if hex [ 1 ] then
38323: LD_VAR 0 4
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: IFFALSE 38335
// exit ;
38333: GO 38742
// height := hex [ 2 ] ;
38335: LD_ADDR_VAR 0 15
38339: PUSH
38340: LD_VAR 0 4
38344: PUSH
38345: LD_INT 2
38347: ARRAY
38348: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38349: LD_ADDR_VAR 0 14
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: LD_INT 5
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: ST_TO_ADDR
// for i in tmp do
38372: LD_ADDR_VAR 0 8
38376: PUSH
38377: LD_VAR 0 14
38381: PUSH
38382: FOR_IN
38383: IFFALSE 38553
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_VAR 0 10
38394: PPUSH
38395: LD_VAR 0 8
38399: PPUSH
38400: LD_INT 5
38402: PPUSH
38403: CALL_OW 272
38407: PUSH
38408: LD_VAR 0 11
38412: PPUSH
38413: LD_VAR 0 8
38417: PPUSH
38418: LD_INT 5
38420: PPUSH
38421: CALL_OW 273
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38430: LD_VAR 0 9
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PPUSH
38439: LD_VAR 0 9
38443: PUSH
38444: LD_INT 2
38446: ARRAY
38447: PPUSH
38448: CALL_OW 488
38452: IFFALSE 38551
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38454: LD_ADDR_VAR 0 4
38458: PUSH
38459: LD_VAR 0 9
38463: PUSH
38464: LD_INT 1
38466: ARRAY
38467: PPUSH
38468: LD_VAR 0 9
38472: PUSH
38473: LD_INT 2
38475: ARRAY
38476: PPUSH
38477: CALL_OW 546
38481: ST_TO_ADDR
// if hex [ 1 ] then
38482: LD_VAR 0 4
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: IFFALSE 38494
// continue ;
38492: GO 38382
// h := hex [ 2 ] ;
38494: LD_ADDR_VAR 0 13
38498: PUSH
38499: LD_VAR 0 4
38503: PUSH
38504: LD_INT 2
38506: ARRAY
38507: ST_TO_ADDR
// if h + 7 < height then
38508: LD_VAR 0 13
38512: PUSH
38513: LD_INT 7
38515: PLUS
38516: PUSH
38517: LD_VAR 0 15
38521: LESS
38522: IFFALSE 38551
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38524: LD_ADDR_VAR 0 18
38528: PUSH
38529: LD_INT 7
38531: PUSH
38532: LD_INT 28
38534: PUSH
38535: LD_INT 45
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: LD_VAR 0 12
38547: ARRAY
38548: ST_TO_ADDR
// break ;
38549: GO 38553
// end ; end ; end ;
38551: GO 38382
38553: POP
38554: POP
// end ; if not weapon then
38555: LD_VAR 0 18
38559: NOT
38560: IFFALSE 38620
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38562: LD_ADDR_VAR 0 5
38566: PUSH
38567: LD_VAR 0 5
38571: PUSH
38572: LD_INT 11
38574: PUSH
38575: LD_INT 30
38577: PUSH
38578: LD_INT 49
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: DIFF
38586: ST_TO_ADDR
// if not list then
38587: LD_VAR 0 5
38591: NOT
38592: IFFALSE 38596
// exit ;
38594: GO 38742
// weapon := list [ rand ( 1 , list ) ] ;
38596: LD_ADDR_VAR 0 18
38600: PUSH
38601: LD_VAR 0 5
38605: PUSH
38606: LD_INT 1
38608: PPUSH
38609: LD_VAR 0 5
38613: PPUSH
38614: CALL_OW 12
38618: ARRAY
38619: ST_TO_ADDR
// end ; if weapon then
38620: LD_VAR 0 18
38624: IFFALSE 38742
// begin tmp := CostOfWeapon ( weapon ) ;
38626: LD_ADDR_VAR 0 14
38630: PUSH
38631: LD_VAR 0 18
38635: PPUSH
38636: CALL_OW 451
38640: ST_TO_ADDR
// j := GetBase ( tower ) ;
38641: LD_ADDR_VAR 0 9
38645: PUSH
38646: LD_VAR 0 1
38650: PPUSH
38651: CALL_OW 274
38655: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38656: LD_VAR 0 9
38660: PPUSH
38661: LD_INT 1
38663: PPUSH
38664: CALL_OW 275
38668: PUSH
38669: LD_VAR 0 14
38673: PUSH
38674: LD_INT 1
38676: ARRAY
38677: GREATEREQUAL
38678: IFFALSE 38704
38680: PUSH
38681: LD_VAR 0 9
38685: PPUSH
38686: LD_INT 2
38688: PPUSH
38689: CALL_OW 275
38693: PUSH
38694: LD_VAR 0 14
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: GREATEREQUAL
38703: AND
38704: IFFALSE 38730
38706: PUSH
38707: LD_VAR 0 9
38711: PPUSH
38712: LD_INT 3
38714: PPUSH
38715: CALL_OW 275
38719: PUSH
38720: LD_VAR 0 14
38724: PUSH
38725: LD_INT 3
38727: ARRAY
38728: GREATEREQUAL
38729: AND
38730: IFFALSE 38742
// result := weapon ;
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: LD_VAR 0 18
38741: ST_TO_ADDR
// end ; end ;
38742: LD_VAR 0 3
38746: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38747: LD_INT 0
38749: PPUSH
38750: PPUSH
// result := true ;
38751: LD_ADDR_VAR 0 3
38755: PUSH
38756: LD_INT 1
38758: ST_TO_ADDR
// if array1 = array2 then
38759: LD_VAR 0 1
38763: PUSH
38764: LD_VAR 0 2
38768: EQUAL
38769: IFFALSE 38829
// begin for i = 1 to array1 do
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: DOUBLE
38777: LD_INT 1
38779: DEC
38780: ST_TO_ADDR
38781: LD_VAR 0 1
38785: PUSH
38786: FOR_TO
38787: IFFALSE 38825
// if array1 [ i ] <> array2 [ i ] then
38789: LD_VAR 0 1
38793: PUSH
38794: LD_VAR 0 4
38798: ARRAY
38799: PUSH
38800: LD_VAR 0 2
38804: PUSH
38805: LD_VAR 0 4
38809: ARRAY
38810: NONEQUAL
38811: IFFALSE 38823
// begin result := false ;
38813: LD_ADDR_VAR 0 3
38817: PUSH
38818: LD_INT 0
38820: ST_TO_ADDR
// break ;
38821: GO 38825
// end ;
38823: GO 38786
38825: POP
38826: POP
// end else
38827: GO 38837
// result := false ;
38829: LD_ADDR_VAR 0 3
38833: PUSH
38834: LD_INT 0
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 3
38841: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
// if not array1 or not array2 then
38846: LD_VAR 0 1
38850: NOT
38851: IFTRUE 38860
38853: PUSH
38854: LD_VAR 0 2
38858: NOT
38859: OR
38860: IFFALSE 38864
// exit ;
38862: GO 38928
// result := true ;
38864: LD_ADDR_VAR 0 3
38868: PUSH
38869: LD_INT 1
38871: ST_TO_ADDR
// for i = 1 to array1 do
38872: LD_ADDR_VAR 0 4
38876: PUSH
38877: DOUBLE
38878: LD_INT 1
38880: DEC
38881: ST_TO_ADDR
38882: LD_VAR 0 1
38886: PUSH
38887: FOR_TO
38888: IFFALSE 38926
// if array1 [ i ] <> array2 [ i ] then
38890: LD_VAR 0 1
38894: PUSH
38895: LD_VAR 0 4
38899: ARRAY
38900: PUSH
38901: LD_VAR 0 2
38905: PUSH
38906: LD_VAR 0 4
38910: ARRAY
38911: NONEQUAL
38912: IFFALSE 38924
// begin result := false ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_INT 0
38921: ST_TO_ADDR
// break ;
38922: GO 38926
// end ;
38924: GO 38887
38926: POP
38927: POP
// end ;
38928: LD_VAR 0 3
38932: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
// pom := GetBase ( fac ) ;
38938: LD_ADDR_VAR 0 5
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 274
38952: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38953: LD_ADDR_VAR 0 4
38957: PUSH
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 1
38965: ARRAY
38966: PPUSH
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: PPUSH
38976: LD_VAR 0 2
38980: PUSH
38981: LD_INT 3
38983: ARRAY
38984: PPUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 4
38992: ARRAY
38993: PPUSH
38994: CALL_OW 449
38998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38999: LD_ADDR_VAR 0 3
39003: PUSH
39004: LD_VAR 0 5
39008: PPUSH
39009: LD_INT 1
39011: PPUSH
39012: CALL_OW 275
39016: PUSH
39017: LD_VAR 0 4
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: GREATEREQUAL
39026: IFFALSE 39052
39028: PUSH
39029: LD_VAR 0 5
39033: PPUSH
39034: LD_INT 2
39036: PPUSH
39037: CALL_OW 275
39041: PUSH
39042: LD_VAR 0 4
39046: PUSH
39047: LD_INT 2
39049: ARRAY
39050: GREATEREQUAL
39051: AND
39052: IFFALSE 39078
39054: PUSH
39055: LD_VAR 0 5
39059: PPUSH
39060: LD_INT 3
39062: PPUSH
39063: CALL_OW 275
39067: PUSH
39068: LD_VAR 0 4
39072: PUSH
39073: LD_INT 3
39075: ARRAY
39076: GREATEREQUAL
39077: AND
39078: ST_TO_ADDR
// end ;
39079: LD_VAR 0 3
39083: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39084: LD_INT 0
39086: PPUSH
39087: PPUSH
39088: PPUSH
39089: PPUSH
// pom := GetBase ( building ) ;
39090: LD_ADDR_VAR 0 3
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 274
39104: ST_TO_ADDR
// if not pom then
39105: LD_VAR 0 3
39109: NOT
39110: IFFALSE 39114
// exit ;
39112: GO 39288
// btype := GetBType ( building ) ;
39114: LD_ADDR_VAR 0 5
39118: PUSH
39119: LD_VAR 0 1
39123: PPUSH
39124: CALL_OW 266
39128: ST_TO_ADDR
// if btype = b_armoury then
39129: LD_VAR 0 5
39133: PUSH
39134: LD_INT 4
39136: EQUAL
39137: IFFALSE 39147
// btype := b_barracks ;
39139: LD_ADDR_VAR 0 5
39143: PUSH
39144: LD_INT 5
39146: ST_TO_ADDR
// if btype = b_depot then
39147: LD_VAR 0 5
39151: PUSH
39152: LD_INT 0
39154: EQUAL
39155: IFFALSE 39165
// btype := b_warehouse ;
39157: LD_ADDR_VAR 0 5
39161: PUSH
39162: LD_INT 1
39164: ST_TO_ADDR
// if btype = b_workshop then
39165: LD_VAR 0 5
39169: PUSH
39170: LD_INT 2
39172: EQUAL
39173: IFFALSE 39183
// btype := b_factory ;
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: LD_INT 3
39182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39183: LD_ADDR_VAR 0 4
39187: PUSH
39188: LD_VAR 0 5
39192: PPUSH
39193: LD_VAR 0 1
39197: PPUSH
39198: CALL_OW 248
39202: PPUSH
39203: CALL_OW 450
39207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39208: LD_ADDR_VAR 0 2
39212: PUSH
39213: LD_VAR 0 3
39217: PPUSH
39218: LD_INT 1
39220: PPUSH
39221: CALL_OW 275
39225: PUSH
39226: LD_VAR 0 4
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: GREATEREQUAL
39235: IFFALSE 39261
39237: PUSH
39238: LD_VAR 0 3
39242: PPUSH
39243: LD_INT 2
39245: PPUSH
39246: CALL_OW 275
39250: PUSH
39251: LD_VAR 0 4
39255: PUSH
39256: LD_INT 2
39258: ARRAY
39259: GREATEREQUAL
39260: AND
39261: IFFALSE 39287
39263: PUSH
39264: LD_VAR 0 3
39268: PPUSH
39269: LD_INT 3
39271: PPUSH
39272: CALL_OW 275
39276: PUSH
39277: LD_VAR 0 4
39281: PUSH
39282: LD_INT 3
39284: ARRAY
39285: GREATEREQUAL
39286: AND
39287: ST_TO_ADDR
// end ;
39288: LD_VAR 0 2
39292: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39293: LD_INT 0
39295: PPUSH
39296: PPUSH
39297: PPUSH
// pom := GetBase ( building ) ;
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 274
39312: ST_TO_ADDR
// if not pom then
39313: LD_VAR 0 4
39317: NOT
39318: IFFALSE 39322
// exit ;
39320: GO 39427
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 2
39331: PPUSH
39332: LD_VAR 0 1
39336: PPUSH
39337: CALL_OW 248
39341: PPUSH
39342: CALL_OW 450
39346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39347: LD_ADDR_VAR 0 3
39351: PUSH
39352: LD_VAR 0 4
39356: PPUSH
39357: LD_INT 1
39359: PPUSH
39360: CALL_OW 275
39364: PUSH
39365: LD_VAR 0 5
39369: PUSH
39370: LD_INT 1
39372: ARRAY
39373: GREATEREQUAL
39374: IFFALSE 39400
39376: PUSH
39377: LD_VAR 0 4
39381: PPUSH
39382: LD_INT 2
39384: PPUSH
39385: CALL_OW 275
39389: PUSH
39390: LD_VAR 0 5
39394: PUSH
39395: LD_INT 2
39397: ARRAY
39398: GREATEREQUAL
39399: AND
39400: IFFALSE 39426
39402: PUSH
39403: LD_VAR 0 4
39407: PPUSH
39408: LD_INT 3
39410: PPUSH
39411: CALL_OW 275
39415: PUSH
39416: LD_VAR 0 5
39420: PUSH
39421: LD_INT 3
39423: ARRAY
39424: GREATEREQUAL
39425: AND
39426: ST_TO_ADDR
// end ;
39427: LD_VAR 0 3
39431: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39432: LD_INT 0
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
// result := false ;
39445: LD_ADDR_VAR 0 8
39449: PUSH
39450: LD_INT 0
39452: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39453: LD_VAR 0 5
39457: NOT
39458: IFTRUE 39467
39460: PUSH
39461: LD_VAR 0 1
39465: NOT
39466: OR
39467: IFTRUE 39476
39469: PUSH
39470: LD_VAR 0 2
39474: NOT
39475: OR
39476: IFTRUE 39485
39478: PUSH
39479: LD_VAR 0 3
39483: NOT
39484: OR
39485: IFFALSE 39489
// exit ;
39487: GO 40315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39489: LD_ADDR_VAR 0 14
39493: PUSH
39494: LD_VAR 0 1
39498: PPUSH
39499: LD_VAR 0 2
39503: PPUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: LD_VAR 0 4
39513: PPUSH
39514: LD_VAR 0 5
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: CALL_OW 248
39527: PPUSH
39528: LD_INT 0
39530: PPUSH
39531: CALL 41596 0 6
39535: ST_TO_ADDR
// if not hexes then
39536: LD_VAR 0 14
39540: NOT
39541: IFFALSE 39545
// exit ;
39543: GO 40315
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39545: LD_ADDR_VAR 0 17
39549: PUSH
39550: LD_VAR 0 5
39554: PPUSH
39555: LD_INT 22
39557: PUSH
39558: LD_VAR 0 13
39562: PPUSH
39563: CALL_OW 255
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: PUSH
39575: LD_INT 30
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 30
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PPUSH
39604: CALL_OW 72
39608: ST_TO_ADDR
// for i = 1 to hexes do
39609: LD_ADDR_VAR 0 9
39613: PUSH
39614: DOUBLE
39615: LD_INT 1
39617: DEC
39618: ST_TO_ADDR
39619: LD_VAR 0 14
39623: PUSH
39624: FOR_TO
39625: IFFALSE 40313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39627: LD_ADDR_VAR 0 13
39631: PUSH
39632: LD_VAR 0 14
39636: PUSH
39637: LD_VAR 0 9
39641: ARRAY
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: PPUSH
39647: LD_VAR 0 14
39651: PUSH
39652: LD_VAR 0 9
39656: ARRAY
39657: PUSH
39658: LD_INT 2
39660: ARRAY
39661: PPUSH
39662: CALL_OW 428
39666: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39667: LD_VAR 0 14
39671: PUSH
39672: LD_VAR 0 9
39676: ARRAY
39677: PUSH
39678: LD_INT 1
39680: ARRAY
39681: PPUSH
39682: LD_VAR 0 14
39686: PUSH
39687: LD_VAR 0 9
39691: ARRAY
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: PPUSH
39697: CALL_OW 351
39701: IFTRUE 39740
39703: PUSH
39704: LD_VAR 0 14
39708: PUSH
39709: LD_VAR 0 9
39713: ARRAY
39714: PUSH
39715: LD_INT 1
39717: ARRAY
39718: PPUSH
39719: LD_VAR 0 14
39723: PUSH
39724: LD_VAR 0 9
39728: ARRAY
39729: PUSH
39730: LD_INT 2
39732: ARRAY
39733: PPUSH
39734: CALL_OW 488
39738: NOT
39739: OR
39740: IFTRUE 39757
39742: PUSH
39743: LD_VAR 0 13
39747: PPUSH
39748: CALL_OW 247
39752: PUSH
39753: LD_INT 3
39755: EQUAL
39756: OR
39757: IFFALSE 39763
// exit ;
39759: POP
39760: POP
39761: GO 40315
// if not tmp then
39763: LD_VAR 0 13
39767: NOT
39768: IFFALSE 39772
// continue ;
39770: GO 39624
// result := true ;
39772: LD_ADDR_VAR 0 8
39776: PUSH
39777: LD_INT 1
39779: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39780: LD_VAR 0 6
39784: IFFALSE 39801
39786: PUSH
39787: LD_VAR 0 13
39791: PPUSH
39792: CALL_OW 247
39796: PUSH
39797: LD_INT 2
39799: EQUAL
39800: AND
39801: IFFALSE 39818
39803: PUSH
39804: LD_VAR 0 13
39808: PPUSH
39809: CALL_OW 263
39813: PUSH
39814: LD_INT 1
39816: EQUAL
39817: AND
39818: IFFALSE 39982
// begin if IsDrivenBy ( tmp ) then
39820: LD_VAR 0 13
39824: PPUSH
39825: CALL_OW 311
39829: IFFALSE 39833
// continue ;
39831: GO 39624
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39833: LD_VAR 0 6
39837: PPUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 60
39843: PUSH
39844: EMPTY
39845: LIST
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: LD_INT 55
39856: PUSH
39857: EMPTY
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PPUSH
39868: CALL_OW 72
39872: IFFALSE 39980
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39874: LD_ADDR_VAR 0 18
39878: PUSH
39879: LD_VAR 0 6
39883: PPUSH
39884: LD_INT 3
39886: PUSH
39887: LD_INT 60
39889: PUSH
39890: EMPTY
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 3
39899: PUSH
39900: LD_INT 55
39902: PUSH
39903: EMPTY
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PPUSH
39914: CALL_OW 72
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: ST_TO_ADDR
// if IsInUnit ( driver ) then
39923: LD_VAR 0 18
39927: PPUSH
39928: CALL_OW 310
39932: IFFALSE 39943
// ComExit ( driver ) ;
39934: LD_VAR 0 18
39938: PPUSH
39939: CALL 65586 0 1
// AddComEnterUnit ( driver , tmp ) ;
39943: LD_VAR 0 18
39947: PPUSH
39948: LD_VAR 0 13
39952: PPUSH
39953: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39957: LD_VAR 0 18
39961: PPUSH
39962: LD_VAR 0 7
39966: PPUSH
39967: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39971: LD_VAR 0 18
39975: PPUSH
39976: CALL_OW 181
// end ; continue ;
39980: GO 39624
// end ; if not cleaners or not tmp in cleaners then
39982: LD_VAR 0 6
39986: NOT
39987: IFTRUE 40002
39989: PUSH
39990: LD_VAR 0 13
39994: PUSH
39995: LD_VAR 0 6
39999: IN
40000: NOT
40001: OR
40002: IFFALSE 40311
// begin if dep then
40004: LD_VAR 0 17
40008: IFFALSE 40144
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40010: LD_ADDR_VAR 0 16
40014: PUSH
40015: LD_VAR 0 17
40019: PUSH
40020: LD_INT 1
40022: ARRAY
40023: PPUSH
40024: CALL_OW 250
40028: PPUSH
40029: LD_VAR 0 17
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PPUSH
40038: CALL_OW 254
40042: PPUSH
40043: LD_INT 5
40045: PPUSH
40046: CALL_OW 272
40050: PUSH
40051: LD_VAR 0 17
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: PPUSH
40060: CALL_OW 251
40064: PPUSH
40065: LD_VAR 0 17
40069: PUSH
40070: LD_INT 1
40072: ARRAY
40073: PPUSH
40074: CALL_OW 254
40078: PPUSH
40079: LD_INT 5
40081: PPUSH
40082: CALL_OW 273
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40091: LD_VAR 0 16
40095: PUSH
40096: LD_INT 1
40098: ARRAY
40099: PPUSH
40100: LD_VAR 0 16
40104: PUSH
40105: LD_INT 2
40107: ARRAY
40108: PPUSH
40109: CALL_OW 488
40113: IFFALSE 40144
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40115: LD_VAR 0 13
40119: PPUSH
40120: LD_VAR 0 16
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 16
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: PPUSH
40138: CALL_OW 111
// continue ;
40142: GO 39624
// end ; end ; r := GetDir ( tmp ) ;
40144: LD_ADDR_VAR 0 15
40148: PUSH
40149: LD_VAR 0 13
40153: PPUSH
40154: CALL_OW 254
40158: ST_TO_ADDR
// if r = 5 then
40159: LD_VAR 0 15
40163: PUSH
40164: LD_INT 5
40166: EQUAL
40167: IFFALSE 40177
// r := 0 ;
40169: LD_ADDR_VAR 0 15
40173: PUSH
40174: LD_INT 0
40176: ST_TO_ADDR
// for j = r to 5 do
40177: LD_ADDR_VAR 0 10
40181: PUSH
40182: DOUBLE
40183: LD_VAR 0 15
40187: DEC
40188: ST_TO_ADDR
40189: LD_INT 5
40191: PUSH
40192: FOR_TO
40193: IFFALSE 40309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40195: LD_ADDR_VAR 0 11
40199: PUSH
40200: LD_VAR 0 13
40204: PPUSH
40205: CALL_OW 250
40209: PPUSH
40210: LD_VAR 0 10
40214: PPUSH
40215: LD_INT 2
40217: PPUSH
40218: CALL_OW 272
40222: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40223: LD_ADDR_VAR 0 12
40227: PUSH
40228: LD_VAR 0 13
40232: PPUSH
40233: CALL_OW 251
40237: PPUSH
40238: LD_VAR 0 10
40242: PPUSH
40243: LD_INT 2
40245: PPUSH
40246: CALL_OW 273
40250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40251: LD_VAR 0 11
40255: PPUSH
40256: LD_VAR 0 12
40260: PPUSH
40261: CALL_OW 488
40265: IFFALSE 40284
40267: PUSH
40268: LD_VAR 0 11
40272: PPUSH
40273: LD_VAR 0 12
40277: PPUSH
40278: CALL_OW 428
40282: NOT
40283: AND
40284: IFFALSE 40307
// begin ComMoveXY ( tmp , _x , _y ) ;
40286: LD_VAR 0 13
40290: PPUSH
40291: LD_VAR 0 11
40295: PPUSH
40296: LD_VAR 0 12
40300: PPUSH
40301: CALL_OW 111
// break ;
40305: GO 40309
// end ; end ;
40307: GO 40192
40309: POP
40310: POP
// end ; end ;
40311: GO 39624
40313: POP
40314: POP
// end ;
40315: LD_VAR 0 8
40319: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40320: LD_INT 0
40322: PPUSH
// result := true ;
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_INT 1
40330: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40331: LD_VAR 0 2
40335: PUSH
40336: LD_INT 24
40338: DOUBLE
40339: EQUAL
40340: IFTRUE 40350
40342: LD_INT 33
40344: DOUBLE
40345: EQUAL
40346: IFTRUE 40350
40348: GO 40375
40350: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40351: LD_ADDR_VAR 0 3
40355: PUSH
40356: LD_INT 32
40358: PPUSH
40359: LD_VAR 0 1
40363: PPUSH
40364: CALL_OW 321
40368: PUSH
40369: LD_INT 2
40371: EQUAL
40372: ST_TO_ADDR
40373: GO 40691
40375: LD_INT 20
40377: DOUBLE
40378: EQUAL
40379: IFTRUE 40383
40381: GO 40408
40383: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40384: LD_ADDR_VAR 0 3
40388: PUSH
40389: LD_INT 6
40391: PPUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: CALL_OW 321
40401: PUSH
40402: LD_INT 2
40404: EQUAL
40405: ST_TO_ADDR
40406: GO 40691
40408: LD_INT 22
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40422
40414: LD_INT 36
40416: DOUBLE
40417: EQUAL
40418: IFTRUE 40422
40420: GO 40447
40422: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40423: LD_ADDR_VAR 0 3
40427: PUSH
40428: LD_INT 15
40430: PPUSH
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 321
40440: PUSH
40441: LD_INT 2
40443: EQUAL
40444: ST_TO_ADDR
40445: GO 40691
40447: LD_INT 30
40449: DOUBLE
40450: EQUAL
40451: IFTRUE 40455
40453: GO 40480
40455: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40456: LD_ADDR_VAR 0 3
40460: PUSH
40461: LD_INT 20
40463: PPUSH
40464: LD_VAR 0 1
40468: PPUSH
40469: CALL_OW 321
40473: PUSH
40474: LD_INT 2
40476: EQUAL
40477: ST_TO_ADDR
40478: GO 40691
40480: LD_INT 28
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40494
40486: LD_INT 21
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40519
40494: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40495: LD_ADDR_VAR 0 3
40499: PUSH
40500: LD_INT 21
40502: PPUSH
40503: LD_VAR 0 1
40507: PPUSH
40508: CALL_OW 321
40512: PUSH
40513: LD_INT 2
40515: EQUAL
40516: ST_TO_ADDR
40517: GO 40691
40519: LD_INT 16
40521: DOUBLE
40522: EQUAL
40523: IFTRUE 40527
40525: GO 40552
40527: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40528: LD_ADDR_VAR 0 3
40532: PUSH
40533: LD_INT 84
40535: PPUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 321
40545: PUSH
40546: LD_INT 2
40548: EQUAL
40549: ST_TO_ADDR
40550: GO 40691
40552: LD_INT 19
40554: DOUBLE
40555: EQUAL
40556: IFTRUE 40566
40558: LD_INT 23
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40591
40566: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_INT 83
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 321
40584: PUSH
40585: LD_INT 2
40587: EQUAL
40588: ST_TO_ADDR
40589: GO 40691
40591: LD_INT 17
40593: DOUBLE
40594: EQUAL
40595: IFTRUE 40599
40597: GO 40624
40599: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40600: LD_ADDR_VAR 0 3
40604: PUSH
40605: LD_INT 39
40607: PPUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 321
40617: PUSH
40618: LD_INT 2
40620: EQUAL
40621: ST_TO_ADDR
40622: GO 40691
40624: LD_INT 18
40626: DOUBLE
40627: EQUAL
40628: IFTRUE 40632
40630: GO 40657
40632: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_INT 40
40640: PPUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 321
40650: PUSH
40651: LD_INT 2
40653: EQUAL
40654: ST_TO_ADDR
40655: GO 40691
40657: LD_INT 27
40659: DOUBLE
40660: EQUAL
40661: IFTRUE 40665
40663: GO 40690
40665: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40666: LD_ADDR_VAR 0 3
40670: PUSH
40671: LD_INT 35
40673: PPUSH
40674: LD_VAR 0 1
40678: PPUSH
40679: CALL_OW 321
40683: PUSH
40684: LD_INT 2
40686: EQUAL
40687: ST_TO_ADDR
40688: GO 40691
40690: POP
// end ;
40691: LD_VAR 0 3
40695: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40696: LD_INT 0
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
// result := false ;
40709: LD_ADDR_VAR 0 6
40713: PUSH
40714: LD_INT 0
40716: ST_TO_ADDR
// if btype = b_depot then
40717: LD_VAR 0 2
40721: PUSH
40722: LD_INT 0
40724: EQUAL
40725: IFFALSE 40737
// begin result := true ;
40727: LD_ADDR_VAR 0 6
40731: PUSH
40732: LD_INT 1
40734: ST_TO_ADDR
// exit ;
40735: GO 41591
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40737: LD_VAR 0 1
40741: NOT
40742: IFTRUE 40767
40744: PUSH
40745: LD_VAR 0 1
40749: PPUSH
40750: CALL_OW 266
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: IN
40765: NOT
40766: OR
40767: IFTRUE 40776
40769: PUSH
40770: LD_VAR 0 2
40774: NOT
40775: OR
40776: IFTRUE 40812
40778: PUSH
40779: LD_VAR 0 5
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 4
40798: PUSH
40799: LD_INT 5
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: IN
40810: NOT
40811: OR
40812: IFTRUE 40831
40814: PUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: LD_VAR 0 4
40824: PPUSH
40825: CALL_OW 488
40829: NOT
40830: OR
40831: IFFALSE 40835
// exit ;
40833: GO 41591
// side := GetSide ( depot ) ;
40835: LD_ADDR_VAR 0 9
40839: PUSH
40840: LD_VAR 0 1
40844: PPUSH
40845: CALL_OW 255
40849: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40850: LD_VAR 0 9
40854: PPUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: CALL 40320 0 2
40864: NOT
40865: IFFALSE 40869
// exit ;
40867: GO 41591
// pom := GetBase ( depot ) ;
40869: LD_ADDR_VAR 0 10
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 274
40883: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40884: LD_ADDR_VAR 0 11
40888: PUSH
40889: LD_VAR 0 2
40893: PPUSH
40894: LD_VAR 0 1
40898: PPUSH
40899: CALL_OW 248
40903: PPUSH
40904: CALL_OW 450
40908: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40909: LD_VAR 0 10
40913: PPUSH
40914: LD_INT 1
40916: PPUSH
40917: CALL_OW 275
40921: PUSH
40922: LD_VAR 0 11
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: GREATEREQUAL
40931: IFFALSE 40957
40933: PUSH
40934: LD_VAR 0 10
40938: PPUSH
40939: LD_INT 2
40941: PPUSH
40942: CALL_OW 275
40946: PUSH
40947: LD_VAR 0 11
40951: PUSH
40952: LD_INT 2
40954: ARRAY
40955: GREATEREQUAL
40956: AND
40957: IFFALSE 40983
40959: PUSH
40960: LD_VAR 0 10
40964: PPUSH
40965: LD_INT 3
40967: PPUSH
40968: CALL_OW 275
40972: PUSH
40973: LD_VAR 0 11
40977: PUSH
40978: LD_INT 3
40980: ARRAY
40981: GREATEREQUAL
40982: AND
40983: NOT
40984: IFFALSE 40988
// exit ;
40986: GO 41591
// if GetBType ( depot ) = b_depot then
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 266
40997: PUSH
40998: LD_INT 0
41000: EQUAL
41001: IFFALSE 41013
// dist := 28 else
41003: LD_ADDR_VAR 0 14
41007: PUSH
41008: LD_INT 28
41010: ST_TO_ADDR
41011: GO 41021
// dist := 36 ;
41013: LD_ADDR_VAR 0 14
41017: PUSH
41018: LD_INT 36
41020: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41021: LD_VAR 0 1
41025: PPUSH
41026: LD_VAR 0 3
41030: PPUSH
41031: LD_VAR 0 4
41035: PPUSH
41036: CALL_OW 297
41040: PUSH
41041: LD_VAR 0 14
41045: GREATER
41046: IFFALSE 41050
// exit ;
41048: GO 41591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41050: LD_ADDR_VAR 0 12
41054: PUSH
41055: LD_VAR 0 2
41059: PPUSH
41060: LD_VAR 0 3
41064: PPUSH
41065: LD_VAR 0 4
41069: PPUSH
41070: LD_VAR 0 5
41074: PPUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 248
41084: PPUSH
41085: LD_INT 0
41087: PPUSH
41088: CALL 41596 0 6
41092: ST_TO_ADDR
// if not hexes then
41093: LD_VAR 0 12
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41591
// hex := GetHexInfo ( x , y ) ;
41102: LD_ADDR_VAR 0 15
41106: PUSH
41107: LD_VAR 0 3
41111: PPUSH
41112: LD_VAR 0 4
41116: PPUSH
41117: CALL_OW 546
41121: ST_TO_ADDR
// if hex [ 1 ] then
41122: LD_VAR 0 15
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: IFFALSE 41134
// exit ;
41132: GO 41591
// height := hex [ 2 ] ;
41134: LD_ADDR_VAR 0 13
41138: PUSH
41139: LD_VAR 0 15
41143: PUSH
41144: LD_INT 2
41146: ARRAY
41147: ST_TO_ADDR
// for i = 1 to hexes do
41148: LD_ADDR_VAR 0 7
41152: PUSH
41153: DOUBLE
41154: LD_INT 1
41156: DEC
41157: ST_TO_ADDR
41158: LD_VAR 0 12
41162: PUSH
41163: FOR_TO
41164: IFFALSE 41508
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41166: LD_VAR 0 12
41170: PUSH
41171: LD_VAR 0 7
41175: ARRAY
41176: PUSH
41177: LD_INT 1
41179: ARRAY
41180: PPUSH
41181: LD_VAR 0 12
41185: PUSH
41186: LD_VAR 0 7
41190: ARRAY
41191: PUSH
41192: LD_INT 2
41194: ARRAY
41195: PPUSH
41196: CALL_OW 488
41200: NOT
41201: IFTRUE 41243
41203: PUSH
41204: LD_VAR 0 12
41208: PUSH
41209: LD_VAR 0 7
41213: ARRAY
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: PPUSH
41219: LD_VAR 0 12
41223: PUSH
41224: LD_VAR 0 7
41228: ARRAY
41229: PUSH
41230: LD_INT 2
41232: ARRAY
41233: PPUSH
41234: CALL_OW 428
41238: PUSH
41239: LD_INT 0
41241: GREATER
41242: OR
41243: IFTRUE 41281
41245: PUSH
41246: LD_VAR 0 12
41250: PUSH
41251: LD_VAR 0 7
41255: ARRAY
41256: PUSH
41257: LD_INT 1
41259: ARRAY
41260: PPUSH
41261: LD_VAR 0 12
41265: PUSH
41266: LD_VAR 0 7
41270: ARRAY
41271: PUSH
41272: LD_INT 2
41274: ARRAY
41275: PPUSH
41276: CALL_OW 351
41280: OR
41281: IFFALSE 41287
// exit ;
41283: POP
41284: POP
41285: GO 41591
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41287: LD_ADDR_VAR 0 8
41291: PUSH
41292: LD_VAR 0 12
41296: PUSH
41297: LD_VAR 0 7
41301: ARRAY
41302: PUSH
41303: LD_INT 1
41305: ARRAY
41306: PPUSH
41307: LD_VAR 0 12
41311: PUSH
41312: LD_VAR 0 7
41316: ARRAY
41317: PUSH
41318: LD_INT 2
41320: ARRAY
41321: PPUSH
41322: CALL_OW 546
41326: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41327: LD_VAR 0 8
41331: PUSH
41332: LD_INT 1
41334: ARRAY
41335: IFTRUE 41357
41337: PUSH
41338: LD_VAR 0 8
41342: PUSH
41343: LD_INT 2
41345: ARRAY
41346: PUSH
41347: LD_VAR 0 13
41351: PUSH
41352: LD_INT 2
41354: PLUS
41355: GREATER
41356: OR
41357: IFTRUE 41379
41359: PUSH
41360: LD_VAR 0 8
41364: PUSH
41365: LD_INT 2
41367: ARRAY
41368: PUSH
41369: LD_VAR 0 13
41373: PUSH
41374: LD_INT 2
41376: MINUS
41377: LESS
41378: OR
41379: IFTRUE 41447
41381: PUSH
41382: LD_VAR 0 8
41386: PUSH
41387: LD_INT 3
41389: ARRAY
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 8
41396: PUSH
41397: LD_INT 9
41399: PUSH
41400: LD_INT 10
41402: PUSH
41403: LD_INT 11
41405: PUSH
41406: LD_INT 12
41408: PUSH
41409: LD_INT 13
41411: PUSH
41412: LD_INT 16
41414: PUSH
41415: LD_INT 17
41417: PUSH
41418: LD_INT 18
41420: PUSH
41421: LD_INT 19
41423: PUSH
41424: LD_INT 20
41426: PUSH
41427: LD_INT 21
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: IN
41445: NOT
41446: OR
41447: IFTRUE 41460
41449: PUSH
41450: LD_VAR 0 8
41454: PUSH
41455: LD_INT 5
41457: ARRAY
41458: NOT
41459: OR
41460: IFTRUE 41500
41462: PUSH
41463: LD_VAR 0 8
41467: PUSH
41468: LD_INT 6
41470: ARRAY
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 7
41480: PUSH
41481: LD_INT 9
41483: PUSH
41484: LD_INT 10
41486: PUSH
41487: LD_INT 11
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: IN
41498: NOT
41499: OR
41500: IFFALSE 41506
// exit ;
41502: POP
41503: POP
41504: GO 41591
// end ;
41506: GO 41163
41508: POP
41509: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41510: LD_VAR 0 9
41514: PPUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: LD_VAR 0 4
41524: PPUSH
41525: LD_INT 20
41527: PPUSH
41528: CALL 33410 0 4
41532: PUSH
41533: LD_INT 4
41535: ARRAY
41536: IFFALSE 41540
// exit ;
41538: GO 41591
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41540: LD_VAR 0 2
41544: PUSH
41545: LD_INT 29
41547: PUSH
41548: LD_INT 30
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: IN
41555: IFFALSE 41579
41557: PUSH
41558: LD_VAR 0 3
41562: PPUSH
41563: LD_VAR 0 4
41567: PPUSH
41568: LD_VAR 0 9
41572: PPUSH
41573: CALL_OW 440
41577: NOT
41578: AND
41579: IFFALSE 41583
// exit ;
41581: GO 41591
// result := true ;
41583: LD_ADDR_VAR 0 6
41587: PUSH
41588: LD_INT 1
41590: ST_TO_ADDR
// end ;
41591: LD_VAR 0 6
41595: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41596: LD_INT 0
41598: PPUSH
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
41605: PPUSH
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
// result = [ ] ;
41656: LD_ADDR_VAR 0 7
41660: PUSH
41661: EMPTY
41662: ST_TO_ADDR
// temp_list = [ ] ;
41663: LD_ADDR_VAR 0 9
41667: PUSH
41668: EMPTY
41669: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41670: LD_VAR 0 4
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: LD_INT 4
41689: PUSH
41690: LD_INT 5
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: IN
41701: NOT
41702: IFTRUE 41745
41704: PUSH
41705: LD_VAR 0 1
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: IN
41720: IFFALSE 41744
41722: PUSH
41723: LD_VAR 0 5
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: IN
41742: NOT
41743: AND
41744: OR
41745: IFFALSE 41749
// exit ;
41747: GO 60148
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41749: LD_VAR 0 1
41753: PUSH
41754: LD_INT 6
41756: PUSH
41757: LD_INT 7
41759: PUSH
41760: LD_INT 8
41762: PUSH
41763: LD_INT 13
41765: PUSH
41766: LD_INT 12
41768: PUSH
41769: LD_INT 15
41771: PUSH
41772: LD_INT 11
41774: PUSH
41775: LD_INT 14
41777: PUSH
41778: LD_INT 10
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: IN
41792: IFFALSE 41802
// btype = b_lab ;
41794: LD_ADDR_VAR 0 1
41798: PUSH
41799: LD_INT 6
41801: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41802: LD_VAR 0 6
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: IN
41821: NOT
41822: IFTRUE 41890
41824: PUSH
41825: LD_VAR 0 1
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 6
41844: PUSH
41845: LD_INT 36
41847: PUSH
41848: LD_INT 4
41850: PUSH
41851: LD_INT 5
41853: PUSH
41854: LD_INT 31
41856: PUSH
41857: LD_INT 32
41859: PUSH
41860: LD_INT 33
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: IN
41876: NOT
41877: IFFALSE 41889
41879: PUSH
41880: LD_VAR 0 6
41884: PUSH
41885: LD_INT 1
41887: EQUAL
41888: AND
41889: OR
41890: IFTRUE 41922
41892: PUSH
41893: LD_VAR 0 1
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: IN
41908: NOT
41909: IFFALSE 41921
41911: PUSH
41912: LD_VAR 0 6
41916: PUSH
41917: LD_INT 2
41919: EQUAL
41920: AND
41921: OR
41922: IFFALSE 41932
// mode = 0 ;
41924: LD_ADDR_VAR 0 6
41928: PUSH
41929: LD_INT 0
41931: ST_TO_ADDR
// case mode of 0 :
41932: LD_VAR 0 6
41936: PUSH
41937: LD_INT 0
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41945
41943: GO 53398
41945: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41946: LD_ADDR_VAR 0 11
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42139: LD_ADDR_VAR 0 12
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42335: LD_ADDR_VAR 0 13
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42534: LD_ADDR_VAR 0 14
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 3
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42730: LD_ADDR_VAR 0 15
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 2
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42923: LD_ADDR_VAR 0 16
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 2
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43116: LD_ADDR_VAR 0 17
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43346: LD_ADDR_VAR 0 18
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43576: LD_ADDR_VAR 0 19
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43806: LD_ADDR_VAR 0 20
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 2
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44036: LD_ADDR_VAR 0 21
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: NEG
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44266: LD_ADDR_VAR 0 22
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 2
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44496: LD_ADDR_VAR 0 23
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 3
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 3
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44776: LD_ADDR_VAR 0 24
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45052: LD_ADDR_VAR 0 25
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45326: LD_ADDR_VAR 0 26
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 3
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45602: LD_ADDR_VAR 0 27
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45882: LD_ADDR_VAR 0 28
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 2
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 3
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: LD_INT 2
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46164: LD_ADDR_VAR 0 29
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46443: LD_ADDR_VAR 0 30
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46721: LD_ADDR_VAR 0 31
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46999: LD_ADDR_VAR 0 32
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 3
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47277: LD_ADDR_VAR 0 33
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 0
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: NEG
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47556: LD_ADDR_VAR 0 34
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 2
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47836: LD_ADDR_VAR 0 35
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: NEG
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47948: LD_ADDR_VAR 0 36
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48060: LD_ADDR_VAR 0 37
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48172: LD_ADDR_VAR 0 38
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48284: LD_ADDR_VAR 0 39
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48396: LD_ADDR_VAR 0 40
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48508: LD_ADDR_VAR 0 41
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 3
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 3
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48858: LD_ADDR_VAR 0 42
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49208: LD_ADDR_VAR 0 43
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 3
49412: NEG
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 3
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49556: LD_ADDR_VAR 0 44
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 3
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 3
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49906: LD_ADDR_VAR 0 45
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50256: LD_ADDR_VAR 0 46
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 3
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 3
50552: NEG
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50604: LD_ADDR_VAR 0 47
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: NEG
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50755: LD_ADDR_VAR 0 48
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50902: LD_ADDR_VAR 0 49
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51046: LD_ADDR_VAR 0 50
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51190: LD_ADDR_VAR 0 51
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51337: LD_ADDR_VAR 0 52
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51488: LD_ADDR_VAR 0 53
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51718: LD_ADDR_VAR 0 54
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51948: LD_ADDR_VAR 0 55
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52178: LD_ADDR_VAR 0 56
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52408: LD_ADDR_VAR 0 57
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: LD_INT 1
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52638: LD_ADDR_VAR 0 58
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52868: LD_ADDR_VAR 0 59
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52956: LD_ADDR_VAR 0 60
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53044: LD_ADDR_VAR 0 61
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53132: LD_ADDR_VAR 0 62
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53220: LD_ADDR_VAR 0 63
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53308: LD_ADDR_VAR 0 64
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// end ; 1 :
53396: GO 59293
53398: LD_INT 1
53400: DOUBLE
53401: EQUAL
53402: IFTRUE 53406
53404: GO 56029
53406: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53407: LD_ADDR_VAR 0 11
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53451: LD_ADDR_VAR 0 12
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53492: LD_ADDR_VAR 0 13
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 3
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53532: LD_ADDR_VAR 0 14
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53573: LD_ADDR_VAR 0 15
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53617: LD_ADDR_VAR 0 16
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53663: LD_ADDR_VAR 0 17
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53707: LD_ADDR_VAR 0 18
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53748: LD_ADDR_VAR 0 19
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53788: LD_ADDR_VAR 0 20
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53829: LD_ADDR_VAR 0 21
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53873: LD_ADDR_VAR 0 22
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53919: LD_ADDR_VAR 0 23
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53963: LD_ADDR_VAR 0 24
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 4
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54004: LD_ADDR_VAR 0 25
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 4
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54044: LD_ADDR_VAR 0 26
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 4
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54085: LD_ADDR_VAR 0 27
54089: PUSH
54090: LD_INT 3
54092: NEG
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 3
54103: NEG
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 4
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54129: LD_ADDR_VAR 0 28
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: LD_INT 3
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 4
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: NEG
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54175: LD_ADDR_VAR 0 29
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 3
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 4
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 5
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 5
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 6
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: LD_INT 6
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: LD_INT 5
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54330: LD_ADDR_VAR 0 30
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 4
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 4
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 4
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 5
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 5
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 5
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 6
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 6
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54473: LD_ADDR_VAR 0 31
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: LD_INT 3
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 4
54520: PUSH
54521: LD_INT 4
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 4
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: LD_INT 4
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 5
54550: PUSH
54551: LD_INT 5
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: PUSH
54561: LD_INT 5
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 6
54570: PUSH
54571: LD_INT 5
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 6
54580: PUSH
54581: LD_INT 6
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 5
54590: PUSH
54591: LD_INT 6
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54612: LD_ADDR_VAR 0 32
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 4
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: LD_INT 4
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 5
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 5
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 6
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 6
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54755: LD_ADDR_VAR 0 33
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: NEG
54842: PUSH
54843: LD_INT 0
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 5
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 6
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 6
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54910: LD_ADDR_VAR 0 34
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 4
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 4
54965: NEG
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 4
54977: NEG
54978: PUSH
54979: LD_INT 4
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 4
54989: NEG
54990: PUSH
54991: LD_INT 5
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 5
55001: NEG
55002: PUSH
55003: LD_INT 4
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 5
55013: NEG
55014: PUSH
55015: LD_INT 5
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 5
55025: NEG
55026: PUSH
55027: LD_INT 6
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 6
55037: NEG
55038: PUSH
55039: LD_INT 5
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 6
55049: NEG
55050: PUSH
55051: LD_INT 6
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55073: LD_ADDR_VAR 0 41
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55117: LD_ADDR_VAR 0 42
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55158: LD_ADDR_VAR 0 43
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55198: LD_ADDR_VAR 0 44
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55239: LD_ADDR_VAR 0 45
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55283: LD_ADDR_VAR 0 46
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55329: LD_ADDR_VAR 0 47
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55362: LD_ADDR_VAR 0 48
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55393: LD_ADDR_VAR 0 49
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55422: LD_ADDR_VAR 0 50
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55451: LD_ADDR_VAR 0 51
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55482: LD_ADDR_VAR 0 52
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55515: LD_ADDR_VAR 0 53
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55559: LD_ADDR_VAR 0 54
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55600: LD_ADDR_VAR 0 55
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55640: LD_ADDR_VAR 0 56
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55681: LD_ADDR_VAR 0 57
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 3
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55725: LD_ADDR_VAR 0 58
55729: PUSH
55730: LD_INT 2
55732: NEG
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 3
55744: NEG
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: LD_INT 3
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55771: LD_ADDR_VAR 0 59
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55815: LD_ADDR_VAR 0 60
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55856: LD_ADDR_VAR 0 61
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55896: LD_ADDR_VAR 0 62
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55937: LD_ADDR_VAR 0 63
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55981: LD_ADDR_VAR 0 64
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// end ; 2 :
56027: GO 59293
56029: LD_INT 2
56031: DOUBLE
56032: EQUAL
56033: IFTRUE 56037
56035: GO 59292
56037: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56038: LD_ADDR_VAR 0 29
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 5
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 5
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 4
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 4
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 4
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 4
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: LD_INT 5
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 5
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 4
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 5
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 3
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 4
56377: NEG
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 4
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 4
56400: NEG
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: LD_INT 4
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 5
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: LD_INT 4
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 4
56471: NEG
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 5
56483: NEG
56484: PUSH
56485: LD_INT 4
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 5
56495: NEG
56496: PUSH
56497: LD_INT 5
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: LD_INT 5
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 5
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56576: LD_ADDR_VAR 0 30
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: LD_INT 4
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: LD_INT 4
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 5
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: LD_INT 4
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 5
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 5
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 4
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 4
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: NEG
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: NEG
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 4
56811: NEG
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 5
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 5
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 5
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 3
56868: NEG
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 3
56880: NEG
56881: PUSH
56882: LD_INT 4
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 3
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 4
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 4
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 5
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 4
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 4
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 5
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 5
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57123: LD_ADDR_VAR 0 31
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 3
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 4
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: NEG
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: LD_INT 4
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: LD_INT 5
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: LD_INT 4
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: NEG
57386: PUSH
57387: LD_INT 4
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 5
57397: NEG
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: NEG
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 3
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 4
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 5
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 5
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 4
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 5
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57673: LD_ADDR_VAR 0 32
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 5
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 5
57759: NEG
57760: PUSH
57761: LD_INT 2
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 3
57782: NEG
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: LD_INT 4
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 4
57842: NEG
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 4
57854: NEG
57855: PUSH
57856: LD_INT 4
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: LD_INT 4
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 4
57878: NEG
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 5
57904: NEG
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 4
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: LD_INT 5
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: LD_INT 5
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 4
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 4
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: PUSH
58086: LD_INT 4
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 4
58095: PUSH
58096: LD_INT 3
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 5
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 5
58115: PUSH
58116: LD_INT 5
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 4
58125: PUSH
58126: LD_INT 5
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 5
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 5
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58220: LD_ADDR_VAR 0 33
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: LD_INT 4
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 4
58239: NEG
58240: PUSH
58241: LD_INT 5
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: NEG
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 4
58275: NEG
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 5
58287: NEG
58288: PUSH
58289: LD_INT 4
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 5
58299: NEG
58300: PUSH
58301: LD_INT 5
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: LD_INT 5
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 5
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 4
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 3
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 5
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 5
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: LD_INT 2
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 5
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: LD_INT 3
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: PUSH
58561: LD_INT 4
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 4
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 3
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 5
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 5
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58758: LD_ADDR_VAR 0 34
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 5
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 4
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 4
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 5
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 4
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 4
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 4
58970: PUSH
58971: LD_INT 3
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: LD_INT 4
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 5
58990: PUSH
58991: LD_INT 5
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: PUSH
59001: LD_INT 5
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 3
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 5
59030: PUSH
59031: LD_INT 3
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 5
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 3
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: LD_INT 4
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 4
59143: NEG
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 4
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: NEG
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 4
59188: NEG
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 5
59199: NEG
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 5
59210: NEG
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 5
59222: NEG
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// end ; end ;
59290: GO 59293
59292: POP
// case btype of b_depot , b_warehouse :
59293: LD_VAR 0 1
59297: PUSH
59298: LD_INT 0
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59312
59304: LD_INT 1
59306: DOUBLE
59307: EQUAL
59308: IFTRUE 59312
59310: GO 59513
59312: POP
// case nation of nation_american :
59313: LD_VAR 0 5
59317: PUSH
59318: LD_INT 1
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59326
59324: GO 59382
59326: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59327: LD_ADDR_VAR 0 9
59331: PUSH
59332: LD_VAR 0 11
59336: PUSH
59337: LD_VAR 0 12
59341: PUSH
59342: LD_VAR 0 13
59346: PUSH
59347: LD_VAR 0 14
59351: PUSH
59352: LD_VAR 0 15
59356: PUSH
59357: LD_VAR 0 16
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: PUSH
59370: LD_VAR 0 4
59374: PUSH
59375: LD_INT 1
59377: PLUS
59378: ARRAY
59379: ST_TO_ADDR
59380: GO 59511
59382: LD_INT 2
59384: DOUBLE
59385: EQUAL
59386: IFTRUE 59390
59388: GO 59446
59390: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59391: LD_ADDR_VAR 0 9
59395: PUSH
59396: LD_VAR 0 17
59400: PUSH
59401: LD_VAR 0 18
59405: PUSH
59406: LD_VAR 0 19
59410: PUSH
59411: LD_VAR 0 20
59415: PUSH
59416: LD_VAR 0 21
59420: PUSH
59421: LD_VAR 0 22
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: PUSH
59434: LD_VAR 0 4
59438: PUSH
59439: LD_INT 1
59441: PLUS
59442: ARRAY
59443: ST_TO_ADDR
59444: GO 59511
59446: LD_INT 3
59448: DOUBLE
59449: EQUAL
59450: IFTRUE 59454
59452: GO 59510
59454: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59455: LD_ADDR_VAR 0 9
59459: PUSH
59460: LD_VAR 0 23
59464: PUSH
59465: LD_VAR 0 24
59469: PUSH
59470: LD_VAR 0 25
59474: PUSH
59475: LD_VAR 0 26
59479: PUSH
59480: LD_VAR 0 27
59484: PUSH
59485: LD_VAR 0 28
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: PUSH
59498: LD_VAR 0 4
59502: PUSH
59503: LD_INT 1
59505: PLUS
59506: ARRAY
59507: ST_TO_ADDR
59508: GO 59511
59510: POP
59511: GO 60066
59513: LD_INT 2
59515: DOUBLE
59516: EQUAL
59517: IFTRUE 59527
59519: LD_INT 3
59521: DOUBLE
59522: EQUAL
59523: IFTRUE 59527
59525: GO 59583
59527: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59528: LD_ADDR_VAR 0 9
59532: PUSH
59533: LD_VAR 0 29
59537: PUSH
59538: LD_VAR 0 30
59542: PUSH
59543: LD_VAR 0 31
59547: PUSH
59548: LD_VAR 0 32
59552: PUSH
59553: LD_VAR 0 33
59557: PUSH
59558: LD_VAR 0 34
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: PUSH
59571: LD_VAR 0 4
59575: PUSH
59576: LD_INT 1
59578: PLUS
59579: ARRAY
59580: ST_TO_ADDR
59581: GO 60066
59583: LD_INT 16
59585: DOUBLE
59586: EQUAL
59587: IFTRUE 59645
59589: LD_INT 17
59591: DOUBLE
59592: EQUAL
59593: IFTRUE 59645
59595: LD_INT 18
59597: DOUBLE
59598: EQUAL
59599: IFTRUE 59645
59601: LD_INT 19
59603: DOUBLE
59604: EQUAL
59605: IFTRUE 59645
59607: LD_INT 22
59609: DOUBLE
59610: EQUAL
59611: IFTRUE 59645
59613: LD_INT 20
59615: DOUBLE
59616: EQUAL
59617: IFTRUE 59645
59619: LD_INT 21
59621: DOUBLE
59622: EQUAL
59623: IFTRUE 59645
59625: LD_INT 23
59627: DOUBLE
59628: EQUAL
59629: IFTRUE 59645
59631: LD_INT 24
59633: DOUBLE
59634: EQUAL
59635: IFTRUE 59645
59637: LD_INT 25
59639: DOUBLE
59640: EQUAL
59641: IFTRUE 59645
59643: GO 59701
59645: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59646: LD_ADDR_VAR 0 9
59650: PUSH
59651: LD_VAR 0 35
59655: PUSH
59656: LD_VAR 0 36
59660: PUSH
59661: LD_VAR 0 37
59665: PUSH
59666: LD_VAR 0 38
59670: PUSH
59671: LD_VAR 0 39
59675: PUSH
59676: LD_VAR 0 40
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: PUSH
59689: LD_VAR 0 4
59693: PUSH
59694: LD_INT 1
59696: PLUS
59697: ARRAY
59698: ST_TO_ADDR
59699: GO 60066
59701: LD_INT 6
59703: DOUBLE
59704: EQUAL
59705: IFTRUE 59757
59707: LD_INT 7
59709: DOUBLE
59710: EQUAL
59711: IFTRUE 59757
59713: LD_INT 8
59715: DOUBLE
59716: EQUAL
59717: IFTRUE 59757
59719: LD_INT 13
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59757
59725: LD_INT 12
59727: DOUBLE
59728: EQUAL
59729: IFTRUE 59757
59731: LD_INT 15
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59757
59737: LD_INT 11
59739: DOUBLE
59740: EQUAL
59741: IFTRUE 59757
59743: LD_INT 14
59745: DOUBLE
59746: EQUAL
59747: IFTRUE 59757
59749: LD_INT 10
59751: DOUBLE
59752: EQUAL
59753: IFTRUE 59757
59755: GO 59813
59757: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59758: LD_ADDR_VAR 0 9
59762: PUSH
59763: LD_VAR 0 41
59767: PUSH
59768: LD_VAR 0 42
59772: PUSH
59773: LD_VAR 0 43
59777: PUSH
59778: LD_VAR 0 44
59782: PUSH
59783: LD_VAR 0 45
59787: PUSH
59788: LD_VAR 0 46
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: PUSH
59801: LD_VAR 0 4
59805: PUSH
59806: LD_INT 1
59808: PLUS
59809: ARRAY
59810: ST_TO_ADDR
59811: GO 60066
59813: LD_INT 36
59815: DOUBLE
59816: EQUAL
59817: IFTRUE 59821
59819: GO 59877
59821: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59822: LD_ADDR_VAR 0 9
59826: PUSH
59827: LD_VAR 0 47
59831: PUSH
59832: LD_VAR 0 48
59836: PUSH
59837: LD_VAR 0 49
59841: PUSH
59842: LD_VAR 0 50
59846: PUSH
59847: LD_VAR 0 51
59851: PUSH
59852: LD_VAR 0 52
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: PUSH
59865: LD_VAR 0 4
59869: PUSH
59870: LD_INT 1
59872: PLUS
59873: ARRAY
59874: ST_TO_ADDR
59875: GO 60066
59877: LD_INT 4
59879: DOUBLE
59880: EQUAL
59881: IFTRUE 59903
59883: LD_INT 5
59885: DOUBLE
59886: EQUAL
59887: IFTRUE 59903
59889: LD_INT 34
59891: DOUBLE
59892: EQUAL
59893: IFTRUE 59903
59895: LD_INT 37
59897: DOUBLE
59898: EQUAL
59899: IFTRUE 59903
59901: GO 59959
59903: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59904: LD_ADDR_VAR 0 9
59908: PUSH
59909: LD_VAR 0 53
59913: PUSH
59914: LD_VAR 0 54
59918: PUSH
59919: LD_VAR 0 55
59923: PUSH
59924: LD_VAR 0 56
59928: PUSH
59929: LD_VAR 0 57
59933: PUSH
59934: LD_VAR 0 58
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: PUSH
59947: LD_VAR 0 4
59951: PUSH
59952: LD_INT 1
59954: PLUS
59955: ARRAY
59956: ST_TO_ADDR
59957: GO 60066
59959: LD_INT 31
59961: DOUBLE
59962: EQUAL
59963: IFTRUE 60009
59965: LD_INT 32
59967: DOUBLE
59968: EQUAL
59969: IFTRUE 60009
59971: LD_INT 33
59973: DOUBLE
59974: EQUAL
59975: IFTRUE 60009
59977: LD_INT 27
59979: DOUBLE
59980: EQUAL
59981: IFTRUE 60009
59983: LD_INT 26
59985: DOUBLE
59986: EQUAL
59987: IFTRUE 60009
59989: LD_INT 28
59991: DOUBLE
59992: EQUAL
59993: IFTRUE 60009
59995: LD_INT 29
59997: DOUBLE
59998: EQUAL
59999: IFTRUE 60009
60001: LD_INT 30
60003: DOUBLE
60004: EQUAL
60005: IFTRUE 60009
60007: GO 60065
60009: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60010: LD_ADDR_VAR 0 9
60014: PUSH
60015: LD_VAR 0 59
60019: PUSH
60020: LD_VAR 0 60
60024: PUSH
60025: LD_VAR 0 61
60029: PUSH
60030: LD_VAR 0 62
60034: PUSH
60035: LD_VAR 0 63
60039: PUSH
60040: LD_VAR 0 64
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: PUSH
60053: LD_VAR 0 4
60057: PUSH
60058: LD_INT 1
60060: PLUS
60061: ARRAY
60062: ST_TO_ADDR
60063: GO 60066
60065: POP
// temp_list2 = [ ] ;
60066: LD_ADDR_VAR 0 10
60070: PUSH
60071: EMPTY
60072: ST_TO_ADDR
// for i in temp_list do
60073: LD_ADDR_VAR 0 8
60077: PUSH
60078: LD_VAR 0 9
60082: PUSH
60083: FOR_IN
60084: IFFALSE 60136
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60086: LD_ADDR_VAR 0 10
60090: PUSH
60091: LD_VAR 0 10
60095: PUSH
60096: LD_VAR 0 8
60100: PUSH
60101: LD_INT 1
60103: ARRAY
60104: PUSH
60105: LD_VAR 0 2
60109: PLUS
60110: PUSH
60111: LD_VAR 0 8
60115: PUSH
60116: LD_INT 2
60118: ARRAY
60119: PUSH
60120: LD_VAR 0 3
60124: PLUS
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: ADD
60133: ST_TO_ADDR
60134: GO 60083
60136: POP
60137: POP
// result = temp_list2 ;
60138: LD_ADDR_VAR 0 7
60142: PUSH
60143: LD_VAR 0 10
60147: ST_TO_ADDR
// end ;
60148: LD_VAR 0 7
60152: RET
// export function EnemyInRange ( unit , dist ) ; begin
60153: LD_INT 0
60155: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60156: LD_ADDR_VAR 0 3
60160: PUSH
60161: LD_VAR 0 1
60165: PPUSH
60166: CALL_OW 255
60170: PPUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: CALL_OW 250
60180: PPUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 251
60190: PPUSH
60191: LD_VAR 0 2
60195: PPUSH
60196: CALL 33410 0 4
60200: PUSH
60201: LD_INT 4
60203: ARRAY
60204: ST_TO_ADDR
// end ;
60205: LD_VAR 0 3
60209: RET
// export function PlayerSeeMe ( unit ) ; begin
60210: LD_INT 0
60212: PPUSH
// result := See ( your_side , unit ) ;
60213: LD_ADDR_VAR 0 2
60217: PUSH
60218: LD_OWVAR 2
60222: PPUSH
60223: LD_VAR 0 1
60227: PPUSH
60228: CALL_OW 292
60232: ST_TO_ADDR
// end ;
60233: LD_VAR 0 2
60237: RET
// export function ReverseDir ( unit ) ; begin
60238: LD_INT 0
60240: PPUSH
// if not unit then
60241: LD_VAR 0 1
60245: NOT
60246: IFFALSE 60250
// exit ;
60248: GO 60273
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60250: LD_ADDR_VAR 0 2
60254: PUSH
60255: LD_VAR 0 1
60259: PPUSH
60260: CALL_OW 254
60264: PUSH
60265: LD_INT 3
60267: PLUS
60268: PUSH
60269: LD_INT 6
60271: MOD
60272: ST_TO_ADDR
// end ;
60273: LD_VAR 0 2
60277: RET
// export function ReverseArray ( array ) ; var i ; begin
60278: LD_INT 0
60280: PPUSH
60281: PPUSH
// if not array then
60282: LD_VAR 0 1
60286: NOT
60287: IFFALSE 60291
// exit ;
60289: GO 60346
// result := [ ] ;
60291: LD_ADDR_VAR 0 2
60295: PUSH
60296: EMPTY
60297: ST_TO_ADDR
// for i := array downto 1 do
60298: LD_ADDR_VAR 0 3
60302: PUSH
60303: DOUBLE
60304: LD_VAR 0 1
60308: INC
60309: ST_TO_ADDR
60310: LD_INT 1
60312: PUSH
60313: FOR_DOWNTO
60314: IFFALSE 60344
// result := Join ( result , array [ i ] ) ;
60316: LD_ADDR_VAR 0 2
60320: PUSH
60321: LD_VAR 0 2
60325: PPUSH
60326: LD_VAR 0 1
60330: PUSH
60331: LD_VAR 0 3
60335: ARRAY
60336: PPUSH
60337: CALL 65188 0 2
60341: ST_TO_ADDR
60342: GO 60313
60344: POP
60345: POP
// end ;
60346: LD_VAR 0 2
60350: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60351: LD_INT 0
60353: PPUSH
60354: PPUSH
60355: PPUSH
60356: PPUSH
60357: PPUSH
60358: PPUSH
// if not unit or not hexes then
60359: LD_VAR 0 1
60363: NOT
60364: IFTRUE 60373
60366: PUSH
60367: LD_VAR 0 2
60371: NOT
60372: OR
60373: IFFALSE 60377
// exit ;
60375: GO 60500
// dist := 9999 ;
60377: LD_ADDR_VAR 0 5
60381: PUSH
60382: LD_INT 9999
60384: ST_TO_ADDR
// for i = 1 to hexes do
60385: LD_ADDR_VAR 0 4
60389: PUSH
60390: DOUBLE
60391: LD_INT 1
60393: DEC
60394: ST_TO_ADDR
60395: LD_VAR 0 2
60399: PUSH
60400: FOR_TO
60401: IFFALSE 60488
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60403: LD_ADDR_VAR 0 6
60407: PUSH
60408: LD_VAR 0 1
60412: PPUSH
60413: LD_VAR 0 2
60417: PUSH
60418: LD_VAR 0 4
60422: ARRAY
60423: PUSH
60424: LD_INT 1
60426: ARRAY
60427: PPUSH
60428: LD_VAR 0 2
60432: PUSH
60433: LD_VAR 0 4
60437: ARRAY
60438: PUSH
60439: LD_INT 2
60441: ARRAY
60442: PPUSH
60443: CALL_OW 297
60447: ST_TO_ADDR
// if tdist < dist then
60448: LD_VAR 0 6
60452: PUSH
60453: LD_VAR 0 5
60457: LESS
60458: IFFALSE 60486
// begin hex := hexes [ i ] ;
60460: LD_ADDR_VAR 0 8
60464: PUSH
60465: LD_VAR 0 2
60469: PUSH
60470: LD_VAR 0 4
60474: ARRAY
60475: ST_TO_ADDR
// dist := tdist ;
60476: LD_ADDR_VAR 0 5
60480: PUSH
60481: LD_VAR 0 6
60485: ST_TO_ADDR
// end ; end ;
60486: GO 60400
60488: POP
60489: POP
// result := hex ;
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: LD_VAR 0 8
60499: ST_TO_ADDR
// end ;
60500: LD_VAR 0 3
60504: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60505: LD_INT 0
60507: PPUSH
60508: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60509: LD_VAR 0 1
60513: NOT
60514: IFTRUE 60553
60516: PUSH
60517: LD_VAR 0 1
60521: PUSH
60522: LD_INT 21
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 23
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PPUSH
60546: CALL_OW 69
60550: IN
60551: NOT
60552: OR
60553: IFFALSE 60557
// exit ;
60555: GO 60604
// for i = 1 to 3 do
60557: LD_ADDR_VAR 0 3
60561: PUSH
60562: DOUBLE
60563: LD_INT 1
60565: DEC
60566: ST_TO_ADDR
60567: LD_INT 3
60569: PUSH
60570: FOR_TO
60571: IFFALSE 60602
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60573: LD_VAR 0 1
60577: PPUSH
60578: CALL_OW 250
60582: PPUSH
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL_OW 251
60592: PPUSH
60593: LD_INT 1
60595: PPUSH
60596: CALL_OW 453
60600: GO 60570
60602: POP
60603: POP
// end ;
60604: LD_VAR 0 2
60608: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60609: LD_INT 0
60611: PPUSH
60612: PPUSH
60613: PPUSH
60614: PPUSH
60615: PPUSH
60616: PPUSH
// if not unit or not enemy_unit then
60617: LD_VAR 0 1
60621: NOT
60622: IFTRUE 60631
60624: PUSH
60625: LD_VAR 0 2
60629: NOT
60630: OR
60631: IFFALSE 60635
// exit ;
60633: GO 61106
// if GetLives ( i ) < 250 then
60635: LD_VAR 0 4
60639: PPUSH
60640: CALL_OW 256
60644: PUSH
60645: LD_INT 250
60647: LESS
60648: IFFALSE 60661
// begin ComAutodestruct ( i ) ;
60650: LD_VAR 0 4
60654: PPUSH
60655: CALL 60505 0 1
// exit ;
60659: GO 61106
// end ; x := GetX ( enemy_unit ) ;
60661: LD_ADDR_VAR 0 7
60665: PUSH
60666: LD_VAR 0 2
60670: PPUSH
60671: CALL_OW 250
60675: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60676: LD_ADDR_VAR 0 8
60680: PUSH
60681: LD_VAR 0 2
60685: PPUSH
60686: CALL_OW 251
60690: ST_TO_ADDR
// if not x or not y then
60691: LD_VAR 0 7
60695: NOT
60696: IFTRUE 60705
60698: PUSH
60699: LD_VAR 0 8
60703: NOT
60704: OR
60705: IFFALSE 60709
// exit ;
60707: GO 61106
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60709: LD_ADDR_VAR 0 6
60713: PUSH
60714: LD_VAR 0 7
60718: PPUSH
60719: LD_INT 0
60721: PPUSH
60722: LD_INT 4
60724: PPUSH
60725: CALL_OW 272
60729: PUSH
60730: LD_VAR 0 8
60734: PPUSH
60735: LD_INT 0
60737: PPUSH
60738: LD_INT 4
60740: PPUSH
60741: CALL_OW 273
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_VAR 0 7
60754: PPUSH
60755: LD_INT 1
60757: PPUSH
60758: LD_INT 4
60760: PPUSH
60761: CALL_OW 272
60765: PUSH
60766: LD_VAR 0 8
60770: PPUSH
60771: LD_INT 1
60773: PPUSH
60774: LD_INT 4
60776: PPUSH
60777: CALL_OW 273
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_VAR 0 7
60790: PPUSH
60791: LD_INT 2
60793: PPUSH
60794: LD_INT 4
60796: PPUSH
60797: CALL_OW 272
60801: PUSH
60802: LD_VAR 0 8
60806: PPUSH
60807: LD_INT 2
60809: PPUSH
60810: LD_INT 4
60812: PPUSH
60813: CALL_OW 273
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_VAR 0 7
60826: PPUSH
60827: LD_INT 3
60829: PPUSH
60830: LD_INT 4
60832: PPUSH
60833: CALL_OW 272
60837: PUSH
60838: LD_VAR 0 8
60842: PPUSH
60843: LD_INT 3
60845: PPUSH
60846: LD_INT 4
60848: PPUSH
60849: CALL_OW 273
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_VAR 0 7
60862: PPUSH
60863: LD_INT 4
60865: PPUSH
60866: LD_INT 4
60868: PPUSH
60869: CALL_OW 272
60873: PUSH
60874: LD_VAR 0 8
60878: PPUSH
60879: LD_INT 4
60881: PPUSH
60882: LD_INT 4
60884: PPUSH
60885: CALL_OW 273
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_VAR 0 7
60898: PPUSH
60899: LD_INT 5
60901: PPUSH
60902: LD_INT 4
60904: PPUSH
60905: CALL_OW 272
60909: PUSH
60910: LD_VAR 0 8
60914: PPUSH
60915: LD_INT 5
60917: PPUSH
60918: LD_INT 4
60920: PPUSH
60921: CALL_OW 273
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// for i = tmp downto 1 do
60938: LD_ADDR_VAR 0 4
60942: PUSH
60943: DOUBLE
60944: LD_VAR 0 6
60948: INC
60949: ST_TO_ADDR
60950: LD_INT 1
60952: PUSH
60953: FOR_DOWNTO
60954: IFFALSE 61057
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60956: LD_VAR 0 6
60960: PUSH
60961: LD_VAR 0 4
60965: ARRAY
60966: PUSH
60967: LD_INT 1
60969: ARRAY
60970: PPUSH
60971: LD_VAR 0 6
60975: PUSH
60976: LD_VAR 0 4
60980: ARRAY
60981: PUSH
60982: LD_INT 2
60984: ARRAY
60985: PPUSH
60986: CALL_OW 488
60990: NOT
60991: IFTRUE 61033
60993: PUSH
60994: LD_VAR 0 6
60998: PUSH
60999: LD_VAR 0 4
61003: ARRAY
61004: PUSH
61005: LD_INT 1
61007: ARRAY
61008: PPUSH
61009: LD_VAR 0 6
61013: PUSH
61014: LD_VAR 0 4
61018: ARRAY
61019: PUSH
61020: LD_INT 2
61022: ARRAY
61023: PPUSH
61024: CALL_OW 428
61028: PUSH
61029: LD_INT 0
61031: NONEQUAL
61032: OR
61033: IFFALSE 61055
// tmp := Delete ( tmp , i ) ;
61035: LD_ADDR_VAR 0 6
61039: PUSH
61040: LD_VAR 0 6
61044: PPUSH
61045: LD_VAR 0 4
61049: PPUSH
61050: CALL_OW 3
61054: ST_TO_ADDR
61055: GO 60953
61057: POP
61058: POP
// j := GetClosestHex ( unit , tmp ) ;
61059: LD_ADDR_VAR 0 5
61063: PUSH
61064: LD_VAR 0 1
61068: PPUSH
61069: LD_VAR 0 6
61073: PPUSH
61074: CALL 60351 0 2
61078: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61079: LD_VAR 0 1
61083: PPUSH
61084: LD_VAR 0 5
61088: PUSH
61089: LD_INT 1
61091: ARRAY
61092: PPUSH
61093: LD_VAR 0 5
61097: PUSH
61098: LD_INT 2
61100: ARRAY
61101: PPUSH
61102: CALL_OW 111
// end ;
61106: LD_VAR 0 3
61110: RET
// export function PrepareApemanSoldier ( ) ; begin
61111: LD_INT 0
61113: PPUSH
// uc_nation := 0 ;
61114: LD_ADDR_OWVAR 21
61118: PUSH
61119: LD_INT 0
61121: ST_TO_ADDR
// hc_sex := sex_male ;
61122: LD_ADDR_OWVAR 27
61126: PUSH
61127: LD_INT 1
61129: ST_TO_ADDR
// hc_name :=  ;
61130: LD_ADDR_OWVAR 26
61134: PUSH
61135: LD_STRING 
61137: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61138: LD_ADDR_OWVAR 28
61142: PUSH
61143: LD_INT 15
61145: ST_TO_ADDR
// hc_gallery :=  ;
61146: LD_ADDR_OWVAR 33
61150: PUSH
61151: LD_STRING 
61153: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61154: LD_ADDR_OWVAR 31
61158: PUSH
61159: LD_INT 0
61161: PPUSH
61162: LD_INT 3
61164: PPUSH
61165: CALL_OW 12
61169: PUSH
61170: LD_INT 0
61172: PPUSH
61173: LD_INT 3
61175: PPUSH
61176: CALL_OW 12
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61193: LD_ADDR_OWVAR 29
61197: PUSH
61198: LD_INT 12
61200: PUSH
61201: LD_INT 12
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: ST_TO_ADDR
// end ;
61208: LD_VAR 0 1
61212: RET
// export function PrepareApemanEngineer ( ) ; begin
61213: LD_INT 0
61215: PPUSH
// uc_nation := 0 ;
61216: LD_ADDR_OWVAR 21
61220: PUSH
61221: LD_INT 0
61223: ST_TO_ADDR
// hc_sex := sex_male ;
61224: LD_ADDR_OWVAR 27
61228: PUSH
61229: LD_INT 1
61231: ST_TO_ADDR
// hc_name :=  ;
61232: LD_ADDR_OWVAR 26
61236: PUSH
61237: LD_STRING 
61239: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61240: LD_ADDR_OWVAR 28
61244: PUSH
61245: LD_INT 16
61247: ST_TO_ADDR
// hc_gallery :=  ;
61248: LD_ADDR_OWVAR 33
61252: PUSH
61253: LD_STRING 
61255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61256: LD_ADDR_OWVAR 31
61260: PUSH
61261: LD_INT 0
61263: PPUSH
61264: LD_INT 3
61266: PPUSH
61267: CALL_OW 12
61271: PUSH
61272: LD_INT 0
61274: PPUSH
61275: LD_INT 3
61277: PPUSH
61278: CALL_OW 12
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61295: LD_ADDR_OWVAR 29
61299: PUSH
61300: LD_INT 12
61302: PUSH
61303: LD_INT 12
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: ST_TO_ADDR
// end ;
61310: LD_VAR 0 1
61314: RET
// export function PrepareApeman ( agressivity ) ; begin
61315: LD_INT 0
61317: PPUSH
// uc_side := 0 ;
61318: LD_ADDR_OWVAR 20
61322: PUSH
61323: LD_INT 0
61325: ST_TO_ADDR
// uc_nation := 0 ;
61326: LD_ADDR_OWVAR 21
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
// hc_sex := sex_male ;
61334: LD_ADDR_OWVAR 27
61338: PUSH
61339: LD_INT 1
61341: ST_TO_ADDR
// hc_class := class_apeman ;
61342: LD_ADDR_OWVAR 28
61346: PUSH
61347: LD_INT 12
61349: ST_TO_ADDR
// hc_gallery :=  ;
61350: LD_ADDR_OWVAR 33
61354: PUSH
61355: LD_STRING 
61357: ST_TO_ADDR
// hc_name :=  ;
61358: LD_ADDR_OWVAR 26
61362: PUSH
61363: LD_STRING 
61365: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61366: LD_ADDR_OWVAR 29
61370: PUSH
61371: LD_INT 12
61373: PUSH
61374: LD_INT 12
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: ST_TO_ADDR
// if agressivity = 0 then
61381: LD_VAR 0 1
61385: PUSH
61386: LD_INT 0
61388: EQUAL
61389: IFFALSE 61401
// hc_agressivity := 0 else
61391: LD_ADDR_OWVAR 35
61395: PUSH
61396: LD_INT 0
61398: ST_TO_ADDR
61399: GO 61422
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61401: LD_ADDR_OWVAR 35
61405: PUSH
61406: LD_VAR 0 1
61410: NEG
61411: PPUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 12
61421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61422: LD_ADDR_OWVAR 31
61426: PUSH
61427: LD_INT 0
61429: PPUSH
61430: LD_INT 3
61432: PPUSH
61433: CALL_OW 12
61437: PUSH
61438: LD_INT 0
61440: PPUSH
61441: LD_INT 3
61443: PPUSH
61444: CALL_OW 12
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: ST_TO_ADDR
// end ;
61461: LD_VAR 0 2
61465: RET
// export function PrepareTiger ( agressivity ) ; begin
61466: LD_INT 0
61468: PPUSH
// uc_side := 0 ;
61469: LD_ADDR_OWVAR 20
61473: PUSH
61474: LD_INT 0
61476: ST_TO_ADDR
// uc_nation := 0 ;
61477: LD_ADDR_OWVAR 21
61481: PUSH
61482: LD_INT 0
61484: ST_TO_ADDR
// InitHc ;
61485: CALL_OW 19
// hc_class := class_tiger ;
61489: LD_ADDR_OWVAR 28
61493: PUSH
61494: LD_INT 14
61496: ST_TO_ADDR
// hc_gallery :=  ;
61497: LD_ADDR_OWVAR 33
61501: PUSH
61502: LD_STRING 
61504: ST_TO_ADDR
// hc_name :=  ;
61505: LD_ADDR_OWVAR 26
61509: PUSH
61510: LD_STRING 
61512: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61513: LD_ADDR_OWVAR 35
61517: PUSH
61518: LD_VAR 0 1
61522: NEG
61523: PPUSH
61524: LD_VAR 0 1
61528: PPUSH
61529: CALL_OW 12
61533: ST_TO_ADDR
// end ;
61534: LD_VAR 0 2
61538: RET
// export function PrepareEnchidna ( ) ; begin
61539: LD_INT 0
61541: PPUSH
// uc_side := 0 ;
61542: LD_ADDR_OWVAR 20
61546: PUSH
61547: LD_INT 0
61549: ST_TO_ADDR
// uc_nation := 0 ;
61550: LD_ADDR_OWVAR 21
61554: PUSH
61555: LD_INT 0
61557: ST_TO_ADDR
// InitHc ;
61558: CALL_OW 19
// hc_class := class_baggie ;
61562: LD_ADDR_OWVAR 28
61566: PUSH
61567: LD_INT 13
61569: ST_TO_ADDR
// hc_gallery :=  ;
61570: LD_ADDR_OWVAR 33
61574: PUSH
61575: LD_STRING 
61577: ST_TO_ADDR
// hc_name :=  ;
61578: LD_ADDR_OWVAR 26
61582: PUSH
61583: LD_STRING 
61585: ST_TO_ADDR
// end ;
61586: LD_VAR 0 1
61590: RET
// export function PrepareFrog ( ) ; begin
61591: LD_INT 0
61593: PPUSH
// uc_side := 0 ;
61594: LD_ADDR_OWVAR 20
61598: PUSH
61599: LD_INT 0
61601: ST_TO_ADDR
// uc_nation := 0 ;
61602: LD_ADDR_OWVAR 21
61606: PUSH
61607: LD_INT 0
61609: ST_TO_ADDR
// InitHc ;
61610: CALL_OW 19
// hc_class := class_frog ;
61614: LD_ADDR_OWVAR 28
61618: PUSH
61619: LD_INT 19
61621: ST_TO_ADDR
// hc_gallery :=  ;
61622: LD_ADDR_OWVAR 33
61626: PUSH
61627: LD_STRING 
61629: ST_TO_ADDR
// hc_name :=  ;
61630: LD_ADDR_OWVAR 26
61634: PUSH
61635: LD_STRING 
61637: ST_TO_ADDR
// end ;
61638: LD_VAR 0 1
61642: RET
// export function PrepareFish ( ) ; begin
61643: LD_INT 0
61645: PPUSH
// uc_side := 0 ;
61646: LD_ADDR_OWVAR 20
61650: PUSH
61651: LD_INT 0
61653: ST_TO_ADDR
// uc_nation := 0 ;
61654: LD_ADDR_OWVAR 21
61658: PUSH
61659: LD_INT 0
61661: ST_TO_ADDR
// InitHc ;
61662: CALL_OW 19
// hc_class := class_fish ;
61666: LD_ADDR_OWVAR 28
61670: PUSH
61671: LD_INT 20
61673: ST_TO_ADDR
// hc_gallery :=  ;
61674: LD_ADDR_OWVAR 33
61678: PUSH
61679: LD_STRING 
61681: ST_TO_ADDR
// hc_name :=  ;
61682: LD_ADDR_OWVAR 26
61686: PUSH
61687: LD_STRING 
61689: ST_TO_ADDR
// end ;
61690: LD_VAR 0 1
61694: RET
// export function PrepareBird ( ) ; begin
61695: LD_INT 0
61697: PPUSH
// uc_side := 0 ;
61698: LD_ADDR_OWVAR 20
61702: PUSH
61703: LD_INT 0
61705: ST_TO_ADDR
// uc_nation := 0 ;
61706: LD_ADDR_OWVAR 21
61710: PUSH
61711: LD_INT 0
61713: ST_TO_ADDR
// InitHc ;
61714: CALL_OW 19
// hc_class := class_phororhacos ;
61718: LD_ADDR_OWVAR 28
61722: PUSH
61723: LD_INT 18
61725: ST_TO_ADDR
// hc_gallery :=  ;
61726: LD_ADDR_OWVAR 33
61730: PUSH
61731: LD_STRING 
61733: ST_TO_ADDR
// hc_name :=  ;
61734: LD_ADDR_OWVAR 26
61738: PUSH
61739: LD_STRING 
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 1
61746: RET
// export function PrepareHorse ( ) ; begin
61747: LD_INT 0
61749: PPUSH
// uc_side := 0 ;
61750: LD_ADDR_OWVAR 20
61754: PUSH
61755: LD_INT 0
61757: ST_TO_ADDR
// uc_nation := 0 ;
61758: LD_ADDR_OWVAR 21
61762: PUSH
61763: LD_INT 0
61765: ST_TO_ADDR
// InitHc ;
61766: CALL_OW 19
// hc_class := class_horse ;
61770: LD_ADDR_OWVAR 28
61774: PUSH
61775: LD_INT 21
61777: ST_TO_ADDR
// hc_gallery :=  ;
61778: LD_ADDR_OWVAR 33
61782: PUSH
61783: LD_STRING 
61785: ST_TO_ADDR
// hc_name :=  ;
61786: LD_ADDR_OWVAR 26
61790: PUSH
61791: LD_STRING 
61793: ST_TO_ADDR
// end ;
61794: LD_VAR 0 1
61798: RET
// export function PrepareMastodont ( ) ; begin
61799: LD_INT 0
61801: PPUSH
// uc_side := 0 ;
61802: LD_ADDR_OWVAR 20
61806: PUSH
61807: LD_INT 0
61809: ST_TO_ADDR
// uc_nation := 0 ;
61810: LD_ADDR_OWVAR 21
61814: PUSH
61815: LD_INT 0
61817: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61818: LD_ADDR_OWVAR 37
61822: PUSH
61823: LD_INT 31
61825: ST_TO_ADDR
// vc_control := control_rider ;
61826: LD_ADDR_OWVAR 38
61830: PUSH
61831: LD_INT 4
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 1
61838: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61839: LD_INT 0
61841: PPUSH
61842: PPUSH
61843: PPUSH
// uc_side = 0 ;
61844: LD_ADDR_OWVAR 20
61848: PUSH
61849: LD_INT 0
61851: ST_TO_ADDR
// uc_nation = 0 ;
61852: LD_ADDR_OWVAR 21
61856: PUSH
61857: LD_INT 0
61859: ST_TO_ADDR
// InitHc_All ( ) ;
61860: CALL_OW 584
// InitVc ;
61864: CALL_OW 20
// if mastodonts then
61868: LD_VAR 0 6
61872: IFFALSE 61939
// for i = 1 to mastodonts do
61874: LD_ADDR_VAR 0 11
61878: PUSH
61879: DOUBLE
61880: LD_INT 1
61882: DEC
61883: ST_TO_ADDR
61884: LD_VAR 0 6
61888: PUSH
61889: FOR_TO
61890: IFFALSE 61937
// begin vc_chassis := 31 ;
61892: LD_ADDR_OWVAR 37
61896: PUSH
61897: LD_INT 31
61899: ST_TO_ADDR
// vc_control := control_rider ;
61900: LD_ADDR_OWVAR 38
61904: PUSH
61905: LD_INT 4
61907: ST_TO_ADDR
// animal := CreateVehicle ;
61908: LD_ADDR_VAR 0 12
61912: PUSH
61913: CALL_OW 45
61917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61918: LD_VAR 0 12
61922: PPUSH
61923: LD_VAR 0 8
61927: PPUSH
61928: LD_INT 0
61930: PPUSH
61931: CALL 64081 0 3
// end ;
61935: GO 61889
61937: POP
61938: POP
// if horses then
61939: LD_VAR 0 5
61943: IFFALSE 62010
// for i = 1 to horses do
61945: LD_ADDR_VAR 0 11
61949: PUSH
61950: DOUBLE
61951: LD_INT 1
61953: DEC
61954: ST_TO_ADDR
61955: LD_VAR 0 5
61959: PUSH
61960: FOR_TO
61961: IFFALSE 62008
// begin hc_class := 21 ;
61963: LD_ADDR_OWVAR 28
61967: PUSH
61968: LD_INT 21
61970: ST_TO_ADDR
// hc_gallery :=  ;
61971: LD_ADDR_OWVAR 33
61975: PUSH
61976: LD_STRING 
61978: ST_TO_ADDR
// animal := CreateHuman ;
61979: LD_ADDR_VAR 0 12
61983: PUSH
61984: CALL_OW 44
61988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61989: LD_VAR 0 12
61993: PPUSH
61994: LD_VAR 0 8
61998: PPUSH
61999: LD_INT 0
62001: PPUSH
62002: CALL 64081 0 3
// end ;
62006: GO 61960
62008: POP
62009: POP
// if birds then
62010: LD_VAR 0 1
62014: IFFALSE 62081
// for i = 1 to birds do
62016: LD_ADDR_VAR 0 11
62020: PUSH
62021: DOUBLE
62022: LD_INT 1
62024: DEC
62025: ST_TO_ADDR
62026: LD_VAR 0 1
62030: PUSH
62031: FOR_TO
62032: IFFALSE 62079
// begin hc_class := 18 ;
62034: LD_ADDR_OWVAR 28
62038: PUSH
62039: LD_INT 18
62041: ST_TO_ADDR
// hc_gallery =  ;
62042: LD_ADDR_OWVAR 33
62046: PUSH
62047: LD_STRING 
62049: ST_TO_ADDR
// animal := CreateHuman ;
62050: LD_ADDR_VAR 0 12
62054: PUSH
62055: CALL_OW 44
62059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62060: LD_VAR 0 12
62064: PPUSH
62065: LD_VAR 0 8
62069: PPUSH
62070: LD_INT 0
62072: PPUSH
62073: CALL 64081 0 3
// end ;
62077: GO 62031
62079: POP
62080: POP
// if tigers then
62081: LD_VAR 0 2
62085: IFFALSE 62169
// for i = 1 to tigers do
62087: LD_ADDR_VAR 0 11
62091: PUSH
62092: DOUBLE
62093: LD_INT 1
62095: DEC
62096: ST_TO_ADDR
62097: LD_VAR 0 2
62101: PUSH
62102: FOR_TO
62103: IFFALSE 62167
// begin hc_class = class_tiger ;
62105: LD_ADDR_OWVAR 28
62109: PUSH
62110: LD_INT 14
62112: ST_TO_ADDR
// hc_gallery =  ;
62113: LD_ADDR_OWVAR 33
62117: PUSH
62118: LD_STRING 
62120: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62121: LD_ADDR_OWVAR 35
62125: PUSH
62126: LD_INT 7
62128: NEG
62129: PPUSH
62130: LD_INT 7
62132: PPUSH
62133: CALL_OW 12
62137: ST_TO_ADDR
// animal := CreateHuman ;
62138: LD_ADDR_VAR 0 12
62142: PUSH
62143: CALL_OW 44
62147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62148: LD_VAR 0 12
62152: PPUSH
62153: LD_VAR 0 8
62157: PPUSH
62158: LD_INT 0
62160: PPUSH
62161: CALL 64081 0 3
// end ;
62165: GO 62102
62167: POP
62168: POP
// if apemans then
62169: LD_VAR 0 3
62173: IFFALSE 62296
// for i = 1 to apemans do
62175: LD_ADDR_VAR 0 11
62179: PUSH
62180: DOUBLE
62181: LD_INT 1
62183: DEC
62184: ST_TO_ADDR
62185: LD_VAR 0 3
62189: PUSH
62190: FOR_TO
62191: IFFALSE 62294
// begin hc_class = class_apeman ;
62193: LD_ADDR_OWVAR 28
62197: PUSH
62198: LD_INT 12
62200: ST_TO_ADDR
// hc_gallery =  ;
62201: LD_ADDR_OWVAR 33
62205: PUSH
62206: LD_STRING 
62208: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62209: LD_ADDR_OWVAR 35
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PPUSH
62218: LD_INT 2
62220: PPUSH
62221: CALL_OW 12
62225: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62226: LD_ADDR_OWVAR 31
62230: PUSH
62231: LD_INT 1
62233: PPUSH
62234: LD_INT 3
62236: PPUSH
62237: CALL_OW 12
62241: PUSH
62242: LD_INT 1
62244: PPUSH
62245: LD_INT 3
62247: PPUSH
62248: CALL_OW 12
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// animal := CreateHuman ;
62265: LD_ADDR_VAR 0 12
62269: PUSH
62270: CALL_OW 44
62274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62275: LD_VAR 0 12
62279: PPUSH
62280: LD_VAR 0 8
62284: PPUSH
62285: LD_INT 0
62287: PPUSH
62288: CALL 64081 0 3
// end ;
62292: GO 62190
62294: POP
62295: POP
// if enchidnas then
62296: LD_VAR 0 4
62300: IFFALSE 62367
// for i = 1 to enchidnas do
62302: LD_ADDR_VAR 0 11
62306: PUSH
62307: DOUBLE
62308: LD_INT 1
62310: DEC
62311: ST_TO_ADDR
62312: LD_VAR 0 4
62316: PUSH
62317: FOR_TO
62318: IFFALSE 62365
// begin hc_class = 13 ;
62320: LD_ADDR_OWVAR 28
62324: PUSH
62325: LD_INT 13
62327: ST_TO_ADDR
// hc_gallery =  ;
62328: LD_ADDR_OWVAR 33
62332: PUSH
62333: LD_STRING 
62335: ST_TO_ADDR
// animal := CreateHuman ;
62336: LD_ADDR_VAR 0 12
62340: PUSH
62341: CALL_OW 44
62345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62346: LD_VAR 0 12
62350: PPUSH
62351: LD_VAR 0 8
62355: PPUSH
62356: LD_INT 0
62358: PPUSH
62359: CALL 64081 0 3
// end ;
62363: GO 62317
62365: POP
62366: POP
// if fishes then
62367: LD_VAR 0 7
62371: IFFALSE 62438
// for i = 1 to fishes do
62373: LD_ADDR_VAR 0 11
62377: PUSH
62378: DOUBLE
62379: LD_INT 1
62381: DEC
62382: ST_TO_ADDR
62383: LD_VAR 0 7
62387: PUSH
62388: FOR_TO
62389: IFFALSE 62436
// begin hc_class = 20 ;
62391: LD_ADDR_OWVAR 28
62395: PUSH
62396: LD_INT 20
62398: ST_TO_ADDR
// hc_gallery =  ;
62399: LD_ADDR_OWVAR 33
62403: PUSH
62404: LD_STRING 
62406: ST_TO_ADDR
// animal := CreateHuman ;
62407: LD_ADDR_VAR 0 12
62411: PUSH
62412: CALL_OW 44
62416: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62417: LD_VAR 0 12
62421: PPUSH
62422: LD_VAR 0 9
62426: PPUSH
62427: LD_INT 0
62429: PPUSH
62430: CALL 64081 0 3
// end ;
62434: GO 62388
62436: POP
62437: POP
// end ;
62438: LD_VAR 0 10
62442: RET
// export function WantHeal ( sci , unit ) ; begin
62443: LD_INT 0
62445: PPUSH
// if GetTaskList ( sci ) > 0 then
62446: LD_VAR 0 1
62450: PPUSH
62451: CALL_OW 437
62455: PUSH
62456: LD_INT 0
62458: GREATER
62459: IFFALSE 62531
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL_OW 437
62470: PUSH
62471: LD_INT 1
62473: ARRAY
62474: PUSH
62475: LD_INT 1
62477: ARRAY
62478: PUSH
62479: LD_STRING l
62481: EQUAL
62482: IFFALSE 62509
62484: PUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: CALL_OW 437
62494: PUSH
62495: LD_INT 1
62497: ARRAY
62498: PUSH
62499: LD_INT 4
62501: ARRAY
62502: PUSH
62503: LD_VAR 0 2
62507: EQUAL
62508: AND
62509: IFFALSE 62521
// result := true else
62511: LD_ADDR_VAR 0 3
62515: PUSH
62516: LD_INT 1
62518: ST_TO_ADDR
62519: GO 62529
// result := false ;
62521: LD_ADDR_VAR 0 3
62525: PUSH
62526: LD_INT 0
62528: ST_TO_ADDR
// end else
62529: GO 62539
// result := false ;
62531: LD_ADDR_VAR 0 3
62535: PUSH
62536: LD_INT 0
62538: ST_TO_ADDR
// end ;
62539: LD_VAR 0 3
62543: RET
// export function HealTarget ( sci ) ; begin
62544: LD_INT 0
62546: PPUSH
// if not sci then
62547: LD_VAR 0 1
62551: NOT
62552: IFFALSE 62556
// exit ;
62554: GO 62621
// result := 0 ;
62556: LD_ADDR_VAR 0 2
62560: PUSH
62561: LD_INT 0
62563: ST_TO_ADDR
// if GetTaskList ( sci ) then
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 437
62573: IFFALSE 62621
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62575: LD_VAR 0 1
62579: PPUSH
62580: CALL_OW 437
62584: PUSH
62585: LD_INT 1
62587: ARRAY
62588: PUSH
62589: LD_INT 1
62591: ARRAY
62592: PUSH
62593: LD_STRING l
62595: EQUAL
62596: IFFALSE 62621
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62598: LD_ADDR_VAR 0 2
62602: PUSH
62603: LD_VAR 0 1
62607: PPUSH
62608: CALL_OW 437
62612: PUSH
62613: LD_INT 1
62615: ARRAY
62616: PUSH
62617: LD_INT 4
62619: ARRAY
62620: ST_TO_ADDR
// end ;
62621: LD_VAR 0 2
62625: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62626: LD_INT 0
62628: PPUSH
62629: PPUSH
62630: PPUSH
62631: PPUSH
// if not base_units then
62632: LD_VAR 0 1
62636: NOT
62637: IFFALSE 62641
// exit ;
62639: GO 62728
// result := false ;
62641: LD_ADDR_VAR 0 2
62645: PUSH
62646: LD_INT 0
62648: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62649: LD_ADDR_VAR 0 5
62653: PUSH
62654: LD_VAR 0 1
62658: PPUSH
62659: LD_INT 21
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PPUSH
62669: CALL_OW 72
62673: ST_TO_ADDR
// if not tmp then
62674: LD_VAR 0 5
62678: NOT
62679: IFFALSE 62683
// exit ;
62681: GO 62728
// for i in tmp do
62683: LD_ADDR_VAR 0 3
62687: PUSH
62688: LD_VAR 0 5
62692: PUSH
62693: FOR_IN
62694: IFFALSE 62726
// begin result := EnemyInRange ( i , 22 ) ;
62696: LD_ADDR_VAR 0 2
62700: PUSH
62701: LD_VAR 0 3
62705: PPUSH
62706: LD_INT 22
62708: PPUSH
62709: CALL 60153 0 2
62713: ST_TO_ADDR
// if result then
62714: LD_VAR 0 2
62718: IFFALSE 62724
// exit ;
62720: POP
62721: POP
62722: GO 62728
// end ;
62724: GO 62693
62726: POP
62727: POP
// end ;
62728: LD_VAR 0 2
62732: RET
// export function FilterByTag ( units , tag ) ; begin
62733: LD_INT 0
62735: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62736: LD_ADDR_VAR 0 3
62740: PUSH
62741: LD_VAR 0 1
62745: PPUSH
62746: LD_INT 120
62748: PUSH
62749: LD_VAR 0 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PPUSH
62758: CALL_OW 72
62762: ST_TO_ADDR
// end ;
62763: LD_VAR 0 3
62767: RET
// export function IsDriver ( un ) ; begin
62768: LD_INT 0
62770: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62771: LD_ADDR_VAR 0 2
62775: PUSH
62776: LD_VAR 0 1
62780: PUSH
62781: LD_INT 55
62783: PUSH
62784: EMPTY
62785: LIST
62786: PPUSH
62787: CALL_OW 69
62791: IN
62792: ST_TO_ADDR
// end ;
62793: LD_VAR 0 2
62797: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
// list := [ ] ;
62802: LD_ADDR_VAR 0 5
62806: PUSH
62807: EMPTY
62808: ST_TO_ADDR
// case d of 0 :
62809: LD_VAR 0 3
62813: PUSH
62814: LD_INT 0
62816: DOUBLE
62817: EQUAL
62818: IFTRUE 62822
62820: GO 62955
62822: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62823: LD_ADDR_VAR 0 5
62827: PUSH
62828: LD_VAR 0 1
62832: PUSH
62833: LD_INT 4
62835: MINUS
62836: PUSH
62837: LD_VAR 0 2
62841: PUSH
62842: LD_INT 4
62844: MINUS
62845: PUSH
62846: LD_INT 2
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: PUSH
62854: LD_VAR 0 1
62858: PUSH
62859: LD_INT 3
62861: MINUS
62862: PUSH
62863: LD_VAR 0 2
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: PUSH
62876: LD_VAR 0 1
62880: PUSH
62881: LD_INT 4
62883: PLUS
62884: PUSH
62885: LD_VAR 0 2
62889: PUSH
62890: LD_INT 4
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: PUSH
62898: LD_VAR 0 1
62902: PUSH
62903: LD_INT 3
62905: PLUS
62906: PUSH
62907: LD_VAR 0 2
62911: PUSH
62912: LD_INT 3
62914: PLUS
62915: PUSH
62916: LD_INT 5
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: PUSH
62924: LD_VAR 0 1
62928: PUSH
62929: LD_VAR 0 2
62933: PUSH
62934: LD_INT 4
62936: PLUS
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: ST_TO_ADDR
// end ; 1 :
62953: GO 63653
62955: LD_INT 1
62957: DOUBLE
62958: EQUAL
62959: IFTRUE 62963
62961: GO 63096
62963: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62964: LD_ADDR_VAR 0 5
62968: PUSH
62969: LD_VAR 0 1
62973: PUSH
62974: LD_VAR 0 2
62978: PUSH
62979: LD_INT 4
62981: MINUS
62982: PUSH
62983: LD_INT 3
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: PUSH
62991: LD_VAR 0 1
62995: PUSH
62996: LD_INT 3
62998: MINUS
62999: PUSH
63000: LD_VAR 0 2
63004: PUSH
63005: LD_INT 3
63007: MINUS
63008: PUSH
63009: LD_INT 2
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: PUSH
63017: LD_VAR 0 1
63021: PUSH
63022: LD_INT 4
63024: MINUS
63025: PUSH
63026: LD_VAR 0 2
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_VAR 0 1
63043: PUSH
63044: LD_VAR 0 2
63048: PUSH
63049: LD_INT 3
63051: PLUS
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: PUSH
63061: LD_VAR 0 1
63065: PUSH
63066: LD_INT 4
63068: PLUS
63069: PUSH
63070: LD_VAR 0 2
63074: PUSH
63075: LD_INT 4
63077: PLUS
63078: PUSH
63079: LD_INT 5
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// end ; 2 :
63094: GO 63653
63096: LD_INT 2
63098: DOUBLE
63099: EQUAL
63100: IFTRUE 63104
63102: GO 63233
63104: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63105: LD_ADDR_VAR 0 5
63109: PUSH
63110: LD_VAR 0 1
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 3
63122: MINUS
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: PUSH
63132: LD_VAR 0 1
63136: PUSH
63137: LD_INT 4
63139: PLUS
63140: PUSH
63141: LD_VAR 0 2
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: LD_VAR 0 1
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 4
63166: PLUS
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: LD_INT 3
63183: MINUS
63184: PUSH
63185: LD_VAR 0 2
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: LD_VAR 0 1
63202: PUSH
63203: LD_INT 4
63205: MINUS
63206: PUSH
63207: LD_VAR 0 2
63211: PUSH
63212: LD_INT 4
63214: MINUS
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: ST_TO_ADDR
// end ; 3 :
63231: GO 63653
63233: LD_INT 3
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63241
63239: GO 63374
63241: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63242: LD_ADDR_VAR 0 5
63246: PUSH
63247: LD_VAR 0 1
63251: PUSH
63252: LD_INT 3
63254: PLUS
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_INT 4
63276: PLUS
63277: PUSH
63278: LD_VAR 0 2
63282: PUSH
63283: LD_INT 4
63285: PLUS
63286: PUSH
63287: LD_INT 5
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: PUSH
63295: LD_VAR 0 1
63299: PUSH
63300: LD_INT 4
63302: MINUS
63303: PUSH
63304: LD_VAR 0 2
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: PUSH
63317: LD_VAR 0 1
63321: PUSH
63322: LD_VAR 0 2
63326: PUSH
63327: LD_INT 4
63329: MINUS
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: PUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 3
63346: MINUS
63347: PUSH
63348: LD_VAR 0 2
63352: PUSH
63353: LD_INT 3
63355: MINUS
63356: PUSH
63357: LD_INT 2
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: ST_TO_ADDR
// end ; 4 :
63372: GO 63653
63374: LD_INT 4
63376: DOUBLE
63377: EQUAL
63378: IFTRUE 63382
63380: GO 63515
63382: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63383: LD_ADDR_VAR 0 5
63387: PUSH
63388: LD_VAR 0 1
63392: PUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_INT 4
63400: PLUS
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: LD_VAR 0 1
63414: PUSH
63415: LD_INT 3
63417: PLUS
63418: PUSH
63419: LD_VAR 0 2
63423: PUSH
63424: LD_INT 3
63426: PLUS
63427: PUSH
63428: LD_INT 5
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: PUSH
63436: LD_VAR 0 1
63440: PUSH
63441: LD_INT 4
63443: PLUS
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 4
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: PUSH
63458: LD_VAR 0 1
63462: PUSH
63463: LD_VAR 0 2
63467: PUSH
63468: LD_INT 3
63470: MINUS
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: PUSH
63480: LD_VAR 0 1
63484: PUSH
63485: LD_INT 4
63487: MINUS
63488: PUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_INT 4
63496: MINUS
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// end ; 5 :
63513: GO 63653
63515: LD_INT 5
63517: DOUBLE
63518: EQUAL
63519: IFTRUE 63523
63521: GO 63652
63523: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63524: LD_ADDR_VAR 0 5
63528: PUSH
63529: LD_VAR 0 1
63533: PUSH
63534: LD_INT 4
63536: MINUS
63537: PUSH
63538: LD_VAR 0 2
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: PUSH
63551: LD_VAR 0 1
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 4
63563: MINUS
63564: PUSH
63565: LD_INT 3
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: LIST
63572: PUSH
63573: LD_VAR 0 1
63577: PUSH
63578: LD_INT 4
63580: PLUS
63581: PUSH
63582: LD_VAR 0 2
63586: PUSH
63587: LD_INT 4
63589: PLUS
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: LD_VAR 0 1
63603: PUSH
63604: LD_INT 3
63606: PLUS
63607: PUSH
63608: LD_VAR 0 2
63612: PUSH
63613: LD_INT 4
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: PUSH
63621: LD_VAR 0 1
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: LD_INT 3
63633: PLUS
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// end ; end ;
63650: GO 63653
63652: POP
// result := list ;
63653: LD_ADDR_VAR 0 4
63657: PUSH
63658: LD_VAR 0 5
63662: ST_TO_ADDR
// end ;
63663: LD_VAR 0 4
63667: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63668: LD_INT 0
63670: PPUSH
63671: PPUSH
63672: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63673: LD_VAR 0 1
63677: NOT
63678: IFTRUE 63706
63680: PUSH
63681: LD_VAR 0 2
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 3
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: IN
63704: NOT
63705: OR
63706: IFFALSE 63710
// exit ;
63708: GO 63793
// tmp := [ ] ;
63710: LD_ADDR_VAR 0 5
63714: PUSH
63715: EMPTY
63716: ST_TO_ADDR
// for i in units do
63717: LD_ADDR_VAR 0 4
63721: PUSH
63722: LD_VAR 0 1
63726: PUSH
63727: FOR_IN
63728: IFFALSE 63762
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63730: LD_ADDR_VAR 0 5
63734: PUSH
63735: LD_VAR 0 5
63739: PPUSH
63740: LD_VAR 0 4
63744: PPUSH
63745: LD_VAR 0 2
63749: PPUSH
63750: CALL_OW 259
63754: PPUSH
63755: CALL 65188 0 2
63759: ST_TO_ADDR
63760: GO 63727
63762: POP
63763: POP
// if not tmp then
63764: LD_VAR 0 5
63768: NOT
63769: IFFALSE 63773
// exit ;
63771: GO 63793
// result := SortListByListDesc ( units , tmp ) ;
63773: LD_ADDR_VAR 0 3
63777: PUSH
63778: LD_VAR 0 1
63782: PPUSH
63783: LD_VAR 0 5
63787: PPUSH
63788: CALL_OW 77
63792: ST_TO_ADDR
// end ;
63793: LD_VAR 0 3
63797: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63798: LD_INT 0
63800: PPUSH
63801: PPUSH
63802: PPUSH
// result := false ;
63803: LD_ADDR_VAR 0 3
63807: PUSH
63808: LD_INT 0
63810: ST_TO_ADDR
// if not building then
63811: LD_VAR 0 2
63815: NOT
63816: IFFALSE 63820
// exit ;
63818: GO 63964
// x := GetX ( building ) ;
63820: LD_ADDR_VAR 0 4
63824: PUSH
63825: LD_VAR 0 2
63829: PPUSH
63830: CALL_OW 250
63834: ST_TO_ADDR
// y := GetY ( building ) ;
63835: LD_ADDR_VAR 0 5
63839: PUSH
63840: LD_VAR 0 2
63844: PPUSH
63845: CALL_OW 251
63849: ST_TO_ADDR
// if not x or not y then
63850: LD_VAR 0 4
63854: NOT
63855: IFTRUE 63864
63857: PUSH
63858: LD_VAR 0 5
63862: NOT
63863: OR
63864: IFFALSE 63868
// exit ;
63866: GO 63964
// if GetTaskList ( unit ) then
63868: LD_VAR 0 1
63872: PPUSH
63873: CALL_OW 437
63877: IFFALSE 63964
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63879: LD_STRING e
63881: PUSH
63882: LD_VAR 0 1
63886: PPUSH
63887: CALL_OW 437
63891: PUSH
63892: LD_INT 1
63894: ARRAY
63895: PUSH
63896: LD_INT 1
63898: ARRAY
63899: EQUAL
63900: IFFALSE 63927
63902: PUSH
63903: LD_VAR 0 4
63907: PUSH
63908: LD_VAR 0 1
63912: PPUSH
63913: CALL_OW 437
63917: PUSH
63918: LD_INT 1
63920: ARRAY
63921: PUSH
63922: LD_INT 2
63924: ARRAY
63925: EQUAL
63926: AND
63927: IFFALSE 63954
63929: PUSH
63930: LD_VAR 0 5
63934: PUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: CALL_OW 437
63944: PUSH
63945: LD_INT 1
63947: ARRAY
63948: PUSH
63949: LD_INT 3
63951: ARRAY
63952: EQUAL
63953: AND
63954: IFFALSE 63964
// result := true end ;
63956: LD_ADDR_VAR 0 3
63960: PUSH
63961: LD_INT 1
63963: ST_TO_ADDR
// end ;
63964: LD_VAR 0 3
63968: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63969: LD_INT 0
63971: PPUSH
// result := false ;
63972: LD_ADDR_VAR 0 4
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// if GetTaskList ( unit ) then
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 437
63989: IFFALSE 64076
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63991: LD_STRING M
63993: PUSH
63994: LD_VAR 0 1
63998: PPUSH
63999: CALL_OW 437
64003: PUSH
64004: LD_INT 1
64006: ARRAY
64007: PUSH
64008: LD_INT 1
64010: ARRAY
64011: EQUAL
64012: IFFALSE 64039
64014: PUSH
64015: LD_VAR 0 2
64019: PUSH
64020: LD_VAR 0 1
64024: PPUSH
64025: CALL_OW 437
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: PUSH
64034: LD_INT 2
64036: ARRAY
64037: EQUAL
64038: AND
64039: IFFALSE 64066
64041: PUSH
64042: LD_VAR 0 3
64046: PUSH
64047: LD_VAR 0 1
64051: PPUSH
64052: CALL_OW 437
64056: PUSH
64057: LD_INT 1
64059: ARRAY
64060: PUSH
64061: LD_INT 3
64063: ARRAY
64064: EQUAL
64065: AND
64066: IFFALSE 64076
// result := true ;
64068: LD_ADDR_VAR 0 4
64072: PUSH
64073: LD_INT 1
64075: ST_TO_ADDR
// end ; end ;
64076: LD_VAR 0 4
64080: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64081: LD_INT 0
64083: PPUSH
64084: PPUSH
64085: PPUSH
64086: PPUSH
// if not unit or not area then
64087: LD_VAR 0 1
64091: NOT
64092: IFTRUE 64101
64094: PUSH
64095: LD_VAR 0 2
64099: NOT
64100: OR
64101: IFFALSE 64105
// exit ;
64103: GO 64281
// tmp := AreaToList ( area , i ) ;
64105: LD_ADDR_VAR 0 6
64109: PUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: LD_VAR 0 5
64119: PPUSH
64120: CALL_OW 517
64124: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64125: LD_ADDR_VAR 0 5
64129: PUSH
64130: DOUBLE
64131: LD_INT 1
64133: DEC
64134: ST_TO_ADDR
64135: LD_VAR 0 6
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: PUSH
64144: FOR_TO
64145: IFFALSE 64279
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64147: LD_ADDR_VAR 0 7
64151: PUSH
64152: LD_VAR 0 6
64156: PUSH
64157: LD_INT 1
64159: ARRAY
64160: PUSH
64161: LD_VAR 0 5
64165: ARRAY
64166: PUSH
64167: LD_VAR 0 6
64171: PUSH
64172: LD_INT 2
64174: ARRAY
64175: PUSH
64176: LD_VAR 0 5
64180: ARRAY
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64186: LD_INT 92
64188: PUSH
64189: LD_VAR 0 7
64193: PUSH
64194: LD_INT 1
64196: ARRAY
64197: PUSH
64198: LD_VAR 0 7
64202: PUSH
64203: LD_INT 2
64205: ARRAY
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL_OW 69
64220: PUSH
64221: LD_INT 0
64223: EQUAL
64224: IFFALSE 64277
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_VAR 0 7
64235: PUSH
64236: LD_INT 1
64238: ARRAY
64239: PPUSH
64240: LD_VAR 0 7
64244: PUSH
64245: LD_INT 2
64247: ARRAY
64248: PPUSH
64249: LD_VAR 0 3
64253: PPUSH
64254: CALL_OW 48
// result := IsPlaced ( unit ) ;
64258: LD_ADDR_VAR 0 4
64262: PUSH
64263: LD_VAR 0 1
64267: PPUSH
64268: CALL_OW 305
64272: ST_TO_ADDR
// exit ;
64273: POP
64274: POP
64275: GO 64281
// end ; end ;
64277: GO 64144
64279: POP
64280: POP
// end ;
64281: LD_VAR 0 4
64285: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64286: LD_INT 0
64288: PPUSH
64289: PPUSH
64290: PPUSH
// if not side or side > 8 then
64291: LD_VAR 0 1
64295: NOT
64296: IFTRUE 64308
64298: PUSH
64299: LD_VAR 0 1
64303: PUSH
64304: LD_INT 8
64306: GREATER
64307: OR
64308: IFFALSE 64312
// exit ;
64310: GO 64499
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64312: LD_ADDR_VAR 0 4
64316: PUSH
64317: LD_INT 22
64319: PUSH
64320: LD_VAR 0 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 21
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PPUSH
64343: CALL_OW 69
64347: ST_TO_ADDR
// if not tmp then
64348: LD_VAR 0 4
64352: NOT
64353: IFFALSE 64357
// exit ;
64355: GO 64499
// enable_addtolog := true ;
64357: LD_ADDR_OWVAR 81
64361: PUSH
64362: LD_INT 1
64364: ST_TO_ADDR
// AddToLog ( [ ) ;
64365: LD_STRING [
64367: PPUSH
64368: CALL_OW 561
// for i in tmp do
64372: LD_ADDR_VAR 0 3
64376: PUSH
64377: LD_VAR 0 4
64381: PUSH
64382: FOR_IN
64383: IFFALSE 64490
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64385: LD_STRING [
64387: PUSH
64388: LD_VAR 0 3
64392: PPUSH
64393: CALL_OW 266
64397: STR
64398: PUSH
64399: LD_STRING , 
64401: STR
64402: PUSH
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 250
64412: STR
64413: PUSH
64414: LD_STRING , 
64416: STR
64417: PUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: CALL_OW 251
64427: STR
64428: PUSH
64429: LD_STRING , 
64431: STR
64432: PUSH
64433: LD_VAR 0 3
64437: PPUSH
64438: CALL_OW 254
64442: STR
64443: PUSH
64444: LD_STRING , 
64446: STR
64447: PUSH
64448: LD_VAR 0 3
64452: PPUSH
64453: LD_INT 1
64455: PPUSH
64456: CALL_OW 268
64460: STR
64461: PUSH
64462: LD_STRING , 
64464: STR
64465: PUSH
64466: LD_VAR 0 3
64470: PPUSH
64471: LD_INT 2
64473: PPUSH
64474: CALL_OW 268
64478: STR
64479: PUSH
64480: LD_STRING ],
64482: STR
64483: PPUSH
64484: CALL_OW 561
// end ;
64488: GO 64382
64490: POP
64491: POP
// AddToLog ( ]; ) ;
64492: LD_STRING ];
64494: PPUSH
64495: CALL_OW 561
// end ;
64499: LD_VAR 0 2
64503: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64504: LD_INT 0
64506: PPUSH
64507: PPUSH
64508: PPUSH
64509: PPUSH
64510: PPUSH
// if not area or not rate or not max then
64511: LD_VAR 0 1
64515: NOT
64516: IFTRUE 64525
64518: PUSH
64519: LD_VAR 0 2
64523: NOT
64524: OR
64525: IFTRUE 64534
64527: PUSH
64528: LD_VAR 0 4
64532: NOT
64533: OR
64534: IFFALSE 64538
// exit ;
64536: GO 64727
// while 1 do
64538: LD_INT 1
64540: IFFALSE 64727
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64542: LD_ADDR_VAR 0 9
64546: PUSH
64547: LD_VAR 0 1
64551: PPUSH
64552: LD_INT 1
64554: PPUSH
64555: CALL_OW 287
64559: PUSH
64560: LD_INT 10
64562: MUL
64563: ST_TO_ADDR
// r := rate / 10 ;
64564: LD_ADDR_VAR 0 7
64568: PUSH
64569: LD_VAR 0 2
64573: PUSH
64574: LD_INT 10
64576: DIVREAL
64577: ST_TO_ADDR
// time := 1 1$00 ;
64578: LD_ADDR_VAR 0 8
64582: PUSH
64583: LD_INT 2100
64585: ST_TO_ADDR
// if amount < min then
64586: LD_VAR 0 9
64590: PUSH
64591: LD_VAR 0 3
64595: LESS
64596: IFFALSE 64614
// r := r * 2 else
64598: LD_ADDR_VAR 0 7
64602: PUSH
64603: LD_VAR 0 7
64607: PUSH
64608: LD_INT 2
64610: MUL
64611: ST_TO_ADDR
64612: GO 64640
// if amount > max then
64614: LD_VAR 0 9
64618: PUSH
64619: LD_VAR 0 4
64623: GREATER
64624: IFFALSE 64640
// r := r / 2 ;
64626: LD_ADDR_VAR 0 7
64630: PUSH
64631: LD_VAR 0 7
64635: PUSH
64636: LD_INT 2
64638: DIVREAL
64639: ST_TO_ADDR
// time := time / r ;
64640: LD_ADDR_VAR 0 8
64644: PUSH
64645: LD_VAR 0 8
64649: PUSH
64650: LD_VAR 0 7
64654: DIVREAL
64655: ST_TO_ADDR
// if time < 0 then
64656: LD_VAR 0 8
64660: PUSH
64661: LD_INT 0
64663: LESS
64664: IFFALSE 64681
// time := time * - 1 ;
64666: LD_ADDR_VAR 0 8
64670: PUSH
64671: LD_VAR 0 8
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: MUL
64680: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64681: LD_VAR 0 8
64685: PUSH
64686: LD_INT 35
64688: PPUSH
64689: LD_INT 875
64691: PPUSH
64692: CALL_OW 12
64696: PLUS
64697: PPUSH
64698: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64702: LD_INT 1
64704: PPUSH
64705: LD_INT 5
64707: PPUSH
64708: CALL_OW 12
64712: PPUSH
64713: LD_VAR 0 1
64717: PPUSH
64718: LD_INT 1
64720: PPUSH
64721: CALL_OW 55
// end ;
64725: GO 64538
// end ;
64727: LD_VAR 0 5
64731: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64732: LD_INT 0
64734: PPUSH
64735: PPUSH
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
// if not turrets or not factories then
64742: LD_VAR 0 1
64746: NOT
64747: IFTRUE 64756
64749: PUSH
64750: LD_VAR 0 2
64754: NOT
64755: OR
64756: IFFALSE 64760
// exit ;
64758: GO 65067
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64760: LD_ADDR_VAR 0 10
64764: PUSH
64765: LD_INT 5
64767: PUSH
64768: LD_INT 6
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: LD_INT 4
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: LD_INT 5
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 24
64802: PUSH
64803: LD_INT 25
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 23
64812: PUSH
64813: LD_INT 27
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 42
64826: PUSH
64827: LD_INT 43
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 44
64836: PUSH
64837: LD_INT 46
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 45
64846: PUSH
64847: LD_INT 47
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// result := [ ] ;
64864: LD_ADDR_VAR 0 3
64868: PUSH
64869: EMPTY
64870: ST_TO_ADDR
// for i in turrets do
64871: LD_ADDR_VAR 0 4
64875: PUSH
64876: LD_VAR 0 1
64880: PUSH
64881: FOR_IN
64882: IFFALSE 65065
// begin nat := GetNation ( i ) ;
64884: LD_ADDR_VAR 0 7
64888: PUSH
64889: LD_VAR 0 4
64893: PPUSH
64894: CALL_OW 248
64898: ST_TO_ADDR
// weapon := 0 ;
64899: LD_ADDR_VAR 0 8
64903: PUSH
64904: LD_INT 0
64906: ST_TO_ADDR
// if not nat then
64907: LD_VAR 0 7
64911: NOT
64912: IFFALSE 64916
// continue ;
64914: GO 64881
// for j in list [ nat ] do
64916: LD_ADDR_VAR 0 5
64920: PUSH
64921: LD_VAR 0 10
64925: PUSH
64926: LD_VAR 0 7
64930: ARRAY
64931: PUSH
64932: FOR_IN
64933: IFFALSE 64974
// if GetBWeapon ( i ) = j [ 1 ] then
64935: LD_VAR 0 4
64939: PPUSH
64940: CALL_OW 269
64944: PUSH
64945: LD_VAR 0 5
64949: PUSH
64950: LD_INT 1
64952: ARRAY
64953: EQUAL
64954: IFFALSE 64972
// begin weapon := j [ 2 ] ;
64956: LD_ADDR_VAR 0 8
64960: PUSH
64961: LD_VAR 0 5
64965: PUSH
64966: LD_INT 2
64968: ARRAY
64969: ST_TO_ADDR
// break ;
64970: GO 64974
// end ;
64972: GO 64932
64974: POP
64975: POP
// if not weapon then
64976: LD_VAR 0 8
64980: NOT
64981: IFFALSE 64985
// continue ;
64983: GO 64881
// for k in factories do
64985: LD_ADDR_VAR 0 6
64989: PUSH
64990: LD_VAR 0 2
64994: PUSH
64995: FOR_IN
64996: IFFALSE 65061
// begin weapons := AvailableWeaponList ( k ) ;
64998: LD_ADDR_VAR 0 9
65002: PUSH
65003: LD_VAR 0 6
65007: PPUSH
65008: CALL_OW 478
65012: ST_TO_ADDR
// if not weapons then
65013: LD_VAR 0 9
65017: NOT
65018: IFFALSE 65022
// continue ;
65020: GO 64995
// if weapon in weapons then
65022: LD_VAR 0 8
65026: PUSH
65027: LD_VAR 0 9
65031: IN
65032: IFFALSE 65059
// begin result := [ i , weapon ] ;
65034: LD_ADDR_VAR 0 3
65038: PUSH
65039: LD_VAR 0 4
65043: PUSH
65044: LD_VAR 0 8
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: ST_TO_ADDR
// exit ;
65053: POP
65054: POP
65055: POP
65056: POP
65057: GO 65067
// end ; end ;
65059: GO 64995
65061: POP
65062: POP
// end ;
65063: GO 64881
65065: POP
65066: POP
// end ;
65067: LD_VAR 0 3
65071: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65072: LD_INT 0
65074: PPUSH
// if not side or side > 8 then
65075: LD_VAR 0 3
65079: NOT
65080: IFTRUE 65092
65082: PUSH
65083: LD_VAR 0 3
65087: PUSH
65088: LD_INT 8
65090: GREATER
65091: OR
65092: IFFALSE 65096
// exit ;
65094: GO 65155
// if not range then
65096: LD_VAR 0 4
65100: NOT
65101: IFFALSE 65112
// range := - 12 ;
65103: LD_ADDR_VAR 0 4
65107: PUSH
65108: LD_INT 12
65110: NEG
65111: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65112: LD_VAR 0 1
65116: PPUSH
65117: LD_VAR 0 2
65121: PPUSH
65122: LD_VAR 0 3
65126: PPUSH
65127: LD_VAR 0 4
65131: PPUSH
65132: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65136: LD_VAR 0 1
65140: PPUSH
65141: LD_VAR 0 2
65145: PPUSH
65146: LD_VAR 0 3
65150: PPUSH
65151: CALL_OW 331
// end ;
65155: LD_VAR 0 5
65159: RET
// export function Video ( mode ) ; begin
65160: LD_INT 0
65162: PPUSH
// ingame_video = mode ;
65163: LD_ADDR_OWVAR 52
65167: PUSH
65168: LD_VAR 0 1
65172: ST_TO_ADDR
// interface_hidden = mode ;
65173: LD_ADDR_OWVAR 54
65177: PUSH
65178: LD_VAR 0 1
65182: ST_TO_ADDR
// end ;
65183: LD_VAR 0 2
65187: RET
// export function Join ( array , element ) ; begin
65188: LD_INT 0
65190: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_VAR 0 1
65200: PPUSH
65201: LD_VAR 0 1
65205: PUSH
65206: LD_INT 1
65208: PLUS
65209: PPUSH
65210: LD_VAR 0 2
65214: PPUSH
65215: CALL_OW 1
65219: ST_TO_ADDR
// end ;
65220: LD_VAR 0 3
65224: RET
// export function JoinUnion ( array , element ) ; begin
65225: LD_INT 0
65227: PPUSH
// result := array union element ;
65228: LD_ADDR_VAR 0 3
65232: PUSH
65233: LD_VAR 0 1
65237: PUSH
65238: LD_VAR 0 2
65242: UNION
65243: ST_TO_ADDR
// end ;
65244: LD_VAR 0 3
65248: RET
// export function GetBehemoths ( side ) ; begin
65249: LD_INT 0
65251: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65252: LD_ADDR_VAR 0 2
65256: PUSH
65257: LD_INT 22
65259: PUSH
65260: LD_VAR 0 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 31
65271: PUSH
65272: LD_INT 25
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PPUSH
65283: CALL_OW 69
65287: ST_TO_ADDR
// end ;
65288: LD_VAR 0 2
65292: RET
// export function Shuffle ( array ) ; var i , index ; begin
65293: LD_INT 0
65295: PPUSH
65296: PPUSH
65297: PPUSH
// result := [ ] ;
65298: LD_ADDR_VAR 0 2
65302: PUSH
65303: EMPTY
65304: ST_TO_ADDR
// if not array then
65305: LD_VAR 0 1
65309: NOT
65310: IFFALSE 65314
// exit ;
65312: GO 65413
// Randomize ;
65314: CALL_OW 10
// for i = array downto 1 do
65318: LD_ADDR_VAR 0 3
65322: PUSH
65323: DOUBLE
65324: LD_VAR 0 1
65328: INC
65329: ST_TO_ADDR
65330: LD_INT 1
65332: PUSH
65333: FOR_DOWNTO
65334: IFFALSE 65411
// begin index := rand ( 1 , array ) ;
65336: LD_ADDR_VAR 0 4
65340: PUSH
65341: LD_INT 1
65343: PPUSH
65344: LD_VAR 0 1
65348: PPUSH
65349: CALL_OW 12
65353: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65354: LD_ADDR_VAR 0 2
65358: PUSH
65359: LD_VAR 0 2
65363: PPUSH
65364: LD_VAR 0 2
65368: PUSH
65369: LD_INT 1
65371: PLUS
65372: PPUSH
65373: LD_VAR 0 1
65377: PUSH
65378: LD_VAR 0 4
65382: ARRAY
65383: PPUSH
65384: CALL_OW 2
65388: ST_TO_ADDR
// array := Delete ( array , index ) ;
65389: LD_ADDR_VAR 0 1
65393: PUSH
65394: LD_VAR 0 1
65398: PPUSH
65399: LD_VAR 0 4
65403: PPUSH
65404: CALL_OW 3
65408: ST_TO_ADDR
// end ;
65409: GO 65333
65411: POP
65412: POP
// end ;
65413: LD_VAR 0 2
65417: RET
// export function GetBaseMaterials ( base ) ; begin
65418: LD_INT 0
65420: PPUSH
// result := [ 0 , 0 , 0 ] ;
65421: LD_ADDR_VAR 0 2
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// if not base then
65440: LD_VAR 0 1
65444: NOT
65445: IFFALSE 65449
// exit ;
65447: GO 65498
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65449: LD_ADDR_VAR 0 2
65453: PUSH
65454: LD_VAR 0 1
65458: PPUSH
65459: LD_INT 1
65461: PPUSH
65462: CALL_OW 275
65466: PUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: LD_INT 2
65474: PPUSH
65475: CALL_OW 275
65479: PUSH
65480: LD_VAR 0 1
65484: PPUSH
65485: LD_INT 3
65487: PPUSH
65488: CALL_OW 275
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// end ;
65498: LD_VAR 0 2
65502: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65503: LD_INT 0
65505: PPUSH
65506: PPUSH
// result := array ;
65507: LD_ADDR_VAR 0 3
65511: PUSH
65512: LD_VAR 0 1
65516: ST_TO_ADDR
// if size >= result then
65517: LD_VAR 0 2
65521: PUSH
65522: LD_VAR 0 3
65526: GREATEREQUAL
65527: IFFALSE 65531
// exit ;
65529: GO 65581
// if size then
65531: LD_VAR 0 2
65535: IFFALSE 65581
// for i := array downto size do
65537: LD_ADDR_VAR 0 4
65541: PUSH
65542: DOUBLE
65543: LD_VAR 0 1
65547: INC
65548: ST_TO_ADDR
65549: LD_VAR 0 2
65553: PUSH
65554: FOR_DOWNTO
65555: IFFALSE 65579
// result := Delete ( result , result ) ;
65557: LD_ADDR_VAR 0 3
65561: PUSH
65562: LD_VAR 0 3
65566: PPUSH
65567: LD_VAR 0 3
65571: PPUSH
65572: CALL_OW 3
65576: ST_TO_ADDR
65577: GO 65554
65579: POP
65580: POP
// end ;
65581: LD_VAR 0 3
65585: RET
// export function ComExit ( unit ) ; var tmp ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
// if not IsInUnit ( unit ) then
65590: LD_VAR 0 1
65594: PPUSH
65595: CALL_OW 310
65599: NOT
65600: IFFALSE 65604
// exit ;
65602: GO 65664
// tmp := IsInUnit ( unit ) ;
65604: LD_ADDR_VAR 0 3
65608: PUSH
65609: LD_VAR 0 1
65613: PPUSH
65614: CALL_OW 310
65618: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65619: LD_VAR 0 3
65623: PPUSH
65624: CALL_OW 247
65628: PUSH
65629: LD_INT 2
65631: EQUAL
65632: IFFALSE 65645
// ComExitVehicle ( unit ) else
65634: LD_VAR 0 1
65638: PPUSH
65639: CALL_OW 121
65643: GO 65654
// ComExitBuilding ( unit ) ;
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 122
// result := tmp ;
65654: LD_ADDR_VAR 0 2
65658: PUSH
65659: LD_VAR 0 3
65663: ST_TO_ADDR
// end ;
65664: LD_VAR 0 2
65668: RET
// export function ComExitAll ( units ) ; var i ; begin
65669: LD_INT 0
65671: PPUSH
65672: PPUSH
// if not units then
65673: LD_VAR 0 1
65677: NOT
65678: IFFALSE 65682
// exit ;
65680: GO 65708
// for i in units do
65682: LD_ADDR_VAR 0 3
65686: PUSH
65687: LD_VAR 0 1
65691: PUSH
65692: FOR_IN
65693: IFFALSE 65706
// ComExit ( i ) ;
65695: LD_VAR 0 3
65699: PPUSH
65700: CALL 65586 0 1
65704: GO 65692
65706: POP
65707: POP
// end ;
65708: LD_VAR 0 2
65712: RET
// export function ResetHc ; begin
65713: LD_INT 0
65715: PPUSH
// InitHc ;
65716: CALL_OW 19
// hc_importance := 0 ;
65720: LD_ADDR_OWVAR 32
65724: PUSH
65725: LD_INT 0
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 1
65732: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65733: LD_INT 0
65735: PPUSH
65736: PPUSH
65737: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65738: LD_ADDR_VAR 0 6
65742: PUSH
65743: LD_VAR 0 1
65747: PUSH
65748: LD_VAR 0 3
65752: PLUS
65753: PUSH
65754: LD_INT 2
65756: DIV
65757: ST_TO_ADDR
// if _x < 0 then
65758: LD_VAR 0 6
65762: PUSH
65763: LD_INT 0
65765: LESS
65766: IFFALSE 65783
// _x := _x * - 1 ;
65768: LD_ADDR_VAR 0 6
65772: PUSH
65773: LD_VAR 0 6
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: MUL
65782: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65783: LD_ADDR_VAR 0 7
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_VAR 0 4
65797: PLUS
65798: PUSH
65799: LD_INT 2
65801: DIV
65802: ST_TO_ADDR
// if _y < 0 then
65803: LD_VAR 0 7
65807: PUSH
65808: LD_INT 0
65810: LESS
65811: IFFALSE 65828
// _y := _y * - 1 ;
65813: LD_ADDR_VAR 0 7
65817: PUSH
65818: LD_VAR 0 7
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: MUL
65827: ST_TO_ADDR
// result := [ _x , _y ] ;
65828: LD_ADDR_VAR 0 5
65832: PUSH
65833: LD_VAR 0 6
65837: PUSH
65838: LD_VAR 0 7
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: ST_TO_ADDR
// end ;
65847: LD_VAR 0 5
65851: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65852: LD_INT 0
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
// task := GetTaskList ( unit ) ;
65858: LD_ADDR_VAR 0 7
65862: PUSH
65863: LD_VAR 0 1
65867: PPUSH
65868: CALL_OW 437
65872: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65873: LD_VAR 0 7
65877: NOT
65878: IFFALSE 65897
65880: PUSH
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_VAR 0 2
65890: PPUSH
65891: CALL_OW 308
65895: NOT
65896: AND
65897: IFFALSE 65901
// exit ;
65899: GO 66019
// if IsInArea ( unit , area ) then
65901: LD_VAR 0 1
65905: PPUSH
65906: LD_VAR 0 2
65910: PPUSH
65911: CALL_OW 308
65915: IFFALSE 65933
// begin ComMoveToArea ( unit , goAway ) ;
65917: LD_VAR 0 1
65921: PPUSH
65922: LD_VAR 0 3
65926: PPUSH
65927: CALL_OW 113
// exit ;
65931: GO 66019
// end ; if task [ 1 ] [ 1 ] <> M then
65933: LD_VAR 0 7
65937: PUSH
65938: LD_INT 1
65940: ARRAY
65941: PUSH
65942: LD_INT 1
65944: ARRAY
65945: PUSH
65946: LD_STRING M
65948: NONEQUAL
65949: IFFALSE 65953
// exit ;
65951: GO 66019
// x := task [ 1 ] [ 2 ] ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: LD_VAR 0 7
65962: PUSH
65963: LD_INT 1
65965: ARRAY
65966: PUSH
65967: LD_INT 2
65969: ARRAY
65970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65971: LD_ADDR_VAR 0 6
65975: PUSH
65976: LD_VAR 0 7
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PUSH
65985: LD_INT 3
65987: ARRAY
65988: ST_TO_ADDR
// if InArea ( x , y , area ) then
65989: LD_VAR 0 5
65993: PPUSH
65994: LD_VAR 0 6
65998: PPUSH
65999: LD_VAR 0 2
66003: PPUSH
66004: CALL_OW 309
66008: IFFALSE 66019
// ComStop ( unit ) ;
66010: LD_VAR 0 1
66014: PPUSH
66015: CALL_OW 141
// end ;
66019: LD_VAR 0 4
66023: RET
// export function Abs ( value ) ; begin
66024: LD_INT 0
66026: PPUSH
// result := value ;
66027: LD_ADDR_VAR 0 2
66031: PUSH
66032: LD_VAR 0 1
66036: ST_TO_ADDR
// if value < 0 then
66037: LD_VAR 0 1
66041: PUSH
66042: LD_INT 0
66044: LESS
66045: IFFALSE 66062
// result := value * - 1 ;
66047: LD_ADDR_VAR 0 2
66051: PUSH
66052: LD_VAR 0 1
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: MUL
66061: ST_TO_ADDR
// end ;
66062: LD_VAR 0 2
66066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66067: LD_INT 0
66069: PPUSH
66070: PPUSH
66071: PPUSH
66072: PPUSH
66073: PPUSH
66074: PPUSH
66075: PPUSH
66076: PPUSH
// if not unit or not building then
66077: LD_VAR 0 1
66081: NOT
66082: IFTRUE 66091
66084: PUSH
66085: LD_VAR 0 2
66089: NOT
66090: OR
66091: IFFALSE 66095
// exit ;
66093: GO 66323
// x := GetX ( building ) ;
66095: LD_ADDR_VAR 0 4
66099: PUSH
66100: LD_VAR 0 2
66104: PPUSH
66105: CALL_OW 250
66109: ST_TO_ADDR
// y := GetY ( building ) ;
66110: LD_ADDR_VAR 0 6
66114: PUSH
66115: LD_VAR 0 2
66119: PPUSH
66120: CALL_OW 251
66124: ST_TO_ADDR
// d := GetDir ( building ) ;
66125: LD_ADDR_VAR 0 8
66129: PUSH
66130: LD_VAR 0 2
66134: PPUSH
66135: CALL_OW 254
66139: ST_TO_ADDR
// r := 4 ;
66140: LD_ADDR_VAR 0 9
66144: PUSH
66145: LD_INT 4
66147: ST_TO_ADDR
// for i := 1 to 5 do
66148: LD_ADDR_VAR 0 10
66152: PUSH
66153: DOUBLE
66154: LD_INT 1
66156: DEC
66157: ST_TO_ADDR
66158: LD_INT 5
66160: PUSH
66161: FOR_TO
66162: IFFALSE 66321
// begin _x := ShiftX ( x , d , r + i ) ;
66164: LD_ADDR_VAR 0 5
66168: PUSH
66169: LD_VAR 0 4
66173: PPUSH
66174: LD_VAR 0 8
66178: PPUSH
66179: LD_VAR 0 9
66183: PUSH
66184: LD_VAR 0 10
66188: PLUS
66189: PPUSH
66190: CALL_OW 272
66194: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66195: LD_ADDR_VAR 0 7
66199: PUSH
66200: LD_VAR 0 6
66204: PPUSH
66205: LD_VAR 0 8
66209: PPUSH
66210: LD_VAR 0 9
66214: PUSH
66215: LD_VAR 0 10
66219: PLUS
66220: PPUSH
66221: CALL_OW 273
66225: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66226: LD_VAR 0 5
66230: PPUSH
66231: LD_VAR 0 7
66235: PPUSH
66236: CALL_OW 488
66240: IFFALSE 66275
66242: PUSH
66243: LD_VAR 0 5
66247: PPUSH
66248: LD_VAR 0 7
66252: PPUSH
66253: CALL_OW 428
66257: PPUSH
66258: CALL_OW 247
66262: PUSH
66263: LD_INT 3
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: IN
66273: NOT
66274: AND
66275: IFFALSE 66319
// begin ComMoveXY ( unit , _x , _y ) ;
66277: LD_VAR 0 1
66281: PPUSH
66282: LD_VAR 0 5
66286: PPUSH
66287: LD_VAR 0 7
66291: PPUSH
66292: CALL_OW 111
// result := [ _x , _y ] ;
66296: LD_ADDR_VAR 0 3
66300: PUSH
66301: LD_VAR 0 5
66305: PUSH
66306: LD_VAR 0 7
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: ST_TO_ADDR
// exit ;
66315: POP
66316: POP
66317: GO 66323
// end ; end ;
66319: GO 66161
66321: POP
66322: POP
// end ;
66323: LD_VAR 0 3
66327: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66328: LD_INT 0
66330: PPUSH
66331: PPUSH
66332: PPUSH
// result := 0 ;
66333: LD_ADDR_VAR 0 3
66337: PUSH
66338: LD_INT 0
66340: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66341: LD_VAR 0 1
66345: PUSH
66346: LD_INT 0
66348: LESS
66349: IFTRUE 66361
66351: PUSH
66352: LD_VAR 0 1
66356: PUSH
66357: LD_INT 8
66359: GREATER
66360: OR
66361: IFTRUE 66373
66363: PUSH
66364: LD_VAR 0 2
66368: PUSH
66369: LD_INT 0
66371: LESS
66372: OR
66373: IFTRUE 66385
66375: PUSH
66376: LD_VAR 0 2
66380: PUSH
66381: LD_INT 8
66383: GREATER
66384: OR
66385: IFFALSE 66389
// exit ;
66387: GO 66464
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66389: LD_ADDR_VAR 0 4
66393: PUSH
66394: LD_INT 22
66396: PUSH
66397: LD_VAR 0 2
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PPUSH
66406: CALL_OW 69
66410: PUSH
66411: FOR_IN
66412: IFFALSE 66462
// begin un := UnitShoot ( i ) ;
66414: LD_ADDR_VAR 0 5
66418: PUSH
66419: LD_VAR 0 4
66423: PPUSH
66424: CALL_OW 504
66428: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66429: LD_VAR 0 5
66433: PPUSH
66434: CALL_OW 255
66438: PUSH
66439: LD_VAR 0 1
66443: EQUAL
66444: IFFALSE 66460
// begin result := un ;
66446: LD_ADDR_VAR 0 3
66450: PUSH
66451: LD_VAR 0 5
66455: ST_TO_ADDR
// exit ;
66456: POP
66457: POP
66458: GO 66464
// end ; end ;
66460: GO 66411
66462: POP
66463: POP
// end ;
66464: LD_VAR 0 3
66468: RET
// export function GetCargoBay ( units ) ; begin
66469: LD_INT 0
66471: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66472: LD_ADDR_VAR 0 2
66476: PUSH
66477: LD_VAR 0 1
66481: PPUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 34
66487: PUSH
66488: LD_INT 12
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 34
66497: PUSH
66498: LD_INT 51
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 34
66507: PUSH
66508: LD_INT 32
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 34
66517: PUSH
66518: LD_INT 89
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: PPUSH
66532: CALL_OW 72
66536: ST_TO_ADDR
// end ;
66537: LD_VAR 0 2
66541: RET
// export function Negate ( value ) ; begin
66542: LD_INT 0
66544: PPUSH
// result := not value ;
66545: LD_ADDR_VAR 0 2
66549: PUSH
66550: LD_VAR 0 1
66554: NOT
66555: ST_TO_ADDR
// end ;
66556: LD_VAR 0 2
66560: RET
// export function Inc ( value ) ; begin
66561: LD_INT 0
66563: PPUSH
// result := value + 1 ;
66564: LD_ADDR_VAR 0 2
66568: PUSH
66569: LD_VAR 0 1
66573: PUSH
66574: LD_INT 1
66576: PLUS
66577: ST_TO_ADDR
// end ;
66578: LD_VAR 0 2
66582: RET
// export function Dec ( value ) ; begin
66583: LD_INT 0
66585: PPUSH
// result := value - 1 ;
66586: LD_ADDR_VAR 0 2
66590: PUSH
66591: LD_VAR 0 1
66595: PUSH
66596: LD_INT 1
66598: MINUS
66599: ST_TO_ADDR
// end ;
66600: LD_VAR 0 2
66604: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66605: LD_INT 0
66607: PPUSH
66608: PPUSH
66609: PPUSH
66610: PPUSH
66611: PPUSH
66612: PPUSH
66613: PPUSH
66614: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66615: LD_VAR 0 1
66619: PPUSH
66620: LD_VAR 0 2
66624: PPUSH
66625: CALL_OW 488
66629: NOT
66630: IFTRUE 66649
66632: PUSH
66633: LD_VAR 0 3
66637: PPUSH
66638: LD_VAR 0 4
66642: PPUSH
66643: CALL_OW 488
66647: NOT
66648: OR
66649: IFFALSE 66662
// begin result := - 1 ;
66651: LD_ADDR_VAR 0 5
66655: PUSH
66656: LD_INT 1
66658: NEG
66659: ST_TO_ADDR
// exit ;
66660: GO 66897
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66662: LD_ADDR_VAR 0 12
66666: PUSH
66667: LD_VAR 0 1
66671: PPUSH
66672: LD_VAR 0 2
66676: PPUSH
66677: LD_VAR 0 3
66681: PPUSH
66682: LD_VAR 0 4
66686: PPUSH
66687: CALL 65733 0 4
66691: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66692: LD_ADDR_VAR 0 11
66696: PUSH
66697: LD_VAR 0 1
66701: PPUSH
66702: LD_VAR 0 2
66706: PPUSH
66707: LD_VAR 0 12
66711: PUSH
66712: LD_INT 1
66714: ARRAY
66715: PPUSH
66716: LD_VAR 0 12
66720: PUSH
66721: LD_INT 2
66723: ARRAY
66724: PPUSH
66725: CALL_OW 298
66729: ST_TO_ADDR
// distance := 9999 ;
66730: LD_ADDR_VAR 0 10
66734: PUSH
66735: LD_INT 9999
66737: ST_TO_ADDR
// for i := 0 to 5 do
66738: LD_ADDR_VAR 0 6
66742: PUSH
66743: DOUBLE
66744: LD_INT 0
66746: DEC
66747: ST_TO_ADDR
66748: LD_INT 5
66750: PUSH
66751: FOR_TO
66752: IFFALSE 66895
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66754: LD_ADDR_VAR 0 7
66758: PUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: LD_VAR 0 6
66768: PPUSH
66769: LD_VAR 0 11
66773: PPUSH
66774: CALL_OW 272
66778: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66779: LD_ADDR_VAR 0 8
66783: PUSH
66784: LD_VAR 0 2
66788: PPUSH
66789: LD_VAR 0 6
66793: PPUSH
66794: LD_VAR 0 11
66798: PPUSH
66799: CALL_OW 273
66803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66804: LD_VAR 0 7
66808: PPUSH
66809: LD_VAR 0 8
66813: PPUSH
66814: CALL_OW 488
66818: NOT
66819: IFFALSE 66823
// continue ;
66821: GO 66751
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66823: LD_ADDR_VAR 0 9
66827: PUSH
66828: LD_VAR 0 12
66832: PUSH
66833: LD_INT 1
66835: ARRAY
66836: PPUSH
66837: LD_VAR 0 12
66841: PUSH
66842: LD_INT 2
66844: ARRAY
66845: PPUSH
66846: LD_VAR 0 7
66850: PPUSH
66851: LD_VAR 0 8
66855: PPUSH
66856: CALL_OW 298
66860: ST_TO_ADDR
// if tmp < distance then
66861: LD_VAR 0 9
66865: PUSH
66866: LD_VAR 0 10
66870: LESS
66871: IFFALSE 66893
// begin result := i ;
66873: LD_ADDR_VAR 0 5
66877: PUSH
66878: LD_VAR 0 6
66882: ST_TO_ADDR
// distance := tmp ;
66883: LD_ADDR_VAR 0 10
66887: PUSH
66888: LD_VAR 0 9
66892: ST_TO_ADDR
// end ; end ;
66893: GO 66751
66895: POP
66896: POP
// end ;
66897: LD_VAR 0 5
66901: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66902: LD_INT 0
66904: PPUSH
66905: PPUSH
// if not driver or not IsInUnit ( driver ) then
66906: LD_VAR 0 1
66910: NOT
66911: IFTRUE 66925
66913: PUSH
66914: LD_VAR 0 1
66918: PPUSH
66919: CALL_OW 310
66923: NOT
66924: OR
66925: IFFALSE 66929
// exit ;
66927: GO 67019
// vehicle := IsInUnit ( driver ) ;
66929: LD_ADDR_VAR 0 3
66933: PUSH
66934: LD_VAR 0 1
66938: PPUSH
66939: CALL_OW 310
66943: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66944: LD_VAR 0 1
66948: PPUSH
66949: LD_STRING \
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: LD_INT 0
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: PUSH
66979: LD_STRING E
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: LD_VAR 0 3
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PPUSH
67015: CALL_OW 446
// end ;
67019: LD_VAR 0 2
67023: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67024: LD_INT 0
67026: PPUSH
67027: PPUSH
// if not driver or not IsInUnit ( driver ) then
67028: LD_VAR 0 1
67032: NOT
67033: IFTRUE 67047
67035: PUSH
67036: LD_VAR 0 1
67040: PPUSH
67041: CALL_OW 310
67045: NOT
67046: OR
67047: IFFALSE 67051
// exit ;
67049: GO 67141
// vehicle := IsInUnit ( driver ) ;
67051: LD_ADDR_VAR 0 3
67055: PUSH
67056: LD_VAR 0 1
67060: PPUSH
67061: CALL_OW 310
67065: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67066: LD_VAR 0 1
67070: PPUSH
67071: LD_STRING \
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: PUSH
67101: LD_STRING E
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: LD_VAR 0 3
67114: PUSH
67115: LD_INT 0
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PPUSH
67137: CALL_OW 447
// end ;
67141: LD_VAR 0 2
67145: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67146: LD_INT 0
67148: PPUSH
67149: PPUSH
67150: PPUSH
// tmp := [ ] ;
67151: LD_ADDR_VAR 0 5
67155: PUSH
67156: EMPTY
67157: ST_TO_ADDR
// for i in units do
67158: LD_ADDR_VAR 0 4
67162: PUSH
67163: LD_VAR 0 1
67167: PUSH
67168: FOR_IN
67169: IFFALSE 67207
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67171: LD_ADDR_VAR 0 5
67175: PUSH
67176: LD_VAR 0 5
67180: PPUSH
67181: LD_VAR 0 5
67185: PUSH
67186: LD_INT 1
67188: PLUS
67189: PPUSH
67190: LD_VAR 0 4
67194: PPUSH
67195: CALL_OW 256
67199: PPUSH
67200: CALL_OW 2
67204: ST_TO_ADDR
67205: GO 67168
67207: POP
67208: POP
// if not tmp then
67209: LD_VAR 0 5
67213: NOT
67214: IFFALSE 67218
// exit ;
67216: GO 67266
// if asc then
67218: LD_VAR 0 2
67222: IFFALSE 67246
// result := SortListByListAsc ( units , tmp ) else
67224: LD_ADDR_VAR 0 3
67228: PUSH
67229: LD_VAR 0 1
67233: PPUSH
67234: LD_VAR 0 5
67238: PPUSH
67239: CALL_OW 76
67243: ST_TO_ADDR
67244: GO 67266
// result := SortListByListDesc ( units , tmp ) ;
67246: LD_ADDR_VAR 0 3
67250: PUSH
67251: LD_VAR 0 1
67255: PPUSH
67256: LD_VAR 0 5
67260: PPUSH
67261: CALL_OW 77
67265: ST_TO_ADDR
// end ;
67266: LD_VAR 0 3
67270: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67271: LD_INT 0
67273: PPUSH
67274: PPUSH
// task := GetTaskList ( mech ) ;
67275: LD_ADDR_VAR 0 4
67279: PUSH
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL_OW 437
67289: ST_TO_ADDR
// if not task then
67290: LD_VAR 0 4
67294: NOT
67295: IFFALSE 67299
// exit ;
67297: GO 67343
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67299: LD_ADDR_VAR 0 3
67303: PUSH
67304: LD_VAR 0 4
67308: PUSH
67309: LD_INT 1
67311: ARRAY
67312: PUSH
67313: LD_INT 1
67315: ARRAY
67316: PUSH
67317: LD_STRING r
67319: EQUAL
67320: IFFALSE 67342
67322: PUSH
67323: LD_VAR 0 4
67327: PUSH
67328: LD_INT 1
67330: ARRAY
67331: PUSH
67332: LD_INT 4
67334: ARRAY
67335: PUSH
67336: LD_VAR 0 2
67340: EQUAL
67341: AND
67342: ST_TO_ADDR
// end ;
67343: LD_VAR 0 3
67347: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67348: LD_INT 0
67350: PPUSH
// SetDir ( unit , d ) ;
67351: LD_VAR 0 1
67355: PPUSH
67356: LD_VAR 0 4
67360: PPUSH
67361: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67365: LD_ADDR_VAR 0 6
67369: PUSH
67370: LD_VAR 0 1
67374: PPUSH
67375: LD_VAR 0 2
67379: PPUSH
67380: LD_VAR 0 3
67384: PPUSH
67385: LD_VAR 0 5
67389: PPUSH
67390: CALL_OW 48
67394: ST_TO_ADDR
// end ;
67395: LD_VAR 0 6
67399: RET
// export function ToNaturalNumber ( number ) ; begin
67400: LD_INT 0
67402: PPUSH
// result := number div 1 ;
67403: LD_ADDR_VAR 0 2
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: LD_INT 1
67415: DIV
67416: ST_TO_ADDR
// if number < 0 then
67417: LD_VAR 0 1
67421: PUSH
67422: LD_INT 0
67424: LESS
67425: IFFALSE 67435
// result := 0 ;
67427: LD_ADDR_VAR 0 2
67431: PUSH
67432: LD_INT 0
67434: ST_TO_ADDR
// end ;
67435: LD_VAR 0 2
67439: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67440: LD_INT 0
67442: PPUSH
67443: PPUSH
67444: PPUSH
// if not buildings then
67445: LD_VAR 0 1
67449: NOT
67450: IFFALSE 67454
// exit ;
67452: GO 67569
// tmp := [ ] ;
67454: LD_ADDR_VAR 0 5
67458: PUSH
67459: EMPTY
67460: ST_TO_ADDR
// for b in buildings do
67461: LD_ADDR_VAR 0 4
67465: PUSH
67466: LD_VAR 0 1
67470: PUSH
67471: FOR_IN
67472: IFFALSE 67510
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67474: LD_ADDR_VAR 0 5
67478: PUSH
67479: LD_VAR 0 5
67483: PPUSH
67484: LD_VAR 0 5
67488: PUSH
67489: LD_INT 1
67491: PLUS
67492: PPUSH
67493: LD_VAR 0 4
67497: PPUSH
67498: CALL_OW 266
67502: PPUSH
67503: CALL_OW 1
67507: ST_TO_ADDR
67508: GO 67471
67510: POP
67511: POP
// if not tmp then
67512: LD_VAR 0 5
67516: NOT
67517: IFFALSE 67521
// exit ;
67519: GO 67569
// if asc then
67521: LD_VAR 0 2
67525: IFFALSE 67549
// result := SortListByListAsc ( buildings , tmp ) else
67527: LD_ADDR_VAR 0 3
67531: PUSH
67532: LD_VAR 0 1
67536: PPUSH
67537: LD_VAR 0 5
67541: PPUSH
67542: CALL_OW 76
67546: ST_TO_ADDR
67547: GO 67569
// result := SortListByListDesc ( buildings , tmp ) ;
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_VAR 0 1
67558: PPUSH
67559: LD_VAR 0 5
67563: PPUSH
67564: CALL_OW 77
67568: ST_TO_ADDR
// end ;
67569: LD_VAR 0 3
67573: RET
// export function SortByClass ( units , class ) ; var un ; begin
67574: LD_INT 0
67576: PPUSH
67577: PPUSH
// if not units or not class then
67578: LD_VAR 0 1
67582: NOT
67583: IFTRUE 67592
67585: PUSH
67586: LD_VAR 0 2
67590: NOT
67591: OR
67592: IFFALSE 67596
// exit ;
67594: GO 67691
// result := [ ] ;
67596: LD_ADDR_VAR 0 3
67600: PUSH
67601: EMPTY
67602: ST_TO_ADDR
// for un in units do
67603: LD_ADDR_VAR 0 4
67607: PUSH
67608: LD_VAR 0 1
67612: PUSH
67613: FOR_IN
67614: IFFALSE 67689
// if GetClass ( un ) = class then
67616: LD_VAR 0 4
67620: PPUSH
67621: CALL_OW 257
67625: PUSH
67626: LD_VAR 0 2
67630: EQUAL
67631: IFFALSE 67658
// result := Insert ( result , 1 , un ) else
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: LD_VAR 0 3
67642: PPUSH
67643: LD_INT 1
67645: PPUSH
67646: LD_VAR 0 4
67650: PPUSH
67651: CALL_OW 2
67655: ST_TO_ADDR
67656: GO 67687
// result := Replace ( result , result + 1 , un ) ;
67658: LD_ADDR_VAR 0 3
67662: PUSH
67663: LD_VAR 0 3
67667: PPUSH
67668: LD_VAR 0 3
67672: PUSH
67673: LD_INT 1
67675: PLUS
67676: PPUSH
67677: LD_VAR 0 4
67681: PPUSH
67682: CALL_OW 1
67686: ST_TO_ADDR
67687: GO 67613
67689: POP
67690: POP
// end ;
67691: LD_VAR 0 3
67695: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67696: LD_INT 0
67698: PPUSH
67699: PPUSH
67700: PPUSH
67701: PPUSH
67702: PPUSH
67703: PPUSH
67704: PPUSH
// result := [ ] ;
67705: LD_ADDR_VAR 0 4
67709: PUSH
67710: EMPTY
67711: ST_TO_ADDR
// if x - r < 0 then
67712: LD_VAR 0 1
67716: PUSH
67717: LD_VAR 0 3
67721: MINUS
67722: PUSH
67723: LD_INT 0
67725: LESS
67726: IFFALSE 67738
// min_x := 0 else
67728: LD_ADDR_VAR 0 8
67732: PUSH
67733: LD_INT 0
67735: ST_TO_ADDR
67736: GO 67754
// min_x := x - r ;
67738: LD_ADDR_VAR 0 8
67742: PUSH
67743: LD_VAR 0 1
67747: PUSH
67748: LD_VAR 0 3
67752: MINUS
67753: ST_TO_ADDR
// if y - r < 0 then
67754: LD_VAR 0 2
67758: PUSH
67759: LD_VAR 0 3
67763: MINUS
67764: PUSH
67765: LD_INT 0
67767: LESS
67768: IFFALSE 67780
// min_y := 0 else
67770: LD_ADDR_VAR 0 7
67774: PUSH
67775: LD_INT 0
67777: ST_TO_ADDR
67778: GO 67796
// min_y := y - r ;
67780: LD_ADDR_VAR 0 7
67784: PUSH
67785: LD_VAR 0 2
67789: PUSH
67790: LD_VAR 0 3
67794: MINUS
67795: ST_TO_ADDR
// max_x := x + r ;
67796: LD_ADDR_VAR 0 9
67800: PUSH
67801: LD_VAR 0 1
67805: PUSH
67806: LD_VAR 0 3
67810: PLUS
67811: ST_TO_ADDR
// max_y := y + r ;
67812: LD_ADDR_VAR 0 10
67816: PUSH
67817: LD_VAR 0 2
67821: PUSH
67822: LD_VAR 0 3
67826: PLUS
67827: ST_TO_ADDR
// for _x = min_x to max_x do
67828: LD_ADDR_VAR 0 5
67832: PUSH
67833: DOUBLE
67834: LD_VAR 0 8
67838: DEC
67839: ST_TO_ADDR
67840: LD_VAR 0 9
67844: PUSH
67845: FOR_TO
67846: IFFALSE 67947
// for _y = min_y to max_y do
67848: LD_ADDR_VAR 0 6
67852: PUSH
67853: DOUBLE
67854: LD_VAR 0 7
67858: DEC
67859: ST_TO_ADDR
67860: LD_VAR 0 10
67864: PUSH
67865: FOR_TO
67866: IFFALSE 67943
// begin if not ValidHex ( _x , _y ) then
67868: LD_VAR 0 5
67872: PPUSH
67873: LD_VAR 0 6
67877: PPUSH
67878: CALL_OW 488
67882: NOT
67883: IFFALSE 67887
// continue ;
67885: GO 67865
// if GetResourceTypeXY ( _x , _y ) then
67887: LD_VAR 0 5
67891: PPUSH
67892: LD_VAR 0 6
67896: PPUSH
67897: CALL_OW 283
67901: IFFALSE 67941
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67903: LD_ADDR_VAR 0 4
67907: PUSH
67908: LD_VAR 0 4
67912: PPUSH
67913: LD_VAR 0 4
67917: PUSH
67918: LD_INT 1
67920: PLUS
67921: PPUSH
67922: LD_VAR 0 5
67926: PUSH
67927: LD_VAR 0 6
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PPUSH
67936: CALL_OW 1
67940: ST_TO_ADDR
// end ;
67941: GO 67865
67943: POP
67944: POP
67945: GO 67845
67947: POP
67948: POP
// end ;
67949: LD_VAR 0 4
67953: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67954: LD_INT 0
67956: PPUSH
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
// if not units then
67964: LD_VAR 0 1
67968: NOT
67969: IFFALSE 67973
// exit ;
67971: GO 68505
// result := UnitFilter ( units , [ f_ok ] ) ;
67973: LD_ADDR_VAR 0 3
67977: PUSH
67978: LD_VAR 0 1
67982: PPUSH
67983: LD_INT 50
67985: PUSH
67986: EMPTY
67987: LIST
67988: PPUSH
67989: CALL_OW 72
67993: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67994: LD_ADDR_VAR 0 8
67998: PUSH
67999: LD_VAR 0 1
68003: PUSH
68004: LD_INT 1
68006: ARRAY
68007: PPUSH
68008: CALL_OW 255
68012: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68013: LD_ADDR_VAR 0 10
68017: PUSH
68018: LD_INT 29
68020: PUSH
68021: LD_INT 91
68023: PUSH
68024: LD_INT 49
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: ST_TO_ADDR
// if not result then
68032: LD_VAR 0 3
68036: NOT
68037: IFFALSE 68041
// exit ;
68039: GO 68505
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68041: LD_ADDR_VAR 0 5
68045: PUSH
68046: LD_INT 81
68048: PUSH
68049: LD_VAR 0 8
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PPUSH
68058: CALL_OW 69
68062: ST_TO_ADDR
// for i in result do
68063: LD_ADDR_VAR 0 4
68067: PUSH
68068: LD_VAR 0 3
68072: PUSH
68073: FOR_IN
68074: IFFALSE 68503
// begin tag := GetTag ( i ) + 1 ;
68076: LD_ADDR_VAR 0 9
68080: PUSH
68081: LD_VAR 0 4
68085: PPUSH
68086: CALL_OW 110
68090: PUSH
68091: LD_INT 1
68093: PLUS
68094: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68095: LD_ADDR_VAR 0 7
68099: PUSH
68100: LD_VAR 0 4
68104: PPUSH
68105: CALL_OW 250
68109: PPUSH
68110: LD_VAR 0 4
68114: PPUSH
68115: CALL_OW 251
68119: PPUSH
68120: LD_INT 4
68122: PPUSH
68123: CALL 67696 0 3
68127: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68128: LD_VAR 0 4
68132: PPUSH
68133: CALL_OW 247
68137: PUSH
68138: LD_INT 2
68140: EQUAL
68141: IFFALSE 68153
68143: PUSH
68144: LD_VAR 0 7
68148: PUSH
68149: LD_INT 2
68151: GREATER
68152: AND
68153: IFFALSE 68173
68155: PUSH
68156: LD_VAR 0 4
68160: PPUSH
68161: CALL_OW 264
68165: PUSH
68166: LD_VAR 0 10
68170: IN
68171: NOT
68172: AND
68173: IFFALSE 68212
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68175: LD_VAR 0 4
68179: PPUSH
68180: LD_VAR 0 7
68184: PUSH
68185: LD_INT 1
68187: ARRAY
68188: PUSH
68189: LD_INT 1
68191: ARRAY
68192: PPUSH
68193: LD_VAR 0 7
68197: PUSH
68198: LD_INT 1
68200: ARRAY
68201: PUSH
68202: LD_INT 2
68204: ARRAY
68205: PPUSH
68206: CALL_OW 116
68210: GO 68501
// if path > tag then
68212: LD_VAR 0 2
68216: PUSH
68217: LD_VAR 0 9
68221: GREATER
68222: IFFALSE 68430
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68224: LD_ADDR_VAR 0 6
68228: PUSH
68229: LD_VAR 0 5
68233: PPUSH
68234: LD_INT 91
68236: PUSH
68237: LD_VAR 0 4
68241: PUSH
68242: LD_INT 8
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: PPUSH
68250: CALL_OW 72
68254: ST_TO_ADDR
// if nearEnemy then
68255: LD_VAR 0 6
68259: IFFALSE 68328
// begin if GetWeapon ( i ) = ru_time_lapser then
68261: LD_VAR 0 4
68265: PPUSH
68266: CALL_OW 264
68270: PUSH
68271: LD_INT 49
68273: EQUAL
68274: IFFALSE 68302
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68276: LD_VAR 0 4
68280: PPUSH
68281: LD_VAR 0 6
68285: PPUSH
68286: LD_VAR 0 4
68290: PPUSH
68291: CALL_OW 74
68295: PPUSH
68296: CALL_OW 112
68300: GO 68326
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68302: LD_VAR 0 4
68306: PPUSH
68307: LD_VAR 0 6
68311: PPUSH
68312: LD_VAR 0 4
68316: PPUSH
68317: CALL_OW 74
68321: PPUSH
68322: CALL 69586 0 2
// end else
68326: GO 68428
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68328: LD_VAR 0 4
68332: PPUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_VAR 0 9
68342: ARRAY
68343: PUSH
68344: LD_INT 1
68346: ARRAY
68347: PPUSH
68348: LD_VAR 0 2
68352: PUSH
68353: LD_VAR 0 9
68357: ARRAY
68358: PUSH
68359: LD_INT 2
68361: ARRAY
68362: PPUSH
68363: CALL_OW 297
68367: PUSH
68368: LD_INT 6
68370: GREATER
68371: IFFALSE 68414
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68373: LD_VAR 0 4
68377: PPUSH
68378: LD_VAR 0 2
68382: PUSH
68383: LD_VAR 0 9
68387: ARRAY
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: PPUSH
68393: LD_VAR 0 2
68397: PUSH
68398: LD_VAR 0 9
68402: ARRAY
68403: PUSH
68404: LD_INT 2
68406: ARRAY
68407: PPUSH
68408: CALL_OW 114
68412: GO 68428
// SetTag ( i , tag ) ;
68414: LD_VAR 0 4
68418: PPUSH
68419: LD_VAR 0 9
68423: PPUSH
68424: CALL_OW 109
// end else
68428: GO 68501
// if enemy then
68430: LD_VAR 0 5
68434: IFFALSE 68501
// begin if GetWeapon ( i ) = ru_time_lapser then
68436: LD_VAR 0 4
68440: PPUSH
68441: CALL_OW 264
68445: PUSH
68446: LD_INT 49
68448: EQUAL
68449: IFFALSE 68477
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68451: LD_VAR 0 4
68455: PPUSH
68456: LD_VAR 0 5
68460: PPUSH
68461: LD_VAR 0 4
68465: PPUSH
68466: CALL_OW 74
68470: PPUSH
68471: CALL_OW 112
68475: GO 68501
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68477: LD_VAR 0 4
68481: PPUSH
68482: LD_VAR 0 5
68486: PPUSH
68487: LD_VAR 0 4
68491: PPUSH
68492: CALL_OW 74
68496: PPUSH
68497: CALL 69586 0 2
// end ; end ;
68501: GO 68073
68503: POP
68504: POP
// end ;
68505: LD_VAR 0 3
68509: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68510: LD_INT 0
68512: PPUSH
68513: PPUSH
68514: PPUSH
// if not unit or IsInUnit ( unit ) then
68515: LD_VAR 0 1
68519: NOT
68520: IFTRUE 68533
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 310
68532: OR
68533: IFFALSE 68537
// exit ;
68535: GO 68628
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68537: LD_ADDR_VAR 0 4
68541: PUSH
68542: LD_VAR 0 1
68546: PPUSH
68547: CALL_OW 250
68551: PPUSH
68552: LD_VAR 0 2
68556: PPUSH
68557: LD_INT 1
68559: PPUSH
68560: CALL_OW 272
68564: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68565: LD_ADDR_VAR 0 5
68569: PUSH
68570: LD_VAR 0 1
68574: PPUSH
68575: CALL_OW 251
68579: PPUSH
68580: LD_VAR 0 2
68584: PPUSH
68585: LD_INT 1
68587: PPUSH
68588: CALL_OW 273
68592: ST_TO_ADDR
// if ValidHex ( x , y ) then
68593: LD_VAR 0 4
68597: PPUSH
68598: LD_VAR 0 5
68602: PPUSH
68603: CALL_OW 488
68607: IFFALSE 68628
// ComTurnXY ( unit , x , y ) ;
68609: LD_VAR 0 1
68613: PPUSH
68614: LD_VAR 0 4
68618: PPUSH
68619: LD_VAR 0 5
68623: PPUSH
68624: CALL_OW 118
// end ;
68628: LD_VAR 0 3
68632: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68633: LD_INT 0
68635: PPUSH
68636: PPUSH
// result := false ;
68637: LD_ADDR_VAR 0 3
68641: PUSH
68642: LD_INT 0
68644: ST_TO_ADDR
// if not units then
68645: LD_VAR 0 2
68649: NOT
68650: IFFALSE 68654
// exit ;
68652: GO 68699
// for i in units do
68654: LD_ADDR_VAR 0 4
68658: PUSH
68659: LD_VAR 0 2
68663: PUSH
68664: FOR_IN
68665: IFFALSE 68697
// if See ( side , i ) then
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_VAR 0 4
68676: PPUSH
68677: CALL_OW 292
68681: IFFALSE 68695
// begin result := true ;
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: LD_INT 1
68690: ST_TO_ADDR
// exit ;
68691: POP
68692: POP
68693: GO 68699
// end ;
68695: GO 68664
68697: POP
68698: POP
// end ;
68699: LD_VAR 0 3
68703: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
68708: PPUSH
68709: PPUSH
// if not unit or not points then
68710: LD_VAR 0 1
68714: NOT
68715: IFTRUE 68724
68717: PUSH
68718: LD_VAR 0 2
68722: NOT
68723: OR
68724: IFFALSE 68728
// exit ;
68726: GO 68818
// dist := 99999 ;
68728: LD_ADDR_VAR 0 5
68732: PUSH
68733: LD_INT 99999
68735: ST_TO_ADDR
// for i in points do
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: LD_VAR 0 2
68745: PUSH
68746: FOR_IN
68747: IFFALSE 68816
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68749: LD_ADDR_VAR 0 6
68753: PUSH
68754: LD_VAR 0 1
68758: PPUSH
68759: LD_VAR 0 4
68763: PUSH
68764: LD_INT 1
68766: ARRAY
68767: PPUSH
68768: LD_VAR 0 4
68772: PUSH
68773: LD_INT 2
68775: ARRAY
68776: PPUSH
68777: CALL_OW 297
68781: ST_TO_ADDR
// if tmpDist < dist then
68782: LD_VAR 0 6
68786: PUSH
68787: LD_VAR 0 5
68791: LESS
68792: IFFALSE 68814
// begin result := i ;
68794: LD_ADDR_VAR 0 3
68798: PUSH
68799: LD_VAR 0 4
68803: ST_TO_ADDR
// dist := tmpDist ;
68804: LD_ADDR_VAR 0 5
68808: PUSH
68809: LD_VAR 0 6
68813: ST_TO_ADDR
// end ; end ;
68814: GO 68746
68816: POP
68817: POP
// end ;
68818: LD_VAR 0 3
68822: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68823: LD_INT 0
68825: PPUSH
// uc_side := side ;
68826: LD_ADDR_OWVAR 20
68830: PUSH
68831: LD_VAR 0 1
68835: ST_TO_ADDR
// uc_nation := 3 ;
68836: LD_ADDR_OWVAR 21
68840: PUSH
68841: LD_INT 3
68843: ST_TO_ADDR
// vc_chassis := 25 ;
68844: LD_ADDR_OWVAR 37
68848: PUSH
68849: LD_INT 25
68851: ST_TO_ADDR
// vc_engine := engine_siberite ;
68852: LD_ADDR_OWVAR 39
68856: PUSH
68857: LD_INT 3
68859: ST_TO_ADDR
// vc_control := control_computer ;
68860: LD_ADDR_OWVAR 38
68864: PUSH
68865: LD_INT 3
68867: ST_TO_ADDR
// vc_weapon := 59 ;
68868: LD_ADDR_OWVAR 40
68872: PUSH
68873: LD_INT 59
68875: ST_TO_ADDR
// result := CreateVehicle ;
68876: LD_ADDR_VAR 0 5
68880: PUSH
68881: CALL_OW 45
68885: ST_TO_ADDR
// SetDir ( result , d ) ;
68886: LD_VAR 0 5
68890: PPUSH
68891: LD_VAR 0 4
68895: PPUSH
68896: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68900: LD_VAR 0 5
68904: PPUSH
68905: LD_VAR 0 2
68909: PPUSH
68910: LD_VAR 0 3
68914: PPUSH
68915: LD_INT 0
68917: PPUSH
68918: CALL_OW 48
// end ;
68922: LD_VAR 0 5
68926: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
68931: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68932: LD_ADDR_VAR 0 2
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 0
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68955: LD_VAR 0 1
68959: NOT
68960: IFTRUE 68993
68962: PUSH
68963: LD_VAR 0 1
68967: PPUSH
68968: CALL_OW 264
68972: PUSH
68973: LD_INT 12
68975: PUSH
68976: LD_INT 51
68978: PUSH
68979: LD_INT 32
68981: PUSH
68982: LD_INT 89
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: IN
68991: NOT
68992: OR
68993: IFFALSE 68997
// exit ;
68995: GO 69095
// for i := 1 to 3 do
68997: LD_ADDR_VAR 0 3
69001: PUSH
69002: DOUBLE
69003: LD_INT 1
69005: DEC
69006: ST_TO_ADDR
69007: LD_INT 3
69009: PUSH
69010: FOR_TO
69011: IFFALSE 69093
// begin tmp := GetCargo ( cargo , i ) ;
69013: LD_ADDR_VAR 0 4
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_VAR 0 3
69027: PPUSH
69028: CALL_OW 289
69032: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69033: LD_ADDR_VAR 0 2
69037: PUSH
69038: LD_VAR 0 2
69042: PPUSH
69043: LD_VAR 0 3
69047: PPUSH
69048: LD_VAR 0 4
69052: PPUSH
69053: CALL_OW 1
69057: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69058: LD_ADDR_VAR 0 2
69062: PUSH
69063: LD_VAR 0 2
69067: PPUSH
69068: LD_INT 4
69070: PPUSH
69071: LD_VAR 0 2
69075: PUSH
69076: LD_INT 4
69078: ARRAY
69079: PUSH
69080: LD_VAR 0 4
69084: PLUS
69085: PPUSH
69086: CALL_OW 1
69090: ST_TO_ADDR
// end ;
69091: GO 69010
69093: POP
69094: POP
// end ;
69095: LD_VAR 0 2
69099: RET
// export function Length ( array ) ; begin
69100: LD_INT 0
69102: PPUSH
// result := array + 0 ;
69103: LD_ADDR_VAR 0 2
69107: PUSH
69108: LD_VAR 0 1
69112: PUSH
69113: LD_INT 0
69115: PLUS
69116: ST_TO_ADDR
// end ;
69117: LD_VAR 0 2
69121: RET
// export function PrepareArray ( array ) ; begin
69122: LD_INT 0
69124: PPUSH
// result := array diff 0 ;
69125: LD_ADDR_VAR 0 2
69129: PUSH
69130: LD_VAR 0 1
69134: PUSH
69135: LD_INT 0
69137: DIFF
69138: ST_TO_ADDR
// if not result [ 1 ] then
69139: LD_VAR 0 2
69143: PUSH
69144: LD_INT 1
69146: ARRAY
69147: NOT
69148: IFFALSE 69168
// result := Delete ( result , 1 ) ;
69150: LD_ADDR_VAR 0 2
69154: PUSH
69155: LD_VAR 0 2
69159: PPUSH
69160: LD_INT 1
69162: PPUSH
69163: CALL_OW 3
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 2
69172: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
69178: PPUSH
// sibRocketRange := 25 ;
69179: LD_ADDR_VAR 0 6
69183: PUSH
69184: LD_INT 25
69186: ST_TO_ADDR
// result := false ;
69187: LD_ADDR_VAR 0 4
69191: PUSH
69192: LD_INT 0
69194: ST_TO_ADDR
// for i := 0 to 5 do
69195: LD_ADDR_VAR 0 5
69199: PUSH
69200: DOUBLE
69201: LD_INT 0
69203: DEC
69204: ST_TO_ADDR
69205: LD_INT 5
69207: PUSH
69208: FOR_TO
69209: IFFALSE 69276
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69211: LD_VAR 0 1
69215: PPUSH
69216: LD_VAR 0 5
69220: PPUSH
69221: LD_VAR 0 6
69225: PPUSH
69226: CALL_OW 272
69230: PPUSH
69231: LD_VAR 0 2
69235: PPUSH
69236: LD_VAR 0 5
69240: PPUSH
69241: LD_VAR 0 6
69245: PPUSH
69246: CALL_OW 273
69250: PPUSH
69251: LD_VAR 0 3
69255: PPUSH
69256: CALL_OW 309
69260: IFFALSE 69274
// begin result := true ;
69262: LD_ADDR_VAR 0 4
69266: PUSH
69267: LD_INT 1
69269: ST_TO_ADDR
// exit ;
69270: POP
69271: POP
69272: GO 69278
// end ;
69274: GO 69208
69276: POP
69277: POP
// end ;
69278: LD_VAR 0 4
69282: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69283: LD_INT 0
69285: PPUSH
69286: PPUSH
69287: PPUSH
// if btype = b_depot then
69288: LD_VAR 0 2
69292: PUSH
69293: LD_INT 0
69295: EQUAL
69296: IFFALSE 69308
// begin result := true ;
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_INT 1
69305: ST_TO_ADDR
// exit ;
69306: GO 69428
// end ; pom := GetBase ( depot ) ;
69308: LD_ADDR_VAR 0 4
69312: PUSH
69313: LD_VAR 0 1
69317: PPUSH
69318: CALL_OW 274
69322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69323: LD_ADDR_VAR 0 5
69327: PUSH
69328: LD_VAR 0 2
69332: PPUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: CALL_OW 248
69342: PPUSH
69343: CALL_OW 450
69347: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69348: LD_ADDR_VAR 0 3
69352: PUSH
69353: LD_VAR 0 4
69357: PPUSH
69358: LD_INT 1
69360: PPUSH
69361: CALL_OW 275
69365: PUSH
69366: LD_VAR 0 5
69370: PUSH
69371: LD_INT 1
69373: ARRAY
69374: GREATEREQUAL
69375: IFFALSE 69401
69377: PUSH
69378: LD_VAR 0 4
69382: PPUSH
69383: LD_INT 2
69385: PPUSH
69386: CALL_OW 275
69390: PUSH
69391: LD_VAR 0 5
69395: PUSH
69396: LD_INT 2
69398: ARRAY
69399: GREATEREQUAL
69400: AND
69401: IFFALSE 69427
69403: PUSH
69404: LD_VAR 0 4
69408: PPUSH
69409: LD_INT 3
69411: PPUSH
69412: CALL_OW 275
69416: PUSH
69417: LD_VAR 0 5
69421: PUSH
69422: LD_INT 3
69424: ARRAY
69425: GREATEREQUAL
69426: AND
69427: ST_TO_ADDR
// end ;
69428: LD_VAR 0 3
69432: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69433: LD_INT 0
69435: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69436: LD_VAR 0 1
69440: PPUSH
69441: LD_VAR 0 2
69445: PPUSH
69446: LD_INT 0
69448: PPUSH
69449: LD_INT 0
69451: PPUSH
69452: LD_INT 1
69454: PPUSH
69455: LD_INT 0
69457: PPUSH
69458: CALL_OW 587
// end ;
69462: LD_VAR 0 3
69466: RET
// export function CenterOnNow ( unit ) ; begin
69467: LD_INT 0
69469: PPUSH
// result := IsInUnit ( unit ) ;
69470: LD_ADDR_VAR 0 2
69474: PUSH
69475: LD_VAR 0 1
69479: PPUSH
69480: CALL_OW 310
69484: ST_TO_ADDR
// if not result then
69485: LD_VAR 0 2
69489: NOT
69490: IFFALSE 69502
// result := unit ;
69492: LD_ADDR_VAR 0 2
69496: PUSH
69497: LD_VAR 0 1
69501: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69502: LD_VAR 0 1
69506: PPUSH
69507: CALL_OW 87
// end ;
69511: LD_VAR 0 2
69515: RET
// export function ComMoveHex ( unit , hex ) ; begin
69516: LD_INT 0
69518: PPUSH
// if not hex then
69519: LD_VAR 0 2
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69581
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69528: LD_VAR 0 2
69532: PUSH
69533: LD_INT 1
69535: ARRAY
69536: PPUSH
69537: LD_VAR 0 2
69541: PUSH
69542: LD_INT 2
69544: ARRAY
69545: PPUSH
69546: CALL_OW 428
69550: IFFALSE 69554
// exit ;
69552: GO 69581
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69554: LD_VAR 0 1
69558: PPUSH
69559: LD_VAR 0 2
69563: PUSH
69564: LD_INT 1
69566: ARRAY
69567: PPUSH
69568: LD_VAR 0 2
69572: PUSH
69573: LD_INT 2
69575: ARRAY
69576: PPUSH
69577: CALL_OW 111
// end ;
69581: LD_VAR 0 3
69585: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69586: LD_INT 0
69588: PPUSH
69589: PPUSH
69590: PPUSH
// if not unit or not enemy then
69591: LD_VAR 0 1
69595: NOT
69596: IFTRUE 69605
69598: PUSH
69599: LD_VAR 0 2
69603: NOT
69604: OR
69605: IFFALSE 69609
// exit ;
69607: GO 69735
// x := GetX ( enemy ) ;
69609: LD_ADDR_VAR 0 4
69613: PUSH
69614: LD_VAR 0 2
69618: PPUSH
69619: CALL_OW 250
69623: ST_TO_ADDR
// y := GetY ( enemy ) ;
69624: LD_ADDR_VAR 0 5
69628: PUSH
69629: LD_VAR 0 2
69633: PPUSH
69634: CALL_OW 251
69638: ST_TO_ADDR
// if ValidHex ( x , y ) then
69639: LD_VAR 0 4
69643: PPUSH
69644: LD_VAR 0 5
69648: PPUSH
69649: CALL_OW 488
69653: IFFALSE 69735
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69655: LD_VAR 0 2
69659: PPUSH
69660: CALL_OW 247
69664: PUSH
69665: LD_INT 3
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: IN
69675: IFTRUE 69698
69677: PUSH
69678: LD_VAR 0 1
69682: PPUSH
69683: CALL_OW 255
69687: PPUSH
69688: LD_VAR 0 2
69692: PPUSH
69693: CALL_OW 292
69697: OR
69698: IFFALSE 69716
// ComAttackUnit ( unit , enemy ) else
69700: LD_VAR 0 1
69704: PPUSH
69705: LD_VAR 0 2
69709: PPUSH
69710: CALL_OW 115
69714: GO 69735
// ComAgressiveMove ( unit , x , y ) ;
69716: LD_VAR 0 1
69720: PPUSH
69721: LD_VAR 0 4
69725: PPUSH
69726: LD_VAR 0 5
69730: PPUSH
69731: CALL_OW 114
// end ;
69735: LD_VAR 0 3
69739: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69740: LD_INT 0
69742: PPUSH
69743: PPUSH
69744: PPUSH
// list := AreaToList ( area , 0 ) ;
69745: LD_ADDR_VAR 0 5
69749: PUSH
69750: LD_VAR 0 1
69754: PPUSH
69755: LD_INT 0
69757: PPUSH
69758: CALL_OW 517
69762: ST_TO_ADDR
// if not list then
69763: LD_VAR 0 5
69767: NOT
69768: IFFALSE 69772
// exit ;
69770: GO 69902
// if all then
69772: LD_VAR 0 2
69776: IFFALSE 69864
// begin for i := 1 to list [ 1 ] do
69778: LD_ADDR_VAR 0 4
69782: PUSH
69783: DOUBLE
69784: LD_INT 1
69786: DEC
69787: ST_TO_ADDR
69788: LD_VAR 0 5
69792: PUSH
69793: LD_INT 1
69795: ARRAY
69796: PUSH
69797: FOR_TO
69798: IFFALSE 69860
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69800: LD_ADDR_VAR 0 3
69804: PUSH
69805: LD_VAR 0 3
69809: PPUSH
69810: LD_VAR 0 3
69814: PUSH
69815: LD_INT 1
69817: PLUS
69818: PPUSH
69819: LD_VAR 0 5
69823: PUSH
69824: LD_INT 1
69826: ARRAY
69827: PUSH
69828: LD_VAR 0 4
69832: ARRAY
69833: PUSH
69834: LD_VAR 0 5
69838: PUSH
69839: LD_INT 2
69841: ARRAY
69842: PUSH
69843: LD_VAR 0 4
69847: ARRAY
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PPUSH
69853: CALL_OW 1
69857: ST_TO_ADDR
69858: GO 69797
69860: POP
69861: POP
// exit ;
69862: GO 69902
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69864: LD_ADDR_VAR 0 3
69868: PUSH
69869: LD_VAR 0 5
69873: PUSH
69874: LD_INT 1
69876: ARRAY
69877: PUSH
69878: LD_INT 1
69880: ARRAY
69881: PUSH
69882: LD_VAR 0 5
69886: PUSH
69887: LD_INT 2
69889: ARRAY
69890: PUSH
69891: LD_INT 1
69893: ARRAY
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: EMPTY
69900: LIST
69901: ST_TO_ADDR
// end ;
69902: LD_VAR 0 3
69906: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69907: LD_INT 0
69909: PPUSH
69910: PPUSH
// list := AreaToList ( area , 0 ) ;
69911: LD_ADDR_VAR 0 4
69915: PUSH
69916: LD_VAR 0 1
69920: PPUSH
69921: LD_INT 0
69923: PPUSH
69924: CALL_OW 517
69928: ST_TO_ADDR
// if not list then
69929: LD_VAR 0 4
69933: NOT
69934: IFFALSE 69938
// exit ;
69936: GO 69979
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69938: LD_ADDR_VAR 0 3
69942: PUSH
69943: LD_VAR 0 4
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PUSH
69952: LD_INT 1
69954: ARRAY
69955: PUSH
69956: LD_VAR 0 4
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: PUSH
69965: LD_INT 1
69967: ARRAY
69968: PUSH
69969: LD_VAR 0 2
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: ST_TO_ADDR
// end ;
69979: LD_VAR 0 3
69983: RET
// export function First ( array ) ; begin
69984: LD_INT 0
69986: PPUSH
// if not array then
69987: LD_VAR 0 1
69991: NOT
69992: IFFALSE 69996
// exit ;
69994: GO 70010
// result := array [ 1 ] ;
69996: LD_ADDR_VAR 0 2
70000: PUSH
70001: LD_VAR 0 1
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: ST_TO_ADDR
// end ;
70010: LD_VAR 0 2
70014: RET
// export function Last ( array ) ; begin
70015: LD_INT 0
70017: PPUSH
// if not array then
70018: LD_VAR 0 1
70022: NOT
70023: IFFALSE 70027
// exit ;
70025: GO 70043
// result := array [ array ] ;
70027: LD_ADDR_VAR 0 2
70031: PUSH
70032: LD_VAR 0 1
70036: PUSH
70037: LD_VAR 0 1
70041: ARRAY
70042: ST_TO_ADDR
// end ;
70043: LD_VAR 0 2
70047: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70048: LD_INT 0
70050: PPUSH
70051: PPUSH
// result := [ ] ;
70052: LD_ADDR_VAR 0 5
70056: PUSH
70057: EMPTY
70058: ST_TO_ADDR
// if not array then
70059: LD_VAR 0 1
70063: NOT
70064: IFFALSE 70068
// exit ;
70066: GO 70180
// for i := 1 to array do
70068: LD_ADDR_VAR 0 6
70072: PUSH
70073: DOUBLE
70074: LD_INT 1
70076: DEC
70077: ST_TO_ADDR
70078: LD_VAR 0 1
70082: PUSH
70083: FOR_TO
70084: IFFALSE 70178
// if array [ i ] [ index ] = value then
70086: LD_VAR 0 1
70090: PUSH
70091: LD_VAR 0 6
70095: ARRAY
70096: PUSH
70097: LD_VAR 0 2
70101: ARRAY
70102: PUSH
70103: LD_VAR 0 3
70107: EQUAL
70108: IFFALSE 70176
// begin if indexColumn then
70110: LD_VAR 0 4
70114: IFFALSE 70150
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70116: LD_ADDR_VAR 0 5
70120: PUSH
70121: LD_VAR 0 5
70125: PPUSH
70126: LD_VAR 0 1
70130: PUSH
70131: LD_VAR 0 6
70135: ARRAY
70136: PUSH
70137: LD_VAR 0 4
70141: ARRAY
70142: PPUSH
70143: CALL 65188 0 2
70147: ST_TO_ADDR
70148: GO 70176
// result := Join ( result , array [ i ] ) ;
70150: LD_ADDR_VAR 0 5
70154: PUSH
70155: LD_VAR 0 5
70159: PPUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_VAR 0 6
70169: ARRAY
70170: PPUSH
70171: CALL 65188 0 2
70175: ST_TO_ADDR
// end ;
70176: GO 70083
70178: POP
70179: POP
// end ;
70180: LD_VAR 0 5
70184: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70185: LD_INT 0
70187: PPUSH
// if not vehicles or not parkingPoint then
70188: LD_VAR 0 1
70192: NOT
70193: IFTRUE 70202
70195: PUSH
70196: LD_VAR 0 2
70200: NOT
70201: OR
70202: IFFALSE 70206
// exit ;
70204: GO 70304
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70206: LD_ADDR_VAR 0 1
70210: PUSH
70211: LD_VAR 0 1
70215: PPUSH
70216: LD_INT 50
70218: PUSH
70219: EMPTY
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: LD_INT 92
70227: PUSH
70228: LD_VAR 0 2
70232: PUSH
70233: LD_INT 1
70235: ARRAY
70236: PUSH
70237: LD_VAR 0 2
70241: PUSH
70242: LD_INT 2
70244: ARRAY
70245: PUSH
70246: LD_INT 8
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PPUSH
70263: CALL_OW 72
70267: ST_TO_ADDR
// if not vehicles then
70268: LD_VAR 0 1
70272: NOT
70273: IFFALSE 70277
// exit ;
70275: GO 70304
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70277: LD_VAR 0 1
70281: PPUSH
70282: LD_VAR 0 2
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PPUSH
70291: LD_VAR 0 2
70295: PUSH
70296: LD_INT 2
70298: ARRAY
70299: PPUSH
70300: CALL_OW 111
// end ;
70304: LD_VAR 0 3
70308: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70309: LD_INT 0
70311: PPUSH
70312: PPUSH
70313: PPUSH
// if not side or not area then
70314: LD_VAR 0 1
70318: NOT
70319: IFTRUE 70328
70321: PUSH
70322: LD_VAR 0 2
70326: NOT
70327: OR
70328: IFFALSE 70332
// exit ;
70330: GO 70451
// tmp := AreaToList ( area , 0 ) ;
70332: LD_ADDR_VAR 0 5
70336: PUSH
70337: LD_VAR 0 2
70341: PPUSH
70342: LD_INT 0
70344: PPUSH
70345: CALL_OW 517
70349: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70350: LD_ADDR_VAR 0 4
70354: PUSH
70355: DOUBLE
70356: LD_INT 1
70358: DEC
70359: ST_TO_ADDR
70360: LD_VAR 0 5
70364: PUSH
70365: LD_INT 1
70367: ARRAY
70368: PUSH
70369: FOR_TO
70370: IFFALSE 70449
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70372: LD_VAR 0 5
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_VAR 0 4
70385: ARRAY
70386: PPUSH
70387: LD_VAR 0 5
70391: PUSH
70392: LD_INT 2
70394: ARRAY
70395: PUSH
70396: LD_VAR 0 4
70400: ARRAY
70401: PPUSH
70402: CALL_OW 351
70406: IFFALSE 70447
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70408: LD_VAR 0 5
70412: PUSH
70413: LD_INT 1
70415: ARRAY
70416: PUSH
70417: LD_VAR 0 4
70421: ARRAY
70422: PPUSH
70423: LD_VAR 0 5
70427: PUSH
70428: LD_INT 2
70430: ARRAY
70431: PUSH
70432: LD_VAR 0 4
70436: ARRAY
70437: PPUSH
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 244
// end ;
70447: GO 70369
70449: POP
70450: POP
// end ;
70451: LD_VAR 0 3
70455: RET
// export function UniqueArray ( array ) ; var i ; begin
70456: LD_INT 0
70458: PPUSH
70459: PPUSH
// result := [ ] ;
70460: LD_ADDR_VAR 0 2
70464: PUSH
70465: EMPTY
70466: ST_TO_ADDR
// if not array then
70467: LD_VAR 0 1
70471: NOT
70472: IFFALSE 70476
// exit ;
70474: GO 70537
// for i := 1 to array do
70476: LD_ADDR_VAR 0 3
70480: PUSH
70481: DOUBLE
70482: LD_INT 1
70484: DEC
70485: ST_TO_ADDR
70486: LD_VAR 0 1
70490: PUSH
70491: FOR_TO
70492: IFFALSE 70535
// if not array [ i ] in result then
70494: LD_VAR 0 1
70498: PUSH
70499: LD_VAR 0 3
70503: ARRAY
70504: PUSH
70505: LD_VAR 0 2
70509: IN
70510: NOT
70511: IFFALSE 70533
// result := Join ( result , i ) ;
70513: LD_ADDR_VAR 0 2
70517: PUSH
70518: LD_VAR 0 2
70522: PPUSH
70523: LD_VAR 0 3
70527: PPUSH
70528: CALL 65188 0 2
70532: ST_TO_ADDR
70533: GO 70491
70535: POP
70536: POP
// end ; end_of_file
70537: LD_VAR 0 2
70541: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70542: LD_VAR 0 1
70546: PPUSH
70547: LD_VAR 0 2
70551: PPUSH
70552: LD_VAR 0 3
70556: PPUSH
70557: LD_VAR 0 4
70561: PPUSH
70562: LD_VAR 0 5
70566: PPUSH
70567: LD_VAR 0 6
70571: PPUSH
70572: CALL 4759 0 6
// end ;
70576: PPOPN 6
70578: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70579: LD_INT 0
70581: PPUSH
// begin if not units then
70582: LD_VAR 0 1
70586: NOT
70587: IFFALSE 70591
// exit ;
70589: GO 70625
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70591: LD_VAR 0 1
70595: PPUSH
70596: LD_VAR 0 2
70600: PPUSH
70601: LD_VAR 0 3
70605: PPUSH
70606: LD_VAR 0 4
70610: PPUSH
70611: LD_VAR 0 5
70615: PPUSH
70616: LD_VAR 0 6
70620: PPUSH
70621: CALL 27005 0 6
// end ;
70625: PPOPN 7
70627: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70628: CALL 4646 0 0
// end ;
70632: PPOPN 1
70634: END
