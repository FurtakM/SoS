// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4304: LD_INT 0
4306: PPUSH
// if p2 = 100 then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_INT 100
4314: EQUAL
4315: IFFALSE 5264
// begin if not StreamModeActive then
4317: LD_EXP 23
4321: NOT
4322: IFFALSE 4332
// StreamModeActive := true ;
4324: LD_ADDR_EXP 23
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// if p3 = 0 then
4332: LD_VAR 0 3
4336: PUSH
4337: LD_INT 0
4339: EQUAL
4340: IFFALSE 4346
// InitStreamMode ;
4342: CALL 5424 0 0
// if p3 = 1 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: EQUAL
4354: IFFALSE 4364
// sRocket := true ;
4356: LD_ADDR_EXP 28
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 2 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 2
4371: EQUAL
4372: IFFALSE 4382
// sSpeed := true ;
4374: LD_ADDR_EXP 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 3 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 3
4389: EQUAL
4390: IFFALSE 4400
// sEngine := true ;
4392: LD_ADDR_EXP 29
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 4 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 4
4407: EQUAL
4408: IFFALSE 4418
// sSpec := true ;
4410: LD_ADDR_EXP 26
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 5 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 5
4425: EQUAL
4426: IFFALSE 4436
// sLevel := true ;
4428: LD_ADDR_EXP 30
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 6 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 6
4443: EQUAL
4444: IFFALSE 4454
// sArmoury := true ;
4446: LD_ADDR_EXP 31
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 7 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 7
4461: EQUAL
4462: IFFALSE 4472
// sRadar := true ;
4464: LD_ADDR_EXP 32
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 8 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 8
4479: EQUAL
4480: IFFALSE 4490
// sBunker := true ;
4482: LD_ADDR_EXP 33
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 9 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 9
4497: EQUAL
4498: IFFALSE 4508
// sHack := true ;
4500: LD_ADDR_EXP 34
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 10 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 10
4515: EQUAL
4516: IFFALSE 4526
// sFire := true ;
4518: LD_ADDR_EXP 35
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 11 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 11
4533: EQUAL
4534: IFFALSE 4544
// sRefresh := true ;
4536: LD_ADDR_EXP 36
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 12 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 12
4551: EQUAL
4552: IFFALSE 4562
// sExp := true ;
4554: LD_ADDR_EXP 37
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 13 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: EQUAL
4570: IFFALSE 4580
// sDepot := true ;
4572: LD_ADDR_EXP 38
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 14 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 14
4587: EQUAL
4588: IFFALSE 4598
// sFlag := true ;
4590: LD_ADDR_EXP 39
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 15 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 15
4605: EQUAL
4606: IFFALSE 4616
// sKamikadze := true ;
4608: LD_ADDR_EXP 47
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 16 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 16
4623: EQUAL
4624: IFFALSE 4634
// sTroll := true ;
4626: LD_ADDR_EXP 48
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 17 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 17
4641: EQUAL
4642: IFFALSE 4652
// sSlow := true ;
4644: LD_ADDR_EXP 49
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 18 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 18
4659: EQUAL
4660: IFFALSE 4670
// sLack := true ;
4662: LD_ADDR_EXP 50
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 19 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 19
4677: EQUAL
4678: IFFALSE 4688
// sTank := true ;
4680: LD_ADDR_EXP 52
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 20 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 20
4695: EQUAL
4696: IFFALSE 4706
// sRemote := true ;
4698: LD_ADDR_EXP 53
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 21 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 21
4713: EQUAL
4714: IFFALSE 4724
// sPowell := true ;
4716: LD_ADDR_EXP 54
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 22 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 22
4731: EQUAL
4732: IFFALSE 4742
// sTeleport := true ;
4734: LD_ADDR_EXP 57
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 23 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 23
4749: EQUAL
4750: IFFALSE 4760
// sOilTower := true ;
4752: LD_ADDR_EXP 59
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 24 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 24
4767: EQUAL
4768: IFFALSE 4778
// sShovel := true ;
4770: LD_ADDR_EXP 60
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 25 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 25
4785: EQUAL
4786: IFFALSE 4796
// sSheik := true ;
4788: LD_ADDR_EXP 61
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 26 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 26
4803: EQUAL
4804: IFFALSE 4814
// sEarthquake := true ;
4806: LD_ADDR_EXP 63
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 27 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 27
4821: EQUAL
4822: IFFALSE 4832
// sAI := true ;
4824: LD_ADDR_EXP 64
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 28 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 28
4839: EQUAL
4840: IFFALSE 4850
// sCargo := true ;
4842: LD_ADDR_EXP 67
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 29 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 29
4857: EQUAL
4858: IFFALSE 4868
// sDLaser := true ;
4860: LD_ADDR_EXP 68
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 30 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 30
4875: EQUAL
4876: IFFALSE 4886
// sExchange := true ;
4878: LD_ADDR_EXP 69
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 31 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 31
4893: EQUAL
4894: IFFALSE 4904
// sFac := true ;
4896: LD_ADDR_EXP 70
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 32 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 32
4911: EQUAL
4912: IFFALSE 4922
// sPower := true ;
4914: LD_ADDR_EXP 71
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 33 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 33
4929: EQUAL
4930: IFFALSE 4940
// sRandom := true ;
4932: LD_ADDR_EXP 72
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 34 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 34
4947: EQUAL
4948: IFFALSE 4958
// sShield := true ;
4950: LD_ADDR_EXP 73
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 35 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 35
4965: EQUAL
4966: IFFALSE 4976
// sTime := true ;
4968: LD_ADDR_EXP 74
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 36 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 36
4983: EQUAL
4984: IFFALSE 4994
// sTools := true ;
4986: LD_ADDR_EXP 75
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 101 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 101
5001: EQUAL
5002: IFFALSE 5012
// sSold := true ;
5004: LD_ADDR_EXP 40
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 102 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 102
5019: EQUAL
5020: IFFALSE 5030
// sDiff := true ;
5022: LD_ADDR_EXP 41
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 103 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 103
5037: EQUAL
5038: IFFALSE 5048
// sFog := true ;
5040: LD_ADDR_EXP 44
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 104 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 104
5055: EQUAL
5056: IFFALSE 5066
// sReset := true ;
5058: LD_ADDR_EXP 45
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 105 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 105
5073: EQUAL
5074: IFFALSE 5084
// sSun := true ;
5076: LD_ADDR_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 106 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 106
5091: EQUAL
5092: IFFALSE 5102
// sTiger := true ;
5094: LD_ADDR_EXP 42
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 107 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 107
5109: EQUAL
5110: IFFALSE 5120
// sBomb := true ;
5112: LD_ADDR_EXP 43
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 108 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 108
5127: EQUAL
5128: IFFALSE 5138
// sWound := true ;
5130: LD_ADDR_EXP 51
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 109 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 109
5145: EQUAL
5146: IFFALSE 5156
// sBetray := true ;
5148: LD_ADDR_EXP 55
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 110 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 110
5163: EQUAL
5164: IFFALSE 5174
// sContamin := true ;
5166: LD_ADDR_EXP 56
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 111 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 111
5181: EQUAL
5182: IFFALSE 5192
// sOil := true ;
5184: LD_ADDR_EXP 58
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// if p3 = 112 then
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 112
5199: EQUAL
5200: IFFALSE 5210
// sStu := true ;
5202: LD_ADDR_EXP 62
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if p3 = 113 then
5210: LD_VAR 0 3
5214: PUSH
5215: LD_INT 113
5217: EQUAL
5218: IFFALSE 5228
// sBazooka := true ;
5220: LD_ADDR_EXP 65
5224: PUSH
5225: LD_INT 1
5227: ST_TO_ADDR
// if p3 = 114 then
5228: LD_VAR 0 3
5232: PUSH
5233: LD_INT 114
5235: EQUAL
5236: IFFALSE 5246
// sMortar := true ;
5238: LD_ADDR_EXP 66
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// if p3 = 115 then
5246: LD_VAR 0 3
5250: PUSH
5251: LD_INT 115
5253: EQUAL
5254: IFFALSE 5264
// sRanger := true ;
5256: LD_ADDR_EXP 76
5260: PUSH
5261: LD_INT 1
5263: ST_TO_ADDR
// end ; if p2 = 101 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 101
5271: EQUAL
5272: IFFALSE 5400
// begin case p3 of 1 :
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 1
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5294
5287: POP
// hHackUnlimitedResources ; 2 :
5288: CALL 16437 0 0
5292: GO 5400
5294: LD_INT 2
5296: DOUBLE
5297: EQUAL
5298: IFTRUE 5302
5300: GO 5309
5302: POP
// hHackSetLevel10 ; 3 :
5303: CALL 16570 0 0
5307: GO 5400
5309: LD_INT 3
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5324
5317: POP
// hHackSetLevel10YourUnits ; 4 :
5318: CALL 16655 0 0
5322: GO 5400
5324: LD_INT 4
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5339
5332: POP
// hHackInvincible ; 5 :
5333: CALL 17103 0 0
5337: GO 5400
5339: LD_INT 5
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5354
5347: POP
// hHackInvisible ; 6 :
5348: CALL 17214 0 0
5352: GO 5400
5354: LD_INT 6
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5369
5362: POP
// hHackChangeYourSide ; 7 :
5363: CALL 17271 0 0
5367: GO 5400
5369: LD_INT 7
5371: DOUBLE
5372: EQUAL
5373: IFTRUE 5377
5375: GO 5384
5377: POP
// hHackChangeUnitSide ; 8 :
5378: CALL 17313 0 0
5382: GO 5400
5384: LD_INT 8
5386: DOUBLE
5387: EQUAL
5388: IFTRUE 5392
5390: GO 5399
5392: POP
// hHackFog ; end ;
5393: CALL 17414 0 0
5397: GO 5400
5399: POP
// end ; end ;
5400: LD_VAR 0 7
5404: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5405: GO 5407
5407: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5408: LD_STRING initStreamRollete();
5410: PPUSH
5411: CALL_OW 559
// InitStreamMode ;
5415: CALL 5424 0 0
// DefineStreamItems ( ) ;
5419: CALL 5864 0 0
// end ;
5423: END
// function InitStreamMode ; begin
5424: LD_INT 0
5426: PPUSH
// streamModeActive := false ;
5427: LD_ADDR_EXP 23
5431: PUSH
5432: LD_INT 0
5434: ST_TO_ADDR
// normalCounter := 36 ;
5435: LD_ADDR_EXP 24
5439: PUSH
5440: LD_INT 36
5442: ST_TO_ADDR
// hardcoreCounter := 16 ;
5443: LD_ADDR_EXP 25
5447: PUSH
5448: LD_INT 16
5450: ST_TO_ADDR
// sRocket := false ;
5451: LD_ADDR_EXP 28
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// sSpeed := false ;
5459: LD_ADDR_EXP 27
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// sEngine := false ;
5467: LD_ADDR_EXP 29
5471: PUSH
5472: LD_INT 0
5474: ST_TO_ADDR
// sSpec := false ;
5475: LD_ADDR_EXP 26
5479: PUSH
5480: LD_INT 0
5482: ST_TO_ADDR
// sLevel := false ;
5483: LD_ADDR_EXP 30
5487: PUSH
5488: LD_INT 0
5490: ST_TO_ADDR
// sArmoury := false ;
5491: LD_ADDR_EXP 31
5495: PUSH
5496: LD_INT 0
5498: ST_TO_ADDR
// sRadar := false ;
5499: LD_ADDR_EXP 32
5503: PUSH
5504: LD_INT 0
5506: ST_TO_ADDR
// sBunker := false ;
5507: LD_ADDR_EXP 33
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
// sHack := false ;
5515: LD_ADDR_EXP 34
5519: PUSH
5520: LD_INT 0
5522: ST_TO_ADDR
// sFire := false ;
5523: LD_ADDR_EXP 35
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// sRefresh := false ;
5531: LD_ADDR_EXP 36
5535: PUSH
5536: LD_INT 0
5538: ST_TO_ADDR
// sExp := false ;
5539: LD_ADDR_EXP 37
5543: PUSH
5544: LD_INT 0
5546: ST_TO_ADDR
// sDepot := false ;
5547: LD_ADDR_EXP 38
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sFlag := false ;
5555: LD_ADDR_EXP 39
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sKamikadze := false ;
5563: LD_ADDR_EXP 47
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sTroll := false ;
5571: LD_ADDR_EXP 48
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sSlow := false ;
5579: LD_ADDR_EXP 49
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sLack := false ;
5587: LD_ADDR_EXP 50
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sTank := false ;
5595: LD_ADDR_EXP 52
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sRemote := false ;
5603: LD_ADDR_EXP 53
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sPowell := false ;
5611: LD_ADDR_EXP 54
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sTeleport := false ;
5619: LD_ADDR_EXP 57
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sOilTower := false ;
5627: LD_ADDR_EXP 59
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sShovel := false ;
5635: LD_ADDR_EXP 60
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sSheik := false ;
5643: LD_ADDR_EXP 61
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sEarthquake := false ;
5651: LD_ADDR_EXP 63
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sAI := false ;
5659: LD_ADDR_EXP 64
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sCargo := false ;
5667: LD_ADDR_EXP 67
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sDLaser := false ;
5675: LD_ADDR_EXP 68
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sExchange := false ;
5683: LD_ADDR_EXP 69
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sFac := false ;
5691: LD_ADDR_EXP 70
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sPower := false ;
5699: LD_ADDR_EXP 71
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sRandom := false ;
5707: LD_ADDR_EXP 72
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sShield := false ;
5715: LD_ADDR_EXP 73
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sTime := false ;
5723: LD_ADDR_EXP 74
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sTools := false ;
5731: LD_ADDR_EXP 75
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sSold := false ;
5739: LD_ADDR_EXP 40
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sDiff := false ;
5747: LD_ADDR_EXP 41
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sFog := false ;
5755: LD_ADDR_EXP 44
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sReset := false ;
5763: LD_ADDR_EXP 45
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sSun := false ;
5771: LD_ADDR_EXP 46
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sTiger := false ;
5779: LD_ADDR_EXP 42
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sBomb := false ;
5787: LD_ADDR_EXP 43
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sWound := false ;
5795: LD_ADDR_EXP 51
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sBetray := false ;
5803: LD_ADDR_EXP 55
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sContamin := false ;
5811: LD_ADDR_EXP 56
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sOil := false ;
5819: LD_ADDR_EXP 58
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sStu := false ;
5827: LD_ADDR_EXP 62
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sBazooka := false ;
5835: LD_ADDR_EXP 65
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sMortar := false ;
5843: LD_ADDR_EXP 66
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sRanger := false ;
5851: LD_ADDR_EXP 76
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// end ;
5859: LD_VAR 0 1
5863: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5864: LD_INT 0
5866: PPUSH
5867: PPUSH
5868: PPUSH
5869: PPUSH
5870: PPUSH
// result := [ ] ;
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: EMPTY
5877: ST_TO_ADDR
// if campaign_id = 1 then
5878: LD_OWVAR 69
5882: PUSH
5883: LD_INT 1
5885: EQUAL
5886: IFFALSE 8824
// begin case mission_number of 1 :
5888: LD_OWVAR 70
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5965
5901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: LD_INT 2
5909: PUSH
5910: LD_INT 4
5912: PUSH
5913: LD_INT 11
5915: PUSH
5916: LD_INT 12
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 23
5930: PUSH
5931: LD_INT 26
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 101
5947: PUSH
5948: LD_INT 102
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: ST_TO_ADDR
5963: GO 8822
5965: LD_INT 2
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 6045
5973: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_INT 2
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: LD_INT 11
5987: PUSH
5988: LD_INT 12
5990: PUSH
5991: LD_INT 15
5993: PUSH
5994: LD_INT 16
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 23
6002: PUSH
6003: LD_INT 26
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 101
6019: PUSH
6020: LD_INT 102
6022: PUSH
6023: LD_INT 105
6025: PUSH
6026: LD_INT 106
6028: PUSH
6029: LD_INT 108
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 8822
6045: LD_INT 3
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6129
6053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6054: LD_ADDR_VAR 0 1
6058: PUSH
6059: LD_INT 2
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 5
6067: PUSH
6068: LD_INT 11
6070: PUSH
6071: LD_INT 12
6073: PUSH
6074: LD_INT 15
6076: PUSH
6077: LD_INT 16
6079: PUSH
6080: LD_INT 22
6082: PUSH
6083: LD_INT 26
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 101
6103: PUSH
6104: LD_INT 102
6106: PUSH
6107: LD_INT 105
6109: PUSH
6110: LD_INT 106
6112: PUSH
6113: LD_INT 108
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: ST_TO_ADDR
6127: GO 8822
6129: LD_INT 4
6131: DOUBLE
6132: EQUAL
6133: IFTRUE 6137
6135: GO 6221
6137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6138: LD_ADDR_VAR 0 1
6142: PUSH
6143: LD_INT 2
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 5
6151: PUSH
6152: LD_INT 8
6154: PUSH
6155: LD_INT 11
6157: PUSH
6158: LD_INT 12
6160: PUSH
6161: LD_INT 15
6163: PUSH
6164: LD_INT 16
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_INT 23
6172: PUSH
6173: LD_INT 26
6175: PUSH
6176: LD_INT 36
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 101
6195: PUSH
6196: LD_INT 102
6198: PUSH
6199: LD_INT 105
6201: PUSH
6202: LD_INT 106
6204: PUSH
6205: LD_INT 108
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: ST_TO_ADDR
6219: GO 8822
6221: LD_INT 5
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6329
6229: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 4
6240: PUSH
6241: LD_INT 5
6243: PUSH
6244: LD_INT 6
6246: PUSH
6247: LD_INT 8
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 15
6258: PUSH
6259: LD_INT 16
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 26
6273: PUSH
6274: LD_INT 36
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 101
6295: PUSH
6296: LD_INT 102
6298: PUSH
6299: LD_INT 105
6301: PUSH
6302: LD_INT 106
6304: PUSH
6305: LD_INT 108
6307: PUSH
6308: LD_INT 109
6310: PUSH
6311: LD_INT 112
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: ST_TO_ADDR
6327: GO 8822
6329: LD_INT 6
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6457
6337: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: LD_INT 4
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: LD_INT 6
6354: PUSH
6355: LD_INT 8
6357: PUSH
6358: LD_INT 11
6360: PUSH
6361: LD_INT 12
6363: PUSH
6364: LD_INT 15
6366: PUSH
6367: LD_INT 16
6369: PUSH
6370: LD_INT 20
6372: PUSH
6373: LD_INT 21
6375: PUSH
6376: LD_INT 22
6378: PUSH
6379: LD_INT 23
6381: PUSH
6382: LD_INT 25
6384: PUSH
6385: LD_INT 26
6387: PUSH
6388: LD_INT 30
6390: PUSH
6391: LD_INT 31
6393: PUSH
6394: LD_INT 32
6396: PUSH
6397: LD_INT 36
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 101
6423: PUSH
6424: LD_INT 102
6426: PUSH
6427: LD_INT 105
6429: PUSH
6430: LD_INT 106
6432: PUSH
6433: LD_INT 108
6435: PUSH
6436: LD_INT 109
6438: PUSH
6439: LD_INT 112
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: ST_TO_ADDR
6455: GO 8822
6457: LD_INT 7
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6565
6465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: LD_INT 7
6482: PUSH
6483: LD_INT 11
6485: PUSH
6486: LD_INT 12
6488: PUSH
6489: LD_INT 15
6491: PUSH
6492: LD_INT 16
6494: PUSH
6495: LD_INT 20
6497: PUSH
6498: LD_INT 21
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_INT 23
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 26
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 101
6531: PUSH
6532: LD_INT 102
6534: PUSH
6535: LD_INT 103
6537: PUSH
6538: LD_INT 105
6540: PUSH
6541: LD_INT 106
6543: PUSH
6544: LD_INT 108
6546: PUSH
6547: LD_INT 112
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: ST_TO_ADDR
6563: GO 8822
6565: LD_INT 8
6567: DOUBLE
6568: EQUAL
6569: IFTRUE 6573
6571: GO 6701
6573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: LD_INT 7
6593: PUSH
6594: LD_INT 8
6596: PUSH
6597: LD_INT 11
6599: PUSH
6600: LD_INT 12
6602: PUSH
6603: LD_INT 15
6605: PUSH
6606: LD_INT 16
6608: PUSH
6609: LD_INT 20
6611: PUSH
6612: LD_INT 21
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 23
6620: PUSH
6621: LD_INT 25
6623: PUSH
6624: LD_INT 26
6626: PUSH
6627: LD_INT 30
6629: PUSH
6630: LD_INT 31
6632: PUSH
6633: LD_INT 32
6635: PUSH
6636: LD_INT 36
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 101
6663: PUSH
6664: LD_INT 102
6666: PUSH
6667: LD_INT 103
6669: PUSH
6670: LD_INT 105
6672: PUSH
6673: LD_INT 106
6675: PUSH
6676: LD_INT 108
6678: PUSH
6679: LD_INT 109
6681: PUSH
6682: LD_INT 112
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: ST_TO_ADDR
6699: GO 8822
6701: LD_INT 9
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6845
6709: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6710: LD_ADDR_VAR 0 1
6714: PUSH
6715: LD_INT 2
6717: PUSH
6718: LD_INT 4
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: LD_INT 6
6726: PUSH
6727: LD_INT 7
6729: PUSH
6730: LD_INT 8
6732: PUSH
6733: LD_INT 11
6735: PUSH
6736: LD_INT 12
6738: PUSH
6739: LD_INT 15
6741: PUSH
6742: LD_INT 16
6744: PUSH
6745: LD_INT 20
6747: PUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 22
6753: PUSH
6754: LD_INT 23
6756: PUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 26
6762: PUSH
6763: LD_INT 28
6765: PUSH
6766: LD_INT 30
6768: PUSH
6769: LD_INT 31
6771: PUSH
6772: LD_INT 32
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 101
6803: PUSH
6804: LD_INT 102
6806: PUSH
6807: LD_INT 103
6809: PUSH
6810: LD_INT 105
6812: PUSH
6813: LD_INT 106
6815: PUSH
6816: LD_INT 108
6818: PUSH
6819: LD_INT 109
6821: PUSH
6822: LD_INT 112
6824: PUSH
6825: LD_INT 114
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 8822
6845: LD_INT 10
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 7037
6853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6854: LD_ADDR_VAR 0 1
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: LD_INT 6
6870: PUSH
6871: LD_INT 7
6873: PUSH
6874: LD_INT 8
6876: PUSH
6877: LD_INT 9
6879: PUSH
6880: LD_INT 10
6882: PUSH
6883: LD_INT 11
6885: PUSH
6886: LD_INT 12
6888: PUSH
6889: LD_INT 13
6891: PUSH
6892: LD_INT 14
6894: PUSH
6895: LD_INT 15
6897: PUSH
6898: LD_INT 16
6900: PUSH
6901: LD_INT 17
6903: PUSH
6904: LD_INT 18
6906: PUSH
6907: LD_INT 19
6909: PUSH
6910: LD_INT 20
6912: PUSH
6913: LD_INT 21
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 24
6924: PUSH
6925: LD_INT 25
6927: PUSH
6928: LD_INT 26
6930: PUSH
6931: LD_INT 28
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 31
6939: PUSH
6940: LD_INT 32
6942: PUSH
6943: LD_INT 36
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 101
6979: PUSH
6980: LD_INT 102
6982: PUSH
6983: LD_INT 103
6985: PUSH
6986: LD_INT 104
6988: PUSH
6989: LD_INT 105
6991: PUSH
6992: LD_INT 106
6994: PUSH
6995: LD_INT 107
6997: PUSH
6998: LD_INT 108
7000: PUSH
7001: LD_INT 109
7003: PUSH
7004: LD_INT 110
7006: PUSH
7007: LD_INT 111
7009: PUSH
7010: LD_INT 112
7012: PUSH
7013: LD_INT 114
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: ST_TO_ADDR
7035: GO 8822
7037: LD_INT 11
7039: DOUBLE
7040: EQUAL
7041: IFTRUE 7045
7043: GO 7237
7045: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7046: LD_ADDR_VAR 0 1
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: LD_INT 5
7062: PUSH
7063: LD_INT 6
7065: PUSH
7066: LD_INT 7
7068: PUSH
7069: LD_INT 8
7071: PUSH
7072: LD_INT 9
7074: PUSH
7075: LD_INT 10
7077: PUSH
7078: LD_INT 11
7080: PUSH
7081: LD_INT 12
7083: PUSH
7084: LD_INT 13
7086: PUSH
7087: LD_INT 14
7089: PUSH
7090: LD_INT 15
7092: PUSH
7093: LD_INT 16
7095: PUSH
7096: LD_INT 17
7098: PUSH
7099: LD_INT 18
7101: PUSH
7102: LD_INT 19
7104: PUSH
7105: LD_INT 20
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 22
7113: PUSH
7114: LD_INT 23
7116: PUSH
7117: LD_INT 24
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 26
7125: PUSH
7126: LD_INT 28
7128: PUSH
7129: LD_INT 30
7131: PUSH
7132: LD_INT 31
7134: PUSH
7135: LD_INT 32
7137: PUSH
7138: LD_INT 34
7140: PUSH
7141: LD_INT 36
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 101
7179: PUSH
7180: LD_INT 102
7182: PUSH
7183: LD_INT 103
7185: PUSH
7186: LD_INT 104
7188: PUSH
7189: LD_INT 105
7191: PUSH
7192: LD_INT 106
7194: PUSH
7195: LD_INT 107
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 109
7203: PUSH
7204: LD_INT 110
7206: PUSH
7207: LD_INT 111
7209: PUSH
7210: LD_INT 112
7212: PUSH
7213: LD_INT 114
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 8822
7237: LD_INT 12
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7453
7245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_INT 1
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: LD_INT 4
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: LD_INT 6
7268: PUSH
7269: LD_INT 7
7271: PUSH
7272: LD_INT 8
7274: PUSH
7275: LD_INT 9
7277: PUSH
7278: LD_INT 10
7280: PUSH
7281: LD_INT 11
7283: PUSH
7284: LD_INT 12
7286: PUSH
7287: LD_INT 13
7289: PUSH
7290: LD_INT 14
7292: PUSH
7293: LD_INT 15
7295: PUSH
7296: LD_INT 16
7298: PUSH
7299: LD_INT 17
7301: PUSH
7302: LD_INT 18
7304: PUSH
7305: LD_INT 19
7307: PUSH
7308: LD_INT 20
7310: PUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 25
7325: PUSH
7326: LD_INT 26
7328: PUSH
7329: LD_INT 27
7331: PUSH
7332: LD_INT 28
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 31
7340: PUSH
7341: LD_INT 32
7343: PUSH
7344: LD_INT 33
7346: PUSH
7347: LD_INT 34
7349: PUSH
7350: LD_INT 36
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 101
7391: PUSH
7392: LD_INT 102
7394: PUSH
7395: LD_INT 103
7397: PUSH
7398: LD_INT 104
7400: PUSH
7401: LD_INT 105
7403: PUSH
7404: LD_INT 106
7406: PUSH
7407: LD_INT 107
7409: PUSH
7410: LD_INT 108
7412: PUSH
7413: LD_INT 109
7415: PUSH
7416: LD_INT 110
7418: PUSH
7419: LD_INT 111
7421: PUSH
7422: LD_INT 112
7424: PUSH
7425: LD_INT 113
7427: PUSH
7428: LD_INT 114
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
7451: GO 8822
7453: LD_INT 13
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7657
7461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7462: LD_ADDR_VAR 0 1
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 3
7475: PUSH
7476: LD_INT 4
7478: PUSH
7479: LD_INT 5
7481: PUSH
7482: LD_INT 8
7484: PUSH
7485: LD_INT 9
7487: PUSH
7488: LD_INT 10
7490: PUSH
7491: LD_INT 11
7493: PUSH
7494: LD_INT 12
7496: PUSH
7497: LD_INT 14
7499: PUSH
7500: LD_INT 15
7502: PUSH
7503: LD_INT 16
7505: PUSH
7506: LD_INT 17
7508: PUSH
7509: LD_INT 18
7511: PUSH
7512: LD_INT 19
7514: PUSH
7515: LD_INT 20
7517: PUSH
7518: LD_INT 21
7520: PUSH
7521: LD_INT 22
7523: PUSH
7524: LD_INT 23
7526: PUSH
7527: LD_INT 24
7529: PUSH
7530: LD_INT 25
7532: PUSH
7533: LD_INT 26
7535: PUSH
7536: LD_INT 27
7538: PUSH
7539: LD_INT 28
7541: PUSH
7542: LD_INT 30
7544: PUSH
7545: LD_INT 31
7547: PUSH
7548: LD_INT 32
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 34
7556: PUSH
7557: LD_INT 36
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 101
7595: PUSH
7596: LD_INT 102
7598: PUSH
7599: LD_INT 103
7601: PUSH
7602: LD_INT 104
7604: PUSH
7605: LD_INT 105
7607: PUSH
7608: LD_INT 106
7610: PUSH
7611: LD_INT 107
7613: PUSH
7614: LD_INT 108
7616: PUSH
7617: LD_INT 109
7619: PUSH
7620: LD_INT 110
7622: PUSH
7623: LD_INT 111
7625: PUSH
7626: LD_INT 112
7628: PUSH
7629: LD_INT 113
7631: PUSH
7632: LD_INT 114
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: ST_TO_ADDR
7655: GO 8822
7657: LD_INT 14
7659: DOUBLE
7660: EQUAL
7661: IFTRUE 7665
7663: GO 7877
7665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: LD_INT 6
7688: PUSH
7689: LD_INT 7
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 9
7697: PUSH
7698: LD_INT 10
7700: PUSH
7701: LD_INT 11
7703: PUSH
7704: LD_INT 12
7706: PUSH
7707: LD_INT 13
7709: PUSH
7710: LD_INT 14
7712: PUSH
7713: LD_INT 15
7715: PUSH
7716: LD_INT 16
7718: PUSH
7719: LD_INT 17
7721: PUSH
7722: LD_INT 18
7724: PUSH
7725: LD_INT 19
7727: PUSH
7728: LD_INT 20
7730: PUSH
7731: LD_INT 21
7733: PUSH
7734: LD_INT 22
7736: PUSH
7737: LD_INT 23
7739: PUSH
7740: LD_INT 24
7742: PUSH
7743: LD_INT 25
7745: PUSH
7746: LD_INT 26
7748: PUSH
7749: LD_INT 27
7751: PUSH
7752: LD_INT 28
7754: PUSH
7755: LD_INT 29
7757: PUSH
7758: LD_INT 30
7760: PUSH
7761: LD_INT 31
7763: PUSH
7764: LD_INT 32
7766: PUSH
7767: LD_INT 33
7769: PUSH
7770: LD_INT 34
7772: PUSH
7773: LD_INT 36
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 101
7815: PUSH
7816: LD_INT 102
7818: PUSH
7819: LD_INT 103
7821: PUSH
7822: LD_INT 104
7824: PUSH
7825: LD_INT 105
7827: PUSH
7828: LD_INT 106
7830: PUSH
7831: LD_INT 107
7833: PUSH
7834: LD_INT 108
7836: PUSH
7837: LD_INT 109
7839: PUSH
7840: LD_INT 110
7842: PUSH
7843: LD_INT 111
7845: PUSH
7846: LD_INT 112
7848: PUSH
7849: LD_INT 113
7851: PUSH
7852: LD_INT 114
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: ST_TO_ADDR
7875: GO 8822
7877: LD_INT 15
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8097
7885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 4
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 6
7908: PUSH
7909: LD_INT 7
7911: PUSH
7912: LD_INT 8
7914: PUSH
7915: LD_INT 9
7917: PUSH
7918: LD_INT 10
7920: PUSH
7921: LD_INT 11
7923: PUSH
7924: LD_INT 12
7926: PUSH
7927: LD_INT 13
7929: PUSH
7930: LD_INT 14
7932: PUSH
7933: LD_INT 15
7935: PUSH
7936: LD_INT 16
7938: PUSH
7939: LD_INT 17
7941: PUSH
7942: LD_INT 18
7944: PUSH
7945: LD_INT 19
7947: PUSH
7948: LD_INT 20
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 26
7968: PUSH
7969: LD_INT 27
7971: PUSH
7972: LD_INT 28
7974: PUSH
7975: LD_INT 29
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 31
7983: PUSH
7984: LD_INT 32
7986: PUSH
7987: LD_INT 33
7989: PUSH
7990: LD_INT 34
7992: PUSH
7993: LD_INT 36
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 101
8035: PUSH
8036: LD_INT 102
8038: PUSH
8039: LD_INT 103
8041: PUSH
8042: LD_INT 104
8044: PUSH
8045: LD_INT 105
8047: PUSH
8048: LD_INT 106
8050: PUSH
8051: LD_INT 107
8053: PUSH
8054: LD_INT 108
8056: PUSH
8057: LD_INT 109
8059: PUSH
8060: LD_INT 110
8062: PUSH
8063: LD_INT 111
8065: PUSH
8066: LD_INT 112
8068: PUSH
8069: LD_INT 113
8071: PUSH
8072: LD_INT 114
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: ST_TO_ADDR
8095: GO 8822
8097: LD_INT 16
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8229
8105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 4
8116: PUSH
8117: LD_INT 5
8119: PUSH
8120: LD_INT 7
8122: PUSH
8123: LD_INT 11
8125: PUSH
8126: LD_INT 12
8128: PUSH
8129: LD_INT 15
8131: PUSH
8132: LD_INT 16
8134: PUSH
8135: LD_INT 20
8137: PUSH
8138: LD_INT 21
8140: PUSH
8141: LD_INT 22
8143: PUSH
8144: LD_INT 23
8146: PUSH
8147: LD_INT 25
8149: PUSH
8150: LD_INT 26
8152: PUSH
8153: LD_INT 30
8155: PUSH
8156: LD_INT 31
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 33
8164: PUSH
8165: LD_INT 34
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 101
8191: PUSH
8192: LD_INT 102
8194: PUSH
8195: LD_INT 103
8197: PUSH
8198: LD_INT 106
8200: PUSH
8201: LD_INT 108
8203: PUSH
8204: LD_INT 112
8206: PUSH
8207: LD_INT 113
8209: PUSH
8210: LD_INT 114
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 8822
8229: LD_INT 17
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8449
8237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: PUSH
8246: LD_INT 2
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 6
8260: PUSH
8261: LD_INT 7
8263: PUSH
8264: LD_INT 8
8266: PUSH
8267: LD_INT 9
8269: PUSH
8270: LD_INT 10
8272: PUSH
8273: LD_INT 11
8275: PUSH
8276: LD_INT 12
8278: PUSH
8279: LD_INT 13
8281: PUSH
8282: LD_INT 14
8284: PUSH
8285: LD_INT 15
8287: PUSH
8288: LD_INT 16
8290: PUSH
8291: LD_INT 17
8293: PUSH
8294: LD_INT 18
8296: PUSH
8297: LD_INT 19
8299: PUSH
8300: LD_INT 20
8302: PUSH
8303: LD_INT 21
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 23
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 26
8320: PUSH
8321: LD_INT 27
8323: PUSH
8324: LD_INT 28
8326: PUSH
8327: LD_INT 29
8329: PUSH
8330: LD_INT 30
8332: PUSH
8333: LD_INT 31
8335: PUSH
8336: LD_INT 32
8338: PUSH
8339: LD_INT 33
8341: PUSH
8342: LD_INT 34
8344: PUSH
8345: LD_INT 36
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 101
8387: PUSH
8388: LD_INT 102
8390: PUSH
8391: LD_INT 103
8393: PUSH
8394: LD_INT 104
8396: PUSH
8397: LD_INT 105
8399: PUSH
8400: LD_INT 106
8402: PUSH
8403: LD_INT 107
8405: PUSH
8406: LD_INT 108
8408: PUSH
8409: LD_INT 109
8411: PUSH
8412: LD_INT 110
8414: PUSH
8415: LD_INT 111
8417: PUSH
8418: LD_INT 112
8420: PUSH
8421: LD_INT 113
8423: PUSH
8424: LD_INT 114
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
8447: GO 8822
8449: LD_INT 18
8451: DOUBLE
8452: EQUAL
8453: IFTRUE 8457
8455: GO 8593
8457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8458: LD_ADDR_VAR 0 1
8462: PUSH
8463: LD_INT 2
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: LD_INT 5
8471: PUSH
8472: LD_INT 7
8474: PUSH
8475: LD_INT 11
8477: PUSH
8478: LD_INT 12
8480: PUSH
8481: LD_INT 15
8483: PUSH
8484: LD_INT 16
8486: PUSH
8487: LD_INT 20
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 26
8504: PUSH
8505: LD_INT 30
8507: PUSH
8508: LD_INT 31
8510: PUSH
8511: LD_INT 32
8513: PUSH
8514: LD_INT 33
8516: PUSH
8517: LD_INT 34
8519: PUSH
8520: LD_INT 35
8522: PUSH
8523: LD_INT 36
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 101
8551: PUSH
8552: LD_INT 102
8554: PUSH
8555: LD_INT 103
8557: PUSH
8558: LD_INT 106
8560: PUSH
8561: LD_INT 108
8563: PUSH
8564: LD_INT 112
8566: PUSH
8567: LD_INT 113
8569: PUSH
8570: LD_INT 114
8572: PUSH
8573: LD_INT 115
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: ST_TO_ADDR
8591: GO 8822
8593: LD_INT 19
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8821
8601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: LD_INT 2
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 6
8624: PUSH
8625: LD_INT 7
8627: PUSH
8628: LD_INT 8
8630: PUSH
8631: LD_INT 9
8633: PUSH
8634: LD_INT 10
8636: PUSH
8637: LD_INT 11
8639: PUSH
8640: LD_INT 12
8642: PUSH
8643: LD_INT 13
8645: PUSH
8646: LD_INT 14
8648: PUSH
8649: LD_INT 15
8651: PUSH
8652: LD_INT 16
8654: PUSH
8655: LD_INT 17
8657: PUSH
8658: LD_INT 18
8660: PUSH
8661: LD_INT 19
8663: PUSH
8664: LD_INT 20
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 22
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 26
8684: PUSH
8685: LD_INT 27
8687: PUSH
8688: LD_INT 28
8690: PUSH
8691: LD_INT 29
8693: PUSH
8694: LD_INT 30
8696: PUSH
8697: LD_INT 31
8699: PUSH
8700: LD_INT 32
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 35
8711: PUSH
8712: LD_INT 36
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 101
8755: PUSH
8756: LD_INT 102
8758: PUSH
8759: LD_INT 103
8761: PUSH
8762: LD_INT 104
8764: PUSH
8765: LD_INT 105
8767: PUSH
8768: LD_INT 106
8770: PUSH
8771: LD_INT 107
8773: PUSH
8774: LD_INT 108
8776: PUSH
8777: LD_INT 109
8779: PUSH
8780: LD_INT 110
8782: PUSH
8783: LD_INT 111
8785: PUSH
8786: LD_INT 112
8788: PUSH
8789: LD_INT 113
8791: PUSH
8792: LD_INT 114
8794: PUSH
8795: LD_INT 115
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: ST_TO_ADDR
8819: GO 8822
8821: POP
// end else
8822: GO 9041
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8824: LD_ADDR_VAR 0 1
8828: PUSH
8829: LD_INT 1
8831: PUSH
8832: LD_INT 2
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 4
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: LD_INT 6
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 8
8852: PUSH
8853: LD_INT 9
8855: PUSH
8856: LD_INT 10
8858: PUSH
8859: LD_INT 11
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: LD_INT 13
8867: PUSH
8868: LD_INT 14
8870: PUSH
8871: LD_INT 15
8873: PUSH
8874: LD_INT 16
8876: PUSH
8877: LD_INT 17
8879: PUSH
8880: LD_INT 18
8882: PUSH
8883: LD_INT 19
8885: PUSH
8886: LD_INT 20
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 23
8897: PUSH
8898: LD_INT 24
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 27
8909: PUSH
8910: LD_INT 28
8912: PUSH
8913: LD_INT 29
8915: PUSH
8916: LD_INT 30
8918: PUSH
8919: LD_INT 31
8921: PUSH
8922: LD_INT 32
8924: PUSH
8925: LD_INT 33
8927: PUSH
8928: LD_INT 34
8930: PUSH
8931: LD_INT 35
8933: PUSH
8934: LD_INT 36
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 103
8983: PUSH
8984: LD_INT 104
8986: PUSH
8987: LD_INT 105
8989: PUSH
8990: LD_INT 106
8992: PUSH
8993: LD_INT 107
8995: PUSH
8996: LD_INT 108
8998: PUSH
8999: LD_INT 109
9001: PUSH
9002: LD_INT 110
9004: PUSH
9005: LD_INT 111
9007: PUSH
9008: LD_INT 112
9010: PUSH
9011: LD_INT 113
9013: PUSH
9014: LD_INT 114
9016: PUSH
9017: LD_INT 115
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// if result then
9041: LD_VAR 0 1
9045: IFFALSE 9334
// begin normal :=  ;
9047: LD_ADDR_VAR 0 3
9051: PUSH
9052: LD_STRING 
9054: ST_TO_ADDR
// hardcore :=  ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: LD_STRING 
9062: ST_TO_ADDR
// for i = 1 to normalCounter do
9063: LD_ADDR_VAR 0 5
9067: PUSH
9068: DOUBLE
9069: LD_INT 1
9071: DEC
9072: ST_TO_ADDR
9073: LD_EXP 24
9077: PUSH
9078: FOR_TO
9079: IFFALSE 9180
// begin tmp := 0 ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_STRING 0
9088: ST_TO_ADDR
// if result [ 1 ] then
9089: LD_VAR 0 1
9093: PUSH
9094: LD_INT 1
9096: ARRAY
9097: IFFALSE 9162
// if result [ 1 ] [ 1 ] = i then
9099: LD_VAR 0 1
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PUSH
9112: LD_VAR 0 5
9116: EQUAL
9117: IFFALSE 9162
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: LD_VAR 0 1
9136: PUSH
9137: LD_INT 1
9139: ARRAY
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 3
9148: PPUSH
9149: CALL_OW 1
9153: ST_TO_ADDR
// tmp := 1 ;
9154: LD_ADDR_VAR 0 2
9158: PUSH
9159: LD_STRING 1
9161: ST_TO_ADDR
// end ; normal := normal & tmp ;
9162: LD_ADDR_VAR 0 3
9166: PUSH
9167: LD_VAR 0 3
9171: PUSH
9172: LD_VAR 0 2
9176: STR
9177: ST_TO_ADDR
// end ;
9178: GO 9078
9180: POP
9181: POP
// for i = 1 to hardcoreCounter do
9182: LD_ADDR_VAR 0 5
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_EXP 25
9196: PUSH
9197: FOR_TO
9198: IFFALSE 9303
// begin tmp := 0 ;
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: LD_STRING 0
9207: ST_TO_ADDR
// if result [ 2 ] then
9208: LD_VAR 0 1
9212: PUSH
9213: LD_INT 2
9215: ARRAY
9216: IFFALSE 9285
// if result [ 2 ] [ 1 ] = 100 + i then
9218: LD_VAR 0 1
9222: PUSH
9223: LD_INT 2
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PUSH
9231: LD_INT 100
9233: PUSH
9234: LD_VAR 0 5
9238: PLUS
9239: EQUAL
9240: IFFALSE 9285
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 2
9254: PPUSH
9255: LD_VAR 0 1
9259: PUSH
9260: LD_INT 2
9262: ARRAY
9263: PPUSH
9264: LD_INT 1
9266: PPUSH
9267: CALL_OW 3
9271: PPUSH
9272: CALL_OW 1
9276: ST_TO_ADDR
// tmp := 1 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_STRING 1
9284: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9285: LD_ADDR_VAR 0 4
9289: PUSH
9290: LD_VAR 0 4
9294: PUSH
9295: LD_VAR 0 2
9299: STR
9300: ST_TO_ADDR
// end ;
9301: GO 9197
9303: POP
9304: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9305: LD_STRING getStreamItemsFromMission("
9307: PUSH
9308: LD_VAR 0 3
9312: STR
9313: PUSH
9314: LD_STRING ","
9316: STR
9317: PUSH
9318: LD_VAR 0 4
9322: STR
9323: PUSH
9324: LD_STRING ")
9326: STR
9327: PPUSH
9328: CALL_OW 559
// end else
9332: GO 9341
// ToLua ( getStreamItemsFromMission("","") ) ;
9334: LD_STRING getStreamItemsFromMission("","")
9336: PPUSH
9337: CALL_OW 559
// end ;
9341: LD_VAR 0 1
9345: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9346: LD_EXP 23
9350: PUSH
9351: LD_EXP 28
9355: AND
9356: IFFALSE 9480
9358: GO 9360
9360: DISABLE
9361: LD_INT 0
9363: PPUSH
9364: PPUSH
// begin enable ;
9365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_INT 22
9373: PUSH
9374: LD_OWVAR 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: LD_INT 34
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 34
9398: PUSH
9399: LD_INT 45
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 34
9408: PUSH
9409: LD_INT 28
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 34
9418: PUSH
9419: LD_INT 47
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: ST_TO_ADDR
// if not tmp then
9442: LD_VAR 0 2
9446: NOT
9447: IFFALSE 9451
// exit ;
9449: GO 9480
// for i in tmp do
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_VAR 0 2
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9478
// begin SetLives ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 234
// end ;
9476: GO 9461
9478: POP
9479: POP
// end ;
9480: PPOPN 2
9482: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9483: LD_EXP 23
9487: PUSH
9488: LD_EXP 29
9492: AND
9493: IFFALSE 9577
9495: GO 9497
9497: DISABLE
9498: LD_INT 0
9500: PPUSH
9501: PPUSH
// begin enable ;
9502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9503: LD_ADDR_VAR 0 2
9507: PUSH
9508: LD_INT 22
9510: PUSH
9511: LD_OWVAR 2
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: ST_TO_ADDR
// if not tmp then
9539: LD_VAR 0 2
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9577
// for i in tmp do
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_VAR 0 2
9557: PUSH
9558: FOR_IN
9559: IFFALSE 9575
// begin SetLives ( i , 0 ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: LD_INT 0
9568: PPUSH
9569: CALL_OW 234
// end ;
9573: GO 9558
9575: POP
9576: POP
// end ;
9577: PPOPN 2
9579: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9580: LD_EXP 23
9584: PUSH
9585: LD_EXP 26
9589: AND
9590: IFFALSE 9683
9592: GO 9594
9594: DISABLE
9595: LD_INT 0
9597: PPUSH
// begin enable ;
9598: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9599: LD_ADDR_VAR 0 1
9603: PUSH
9604: LD_INT 22
9606: PUSH
9607: LD_OWVAR 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 5
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 9
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: PUSH
9664: FOR_IN
9665: IFFALSE 9681
// begin SetClass ( i , 1 ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 336
// end ;
9679: GO 9664
9681: POP
9682: POP
// end ;
9683: PPOPN 1
9685: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9686: LD_EXP 23
9690: PUSH
9691: LD_EXP 27
9695: AND
9696: PUSH
9697: LD_OWVAR 65
9701: PUSH
9702: LD_INT 7
9704: LESS
9705: AND
9706: IFFALSE 9720
9708: GO 9710
9710: DISABLE
// begin enable ;
9711: ENABLE
// game_speed := 7 ;
9712: LD_ADDR_OWVAR 65
9716: PUSH
9717: LD_INT 7
9719: ST_TO_ADDR
// end ;
9720: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9721: LD_EXP 23
9725: PUSH
9726: LD_EXP 30
9730: AND
9731: IFFALSE 9933
9733: GO 9735
9735: DISABLE
9736: LD_INT 0
9738: PPUSH
9739: PPUSH
9740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9741: LD_ADDR_VAR 0 3
9745: PUSH
9746: LD_INT 81
9748: PUSH
9749: LD_OWVAR 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 21
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: ST_TO_ADDR
// if not tmp then
9777: LD_VAR 0 3
9781: NOT
9782: IFFALSE 9786
// exit ;
9784: GO 9933
// if tmp > 5 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 5
9793: GREATER
9794: IFFALSE 9806
// k := 5 else
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_INT 5
9803: ST_TO_ADDR
9804: GO 9816
// k := tmp ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_VAR 0 3
9815: ST_TO_ADDR
// for i := 1 to k do
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: DOUBLE
9822: LD_INT 1
9824: DEC
9825: ST_TO_ADDR
9826: LD_VAR 0 2
9830: PUSH
9831: FOR_TO
9832: IFFALSE 9931
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_VAR 0 1
9843: ARRAY
9844: PPUSH
9845: LD_VAR 0 1
9849: PUSH
9850: LD_INT 4
9852: MOD
9853: PUSH
9854: LD_INT 1
9856: PLUS
9857: PPUSH
9858: CALL_OW 259
9862: PUSH
9863: LD_INT 10
9865: LESS
9866: IFFALSE 9929
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9868: LD_VAR 0 3
9872: PUSH
9873: LD_VAR 0 1
9877: ARRAY
9878: PPUSH
9879: LD_VAR 0 1
9883: PUSH
9884: LD_INT 4
9886: MOD
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 3
9896: PUSH
9897: LD_VAR 0 1
9901: ARRAY
9902: PPUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 4
9910: MOD
9911: PUSH
9912: LD_INT 1
9914: PLUS
9915: PPUSH
9916: CALL_OW 259
9920: PUSH
9921: LD_INT 1
9923: PLUS
9924: PPUSH
9925: CALL_OW 237
9929: GO 9831
9931: POP
9932: POP
// end ;
9933: PPOPN 3
9935: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9936: LD_EXP 23
9940: PUSH
9941: LD_EXP 31
9945: AND
9946: IFFALSE 9966
9948: GO 9950
9950: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9951: LD_INT 4
9953: PPUSH
9954: LD_OWVAR 2
9958: PPUSH
9959: LD_INT 0
9961: PPUSH
9962: CALL_OW 324
9966: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9967: LD_EXP 23
9971: PUSH
9972: LD_EXP 60
9976: AND
9977: IFFALSE 9997
9979: GO 9981
9981: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9982: LD_INT 19
9984: PPUSH
9985: LD_OWVAR 2
9989: PPUSH
9990: LD_INT 0
9992: PPUSH
9993: CALL_OW 324
9997: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9998: LD_EXP 23
10002: PUSH
10003: LD_EXP 32
10007: AND
10008: IFFALSE 10110
10010: GO 10012
10012: DISABLE
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
// begin enable ;
10017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: LD_INT 22
10025: PUSH
10026: LD_OWVAR 2
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 34
10040: PUSH
10041: LD_INT 11
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 34
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: ST_TO_ADDR
// if not tmp then
10072: LD_VAR 0 2
10076: NOT
10077: IFFALSE 10081
// exit ;
10079: GO 10110
// for i in tmp do
10081: LD_ADDR_VAR 0 1
10085: PUSH
10086: LD_VAR 0 2
10090: PUSH
10091: FOR_IN
10092: IFFALSE 10108
// begin SetLives ( i , 0 ) ;
10094: LD_VAR 0 1
10098: PPUSH
10099: LD_INT 0
10101: PPUSH
10102: CALL_OW 234
// end ;
10106: GO 10091
10108: POP
10109: POP
// end ;
10110: PPOPN 2
10112: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10113: LD_EXP 23
10117: PUSH
10118: LD_EXP 33
10122: AND
10123: IFFALSE 10143
10125: GO 10127
10127: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10128: LD_INT 32
10130: PPUSH
10131: LD_OWVAR 2
10135: PPUSH
10136: LD_INT 0
10138: PPUSH
10139: CALL_OW 324
10143: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10144: LD_EXP 23
10148: PUSH
10149: LD_EXP 34
10153: AND
10154: IFFALSE 10335
10156: GO 10158
10158: DISABLE
10159: LD_INT 0
10161: PPUSH
10162: PPUSH
10163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: LD_INT 22
10171: PUSH
10172: LD_OWVAR 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: LD_INT 3
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PPUSH
10195: CALL_OW 69
10199: ST_TO_ADDR
// if not tmp then
10200: LD_VAR 0 2
10204: NOT
10205: IFFALSE 10209
// exit ;
10207: GO 10335
// side := 0 ;
10209: LD_ADDR_VAR 0 3
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// for i := 1 to 8 do
10217: LD_ADDR_VAR 0 1
10221: PUSH
10222: DOUBLE
10223: LD_INT 1
10225: DEC
10226: ST_TO_ADDR
10227: LD_INT 8
10229: PUSH
10230: FOR_TO
10231: IFFALSE 10279
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10233: LD_OWVAR 2
10237: PUSH
10238: LD_VAR 0 1
10242: NONEQUAL
10243: PUSH
10244: LD_OWVAR 2
10248: PPUSH
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 81
10258: PUSH
10259: LD_INT 2
10261: EQUAL
10262: AND
10263: IFFALSE 10277
// begin side := i ;
10265: LD_ADDR_VAR 0 3
10269: PUSH
10270: LD_VAR 0 1
10274: ST_TO_ADDR
// break ;
10275: GO 10279
// end ;
10277: GO 10230
10279: POP
10280: POP
// if not side then
10281: LD_VAR 0 3
10285: NOT
10286: IFFALSE 10290
// exit ;
10288: GO 10335
// for i := 1 to tmp do
10290: LD_ADDR_VAR 0 1
10294: PUSH
10295: DOUBLE
10296: LD_INT 1
10298: DEC
10299: ST_TO_ADDR
10300: LD_VAR 0 2
10304: PUSH
10305: FOR_TO
10306: IFFALSE 10333
// if Prob ( 60 ) then
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 13
10315: IFFALSE 10331
// SetSide ( i , side ) ;
10317: LD_VAR 0 1
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: CALL_OW 235
10331: GO 10305
10333: POP
10334: POP
// end ;
10335: PPOPN 3
10337: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10338: LD_EXP 23
10342: PUSH
10343: LD_EXP 36
10347: AND
10348: IFFALSE 10467
10350: GO 10352
10352: DISABLE
10353: LD_INT 0
10355: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_OWVAR 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 0
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10465
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10413: LD_VAR 0 1
10417: PPUSH
10418: CALL_OW 257
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: IN
10441: IFFALSE 10463
// SetClass ( un , rand ( 1 , 4 ) ) ;
10443: LD_VAR 0 1
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: LD_INT 4
10453: PPUSH
10454: CALL_OW 12
10458: PPUSH
10459: CALL_OW 336
10463: GO 10410
10465: POP
10466: POP
// end ;
10467: PPOPN 1
10469: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10470: LD_EXP 23
10474: PUSH
10475: LD_EXP 35
10479: AND
10480: IFFALSE 10559
10482: GO 10484
10484: DISABLE
10485: LD_INT 0
10487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10488: LD_ADDR_VAR 0 1
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_OWVAR 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 21
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 69
10523: ST_TO_ADDR
// if not tmp then
10524: LD_VAR 0 1
10528: NOT
10529: IFFALSE 10533
// exit ;
10531: GO 10559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 12
10550: ARRAY
10551: PPUSH
10552: LD_INT 100
10554: PPUSH
10555: CALL_OW 234
// end ;
10559: PPOPN 1
10561: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10562: LD_EXP 23
10566: PUSH
10567: LD_EXP 37
10571: AND
10572: IFFALSE 10670
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_OWVAR 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: ST_TO_ADDR
// if not tmp then
10616: LD_VAR 0 1
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10670
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10625: LD_VAR 0 1
10629: PUSH
10630: LD_INT 1
10632: PPUSH
10633: LD_VAR 0 1
10637: PPUSH
10638: CALL_OW 12
10642: ARRAY
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_INT 4
10649: PPUSH
10650: CALL_OW 12
10654: PPUSH
10655: LD_INT 3000
10657: PPUSH
10658: LD_INT 9000
10660: PPUSH
10661: CALL_OW 12
10665: PPUSH
10666: CALL_OW 492
// end ;
10670: PPOPN 1
10672: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10673: LD_EXP 23
10677: PUSH
10678: LD_EXP 38
10682: AND
10683: IFFALSE 10703
10685: GO 10687
10687: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10688: LD_INT 1
10690: PPUSH
10691: LD_OWVAR 2
10695: PPUSH
10696: LD_INT 0
10698: PPUSH
10699: CALL_OW 324
10703: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10704: LD_EXP 23
10708: PUSH
10709: LD_EXP 39
10713: AND
10714: IFFALSE 10797
10716: GO 10718
10718: DISABLE
10719: LD_INT 0
10721: PPUSH
10722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10723: LD_ADDR_VAR 0 2
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_OWVAR 2
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 21
10742: PUSH
10743: LD_INT 3
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not tmp then
10759: LD_VAR 0 2
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10797
// for i in tmp do
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_VAR 0 2
10777: PUSH
10778: FOR_IN
10779: IFFALSE 10795
// SetBLevel ( i , 10 ) ;
10781: LD_VAR 0 1
10785: PPUSH
10786: LD_INT 10
10788: PPUSH
10789: CALL_OW 241
10793: GO 10778
10795: POP
10796: POP
// end ;
10797: PPOPN 2
10799: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10800: LD_EXP 23
10804: PUSH
10805: LD_EXP 40
10809: AND
10810: IFFALSE 10921
10812: GO 10814
10814: DISABLE
10815: LD_INT 0
10817: PPUSH
10818: PPUSH
10819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10820: LD_ADDR_VAR 0 3
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_OWVAR 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 25
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 69
10855: ST_TO_ADDR
// if not tmp then
10856: LD_VAR 0 3
10860: NOT
10861: IFFALSE 10865
// exit ;
10863: GO 10921
// un := tmp [ rand ( 1 , tmp ) ] ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_VAR 0 3
10874: PUSH
10875: LD_INT 1
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// if Crawls ( un ) then
10889: LD_VAR 0 2
10893: PPUSH
10894: CALL_OW 318
10898: IFFALSE 10909
// ComWalk ( un ) ;
10900: LD_VAR 0 2
10904: PPUSH
10905: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10909: LD_VAR 0 2
10913: PPUSH
10914: LD_INT 5
10916: PPUSH
10917: CALL_OW 336
// end ;
10921: PPOPN 3
10923: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10924: LD_EXP 23
10928: PUSH
10929: LD_EXP 41
10933: AND
10934: PUSH
10935: LD_OWVAR 67
10939: PUSH
10940: LD_INT 3
10942: LESS
10943: AND
10944: IFFALSE 10963
10946: GO 10948
10948: DISABLE
// Difficulty := Difficulty + 1 ;
10949: LD_ADDR_OWVAR 67
10953: PUSH
10954: LD_OWVAR 67
10958: PUSH
10959: LD_INT 1
10961: PLUS
10962: ST_TO_ADDR
10963: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10964: LD_EXP 23
10968: PUSH
10969: LD_EXP 42
10973: AND
10974: IFFALSE 11077
10976: GO 10978
10978: DISABLE
10979: LD_INT 0
10981: PPUSH
// begin for i := 1 to 5 do
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: DOUBLE
10988: LD_INT 1
10990: DEC
10991: ST_TO_ADDR
10992: LD_INT 5
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11075
// begin uc_nation := nation_nature ;
10998: LD_ADDR_OWVAR 21
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// uc_side := 0 ;
11006: LD_ADDR_OWVAR 20
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11014: LD_ADDR_OWVAR 29
11018: PUSH
11019: LD_INT 12
11021: PUSH
11022: LD_INT 12
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// hc_agressivity := 20 ;
11029: LD_ADDR_OWVAR 35
11033: PUSH
11034: LD_INT 20
11036: ST_TO_ADDR
// hc_class := class_tiger ;
11037: LD_ADDR_OWVAR 28
11041: PUSH
11042: LD_INT 14
11044: ST_TO_ADDR
// hc_gallery :=  ;
11045: LD_ADDR_OWVAR 33
11049: PUSH
11050: LD_STRING 
11052: ST_TO_ADDR
// hc_name :=  ;
11053: LD_ADDR_OWVAR 26
11057: PUSH
11058: LD_STRING 
11060: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11061: CALL_OW 44
11065: PPUSH
11066: LD_INT 0
11068: PPUSH
11069: CALL_OW 51
// end ;
11073: GO 10995
11075: POP
11076: POP
// end ;
11077: PPOPN 1
11079: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11080: LD_EXP 23
11084: PUSH
11085: LD_EXP 43
11089: AND
11090: IFFALSE 11099
11092: GO 11094
11094: DISABLE
// StreamSibBomb ;
11095: CALL 11100 0 0
11099: END
// export function StreamSibBomb ; var i , x , y ; begin
11100: LD_INT 0
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
// result := false ;
11106: LD_ADDR_VAR 0 1
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// for i := 1 to 16 do
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: DOUBLE
11120: LD_INT 1
11122: DEC
11123: ST_TO_ADDR
11124: LD_INT 16
11126: PUSH
11127: FOR_TO
11128: IFFALSE 11327
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11130: LD_ADDR_VAR 0 3
11134: PUSH
11135: LD_INT 10
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 40
11146: PUSH
11147: LD_INT 50
11149: PUSH
11150: LD_INT 60
11152: PUSH
11153: LD_INT 70
11155: PUSH
11156: LD_INT 80
11158: PUSH
11159: LD_INT 90
11161: PUSH
11162: LD_INT 100
11164: PUSH
11165: LD_INT 110
11167: PUSH
11168: LD_INT 120
11170: PUSH
11171: LD_INT 130
11173: PUSH
11174: LD_INT 140
11176: PUSH
11177: LD_INT 150
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 1
11199: PPUSH
11200: LD_INT 15
11202: PPUSH
11203: CALL_OW 12
11207: ARRAY
11208: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_INT 10
11216: PUSH
11217: LD_INT 20
11219: PUSH
11220: LD_INT 30
11222: PUSH
11223: LD_INT 40
11225: PUSH
11226: LD_INT 50
11228: PUSH
11229: LD_INT 60
11231: PUSH
11232: LD_INT 70
11234: PUSH
11235: LD_INT 80
11237: PUSH
11238: LD_INT 90
11240: PUSH
11241: LD_INT 100
11243: PUSH
11244: LD_INT 110
11246: PUSH
11247: LD_INT 120
11249: PUSH
11250: LD_INT 130
11252: PUSH
11253: LD_INT 140
11255: PUSH
11256: LD_INT 150
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 15
11281: PPUSH
11282: CALL_OW 12
11286: ARRAY
11287: ST_TO_ADDR
// if ValidHex ( x , y ) then
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: CALL_OW 488
11302: IFFALSE 11325
// begin result := [ x , y ] ;
11304: LD_ADDR_VAR 0 1
11308: PUSH
11309: LD_VAR 0 3
11313: PUSH
11314: LD_VAR 0 4
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: ST_TO_ADDR
// break ;
11323: GO 11327
// end ; end ;
11325: GO 11127
11327: POP
11328: POP
// if result then
11329: LD_VAR 0 1
11333: IFFALSE 11393
// begin ToLua ( playSibBomb() ) ;
11335: LD_STRING playSibBomb()
11337: PPUSH
11338: CALL_OW 559
// wait ( 0 0$14 ) ;
11342: LD_INT 490
11344: PPUSH
11345: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11349: LD_VAR 0 1
11353: PUSH
11354: LD_INT 1
11356: ARRAY
11357: PPUSH
11358: LD_VAR 0 1
11362: PUSH
11363: LD_INT 2
11365: ARRAY
11366: PPUSH
11367: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11371: LD_VAR 0 1
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PPUSH
11380: LD_VAR 0 1
11384: PUSH
11385: LD_INT 2
11387: ARRAY
11388: PPUSH
11389: CALL_OW 429
// end ; end ;
11393: LD_VAR 0 1
11397: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11398: LD_EXP 23
11402: PUSH
11403: LD_EXP 45
11407: AND
11408: IFFALSE 11420
11410: GO 11412
11412: DISABLE
// YouLost (  ) ;
11413: LD_STRING 
11415: PPUSH
11416: CALL_OW 104
11420: END
// every 0 0$1 trigger StreamModeActive and sFog do
11421: LD_EXP 23
11425: PUSH
11426: LD_EXP 44
11430: AND
11431: IFFALSE 11445
11433: GO 11435
11435: DISABLE
// FogOff ( your_side ) ;
11436: LD_OWVAR 2
11440: PPUSH
11441: CALL_OW 344
11445: END
// every 0 0$1 trigger StreamModeActive and sSun do
11446: LD_EXP 23
11450: PUSH
11451: LD_EXP 46
11455: AND
11456: IFFALSE 11484
11458: GO 11460
11460: DISABLE
// begin solar_recharge_percent := 0 ;
11461: LD_ADDR_OWVAR 79
11465: PUSH
11466: LD_INT 0
11468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11469: LD_INT 10500
11471: PPUSH
11472: CALL_OW 67
// solar_recharge_percent := 100 ;
11476: LD_ADDR_OWVAR 79
11480: PUSH
11481: LD_INT 100
11483: ST_TO_ADDR
// end ;
11484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11485: LD_EXP 23
11489: PUSH
11490: LD_EXP 47
11494: AND
11495: IFFALSE 11734
11497: GO 11499
11499: DISABLE
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
11504: PPUSH
// begin tmp := [ ] ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: EMPTY
11511: ST_TO_ADDR
// for i := 1 to 6 do
11512: LD_ADDR_VAR 0 1
11516: PUSH
11517: DOUBLE
11518: LD_INT 1
11520: DEC
11521: ST_TO_ADDR
11522: LD_INT 6
11524: PUSH
11525: FOR_TO
11526: IFFALSE 11631
// begin uc_nation := nation_nature ;
11528: LD_ADDR_OWVAR 21
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// uc_side := 0 ;
11536: LD_ADDR_OWVAR 20
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11544: LD_ADDR_OWVAR 29
11548: PUSH
11549: LD_INT 12
11551: PUSH
11552: LD_INT 12
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// hc_agressivity := 20 ;
11559: LD_ADDR_OWVAR 35
11563: PUSH
11564: LD_INT 20
11566: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11567: LD_ADDR_OWVAR 28
11571: PUSH
11572: LD_INT 17
11574: ST_TO_ADDR
// hc_gallery :=  ;
11575: LD_ADDR_OWVAR 33
11579: PUSH
11580: LD_STRING 
11582: ST_TO_ADDR
// hc_name :=  ;
11583: LD_ADDR_OWVAR 26
11587: PUSH
11588: LD_STRING 
11590: ST_TO_ADDR
// un := CreateHuman ;
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: CALL_OW 44
11600: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11601: LD_VAR 0 2
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 51
// tmp := tmp ^ un ;
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: LD_VAR 0 3
11622: PUSH
11623: LD_VAR 0 2
11627: ADD
11628: ST_TO_ADDR
// end ;
11629: GO 11525
11631: POP
11632: POP
// repeat wait ( 0 0$1 ) ;
11633: LD_INT 35
11635: PPUSH
11636: CALL_OW 67
// for un in tmp do
11640: LD_ADDR_VAR 0 2
11644: PUSH
11645: LD_VAR 0 3
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11725
// begin if IsDead ( un ) then
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 301
11662: IFFALSE 11682
// begin tmp := tmp diff un ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_VAR 0 3
11673: PUSH
11674: LD_VAR 0 2
11678: DIFF
11679: ST_TO_ADDR
// continue ;
11680: GO 11650
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 3
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 0
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL_OW 69
11708: PPUSH
11709: LD_VAR 0 2
11713: PPUSH
11714: CALL_OW 74
11718: PPUSH
11719: CALL_OW 115
// end ;
11723: GO 11650
11725: POP
11726: POP
// until not tmp ;
11727: LD_VAR 0 3
11731: NOT
11732: IFFALSE 11633
// end ;
11734: PPOPN 3
11736: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11737: LD_EXP 23
11741: PUSH
11742: LD_EXP 48
11746: AND
11747: IFFALSE 11801
11749: GO 11751
11751: DISABLE
// begin ToLua ( displayTroll(); ) ;
11752: LD_STRING displayTroll();
11754: PPUSH
11755: CALL_OW 559
// wait ( 3 3$00 ) ;
11759: LD_INT 6300
11761: PPUSH
11762: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11766: LD_STRING hideTroll();
11768: PPUSH
11769: CALL_OW 559
// wait ( 1 1$00 ) ;
11773: LD_INT 2100
11775: PPUSH
11776: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11780: LD_STRING displayTroll();
11782: PPUSH
11783: CALL_OW 559
// wait ( 1 1$00 ) ;
11787: LD_INT 2100
11789: PPUSH
11790: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11794: LD_STRING hideTroll();
11796: PPUSH
11797: CALL_OW 559
// end ;
11801: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11802: LD_EXP 23
11806: PUSH
11807: LD_EXP 49
11811: AND
11812: IFFALSE 11875
11814: GO 11816
11816: DISABLE
11817: LD_INT 0
11819: PPUSH
// begin p := 0 ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// repeat game_speed := 1 ;
11828: LD_ADDR_OWVAR 65
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11836: LD_INT 35
11838: PPUSH
11839: CALL_OW 67
// p := p + 1 ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_VAR 0 1
11852: PUSH
11853: LD_INT 1
11855: PLUS
11856: ST_TO_ADDR
// until p >= 60 ;
11857: LD_VAR 0 1
11861: PUSH
11862: LD_INT 60
11864: GREATEREQUAL
11865: IFFALSE 11828
// game_speed := 4 ;
11867: LD_ADDR_OWVAR 65
11871: PUSH
11872: LD_INT 4
11874: ST_TO_ADDR
// end ;
11875: PPOPN 1
11877: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11878: LD_EXP 23
11882: PUSH
11883: LD_EXP 50
11887: AND
11888: IFFALSE 12034
11890: GO 11892
11892: DISABLE
11893: LD_INT 0
11895: PPUSH
11896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 0
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 30
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: ST_TO_ADDR
// if not depot then
11951: LD_VAR 0 1
11955: NOT
11956: IFFALSE 11960
// exit ;
11958: GO 12034
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: PPUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 12
11982: ARRAY
11983: PPUSH
11984: CALL_OW 274
11988: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11989: LD_VAR 0 2
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: LD_INT 0
11999: PPUSH
12000: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12004: LD_VAR 0 2
12008: PPUSH
12009: LD_INT 2
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12019: LD_VAR 0 2
12023: PPUSH
12024: LD_INT 3
12026: PPUSH
12027: LD_INT 0
12029: PPUSH
12030: CALL_OW 277
// end ;
12034: PPOPN 2
12036: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12037: LD_EXP 23
12041: PUSH
12042: LD_EXP 51
12046: AND
12047: IFFALSE 12144
12049: GO 12051
12051: DISABLE
12052: LD_INT 0
12054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 22
12062: PUSH
12063: LD_OWVAR 2
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 23
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: ST_TO_ADDR
// if not tmp then
12109: LD_VAR 0 1
12113: NOT
12114: IFFALSE 12118
// exit ;
12116: GO 12144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12118: LD_VAR 0 1
12122: PUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 12
12135: ARRAY
12136: PPUSH
12137: LD_INT 200
12139: PPUSH
12140: CALL_OW 234
// end ;
12144: PPOPN 1
12146: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12147: LD_EXP 23
12151: PUSH
12152: LD_EXP 52
12156: AND
12157: IFFALSE 12236
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_OWVAR 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// if not tmp then
12201: LD_VAR 0 1
12205: NOT
12206: IFFALSE 12210
// exit ;
12208: GO 12236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12210: LD_VAR 0 1
12214: PUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL_OW 12
12227: ARRAY
12228: PPUSH
12229: LD_INT 60
12231: PPUSH
12232: CALL_OW 234
// end ;
12236: PPOPN 1
12238: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12239: LD_EXP 23
12243: PUSH
12244: LD_EXP 53
12248: AND
12249: IFFALSE 12348
12251: GO 12253
12253: DISABLE
12254: LD_INT 0
12256: PPUSH
12257: PPUSH
// begin enable ;
12258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12259: LD_ADDR_VAR 0 1
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_OWVAR 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 61
12278: PUSH
12279: EMPTY
12280: LIST
12281: PUSH
12282: LD_INT 33
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 69
12301: ST_TO_ADDR
// if not tmp then
12302: LD_VAR 0 1
12306: NOT
12307: IFFALSE 12311
// exit ;
12309: GO 12348
// for i in tmp do
12311: LD_ADDR_VAR 0 2
12315: PUSH
12316: LD_VAR 0 1
12320: PUSH
12321: FOR_IN
12322: IFFALSE 12346
// if IsControledBy ( i ) then
12324: LD_VAR 0 2
12328: PPUSH
12329: CALL_OW 312
12333: IFFALSE 12344
// ComUnlink ( i ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 136
12344: GO 12321
12346: POP
12347: POP
// end ;
12348: PPOPN 2
12350: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12351: LD_EXP 23
12355: PUSH
12356: LD_EXP 54
12360: AND
12361: IFFALSE 12501
12363: GO 12365
12365: DISABLE
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
// begin ToLua ( displayPowell(); ) ;
12370: LD_STRING displayPowell();
12372: PPUSH
12373: CALL_OW 559
// uc_side := 0 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// uc_nation := 2 ;
12385: LD_ADDR_OWVAR 21
12389: PUSH
12390: LD_INT 2
12392: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12393: LD_ADDR_OWVAR 37
12397: PUSH
12398: LD_INT 14
12400: ST_TO_ADDR
// vc_engine := engine_siberite ;
12401: LD_ADDR_OWVAR 39
12405: PUSH
12406: LD_INT 3
12408: ST_TO_ADDR
// vc_control := control_apeman ;
12409: LD_ADDR_OWVAR 38
12413: PUSH
12414: LD_INT 5
12416: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12417: LD_ADDR_OWVAR 40
12421: PUSH
12422: LD_INT 29
12424: ST_TO_ADDR
// un := CreateVehicle ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: CALL_OW 45
12434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12447: LD_INT 35
12449: PPUSH
12450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12454: LD_VAR 0 2
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_OWVAR 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 69
12475: PPUSH
12476: LD_VAR 0 2
12480: PPUSH
12481: CALL_OW 74
12485: PPUSH
12486: CALL_OW 115
// until IsDead ( un ) ;
12490: LD_VAR 0 2
12494: PPUSH
12495: CALL_OW 301
12499: IFFALSE 12447
// end ;
12501: PPOPN 2
12503: END
// every 0 0$1 trigger StreamModeActive and sStu do
12504: LD_EXP 23
12508: PUSH
12509: LD_EXP 62
12513: AND
12514: IFFALSE 12530
12516: GO 12518
12518: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12519: LD_STRING displayStucuk();
12521: PPUSH
12522: CALL_OW 559
// ResetFog ;
12526: CALL_OW 335
// end ;
12530: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12531: LD_EXP 23
12535: PUSH
12536: LD_EXP 55
12540: AND
12541: IFFALSE 12682
12543: GO 12545
12545: DISABLE
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 22
12557: PUSH
12558: LD_OWVAR 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 21
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: ST_TO_ADDR
// if not tmp then
12586: LD_VAR 0 2
12590: NOT
12591: IFFALSE 12595
// exit ;
12593: GO 12682
// un := tmp [ rand ( 1 , tmp ) ] ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_VAR 0 2
12604: PUSH
12605: LD_INT 1
12607: PPUSH
12608: LD_VAR 0 2
12612: PPUSH
12613: CALL_OW 12
12617: ARRAY
12618: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12619: LD_VAR 0 1
12623: PPUSH
12624: LD_INT 0
12626: PPUSH
12627: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_OWVAR 3
12640: PUSH
12641: LD_VAR 0 1
12645: DIFF
12646: PPUSH
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 74
12656: PPUSH
12657: CALL_OW 115
// wait ( 0 0$20 ) ;
12661: LD_INT 700
12663: PPUSH
12664: CALL_OW 67
// SetSide ( un , your_side ) ;
12668: LD_VAR 0 1
12672: PPUSH
12673: LD_OWVAR 2
12677: PPUSH
12678: CALL_OW 235
// end ;
12682: PPOPN 2
12684: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12685: LD_EXP 23
12689: PUSH
12690: LD_EXP 56
12694: AND
12695: IFFALSE 12801
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_OWVAR 2
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 0
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 30
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PPUSH
12752: CALL_OW 69
12756: ST_TO_ADDR
// if not depot then
12757: LD_VAR 0 1
12761: NOT
12762: IFFALSE 12766
// exit ;
12764: GO 12801
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PPUSH
12775: CALL_OW 250
12779: PPUSH
12780: LD_VAR 0 1
12784: PUSH
12785: LD_INT 1
12787: ARRAY
12788: PPUSH
12789: CALL_OW 251
12793: PPUSH
12794: LD_INT 70
12796: PPUSH
12797: CALL_OW 495
// end ;
12801: PPOPN 1
12803: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12804: LD_EXP 23
12808: PUSH
12809: LD_EXP 57
12813: AND
12814: IFFALSE 13025
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12826: LD_ADDR_VAR 0 5
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: LD_OWVAR 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: ST_TO_ADDR
// if not tmp then
12862: LD_VAR 0 5
12866: NOT
12867: IFFALSE 12871
// exit ;
12869: GO 13025
// for i in tmp do
12871: LD_ADDR_VAR 0 1
12875: PUSH
12876: LD_VAR 0 5
12880: PUSH
12881: FOR_IN
12882: IFFALSE 13023
// begin d := rand ( 0 , 5 ) ;
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_INT 0
12891: PPUSH
12892: LD_INT 5
12894: PPUSH
12895: CALL_OW 12
12899: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 250
12914: PPUSH
12915: LD_VAR 0 4
12919: PPUSH
12920: LD_INT 3
12922: PPUSH
12923: LD_INT 12
12925: PPUSH
12926: CALL_OW 12
12930: PPUSH
12931: CALL_OW 272
12935: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 251
12950: PPUSH
12951: LD_VAR 0 4
12955: PPUSH
12956: LD_INT 3
12958: PPUSH
12959: LD_INT 12
12961: PPUSH
12962: CALL_OW 12
12966: PPUSH
12967: CALL_OW 273
12971: ST_TO_ADDR
// if ValidHex ( x , y ) then
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: CALL_OW 488
12986: IFFALSE 13021
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12988: LD_VAR 0 1
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 3
13005: PPUSH
13006: LD_INT 6
13008: PPUSH
13009: CALL_OW 12
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 483
// end ;
13021: GO 12881
13023: POP
13024: POP
// end ;
13025: PPOPN 5
13027: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13028: LD_EXP 23
13032: PUSH
13033: LD_EXP 58
13037: AND
13038: IFFALSE 13132
13040: GO 13042
13042: DISABLE
13043: LD_INT 0
13045: PPUSH
13046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13047: LD_ADDR_VAR 0 2
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_OWVAR 2
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 32
13066: PUSH
13067: LD_INT 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 21
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: ST_TO_ADDR
// if not tmp then
13094: LD_VAR 0 2
13098: NOT
13099: IFFALSE 13103
// exit ;
13101: GO 13132
// for i in tmp do
13103: LD_ADDR_VAR 0 1
13107: PUSH
13108: LD_VAR 0 2
13112: PUSH
13113: FOR_IN
13114: IFFALSE 13130
// SetFuel ( i , 0 ) ;
13116: LD_VAR 0 1
13120: PPUSH
13121: LD_INT 0
13123: PPUSH
13124: CALL_OW 240
13128: GO 13113
13130: POP
13131: POP
// end ;
13132: PPOPN 2
13134: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13135: LD_EXP 23
13139: PUSH
13140: LD_EXP 59
13144: AND
13145: IFFALSE 13211
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_OWVAR 2
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: LD_INT 29
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: ST_TO_ADDR
// if not tmp then
13189: LD_VAR 0 1
13193: NOT
13194: IFFALSE 13198
// exit ;
13196: GO 13211
// DestroyUnit ( tmp [ 1 ] ) ;
13198: LD_VAR 0 1
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PPUSH
13207: CALL_OW 65
// end ;
13211: PPOPN 1
13213: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13214: LD_EXP 23
13218: PUSH
13219: LD_EXP 61
13223: AND
13224: IFFALSE 13353
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
// begin uc_side := 0 ;
13232: LD_ADDR_OWVAR 20
13236: PUSH
13237: LD_INT 0
13239: ST_TO_ADDR
// uc_nation := nation_arabian ;
13240: LD_ADDR_OWVAR 21
13244: PUSH
13245: LD_INT 2
13247: ST_TO_ADDR
// hc_gallery :=  ;
13248: LD_ADDR_OWVAR 33
13252: PUSH
13253: LD_STRING 
13255: ST_TO_ADDR
// hc_name :=  ;
13256: LD_ADDR_OWVAR 26
13260: PUSH
13261: LD_STRING 
13263: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13264: LD_INT 1
13266: PPUSH
13267: LD_INT 11
13269: PPUSH
13270: LD_INT 10
13272: PPUSH
13273: CALL_OW 380
// un := CreateHuman ;
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: CALL_OW 44
13286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13299: LD_INT 35
13301: PPUSH
13302: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13306: LD_VAR 0 1
13310: PPUSH
13311: LD_INT 22
13313: PUSH
13314: LD_OWVAR 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 69
13327: PPUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 74
13337: PPUSH
13338: CALL_OW 115
// until IsDead ( un ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 301
13351: IFFALSE 13299
// end ;
13353: PPOPN 1
13355: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13356: LD_EXP 23
13360: PUSH
13361: LD_EXP 63
13365: AND
13366: IFFALSE 13378
13368: GO 13370
13370: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13371: LD_STRING earthquake(getX(game), 0, 32)
13373: PPUSH
13374: CALL_OW 559
13378: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13379: LD_EXP 23
13383: PUSH
13384: LD_EXP 64
13388: AND
13389: IFFALSE 13480
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin enable ;
13397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13398: LD_ADDR_VAR 0 1
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_OWVAR 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 33
13427: PUSH
13428: LD_INT 3
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: ST_TO_ADDR
// if not tmp then
13445: LD_VAR 0 1
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13454: LD_VAR 0 1
13458: PUSH
13459: LD_INT 1
13461: PPUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 12
13471: ARRAY
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 234
// end ;
13480: PPOPN 1
13482: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13483: LD_EXP 23
13487: PUSH
13488: LD_EXP 65
13492: AND
13493: IFFALSE 13634
13495: GO 13497
13497: DISABLE
13498: LD_INT 0
13500: PPUSH
13501: PPUSH
13502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 22
13510: PUSH
13511: LD_OWVAR 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 25
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: ST_TO_ADDR
// if not tmp then
13539: LD_VAR 0 3
13543: NOT
13544: IFFALSE 13548
// exit ;
13546: GO 13634
// un := tmp [ rand ( 1 , tmp ) ] ;
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 1
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 12
13570: ARRAY
13571: ST_TO_ADDR
// if Crawls ( un ) then
13572: LD_VAR 0 2
13576: PPUSH
13577: CALL_OW 318
13581: IFFALSE 13592
// ComWalk ( un ) ;
13583: LD_VAR 0 2
13587: PPUSH
13588: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13592: LD_VAR 0 2
13596: PPUSH
13597: LD_INT 9
13599: PPUSH
13600: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13604: LD_INT 28
13606: PPUSH
13607: LD_OWVAR 2
13611: PPUSH
13612: LD_INT 2
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13619: LD_INT 29
13621: PPUSH
13622: LD_OWVAR 2
13626: PPUSH
13627: LD_INT 2
13629: PPUSH
13630: CALL_OW 322
// end ;
13634: PPOPN 3
13636: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13637: LD_EXP 23
13641: PUSH
13642: LD_EXP 66
13646: AND
13647: IFFALSE 13758
13649: GO 13651
13651: DISABLE
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
13656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13657: LD_ADDR_VAR 0 3
13661: PUSH
13662: LD_INT 22
13664: PUSH
13665: LD_OWVAR 2
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 25
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: ST_TO_ADDR
// if not tmp then
13693: LD_VAR 0 3
13697: NOT
13698: IFFALSE 13702
// exit ;
13700: GO 13758
// un := tmp [ rand ( 1 , tmp ) ] ;
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_VAR 0 3
13711: PUSH
13712: LD_INT 1
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: CALL_OW 12
13724: ARRAY
13725: ST_TO_ADDR
// if Crawls ( un ) then
13726: LD_VAR 0 2
13730: PPUSH
13731: CALL_OW 318
13735: IFFALSE 13746
// ComWalk ( un ) ;
13737: LD_VAR 0 2
13741: PPUSH
13742: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_INT 8
13753: PPUSH
13754: CALL_OW 336
// end ;
13758: PPOPN 3
13760: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13761: LD_EXP 23
13765: PUSH
13766: LD_EXP 67
13770: AND
13771: IFFALSE 13915
13773: GO 13775
13775: DISABLE
13776: LD_INT 0
13778: PPUSH
13779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_OWVAR 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 21
13799: PUSH
13800: LD_INT 2
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: LD_INT 34
13812: PUSH
13813: LD_INT 12
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 34
13822: PUSH
13823: LD_INT 51
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 34
13832: PUSH
13833: LD_INT 32
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: ST_TO_ADDR
// if not tmp then
13856: LD_VAR 0 2
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13915
// for i in tmp do
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 2
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13913
// if GetCargo ( i , mat_artifact ) = 0 then
13878: LD_VAR 0 1
13882: PPUSH
13883: LD_INT 4
13885: PPUSH
13886: CALL_OW 289
13890: PUSH
13891: LD_INT 0
13893: EQUAL
13894: IFFALSE 13911
// SetCargo ( i , mat_siberit , 100 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 3
13903: PPUSH
13904: LD_INT 100
13906: PPUSH
13907: CALL_OW 290
13911: GO 13875
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13918: LD_EXP 23
13922: PUSH
13923: LD_EXP 68
13927: AND
13928: IFFALSE 14111
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_OWVAR 2
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: ST_TO_ADDR
// if not tmp then
13959: LD_VAR 0 2
13963: NOT
13964: IFFALSE 13968
// exit ;
13966: GO 14111
// for i := 1 to 2 do
13968: LD_ADDR_VAR 0 1
13972: PUSH
13973: DOUBLE
13974: LD_INT 1
13976: DEC
13977: ST_TO_ADDR
13978: LD_INT 2
13980: PUSH
13981: FOR_TO
13982: IFFALSE 14109
// begin uc_side := your_side ;
13984: LD_ADDR_OWVAR 20
13988: PUSH
13989: LD_OWVAR 2
13993: ST_TO_ADDR
// uc_nation := nation_american ;
13994: LD_ADDR_OWVAR 21
13998: PUSH
13999: LD_INT 1
14001: ST_TO_ADDR
// vc_chassis := us_morphling ;
14002: LD_ADDR_OWVAR 37
14006: PUSH
14007: LD_INT 5
14009: ST_TO_ADDR
// vc_engine := engine_siberite ;
14010: LD_ADDR_OWVAR 39
14014: PUSH
14015: LD_INT 3
14017: ST_TO_ADDR
// vc_control := control_computer ;
14018: LD_ADDR_OWVAR 38
14022: PUSH
14023: LD_INT 3
14025: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14026: LD_ADDR_OWVAR 40
14030: PUSH
14031: LD_INT 10
14033: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: PPUSH
14043: CALL_OW 310
14047: NOT
14048: IFFALSE 14095
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14050: CALL_OW 45
14054: PPUSH
14055: LD_VAR 0 2
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: CALL_OW 250
14068: PPUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: CALL_OW 251
14082: PPUSH
14083: LD_INT 12
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 50
14093: GO 14107
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14095: CALL_OW 45
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 51
// end ;
14107: GO 13981
14109: POP
14110: POP
// end ;
14111: PPOPN 2
14113: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14114: LD_EXP 23
14118: PUSH
14119: LD_EXP 69
14123: AND
14124: IFFALSE 14346
14126: GO 14128
14128: DISABLE
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
14133: PPUSH
14134: PPUSH
14135: PPUSH
14136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14137: LD_ADDR_VAR 0 6
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_OWVAR 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 1
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 3
14166: PUSH
14167: LD_INT 23
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: PPUSH
14186: CALL_OW 69
14190: ST_TO_ADDR
// if not tmp then
14191: LD_VAR 0 6
14195: NOT
14196: IFFALSE 14200
// exit ;
14198: GO 14346
// s1 := rand ( 1 , 4 ) ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_INT 4
14210: PPUSH
14211: CALL_OW 12
14215: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14216: LD_ADDR_VAR 0 4
14220: PUSH
14221: LD_VAR 0 6
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PPUSH
14230: LD_VAR 0 2
14234: PPUSH
14235: CALL_OW 259
14239: ST_TO_ADDR
// if s1 = 1 then
14240: LD_VAR 0 2
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14268
// s2 := rand ( 2 , 4 ) else
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_INT 2
14257: PPUSH
14258: LD_INT 4
14260: PPUSH
14261: CALL_OW 12
14265: ST_TO_ADDR
14266: GO 14276
// s2 := 1 ;
14268: LD_ADDR_VAR 0 3
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 6
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL_OW 259
14299: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14300: LD_VAR 0 6
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: LD_VAR 0 2
14313: PPUSH
14314: LD_VAR 0 5
14318: PPUSH
14319: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14323: LD_VAR 0 6
14327: PUSH
14328: LD_INT 1
14330: ARRAY
14331: PPUSH
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_VAR 0 4
14341: PPUSH
14342: CALL_OW 237
// end ;
14346: PPOPN 6
14348: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14349: LD_EXP 23
14353: PUSH
14354: LD_EXP 70
14358: AND
14359: IFFALSE 14438
14361: GO 14363
14363: DISABLE
14364: LD_INT 0
14366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14367: LD_ADDR_VAR 0 1
14371: PUSH
14372: LD_INT 22
14374: PUSH
14375: LD_OWVAR 2
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 30
14386: PUSH
14387: LD_INT 3
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: ST_TO_ADDR
// if not tmp then
14403: LD_VAR 0 1
14407: NOT
14408: IFFALSE 14412
// exit ;
14410: GO 14438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14412: LD_VAR 0 1
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 12
14429: ARRAY
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 234
// end ;
14438: PPOPN 1
14440: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14441: LD_EXP 23
14445: PUSH
14446: LD_EXP 71
14450: AND
14451: IFFALSE 14563
14453: GO 14455
14455: DISABLE
14456: LD_INT 0
14458: PPUSH
14459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_OWVAR 2
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 30
14482: PUSH
14483: LD_INT 27
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 30
14492: PUSH
14493: LD_INT 26
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 28
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: ST_TO_ADDR
// if not tmp then
14525: LD_VAR 0 2
14529: NOT
14530: IFFALSE 14534
// exit ;
14532: GO 14563
// for i in tmp do
14534: LD_ADDR_VAR 0 1
14538: PUSH
14539: LD_VAR 0 2
14543: PUSH
14544: FOR_IN
14545: IFFALSE 14561
// SetLives ( i , 1 ) ;
14547: LD_VAR 0 1
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 234
14559: GO 14544
14561: POP
14562: POP
// end ;
14563: PPOPN 2
14565: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14566: LD_EXP 23
14570: PUSH
14571: LD_EXP 72
14575: AND
14576: IFFALSE 14850
14578: GO 14580
14580: DISABLE
14581: LD_INT 0
14583: PPUSH
14584: PPUSH
14585: PPUSH
// begin i := rand ( 1 , 7 ) ;
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: PPUSH
14594: LD_INT 7
14596: PPUSH
14597: CALL_OW 12
14601: ST_TO_ADDR
// case i of 1 :
14602: LD_VAR 0 1
14606: PUSH
14607: LD_INT 1
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14625
14615: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14616: LD_STRING earthquake(getX(game), 0, 32)
14618: PPUSH
14619: CALL_OW 559
14623: GO 14850
14625: LD_INT 2
14627: DOUBLE
14628: EQUAL
14629: IFTRUE 14633
14631: GO 14647
14633: POP
// begin ToLua ( displayStucuk(); ) ;
14634: LD_STRING displayStucuk();
14636: PPUSH
14637: CALL_OW 559
// ResetFog ;
14641: CALL_OW 335
// end ; 3 :
14645: GO 14850
14647: LD_INT 3
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14759
14655: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_OWVAR 2
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 25
14675: PUSH
14676: LD_INT 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 2
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14850
// un := tmp [ rand ( 1 , tmp ) ] ;
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_VAR 0 2
14710: PUSH
14711: LD_INT 1
14713: PPUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: CALL_OW 12
14723: ARRAY
14724: ST_TO_ADDR
// if Crawls ( un ) then
14725: LD_VAR 0 3
14729: PPUSH
14730: CALL_OW 318
14734: IFFALSE 14745
// ComWalk ( un ) ;
14736: LD_VAR 0 3
14740: PPUSH
14741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_INT 8
14752: PPUSH
14753: CALL_OW 336
// end ; 4 :
14757: GO 14850
14759: LD_INT 4
14761: DOUBLE
14762: EQUAL
14763: IFTRUE 14767
14765: GO 14828
14767: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_INT 22
14775: PUSH
14776: LD_OWVAR 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 30
14787: PUSH
14788: LD_INT 29
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// if not tmp then
14804: LD_VAR 0 2
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14850
// DestroyUnit ( tmp [ 1 ] ) ;
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: CALL_OW 65
// end ; 5 .. 7 :
14826: GO 14850
14828: LD_INT 5
14830: DOUBLE
14831: GREATEREQUAL
14832: IFFALSE 14840
14834: LD_INT 7
14836: DOUBLE
14837: LESSEQUAL
14838: IFTRUE 14842
14840: GO 14849
14842: POP
// StreamSibBomb ; end ;
14843: CALL 11100 0 0
14847: GO 14850
14849: POP
// end ;
14850: PPOPN 3
14852: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14853: LD_EXP 23
14857: PUSH
14858: LD_EXP 73
14862: AND
14863: IFFALSE 15019
14865: GO 14867
14867: DISABLE
14868: LD_INT 0
14870: PPUSH
14871: PPUSH
14872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14873: LD_ADDR_VAR 0 2
14877: PUSH
14878: LD_INT 81
14880: PUSH
14881: LD_OWVAR 2
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 21
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 69
14926: ST_TO_ADDR
// if not tmp then
14927: LD_VAR 0 2
14931: NOT
14932: IFFALSE 14936
// exit ;
14934: GO 15019
// p := 0 ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_INT 0
14943: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14944: LD_INT 35
14946: PPUSH
14947: CALL_OW 67
// p := p + 1 ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_VAR 0 3
14960: PUSH
14961: LD_INT 1
14963: PLUS
14964: ST_TO_ADDR
// for i in tmp do
14965: LD_ADDR_VAR 0 1
14969: PUSH
14970: LD_VAR 0 2
14974: PUSH
14975: FOR_IN
14976: IFFALSE 15007
// if GetLives ( i ) < 1000 then
14978: LD_VAR 0 1
14982: PPUSH
14983: CALL_OW 256
14987: PUSH
14988: LD_INT 1000
14990: LESS
14991: IFFALSE 15005
// SetLives ( i , 1000 ) ;
14993: LD_VAR 0 1
14997: PPUSH
14998: LD_INT 1000
15000: PPUSH
15001: CALL_OW 234
15005: GO 14975
15007: POP
15008: POP
// until p > 20 ;
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 20
15016: GREATER
15017: IFFALSE 14944
// end ;
15019: PPOPN 3
15021: END
// every 0 0$1 trigger StreamModeActive and sTime do
15022: LD_EXP 23
15026: PUSH
15027: LD_EXP 74
15031: AND
15032: IFFALSE 15067
15034: GO 15036
15036: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15037: LD_INT 28
15039: PPUSH
15040: LD_OWVAR 2
15044: PPUSH
15045: LD_INT 2
15047: PPUSH
15048: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15052: LD_INT 30
15054: PPUSH
15055: LD_OWVAR 2
15059: PPUSH
15060: LD_INT 2
15062: PPUSH
15063: CALL_OW 322
// end ;
15067: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15068: LD_EXP 23
15072: PUSH
15073: LD_EXP 75
15077: AND
15078: IFFALSE 15199
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_INT 22
15094: PUSH
15095: LD_OWVAR 2
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 23
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: ST_TO_ADDR
// if not tmp then
15141: LD_VAR 0 2
15145: NOT
15146: IFFALSE 15150
// exit ;
15148: GO 15199
// for i in tmp do
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 2
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15197
// begin if Crawls ( i ) then
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 318
15172: IFFALSE 15183
// ComWalk ( i ) ;
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 138
// SetClass ( i , 2 ) ;
15183: LD_VAR 0 1
15187: PPUSH
15188: LD_INT 2
15190: PPUSH
15191: CALL_OW 336
// end ;
15195: GO 15160
15197: POP
15198: POP
// end ;
15199: PPOPN 2
15201: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15202: LD_EXP 23
15206: PUSH
15207: LD_EXP 76
15211: AND
15212: IFFALSE 15493
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
15221: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15222: LD_OWVAR 2
15226: PPUSH
15227: LD_INT 9
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15240: LD_INT 9
15242: PPUSH
15243: LD_OWVAR 2
15247: PPUSH
15248: CALL_OW 343
// uc_side := 9 ;
15252: LD_ADDR_OWVAR 20
15256: PUSH
15257: LD_INT 9
15259: ST_TO_ADDR
// uc_nation := 2 ;
15260: LD_ADDR_OWVAR 21
15264: PUSH
15265: LD_INT 2
15267: ST_TO_ADDR
// hc_name := Dark Warrior ;
15268: LD_ADDR_OWVAR 26
15272: PUSH
15273: LD_STRING Dark Warrior
15275: ST_TO_ADDR
// hc_gallery :=  ;
15276: LD_ADDR_OWVAR 33
15280: PUSH
15281: LD_STRING 
15283: ST_TO_ADDR
// hc_noskilllimit := true ;
15284: LD_ADDR_OWVAR 76
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15292: LD_ADDR_OWVAR 31
15296: PUSH
15297: LD_INT 30
15299: PUSH
15300: LD_INT 30
15302: PUSH
15303: LD_INT 30
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: ST_TO_ADDR
// un := CreateHuman ;
15315: LD_ADDR_VAR 0 3
15319: PUSH
15320: CALL_OW 44
15324: ST_TO_ADDR
// hc_noskilllimit := false ;
15325: LD_ADDR_OWVAR 76
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 51
// p := 0 ;
15345: LD_ADDR_VAR 0 2
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15353: LD_INT 35
15355: PPUSH
15356: CALL_OW 67
// p := p + 1 ;
15360: LD_ADDR_VAR 0 2
15364: PUSH
15365: LD_VAR 0 2
15369: PUSH
15370: LD_INT 1
15372: PLUS
15373: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15374: LD_VAR 0 3
15378: PPUSH
15379: CALL_OW 256
15383: PUSH
15384: LD_INT 1000
15386: LESS
15387: IFFALSE 15401
// SetLives ( un , 1000 ) ;
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_INT 1000
15396: PPUSH
15397: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 81
15408: PUSH
15409: LD_OWVAR 2
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 91
15420: PUSH
15421: LD_VAR 0 3
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PPUSH
15438: CALL_OW 69
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: CALL_OW 74
15452: PPUSH
15453: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15457: LD_VAR 0 2
15461: PUSH
15462: LD_INT 60
15464: GREATER
15465: PUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: CALL_OW 301
15475: OR
15476: IFFALSE 15353
// if un then
15478: LD_VAR 0 3
15482: IFFALSE 15493
// RemoveUnit ( un ) ;
15484: LD_VAR 0 3
15488: PPUSH
15489: CALL_OW 64
// end ;
15493: PPOPN 3
15495: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15496: LD_INT 0
15498: PPUSH
// case cmd of 301 :
15499: LD_VAR 0 1
15503: PUSH
15504: LD_INT 301
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15544
15512: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15513: LD_VAR 0 6
15517: PPUSH
15518: LD_VAR 0 7
15522: PPUSH
15523: LD_VAR 0 8
15527: PPUSH
15528: LD_VAR 0 4
15532: PPUSH
15533: LD_VAR 0 5
15537: PPUSH
15538: CALL 16745 0 5
15542: GO 15665
15544: LD_INT 302
15546: DOUBLE
15547: EQUAL
15548: IFTRUE 15552
15550: GO 15589
15552: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15553: LD_VAR 0 6
15557: PPUSH
15558: LD_VAR 0 7
15562: PPUSH
15563: LD_VAR 0 8
15567: PPUSH
15568: LD_VAR 0 9
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: LD_VAR 0 5
15582: PPUSH
15583: CALL 16836 0 6
15587: GO 15665
15589: LD_INT 303
15591: DOUBLE
15592: EQUAL
15593: IFTRUE 15597
15595: GO 15634
15597: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15598: LD_VAR 0 6
15602: PPUSH
15603: LD_VAR 0 7
15607: PPUSH
15608: LD_VAR 0 8
15612: PPUSH
15613: LD_VAR 0 9
15617: PPUSH
15618: LD_VAR 0 4
15622: PPUSH
15623: LD_VAR 0 5
15627: PPUSH
15628: CALL 15670 0 6
15632: GO 15665
15634: LD_INT 304
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15664
15642: POP
// hHackTeleport ( unit , x , y ) ; end ;
15643: LD_VAR 0 2
15647: PPUSH
15648: LD_VAR 0 4
15652: PPUSH
15653: LD_VAR 0 5
15657: PPUSH
15658: CALL 17429 0 3
15662: GO 15665
15664: POP
// end ;
15665: LD_VAR 0 12
15669: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15674: LD_VAR 0 1
15678: PUSH
15679: LD_INT 1
15681: LESS
15682: PUSH
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 3
15690: GREATER
15691: OR
15692: PUSH
15693: LD_VAR 0 5
15697: PPUSH
15698: LD_VAR 0 6
15702: PPUSH
15703: CALL_OW 428
15707: OR
15708: IFFALSE 15712
// exit ;
15710: GO 16432
// uc_side := your_side ;
15712: LD_ADDR_OWVAR 20
15716: PUSH
15717: LD_OWVAR 2
15721: ST_TO_ADDR
// uc_nation := nation ;
15722: LD_ADDR_OWVAR 21
15726: PUSH
15727: LD_VAR 0 1
15731: ST_TO_ADDR
// bc_level = 1 ;
15732: LD_ADDR_OWVAR 43
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// case btype of 1 :
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 1
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15764
15753: POP
// bc_type := b_depot ; 2 :
15754: LD_ADDR_OWVAR 42
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
15762: GO 16376
15764: LD_INT 2
15766: DOUBLE
15767: EQUAL
15768: IFTRUE 15772
15770: GO 15783
15772: POP
// bc_type := b_warehouse ; 3 :
15773: LD_ADDR_OWVAR 42
15777: PUSH
15778: LD_INT 1
15780: ST_TO_ADDR
15781: GO 16376
15783: LD_INT 3
15785: DOUBLE
15786: EQUAL
15787: IFTRUE 15791
15789: GO 15802
15791: POP
// bc_type := b_lab ; 4 .. 9 :
15792: LD_ADDR_OWVAR 42
15796: PUSH
15797: LD_INT 6
15799: ST_TO_ADDR
15800: GO 16376
15802: LD_INT 4
15804: DOUBLE
15805: GREATEREQUAL
15806: IFFALSE 15814
15808: LD_INT 9
15810: DOUBLE
15811: LESSEQUAL
15812: IFTRUE 15816
15814: GO 15868
15816: POP
// begin bc_type := b_lab_half ;
15817: LD_ADDR_OWVAR 42
15821: PUSH
15822: LD_INT 7
15824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15825: LD_ADDR_OWVAR 44
15829: PUSH
15830: LD_INT 10
15832: PUSH
15833: LD_INT 11
15835: PUSH
15836: LD_INT 12
15838: PUSH
15839: LD_INT 15
15841: PUSH
15842: LD_INT 14
15844: PUSH
15845: LD_INT 13
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_VAR 0 2
15860: PUSH
15861: LD_INT 3
15863: MINUS
15864: ARRAY
15865: ST_TO_ADDR
// end ; 10 .. 13 :
15866: GO 16376
15868: LD_INT 10
15870: DOUBLE
15871: GREATEREQUAL
15872: IFFALSE 15880
15874: LD_INT 13
15876: DOUBLE
15877: LESSEQUAL
15878: IFTRUE 15882
15880: GO 15959
15882: POP
// begin bc_type := b_lab_full ;
15883: LD_ADDR_OWVAR 42
15887: PUSH
15888: LD_INT 8
15890: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15891: LD_ADDR_OWVAR 44
15895: PUSH
15896: LD_INT 10
15898: PUSH
15899: LD_INT 12
15901: PUSH
15902: LD_INT 14
15904: PUSH
15905: LD_INT 13
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: LD_VAR 0 2
15918: PUSH
15919: LD_INT 9
15921: MINUS
15922: ARRAY
15923: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15924: LD_ADDR_OWVAR 45
15928: PUSH
15929: LD_INT 11
15931: PUSH
15932: LD_INT 15
15934: PUSH
15935: LD_INT 12
15937: PUSH
15938: LD_INT 15
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: LD_VAR 0 2
15951: PUSH
15952: LD_INT 9
15954: MINUS
15955: ARRAY
15956: ST_TO_ADDR
// end ; 14 :
15957: GO 16376
15959: LD_INT 14
15961: DOUBLE
15962: EQUAL
15963: IFTRUE 15967
15965: GO 15978
15967: POP
// bc_type := b_workshop ; 15 :
15968: LD_ADDR_OWVAR 42
15972: PUSH
15973: LD_INT 2
15975: ST_TO_ADDR
15976: GO 16376
15978: LD_INT 15
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15997
15986: POP
// bc_type := b_factory ; 16 :
15987: LD_ADDR_OWVAR 42
15991: PUSH
15992: LD_INT 3
15994: ST_TO_ADDR
15995: GO 16376
15997: LD_INT 16
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16016
16005: POP
// bc_type := b_ext_gun ; 17 :
16006: LD_ADDR_OWVAR 42
16010: PUSH
16011: LD_INT 17
16013: ST_TO_ADDR
16014: GO 16376
16016: LD_INT 17
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16052
16024: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16025: LD_ADDR_OWVAR 42
16029: PUSH
16030: LD_INT 19
16032: PUSH
16033: LD_INT 23
16035: PUSH
16036: LD_INT 19
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: PUSH
16044: LD_VAR 0 1
16048: ARRAY
16049: ST_TO_ADDR
16050: GO 16376
16052: LD_INT 18
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16071
16060: POP
// bc_type := b_ext_radar ; 19 :
16061: LD_ADDR_OWVAR 42
16065: PUSH
16066: LD_INT 20
16068: ST_TO_ADDR
16069: GO 16376
16071: LD_INT 19
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16090
16079: POP
// bc_type := b_ext_radio ; 20 :
16080: LD_ADDR_OWVAR 42
16084: PUSH
16085: LD_INT 22
16087: ST_TO_ADDR
16088: GO 16376
16090: LD_INT 20
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16109
16098: POP
// bc_type := b_ext_siberium ; 21 :
16099: LD_ADDR_OWVAR 42
16103: PUSH
16104: LD_INT 21
16106: ST_TO_ADDR
16107: GO 16376
16109: LD_INT 21
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16128
16117: POP
// bc_type := b_ext_computer ; 22 :
16118: LD_ADDR_OWVAR 42
16122: PUSH
16123: LD_INT 24
16125: ST_TO_ADDR
16126: GO 16376
16128: LD_INT 22
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16147
16136: POP
// bc_type := b_ext_track ; 23 :
16137: LD_ADDR_OWVAR 42
16141: PUSH
16142: LD_INT 16
16144: ST_TO_ADDR
16145: GO 16376
16147: LD_INT 23
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16166
16155: POP
// bc_type := b_ext_laser ; 24 :
16156: LD_ADDR_OWVAR 42
16160: PUSH
16161: LD_INT 25
16163: ST_TO_ADDR
16164: GO 16376
16166: LD_INT 24
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16185
16174: POP
// bc_type := b_control_tower ; 25 :
16175: LD_ADDR_OWVAR 42
16179: PUSH
16180: LD_INT 36
16182: ST_TO_ADDR
16183: GO 16376
16185: LD_INT 25
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16204
16193: POP
// bc_type := b_breastwork ; 26 :
16194: LD_ADDR_OWVAR 42
16198: PUSH
16199: LD_INT 31
16201: ST_TO_ADDR
16202: GO 16376
16204: LD_INT 26
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16223
16212: POP
// bc_type := b_bunker ; 27 :
16213: LD_ADDR_OWVAR 42
16217: PUSH
16218: LD_INT 32
16220: ST_TO_ADDR
16221: GO 16376
16223: LD_INT 27
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16242
16231: POP
// bc_type := b_turret ; 28 :
16232: LD_ADDR_OWVAR 42
16236: PUSH
16237: LD_INT 33
16239: ST_TO_ADDR
16240: GO 16376
16242: LD_INT 28
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16261
16250: POP
// bc_type := b_armoury ; 29 :
16251: LD_ADDR_OWVAR 42
16255: PUSH
16256: LD_INT 4
16258: ST_TO_ADDR
16259: GO 16376
16261: LD_INT 29
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16280
16269: POP
// bc_type := b_barracks ; 30 :
16270: LD_ADDR_OWVAR 42
16274: PUSH
16275: LD_INT 5
16277: ST_TO_ADDR
16278: GO 16376
16280: LD_INT 30
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16299
16288: POP
// bc_type := b_solar_power ; 31 :
16289: LD_ADDR_OWVAR 42
16293: PUSH
16294: LD_INT 27
16296: ST_TO_ADDR
16297: GO 16376
16299: LD_INT 31
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16318
16307: POP
// bc_type := b_oil_power ; 32 :
16308: LD_ADDR_OWVAR 42
16312: PUSH
16313: LD_INT 26
16315: ST_TO_ADDR
16316: GO 16376
16318: LD_INT 32
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16337
16326: POP
// bc_type := b_siberite_power ; 33 :
16327: LD_ADDR_OWVAR 42
16331: PUSH
16332: LD_INT 28
16334: ST_TO_ADDR
16335: GO 16376
16337: LD_INT 33
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16356
16345: POP
// bc_type := b_oil_mine ; 34 :
16346: LD_ADDR_OWVAR 42
16350: PUSH
16351: LD_INT 29
16353: ST_TO_ADDR
16354: GO 16376
16356: LD_INT 34
16358: DOUBLE
16359: EQUAL
16360: IFTRUE 16364
16362: GO 16375
16364: POP
// bc_type := b_siberite_mine ; end ;
16365: LD_ADDR_OWVAR 42
16369: PUSH
16370: LD_INT 30
16372: ST_TO_ADDR
16373: GO 16376
16375: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16376: LD_ADDR_VAR 0 8
16380: PUSH
16381: LD_VAR 0 5
16385: PPUSH
16386: LD_VAR 0 6
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL_OW 47
16400: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16401: LD_OWVAR 42
16405: PUSH
16406: LD_INT 32
16408: PUSH
16409: LD_INT 33
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: IN
16416: IFFALSE 16432
// PlaceWeaponTurret ( b , weapon ) ;
16418: LD_VAR 0 8
16422: PPUSH
16423: LD_VAR 0 4
16427: PPUSH
16428: CALL_OW 431
// end ;
16432: LD_VAR 0 7
16436: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16437: LD_INT 0
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16443: LD_ADDR_VAR 0 4
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: ST_TO_ADDR
// if not tmp then
16497: LD_VAR 0 4
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 16565
// for i in tmp do
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_VAR 0 4
16515: PUSH
16516: FOR_IN
16517: IFFALSE 16563
// for j = 1 to 3 do
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: DOUBLE
16525: LD_INT 1
16527: DEC
16528: ST_TO_ADDR
16529: LD_INT 3
16531: PUSH
16532: FOR_TO
16533: IFFALSE 16559
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16535: LD_VAR 0 2
16539: PPUSH
16540: CALL_OW 274
16544: PPUSH
16545: LD_VAR 0 3
16549: PPUSH
16550: LD_INT 99999
16552: PPUSH
16553: CALL_OW 277
16557: GO 16532
16559: POP
16560: POP
16561: GO 16516
16563: POP
16564: POP
// end ;
16565: LD_VAR 0 1
16569: RET
// export function hHackSetLevel10 ; var i , j ; begin
16570: LD_INT 0
16572: PPUSH
16573: PPUSH
16574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: PUSH
16595: FOR_IN
16596: IFFALSE 16648
// if IsSelected ( i ) then
16598: LD_VAR 0 2
16602: PPUSH
16603: CALL_OW 306
16607: IFFALSE 16646
// begin for j := 1 to 4 do
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: DOUBLE
16615: LD_INT 1
16617: DEC
16618: ST_TO_ADDR
16619: LD_INT 4
16621: PUSH
16622: FOR_TO
16623: IFFALSE 16644
// SetSkill ( i , j , 10 ) ;
16625: LD_VAR 0 2
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 10
16637: PPUSH
16638: CALL_OW 237
16642: GO 16622
16644: POP
16645: POP
// end ;
16646: GO 16595
16648: POP
16649: POP
// end ;
16650: LD_VAR 0 1
16654: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16655: LD_INT 0
16657: PPUSH
16658: PPUSH
16659: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_OWVAR 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16738
// begin for j := 1 to 4 do
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: DOUBLE
16705: LD_INT 1
16707: DEC
16708: ST_TO_ADDR
16709: LD_INT 4
16711: PUSH
16712: FOR_TO
16713: IFFALSE 16734
// SetSkill ( i , j , 10 ) ;
16715: LD_VAR 0 2
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 10
16727: PPUSH
16728: CALL_OW 237
16732: GO 16712
16734: POP
16735: POP
// end ;
16736: GO 16696
16738: POP
16739: POP
// end ;
16740: LD_VAR 0 1
16744: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16745: LD_INT 0
16747: PPUSH
// uc_side := your_side ;
16748: LD_ADDR_OWVAR 20
16752: PUSH
16753: LD_OWVAR 2
16757: ST_TO_ADDR
// uc_nation := nation ;
16758: LD_ADDR_OWVAR 21
16762: PUSH
16763: LD_VAR 0 1
16767: ST_TO_ADDR
// InitHc ;
16768: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16772: LD_INT 0
16774: PPUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16789: LD_VAR 0 4
16793: PPUSH
16794: LD_VAR 0 5
16798: PPUSH
16799: CALL_OW 428
16803: PUSH
16804: LD_INT 0
16806: EQUAL
16807: IFFALSE 16831
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16809: CALL_OW 44
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 5
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 48
// end ;
16831: LD_VAR 0 6
16835: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// uc_side := your_side ;
16840: LD_ADDR_OWVAR 20
16844: PUSH
16845: LD_OWVAR 2
16849: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16850: LD_VAR 0 1
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: IN
16877: IFFALSE 16889
// uc_nation := nation_american else
16879: LD_ADDR_OWVAR 21
16883: PUSH
16884: LD_INT 1
16886: ST_TO_ADDR
16887: GO 16932
// if chassis in [ 11 , 12 , 13 , 14 ] then
16889: LD_VAR 0 1
16893: PUSH
16894: LD_INT 11
16896: PUSH
16897: LD_INT 12
16899: PUSH
16900: LD_INT 13
16902: PUSH
16903: LD_INT 14
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: IN
16912: IFFALSE 16924
// uc_nation := nation_arabian else
16914: LD_ADDR_OWVAR 21
16918: PUSH
16919: LD_INT 2
16921: ST_TO_ADDR
16922: GO 16932
// uc_nation := nation_russian ;
16924: LD_ADDR_OWVAR 21
16928: PUSH
16929: LD_INT 3
16931: ST_TO_ADDR
// vc_chassis := chassis ;
16932: LD_ADDR_OWVAR 37
16936: PUSH
16937: LD_VAR 0 1
16941: ST_TO_ADDR
// vc_engine := engine ;
16942: LD_ADDR_OWVAR 39
16946: PUSH
16947: LD_VAR 0 2
16951: ST_TO_ADDR
// vc_control := control ;
16952: LD_ADDR_OWVAR 38
16956: PUSH
16957: LD_VAR 0 3
16961: ST_TO_ADDR
// vc_weapon := weapon ;
16962: LD_ADDR_OWVAR 40
16966: PUSH
16967: LD_VAR 0 4
16971: ST_TO_ADDR
// un := CreateVehicle ;
16972: LD_ADDR_VAR 0 8
16976: PUSH
16977: CALL_OW 45
16981: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16982: LD_VAR 0 8
16986: PPUSH
16987: LD_INT 0
16989: PPUSH
16990: LD_INT 5
16992: PPUSH
16993: CALL_OW 12
16997: PPUSH
16998: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17002: LD_VAR 0 8
17006: PPUSH
17007: LD_VAR 0 5
17011: PPUSH
17012: LD_VAR 0 6
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: CALL_OW 48
// end ;
17024: LD_VAR 0 7
17028: RET
// export hInvincible ; every 1 do
17029: GO 17031
17031: DISABLE
// hInvincible := [ ] ;
17032: LD_ADDR_EXP 77
17036: PUSH
17037: EMPTY
17038: ST_TO_ADDR
17039: END
// every 10 do var i ;
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
// begin enable ;
17046: ENABLE
// if not hInvincible then
17047: LD_EXP 77
17051: NOT
17052: IFFALSE 17056
// exit ;
17054: GO 17100
// for i in hInvincible do
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: LD_EXP 77
17065: PUSH
17066: FOR_IN
17067: IFFALSE 17098
// if GetLives ( i ) < 1000 then
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 256
17078: PUSH
17079: LD_INT 1000
17081: LESS
17082: IFFALSE 17096
// SetLives ( i , 1000 ) ;
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
17096: GO 17066
17098: POP
17099: POP
// end ;
17100: PPOPN 1
17102: END
// export function hHackInvincible ; var i ; begin
17103: LD_INT 0
17105: PPUSH
17106: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17107: LD_ADDR_VAR 0 2
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: FOR_IN
17146: IFFALSE 17207
// if IsSelected ( i ) then
17148: LD_VAR 0 2
17152: PPUSH
17153: CALL_OW 306
17157: IFFALSE 17205
// begin if i in hInvincible then
17159: LD_VAR 0 2
17163: PUSH
17164: LD_EXP 77
17168: IN
17169: IFFALSE 17189
// hInvincible := hInvincible diff i else
17171: LD_ADDR_EXP 77
17175: PUSH
17176: LD_EXP 77
17180: PUSH
17181: LD_VAR 0 2
17185: DIFF
17186: ST_TO_ADDR
17187: GO 17205
// hInvincible := hInvincible union i ;
17189: LD_ADDR_EXP 77
17193: PUSH
17194: LD_EXP 77
17198: PUSH
17199: LD_VAR 0 2
17203: UNION
17204: ST_TO_ADDR
// end ;
17205: GO 17145
17207: POP
17208: POP
// end ;
17209: LD_VAR 0 1
17213: RET
// export function hHackInvisible ; var i , j ; begin
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_INT 21
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PPUSH
17234: CALL_OW 69
17238: PUSH
17239: FOR_IN
17240: IFFALSE 17264
// if IsSelected ( i ) then
17242: LD_VAR 0 2
17246: PPUSH
17247: CALL_OW 306
17251: IFFALSE 17262
// ComForceInvisible ( i ) ;
17253: LD_VAR 0 2
17257: PPUSH
17258: CALL_OW 496
17262: GO 17239
17264: POP
17265: POP
// end ;
17266: LD_VAR 0 1
17270: RET
// export function hHackChangeYourSide ; begin
17271: LD_INT 0
17273: PPUSH
// if your_side = 8 then
17274: LD_OWVAR 2
17278: PUSH
17279: LD_INT 8
17281: EQUAL
17282: IFFALSE 17294
// your_side := 0 else
17284: LD_ADDR_OWVAR 2
17288: PUSH
17289: LD_INT 0
17291: ST_TO_ADDR
17292: GO 17308
// your_side := your_side + 1 ;
17294: LD_ADDR_OWVAR 2
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: LD_INT 1
17306: PLUS
17307: ST_TO_ADDR
// end ;
17308: LD_VAR 0 1
17312: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17313: LD_INT 0
17315: PPUSH
17316: PPUSH
17317: PPUSH
// for i in all_units do
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_OWVAR 3
17327: PUSH
17328: FOR_IN
17329: IFFALSE 17407
// if IsSelected ( i ) then
17331: LD_VAR 0 2
17335: PPUSH
17336: CALL_OW 306
17340: IFFALSE 17405
// begin j := GetSide ( i ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_VAR 0 2
17351: PPUSH
17352: CALL_OW 255
17356: ST_TO_ADDR
// if j = 8 then
17357: LD_VAR 0 3
17361: PUSH
17362: LD_INT 8
17364: EQUAL
17365: IFFALSE 17377
// j := 0 else
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
17375: GO 17391
// j := j + 1 ;
17377: LD_ADDR_VAR 0 3
17381: PUSH
17382: LD_VAR 0 3
17386: PUSH
17387: LD_INT 1
17389: PLUS
17390: ST_TO_ADDR
// SetSide ( i , j ) ;
17391: LD_VAR 0 2
17395: PPUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: CALL_OW 235
// end ;
17405: GO 17328
17407: POP
17408: POP
// end ;
17409: LD_VAR 0 1
17413: RET
// export function hHackFog ; begin
17414: LD_INT 0
17416: PPUSH
// FogOff ( true ) ;
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 344
// end ;
17424: LD_VAR 0 1
17428: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17429: LD_INT 0
17431: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 483
// CenterOnXY ( x , y ) ;
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_VAR 0 3
17466: PPUSH
17467: CALL_OW 84
// end ; end_of_file
17471: LD_VAR 0 4
17475: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17476: LD_VAR 0 1
17480: PUSH
17481: LD_INT 200
17483: DOUBLE
17484: GREATEREQUAL
17485: IFFALSE 17493
17487: LD_INT 299
17489: DOUBLE
17490: LESSEQUAL
17491: IFTRUE 17495
17493: GO 17527
17495: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17496: LD_VAR 0 1
17500: PPUSH
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_VAR 0 5
17520: PPUSH
17521: CALL 17771 0 5
17525: GO 17604
17527: LD_INT 300
17529: DOUBLE
17530: GREATEREQUAL
17531: IFFALSE 17539
17533: LD_INT 399
17535: DOUBLE
17536: LESSEQUAL
17537: IFTRUE 17541
17539: GO 17603
17541: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17542: LD_VAR 0 1
17546: PPUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_VAR 0 5
17566: PPUSH
17567: LD_VAR 0 6
17571: PPUSH
17572: LD_VAR 0 7
17576: PPUSH
17577: LD_VAR 0 8
17581: PPUSH
17582: LD_VAR 0 9
17586: PPUSH
17587: LD_VAR 0 10
17591: PPUSH
17592: LD_VAR 0 11
17596: PPUSH
17597: CALL 15496 0 11
17601: GO 17604
17603: POP
// end ;
17604: PPOPN 11
17606: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17607: LD_VAR 0 1
17611: PPUSH
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: LD_VAR 0 4
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: CALL 17753 0 5
// end ; end_of_file
17636: PPOPN 5
17638: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 264
17654: PUSH
17655: LD_EXP 94
17659: EQUAL
17660: IFFALSE 17732
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17662: LD_INT 68
17664: PPUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 255
17674: PPUSH
17675: CALL_OW 321
17679: PUSH
17680: LD_INT 2
17682: EQUAL
17683: IFFALSE 17695
// eff := 70 else
17685: LD_ADDR_VAR 0 4
17689: PUSH
17690: LD_INT 70
17692: ST_TO_ADDR
17693: GO 17703
// eff := 30 ;
17695: LD_ADDR_VAR 0 4
17699: PUSH
17700: LD_INT 30
17702: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 250
17712: PPUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: CALL_OW 251
17722: PPUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: CALL_OW 495
// end ; end ;
17732: LD_VAR 0 2
17736: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17737: LD_INT 0
17739: PPUSH
// end ;
17740: LD_VAR 0 4
17744: RET
// export function SOS_Command ( cmd ) ; begin
17745: LD_INT 0
17747: PPUSH
// end ;
17748: LD_VAR 0 2
17752: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17753: LD_INT 0
17755: PPUSH
// if cmd = 121 then
17756: LD_VAR 0 1
17760: PUSH
17761: LD_INT 121
17763: EQUAL
17764: IFFALSE 17766
// end ;
17766: LD_VAR 0 6
17770: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17771: LD_INT 0
17773: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 250
17781: EQUAL
17782: PUSH
17783: LD_VAR 0 2
17787: PPUSH
17788: CALL_OW 264
17792: PUSH
17793: LD_EXP 97
17797: EQUAL
17798: AND
17799: IFFALSE 17820
// MinerPlaceMine ( unit , x , y ) ;
17801: LD_VAR 0 2
17805: PPUSH
17806: LD_VAR 0 4
17810: PPUSH
17811: LD_VAR 0 5
17815: PPUSH
17816: CALL 20169 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 251
17827: EQUAL
17828: PUSH
17829: LD_VAR 0 2
17833: PPUSH
17834: CALL_OW 264
17838: PUSH
17839: LD_EXP 97
17843: EQUAL
17844: AND
17845: IFFALSE 17866
// MinerDetonateMine ( unit , x , y ) ;
17847: LD_VAR 0 2
17851: PPUSH
17852: LD_VAR 0 4
17856: PPUSH
17857: LD_VAR 0 5
17861: PPUSH
17862: CALL 20446 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 252
17873: EQUAL
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: CALL_OW 264
17884: PUSH
17885: LD_EXP 97
17889: EQUAL
17890: AND
17891: IFFALSE 17912
// MinerCreateMinefield ( unit , x , y ) ;
17893: LD_VAR 0 2
17897: PPUSH
17898: LD_VAR 0 4
17902: PPUSH
17903: LD_VAR 0 5
17907: PPUSH
17908: CALL 20863 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17912: LD_VAR 0 1
17916: PUSH
17917: LD_INT 253
17919: EQUAL
17920: PUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: CALL_OW 257
17930: PUSH
17931: LD_INT 5
17933: EQUAL
17934: AND
17935: IFFALSE 17956
// ComBinocular ( unit , x , y ) ;
17937: LD_VAR 0 2
17941: PPUSH
17942: LD_VAR 0 4
17946: PPUSH
17947: LD_VAR 0 5
17951: PPUSH
17952: CALL 21234 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17956: LD_VAR 0 1
17960: PUSH
17961: LD_INT 254
17963: EQUAL
17964: PUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: CALL_OW 264
17974: PUSH
17975: LD_EXP 92
17979: EQUAL
17980: AND
17981: PUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: CALL_OW 263
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: AND
17996: IFFALSE 18012
// HackDestroyVehicle ( unit , selectedUnit ) ;
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL 19529 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 255
18019: EQUAL
18020: PUSH
18021: LD_VAR 0 2
18025: PPUSH
18026: CALL_OW 264
18030: PUSH
18031: LD_INT 14
18033: PUSH
18034: LD_INT 53
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: IN
18041: AND
18042: PUSH
18043: LD_VAR 0 4
18047: PPUSH
18048: LD_VAR 0 5
18052: PPUSH
18053: CALL_OW 488
18057: AND
18058: IFFALSE 18082
// CutTreeXYR ( unit , x , y , 12 ) ;
18060: LD_VAR 0 2
18064: PPUSH
18065: LD_VAR 0 4
18069: PPUSH
18070: LD_VAR 0 5
18074: PPUSH
18075: LD_INT 12
18077: PPUSH
18078: CALL 18095 0 4
// end ;
18082: LD_VAR 0 6
18086: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18087: LD_INT 0
18089: PPUSH
// end ;
18090: LD_VAR 0 4
18094: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18106: LD_VAR 0 1
18110: NOT
18111: PUSH
18112: LD_VAR 0 2
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: CALL_OW 488
18126: NOT
18127: OR
18128: PUSH
18129: LD_VAR 0 4
18133: NOT
18134: OR
18135: IFFALSE 18139
// exit ;
18137: GO 18479
// list := [ ] ;
18139: LD_ADDR_VAR 0 13
18143: PUSH
18144: EMPTY
18145: ST_TO_ADDR
// if x - r < 0 then
18146: LD_VAR 0 2
18150: PUSH
18151: LD_VAR 0 4
18155: MINUS
18156: PUSH
18157: LD_INT 0
18159: LESS
18160: IFFALSE 18172
// min_x := 0 else
18162: LD_ADDR_VAR 0 7
18166: PUSH
18167: LD_INT 0
18169: ST_TO_ADDR
18170: GO 18188
// min_x := x - r ;
18172: LD_ADDR_VAR 0 7
18176: PUSH
18177: LD_VAR 0 2
18181: PUSH
18182: LD_VAR 0 4
18186: MINUS
18187: ST_TO_ADDR
// if y - r < 0 then
18188: LD_VAR 0 3
18192: PUSH
18193: LD_VAR 0 4
18197: MINUS
18198: PUSH
18199: LD_INT 0
18201: LESS
18202: IFFALSE 18214
// min_y := 0 else
18204: LD_ADDR_VAR 0 8
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
18212: GO 18230
// min_y := y - r ;
18214: LD_ADDR_VAR 0 8
18218: PUSH
18219: LD_VAR 0 3
18223: PUSH
18224: LD_VAR 0 4
18228: MINUS
18229: ST_TO_ADDR
// max_x := x + r ;
18230: LD_ADDR_VAR 0 9
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: LD_VAR 0 4
18244: PLUS
18245: ST_TO_ADDR
// max_y := y + r ;
18246: LD_ADDR_VAR 0 10
18250: PUSH
18251: LD_VAR 0 3
18255: PUSH
18256: LD_VAR 0 4
18260: PLUS
18261: ST_TO_ADDR
// for _x = min_x to max_x do
18262: LD_ADDR_VAR 0 11
18266: PUSH
18267: DOUBLE
18268: LD_VAR 0 7
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 9
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18397
// for _y = min_y to max_y do
18282: LD_ADDR_VAR 0 12
18286: PUSH
18287: DOUBLE
18288: LD_VAR 0 8
18292: DEC
18293: ST_TO_ADDR
18294: LD_VAR 0 10
18298: PUSH
18299: FOR_TO
18300: IFFALSE 18393
// begin if not ValidHex ( _x , _y ) then
18302: LD_VAR 0 11
18306: PPUSH
18307: LD_VAR 0 12
18311: PPUSH
18312: CALL_OW 488
18316: NOT
18317: IFFALSE 18321
// continue ;
18319: GO 18299
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18321: LD_VAR 0 11
18325: PPUSH
18326: LD_VAR 0 12
18330: PPUSH
18331: CALL_OW 351
18335: PUSH
18336: LD_VAR 0 11
18340: PPUSH
18341: LD_VAR 0 12
18345: PPUSH
18346: CALL_OW 554
18350: AND
18351: IFFALSE 18391
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18353: LD_ADDR_VAR 0 13
18357: PUSH
18358: LD_VAR 0 13
18362: PPUSH
18363: LD_VAR 0 13
18367: PUSH
18368: LD_INT 1
18370: PLUS
18371: PPUSH
18372: LD_VAR 0 11
18376: PUSH
18377: LD_VAR 0 12
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 2
18390: ST_TO_ADDR
// end ;
18391: GO 18299
18393: POP
18394: POP
18395: GO 18279
18397: POP
18398: POP
// if not list then
18399: LD_VAR 0 13
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18479
// for i in list do
18408: LD_ADDR_VAR 0 6
18412: PUSH
18413: LD_VAR 0 13
18417: PUSH
18418: FOR_IN
18419: IFFALSE 18477
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18421: LD_VAR 0 1
18425: PPUSH
18426: LD_STRING M
18428: PUSH
18429: LD_VAR 0 6
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PUSH
18438: LD_VAR 0 6
18442: PUSH
18443: LD_INT 2
18445: ARRAY
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: PPUSH
18471: CALL_OW 447
18475: GO 18418
18477: POP
18478: POP
// end ;
18479: LD_VAR 0 5
18483: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18484: LD_EXP 80
18488: NOT
18489: IFFALSE 18539
18491: GO 18493
18493: DISABLE
// begin initHack := true ;
18494: LD_ADDR_EXP 80
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// hackTanks := [ ] ;
18502: LD_ADDR_EXP 81
18506: PUSH
18507: EMPTY
18508: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18509: LD_ADDR_EXP 82
18513: PUSH
18514: EMPTY
18515: ST_TO_ADDR
// hackLimit := 3 ;
18516: LD_ADDR_EXP 83
18520: PUSH
18521: LD_INT 3
18523: ST_TO_ADDR
// hackDist := 12 ;
18524: LD_ADDR_EXP 84
18528: PUSH
18529: LD_INT 12
18531: ST_TO_ADDR
// hackCounter := [ ] ;
18532: LD_ADDR_EXP 85
18536: PUSH
18537: EMPTY
18538: ST_TO_ADDR
// end ;
18539: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18540: LD_EXP 80
18544: PUSH
18545: LD_INT 34
18547: PUSH
18548: LD_EXP 92
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: AND
18562: IFFALSE 18817
18564: GO 18566
18566: DISABLE
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
// begin enable ;
18571: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_INT 34
18579: PUSH
18580: LD_EXP 92
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PPUSH
18589: CALL_OW 69
18593: PUSH
18594: FOR_IN
18595: IFFALSE 18815
// begin if not i in hackTanks then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_EXP 81
18606: IN
18607: NOT
18608: IFFALSE 18691
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18610: LD_ADDR_EXP 81
18614: PUSH
18615: LD_EXP 81
18619: PPUSH
18620: LD_EXP 81
18624: PUSH
18625: LD_INT 1
18627: PLUS
18628: PPUSH
18629: LD_VAR 0 1
18633: PPUSH
18634: CALL_OW 1
18638: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18639: LD_ADDR_EXP 82
18643: PUSH
18644: LD_EXP 82
18648: PPUSH
18649: LD_EXP 82
18653: PUSH
18654: LD_INT 1
18656: PLUS
18657: PPUSH
18658: EMPTY
18659: PPUSH
18660: CALL_OW 1
18664: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18665: LD_ADDR_EXP 85
18669: PUSH
18670: LD_EXP 85
18674: PPUSH
18675: LD_EXP 85
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: PPUSH
18684: EMPTY
18685: PPUSH
18686: CALL_OW 1
18690: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18691: LD_VAR 0 1
18695: PPUSH
18696: CALL_OW 302
18700: NOT
18701: IFFALSE 18714
// begin HackUnlinkAll ( i ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL 18820 0 1
// continue ;
18712: GO 18594
// end ; HackCheckCapturedStatus ( i ) ;
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL 19263 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 81
18730: PUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 255
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 33
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 91
18757: PUSH
18758: LD_VAR 0 1
18762: PUSH
18763: LD_EXP 84
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 50
18775: PUSH
18776: EMPTY
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 2
18794: NOT
18795: IFFALSE 18799
// continue ;
18797: GO 18594
// HackLink ( i , tmp ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_VAR 0 2
18808: PPUSH
18809: CALL 18956 0 2
// end ;
18813: GO 18594
18815: POP
18816: POP
// end ;
18817: PPOPN 2
18819: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
18824: PPUSH
// if not hack in hackTanks then
18825: LD_VAR 0 1
18829: PUSH
18830: LD_EXP 81
18834: IN
18835: NOT
18836: IFFALSE 18840
// exit ;
18838: GO 18951
// index := GetElementIndex ( hackTanks , hack ) ;
18840: LD_ADDR_VAR 0 4
18844: PUSH
18845: LD_EXP 81
18849: PPUSH
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL 26593 0 2
18859: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18860: LD_EXP 82
18864: PUSH
18865: LD_VAR 0 4
18869: ARRAY
18870: IFFALSE 18951
// begin for i in hackTanksCaptured [ index ] do
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_EXP 82
18881: PUSH
18882: LD_VAR 0 4
18886: ARRAY
18887: PUSH
18888: FOR_IN
18889: IFFALSE 18915
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 1
18898: ARRAY
18899: PPUSH
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 2
18907: ARRAY
18908: PPUSH
18909: CALL_OW 235
18913: GO 18888
18915: POP
18916: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18917: LD_ADDR_EXP 82
18921: PUSH
18922: LD_EXP 82
18926: PPUSH
18927: LD_VAR 0 4
18931: PPUSH
18932: EMPTY
18933: PPUSH
18934: CALL_OW 1
18938: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 505
// end ; end ;
18951: LD_VAR 0 2
18955: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
// if not hack in hackTanks or not vehicles then
18961: LD_VAR 0 1
18965: PUSH
18966: LD_EXP 81
18970: IN
18971: NOT
18972: PUSH
18973: LD_VAR 0 2
18977: NOT
18978: OR
18979: IFFALSE 18983
// exit ;
18981: GO 19258
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18983: LD_ADDR_VAR 0 2
18987: PUSH
18988: LD_VAR 0 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL 27243 0 4
19008: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19009: LD_ADDR_VAR 0 5
19013: PUSH
19014: LD_EXP 81
19018: PPUSH
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL 26593 0 2
19028: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19029: LD_EXP 82
19033: PUSH
19034: LD_VAR 0 5
19038: ARRAY
19039: PUSH
19040: LD_EXP 83
19044: LESS
19045: IFFALSE 19234
// begin for i := 1 to vehicles do
19047: LD_ADDR_VAR 0 4
19051: PUSH
19052: DOUBLE
19053: LD_INT 1
19055: DEC
19056: ST_TO_ADDR
19057: LD_VAR 0 2
19061: PUSH
19062: FOR_TO
19063: IFFALSE 19232
// begin if hackTanksCaptured [ index ] = hackLimit then
19065: LD_EXP 82
19069: PUSH
19070: LD_VAR 0 5
19074: ARRAY
19075: PUSH
19076: LD_EXP 83
19080: EQUAL
19081: IFFALSE 19085
// break ;
19083: GO 19232
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19085: LD_ADDR_EXP 85
19089: PUSH
19090: LD_EXP 85
19094: PPUSH
19095: LD_VAR 0 5
19099: PPUSH
19100: LD_EXP 85
19104: PUSH
19105: LD_VAR 0 5
19109: ARRAY
19110: PUSH
19111: LD_INT 1
19113: PLUS
19114: PPUSH
19115: CALL_OW 1
19119: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19120: LD_ADDR_EXP 82
19124: PUSH
19125: LD_EXP 82
19129: PPUSH
19130: LD_VAR 0 5
19134: PUSH
19135: LD_EXP 82
19139: PUSH
19140: LD_VAR 0 5
19144: ARRAY
19145: PUSH
19146: LD_INT 1
19148: PLUS
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PPUSH
19154: LD_VAR 0 2
19158: PUSH
19159: LD_VAR 0 4
19163: ARRAY
19164: PUSH
19165: LD_VAR 0 2
19169: PUSH
19170: LD_VAR 0 4
19174: ARRAY
19175: PPUSH
19176: CALL_OW 255
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL 26808 0 3
19189: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19190: LD_VAR 0 2
19194: PUSH
19195: LD_VAR 0 4
19199: ARRAY
19200: PPUSH
19201: LD_VAR 0 1
19205: PPUSH
19206: CALL_OW 255
19210: PPUSH
19211: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19215: LD_VAR 0 2
19219: PUSH
19220: LD_VAR 0 4
19224: ARRAY
19225: PPUSH
19226: CALL_OW 141
// end ;
19230: GO 19062
19232: POP
19233: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_EXP 82
19243: PUSH
19244: LD_VAR 0 5
19248: ARRAY
19249: PUSH
19250: LD_INT 0
19252: PLUS
19253: PPUSH
19254: CALL_OW 505
// end ;
19258: LD_VAR 0 3
19262: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19263: LD_INT 0
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
// if not hack in hackTanks then
19269: LD_VAR 0 1
19273: PUSH
19274: LD_EXP 81
19278: IN
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19524
// index := GetElementIndex ( hackTanks , hack ) ;
19284: LD_ADDR_VAR 0 4
19288: PUSH
19289: LD_EXP 81
19293: PPUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL 26593 0 2
19303: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19304: LD_ADDR_VAR 0 3
19308: PUSH
19309: DOUBLE
19310: LD_EXP 82
19314: PUSH
19315: LD_VAR 0 4
19319: ARRAY
19320: INC
19321: ST_TO_ADDR
19322: LD_INT 1
19324: PUSH
19325: FOR_DOWNTO
19326: IFFALSE 19498
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19328: LD_ADDR_VAR 0 5
19332: PUSH
19333: LD_EXP 82
19337: PUSH
19338: LD_VAR 0 4
19342: ARRAY
19343: PUSH
19344: LD_VAR 0 3
19348: ARRAY
19349: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19350: LD_VAR 0 5
19354: PUSH
19355: LD_INT 1
19357: ARRAY
19358: PPUSH
19359: CALL_OW 302
19363: NOT
19364: PUSH
19365: LD_VAR 0 5
19369: PUSH
19370: LD_INT 1
19372: ARRAY
19373: PPUSH
19374: CALL_OW 255
19378: PUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 255
19388: NONEQUAL
19389: OR
19390: IFFALSE 19496
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19392: LD_VAR 0 5
19396: PUSH
19397: LD_INT 1
19399: ARRAY
19400: PPUSH
19401: CALL_OW 305
19405: PUSH
19406: LD_VAR 0 5
19410: PUSH
19411: LD_INT 1
19413: ARRAY
19414: PPUSH
19415: CALL_OW 255
19419: PUSH
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 255
19429: EQUAL
19430: AND
19431: IFFALSE 19455
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19433: LD_VAR 0 5
19437: PUSH
19438: LD_INT 1
19440: ARRAY
19441: PPUSH
19442: LD_VAR 0 5
19446: PUSH
19447: LD_INT 2
19449: ARRAY
19450: PPUSH
19451: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19455: LD_ADDR_EXP 82
19459: PUSH
19460: LD_EXP 82
19464: PPUSH
19465: LD_VAR 0 4
19469: PPUSH
19470: LD_EXP 82
19474: PUSH
19475: LD_VAR 0 4
19479: ARRAY
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 3
19490: PPUSH
19491: CALL_OW 1
19495: ST_TO_ADDR
// end ; end ;
19496: GO 19325
19498: POP
19499: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_EXP 82
19509: PUSH
19510: LD_VAR 0 4
19514: ARRAY
19515: PUSH
19516: LD_INT 0
19518: PLUS
19519: PPUSH
19520: CALL_OW 505
// end ;
19524: LD_VAR 0 2
19528: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
// if not hack in hackTanks then
19535: LD_VAR 0 1
19539: PUSH
19540: LD_EXP 81
19544: IN
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 19635
// index := GetElementIndex ( hackTanks , hack ) ;
19550: LD_ADDR_VAR 0 5
19554: PUSH
19555: LD_EXP 81
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL 26593 0 2
19569: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_EXP 82
19584: PUSH
19585: LD_VAR 0 5
19589: ARRAY
19590: PUSH
19591: FOR_TO
19592: IFFALSE 19633
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19594: LD_EXP 82
19598: PUSH
19599: LD_VAR 0 5
19603: ARRAY
19604: PUSH
19605: LD_VAR 0 4
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: PUSH
19615: LD_VAR 0 2
19619: EQUAL
19620: IFFALSE 19631
// KillUnit ( vehicle ) ;
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 66
19631: GO 19591
19633: POP
19634: POP
// end ;
19635: LD_VAR 0 3
19639: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19640: LD_EXP 86
19644: NOT
19645: IFFALSE 19680
19647: GO 19649
19649: DISABLE
// begin initMiner := true ;
19650: LD_ADDR_EXP 86
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// minersList := [ ] ;
19658: LD_ADDR_EXP 87
19662: PUSH
19663: EMPTY
19664: ST_TO_ADDR
// minerMinesList := [ ] ;
19665: LD_ADDR_EXP 88
19669: PUSH
19670: EMPTY
19671: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19672: LD_ADDR_EXP 89
19676: PUSH
19677: LD_INT 5
19679: ST_TO_ADDR
// end ;
19680: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19681: LD_EXP 86
19685: PUSH
19686: LD_INT 34
19688: PUSH
19689: LD_EXP 97
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 69
19702: AND
19703: IFFALSE 20166
19705: GO 19707
19707: DISABLE
19708: LD_INT 0
19710: PPUSH
19711: PPUSH
19712: PPUSH
19713: PPUSH
// begin enable ;
19714: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19715: LD_ADDR_VAR 0 1
19719: PUSH
19720: LD_INT 34
19722: PUSH
19723: LD_EXP 97
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 69
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19810
// begin if not i in minersList then
19740: LD_VAR 0 1
19744: PUSH
19745: LD_EXP 87
19749: IN
19750: NOT
19751: IFFALSE 19808
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19753: LD_ADDR_EXP 87
19757: PUSH
19758: LD_EXP 87
19762: PPUSH
19763: LD_EXP 87
19767: PUSH
19768: LD_INT 1
19770: PLUS
19771: PPUSH
19772: LD_VAR 0 1
19776: PPUSH
19777: CALL_OW 1
19781: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19782: LD_ADDR_EXP 88
19786: PUSH
19787: LD_EXP 88
19791: PPUSH
19792: LD_EXP 88
19796: PUSH
19797: LD_INT 1
19799: PLUS
19800: PPUSH
19801: EMPTY
19802: PPUSH
19803: CALL_OW 1
19807: ST_TO_ADDR
// end end ;
19808: GO 19737
19810: POP
19811: POP
// for i := minerMinesList downto 1 do
19812: LD_ADDR_VAR 0 1
19816: PUSH
19817: DOUBLE
19818: LD_EXP 88
19822: INC
19823: ST_TO_ADDR
19824: LD_INT 1
19826: PUSH
19827: FOR_DOWNTO
19828: IFFALSE 20164
// begin if IsLive ( minersList [ i ] ) then
19830: LD_EXP 87
19834: PUSH
19835: LD_VAR 0 1
19839: ARRAY
19840: PPUSH
19841: CALL_OW 300
19845: IFFALSE 19873
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19847: LD_EXP 87
19851: PUSH
19852: LD_VAR 0 1
19856: ARRAY
19857: PPUSH
19858: LD_EXP 88
19862: PUSH
19863: LD_VAR 0 1
19867: ARRAY
19868: PPUSH
19869: CALL_OW 505
// if not minerMinesList [ i ] then
19873: LD_EXP 88
19877: PUSH
19878: LD_VAR 0 1
19882: ARRAY
19883: NOT
19884: IFFALSE 19888
// continue ;
19886: GO 19827
// for j := minerMinesList [ i ] downto 1 do
19888: LD_ADDR_VAR 0 2
19892: PUSH
19893: DOUBLE
19894: LD_EXP 88
19898: PUSH
19899: LD_VAR 0 1
19903: ARRAY
19904: INC
19905: ST_TO_ADDR
19906: LD_INT 1
19908: PUSH
19909: FOR_DOWNTO
19910: IFFALSE 20160
// begin side := GetSide ( minersList [ i ] ) ;
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_EXP 87
19921: PUSH
19922: LD_VAR 0 1
19926: ARRAY
19927: PPUSH
19928: CALL_OW 255
19932: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19933: LD_ADDR_VAR 0 4
19937: PUSH
19938: LD_EXP 88
19942: PUSH
19943: LD_VAR 0 1
19947: ARRAY
19948: PUSH
19949: LD_VAR 0 2
19953: ARRAY
19954: PUSH
19955: LD_INT 1
19957: ARRAY
19958: PPUSH
19959: LD_EXP 88
19963: PUSH
19964: LD_VAR 0 1
19968: ARRAY
19969: PUSH
19970: LD_VAR 0 2
19974: ARRAY
19975: PUSH
19976: LD_INT 2
19978: ARRAY
19979: PPUSH
19980: CALL_OW 428
19984: ST_TO_ADDR
// if not tmp then
19985: LD_VAR 0 4
19989: NOT
19990: IFFALSE 19994
// continue ;
19992: GO 19909
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19994: LD_VAR 0 4
19998: PUSH
19999: LD_INT 81
20001: PUSH
20002: LD_VAR 0 3
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: IN
20016: PUSH
20017: LD_EXP 88
20021: PUSH
20022: LD_VAR 0 1
20026: ARRAY
20027: PUSH
20028: LD_VAR 0 2
20032: ARRAY
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: LD_EXP 88
20042: PUSH
20043: LD_VAR 0 1
20047: ARRAY
20048: PUSH
20049: LD_VAR 0 2
20053: ARRAY
20054: PUSH
20055: LD_INT 2
20057: ARRAY
20058: PPUSH
20059: CALL_OW 458
20063: AND
20064: IFFALSE 20158
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20066: LD_EXP 88
20070: PUSH
20071: LD_VAR 0 1
20075: ARRAY
20076: PUSH
20077: LD_VAR 0 2
20081: ARRAY
20082: PUSH
20083: LD_INT 1
20085: ARRAY
20086: PPUSH
20087: LD_EXP 88
20091: PUSH
20092: LD_VAR 0 1
20096: ARRAY
20097: PUSH
20098: LD_VAR 0 2
20102: ARRAY
20103: PUSH
20104: LD_INT 2
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 3
20112: PPUSH
20113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20117: LD_ADDR_EXP 88
20121: PUSH
20122: LD_EXP 88
20126: PPUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_EXP 88
20136: PUSH
20137: LD_VAR 0 1
20141: ARRAY
20142: PPUSH
20143: LD_VAR 0 2
20147: PPUSH
20148: CALL_OW 3
20152: PPUSH
20153: CALL_OW 1
20157: ST_TO_ADDR
// end ; end ;
20158: GO 19909
20160: POP
20161: POP
// end ;
20162: GO 19827
20164: POP
20165: POP
// end ;
20166: PPOPN 4
20168: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
// result := false ;
20173: LD_ADDR_VAR 0 4
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 264
20190: PUSH
20191: LD_EXP 97
20195: EQUAL
20196: NOT
20197: IFFALSE 20201
// exit ;
20199: GO 20441
// index := GetElementIndex ( minersList , unit ) ;
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: LD_EXP 87
20210: PPUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL 26593 0 2
20220: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20221: LD_EXP 88
20225: PUSH
20226: LD_VAR 0 5
20230: ARRAY
20231: PUSH
20232: LD_EXP 89
20236: GREATEREQUAL
20237: IFFALSE 20241
// exit ;
20239: GO 20441
// ComMoveXY ( unit , x , y ) ;
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_VAR 0 2
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20260: LD_INT 35
20262: PPUSH
20263: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_VAR 0 2
20276: PPUSH
20277: LD_VAR 0 3
20281: PPUSH
20282: CALL 57366 0 3
20286: NOT
20287: PUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 314
20297: AND
20298: IFFALSE 20302
// exit ;
20300: GO 20441
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20302: LD_VAR 0 2
20306: PPUSH
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 428
20316: PUSH
20317: LD_VAR 0 1
20321: EQUAL
20322: PUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 314
20332: NOT
20333: AND
20334: IFFALSE 20260
// PlaySoundXY ( x , y , PlantMine ) ;
20336: LD_VAR 0 2
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_STRING PlantMine
20348: PPUSH
20349: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20353: LD_VAR 0 2
20357: PPUSH
20358: LD_VAR 0 3
20362: PPUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 255
20372: PPUSH
20373: LD_INT 0
20375: PPUSH
20376: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20380: LD_ADDR_EXP 88
20384: PUSH
20385: LD_EXP 88
20389: PPUSH
20390: LD_VAR 0 5
20394: PUSH
20395: LD_EXP 88
20399: PUSH
20400: LD_VAR 0 5
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: PLUS
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: LD_VAR 0 2
20418: PUSH
20419: LD_VAR 0 3
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL 26808 0 3
20432: ST_TO_ADDR
// result := true ;
20433: LD_ADDR_VAR 0 4
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// end ;
20441: LD_VAR 0 4
20445: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20446: LD_INT 0
20448: PPUSH
20449: PPUSH
20450: PPUSH
// if not unit in minersList then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_EXP 87
20460: IN
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20858
// index := GetElementIndex ( minersList , unit ) ;
20466: LD_ADDR_VAR 0 6
20470: PUSH
20471: LD_EXP 87
20475: PPUSH
20476: LD_VAR 0 1
20480: PPUSH
20481: CALL 26593 0 2
20485: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20486: LD_ADDR_VAR 0 5
20490: PUSH
20491: DOUBLE
20492: LD_EXP 88
20496: PUSH
20497: LD_VAR 0 6
20501: ARRAY
20502: INC
20503: ST_TO_ADDR
20504: LD_INT 1
20506: PUSH
20507: FOR_DOWNTO
20508: IFFALSE 20669
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20510: LD_EXP 88
20514: PUSH
20515: LD_VAR 0 6
20519: ARRAY
20520: PUSH
20521: LD_VAR 0 5
20525: ARRAY
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PUSH
20531: LD_VAR 0 2
20535: EQUAL
20536: PUSH
20537: LD_EXP 88
20541: PUSH
20542: LD_VAR 0 6
20546: ARRAY
20547: PUSH
20548: LD_VAR 0 5
20552: ARRAY
20553: PUSH
20554: LD_INT 2
20556: ARRAY
20557: PUSH
20558: LD_VAR 0 3
20562: EQUAL
20563: AND
20564: IFFALSE 20667
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20566: LD_EXP 88
20570: PUSH
20571: LD_VAR 0 6
20575: ARRAY
20576: PUSH
20577: LD_VAR 0 5
20581: ARRAY
20582: PUSH
20583: LD_INT 1
20585: ARRAY
20586: PPUSH
20587: LD_EXP 88
20591: PUSH
20592: LD_VAR 0 6
20596: ARRAY
20597: PUSH
20598: LD_VAR 0 5
20602: ARRAY
20603: PUSH
20604: LD_INT 2
20606: ARRAY
20607: PPUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 255
20617: PPUSH
20618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20622: LD_ADDR_EXP 88
20626: PUSH
20627: LD_EXP 88
20631: PPUSH
20632: LD_VAR 0 6
20636: PPUSH
20637: LD_EXP 88
20641: PUSH
20642: LD_VAR 0 6
20646: ARRAY
20647: PPUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL_OW 3
20657: PPUSH
20658: CALL_OW 1
20662: ST_TO_ADDR
// exit ;
20663: POP
20664: POP
20665: GO 20858
// end ; end ;
20667: GO 20507
20669: POP
20670: POP
// for i := minerMinesList [ index ] downto 1 do
20671: LD_ADDR_VAR 0 5
20675: PUSH
20676: DOUBLE
20677: LD_EXP 88
20681: PUSH
20682: LD_VAR 0 6
20686: ARRAY
20687: INC
20688: ST_TO_ADDR
20689: LD_INT 1
20691: PUSH
20692: FOR_DOWNTO
20693: IFFALSE 20856
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20695: LD_EXP 88
20699: PUSH
20700: LD_VAR 0 6
20704: ARRAY
20705: PUSH
20706: LD_VAR 0 5
20710: ARRAY
20711: PUSH
20712: LD_INT 1
20714: ARRAY
20715: PPUSH
20716: LD_EXP 88
20720: PUSH
20721: LD_VAR 0 6
20725: ARRAY
20726: PUSH
20727: LD_VAR 0 5
20731: ARRAY
20732: PUSH
20733: LD_INT 2
20735: ARRAY
20736: PPUSH
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: CALL_OW 298
20751: PUSH
20752: LD_INT 6
20754: LESS
20755: IFFALSE 20854
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20757: LD_EXP 88
20761: PUSH
20762: LD_VAR 0 6
20766: ARRAY
20767: PUSH
20768: LD_VAR 0 5
20772: ARRAY
20773: PUSH
20774: LD_INT 1
20776: ARRAY
20777: PPUSH
20778: LD_EXP 88
20782: PUSH
20783: LD_VAR 0 6
20787: ARRAY
20788: PUSH
20789: LD_VAR 0 5
20793: ARRAY
20794: PUSH
20795: LD_INT 2
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 255
20808: PPUSH
20809: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20813: LD_ADDR_EXP 88
20817: PUSH
20818: LD_EXP 88
20822: PPUSH
20823: LD_VAR 0 6
20827: PPUSH
20828: LD_EXP 88
20832: PUSH
20833: LD_VAR 0 6
20837: ARRAY
20838: PPUSH
20839: LD_VAR 0 5
20843: PPUSH
20844: CALL_OW 3
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
// end ; end ;
20854: GO 20692
20856: POP
20857: POP
// end ;
20858: LD_VAR 0 4
20862: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 264
20883: PUSH
20884: LD_EXP 97
20888: EQUAL
20889: NOT
20890: PUSH
20891: LD_VAR 0 1
20895: PUSH
20896: LD_EXP 87
20900: IN
20901: NOT
20902: OR
20903: IFFALSE 20907
// exit ;
20905: GO 21229
// index := GetElementIndex ( minersList , unit ) ;
20907: LD_ADDR_VAR 0 6
20911: PUSH
20912: LD_EXP 87
20916: PPUSH
20917: LD_VAR 0 1
20921: PPUSH
20922: CALL 26593 0 2
20926: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: LD_EXP 89
20936: PUSH
20937: LD_EXP 88
20941: PUSH
20942: LD_VAR 0 6
20946: ARRAY
20947: MINUS
20948: ST_TO_ADDR
// if not minesFreeAmount then
20949: LD_VAR 0 8
20953: NOT
20954: IFFALSE 20958
// exit ;
20956: GO 21229
// tmp := [ ] ;
20958: LD_ADDR_VAR 0 7
20962: PUSH
20963: EMPTY
20964: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20965: LD_ADDR_VAR 0 5
20969: PUSH
20970: DOUBLE
20971: LD_INT 1
20973: DEC
20974: ST_TO_ADDR
20975: LD_VAR 0 8
20979: PUSH
20980: FOR_TO
20981: IFFALSE 21176
// begin _d := rand ( 0 , 5 ) ;
20983: LD_ADDR_VAR 0 11
20987: PUSH
20988: LD_INT 0
20990: PPUSH
20991: LD_INT 5
20993: PPUSH
20994: CALL_OW 12
20998: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20999: LD_ADDR_VAR 0 12
21003: PUSH
21004: LD_INT 2
21006: PPUSH
21007: LD_INT 6
21009: PPUSH
21010: CALL_OW 12
21014: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21015: LD_ADDR_VAR 0 9
21019: PUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 11
21029: PPUSH
21030: LD_VAR 0 12
21034: PPUSH
21035: CALL_OW 272
21039: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21040: LD_ADDR_VAR 0 10
21044: PUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_VAR 0 11
21054: PPUSH
21055: LD_VAR 0 12
21059: PPUSH
21060: CALL_OW 273
21064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21065: LD_VAR 0 9
21069: PPUSH
21070: LD_VAR 0 10
21074: PPUSH
21075: CALL_OW 488
21079: PUSH
21080: LD_VAR 0 9
21084: PUSH
21085: LD_VAR 0 10
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_VAR 0 7
21098: IN
21099: NOT
21100: AND
21101: PUSH
21102: LD_VAR 0 9
21106: PPUSH
21107: LD_VAR 0 10
21111: PPUSH
21112: CALL_OW 458
21116: NOT
21117: AND
21118: IFFALSE 21160
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21120: LD_ADDR_VAR 0 7
21124: PUSH
21125: LD_VAR 0 7
21129: PPUSH
21130: LD_VAR 0 7
21134: PUSH
21135: LD_INT 1
21137: PLUS
21138: PPUSH
21139: LD_VAR 0 9
21143: PUSH
21144: LD_VAR 0 10
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 1
21157: ST_TO_ADDR
21158: GO 21174
// i := i - 1 ;
21160: LD_ADDR_VAR 0 5
21164: PUSH
21165: LD_VAR 0 5
21169: PUSH
21170: LD_INT 1
21172: MINUS
21173: ST_TO_ADDR
// end ;
21174: GO 20980
21176: POP
21177: POP
// for i in tmp do
21178: LD_ADDR_VAR 0 5
21182: PUSH
21183: LD_VAR 0 7
21187: PUSH
21188: FOR_IN
21189: IFFALSE 21227
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21191: LD_VAR 0 1
21195: PPUSH
21196: LD_VAR 0 5
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: PPUSH
21205: LD_VAR 0 5
21209: PUSH
21210: LD_INT 2
21212: ARRAY
21213: PPUSH
21214: CALL 20169 0 3
21218: NOT
21219: IFFALSE 21225
// exit ;
21221: POP
21222: POP
21223: GO 21229
21225: GO 21188
21227: POP
21228: POP
// end ;
21229: LD_VAR 0 4
21233: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
// if not GetClass ( unit ) = class_sniper then
21243: LD_VAR 0 1
21247: PPUSH
21248: CALL_OW 257
21252: PUSH
21253: LD_INT 5
21255: EQUAL
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21649
// dist := 8 ;
21261: LD_ADDR_VAR 0 5
21265: PUSH
21266: LD_INT 8
21268: ST_TO_ADDR
// viewRange := 12 ;
21269: LD_ADDR_VAR 0 7
21273: PUSH
21274: LD_INT 12
21276: ST_TO_ADDR
// side := GetSide ( unit ) ;
21277: LD_ADDR_VAR 0 6
21281: PUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 255
21291: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21292: LD_INT 61
21294: PPUSH
21295: LD_VAR 0 6
21299: PPUSH
21300: CALL_OW 321
21304: PUSH
21305: LD_INT 2
21307: EQUAL
21308: IFFALSE 21318
// viewRange := 16 ;
21310: LD_ADDR_VAR 0 7
21314: PUSH
21315: LD_INT 16
21317: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: LD_VAR 0 3
21332: PPUSH
21333: CALL_OW 297
21337: PUSH
21338: LD_VAR 0 5
21342: GREATER
21343: IFFALSE 21422
// begin ComMoveXY ( unit , x , y ) ;
21345: LD_VAR 0 1
21349: PPUSH
21350: LD_VAR 0 2
21354: PPUSH
21355: LD_VAR 0 3
21359: PPUSH
21360: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21364: LD_INT 35
21366: PPUSH
21367: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_VAR 0 2
21380: PPUSH
21381: LD_VAR 0 3
21385: PPUSH
21386: CALL 57366 0 3
21390: NOT
21391: IFFALSE 21395
// exit ;
21393: GO 21649
// until GetDistUnitXY ( unit , x , y ) < dist ;
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_VAR 0 2
21404: PPUSH
21405: LD_VAR 0 3
21409: PPUSH
21410: CALL_OW 297
21414: PUSH
21415: LD_VAR 0 5
21419: LESS
21420: IFFALSE 21364
// end ; ComTurnXY ( unit , x , y ) ;
21422: LD_VAR 0 1
21426: PPUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 118
// wait ( 5 ) ;
21441: LD_INT 5
21443: PPUSH
21444: CALL_OW 67
// _d := GetDir ( unit ) ;
21448: LD_ADDR_VAR 0 10
21452: PUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 254
21462: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21463: LD_ADDR_VAR 0 8
21467: PUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 250
21477: PPUSH
21478: LD_VAR 0 10
21482: PPUSH
21483: LD_VAR 0 5
21487: PPUSH
21488: CALL_OW 272
21492: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21493: LD_ADDR_VAR 0 9
21497: PUSH
21498: LD_VAR 0 1
21502: PPUSH
21503: CALL_OW 251
21507: PPUSH
21508: LD_VAR 0 10
21512: PPUSH
21513: LD_VAR 0 5
21517: PPUSH
21518: CALL_OW 273
21522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21523: LD_VAR 0 8
21527: PPUSH
21528: LD_VAR 0 9
21532: PPUSH
21533: CALL_OW 488
21537: NOT
21538: IFFALSE 21542
// exit ;
21540: GO 21649
// ComAnimCustom ( unit , 1 ) ;
21542: LD_VAR 0 1
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21554: LD_VAR 0 8
21558: PPUSH
21559: LD_VAR 0 9
21563: PPUSH
21564: LD_VAR 0 6
21568: PPUSH
21569: LD_VAR 0 7
21573: PPUSH
21574: CALL_OW 330
// repeat wait ( 1 ) ;
21578: LD_INT 1
21580: PPUSH
21581: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: CALL_OW 316
21594: PUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL_OW 314
21604: OR
21605: PUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 302
21615: NOT
21616: OR
21617: PUSH
21618: LD_VAR 0 1
21622: PPUSH
21623: CALL_OW 301
21627: OR
21628: IFFALSE 21578
// RemoveSeeing ( _x , _y , side ) ;
21630: LD_VAR 0 8
21634: PPUSH
21635: LD_VAR 0 9
21639: PPUSH
21640: LD_VAR 0 6
21644: PPUSH
21645: CALL_OW 331
// end ; end_of_file
21649: LD_VAR 0 4
21653: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21654: LD_INT 0
21656: PPUSH
// ar_miner := 81 ;
21657: LD_ADDR_EXP 97
21661: PUSH
21662: LD_INT 81
21664: ST_TO_ADDR
// ar_crane := 88 ;
21665: LD_ADDR_EXP 96
21669: PUSH
21670: LD_INT 88
21672: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21673: LD_ADDR_EXP 91
21677: PUSH
21678: LD_INT 89
21680: ST_TO_ADDR
// us_hack := 99 ;
21681: LD_ADDR_EXP 92
21685: PUSH
21686: LD_INT 99
21688: ST_TO_ADDR
// us_artillery := 97 ;
21689: LD_ADDR_EXP 93
21693: PUSH
21694: LD_INT 97
21696: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21697: LD_ADDR_EXP 94
21701: PUSH
21702: LD_INT 91
21704: ST_TO_ADDR
// ar_mortar := 92 ;
21705: LD_ADDR_EXP 95
21709: PUSH
21710: LD_INT 92
21712: ST_TO_ADDR
// ru_radar := 98 ;
21713: LD_ADDR_EXP 90
21717: PUSH
21718: LD_INT 98
21720: ST_TO_ADDR
// tech_Artillery := 80 ;
21721: LD_ADDR_EXP 98
21725: PUSH
21726: LD_INT 80
21728: ST_TO_ADDR
// tech_RadMat := 81 ;
21729: LD_ADDR_EXP 99
21733: PUSH
21734: LD_INT 81
21736: ST_TO_ADDR
// tech_BasicTools := 82 ;
21737: LD_ADDR_EXP 100
21741: PUSH
21742: LD_INT 82
21744: ST_TO_ADDR
// tech_Cargo := 83 ;
21745: LD_ADDR_EXP 101
21749: PUSH
21750: LD_INT 83
21752: ST_TO_ADDR
// tech_Track := 84 ;
21753: LD_ADDR_EXP 102
21757: PUSH
21758: LD_INT 84
21760: ST_TO_ADDR
// tech_Crane := 85 ;
21761: LD_ADDR_EXP 103
21765: PUSH
21766: LD_INT 85
21768: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21769: LD_ADDR_EXP 104
21773: PUSH
21774: LD_INT 86
21776: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21777: LD_ADDR_EXP 105
21781: PUSH
21782: LD_INT 87
21784: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21785: LD_ADDR_EXP 106
21789: PUSH
21790: LD_INT 88
21792: ST_TO_ADDR
// class_mastodont := 31 ;
21793: LD_ADDR_EXP 107
21797: PUSH
21798: LD_INT 31
21800: ST_TO_ADDR
// class_horse := 21 ;
21801: LD_ADDR_EXP 108
21805: PUSH
21806: LD_INT 21
21808: ST_TO_ADDR
// end ;
21809: LD_VAR 0 1
21813: RET
// every 1 do
21814: GO 21816
21816: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21817: CALL 21654 0 0
21821: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
// if exist_mode then
21826: LD_VAR 0 2
21830: IFFALSE 21855
// unit := CreateCharacter ( prefix & ident ) else
21832: LD_ADDR_VAR 0 5
21836: PUSH
21837: LD_VAR 0 3
21841: PUSH
21842: LD_VAR 0 1
21846: STR
21847: PPUSH
21848: CALL_OW 34
21852: ST_TO_ADDR
21853: GO 21870
// unit := NewCharacter ( ident ) ;
21855: LD_ADDR_VAR 0 5
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 25
21869: ST_TO_ADDR
// result := unit ;
21870: LD_ADDR_VAR 0 4
21874: PUSH
21875: LD_VAR 0 5
21879: ST_TO_ADDR
// end ;
21880: LD_VAR 0 4
21884: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21885: LD_INT 0
21887: PPUSH
21888: PPUSH
// if not side or not nation then
21889: LD_VAR 0 1
21893: NOT
21894: PUSH
21895: LD_VAR 0 2
21899: NOT
21900: OR
21901: IFFALSE 21905
// exit ;
21903: GO 22673
// case nation of nation_american :
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 22132
21918: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21919: LD_ADDR_VAR 0 4
21923: PUSH
21924: LD_INT 35
21926: PUSH
21927: LD_INT 45
21929: PUSH
21930: LD_INT 46
21932: PUSH
21933: LD_INT 47
21935: PUSH
21936: LD_INT 82
21938: PUSH
21939: LD_INT 83
21941: PUSH
21942: LD_INT 84
21944: PUSH
21945: LD_INT 85
21947: PUSH
21948: LD_INT 86
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 6
21959: PUSH
21960: LD_INT 15
21962: PUSH
21963: LD_INT 16
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 12
21971: PUSH
21972: LD_INT 13
21974: PUSH
21975: LD_INT 10
21977: PUSH
21978: LD_INT 14
21980: PUSH
21981: LD_INT 20
21983: PUSH
21984: LD_INT 21
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 32
21995: PUSH
21996: LD_INT 27
21998: PUSH
21999: LD_INT 36
22001: PUSH
22002: LD_INT 69
22004: PUSH
22005: LD_INT 39
22007: PUSH
22008: LD_INT 34
22010: PUSH
22011: LD_INT 40
22013: PUSH
22014: LD_INT 48
22016: PUSH
22017: LD_INT 49
22019: PUSH
22020: LD_INT 50
22022: PUSH
22023: LD_INT 51
22025: PUSH
22026: LD_INT 52
22028: PUSH
22029: LD_INT 53
22031: PUSH
22032: LD_INT 54
22034: PUSH
22035: LD_INT 55
22037: PUSH
22038: LD_INT 56
22040: PUSH
22041: LD_INT 57
22043: PUSH
22044: LD_INT 58
22046: PUSH
22047: LD_INT 59
22049: PUSH
22050: LD_INT 60
22052: PUSH
22053: LD_INT 61
22055: PUSH
22056: LD_INT 62
22058: PUSH
22059: LD_INT 80
22061: PUSH
22062: LD_INT 82
22064: PUSH
22065: LD_INT 83
22067: PUSH
22068: LD_INT 84
22070: PUSH
22071: LD_INT 85
22073: PUSH
22074: LD_INT 86
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 22597
22132: LD_INT 2
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22366
22140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_INT 35
22148: PUSH
22149: LD_INT 45
22151: PUSH
22152: LD_INT 46
22154: PUSH
22155: LD_INT 47
22157: PUSH
22158: LD_INT 82
22160: PUSH
22161: LD_INT 83
22163: PUSH
22164: LD_INT 84
22166: PUSH
22167: LD_INT 85
22169: PUSH
22170: LD_INT 87
22172: PUSH
22173: LD_INT 70
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 11
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: LD_INT 5
22190: PUSH
22191: LD_INT 6
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 18
22199: PUSH
22200: LD_INT 7
22202: PUSH
22203: LD_INT 17
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 72
22220: PUSH
22221: LD_INT 26
22223: PUSH
22224: LD_INT 69
22226: PUSH
22227: LD_INT 39
22229: PUSH
22230: LD_INT 40
22232: PUSH
22233: LD_INT 41
22235: PUSH
22236: LD_INT 42
22238: PUSH
22239: LD_INT 43
22241: PUSH
22242: LD_INT 48
22244: PUSH
22245: LD_INT 49
22247: PUSH
22248: LD_INT 50
22250: PUSH
22251: LD_INT 51
22253: PUSH
22254: LD_INT 52
22256: PUSH
22257: LD_INT 53
22259: PUSH
22260: LD_INT 54
22262: PUSH
22263: LD_INT 55
22265: PUSH
22266: LD_INT 56
22268: PUSH
22269: LD_INT 60
22271: PUSH
22272: LD_INT 61
22274: PUSH
22275: LD_INT 62
22277: PUSH
22278: LD_INT 66
22280: PUSH
22281: LD_INT 67
22283: PUSH
22284: LD_INT 68
22286: PUSH
22287: LD_INT 81
22289: PUSH
22290: LD_INT 82
22292: PUSH
22293: LD_INT 83
22295: PUSH
22296: LD_INT 84
22298: PUSH
22299: LD_INT 85
22301: PUSH
22302: LD_INT 87
22304: PUSH
22305: LD_INT 88
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: ST_TO_ADDR
22364: GO 22597
22366: LD_INT 3
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22596
22374: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_INT 46
22382: PUSH
22383: LD_INT 47
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 82
22394: PUSH
22395: LD_INT 83
22397: PUSH
22398: LD_INT 84
22400: PUSH
22401: LD_INT 85
22403: PUSH
22404: LD_INT 86
22406: PUSH
22407: LD_INT 11
22409: PUSH
22410: LD_INT 9
22412: PUSH
22413: LD_INT 20
22415: PUSH
22416: LD_INT 19
22418: PUSH
22419: LD_INT 21
22421: PUSH
22422: LD_INT 24
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 25
22430: PUSH
22431: LD_INT 28
22433: PUSH
22434: LD_INT 29
22436: PUSH
22437: LD_INT 30
22439: PUSH
22440: LD_INT 31
22442: PUSH
22443: LD_INT 37
22445: PUSH
22446: LD_INT 38
22448: PUSH
22449: LD_INT 32
22451: PUSH
22452: LD_INT 27
22454: PUSH
22455: LD_INT 33
22457: PUSH
22458: LD_INT 69
22460: PUSH
22461: LD_INT 39
22463: PUSH
22464: LD_INT 34
22466: PUSH
22467: LD_INT 40
22469: PUSH
22470: LD_INT 71
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 44
22478: PUSH
22479: LD_INT 48
22481: PUSH
22482: LD_INT 49
22484: PUSH
22485: LD_INT 50
22487: PUSH
22488: LD_INT 51
22490: PUSH
22491: LD_INT 52
22493: PUSH
22494: LD_INT 53
22496: PUSH
22497: LD_INT 54
22499: PUSH
22500: LD_INT 55
22502: PUSH
22503: LD_INT 56
22505: PUSH
22506: LD_INT 57
22508: PUSH
22509: LD_INT 58
22511: PUSH
22512: LD_INT 59
22514: PUSH
22515: LD_INT 63
22517: PUSH
22518: LD_INT 64
22520: PUSH
22521: LD_INT 65
22523: PUSH
22524: LD_INT 82
22526: PUSH
22527: LD_INT 83
22529: PUSH
22530: LD_INT 84
22532: PUSH
22533: LD_INT 85
22535: PUSH
22536: LD_INT 86
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: ST_TO_ADDR
22594: GO 22597
22596: POP
// if state > - 1 and state < 3 then
22597: LD_VAR 0 3
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: GREATER
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_INT 3
22614: LESS
22615: AND
22616: IFFALSE 22673
// for i in result do
22618: LD_ADDR_VAR 0 5
22622: PUSH
22623: LD_VAR 0 4
22627: PUSH
22628: FOR_IN
22629: IFFALSE 22671
// if GetTech ( i , side ) <> state then
22631: LD_VAR 0 5
22635: PPUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 321
22645: PUSH
22646: LD_VAR 0 3
22650: NONEQUAL
22651: IFFALSE 22669
// result := result diff i ;
22653: LD_ADDR_VAR 0 4
22657: PUSH
22658: LD_VAR 0 4
22662: PUSH
22663: LD_VAR 0 5
22667: DIFF
22668: ST_TO_ADDR
22669: GO 22628
22671: POP
22672: POP
// end ;
22673: LD_VAR 0 4
22677: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22678: LD_INT 0
22680: PPUSH
22681: PPUSH
22682: PPUSH
// result := true ;
22683: LD_ADDR_VAR 0 3
22687: PUSH
22688: LD_INT 1
22690: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22691: LD_ADDR_VAR 0 5
22695: PUSH
22696: LD_VAR 0 2
22700: PPUSH
22701: CALL_OW 480
22705: ST_TO_ADDR
// if not tmp then
22706: LD_VAR 0 5
22710: NOT
22711: IFFALSE 22715
// exit ;
22713: GO 22764
// for i in tmp do
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: LD_VAR 0 5
22724: PUSH
22725: FOR_IN
22726: IFFALSE 22762
// if GetTech ( i , side ) <> state_researched then
22728: LD_VAR 0 4
22732: PPUSH
22733: LD_VAR 0 1
22737: PPUSH
22738: CALL_OW 321
22742: PUSH
22743: LD_INT 2
22745: NONEQUAL
22746: IFFALSE 22760
// begin result := false ;
22748: LD_ADDR_VAR 0 3
22752: PUSH
22753: LD_INT 0
22755: ST_TO_ADDR
// exit ;
22756: POP
22757: POP
22758: GO 22764
// end ;
22760: GO 22725
22762: POP
22763: POP
// end ;
22764: LD_VAR 0 3
22768: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22769: LD_INT 0
22771: PPUSH
22772: PPUSH
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22784: LD_VAR 0 1
22788: NOT
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 257
22799: PUSH
22800: LD_INT 9
22802: NONEQUAL
22803: OR
22804: IFFALSE 22808
// exit ;
22806: GO 23381
// side := GetSide ( unit ) ;
22808: LD_ADDR_VAR 0 9
22812: PUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL_OW 255
22822: ST_TO_ADDR
// tech_space := tech_spacanom ;
22823: LD_ADDR_VAR 0 12
22827: PUSH
22828: LD_INT 29
22830: ST_TO_ADDR
// tech_time := tech_taurad ;
22831: LD_ADDR_VAR 0 13
22835: PUSH
22836: LD_INT 28
22838: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22839: LD_ADDR_VAR 0 11
22843: PUSH
22844: LD_VAR 0 1
22848: PPUSH
22849: CALL_OW 310
22853: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22854: LD_VAR 0 11
22858: PPUSH
22859: CALL_OW 247
22863: PUSH
22864: LD_INT 2
22866: EQUAL
22867: IFFALSE 22871
// exit ;
22869: GO 23381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22871: LD_ADDR_VAR 0 8
22875: PUSH
22876: LD_INT 81
22878: PUSH
22879: LD_VAR 0 9
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 3
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 69
22913: ST_TO_ADDR
// if not tmp then
22914: LD_VAR 0 8
22918: NOT
22919: IFFALSE 22923
// exit ;
22921: GO 23381
// if in_unit then
22923: LD_VAR 0 11
22927: IFFALSE 22951
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22929: LD_ADDR_VAR 0 10
22933: PUSH
22934: LD_VAR 0 8
22938: PPUSH
22939: LD_VAR 0 11
22943: PPUSH
22944: CALL_OW 74
22948: ST_TO_ADDR
22949: GO 22971
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22951: LD_ADDR_VAR 0 10
22955: PUSH
22956: LD_VAR 0 8
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 74
22970: ST_TO_ADDR
// if not enemy then
22971: LD_VAR 0 10
22975: NOT
22976: IFFALSE 22980
// exit ;
22978: GO 23381
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22980: LD_VAR 0 11
22984: PUSH
22985: LD_VAR 0 11
22989: PPUSH
22990: LD_VAR 0 10
22994: PPUSH
22995: CALL_OW 296
22999: PUSH
23000: LD_INT 13
23002: GREATER
23003: AND
23004: PUSH
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_VAR 0 10
23014: PPUSH
23015: CALL_OW 296
23019: PUSH
23020: LD_INT 12
23022: GREATER
23023: OR
23024: IFFALSE 23028
// exit ;
23026: GO 23381
// missile := [ 1 ] ;
23028: LD_ADDR_VAR 0 14
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23039: LD_VAR 0 9
23043: PPUSH
23044: LD_VAR 0 12
23048: PPUSH
23049: CALL_OW 325
23053: IFFALSE 23082
// missile := Insert ( missile , missile + 1 , 2 ) ;
23055: LD_ADDR_VAR 0 14
23059: PUSH
23060: LD_VAR 0 14
23064: PPUSH
23065: LD_VAR 0 14
23069: PUSH
23070: LD_INT 1
23072: PLUS
23073: PPUSH
23074: LD_INT 2
23076: PPUSH
23077: CALL_OW 2
23081: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23082: LD_VAR 0 9
23086: PPUSH
23087: LD_VAR 0 13
23091: PPUSH
23092: CALL_OW 325
23096: PUSH
23097: LD_VAR 0 10
23101: PPUSH
23102: CALL_OW 255
23106: PPUSH
23107: LD_VAR 0 13
23111: PPUSH
23112: CALL_OW 325
23116: NOT
23117: AND
23118: IFFALSE 23147
// missile := Insert ( missile , missile + 1 , 3 ) ;
23120: LD_ADDR_VAR 0 14
23124: PUSH
23125: LD_VAR 0 14
23129: PPUSH
23130: LD_VAR 0 14
23134: PUSH
23135: LD_INT 1
23137: PLUS
23138: PPUSH
23139: LD_INT 3
23141: PPUSH
23142: CALL_OW 2
23146: ST_TO_ADDR
// if missile < 2 then
23147: LD_VAR 0 14
23151: PUSH
23152: LD_INT 2
23154: LESS
23155: IFFALSE 23159
// exit ;
23157: GO 23381
// x := GetX ( enemy ) ;
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_VAR 0 10
23168: PPUSH
23169: CALL_OW 250
23173: ST_TO_ADDR
// y := GetY ( enemy ) ;
23174: LD_ADDR_VAR 0 5
23178: PUSH
23179: LD_VAR 0 10
23183: PPUSH
23184: CALL_OW 251
23188: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23189: LD_ADDR_VAR 0 6
23193: PUSH
23194: LD_VAR 0 4
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 12
23210: PLUS
23211: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23212: LD_ADDR_VAR 0 7
23216: PUSH
23217: LD_VAR 0 5
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PPUSH
23226: LD_INT 1
23228: PPUSH
23229: CALL_OW 12
23233: PLUS
23234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23235: LD_VAR 0 6
23239: PPUSH
23240: LD_VAR 0 7
23244: PPUSH
23245: CALL_OW 488
23249: NOT
23250: IFFALSE 23272
// begin _x := x ;
23252: LD_ADDR_VAR 0 6
23256: PUSH
23257: LD_VAR 0 4
23261: ST_TO_ADDR
// _y := y ;
23262: LD_ADDR_VAR 0 7
23266: PUSH
23267: LD_VAR 0 5
23271: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23272: LD_ADDR_VAR 0 3
23276: PUSH
23277: LD_INT 1
23279: PPUSH
23280: LD_VAR 0 14
23284: PPUSH
23285: CALL_OW 12
23289: ST_TO_ADDR
// case i of 1 :
23290: LD_VAR 0 3
23294: PUSH
23295: LD_INT 1
23297: DOUBLE
23298: EQUAL
23299: IFTRUE 23303
23301: GO 23320
23303: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23304: LD_VAR 0 1
23308: PPUSH
23309: LD_VAR 0 10
23313: PPUSH
23314: CALL_OW 115
23318: GO 23381
23320: LD_INT 2
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23350
23328: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23329: LD_VAR 0 1
23333: PPUSH
23334: LD_VAR 0 6
23338: PPUSH
23339: LD_VAR 0 7
23343: PPUSH
23344: CALL_OW 153
23348: GO 23381
23350: LD_INT 3
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23380
23358: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23359: LD_VAR 0 1
23363: PPUSH
23364: LD_VAR 0 6
23368: PPUSH
23369: LD_VAR 0 7
23373: PPUSH
23374: CALL_OW 154
23378: GO 23381
23380: POP
// end ;
23381: LD_VAR 0 2
23385: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23386: LD_INT 0
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
23392: PPUSH
23393: PPUSH
// if not unit or not building then
23394: LD_VAR 0 1
23398: NOT
23399: PUSH
23400: LD_VAR 0 2
23404: NOT
23405: OR
23406: IFFALSE 23410
// exit ;
23408: GO 23568
// x := GetX ( building ) ;
23410: LD_ADDR_VAR 0 5
23414: PUSH
23415: LD_VAR 0 2
23419: PPUSH
23420: CALL_OW 250
23424: ST_TO_ADDR
// y := GetY ( building ) ;
23425: LD_ADDR_VAR 0 6
23429: PUSH
23430: LD_VAR 0 2
23434: PPUSH
23435: CALL_OW 251
23439: ST_TO_ADDR
// for i = 0 to 5 do
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: DOUBLE
23446: LD_INT 0
23448: DEC
23449: ST_TO_ADDR
23450: LD_INT 5
23452: PUSH
23453: FOR_TO
23454: IFFALSE 23566
// begin _x := ShiftX ( x , i , 3 ) ;
23456: LD_ADDR_VAR 0 7
23460: PUSH
23461: LD_VAR 0 5
23465: PPUSH
23466: LD_VAR 0 4
23470: PPUSH
23471: LD_INT 3
23473: PPUSH
23474: CALL_OW 272
23478: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23479: LD_ADDR_VAR 0 8
23483: PUSH
23484: LD_VAR 0 6
23488: PPUSH
23489: LD_VAR 0 4
23493: PPUSH
23494: LD_INT 3
23496: PPUSH
23497: CALL_OW 273
23501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23502: LD_VAR 0 7
23506: PPUSH
23507: LD_VAR 0 8
23511: PPUSH
23512: CALL_OW 488
23516: NOT
23517: IFFALSE 23521
// continue ;
23519: GO 23453
// if HexInfo ( _x , _y ) = 0 then
23521: LD_VAR 0 7
23525: PPUSH
23526: LD_VAR 0 8
23530: PPUSH
23531: CALL_OW 428
23535: PUSH
23536: LD_INT 0
23538: EQUAL
23539: IFFALSE 23564
// begin ComMoveXY ( unit , _x , _y ) ;
23541: LD_VAR 0 1
23545: PPUSH
23546: LD_VAR 0 7
23550: PPUSH
23551: LD_VAR 0 8
23555: PPUSH
23556: CALL_OW 111
// exit ;
23560: POP
23561: POP
23562: GO 23568
// end ; end ;
23564: GO 23453
23566: POP
23567: POP
// end ;
23568: LD_VAR 0 3
23572: RET
// export function ScanBase ( side , base_area ) ; begin
23573: LD_INT 0
23575: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23576: LD_ADDR_VAR 0 3
23580: PUSH
23581: LD_VAR 0 2
23585: PPUSH
23586: LD_INT 81
23588: PUSH
23589: LD_VAR 0 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 70
23602: ST_TO_ADDR
// end ;
23603: LD_VAR 0 3
23607: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
// result := false ;
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_INT 0
23621: ST_TO_ADDR
// side := GetSide ( unit ) ;
23622: LD_ADDR_VAR 0 3
23626: PUSH
23627: LD_VAR 0 1
23631: PPUSH
23632: CALL_OW 255
23636: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23637: LD_ADDR_VAR 0 4
23641: PUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 248
23651: ST_TO_ADDR
// case nat of 1 :
23652: LD_VAR 0 4
23656: PUSH
23657: LD_INT 1
23659: DOUBLE
23660: EQUAL
23661: IFTRUE 23665
23663: GO 23676
23665: POP
// tech := tech_lassight ; 2 :
23666: LD_ADDR_VAR 0 5
23670: PUSH
23671: LD_INT 12
23673: ST_TO_ADDR
23674: GO 23715
23676: LD_INT 2
23678: DOUBLE
23679: EQUAL
23680: IFTRUE 23684
23682: GO 23695
23684: POP
// tech := tech_mortar ; 3 :
23685: LD_ADDR_VAR 0 5
23689: PUSH
23690: LD_INT 41
23692: ST_TO_ADDR
23693: GO 23715
23695: LD_INT 3
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23714
23703: POP
// tech := tech_bazooka ; end ;
23704: LD_ADDR_VAR 0 5
23708: PUSH
23709: LD_INT 44
23711: ST_TO_ADDR
23712: GO 23715
23714: POP
// if Researched ( side , tech ) then
23715: LD_VAR 0 3
23719: PPUSH
23720: LD_VAR 0 5
23724: PPUSH
23725: CALL_OW 325
23729: IFFALSE 23756
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23731: LD_ADDR_VAR 0 2
23735: PUSH
23736: LD_INT 5
23738: PUSH
23739: LD_INT 8
23741: PUSH
23742: LD_INT 9
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: LIST
23749: PUSH
23750: LD_VAR 0 4
23754: ARRAY
23755: ST_TO_ADDR
// end ;
23756: LD_VAR 0 2
23760: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23761: LD_INT 0
23763: PPUSH
23764: PPUSH
23765: PPUSH
// if not mines then
23766: LD_VAR 0 2
23770: NOT
23771: IFFALSE 23775
// exit ;
23773: GO 23919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23775: LD_ADDR_VAR 0 5
23779: PUSH
23780: LD_INT 81
23782: PUSH
23783: LD_VAR 0 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 3
23794: PUSH
23795: LD_INT 21
23797: PUSH
23798: LD_INT 3
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PPUSH
23813: CALL_OW 69
23817: ST_TO_ADDR
// for i in mines do
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_VAR 0 2
23827: PUSH
23828: FOR_IN
23829: IFFALSE 23917
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23831: LD_VAR 0 4
23835: PUSH
23836: LD_INT 1
23838: ARRAY
23839: PPUSH
23840: LD_VAR 0 4
23844: PUSH
23845: LD_INT 2
23847: ARRAY
23848: PPUSH
23849: CALL_OW 458
23853: NOT
23854: IFFALSE 23858
// continue ;
23856: GO 23828
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23858: LD_VAR 0 4
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: PPUSH
23867: LD_VAR 0 4
23871: PUSH
23872: LD_INT 2
23874: ARRAY
23875: PPUSH
23876: CALL_OW 428
23880: PUSH
23881: LD_VAR 0 5
23885: IN
23886: IFFALSE 23915
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23888: LD_VAR 0 4
23892: PUSH
23893: LD_INT 1
23895: ARRAY
23896: PPUSH
23897: LD_VAR 0 4
23901: PUSH
23902: LD_INT 2
23904: ARRAY
23905: PPUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 456
// end ;
23915: GO 23828
23917: POP
23918: POP
// end ;
23919: LD_VAR 0 3
23923: RET
// export function Count ( array ) ; var i ; begin
23924: LD_INT 0
23926: PPUSH
23927: PPUSH
// result := 0 ;
23928: LD_ADDR_VAR 0 2
23932: PUSH
23933: LD_INT 0
23935: ST_TO_ADDR
// for i in array do
23936: LD_ADDR_VAR 0 3
23940: PUSH
23941: LD_VAR 0 1
23945: PUSH
23946: FOR_IN
23947: IFFALSE 23971
// if i then
23949: LD_VAR 0 3
23953: IFFALSE 23969
// result := result + 1 ;
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: LD_VAR 0 2
23964: PUSH
23965: LD_INT 1
23967: PLUS
23968: ST_TO_ADDR
23969: GO 23946
23971: POP
23972: POP
// end ;
23973: LD_VAR 0 2
23977: RET
// export function IsEmpty ( building ) ; begin
23978: LD_INT 0
23980: PPUSH
// if not building then
23981: LD_VAR 0 1
23985: NOT
23986: IFFALSE 23990
// exit ;
23988: GO 24033
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23990: LD_ADDR_VAR 0 2
23994: PUSH
23995: LD_VAR 0 1
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 255
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 58
24019: PUSH
24020: EMPTY
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 69
24031: IN
24032: ST_TO_ADDR
// end ;
24033: LD_VAR 0 2
24037: RET
// export function IsNotFull ( building ) ; begin
24038: LD_INT 0
24040: PPUSH
// if not building then
24041: LD_VAR 0 1
24045: NOT
24046: IFFALSE 24050
// exit ;
24048: GO 24069
// result := UnitsInside ( building ) < 6 ;
24050: LD_ADDR_VAR 0 2
24054: PUSH
24055: LD_VAR 0 1
24059: PPUSH
24060: CALL_OW 313
24064: PUSH
24065: LD_INT 6
24067: LESS
24068: ST_TO_ADDR
// end ;
24069: LD_VAR 0 2
24073: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24074: LD_INT 0
24076: PPUSH
24077: PPUSH
24078: PPUSH
24079: PPUSH
// tmp := [ ] ;
24080: LD_ADDR_VAR 0 3
24084: PUSH
24085: EMPTY
24086: ST_TO_ADDR
// list := [ ] ;
24087: LD_ADDR_VAR 0 5
24091: PUSH
24092: EMPTY
24093: ST_TO_ADDR
// for i = 16 to 25 do
24094: LD_ADDR_VAR 0 4
24098: PUSH
24099: DOUBLE
24100: LD_INT 16
24102: DEC
24103: ST_TO_ADDR
24104: LD_INT 25
24106: PUSH
24107: FOR_TO
24108: IFFALSE 24181
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_VAR 0 3
24119: PUSH
24120: LD_INT 22
24122: PUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 255
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 91
24139: PUSH
24140: LD_VAR 0 1
24144: PUSH
24145: LD_INT 6
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 30
24155: PUSH
24156: LD_VAR 0 4
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: PPUSH
24173: CALL_OW 69
24177: ADD
24178: ST_TO_ADDR
24179: GO 24107
24181: POP
24182: POP
// for i = 1 to tmp do
24183: LD_ADDR_VAR 0 4
24187: PUSH
24188: DOUBLE
24189: LD_INT 1
24191: DEC
24192: ST_TO_ADDR
24193: LD_VAR 0 3
24197: PUSH
24198: FOR_TO
24199: IFFALSE 24287
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24201: LD_ADDR_VAR 0 5
24205: PUSH
24206: LD_VAR 0 5
24210: PUSH
24211: LD_VAR 0 3
24215: PUSH
24216: LD_VAR 0 4
24220: ARRAY
24221: PPUSH
24222: CALL_OW 266
24226: PUSH
24227: LD_VAR 0 3
24231: PUSH
24232: LD_VAR 0 4
24236: ARRAY
24237: PPUSH
24238: CALL_OW 250
24242: PUSH
24243: LD_VAR 0 3
24247: PUSH
24248: LD_VAR 0 4
24252: ARRAY
24253: PPUSH
24254: CALL_OW 251
24258: PUSH
24259: LD_VAR 0 3
24263: PUSH
24264: LD_VAR 0 4
24268: ARRAY
24269: PPUSH
24270: CALL_OW 254
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: ADD
24284: ST_TO_ADDR
24285: GO 24198
24287: POP
24288: POP
// result := list ;
24289: LD_ADDR_VAR 0 2
24293: PUSH
24294: LD_VAR 0 5
24298: ST_TO_ADDR
// end ;
24299: LD_VAR 0 2
24303: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
24310: PPUSH
24311: PPUSH
24312: PPUSH
// if not factory then
24313: LD_VAR 0 1
24317: NOT
24318: IFFALSE 24322
// exit ;
24320: GO 24915
// if control = control_apeman then
24322: LD_VAR 0 4
24326: PUSH
24327: LD_INT 5
24329: EQUAL
24330: IFFALSE 24439
// begin tmp := UnitsInside ( factory ) ;
24332: LD_ADDR_VAR 0 8
24336: PUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 313
24346: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24347: LD_VAR 0 8
24351: PPUSH
24352: LD_INT 25
24354: PUSH
24355: LD_INT 12
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PPUSH
24362: CALL_OW 72
24366: NOT
24367: IFFALSE 24377
// control := control_manual ;
24369: LD_ADDR_VAR 0 4
24373: PUSH
24374: LD_INT 1
24376: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24377: LD_ADDR_VAR 0 8
24381: PUSH
24382: LD_VAR 0 1
24386: PPUSH
24387: CALL 24074 0 1
24391: ST_TO_ADDR
// if tmp then
24392: LD_VAR 0 8
24396: IFFALSE 24439
// begin for i in tmp do
24398: LD_ADDR_VAR 0 7
24402: PUSH
24403: LD_VAR 0 8
24407: PUSH
24408: FOR_IN
24409: IFFALSE 24437
// if i [ 1 ] = b_ext_radio then
24411: LD_VAR 0 7
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PUSH
24420: LD_INT 22
24422: EQUAL
24423: IFFALSE 24435
// begin control := control_remote ;
24425: LD_ADDR_VAR 0 4
24429: PUSH
24430: LD_INT 2
24432: ST_TO_ADDR
// break ;
24433: GO 24437
// end ;
24435: GO 24408
24437: POP
24438: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24439: LD_VAR 0 1
24443: PPUSH
24444: LD_VAR 0 2
24448: PPUSH
24449: LD_VAR 0 3
24453: PPUSH
24454: LD_VAR 0 4
24458: PPUSH
24459: LD_VAR 0 5
24463: PPUSH
24464: CALL_OW 448
24468: IFFALSE 24503
// begin result := [ chassis , engine , control , weapon ] ;
24470: LD_ADDR_VAR 0 6
24474: PUSH
24475: LD_VAR 0 2
24479: PUSH
24480: LD_VAR 0 3
24484: PUSH
24485: LD_VAR 0 4
24489: PUSH
24490: LD_VAR 0 5
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
// exit ;
24501: GO 24915
// end ; _chassis := AvailableChassisList ( factory ) ;
24503: LD_ADDR_VAR 0 9
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 475
24517: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24518: LD_ADDR_VAR 0 11
24522: PUSH
24523: LD_VAR 0 1
24527: PPUSH
24528: CALL_OW 476
24532: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24533: LD_ADDR_VAR 0 12
24537: PUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 477
24547: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24548: LD_ADDR_VAR 0 10
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 478
24562: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24563: LD_VAR 0 9
24567: NOT
24568: PUSH
24569: LD_VAR 0 11
24573: NOT
24574: OR
24575: PUSH
24576: LD_VAR 0 12
24580: NOT
24581: OR
24582: PUSH
24583: LD_VAR 0 10
24587: NOT
24588: OR
24589: IFFALSE 24624
// begin result := [ chassis , engine , control , weapon ] ;
24591: LD_ADDR_VAR 0 6
24595: PUSH
24596: LD_VAR 0 2
24600: PUSH
24601: LD_VAR 0 3
24605: PUSH
24606: LD_VAR 0 4
24610: PUSH
24611: LD_VAR 0 5
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: ST_TO_ADDR
// exit ;
24622: GO 24915
// end ; if not chassis in _chassis then
24624: LD_VAR 0 2
24628: PUSH
24629: LD_VAR 0 9
24633: IN
24634: NOT
24635: IFFALSE 24661
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_VAR 0 9
24646: PUSH
24647: LD_INT 1
24649: PPUSH
24650: LD_VAR 0 9
24654: PPUSH
24655: CALL_OW 12
24659: ARRAY
24660: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24661: LD_VAR 0 2
24665: PPUSH
24666: LD_VAR 0 3
24670: PPUSH
24671: CALL 24920 0 2
24675: NOT
24676: IFFALSE 24735
// repeat engine := _engine [ 1 ] ;
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: LD_VAR 0 11
24687: PUSH
24688: LD_INT 1
24690: ARRAY
24691: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24692: LD_ADDR_VAR 0 11
24696: PUSH
24697: LD_VAR 0 11
24701: PPUSH
24702: LD_INT 1
24704: PPUSH
24705: CALL_OW 3
24709: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: CALL 24920 0 2
24724: PUSH
24725: LD_VAR 0 11
24729: PUSH
24730: EMPTY
24731: EQUAL
24732: OR
24733: IFFALSE 24678
// if not control in _control then
24735: LD_VAR 0 4
24739: PUSH
24740: LD_VAR 0 12
24744: IN
24745: NOT
24746: IFFALSE 24772
// control := _control [ rand ( 1 , _control ) ] ;
24748: LD_ADDR_VAR 0 4
24752: PUSH
24753: LD_VAR 0 12
24757: PUSH
24758: LD_INT 1
24760: PPUSH
24761: LD_VAR 0 12
24765: PPUSH
24766: CALL_OW 12
24770: ARRAY
24771: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24772: LD_VAR 0 2
24776: PPUSH
24777: LD_VAR 0 5
24781: PPUSH
24782: CALL 25140 0 2
24786: NOT
24787: IFFALSE 24846
// repeat weapon := _weapon [ 1 ] ;
24789: LD_ADDR_VAR 0 5
24793: PUSH
24794: LD_VAR 0 10
24798: PUSH
24799: LD_INT 1
24801: ARRAY
24802: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24803: LD_ADDR_VAR 0 10
24807: PUSH
24808: LD_VAR 0 10
24812: PPUSH
24813: LD_INT 1
24815: PPUSH
24816: CALL_OW 3
24820: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24821: LD_VAR 0 2
24825: PPUSH
24826: LD_VAR 0 5
24830: PPUSH
24831: CALL 25140 0 2
24835: PUSH
24836: LD_VAR 0 10
24840: PUSH
24841: EMPTY
24842: EQUAL
24843: OR
24844: IFFALSE 24789
// result := [ ] ;
24846: LD_ADDR_VAR 0 6
24850: PUSH
24851: EMPTY
24852: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: LD_VAR 0 5
24877: PPUSH
24878: CALL_OW 448
24882: IFFALSE 24915
// result := [ chassis , engine , control , weapon ] ;
24884: LD_ADDR_VAR 0 6
24888: PUSH
24889: LD_VAR 0 2
24893: PUSH
24894: LD_VAR 0 3
24898: PUSH
24899: LD_VAR 0 4
24903: PUSH
24904: LD_VAR 0 5
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
// end ;
24915: LD_VAR 0 6
24919: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24920: LD_INT 0
24922: PPUSH
// if not chassis or not engine then
24923: LD_VAR 0 1
24927: NOT
24928: PUSH
24929: LD_VAR 0 2
24933: NOT
24934: OR
24935: IFFALSE 24939
// exit ;
24937: GO 25135
// case engine of engine_solar :
24939: LD_VAR 0 2
24943: PUSH
24944: LD_INT 2
24946: DOUBLE
24947: EQUAL
24948: IFTRUE 24952
24950: GO 24990
24952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_INT 11
24960: PUSH
24961: LD_INT 12
24963: PUSH
24964: LD_INT 13
24966: PUSH
24967: LD_INT 14
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25119
24990: LD_INT 1
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25060
24998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 11
25006: PUSH
25007: LD_INT 12
25009: PUSH
25010: LD_INT 13
25012: PUSH
25013: LD_INT 14
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: LD_INT 4
25027: PUSH
25028: LD_INT 5
25030: PUSH
25031: LD_INT 21
25033: PUSH
25034: LD_INT 23
25036: PUSH
25037: LD_INT 22
25039: PUSH
25040: LD_INT 24
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: ST_TO_ADDR
25058: GO 25119
25060: LD_INT 3
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25118
25068: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25069: LD_ADDR_VAR 0 3
25073: PUSH
25074: LD_INT 13
25076: PUSH
25077: LD_INT 14
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 4
25088: PUSH
25089: LD_INT 5
25091: PUSH
25092: LD_INT 21
25094: PUSH
25095: LD_INT 22
25097: PUSH
25098: LD_INT 23
25100: PUSH
25101: LD_INT 24
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: ST_TO_ADDR
25116: GO 25119
25118: POP
// result := ( chassis in result ) ;
25119: LD_ADDR_VAR 0 3
25123: PUSH
25124: LD_VAR 0 1
25128: PUSH
25129: LD_VAR 0 3
25133: IN
25134: ST_TO_ADDR
// end ;
25135: LD_VAR 0 3
25139: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25140: LD_INT 0
25142: PPUSH
// if not chassis or not weapon then
25143: LD_VAR 0 1
25147: NOT
25148: PUSH
25149: LD_VAR 0 2
25153: NOT
25154: OR
25155: IFFALSE 25159
// exit ;
25157: GO 26221
// case weapon of us_machine_gun :
25159: LD_VAR 0 2
25163: PUSH
25164: LD_INT 2
25166: DOUBLE
25167: EQUAL
25168: IFTRUE 25172
25170: GO 25202
25172: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25173: LD_ADDR_VAR 0 3
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 4
25189: PUSH
25190: LD_INT 5
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: ST_TO_ADDR
25200: GO 26205
25202: LD_INT 3
25204: DOUBLE
25205: EQUAL
25206: IFTRUE 25210
25208: GO 25240
25210: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: LD_INT 3
25224: PUSH
25225: LD_INT 4
25227: PUSH
25228: LD_INT 5
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: ST_TO_ADDR
25238: GO 26205
25240: LD_INT 11
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25278
25248: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: LD_INT 2
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: LD_INT 4
25265: PUSH
25266: LD_INT 5
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: ST_TO_ADDR
25276: GO 26205
25278: LD_INT 4
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25312
25286: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 4
25300: PUSH
25301: LD_INT 5
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: ST_TO_ADDR
25310: GO 26205
25312: LD_INT 5
25314: DOUBLE
25315: EQUAL
25316: IFTRUE 25320
25318: GO 25346
25320: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25321: LD_ADDR_VAR 0 3
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 3
25331: PUSH
25332: LD_INT 4
25334: PUSH
25335: LD_INT 5
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: ST_TO_ADDR
25344: GO 26205
25346: LD_INT 9
25348: DOUBLE
25349: EQUAL
25350: IFTRUE 25354
25352: GO 25380
25354: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: LD_INT 4
25368: PUSH
25369: LD_INT 5
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: ST_TO_ADDR
25378: GO 26205
25380: LD_INT 7
25382: DOUBLE
25383: EQUAL
25384: IFTRUE 25388
25386: GO 25414
25388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25389: LD_ADDR_VAR 0 3
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 3
25399: PUSH
25400: LD_INT 4
25402: PUSH
25403: LD_INT 5
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: ST_TO_ADDR
25412: GO 26205
25414: LD_INT 12
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25448
25422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25423: LD_ADDR_VAR 0 3
25427: PUSH
25428: LD_INT 2
25430: PUSH
25431: LD_INT 3
25433: PUSH
25434: LD_INT 4
25436: PUSH
25437: LD_INT 5
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
25446: GO 26205
25448: LD_INT 13
25450: DOUBLE
25451: EQUAL
25452: IFTRUE 25456
25454: GO 25482
25456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25457: LD_ADDR_VAR 0 3
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: LD_INT 4
25470: PUSH
25471: LD_INT 5
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: ST_TO_ADDR
25480: GO 26205
25482: LD_INT 14
25484: DOUBLE
25485: EQUAL
25486: IFTRUE 25490
25488: GO 25508
25490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 4
25498: PUSH
25499: LD_INT 5
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: ST_TO_ADDR
25506: GO 26205
25508: LD_INT 6
25510: DOUBLE
25511: EQUAL
25512: IFTRUE 25516
25514: GO 25534
25516: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25517: LD_ADDR_VAR 0 3
25521: PUSH
25522: LD_INT 4
25524: PUSH
25525: LD_INT 5
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 26205
25534: LD_INT 10
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25560
25542: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 4
25550: PUSH
25551: LD_INT 5
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: ST_TO_ADDR
25558: GO 26205
25560: LD_INT 22
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25594
25568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25569: LD_ADDR_VAR 0 3
25573: PUSH
25574: LD_INT 11
25576: PUSH
25577: LD_INT 12
25579: PUSH
25580: LD_INT 13
25582: PUSH
25583: LD_INT 14
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: ST_TO_ADDR
25592: GO 26205
25594: LD_INT 23
25596: DOUBLE
25597: EQUAL
25598: IFTRUE 25602
25600: GO 25628
25602: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_INT 11
25610: PUSH
25611: LD_INT 12
25613: PUSH
25614: LD_INT 13
25616: PUSH
25617: LD_INT 14
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: ST_TO_ADDR
25626: GO 26205
25628: LD_INT 24
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25662
25636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25637: LD_ADDR_VAR 0 3
25641: PUSH
25642: LD_INT 11
25644: PUSH
25645: LD_INT 12
25647: PUSH
25648: LD_INT 13
25650: PUSH
25651: LD_INT 14
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: ST_TO_ADDR
25660: GO 26205
25662: LD_INT 30
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25696
25670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 11
25678: PUSH
25679: LD_INT 12
25681: PUSH
25682: LD_INT 13
25684: PUSH
25685: LD_INT 14
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: ST_TO_ADDR
25694: GO 26205
25696: LD_INT 25
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25722
25704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_INT 13
25712: PUSH
25713: LD_INT 14
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: ST_TO_ADDR
25720: GO 26205
25722: LD_INT 27
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25748
25730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_INT 13
25738: PUSH
25739: LD_INT 14
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: ST_TO_ADDR
25746: GO 26205
25748: LD_EXP 95
25752: DOUBLE
25753: EQUAL
25754: IFTRUE 25758
25756: GO 25784
25758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_INT 11
25766: PUSH
25767: LD_INT 12
25769: PUSH
25770: LD_INT 13
25772: PUSH
25773: LD_INT 14
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: ST_TO_ADDR
25782: GO 26205
25784: LD_INT 28
25786: DOUBLE
25787: EQUAL
25788: IFTRUE 25792
25790: GO 25810
25792: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_INT 13
25800: PUSH
25801: LD_INT 14
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: ST_TO_ADDR
25808: GO 26205
25810: LD_INT 29
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 25836
25818: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_INT 13
25826: PUSH
25827: LD_INT 14
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: ST_TO_ADDR
25834: GO 26205
25836: LD_INT 31
25838: DOUBLE
25839: EQUAL
25840: IFTRUE 25844
25842: GO 25862
25844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25845: LD_ADDR_VAR 0 3
25849: PUSH
25850: LD_INT 13
25852: PUSH
25853: LD_INT 14
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: ST_TO_ADDR
25860: GO 26205
25862: LD_INT 26
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25888
25870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_INT 13
25878: PUSH
25879: LD_INT 14
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 26205
25888: LD_INT 42
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25922
25896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 21
25904: PUSH
25905: LD_INT 22
25907: PUSH
25908: LD_INT 23
25910: PUSH
25911: LD_INT 24
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: ST_TO_ADDR
25920: GO 26205
25922: LD_INT 43
25924: DOUBLE
25925: EQUAL
25926: IFTRUE 25930
25928: GO 25956
25930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25931: LD_ADDR_VAR 0 3
25935: PUSH
25936: LD_INT 21
25938: PUSH
25939: LD_INT 22
25941: PUSH
25942: LD_INT 23
25944: PUSH
25945: LD_INT 24
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: ST_TO_ADDR
25954: GO 26205
25956: LD_INT 44
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 25990
25964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25965: LD_ADDR_VAR 0 3
25969: PUSH
25970: LD_INT 21
25972: PUSH
25973: LD_INT 22
25975: PUSH
25976: LD_INT 23
25978: PUSH
25979: LD_INT 24
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: ST_TO_ADDR
25988: GO 26205
25990: LD_INT 45
25992: DOUBLE
25993: EQUAL
25994: IFTRUE 25998
25996: GO 26024
25998: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_INT 21
26006: PUSH
26007: LD_INT 22
26009: PUSH
26010: LD_INT 23
26012: PUSH
26013: LD_INT 24
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: ST_TO_ADDR
26022: GO 26205
26024: LD_INT 49
26026: DOUBLE
26027: EQUAL
26028: IFTRUE 26032
26030: GO 26058
26032: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26033: LD_ADDR_VAR 0 3
26037: PUSH
26038: LD_INT 21
26040: PUSH
26041: LD_INT 22
26043: PUSH
26044: LD_INT 23
26046: PUSH
26047: LD_INT 24
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: ST_TO_ADDR
26056: GO 26205
26058: LD_INT 51
26060: DOUBLE
26061: EQUAL
26062: IFTRUE 26066
26064: GO 26092
26066: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26067: LD_ADDR_VAR 0 3
26071: PUSH
26072: LD_INT 21
26074: PUSH
26075: LD_INT 22
26077: PUSH
26078: LD_INT 23
26080: PUSH
26081: LD_INT 24
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: ST_TO_ADDR
26090: GO 26205
26092: LD_INT 52
26094: DOUBLE
26095: EQUAL
26096: IFTRUE 26100
26098: GO 26126
26100: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_INT 23
26114: PUSH
26115: LD_INT 24
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
26124: GO 26205
26126: LD_INT 53
26128: DOUBLE
26129: EQUAL
26130: IFTRUE 26134
26132: GO 26152
26134: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 23
26142: PUSH
26143: LD_INT 24
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: ST_TO_ADDR
26150: GO 26205
26152: LD_INT 46
26154: DOUBLE
26155: EQUAL
26156: IFTRUE 26160
26158: GO 26178
26160: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26161: LD_ADDR_VAR 0 3
26165: PUSH
26166: LD_INT 23
26168: PUSH
26169: LD_INT 24
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: ST_TO_ADDR
26176: GO 26205
26178: LD_INT 47
26180: DOUBLE
26181: EQUAL
26182: IFTRUE 26186
26184: GO 26204
26186: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26187: LD_ADDR_VAR 0 3
26191: PUSH
26192: LD_INT 23
26194: PUSH
26195: LD_INT 24
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: ST_TO_ADDR
26202: GO 26205
26204: POP
// result := ( chassis in result ) ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_VAR 0 1
26214: PUSH
26215: LD_VAR 0 3
26219: IN
26220: ST_TO_ADDR
// end ;
26221: LD_VAR 0 3
26225: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26226: LD_INT 0
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
// result := array ;
26235: LD_ADDR_VAR 0 5
26239: PUSH
26240: LD_VAR 0 1
26244: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26245: LD_VAR 0 1
26249: NOT
26250: PUSH
26251: LD_VAR 0 2
26255: NOT
26256: OR
26257: PUSH
26258: LD_VAR 0 3
26262: NOT
26263: OR
26264: PUSH
26265: LD_VAR 0 2
26269: PUSH
26270: LD_VAR 0 1
26274: GREATER
26275: OR
26276: PUSH
26277: LD_VAR 0 3
26281: PUSH
26282: LD_VAR 0 1
26286: GREATER
26287: OR
26288: IFFALSE 26292
// exit ;
26290: GO 26588
// if direction then
26292: LD_VAR 0 4
26296: IFFALSE 26360
// begin d := 1 ;
26298: LD_ADDR_VAR 0 9
26302: PUSH
26303: LD_INT 1
26305: ST_TO_ADDR
// if i_from > i_to then
26306: LD_VAR 0 2
26310: PUSH
26311: LD_VAR 0 3
26315: GREATER
26316: IFFALSE 26342
// length := ( array - i_from ) + i_to else
26318: LD_ADDR_VAR 0 11
26322: PUSH
26323: LD_VAR 0 1
26327: PUSH
26328: LD_VAR 0 2
26332: MINUS
26333: PUSH
26334: LD_VAR 0 3
26338: PLUS
26339: ST_TO_ADDR
26340: GO 26358
// length := i_to - i_from ;
26342: LD_ADDR_VAR 0 11
26346: PUSH
26347: LD_VAR 0 3
26351: PUSH
26352: LD_VAR 0 2
26356: MINUS
26357: ST_TO_ADDR
// end else
26358: GO 26421
// begin d := - 1 ;
26360: LD_ADDR_VAR 0 9
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: ST_TO_ADDR
// if i_from > i_to then
26369: LD_VAR 0 2
26373: PUSH
26374: LD_VAR 0 3
26378: GREATER
26379: IFFALSE 26399
// length := i_from - i_to else
26381: LD_ADDR_VAR 0 11
26385: PUSH
26386: LD_VAR 0 2
26390: PUSH
26391: LD_VAR 0 3
26395: MINUS
26396: ST_TO_ADDR
26397: GO 26421
// length := ( array - i_to ) + i_from ;
26399: LD_ADDR_VAR 0 11
26403: PUSH
26404: LD_VAR 0 1
26408: PUSH
26409: LD_VAR 0 3
26413: MINUS
26414: PUSH
26415: LD_VAR 0 2
26419: PLUS
26420: ST_TO_ADDR
// end ; if not length then
26421: LD_VAR 0 11
26425: NOT
26426: IFFALSE 26430
// exit ;
26428: GO 26588
// tmp := array ;
26430: LD_ADDR_VAR 0 10
26434: PUSH
26435: LD_VAR 0 1
26439: ST_TO_ADDR
// for i = 1 to length do
26440: LD_ADDR_VAR 0 6
26444: PUSH
26445: DOUBLE
26446: LD_INT 1
26448: DEC
26449: ST_TO_ADDR
26450: LD_VAR 0 11
26454: PUSH
26455: FOR_TO
26456: IFFALSE 26576
// begin for j = 1 to array do
26458: LD_ADDR_VAR 0 7
26462: PUSH
26463: DOUBLE
26464: LD_INT 1
26466: DEC
26467: ST_TO_ADDR
26468: LD_VAR 0 1
26472: PUSH
26473: FOR_TO
26474: IFFALSE 26562
// begin k := j + d ;
26476: LD_ADDR_VAR 0 8
26480: PUSH
26481: LD_VAR 0 7
26485: PUSH
26486: LD_VAR 0 9
26490: PLUS
26491: ST_TO_ADDR
// if k > array then
26492: LD_VAR 0 8
26496: PUSH
26497: LD_VAR 0 1
26501: GREATER
26502: IFFALSE 26512
// k := 1 ;
26504: LD_ADDR_VAR 0 8
26508: PUSH
26509: LD_INT 1
26511: ST_TO_ADDR
// if not k then
26512: LD_VAR 0 8
26516: NOT
26517: IFFALSE 26529
// k := array ;
26519: LD_ADDR_VAR 0 8
26523: PUSH
26524: LD_VAR 0 1
26528: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26529: LD_ADDR_VAR 0 10
26533: PUSH
26534: LD_VAR 0 10
26538: PPUSH
26539: LD_VAR 0 8
26543: PPUSH
26544: LD_VAR 0 1
26548: PUSH
26549: LD_VAR 0 7
26553: ARRAY
26554: PPUSH
26555: CALL_OW 1
26559: ST_TO_ADDR
// end ;
26560: GO 26473
26562: POP
26563: POP
// array := tmp ;
26564: LD_ADDR_VAR 0 1
26568: PUSH
26569: LD_VAR 0 10
26573: ST_TO_ADDR
// end ;
26574: GO 26455
26576: POP
26577: POP
// result := array ;
26578: LD_ADDR_VAR 0 5
26582: PUSH
26583: LD_VAR 0 1
26587: ST_TO_ADDR
// end ;
26588: LD_VAR 0 5
26592: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26593: LD_INT 0
26595: PPUSH
26596: PPUSH
// result := 0 ;
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 0
26604: ST_TO_ADDR
// if not array or not value in array then
26605: LD_VAR 0 1
26609: NOT
26610: PUSH
26611: LD_VAR 0 2
26615: PUSH
26616: LD_VAR 0 1
26620: IN
26621: NOT
26622: OR
26623: IFFALSE 26627
// exit ;
26625: GO 26681
// for i = 1 to array do
26627: LD_ADDR_VAR 0 4
26631: PUSH
26632: DOUBLE
26633: LD_INT 1
26635: DEC
26636: ST_TO_ADDR
26637: LD_VAR 0 1
26641: PUSH
26642: FOR_TO
26643: IFFALSE 26679
// if value = array [ i ] then
26645: LD_VAR 0 2
26649: PUSH
26650: LD_VAR 0 1
26654: PUSH
26655: LD_VAR 0 4
26659: ARRAY
26660: EQUAL
26661: IFFALSE 26677
// begin result := i ;
26663: LD_ADDR_VAR 0 3
26667: PUSH
26668: LD_VAR 0 4
26672: ST_TO_ADDR
// exit ;
26673: POP
26674: POP
26675: GO 26681
// end ;
26677: GO 26642
26679: POP
26680: POP
// end ;
26681: LD_VAR 0 3
26685: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26686: LD_INT 0
26688: PPUSH
// vc_chassis := chassis ;
26689: LD_ADDR_OWVAR 37
26693: PUSH
26694: LD_VAR 0 1
26698: ST_TO_ADDR
// vc_engine := engine ;
26699: LD_ADDR_OWVAR 39
26703: PUSH
26704: LD_VAR 0 2
26708: ST_TO_ADDR
// vc_control := control ;
26709: LD_ADDR_OWVAR 38
26713: PUSH
26714: LD_VAR 0 3
26718: ST_TO_ADDR
// vc_weapon := weapon ;
26719: LD_ADDR_OWVAR 40
26723: PUSH
26724: LD_VAR 0 4
26728: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26729: LD_ADDR_OWVAR 41
26733: PUSH
26734: LD_VAR 0 5
26738: ST_TO_ADDR
// end ;
26739: LD_VAR 0 6
26743: RET
// export function WantPlant ( unit ) ; var task ; begin
26744: LD_INT 0
26746: PPUSH
26747: PPUSH
// result := false ;
26748: LD_ADDR_VAR 0 2
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 437
26770: ST_TO_ADDR
// if task then
26771: LD_VAR 0 3
26775: IFFALSE 26803
// if task [ 1 ] [ 1 ] = p then
26777: LD_VAR 0 3
26781: PUSH
26782: LD_INT 1
26784: ARRAY
26785: PUSH
26786: LD_INT 1
26788: ARRAY
26789: PUSH
26790: LD_STRING p
26792: EQUAL
26793: IFFALSE 26803
// result := true ;
26795: LD_ADDR_VAR 0 2
26799: PUSH
26800: LD_INT 1
26802: ST_TO_ADDR
// end ;
26803: LD_VAR 0 2
26807: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
// if pos < 1 then
26814: LD_VAR 0 2
26818: PUSH
26819: LD_INT 1
26821: LESS
26822: IFFALSE 26826
// exit ;
26824: GO 27129
// if pos = 1 then
26826: LD_VAR 0 2
26830: PUSH
26831: LD_INT 1
26833: EQUAL
26834: IFFALSE 26867
// result := Replace ( arr , pos [ 1 ] , value ) else
26836: LD_ADDR_VAR 0 4
26840: PUSH
26841: LD_VAR 0 1
26845: PPUSH
26846: LD_VAR 0 2
26850: PUSH
26851: LD_INT 1
26853: ARRAY
26854: PPUSH
26855: LD_VAR 0 3
26859: PPUSH
26860: CALL_OW 1
26864: ST_TO_ADDR
26865: GO 27129
// begin tmp := arr ;
26867: LD_ADDR_VAR 0 6
26871: PUSH
26872: LD_VAR 0 1
26876: ST_TO_ADDR
// s_arr := [ tmp ] ;
26877: LD_ADDR_VAR 0 7
26881: PUSH
26882: LD_VAR 0 6
26886: PUSH
26887: EMPTY
26888: LIST
26889: ST_TO_ADDR
// for i = 1 to pos - 1 do
26890: LD_ADDR_VAR 0 5
26894: PUSH
26895: DOUBLE
26896: LD_INT 1
26898: DEC
26899: ST_TO_ADDR
26900: LD_VAR 0 2
26904: PUSH
26905: LD_INT 1
26907: MINUS
26908: PUSH
26909: FOR_TO
26910: IFFALSE 26955
// begin tmp := tmp [ pos [ i ] ] ;
26912: LD_ADDR_VAR 0 6
26916: PUSH
26917: LD_VAR 0 6
26921: PUSH
26922: LD_VAR 0 2
26926: PUSH
26927: LD_VAR 0 5
26931: ARRAY
26932: ARRAY
26933: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26934: LD_ADDR_VAR 0 7
26938: PUSH
26939: LD_VAR 0 7
26943: PUSH
26944: LD_VAR 0 6
26948: PUSH
26949: EMPTY
26950: LIST
26951: ADD
26952: ST_TO_ADDR
// end ;
26953: GO 26909
26955: POP
26956: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26957: LD_ADDR_VAR 0 6
26961: PUSH
26962: LD_VAR 0 6
26966: PPUSH
26967: LD_VAR 0 2
26971: PUSH
26972: LD_VAR 0 2
26976: ARRAY
26977: PPUSH
26978: LD_VAR 0 3
26982: PPUSH
26983: CALL_OW 1
26987: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26988: LD_ADDR_VAR 0 7
26992: PUSH
26993: LD_VAR 0 7
26997: PPUSH
26998: LD_VAR 0 7
27002: PPUSH
27003: LD_VAR 0 6
27007: PPUSH
27008: CALL_OW 1
27012: ST_TO_ADDR
// for i = s_arr downto 2 do
27013: LD_ADDR_VAR 0 5
27017: PUSH
27018: DOUBLE
27019: LD_VAR 0 7
27023: INC
27024: ST_TO_ADDR
27025: LD_INT 2
27027: PUSH
27028: FOR_DOWNTO
27029: IFFALSE 27113
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27031: LD_ADDR_VAR 0 6
27035: PUSH
27036: LD_VAR 0 7
27040: PUSH
27041: LD_VAR 0 5
27045: PUSH
27046: LD_INT 1
27048: MINUS
27049: ARRAY
27050: PPUSH
27051: LD_VAR 0 2
27055: PUSH
27056: LD_VAR 0 5
27060: PUSH
27061: LD_INT 1
27063: MINUS
27064: ARRAY
27065: PPUSH
27066: LD_VAR 0 7
27070: PUSH
27071: LD_VAR 0 5
27075: ARRAY
27076: PPUSH
27077: CALL_OW 1
27081: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27082: LD_ADDR_VAR 0 7
27086: PUSH
27087: LD_VAR 0 7
27091: PPUSH
27092: LD_VAR 0 5
27096: PUSH
27097: LD_INT 1
27099: MINUS
27100: PPUSH
27101: LD_VAR 0 6
27105: PPUSH
27106: CALL_OW 1
27110: ST_TO_ADDR
// end ;
27111: GO 27028
27113: POP
27114: POP
// result := s_arr [ 1 ] ;
27115: LD_ADDR_VAR 0 4
27119: PUSH
27120: LD_VAR 0 7
27124: PUSH
27125: LD_INT 1
27127: ARRAY
27128: ST_TO_ADDR
// end ; end ;
27129: LD_VAR 0 4
27133: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
// if not list then
27138: LD_VAR 0 1
27142: NOT
27143: IFFALSE 27147
// exit ;
27145: GO 27238
// i := list [ pos1 ] ;
27147: LD_ADDR_VAR 0 5
27151: PUSH
27152: LD_VAR 0 1
27156: PUSH
27157: LD_VAR 0 2
27161: ARRAY
27162: ST_TO_ADDR
// if not i then
27163: LD_VAR 0 5
27167: NOT
27168: IFFALSE 27172
// exit ;
27170: GO 27238
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27172: LD_ADDR_VAR 0 1
27176: PUSH
27177: LD_VAR 0 1
27181: PPUSH
27182: LD_VAR 0 2
27186: PPUSH
27187: LD_VAR 0 1
27191: PUSH
27192: LD_VAR 0 3
27196: ARRAY
27197: PPUSH
27198: CALL_OW 1
27202: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27203: LD_ADDR_VAR 0 1
27207: PUSH
27208: LD_VAR 0 1
27212: PPUSH
27213: LD_VAR 0 3
27217: PPUSH
27218: LD_VAR 0 5
27222: PPUSH
27223: CALL_OW 1
27227: ST_TO_ADDR
// result := list ;
27228: LD_ADDR_VAR 0 4
27232: PUSH
27233: LD_VAR 0 1
27237: ST_TO_ADDR
// end ;
27238: LD_VAR 0 4
27242: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27243: LD_INT 0
27245: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27246: LD_ADDR_VAR 0 5
27250: PUSH
27251: LD_VAR 0 1
27255: PPUSH
27256: CALL_OW 250
27260: PPUSH
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 251
27270: PPUSH
27271: LD_VAR 0 2
27275: PPUSH
27276: LD_VAR 0 3
27280: PPUSH
27281: LD_VAR 0 4
27285: PPUSH
27286: CALL 27296 0 5
27290: ST_TO_ADDR
// end ;
27291: LD_VAR 0 5
27295: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27296: LD_INT 0
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
// if not list then
27302: LD_VAR 0 3
27306: NOT
27307: IFFALSE 27311
// exit ;
27309: GO 27699
// result := [ ] ;
27311: LD_ADDR_VAR 0 6
27315: PUSH
27316: EMPTY
27317: ST_TO_ADDR
// for i in list do
27318: LD_ADDR_VAR 0 7
27322: PUSH
27323: LD_VAR 0 3
27327: PUSH
27328: FOR_IN
27329: IFFALSE 27531
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27331: LD_ADDR_VAR 0 9
27335: PUSH
27336: LD_VAR 0 7
27340: PPUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_VAR 0 2
27350: PPUSH
27351: CALL_OW 297
27355: ST_TO_ADDR
// if not result then
27356: LD_VAR 0 6
27360: NOT
27361: IFFALSE 27387
// result := [ [ i , tmp ] ] else
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_VAR 0 7
27372: PUSH
27373: LD_VAR 0 9
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: EMPTY
27383: LIST
27384: ST_TO_ADDR
27385: GO 27529
// begin if result [ result ] [ 2 ] < tmp then
27387: LD_VAR 0 6
27391: PUSH
27392: LD_VAR 0 6
27396: ARRAY
27397: PUSH
27398: LD_INT 2
27400: ARRAY
27401: PUSH
27402: LD_VAR 0 9
27406: LESS
27407: IFFALSE 27449
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27409: LD_ADDR_VAR 0 6
27413: PUSH
27414: LD_VAR 0 6
27418: PPUSH
27419: LD_VAR 0 6
27423: PUSH
27424: LD_INT 1
27426: PLUS
27427: PPUSH
27428: LD_VAR 0 7
27432: PUSH
27433: LD_VAR 0 9
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 2
27446: ST_TO_ADDR
27447: GO 27529
// for j = 1 to result do
27449: LD_ADDR_VAR 0 8
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_VAR 0 6
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27527
// begin if tmp < result [ j ] [ 2 ] then
27467: LD_VAR 0 9
27471: PUSH
27472: LD_VAR 0 6
27476: PUSH
27477: LD_VAR 0 8
27481: ARRAY
27482: PUSH
27483: LD_INT 2
27485: ARRAY
27486: LESS
27487: IFFALSE 27525
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27489: LD_ADDR_VAR 0 6
27493: PUSH
27494: LD_VAR 0 6
27498: PPUSH
27499: LD_VAR 0 8
27503: PPUSH
27504: LD_VAR 0 7
27508: PUSH
27509: LD_VAR 0 9
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL_OW 2
27522: ST_TO_ADDR
// break ;
27523: GO 27527
// end ; end ;
27525: GO 27464
27527: POP
27528: POP
// end ; end ;
27529: GO 27328
27531: POP
27532: POP
// if result and not asc then
27533: LD_VAR 0 6
27537: PUSH
27538: LD_VAR 0 4
27542: NOT
27543: AND
27544: IFFALSE 27619
// begin tmp := result ;
27546: LD_ADDR_VAR 0 9
27550: PUSH
27551: LD_VAR 0 6
27555: ST_TO_ADDR
// for i = tmp downto 1 do
27556: LD_ADDR_VAR 0 7
27560: PUSH
27561: DOUBLE
27562: LD_VAR 0 9
27566: INC
27567: ST_TO_ADDR
27568: LD_INT 1
27570: PUSH
27571: FOR_DOWNTO
27572: IFFALSE 27617
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27574: LD_ADDR_VAR 0 6
27578: PUSH
27579: LD_VAR 0 6
27583: PPUSH
27584: LD_VAR 0 9
27588: PUSH
27589: LD_VAR 0 7
27593: MINUS
27594: PUSH
27595: LD_INT 1
27597: PLUS
27598: PPUSH
27599: LD_VAR 0 9
27603: PUSH
27604: LD_VAR 0 7
27608: ARRAY
27609: PPUSH
27610: CALL_OW 1
27614: ST_TO_ADDR
27615: GO 27571
27617: POP
27618: POP
// end ; tmp := [ ] ;
27619: LD_ADDR_VAR 0 9
27623: PUSH
27624: EMPTY
27625: ST_TO_ADDR
// if mode then
27626: LD_VAR 0 5
27630: IFFALSE 27699
// begin for i = 1 to result do
27632: LD_ADDR_VAR 0 7
27636: PUSH
27637: DOUBLE
27638: LD_INT 1
27640: DEC
27641: ST_TO_ADDR
27642: LD_VAR 0 6
27646: PUSH
27647: FOR_TO
27648: IFFALSE 27687
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27650: LD_ADDR_VAR 0 9
27654: PUSH
27655: LD_VAR 0 9
27659: PPUSH
27660: LD_VAR 0 7
27664: PPUSH
27665: LD_VAR 0 6
27669: PUSH
27670: LD_VAR 0 7
27674: ARRAY
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: PPUSH
27680: CALL_OW 1
27684: ST_TO_ADDR
27685: GO 27647
27687: POP
27688: POP
// result := tmp ;
27689: LD_ADDR_VAR 0 6
27693: PUSH
27694: LD_VAR 0 9
27698: ST_TO_ADDR
// end ; end ;
27699: LD_VAR 0 6
27703: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27704: LD_INT 0
27706: PPUSH
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27712: LD_ADDR_VAR 0 5
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// if not x or not y then
27734: LD_VAR 0 2
27738: NOT
27739: PUSH
27740: LD_VAR 0 3
27744: NOT
27745: OR
27746: IFFALSE 27750
// exit ;
27748: GO 29402
// if not range then
27750: LD_VAR 0 4
27754: NOT
27755: IFFALSE 27765
// range := 10 ;
27757: LD_ADDR_VAR 0 4
27761: PUSH
27762: LD_INT 10
27764: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27765: LD_ADDR_VAR 0 8
27769: PUSH
27770: LD_INT 81
27772: PUSH
27773: LD_VAR 0 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 92
27784: PUSH
27785: LD_VAR 0 2
27789: PUSH
27790: LD_VAR 0 3
27794: PUSH
27795: LD_VAR 0 4
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 3
27808: PUSH
27809: LD_INT 21
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: PPUSH
27828: CALL_OW 69
27832: ST_TO_ADDR
// if not tmp then
27833: LD_VAR 0 8
27837: NOT
27838: IFFALSE 27842
// exit ;
27840: GO 29402
// for i in tmp do
27842: LD_ADDR_VAR 0 6
27846: PUSH
27847: LD_VAR 0 8
27851: PUSH
27852: FOR_IN
27853: IFFALSE 29377
// begin points := [ 0 , 0 , 0 ] ;
27855: LD_ADDR_VAR 0 9
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// bpoints := 1 ;
27874: LD_ADDR_VAR 0 10
27878: PUSH
27879: LD_INT 1
27881: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27882: LD_VAR 0 6
27886: PPUSH
27887: CALL_OW 247
27891: PUSH
27892: LD_INT 1
27894: DOUBLE
27895: EQUAL
27896: IFTRUE 27900
27898: GO 28478
27900: POP
// begin if GetClass ( i ) = 1 then
27901: LD_VAR 0 6
27905: PPUSH
27906: CALL_OW 257
27910: PUSH
27911: LD_INT 1
27913: EQUAL
27914: IFFALSE 27935
// points := [ 10 , 5 , 3 ] ;
27916: LD_ADDR_VAR 0 9
27920: PUSH
27921: LD_INT 10
27923: PUSH
27924: LD_INT 5
27926: PUSH
27927: LD_INT 3
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27935: LD_VAR 0 6
27939: PPUSH
27940: CALL_OW 257
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: LD_INT 3
27950: PUSH
27951: LD_INT 4
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: IN
27959: IFFALSE 27980
// points := [ 3 , 2 , 1 ] ;
27961: LD_ADDR_VAR 0 9
27965: PUSH
27966: LD_INT 3
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27980: LD_VAR 0 6
27984: PPUSH
27985: CALL_OW 257
27989: PUSH
27990: LD_INT 5
27992: EQUAL
27993: IFFALSE 28014
// points := [ 130 , 5 , 2 ] ;
27995: LD_ADDR_VAR 0 9
27999: PUSH
28000: LD_INT 130
28002: PUSH
28003: LD_INT 5
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28014: LD_VAR 0 6
28018: PPUSH
28019: CALL_OW 257
28023: PUSH
28024: LD_INT 8
28026: EQUAL
28027: IFFALSE 28048
// points := [ 35 , 35 , 30 ] ;
28029: LD_ADDR_VAR 0 9
28033: PUSH
28034: LD_INT 35
28036: PUSH
28037: LD_INT 35
28039: PUSH
28040: LD_INT 30
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28048: LD_VAR 0 6
28052: PPUSH
28053: CALL_OW 257
28057: PUSH
28058: LD_INT 9
28060: EQUAL
28061: IFFALSE 28082
// points := [ 20 , 55 , 40 ] ;
28063: LD_ADDR_VAR 0 9
28067: PUSH
28068: LD_INT 20
28070: PUSH
28071: LD_INT 55
28073: PUSH
28074: LD_INT 40
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28082: LD_VAR 0 6
28086: PPUSH
28087: CALL_OW 257
28091: PUSH
28092: LD_INT 12
28094: PUSH
28095: LD_INT 16
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: IN
28102: IFFALSE 28123
// points := [ 5 , 3 , 2 ] ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: LD_INT 5
28111: PUSH
28112: LD_INT 3
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28123: LD_VAR 0 6
28127: PPUSH
28128: CALL_OW 257
28132: PUSH
28133: LD_INT 17
28135: EQUAL
28136: IFFALSE 28157
// points := [ 100 , 50 , 75 ] ;
28138: LD_ADDR_VAR 0 9
28142: PUSH
28143: LD_INT 100
28145: PUSH
28146: LD_INT 50
28148: PUSH
28149: LD_INT 75
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28157: LD_VAR 0 6
28161: PPUSH
28162: CALL_OW 257
28166: PUSH
28167: LD_INT 15
28169: EQUAL
28170: IFFALSE 28191
// points := [ 10 , 5 , 3 ] ;
28172: LD_ADDR_VAR 0 9
28176: PUSH
28177: LD_INT 10
28179: PUSH
28180: LD_INT 5
28182: PUSH
28183: LD_INT 3
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28191: LD_VAR 0 6
28195: PPUSH
28196: CALL_OW 257
28200: PUSH
28201: LD_INT 14
28203: EQUAL
28204: IFFALSE 28225
// points := [ 10 , 0 , 0 ] ;
28206: LD_ADDR_VAR 0 9
28210: PUSH
28211: LD_INT 10
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28225: LD_VAR 0 6
28229: PPUSH
28230: CALL_OW 257
28234: PUSH
28235: LD_INT 11
28237: EQUAL
28238: IFFALSE 28259
// points := [ 30 , 10 , 5 ] ;
28240: LD_ADDR_VAR 0 9
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 10
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_INT 5
28266: PPUSH
28267: CALL_OW 321
28271: PUSH
28272: LD_INT 2
28274: EQUAL
28275: IFFALSE 28292
// bpoints := bpoints * 1.8 ;
28277: LD_ADDR_VAR 0 10
28281: PUSH
28282: LD_VAR 0 10
28286: PUSH
28287: LD_REAL  1.80000000000000E+0000
28290: MUL
28291: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28292: LD_VAR 0 6
28296: PPUSH
28297: CALL_OW 257
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: LD_INT 3
28310: PUSH
28311: LD_INT 4
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: IN
28320: PUSH
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_INT 51
28328: PPUSH
28329: CALL_OW 321
28333: PUSH
28334: LD_INT 2
28336: EQUAL
28337: AND
28338: IFFALSE 28355
// bpoints := bpoints * 1.2 ;
28340: LD_ADDR_VAR 0 10
28344: PUSH
28345: LD_VAR 0 10
28349: PUSH
28350: LD_REAL  1.20000000000000E+0000
28353: MUL
28354: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28355: LD_VAR 0 6
28359: PPUSH
28360: CALL_OW 257
28364: PUSH
28365: LD_INT 5
28367: PUSH
28368: LD_INT 7
28370: PUSH
28371: LD_INT 9
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: IN
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: LD_INT 52
28387: PPUSH
28388: CALL_OW 321
28392: PUSH
28393: LD_INT 2
28395: EQUAL
28396: AND
28397: IFFALSE 28414
// bpoints := bpoints * 1.5 ;
28399: LD_ADDR_VAR 0 10
28403: PUSH
28404: LD_VAR 0 10
28408: PUSH
28409: LD_REAL  1.50000000000000E+0000
28412: MUL
28413: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28414: LD_VAR 0 1
28418: PPUSH
28419: LD_INT 66
28421: PPUSH
28422: CALL_OW 321
28426: PUSH
28427: LD_INT 2
28429: EQUAL
28430: IFFALSE 28447
// bpoints := bpoints * 1.1 ;
28432: LD_ADDR_VAR 0 10
28436: PUSH
28437: LD_VAR 0 10
28441: PUSH
28442: LD_REAL  1.10000000000000E+0000
28445: MUL
28446: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28447: LD_ADDR_VAR 0 10
28451: PUSH
28452: LD_VAR 0 10
28456: PUSH
28457: LD_VAR 0 6
28461: PPUSH
28462: LD_INT 1
28464: PPUSH
28465: CALL_OW 259
28469: PUSH
28470: LD_REAL  1.15000000000000E+0000
28473: MUL
28474: MUL
28475: ST_TO_ADDR
// end ; unit_vehicle :
28476: GO 29306
28478: LD_INT 2
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 29294
28486: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28487: LD_VAR 0 6
28491: PPUSH
28492: CALL_OW 264
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 42
28502: PUSH
28503: LD_INT 24
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: IN
28511: IFFALSE 28532
// points := [ 25 , 5 , 3 ] ;
28513: LD_ADDR_VAR 0 9
28517: PUSH
28518: LD_INT 25
28520: PUSH
28521: LD_INT 5
28523: PUSH
28524: LD_INT 3
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28532: LD_VAR 0 6
28536: PPUSH
28537: CALL_OW 264
28541: PUSH
28542: LD_INT 4
28544: PUSH
28545: LD_INT 43
28547: PUSH
28548: LD_INT 25
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: IN
28556: IFFALSE 28577
// points := [ 40 , 15 , 5 ] ;
28558: LD_ADDR_VAR 0 9
28562: PUSH
28563: LD_INT 40
28565: PUSH
28566: LD_INT 15
28568: PUSH
28569: LD_INT 5
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28577: LD_VAR 0 6
28581: PPUSH
28582: CALL_OW 264
28586: PUSH
28587: LD_INT 3
28589: PUSH
28590: LD_INT 23
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: IN
28597: IFFALSE 28618
// points := [ 7 , 25 , 8 ] ;
28599: LD_ADDR_VAR 0 9
28603: PUSH
28604: LD_INT 7
28606: PUSH
28607: LD_INT 25
28609: PUSH
28610: LD_INT 8
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: LIST
28617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28618: LD_VAR 0 6
28622: PPUSH
28623: CALL_OW 264
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: LD_INT 27
28633: PUSH
28634: LD_INT 44
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: IN
28642: IFFALSE 28663
// points := [ 14 , 50 , 16 ] ;
28644: LD_ADDR_VAR 0 9
28648: PUSH
28649: LD_INT 14
28651: PUSH
28652: LD_INT 50
28654: PUSH
28655: LD_INT 16
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28663: LD_VAR 0 6
28667: PPUSH
28668: CALL_OW 264
28672: PUSH
28673: LD_INT 6
28675: PUSH
28676: LD_INT 46
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: IN
28683: IFFALSE 28704
// points := [ 32 , 120 , 70 ] ;
28685: LD_ADDR_VAR 0 9
28689: PUSH
28690: LD_INT 32
28692: PUSH
28693: LD_INT 120
28695: PUSH
28696: LD_INT 70
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28704: LD_VAR 0 6
28708: PPUSH
28709: CALL_OW 264
28713: PUSH
28714: LD_INT 7
28716: PUSH
28717: LD_INT 28
28719: PUSH
28720: LD_INT 45
28722: PUSH
28723: LD_EXP 95
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: IN
28734: IFFALSE 28755
// points := [ 35 , 20 , 45 ] ;
28736: LD_ADDR_VAR 0 9
28740: PUSH
28741: LD_INT 35
28743: PUSH
28744: LD_INT 20
28746: PUSH
28747: LD_INT 45
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28755: LD_VAR 0 6
28759: PPUSH
28760: CALL_OW 264
28764: PUSH
28765: LD_INT 47
28767: PUSH
28768: EMPTY
28769: LIST
28770: IN
28771: IFFALSE 28792
// points := [ 67 , 45 , 75 ] ;
28773: LD_ADDR_VAR 0 9
28777: PUSH
28778: LD_INT 67
28780: PUSH
28781: LD_INT 45
28783: PUSH
28784: LD_INT 75
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28792: LD_VAR 0 6
28796: PPUSH
28797: CALL_OW 264
28801: PUSH
28802: LD_INT 26
28804: PUSH
28805: EMPTY
28806: LIST
28807: IN
28808: IFFALSE 28829
// points := [ 120 , 30 , 80 ] ;
28810: LD_ADDR_VAR 0 9
28814: PUSH
28815: LD_INT 120
28817: PUSH
28818: LD_INT 30
28820: PUSH
28821: LD_INT 80
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28829: LD_VAR 0 6
28833: PPUSH
28834: CALL_OW 264
28838: PUSH
28839: LD_INT 22
28841: PUSH
28842: EMPTY
28843: LIST
28844: IN
28845: IFFALSE 28866
// points := [ 40 , 1 , 1 ] ;
28847: LD_ADDR_VAR 0 9
28851: PUSH
28852: LD_INT 40
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28866: LD_VAR 0 6
28870: PPUSH
28871: CALL_OW 264
28875: PUSH
28876: LD_INT 29
28878: PUSH
28879: EMPTY
28880: LIST
28881: IN
28882: IFFALSE 28903
// points := [ 70 , 200 , 400 ] ;
28884: LD_ADDR_VAR 0 9
28888: PUSH
28889: LD_INT 70
28891: PUSH
28892: LD_INT 200
28894: PUSH
28895: LD_INT 400
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28903: LD_VAR 0 6
28907: PPUSH
28908: CALL_OW 264
28912: PUSH
28913: LD_INT 14
28915: PUSH
28916: LD_INT 53
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: IN
28923: IFFALSE 28944
// points := [ 40 , 10 , 20 ] ;
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: LD_INT 40
28932: PUSH
28933: LD_INT 10
28935: PUSH
28936: LD_INT 20
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28944: LD_VAR 0 6
28948: PPUSH
28949: CALL_OW 264
28953: PUSH
28954: LD_INT 9
28956: PUSH
28957: EMPTY
28958: LIST
28959: IN
28960: IFFALSE 28981
// points := [ 5 , 70 , 20 ] ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_INT 5
28969: PUSH
28970: LD_INT 70
28972: PUSH
28973: LD_INT 20
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 264
28990: PUSH
28991: LD_INT 10
28993: PUSH
28994: EMPTY
28995: LIST
28996: IN
28997: IFFALSE 29018
// points := [ 35 , 110 , 70 ] ;
28999: LD_ADDR_VAR 0 9
29003: PUSH
29004: LD_INT 35
29006: PUSH
29007: LD_INT 110
29009: PUSH
29010: LD_INT 70
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29018: LD_VAR 0 6
29022: PPUSH
29023: CALL_OW 265
29027: PUSH
29028: LD_INT 25
29030: EQUAL
29031: IFFALSE 29052
// points := [ 80 , 65 , 100 ] ;
29033: LD_ADDR_VAR 0 9
29037: PUSH
29038: LD_INT 80
29040: PUSH
29041: LD_INT 65
29043: PUSH
29044: LD_INT 100
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 263
29061: PUSH
29062: LD_INT 1
29064: EQUAL
29065: IFFALSE 29100
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29067: LD_ADDR_VAR 0 10
29071: PUSH
29072: LD_VAR 0 10
29076: PUSH
29077: LD_VAR 0 6
29081: PPUSH
29082: CALL_OW 311
29086: PPUSH
29087: LD_INT 3
29089: PPUSH
29090: CALL_OW 259
29094: PUSH
29095: LD_INT 4
29097: MUL
29098: MUL
29099: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29100: LD_VAR 0 6
29104: PPUSH
29105: CALL_OW 263
29109: PUSH
29110: LD_INT 2
29112: EQUAL
29113: IFFALSE 29164
// begin j := IsControledBy ( i ) ;
29115: LD_ADDR_VAR 0 7
29119: PUSH
29120: LD_VAR 0 6
29124: PPUSH
29125: CALL_OW 312
29129: ST_TO_ADDR
// if j then
29130: LD_VAR 0 7
29134: IFFALSE 29164
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29136: LD_ADDR_VAR 0 10
29140: PUSH
29141: LD_VAR 0 10
29145: PUSH
29146: LD_VAR 0 7
29150: PPUSH
29151: LD_INT 3
29153: PPUSH
29154: CALL_OW 259
29158: PUSH
29159: LD_INT 3
29161: MUL
29162: MUL
29163: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29164: LD_VAR 0 6
29168: PPUSH
29169: CALL_OW 264
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: LD_INT 6
29179: PUSH
29180: LD_INT 46
29182: PUSH
29183: LD_INT 44
29185: PUSH
29186: LD_INT 47
29188: PUSH
29189: LD_INT 45
29191: PUSH
29192: LD_INT 28
29194: PUSH
29195: LD_INT 7
29197: PUSH
29198: LD_INT 27
29200: PUSH
29201: LD_INT 29
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: IN
29216: PUSH
29217: LD_VAR 0 1
29221: PPUSH
29222: LD_INT 52
29224: PPUSH
29225: CALL_OW 321
29229: PUSH
29230: LD_INT 2
29232: EQUAL
29233: AND
29234: IFFALSE 29251
// bpoints := bpoints * 1.2 ;
29236: LD_ADDR_VAR 0 10
29240: PUSH
29241: LD_VAR 0 10
29245: PUSH
29246: LD_REAL  1.20000000000000E+0000
29249: MUL
29250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29251: LD_VAR 0 6
29255: PPUSH
29256: CALL_OW 264
29260: PUSH
29261: LD_INT 6
29263: PUSH
29264: LD_INT 46
29266: PUSH
29267: LD_INT 47
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: IN
29275: IFFALSE 29292
// bpoints := bpoints * 1.2 ;
29277: LD_ADDR_VAR 0 10
29281: PUSH
29282: LD_VAR 0 10
29286: PUSH
29287: LD_REAL  1.20000000000000E+0000
29290: MUL
29291: ST_TO_ADDR
// end ; unit_building :
29292: GO 29306
29294: LD_INT 3
29296: DOUBLE
29297: EQUAL
29298: IFTRUE 29302
29300: GO 29305
29302: POP
// ; end ;
29303: GO 29306
29305: POP
// for j = 1 to 3 do
29306: LD_ADDR_VAR 0 7
29310: PUSH
29311: DOUBLE
29312: LD_INT 1
29314: DEC
29315: ST_TO_ADDR
29316: LD_INT 3
29318: PUSH
29319: FOR_TO
29320: IFFALSE 29373
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29322: LD_ADDR_VAR 0 5
29326: PUSH
29327: LD_VAR 0 5
29331: PPUSH
29332: LD_VAR 0 7
29336: PPUSH
29337: LD_VAR 0 5
29341: PUSH
29342: LD_VAR 0 7
29346: ARRAY
29347: PUSH
29348: LD_VAR 0 9
29352: PUSH
29353: LD_VAR 0 7
29357: ARRAY
29358: PUSH
29359: LD_VAR 0 10
29363: MUL
29364: PLUS
29365: PPUSH
29366: CALL_OW 1
29370: ST_TO_ADDR
29371: GO 29319
29373: POP
29374: POP
// end ;
29375: GO 27852
29377: POP
29378: POP
// result := Replace ( result , 4 , tmp ) ;
29379: LD_ADDR_VAR 0 5
29383: PUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: LD_INT 4
29391: PPUSH
29392: LD_VAR 0 8
29396: PPUSH
29397: CALL_OW 1
29401: ST_TO_ADDR
// end ;
29402: LD_VAR 0 5
29406: RET
// export function DangerAtRange ( unit , range ) ; begin
29407: LD_INT 0
29409: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29410: LD_ADDR_VAR 0 3
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 255
29424: PPUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 250
29434: PPUSH
29435: LD_VAR 0 1
29439: PPUSH
29440: CALL_OW 251
29444: PPUSH
29445: LD_VAR 0 2
29449: PPUSH
29450: CALL 27704 0 4
29454: ST_TO_ADDR
// end ;
29455: LD_VAR 0 3
29459: RET
// export function DangerInArea ( side , area ) ; begin
29460: LD_INT 0
29462: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: LD_INT 81
29475: PUSH
29476: LD_VAR 0 1
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PPUSH
29485: CALL_OW 70
29489: ST_TO_ADDR
// end ;
29490: LD_VAR 0 3
29494: RET
// export function IsExtension ( b ) ; begin
29495: LD_INT 0
29497: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29498: LD_ADDR_VAR 0 2
29502: PUSH
29503: LD_VAR 0 1
29507: PUSH
29508: LD_INT 23
29510: PUSH
29511: LD_INT 20
29513: PUSH
29514: LD_INT 22
29516: PUSH
29517: LD_INT 17
29519: PUSH
29520: LD_INT 24
29522: PUSH
29523: LD_INT 21
29525: PUSH
29526: LD_INT 19
29528: PUSH
29529: LD_INT 16
29531: PUSH
29532: LD_INT 25
29534: PUSH
29535: LD_INT 18
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: IN
29550: ST_TO_ADDR
// end ;
29551: LD_VAR 0 2
29555: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
// result := [ ] ;
29561: LD_ADDR_VAR 0 4
29565: PUSH
29566: EMPTY
29567: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29568: LD_ADDR_VAR 0 5
29572: PUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: LD_INT 21
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PPUSH
29588: CALL_OW 70
29592: ST_TO_ADDR
// if not tmp then
29593: LD_VAR 0 5
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29666
// if checkLink then
29602: LD_VAR 0 3
29606: IFFALSE 29656
// begin for i in tmp do
29608: LD_ADDR_VAR 0 6
29612: PUSH
29613: LD_VAR 0 5
29617: PUSH
29618: FOR_IN
29619: IFFALSE 29654
// if GetBase ( i ) <> base then
29621: LD_VAR 0 6
29625: PPUSH
29626: CALL_OW 274
29630: PUSH
29631: LD_VAR 0 1
29635: NONEQUAL
29636: IFFALSE 29652
// ComLinkToBase ( base , i ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_VAR 0 6
29647: PPUSH
29648: CALL_OW 169
29652: GO 29618
29654: POP
29655: POP
// end ; result := tmp ;
29656: LD_ADDR_VAR 0 4
29660: PUSH
29661: LD_VAR 0 5
29665: ST_TO_ADDR
// end ;
29666: LD_VAR 0 4
29670: RET
// export function ComComplete ( units , b ) ; var i ; begin
29671: LD_INT 0
29673: PPUSH
29674: PPUSH
// if not units then
29675: LD_VAR 0 1
29679: NOT
29680: IFFALSE 29684
// exit ;
29682: GO 29774
// for i in units do
29684: LD_ADDR_VAR 0 4
29688: PUSH
29689: LD_VAR 0 1
29693: PUSH
29694: FOR_IN
29695: IFFALSE 29772
// if BuildingStatus ( b ) = bs_build then
29697: LD_VAR 0 2
29701: PPUSH
29702: CALL_OW 461
29706: PUSH
29707: LD_INT 1
29709: EQUAL
29710: IFFALSE 29770
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29712: LD_VAR 0 4
29716: PPUSH
29717: LD_STRING h
29719: PUSH
29720: LD_VAR 0 2
29724: PPUSH
29725: CALL_OW 250
29729: PUSH
29730: LD_VAR 0 2
29734: PPUSH
29735: CALL_OW 251
29739: PUSH
29740: LD_VAR 0 2
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: PPUSH
29766: CALL_OW 446
29770: GO 29694
29772: POP
29773: POP
// end ;
29774: LD_VAR 0 3
29778: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29787: LD_VAR 0 1
29791: NOT
29792: PUSH
29793: LD_VAR 0 1
29797: PPUSH
29798: CALL_OW 263
29802: PUSH
29803: LD_INT 2
29805: EQUAL
29806: NOT
29807: OR
29808: IFFALSE 29812
// exit ;
29810: GO 30128
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29812: LD_ADDR_VAR 0 6
29816: PUSH
29817: LD_INT 22
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 255
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: LD_INT 36
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 34
29849: PUSH
29850: LD_INT 31
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PPUSH
29866: CALL_OW 69
29870: ST_TO_ADDR
// if not tmp then
29871: LD_VAR 0 6
29875: NOT
29876: IFFALSE 29880
// exit ;
29878: GO 30128
// result := [ ] ;
29880: LD_ADDR_VAR 0 2
29884: PUSH
29885: EMPTY
29886: ST_TO_ADDR
// for i in tmp do
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_VAR 0 6
29896: PUSH
29897: FOR_IN
29898: IFFALSE 29969
// begin t := UnitsInside ( i ) ;
29900: LD_ADDR_VAR 0 4
29904: PUSH
29905: LD_VAR 0 3
29909: PPUSH
29910: CALL_OW 313
29914: ST_TO_ADDR
// if t then
29915: LD_VAR 0 4
29919: IFFALSE 29967
// for j in t do
29921: LD_ADDR_VAR 0 7
29925: PUSH
29926: LD_VAR 0 4
29930: PUSH
29931: FOR_IN
29932: IFFALSE 29965
// result := Insert ( result , result + 1 , j ) ;
29934: LD_ADDR_VAR 0 2
29938: PUSH
29939: LD_VAR 0 2
29943: PPUSH
29944: LD_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: PLUS
29952: PPUSH
29953: LD_VAR 0 7
29957: PPUSH
29958: CALL_OW 2
29962: ST_TO_ADDR
29963: GO 29931
29965: POP
29966: POP
// end ;
29967: GO 29897
29969: POP
29970: POP
// if not result then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30128
// mech := result [ 1 ] ;
29980: LD_ADDR_VAR 0 5
29984: PUSH
29985: LD_VAR 0 2
29989: PUSH
29990: LD_INT 1
29992: ARRAY
29993: ST_TO_ADDR
// if result > 1 then
29994: LD_VAR 0 2
29998: PUSH
29999: LD_INT 1
30001: GREATER
30002: IFFALSE 30114
// for i = 2 to result do
30004: LD_ADDR_VAR 0 3
30008: PUSH
30009: DOUBLE
30010: LD_INT 2
30012: DEC
30013: ST_TO_ADDR
30014: LD_VAR 0 2
30018: PUSH
30019: FOR_TO
30020: IFFALSE 30112
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30022: LD_ADDR_VAR 0 4
30026: PUSH
30027: LD_VAR 0 2
30031: PUSH
30032: LD_VAR 0 3
30036: ARRAY
30037: PPUSH
30038: LD_INT 3
30040: PPUSH
30041: CALL_OW 259
30045: PUSH
30046: LD_VAR 0 2
30050: PUSH
30051: LD_VAR 0 3
30055: ARRAY
30056: PPUSH
30057: CALL_OW 432
30061: MINUS
30062: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30063: LD_VAR 0 4
30067: PUSH
30068: LD_VAR 0 5
30072: PPUSH
30073: LD_INT 3
30075: PPUSH
30076: CALL_OW 259
30080: PUSH
30081: LD_VAR 0 5
30085: PPUSH
30086: CALL_OW 432
30090: MINUS
30091: GREATEREQUAL
30092: IFFALSE 30110
// mech := result [ i ] ;
30094: LD_ADDR_VAR 0 5
30098: PUSH
30099: LD_VAR 0 2
30103: PUSH
30104: LD_VAR 0 3
30108: ARRAY
30109: ST_TO_ADDR
// end ;
30110: GO 30019
30112: POP
30113: POP
// ComLinkTo ( vehicle , mech ) ;
30114: LD_VAR 0 1
30118: PPUSH
30119: LD_VAR 0 5
30123: PPUSH
30124: CALL_OW 135
// end ;
30128: LD_VAR 0 2
30132: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30133: LD_INT 0
30135: PPUSH
30136: PPUSH
30137: PPUSH
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
30146: PPUSH
30147: PPUSH
// result := [ ] ;
30148: LD_ADDR_VAR 0 7
30152: PUSH
30153: EMPTY
30154: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 266
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: IN
30175: NOT
30176: IFFALSE 30180
// exit ;
30178: GO 31814
// if name then
30180: LD_VAR 0 3
30184: IFFALSE 30200
// SetBName ( base_dep , name ) ;
30186: LD_VAR 0 1
30190: PPUSH
30191: LD_VAR 0 3
30195: PPUSH
30196: CALL_OW 500
// base := GetBase ( base_dep ) ;
30200: LD_ADDR_VAR 0 15
30204: PUSH
30205: LD_VAR 0 1
30209: PPUSH
30210: CALL_OW 274
30214: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30215: LD_ADDR_VAR 0 16
30219: PUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: CALL_OW 255
30229: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30230: LD_ADDR_VAR 0 17
30234: PUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: CALL_OW 248
30244: ST_TO_ADDR
// if sources then
30245: LD_VAR 0 5
30249: IFFALSE 30296
// for i = 1 to 3 do
30251: LD_ADDR_VAR 0 8
30255: PUSH
30256: DOUBLE
30257: LD_INT 1
30259: DEC
30260: ST_TO_ADDR
30261: LD_INT 3
30263: PUSH
30264: FOR_TO
30265: IFFALSE 30294
// AddResourceType ( base , i , sources [ i ] ) ;
30267: LD_VAR 0 15
30271: PPUSH
30272: LD_VAR 0 8
30276: PPUSH
30277: LD_VAR 0 5
30281: PUSH
30282: LD_VAR 0 8
30286: ARRAY
30287: PPUSH
30288: CALL_OW 276
30292: GO 30264
30294: POP
30295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30296: LD_ADDR_VAR 0 18
30300: PUSH
30301: LD_VAR 0 15
30305: PPUSH
30306: LD_VAR 0 2
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL 29556 0 3
30318: ST_TO_ADDR
// InitHc ;
30319: CALL_OW 19
// InitUc ;
30323: CALL_OW 18
// uc_side := side ;
30327: LD_ADDR_OWVAR 20
30331: PUSH
30332: LD_VAR 0 16
30336: ST_TO_ADDR
// uc_nation := nation ;
30337: LD_ADDR_OWVAR 21
30341: PUSH
30342: LD_VAR 0 17
30346: ST_TO_ADDR
// if buildings then
30347: LD_VAR 0 18
30351: IFFALSE 31673
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30353: LD_ADDR_VAR 0 19
30357: PUSH
30358: LD_VAR 0 18
30362: PPUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 29
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 30
30378: PUSH
30379: LD_INT 30
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: LIST
30390: PPUSH
30391: CALL_OW 72
30395: ST_TO_ADDR
// if tmp then
30396: LD_VAR 0 19
30400: IFFALSE 30448
// for i in tmp do
30402: LD_ADDR_VAR 0 8
30406: PUSH
30407: LD_VAR 0 19
30411: PUSH
30412: FOR_IN
30413: IFFALSE 30446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30415: LD_VAR 0 8
30419: PPUSH
30420: CALL_OW 250
30424: PPUSH
30425: LD_VAR 0 8
30429: PPUSH
30430: CALL_OW 251
30434: PPUSH
30435: LD_VAR 0 16
30439: PPUSH
30440: CALL_OW 441
30444: GO 30412
30446: POP
30447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30448: LD_VAR 0 18
30452: PPUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 30
30458: PUSH
30459: LD_INT 32
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 30
30468: PUSH
30469: LD_INT 33
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 72
30485: IFFALSE 30573
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30487: LD_ADDR_VAR 0 8
30491: PUSH
30492: LD_VAR 0 18
30496: PPUSH
30497: LD_INT 2
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 32
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 30
30512: PUSH
30513: LD_INT 33
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 72
30529: PUSH
30530: FOR_IN
30531: IFFALSE 30571
// begin if not GetBWeapon ( i ) then
30533: LD_VAR 0 8
30537: PPUSH
30538: CALL_OW 269
30542: NOT
30543: IFFALSE 30569
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30545: LD_VAR 0 8
30549: PPUSH
30550: LD_VAR 0 8
30554: PPUSH
30555: LD_VAR 0 2
30559: PPUSH
30560: CALL 31819 0 2
30564: PPUSH
30565: CALL_OW 431
// end ;
30569: GO 30530
30571: POP
30572: POP
// end ; for i = 1 to personel do
30573: LD_ADDR_VAR 0 8
30577: PUSH
30578: DOUBLE
30579: LD_INT 1
30581: DEC
30582: ST_TO_ADDR
30583: LD_VAR 0 6
30587: PUSH
30588: FOR_TO
30589: IFFALSE 31653
// begin if i > 4 then
30591: LD_VAR 0 8
30595: PUSH
30596: LD_INT 4
30598: GREATER
30599: IFFALSE 30603
// break ;
30601: GO 31653
// case i of 1 :
30603: LD_VAR 0 8
30607: PUSH
30608: LD_INT 1
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30696
30616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30617: LD_ADDR_VAR 0 12
30621: PUSH
30622: LD_VAR 0 18
30626: PPUSH
30627: LD_INT 22
30629: PUSH
30630: LD_VAR 0 16
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 58
30641: PUSH
30642: EMPTY
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: LD_INT 32
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 30
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 30
30670: PUSH
30671: LD_INT 5
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: LIST
30688: PPUSH
30689: CALL_OW 72
30693: ST_TO_ADDR
30694: GO 30918
30696: LD_INT 2
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30766
30704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30705: LD_ADDR_VAR 0 12
30709: PUSH
30710: LD_VAR 0 18
30714: PPUSH
30715: LD_INT 22
30717: PUSH
30718: LD_VAR 0 16
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 30
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 30
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 72
30763: ST_TO_ADDR
30764: GO 30918
30766: LD_INT 3
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30836
30774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30775: LD_ADDR_VAR 0 12
30779: PUSH
30780: LD_VAR 0 18
30784: PPUSH
30785: LD_INT 22
30787: PUSH
30788: LD_VAR 0 16
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: LD_INT 30
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 30
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PPUSH
30829: CALL_OW 72
30833: ST_TO_ADDR
30834: GO 30918
30836: LD_INT 4
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30917
30844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30845: LD_ADDR_VAR 0 12
30849: PUSH
30850: LD_VAR 0 18
30854: PPUSH
30855: LD_INT 22
30857: PUSH
30858: LD_VAR 0 16
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: LD_INT 30
30872: PUSH
30873: LD_INT 6
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 7
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 30
30892: PUSH
30893: LD_INT 8
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PPUSH
30910: CALL_OW 72
30914: ST_TO_ADDR
30915: GO 30918
30917: POP
// if i = 1 then
30918: LD_VAR 0 8
30922: PUSH
30923: LD_INT 1
30925: EQUAL
30926: IFFALSE 31037
// begin tmp := [ ] ;
30928: LD_ADDR_VAR 0 19
30932: PUSH
30933: EMPTY
30934: ST_TO_ADDR
// for j in f do
30935: LD_ADDR_VAR 0 9
30939: PUSH
30940: LD_VAR 0 12
30944: PUSH
30945: FOR_IN
30946: IFFALSE 31019
// if GetBType ( j ) = b_bunker then
30948: LD_VAR 0 9
30952: PPUSH
30953: CALL_OW 266
30957: PUSH
30958: LD_INT 32
30960: EQUAL
30961: IFFALSE 30988
// tmp := Insert ( tmp , 1 , j ) else
30963: LD_ADDR_VAR 0 19
30967: PUSH
30968: LD_VAR 0 19
30972: PPUSH
30973: LD_INT 1
30975: PPUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: CALL_OW 2
30985: ST_TO_ADDR
30986: GO 31017
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30988: LD_ADDR_VAR 0 19
30992: PUSH
30993: LD_VAR 0 19
30997: PPUSH
30998: LD_VAR 0 19
31002: PUSH
31003: LD_INT 1
31005: PLUS
31006: PPUSH
31007: LD_VAR 0 9
31011: PPUSH
31012: CALL_OW 2
31016: ST_TO_ADDR
31017: GO 30945
31019: POP
31020: POP
// if tmp then
31021: LD_VAR 0 19
31025: IFFALSE 31037
// f := tmp ;
31027: LD_ADDR_VAR 0 12
31031: PUSH
31032: LD_VAR 0 19
31036: ST_TO_ADDR
// end ; x := personel [ i ] ;
31037: LD_ADDR_VAR 0 13
31041: PUSH
31042: LD_VAR 0 6
31046: PUSH
31047: LD_VAR 0 8
31051: ARRAY
31052: ST_TO_ADDR
// if x = - 1 then
31053: LD_VAR 0 13
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: EQUAL
31062: IFFALSE 31271
// begin for j in f do
31064: LD_ADDR_VAR 0 9
31068: PUSH
31069: LD_VAR 0 12
31073: PUSH
31074: FOR_IN
31075: IFFALSE 31267
// repeat InitHc ;
31077: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31081: LD_VAR 0 9
31085: PPUSH
31086: CALL_OW 266
31090: PUSH
31091: LD_INT 5
31093: EQUAL
31094: IFFALSE 31164
// begin if UnitsInside ( j ) < 3 then
31096: LD_VAR 0 9
31100: PPUSH
31101: CALL_OW 313
31105: PUSH
31106: LD_INT 3
31108: LESS
31109: IFFALSE 31145
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31111: LD_INT 0
31113: PPUSH
31114: LD_INT 5
31116: PUSH
31117: LD_INT 8
31119: PUSH
31120: LD_INT 9
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PUSH
31128: LD_VAR 0 17
31132: ARRAY
31133: PPUSH
31134: LD_VAR 0 4
31138: PPUSH
31139: CALL_OW 380
31143: GO 31162
// PrepareHuman ( false , i , skill ) ;
31145: LD_INT 0
31147: PPUSH
31148: LD_VAR 0 8
31152: PPUSH
31153: LD_VAR 0 4
31157: PPUSH
31158: CALL_OW 380
// end else
31162: GO 31181
// PrepareHuman ( false , i , skill ) ;
31164: LD_INT 0
31166: PPUSH
31167: LD_VAR 0 8
31171: PPUSH
31172: LD_VAR 0 4
31176: PPUSH
31177: CALL_OW 380
// un := CreateHuman ;
31181: LD_ADDR_VAR 0 14
31185: PUSH
31186: CALL_OW 44
31190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31191: LD_ADDR_VAR 0 7
31195: PUSH
31196: LD_VAR 0 7
31200: PPUSH
31201: LD_INT 1
31203: PPUSH
31204: LD_VAR 0 14
31208: PPUSH
31209: CALL_OW 2
31213: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31214: LD_VAR 0 14
31218: PPUSH
31219: LD_VAR 0 9
31223: PPUSH
31224: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31228: LD_VAR 0 9
31232: PPUSH
31233: CALL_OW 313
31237: PUSH
31238: LD_INT 6
31240: EQUAL
31241: PUSH
31242: LD_VAR 0 9
31246: PPUSH
31247: CALL_OW 266
31251: PUSH
31252: LD_INT 32
31254: PUSH
31255: LD_INT 31
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: IN
31262: OR
31263: IFFALSE 31077
31265: GO 31074
31267: POP
31268: POP
// end else
31269: GO 31651
// for j = 1 to x do
31271: LD_ADDR_VAR 0 9
31275: PUSH
31276: DOUBLE
31277: LD_INT 1
31279: DEC
31280: ST_TO_ADDR
31281: LD_VAR 0 13
31285: PUSH
31286: FOR_TO
31287: IFFALSE 31649
// begin InitHc ;
31289: CALL_OW 19
// if not f then
31293: LD_VAR 0 12
31297: NOT
31298: IFFALSE 31387
// begin PrepareHuman ( false , i , skill ) ;
31300: LD_INT 0
31302: PPUSH
31303: LD_VAR 0 8
31307: PPUSH
31308: LD_VAR 0 4
31312: PPUSH
31313: CALL_OW 380
// un := CreateHuman ;
31317: LD_ADDR_VAR 0 14
31321: PUSH
31322: CALL_OW 44
31326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31327: LD_ADDR_VAR 0 7
31331: PUSH
31332: LD_VAR 0 7
31336: PPUSH
31337: LD_INT 1
31339: PPUSH
31340: LD_VAR 0 14
31344: PPUSH
31345: CALL_OW 2
31349: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31350: LD_VAR 0 14
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 250
31364: PPUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: CALL_OW 251
31374: PPUSH
31375: LD_INT 10
31377: PPUSH
31378: LD_INT 0
31380: PPUSH
31381: CALL_OW 50
// continue ;
31385: GO 31286
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31387: LD_VAR 0 12
31391: PUSH
31392: LD_INT 1
31394: ARRAY
31395: PPUSH
31396: CALL_OW 313
31400: PUSH
31401: LD_VAR 0 12
31405: PUSH
31406: LD_INT 1
31408: ARRAY
31409: PPUSH
31410: CALL_OW 266
31414: PUSH
31415: LD_INT 32
31417: PUSH
31418: LD_INT 31
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: IN
31425: AND
31426: PUSH
31427: LD_VAR 0 12
31431: PUSH
31432: LD_INT 1
31434: ARRAY
31435: PPUSH
31436: CALL_OW 313
31440: PUSH
31441: LD_INT 6
31443: EQUAL
31444: OR
31445: IFFALSE 31465
// f := Delete ( f , 1 ) ;
31447: LD_ADDR_VAR 0 12
31451: PUSH
31452: LD_VAR 0 12
31456: PPUSH
31457: LD_INT 1
31459: PPUSH
31460: CALL_OW 3
31464: ST_TO_ADDR
// if not f then
31465: LD_VAR 0 12
31469: NOT
31470: IFFALSE 31488
// begin x := x + 2 ;
31472: LD_ADDR_VAR 0 13
31476: PUSH
31477: LD_VAR 0 13
31481: PUSH
31482: LD_INT 2
31484: PLUS
31485: ST_TO_ADDR
// continue ;
31486: GO 31286
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31488: LD_VAR 0 12
31492: PUSH
31493: LD_INT 1
31495: ARRAY
31496: PPUSH
31497: CALL_OW 266
31501: PUSH
31502: LD_INT 5
31504: EQUAL
31505: IFFALSE 31579
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31507: LD_VAR 0 12
31511: PUSH
31512: LD_INT 1
31514: ARRAY
31515: PPUSH
31516: CALL_OW 313
31520: PUSH
31521: LD_INT 3
31523: LESS
31524: IFFALSE 31560
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31526: LD_INT 0
31528: PPUSH
31529: LD_INT 5
31531: PUSH
31532: LD_INT 8
31534: PUSH
31535: LD_INT 9
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: PUSH
31543: LD_VAR 0 17
31547: ARRAY
31548: PPUSH
31549: LD_VAR 0 4
31553: PPUSH
31554: CALL_OW 380
31558: GO 31577
// PrepareHuman ( false , i , skill ) ;
31560: LD_INT 0
31562: PPUSH
31563: LD_VAR 0 8
31567: PPUSH
31568: LD_VAR 0 4
31572: PPUSH
31573: CALL_OW 380
// end else
31577: GO 31596
// PrepareHuman ( false , i , skill ) ;
31579: LD_INT 0
31581: PPUSH
31582: LD_VAR 0 8
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: CALL_OW 380
// un := CreateHuman ;
31596: LD_ADDR_VAR 0 14
31600: PUSH
31601: CALL_OW 44
31605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31606: LD_ADDR_VAR 0 7
31610: PUSH
31611: LD_VAR 0 7
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: LD_VAR 0 14
31623: PPUSH
31624: CALL_OW 2
31628: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31629: LD_VAR 0 14
31633: PPUSH
31634: LD_VAR 0 12
31638: PUSH
31639: LD_INT 1
31641: ARRAY
31642: PPUSH
31643: CALL_OW 52
// end ;
31647: GO 31286
31649: POP
31650: POP
// end ;
31651: GO 30588
31653: POP
31654: POP
// result := result ^ buildings ;
31655: LD_ADDR_VAR 0 7
31659: PUSH
31660: LD_VAR 0 7
31664: PUSH
31665: LD_VAR 0 18
31669: ADD
31670: ST_TO_ADDR
// end else
31671: GO 31814
// begin for i = 1 to personel do
31673: LD_ADDR_VAR 0 8
31677: PUSH
31678: DOUBLE
31679: LD_INT 1
31681: DEC
31682: ST_TO_ADDR
31683: LD_VAR 0 6
31687: PUSH
31688: FOR_TO
31689: IFFALSE 31812
// begin if i > 4 then
31691: LD_VAR 0 8
31695: PUSH
31696: LD_INT 4
31698: GREATER
31699: IFFALSE 31703
// break ;
31701: GO 31812
// x := personel [ i ] ;
31703: LD_ADDR_VAR 0 13
31707: PUSH
31708: LD_VAR 0 6
31712: PUSH
31713: LD_VAR 0 8
31717: ARRAY
31718: ST_TO_ADDR
// if x = - 1 then
31719: LD_VAR 0 13
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: EQUAL
31728: IFFALSE 31732
// continue ;
31730: GO 31688
// PrepareHuman ( false , i , skill ) ;
31732: LD_INT 0
31734: PPUSH
31735: LD_VAR 0 8
31739: PPUSH
31740: LD_VAR 0 4
31744: PPUSH
31745: CALL_OW 380
// un := CreateHuman ;
31749: LD_ADDR_VAR 0 14
31753: PUSH
31754: CALL_OW 44
31758: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31759: LD_VAR 0 14
31763: PPUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 250
31773: PPUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: CALL_OW 251
31783: PPUSH
31784: LD_INT 10
31786: PPUSH
31787: LD_INT 0
31789: PPUSH
31790: CALL_OW 50
// result := result ^ un ;
31794: LD_ADDR_VAR 0 7
31798: PUSH
31799: LD_VAR 0 7
31803: PUSH
31804: LD_VAR 0 14
31808: ADD
31809: ST_TO_ADDR
// end ;
31810: GO 31688
31812: POP
31813: POP
// end ; end ;
31814: LD_VAR 0 7
31818: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31819: LD_INT 0
31821: PPUSH
31822: PPUSH
31823: PPUSH
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
// result := false ;
31837: LD_ADDR_VAR 0 3
31841: PUSH
31842: LD_INT 0
31844: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31845: LD_VAR 0 1
31849: NOT
31850: PUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 266
31860: PUSH
31861: LD_INT 32
31863: PUSH
31864: LD_INT 33
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: IN
31871: NOT
31872: OR
31873: IFFALSE 31877
// exit ;
31875: GO 32986
// nat := GetNation ( tower ) ;
31877: LD_ADDR_VAR 0 12
31881: PUSH
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 248
31891: ST_TO_ADDR
// side := GetSide ( tower ) ;
31892: LD_ADDR_VAR 0 16
31896: PUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 255
31906: ST_TO_ADDR
// x := GetX ( tower ) ;
31907: LD_ADDR_VAR 0 10
31911: PUSH
31912: LD_VAR 0 1
31916: PPUSH
31917: CALL_OW 250
31921: ST_TO_ADDR
// y := GetY ( tower ) ;
31922: LD_ADDR_VAR 0 11
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: CALL_OW 251
31936: ST_TO_ADDR
// if not x or not y then
31937: LD_VAR 0 10
31941: NOT
31942: PUSH
31943: LD_VAR 0 11
31947: NOT
31948: OR
31949: IFFALSE 31953
// exit ;
31951: GO 32986
// weapon := 0 ;
31953: LD_ADDR_VAR 0 18
31957: PUSH
31958: LD_INT 0
31960: ST_TO_ADDR
// fac_list := [ ] ;
31961: LD_ADDR_VAR 0 17
31965: PUSH
31966: EMPTY
31967: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31968: LD_ADDR_VAR 0 6
31972: PUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 274
31982: PPUSH
31983: LD_VAR 0 2
31987: PPUSH
31988: LD_INT 0
31990: PPUSH
31991: CALL 29556 0 3
31995: PPUSH
31996: LD_INT 30
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 72
32010: ST_TO_ADDR
// if not factories then
32011: LD_VAR 0 6
32015: NOT
32016: IFFALSE 32020
// exit ;
32018: GO 32986
// for i in factories do
32020: LD_ADDR_VAR 0 8
32024: PUSH
32025: LD_VAR 0 6
32029: PUSH
32030: FOR_IN
32031: IFFALSE 32056
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32033: LD_ADDR_VAR 0 17
32037: PUSH
32038: LD_VAR 0 17
32042: PUSH
32043: LD_VAR 0 8
32047: PPUSH
32048: CALL_OW 478
32052: UNION
32053: ST_TO_ADDR
32054: GO 32030
32056: POP
32057: POP
// if not fac_list then
32058: LD_VAR 0 17
32062: NOT
32063: IFFALSE 32067
// exit ;
32065: GO 32986
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32067: LD_ADDR_VAR 0 5
32071: PUSH
32072: LD_INT 4
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: LD_INT 9
32080: PUSH
32081: LD_INT 10
32083: PUSH
32084: LD_INT 6
32086: PUSH
32087: LD_INT 7
32089: PUSH
32090: LD_INT 11
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 27
32104: PUSH
32105: LD_INT 28
32107: PUSH
32108: LD_INT 26
32110: PUSH
32111: LD_INT 30
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 43
32122: PUSH
32123: LD_INT 44
32125: PUSH
32126: LD_INT 46
32128: PUSH
32129: LD_INT 45
32131: PUSH
32132: LD_INT 47
32134: PUSH
32135: LD_INT 49
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: PUSH
32151: LD_VAR 0 12
32155: ARRAY
32156: ST_TO_ADDR
// list := list isect fac_list ;
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: LD_VAR 0 5
32166: PUSH
32167: LD_VAR 0 17
32171: ISECT
32172: ST_TO_ADDR
// if not list then
32173: LD_VAR 0 5
32177: NOT
32178: IFFALSE 32182
// exit ;
32180: GO 32986
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32182: LD_VAR 0 12
32186: PUSH
32187: LD_INT 3
32189: EQUAL
32190: PUSH
32191: LD_INT 49
32193: PUSH
32194: LD_VAR 0 5
32198: IN
32199: AND
32200: PUSH
32201: LD_INT 31
32203: PPUSH
32204: LD_VAR 0 16
32208: PPUSH
32209: CALL_OW 321
32213: PUSH
32214: LD_INT 2
32216: EQUAL
32217: AND
32218: IFFALSE 32278
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32220: LD_INT 22
32222: PUSH
32223: LD_VAR 0 16
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 35
32234: PUSH
32235: LD_INT 49
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 91
32244: PUSH
32245: LD_VAR 0 1
32249: PUSH
32250: LD_INT 10
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: PPUSH
32263: CALL_OW 69
32267: NOT
32268: IFFALSE 32278
// weapon := ru_time_lapser ;
32270: LD_ADDR_VAR 0 18
32274: PUSH
32275: LD_INT 49
32277: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32278: LD_VAR 0 12
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: IN
32293: PUSH
32294: LD_INT 11
32296: PUSH
32297: LD_VAR 0 5
32301: IN
32302: PUSH
32303: LD_INT 30
32305: PUSH
32306: LD_VAR 0 5
32310: IN
32311: OR
32312: AND
32313: PUSH
32314: LD_INT 6
32316: PPUSH
32317: LD_VAR 0 16
32321: PPUSH
32322: CALL_OW 321
32326: PUSH
32327: LD_INT 2
32329: EQUAL
32330: AND
32331: IFFALSE 32496
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32333: LD_INT 22
32335: PUSH
32336: LD_VAR 0 16
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 35
32350: PUSH
32351: LD_INT 11
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 35
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 91
32375: PUSH
32376: LD_VAR 0 1
32380: PUSH
32381: LD_INT 18
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: LIST
32393: PPUSH
32394: CALL_OW 69
32398: NOT
32399: PUSH
32400: LD_INT 22
32402: PUSH
32403: LD_VAR 0 16
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: LD_INT 30
32417: PUSH
32418: LD_INT 32
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 30
32427: PUSH
32428: LD_INT 33
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 91
32442: PUSH
32443: LD_VAR 0 1
32447: PUSH
32448: LD_INT 12
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: PPUSH
32464: CALL_OW 69
32468: PUSH
32469: LD_INT 2
32471: GREATER
32472: AND
32473: IFFALSE 32496
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32475: LD_ADDR_VAR 0 18
32479: PUSH
32480: LD_INT 11
32482: PUSH
32483: LD_INT 30
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_VAR 0 12
32494: ARRAY
32495: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32496: LD_VAR 0 18
32500: NOT
32501: PUSH
32502: LD_INT 40
32504: PPUSH
32505: LD_VAR 0 16
32509: PPUSH
32510: CALL_OW 321
32514: PUSH
32515: LD_INT 2
32517: EQUAL
32518: AND
32519: PUSH
32520: LD_INT 7
32522: PUSH
32523: LD_VAR 0 5
32527: IN
32528: PUSH
32529: LD_INT 28
32531: PUSH
32532: LD_VAR 0 5
32536: IN
32537: OR
32538: PUSH
32539: LD_INT 45
32541: PUSH
32542: LD_VAR 0 5
32546: IN
32547: OR
32548: AND
32549: IFFALSE 32803
// begin hex := GetHexInfo ( x , y ) ;
32551: LD_ADDR_VAR 0 4
32555: PUSH
32556: LD_VAR 0 10
32560: PPUSH
32561: LD_VAR 0 11
32565: PPUSH
32566: CALL_OW 546
32570: ST_TO_ADDR
// if hex [ 1 ] then
32571: LD_VAR 0 4
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: IFFALSE 32583
// exit ;
32581: GO 32986
// height := hex [ 2 ] ;
32583: LD_ADDR_VAR 0 15
32587: PUSH
32588: LD_VAR 0 4
32592: PUSH
32593: LD_INT 2
32595: ARRAY
32596: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32597: LD_ADDR_VAR 0 14
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 3
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: ST_TO_ADDR
// for i in tmp do
32620: LD_ADDR_VAR 0 8
32624: PUSH
32625: LD_VAR 0 14
32629: PUSH
32630: FOR_IN
32631: IFFALSE 32801
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32633: LD_ADDR_VAR 0 9
32637: PUSH
32638: LD_VAR 0 10
32642: PPUSH
32643: LD_VAR 0 8
32647: PPUSH
32648: LD_INT 5
32650: PPUSH
32651: CALL_OW 272
32655: PUSH
32656: LD_VAR 0 11
32660: PPUSH
32661: LD_VAR 0 8
32665: PPUSH
32666: LD_INT 5
32668: PPUSH
32669: CALL_OW 273
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32678: LD_VAR 0 9
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: PPUSH
32687: LD_VAR 0 9
32691: PUSH
32692: LD_INT 2
32694: ARRAY
32695: PPUSH
32696: CALL_OW 488
32700: IFFALSE 32799
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32702: LD_ADDR_VAR 0 4
32706: PUSH
32707: LD_VAR 0 9
32711: PUSH
32712: LD_INT 1
32714: ARRAY
32715: PPUSH
32716: LD_VAR 0 9
32720: PUSH
32721: LD_INT 2
32723: ARRAY
32724: PPUSH
32725: CALL_OW 546
32729: ST_TO_ADDR
// if hex [ 1 ] then
32730: LD_VAR 0 4
32734: PUSH
32735: LD_INT 1
32737: ARRAY
32738: IFFALSE 32742
// continue ;
32740: GO 32630
// h := hex [ 2 ] ;
32742: LD_ADDR_VAR 0 13
32746: PUSH
32747: LD_VAR 0 4
32751: PUSH
32752: LD_INT 2
32754: ARRAY
32755: ST_TO_ADDR
// if h + 7 < height then
32756: LD_VAR 0 13
32760: PUSH
32761: LD_INT 7
32763: PLUS
32764: PUSH
32765: LD_VAR 0 15
32769: LESS
32770: IFFALSE 32799
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32772: LD_ADDR_VAR 0 18
32776: PUSH
32777: LD_INT 7
32779: PUSH
32780: LD_INT 28
32782: PUSH
32783: LD_INT 45
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: PUSH
32791: LD_VAR 0 12
32795: ARRAY
32796: ST_TO_ADDR
// break ;
32797: GO 32801
// end ; end ; end ;
32799: GO 32630
32801: POP
32802: POP
// end ; if not weapon then
32803: LD_VAR 0 18
32807: NOT
32808: IFFALSE 32868
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32810: LD_ADDR_VAR 0 5
32814: PUSH
32815: LD_VAR 0 5
32819: PUSH
32820: LD_INT 11
32822: PUSH
32823: LD_INT 30
32825: PUSH
32826: LD_INT 49
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: DIFF
32834: ST_TO_ADDR
// if not list then
32835: LD_VAR 0 5
32839: NOT
32840: IFFALSE 32844
// exit ;
32842: GO 32986
// weapon := list [ rand ( 1 , list ) ] ;
32844: LD_ADDR_VAR 0 18
32848: PUSH
32849: LD_VAR 0 5
32853: PUSH
32854: LD_INT 1
32856: PPUSH
32857: LD_VAR 0 5
32861: PPUSH
32862: CALL_OW 12
32866: ARRAY
32867: ST_TO_ADDR
// end ; if weapon then
32868: LD_VAR 0 18
32872: IFFALSE 32986
// begin tmp := CostOfWeapon ( weapon ) ;
32874: LD_ADDR_VAR 0 14
32878: PUSH
32879: LD_VAR 0 18
32883: PPUSH
32884: CALL_OW 451
32888: ST_TO_ADDR
// j := GetBase ( tower ) ;
32889: LD_ADDR_VAR 0 9
32893: PUSH
32894: LD_VAR 0 1
32898: PPUSH
32899: CALL_OW 274
32903: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32904: LD_VAR 0 9
32908: PPUSH
32909: LD_INT 1
32911: PPUSH
32912: CALL_OW 275
32916: PUSH
32917: LD_VAR 0 14
32921: PUSH
32922: LD_INT 1
32924: ARRAY
32925: GREATEREQUAL
32926: PUSH
32927: LD_VAR 0 9
32931: PPUSH
32932: LD_INT 2
32934: PPUSH
32935: CALL_OW 275
32939: PUSH
32940: LD_VAR 0 14
32944: PUSH
32945: LD_INT 2
32947: ARRAY
32948: GREATEREQUAL
32949: AND
32950: PUSH
32951: LD_VAR 0 9
32955: PPUSH
32956: LD_INT 3
32958: PPUSH
32959: CALL_OW 275
32963: PUSH
32964: LD_VAR 0 14
32968: PUSH
32969: LD_INT 3
32971: ARRAY
32972: GREATEREQUAL
32973: AND
32974: IFFALSE 32986
// result := weapon ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_VAR 0 18
32985: ST_TO_ADDR
// end ; end ;
32986: LD_VAR 0 3
32990: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32991: LD_INT 0
32993: PPUSH
32994: PPUSH
// result := true ;
32995: LD_ADDR_VAR 0 3
32999: PUSH
33000: LD_INT 1
33002: ST_TO_ADDR
// if array1 = array2 then
33003: LD_VAR 0 1
33007: PUSH
33008: LD_VAR 0 2
33012: EQUAL
33013: IFFALSE 33073
// begin for i = 1 to array1 do
33015: LD_ADDR_VAR 0 4
33019: PUSH
33020: DOUBLE
33021: LD_INT 1
33023: DEC
33024: ST_TO_ADDR
33025: LD_VAR 0 1
33029: PUSH
33030: FOR_TO
33031: IFFALSE 33069
// if array1 [ i ] <> array2 [ i ] then
33033: LD_VAR 0 1
33037: PUSH
33038: LD_VAR 0 4
33042: ARRAY
33043: PUSH
33044: LD_VAR 0 2
33048: PUSH
33049: LD_VAR 0 4
33053: ARRAY
33054: NONEQUAL
33055: IFFALSE 33067
// begin result := false ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 0
33064: ST_TO_ADDR
// break ;
33065: GO 33069
// end ;
33067: GO 33030
33069: POP
33070: POP
// end else
33071: GO 33081
// result := false ;
33073: LD_ADDR_VAR 0 3
33077: PUSH
33078: LD_INT 0
33080: ST_TO_ADDR
// end ;
33081: LD_VAR 0 3
33085: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33086: LD_INT 0
33088: PPUSH
33089: PPUSH
// if not array1 or not array2 then
33090: LD_VAR 0 1
33094: NOT
33095: PUSH
33096: LD_VAR 0 2
33100: NOT
33101: OR
33102: IFFALSE 33106
// exit ;
33104: GO 33170
// result := true ;
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_INT 1
33113: ST_TO_ADDR
// for i = 1 to array1 do
33114: LD_ADDR_VAR 0 4
33118: PUSH
33119: DOUBLE
33120: LD_INT 1
33122: DEC
33123: ST_TO_ADDR
33124: LD_VAR 0 1
33128: PUSH
33129: FOR_TO
33130: IFFALSE 33168
// if array1 [ i ] <> array2 [ i ] then
33132: LD_VAR 0 1
33136: PUSH
33137: LD_VAR 0 4
33141: ARRAY
33142: PUSH
33143: LD_VAR 0 2
33147: PUSH
33148: LD_VAR 0 4
33152: ARRAY
33153: NONEQUAL
33154: IFFALSE 33166
// begin result := false ;
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 0
33163: ST_TO_ADDR
// break ;
33164: GO 33168
// end ;
33166: GO 33129
33168: POP
33169: POP
// end ;
33170: LD_VAR 0 3
33174: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33175: LD_INT 0
33177: PPUSH
33178: PPUSH
33179: PPUSH
// pom := GetBase ( fac ) ;
33180: LD_ADDR_VAR 0 5
33184: PUSH
33185: LD_VAR 0 1
33189: PPUSH
33190: CALL_OW 274
33194: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33195: LD_ADDR_VAR 0 4
33199: PUSH
33200: LD_VAR 0 2
33204: PUSH
33205: LD_INT 1
33207: ARRAY
33208: PPUSH
33209: LD_VAR 0 2
33213: PUSH
33214: LD_INT 2
33216: ARRAY
33217: PPUSH
33218: LD_VAR 0 2
33222: PUSH
33223: LD_INT 3
33225: ARRAY
33226: PPUSH
33227: LD_VAR 0 2
33231: PUSH
33232: LD_INT 4
33234: ARRAY
33235: PPUSH
33236: CALL_OW 449
33240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33241: LD_ADDR_VAR 0 3
33245: PUSH
33246: LD_VAR 0 5
33250: PPUSH
33251: LD_INT 1
33253: PPUSH
33254: CALL_OW 275
33258: PUSH
33259: LD_VAR 0 4
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: GREATEREQUAL
33268: PUSH
33269: LD_VAR 0 5
33273: PPUSH
33274: LD_INT 2
33276: PPUSH
33277: CALL_OW 275
33281: PUSH
33282: LD_VAR 0 4
33286: PUSH
33287: LD_INT 2
33289: ARRAY
33290: GREATEREQUAL
33291: AND
33292: PUSH
33293: LD_VAR 0 5
33297: PPUSH
33298: LD_INT 3
33300: PPUSH
33301: CALL_OW 275
33305: PUSH
33306: LD_VAR 0 4
33310: PUSH
33311: LD_INT 3
33313: ARRAY
33314: GREATEREQUAL
33315: AND
33316: ST_TO_ADDR
// end ;
33317: LD_VAR 0 3
33321: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
// pom := GetBase ( building ) ;
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 274
33342: ST_TO_ADDR
// if not pom then
33343: LD_VAR 0 3
33347: NOT
33348: IFFALSE 33352
// exit ;
33350: GO 33522
// btype := GetBType ( building ) ;
33352: LD_ADDR_VAR 0 5
33356: PUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: CALL_OW 266
33366: ST_TO_ADDR
// if btype = b_armoury then
33367: LD_VAR 0 5
33371: PUSH
33372: LD_INT 4
33374: EQUAL
33375: IFFALSE 33385
// btype := b_barracks ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_INT 5
33384: ST_TO_ADDR
// if btype = b_depot then
33385: LD_VAR 0 5
33389: PUSH
33390: LD_INT 0
33392: EQUAL
33393: IFFALSE 33403
// btype := b_warehouse ;
33395: LD_ADDR_VAR 0 5
33399: PUSH
33400: LD_INT 1
33402: ST_TO_ADDR
// if btype = b_workshop then
33403: LD_VAR 0 5
33407: PUSH
33408: LD_INT 2
33410: EQUAL
33411: IFFALSE 33421
// btype := b_factory ;
33413: LD_ADDR_VAR 0 5
33417: PUSH
33418: LD_INT 3
33420: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_VAR 0 5
33430: PPUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: CALL_OW 248
33440: PPUSH
33441: CALL_OW 450
33445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33446: LD_ADDR_VAR 0 2
33450: PUSH
33451: LD_VAR 0 3
33455: PPUSH
33456: LD_INT 1
33458: PPUSH
33459: CALL_OW 275
33463: PUSH
33464: LD_VAR 0 4
33468: PUSH
33469: LD_INT 1
33471: ARRAY
33472: GREATEREQUAL
33473: PUSH
33474: LD_VAR 0 3
33478: PPUSH
33479: LD_INT 2
33481: PPUSH
33482: CALL_OW 275
33486: PUSH
33487: LD_VAR 0 4
33491: PUSH
33492: LD_INT 2
33494: ARRAY
33495: GREATEREQUAL
33496: AND
33497: PUSH
33498: LD_VAR 0 3
33502: PPUSH
33503: LD_INT 3
33505: PPUSH
33506: CALL_OW 275
33510: PUSH
33511: LD_VAR 0 4
33515: PUSH
33516: LD_INT 3
33518: ARRAY
33519: GREATEREQUAL
33520: AND
33521: ST_TO_ADDR
// end ;
33522: LD_VAR 0 2
33526: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33527: LD_INT 0
33529: PPUSH
33530: PPUSH
33531: PPUSH
// pom := GetBase ( building ) ;
33532: LD_ADDR_VAR 0 4
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 274
33546: ST_TO_ADDR
// if not pom then
33547: LD_VAR 0 4
33551: NOT
33552: IFFALSE 33556
// exit ;
33554: GO 33657
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33556: LD_ADDR_VAR 0 5
33560: PUSH
33561: LD_VAR 0 2
33565: PPUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 248
33575: PPUSH
33576: CALL_OW 450
33580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_VAR 0 4
33590: PPUSH
33591: LD_INT 1
33593: PPUSH
33594: CALL_OW 275
33598: PUSH
33599: LD_VAR 0 5
33603: PUSH
33604: LD_INT 1
33606: ARRAY
33607: GREATEREQUAL
33608: PUSH
33609: LD_VAR 0 4
33613: PPUSH
33614: LD_INT 2
33616: PPUSH
33617: CALL_OW 275
33621: PUSH
33622: LD_VAR 0 5
33626: PUSH
33627: LD_INT 2
33629: ARRAY
33630: GREATEREQUAL
33631: AND
33632: PUSH
33633: LD_VAR 0 4
33637: PPUSH
33638: LD_INT 3
33640: PPUSH
33641: CALL_OW 275
33645: PUSH
33646: LD_VAR 0 5
33650: PUSH
33651: LD_INT 3
33653: ARRAY
33654: GREATEREQUAL
33655: AND
33656: ST_TO_ADDR
// end ;
33657: LD_VAR 0 3
33661: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33662: LD_INT 0
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
// result := false ;
33675: LD_ADDR_VAR 0 8
33679: PUSH
33680: LD_INT 0
33682: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33683: LD_VAR 0 5
33687: NOT
33688: PUSH
33689: LD_VAR 0 1
33693: NOT
33694: OR
33695: PUSH
33696: LD_VAR 0 2
33700: NOT
33701: OR
33702: PUSH
33703: LD_VAR 0 3
33707: NOT
33708: OR
33709: IFFALSE 33713
// exit ;
33711: GO 34527
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33713: LD_ADDR_VAR 0 14
33717: PUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: LD_VAR 0 2
33727: PPUSH
33728: LD_VAR 0 3
33732: PPUSH
33733: LD_VAR 0 4
33737: PPUSH
33738: LD_VAR 0 5
33742: PUSH
33743: LD_INT 1
33745: ARRAY
33746: PPUSH
33747: CALL_OW 248
33751: PPUSH
33752: LD_INT 0
33754: PPUSH
33755: CALL 35764 0 6
33759: ST_TO_ADDR
// if not hexes then
33760: LD_VAR 0 14
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 34527
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33769: LD_ADDR_VAR 0 17
33773: PUSH
33774: LD_VAR 0 5
33778: PPUSH
33779: LD_INT 22
33781: PUSH
33782: LD_VAR 0 13
33786: PPUSH
33787: CALL_OW 255
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 30
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 30
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PPUSH
33828: CALL_OW 72
33832: ST_TO_ADDR
// for i = 1 to hexes do
33833: LD_ADDR_VAR 0 9
33837: PUSH
33838: DOUBLE
33839: LD_INT 1
33841: DEC
33842: ST_TO_ADDR
33843: LD_VAR 0 14
33847: PUSH
33848: FOR_TO
33849: IFFALSE 34525
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33851: LD_ADDR_VAR 0 13
33855: PUSH
33856: LD_VAR 0 14
33860: PUSH
33861: LD_VAR 0 9
33865: ARRAY
33866: PUSH
33867: LD_INT 1
33869: ARRAY
33870: PPUSH
33871: LD_VAR 0 14
33875: PUSH
33876: LD_VAR 0 9
33880: ARRAY
33881: PUSH
33882: LD_INT 2
33884: ARRAY
33885: PPUSH
33886: CALL_OW 428
33890: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33891: LD_VAR 0 14
33895: PUSH
33896: LD_VAR 0 9
33900: ARRAY
33901: PUSH
33902: LD_INT 1
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 14
33910: PUSH
33911: LD_VAR 0 9
33915: ARRAY
33916: PUSH
33917: LD_INT 2
33919: ARRAY
33920: PPUSH
33921: CALL_OW 351
33925: PUSH
33926: LD_VAR 0 14
33930: PUSH
33931: LD_VAR 0 9
33935: ARRAY
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PPUSH
33941: LD_VAR 0 14
33945: PUSH
33946: LD_VAR 0 9
33950: ARRAY
33951: PUSH
33952: LD_INT 2
33954: ARRAY
33955: PPUSH
33956: CALL_OW 488
33960: NOT
33961: OR
33962: PUSH
33963: LD_VAR 0 13
33967: PPUSH
33968: CALL_OW 247
33972: PUSH
33973: LD_INT 3
33975: EQUAL
33976: OR
33977: IFFALSE 33983
// exit ;
33979: POP
33980: POP
33981: GO 34527
// if not tmp then
33983: LD_VAR 0 13
33987: NOT
33988: IFFALSE 33992
// continue ;
33990: GO 33848
// result := true ;
33992: LD_ADDR_VAR 0 8
33996: PUSH
33997: LD_INT 1
33999: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34000: LD_VAR 0 6
34004: PUSH
34005: LD_VAR 0 13
34009: PPUSH
34010: CALL_OW 247
34014: PUSH
34015: LD_INT 2
34017: EQUAL
34018: AND
34019: PUSH
34020: LD_VAR 0 13
34024: PPUSH
34025: CALL_OW 263
34029: PUSH
34030: LD_INT 1
34032: EQUAL
34033: AND
34034: IFFALSE 34198
// begin if IsDrivenBy ( tmp ) then
34036: LD_VAR 0 13
34040: PPUSH
34041: CALL_OW 311
34045: IFFALSE 34049
// continue ;
34047: GO 33848
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34049: LD_VAR 0 6
34053: PPUSH
34054: LD_INT 3
34056: PUSH
34057: LD_INT 60
34059: PUSH
34060: EMPTY
34061: LIST
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 55
34072: PUSH
34073: EMPTY
34074: LIST
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PPUSH
34084: CALL_OW 72
34088: IFFALSE 34196
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34090: LD_ADDR_VAR 0 18
34094: PUSH
34095: LD_VAR 0 6
34099: PPUSH
34100: LD_INT 3
34102: PUSH
34103: LD_INT 60
34105: PUSH
34106: EMPTY
34107: LIST
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 55
34118: PUSH
34119: EMPTY
34120: LIST
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PPUSH
34130: CALL_OW 72
34134: PUSH
34135: LD_INT 1
34137: ARRAY
34138: ST_TO_ADDR
// if IsInUnit ( driver ) then
34139: LD_VAR 0 18
34143: PPUSH
34144: CALL_OW 310
34148: IFFALSE 34159
// ComExit ( driver ) ;
34150: LD_VAR 0 18
34154: PPUSH
34155: CALL 58948 0 1
// AddComEnterUnit ( driver , tmp ) ;
34159: LD_VAR 0 18
34163: PPUSH
34164: LD_VAR 0 13
34168: PPUSH
34169: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34173: LD_VAR 0 18
34177: PPUSH
34178: LD_VAR 0 7
34182: PPUSH
34183: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34187: LD_VAR 0 18
34191: PPUSH
34192: CALL_OW 181
// end ; continue ;
34196: GO 33848
// end ; if not cleaners or not tmp in cleaners then
34198: LD_VAR 0 6
34202: NOT
34203: PUSH
34204: LD_VAR 0 13
34208: PUSH
34209: LD_VAR 0 6
34213: IN
34214: NOT
34215: OR
34216: IFFALSE 34523
// begin if dep then
34218: LD_VAR 0 17
34222: IFFALSE 34358
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34224: LD_ADDR_VAR 0 16
34228: PUSH
34229: LD_VAR 0 17
34233: PUSH
34234: LD_INT 1
34236: ARRAY
34237: PPUSH
34238: CALL_OW 250
34242: PPUSH
34243: LD_VAR 0 17
34247: PUSH
34248: LD_INT 1
34250: ARRAY
34251: PPUSH
34252: CALL_OW 254
34256: PPUSH
34257: LD_INT 5
34259: PPUSH
34260: CALL_OW 272
34264: PUSH
34265: LD_VAR 0 17
34269: PUSH
34270: LD_INT 1
34272: ARRAY
34273: PPUSH
34274: CALL_OW 251
34278: PPUSH
34279: LD_VAR 0 17
34283: PUSH
34284: LD_INT 1
34286: ARRAY
34287: PPUSH
34288: CALL_OW 254
34292: PPUSH
34293: LD_INT 5
34295: PPUSH
34296: CALL_OW 273
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34305: LD_VAR 0 16
34309: PUSH
34310: LD_INT 1
34312: ARRAY
34313: PPUSH
34314: LD_VAR 0 16
34318: PUSH
34319: LD_INT 2
34321: ARRAY
34322: PPUSH
34323: CALL_OW 488
34327: IFFALSE 34358
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34329: LD_VAR 0 13
34333: PPUSH
34334: LD_VAR 0 16
34338: PUSH
34339: LD_INT 1
34341: ARRAY
34342: PPUSH
34343: LD_VAR 0 16
34347: PUSH
34348: LD_INT 2
34350: ARRAY
34351: PPUSH
34352: CALL_OW 111
// continue ;
34356: GO 33848
// end ; end ; r := GetDir ( tmp ) ;
34358: LD_ADDR_VAR 0 15
34362: PUSH
34363: LD_VAR 0 13
34367: PPUSH
34368: CALL_OW 254
34372: ST_TO_ADDR
// if r = 5 then
34373: LD_VAR 0 15
34377: PUSH
34378: LD_INT 5
34380: EQUAL
34381: IFFALSE 34391
// r := 0 ;
34383: LD_ADDR_VAR 0 15
34387: PUSH
34388: LD_INT 0
34390: ST_TO_ADDR
// for j = r to 5 do
34391: LD_ADDR_VAR 0 10
34395: PUSH
34396: DOUBLE
34397: LD_VAR 0 15
34401: DEC
34402: ST_TO_ADDR
34403: LD_INT 5
34405: PUSH
34406: FOR_TO
34407: IFFALSE 34521
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34409: LD_ADDR_VAR 0 11
34413: PUSH
34414: LD_VAR 0 13
34418: PPUSH
34419: CALL_OW 250
34423: PPUSH
34424: LD_VAR 0 10
34428: PPUSH
34429: LD_INT 2
34431: PPUSH
34432: CALL_OW 272
34436: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34437: LD_ADDR_VAR 0 12
34441: PUSH
34442: LD_VAR 0 13
34446: PPUSH
34447: CALL_OW 251
34451: PPUSH
34452: LD_VAR 0 10
34456: PPUSH
34457: LD_INT 2
34459: PPUSH
34460: CALL_OW 273
34464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34465: LD_VAR 0 11
34469: PPUSH
34470: LD_VAR 0 12
34474: PPUSH
34475: CALL_OW 488
34479: PUSH
34480: LD_VAR 0 11
34484: PPUSH
34485: LD_VAR 0 12
34489: PPUSH
34490: CALL_OW 428
34494: NOT
34495: AND
34496: IFFALSE 34519
// begin ComMoveXY ( tmp , _x , _y ) ;
34498: LD_VAR 0 13
34502: PPUSH
34503: LD_VAR 0 11
34507: PPUSH
34508: LD_VAR 0 12
34512: PPUSH
34513: CALL_OW 111
// break ;
34517: GO 34521
// end ; end ;
34519: GO 34406
34521: POP
34522: POP
// end ; end ;
34523: GO 33848
34525: POP
34526: POP
// end ;
34527: LD_VAR 0 8
34531: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34532: LD_INT 0
34534: PPUSH
// result := true ;
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 1
34542: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34543: LD_VAR 0 2
34547: PUSH
34548: LD_INT 24
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34562
34554: LD_INT 33
34556: DOUBLE
34557: EQUAL
34558: IFTRUE 34562
34560: GO 34587
34562: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34563: LD_ADDR_VAR 0 3
34567: PUSH
34568: LD_INT 32
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 321
34580: PUSH
34581: LD_INT 2
34583: EQUAL
34584: ST_TO_ADDR
34585: GO 34907
34587: LD_INT 20
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34620
34595: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34596: LD_ADDR_VAR 0 3
34600: PUSH
34601: LD_INT 6
34603: PPUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: CALL_OW 321
34613: PUSH
34614: LD_INT 2
34616: EQUAL
34617: ST_TO_ADDR
34618: GO 34907
34620: LD_INT 22
34622: DOUBLE
34623: EQUAL
34624: IFTRUE 34634
34626: LD_INT 36
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34634
34632: GO 34659
34634: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34635: LD_ADDR_VAR 0 3
34639: PUSH
34640: LD_INT 15
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 321
34652: PUSH
34653: LD_INT 2
34655: EQUAL
34656: ST_TO_ADDR
34657: GO 34907
34659: LD_INT 30
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34692
34667: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 20
34675: PPUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 321
34685: PUSH
34686: LD_INT 2
34688: EQUAL
34689: ST_TO_ADDR
34690: GO 34907
34692: LD_INT 28
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34706
34698: LD_INT 21
34700: DOUBLE
34701: EQUAL
34702: IFTRUE 34706
34704: GO 34731
34706: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34707: LD_ADDR_VAR 0 3
34711: PUSH
34712: LD_INT 21
34714: PPUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 321
34724: PUSH
34725: LD_INT 2
34727: EQUAL
34728: ST_TO_ADDR
34729: GO 34907
34731: LD_INT 16
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34739
34737: GO 34766
34739: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34740: LD_ADDR_VAR 0 3
34744: PUSH
34745: LD_EXP 102
34749: PPUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 321
34759: PUSH
34760: LD_INT 2
34762: EQUAL
34763: ST_TO_ADDR
34764: GO 34907
34766: LD_INT 19
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34780
34772: LD_INT 23
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 34807
34780: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_EXP 101
34790: PPUSH
34791: LD_VAR 0 1
34795: PPUSH
34796: CALL_OW 321
34800: PUSH
34801: LD_INT 2
34803: EQUAL
34804: ST_TO_ADDR
34805: GO 34907
34807: LD_INT 17
34809: DOUBLE
34810: EQUAL
34811: IFTRUE 34815
34813: GO 34840
34815: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34816: LD_ADDR_VAR 0 3
34820: PUSH
34821: LD_INT 39
34823: PPUSH
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL_OW 321
34833: PUSH
34834: LD_INT 2
34836: EQUAL
34837: ST_TO_ADDR
34838: GO 34907
34840: LD_INT 18
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34873
34848: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 40
34856: PPUSH
34857: LD_VAR 0 1
34861: PPUSH
34862: CALL_OW 321
34866: PUSH
34867: LD_INT 2
34869: EQUAL
34870: ST_TO_ADDR
34871: GO 34907
34873: LD_INT 27
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34906
34881: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_INT 35
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 321
34899: PUSH
34900: LD_INT 2
34902: EQUAL
34903: ST_TO_ADDR
34904: GO 34907
34906: POP
// end ;
34907: LD_VAR 0 3
34911: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34912: LD_INT 0
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
// result := false ;
34925: LD_ADDR_VAR 0 6
34929: PUSH
34930: LD_INT 0
34932: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34933: LD_VAR 0 1
34937: NOT
34938: PUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 266
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: IN
34959: NOT
34960: OR
34961: PUSH
34962: LD_VAR 0 2
34966: NOT
34967: OR
34968: PUSH
34969: LD_VAR 0 5
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: LD_INT 4
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: IN
35000: NOT
35001: OR
35002: PUSH
35003: LD_VAR 0 3
35007: PPUSH
35008: LD_VAR 0 4
35012: PPUSH
35013: CALL_OW 488
35017: NOT
35018: OR
35019: IFFALSE 35023
// exit ;
35021: GO 35759
// side := GetSide ( depot ) ;
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 255
35037: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35038: LD_VAR 0 9
35042: PPUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: CALL 34532 0 2
35052: NOT
35053: IFFALSE 35057
// exit ;
35055: GO 35759
// pom := GetBase ( depot ) ;
35057: LD_ADDR_VAR 0 10
35061: PUSH
35062: LD_VAR 0 1
35066: PPUSH
35067: CALL_OW 274
35071: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35072: LD_ADDR_VAR 0 11
35076: PUSH
35077: LD_VAR 0 2
35081: PPUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: CALL_OW 248
35091: PPUSH
35092: CALL_OW 450
35096: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35097: LD_VAR 0 10
35101: PPUSH
35102: LD_INT 1
35104: PPUSH
35105: CALL_OW 275
35109: PUSH
35110: LD_VAR 0 11
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: GREATEREQUAL
35119: PUSH
35120: LD_VAR 0 10
35124: PPUSH
35125: LD_INT 2
35127: PPUSH
35128: CALL_OW 275
35132: PUSH
35133: LD_VAR 0 11
35137: PUSH
35138: LD_INT 2
35140: ARRAY
35141: GREATEREQUAL
35142: AND
35143: PUSH
35144: LD_VAR 0 10
35148: PPUSH
35149: LD_INT 3
35151: PPUSH
35152: CALL_OW 275
35156: PUSH
35157: LD_VAR 0 11
35161: PUSH
35162: LD_INT 3
35164: ARRAY
35165: GREATEREQUAL
35166: AND
35167: NOT
35168: IFFALSE 35172
// exit ;
35170: GO 35759
// if GetBType ( depot ) = b_depot then
35172: LD_VAR 0 1
35176: PPUSH
35177: CALL_OW 266
35181: PUSH
35182: LD_INT 0
35184: EQUAL
35185: IFFALSE 35197
// dist := 28 else
35187: LD_ADDR_VAR 0 14
35191: PUSH
35192: LD_INT 28
35194: ST_TO_ADDR
35195: GO 35205
// dist := 36 ;
35197: LD_ADDR_VAR 0 14
35201: PUSH
35202: LD_INT 36
35204: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35205: LD_VAR 0 1
35209: PPUSH
35210: LD_VAR 0 3
35214: PPUSH
35215: LD_VAR 0 4
35219: PPUSH
35220: CALL_OW 297
35224: PUSH
35225: LD_VAR 0 14
35229: GREATER
35230: IFFALSE 35234
// exit ;
35232: GO 35759
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35234: LD_ADDR_VAR 0 12
35238: PUSH
35239: LD_VAR 0 2
35243: PPUSH
35244: LD_VAR 0 3
35248: PPUSH
35249: LD_VAR 0 4
35253: PPUSH
35254: LD_VAR 0 5
35258: PPUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 248
35268: PPUSH
35269: LD_INT 0
35271: PPUSH
35272: CALL 35764 0 6
35276: ST_TO_ADDR
// if not hexes then
35277: LD_VAR 0 12
35281: NOT
35282: IFFALSE 35286
// exit ;
35284: GO 35759
// hex := GetHexInfo ( x , y ) ;
35286: LD_ADDR_VAR 0 15
35290: PUSH
35291: LD_VAR 0 3
35295: PPUSH
35296: LD_VAR 0 4
35300: PPUSH
35301: CALL_OW 546
35305: ST_TO_ADDR
// if hex [ 1 ] then
35306: LD_VAR 0 15
35310: PUSH
35311: LD_INT 1
35313: ARRAY
35314: IFFALSE 35318
// exit ;
35316: GO 35759
// height := hex [ 2 ] ;
35318: LD_ADDR_VAR 0 13
35322: PUSH
35323: LD_VAR 0 15
35327: PUSH
35328: LD_INT 2
35330: ARRAY
35331: ST_TO_ADDR
// for i = 1 to hexes do
35332: LD_ADDR_VAR 0 7
35336: PUSH
35337: DOUBLE
35338: LD_INT 1
35340: DEC
35341: ST_TO_ADDR
35342: LD_VAR 0 12
35346: PUSH
35347: FOR_TO
35348: IFFALSE 35678
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35350: LD_VAR 0 12
35354: PUSH
35355: LD_VAR 0 7
35359: ARRAY
35360: PUSH
35361: LD_INT 1
35363: ARRAY
35364: PPUSH
35365: LD_VAR 0 12
35369: PUSH
35370: LD_VAR 0 7
35374: ARRAY
35375: PUSH
35376: LD_INT 2
35378: ARRAY
35379: PPUSH
35380: CALL_OW 488
35384: NOT
35385: PUSH
35386: LD_VAR 0 12
35390: PUSH
35391: LD_VAR 0 7
35395: ARRAY
35396: PUSH
35397: LD_INT 1
35399: ARRAY
35400: PPUSH
35401: LD_VAR 0 12
35405: PUSH
35406: LD_VAR 0 7
35410: ARRAY
35411: PUSH
35412: LD_INT 2
35414: ARRAY
35415: PPUSH
35416: CALL_OW 428
35420: PUSH
35421: LD_INT 0
35423: GREATER
35424: OR
35425: PUSH
35426: LD_VAR 0 12
35430: PUSH
35431: LD_VAR 0 7
35435: ARRAY
35436: PUSH
35437: LD_INT 1
35439: ARRAY
35440: PPUSH
35441: LD_VAR 0 12
35445: PUSH
35446: LD_VAR 0 7
35450: ARRAY
35451: PUSH
35452: LD_INT 2
35454: ARRAY
35455: PPUSH
35456: CALL_OW 351
35460: OR
35461: IFFALSE 35467
// exit ;
35463: POP
35464: POP
35465: GO 35759
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35467: LD_ADDR_VAR 0 8
35471: PUSH
35472: LD_VAR 0 12
35476: PUSH
35477: LD_VAR 0 7
35481: ARRAY
35482: PUSH
35483: LD_INT 1
35485: ARRAY
35486: PPUSH
35487: LD_VAR 0 12
35491: PUSH
35492: LD_VAR 0 7
35496: ARRAY
35497: PUSH
35498: LD_INT 2
35500: ARRAY
35501: PPUSH
35502: CALL_OW 546
35506: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35507: LD_VAR 0 8
35511: PUSH
35512: LD_INT 1
35514: ARRAY
35515: PUSH
35516: LD_VAR 0 8
35520: PUSH
35521: LD_INT 2
35523: ARRAY
35524: PUSH
35525: LD_VAR 0 13
35529: PUSH
35530: LD_INT 2
35532: PLUS
35533: GREATER
35534: OR
35535: PUSH
35536: LD_VAR 0 8
35540: PUSH
35541: LD_INT 2
35543: ARRAY
35544: PUSH
35545: LD_VAR 0 13
35549: PUSH
35550: LD_INT 2
35552: MINUS
35553: LESS
35554: OR
35555: PUSH
35556: LD_VAR 0 8
35560: PUSH
35561: LD_INT 3
35563: ARRAY
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 8
35570: PUSH
35571: LD_INT 9
35573: PUSH
35574: LD_INT 10
35576: PUSH
35577: LD_INT 11
35579: PUSH
35580: LD_INT 12
35582: PUSH
35583: LD_INT 13
35585: PUSH
35586: LD_INT 16
35588: PUSH
35589: LD_INT 17
35591: PUSH
35592: LD_INT 18
35594: PUSH
35595: LD_INT 19
35597: PUSH
35598: LD_INT 20
35600: PUSH
35601: LD_INT 21
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: IN
35619: NOT
35620: OR
35621: PUSH
35622: LD_VAR 0 8
35626: PUSH
35627: LD_INT 5
35629: ARRAY
35630: NOT
35631: OR
35632: PUSH
35633: LD_VAR 0 8
35637: PUSH
35638: LD_INT 6
35640: ARRAY
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: LD_INT 7
35650: PUSH
35651: LD_INT 9
35653: PUSH
35654: LD_INT 10
35656: PUSH
35657: LD_INT 11
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: IN
35668: NOT
35669: OR
35670: IFFALSE 35676
// exit ;
35672: POP
35673: POP
35674: GO 35759
// end ;
35676: GO 35347
35678: POP
35679: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35680: LD_VAR 0 9
35684: PPUSH
35685: LD_VAR 0 3
35689: PPUSH
35690: LD_VAR 0 4
35694: PPUSH
35695: LD_INT 20
35697: PPUSH
35698: CALL 27704 0 4
35702: PUSH
35703: LD_INT 4
35705: ARRAY
35706: IFFALSE 35710
// exit ;
35708: GO 35759
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35710: LD_VAR 0 2
35714: PUSH
35715: LD_INT 29
35717: PUSH
35718: LD_INT 30
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: IN
35725: PUSH
35726: LD_VAR 0 3
35730: PPUSH
35731: LD_VAR 0 4
35735: PPUSH
35736: LD_VAR 0 9
35740: PPUSH
35741: CALL_OW 440
35745: NOT
35746: AND
35747: IFFALSE 35751
// exit ;
35749: GO 35759
// result := true ;
35751: LD_ADDR_VAR 0 6
35755: PUSH
35756: LD_INT 1
35758: ST_TO_ADDR
// end ;
35759: LD_VAR 0 6
35763: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35764: LD_INT 0
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
35803: PPUSH
35804: PPUSH
35805: PPUSH
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
// result = [ ] ;
35824: LD_ADDR_VAR 0 7
35828: PUSH
35829: EMPTY
35830: ST_TO_ADDR
// temp_list = [ ] ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: EMPTY
35837: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35838: LD_VAR 0 4
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 3
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: LD_INT 5
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: IN
35869: NOT
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: IN
35886: PUSH
35887: LD_VAR 0 5
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: IN
35906: NOT
35907: AND
35908: OR
35909: IFFALSE 35913
// exit ;
35911: GO 54304
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35913: LD_VAR 0 1
35917: PUSH
35918: LD_INT 6
35920: PUSH
35921: LD_INT 7
35923: PUSH
35924: LD_INT 8
35926: PUSH
35927: LD_INT 13
35929: PUSH
35930: LD_INT 12
35932: PUSH
35933: LD_INT 15
35935: PUSH
35936: LD_INT 11
35938: PUSH
35939: LD_INT 14
35941: PUSH
35942: LD_INT 10
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: IN
35956: IFFALSE 35966
// btype = b_lab ;
35958: LD_ADDR_VAR 0 1
35962: PUSH
35963: LD_INT 6
35965: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35966: LD_VAR 0 6
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: IN
35985: NOT
35986: PUSH
35987: LD_VAR 0 1
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: LD_INT 6
36006: PUSH
36007: LD_INT 36
36009: PUSH
36010: LD_INT 4
36012: PUSH
36013: LD_INT 5
36015: PUSH
36016: LD_INT 31
36018: PUSH
36019: LD_INT 32
36021: PUSH
36022: LD_INT 33
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: IN
36038: NOT
36039: PUSH
36040: LD_VAR 0 6
36044: PUSH
36045: LD_INT 1
36047: EQUAL
36048: AND
36049: OR
36050: PUSH
36051: LD_VAR 0 1
36055: PUSH
36056: LD_INT 2
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: IN
36066: NOT
36067: PUSH
36068: LD_VAR 0 6
36072: PUSH
36073: LD_INT 2
36075: EQUAL
36076: AND
36077: OR
36078: IFFALSE 36088
// mode = 0 ;
36080: LD_ADDR_VAR 0 6
36084: PUSH
36085: LD_INT 0
36087: ST_TO_ADDR
// case mode of 0 :
36088: LD_VAR 0 6
36092: PUSH
36093: LD_INT 0
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 47554
36101: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36102: LD_ADDR_VAR 0 11
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 3
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 3
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36295: LD_ADDR_VAR 0 12
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 1
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36491: LD_ADDR_VAR 0 13
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 3
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 3
36650: NEG
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 3
36662: NEG
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36690: LD_ADDR_VAR 0 14
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 3
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36886: LD_ADDR_VAR 0 15
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 3
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37079: LD_ADDR_VAR 0 16
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 3
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 3
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37272: LD_ADDR_VAR 0 17
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 2
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: LD_INT 2
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37502: LD_ADDR_VAR 0 18
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: NEG
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37732: LD_ADDR_VAR 0 19
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37962: LD_ADDR_VAR 0 20
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 2
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: NEG
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: NEG
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: LD_INT 2
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38192: LD_ADDR_VAR 0 21
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: NEG
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38422: LD_ADDR_VAR 0 22
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 0
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 2
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38652: LD_ADDR_VAR 0 23
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 3
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38932: LD_ADDR_VAR 0 24
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39208: LD_ADDR_VAR 0 25
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 1
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 3
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 3
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 3
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39482: LD_ADDR_VAR 0 26
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 3
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39758: LD_ADDR_VAR 0 27
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40038: LD_ADDR_VAR 0 28
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 3
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40320: LD_ADDR_VAR 0 29
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 2
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40599: LD_ADDR_VAR 0 30
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 2
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40877: LD_ADDR_VAR 0 31
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 2
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 2
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: LD_INT 3
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41155: LD_ADDR_VAR 0 32
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 3
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41433: LD_ADDR_VAR 0 33
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 3
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 3
41677: NEG
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41712: LD_ADDR_VAR 0 34
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 2
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 3
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 3
41957: NEG
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41992: LD_ADDR_VAR 0 35
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42104: LD_ADDR_VAR 0 36
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42216: LD_ADDR_VAR 0 37
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42328: LD_ADDR_VAR 0 38
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42440: LD_ADDR_VAR 0 39
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42552: LD_ADDR_VAR 0 40
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42664: LD_ADDR_VAR 0 41
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: NEG
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 3
42961: NEG
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 3
42973: NEG
42974: PUSH
42975: LD_INT 3
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43014: LD_ADDR_VAR 0 42
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 3
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 3
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43364: LD_ADDR_VAR 0 43
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 3
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 2
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43712: LD_ADDR_VAR 0 44
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 3
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 3
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 3
43997: NEG
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: NEG
44022: PUSH
44023: LD_INT 3
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44062: LD_ADDR_VAR 0 45
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: LD_INT 3
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 3
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 3
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 3
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: NEG
44372: PUSH
44373: LD_INT 3
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44412: LD_ADDR_VAR 0 46
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 3
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 3
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44760: LD_ADDR_VAR 0 47
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44911: LD_ADDR_VAR 0 48
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45058: LD_ADDR_VAR 0 49
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45202: LD_ADDR_VAR 0 50
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45346: LD_ADDR_VAR 0 51
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 2
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45493: LD_ADDR_VAR 0 52
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45644: LD_ADDR_VAR 0 53
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 2
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45874: LD_ADDR_VAR 0 54
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46104: LD_ADDR_VAR 0 55
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46334: LD_ADDR_VAR 0 56
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46564: LD_ADDR_VAR 0 57
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: LD_INT 2
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46794: LD_ADDR_VAR 0 58
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 1
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47024: LD_ADDR_VAR 0 59
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47112: LD_ADDR_VAR 0 60
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47200: LD_ADDR_VAR 0 61
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47288: LD_ADDR_VAR 0 62
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47376: LD_ADDR_VAR 0 63
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47464: LD_ADDR_VAR 0 64
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// end ; 1 :
47552: GO 53449
47554: LD_INT 1
47556: DOUBLE
47557: EQUAL
47558: IFTRUE 47562
47560: GO 50185
47562: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47563: LD_ADDR_VAR 0 11
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 3
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47607: LD_ADDR_VAR 0 12
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47648: LD_ADDR_VAR 0 13
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47688: LD_ADDR_VAR 0 14
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47729: LD_ADDR_VAR 0 15
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47773: LD_ADDR_VAR 0 16
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47819: LD_ADDR_VAR 0 17
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 3
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47863: LD_ADDR_VAR 0 18
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47904: LD_ADDR_VAR 0 19
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47944: LD_ADDR_VAR 0 20
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47985: LD_ADDR_VAR 0 21
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 3
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48029: LD_ADDR_VAR 0 22
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 3
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48075: LD_ADDR_VAR 0 23
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: LD_INT 4
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48119: LD_ADDR_VAR 0 24
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 4
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48160: LD_ADDR_VAR 0 25
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 4
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 4
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48200: LD_ADDR_VAR 0 26
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48241: LD_ADDR_VAR 0 27
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48285: LD_ADDR_VAR 0 28
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 4
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 4
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48331: LD_ADDR_VAR 0 29
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 4
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 5
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 5
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 4
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 6
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 6
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 5
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48486: LD_ADDR_VAR 0 30
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 4
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 4
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 5
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 5
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 5
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 6
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 6
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48629: LD_ADDR_VAR 0 31
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 3
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 4
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 4
48676: PUSH
48677: LD_INT 4
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: LD_INT 4
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 5
48696: PUSH
48697: LD_INT 4
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 5
48706: PUSH
48707: LD_INT 5
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 4
48716: PUSH
48717: LD_INT 5
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 6
48726: PUSH
48727: LD_INT 5
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 6
48736: PUSH
48737: LD_INT 6
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 5
48746: PUSH
48747: LD_INT 6
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48768: LD_ADDR_VAR 0 32
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 4
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 4
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 5
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 5
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 4
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 6
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 6
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 5
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48911: LD_ADDR_VAR 0 33
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 3
48929: NEG
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: NEG
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 4
48974: NEG
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 4
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 5
48997: NEG
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 5
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 5
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 6
49031: NEG
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 6
49042: NEG
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49066: LD_ADDR_VAR 0 34
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: LD_INT 3
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: LD_INT 4
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 4
49121: NEG
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: LD_INT 4
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: LD_INT 5
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 5
49157: NEG
49158: PUSH
49159: LD_INT 4
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: NEG
49170: PUSH
49171: LD_INT 5
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 5
49181: NEG
49182: PUSH
49183: LD_INT 6
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 6
49193: NEG
49194: PUSH
49195: LD_INT 5
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 6
49205: NEG
49206: PUSH
49207: LD_INT 6
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49229: LD_ADDR_VAR 0 41
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49273: LD_ADDR_VAR 0 42
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: LIST
49313: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49314: LD_ADDR_VAR 0 43
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 3
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49354: LD_ADDR_VAR 0 44
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49395: LD_ADDR_VAR 0 45
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49439: LD_ADDR_VAR 0 46
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49485: LD_ADDR_VAR 0 47
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49518: LD_ADDR_VAR 0 48
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49549: LD_ADDR_VAR 0 49
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49578: LD_ADDR_VAR 0 50
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49607: LD_ADDR_VAR 0 51
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49638: LD_ADDR_VAR 0 52
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49671: LD_ADDR_VAR 0 53
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49715: LD_ADDR_VAR 0 54
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49756: LD_ADDR_VAR 0 55
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49796: LD_ADDR_VAR 0 56
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49837: LD_ADDR_VAR 0 57
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49881: LD_ADDR_VAR 0 58
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49927: LD_ADDR_VAR 0 59
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49971: LD_ADDR_VAR 0 60
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50012: LD_ADDR_VAR 0 61
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50052: LD_ADDR_VAR 0 62
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50093: LD_ADDR_VAR 0 63
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50137: LD_ADDR_VAR 0 64
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: ST_TO_ADDR
// end ; 2 :
50183: GO 53449
50185: LD_INT 2
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 53448
50193: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50194: LD_ADDR_VAR 0 29
50198: PUSH
50199: LD_INT 4
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 4
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 5
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 5
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 5
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: LD_INT 4
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 4
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 4
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 4
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 4
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 5
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 4
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 5
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 3
50477: NEG
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 4
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 4
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 4
50579: NEG
50580: PUSH
50581: LD_INT 4
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: NEG
50592: PUSH
50593: LD_INT 5
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 4
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: NEG
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 5
50639: NEG
50640: PUSH
50641: LD_INT 4
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 5
50651: NEG
50652: PUSH
50653: LD_INT 5
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: LD_INT 5
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 5
50675: NEG
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50732: LD_ADDR_VAR 0 30
50736: PUSH
50737: LD_INT 4
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 4
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 5
50759: PUSH
50760: LD_INT 4
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 5
50769: PUSH
50770: LD_INT 5
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: PUSH
50780: LD_INT 5
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 5
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: PUSH
50820: LD_INT 5
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 3
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 4
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 4
50922: NEG
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 4
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 5
50978: NEG
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 5
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 5
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 4
51084: NEG
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: NEG
51097: PUSH
51098: LD_INT 4
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 4
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 4
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 5
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 3
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 5
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: LD_INT 5
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51279: LD_ADDR_VAR 0 31
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 4
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 4
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 5
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 5
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 4
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 3
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 4
51446: NEG
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 4
51481: NEG
51482: PUSH
51483: LD_INT 4
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 4
51493: NEG
51494: PUSH
51495: LD_INT 5
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 4
51529: NEG
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 5
51541: NEG
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 5
51553: NEG
51554: PUSH
51555: LD_INT 5
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 5
51577: NEG
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 3
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: LD_INT 4
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 2
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: LD_INT 4
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: NEG
51680: PUSH
51681: LD_INT 4
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 4
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 5
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 5
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 5
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51829: LD_ADDR_VAR 0 32
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 4
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 5
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 5
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 5
51915: NEG
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 3
51927: NEG
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 2
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: NEG
51999: PUSH
52000: LD_INT 3
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 4
52010: NEG
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 4
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 4
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 4
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 5
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: LD_INT 4
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 5
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 5
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 4
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 4
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 4
52241: PUSH
52242: LD_INT 4
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 4
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 5
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 5
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52376: LD_ADDR_VAR 0 33
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: LD_INT 4
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: LD_INT 5
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 4
52431: NEG
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 5
52443: NEG
52444: PUSH
52445: LD_INT 4
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 5
52455: NEG
52456: PUSH
52457: LD_INT 5
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 3
52467: NEG
52468: PUSH
52469: LD_INT 5
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 5
52479: NEG
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 4
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 4
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 4
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 5
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 5
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 2
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 5
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 4
52716: PUSH
52717: LD_INT 4
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: LD_INT 4
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 4
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 4
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 5
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 4
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 5
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52914: LD_ADDR_VAR 0 34
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 4
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 5
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 4
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 4
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 5
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 5
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 4
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 4
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 4
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 5
53136: PUSH
53137: LD_INT 4
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 5
53146: PUSH
53147: LD_INT 5
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 4
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: LD_INT 3
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 5
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 4
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 4
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 4
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 4
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 4
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 5
53355: NEG
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 5
53366: NEG
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 5
53378: NEG
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// end ; end ;
53446: GO 53449
53448: POP
// case btype of b_depot , b_warehouse :
53449: LD_VAR 0 1
53453: PUSH
53454: LD_INT 0
53456: DOUBLE
53457: EQUAL
53458: IFTRUE 53468
53460: LD_INT 1
53462: DOUBLE
53463: EQUAL
53464: IFTRUE 53468
53466: GO 53669
53468: POP
// case nation of nation_american :
53469: LD_VAR 0 5
53473: PUSH
53474: LD_INT 1
53476: DOUBLE
53477: EQUAL
53478: IFTRUE 53482
53480: GO 53538
53482: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53483: LD_ADDR_VAR 0 9
53487: PUSH
53488: LD_VAR 0 11
53492: PUSH
53493: LD_VAR 0 12
53497: PUSH
53498: LD_VAR 0 13
53502: PUSH
53503: LD_VAR 0 14
53507: PUSH
53508: LD_VAR 0 15
53512: PUSH
53513: LD_VAR 0 16
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: PUSH
53526: LD_VAR 0 4
53530: PUSH
53531: LD_INT 1
53533: PLUS
53534: ARRAY
53535: ST_TO_ADDR
53536: GO 53667
53538: LD_INT 2
53540: DOUBLE
53541: EQUAL
53542: IFTRUE 53546
53544: GO 53602
53546: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53547: LD_ADDR_VAR 0 9
53551: PUSH
53552: LD_VAR 0 17
53556: PUSH
53557: LD_VAR 0 18
53561: PUSH
53562: LD_VAR 0 19
53566: PUSH
53567: LD_VAR 0 20
53571: PUSH
53572: LD_VAR 0 21
53576: PUSH
53577: LD_VAR 0 22
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: PUSH
53590: LD_VAR 0 4
53594: PUSH
53595: LD_INT 1
53597: PLUS
53598: ARRAY
53599: ST_TO_ADDR
53600: GO 53667
53602: LD_INT 3
53604: DOUBLE
53605: EQUAL
53606: IFTRUE 53610
53608: GO 53666
53610: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53611: LD_ADDR_VAR 0 9
53615: PUSH
53616: LD_VAR 0 23
53620: PUSH
53621: LD_VAR 0 24
53625: PUSH
53626: LD_VAR 0 25
53630: PUSH
53631: LD_VAR 0 26
53635: PUSH
53636: LD_VAR 0 27
53640: PUSH
53641: LD_VAR 0 28
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: PUSH
53654: LD_VAR 0 4
53658: PUSH
53659: LD_INT 1
53661: PLUS
53662: ARRAY
53663: ST_TO_ADDR
53664: GO 53667
53666: POP
53667: GO 54222
53669: LD_INT 2
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53683
53675: LD_INT 3
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53683
53681: GO 53739
53683: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53684: LD_ADDR_VAR 0 9
53688: PUSH
53689: LD_VAR 0 29
53693: PUSH
53694: LD_VAR 0 30
53698: PUSH
53699: LD_VAR 0 31
53703: PUSH
53704: LD_VAR 0 32
53708: PUSH
53709: LD_VAR 0 33
53713: PUSH
53714: LD_VAR 0 34
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: LD_VAR 0 4
53731: PUSH
53732: LD_INT 1
53734: PLUS
53735: ARRAY
53736: ST_TO_ADDR
53737: GO 54222
53739: LD_INT 16
53741: DOUBLE
53742: EQUAL
53743: IFTRUE 53801
53745: LD_INT 17
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53801
53751: LD_INT 18
53753: DOUBLE
53754: EQUAL
53755: IFTRUE 53801
53757: LD_INT 19
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53801
53763: LD_INT 22
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53801
53769: LD_INT 20
53771: DOUBLE
53772: EQUAL
53773: IFTRUE 53801
53775: LD_INT 21
53777: DOUBLE
53778: EQUAL
53779: IFTRUE 53801
53781: LD_INT 23
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53801
53787: LD_INT 24
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53801
53793: LD_INT 25
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53857
53801: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53802: LD_ADDR_VAR 0 9
53806: PUSH
53807: LD_VAR 0 35
53811: PUSH
53812: LD_VAR 0 36
53816: PUSH
53817: LD_VAR 0 37
53821: PUSH
53822: LD_VAR 0 38
53826: PUSH
53827: LD_VAR 0 39
53831: PUSH
53832: LD_VAR 0 40
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: PUSH
53845: LD_VAR 0 4
53849: PUSH
53850: LD_INT 1
53852: PLUS
53853: ARRAY
53854: ST_TO_ADDR
53855: GO 54222
53857: LD_INT 6
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53913
53863: LD_INT 7
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53913
53869: LD_INT 8
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53913
53875: LD_INT 13
53877: DOUBLE
53878: EQUAL
53879: IFTRUE 53913
53881: LD_INT 12
53883: DOUBLE
53884: EQUAL
53885: IFTRUE 53913
53887: LD_INT 15
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53913
53893: LD_INT 11
53895: DOUBLE
53896: EQUAL
53897: IFTRUE 53913
53899: LD_INT 14
53901: DOUBLE
53902: EQUAL
53903: IFTRUE 53913
53905: LD_INT 10
53907: DOUBLE
53908: EQUAL
53909: IFTRUE 53913
53911: GO 53969
53913: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53914: LD_ADDR_VAR 0 9
53918: PUSH
53919: LD_VAR 0 41
53923: PUSH
53924: LD_VAR 0 42
53928: PUSH
53929: LD_VAR 0 43
53933: PUSH
53934: LD_VAR 0 44
53938: PUSH
53939: LD_VAR 0 45
53943: PUSH
53944: LD_VAR 0 46
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: PUSH
53957: LD_VAR 0 4
53961: PUSH
53962: LD_INT 1
53964: PLUS
53965: ARRAY
53966: ST_TO_ADDR
53967: GO 54222
53969: LD_INT 36
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 53977
53975: GO 54033
53977: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53978: LD_ADDR_VAR 0 9
53982: PUSH
53983: LD_VAR 0 47
53987: PUSH
53988: LD_VAR 0 48
53992: PUSH
53993: LD_VAR 0 49
53997: PUSH
53998: LD_VAR 0 50
54002: PUSH
54003: LD_VAR 0 51
54007: PUSH
54008: LD_VAR 0 52
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: PUSH
54021: LD_VAR 0 4
54025: PUSH
54026: LD_INT 1
54028: PLUS
54029: ARRAY
54030: ST_TO_ADDR
54031: GO 54222
54033: LD_INT 4
54035: DOUBLE
54036: EQUAL
54037: IFTRUE 54059
54039: LD_INT 5
54041: DOUBLE
54042: EQUAL
54043: IFTRUE 54059
54045: LD_INT 34
54047: DOUBLE
54048: EQUAL
54049: IFTRUE 54059
54051: LD_INT 37
54053: DOUBLE
54054: EQUAL
54055: IFTRUE 54059
54057: GO 54115
54059: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54060: LD_ADDR_VAR 0 9
54064: PUSH
54065: LD_VAR 0 53
54069: PUSH
54070: LD_VAR 0 54
54074: PUSH
54075: LD_VAR 0 55
54079: PUSH
54080: LD_VAR 0 56
54084: PUSH
54085: LD_VAR 0 57
54089: PUSH
54090: LD_VAR 0 58
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: PUSH
54103: LD_VAR 0 4
54107: PUSH
54108: LD_INT 1
54110: PLUS
54111: ARRAY
54112: ST_TO_ADDR
54113: GO 54222
54115: LD_INT 31
54117: DOUBLE
54118: EQUAL
54119: IFTRUE 54165
54121: LD_INT 32
54123: DOUBLE
54124: EQUAL
54125: IFTRUE 54165
54127: LD_INT 33
54129: DOUBLE
54130: EQUAL
54131: IFTRUE 54165
54133: LD_INT 27
54135: DOUBLE
54136: EQUAL
54137: IFTRUE 54165
54139: LD_INT 26
54141: DOUBLE
54142: EQUAL
54143: IFTRUE 54165
54145: LD_INT 28
54147: DOUBLE
54148: EQUAL
54149: IFTRUE 54165
54151: LD_INT 29
54153: DOUBLE
54154: EQUAL
54155: IFTRUE 54165
54157: LD_INT 30
54159: DOUBLE
54160: EQUAL
54161: IFTRUE 54165
54163: GO 54221
54165: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54166: LD_ADDR_VAR 0 9
54170: PUSH
54171: LD_VAR 0 59
54175: PUSH
54176: LD_VAR 0 60
54180: PUSH
54181: LD_VAR 0 61
54185: PUSH
54186: LD_VAR 0 62
54190: PUSH
54191: LD_VAR 0 63
54195: PUSH
54196: LD_VAR 0 64
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: PUSH
54209: LD_VAR 0 4
54213: PUSH
54214: LD_INT 1
54216: PLUS
54217: ARRAY
54218: ST_TO_ADDR
54219: GO 54222
54221: POP
// temp_list2 = [ ] ;
54222: LD_ADDR_VAR 0 10
54226: PUSH
54227: EMPTY
54228: ST_TO_ADDR
// for i in temp_list do
54229: LD_ADDR_VAR 0 8
54233: PUSH
54234: LD_VAR 0 9
54238: PUSH
54239: FOR_IN
54240: IFFALSE 54292
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54242: LD_ADDR_VAR 0 10
54246: PUSH
54247: LD_VAR 0 10
54251: PUSH
54252: LD_VAR 0 8
54256: PUSH
54257: LD_INT 1
54259: ARRAY
54260: PUSH
54261: LD_VAR 0 2
54265: PLUS
54266: PUSH
54267: LD_VAR 0 8
54271: PUSH
54272: LD_INT 2
54274: ARRAY
54275: PUSH
54276: LD_VAR 0 3
54280: PLUS
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: ADD
54289: ST_TO_ADDR
54290: GO 54239
54292: POP
54293: POP
// result = temp_list2 ;
54294: LD_ADDR_VAR 0 7
54298: PUSH
54299: LD_VAR 0 10
54303: ST_TO_ADDR
// end ;
54304: LD_VAR 0 7
54308: RET
// export function EnemyInRange ( unit , dist ) ; begin
54309: LD_INT 0
54311: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54312: LD_ADDR_VAR 0 3
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL_OW 255
54326: PPUSH
54327: LD_VAR 0 1
54331: PPUSH
54332: CALL_OW 250
54336: PPUSH
54337: LD_VAR 0 1
54341: PPUSH
54342: CALL_OW 251
54346: PPUSH
54347: LD_VAR 0 2
54351: PPUSH
54352: CALL 27704 0 4
54356: PUSH
54357: LD_INT 4
54359: ARRAY
54360: ST_TO_ADDR
// end ;
54361: LD_VAR 0 3
54365: RET
// export function PlayerSeeMe ( unit ) ; begin
54366: LD_INT 0
54368: PPUSH
// result := See ( your_side , unit ) ;
54369: LD_ADDR_VAR 0 2
54373: PUSH
54374: LD_OWVAR 2
54378: PPUSH
54379: LD_VAR 0 1
54383: PPUSH
54384: CALL_OW 292
54388: ST_TO_ADDR
// end ;
54389: LD_VAR 0 2
54393: RET
// export function ReverseDir ( unit ) ; begin
54394: LD_INT 0
54396: PPUSH
// if not unit then
54397: LD_VAR 0 1
54401: NOT
54402: IFFALSE 54406
// exit ;
54404: GO 54429
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54406: LD_ADDR_VAR 0 2
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 254
54420: PUSH
54421: LD_INT 3
54423: PLUS
54424: PUSH
54425: LD_INT 6
54427: MOD
54428: ST_TO_ADDR
// end ;
54429: LD_VAR 0 2
54433: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54434: LD_INT 0
54436: PPUSH
54437: PPUSH
54438: PPUSH
54439: PPUSH
54440: PPUSH
// if not hexes then
54441: LD_VAR 0 2
54445: NOT
54446: IFFALSE 54450
// exit ;
54448: GO 54598
// dist := 9999 ;
54450: LD_ADDR_VAR 0 5
54454: PUSH
54455: LD_INT 9999
54457: ST_TO_ADDR
// for i = 1 to hexes do
54458: LD_ADDR_VAR 0 4
54462: PUSH
54463: DOUBLE
54464: LD_INT 1
54466: DEC
54467: ST_TO_ADDR
54468: LD_VAR 0 2
54472: PUSH
54473: FOR_TO
54474: IFFALSE 54586
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54476: LD_VAR 0 1
54480: PPUSH
54481: LD_VAR 0 2
54485: PUSH
54486: LD_VAR 0 4
54490: ARRAY
54491: PUSH
54492: LD_INT 1
54494: ARRAY
54495: PPUSH
54496: LD_VAR 0 2
54500: PUSH
54501: LD_VAR 0 4
54505: ARRAY
54506: PUSH
54507: LD_INT 2
54509: ARRAY
54510: PPUSH
54511: CALL_OW 297
54515: PUSH
54516: LD_VAR 0 5
54520: LESS
54521: IFFALSE 54584
// begin hex := hexes [ i ] ;
54523: LD_ADDR_VAR 0 7
54527: PUSH
54528: LD_VAR 0 2
54532: PUSH
54533: LD_VAR 0 4
54537: ARRAY
54538: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54539: LD_ADDR_VAR 0 5
54543: PUSH
54544: LD_VAR 0 1
54548: PPUSH
54549: LD_VAR 0 2
54553: PUSH
54554: LD_VAR 0 4
54558: ARRAY
54559: PUSH
54560: LD_INT 1
54562: ARRAY
54563: PPUSH
54564: LD_VAR 0 2
54568: PUSH
54569: LD_VAR 0 4
54573: ARRAY
54574: PUSH
54575: LD_INT 2
54577: ARRAY
54578: PPUSH
54579: CALL_OW 297
54583: ST_TO_ADDR
// end ; end ;
54584: GO 54473
54586: POP
54587: POP
// result := hex ;
54588: LD_ADDR_VAR 0 3
54592: PUSH
54593: LD_VAR 0 7
54597: ST_TO_ADDR
// end ;
54598: LD_VAR 0 3
54602: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54603: LD_INT 0
54605: PPUSH
54606: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54607: LD_VAR 0 1
54611: NOT
54612: PUSH
54613: LD_VAR 0 1
54617: PUSH
54618: LD_INT 21
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 23
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PPUSH
54642: CALL_OW 69
54646: IN
54647: NOT
54648: OR
54649: IFFALSE 54653
// exit ;
54651: GO 54700
// for i = 1 to 3 do
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: DOUBLE
54659: LD_INT 1
54661: DEC
54662: ST_TO_ADDR
54663: LD_INT 3
54665: PUSH
54666: FOR_TO
54667: IFFALSE 54698
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54669: LD_VAR 0 1
54673: PPUSH
54674: CALL_OW 250
54678: PPUSH
54679: LD_VAR 0 1
54683: PPUSH
54684: CALL_OW 251
54688: PPUSH
54689: LD_INT 1
54691: PPUSH
54692: CALL_OW 453
54696: GO 54666
54698: POP
54699: POP
// end ;
54700: LD_VAR 0 2
54704: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54705: LD_INT 0
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
54711: PPUSH
54712: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54713: LD_VAR 0 1
54717: NOT
54718: PUSH
54719: LD_VAR 0 2
54723: NOT
54724: OR
54725: PUSH
54726: LD_VAR 0 1
54730: PPUSH
54731: CALL_OW 314
54735: OR
54736: IFFALSE 54740
// exit ;
54738: GO 55181
// x := GetX ( enemy_unit ) ;
54740: LD_ADDR_VAR 0 7
54744: PUSH
54745: LD_VAR 0 2
54749: PPUSH
54750: CALL_OW 250
54754: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54755: LD_ADDR_VAR 0 8
54759: PUSH
54760: LD_VAR 0 2
54764: PPUSH
54765: CALL_OW 251
54769: ST_TO_ADDR
// if not x or not y then
54770: LD_VAR 0 7
54774: NOT
54775: PUSH
54776: LD_VAR 0 8
54780: NOT
54781: OR
54782: IFFALSE 54786
// exit ;
54784: GO 55181
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54786: LD_ADDR_VAR 0 6
54790: PUSH
54791: LD_VAR 0 7
54795: PPUSH
54796: LD_INT 0
54798: PPUSH
54799: LD_INT 4
54801: PPUSH
54802: CALL_OW 272
54806: PUSH
54807: LD_VAR 0 8
54811: PPUSH
54812: LD_INT 0
54814: PPUSH
54815: LD_INT 4
54817: PPUSH
54818: CALL_OW 273
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_VAR 0 7
54831: PPUSH
54832: LD_INT 1
54834: PPUSH
54835: LD_INT 4
54837: PPUSH
54838: CALL_OW 272
54842: PUSH
54843: LD_VAR 0 8
54847: PPUSH
54848: LD_INT 1
54850: PPUSH
54851: LD_INT 4
54853: PPUSH
54854: CALL_OW 273
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_VAR 0 7
54867: PPUSH
54868: LD_INT 2
54870: PPUSH
54871: LD_INT 4
54873: PPUSH
54874: CALL_OW 272
54878: PUSH
54879: LD_VAR 0 8
54883: PPUSH
54884: LD_INT 2
54886: PPUSH
54887: LD_INT 4
54889: PPUSH
54890: CALL_OW 273
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_VAR 0 7
54903: PPUSH
54904: LD_INT 3
54906: PPUSH
54907: LD_INT 4
54909: PPUSH
54910: CALL_OW 272
54914: PUSH
54915: LD_VAR 0 8
54919: PPUSH
54920: LD_INT 3
54922: PPUSH
54923: LD_INT 4
54925: PPUSH
54926: CALL_OW 273
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_VAR 0 7
54939: PPUSH
54940: LD_INT 4
54942: PPUSH
54943: LD_INT 4
54945: PPUSH
54946: CALL_OW 272
54950: PUSH
54951: LD_VAR 0 8
54955: PPUSH
54956: LD_INT 4
54958: PPUSH
54959: LD_INT 4
54961: PPUSH
54962: CALL_OW 273
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_VAR 0 7
54975: PPUSH
54976: LD_INT 5
54978: PPUSH
54979: LD_INT 4
54981: PPUSH
54982: CALL_OW 272
54986: PUSH
54987: LD_VAR 0 8
54991: PPUSH
54992: LD_INT 5
54994: PPUSH
54995: LD_INT 4
54997: PPUSH
54998: CALL_OW 273
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// for i = tmp downto 1 do
55015: LD_ADDR_VAR 0 4
55019: PUSH
55020: DOUBLE
55021: LD_VAR 0 6
55025: INC
55026: ST_TO_ADDR
55027: LD_INT 1
55029: PUSH
55030: FOR_DOWNTO
55031: IFFALSE 55132
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55033: LD_VAR 0 6
55037: PUSH
55038: LD_VAR 0 4
55042: ARRAY
55043: PUSH
55044: LD_INT 1
55046: ARRAY
55047: PPUSH
55048: LD_VAR 0 6
55052: PUSH
55053: LD_VAR 0 4
55057: ARRAY
55058: PUSH
55059: LD_INT 2
55061: ARRAY
55062: PPUSH
55063: CALL_OW 488
55067: NOT
55068: PUSH
55069: LD_VAR 0 6
55073: PUSH
55074: LD_VAR 0 4
55078: ARRAY
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PPUSH
55084: LD_VAR 0 6
55088: PUSH
55089: LD_VAR 0 4
55093: ARRAY
55094: PUSH
55095: LD_INT 2
55097: ARRAY
55098: PPUSH
55099: CALL_OW 428
55103: PUSH
55104: LD_INT 0
55106: NONEQUAL
55107: OR
55108: IFFALSE 55130
// tmp := Delete ( tmp , i ) ;
55110: LD_ADDR_VAR 0 6
55114: PUSH
55115: LD_VAR 0 6
55119: PPUSH
55120: LD_VAR 0 4
55124: PPUSH
55125: CALL_OW 3
55129: ST_TO_ADDR
55130: GO 55030
55132: POP
55133: POP
// j := GetClosestHex ( unit , tmp ) ;
55134: LD_ADDR_VAR 0 5
55138: PUSH
55139: LD_VAR 0 1
55143: PPUSH
55144: LD_VAR 0 6
55148: PPUSH
55149: CALL 54434 0 2
55153: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55154: LD_VAR 0 1
55158: PPUSH
55159: LD_VAR 0 5
55163: PUSH
55164: LD_INT 1
55166: ARRAY
55167: PPUSH
55168: LD_VAR 0 5
55172: PUSH
55173: LD_INT 2
55175: ARRAY
55176: PPUSH
55177: CALL_OW 111
// end ;
55181: LD_VAR 0 3
55185: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55186: LD_INT 0
55188: PPUSH
55189: PPUSH
55190: PPUSH
// uc_side = 0 ;
55191: LD_ADDR_OWVAR 20
55195: PUSH
55196: LD_INT 0
55198: ST_TO_ADDR
// uc_nation = 0 ;
55199: LD_ADDR_OWVAR 21
55203: PUSH
55204: LD_INT 0
55206: ST_TO_ADDR
// InitHc_All ( ) ;
55207: CALL_OW 584
// InitVc ;
55211: CALL_OW 20
// if mastodonts then
55215: LD_VAR 0 6
55219: IFFALSE 55286
// for i = 1 to mastodonts do
55221: LD_ADDR_VAR 0 11
55225: PUSH
55226: DOUBLE
55227: LD_INT 1
55229: DEC
55230: ST_TO_ADDR
55231: LD_VAR 0 6
55235: PUSH
55236: FOR_TO
55237: IFFALSE 55284
// begin vc_chassis := 31 ;
55239: LD_ADDR_OWVAR 37
55243: PUSH
55244: LD_INT 31
55246: ST_TO_ADDR
// vc_control := control_rider ;
55247: LD_ADDR_OWVAR 38
55251: PUSH
55252: LD_INT 4
55254: ST_TO_ADDR
// animal := CreateVehicle ;
55255: LD_ADDR_VAR 0 12
55259: PUSH
55260: CALL_OW 45
55264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55265: LD_VAR 0 12
55269: PPUSH
55270: LD_VAR 0 8
55274: PPUSH
55275: LD_INT 0
55277: PPUSH
55278: CALL 57474 0 3
// end ;
55282: GO 55236
55284: POP
55285: POP
// if horses then
55286: LD_VAR 0 5
55290: IFFALSE 55357
// for i = 1 to horses do
55292: LD_ADDR_VAR 0 11
55296: PUSH
55297: DOUBLE
55298: LD_INT 1
55300: DEC
55301: ST_TO_ADDR
55302: LD_VAR 0 5
55306: PUSH
55307: FOR_TO
55308: IFFALSE 55355
// begin hc_class := 21 ;
55310: LD_ADDR_OWVAR 28
55314: PUSH
55315: LD_INT 21
55317: ST_TO_ADDR
// hc_gallery :=  ;
55318: LD_ADDR_OWVAR 33
55322: PUSH
55323: LD_STRING 
55325: ST_TO_ADDR
// animal := CreateHuman ;
55326: LD_ADDR_VAR 0 12
55330: PUSH
55331: CALL_OW 44
55335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55336: LD_VAR 0 12
55340: PPUSH
55341: LD_VAR 0 8
55345: PPUSH
55346: LD_INT 0
55348: PPUSH
55349: CALL 57474 0 3
// end ;
55353: GO 55307
55355: POP
55356: POP
// if birds then
55357: LD_VAR 0 1
55361: IFFALSE 55428
// for i = 1 to birds do
55363: LD_ADDR_VAR 0 11
55367: PUSH
55368: DOUBLE
55369: LD_INT 1
55371: DEC
55372: ST_TO_ADDR
55373: LD_VAR 0 1
55377: PUSH
55378: FOR_TO
55379: IFFALSE 55426
// begin hc_class = 18 ;
55381: LD_ADDR_OWVAR 28
55385: PUSH
55386: LD_INT 18
55388: ST_TO_ADDR
// hc_gallery =  ;
55389: LD_ADDR_OWVAR 33
55393: PUSH
55394: LD_STRING 
55396: ST_TO_ADDR
// animal := CreateHuman ;
55397: LD_ADDR_VAR 0 12
55401: PUSH
55402: CALL_OW 44
55406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55407: LD_VAR 0 12
55411: PPUSH
55412: LD_VAR 0 8
55416: PPUSH
55417: LD_INT 0
55419: PPUSH
55420: CALL 57474 0 3
// end ;
55424: GO 55378
55426: POP
55427: POP
// if tigers then
55428: LD_VAR 0 2
55432: IFFALSE 55516
// for i = 1 to tigers do
55434: LD_ADDR_VAR 0 11
55438: PUSH
55439: DOUBLE
55440: LD_INT 1
55442: DEC
55443: ST_TO_ADDR
55444: LD_VAR 0 2
55448: PUSH
55449: FOR_TO
55450: IFFALSE 55514
// begin hc_class = class_tiger ;
55452: LD_ADDR_OWVAR 28
55456: PUSH
55457: LD_INT 14
55459: ST_TO_ADDR
// hc_gallery =  ;
55460: LD_ADDR_OWVAR 33
55464: PUSH
55465: LD_STRING 
55467: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55468: LD_ADDR_OWVAR 35
55472: PUSH
55473: LD_INT 7
55475: NEG
55476: PPUSH
55477: LD_INT 7
55479: PPUSH
55480: CALL_OW 12
55484: ST_TO_ADDR
// animal := CreateHuman ;
55485: LD_ADDR_VAR 0 12
55489: PUSH
55490: CALL_OW 44
55494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55495: LD_VAR 0 12
55499: PPUSH
55500: LD_VAR 0 8
55504: PPUSH
55505: LD_INT 0
55507: PPUSH
55508: CALL 57474 0 3
// end ;
55512: GO 55449
55514: POP
55515: POP
// if apemans then
55516: LD_VAR 0 3
55520: IFFALSE 55643
// for i = 1 to apemans do
55522: LD_ADDR_VAR 0 11
55526: PUSH
55527: DOUBLE
55528: LD_INT 1
55530: DEC
55531: ST_TO_ADDR
55532: LD_VAR 0 3
55536: PUSH
55537: FOR_TO
55538: IFFALSE 55641
// begin hc_class = class_apeman ;
55540: LD_ADDR_OWVAR 28
55544: PUSH
55545: LD_INT 12
55547: ST_TO_ADDR
// hc_gallery =  ;
55548: LD_ADDR_OWVAR 33
55552: PUSH
55553: LD_STRING 
55555: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55556: LD_ADDR_OWVAR 35
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PPUSH
55565: LD_INT 2
55567: PPUSH
55568: CALL_OW 12
55572: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55573: LD_ADDR_OWVAR 31
55577: PUSH
55578: LD_INT 1
55580: PPUSH
55581: LD_INT 3
55583: PPUSH
55584: CALL_OW 12
55588: PUSH
55589: LD_INT 1
55591: PPUSH
55592: LD_INT 3
55594: PPUSH
55595: CALL_OW 12
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// animal := CreateHuman ;
55612: LD_ADDR_VAR 0 12
55616: PUSH
55617: CALL_OW 44
55621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55622: LD_VAR 0 12
55626: PPUSH
55627: LD_VAR 0 8
55631: PPUSH
55632: LD_INT 0
55634: PPUSH
55635: CALL 57474 0 3
// end ;
55639: GO 55537
55641: POP
55642: POP
// if enchidnas then
55643: LD_VAR 0 4
55647: IFFALSE 55714
// for i = 1 to enchidnas do
55649: LD_ADDR_VAR 0 11
55653: PUSH
55654: DOUBLE
55655: LD_INT 1
55657: DEC
55658: ST_TO_ADDR
55659: LD_VAR 0 4
55663: PUSH
55664: FOR_TO
55665: IFFALSE 55712
// begin hc_class = 13 ;
55667: LD_ADDR_OWVAR 28
55671: PUSH
55672: LD_INT 13
55674: ST_TO_ADDR
// hc_gallery =  ;
55675: LD_ADDR_OWVAR 33
55679: PUSH
55680: LD_STRING 
55682: ST_TO_ADDR
// animal := CreateHuman ;
55683: LD_ADDR_VAR 0 12
55687: PUSH
55688: CALL_OW 44
55692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55693: LD_VAR 0 12
55697: PPUSH
55698: LD_VAR 0 8
55702: PPUSH
55703: LD_INT 0
55705: PPUSH
55706: CALL 57474 0 3
// end ;
55710: GO 55664
55712: POP
55713: POP
// if fishes then
55714: LD_VAR 0 7
55718: IFFALSE 55785
// for i = 1 to fishes do
55720: LD_ADDR_VAR 0 11
55724: PUSH
55725: DOUBLE
55726: LD_INT 1
55728: DEC
55729: ST_TO_ADDR
55730: LD_VAR 0 7
55734: PUSH
55735: FOR_TO
55736: IFFALSE 55783
// begin hc_class = 20 ;
55738: LD_ADDR_OWVAR 28
55742: PUSH
55743: LD_INT 20
55745: ST_TO_ADDR
// hc_gallery =  ;
55746: LD_ADDR_OWVAR 33
55750: PUSH
55751: LD_STRING 
55753: ST_TO_ADDR
// animal := CreateHuman ;
55754: LD_ADDR_VAR 0 12
55758: PUSH
55759: CALL_OW 44
55763: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55764: LD_VAR 0 12
55768: PPUSH
55769: LD_VAR 0 9
55773: PPUSH
55774: LD_INT 0
55776: PPUSH
55777: CALL 57474 0 3
// end ;
55781: GO 55735
55783: POP
55784: POP
// end ;
55785: LD_VAR 0 10
55789: RET
// export function WantHeal ( sci , unit ) ; begin
55790: LD_INT 0
55792: PPUSH
// if GetTaskList ( sci ) > 0 then
55793: LD_VAR 0 1
55797: PPUSH
55798: CALL_OW 437
55802: PUSH
55803: LD_INT 0
55805: GREATER
55806: IFFALSE 55876
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL_OW 437
55817: PUSH
55818: LD_INT 1
55820: ARRAY
55821: PUSH
55822: LD_INT 1
55824: ARRAY
55825: PUSH
55826: LD_STRING l
55828: EQUAL
55829: PUSH
55830: LD_VAR 0 1
55834: PPUSH
55835: CALL_OW 437
55839: PUSH
55840: LD_INT 1
55842: ARRAY
55843: PUSH
55844: LD_INT 4
55846: ARRAY
55847: PUSH
55848: LD_VAR 0 2
55852: EQUAL
55853: AND
55854: IFFALSE 55866
// result := true else
55856: LD_ADDR_VAR 0 3
55860: PUSH
55861: LD_INT 1
55863: ST_TO_ADDR
55864: GO 55874
// result := false ;
55866: LD_ADDR_VAR 0 3
55870: PUSH
55871: LD_INT 0
55873: ST_TO_ADDR
// end else
55874: GO 55884
// result := false ;
55876: LD_ADDR_VAR 0 3
55880: PUSH
55881: LD_INT 0
55883: ST_TO_ADDR
// end ;
55884: LD_VAR 0 3
55888: RET
// export function HealTarget ( sci ) ; begin
55889: LD_INT 0
55891: PPUSH
// if not sci then
55892: LD_VAR 0 1
55896: NOT
55897: IFFALSE 55901
// exit ;
55899: GO 55966
// result := 0 ;
55901: LD_ADDR_VAR 0 2
55905: PUSH
55906: LD_INT 0
55908: ST_TO_ADDR
// if GetTaskList ( sci ) then
55909: LD_VAR 0 1
55913: PPUSH
55914: CALL_OW 437
55918: IFFALSE 55966
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55920: LD_VAR 0 1
55924: PPUSH
55925: CALL_OW 437
55929: PUSH
55930: LD_INT 1
55932: ARRAY
55933: PUSH
55934: LD_INT 1
55936: ARRAY
55937: PUSH
55938: LD_STRING l
55940: EQUAL
55941: IFFALSE 55966
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55943: LD_ADDR_VAR 0 2
55947: PUSH
55948: LD_VAR 0 1
55952: PPUSH
55953: CALL_OW 437
55957: PUSH
55958: LD_INT 1
55960: ARRAY
55961: PUSH
55962: LD_INT 4
55964: ARRAY
55965: ST_TO_ADDR
// end ;
55966: LD_VAR 0 2
55970: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55971: LD_INT 0
55973: PPUSH
55974: PPUSH
55975: PPUSH
55976: PPUSH
// if not base_units then
55977: LD_VAR 0 1
55981: NOT
55982: IFFALSE 55986
// exit ;
55984: GO 56073
// result := false ;
55986: LD_ADDR_VAR 0 2
55990: PUSH
55991: LD_INT 0
55993: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55994: LD_ADDR_VAR 0 5
55998: PUSH
55999: LD_VAR 0 1
56003: PPUSH
56004: LD_INT 21
56006: PUSH
56007: LD_INT 3
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PPUSH
56014: CALL_OW 72
56018: ST_TO_ADDR
// if not tmp then
56019: LD_VAR 0 5
56023: NOT
56024: IFFALSE 56028
// exit ;
56026: GO 56073
// for i in tmp do
56028: LD_ADDR_VAR 0 3
56032: PUSH
56033: LD_VAR 0 5
56037: PUSH
56038: FOR_IN
56039: IFFALSE 56071
// begin result := EnemyInRange ( i , 22 ) ;
56041: LD_ADDR_VAR 0 2
56045: PUSH
56046: LD_VAR 0 3
56050: PPUSH
56051: LD_INT 22
56053: PPUSH
56054: CALL 54309 0 2
56058: ST_TO_ADDR
// if result then
56059: LD_VAR 0 2
56063: IFFALSE 56069
// exit ;
56065: POP
56066: POP
56067: GO 56073
// end ;
56069: GO 56038
56071: POP
56072: POP
// end ;
56073: LD_VAR 0 2
56077: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56078: LD_INT 0
56080: PPUSH
56081: PPUSH
// if not units then
56082: LD_VAR 0 1
56086: NOT
56087: IFFALSE 56091
// exit ;
56089: GO 56161
// result := [ ] ;
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: EMPTY
56097: ST_TO_ADDR
// for i in units do
56098: LD_ADDR_VAR 0 4
56102: PUSH
56103: LD_VAR 0 1
56107: PUSH
56108: FOR_IN
56109: IFFALSE 56159
// if GetTag ( i ) = tag then
56111: LD_VAR 0 4
56115: PPUSH
56116: CALL_OW 110
56120: PUSH
56121: LD_VAR 0 2
56125: EQUAL
56126: IFFALSE 56157
// result := Insert ( result , result + 1 , i ) ;
56128: LD_ADDR_VAR 0 3
56132: PUSH
56133: LD_VAR 0 3
56137: PPUSH
56138: LD_VAR 0 3
56142: PUSH
56143: LD_INT 1
56145: PLUS
56146: PPUSH
56147: LD_VAR 0 4
56151: PPUSH
56152: CALL_OW 2
56156: ST_TO_ADDR
56157: GO 56108
56159: POP
56160: POP
// end ;
56161: LD_VAR 0 3
56165: RET
// export function IsDriver ( un ) ; begin
56166: LD_INT 0
56168: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56169: LD_ADDR_VAR 0 2
56173: PUSH
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 55
56181: PUSH
56182: EMPTY
56183: LIST
56184: PPUSH
56185: CALL_OW 69
56189: IN
56190: ST_TO_ADDR
// end ;
56191: LD_VAR 0 2
56195: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56196: LD_INT 0
56198: PPUSH
56199: PPUSH
// list := [ ] ;
56200: LD_ADDR_VAR 0 5
56204: PUSH
56205: EMPTY
56206: ST_TO_ADDR
// case d of 0 :
56207: LD_VAR 0 3
56211: PUSH
56212: LD_INT 0
56214: DOUBLE
56215: EQUAL
56216: IFTRUE 56220
56218: GO 56353
56220: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56221: LD_ADDR_VAR 0 5
56225: PUSH
56226: LD_VAR 0 1
56230: PUSH
56231: LD_INT 4
56233: MINUS
56234: PUSH
56235: LD_VAR 0 2
56239: PUSH
56240: LD_INT 4
56242: MINUS
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: PUSH
56252: LD_VAR 0 1
56256: PUSH
56257: LD_INT 3
56259: MINUS
56260: PUSH
56261: LD_VAR 0 2
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: PUSH
56274: LD_VAR 0 1
56278: PUSH
56279: LD_INT 4
56281: PLUS
56282: PUSH
56283: LD_VAR 0 2
56287: PUSH
56288: LD_INT 4
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: PUSH
56296: LD_VAR 0 1
56300: PUSH
56301: LD_INT 3
56303: PLUS
56304: PUSH
56305: LD_VAR 0 2
56309: PUSH
56310: LD_INT 3
56312: PLUS
56313: PUSH
56314: LD_INT 5
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: LD_VAR 0 1
56326: PUSH
56327: LD_VAR 0 2
56331: PUSH
56332: LD_INT 4
56334: PLUS
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// end ; 1 :
56351: GO 57051
56353: LD_INT 1
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56361
56359: GO 56494
56361: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56362: LD_ADDR_VAR 0 5
56366: PUSH
56367: LD_VAR 0 1
56371: PUSH
56372: LD_VAR 0 2
56376: PUSH
56377: LD_INT 4
56379: MINUS
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: PUSH
56389: LD_VAR 0 1
56393: PUSH
56394: LD_INT 3
56396: MINUS
56397: PUSH
56398: LD_VAR 0 2
56402: PUSH
56403: LD_INT 3
56405: MINUS
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: LIST
56414: PUSH
56415: LD_VAR 0 1
56419: PUSH
56420: LD_INT 4
56422: MINUS
56423: PUSH
56424: LD_VAR 0 2
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: PUSH
56437: LD_VAR 0 1
56441: PUSH
56442: LD_VAR 0 2
56446: PUSH
56447: LD_INT 3
56449: PLUS
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: LD_VAR 0 1
56463: PUSH
56464: LD_INT 4
56466: PLUS
56467: PUSH
56468: LD_VAR 0 2
56472: PUSH
56473: LD_INT 4
56475: PLUS
56476: PUSH
56477: LD_INT 5
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// end ; 2 :
56492: GO 57051
56494: LD_INT 2
56496: DOUBLE
56497: EQUAL
56498: IFTRUE 56502
56500: GO 56631
56502: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56503: LD_ADDR_VAR 0 5
56507: PUSH
56508: LD_VAR 0 1
56512: PUSH
56513: LD_VAR 0 2
56517: PUSH
56518: LD_INT 3
56520: MINUS
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: PUSH
56530: LD_VAR 0 1
56534: PUSH
56535: LD_INT 4
56537: PLUS
56538: PUSH
56539: LD_VAR 0 2
56543: PUSH
56544: LD_INT 4
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: PUSH
56552: LD_VAR 0 1
56556: PUSH
56557: LD_VAR 0 2
56561: PUSH
56562: LD_INT 4
56564: PLUS
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: LD_INT 3
56581: MINUS
56582: PUSH
56583: LD_VAR 0 2
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: LIST
56595: PUSH
56596: LD_VAR 0 1
56600: PUSH
56601: LD_INT 4
56603: MINUS
56604: PUSH
56605: LD_VAR 0 2
56609: PUSH
56610: LD_INT 4
56612: MINUS
56613: PUSH
56614: LD_INT 2
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// end ; 3 :
56629: GO 57051
56631: LD_INT 3
56633: DOUBLE
56634: EQUAL
56635: IFTRUE 56639
56637: GO 56772
56639: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: LD_VAR 0 1
56649: PUSH
56650: LD_INT 3
56652: PLUS
56653: PUSH
56654: LD_VAR 0 2
56658: PUSH
56659: LD_INT 4
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: PUSH
56667: LD_VAR 0 1
56671: PUSH
56672: LD_INT 4
56674: PLUS
56675: PUSH
56676: LD_VAR 0 2
56680: PUSH
56681: LD_INT 4
56683: PLUS
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_INT 4
56700: MINUS
56701: PUSH
56702: LD_VAR 0 2
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_VAR 0 1
56719: PUSH
56720: LD_VAR 0 2
56724: PUSH
56725: LD_INT 4
56727: MINUS
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: PUSH
56737: LD_VAR 0 1
56741: PUSH
56742: LD_INT 3
56744: MINUS
56745: PUSH
56746: LD_VAR 0 2
56750: PUSH
56751: LD_INT 3
56753: MINUS
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// end ; 4 :
56770: GO 57051
56772: LD_INT 4
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56780
56778: GO 56913
56780: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56781: LD_ADDR_VAR 0 5
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 4
56798: PLUS
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PUSH
56808: LD_VAR 0 1
56812: PUSH
56813: LD_INT 3
56815: PLUS
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 3
56824: PLUS
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: LD_VAR 0 1
56838: PUSH
56839: LD_INT 4
56841: PLUS
56842: PUSH
56843: LD_VAR 0 2
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: PUSH
56856: LD_VAR 0 1
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 3
56868: MINUS
56869: PUSH
56870: LD_INT 3
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: LD_VAR 0 1
56882: PUSH
56883: LD_INT 4
56885: MINUS
56886: PUSH
56887: LD_VAR 0 2
56891: PUSH
56892: LD_INT 4
56894: MINUS
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// end ; 5 :
56911: GO 57051
56913: LD_INT 5
56915: DOUBLE
56916: EQUAL
56917: IFTRUE 56921
56919: GO 57050
56921: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: LD_VAR 0 1
56931: PUSH
56932: LD_INT 4
56934: MINUS
56935: PUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: PUSH
56949: LD_VAR 0 1
56953: PUSH
56954: LD_VAR 0 2
56958: PUSH
56959: LD_INT 4
56961: MINUS
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: PUSH
56971: LD_VAR 0 1
56975: PUSH
56976: LD_INT 4
56978: PLUS
56979: PUSH
56980: LD_VAR 0 2
56984: PUSH
56985: LD_INT 4
56987: PLUS
56988: PUSH
56989: LD_INT 5
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: LD_VAR 0 1
57001: PUSH
57002: LD_INT 3
57004: PLUS
57005: PUSH
57006: LD_VAR 0 2
57010: PUSH
57011: LD_INT 4
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: PUSH
57019: LD_VAR 0 1
57023: PUSH
57024: LD_VAR 0 2
57028: PUSH
57029: LD_INT 3
57031: PLUS
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// end ; end ;
57048: GO 57051
57050: POP
// result := list ;
57051: LD_ADDR_VAR 0 4
57055: PUSH
57056: LD_VAR 0 5
57060: ST_TO_ADDR
// end ;
57061: LD_VAR 0 4
57065: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57066: LD_INT 0
57068: PPUSH
57069: PPUSH
57070: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57071: LD_VAR 0 1
57075: NOT
57076: PUSH
57077: LD_VAR 0 2
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: LD_INT 4
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: IN
57100: NOT
57101: OR
57102: IFFALSE 57106
// exit ;
57104: GO 57198
// tmp := [ ] ;
57106: LD_ADDR_VAR 0 5
57110: PUSH
57111: EMPTY
57112: ST_TO_ADDR
// for i in units do
57113: LD_ADDR_VAR 0 4
57117: PUSH
57118: LD_VAR 0 1
57122: PUSH
57123: FOR_IN
57124: IFFALSE 57167
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57126: LD_ADDR_VAR 0 5
57130: PUSH
57131: LD_VAR 0 5
57135: PPUSH
57136: LD_VAR 0 5
57140: PUSH
57141: LD_INT 1
57143: PLUS
57144: PPUSH
57145: LD_VAR 0 4
57149: PPUSH
57150: LD_VAR 0 2
57154: PPUSH
57155: CALL_OW 259
57159: PPUSH
57160: CALL_OW 2
57164: ST_TO_ADDR
57165: GO 57123
57167: POP
57168: POP
// if not tmp then
57169: LD_VAR 0 5
57173: NOT
57174: IFFALSE 57178
// exit ;
57176: GO 57198
// result := SortListByListDesc ( units , tmp ) ;
57178: LD_ADDR_VAR 0 3
57182: PUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: LD_VAR 0 5
57192: PPUSH
57193: CALL_OW 77
57197: ST_TO_ADDR
// end ;
57198: LD_VAR 0 3
57202: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57203: LD_INT 0
57205: PPUSH
57206: PPUSH
57207: PPUSH
// result := false ;
57208: LD_ADDR_VAR 0 3
57212: PUSH
57213: LD_INT 0
57215: ST_TO_ADDR
// x := GetX ( building ) ;
57216: LD_ADDR_VAR 0 4
57220: PUSH
57221: LD_VAR 0 2
57225: PPUSH
57226: CALL_OW 250
57230: ST_TO_ADDR
// y := GetY ( building ) ;
57231: LD_ADDR_VAR 0 5
57235: PUSH
57236: LD_VAR 0 2
57240: PPUSH
57241: CALL_OW 251
57245: ST_TO_ADDR
// if not building or not x or not y then
57246: LD_VAR 0 2
57250: NOT
57251: PUSH
57252: LD_VAR 0 4
57256: NOT
57257: OR
57258: PUSH
57259: LD_VAR 0 5
57263: NOT
57264: OR
57265: IFFALSE 57269
// exit ;
57267: GO 57361
// if GetTaskList ( unit ) then
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 437
57278: IFFALSE 57361
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57280: LD_STRING e
57282: PUSH
57283: LD_VAR 0 1
57287: PPUSH
57288: CALL_OW 437
57292: PUSH
57293: LD_INT 1
57295: ARRAY
57296: PUSH
57297: LD_INT 1
57299: ARRAY
57300: EQUAL
57301: PUSH
57302: LD_VAR 0 4
57306: PUSH
57307: LD_VAR 0 1
57311: PPUSH
57312: CALL_OW 437
57316: PUSH
57317: LD_INT 1
57319: ARRAY
57320: PUSH
57321: LD_INT 2
57323: ARRAY
57324: EQUAL
57325: AND
57326: PUSH
57327: LD_VAR 0 5
57331: PUSH
57332: LD_VAR 0 1
57336: PPUSH
57337: CALL_OW 437
57341: PUSH
57342: LD_INT 1
57344: ARRAY
57345: PUSH
57346: LD_INT 3
57348: ARRAY
57349: EQUAL
57350: AND
57351: IFFALSE 57361
// result := true end ;
57353: LD_ADDR_VAR 0 3
57357: PUSH
57358: LD_INT 1
57360: ST_TO_ADDR
// end ;
57361: LD_VAR 0 3
57365: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57366: LD_INT 0
57368: PPUSH
// result := false ;
57369: LD_ADDR_VAR 0 4
57373: PUSH
57374: LD_INT 0
57376: ST_TO_ADDR
// if GetTaskList ( unit ) then
57377: LD_VAR 0 1
57381: PPUSH
57382: CALL_OW 437
57386: IFFALSE 57469
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57388: LD_STRING M
57390: PUSH
57391: LD_VAR 0 1
57395: PPUSH
57396: CALL_OW 437
57400: PUSH
57401: LD_INT 1
57403: ARRAY
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: EQUAL
57409: PUSH
57410: LD_VAR 0 2
57414: PUSH
57415: LD_VAR 0 1
57419: PPUSH
57420: CALL_OW 437
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PUSH
57429: LD_INT 2
57431: ARRAY
57432: EQUAL
57433: AND
57434: PUSH
57435: LD_VAR 0 3
57439: PUSH
57440: LD_VAR 0 1
57444: PPUSH
57445: CALL_OW 437
57449: PUSH
57450: LD_INT 1
57452: ARRAY
57453: PUSH
57454: LD_INT 3
57456: ARRAY
57457: EQUAL
57458: AND
57459: IFFALSE 57469
// result := true ;
57461: LD_ADDR_VAR 0 4
57465: PUSH
57466: LD_INT 1
57468: ST_TO_ADDR
// end ; end ;
57469: LD_VAR 0 4
57473: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57474: LD_INT 0
57476: PPUSH
57477: PPUSH
57478: PPUSH
57479: PPUSH
// if not unit or not area then
57480: LD_VAR 0 1
57484: NOT
57485: PUSH
57486: LD_VAR 0 2
57490: NOT
57491: OR
57492: IFFALSE 57496
// exit ;
57494: GO 57660
// tmp := AreaToList ( area , i ) ;
57496: LD_ADDR_VAR 0 6
57500: PUSH
57501: LD_VAR 0 2
57505: PPUSH
57506: LD_VAR 0 5
57510: PPUSH
57511: CALL_OW 517
57515: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57516: LD_ADDR_VAR 0 5
57520: PUSH
57521: DOUBLE
57522: LD_INT 1
57524: DEC
57525: ST_TO_ADDR
57526: LD_VAR 0 6
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: PUSH
57535: FOR_TO
57536: IFFALSE 57658
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57538: LD_ADDR_VAR 0 7
57542: PUSH
57543: LD_VAR 0 6
57547: PUSH
57548: LD_INT 1
57550: ARRAY
57551: PUSH
57552: LD_VAR 0 5
57556: ARRAY
57557: PUSH
57558: LD_VAR 0 6
57562: PUSH
57563: LD_INT 2
57565: ARRAY
57566: PUSH
57567: LD_VAR 0 5
57571: ARRAY
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57577: LD_VAR 0 7
57581: PUSH
57582: LD_INT 1
57584: ARRAY
57585: PPUSH
57586: LD_VAR 0 7
57590: PUSH
57591: LD_INT 2
57593: ARRAY
57594: PPUSH
57595: CALL_OW 428
57599: PUSH
57600: LD_INT 0
57602: EQUAL
57603: IFFALSE 57656
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57605: LD_VAR 0 1
57609: PPUSH
57610: LD_VAR 0 7
57614: PUSH
57615: LD_INT 1
57617: ARRAY
57618: PPUSH
57619: LD_VAR 0 7
57623: PUSH
57624: LD_INT 2
57626: ARRAY
57627: PPUSH
57628: LD_VAR 0 3
57632: PPUSH
57633: CALL_OW 48
// result := IsPlaced ( unit ) ;
57637: LD_ADDR_VAR 0 4
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: CALL_OW 305
57651: ST_TO_ADDR
// exit ;
57652: POP
57653: POP
57654: GO 57660
// end ; end ;
57656: GO 57535
57658: POP
57659: POP
// end ;
57660: LD_VAR 0 4
57664: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57665: LD_INT 0
57667: PPUSH
57668: PPUSH
57669: PPUSH
// if not side or side > 8 then
57670: LD_VAR 0 1
57674: NOT
57675: PUSH
57676: LD_VAR 0 1
57680: PUSH
57681: LD_INT 8
57683: GREATER
57684: OR
57685: IFFALSE 57689
// exit ;
57687: GO 57876
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57689: LD_ADDR_VAR 0 4
57693: PUSH
57694: LD_INT 22
57696: PUSH
57697: LD_VAR 0 1
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 21
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PPUSH
57720: CALL_OW 69
57724: ST_TO_ADDR
// if not tmp then
57725: LD_VAR 0 4
57729: NOT
57730: IFFALSE 57734
// exit ;
57732: GO 57876
// enable_addtolog := true ;
57734: LD_ADDR_OWVAR 81
57738: PUSH
57739: LD_INT 1
57741: ST_TO_ADDR
// AddToLog ( [ ) ;
57742: LD_STRING [
57744: PPUSH
57745: CALL_OW 561
// for i in tmp do
57749: LD_ADDR_VAR 0 3
57753: PUSH
57754: LD_VAR 0 4
57758: PUSH
57759: FOR_IN
57760: IFFALSE 57867
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57762: LD_STRING [
57764: PUSH
57765: LD_VAR 0 3
57769: PPUSH
57770: CALL_OW 266
57774: STR
57775: PUSH
57776: LD_STRING , 
57778: STR
57779: PUSH
57780: LD_VAR 0 3
57784: PPUSH
57785: CALL_OW 250
57789: STR
57790: PUSH
57791: LD_STRING , 
57793: STR
57794: PUSH
57795: LD_VAR 0 3
57799: PPUSH
57800: CALL_OW 251
57804: STR
57805: PUSH
57806: LD_STRING , 
57808: STR
57809: PUSH
57810: LD_VAR 0 3
57814: PPUSH
57815: CALL_OW 254
57819: STR
57820: PUSH
57821: LD_STRING , 
57823: STR
57824: PUSH
57825: LD_VAR 0 3
57829: PPUSH
57830: LD_INT 1
57832: PPUSH
57833: CALL_OW 268
57837: STR
57838: PUSH
57839: LD_STRING , 
57841: STR
57842: PUSH
57843: LD_VAR 0 3
57847: PPUSH
57848: LD_INT 2
57850: PPUSH
57851: CALL_OW 268
57855: STR
57856: PUSH
57857: LD_STRING ],
57859: STR
57860: PPUSH
57861: CALL_OW 561
// end ;
57865: GO 57759
57867: POP
57868: POP
// AddToLog ( ]; ) ;
57869: LD_STRING ];
57871: PPUSH
57872: CALL_OW 561
// end ;
57876: LD_VAR 0 2
57880: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57881: LD_INT 0
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
57887: PPUSH
// if not area or not rate or not max then
57888: LD_VAR 0 1
57892: NOT
57893: PUSH
57894: LD_VAR 0 2
57898: NOT
57899: OR
57900: PUSH
57901: LD_VAR 0 4
57905: NOT
57906: OR
57907: IFFALSE 57911
// exit ;
57909: GO 58103
// while 1 do
57911: LD_INT 1
57913: IFFALSE 58103
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57915: LD_ADDR_VAR 0 9
57919: PUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: LD_INT 1
57927: PPUSH
57928: CALL_OW 287
57932: PUSH
57933: LD_INT 10
57935: MUL
57936: ST_TO_ADDR
// r := rate / 10 ;
57937: LD_ADDR_VAR 0 7
57941: PUSH
57942: LD_VAR 0 2
57946: PUSH
57947: LD_INT 10
57949: DIVREAL
57950: ST_TO_ADDR
// time := 1 1$00 ;
57951: LD_ADDR_VAR 0 8
57955: PUSH
57956: LD_INT 2100
57958: ST_TO_ADDR
// if amount < min then
57959: LD_VAR 0 9
57963: PUSH
57964: LD_VAR 0 3
57968: LESS
57969: IFFALSE 57987
// r := r * 2 else
57971: LD_ADDR_VAR 0 7
57975: PUSH
57976: LD_VAR 0 7
57980: PUSH
57981: LD_INT 2
57983: MUL
57984: ST_TO_ADDR
57985: GO 58013
// if amount > max then
57987: LD_VAR 0 9
57991: PUSH
57992: LD_VAR 0 4
57996: GREATER
57997: IFFALSE 58013
// r := r / 2 ;
57999: LD_ADDR_VAR 0 7
58003: PUSH
58004: LD_VAR 0 7
58008: PUSH
58009: LD_INT 2
58011: DIVREAL
58012: ST_TO_ADDR
// time := time / r ;
58013: LD_ADDR_VAR 0 8
58017: PUSH
58018: LD_VAR 0 8
58022: PUSH
58023: LD_VAR 0 7
58027: DIVREAL
58028: ST_TO_ADDR
// if time < 0 then
58029: LD_VAR 0 8
58033: PUSH
58034: LD_INT 0
58036: LESS
58037: IFFALSE 58054
// time := time * - 1 ;
58039: LD_ADDR_VAR 0 8
58043: PUSH
58044: LD_VAR 0 8
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: MUL
58053: ST_TO_ADDR
// wait ( time ) ;
58054: LD_VAR 0 8
58058: PPUSH
58059: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58063: LD_INT 35
58065: PPUSH
58066: LD_INT 875
58068: PPUSH
58069: CALL_OW 12
58073: PPUSH
58074: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58078: LD_INT 1
58080: PPUSH
58081: LD_INT 5
58083: PPUSH
58084: CALL_OW 12
58088: PPUSH
58089: LD_VAR 0 1
58093: PPUSH
58094: LD_INT 1
58096: PPUSH
58097: CALL_OW 55
// end ;
58101: GO 57911
// end ;
58103: LD_VAR 0 5
58107: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58108: LD_INT 0
58110: PPUSH
58111: PPUSH
58112: PPUSH
58113: PPUSH
58114: PPUSH
58115: PPUSH
58116: PPUSH
58117: PPUSH
// if not turrets or not factories then
58118: LD_VAR 0 1
58122: NOT
58123: PUSH
58124: LD_VAR 0 2
58128: NOT
58129: OR
58130: IFFALSE 58134
// exit ;
58132: GO 58441
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58134: LD_ADDR_VAR 0 10
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: LD_INT 6
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 4
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 5
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 24
58176: PUSH
58177: LD_INT 25
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 23
58186: PUSH
58187: LD_INT 27
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 42
58200: PUSH
58201: LD_INT 43
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 44
58210: PUSH
58211: LD_INT 46
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 45
58220: PUSH
58221: LD_INT 47
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// result := [ ] ;
58238: LD_ADDR_VAR 0 3
58242: PUSH
58243: EMPTY
58244: ST_TO_ADDR
// for i in turrets do
58245: LD_ADDR_VAR 0 4
58249: PUSH
58250: LD_VAR 0 1
58254: PUSH
58255: FOR_IN
58256: IFFALSE 58439
// begin nat := GetNation ( i ) ;
58258: LD_ADDR_VAR 0 7
58262: PUSH
58263: LD_VAR 0 4
58267: PPUSH
58268: CALL_OW 248
58272: ST_TO_ADDR
// weapon := 0 ;
58273: LD_ADDR_VAR 0 8
58277: PUSH
58278: LD_INT 0
58280: ST_TO_ADDR
// if not nat then
58281: LD_VAR 0 7
58285: NOT
58286: IFFALSE 58290
// continue ;
58288: GO 58255
// for j in list [ nat ] do
58290: LD_ADDR_VAR 0 5
58294: PUSH
58295: LD_VAR 0 10
58299: PUSH
58300: LD_VAR 0 7
58304: ARRAY
58305: PUSH
58306: FOR_IN
58307: IFFALSE 58348
// if GetBWeapon ( i ) = j [ 1 ] then
58309: LD_VAR 0 4
58313: PPUSH
58314: CALL_OW 269
58318: PUSH
58319: LD_VAR 0 5
58323: PUSH
58324: LD_INT 1
58326: ARRAY
58327: EQUAL
58328: IFFALSE 58346
// begin weapon := j [ 2 ] ;
58330: LD_ADDR_VAR 0 8
58334: PUSH
58335: LD_VAR 0 5
58339: PUSH
58340: LD_INT 2
58342: ARRAY
58343: ST_TO_ADDR
// break ;
58344: GO 58348
// end ;
58346: GO 58306
58348: POP
58349: POP
// if not weapon then
58350: LD_VAR 0 8
58354: NOT
58355: IFFALSE 58359
// continue ;
58357: GO 58255
// for k in factories do
58359: LD_ADDR_VAR 0 6
58363: PUSH
58364: LD_VAR 0 2
58368: PUSH
58369: FOR_IN
58370: IFFALSE 58435
// begin weapons := AvailableWeaponList ( k ) ;
58372: LD_ADDR_VAR 0 9
58376: PUSH
58377: LD_VAR 0 6
58381: PPUSH
58382: CALL_OW 478
58386: ST_TO_ADDR
// if not weapons then
58387: LD_VAR 0 9
58391: NOT
58392: IFFALSE 58396
// continue ;
58394: GO 58369
// if weapon in weapons then
58396: LD_VAR 0 8
58400: PUSH
58401: LD_VAR 0 9
58405: IN
58406: IFFALSE 58433
// begin result := [ i , weapon ] ;
58408: LD_ADDR_VAR 0 3
58412: PUSH
58413: LD_VAR 0 4
58417: PUSH
58418: LD_VAR 0 8
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// exit ;
58427: POP
58428: POP
58429: POP
58430: POP
58431: GO 58441
// end ; end ;
58433: GO 58369
58435: POP
58436: POP
// end ;
58437: GO 58255
58439: POP
58440: POP
// end ;
58441: LD_VAR 0 3
58445: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58446: LD_INT 0
58448: PPUSH
// if not side or side > 8 then
58449: LD_VAR 0 3
58453: NOT
58454: PUSH
58455: LD_VAR 0 3
58459: PUSH
58460: LD_INT 8
58462: GREATER
58463: OR
58464: IFFALSE 58468
// exit ;
58466: GO 58527
// if not range then
58468: LD_VAR 0 4
58472: NOT
58473: IFFALSE 58484
// range := - 12 ;
58475: LD_ADDR_VAR 0 4
58479: PUSH
58480: LD_INT 12
58482: NEG
58483: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58484: LD_VAR 0 1
58488: PPUSH
58489: LD_VAR 0 2
58493: PPUSH
58494: LD_VAR 0 3
58498: PPUSH
58499: LD_VAR 0 4
58503: PPUSH
58504: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58508: LD_VAR 0 1
58512: PPUSH
58513: LD_VAR 0 2
58517: PPUSH
58518: LD_VAR 0 3
58522: PPUSH
58523: CALL_OW 331
// end ;
58527: LD_VAR 0 5
58531: RET
// export function Video ( mode ) ; begin
58532: LD_INT 0
58534: PPUSH
// ingame_video = mode ;
58535: LD_ADDR_OWVAR 52
58539: PUSH
58540: LD_VAR 0 1
58544: ST_TO_ADDR
// interface_hidden = mode ;
58545: LD_ADDR_OWVAR 54
58549: PUSH
58550: LD_VAR 0 1
58554: ST_TO_ADDR
// end ;
58555: LD_VAR 0 2
58559: RET
// export function Join ( array , element ) ; begin
58560: LD_INT 0
58562: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58563: LD_ADDR_VAR 0 3
58567: PUSH
58568: LD_VAR 0 1
58572: PPUSH
58573: LD_VAR 0 1
58577: PUSH
58578: LD_INT 1
58580: PLUS
58581: PPUSH
58582: LD_VAR 0 2
58586: PPUSH
58587: CALL_OW 1
58591: ST_TO_ADDR
// end ;
58592: LD_VAR 0 3
58596: RET
// export function JoinUnion ( array , element ) ; begin
58597: LD_INT 0
58599: PPUSH
// result := array union element ;
58600: LD_ADDR_VAR 0 3
58604: PUSH
58605: LD_VAR 0 1
58609: PUSH
58610: LD_VAR 0 2
58614: UNION
58615: ST_TO_ADDR
// end ;
58616: LD_VAR 0 3
58620: RET
// export function GetBehemoths ( side ) ; begin
58621: LD_INT 0
58623: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58624: LD_ADDR_VAR 0 2
58628: PUSH
58629: LD_INT 22
58631: PUSH
58632: LD_VAR 0 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 31
58643: PUSH
58644: LD_INT 25
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PPUSH
58655: CALL_OW 69
58659: ST_TO_ADDR
// end ;
58660: LD_VAR 0 2
58664: RET
// export function Shuffle ( array ) ; var i , index ; begin
58665: LD_INT 0
58667: PPUSH
58668: PPUSH
58669: PPUSH
// result := [ ] ;
58670: LD_ADDR_VAR 0 2
58674: PUSH
58675: EMPTY
58676: ST_TO_ADDR
// if not array then
58677: LD_VAR 0 1
58681: NOT
58682: IFFALSE 58686
// exit ;
58684: GO 58785
// Randomize ;
58686: CALL_OW 10
// for i = array downto 1 do
58690: LD_ADDR_VAR 0 3
58694: PUSH
58695: DOUBLE
58696: LD_VAR 0 1
58700: INC
58701: ST_TO_ADDR
58702: LD_INT 1
58704: PUSH
58705: FOR_DOWNTO
58706: IFFALSE 58783
// begin index := rand ( 1 , array ) ;
58708: LD_ADDR_VAR 0 4
58712: PUSH
58713: LD_INT 1
58715: PPUSH
58716: LD_VAR 0 1
58720: PPUSH
58721: CALL_OW 12
58725: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58726: LD_ADDR_VAR 0 2
58730: PUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: LD_VAR 0 2
58740: PUSH
58741: LD_INT 1
58743: PLUS
58744: PPUSH
58745: LD_VAR 0 1
58749: PUSH
58750: LD_VAR 0 4
58754: ARRAY
58755: PPUSH
58756: CALL_OW 2
58760: ST_TO_ADDR
// array := Delete ( array , index ) ;
58761: LD_ADDR_VAR 0 1
58765: PUSH
58766: LD_VAR 0 1
58770: PPUSH
58771: LD_VAR 0 4
58775: PPUSH
58776: CALL_OW 3
58780: ST_TO_ADDR
// end ;
58781: GO 58705
58783: POP
58784: POP
// end ;
58785: LD_VAR 0 2
58789: RET
// export function GetBaseMaterials ( base ) ; begin
58790: LD_INT 0
58792: PPUSH
// result := [ 0 , 0 , 0 ] ;
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// if not base then
58812: LD_VAR 0 1
58816: NOT
58817: IFFALSE 58821
// exit ;
58819: GO 58870
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58821: LD_ADDR_VAR 0 2
58825: PUSH
58826: LD_VAR 0 1
58830: PPUSH
58831: LD_INT 1
58833: PPUSH
58834: CALL_OW 275
58838: PUSH
58839: LD_VAR 0 1
58843: PPUSH
58844: LD_INT 2
58846: PPUSH
58847: CALL_OW 275
58851: PUSH
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_INT 3
58859: PPUSH
58860: CALL_OW 275
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: ST_TO_ADDR
// end ;
58870: LD_VAR 0 2
58874: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58875: LD_INT 0
58877: PPUSH
58878: PPUSH
// result := array ;
58879: LD_ADDR_VAR 0 3
58883: PUSH
58884: LD_VAR 0 1
58888: ST_TO_ADDR
// if size > 0 then
58889: LD_VAR 0 2
58893: PUSH
58894: LD_INT 0
58896: GREATER
58897: IFFALSE 58943
// for i := array downto size do
58899: LD_ADDR_VAR 0 4
58903: PUSH
58904: DOUBLE
58905: LD_VAR 0 1
58909: INC
58910: ST_TO_ADDR
58911: LD_VAR 0 2
58915: PUSH
58916: FOR_DOWNTO
58917: IFFALSE 58941
// result := Delete ( result , result ) ;
58919: LD_ADDR_VAR 0 3
58923: PUSH
58924: LD_VAR 0 3
58928: PPUSH
58929: LD_VAR 0 3
58933: PPUSH
58934: CALL_OW 3
58938: ST_TO_ADDR
58939: GO 58916
58941: POP
58942: POP
// end ;
58943: LD_VAR 0 3
58947: RET
// export function ComExit ( unit ) ; var tmp ; begin
58948: LD_INT 0
58950: PPUSH
58951: PPUSH
// if not IsInUnit ( unit ) then
58952: LD_VAR 0 1
58956: PPUSH
58957: CALL_OW 310
58961: NOT
58962: IFFALSE 58966
// exit ;
58964: GO 59026
// tmp := IsInUnit ( unit ) ;
58966: LD_ADDR_VAR 0 3
58970: PUSH
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 310
58980: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58981: LD_VAR 0 3
58985: PPUSH
58986: CALL_OW 247
58990: PUSH
58991: LD_INT 2
58993: EQUAL
58994: IFFALSE 59007
// ComExitVehicle ( unit ) else
58996: LD_VAR 0 1
59000: PPUSH
59001: CALL_OW 121
59005: GO 59016
// ComExitBuilding ( unit ) ;
59007: LD_VAR 0 1
59011: PPUSH
59012: CALL_OW 122
// result := tmp ;
59016: LD_ADDR_VAR 0 2
59020: PUSH
59021: LD_VAR 0 3
59025: ST_TO_ADDR
// end ;
59026: LD_VAR 0 2
59030: RET
// export function ComExitAll ( units ) ; var i ; begin
59031: LD_INT 0
59033: PPUSH
59034: PPUSH
// if not units then
59035: LD_VAR 0 1
59039: NOT
59040: IFFALSE 59044
// exit ;
59042: GO 59070
// for i in units do
59044: LD_ADDR_VAR 0 3
59048: PUSH
59049: LD_VAR 0 1
59053: PUSH
59054: FOR_IN
59055: IFFALSE 59068
// ComExit ( i ) ;
59057: LD_VAR 0 3
59061: PPUSH
59062: CALL 58948 0 1
59066: GO 59054
59068: POP
59069: POP
// end ;
59070: LD_VAR 0 2
59074: RET
// export function ResetHc ; begin
59075: LD_INT 0
59077: PPUSH
// InitHc ;
59078: CALL_OW 19
// hc_importance := 0 ;
59082: LD_ADDR_OWVAR 32
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
// end ;
59090: LD_VAR 0 1
59094: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
59099: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59100: LD_ADDR_VAR 0 6
59104: PUSH
59105: LD_VAR 0 1
59109: PUSH
59110: LD_VAR 0 3
59114: PLUS
59115: PUSH
59116: LD_INT 2
59118: DIV
59119: ST_TO_ADDR
// if _x < 0 then
59120: LD_VAR 0 6
59124: PUSH
59125: LD_INT 0
59127: LESS
59128: IFFALSE 59145
// _x := _x * - 1 ;
59130: LD_ADDR_VAR 0 6
59134: PUSH
59135: LD_VAR 0 6
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: MUL
59144: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59145: LD_ADDR_VAR 0 7
59149: PUSH
59150: LD_VAR 0 2
59154: PUSH
59155: LD_VAR 0 4
59159: PLUS
59160: PUSH
59161: LD_INT 2
59163: DIV
59164: ST_TO_ADDR
// if _y < 0 then
59165: LD_VAR 0 7
59169: PUSH
59170: LD_INT 0
59172: LESS
59173: IFFALSE 59190
// _y := _y * - 1 ;
59175: LD_ADDR_VAR 0 7
59179: PUSH
59180: LD_VAR 0 7
59184: PUSH
59185: LD_INT 1
59187: NEG
59188: MUL
59189: ST_TO_ADDR
// result := [ _x , _y ] ;
59190: LD_ADDR_VAR 0 5
59194: PUSH
59195: LD_VAR 0 6
59199: PUSH
59200: LD_VAR 0 7
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// end ;
59209: LD_VAR 0 5
59213: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59214: LD_INT 0
59216: PPUSH
59217: PPUSH
59218: PPUSH
59219: PPUSH
// task := GetTaskList ( unit ) ;
59220: LD_ADDR_VAR 0 7
59224: PUSH
59225: LD_VAR 0 1
59229: PPUSH
59230: CALL_OW 437
59234: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59235: LD_VAR 0 7
59239: NOT
59240: PUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: LD_VAR 0 2
59250: PPUSH
59251: CALL_OW 308
59255: NOT
59256: AND
59257: IFFALSE 59261
// exit ;
59259: GO 59379
// if IsInArea ( unit , area ) then
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_VAR 0 2
59270: PPUSH
59271: CALL_OW 308
59275: IFFALSE 59293
// begin ComMoveToArea ( unit , goAway ) ;
59277: LD_VAR 0 1
59281: PPUSH
59282: LD_VAR 0 3
59286: PPUSH
59287: CALL_OW 113
// exit ;
59291: GO 59379
// end ; if task [ 1 ] [ 1 ] <> M then
59293: LD_VAR 0 7
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: PUSH
59306: LD_STRING M
59308: NONEQUAL
59309: IFFALSE 59313
// exit ;
59311: GO 59379
// x := task [ 1 ] [ 2 ] ;
59313: LD_ADDR_VAR 0 5
59317: PUSH
59318: LD_VAR 0 7
59322: PUSH
59323: LD_INT 1
59325: ARRAY
59326: PUSH
59327: LD_INT 2
59329: ARRAY
59330: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59331: LD_ADDR_VAR 0 6
59335: PUSH
59336: LD_VAR 0 7
59340: PUSH
59341: LD_INT 1
59343: ARRAY
59344: PUSH
59345: LD_INT 3
59347: ARRAY
59348: ST_TO_ADDR
// if InArea ( x , y , area ) then
59349: LD_VAR 0 5
59353: PPUSH
59354: LD_VAR 0 6
59358: PPUSH
59359: LD_VAR 0 2
59363: PPUSH
59364: CALL_OW 309
59368: IFFALSE 59379
// ComStop ( unit ) ;
59370: LD_VAR 0 1
59374: PPUSH
59375: CALL_OW 141
// end ;
59379: LD_VAR 0 4
59383: RET
// export function Abs ( value ) ; begin
59384: LD_INT 0
59386: PPUSH
// result := value ;
59387: LD_ADDR_VAR 0 2
59391: PUSH
59392: LD_VAR 0 1
59396: ST_TO_ADDR
// if value < 0 then
59397: LD_VAR 0 1
59401: PUSH
59402: LD_INT 0
59404: LESS
59405: IFFALSE 59422
// result := value * - 1 ;
59407: LD_ADDR_VAR 0 2
59411: PUSH
59412: LD_VAR 0 1
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: MUL
59421: ST_TO_ADDR
// end ;
59422: LD_VAR 0 2
59426: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59427: LD_INT 0
59429: PPUSH
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
// if not unit or not building then
59437: LD_VAR 0 1
59441: NOT
59442: PUSH
59443: LD_VAR 0 2
59447: NOT
59448: OR
59449: IFFALSE 59453
// exit ;
59451: GO 59679
// x := GetX ( building ) ;
59453: LD_ADDR_VAR 0 4
59457: PUSH
59458: LD_VAR 0 2
59462: PPUSH
59463: CALL_OW 250
59467: ST_TO_ADDR
// y := GetY ( building ) ;
59468: LD_ADDR_VAR 0 6
59472: PUSH
59473: LD_VAR 0 2
59477: PPUSH
59478: CALL_OW 251
59482: ST_TO_ADDR
// d := GetDir ( building ) ;
59483: LD_ADDR_VAR 0 8
59487: PUSH
59488: LD_VAR 0 2
59492: PPUSH
59493: CALL_OW 254
59497: ST_TO_ADDR
// r := 4 ;
59498: LD_ADDR_VAR 0 9
59502: PUSH
59503: LD_INT 4
59505: ST_TO_ADDR
// for i := 1 to 5 do
59506: LD_ADDR_VAR 0 10
59510: PUSH
59511: DOUBLE
59512: LD_INT 1
59514: DEC
59515: ST_TO_ADDR
59516: LD_INT 5
59518: PUSH
59519: FOR_TO
59520: IFFALSE 59677
// begin _x := ShiftX ( x , d , r + i ) ;
59522: LD_ADDR_VAR 0 5
59526: PUSH
59527: LD_VAR 0 4
59531: PPUSH
59532: LD_VAR 0 8
59536: PPUSH
59537: LD_VAR 0 9
59541: PUSH
59542: LD_VAR 0 10
59546: PLUS
59547: PPUSH
59548: CALL_OW 272
59552: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59553: LD_ADDR_VAR 0 7
59557: PUSH
59558: LD_VAR 0 6
59562: PPUSH
59563: LD_VAR 0 8
59567: PPUSH
59568: LD_VAR 0 9
59572: PUSH
59573: LD_VAR 0 10
59577: PLUS
59578: PPUSH
59579: CALL_OW 273
59583: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59584: LD_VAR 0 5
59588: PPUSH
59589: LD_VAR 0 7
59593: PPUSH
59594: CALL_OW 488
59598: PUSH
59599: LD_VAR 0 5
59603: PPUSH
59604: LD_VAR 0 7
59608: PPUSH
59609: CALL_OW 428
59613: PPUSH
59614: CALL_OW 247
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: IN
59629: NOT
59630: AND
59631: IFFALSE 59675
// begin ComMoveXY ( unit , _x , _y ) ;
59633: LD_VAR 0 1
59637: PPUSH
59638: LD_VAR 0 5
59642: PPUSH
59643: LD_VAR 0 7
59647: PPUSH
59648: CALL_OW 111
// result := [ _x , _y ] ;
59652: LD_ADDR_VAR 0 3
59656: PUSH
59657: LD_VAR 0 5
59661: PUSH
59662: LD_VAR 0 7
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// exit ;
59671: POP
59672: POP
59673: GO 59679
// end ; end ;
59675: GO 59519
59677: POP
59678: POP
// end ;
59679: LD_VAR 0 3
59683: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59684: LD_INT 0
59686: PPUSH
59687: PPUSH
59688: PPUSH
// result := 0 ;
59689: LD_ADDR_VAR 0 3
59693: PUSH
59694: LD_INT 0
59696: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59697: LD_VAR 0 1
59701: PUSH
59702: LD_INT 0
59704: LESS
59705: PUSH
59706: LD_VAR 0 1
59710: PUSH
59711: LD_INT 8
59713: GREATER
59714: OR
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 0
59723: LESS
59724: OR
59725: PUSH
59726: LD_VAR 0 2
59730: PUSH
59731: LD_INT 8
59733: GREATER
59734: OR
59735: IFFALSE 59739
// exit ;
59737: GO 59814
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59739: LD_ADDR_VAR 0 4
59743: PUSH
59744: LD_INT 22
59746: PUSH
59747: LD_VAR 0 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PPUSH
59756: CALL_OW 69
59760: PUSH
59761: FOR_IN
59762: IFFALSE 59812
// begin un := UnitShoot ( i ) ;
59764: LD_ADDR_VAR 0 5
59768: PUSH
59769: LD_VAR 0 4
59773: PPUSH
59774: CALL_OW 504
59778: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59779: LD_VAR 0 5
59783: PPUSH
59784: CALL_OW 255
59788: PUSH
59789: LD_VAR 0 1
59793: EQUAL
59794: IFFALSE 59810
// begin result := un ;
59796: LD_ADDR_VAR 0 3
59800: PUSH
59801: LD_VAR 0 5
59805: ST_TO_ADDR
// exit ;
59806: POP
59807: POP
59808: GO 59814
// end ; end ;
59810: GO 59761
59812: POP
59813: POP
// end ;
59814: LD_VAR 0 3
59818: RET
// export function GetCargoBay ( units ) ; begin
59819: LD_INT 0
59821: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59822: LD_ADDR_VAR 0 2
59826: PUSH
59827: LD_VAR 0 1
59831: PPUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 34
59837: PUSH
59838: LD_INT 12
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 34
59847: PUSH
59848: LD_INT 51
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 34
59857: PUSH
59858: LD_INT 32
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 34
59867: PUSH
59868: LD_EXP 91
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: PPUSH
59884: CALL_OW 72
59888: ST_TO_ADDR
// end ;
59889: LD_VAR 0 2
59893: RET
// export function Negate ( value ) ; begin
59894: LD_INT 0
59896: PPUSH
// result := not value ;
59897: LD_ADDR_VAR 0 2
59901: PUSH
59902: LD_VAR 0 1
59906: NOT
59907: ST_TO_ADDR
// end ;
59908: LD_VAR 0 2
59912: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
59913: LD_INT 0
59915: PPUSH
// if x1 = x2 then
59916: LD_VAR 0 1
59920: PUSH
59921: LD_VAR 0 3
59925: EQUAL
59926: IFFALSE 59960
// begin if y1 > y2 then
59928: LD_VAR 0 2
59932: PUSH
59933: LD_VAR 0 4
59937: GREATER
59938: IFFALSE 59950
// result := 0 else
59940: LD_ADDR_VAR 0 5
59944: PUSH
59945: LD_INT 0
59947: ST_TO_ADDR
59948: GO 59958
// result := 3 ;
59950: LD_ADDR_VAR 0 5
59954: PUSH
59955: LD_INT 3
59957: ST_TO_ADDR
// exit ;
59958: GO 60046
// end ; if y1 = y2 then
59960: LD_VAR 0 2
59964: PUSH
59965: LD_VAR 0 4
59969: EQUAL
59970: IFFALSE 60004
// begin if x1 > x2 then
59972: LD_VAR 0 1
59976: PUSH
59977: LD_VAR 0 3
59981: GREATER
59982: IFFALSE 59994
// result := 1 else
59984: LD_ADDR_VAR 0 5
59988: PUSH
59989: LD_INT 1
59991: ST_TO_ADDR
59992: GO 60002
// result := 4 ;
59994: LD_ADDR_VAR 0 5
59998: PUSH
59999: LD_INT 4
60001: ST_TO_ADDR
// exit ;
60002: GO 60046
// end ; if x1 > x2 and y1 > y2 then
60004: LD_VAR 0 1
60008: PUSH
60009: LD_VAR 0 3
60013: GREATER
60014: PUSH
60015: LD_VAR 0 2
60019: PUSH
60020: LD_VAR 0 4
60024: GREATER
60025: AND
60026: IFFALSE 60038
// result := 2 else
60028: LD_ADDR_VAR 0 5
60032: PUSH
60033: LD_INT 2
60035: ST_TO_ADDR
60036: GO 60046
// result := 5 ;
60038: LD_ADDR_VAR 0 5
60042: PUSH
60043: LD_INT 5
60045: ST_TO_ADDR
// end ;
60046: LD_VAR 0 5
60050: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60051: LD_INT 0
60053: PPUSH
60054: PPUSH
// if not driver or not IsInUnit ( driver ) then
60055: LD_VAR 0 1
60059: NOT
60060: PUSH
60061: LD_VAR 0 1
60065: PPUSH
60066: CALL_OW 310
60070: NOT
60071: OR
60072: IFFALSE 60076
// exit ;
60074: GO 60166
// vehicle := IsInUnit ( driver ) ;
60076: LD_ADDR_VAR 0 3
60080: PUSH
60081: LD_VAR 0 1
60085: PPUSH
60086: CALL_OW 310
60090: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60091: LD_VAR 0 1
60095: PPUSH
60096: LD_STRING \
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_STRING E
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_VAR 0 3
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PPUSH
60162: CALL_OW 446
// end ;
60166: LD_VAR 0 2
60170: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60171: LD_INT 0
60173: PPUSH
60174: PPUSH
// if not driver or not IsInUnit ( driver ) then
60175: LD_VAR 0 1
60179: NOT
60180: PUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 310
60190: NOT
60191: OR
60192: IFFALSE 60196
// exit ;
60194: GO 60286
// vehicle := IsInUnit ( driver ) ;
60196: LD_ADDR_VAR 0 3
60200: PUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: CALL_OW 310
60210: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60211: LD_VAR 0 1
60215: PPUSH
60216: LD_STRING \
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: PUSH
60246: LD_STRING E
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_VAR 0 3
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PPUSH
60282: CALL_OW 447
// end ;
60286: LD_VAR 0 2
60290: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60291: LD_INT 0
60293: PPUSH
60294: PPUSH
60295: PPUSH
// tmp := [ ] ;
60296: LD_ADDR_VAR 0 5
60300: PUSH
60301: EMPTY
60302: ST_TO_ADDR
// for i in units do
60303: LD_ADDR_VAR 0 4
60307: PUSH
60308: LD_VAR 0 1
60312: PUSH
60313: FOR_IN
60314: IFFALSE 60352
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60316: LD_ADDR_VAR 0 5
60320: PUSH
60321: LD_VAR 0 5
60325: PPUSH
60326: LD_VAR 0 5
60330: PUSH
60331: LD_INT 1
60333: PLUS
60334: PPUSH
60335: LD_VAR 0 4
60339: PPUSH
60340: CALL_OW 256
60344: PPUSH
60345: CALL_OW 2
60349: ST_TO_ADDR
60350: GO 60313
60352: POP
60353: POP
// if not tmp then
60354: LD_VAR 0 5
60358: NOT
60359: IFFALSE 60363
// exit ;
60361: GO 60411
// if asc then
60363: LD_VAR 0 2
60367: IFFALSE 60391
// result := SortListByListAsc ( units , tmp ) else
60369: LD_ADDR_VAR 0 3
60373: PUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: LD_VAR 0 5
60383: PPUSH
60384: CALL_OW 76
60388: ST_TO_ADDR
60389: GO 60411
// result := SortListByListDesc ( units , tmp ) ;
60391: LD_ADDR_VAR 0 3
60395: PUSH
60396: LD_VAR 0 1
60400: PPUSH
60401: LD_VAR 0 5
60405: PPUSH
60406: CALL_OW 77
60410: ST_TO_ADDR
// end ;
60411: LD_VAR 0 3
60415: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60416: LD_INT 0
60418: PPUSH
60419: PPUSH
// task := GetTaskList ( mech ) ;
60420: LD_ADDR_VAR 0 4
60424: PUSH
60425: LD_VAR 0 1
60429: PPUSH
60430: CALL_OW 437
60434: ST_TO_ADDR
// if not task then
60435: LD_VAR 0 4
60439: NOT
60440: IFFALSE 60444
// exit ;
60442: GO 60486
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60444: LD_ADDR_VAR 0 3
60448: PUSH
60449: LD_VAR 0 4
60453: PUSH
60454: LD_INT 1
60456: ARRAY
60457: PUSH
60458: LD_INT 1
60460: ARRAY
60461: PUSH
60462: LD_STRING r
60464: EQUAL
60465: PUSH
60466: LD_VAR 0 4
60470: PUSH
60471: LD_INT 1
60473: ARRAY
60474: PUSH
60475: LD_INT 4
60477: ARRAY
60478: PUSH
60479: LD_VAR 0 2
60483: EQUAL
60484: AND
60485: ST_TO_ADDR
// end ;
60486: LD_VAR 0 3
60490: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60491: LD_INT 0
60493: PPUSH
// SetDir ( unit , d ) ;
60494: LD_VAR 0 1
60498: PPUSH
60499: LD_VAR 0 4
60503: PPUSH
60504: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60508: LD_VAR 0 1
60512: PPUSH
60513: LD_VAR 0 2
60517: PPUSH
60518: LD_VAR 0 3
60522: PPUSH
60523: LD_VAR 0 5
60527: PPUSH
60528: CALL_OW 48
// end ;
60532: LD_VAR 0 6
60536: RET
// export function ToNaturalNumber ( number ) ; begin
60537: LD_INT 0
60539: PPUSH
// result := number div 1 ;
60540: LD_ADDR_VAR 0 2
60544: PUSH
60545: LD_VAR 0 1
60549: PUSH
60550: LD_INT 1
60552: DIV
60553: ST_TO_ADDR
// if number < 0 then
60554: LD_VAR 0 1
60558: PUSH
60559: LD_INT 0
60561: LESS
60562: IFFALSE 60572
// result := 0 ;
60564: LD_ADDR_VAR 0 2
60568: PUSH
60569: LD_INT 0
60571: ST_TO_ADDR
// end ; end_of_file
60572: LD_VAR 0 2
60576: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60577: LD_VAR 0 1
60581: PPUSH
60582: LD_VAR 0 2
60586: PPUSH
60587: LD_VAR 0 3
60591: PPUSH
60592: LD_VAR 0 4
60596: PPUSH
60597: LD_VAR 0 5
60601: PPUSH
60602: LD_VAR 0 6
60606: PPUSH
60607: CALL 4304 0 6
// end ;
60611: PPOPN 6
60613: END
