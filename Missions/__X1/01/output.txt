// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4304: LD_INT 0
4306: PPUSH
// if p2 = 100 then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_INT 100
4314: EQUAL
4315: IFFALSE 5318
// begin if not StreamModeActive then
4317: LD_EXP 23
4321: NOT
4322: IFFALSE 4332
// StreamModeActive := true ;
4324: LD_ADDR_EXP 23
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// if p3 = 0 then
4332: LD_VAR 0 3
4336: PUSH
4337: LD_INT 0
4339: EQUAL
4340: IFFALSE 4346
// InitStreamMode ;
4342: CALL 5478 0 0
// if p3 = 1 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: EQUAL
4354: IFFALSE 4364
// sRocket := true ;
4356: LD_ADDR_EXP 28
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 2 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 2
4371: EQUAL
4372: IFFALSE 4382
// sSpeed := true ;
4374: LD_ADDR_EXP 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 3 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 3
4389: EQUAL
4390: IFFALSE 4400
// sEngine := true ;
4392: LD_ADDR_EXP 29
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 4 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 4
4407: EQUAL
4408: IFFALSE 4418
// sSpec := true ;
4410: LD_ADDR_EXP 26
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 5 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 5
4425: EQUAL
4426: IFFALSE 4436
// sLevel := true ;
4428: LD_ADDR_EXP 30
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 6 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 6
4443: EQUAL
4444: IFFALSE 4454
// sArmoury := true ;
4446: LD_ADDR_EXP 31
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 7 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 7
4461: EQUAL
4462: IFFALSE 4472
// sRadar := true ;
4464: LD_ADDR_EXP 32
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 8 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 8
4479: EQUAL
4480: IFFALSE 4490
// sBunker := true ;
4482: LD_ADDR_EXP 33
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 9 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 9
4497: EQUAL
4498: IFFALSE 4508
// sHack := true ;
4500: LD_ADDR_EXP 34
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 10 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 10
4515: EQUAL
4516: IFFALSE 4526
// sFire := true ;
4518: LD_ADDR_EXP 35
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 11 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 11
4533: EQUAL
4534: IFFALSE 4544
// sRefresh := true ;
4536: LD_ADDR_EXP 36
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 12 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 12
4551: EQUAL
4552: IFFALSE 4562
// sExp := true ;
4554: LD_ADDR_EXP 37
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 13 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: EQUAL
4570: IFFALSE 4580
// sDepot := true ;
4572: LD_ADDR_EXP 38
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 14 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 14
4587: EQUAL
4588: IFFALSE 4598
// sFlag := true ;
4590: LD_ADDR_EXP 39
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 15 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 15
4605: EQUAL
4606: IFFALSE 4616
// sKamikadze := true ;
4608: LD_ADDR_EXP 47
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 16 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 16
4623: EQUAL
4624: IFFALSE 4634
// sTroll := true ;
4626: LD_ADDR_EXP 48
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 17 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 17
4641: EQUAL
4642: IFFALSE 4652
// sSlow := true ;
4644: LD_ADDR_EXP 49
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 18 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 18
4659: EQUAL
4660: IFFALSE 4670
// sLack := true ;
4662: LD_ADDR_EXP 50
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 19 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 19
4677: EQUAL
4678: IFFALSE 4688
// sTank := true ;
4680: LD_ADDR_EXP 52
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 20 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 20
4695: EQUAL
4696: IFFALSE 4706
// sRemote := true ;
4698: LD_ADDR_EXP 53
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 21 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 21
4713: EQUAL
4714: IFFALSE 4724
// sPowell := true ;
4716: LD_ADDR_EXP 54
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 22 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 22
4731: EQUAL
4732: IFFALSE 4742
// sTeleport := true ;
4734: LD_ADDR_EXP 57
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 23 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 23
4749: EQUAL
4750: IFFALSE 4760
// sOilTower := true ;
4752: LD_ADDR_EXP 59
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 24 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 24
4767: EQUAL
4768: IFFALSE 4778
// sShovel := true ;
4770: LD_ADDR_EXP 60
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 25 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 25
4785: EQUAL
4786: IFFALSE 4796
// sSheik := true ;
4788: LD_ADDR_EXP 61
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 26 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 26
4803: EQUAL
4804: IFFALSE 4814
// sEarthquake := true ;
4806: LD_ADDR_EXP 63
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 27 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 27
4821: EQUAL
4822: IFFALSE 4832
// sAI := true ;
4824: LD_ADDR_EXP 64
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 28 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 28
4839: EQUAL
4840: IFFALSE 4850
// sCargo := true ;
4842: LD_ADDR_EXP 67
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 29 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 29
4857: EQUAL
4858: IFFALSE 4868
// sDLaser := true ;
4860: LD_ADDR_EXP 68
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 30 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 30
4875: EQUAL
4876: IFFALSE 4886
// sExchange := true ;
4878: LD_ADDR_EXP 69
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 31 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 31
4893: EQUAL
4894: IFFALSE 4904
// sFac := true ;
4896: LD_ADDR_EXP 70
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 32 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 32
4911: EQUAL
4912: IFFALSE 4922
// sPower := true ;
4914: LD_ADDR_EXP 71
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 33 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 33
4929: EQUAL
4930: IFFALSE 4940
// sRandom := true ;
4932: LD_ADDR_EXP 72
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 34 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 34
4947: EQUAL
4948: IFFALSE 4958
// sShield := true ;
4950: LD_ADDR_EXP 73
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 35 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 35
4965: EQUAL
4966: IFFALSE 4976
// sTime := true ;
4968: LD_ADDR_EXP 74
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 36 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 36
4983: EQUAL
4984: IFFALSE 4994
// sTools := true ;
4986: LD_ADDR_EXP 75
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 101 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 101
5001: EQUAL
5002: IFFALSE 5012
// sSold := true ;
5004: LD_ADDR_EXP 40
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 102 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 102
5019: EQUAL
5020: IFFALSE 5030
// sDiff := true ;
5022: LD_ADDR_EXP 41
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 103 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 103
5037: EQUAL
5038: IFFALSE 5048
// sFog := true ;
5040: LD_ADDR_EXP 44
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 104 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 104
5055: EQUAL
5056: IFFALSE 5066
// sReset := true ;
5058: LD_ADDR_EXP 45
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 105 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 105
5073: EQUAL
5074: IFFALSE 5084
// sSun := true ;
5076: LD_ADDR_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 106 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 106
5091: EQUAL
5092: IFFALSE 5102
// sTiger := true ;
5094: LD_ADDR_EXP 42
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 107 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 107
5109: EQUAL
5110: IFFALSE 5120
// sBomb := true ;
5112: LD_ADDR_EXP 43
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 108 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 108
5127: EQUAL
5128: IFFALSE 5138
// sWound := true ;
5130: LD_ADDR_EXP 51
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 109 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 109
5145: EQUAL
5146: IFFALSE 5156
// sBetray := true ;
5148: LD_ADDR_EXP 55
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 110 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 110
5163: EQUAL
5164: IFFALSE 5174
// sContamin := true ;
5166: LD_ADDR_EXP 56
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 111 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 111
5181: EQUAL
5182: IFFALSE 5192
// sOil := true ;
5184: LD_ADDR_EXP 58
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// if p3 = 112 then
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 112
5199: EQUAL
5200: IFFALSE 5210
// sStu := true ;
5202: LD_ADDR_EXP 62
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if p3 = 113 then
5210: LD_VAR 0 3
5214: PUSH
5215: LD_INT 113
5217: EQUAL
5218: IFFALSE 5228
// sBazooka := true ;
5220: LD_ADDR_EXP 65
5224: PUSH
5225: LD_INT 1
5227: ST_TO_ADDR
// if p3 = 114 then
5228: LD_VAR 0 3
5232: PUSH
5233: LD_INT 114
5235: EQUAL
5236: IFFALSE 5246
// sMortar := true ;
5238: LD_ADDR_EXP 66
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// if p3 = 115 then
5246: LD_VAR 0 3
5250: PUSH
5251: LD_INT 115
5253: EQUAL
5254: IFFALSE 5264
// sRanger := true ;
5256: LD_ADDR_EXP 76
5260: PUSH
5261: LD_INT 1
5263: ST_TO_ADDR
// if p3 = 116 then
5264: LD_VAR 0 3
5268: PUSH
5269: LD_INT 116
5271: EQUAL
5272: IFFALSE 5282
// sComputer := true ;
5274: LD_ADDR_EXP 77
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// if p3 = 117 then
5282: LD_VAR 0 3
5286: PUSH
5287: LD_INT 117
5289: EQUAL
5290: IFFALSE 5300
// s30 := true ;
5292: LD_ADDR_EXP 78
5296: PUSH
5297: LD_INT 1
5299: ST_TO_ADDR
// if p3 = 118 then
5300: LD_VAR 0 3
5304: PUSH
5305: LD_INT 118
5307: EQUAL
5308: IFFALSE 5318
// s60 := true ;
5310: LD_ADDR_EXP 79
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// end ; if p2 = 101 then
5318: LD_VAR 0 2
5322: PUSH
5323: LD_INT 101
5325: EQUAL
5326: IFFALSE 5454
// begin case p3 of 1 :
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 1
5335: DOUBLE
5336: EQUAL
5337: IFTRUE 5341
5339: GO 5348
5341: POP
// hHackUnlimitedResources ; 2 :
5342: CALL 17050 0 0
5346: GO 5454
5348: LD_INT 2
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5363
5356: POP
// hHackSetLevel10 ; 3 :
5357: CALL 17183 0 0
5361: GO 5454
5363: LD_INT 3
5365: DOUBLE
5366: EQUAL
5367: IFTRUE 5371
5369: GO 5378
5371: POP
// hHackSetLevel10YourUnits ; 4 :
5372: CALL 17268 0 0
5376: GO 5454
5378: LD_INT 4
5380: DOUBLE
5381: EQUAL
5382: IFTRUE 5386
5384: GO 5393
5386: POP
// hHackInvincible ; 5 :
5387: CALL 17716 0 0
5391: GO 5454
5393: LD_INT 5
5395: DOUBLE
5396: EQUAL
5397: IFTRUE 5401
5399: GO 5408
5401: POP
// hHackInvisible ; 6 :
5402: CALL 17827 0 0
5406: GO 5454
5408: LD_INT 6
5410: DOUBLE
5411: EQUAL
5412: IFTRUE 5416
5414: GO 5423
5416: POP
// hHackChangeYourSide ; 7 :
5417: CALL 17884 0 0
5421: GO 5454
5423: LD_INT 7
5425: DOUBLE
5426: EQUAL
5427: IFTRUE 5431
5429: GO 5438
5431: POP
// hHackChangeUnitSide ; 8 :
5432: CALL 17926 0 0
5436: GO 5454
5438: LD_INT 8
5440: DOUBLE
5441: EQUAL
5442: IFTRUE 5446
5444: GO 5453
5446: POP
// hHackFog ; end ;
5447: CALL 18027 0 0
5451: GO 5454
5453: POP
// end ; end ;
5454: LD_VAR 0 7
5458: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5459: GO 5461
5461: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5462: LD_STRING initStreamRollete();
5464: PPUSH
5465: CALL_OW 559
// InitStreamMode ;
5469: CALL 5478 0 0
// DefineStreamItems ( ) ;
5473: CALL 5942 0 0
// end ;
5477: END
// function InitStreamMode ; begin
5478: LD_INT 0
5480: PPUSH
// streamModeActive := false ;
5481: LD_ADDR_EXP 23
5485: PUSH
5486: LD_INT 0
5488: ST_TO_ADDR
// normalCounter := 36 ;
5489: LD_ADDR_EXP 24
5493: PUSH
5494: LD_INT 36
5496: ST_TO_ADDR
// hardcoreCounter := 16 ;
5497: LD_ADDR_EXP 25
5501: PUSH
5502: LD_INT 16
5504: ST_TO_ADDR
// sRocket := false ;
5505: LD_ADDR_EXP 28
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// sSpeed := false ;
5513: LD_ADDR_EXP 27
5517: PUSH
5518: LD_INT 0
5520: ST_TO_ADDR
// sEngine := false ;
5521: LD_ADDR_EXP 29
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sSpec := false ;
5529: LD_ADDR_EXP 26
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sLevel := false ;
5537: LD_ADDR_EXP 30
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sArmoury := false ;
5545: LD_ADDR_EXP 31
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sRadar := false ;
5553: LD_ADDR_EXP 32
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sBunker := false ;
5561: LD_ADDR_EXP 33
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sHack := false ;
5569: LD_ADDR_EXP 34
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sFire := false ;
5577: LD_ADDR_EXP 35
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sRefresh := false ;
5585: LD_ADDR_EXP 36
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sExp := false ;
5593: LD_ADDR_EXP 37
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sDepot := false ;
5601: LD_ADDR_EXP 38
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sFlag := false ;
5609: LD_ADDR_EXP 39
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sKamikadze := false ;
5617: LD_ADDR_EXP 47
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sTroll := false ;
5625: LD_ADDR_EXP 48
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sSlow := false ;
5633: LD_ADDR_EXP 49
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sLack := false ;
5641: LD_ADDR_EXP 50
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sTank := false ;
5649: LD_ADDR_EXP 52
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sRemote := false ;
5657: LD_ADDR_EXP 53
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sPowell := false ;
5665: LD_ADDR_EXP 54
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sTeleport := false ;
5673: LD_ADDR_EXP 57
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sOilTower := false ;
5681: LD_ADDR_EXP 59
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sShovel := false ;
5689: LD_ADDR_EXP 60
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sSheik := false ;
5697: LD_ADDR_EXP 61
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sEarthquake := false ;
5705: LD_ADDR_EXP 63
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sAI := false ;
5713: LD_ADDR_EXP 64
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sCargo := false ;
5721: LD_ADDR_EXP 67
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sDLaser := false ;
5729: LD_ADDR_EXP 68
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sExchange := false ;
5737: LD_ADDR_EXP 69
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sFac := false ;
5745: LD_ADDR_EXP 70
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sPower := false ;
5753: LD_ADDR_EXP 71
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sRandom := false ;
5761: LD_ADDR_EXP 72
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sShield := false ;
5769: LD_ADDR_EXP 73
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sTime := false ;
5777: LD_ADDR_EXP 74
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// sTools := false ;
5785: LD_ADDR_EXP 75
5789: PUSH
5790: LD_INT 0
5792: ST_TO_ADDR
// sSold := false ;
5793: LD_ADDR_EXP 40
5797: PUSH
5798: LD_INT 0
5800: ST_TO_ADDR
// sDiff := false ;
5801: LD_ADDR_EXP 41
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// sFog := false ;
5809: LD_ADDR_EXP 44
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// sReset := false ;
5817: LD_ADDR_EXP 45
5821: PUSH
5822: LD_INT 0
5824: ST_TO_ADDR
// sSun := false ;
5825: LD_ADDR_EXP 46
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// sTiger := false ;
5833: LD_ADDR_EXP 42
5837: PUSH
5838: LD_INT 0
5840: ST_TO_ADDR
// sBomb := false ;
5841: LD_ADDR_EXP 43
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// sWound := false ;
5849: LD_ADDR_EXP 51
5853: PUSH
5854: LD_INT 0
5856: ST_TO_ADDR
// sBetray := false ;
5857: LD_ADDR_EXP 55
5861: PUSH
5862: LD_INT 0
5864: ST_TO_ADDR
// sContamin := false ;
5865: LD_ADDR_EXP 56
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sOil := false ;
5873: LD_ADDR_EXP 58
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sStu := false ;
5881: LD_ADDR_EXP 62
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sBazooka := false ;
5889: LD_ADDR_EXP 65
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sMortar := false ;
5897: LD_ADDR_EXP 66
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sRanger := false ;
5905: LD_ADDR_EXP 76
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sComputer := false ;
5913: LD_ADDR_EXP 77
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// s30 := false ;
5921: LD_ADDR_EXP 78
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// s60 := false ;
5929: LD_ADDR_EXP 79
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// end ;
5937: LD_VAR 0 1
5941: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5942: LD_INT 0
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
// result := [ ] ;
5949: LD_ADDR_VAR 0 1
5953: PUSH
5954: EMPTY
5955: ST_TO_ADDR
// if campaign_id = 1 then
5956: LD_OWVAR 69
5960: PUSH
5961: LD_INT 1
5963: EQUAL
5964: IFFALSE 9130
// begin case mission_number of 1 :
5966: LD_OWVAR 70
5970: PUSH
5971: LD_INT 1
5973: DOUBLE
5974: EQUAL
5975: IFTRUE 5979
5977: GO 6055
5979: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5980: LD_ADDR_VAR 0 1
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: LD_INT 11
5993: PUSH
5994: LD_INT 12
5996: PUSH
5997: LD_INT 15
5999: PUSH
6000: LD_INT 16
6002: PUSH
6003: LD_INT 22
6005: PUSH
6006: LD_INT 23
6008: PUSH
6009: LD_INT 26
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 101
6025: PUSH
6026: LD_INT 102
6028: PUSH
6029: LD_INT 106
6031: PUSH
6032: LD_INT 116
6034: PUSH
6035: LD_INT 117
6037: PUSH
6038: LD_INT 118
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 9128
6055: LD_INT 2
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6147
6063: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6064: LD_ADDR_VAR 0 1
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: LD_INT 4
6074: PUSH
6075: LD_INT 11
6077: PUSH
6078: LD_INT 12
6080: PUSH
6081: LD_INT 15
6083: PUSH
6084: LD_INT 16
6086: PUSH
6087: LD_INT 22
6089: PUSH
6090: LD_INT 23
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 101
6109: PUSH
6110: LD_INT 102
6112: PUSH
6113: LD_INT 105
6115: PUSH
6116: LD_INT 106
6118: PUSH
6119: LD_INT 108
6121: PUSH
6122: LD_INT 116
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 118
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 9128
6147: LD_INT 3
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6243
6155: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6156: LD_ADDR_VAR 0 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: LD_INT 5
6169: PUSH
6170: LD_INT 11
6172: PUSH
6173: LD_INT 12
6175: PUSH
6176: LD_INT 15
6178: PUSH
6179: LD_INT 16
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 26
6187: PUSH
6188: LD_INT 36
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 101
6205: PUSH
6206: LD_INT 102
6208: PUSH
6209: LD_INT 105
6211: PUSH
6212: LD_INT 106
6214: PUSH
6215: LD_INT 108
6217: PUSH
6218: LD_INT 116
6220: PUSH
6221: LD_INT 117
6223: PUSH
6224: LD_INT 118
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: ST_TO_ADDR
6241: GO 9128
6243: LD_INT 4
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6347
6251: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6252: LD_ADDR_VAR 0 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 4
6262: PUSH
6263: LD_INT 5
6265: PUSH
6266: LD_INT 8
6268: PUSH
6269: LD_INT 11
6271: PUSH
6272: LD_INT 12
6274: PUSH
6275: LD_INT 15
6277: PUSH
6278: LD_INT 16
6280: PUSH
6281: LD_INT 22
6283: PUSH
6284: LD_INT 23
6286: PUSH
6287: LD_INT 26
6289: PUSH
6290: LD_INT 36
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 101
6309: PUSH
6310: LD_INT 102
6312: PUSH
6313: LD_INT 105
6315: PUSH
6316: LD_INT 106
6318: PUSH
6319: LD_INT 108
6321: PUSH
6322: LD_INT 116
6324: PUSH
6325: LD_INT 117
6327: PUSH
6328: LD_INT 118
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: ST_TO_ADDR
6345: GO 9128
6347: LD_INT 5
6349: DOUBLE
6350: EQUAL
6351: IFTRUE 6355
6353: GO 6467
6355: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6356: LD_ADDR_VAR 0 1
6360: PUSH
6361: LD_INT 2
6363: PUSH
6364: LD_INT 4
6366: PUSH
6367: LD_INT 5
6369: PUSH
6370: LD_INT 6
6372: PUSH
6373: LD_INT 8
6375: PUSH
6376: LD_INT 11
6378: PUSH
6379: LD_INT 12
6381: PUSH
6382: LD_INT 15
6384: PUSH
6385: LD_INT 16
6387: PUSH
6388: LD_INT 22
6390: PUSH
6391: LD_INT 23
6393: PUSH
6394: LD_INT 25
6396: PUSH
6397: LD_INT 26
6399: PUSH
6400: LD_INT 36
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 101
6421: PUSH
6422: LD_INT 102
6424: PUSH
6425: LD_INT 105
6427: PUSH
6428: LD_INT 106
6430: PUSH
6431: LD_INT 108
6433: PUSH
6434: LD_INT 109
6436: PUSH
6437: LD_INT 112
6439: PUSH
6440: LD_INT 116
6442: PUSH
6443: LD_INT 117
6445: PUSH
6446: LD_INT 118
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: ST_TO_ADDR
6465: GO 9128
6467: LD_INT 6
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6607
6475: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 2
6483: PUSH
6484: LD_INT 4
6486: PUSH
6487: LD_INT 5
6489: PUSH
6490: LD_INT 6
6492: PUSH
6493: LD_INT 8
6495: PUSH
6496: LD_INT 11
6498: PUSH
6499: LD_INT 12
6501: PUSH
6502: LD_INT 15
6504: PUSH
6505: LD_INT 16
6507: PUSH
6508: LD_INT 20
6510: PUSH
6511: LD_INT 21
6513: PUSH
6514: LD_INT 22
6516: PUSH
6517: LD_INT 23
6519: PUSH
6520: LD_INT 25
6522: PUSH
6523: LD_INT 26
6525: PUSH
6526: LD_INT 30
6528: PUSH
6529: LD_INT 31
6531: PUSH
6532: LD_INT 32
6534: PUSH
6535: LD_INT 36
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 101
6561: PUSH
6562: LD_INT 102
6564: PUSH
6565: LD_INT 105
6567: PUSH
6568: LD_INT 106
6570: PUSH
6571: LD_INT 108
6573: PUSH
6574: LD_INT 109
6576: PUSH
6577: LD_INT 112
6579: PUSH
6580: LD_INT 116
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: LD_INT 118
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: ST_TO_ADDR
6605: GO 9128
6607: LD_INT 7
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6727
6615: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6616: LD_ADDR_VAR 0 1
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 4
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: LD_INT 7
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 12
6638: PUSH
6639: LD_INT 15
6641: PUSH
6642: LD_INT 16
6644: PUSH
6645: LD_INT 20
6647: PUSH
6648: LD_INT 21
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 101
6681: PUSH
6682: LD_INT 102
6684: PUSH
6685: LD_INT 103
6687: PUSH
6688: LD_INT 105
6690: PUSH
6691: LD_INT 106
6693: PUSH
6694: LD_INT 108
6696: PUSH
6697: LD_INT 112
6699: PUSH
6700: LD_INT 116
6702: PUSH
6703: LD_INT 117
6705: PUSH
6706: LD_INT 118
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: ST_TO_ADDR
6725: GO 9128
6727: LD_INT 8
6729: DOUBLE
6730: EQUAL
6731: IFTRUE 6735
6733: GO 6875
6735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6736: LD_ADDR_VAR 0 1
6740: PUSH
6741: LD_INT 2
6743: PUSH
6744: LD_INT 4
6746: PUSH
6747: LD_INT 5
6749: PUSH
6750: LD_INT 6
6752: PUSH
6753: LD_INT 7
6755: PUSH
6756: LD_INT 8
6758: PUSH
6759: LD_INT 11
6761: PUSH
6762: LD_INT 12
6764: PUSH
6765: LD_INT 15
6767: PUSH
6768: LD_INT 16
6770: PUSH
6771: LD_INT 20
6773: PUSH
6774: LD_INT 21
6776: PUSH
6777: LD_INT 22
6779: PUSH
6780: LD_INT 23
6782: PUSH
6783: LD_INT 25
6785: PUSH
6786: LD_INT 26
6788: PUSH
6789: LD_INT 30
6791: PUSH
6792: LD_INT 31
6794: PUSH
6795: LD_INT 32
6797: PUSH
6798: LD_INT 36
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 101
6825: PUSH
6826: LD_INT 102
6828: PUSH
6829: LD_INT 103
6831: PUSH
6832: LD_INT 105
6834: PUSH
6835: LD_INT 106
6837: PUSH
6838: LD_INT 108
6840: PUSH
6841: LD_INT 109
6843: PUSH
6844: LD_INT 112
6846: PUSH
6847: LD_INT 116
6849: PUSH
6850: LD_INT 117
6852: PUSH
6853: LD_INT 118
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: ST_TO_ADDR
6873: GO 9128
6875: LD_INT 9
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6883
6881: GO 7031
6883: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6884: LD_ADDR_VAR 0 1
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 4
6894: PUSH
6895: LD_INT 5
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: LD_INT 7
6903: PUSH
6904: LD_INT 8
6906: PUSH
6907: LD_INT 11
6909: PUSH
6910: LD_INT 12
6912: PUSH
6913: LD_INT 15
6915: PUSH
6916: LD_INT 16
6918: PUSH
6919: LD_INT 20
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 23
6930: PUSH
6931: LD_INT 25
6933: PUSH
6934: LD_INT 26
6936: PUSH
6937: LD_INT 28
6939: PUSH
6940: LD_INT 30
6942: PUSH
6943: LD_INT 31
6945: PUSH
6946: LD_INT 32
6948: PUSH
6949: LD_INT 36
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 101
6977: PUSH
6978: LD_INT 102
6980: PUSH
6981: LD_INT 103
6983: PUSH
6984: LD_INT 105
6986: PUSH
6987: LD_INT 106
6989: PUSH
6990: LD_INT 108
6992: PUSH
6993: LD_INT 109
6995: PUSH
6996: LD_INT 112
6998: PUSH
6999: LD_INT 114
7001: PUSH
7002: LD_INT 116
7004: PUSH
7005: LD_INT 117
7007: PUSH
7008: LD_INT 118
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: ST_TO_ADDR
7029: GO 9128
7031: LD_INT 10
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7235
7039: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7040: LD_ADDR_VAR 0 1
7044: PUSH
7045: LD_INT 2
7047: PUSH
7048: LD_INT 4
7050: PUSH
7051: LD_INT 5
7053: PUSH
7054: LD_INT 6
7056: PUSH
7057: LD_INT 7
7059: PUSH
7060: LD_INT 8
7062: PUSH
7063: LD_INT 9
7065: PUSH
7066: LD_INT 10
7068: PUSH
7069: LD_INT 11
7071: PUSH
7072: LD_INT 12
7074: PUSH
7075: LD_INT 13
7077: PUSH
7078: LD_INT 14
7080: PUSH
7081: LD_INT 15
7083: PUSH
7084: LD_INT 16
7086: PUSH
7087: LD_INT 17
7089: PUSH
7090: LD_INT 18
7092: PUSH
7093: LD_INT 19
7095: PUSH
7096: LD_INT 20
7098: PUSH
7099: LD_INT 21
7101: PUSH
7102: LD_INT 22
7104: PUSH
7105: LD_INT 23
7107: PUSH
7108: LD_INT 24
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 26
7116: PUSH
7117: LD_INT 28
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: LD_INT 31
7125: PUSH
7126: LD_INT 32
7128: PUSH
7129: LD_INT 36
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 101
7165: PUSH
7166: LD_INT 102
7168: PUSH
7169: LD_INT 103
7171: PUSH
7172: LD_INT 104
7174: PUSH
7175: LD_INT 105
7177: PUSH
7178: LD_INT 106
7180: PUSH
7181: LD_INT 107
7183: PUSH
7184: LD_INT 108
7186: PUSH
7187: LD_INT 109
7189: PUSH
7190: LD_INT 110
7192: PUSH
7193: LD_INT 111
7195: PUSH
7196: LD_INT 112
7198: PUSH
7199: LD_INT 114
7201: PUSH
7202: LD_INT 116
7204: PUSH
7205: LD_INT 117
7207: PUSH
7208: LD_INT 118
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: ST_TO_ADDR
7233: GO 9128
7235: LD_INT 11
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7447
7243: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7244: LD_ADDR_VAR 0 1
7248: PUSH
7249: LD_INT 2
7251: PUSH
7252: LD_INT 3
7254: PUSH
7255: LD_INT 4
7257: PUSH
7258: LD_INT 5
7260: PUSH
7261: LD_INT 6
7263: PUSH
7264: LD_INT 7
7266: PUSH
7267: LD_INT 8
7269: PUSH
7270: LD_INT 9
7272: PUSH
7273: LD_INT 10
7275: PUSH
7276: LD_INT 11
7278: PUSH
7279: LD_INT 12
7281: PUSH
7282: LD_INT 13
7284: PUSH
7285: LD_INT 14
7287: PUSH
7288: LD_INT 15
7290: PUSH
7291: LD_INT 16
7293: PUSH
7294: LD_INT 17
7296: PUSH
7297: LD_INT 18
7299: PUSH
7300: LD_INT 19
7302: PUSH
7303: LD_INT 20
7305: PUSH
7306: LD_INT 21
7308: PUSH
7309: LD_INT 22
7311: PUSH
7312: LD_INT 23
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 26
7323: PUSH
7324: LD_INT 28
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 31
7332: PUSH
7333: LD_INT 32
7335: PUSH
7336: LD_INT 34
7338: PUSH
7339: LD_INT 36
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 101
7377: PUSH
7378: LD_INT 102
7380: PUSH
7381: LD_INT 103
7383: PUSH
7384: LD_INT 104
7386: PUSH
7387: LD_INT 105
7389: PUSH
7390: LD_INT 106
7392: PUSH
7393: LD_INT 107
7395: PUSH
7396: LD_INT 108
7398: PUSH
7399: LD_INT 109
7401: PUSH
7402: LD_INT 110
7404: PUSH
7405: LD_INT 111
7407: PUSH
7408: LD_INT 112
7410: PUSH
7411: LD_INT 114
7413: PUSH
7414: LD_INT 116
7416: PUSH
7417: LD_INT 117
7419: PUSH
7420: LD_INT 118
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: ST_TO_ADDR
7445: GO 9128
7447: LD_INT 12
7449: DOUBLE
7450: EQUAL
7451: IFTRUE 7455
7453: GO 7675
7455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7456: LD_ADDR_VAR 0 1
7460: PUSH
7461: LD_INT 1
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: LD_INT 3
7469: PUSH
7470: LD_INT 4
7472: PUSH
7473: LD_INT 5
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: LD_INT 7
7481: PUSH
7482: LD_INT 8
7484: PUSH
7485: LD_INT 9
7487: PUSH
7488: LD_INT 10
7490: PUSH
7491: LD_INT 11
7493: PUSH
7494: LD_INT 12
7496: PUSH
7497: LD_INT 13
7499: PUSH
7500: LD_INT 14
7502: PUSH
7503: LD_INT 15
7505: PUSH
7506: LD_INT 16
7508: PUSH
7509: LD_INT 17
7511: PUSH
7512: LD_INT 18
7514: PUSH
7515: LD_INT 19
7517: PUSH
7518: LD_INT 20
7520: PUSH
7521: LD_INT 21
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 23
7529: PUSH
7530: LD_INT 24
7532: PUSH
7533: LD_INT 25
7535: PUSH
7536: LD_INT 26
7538: PUSH
7539: LD_INT 27
7541: PUSH
7542: LD_INT 28
7544: PUSH
7545: LD_INT 30
7547: PUSH
7548: LD_INT 31
7550: PUSH
7551: LD_INT 32
7553: PUSH
7554: LD_INT 33
7556: PUSH
7557: LD_INT 34
7559: PUSH
7560: LD_INT 36
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 101
7601: PUSH
7602: LD_INT 102
7604: PUSH
7605: LD_INT 103
7607: PUSH
7608: LD_INT 104
7610: PUSH
7611: LD_INT 105
7613: PUSH
7614: LD_INT 106
7616: PUSH
7617: LD_INT 107
7619: PUSH
7620: LD_INT 108
7622: PUSH
7623: LD_INT 109
7625: PUSH
7626: LD_INT 110
7628: PUSH
7629: LD_INT 111
7631: PUSH
7632: LD_INT 112
7634: PUSH
7635: LD_INT 113
7637: PUSH
7638: LD_INT 114
7640: PUSH
7641: LD_INT 116
7643: PUSH
7644: LD_INT 117
7646: PUSH
7647: LD_INT 118
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: ST_TO_ADDR
7673: GO 9128
7675: LD_INT 13
7677: DOUBLE
7678: EQUAL
7679: IFTRUE 7683
7681: GO 7891
7683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7684: LD_ADDR_VAR 0 1
7688: PUSH
7689: LD_INT 1
7691: PUSH
7692: LD_INT 2
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 4
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: LD_INT 8
7706: PUSH
7707: LD_INT 9
7709: PUSH
7710: LD_INT 10
7712: PUSH
7713: LD_INT 11
7715: PUSH
7716: LD_INT 12
7718: PUSH
7719: LD_INT 14
7721: PUSH
7722: LD_INT 15
7724: PUSH
7725: LD_INT 16
7727: PUSH
7728: LD_INT 17
7730: PUSH
7731: LD_INT 18
7733: PUSH
7734: LD_INT 19
7736: PUSH
7737: LD_INT 20
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_INT 23
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: LD_INT 25
7754: PUSH
7755: LD_INT 26
7757: PUSH
7758: LD_INT 27
7760: PUSH
7761: LD_INT 28
7763: PUSH
7764: LD_INT 30
7766: PUSH
7767: LD_INT 31
7769: PUSH
7770: LD_INT 32
7772: PUSH
7773: LD_INT 33
7775: PUSH
7776: LD_INT 34
7778: PUSH
7779: LD_INT 36
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 101
7817: PUSH
7818: LD_INT 102
7820: PUSH
7821: LD_INT 103
7823: PUSH
7824: LD_INT 104
7826: PUSH
7827: LD_INT 105
7829: PUSH
7830: LD_INT 106
7832: PUSH
7833: LD_INT 107
7835: PUSH
7836: LD_INT 108
7838: PUSH
7839: LD_INT 109
7841: PUSH
7842: LD_INT 110
7844: PUSH
7845: LD_INT 111
7847: PUSH
7848: LD_INT 112
7850: PUSH
7851: LD_INT 113
7853: PUSH
7854: LD_INT 114
7856: PUSH
7857: LD_INT 116
7859: PUSH
7860: LD_INT 117
7862: PUSH
7863: LD_INT 118
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: ST_TO_ADDR
7889: GO 9128
7891: LD_INT 14
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 8123
7899: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: LD_INT 2
7910: PUSH
7911: LD_INT 3
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: LD_INT 6
7922: PUSH
7923: LD_INT 7
7925: PUSH
7926: LD_INT 8
7928: PUSH
7929: LD_INT 9
7931: PUSH
7932: LD_INT 10
7934: PUSH
7935: LD_INT 11
7937: PUSH
7938: LD_INT 12
7940: PUSH
7941: LD_INT 13
7943: PUSH
7944: LD_INT 14
7946: PUSH
7947: LD_INT 15
7949: PUSH
7950: LD_INT 16
7952: PUSH
7953: LD_INT 17
7955: PUSH
7956: LD_INT 18
7958: PUSH
7959: LD_INT 19
7961: PUSH
7962: LD_INT 20
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 23
7973: PUSH
7974: LD_INT 24
7976: PUSH
7977: LD_INT 25
7979: PUSH
7980: LD_INT 26
7982: PUSH
7983: LD_INT 27
7985: PUSH
7986: LD_INT 28
7988: PUSH
7989: LD_INT 29
7991: PUSH
7992: LD_INT 30
7994: PUSH
7995: LD_INT 31
7997: PUSH
7998: LD_INT 32
8000: PUSH
8001: LD_INT 33
8003: PUSH
8004: LD_INT 34
8006: PUSH
8007: LD_INT 36
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 101
8049: PUSH
8050: LD_INT 102
8052: PUSH
8053: LD_INT 103
8055: PUSH
8056: LD_INT 104
8058: PUSH
8059: LD_INT 105
8061: PUSH
8062: LD_INT 106
8064: PUSH
8065: LD_INT 107
8067: PUSH
8068: LD_INT 108
8070: PUSH
8071: LD_INT 109
8073: PUSH
8074: LD_INT 110
8076: PUSH
8077: LD_INT 111
8079: PUSH
8080: LD_INT 112
8082: PUSH
8083: LD_INT 113
8085: PUSH
8086: LD_INT 114
8088: PUSH
8089: LD_INT 116
8091: PUSH
8092: LD_INT 117
8094: PUSH
8095: LD_INT 118
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: ST_TO_ADDR
8121: GO 9128
8123: LD_INT 15
8125: DOUBLE
8126: EQUAL
8127: IFTRUE 8131
8129: GO 8355
8131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: LD_INT 3
8145: PUSH
8146: LD_INT 4
8148: PUSH
8149: LD_INT 5
8151: PUSH
8152: LD_INT 6
8154: PUSH
8155: LD_INT 7
8157: PUSH
8158: LD_INT 8
8160: PUSH
8161: LD_INT 9
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: LD_INT 11
8169: PUSH
8170: LD_INT 12
8172: PUSH
8173: LD_INT 13
8175: PUSH
8176: LD_INT 14
8178: PUSH
8179: LD_INT 15
8181: PUSH
8182: LD_INT 16
8184: PUSH
8185: LD_INT 17
8187: PUSH
8188: LD_INT 18
8190: PUSH
8191: LD_INT 19
8193: PUSH
8194: LD_INT 20
8196: PUSH
8197: LD_INT 21
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_INT 23
8205: PUSH
8206: LD_INT 24
8208: PUSH
8209: LD_INT 25
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_INT 27
8217: PUSH
8218: LD_INT 28
8220: PUSH
8221: LD_INT 29
8223: PUSH
8224: LD_INT 30
8226: PUSH
8227: LD_INT 31
8229: PUSH
8230: LD_INT 32
8232: PUSH
8233: LD_INT 33
8235: PUSH
8236: LD_INT 34
8238: PUSH
8239: LD_INT 36
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 101
8281: PUSH
8282: LD_INT 102
8284: PUSH
8285: LD_INT 103
8287: PUSH
8288: LD_INT 104
8290: PUSH
8291: LD_INT 105
8293: PUSH
8294: LD_INT 106
8296: PUSH
8297: LD_INT 107
8299: PUSH
8300: LD_INT 108
8302: PUSH
8303: LD_INT 109
8305: PUSH
8306: LD_INT 110
8308: PUSH
8309: LD_INT 111
8311: PUSH
8312: LD_INT 112
8314: PUSH
8315: LD_INT 113
8317: PUSH
8318: LD_INT 114
8320: PUSH
8321: LD_INT 116
8323: PUSH
8324: LD_INT 117
8326: PUSH
8327: LD_INT 118
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: ST_TO_ADDR
8353: GO 9128
8355: LD_INT 16
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8499
8363: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8364: LD_ADDR_VAR 0 1
8368: PUSH
8369: LD_INT 2
8371: PUSH
8372: LD_INT 4
8374: PUSH
8375: LD_INT 5
8377: PUSH
8378: LD_INT 7
8380: PUSH
8381: LD_INT 11
8383: PUSH
8384: LD_INT 12
8386: PUSH
8387: LD_INT 15
8389: PUSH
8390: LD_INT 16
8392: PUSH
8393: LD_INT 20
8395: PUSH
8396: LD_INT 21
8398: PUSH
8399: LD_INT 22
8401: PUSH
8402: LD_INT 23
8404: PUSH
8405: LD_INT 25
8407: PUSH
8408: LD_INT 26
8410: PUSH
8411: LD_INT 30
8413: PUSH
8414: LD_INT 31
8416: PUSH
8417: LD_INT 32
8419: PUSH
8420: LD_INT 33
8422: PUSH
8423: LD_INT 34
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 101
8449: PUSH
8450: LD_INT 102
8452: PUSH
8453: LD_INT 103
8455: PUSH
8456: LD_INT 106
8458: PUSH
8459: LD_INT 108
8461: PUSH
8462: LD_INT 112
8464: PUSH
8465: LD_INT 113
8467: PUSH
8468: LD_INT 114
8470: PUSH
8471: LD_INT 116
8473: PUSH
8474: LD_INT 117
8476: PUSH
8477: LD_INT 118
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: ST_TO_ADDR
8497: GO 9128
8499: LD_INT 17
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8731
8507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8508: LD_ADDR_VAR 0 1
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: LD_INT 4
8524: PUSH
8525: LD_INT 5
8527: PUSH
8528: LD_INT 6
8530: PUSH
8531: LD_INT 7
8533: PUSH
8534: LD_INT 8
8536: PUSH
8537: LD_INT 9
8539: PUSH
8540: LD_INT 10
8542: PUSH
8543: LD_INT 11
8545: PUSH
8546: LD_INT 12
8548: PUSH
8549: LD_INT 13
8551: PUSH
8552: LD_INT 14
8554: PUSH
8555: LD_INT 15
8557: PUSH
8558: LD_INT 16
8560: PUSH
8561: LD_INT 17
8563: PUSH
8564: LD_INT 18
8566: PUSH
8567: LD_INT 19
8569: PUSH
8570: LD_INT 20
8572: PUSH
8573: LD_INT 21
8575: PUSH
8576: LD_INT 22
8578: PUSH
8579: LD_INT 23
8581: PUSH
8582: LD_INT 24
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 26
8590: PUSH
8591: LD_INT 27
8593: PUSH
8594: LD_INT 28
8596: PUSH
8597: LD_INT 29
8599: PUSH
8600: LD_INT 30
8602: PUSH
8603: LD_INT 31
8605: PUSH
8606: LD_INT 32
8608: PUSH
8609: LD_INT 33
8611: PUSH
8612: LD_INT 34
8614: PUSH
8615: LD_INT 36
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 101
8657: PUSH
8658: LD_INT 102
8660: PUSH
8661: LD_INT 103
8663: PUSH
8664: LD_INT 104
8666: PUSH
8667: LD_INT 105
8669: PUSH
8670: LD_INT 106
8672: PUSH
8673: LD_INT 107
8675: PUSH
8676: LD_INT 108
8678: PUSH
8679: LD_INT 109
8681: PUSH
8682: LD_INT 110
8684: PUSH
8685: LD_INT 111
8687: PUSH
8688: LD_INT 112
8690: PUSH
8691: LD_INT 113
8693: PUSH
8694: LD_INT 114
8696: PUSH
8697: LD_INT 116
8699: PUSH
8700: LD_INT 117
8702: PUSH
8703: LD_INT 118
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: ST_TO_ADDR
8729: GO 9128
8731: LD_INT 18
8733: DOUBLE
8734: EQUAL
8735: IFTRUE 8739
8737: GO 8887
8739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: LD_INT 2
8747: PUSH
8748: LD_INT 4
8750: PUSH
8751: LD_INT 5
8753: PUSH
8754: LD_INT 7
8756: PUSH
8757: LD_INT 11
8759: PUSH
8760: LD_INT 12
8762: PUSH
8763: LD_INT 15
8765: PUSH
8766: LD_INT 16
8768: PUSH
8769: LD_INT 20
8771: PUSH
8772: LD_INT 21
8774: PUSH
8775: LD_INT 22
8777: PUSH
8778: LD_INT 23
8780: PUSH
8781: LD_INT 25
8783: PUSH
8784: LD_INT 26
8786: PUSH
8787: LD_INT 30
8789: PUSH
8790: LD_INT 31
8792: PUSH
8793: LD_INT 32
8795: PUSH
8796: LD_INT 33
8798: PUSH
8799: LD_INT 34
8801: PUSH
8802: LD_INT 35
8804: PUSH
8805: LD_INT 36
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 101
8833: PUSH
8834: LD_INT 102
8836: PUSH
8837: LD_INT 103
8839: PUSH
8840: LD_INT 106
8842: PUSH
8843: LD_INT 108
8845: PUSH
8846: LD_INT 112
8848: PUSH
8849: LD_INT 113
8851: PUSH
8852: LD_INT 114
8854: PUSH
8855: LD_INT 115
8857: PUSH
8858: LD_INT 116
8860: PUSH
8861: LD_INT 117
8863: PUSH
8864: LD_INT 118
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: ST_TO_ADDR
8885: GO 9128
8887: LD_INT 19
8889: DOUBLE
8890: EQUAL
8891: IFTRUE 8895
8893: GO 9127
8895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8896: LD_ADDR_VAR 0 1
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: LD_INT 2
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 4
8912: PUSH
8913: LD_INT 5
8915: PUSH
8916: LD_INT 6
8918: PUSH
8919: LD_INT 7
8921: PUSH
8922: LD_INT 8
8924: PUSH
8925: LD_INT 9
8927: PUSH
8928: LD_INT 10
8930: PUSH
8931: LD_INT 11
8933: PUSH
8934: LD_INT 12
8936: PUSH
8937: LD_INT 13
8939: PUSH
8940: LD_INT 14
8942: PUSH
8943: LD_INT 15
8945: PUSH
8946: LD_INT 16
8948: PUSH
8949: LD_INT 17
8951: PUSH
8952: LD_INT 18
8954: PUSH
8955: LD_INT 19
8957: PUSH
8958: LD_INT 20
8960: PUSH
8961: LD_INT 21
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_INT 23
8969: PUSH
8970: LD_INT 24
8972: PUSH
8973: LD_INT 25
8975: PUSH
8976: LD_INT 26
8978: PUSH
8979: LD_INT 27
8981: PUSH
8982: LD_INT 28
8984: PUSH
8985: LD_INT 29
8987: PUSH
8988: LD_INT 30
8990: PUSH
8991: LD_INT 31
8993: PUSH
8994: LD_INT 32
8996: PUSH
8997: LD_INT 33
8999: PUSH
9000: LD_INT 34
9002: PUSH
9003: LD_INT 35
9005: PUSH
9006: LD_INT 36
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: PUSH
9047: LD_INT 101
9049: PUSH
9050: LD_INT 102
9052: PUSH
9053: LD_INT 103
9055: PUSH
9056: LD_INT 104
9058: PUSH
9059: LD_INT 105
9061: PUSH
9062: LD_INT 106
9064: PUSH
9065: LD_INT 107
9067: PUSH
9068: LD_INT 108
9070: PUSH
9071: LD_INT 109
9073: PUSH
9074: LD_INT 110
9076: PUSH
9077: LD_INT 111
9079: PUSH
9080: LD_INT 112
9082: PUSH
9083: LD_INT 113
9085: PUSH
9086: LD_INT 114
9088: PUSH
9089: LD_INT 115
9091: PUSH
9092: LD_INT 116
9094: PUSH
9095: LD_INT 117
9097: PUSH
9098: LD_INT 118
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
9125: GO 9128
9127: POP
// end else
9128: GO 9359
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9130: LD_ADDR_VAR 0 1
9134: PUSH
9135: LD_INT 1
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: LD_INT 3
9143: PUSH
9144: LD_INT 4
9146: PUSH
9147: LD_INT 5
9149: PUSH
9150: LD_INT 6
9152: PUSH
9153: LD_INT 7
9155: PUSH
9156: LD_INT 8
9158: PUSH
9159: LD_INT 9
9161: PUSH
9162: LD_INT 10
9164: PUSH
9165: LD_INT 11
9167: PUSH
9168: LD_INT 12
9170: PUSH
9171: LD_INT 13
9173: PUSH
9174: LD_INT 14
9176: PUSH
9177: LD_INT 15
9179: PUSH
9180: LD_INT 16
9182: PUSH
9183: LD_INT 17
9185: PUSH
9186: LD_INT 18
9188: PUSH
9189: LD_INT 19
9191: PUSH
9192: LD_INT 20
9194: PUSH
9195: LD_INT 21
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 23
9203: PUSH
9204: LD_INT 24
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 26
9212: PUSH
9213: LD_INT 27
9215: PUSH
9216: LD_INT 28
9218: PUSH
9219: LD_INT 29
9221: PUSH
9222: LD_INT 30
9224: PUSH
9225: LD_INT 31
9227: PUSH
9228: LD_INT 32
9230: PUSH
9231: LD_INT 33
9233: PUSH
9234: LD_INT 34
9236: PUSH
9237: LD_INT 35
9239: PUSH
9240: LD_INT 36
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 101
9283: PUSH
9284: LD_INT 102
9286: PUSH
9287: LD_INT 103
9289: PUSH
9290: LD_INT 104
9292: PUSH
9293: LD_INT 105
9295: PUSH
9296: LD_INT 106
9298: PUSH
9299: LD_INT 107
9301: PUSH
9302: LD_INT 108
9304: PUSH
9305: LD_INT 109
9307: PUSH
9308: LD_INT 110
9310: PUSH
9311: LD_INT 111
9313: PUSH
9314: LD_INT 112
9316: PUSH
9317: LD_INT 113
9319: PUSH
9320: LD_INT 114
9322: PUSH
9323: LD_INT 115
9325: PUSH
9326: LD_INT 116
9328: PUSH
9329: LD_INT 117
9331: PUSH
9332: LD_INT 118
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// if result then
9359: LD_VAR 0 1
9363: IFFALSE 9652
// begin normal :=  ;
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_STRING 
9372: ST_TO_ADDR
// hardcore :=  ;
9373: LD_ADDR_VAR 0 4
9377: PUSH
9378: LD_STRING 
9380: ST_TO_ADDR
// for i = 1 to normalCounter do
9381: LD_ADDR_VAR 0 5
9385: PUSH
9386: DOUBLE
9387: LD_INT 1
9389: DEC
9390: ST_TO_ADDR
9391: LD_EXP 24
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9498
// begin tmp := 0 ;
9399: LD_ADDR_VAR 0 2
9403: PUSH
9404: LD_STRING 0
9406: ST_TO_ADDR
// if result [ 1 ] then
9407: LD_VAR 0 1
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: IFFALSE 9480
// if result [ 1 ] [ 1 ] = i then
9417: LD_VAR 0 1
9421: PUSH
9422: LD_INT 1
9424: ARRAY
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PUSH
9430: LD_VAR 0 5
9434: EQUAL
9435: IFFALSE 9480
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9437: LD_ADDR_VAR 0 1
9441: PUSH
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 1
9449: PPUSH
9450: LD_VAR 0 1
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 3
9466: PPUSH
9467: CALL_OW 1
9471: ST_TO_ADDR
// tmp := 1 ;
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: LD_STRING 1
9479: ST_TO_ADDR
// end ; normal := normal & tmp ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_VAR 0 3
9489: PUSH
9490: LD_VAR 0 2
9494: STR
9495: ST_TO_ADDR
// end ;
9496: GO 9396
9498: POP
9499: POP
// for i = 1 to hardcoreCounter do
9500: LD_ADDR_VAR 0 5
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_EXP 25
9514: PUSH
9515: FOR_TO
9516: IFFALSE 9621
// begin tmp := 0 ;
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: LD_STRING 0
9525: ST_TO_ADDR
// if result [ 2 ] then
9526: LD_VAR 0 1
9530: PUSH
9531: LD_INT 2
9533: ARRAY
9534: IFFALSE 9603
// if result [ 2 ] [ 1 ] = 100 + i then
9536: LD_VAR 0 1
9540: PUSH
9541: LD_INT 2
9543: ARRAY
9544: PUSH
9545: LD_INT 1
9547: ARRAY
9548: PUSH
9549: LD_INT 100
9551: PUSH
9552: LD_VAR 0 5
9556: PLUS
9557: EQUAL
9558: IFFALSE 9603
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9560: LD_ADDR_VAR 0 1
9564: PUSH
9565: LD_VAR 0 1
9569: PPUSH
9570: LD_INT 2
9572: PPUSH
9573: LD_VAR 0 1
9577: PUSH
9578: LD_INT 2
9580: ARRAY
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: CALL_OW 3
9589: PPUSH
9590: CALL_OW 1
9594: ST_TO_ADDR
// tmp := 1 ;
9595: LD_ADDR_VAR 0 2
9599: PUSH
9600: LD_STRING 1
9602: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9603: LD_ADDR_VAR 0 4
9607: PUSH
9608: LD_VAR 0 4
9612: PUSH
9613: LD_VAR 0 2
9617: STR
9618: ST_TO_ADDR
// end ;
9619: GO 9515
9621: POP
9622: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9623: LD_STRING getStreamItemsFromMission("
9625: PUSH
9626: LD_VAR 0 3
9630: STR
9631: PUSH
9632: LD_STRING ","
9634: STR
9635: PUSH
9636: LD_VAR 0 4
9640: STR
9641: PUSH
9642: LD_STRING ")
9644: STR
9645: PPUSH
9646: CALL_OW 559
// end else
9650: GO 9659
// ToLua ( getStreamItemsFromMission("","") ) ;
9652: LD_STRING getStreamItemsFromMission("","")
9654: PPUSH
9655: CALL_OW 559
// end ;
9659: LD_VAR 0 1
9663: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9664: LD_EXP 23
9668: PUSH
9669: LD_EXP 28
9673: AND
9674: IFFALSE 9798
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin enable ;
9683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9684: LD_ADDR_VAR 0 2
9688: PUSH
9689: LD_INT 22
9691: PUSH
9692: LD_OWVAR 2
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: LD_INT 34
9706: PUSH
9707: LD_INT 7
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 34
9716: PUSH
9717: LD_INT 45
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 34
9726: PUSH
9727: LD_INT 28
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 34
9736: PUSH
9737: LD_INT 47
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 2
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9798
// for i in tmp do
9769: LD_ADDR_VAR 0 1
9773: PUSH
9774: LD_VAR 0 2
9778: PUSH
9779: FOR_IN
9780: IFFALSE 9796
// begin SetLives ( i , 0 ) ;
9782: LD_VAR 0 1
9786: PPUSH
9787: LD_INT 0
9789: PPUSH
9790: CALL_OW 234
// end ;
9794: GO 9779
9796: POP
9797: POP
// end ;
9798: PPOPN 2
9800: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9801: LD_EXP 23
9805: PUSH
9806: LD_EXP 29
9810: AND
9811: IFFALSE 9895
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
// begin enable ;
9820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_OWVAR 2
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 32
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PPUSH
9852: CALL_OW 69
9856: ST_TO_ADDR
// if not tmp then
9857: LD_VAR 0 2
9861: NOT
9862: IFFALSE 9866
// exit ;
9864: GO 9895
// for i in tmp do
9866: LD_ADDR_VAR 0 1
9870: PUSH
9871: LD_VAR 0 2
9875: PUSH
9876: FOR_IN
9877: IFFALSE 9893
// begin SetLives ( i , 0 ) ;
9879: LD_VAR 0 1
9883: PPUSH
9884: LD_INT 0
9886: PPUSH
9887: CALL_OW 234
// end ;
9891: GO 9876
9893: POP
9894: POP
// end ;
9895: PPOPN 2
9897: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9898: LD_EXP 23
9902: PUSH
9903: LD_EXP 26
9907: AND
9908: IFFALSE 10001
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
// begin enable ;
9916: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_INT 22
9924: PUSH
9925: LD_OWVAR 2
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 2
9936: PUSH
9937: LD_INT 25
9939: PUSH
9940: LD_INT 5
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 25
9949: PUSH
9950: LD_INT 9
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 25
9959: PUSH
9960: LD_INT 8
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 69
9981: PUSH
9982: FOR_IN
9983: IFFALSE 9999
// begin SetClass ( i , 1 ) ;
9985: LD_VAR 0 1
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: CALL_OW 336
// end ;
9997: GO 9982
9999: POP
10000: POP
// end ;
10001: PPOPN 1
10003: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10004: LD_EXP 23
10008: PUSH
10009: LD_EXP 27
10013: AND
10014: PUSH
10015: LD_OWVAR 65
10019: PUSH
10020: LD_INT 7
10022: LESS
10023: AND
10024: IFFALSE 10038
10026: GO 10028
10028: DISABLE
// begin enable ;
10029: ENABLE
// game_speed := 7 ;
10030: LD_ADDR_OWVAR 65
10034: PUSH
10035: LD_INT 7
10037: ST_TO_ADDR
// end ;
10038: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10039: LD_EXP 23
10043: PUSH
10044: LD_EXP 30
10048: AND
10049: IFFALSE 10251
10051: GO 10053
10053: DISABLE
10054: LD_INT 0
10056: PPUSH
10057: PPUSH
10058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10059: LD_ADDR_VAR 0 3
10063: PUSH
10064: LD_INT 81
10066: PUSH
10067: LD_OWVAR 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 21
10078: PUSH
10079: LD_INT 1
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PPUSH
10090: CALL_OW 69
10094: ST_TO_ADDR
// if not tmp then
10095: LD_VAR 0 3
10099: NOT
10100: IFFALSE 10104
// exit ;
10102: GO 10251
// if tmp > 5 then
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 5
10111: GREATER
10112: IFFALSE 10124
// k := 5 else
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: LD_INT 5
10121: ST_TO_ADDR
10122: GO 10134
// k := tmp ;
10124: LD_ADDR_VAR 0 2
10128: PUSH
10129: LD_VAR 0 3
10133: ST_TO_ADDR
// for i := 1 to k do
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: DOUBLE
10140: LD_INT 1
10142: DEC
10143: ST_TO_ADDR
10144: LD_VAR 0 2
10148: PUSH
10149: FOR_TO
10150: IFFALSE 10249
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10152: LD_VAR 0 3
10156: PUSH
10157: LD_VAR 0 1
10161: ARRAY
10162: PPUSH
10163: LD_VAR 0 1
10167: PUSH
10168: LD_INT 4
10170: MOD
10171: PUSH
10172: LD_INT 1
10174: PLUS
10175: PPUSH
10176: CALL_OW 259
10180: PUSH
10181: LD_INT 10
10183: LESS
10184: IFFALSE 10247
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10186: LD_VAR 0 3
10190: PUSH
10191: LD_VAR 0 1
10195: ARRAY
10196: PPUSH
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 4
10204: MOD
10205: PUSH
10206: LD_INT 1
10208: PLUS
10209: PPUSH
10210: LD_VAR 0 3
10214: PUSH
10215: LD_VAR 0 1
10219: ARRAY
10220: PPUSH
10221: LD_VAR 0 1
10225: PUSH
10226: LD_INT 4
10228: MOD
10229: PUSH
10230: LD_INT 1
10232: PLUS
10233: PPUSH
10234: CALL_OW 259
10238: PUSH
10239: LD_INT 1
10241: PLUS
10242: PPUSH
10243: CALL_OW 237
10247: GO 10149
10249: POP
10250: POP
// end ;
10251: PPOPN 3
10253: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10254: LD_EXP 23
10258: PUSH
10259: LD_EXP 31
10263: AND
10264: IFFALSE 10284
10266: GO 10268
10268: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10269: LD_INT 4
10271: PPUSH
10272: LD_OWVAR 2
10276: PPUSH
10277: LD_INT 0
10279: PPUSH
10280: CALL_OW 324
10284: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10285: LD_EXP 23
10289: PUSH
10290: LD_EXP 60
10294: AND
10295: IFFALSE 10315
10297: GO 10299
10299: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10300: LD_INT 19
10302: PPUSH
10303: LD_OWVAR 2
10307: PPUSH
10308: LD_INT 0
10310: PPUSH
10311: CALL_OW 324
10315: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10316: LD_EXP 23
10320: PUSH
10321: LD_EXP 32
10325: AND
10326: IFFALSE 10428
10328: GO 10330
10330: DISABLE
10331: LD_INT 0
10333: PPUSH
10334: PPUSH
// begin enable ;
10335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10336: LD_ADDR_VAR 0 2
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_OWVAR 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 11
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 34
10368: PUSH
10369: LD_INT 30
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 69
10389: ST_TO_ADDR
// if not tmp then
10390: LD_VAR 0 2
10394: NOT
10395: IFFALSE 10399
// exit ;
10397: GO 10428
// for i in tmp do
10399: LD_ADDR_VAR 0 1
10403: PUSH
10404: LD_VAR 0 2
10408: PUSH
10409: FOR_IN
10410: IFFALSE 10426
// begin SetLives ( i , 0 ) ;
10412: LD_VAR 0 1
10416: PPUSH
10417: LD_INT 0
10419: PPUSH
10420: CALL_OW 234
// end ;
10424: GO 10409
10426: POP
10427: POP
// end ;
10428: PPOPN 2
10430: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10431: LD_EXP 23
10435: PUSH
10436: LD_EXP 33
10440: AND
10441: IFFALSE 10461
10443: GO 10445
10445: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10446: LD_INT 32
10448: PPUSH
10449: LD_OWVAR 2
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 324
10461: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10462: LD_EXP 23
10466: PUSH
10467: LD_EXP 34
10471: AND
10472: IFFALSE 10653
10474: GO 10476
10476: DISABLE
10477: LD_INT 0
10479: PPUSH
10480: PPUSH
10481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: LD_INT 22
10489: PUSH
10490: LD_OWVAR 2
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 69
10517: ST_TO_ADDR
// if not tmp then
10518: LD_VAR 0 2
10522: NOT
10523: IFFALSE 10527
// exit ;
10525: GO 10653
// side := 0 ;
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// for i := 1 to 8 do
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: DOUBLE
10541: LD_INT 1
10543: DEC
10544: ST_TO_ADDR
10545: LD_INT 8
10547: PUSH
10548: FOR_TO
10549: IFFALSE 10597
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10551: LD_OWVAR 2
10555: PUSH
10556: LD_VAR 0 1
10560: NONEQUAL
10561: PUSH
10562: LD_OWVAR 2
10566: PPUSH
10567: LD_VAR 0 1
10571: PPUSH
10572: CALL_OW 81
10576: PUSH
10577: LD_INT 2
10579: EQUAL
10580: AND
10581: IFFALSE 10595
// begin side := i ;
10583: LD_ADDR_VAR 0 3
10587: PUSH
10588: LD_VAR 0 1
10592: ST_TO_ADDR
// break ;
10593: GO 10597
// end ;
10595: GO 10548
10597: POP
10598: POP
// if not side then
10599: LD_VAR 0 3
10603: NOT
10604: IFFALSE 10608
// exit ;
10606: GO 10653
// for i := 1 to tmp do
10608: LD_ADDR_VAR 0 1
10612: PUSH
10613: DOUBLE
10614: LD_INT 1
10616: DEC
10617: ST_TO_ADDR
10618: LD_VAR 0 2
10622: PUSH
10623: FOR_TO
10624: IFFALSE 10651
// if Prob ( 60 ) then
10626: LD_INT 60
10628: PPUSH
10629: CALL_OW 13
10633: IFFALSE 10649
// SetSide ( i , side ) ;
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: CALL_OW 235
10649: GO 10623
10651: POP
10652: POP
// end ;
10653: PPOPN 3
10655: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10656: LD_EXP 23
10660: PUSH
10661: LD_EXP 36
10665: AND
10666: IFFALSE 10785
10668: GO 10670
10670: DISABLE
10671: LD_INT 0
10673: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_INT 22
10681: PUSH
10682: LD_OWVAR 2
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 21
10693: PUSH
10694: LD_INT 1
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: LD_INT 23
10706: PUSH
10707: LD_INT 0
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: PPUSH
10723: CALL_OW 69
10727: PUSH
10728: FOR_IN
10729: IFFALSE 10783
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 257
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: LD_INT 2
10746: PUSH
10747: LD_INT 3
10749: PUSH
10750: LD_INT 4
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: IN
10759: IFFALSE 10781
// SetClass ( un , rand ( 1 , 4 ) ) ;
10761: LD_VAR 0 1
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: LD_INT 4
10771: PPUSH
10772: CALL_OW 12
10776: PPUSH
10777: CALL_OW 336
10781: GO 10728
10783: POP
10784: POP
// end ;
10785: PPOPN 1
10787: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10788: LD_EXP 23
10792: PUSH
10793: LD_EXP 35
10797: AND
10798: IFFALSE 10877
10800: GO 10802
10802: DISABLE
10803: LD_INT 0
10805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10806: LD_ADDR_VAR 0 1
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_OWVAR 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 21
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL_OW 69
10841: ST_TO_ADDR
// if not tmp then
10842: LD_VAR 0 1
10846: NOT
10847: IFFALSE 10851
// exit ;
10849: GO 10877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10851: LD_VAR 0 1
10855: PUSH
10856: LD_INT 1
10858: PPUSH
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 12
10868: ARRAY
10869: PPUSH
10870: LD_INT 100
10872: PPUSH
10873: CALL_OW 234
// end ;
10877: PPOPN 1
10879: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10880: LD_EXP 23
10884: PUSH
10885: LD_EXP 37
10889: AND
10890: IFFALSE 10988
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_INT 22
10905: PUSH
10906: LD_OWVAR 2
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 21
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 69
10933: ST_TO_ADDR
// if not tmp then
10934: LD_VAR 0 1
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 10988
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10943: LD_VAR 0 1
10947: PUSH
10948: LD_INT 1
10950: PPUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 12
10960: ARRAY
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: LD_INT 4
10967: PPUSH
10968: CALL_OW 12
10972: PPUSH
10973: LD_INT 3000
10975: PPUSH
10976: LD_INT 9000
10978: PPUSH
10979: CALL_OW 12
10983: PPUSH
10984: CALL_OW 492
// end ;
10988: PPOPN 1
10990: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10991: LD_EXP 23
10995: PUSH
10996: LD_EXP 38
11000: AND
11001: IFFALSE 11021
11003: GO 11005
11005: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11006: LD_INT 1
11008: PPUSH
11009: LD_OWVAR 2
11013: PPUSH
11014: LD_INT 0
11016: PPUSH
11017: CALL_OW 324
11021: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11022: LD_EXP 23
11026: PUSH
11027: LD_EXP 39
11031: AND
11032: IFFALSE 11115
11034: GO 11036
11036: DISABLE
11037: LD_INT 0
11039: PPUSH
11040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11041: LD_ADDR_VAR 0 2
11045: PUSH
11046: LD_INT 22
11048: PUSH
11049: LD_OWVAR 2
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 21
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 69
11076: ST_TO_ADDR
// if not tmp then
11077: LD_VAR 0 2
11081: NOT
11082: IFFALSE 11086
// exit ;
11084: GO 11115
// for i in tmp do
11086: LD_ADDR_VAR 0 1
11090: PUSH
11091: LD_VAR 0 2
11095: PUSH
11096: FOR_IN
11097: IFFALSE 11113
// SetBLevel ( i , 10 ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_INT 10
11106: PPUSH
11107: CALL_OW 241
11111: GO 11096
11113: POP
11114: POP
// end ;
11115: PPOPN 2
11117: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11118: LD_EXP 23
11122: PUSH
11123: LD_EXP 40
11127: AND
11128: IFFALSE 11239
11130: GO 11132
11132: DISABLE
11133: LD_INT 0
11135: PPUSH
11136: PPUSH
11137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11138: LD_ADDR_VAR 0 3
11142: PUSH
11143: LD_INT 22
11145: PUSH
11146: LD_OWVAR 2
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 1
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: ST_TO_ADDR
// if not tmp then
11174: LD_VAR 0 3
11178: NOT
11179: IFFALSE 11183
// exit ;
11181: GO 11239
// un := tmp [ rand ( 1 , tmp ) ] ;
11183: LD_ADDR_VAR 0 2
11187: PUSH
11188: LD_VAR 0 3
11192: PUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: CALL_OW 12
11205: ARRAY
11206: ST_TO_ADDR
// if Crawls ( un ) then
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 318
11216: IFFALSE 11227
// ComWalk ( un ) ;
11218: LD_VAR 0 2
11222: PPUSH
11223: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_INT 5
11234: PPUSH
11235: CALL_OW 336
// end ;
11239: PPOPN 3
11241: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11242: LD_EXP 23
11246: PUSH
11247: LD_EXP 41
11251: AND
11252: PUSH
11253: LD_OWVAR 67
11257: PUSH
11258: LD_INT 4
11260: LESS
11261: AND
11262: IFFALSE 11281
11264: GO 11266
11266: DISABLE
// begin Difficulty := Difficulty + 1 ;
11267: LD_ADDR_OWVAR 67
11271: PUSH
11272: LD_OWVAR 67
11276: PUSH
11277: LD_INT 1
11279: PLUS
11280: ST_TO_ADDR
// end ;
11281: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11282: LD_EXP 23
11286: PUSH
11287: LD_EXP 42
11291: AND
11292: IFFALSE 11395
11294: GO 11296
11296: DISABLE
11297: LD_INT 0
11299: PPUSH
// begin for i := 1 to 5 do
11300: LD_ADDR_VAR 0 1
11304: PUSH
11305: DOUBLE
11306: LD_INT 1
11308: DEC
11309: ST_TO_ADDR
11310: LD_INT 5
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11393
// begin uc_nation := nation_nature ;
11316: LD_ADDR_OWVAR 21
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// uc_side := 0 ;
11324: LD_ADDR_OWVAR 20
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11332: LD_ADDR_OWVAR 29
11336: PUSH
11337: LD_INT 12
11339: PUSH
11340: LD_INT 12
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: ST_TO_ADDR
// hc_agressivity := 20 ;
11347: LD_ADDR_OWVAR 35
11351: PUSH
11352: LD_INT 20
11354: ST_TO_ADDR
// hc_class := class_tiger ;
11355: LD_ADDR_OWVAR 28
11359: PUSH
11360: LD_INT 14
11362: ST_TO_ADDR
// hc_gallery :=  ;
11363: LD_ADDR_OWVAR 33
11367: PUSH
11368: LD_STRING 
11370: ST_TO_ADDR
// hc_name :=  ;
11371: LD_ADDR_OWVAR 26
11375: PUSH
11376: LD_STRING 
11378: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11379: CALL_OW 44
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 51
// end ;
11391: GO 11313
11393: POP
11394: POP
// end ;
11395: PPOPN 1
11397: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11398: LD_EXP 23
11402: PUSH
11403: LD_EXP 43
11407: AND
11408: IFFALSE 11417
11410: GO 11412
11412: DISABLE
// StreamSibBomb ;
11413: CALL 11418 0 0
11417: END
// export function StreamSibBomb ; var i , x , y ; begin
11418: LD_INT 0
11420: PPUSH
11421: PPUSH
11422: PPUSH
11423: PPUSH
// result := false ;
11424: LD_ADDR_VAR 0 1
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// for i := 1 to 16 do
11432: LD_ADDR_VAR 0 2
11436: PUSH
11437: DOUBLE
11438: LD_INT 1
11440: DEC
11441: ST_TO_ADDR
11442: LD_INT 16
11444: PUSH
11445: FOR_TO
11446: IFFALSE 11645
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11448: LD_ADDR_VAR 0 3
11452: PUSH
11453: LD_INT 10
11455: PUSH
11456: LD_INT 20
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 40
11464: PUSH
11465: LD_INT 50
11467: PUSH
11468: LD_INT 60
11470: PUSH
11471: LD_INT 70
11473: PUSH
11474: LD_INT 80
11476: PUSH
11477: LD_INT 90
11479: PUSH
11480: LD_INT 100
11482: PUSH
11483: LD_INT 110
11485: PUSH
11486: LD_INT 120
11488: PUSH
11489: LD_INT 130
11491: PUSH
11492: LD_INT 140
11494: PUSH
11495: LD_INT 150
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 1
11517: PPUSH
11518: LD_INT 15
11520: PPUSH
11521: CALL_OW 12
11525: ARRAY
11526: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11527: LD_ADDR_VAR 0 4
11531: PUSH
11532: LD_INT 10
11534: PUSH
11535: LD_INT 20
11537: PUSH
11538: LD_INT 30
11540: PUSH
11541: LD_INT 40
11543: PUSH
11544: LD_INT 50
11546: PUSH
11547: LD_INT 60
11549: PUSH
11550: LD_INT 70
11552: PUSH
11553: LD_INT 80
11555: PUSH
11556: LD_INT 90
11558: PUSH
11559: LD_INT 100
11561: PUSH
11562: LD_INT 110
11564: PUSH
11565: LD_INT 120
11567: PUSH
11568: LD_INT 130
11570: PUSH
11571: LD_INT 140
11573: PUSH
11574: LD_INT 150
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 1
11596: PPUSH
11597: LD_INT 15
11599: PPUSH
11600: CALL_OW 12
11604: ARRAY
11605: ST_TO_ADDR
// if ValidHex ( x , y ) then
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_VAR 0 4
11615: PPUSH
11616: CALL_OW 488
11620: IFFALSE 11643
// begin result := [ x , y ] ;
11622: LD_ADDR_VAR 0 1
11626: PUSH
11627: LD_VAR 0 3
11631: PUSH
11632: LD_VAR 0 4
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: ST_TO_ADDR
// break ;
11641: GO 11645
// end ; end ;
11643: GO 11445
11645: POP
11646: POP
// if result then
11647: LD_VAR 0 1
11651: IFFALSE 11711
// begin ToLua ( playSibBomb() ) ;
11653: LD_STRING playSibBomb()
11655: PPUSH
11656: CALL_OW 559
// wait ( 0 0$14 ) ;
11660: LD_INT 490
11662: PPUSH
11663: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11667: LD_VAR 0 1
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: LD_VAR 0 1
11680: PUSH
11681: LD_INT 2
11683: ARRAY
11684: PPUSH
11685: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11689: LD_VAR 0 1
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_VAR 0 1
11702: PUSH
11703: LD_INT 2
11705: ARRAY
11706: PPUSH
11707: CALL_OW 429
// end ; end ;
11711: LD_VAR 0 1
11715: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11716: LD_EXP 23
11720: PUSH
11721: LD_EXP 45
11725: AND
11726: IFFALSE 11738
11728: GO 11730
11730: DISABLE
// YouLost (  ) ;
11731: LD_STRING 
11733: PPUSH
11734: CALL_OW 104
11738: END
// every 0 0$1 trigger StreamModeActive and sFog do
11739: LD_EXP 23
11743: PUSH
11744: LD_EXP 44
11748: AND
11749: IFFALSE 11763
11751: GO 11753
11753: DISABLE
// FogOff ( your_side ) ;
11754: LD_OWVAR 2
11758: PPUSH
11759: CALL_OW 344
11763: END
// every 0 0$1 trigger StreamModeActive and sSun do
11764: LD_EXP 23
11768: PUSH
11769: LD_EXP 46
11773: AND
11774: IFFALSE 11802
11776: GO 11778
11778: DISABLE
// begin solar_recharge_percent := 0 ;
11779: LD_ADDR_OWVAR 79
11783: PUSH
11784: LD_INT 0
11786: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11787: LD_INT 10500
11789: PPUSH
11790: CALL_OW 67
// solar_recharge_percent := 100 ;
11794: LD_ADDR_OWVAR 79
11798: PUSH
11799: LD_INT 100
11801: ST_TO_ADDR
// end ;
11802: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11803: LD_EXP 23
11807: PUSH
11808: LD_EXP 47
11812: AND
11813: IFFALSE 12052
11815: GO 11817
11817: DISABLE
11818: LD_INT 0
11820: PPUSH
11821: PPUSH
11822: PPUSH
// begin tmp := [ ] ;
11823: LD_ADDR_VAR 0 3
11827: PUSH
11828: EMPTY
11829: ST_TO_ADDR
// for i := 1 to 6 do
11830: LD_ADDR_VAR 0 1
11834: PUSH
11835: DOUBLE
11836: LD_INT 1
11838: DEC
11839: ST_TO_ADDR
11840: LD_INT 6
11842: PUSH
11843: FOR_TO
11844: IFFALSE 11949
// begin uc_nation := nation_nature ;
11846: LD_ADDR_OWVAR 21
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// uc_side := 0 ;
11854: LD_ADDR_OWVAR 20
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11862: LD_ADDR_OWVAR 29
11866: PUSH
11867: LD_INT 12
11869: PUSH
11870: LD_INT 12
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: ST_TO_ADDR
// hc_agressivity := 20 ;
11877: LD_ADDR_OWVAR 35
11881: PUSH
11882: LD_INT 20
11884: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11885: LD_ADDR_OWVAR 28
11889: PUSH
11890: LD_INT 17
11892: ST_TO_ADDR
// hc_gallery :=  ;
11893: LD_ADDR_OWVAR 33
11897: PUSH
11898: LD_STRING 
11900: ST_TO_ADDR
// hc_name :=  ;
11901: LD_ADDR_OWVAR 26
11905: PUSH
11906: LD_STRING 
11908: ST_TO_ADDR
// un := CreateHuman ;
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: CALL_OW 44
11918: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11919: LD_VAR 0 2
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 51
// tmp := tmp ^ un ;
11931: LD_ADDR_VAR 0 3
11935: PUSH
11936: LD_VAR 0 3
11940: PUSH
11941: LD_VAR 0 2
11945: ADD
11946: ST_TO_ADDR
// end ;
11947: GO 11843
11949: POP
11950: POP
// repeat wait ( 0 0$1 ) ;
11951: LD_INT 35
11953: PPUSH
11954: CALL_OW 67
// for un in tmp do
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: FOR_IN
11969: IFFALSE 12043
// begin if IsDead ( un ) then
11971: LD_VAR 0 2
11975: PPUSH
11976: CALL_OW 301
11980: IFFALSE 12000
// begin tmp := tmp diff un ;
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: LD_VAR 0 3
11991: PUSH
11992: LD_VAR 0 2
11996: DIFF
11997: ST_TO_ADDR
// continue ;
11998: GO 11968
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12000: LD_VAR 0 2
12004: PPUSH
12005: LD_INT 3
12007: PUSH
12008: LD_INT 22
12010: PUSH
12011: LD_INT 0
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 69
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL_OW 74
12036: PPUSH
12037: CALL_OW 115
// end ;
12041: GO 11968
12043: POP
12044: POP
// until not tmp ;
12045: LD_VAR 0 3
12049: NOT
12050: IFFALSE 11951
// end ;
12052: PPOPN 3
12054: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12055: LD_EXP 23
12059: PUSH
12060: LD_EXP 48
12064: AND
12065: IFFALSE 12119
12067: GO 12069
12069: DISABLE
// begin ToLua ( displayTroll(); ) ;
12070: LD_STRING displayTroll();
12072: PPUSH
12073: CALL_OW 559
// wait ( 3 3$00 ) ;
12077: LD_INT 6300
12079: PPUSH
12080: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12084: LD_STRING hideTroll();
12086: PPUSH
12087: CALL_OW 559
// wait ( 1 1$00 ) ;
12091: LD_INT 2100
12093: PPUSH
12094: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12098: LD_STRING displayTroll();
12100: PPUSH
12101: CALL_OW 559
// wait ( 1 1$00 ) ;
12105: LD_INT 2100
12107: PPUSH
12108: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12112: LD_STRING hideTroll();
12114: PPUSH
12115: CALL_OW 559
// end ;
12119: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12120: LD_EXP 23
12124: PUSH
12125: LD_EXP 49
12129: AND
12130: IFFALSE 12193
12132: GO 12134
12134: DISABLE
12135: LD_INT 0
12137: PPUSH
// begin p := 0 ;
12138: LD_ADDR_VAR 0 1
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// repeat game_speed := 1 ;
12146: LD_ADDR_OWVAR 65
12150: PUSH
12151: LD_INT 1
12153: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12154: LD_INT 35
12156: PPUSH
12157: CALL_OW 67
// p := p + 1 ;
12161: LD_ADDR_VAR 0 1
12165: PUSH
12166: LD_VAR 0 1
12170: PUSH
12171: LD_INT 1
12173: PLUS
12174: ST_TO_ADDR
// until p >= 60 ;
12175: LD_VAR 0 1
12179: PUSH
12180: LD_INT 60
12182: GREATEREQUAL
12183: IFFALSE 12146
// game_speed := 4 ;
12185: LD_ADDR_OWVAR 65
12189: PUSH
12190: LD_INT 4
12192: ST_TO_ADDR
// end ;
12193: PPOPN 1
12195: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12196: LD_EXP 23
12200: PUSH
12201: LD_EXP 50
12205: AND
12206: IFFALSE 12352
12208: GO 12210
12210: DISABLE
12211: LD_INT 0
12213: PPUSH
12214: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12215: LD_ADDR_VAR 0 1
12219: PUSH
12220: LD_INT 22
12222: PUSH
12223: LD_OWVAR 2
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: LD_INT 0
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: ST_TO_ADDR
// if not depot then
12269: LD_VAR 0 1
12273: NOT
12274: IFFALSE 12278
// exit ;
12276: GO 12352
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12278: LD_ADDR_VAR 0 2
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 12
12300: ARRAY
12301: PPUSH
12302: CALL_OW 274
12306: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12307: LD_VAR 0 2
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: LD_INT 0
12317: PPUSH
12318: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12322: LD_VAR 0 2
12326: PPUSH
12327: LD_INT 2
12329: PPUSH
12330: LD_INT 0
12332: PPUSH
12333: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12337: LD_VAR 0 2
12341: PPUSH
12342: LD_INT 3
12344: PPUSH
12345: LD_INT 0
12347: PPUSH
12348: CALL_OW 277
// end ;
12352: PPOPN 2
12354: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12355: LD_EXP 23
12359: PUSH
12360: LD_EXP 51
12364: AND
12365: IFFALSE 12462
12367: GO 12369
12369: DISABLE
12370: LD_INT 0
12372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: LD_INT 22
12380: PUSH
12381: LD_OWVAR 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 21
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: LD_INT 23
12405: PUSH
12406: LD_INT 0
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 69
12426: ST_TO_ADDR
// if not tmp then
12427: LD_VAR 0 1
12431: NOT
12432: IFFALSE 12436
// exit ;
12434: GO 12462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12436: LD_VAR 0 1
12440: PUSH
12441: LD_INT 1
12443: PPUSH
12444: LD_VAR 0 1
12448: PPUSH
12449: CALL_OW 12
12453: ARRAY
12454: PPUSH
12455: LD_INT 200
12457: PPUSH
12458: CALL_OW 234
// end ;
12462: PPOPN 1
12464: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12465: LD_EXP 23
12469: PUSH
12470: LD_EXP 52
12474: AND
12475: IFFALSE 12554
12477: GO 12479
12479: DISABLE
12480: LD_INT 0
12482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12483: LD_ADDR_VAR 0 1
12487: PUSH
12488: LD_INT 22
12490: PUSH
12491: LD_OWVAR 2
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 2
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: ST_TO_ADDR
// if not tmp then
12519: LD_VAR 0 1
12523: NOT
12524: IFFALSE 12528
// exit ;
12526: GO 12554
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12528: LD_VAR 0 1
12532: PUSH
12533: LD_INT 1
12535: PPUSH
12536: LD_VAR 0 1
12540: PPUSH
12541: CALL_OW 12
12545: ARRAY
12546: PPUSH
12547: LD_INT 60
12549: PPUSH
12550: CALL_OW 234
// end ;
12554: PPOPN 1
12556: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12557: LD_EXP 23
12561: PUSH
12562: LD_EXP 53
12566: AND
12567: IFFALSE 12666
12569: GO 12571
12571: DISABLE
12572: LD_INT 0
12574: PPUSH
12575: PPUSH
// begin enable ;
12576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12577: LD_ADDR_VAR 0 1
12581: PUSH
12582: LD_INT 22
12584: PUSH
12585: LD_OWVAR 2
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 61
12596: PUSH
12597: EMPTY
12598: LIST
12599: PUSH
12600: LD_INT 33
12602: PUSH
12603: LD_INT 2
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: ST_TO_ADDR
// if not tmp then
12620: LD_VAR 0 1
12624: NOT
12625: IFFALSE 12629
// exit ;
12627: GO 12666
// for i in tmp do
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: LD_VAR 0 1
12638: PUSH
12639: FOR_IN
12640: IFFALSE 12664
// if IsControledBy ( i ) then
12642: LD_VAR 0 2
12646: PPUSH
12647: CALL_OW 312
12651: IFFALSE 12662
// ComUnlink ( i ) ;
12653: LD_VAR 0 2
12657: PPUSH
12658: CALL_OW 136
12662: GO 12639
12664: POP
12665: POP
// end ;
12666: PPOPN 2
12668: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12669: LD_EXP 23
12673: PUSH
12674: LD_EXP 54
12678: AND
12679: IFFALSE 12819
12681: GO 12683
12683: DISABLE
12684: LD_INT 0
12686: PPUSH
12687: PPUSH
// begin ToLua ( displayPowell(); ) ;
12688: LD_STRING displayPowell();
12690: PPUSH
12691: CALL_OW 559
// uc_side := 0 ;
12695: LD_ADDR_OWVAR 20
12699: PUSH
12700: LD_INT 0
12702: ST_TO_ADDR
// uc_nation := 2 ;
12703: LD_ADDR_OWVAR 21
12707: PUSH
12708: LD_INT 2
12710: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12711: LD_ADDR_OWVAR 37
12715: PUSH
12716: LD_INT 14
12718: ST_TO_ADDR
// vc_engine := engine_siberite ;
12719: LD_ADDR_OWVAR 39
12723: PUSH
12724: LD_INT 3
12726: ST_TO_ADDR
// vc_control := control_apeman ;
12727: LD_ADDR_OWVAR 38
12731: PUSH
12732: LD_INT 5
12734: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12735: LD_ADDR_OWVAR 40
12739: PUSH
12740: LD_INT 29
12742: ST_TO_ADDR
// un := CreateVehicle ;
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: CALL_OW 45
12752: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12753: LD_VAR 0 2
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12765: LD_INT 35
12767: PPUSH
12768: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12772: LD_VAR 0 2
12776: PPUSH
12777: LD_INT 22
12779: PUSH
12780: LD_OWVAR 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 69
12793: PPUSH
12794: LD_VAR 0 2
12798: PPUSH
12799: CALL_OW 74
12803: PPUSH
12804: CALL_OW 115
// until IsDead ( un ) ;
12808: LD_VAR 0 2
12812: PPUSH
12813: CALL_OW 301
12817: IFFALSE 12765
// end ;
12819: PPOPN 2
12821: END
// every 0 0$1 trigger StreamModeActive and sStu do
12822: LD_EXP 23
12826: PUSH
12827: LD_EXP 62
12831: AND
12832: IFFALSE 12848
12834: GO 12836
12836: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12837: LD_STRING displayStucuk();
12839: PPUSH
12840: CALL_OW 559
// ResetFog ;
12844: CALL_OW 335
// end ;
12848: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12849: LD_EXP 23
12853: PUSH
12854: LD_EXP 55
12858: AND
12859: IFFALSE 13000
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12868: LD_ADDR_VAR 0 2
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_OWVAR 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 69
12903: ST_TO_ADDR
// if not tmp then
12904: LD_VAR 0 2
12908: NOT
12909: IFFALSE 12913
// exit ;
12911: GO 13000
// un := tmp [ rand ( 1 , tmp ) ] ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_VAR 0 2
12922: PUSH
12923: LD_INT 1
12925: PPUSH
12926: LD_VAR 0 2
12930: PPUSH
12931: CALL_OW 12
12935: ARRAY
12936: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12937: LD_VAR 0 1
12941: PPUSH
12942: LD_INT 0
12944: PPUSH
12945: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12949: LD_VAR 0 1
12953: PPUSH
12954: LD_OWVAR 3
12958: PUSH
12959: LD_VAR 0 1
12963: DIFF
12964: PPUSH
12965: LD_VAR 0 1
12969: PPUSH
12970: CALL_OW 74
12974: PPUSH
12975: CALL_OW 115
// wait ( 0 0$20 ) ;
12979: LD_INT 700
12981: PPUSH
12982: CALL_OW 67
// SetSide ( un , your_side ) ;
12986: LD_VAR 0 1
12990: PPUSH
12991: LD_OWVAR 2
12995: PPUSH
12996: CALL_OW 235
// end ;
13000: PPOPN 2
13002: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13003: LD_EXP 23
13007: PUSH
13008: LD_EXP 56
13012: AND
13013: IFFALSE 13119
13015: GO 13017
13017: DISABLE
13018: LD_INT 0
13020: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13021: LD_ADDR_VAR 0 1
13025: PUSH
13026: LD_INT 22
13028: PUSH
13029: LD_OWVAR 2
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 2
13040: PUSH
13041: LD_INT 30
13043: PUSH
13044: LD_INT 0
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PPUSH
13070: CALL_OW 69
13074: ST_TO_ADDR
// if not depot then
13075: LD_VAR 0 1
13079: NOT
13080: IFFALSE 13084
// exit ;
13082: GO 13119
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13084: LD_VAR 0 1
13088: PUSH
13089: LD_INT 1
13091: ARRAY
13092: PPUSH
13093: CALL_OW 250
13097: PPUSH
13098: LD_VAR 0 1
13102: PUSH
13103: LD_INT 1
13105: ARRAY
13106: PPUSH
13107: CALL_OW 251
13111: PPUSH
13112: LD_INT 70
13114: PPUSH
13115: CALL_OW 495
// end ;
13119: PPOPN 1
13121: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13122: LD_EXP 23
13126: PUSH
13127: LD_EXP 57
13131: AND
13132: IFFALSE 13343
13134: GO 13136
13136: DISABLE
13137: LD_INT 0
13139: PPUSH
13140: PPUSH
13141: PPUSH
13142: PPUSH
13143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13144: LD_ADDR_VAR 0 5
13148: PUSH
13149: LD_INT 22
13151: PUSH
13152: LD_OWVAR 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PPUSH
13175: CALL_OW 69
13179: ST_TO_ADDR
// if not tmp then
13180: LD_VAR 0 5
13184: NOT
13185: IFFALSE 13189
// exit ;
13187: GO 13343
// for i in tmp do
13189: LD_ADDR_VAR 0 1
13193: PUSH
13194: LD_VAR 0 5
13198: PUSH
13199: FOR_IN
13200: IFFALSE 13341
// begin d := rand ( 0 , 5 ) ;
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_INT 0
13209: PPUSH
13210: LD_INT 5
13212: PPUSH
13213: CALL_OW 12
13217: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_VAR 0 1
13227: PPUSH
13228: CALL_OW 250
13232: PPUSH
13233: LD_VAR 0 4
13237: PPUSH
13238: LD_INT 3
13240: PPUSH
13241: LD_INT 12
13243: PPUSH
13244: CALL_OW 12
13248: PPUSH
13249: CALL_OW 272
13253: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13254: LD_ADDR_VAR 0 3
13258: PUSH
13259: LD_VAR 0 1
13263: PPUSH
13264: CALL_OW 251
13268: PPUSH
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_INT 3
13276: PPUSH
13277: LD_INT 12
13279: PPUSH
13280: CALL_OW 12
13284: PPUSH
13285: CALL_OW 273
13289: ST_TO_ADDR
// if ValidHex ( x , y ) then
13290: LD_VAR 0 2
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: CALL_OW 488
13304: IFFALSE 13339
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13306: LD_VAR 0 1
13310: PPUSH
13311: LD_VAR 0 2
13315: PPUSH
13316: LD_VAR 0 3
13320: PPUSH
13321: LD_INT 3
13323: PPUSH
13324: LD_INT 6
13326: PPUSH
13327: CALL_OW 12
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL_OW 483
// end ;
13339: GO 13199
13341: POP
13342: POP
// end ;
13343: PPOPN 5
13345: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13346: LD_EXP 23
13350: PUSH
13351: LD_EXP 58
13355: AND
13356: IFFALSE 13450
13358: GO 13360
13360: DISABLE
13361: LD_INT 0
13363: PPUSH
13364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13365: LD_ADDR_VAR 0 2
13369: PUSH
13370: LD_INT 22
13372: PUSH
13373: LD_OWVAR 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 21
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: ST_TO_ADDR
// if not tmp then
13412: LD_VAR 0 2
13416: NOT
13417: IFFALSE 13421
// exit ;
13419: GO 13450
// for i in tmp do
13421: LD_ADDR_VAR 0 1
13425: PUSH
13426: LD_VAR 0 2
13430: PUSH
13431: FOR_IN
13432: IFFALSE 13448
// SetFuel ( i , 0 ) ;
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_INT 0
13441: PPUSH
13442: CALL_OW 240
13446: GO 13431
13448: POP
13449: POP
// end ;
13450: PPOPN 2
13452: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13453: LD_EXP 23
13457: PUSH
13458: LD_EXP 59
13462: AND
13463: IFFALSE 13529
13465: GO 13467
13467: DISABLE
13468: LD_INT 0
13470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_OWVAR 2
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 30
13490: PUSH
13491: LD_INT 29
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: ST_TO_ADDR
// if not tmp then
13507: LD_VAR 0 1
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13529
// DestroyUnit ( tmp [ 1 ] ) ;
13516: LD_VAR 0 1
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: CALL_OW 65
// end ;
13529: PPOPN 1
13531: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13532: LD_EXP 23
13536: PUSH
13537: LD_EXP 61
13541: AND
13542: IFFALSE 13671
13544: GO 13546
13546: DISABLE
13547: LD_INT 0
13549: PPUSH
// begin uc_side := 0 ;
13550: LD_ADDR_OWVAR 20
13554: PUSH
13555: LD_INT 0
13557: ST_TO_ADDR
// uc_nation := nation_arabian ;
13558: LD_ADDR_OWVAR 21
13562: PUSH
13563: LD_INT 2
13565: ST_TO_ADDR
// hc_gallery :=  ;
13566: LD_ADDR_OWVAR 33
13570: PUSH
13571: LD_STRING 
13573: ST_TO_ADDR
// hc_name :=  ;
13574: LD_ADDR_OWVAR 26
13578: PUSH
13579: LD_STRING 
13581: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13582: LD_INT 1
13584: PPUSH
13585: LD_INT 11
13587: PPUSH
13588: LD_INT 10
13590: PPUSH
13591: CALL_OW 380
// un := CreateHuman ;
13595: LD_ADDR_VAR 0 1
13599: PUSH
13600: CALL_OW 44
13604: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13605: LD_VAR 0 1
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13617: LD_INT 35
13619: PPUSH
13620: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_INT 22
13631: PUSH
13632: LD_OWVAR 2
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: PPUSH
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 74
13655: PPUSH
13656: CALL_OW 115
// until IsDead ( un ) ;
13660: LD_VAR 0 1
13664: PPUSH
13665: CALL_OW 301
13669: IFFALSE 13617
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13674: LD_EXP 23
13678: PUSH
13679: LD_EXP 63
13683: AND
13684: IFFALSE 13696
13686: GO 13688
13688: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13689: LD_STRING earthquake(getX(game), 0, 32)
13691: PPUSH
13692: CALL_OW 559
13696: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13697: LD_EXP 23
13701: PUSH
13702: LD_EXP 64
13706: AND
13707: IFFALSE 13798
13709: GO 13711
13711: DISABLE
13712: LD_INT 0
13714: PPUSH
// begin enable ;
13715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_OWVAR 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 33
13745: PUSH
13746: LD_INT 3
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not tmp then
13763: LD_VAR 0 1
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13772: LD_VAR 0 1
13776: PUSH
13777: LD_INT 1
13779: PPUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: CALL_OW 12
13789: ARRAY
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 234
// end ;
13798: PPOPN 1
13800: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13801: LD_EXP 23
13805: PUSH
13806: LD_EXP 65
13810: AND
13811: IFFALSE 13952
13813: GO 13815
13815: DISABLE
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13821: LD_ADDR_VAR 0 3
13825: PUSH
13826: LD_INT 22
13828: PUSH
13829: LD_OWVAR 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 25
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 69
13856: ST_TO_ADDR
// if not tmp then
13857: LD_VAR 0 3
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13952
// un := tmp [ rand ( 1 , tmp ) ] ;
13866: LD_ADDR_VAR 0 2
13870: PUSH
13871: LD_VAR 0 3
13875: PUSH
13876: LD_INT 1
13878: PPUSH
13879: LD_VAR 0 3
13883: PPUSH
13884: CALL_OW 12
13888: ARRAY
13889: ST_TO_ADDR
// if Crawls ( un ) then
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 318
13899: IFFALSE 13910
// ComWalk ( un ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_INT 9
13917: PPUSH
13918: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13922: LD_INT 28
13924: PPUSH
13925: LD_OWVAR 2
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13937: LD_INT 29
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: LD_INT 2
13947: PPUSH
13948: CALL_OW 322
// end ;
13952: PPOPN 3
13954: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13955: LD_EXP 23
13959: PUSH
13960: LD_EXP 66
13964: AND
13965: IFFALSE 14076
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
13973: PPUSH
13974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13975: LD_ADDR_VAR 0 3
13979: PUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: ST_TO_ADDR
// if not tmp then
14011: LD_VAR 0 3
14015: NOT
14016: IFFALSE 14020
// exit ;
14018: GO 14076
// un := tmp [ rand ( 1 , tmp ) ] ;
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_VAR 0 3
14029: PUSH
14030: LD_INT 1
14032: PPUSH
14033: LD_VAR 0 3
14037: PPUSH
14038: CALL_OW 12
14042: ARRAY
14043: ST_TO_ADDR
// if Crawls ( un ) then
14044: LD_VAR 0 2
14048: PPUSH
14049: CALL_OW 318
14053: IFFALSE 14064
// ComWalk ( un ) ;
14055: LD_VAR 0 2
14059: PPUSH
14060: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14064: LD_VAR 0 2
14068: PPUSH
14069: LD_INT 8
14071: PPUSH
14072: CALL_OW 336
// end ;
14076: PPOPN 3
14078: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14079: LD_EXP 23
14083: PUSH
14084: LD_EXP 67
14088: AND
14089: IFFALSE 14233
14091: GO 14093
14093: DISABLE
14094: LD_INT 0
14096: PPUSH
14097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14098: LD_ADDR_VAR 0 2
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_OWVAR 2
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 21
14117: PUSH
14118: LD_INT 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 34
14130: PUSH
14131: LD_INT 12
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 34
14140: PUSH
14141: LD_INT 51
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 34
14150: PUSH
14151: LD_INT 32
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: ST_TO_ADDR
// if not tmp then
14174: LD_VAR 0 2
14178: NOT
14179: IFFALSE 14183
// exit ;
14181: GO 14233
// for i in tmp do
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: LD_VAR 0 2
14192: PUSH
14193: FOR_IN
14194: IFFALSE 14231
// if GetCargo ( i , mat_artifact ) = 0 then
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_INT 4
14203: PPUSH
14204: CALL_OW 289
14208: PUSH
14209: LD_INT 0
14211: EQUAL
14212: IFFALSE 14229
// SetCargo ( i , mat_siberit , 100 ) ;
14214: LD_VAR 0 1
14218: PPUSH
14219: LD_INT 3
14221: PPUSH
14222: LD_INT 100
14224: PPUSH
14225: CALL_OW 290
14229: GO 14193
14231: POP
14232: POP
// end ;
14233: PPOPN 2
14235: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14236: LD_EXP 23
14240: PUSH
14241: LD_EXP 68
14245: AND
14246: IFFALSE 14429
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14255: LD_ADDR_VAR 0 2
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_OWVAR 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: ST_TO_ADDR
// if not tmp then
14277: LD_VAR 0 2
14281: NOT
14282: IFFALSE 14286
// exit ;
14284: GO 14429
// for i := 1 to 2 do
14286: LD_ADDR_VAR 0 1
14290: PUSH
14291: DOUBLE
14292: LD_INT 1
14294: DEC
14295: ST_TO_ADDR
14296: LD_INT 2
14298: PUSH
14299: FOR_TO
14300: IFFALSE 14427
// begin uc_side := your_side ;
14302: LD_ADDR_OWVAR 20
14306: PUSH
14307: LD_OWVAR 2
14311: ST_TO_ADDR
// uc_nation := nation_american ;
14312: LD_ADDR_OWVAR 21
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// vc_chassis := us_morphling ;
14320: LD_ADDR_OWVAR 37
14324: PUSH
14325: LD_INT 5
14327: ST_TO_ADDR
// vc_engine := engine_siberite ;
14328: LD_ADDR_OWVAR 39
14332: PUSH
14333: LD_INT 3
14335: ST_TO_ADDR
// vc_control := control_computer ;
14336: LD_ADDR_OWVAR 38
14340: PUSH
14341: LD_INT 3
14343: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14344: LD_ADDR_OWVAR 40
14348: PUSH
14349: LD_INT 10
14351: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14352: LD_VAR 0 2
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: CALL_OW 310
14365: NOT
14366: IFFALSE 14413
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14368: CALL_OW 45
14372: PPUSH
14373: LD_VAR 0 2
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: CALL_OW 250
14386: PPUSH
14387: LD_VAR 0 2
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: PPUSH
14396: CALL_OW 251
14400: PPUSH
14401: LD_INT 12
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 50
14411: GO 14425
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14413: CALL_OW 45
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 51
// end ;
14425: GO 14299
14427: POP
14428: POP
// end ;
14429: PPOPN 2
14431: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14432: LD_EXP 23
14436: PUSH
14437: LD_EXP 69
14441: AND
14442: IFFALSE 14664
14444: GO 14446
14446: DISABLE
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14455: LD_ADDR_VAR 0 6
14459: PUSH
14460: LD_INT 22
14462: PUSH
14463: LD_OWVAR 2
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 21
14474: PUSH
14475: LD_INT 1
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 3
14484: PUSH
14485: LD_INT 23
14487: PUSH
14488: LD_INT 0
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: PPUSH
14504: CALL_OW 69
14508: ST_TO_ADDR
// if not tmp then
14509: LD_VAR 0 6
14513: NOT
14514: IFFALSE 14518
// exit ;
14516: GO 14664
// s1 := rand ( 1 , 4 ) ;
14518: LD_ADDR_VAR 0 2
14522: PUSH
14523: LD_INT 1
14525: PPUSH
14526: LD_INT 4
14528: PPUSH
14529: CALL_OW 12
14533: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14534: LD_ADDR_VAR 0 4
14538: PUSH
14539: LD_VAR 0 6
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: PPUSH
14548: LD_VAR 0 2
14552: PPUSH
14553: CALL_OW 259
14557: ST_TO_ADDR
// if s1 = 1 then
14558: LD_VAR 0 2
14562: PUSH
14563: LD_INT 1
14565: EQUAL
14566: IFFALSE 14586
// s2 := rand ( 2 , 4 ) else
14568: LD_ADDR_VAR 0 3
14572: PUSH
14573: LD_INT 2
14575: PPUSH
14576: LD_INT 4
14578: PPUSH
14579: CALL_OW 12
14583: ST_TO_ADDR
14584: GO 14594
// s2 := 1 ;
14586: LD_ADDR_VAR 0 3
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14594: LD_ADDR_VAR 0 5
14598: PUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: CALL_OW 259
14617: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14618: LD_VAR 0 6
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_VAR 0 2
14631: PPUSH
14632: LD_VAR 0 5
14636: PPUSH
14637: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14641: LD_VAR 0 6
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_VAR 0 4
14659: PPUSH
14660: CALL_OW 237
// end ;
14664: PPOPN 6
14666: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14667: LD_EXP 23
14671: PUSH
14672: LD_EXP 70
14676: AND
14677: IFFALSE 14756
14679: GO 14681
14681: DISABLE
14682: LD_INT 0
14684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14685: LD_ADDR_VAR 0 1
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 69
14720: ST_TO_ADDR
// if not tmp then
14721: LD_VAR 0 1
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14730: LD_VAR 0 1
14734: PUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: PPUSH
14749: LD_INT 1
14751: PPUSH
14752: CALL_OW 234
// end ;
14756: PPOPN 1
14758: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14759: LD_EXP 23
14763: PUSH
14764: LD_EXP 71
14768: AND
14769: IFFALSE 14881
14771: GO 14773
14773: DISABLE
14774: LD_INT 0
14776: PPUSH
14777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14778: LD_ADDR_VAR 0 2
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_OWVAR 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 30
14800: PUSH
14801: LD_INT 27
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 30
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 30
14820: PUSH
14821: LD_INT 28
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: ST_TO_ADDR
// if not tmp then
14843: LD_VAR 0 2
14847: NOT
14848: IFFALSE 14852
// exit ;
14850: GO 14881
// for i in tmp do
14852: LD_ADDR_VAR 0 1
14856: PUSH
14857: LD_VAR 0 2
14861: PUSH
14862: FOR_IN
14863: IFFALSE 14879
// SetLives ( i , 1 ) ;
14865: LD_VAR 0 1
14869: PPUSH
14870: LD_INT 1
14872: PPUSH
14873: CALL_OW 234
14877: GO 14862
14879: POP
14880: POP
// end ;
14881: PPOPN 2
14883: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14884: LD_EXP 23
14888: PUSH
14889: LD_EXP 72
14893: AND
14894: IFFALSE 15181
14896: GO 14898
14898: DISABLE
14899: LD_INT 0
14901: PPUSH
14902: PPUSH
14903: PPUSH
// begin i := rand ( 1 , 7 ) ;
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_INT 1
14911: PPUSH
14912: LD_INT 7
14914: PPUSH
14915: CALL_OW 12
14919: ST_TO_ADDR
// case i of 1 :
14920: LD_VAR 0 1
14924: PUSH
14925: LD_INT 1
14927: DOUBLE
14928: EQUAL
14929: IFTRUE 14933
14931: GO 14943
14933: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14934: LD_STRING earthquake(getX(game), 0, 32)
14936: PPUSH
14937: CALL_OW 559
14941: GO 15181
14943: LD_INT 2
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 14965
14951: POP
// begin ToLua ( displayStucuk(); ) ;
14952: LD_STRING displayStucuk();
14954: PPUSH
14955: CALL_OW 559
// ResetFog ;
14959: CALL_OW 335
// end ; 3 :
14963: GO 15181
14965: LD_INT 3
14967: DOUBLE
14968: EQUAL
14969: IFTRUE 14973
14971: GO 15077
14973: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 22
14981: PUSH
14982: LD_OWVAR 2
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 25
14993: PUSH
14994: LD_INT 1
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 69
15009: ST_TO_ADDR
// if not tmp then
15010: LD_VAR 0 2
15014: NOT
15015: IFFALSE 15019
// exit ;
15017: GO 15181
// un := tmp [ rand ( 1 , tmp ) ] ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: LD_VAR 0 2
15028: PUSH
15029: LD_INT 1
15031: PPUSH
15032: LD_VAR 0 2
15036: PPUSH
15037: CALL_OW 12
15041: ARRAY
15042: ST_TO_ADDR
// if Crawls ( un ) then
15043: LD_VAR 0 3
15047: PPUSH
15048: CALL_OW 318
15052: IFFALSE 15063
// ComWalk ( un ) ;
15054: LD_VAR 0 3
15058: PPUSH
15059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15063: LD_VAR 0 3
15067: PPUSH
15068: LD_INT 8
15070: PPUSH
15071: CALL_OW 336
// end ; 4 :
15075: GO 15181
15077: LD_INT 4
15079: DOUBLE
15080: EQUAL
15081: IFTRUE 15085
15083: GO 15159
15085: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15086: LD_ADDR_VAR 0 2
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_OWVAR 2
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 29
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// if not tmp then
15122: LD_VAR 0 2
15126: NOT
15127: IFFALSE 15131
// exit ;
15129: GO 15181
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15144: LD_VAR 0 2
15148: PUSH
15149: LD_INT 1
15151: ARRAY
15152: PPUSH
15153: CALL_OW 65
// end ; 5 .. 7 :
15157: GO 15181
15159: LD_INT 5
15161: DOUBLE
15162: GREATEREQUAL
15163: IFFALSE 15171
15165: LD_INT 7
15167: DOUBLE
15168: LESSEQUAL
15169: IFTRUE 15173
15171: GO 15180
15173: POP
// StreamSibBomb ; end ;
15174: CALL 11418 0 0
15178: GO 15181
15180: POP
// end ;
15181: PPOPN 3
15183: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15184: LD_EXP 23
15188: PUSH
15189: LD_EXP 73
15193: AND
15194: IFFALSE 15350
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
15203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_INT 81
15211: PUSH
15212: LD_OWVAR 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 21
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PPUSH
15253: CALL_OW 69
15257: ST_TO_ADDR
// if not tmp then
15258: LD_VAR 0 2
15262: NOT
15263: IFFALSE 15267
// exit ;
15265: GO 15350
// p := 0 ;
15267: LD_ADDR_VAR 0 3
15271: PUSH
15272: LD_INT 0
15274: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15275: LD_INT 35
15277: PPUSH
15278: CALL_OW 67
// p := p + 1 ;
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 1
15294: PLUS
15295: ST_TO_ADDR
// for i in tmp do
15296: LD_ADDR_VAR 0 1
15300: PUSH
15301: LD_VAR 0 2
15305: PUSH
15306: FOR_IN
15307: IFFALSE 15338
// if GetLives ( i ) < 1000 then
15309: LD_VAR 0 1
15313: PPUSH
15314: CALL_OW 256
15318: PUSH
15319: LD_INT 1000
15321: LESS
15322: IFFALSE 15336
// SetLives ( i , 1000 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 1000
15331: PPUSH
15332: CALL_OW 234
15336: GO 15306
15338: POP
15339: POP
// until p > 20 ;
15340: LD_VAR 0 3
15344: PUSH
15345: LD_INT 20
15347: GREATER
15348: IFFALSE 15275
// end ;
15350: PPOPN 3
15352: END
// every 0 0$1 trigger StreamModeActive and sTime do
15353: LD_EXP 23
15357: PUSH
15358: LD_EXP 74
15362: AND
15363: IFFALSE 15398
15365: GO 15367
15367: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15368: LD_INT 28
15370: PPUSH
15371: LD_OWVAR 2
15375: PPUSH
15376: LD_INT 2
15378: PPUSH
15379: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15383: LD_INT 30
15385: PPUSH
15386: LD_OWVAR 2
15390: PPUSH
15391: LD_INT 2
15393: PPUSH
15394: CALL_OW 322
// end ;
15398: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15399: LD_EXP 23
15403: PUSH
15404: LD_EXP 75
15408: AND
15409: IFFALSE 15530
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
15417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15418: LD_ADDR_VAR 0 2
15422: PUSH
15423: LD_INT 22
15425: PUSH
15426: LD_OWVAR 2
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 21
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: LD_INT 23
15450: PUSH
15451: LD_INT 0
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: ST_TO_ADDR
// if not tmp then
15472: LD_VAR 0 2
15476: NOT
15477: IFFALSE 15481
// exit ;
15479: GO 15530
// for i in tmp do
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: LD_VAR 0 2
15490: PUSH
15491: FOR_IN
15492: IFFALSE 15528
// begin if Crawls ( i ) then
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 318
15503: IFFALSE 15514
// ComWalk ( i ) ;
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 138
// SetClass ( i , 2 ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 2
15521: PPUSH
15522: CALL_OW 336
// end ;
15526: GO 15491
15528: POP
15529: POP
// end ;
15530: PPOPN 2
15532: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15533: LD_EXP 23
15537: PUSH
15538: LD_EXP 76
15542: AND
15543: IFFALSE 15831
15545: GO 15547
15547: DISABLE
15548: LD_INT 0
15550: PPUSH
15551: PPUSH
15552: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15553: LD_OWVAR 2
15557: PPUSH
15558: LD_INT 9
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: LD_INT 1
15566: PPUSH
15567: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15571: LD_INT 9
15573: PPUSH
15574: LD_OWVAR 2
15578: PPUSH
15579: CALL_OW 343
// uc_side := 9 ;
15583: LD_ADDR_OWVAR 20
15587: PUSH
15588: LD_INT 9
15590: ST_TO_ADDR
// uc_nation := 2 ;
15591: LD_ADDR_OWVAR 21
15595: PUSH
15596: LD_INT 2
15598: ST_TO_ADDR
// hc_name := Dark Warrior ;
15599: LD_ADDR_OWVAR 26
15603: PUSH
15604: LD_STRING Dark Warrior
15606: ST_TO_ADDR
// hc_gallery :=  ;
15607: LD_ADDR_OWVAR 33
15611: PUSH
15612: LD_STRING 
15614: ST_TO_ADDR
// hc_noskilllimit := true ;
15615: LD_ADDR_OWVAR 76
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15623: LD_ADDR_OWVAR 31
15627: PUSH
15628: LD_INT 30
15630: PUSH
15631: LD_INT 30
15633: PUSH
15634: LD_INT 30
15636: PUSH
15637: LD_INT 30
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: ST_TO_ADDR
// un := CreateHuman ;
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: CALL_OW 44
15655: ST_TO_ADDR
// hc_noskilllimit := false ;
15656: LD_ADDR_OWVAR 76
15660: PUSH
15661: LD_INT 0
15663: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15664: LD_VAR 0 3
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 51
// ToLua ( playRanger() ) ;
15676: LD_STRING playRanger()
15678: PPUSH
15679: CALL_OW 559
// p := 0 ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15691: LD_INT 35
15693: PPUSH
15694: CALL_OW 67
// p := p + 1 ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 1
15710: PLUS
15711: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15712: LD_VAR 0 3
15716: PPUSH
15717: CALL_OW 256
15721: PUSH
15722: LD_INT 1000
15724: LESS
15725: IFFALSE 15739
// SetLives ( un , 1000 ) ;
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_INT 1000
15734: PPUSH
15735: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 81
15746: PUSH
15747: LD_OWVAR 2
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 91
15758: PUSH
15759: LD_VAR 0 3
15763: PUSH
15764: LD_INT 30
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PPUSH
15776: CALL_OW 69
15780: PPUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: CALL_OW 74
15790: PPUSH
15791: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15795: LD_VAR 0 2
15799: PUSH
15800: LD_INT 80
15802: GREATER
15803: PUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: CALL_OW 301
15813: OR
15814: IFFALSE 15691
// if un then
15816: LD_VAR 0 3
15820: IFFALSE 15831
// RemoveUnit ( un ) ;
15822: LD_VAR 0 3
15826: PPUSH
15827: CALL_OW 64
// end ;
15831: PPOPN 3
15833: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15834: LD_EXP 77
15838: IFFALSE 15954
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
15847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_INT 81
15855: PUSH
15856: LD_OWVAR 2
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 21
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PPUSH
15879: CALL_OW 69
15883: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15884: LD_STRING playComputer()
15886: PPUSH
15887: CALL_OW 559
// if not tmp then
15891: LD_VAR 0 2
15895: NOT
15896: IFFALSE 15900
// exit ;
15898: GO 15954
// for i in tmp do
15900: LD_ADDR_VAR 0 1
15904: PUSH
15905: LD_VAR 0 2
15909: PUSH
15910: FOR_IN
15911: IFFALSE 15952
// for j := 1 to 4 do
15913: LD_ADDR_VAR 0 3
15917: PUSH
15918: DOUBLE
15919: LD_INT 1
15921: DEC
15922: ST_TO_ADDR
15923: LD_INT 4
15925: PUSH
15926: FOR_TO
15927: IFFALSE 15948
// SetSkill ( i , j , 10 ) ;
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 10
15941: PPUSH
15942: CALL_OW 237
15946: GO 15926
15948: POP
15949: POP
15950: GO 15910
15952: POP
15953: POP
// end ;
15954: PPOPN 3
15956: END
// every 0 0$1 trigger s30 do var i , tmp ;
15957: LD_EXP 78
15961: IFFALSE 16030
15963: GO 15965
15965: DISABLE
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15970: LD_ADDR_VAR 0 2
15974: PUSH
15975: LD_INT 22
15977: PUSH
15978: LD_OWVAR 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 69
15991: ST_TO_ADDR
// if not tmp then
15992: LD_VAR 0 2
15996: NOT
15997: IFFALSE 16001
// exit ;
15999: GO 16030
// for i in tmp do
16001: LD_ADDR_VAR 0 1
16005: PUSH
16006: LD_VAR 0 2
16010: PUSH
16011: FOR_IN
16012: IFFALSE 16028
// SetLives ( i , 300 ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_INT 300
16021: PPUSH
16022: CALL_OW 234
16026: GO 16011
16028: POP
16029: POP
// end ;
16030: PPOPN 2
16032: END
// every 0 0$1 trigger s60 do var i , tmp ;
16033: LD_EXP 79
16037: IFFALSE 16106
16039: GO 16041
16041: DISABLE
16042: LD_INT 0
16044: PPUSH
16045: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16046: LD_ADDR_VAR 0 2
16050: PUSH
16051: LD_INT 22
16053: PUSH
16054: LD_OWVAR 2
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PPUSH
16063: CALL_OW 69
16067: ST_TO_ADDR
// if not tmp then
16068: LD_VAR 0 2
16072: NOT
16073: IFFALSE 16077
// exit ;
16075: GO 16106
// for i in tmp do
16077: LD_ADDR_VAR 0 1
16081: PUSH
16082: LD_VAR 0 2
16086: PUSH
16087: FOR_IN
16088: IFFALSE 16104
// SetLives ( i , 600 ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: LD_INT 600
16097: PPUSH
16098: CALL_OW 234
16102: GO 16087
16104: POP
16105: POP
// end ;
16106: PPOPN 2
16108: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16109: LD_INT 0
16111: PPUSH
// case cmd of 301 :
16112: LD_VAR 0 1
16116: PUSH
16117: LD_INT 301
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16157
16125: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16126: LD_VAR 0 6
16130: PPUSH
16131: LD_VAR 0 7
16135: PPUSH
16136: LD_VAR 0 8
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: LD_VAR 0 5
16150: PPUSH
16151: CALL 17358 0 5
16155: GO 16278
16157: LD_INT 302
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16202
16165: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16166: LD_VAR 0 6
16170: PPUSH
16171: LD_VAR 0 7
16175: PPUSH
16176: LD_VAR 0 8
16180: PPUSH
16181: LD_VAR 0 9
16185: PPUSH
16186: LD_VAR 0 4
16190: PPUSH
16191: LD_VAR 0 5
16195: PPUSH
16196: CALL 17449 0 6
16200: GO 16278
16202: LD_INT 303
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16247
16210: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16211: LD_VAR 0 6
16215: PPUSH
16216: LD_VAR 0 7
16220: PPUSH
16221: LD_VAR 0 8
16225: PPUSH
16226: LD_VAR 0 9
16230: PPUSH
16231: LD_VAR 0 4
16235: PPUSH
16236: LD_VAR 0 5
16240: PPUSH
16241: CALL 16283 0 6
16245: GO 16278
16247: LD_INT 304
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16277
16255: POP
// hHackTeleport ( unit , x , y ) ; end ;
16256: LD_VAR 0 2
16260: PPUSH
16261: LD_VAR 0 4
16265: PPUSH
16266: LD_VAR 0 5
16270: PPUSH
16271: CALL 18042 0 3
16275: GO 16278
16277: POP
// end ;
16278: LD_VAR 0 12
16282: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16283: LD_INT 0
16285: PPUSH
16286: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16287: LD_VAR 0 1
16291: PUSH
16292: LD_INT 1
16294: LESS
16295: PUSH
16296: LD_VAR 0 1
16300: PUSH
16301: LD_INT 3
16303: GREATER
16304: OR
16305: PUSH
16306: LD_VAR 0 5
16310: PPUSH
16311: LD_VAR 0 6
16315: PPUSH
16316: CALL_OW 428
16320: OR
16321: IFFALSE 16325
// exit ;
16323: GO 17045
// uc_side := your_side ;
16325: LD_ADDR_OWVAR 20
16329: PUSH
16330: LD_OWVAR 2
16334: ST_TO_ADDR
// uc_nation := nation ;
16335: LD_ADDR_OWVAR 21
16339: PUSH
16340: LD_VAR 0 1
16344: ST_TO_ADDR
// bc_level = 1 ;
16345: LD_ADDR_OWVAR 43
16349: PUSH
16350: LD_INT 1
16352: ST_TO_ADDR
// case btype of 1 :
16353: LD_VAR 0 2
16357: PUSH
16358: LD_INT 1
16360: DOUBLE
16361: EQUAL
16362: IFTRUE 16366
16364: GO 16377
16366: POP
// bc_type := b_depot ; 2 :
16367: LD_ADDR_OWVAR 42
16371: PUSH
16372: LD_INT 0
16374: ST_TO_ADDR
16375: GO 16989
16377: LD_INT 2
16379: DOUBLE
16380: EQUAL
16381: IFTRUE 16385
16383: GO 16396
16385: POP
// bc_type := b_warehouse ; 3 :
16386: LD_ADDR_OWVAR 42
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
16394: GO 16989
16396: LD_INT 3
16398: DOUBLE
16399: EQUAL
16400: IFTRUE 16404
16402: GO 16415
16404: POP
// bc_type := b_lab ; 4 .. 9 :
16405: LD_ADDR_OWVAR 42
16409: PUSH
16410: LD_INT 6
16412: ST_TO_ADDR
16413: GO 16989
16415: LD_INT 4
16417: DOUBLE
16418: GREATEREQUAL
16419: IFFALSE 16427
16421: LD_INT 9
16423: DOUBLE
16424: LESSEQUAL
16425: IFTRUE 16429
16427: GO 16481
16429: POP
// begin bc_type := b_lab_half ;
16430: LD_ADDR_OWVAR 42
16434: PUSH
16435: LD_INT 7
16437: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16438: LD_ADDR_OWVAR 44
16442: PUSH
16443: LD_INT 10
16445: PUSH
16446: LD_INT 11
16448: PUSH
16449: LD_INT 12
16451: PUSH
16452: LD_INT 15
16454: PUSH
16455: LD_INT 14
16457: PUSH
16458: LD_INT 13
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: LD_VAR 0 2
16473: PUSH
16474: LD_INT 3
16476: MINUS
16477: ARRAY
16478: ST_TO_ADDR
// end ; 10 .. 13 :
16479: GO 16989
16481: LD_INT 10
16483: DOUBLE
16484: GREATEREQUAL
16485: IFFALSE 16493
16487: LD_INT 13
16489: DOUBLE
16490: LESSEQUAL
16491: IFTRUE 16495
16493: GO 16572
16495: POP
// begin bc_type := b_lab_full ;
16496: LD_ADDR_OWVAR 42
16500: PUSH
16501: LD_INT 8
16503: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16504: LD_ADDR_OWVAR 44
16508: PUSH
16509: LD_INT 10
16511: PUSH
16512: LD_INT 12
16514: PUSH
16515: LD_INT 14
16517: PUSH
16518: LD_INT 13
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: LD_INT 9
16534: MINUS
16535: ARRAY
16536: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16537: LD_ADDR_OWVAR 45
16541: PUSH
16542: LD_INT 11
16544: PUSH
16545: LD_INT 15
16547: PUSH
16548: LD_INT 12
16550: PUSH
16551: LD_INT 15
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: LD_INT 9
16567: MINUS
16568: ARRAY
16569: ST_TO_ADDR
// end ; 14 :
16570: GO 16989
16572: LD_INT 14
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16591
16580: POP
// bc_type := b_workshop ; 15 :
16581: LD_ADDR_OWVAR 42
16585: PUSH
16586: LD_INT 2
16588: ST_TO_ADDR
16589: GO 16989
16591: LD_INT 15
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16610
16599: POP
// bc_type := b_factory ; 16 :
16600: LD_ADDR_OWVAR 42
16604: PUSH
16605: LD_INT 3
16607: ST_TO_ADDR
16608: GO 16989
16610: LD_INT 16
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16629
16618: POP
// bc_type := b_ext_gun ; 17 :
16619: LD_ADDR_OWVAR 42
16623: PUSH
16624: LD_INT 17
16626: ST_TO_ADDR
16627: GO 16989
16629: LD_INT 17
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16665
16637: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16638: LD_ADDR_OWVAR 42
16642: PUSH
16643: LD_INT 19
16645: PUSH
16646: LD_INT 23
16648: PUSH
16649: LD_INT 19
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_VAR 0 1
16661: ARRAY
16662: ST_TO_ADDR
16663: GO 16989
16665: LD_INT 18
16667: DOUBLE
16668: EQUAL
16669: IFTRUE 16673
16671: GO 16684
16673: POP
// bc_type := b_ext_radar ; 19 :
16674: LD_ADDR_OWVAR 42
16678: PUSH
16679: LD_INT 20
16681: ST_TO_ADDR
16682: GO 16989
16684: LD_INT 19
16686: DOUBLE
16687: EQUAL
16688: IFTRUE 16692
16690: GO 16703
16692: POP
// bc_type := b_ext_radio ; 20 :
16693: LD_ADDR_OWVAR 42
16697: PUSH
16698: LD_INT 22
16700: ST_TO_ADDR
16701: GO 16989
16703: LD_INT 20
16705: DOUBLE
16706: EQUAL
16707: IFTRUE 16711
16709: GO 16722
16711: POP
// bc_type := b_ext_siberium ; 21 :
16712: LD_ADDR_OWVAR 42
16716: PUSH
16717: LD_INT 21
16719: ST_TO_ADDR
16720: GO 16989
16722: LD_INT 21
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16741
16730: POP
// bc_type := b_ext_computer ; 22 :
16731: LD_ADDR_OWVAR 42
16735: PUSH
16736: LD_INT 24
16738: ST_TO_ADDR
16739: GO 16989
16741: LD_INT 22
16743: DOUBLE
16744: EQUAL
16745: IFTRUE 16749
16747: GO 16760
16749: POP
// bc_type := b_ext_track ; 23 :
16750: LD_ADDR_OWVAR 42
16754: PUSH
16755: LD_INT 16
16757: ST_TO_ADDR
16758: GO 16989
16760: LD_INT 23
16762: DOUBLE
16763: EQUAL
16764: IFTRUE 16768
16766: GO 16779
16768: POP
// bc_type := b_ext_laser ; 24 :
16769: LD_ADDR_OWVAR 42
16773: PUSH
16774: LD_INT 25
16776: ST_TO_ADDR
16777: GO 16989
16779: LD_INT 24
16781: DOUBLE
16782: EQUAL
16783: IFTRUE 16787
16785: GO 16798
16787: POP
// bc_type := b_control_tower ; 25 :
16788: LD_ADDR_OWVAR 42
16792: PUSH
16793: LD_INT 36
16795: ST_TO_ADDR
16796: GO 16989
16798: LD_INT 25
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16817
16806: POP
// bc_type := b_breastwork ; 26 :
16807: LD_ADDR_OWVAR 42
16811: PUSH
16812: LD_INT 31
16814: ST_TO_ADDR
16815: GO 16989
16817: LD_INT 26
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16836
16825: POP
// bc_type := b_bunker ; 27 :
16826: LD_ADDR_OWVAR 42
16830: PUSH
16831: LD_INT 32
16833: ST_TO_ADDR
16834: GO 16989
16836: LD_INT 27
16838: DOUBLE
16839: EQUAL
16840: IFTRUE 16844
16842: GO 16855
16844: POP
// bc_type := b_turret ; 28 :
16845: LD_ADDR_OWVAR 42
16849: PUSH
16850: LD_INT 33
16852: ST_TO_ADDR
16853: GO 16989
16855: LD_INT 28
16857: DOUBLE
16858: EQUAL
16859: IFTRUE 16863
16861: GO 16874
16863: POP
// bc_type := b_armoury ; 29 :
16864: LD_ADDR_OWVAR 42
16868: PUSH
16869: LD_INT 4
16871: ST_TO_ADDR
16872: GO 16989
16874: LD_INT 29
16876: DOUBLE
16877: EQUAL
16878: IFTRUE 16882
16880: GO 16893
16882: POP
// bc_type := b_barracks ; 30 :
16883: LD_ADDR_OWVAR 42
16887: PUSH
16888: LD_INT 5
16890: ST_TO_ADDR
16891: GO 16989
16893: LD_INT 30
16895: DOUBLE
16896: EQUAL
16897: IFTRUE 16901
16899: GO 16912
16901: POP
// bc_type := b_solar_power ; 31 :
16902: LD_ADDR_OWVAR 42
16906: PUSH
16907: LD_INT 27
16909: ST_TO_ADDR
16910: GO 16989
16912: LD_INT 31
16914: DOUBLE
16915: EQUAL
16916: IFTRUE 16920
16918: GO 16931
16920: POP
// bc_type := b_oil_power ; 32 :
16921: LD_ADDR_OWVAR 42
16925: PUSH
16926: LD_INT 26
16928: ST_TO_ADDR
16929: GO 16989
16931: LD_INT 32
16933: DOUBLE
16934: EQUAL
16935: IFTRUE 16939
16937: GO 16950
16939: POP
// bc_type := b_siberite_power ; 33 :
16940: LD_ADDR_OWVAR 42
16944: PUSH
16945: LD_INT 28
16947: ST_TO_ADDR
16948: GO 16989
16950: LD_INT 33
16952: DOUBLE
16953: EQUAL
16954: IFTRUE 16958
16956: GO 16969
16958: POP
// bc_type := b_oil_mine ; 34 :
16959: LD_ADDR_OWVAR 42
16963: PUSH
16964: LD_INT 29
16966: ST_TO_ADDR
16967: GO 16989
16969: LD_INT 34
16971: DOUBLE
16972: EQUAL
16973: IFTRUE 16977
16975: GO 16988
16977: POP
// bc_type := b_siberite_mine ; end ;
16978: LD_ADDR_OWVAR 42
16982: PUSH
16983: LD_INT 30
16985: ST_TO_ADDR
16986: GO 16989
16988: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16989: LD_ADDR_VAR 0 8
16993: PUSH
16994: LD_VAR 0 5
16998: PPUSH
16999: LD_VAR 0 6
17003: PPUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: CALL_OW 47
17013: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17014: LD_OWVAR 42
17018: PUSH
17019: LD_INT 32
17021: PUSH
17022: LD_INT 33
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: IN
17029: IFFALSE 17045
// PlaceWeaponTurret ( b , weapon ) ;
17031: LD_VAR 0 8
17035: PPUSH
17036: LD_VAR 0 4
17040: PPUSH
17041: CALL_OW 431
// end ;
17045: LD_VAR 0 7
17049: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17050: LD_INT 0
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17056: LD_ADDR_VAR 0 4
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_OWVAR 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 30
17078: PUSH
17079: LD_INT 0
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 1
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 69
17109: ST_TO_ADDR
// if not tmp then
17110: LD_VAR 0 4
17114: NOT
17115: IFFALSE 17119
// exit ;
17117: GO 17178
// for i in tmp do
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 4
17128: PUSH
17129: FOR_IN
17130: IFFALSE 17176
// for j = 1 to 3 do
17132: LD_ADDR_VAR 0 3
17136: PUSH
17137: DOUBLE
17138: LD_INT 1
17140: DEC
17141: ST_TO_ADDR
17142: LD_INT 3
17144: PUSH
17145: FOR_TO
17146: IFFALSE 17172
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17148: LD_VAR 0 2
17152: PPUSH
17153: CALL_OW 274
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_INT 99999
17165: PPUSH
17166: CALL_OW 277
17170: GO 17145
17172: POP
17173: POP
17174: GO 17129
17176: POP
17177: POP
// end ;
17178: LD_VAR 0 1
17182: RET
// export function hHackSetLevel10 ; var i , j ; begin
17183: LD_INT 0
17185: PPUSH
17186: PPUSH
17187: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17188: LD_ADDR_VAR 0 2
17192: PUSH
17193: LD_INT 21
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17261
// if IsSelected ( i ) then
17211: LD_VAR 0 2
17215: PPUSH
17216: CALL_OW 306
17220: IFFALSE 17259
// begin for j := 1 to 4 do
17222: LD_ADDR_VAR 0 3
17226: PUSH
17227: DOUBLE
17228: LD_INT 1
17230: DEC
17231: ST_TO_ADDR
17232: LD_INT 4
17234: PUSH
17235: FOR_TO
17236: IFFALSE 17257
// SetSkill ( i , j , 10 ) ;
17238: LD_VAR 0 2
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_INT 10
17250: PPUSH
17251: CALL_OW 237
17255: GO 17235
17257: POP
17258: POP
// end ;
17259: GO 17208
17261: POP
17262: POP
// end ;
17263: LD_VAR 0 1
17267: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17268: LD_INT 0
17270: PPUSH
17271: PPUSH
17272: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_INT 22
17280: PUSH
17281: LD_OWVAR 2
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 21
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PPUSH
17304: CALL_OW 69
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17351
// begin for j := 1 to 4 do
17312: LD_ADDR_VAR 0 3
17316: PUSH
17317: DOUBLE
17318: LD_INT 1
17320: DEC
17321: ST_TO_ADDR
17322: LD_INT 4
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17347
// SetSkill ( i , j , 10 ) ;
17328: LD_VAR 0 2
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 10
17340: PPUSH
17341: CALL_OW 237
17345: GO 17325
17347: POP
17348: POP
// end ;
17349: GO 17309
17351: POP
17352: POP
// end ;
17353: LD_VAR 0 1
17357: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17358: LD_INT 0
17360: PPUSH
// uc_side := your_side ;
17361: LD_ADDR_OWVAR 20
17365: PUSH
17366: LD_OWVAR 2
17370: ST_TO_ADDR
// uc_nation := nation ;
17371: LD_ADDR_OWVAR 21
17375: PUSH
17376: LD_VAR 0 1
17380: ST_TO_ADDR
// InitHc ;
17381: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17385: LD_INT 0
17387: PPUSH
17388: LD_VAR 0 2
17392: PPUSH
17393: LD_VAR 0 3
17397: PPUSH
17398: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_VAR 0 5
17411: PPUSH
17412: CALL_OW 428
17416: PUSH
17417: LD_INT 0
17419: EQUAL
17420: IFFALSE 17444
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17422: CALL_OW 44
17426: PPUSH
17427: LD_VAR 0 4
17431: PPUSH
17432: LD_VAR 0 5
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: CALL_OW 48
// end ;
17444: LD_VAR 0 6
17448: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
// uc_side := your_side ;
17453: LD_ADDR_OWVAR 20
17457: PUSH
17458: LD_OWVAR 2
17462: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17463: LD_VAR 0 1
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 3
17476: PUSH
17477: LD_INT 4
17479: PUSH
17480: LD_INT 5
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: IN
17490: IFFALSE 17502
// uc_nation := nation_american else
17492: LD_ADDR_OWVAR 21
17496: PUSH
17497: LD_INT 1
17499: ST_TO_ADDR
17500: GO 17545
// if chassis in [ 11 , 12 , 13 , 14 ] then
17502: LD_VAR 0 1
17506: PUSH
17507: LD_INT 11
17509: PUSH
17510: LD_INT 12
17512: PUSH
17513: LD_INT 13
17515: PUSH
17516: LD_INT 14
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: IN
17525: IFFALSE 17537
// uc_nation := nation_arabian else
17527: LD_ADDR_OWVAR 21
17531: PUSH
17532: LD_INT 2
17534: ST_TO_ADDR
17535: GO 17545
// uc_nation := nation_russian ;
17537: LD_ADDR_OWVAR 21
17541: PUSH
17542: LD_INT 3
17544: ST_TO_ADDR
// vc_chassis := chassis ;
17545: LD_ADDR_OWVAR 37
17549: PUSH
17550: LD_VAR 0 1
17554: ST_TO_ADDR
// vc_engine := engine ;
17555: LD_ADDR_OWVAR 39
17559: PUSH
17560: LD_VAR 0 2
17564: ST_TO_ADDR
// vc_control := control ;
17565: LD_ADDR_OWVAR 38
17569: PUSH
17570: LD_VAR 0 3
17574: ST_TO_ADDR
// vc_weapon := weapon ;
17575: LD_ADDR_OWVAR 40
17579: PUSH
17580: LD_VAR 0 4
17584: ST_TO_ADDR
// un := CreateVehicle ;
17585: LD_ADDR_VAR 0 8
17589: PUSH
17590: CALL_OW 45
17594: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17595: LD_VAR 0 8
17599: PPUSH
17600: LD_INT 0
17602: PPUSH
17603: LD_INT 5
17605: PPUSH
17606: CALL_OW 12
17610: PPUSH
17611: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17615: LD_VAR 0 8
17619: PPUSH
17620: LD_VAR 0 5
17624: PPUSH
17625: LD_VAR 0 6
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 48
// end ;
17637: LD_VAR 0 7
17641: RET
// export hInvincible ; every 1 do
17642: GO 17644
17644: DISABLE
// hInvincible := [ ] ;
17645: LD_ADDR_EXP 80
17649: PUSH
17650: EMPTY
17651: ST_TO_ADDR
17652: END
// every 10 do var i ;
17653: GO 17655
17655: DISABLE
17656: LD_INT 0
17658: PPUSH
// begin enable ;
17659: ENABLE
// if not hInvincible then
17660: LD_EXP 80
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17713
// for i in hInvincible do
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: LD_EXP 80
17678: PUSH
17679: FOR_IN
17680: IFFALSE 17711
// if GetLives ( i ) < 1000 then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 256
17691: PUSH
17692: LD_INT 1000
17694: LESS
17695: IFFALSE 17709
// SetLives ( i , 1000 ) ;
17697: LD_VAR 0 1
17701: PPUSH
17702: LD_INT 1000
17704: PPUSH
17705: CALL_OW 234
17709: GO 17679
17711: POP
17712: POP
// end ;
17713: PPOPN 1
17715: END
// export function hHackInvincible ; var i ; begin
17716: LD_INT 0
17718: PPUSH
17719: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17720: LD_ADDR_VAR 0 2
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 21
17740: PUSH
17741: LD_INT 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: PUSH
17758: FOR_IN
17759: IFFALSE 17820
// if IsSelected ( i ) then
17761: LD_VAR 0 2
17765: PPUSH
17766: CALL_OW 306
17770: IFFALSE 17818
// begin if i in hInvincible then
17772: LD_VAR 0 2
17776: PUSH
17777: LD_EXP 80
17781: IN
17782: IFFALSE 17802
// hInvincible := hInvincible diff i else
17784: LD_ADDR_EXP 80
17788: PUSH
17789: LD_EXP 80
17793: PUSH
17794: LD_VAR 0 2
17798: DIFF
17799: ST_TO_ADDR
17800: GO 17818
// hInvincible := hInvincible union i ;
17802: LD_ADDR_EXP 80
17806: PUSH
17807: LD_EXP 80
17811: PUSH
17812: LD_VAR 0 2
17816: UNION
17817: ST_TO_ADDR
// end ;
17818: GO 17758
17820: POP
17821: POP
// end ;
17822: LD_VAR 0 1
17826: RET
// export function hHackInvisible ; var i , j ; begin
17827: LD_INT 0
17829: PPUSH
17830: PPUSH
17831: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17832: LD_ADDR_VAR 0 2
17836: PUSH
17837: LD_INT 21
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: FOR_IN
17853: IFFALSE 17877
// if IsSelected ( i ) then
17855: LD_VAR 0 2
17859: PPUSH
17860: CALL_OW 306
17864: IFFALSE 17875
// ComForceInvisible ( i ) ;
17866: LD_VAR 0 2
17870: PPUSH
17871: CALL_OW 496
17875: GO 17852
17877: POP
17878: POP
// end ;
17879: LD_VAR 0 1
17883: RET
// export function hHackChangeYourSide ; begin
17884: LD_INT 0
17886: PPUSH
// if your_side = 8 then
17887: LD_OWVAR 2
17891: PUSH
17892: LD_INT 8
17894: EQUAL
17895: IFFALSE 17907
// your_side := 0 else
17897: LD_ADDR_OWVAR 2
17901: PUSH
17902: LD_INT 0
17904: ST_TO_ADDR
17905: GO 17921
// your_side := your_side + 1 ;
17907: LD_ADDR_OWVAR 2
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: LD_INT 1
17919: PLUS
17920: ST_TO_ADDR
// end ;
17921: LD_VAR 0 1
17925: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17926: LD_INT 0
17928: PPUSH
17929: PPUSH
17930: PPUSH
// for i in all_units do
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_OWVAR 3
17940: PUSH
17941: FOR_IN
17942: IFFALSE 18020
// if IsSelected ( i ) then
17944: LD_VAR 0 2
17948: PPUSH
17949: CALL_OW 306
17953: IFFALSE 18018
// begin j := GetSide ( i ) ;
17955: LD_ADDR_VAR 0 3
17959: PUSH
17960: LD_VAR 0 2
17964: PPUSH
17965: CALL_OW 255
17969: ST_TO_ADDR
// if j = 8 then
17970: LD_VAR 0 3
17974: PUSH
17975: LD_INT 8
17977: EQUAL
17978: IFFALSE 17990
// j := 0 else
17980: LD_ADDR_VAR 0 3
17984: PUSH
17985: LD_INT 0
17987: ST_TO_ADDR
17988: GO 18004
// j := j + 1 ;
17990: LD_ADDR_VAR 0 3
17994: PUSH
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 1
18002: PLUS
18003: ST_TO_ADDR
// SetSide ( i , j ) ;
18004: LD_VAR 0 2
18008: PPUSH
18009: LD_VAR 0 3
18013: PPUSH
18014: CALL_OW 235
// end ;
18018: GO 17941
18020: POP
18021: POP
// end ;
18022: LD_VAR 0 1
18026: RET
// export function hHackFog ; begin
18027: LD_INT 0
18029: PPUSH
// FogOff ( true ) ;
18030: LD_INT 1
18032: PPUSH
18033: CALL_OW 344
// end ;
18037: LD_VAR 0 1
18041: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18042: LD_INT 0
18044: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18045: LD_VAR 0 1
18049: PPUSH
18050: LD_VAR 0 2
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 483
// CenterOnXY ( x , y ) ;
18070: LD_VAR 0 2
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: CALL_OW 84
// end ; end_of_file
18084: LD_VAR 0 4
18088: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
18089: LD_VAR 0 1
18093: PUSH
18094: LD_INT 200
18096: DOUBLE
18097: GREATEREQUAL
18098: IFFALSE 18106
18100: LD_INT 299
18102: DOUBLE
18103: LESSEQUAL
18104: IFTRUE 18108
18106: GO 18140
18108: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
18109: LD_VAR 0 1
18113: PPUSH
18114: LD_VAR 0 2
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_VAR 0 4
18128: PPUSH
18129: LD_VAR 0 5
18133: PPUSH
18134: CALL 18374 0 5
18138: GO 18217
18140: LD_INT 300
18142: DOUBLE
18143: GREATEREQUAL
18144: IFFALSE 18152
18146: LD_INT 399
18148: DOUBLE
18149: LESSEQUAL
18150: IFTRUE 18154
18152: GO 18216
18154: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
18155: LD_VAR 0 1
18159: PPUSH
18160: LD_VAR 0 2
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: LD_VAR 0 4
18174: PPUSH
18175: LD_VAR 0 5
18179: PPUSH
18180: LD_VAR 0 6
18184: PPUSH
18185: LD_VAR 0 7
18189: PPUSH
18190: LD_VAR 0 8
18194: PPUSH
18195: LD_VAR 0 9
18199: PPUSH
18200: LD_VAR 0 10
18204: PPUSH
18205: LD_VAR 0 11
18209: PPUSH
18210: CALL 16109 0 11
18214: GO 18217
18216: POP
// end ;
18217: PPOPN 11
18219: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
18220: LD_VAR 0 1
18224: PPUSH
18225: LD_VAR 0 2
18229: PPUSH
18230: LD_VAR 0 3
18234: PPUSH
18235: LD_VAR 0 4
18239: PPUSH
18240: LD_VAR 0 5
18244: PPUSH
18245: CALL 18366 0 5
// end ; end_of_file
18249: PPOPN 5
18251: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18252: LD_INT 0
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 264
18267: PUSH
18268: LD_EXP 97
18272: EQUAL
18273: IFFALSE 18345
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18275: LD_INT 68
18277: PPUSH
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PPUSH
18288: CALL_OW 321
18292: PUSH
18293: LD_INT 2
18295: EQUAL
18296: IFFALSE 18308
// eff := 70 else
18298: LD_ADDR_VAR 0 4
18302: PUSH
18303: LD_INT 70
18305: ST_TO_ADDR
18306: GO 18316
// eff := 30 ;
18308: LD_ADDR_VAR 0 4
18312: PUSH
18313: LD_INT 30
18315: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18316: LD_VAR 0 1
18320: PPUSH
18321: CALL_OW 250
18325: PPUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 251
18335: PPUSH
18336: LD_VAR 0 4
18340: PPUSH
18341: CALL_OW 495
// end ; end ;
18345: LD_VAR 0 2
18349: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18350: LD_INT 0
18352: PPUSH
// end ;
18353: LD_VAR 0 4
18357: RET
// export function SOS_Command ( cmd ) ; begin
18358: LD_INT 0
18360: PPUSH
// end ;
18361: LD_VAR 0 2
18365: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18366: LD_INT 0
18368: PPUSH
// end ;
18369: LD_VAR 0 6
18373: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18374: LD_INT 0
18376: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_INT 250
18384: EQUAL
18385: PUSH
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL_OW 264
18395: PUSH
18396: LD_EXP 100
18400: EQUAL
18401: AND
18402: IFFALSE 18423
// MinerPlaceMine ( unit , x , y ) ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_VAR 0 4
18413: PPUSH
18414: LD_VAR 0 5
18418: PPUSH
18419: CALL 20772 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18423: LD_VAR 0 1
18427: PUSH
18428: LD_INT 251
18430: EQUAL
18431: PUSH
18432: LD_VAR 0 2
18436: PPUSH
18437: CALL_OW 264
18441: PUSH
18442: LD_EXP 100
18446: EQUAL
18447: AND
18448: IFFALSE 18469
// MinerDetonateMine ( unit , x , y ) ;
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_VAR 0 4
18459: PPUSH
18460: LD_VAR 0 5
18464: PPUSH
18465: CALL 21049 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18469: LD_VAR 0 1
18473: PUSH
18474: LD_INT 252
18476: EQUAL
18477: PUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: CALL_OW 264
18487: PUSH
18488: LD_EXP 100
18492: EQUAL
18493: AND
18494: IFFALSE 18515
// MinerCreateMinefield ( unit , x , y ) ;
18496: LD_VAR 0 2
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: LD_VAR 0 5
18510: PPUSH
18511: CALL 21466 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18515: LD_VAR 0 1
18519: PUSH
18520: LD_INT 253
18522: EQUAL
18523: PUSH
18524: LD_VAR 0 2
18528: PPUSH
18529: CALL_OW 257
18533: PUSH
18534: LD_INT 5
18536: EQUAL
18537: AND
18538: IFFALSE 18559
// ComBinocular ( unit , x , y ) ;
18540: LD_VAR 0 2
18544: PPUSH
18545: LD_VAR 0 4
18549: PPUSH
18550: LD_VAR 0 5
18554: PPUSH
18555: CALL 21837 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18559: LD_VAR 0 1
18563: PUSH
18564: LD_INT 254
18566: EQUAL
18567: PUSH
18568: LD_VAR 0 2
18572: PPUSH
18573: CALL_OW 264
18577: PUSH
18578: LD_EXP 95
18582: EQUAL
18583: AND
18584: PUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: CALL_OW 263
18594: PUSH
18595: LD_INT 3
18597: EQUAL
18598: AND
18599: IFFALSE 18615
// HackDestroyVehicle ( unit , selectedUnit ) ;
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_VAR 0 3
18610: PPUSH
18611: CALL 20132 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18615: LD_VAR 0 1
18619: PUSH
18620: LD_INT 255
18622: EQUAL
18623: PUSH
18624: LD_VAR 0 2
18628: PPUSH
18629: CALL_OW 264
18633: PUSH
18634: LD_INT 14
18636: PUSH
18637: LD_INT 53
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: IN
18644: AND
18645: PUSH
18646: LD_VAR 0 4
18650: PPUSH
18651: LD_VAR 0 5
18655: PPUSH
18656: CALL_OW 488
18660: AND
18661: IFFALSE 18685
// CutTreeXYR ( unit , x , y , 12 ) ;
18663: LD_VAR 0 2
18667: PPUSH
18668: LD_VAR 0 4
18672: PPUSH
18673: LD_VAR 0 5
18677: PPUSH
18678: LD_INT 12
18680: PPUSH
18681: CALL 18698 0 4
// end ;
18685: LD_VAR 0 6
18689: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18690: LD_INT 0
18692: PPUSH
// end ;
18693: LD_VAR 0 4
18697: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
18702: PPUSH
18703: PPUSH
18704: PPUSH
18705: PPUSH
18706: PPUSH
18707: PPUSH
18708: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18709: LD_VAR 0 1
18713: NOT
18714: PUSH
18715: LD_VAR 0 2
18719: PPUSH
18720: LD_VAR 0 3
18724: PPUSH
18725: CALL_OW 488
18729: NOT
18730: OR
18731: PUSH
18732: LD_VAR 0 4
18736: NOT
18737: OR
18738: IFFALSE 18742
// exit ;
18740: GO 19082
// list := [ ] ;
18742: LD_ADDR_VAR 0 13
18746: PUSH
18747: EMPTY
18748: ST_TO_ADDR
// if x - r < 0 then
18749: LD_VAR 0 2
18753: PUSH
18754: LD_VAR 0 4
18758: MINUS
18759: PUSH
18760: LD_INT 0
18762: LESS
18763: IFFALSE 18775
// min_x := 0 else
18765: LD_ADDR_VAR 0 7
18769: PUSH
18770: LD_INT 0
18772: ST_TO_ADDR
18773: GO 18791
// min_x := x - r ;
18775: LD_ADDR_VAR 0 7
18779: PUSH
18780: LD_VAR 0 2
18784: PUSH
18785: LD_VAR 0 4
18789: MINUS
18790: ST_TO_ADDR
// if y - r < 0 then
18791: LD_VAR 0 3
18795: PUSH
18796: LD_VAR 0 4
18800: MINUS
18801: PUSH
18802: LD_INT 0
18804: LESS
18805: IFFALSE 18817
// min_y := 0 else
18807: LD_ADDR_VAR 0 8
18811: PUSH
18812: LD_INT 0
18814: ST_TO_ADDR
18815: GO 18833
// min_y := y - r ;
18817: LD_ADDR_VAR 0 8
18821: PUSH
18822: LD_VAR 0 3
18826: PUSH
18827: LD_VAR 0 4
18831: MINUS
18832: ST_TO_ADDR
// max_x := x + r ;
18833: LD_ADDR_VAR 0 9
18837: PUSH
18838: LD_VAR 0 2
18842: PUSH
18843: LD_VAR 0 4
18847: PLUS
18848: ST_TO_ADDR
// max_y := y + r ;
18849: LD_ADDR_VAR 0 10
18853: PUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_VAR 0 4
18863: PLUS
18864: ST_TO_ADDR
// for _x = min_x to max_x do
18865: LD_ADDR_VAR 0 11
18869: PUSH
18870: DOUBLE
18871: LD_VAR 0 7
18875: DEC
18876: ST_TO_ADDR
18877: LD_VAR 0 9
18881: PUSH
18882: FOR_TO
18883: IFFALSE 19000
// for _y = min_y to max_y do
18885: LD_ADDR_VAR 0 12
18889: PUSH
18890: DOUBLE
18891: LD_VAR 0 8
18895: DEC
18896: ST_TO_ADDR
18897: LD_VAR 0 10
18901: PUSH
18902: FOR_TO
18903: IFFALSE 18996
// begin if not ValidHex ( _x , _y ) then
18905: LD_VAR 0 11
18909: PPUSH
18910: LD_VAR 0 12
18914: PPUSH
18915: CALL_OW 488
18919: NOT
18920: IFFALSE 18924
// continue ;
18922: GO 18902
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18924: LD_VAR 0 11
18928: PPUSH
18929: LD_VAR 0 12
18933: PPUSH
18934: CALL_OW 351
18938: PUSH
18939: LD_VAR 0 11
18943: PPUSH
18944: LD_VAR 0 12
18948: PPUSH
18949: CALL_OW 554
18953: AND
18954: IFFALSE 18994
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18956: LD_ADDR_VAR 0 13
18960: PUSH
18961: LD_VAR 0 13
18965: PPUSH
18966: LD_VAR 0 13
18970: PUSH
18971: LD_INT 1
18973: PLUS
18974: PPUSH
18975: LD_VAR 0 11
18979: PUSH
18980: LD_VAR 0 12
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 2
18993: ST_TO_ADDR
// end ;
18994: GO 18902
18996: POP
18997: POP
18998: GO 18882
19000: POP
19001: POP
// if not list then
19002: LD_VAR 0 13
19006: NOT
19007: IFFALSE 19011
// exit ;
19009: GO 19082
// for i in list do
19011: LD_ADDR_VAR 0 6
19015: PUSH
19016: LD_VAR 0 13
19020: PUSH
19021: FOR_IN
19022: IFFALSE 19080
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19024: LD_VAR 0 1
19028: PPUSH
19029: LD_STRING M
19031: PUSH
19032: LD_VAR 0 6
19036: PUSH
19037: LD_INT 1
19039: ARRAY
19040: PUSH
19041: LD_VAR 0 6
19045: PUSH
19046: LD_INT 2
19048: ARRAY
19049: PUSH
19050: LD_INT 0
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: PPUSH
19074: CALL_OW 447
19078: GO 19021
19080: POP
19081: POP
// end ;
19082: LD_VAR 0 5
19086: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19087: LD_EXP 83
19091: NOT
19092: IFFALSE 19142
19094: GO 19096
19096: DISABLE
// begin initHack := true ;
19097: LD_ADDR_EXP 83
19101: PUSH
19102: LD_INT 1
19104: ST_TO_ADDR
// hackTanks := [ ] ;
19105: LD_ADDR_EXP 84
19109: PUSH
19110: EMPTY
19111: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19112: LD_ADDR_EXP 85
19116: PUSH
19117: EMPTY
19118: ST_TO_ADDR
// hackLimit := 3 ;
19119: LD_ADDR_EXP 86
19123: PUSH
19124: LD_INT 3
19126: ST_TO_ADDR
// hackDist := 12 ;
19127: LD_ADDR_EXP 87
19131: PUSH
19132: LD_INT 12
19134: ST_TO_ADDR
// hackCounter := [ ] ;
19135: LD_ADDR_EXP 88
19139: PUSH
19140: EMPTY
19141: ST_TO_ADDR
// end ;
19142: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19143: LD_EXP 83
19147: PUSH
19148: LD_INT 34
19150: PUSH
19151: LD_EXP 95
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: AND
19165: IFFALSE 19420
19167: GO 19169
19169: DISABLE
19170: LD_INT 0
19172: PPUSH
19173: PPUSH
// begin enable ;
19174: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19175: LD_ADDR_VAR 0 1
19179: PUSH
19180: LD_INT 34
19182: PUSH
19183: LD_EXP 95
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: PUSH
19197: FOR_IN
19198: IFFALSE 19418
// begin if not i in hackTanks then
19200: LD_VAR 0 1
19204: PUSH
19205: LD_EXP 84
19209: IN
19210: NOT
19211: IFFALSE 19294
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19213: LD_ADDR_EXP 84
19217: PUSH
19218: LD_EXP 84
19222: PPUSH
19223: LD_EXP 84
19227: PUSH
19228: LD_INT 1
19230: PLUS
19231: PPUSH
19232: LD_VAR 0 1
19236: PPUSH
19237: CALL_OW 1
19241: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19242: LD_ADDR_EXP 85
19246: PUSH
19247: LD_EXP 85
19251: PPUSH
19252: LD_EXP 85
19256: PUSH
19257: LD_INT 1
19259: PLUS
19260: PPUSH
19261: EMPTY
19262: PPUSH
19263: CALL_OW 1
19267: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19268: LD_ADDR_EXP 88
19272: PUSH
19273: LD_EXP 88
19277: PPUSH
19278: LD_EXP 88
19282: PUSH
19283: LD_INT 1
19285: PLUS
19286: PPUSH
19287: EMPTY
19288: PPUSH
19289: CALL_OW 1
19293: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 302
19303: NOT
19304: IFFALSE 19317
// begin HackUnlinkAll ( i ) ;
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL 19423 0 1
// continue ;
19315: GO 19197
// end ; HackCheckCapturedStatus ( i ) ;
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL 19866 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19326: LD_ADDR_VAR 0 2
19330: PUSH
19331: LD_INT 81
19333: PUSH
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL_OW 255
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 33
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 91
19360: PUSH
19361: LD_VAR 0 1
19365: PUSH
19366: LD_EXP 87
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 50
19378: PUSH
19379: EMPTY
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: PPUSH
19388: CALL_OW 69
19392: ST_TO_ADDR
// if not tmp then
19393: LD_VAR 0 2
19397: NOT
19398: IFFALSE 19402
// continue ;
19400: GO 19197
// HackLink ( i , tmp ) ;
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_VAR 0 2
19411: PPUSH
19412: CALL 19559 0 2
// end ;
19416: GO 19197
19418: POP
19419: POP
// end ;
19420: PPOPN 2
19422: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19423: LD_INT 0
19425: PPUSH
19426: PPUSH
19427: PPUSH
// if not hack in hackTanks then
19428: LD_VAR 0 1
19432: PUSH
19433: LD_EXP 84
19437: IN
19438: NOT
19439: IFFALSE 19443
// exit ;
19441: GO 19554
// index := GetElementIndex ( hackTanks , hack ) ;
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: LD_EXP 84
19452: PPUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL 27196 0 2
19462: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19463: LD_EXP 85
19467: PUSH
19468: LD_VAR 0 4
19472: ARRAY
19473: IFFALSE 19554
// begin for i in hackTanksCaptured [ index ] do
19475: LD_ADDR_VAR 0 3
19479: PUSH
19480: LD_EXP 85
19484: PUSH
19485: LD_VAR 0 4
19489: ARRAY
19490: PUSH
19491: FOR_IN
19492: IFFALSE 19518
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 1
19501: ARRAY
19502: PPUSH
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 2
19510: ARRAY
19511: PPUSH
19512: CALL_OW 235
19516: GO 19491
19518: POP
19519: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19520: LD_ADDR_EXP 85
19524: PUSH
19525: LD_EXP 85
19529: PPUSH
19530: LD_VAR 0 4
19534: PPUSH
19535: EMPTY
19536: PPUSH
19537: CALL_OW 1
19541: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: LD_INT 0
19549: PPUSH
19550: CALL_OW 505
// end ; end ;
19554: LD_VAR 0 2
19558: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19559: LD_INT 0
19561: PPUSH
19562: PPUSH
19563: PPUSH
// if not hack in hackTanks or not vehicles then
19564: LD_VAR 0 1
19568: PUSH
19569: LD_EXP 84
19573: IN
19574: NOT
19575: PUSH
19576: LD_VAR 0 2
19580: NOT
19581: OR
19582: IFFALSE 19586
// exit ;
19584: GO 19861
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: LD_VAR 0 2
19600: PPUSH
19601: LD_INT 1
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: CALL 27846 0 4
19611: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19612: LD_ADDR_VAR 0 5
19616: PUSH
19617: LD_EXP 84
19621: PPUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL 27196 0 2
19631: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19632: LD_EXP 85
19636: PUSH
19637: LD_VAR 0 5
19641: ARRAY
19642: PUSH
19643: LD_EXP 86
19647: LESS
19648: IFFALSE 19837
// begin for i := 1 to vehicles do
19650: LD_ADDR_VAR 0 4
19654: PUSH
19655: DOUBLE
19656: LD_INT 1
19658: DEC
19659: ST_TO_ADDR
19660: LD_VAR 0 2
19664: PUSH
19665: FOR_TO
19666: IFFALSE 19835
// begin if hackTanksCaptured [ index ] = hackLimit then
19668: LD_EXP 85
19672: PUSH
19673: LD_VAR 0 5
19677: ARRAY
19678: PUSH
19679: LD_EXP 86
19683: EQUAL
19684: IFFALSE 19688
// break ;
19686: GO 19835
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19688: LD_ADDR_EXP 88
19692: PUSH
19693: LD_EXP 88
19697: PPUSH
19698: LD_VAR 0 5
19702: PPUSH
19703: LD_EXP 88
19707: PUSH
19708: LD_VAR 0 5
19712: ARRAY
19713: PUSH
19714: LD_INT 1
19716: PLUS
19717: PPUSH
19718: CALL_OW 1
19722: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19723: LD_ADDR_EXP 85
19727: PUSH
19728: LD_EXP 85
19732: PPUSH
19733: LD_VAR 0 5
19737: PUSH
19738: LD_EXP 85
19742: PUSH
19743: LD_VAR 0 5
19747: ARRAY
19748: PUSH
19749: LD_INT 1
19751: PLUS
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PPUSH
19757: LD_VAR 0 2
19761: PUSH
19762: LD_VAR 0 4
19766: ARRAY
19767: PUSH
19768: LD_VAR 0 2
19772: PUSH
19773: LD_VAR 0 4
19777: ARRAY
19778: PPUSH
19779: CALL_OW 255
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL 27411 0 3
19792: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19793: LD_VAR 0 2
19797: PUSH
19798: LD_VAR 0 4
19802: ARRAY
19803: PPUSH
19804: LD_VAR 0 1
19808: PPUSH
19809: CALL_OW 255
19813: PPUSH
19814: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19818: LD_VAR 0 2
19822: PUSH
19823: LD_VAR 0 4
19827: ARRAY
19828: PPUSH
19829: CALL_OW 141
// end ;
19833: GO 19665
19835: POP
19836: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_EXP 85
19846: PUSH
19847: LD_VAR 0 5
19851: ARRAY
19852: PUSH
19853: LD_INT 0
19855: PLUS
19856: PPUSH
19857: CALL_OW 505
// end ;
19861: LD_VAR 0 3
19865: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19866: LD_INT 0
19868: PPUSH
19869: PPUSH
19870: PPUSH
19871: PPUSH
// if not hack in hackTanks then
19872: LD_VAR 0 1
19876: PUSH
19877: LD_EXP 84
19881: IN
19882: NOT
19883: IFFALSE 19887
// exit ;
19885: GO 20127
// index := GetElementIndex ( hackTanks , hack ) ;
19887: LD_ADDR_VAR 0 4
19891: PUSH
19892: LD_EXP 84
19896: PPUSH
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL 27196 0 2
19906: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: DOUBLE
19913: LD_EXP 85
19917: PUSH
19918: LD_VAR 0 4
19922: ARRAY
19923: INC
19924: ST_TO_ADDR
19925: LD_INT 1
19927: PUSH
19928: FOR_DOWNTO
19929: IFFALSE 20101
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19931: LD_ADDR_VAR 0 5
19935: PUSH
19936: LD_EXP 85
19940: PUSH
19941: LD_VAR 0 4
19945: ARRAY
19946: PUSH
19947: LD_VAR 0 3
19951: ARRAY
19952: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19953: LD_VAR 0 5
19957: PUSH
19958: LD_INT 1
19960: ARRAY
19961: PPUSH
19962: CALL_OW 302
19966: NOT
19967: PUSH
19968: LD_VAR 0 5
19972: PUSH
19973: LD_INT 1
19975: ARRAY
19976: PPUSH
19977: CALL_OW 255
19981: PUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 255
19991: NONEQUAL
19992: OR
19993: IFFALSE 20099
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19995: LD_VAR 0 5
19999: PUSH
20000: LD_INT 1
20002: ARRAY
20003: PPUSH
20004: CALL_OW 305
20008: PUSH
20009: LD_VAR 0 5
20013: PUSH
20014: LD_INT 1
20016: ARRAY
20017: PPUSH
20018: CALL_OW 255
20022: PUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 255
20032: EQUAL
20033: AND
20034: IFFALSE 20058
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20036: LD_VAR 0 5
20040: PUSH
20041: LD_INT 1
20043: ARRAY
20044: PPUSH
20045: LD_VAR 0 5
20049: PUSH
20050: LD_INT 2
20052: ARRAY
20053: PPUSH
20054: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20058: LD_ADDR_EXP 85
20062: PUSH
20063: LD_EXP 85
20067: PPUSH
20068: LD_VAR 0 4
20072: PPUSH
20073: LD_EXP 85
20077: PUSH
20078: LD_VAR 0 4
20082: ARRAY
20083: PPUSH
20084: LD_VAR 0 3
20088: PPUSH
20089: CALL_OW 3
20093: PPUSH
20094: CALL_OW 1
20098: ST_TO_ADDR
// end ; end ;
20099: GO 19928
20101: POP
20102: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20103: LD_VAR 0 1
20107: PPUSH
20108: LD_EXP 85
20112: PUSH
20113: LD_VAR 0 4
20117: ARRAY
20118: PUSH
20119: LD_INT 0
20121: PLUS
20122: PPUSH
20123: CALL_OW 505
// end ;
20127: LD_VAR 0 2
20131: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20132: LD_INT 0
20134: PPUSH
20135: PPUSH
20136: PPUSH
20137: PPUSH
// if not hack in hackTanks then
20138: LD_VAR 0 1
20142: PUSH
20143: LD_EXP 84
20147: IN
20148: NOT
20149: IFFALSE 20153
// exit ;
20151: GO 20238
// index := GetElementIndex ( hackTanks , hack ) ;
20153: LD_ADDR_VAR 0 5
20157: PUSH
20158: LD_EXP 84
20162: PPUSH
20163: LD_VAR 0 1
20167: PPUSH
20168: CALL 27196 0 2
20172: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20173: LD_ADDR_VAR 0 4
20177: PUSH
20178: DOUBLE
20179: LD_INT 1
20181: DEC
20182: ST_TO_ADDR
20183: LD_EXP 85
20187: PUSH
20188: LD_VAR 0 5
20192: ARRAY
20193: PUSH
20194: FOR_TO
20195: IFFALSE 20236
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20197: LD_EXP 85
20201: PUSH
20202: LD_VAR 0 5
20206: ARRAY
20207: PUSH
20208: LD_VAR 0 4
20212: ARRAY
20213: PUSH
20214: LD_INT 1
20216: ARRAY
20217: PUSH
20218: LD_VAR 0 2
20222: EQUAL
20223: IFFALSE 20234
// KillUnit ( vehicle ) ;
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 66
20234: GO 20194
20236: POP
20237: POP
// end ;
20238: LD_VAR 0 3
20242: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20243: LD_EXP 89
20247: NOT
20248: IFFALSE 20283
20250: GO 20252
20252: DISABLE
// begin initMiner := true ;
20253: LD_ADDR_EXP 89
20257: PUSH
20258: LD_INT 1
20260: ST_TO_ADDR
// minersList := [ ] ;
20261: LD_ADDR_EXP 90
20265: PUSH
20266: EMPTY
20267: ST_TO_ADDR
// minerMinesList := [ ] ;
20268: LD_ADDR_EXP 91
20272: PUSH
20273: EMPTY
20274: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20275: LD_ADDR_EXP 92
20279: PUSH
20280: LD_INT 5
20282: ST_TO_ADDR
// end ;
20283: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20284: LD_EXP 89
20288: PUSH
20289: LD_INT 34
20291: PUSH
20292: LD_EXP 100
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: AND
20306: IFFALSE 20769
20308: GO 20310
20310: DISABLE
20311: LD_INT 0
20313: PPUSH
20314: PPUSH
20315: PPUSH
20316: PPUSH
// begin enable ;
20317: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20318: LD_ADDR_VAR 0 1
20322: PUSH
20323: LD_INT 34
20325: PUSH
20326: LD_EXP 100
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: PUSH
20340: FOR_IN
20341: IFFALSE 20413
// begin if not i in minersList then
20343: LD_VAR 0 1
20347: PUSH
20348: LD_EXP 90
20352: IN
20353: NOT
20354: IFFALSE 20411
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20356: LD_ADDR_EXP 90
20360: PUSH
20361: LD_EXP 90
20365: PPUSH
20366: LD_EXP 90
20370: PUSH
20371: LD_INT 1
20373: PLUS
20374: PPUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 1
20384: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20385: LD_ADDR_EXP 91
20389: PUSH
20390: LD_EXP 91
20394: PPUSH
20395: LD_EXP 91
20399: PUSH
20400: LD_INT 1
20402: PLUS
20403: PPUSH
20404: EMPTY
20405: PPUSH
20406: CALL_OW 1
20410: ST_TO_ADDR
// end end ;
20411: GO 20340
20413: POP
20414: POP
// for i := minerMinesList downto 1 do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: DOUBLE
20421: LD_EXP 91
20425: INC
20426: ST_TO_ADDR
20427: LD_INT 1
20429: PUSH
20430: FOR_DOWNTO
20431: IFFALSE 20767
// begin if IsLive ( minersList [ i ] ) then
20433: LD_EXP 90
20437: PUSH
20438: LD_VAR 0 1
20442: ARRAY
20443: PPUSH
20444: CALL_OW 300
20448: IFFALSE 20476
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20450: LD_EXP 90
20454: PUSH
20455: LD_VAR 0 1
20459: ARRAY
20460: PPUSH
20461: LD_EXP 91
20465: PUSH
20466: LD_VAR 0 1
20470: ARRAY
20471: PPUSH
20472: CALL_OW 505
// if not minerMinesList [ i ] then
20476: LD_EXP 91
20480: PUSH
20481: LD_VAR 0 1
20485: ARRAY
20486: NOT
20487: IFFALSE 20491
// continue ;
20489: GO 20430
// for j := minerMinesList [ i ] downto 1 do
20491: LD_ADDR_VAR 0 2
20495: PUSH
20496: DOUBLE
20497: LD_EXP 91
20501: PUSH
20502: LD_VAR 0 1
20506: ARRAY
20507: INC
20508: ST_TO_ADDR
20509: LD_INT 1
20511: PUSH
20512: FOR_DOWNTO
20513: IFFALSE 20763
// begin side := GetSide ( minersList [ i ] ) ;
20515: LD_ADDR_VAR 0 3
20519: PUSH
20520: LD_EXP 90
20524: PUSH
20525: LD_VAR 0 1
20529: ARRAY
20530: PPUSH
20531: CALL_OW 255
20535: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20536: LD_ADDR_VAR 0 4
20540: PUSH
20541: LD_EXP 91
20545: PUSH
20546: LD_VAR 0 1
20550: ARRAY
20551: PUSH
20552: LD_VAR 0 2
20556: ARRAY
20557: PUSH
20558: LD_INT 1
20560: ARRAY
20561: PPUSH
20562: LD_EXP 91
20566: PUSH
20567: LD_VAR 0 1
20571: ARRAY
20572: PUSH
20573: LD_VAR 0 2
20577: ARRAY
20578: PUSH
20579: LD_INT 2
20581: ARRAY
20582: PPUSH
20583: CALL_OW 428
20587: ST_TO_ADDR
// if not tmp then
20588: LD_VAR 0 4
20592: NOT
20593: IFFALSE 20597
// continue ;
20595: GO 20512
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20597: LD_VAR 0 4
20601: PUSH
20602: LD_INT 81
20604: PUSH
20605: LD_VAR 0 3
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PPUSH
20614: CALL_OW 69
20618: IN
20619: PUSH
20620: LD_EXP 91
20624: PUSH
20625: LD_VAR 0 1
20629: ARRAY
20630: PUSH
20631: LD_VAR 0 2
20635: ARRAY
20636: PUSH
20637: LD_INT 1
20639: ARRAY
20640: PPUSH
20641: LD_EXP 91
20645: PUSH
20646: LD_VAR 0 1
20650: ARRAY
20651: PUSH
20652: LD_VAR 0 2
20656: ARRAY
20657: PUSH
20658: LD_INT 2
20660: ARRAY
20661: PPUSH
20662: CALL_OW 458
20666: AND
20667: IFFALSE 20761
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20669: LD_EXP 91
20673: PUSH
20674: LD_VAR 0 1
20678: ARRAY
20679: PUSH
20680: LD_VAR 0 2
20684: ARRAY
20685: PUSH
20686: LD_INT 1
20688: ARRAY
20689: PPUSH
20690: LD_EXP 91
20694: PUSH
20695: LD_VAR 0 1
20699: ARRAY
20700: PUSH
20701: LD_VAR 0 2
20705: ARRAY
20706: PUSH
20707: LD_INT 2
20709: ARRAY
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20720: LD_ADDR_EXP 91
20724: PUSH
20725: LD_EXP 91
20729: PPUSH
20730: LD_VAR 0 1
20734: PPUSH
20735: LD_EXP 91
20739: PUSH
20740: LD_VAR 0 1
20744: ARRAY
20745: PPUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 3
20755: PPUSH
20756: CALL_OW 1
20760: ST_TO_ADDR
// end ; end ;
20761: GO 20512
20763: POP
20764: POP
// end ;
20765: GO 20430
20767: POP
20768: POP
// end ;
20769: PPOPN 4
20771: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20772: LD_INT 0
20774: PPUSH
20775: PPUSH
// result := false ;
20776: LD_ADDR_VAR 0 4
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 264
20793: PUSH
20794: LD_EXP 100
20798: EQUAL
20799: NOT
20800: IFFALSE 20804
// exit ;
20802: GO 21044
// index := GetElementIndex ( minersList , unit ) ;
20804: LD_ADDR_VAR 0 5
20808: PUSH
20809: LD_EXP 90
20813: PPUSH
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL 27196 0 2
20823: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20824: LD_EXP 91
20828: PUSH
20829: LD_VAR 0 5
20833: ARRAY
20834: PUSH
20835: LD_EXP 92
20839: GREATEREQUAL
20840: IFFALSE 20844
// exit ;
20842: GO 21044
// ComMoveXY ( unit , x , y ) ;
20844: LD_VAR 0 1
20848: PPUSH
20849: LD_VAR 0 2
20853: PPUSH
20854: LD_VAR 0 3
20858: PPUSH
20859: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20863: LD_INT 35
20865: PPUSH
20866: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: CALL 57968 0 3
20889: NOT
20890: PUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 314
20900: AND
20901: IFFALSE 20905
// exit ;
20903: GO 21044
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: CALL_OW 428
20919: PUSH
20920: LD_VAR 0 1
20924: EQUAL
20925: PUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 314
20935: NOT
20936: AND
20937: IFFALSE 20863
// PlaySoundXY ( x , y , PlantMine ) ;
20939: LD_VAR 0 2
20943: PPUSH
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_STRING PlantMine
20951: PPUSH
20952: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20956: LD_VAR 0 2
20960: PPUSH
20961: LD_VAR 0 3
20965: PPUSH
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 255
20975: PPUSH
20976: LD_INT 0
20978: PPUSH
20979: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20983: LD_ADDR_EXP 91
20987: PUSH
20988: LD_EXP 91
20992: PPUSH
20993: LD_VAR 0 5
20997: PUSH
20998: LD_EXP 91
21002: PUSH
21003: LD_VAR 0 5
21007: ARRAY
21008: PUSH
21009: LD_INT 1
21011: PLUS
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PPUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_VAR 0 3
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PPUSH
21031: CALL 27411 0 3
21035: ST_TO_ADDR
// result := true ;
21036: LD_ADDR_VAR 0 4
21040: PUSH
21041: LD_INT 1
21043: ST_TO_ADDR
// end ;
21044: LD_VAR 0 4
21048: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
// if not unit in minersList then
21054: LD_VAR 0 1
21058: PUSH
21059: LD_EXP 90
21063: IN
21064: NOT
21065: IFFALSE 21069
// exit ;
21067: GO 21461
// index := GetElementIndex ( minersList , unit ) ;
21069: LD_ADDR_VAR 0 6
21073: PUSH
21074: LD_EXP 90
21078: PPUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL 27196 0 2
21088: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21089: LD_ADDR_VAR 0 5
21093: PUSH
21094: DOUBLE
21095: LD_EXP 91
21099: PUSH
21100: LD_VAR 0 6
21104: ARRAY
21105: INC
21106: ST_TO_ADDR
21107: LD_INT 1
21109: PUSH
21110: FOR_DOWNTO
21111: IFFALSE 21272
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21113: LD_EXP 91
21117: PUSH
21118: LD_VAR 0 6
21122: ARRAY
21123: PUSH
21124: LD_VAR 0 5
21128: ARRAY
21129: PUSH
21130: LD_INT 1
21132: ARRAY
21133: PUSH
21134: LD_VAR 0 2
21138: EQUAL
21139: PUSH
21140: LD_EXP 91
21144: PUSH
21145: LD_VAR 0 6
21149: ARRAY
21150: PUSH
21151: LD_VAR 0 5
21155: ARRAY
21156: PUSH
21157: LD_INT 2
21159: ARRAY
21160: PUSH
21161: LD_VAR 0 3
21165: EQUAL
21166: AND
21167: IFFALSE 21270
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21169: LD_EXP 91
21173: PUSH
21174: LD_VAR 0 6
21178: ARRAY
21179: PUSH
21180: LD_VAR 0 5
21184: ARRAY
21185: PUSH
21186: LD_INT 1
21188: ARRAY
21189: PPUSH
21190: LD_EXP 91
21194: PUSH
21195: LD_VAR 0 6
21199: ARRAY
21200: PUSH
21201: LD_VAR 0 5
21205: ARRAY
21206: PUSH
21207: LD_INT 2
21209: ARRAY
21210: PPUSH
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 255
21220: PPUSH
21221: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21225: LD_ADDR_EXP 91
21229: PUSH
21230: LD_EXP 91
21234: PPUSH
21235: LD_VAR 0 6
21239: PPUSH
21240: LD_EXP 91
21244: PUSH
21245: LD_VAR 0 6
21249: ARRAY
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL_OW 3
21260: PPUSH
21261: CALL_OW 1
21265: ST_TO_ADDR
// exit ;
21266: POP
21267: POP
21268: GO 21461
// end ; end ;
21270: GO 21110
21272: POP
21273: POP
// for i := minerMinesList [ index ] downto 1 do
21274: LD_ADDR_VAR 0 5
21278: PUSH
21279: DOUBLE
21280: LD_EXP 91
21284: PUSH
21285: LD_VAR 0 6
21289: ARRAY
21290: INC
21291: ST_TO_ADDR
21292: LD_INT 1
21294: PUSH
21295: FOR_DOWNTO
21296: IFFALSE 21459
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21298: LD_EXP 91
21302: PUSH
21303: LD_VAR 0 6
21307: ARRAY
21308: PUSH
21309: LD_VAR 0 5
21313: ARRAY
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: LD_EXP 91
21323: PUSH
21324: LD_VAR 0 6
21328: ARRAY
21329: PUSH
21330: LD_VAR 0 5
21334: ARRAY
21335: PUSH
21336: LD_INT 2
21338: ARRAY
21339: PPUSH
21340: LD_VAR 0 2
21344: PPUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: CALL_OW 298
21354: PUSH
21355: LD_INT 6
21357: LESS
21358: IFFALSE 21457
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21360: LD_EXP 91
21364: PUSH
21365: LD_VAR 0 6
21369: ARRAY
21370: PUSH
21371: LD_VAR 0 5
21375: ARRAY
21376: PUSH
21377: LD_INT 1
21379: ARRAY
21380: PPUSH
21381: LD_EXP 91
21385: PUSH
21386: LD_VAR 0 6
21390: ARRAY
21391: PUSH
21392: LD_VAR 0 5
21396: ARRAY
21397: PUSH
21398: LD_INT 2
21400: ARRAY
21401: PPUSH
21402: LD_VAR 0 1
21406: PPUSH
21407: CALL_OW 255
21411: PPUSH
21412: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21416: LD_ADDR_EXP 91
21420: PUSH
21421: LD_EXP 91
21425: PPUSH
21426: LD_VAR 0 6
21430: PPUSH
21431: LD_EXP 91
21435: PUSH
21436: LD_VAR 0 6
21440: ARRAY
21441: PPUSH
21442: LD_VAR 0 5
21446: PPUSH
21447: CALL_OW 3
21451: PPUSH
21452: CALL_OW 1
21456: ST_TO_ADDR
// end ; end ;
21457: GO 21295
21459: POP
21460: POP
// end ;
21461: LD_VAR 0 4
21465: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21466: LD_INT 0
21468: PPUSH
21469: PPUSH
21470: PPUSH
21471: PPUSH
21472: PPUSH
21473: PPUSH
21474: PPUSH
21475: PPUSH
21476: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 264
21486: PUSH
21487: LD_EXP 100
21491: EQUAL
21492: NOT
21493: PUSH
21494: LD_VAR 0 1
21498: PUSH
21499: LD_EXP 90
21503: IN
21504: NOT
21505: OR
21506: IFFALSE 21510
// exit ;
21508: GO 21832
// index := GetElementIndex ( minersList , unit ) ;
21510: LD_ADDR_VAR 0 6
21514: PUSH
21515: LD_EXP 90
21519: PPUSH
21520: LD_VAR 0 1
21524: PPUSH
21525: CALL 27196 0 2
21529: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21530: LD_ADDR_VAR 0 8
21534: PUSH
21535: LD_EXP 92
21539: PUSH
21540: LD_EXP 91
21544: PUSH
21545: LD_VAR 0 6
21549: ARRAY
21550: MINUS
21551: ST_TO_ADDR
// if not minesFreeAmount then
21552: LD_VAR 0 8
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21832
// tmp := [ ] ;
21561: LD_ADDR_VAR 0 7
21565: PUSH
21566: EMPTY
21567: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21568: LD_ADDR_VAR 0 5
21572: PUSH
21573: DOUBLE
21574: LD_INT 1
21576: DEC
21577: ST_TO_ADDR
21578: LD_VAR 0 8
21582: PUSH
21583: FOR_TO
21584: IFFALSE 21779
// begin _d := rand ( 0 , 5 ) ;
21586: LD_ADDR_VAR 0 11
21590: PUSH
21591: LD_INT 0
21593: PPUSH
21594: LD_INT 5
21596: PPUSH
21597: CALL_OW 12
21601: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21602: LD_ADDR_VAR 0 12
21606: PUSH
21607: LD_INT 2
21609: PPUSH
21610: LD_INT 6
21612: PPUSH
21613: CALL_OW 12
21617: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21618: LD_ADDR_VAR 0 9
21622: PUSH
21623: LD_VAR 0 2
21627: PPUSH
21628: LD_VAR 0 11
21632: PPUSH
21633: LD_VAR 0 12
21637: PPUSH
21638: CALL_OW 272
21642: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21643: LD_ADDR_VAR 0 10
21647: PUSH
21648: LD_VAR 0 3
21652: PPUSH
21653: LD_VAR 0 11
21657: PPUSH
21658: LD_VAR 0 12
21662: PPUSH
21663: CALL_OW 273
21667: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21668: LD_VAR 0 9
21672: PPUSH
21673: LD_VAR 0 10
21677: PPUSH
21678: CALL_OW 488
21682: PUSH
21683: LD_VAR 0 9
21687: PUSH
21688: LD_VAR 0 10
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_VAR 0 7
21701: IN
21702: NOT
21703: AND
21704: PUSH
21705: LD_VAR 0 9
21709: PPUSH
21710: LD_VAR 0 10
21714: PPUSH
21715: CALL_OW 458
21719: NOT
21720: AND
21721: IFFALSE 21763
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21723: LD_ADDR_VAR 0 7
21727: PUSH
21728: LD_VAR 0 7
21732: PPUSH
21733: LD_VAR 0 7
21737: PUSH
21738: LD_INT 1
21740: PLUS
21741: PPUSH
21742: LD_VAR 0 9
21746: PUSH
21747: LD_VAR 0 10
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 1
21760: ST_TO_ADDR
21761: GO 21777
// i := i - 1 ;
21763: LD_ADDR_VAR 0 5
21767: PUSH
21768: LD_VAR 0 5
21772: PUSH
21773: LD_INT 1
21775: MINUS
21776: ST_TO_ADDR
// end ;
21777: GO 21583
21779: POP
21780: POP
// for i in tmp do
21781: LD_ADDR_VAR 0 5
21785: PUSH
21786: LD_VAR 0 7
21790: PUSH
21791: FOR_IN
21792: IFFALSE 21830
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21794: LD_VAR 0 1
21798: PPUSH
21799: LD_VAR 0 5
21803: PUSH
21804: LD_INT 1
21806: ARRAY
21807: PPUSH
21808: LD_VAR 0 5
21812: PUSH
21813: LD_INT 2
21815: ARRAY
21816: PPUSH
21817: CALL 20772 0 3
21821: NOT
21822: IFFALSE 21828
// exit ;
21824: POP
21825: POP
21826: GO 21832
21828: GO 21791
21830: POP
21831: POP
// end ;
21832: LD_VAR 0 4
21836: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21837: LD_INT 0
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
21845: PPUSH
// if not GetClass ( unit ) = class_sniper then
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 257
21855: PUSH
21856: LD_INT 5
21858: EQUAL
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 22252
// dist := 8 ;
21864: LD_ADDR_VAR 0 5
21868: PUSH
21869: LD_INT 8
21871: ST_TO_ADDR
// viewRange := 12 ;
21872: LD_ADDR_VAR 0 7
21876: PUSH
21877: LD_INT 12
21879: ST_TO_ADDR
// side := GetSide ( unit ) ;
21880: LD_ADDR_VAR 0 6
21884: PUSH
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 255
21894: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21895: LD_INT 61
21897: PPUSH
21898: LD_VAR 0 6
21902: PPUSH
21903: CALL_OW 321
21907: PUSH
21908: LD_INT 2
21910: EQUAL
21911: IFFALSE 21921
// viewRange := 16 ;
21913: LD_ADDR_VAR 0 7
21917: PUSH
21918: LD_INT 16
21920: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21921: LD_VAR 0 1
21925: PPUSH
21926: LD_VAR 0 2
21930: PPUSH
21931: LD_VAR 0 3
21935: PPUSH
21936: CALL_OW 297
21940: PUSH
21941: LD_VAR 0 5
21945: GREATER
21946: IFFALSE 22025
// begin ComMoveXY ( unit , x , y ) ;
21948: LD_VAR 0 1
21952: PPUSH
21953: LD_VAR 0 2
21957: PPUSH
21958: LD_VAR 0 3
21962: PPUSH
21963: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21967: LD_INT 35
21969: PPUSH
21970: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21974: LD_VAR 0 1
21978: PPUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_VAR 0 3
21988: PPUSH
21989: CALL 57968 0 3
21993: NOT
21994: IFFALSE 21998
// exit ;
21996: GO 22252
// until GetDistUnitXY ( unit , x , y ) < dist ;
21998: LD_VAR 0 1
22002: PPUSH
22003: LD_VAR 0 2
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: CALL_OW 297
22017: PUSH
22018: LD_VAR 0 5
22022: LESS
22023: IFFALSE 21967
// end ; ComTurnXY ( unit , x , y ) ;
22025: LD_VAR 0 1
22029: PPUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: CALL_OW 118
// wait ( 5 ) ;
22044: LD_INT 5
22046: PPUSH
22047: CALL_OW 67
// _d := GetDir ( unit ) ;
22051: LD_ADDR_VAR 0 10
22055: PUSH
22056: LD_VAR 0 1
22060: PPUSH
22061: CALL_OW 254
22065: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22066: LD_ADDR_VAR 0 8
22070: PUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 250
22080: PPUSH
22081: LD_VAR 0 10
22085: PPUSH
22086: LD_VAR 0 5
22090: PPUSH
22091: CALL_OW 272
22095: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22096: LD_ADDR_VAR 0 9
22100: PUSH
22101: LD_VAR 0 1
22105: PPUSH
22106: CALL_OW 251
22110: PPUSH
22111: LD_VAR 0 10
22115: PPUSH
22116: LD_VAR 0 5
22120: PPUSH
22121: CALL_OW 273
22125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22126: LD_VAR 0 8
22130: PPUSH
22131: LD_VAR 0 9
22135: PPUSH
22136: CALL_OW 488
22140: NOT
22141: IFFALSE 22145
// exit ;
22143: GO 22252
// ComAnimCustom ( unit , 1 ) ;
22145: LD_VAR 0 1
22149: PPUSH
22150: LD_INT 1
22152: PPUSH
22153: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22157: LD_VAR 0 8
22161: PPUSH
22162: LD_VAR 0 9
22166: PPUSH
22167: LD_VAR 0 6
22171: PPUSH
22172: LD_VAR 0 7
22176: PPUSH
22177: CALL_OW 330
// repeat wait ( 1 ) ;
22181: LD_INT 1
22183: PPUSH
22184: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 316
22197: PUSH
22198: LD_VAR 0 1
22202: PPUSH
22203: CALL_OW 314
22207: OR
22208: PUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 302
22218: NOT
22219: OR
22220: PUSH
22221: LD_VAR 0 1
22225: PPUSH
22226: CALL_OW 301
22230: OR
22231: IFFALSE 22181
// RemoveSeeing ( _x , _y , side ) ;
22233: LD_VAR 0 8
22237: PPUSH
22238: LD_VAR 0 9
22242: PPUSH
22243: LD_VAR 0 6
22247: PPUSH
22248: CALL_OW 331
// end ; end_of_file
22252: LD_VAR 0 4
22256: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22257: LD_INT 0
22259: PPUSH
// ar_miner := 81 ;
22260: LD_ADDR_EXP 100
22264: PUSH
22265: LD_INT 81
22267: ST_TO_ADDR
// ar_crane := 88 ;
22268: LD_ADDR_EXP 99
22272: PUSH
22273: LD_INT 88
22275: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22276: LD_ADDR_EXP 94
22280: PUSH
22281: LD_INT 89
22283: ST_TO_ADDR
// us_hack := 99 ;
22284: LD_ADDR_EXP 95
22288: PUSH
22289: LD_INT 99
22291: ST_TO_ADDR
// us_artillery := 97 ;
22292: LD_ADDR_EXP 96
22296: PUSH
22297: LD_INT 97
22299: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22300: LD_ADDR_EXP 97
22304: PUSH
22305: LD_INT 91
22307: ST_TO_ADDR
// ar_mortar := 92 ;
22308: LD_ADDR_EXP 98
22312: PUSH
22313: LD_INT 92
22315: ST_TO_ADDR
// ru_radar := 98 ;
22316: LD_ADDR_EXP 93
22320: PUSH
22321: LD_INT 98
22323: ST_TO_ADDR
// tech_Artillery := 80 ;
22324: LD_ADDR_EXP 101
22328: PUSH
22329: LD_INT 80
22331: ST_TO_ADDR
// tech_RadMat := 81 ;
22332: LD_ADDR_EXP 102
22336: PUSH
22337: LD_INT 81
22339: ST_TO_ADDR
// tech_BasicTools := 82 ;
22340: LD_ADDR_EXP 103
22344: PUSH
22345: LD_INT 82
22347: ST_TO_ADDR
// tech_Cargo := 83 ;
22348: LD_ADDR_EXP 104
22352: PUSH
22353: LD_INT 83
22355: ST_TO_ADDR
// tech_Track := 84 ;
22356: LD_ADDR_EXP 105
22360: PUSH
22361: LD_INT 84
22363: ST_TO_ADDR
// tech_Crane := 85 ;
22364: LD_ADDR_EXP 106
22368: PUSH
22369: LD_INT 85
22371: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22372: LD_ADDR_EXP 107
22376: PUSH
22377: LD_INT 86
22379: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22380: LD_ADDR_EXP 108
22384: PUSH
22385: LD_INT 87
22387: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22388: LD_ADDR_EXP 109
22392: PUSH
22393: LD_INT 88
22395: ST_TO_ADDR
// class_mastodont := 31 ;
22396: LD_ADDR_EXP 110
22400: PUSH
22401: LD_INT 31
22403: ST_TO_ADDR
// class_horse := 21 ;
22404: LD_ADDR_EXP 111
22408: PUSH
22409: LD_INT 21
22411: ST_TO_ADDR
// end ;
22412: LD_VAR 0 1
22416: RET
// every 1 do
22417: GO 22419
22419: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22420: CALL 22257 0 0
22424: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22425: LD_INT 0
22427: PPUSH
22428: PPUSH
// if exist_mode then
22429: LD_VAR 0 2
22433: IFFALSE 22458
// unit := CreateCharacter ( prefix & ident ) else
22435: LD_ADDR_VAR 0 5
22439: PUSH
22440: LD_VAR 0 3
22444: PUSH
22445: LD_VAR 0 1
22449: STR
22450: PPUSH
22451: CALL_OW 34
22455: ST_TO_ADDR
22456: GO 22473
// unit := NewCharacter ( ident ) ;
22458: LD_ADDR_VAR 0 5
22462: PUSH
22463: LD_VAR 0 1
22467: PPUSH
22468: CALL_OW 25
22472: ST_TO_ADDR
// result := unit ;
22473: LD_ADDR_VAR 0 4
22477: PUSH
22478: LD_VAR 0 5
22482: ST_TO_ADDR
// end ;
22483: LD_VAR 0 4
22487: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22488: LD_INT 0
22490: PPUSH
22491: PPUSH
// if not side or not nation then
22492: LD_VAR 0 1
22496: NOT
22497: PUSH
22498: LD_VAR 0 2
22502: NOT
22503: OR
22504: IFFALSE 22508
// exit ;
22506: GO 23276
// case nation of nation_american :
22508: LD_VAR 0 2
22512: PUSH
22513: LD_INT 1
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22735
22521: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22522: LD_ADDR_VAR 0 4
22526: PUSH
22527: LD_INT 35
22529: PUSH
22530: LD_INT 45
22532: PUSH
22533: LD_INT 46
22535: PUSH
22536: LD_INT 47
22538: PUSH
22539: LD_INT 82
22541: PUSH
22542: LD_INT 83
22544: PUSH
22545: LD_INT 84
22547: PUSH
22548: LD_INT 85
22550: PUSH
22551: LD_INT 86
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 6
22562: PUSH
22563: LD_INT 15
22565: PUSH
22566: LD_INT 16
22568: PUSH
22569: LD_INT 7
22571: PUSH
22572: LD_INT 12
22574: PUSH
22575: LD_INT 13
22577: PUSH
22578: LD_INT 10
22580: PUSH
22581: LD_INT 14
22583: PUSH
22584: LD_INT 20
22586: PUSH
22587: LD_INT 21
22589: PUSH
22590: LD_INT 22
22592: PUSH
22593: LD_INT 25
22595: PUSH
22596: LD_INT 32
22598: PUSH
22599: LD_INT 27
22601: PUSH
22602: LD_INT 36
22604: PUSH
22605: LD_INT 69
22607: PUSH
22608: LD_INT 39
22610: PUSH
22611: LD_INT 34
22613: PUSH
22614: LD_INT 40
22616: PUSH
22617: LD_INT 48
22619: PUSH
22620: LD_INT 49
22622: PUSH
22623: LD_INT 50
22625: PUSH
22626: LD_INT 51
22628: PUSH
22629: LD_INT 52
22631: PUSH
22632: LD_INT 53
22634: PUSH
22635: LD_INT 54
22637: PUSH
22638: LD_INT 55
22640: PUSH
22641: LD_INT 56
22643: PUSH
22644: LD_INT 57
22646: PUSH
22647: LD_INT 58
22649: PUSH
22650: LD_INT 59
22652: PUSH
22653: LD_INT 60
22655: PUSH
22656: LD_INT 61
22658: PUSH
22659: LD_INT 62
22661: PUSH
22662: LD_INT 80
22664: PUSH
22665: LD_INT 82
22667: PUSH
22668: LD_INT 83
22670: PUSH
22671: LD_INT 84
22673: PUSH
22674: LD_INT 85
22676: PUSH
22677: LD_INT 86
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: ST_TO_ADDR
22733: GO 23200
22735: LD_INT 2
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22969
22743: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22744: LD_ADDR_VAR 0 4
22748: PUSH
22749: LD_INT 35
22751: PUSH
22752: LD_INT 45
22754: PUSH
22755: LD_INT 46
22757: PUSH
22758: LD_INT 47
22760: PUSH
22761: LD_INT 82
22763: PUSH
22764: LD_INT 83
22766: PUSH
22767: LD_INT 84
22769: PUSH
22770: LD_INT 85
22772: PUSH
22773: LD_INT 87
22775: PUSH
22776: LD_INT 70
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 11
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 6
22796: PUSH
22797: LD_INT 15
22799: PUSH
22800: LD_INT 18
22802: PUSH
22803: LD_INT 7
22805: PUSH
22806: LD_INT 17
22808: PUSH
22809: LD_INT 8
22811: PUSH
22812: LD_INT 20
22814: PUSH
22815: LD_INT 21
22817: PUSH
22818: LD_INT 22
22820: PUSH
22821: LD_INT 72
22823: PUSH
22824: LD_INT 26
22826: PUSH
22827: LD_INT 69
22829: PUSH
22830: LD_INT 39
22832: PUSH
22833: LD_INT 40
22835: PUSH
22836: LD_INT 41
22838: PUSH
22839: LD_INT 42
22841: PUSH
22842: LD_INT 43
22844: PUSH
22845: LD_INT 48
22847: PUSH
22848: LD_INT 49
22850: PUSH
22851: LD_INT 50
22853: PUSH
22854: LD_INT 51
22856: PUSH
22857: LD_INT 52
22859: PUSH
22860: LD_INT 53
22862: PUSH
22863: LD_INT 54
22865: PUSH
22866: LD_INT 55
22868: PUSH
22869: LD_INT 56
22871: PUSH
22872: LD_INT 60
22874: PUSH
22875: LD_INT 61
22877: PUSH
22878: LD_INT 62
22880: PUSH
22881: LD_INT 66
22883: PUSH
22884: LD_INT 67
22886: PUSH
22887: LD_INT 68
22889: PUSH
22890: LD_INT 81
22892: PUSH
22893: LD_INT 82
22895: PUSH
22896: LD_INT 83
22898: PUSH
22899: LD_INT 84
22901: PUSH
22902: LD_INT 85
22904: PUSH
22905: LD_INT 87
22907: PUSH
22908: LD_INT 88
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: ST_TO_ADDR
22967: GO 23200
22969: LD_INT 3
22971: DOUBLE
22972: EQUAL
22973: IFTRUE 22977
22975: GO 23199
22977: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: LD_INT 46
22985: PUSH
22986: LD_INT 47
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 82
22997: PUSH
22998: LD_INT 83
23000: PUSH
23001: LD_INT 84
23003: PUSH
23004: LD_INT 85
23006: PUSH
23007: LD_INT 86
23009: PUSH
23010: LD_INT 11
23012: PUSH
23013: LD_INT 9
23015: PUSH
23016: LD_INT 20
23018: PUSH
23019: LD_INT 19
23021: PUSH
23022: LD_INT 21
23024: PUSH
23025: LD_INT 24
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 25
23033: PUSH
23034: LD_INT 28
23036: PUSH
23037: LD_INT 29
23039: PUSH
23040: LD_INT 30
23042: PUSH
23043: LD_INT 31
23045: PUSH
23046: LD_INT 37
23048: PUSH
23049: LD_INT 38
23051: PUSH
23052: LD_INT 32
23054: PUSH
23055: LD_INT 27
23057: PUSH
23058: LD_INT 33
23060: PUSH
23061: LD_INT 69
23063: PUSH
23064: LD_INT 39
23066: PUSH
23067: LD_INT 34
23069: PUSH
23070: LD_INT 40
23072: PUSH
23073: LD_INT 71
23075: PUSH
23076: LD_INT 23
23078: PUSH
23079: LD_INT 44
23081: PUSH
23082: LD_INT 48
23084: PUSH
23085: LD_INT 49
23087: PUSH
23088: LD_INT 50
23090: PUSH
23091: LD_INT 51
23093: PUSH
23094: LD_INT 52
23096: PUSH
23097: LD_INT 53
23099: PUSH
23100: LD_INT 54
23102: PUSH
23103: LD_INT 55
23105: PUSH
23106: LD_INT 56
23108: PUSH
23109: LD_INT 57
23111: PUSH
23112: LD_INT 58
23114: PUSH
23115: LD_INT 59
23117: PUSH
23118: LD_INT 63
23120: PUSH
23121: LD_INT 64
23123: PUSH
23124: LD_INT 65
23126: PUSH
23127: LD_INT 82
23129: PUSH
23130: LD_INT 83
23132: PUSH
23133: LD_INT 84
23135: PUSH
23136: LD_INT 85
23138: PUSH
23139: LD_INT 86
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
23197: GO 23200
23199: POP
// if state > - 1 and state < 3 then
23200: LD_VAR 0 3
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: GREATER
23209: PUSH
23210: LD_VAR 0 3
23214: PUSH
23215: LD_INT 3
23217: LESS
23218: AND
23219: IFFALSE 23276
// for i in result do
23221: LD_ADDR_VAR 0 5
23225: PUSH
23226: LD_VAR 0 4
23230: PUSH
23231: FOR_IN
23232: IFFALSE 23274
// if GetTech ( i , side ) <> state then
23234: LD_VAR 0 5
23238: PPUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: CALL_OW 321
23248: PUSH
23249: LD_VAR 0 3
23253: NONEQUAL
23254: IFFALSE 23272
// result := result diff i ;
23256: LD_ADDR_VAR 0 4
23260: PUSH
23261: LD_VAR 0 4
23265: PUSH
23266: LD_VAR 0 5
23270: DIFF
23271: ST_TO_ADDR
23272: GO 23231
23274: POP
23275: POP
// end ;
23276: LD_VAR 0 4
23280: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23281: LD_INT 0
23283: PPUSH
23284: PPUSH
23285: PPUSH
// result := true ;
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 1
23293: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23294: LD_ADDR_VAR 0 5
23298: PUSH
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 480
23308: ST_TO_ADDR
// if not tmp then
23309: LD_VAR 0 5
23313: NOT
23314: IFFALSE 23318
// exit ;
23316: GO 23367
// for i in tmp do
23318: LD_ADDR_VAR 0 4
23322: PUSH
23323: LD_VAR 0 5
23327: PUSH
23328: FOR_IN
23329: IFFALSE 23365
// if GetTech ( i , side ) <> state_researched then
23331: LD_VAR 0 4
23335: PPUSH
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 321
23345: PUSH
23346: LD_INT 2
23348: NONEQUAL
23349: IFFALSE 23363
// begin result := false ;
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 0
23358: ST_TO_ADDR
// exit ;
23359: POP
23360: POP
23361: GO 23367
// end ;
23363: GO 23328
23365: POP
23366: POP
// end ;
23367: LD_VAR 0 3
23371: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23372: LD_INT 0
23374: PPUSH
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
23381: PPUSH
23382: PPUSH
23383: PPUSH
23384: PPUSH
23385: PPUSH
23386: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23387: LD_VAR 0 1
23391: NOT
23392: PUSH
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 257
23402: PUSH
23403: LD_INT 9
23405: NONEQUAL
23406: OR
23407: IFFALSE 23411
// exit ;
23409: GO 23984
// side := GetSide ( unit ) ;
23411: LD_ADDR_VAR 0 9
23415: PUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 255
23425: ST_TO_ADDR
// tech_space := tech_spacanom ;
23426: LD_ADDR_VAR 0 12
23430: PUSH
23431: LD_INT 29
23433: ST_TO_ADDR
// tech_time := tech_taurad ;
23434: LD_ADDR_VAR 0 13
23438: PUSH
23439: LD_INT 28
23441: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23442: LD_ADDR_VAR 0 11
23446: PUSH
23447: LD_VAR 0 1
23451: PPUSH
23452: CALL_OW 310
23456: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23457: LD_VAR 0 11
23461: PPUSH
23462: CALL_OW 247
23466: PUSH
23467: LD_INT 2
23469: EQUAL
23470: IFFALSE 23474
// exit ;
23472: GO 23984
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23474: LD_ADDR_VAR 0 8
23478: PUSH
23479: LD_INT 81
23481: PUSH
23482: LD_VAR 0 9
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 3
23493: PUSH
23494: LD_INT 21
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PPUSH
23512: CALL_OW 69
23516: ST_TO_ADDR
// if not tmp then
23517: LD_VAR 0 8
23521: NOT
23522: IFFALSE 23526
// exit ;
23524: GO 23984
// if in_unit then
23526: LD_VAR 0 11
23530: IFFALSE 23554
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23532: LD_ADDR_VAR 0 10
23536: PUSH
23537: LD_VAR 0 8
23541: PPUSH
23542: LD_VAR 0 11
23546: PPUSH
23547: CALL_OW 74
23551: ST_TO_ADDR
23552: GO 23574
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23554: LD_ADDR_VAR 0 10
23558: PUSH
23559: LD_VAR 0 8
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 74
23573: ST_TO_ADDR
// if not enemy then
23574: LD_VAR 0 10
23578: NOT
23579: IFFALSE 23583
// exit ;
23581: GO 23984
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23583: LD_VAR 0 11
23587: PUSH
23588: LD_VAR 0 11
23592: PPUSH
23593: LD_VAR 0 10
23597: PPUSH
23598: CALL_OW 296
23602: PUSH
23603: LD_INT 13
23605: GREATER
23606: AND
23607: PUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_VAR 0 10
23617: PPUSH
23618: CALL_OW 296
23622: PUSH
23623: LD_INT 12
23625: GREATER
23626: OR
23627: IFFALSE 23631
// exit ;
23629: GO 23984
// missile := [ 1 ] ;
23631: LD_ADDR_VAR 0 14
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: EMPTY
23640: LIST
23641: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23642: LD_VAR 0 9
23646: PPUSH
23647: LD_VAR 0 12
23651: PPUSH
23652: CALL_OW 325
23656: IFFALSE 23685
// missile := Insert ( missile , missile + 1 , 2 ) ;
23658: LD_ADDR_VAR 0 14
23662: PUSH
23663: LD_VAR 0 14
23667: PPUSH
23668: LD_VAR 0 14
23672: PUSH
23673: LD_INT 1
23675: PLUS
23676: PPUSH
23677: LD_INT 2
23679: PPUSH
23680: CALL_OW 2
23684: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23685: LD_VAR 0 9
23689: PPUSH
23690: LD_VAR 0 13
23694: PPUSH
23695: CALL_OW 325
23699: PUSH
23700: LD_VAR 0 10
23704: PPUSH
23705: CALL_OW 255
23709: PPUSH
23710: LD_VAR 0 13
23714: PPUSH
23715: CALL_OW 325
23719: NOT
23720: AND
23721: IFFALSE 23750
// missile := Insert ( missile , missile + 1 , 3 ) ;
23723: LD_ADDR_VAR 0 14
23727: PUSH
23728: LD_VAR 0 14
23732: PPUSH
23733: LD_VAR 0 14
23737: PUSH
23738: LD_INT 1
23740: PLUS
23741: PPUSH
23742: LD_INT 3
23744: PPUSH
23745: CALL_OW 2
23749: ST_TO_ADDR
// if missile < 2 then
23750: LD_VAR 0 14
23754: PUSH
23755: LD_INT 2
23757: LESS
23758: IFFALSE 23762
// exit ;
23760: GO 23984
// x := GetX ( enemy ) ;
23762: LD_ADDR_VAR 0 4
23766: PUSH
23767: LD_VAR 0 10
23771: PPUSH
23772: CALL_OW 250
23776: ST_TO_ADDR
// y := GetY ( enemy ) ;
23777: LD_ADDR_VAR 0 5
23781: PUSH
23782: LD_VAR 0 10
23786: PPUSH
23787: CALL_OW 251
23791: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23792: LD_ADDR_VAR 0 6
23796: PUSH
23797: LD_VAR 0 4
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PPUSH
23806: LD_INT 1
23808: PPUSH
23809: CALL_OW 12
23813: PLUS
23814: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23815: LD_ADDR_VAR 0 7
23819: PUSH
23820: LD_VAR 0 5
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 12
23836: PLUS
23837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23838: LD_VAR 0 6
23842: PPUSH
23843: LD_VAR 0 7
23847: PPUSH
23848: CALL_OW 488
23852: NOT
23853: IFFALSE 23875
// begin _x := x ;
23855: LD_ADDR_VAR 0 6
23859: PUSH
23860: LD_VAR 0 4
23864: ST_TO_ADDR
// _y := y ;
23865: LD_ADDR_VAR 0 7
23869: PUSH
23870: LD_VAR 0 5
23874: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_INT 1
23882: PPUSH
23883: LD_VAR 0 14
23887: PPUSH
23888: CALL_OW 12
23892: ST_TO_ADDR
// case i of 1 :
23893: LD_VAR 0 3
23897: PUSH
23898: LD_INT 1
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23923
23906: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23907: LD_VAR 0 1
23911: PPUSH
23912: LD_VAR 0 10
23916: PPUSH
23917: CALL_OW 115
23921: GO 23984
23923: LD_INT 2
23925: DOUBLE
23926: EQUAL
23927: IFTRUE 23931
23929: GO 23953
23931: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23932: LD_VAR 0 1
23936: PPUSH
23937: LD_VAR 0 6
23941: PPUSH
23942: LD_VAR 0 7
23946: PPUSH
23947: CALL_OW 153
23951: GO 23984
23953: LD_INT 3
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23983
23961: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23962: LD_VAR 0 1
23966: PPUSH
23967: LD_VAR 0 6
23971: PPUSH
23972: LD_VAR 0 7
23976: PPUSH
23977: CALL_OW 154
23981: GO 23984
23983: POP
// end ;
23984: LD_VAR 0 2
23988: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
23995: PPUSH
23996: PPUSH
// if not unit or not building then
23997: LD_VAR 0 1
24001: NOT
24002: PUSH
24003: LD_VAR 0 2
24007: NOT
24008: OR
24009: IFFALSE 24013
// exit ;
24011: GO 24171
// x := GetX ( building ) ;
24013: LD_ADDR_VAR 0 5
24017: PUSH
24018: LD_VAR 0 2
24022: PPUSH
24023: CALL_OW 250
24027: ST_TO_ADDR
// y := GetY ( building ) ;
24028: LD_ADDR_VAR 0 6
24032: PUSH
24033: LD_VAR 0 2
24037: PPUSH
24038: CALL_OW 251
24042: ST_TO_ADDR
// for i = 0 to 5 do
24043: LD_ADDR_VAR 0 4
24047: PUSH
24048: DOUBLE
24049: LD_INT 0
24051: DEC
24052: ST_TO_ADDR
24053: LD_INT 5
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24169
// begin _x := ShiftX ( x , i , 3 ) ;
24059: LD_ADDR_VAR 0 7
24063: PUSH
24064: LD_VAR 0 5
24068: PPUSH
24069: LD_VAR 0 4
24073: PPUSH
24074: LD_INT 3
24076: PPUSH
24077: CALL_OW 272
24081: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24082: LD_ADDR_VAR 0 8
24086: PUSH
24087: LD_VAR 0 6
24091: PPUSH
24092: LD_VAR 0 4
24096: PPUSH
24097: LD_INT 3
24099: PPUSH
24100: CALL_OW 273
24104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24105: LD_VAR 0 7
24109: PPUSH
24110: LD_VAR 0 8
24114: PPUSH
24115: CALL_OW 488
24119: NOT
24120: IFFALSE 24124
// continue ;
24122: GO 24056
// if HexInfo ( _x , _y ) = 0 then
24124: LD_VAR 0 7
24128: PPUSH
24129: LD_VAR 0 8
24133: PPUSH
24134: CALL_OW 428
24138: PUSH
24139: LD_INT 0
24141: EQUAL
24142: IFFALSE 24167
// begin ComMoveXY ( unit , _x , _y ) ;
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 7
24153: PPUSH
24154: LD_VAR 0 8
24158: PPUSH
24159: CALL_OW 111
// exit ;
24163: POP
24164: POP
24165: GO 24171
// end ; end ;
24167: GO 24056
24169: POP
24170: POP
// end ;
24171: LD_VAR 0 3
24175: RET
// export function ScanBase ( side , base_area ) ; begin
24176: LD_INT 0
24178: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_VAR 0 2
24188: PPUSH
24189: LD_INT 81
24191: PUSH
24192: LD_VAR 0 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PPUSH
24201: CALL_OW 70
24205: ST_TO_ADDR
// end ;
24206: LD_VAR 0 3
24210: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
// result := false ;
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_INT 0
24224: ST_TO_ADDR
// side := GetSide ( unit ) ;
24225: LD_ADDR_VAR 0 3
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 255
24239: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24240: LD_ADDR_VAR 0 4
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 248
24254: ST_TO_ADDR
// case nat of 1 :
24255: LD_VAR 0 4
24259: PUSH
24260: LD_INT 1
24262: DOUBLE
24263: EQUAL
24264: IFTRUE 24268
24266: GO 24279
24268: POP
// tech := tech_lassight ; 2 :
24269: LD_ADDR_VAR 0 5
24273: PUSH
24274: LD_INT 12
24276: ST_TO_ADDR
24277: GO 24318
24279: LD_INT 2
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24298
24287: POP
// tech := tech_mortar ; 3 :
24288: LD_ADDR_VAR 0 5
24292: PUSH
24293: LD_INT 41
24295: ST_TO_ADDR
24296: GO 24318
24298: LD_INT 3
24300: DOUBLE
24301: EQUAL
24302: IFTRUE 24306
24304: GO 24317
24306: POP
// tech := tech_bazooka ; end ;
24307: LD_ADDR_VAR 0 5
24311: PUSH
24312: LD_INT 44
24314: ST_TO_ADDR
24315: GO 24318
24317: POP
// if Researched ( side , tech ) then
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 5
24327: PPUSH
24328: CALL_OW 325
24332: IFFALSE 24359
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24334: LD_ADDR_VAR 0 2
24338: PUSH
24339: LD_INT 5
24341: PUSH
24342: LD_INT 8
24344: PUSH
24345: LD_INT 9
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: PUSH
24353: LD_VAR 0 4
24357: ARRAY
24358: ST_TO_ADDR
// end ;
24359: LD_VAR 0 2
24363: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24364: LD_INT 0
24366: PPUSH
24367: PPUSH
24368: PPUSH
// if not mines then
24369: LD_VAR 0 2
24373: NOT
24374: IFFALSE 24378
// exit ;
24376: GO 24522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24378: LD_ADDR_VAR 0 5
24382: PUSH
24383: LD_INT 81
24385: PUSH
24386: LD_VAR 0 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: LD_INT 21
24400: PUSH
24401: LD_INT 3
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PPUSH
24416: CALL_OW 69
24420: ST_TO_ADDR
// for i in mines do
24421: LD_ADDR_VAR 0 4
24425: PUSH
24426: LD_VAR 0 2
24430: PUSH
24431: FOR_IN
24432: IFFALSE 24520
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24434: LD_VAR 0 4
24438: PUSH
24439: LD_INT 1
24441: ARRAY
24442: PPUSH
24443: LD_VAR 0 4
24447: PUSH
24448: LD_INT 2
24450: ARRAY
24451: PPUSH
24452: CALL_OW 458
24456: NOT
24457: IFFALSE 24461
// continue ;
24459: GO 24431
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24461: LD_VAR 0 4
24465: PUSH
24466: LD_INT 1
24468: ARRAY
24469: PPUSH
24470: LD_VAR 0 4
24474: PUSH
24475: LD_INT 2
24477: ARRAY
24478: PPUSH
24479: CALL_OW 428
24483: PUSH
24484: LD_VAR 0 5
24488: IN
24489: IFFALSE 24518
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24491: LD_VAR 0 4
24495: PUSH
24496: LD_INT 1
24498: ARRAY
24499: PPUSH
24500: LD_VAR 0 4
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: PPUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL_OW 456
// end ;
24518: GO 24431
24520: POP
24521: POP
// end ;
24522: LD_VAR 0 3
24526: RET
// export function Count ( array ) ; var i ; begin
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
// result := 0 ;
24531: LD_ADDR_VAR 0 2
24535: PUSH
24536: LD_INT 0
24538: ST_TO_ADDR
// for i in array do
24539: LD_ADDR_VAR 0 3
24543: PUSH
24544: LD_VAR 0 1
24548: PUSH
24549: FOR_IN
24550: IFFALSE 24574
// if i then
24552: LD_VAR 0 3
24556: IFFALSE 24572
// result := result + 1 ;
24558: LD_ADDR_VAR 0 2
24562: PUSH
24563: LD_VAR 0 2
24567: PUSH
24568: LD_INT 1
24570: PLUS
24571: ST_TO_ADDR
24572: GO 24549
24574: POP
24575: POP
// end ;
24576: LD_VAR 0 2
24580: RET
// export function IsEmpty ( building ) ; begin
24581: LD_INT 0
24583: PPUSH
// if not building then
24584: LD_VAR 0 1
24588: NOT
24589: IFFALSE 24593
// exit ;
24591: GO 24636
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: LD_VAR 0 1
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL_OW 255
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 58
24622: PUSH
24623: EMPTY
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PPUSH
24630: CALL_OW 69
24634: IN
24635: ST_TO_ADDR
// end ;
24636: LD_VAR 0 2
24640: RET
// export function IsNotFull ( building ) ; begin
24641: LD_INT 0
24643: PPUSH
// if not building then
24644: LD_VAR 0 1
24648: NOT
24649: IFFALSE 24653
// exit ;
24651: GO 24672
// result := UnitsInside ( building ) < 6 ;
24653: LD_ADDR_VAR 0 2
24657: PUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 313
24667: PUSH
24668: LD_INT 6
24670: LESS
24671: ST_TO_ADDR
// end ;
24672: LD_VAR 0 2
24676: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
24681: PPUSH
24682: PPUSH
// tmp := [ ] ;
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: EMPTY
24689: ST_TO_ADDR
// list := [ ] ;
24690: LD_ADDR_VAR 0 5
24694: PUSH
24695: EMPTY
24696: ST_TO_ADDR
// for i = 16 to 25 do
24697: LD_ADDR_VAR 0 4
24701: PUSH
24702: DOUBLE
24703: LD_INT 16
24705: DEC
24706: ST_TO_ADDR
24707: LD_INT 25
24709: PUSH
24710: FOR_TO
24711: IFFALSE 24784
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_INT 22
24725: PUSH
24726: LD_VAR 0 1
24730: PPUSH
24731: CALL_OW 255
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 91
24742: PUSH
24743: LD_VAR 0 1
24747: PUSH
24748: LD_INT 6
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: LD_VAR 0 4
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: PPUSH
24776: CALL_OW 69
24780: ADD
24781: ST_TO_ADDR
24782: GO 24710
24784: POP
24785: POP
// for i = 1 to tmp do
24786: LD_ADDR_VAR 0 4
24790: PUSH
24791: DOUBLE
24792: LD_INT 1
24794: DEC
24795: ST_TO_ADDR
24796: LD_VAR 0 3
24800: PUSH
24801: FOR_TO
24802: IFFALSE 24890
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24804: LD_ADDR_VAR 0 5
24808: PUSH
24809: LD_VAR 0 5
24813: PUSH
24814: LD_VAR 0 3
24818: PUSH
24819: LD_VAR 0 4
24823: ARRAY
24824: PPUSH
24825: CALL_OW 266
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_VAR 0 4
24839: ARRAY
24840: PPUSH
24841: CALL_OW 250
24845: PUSH
24846: LD_VAR 0 3
24850: PUSH
24851: LD_VAR 0 4
24855: ARRAY
24856: PPUSH
24857: CALL_OW 251
24861: PUSH
24862: LD_VAR 0 3
24866: PUSH
24867: LD_VAR 0 4
24871: ARRAY
24872: PPUSH
24873: CALL_OW 254
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: ADD
24887: ST_TO_ADDR
24888: GO 24801
24890: POP
24891: POP
// result := list ;
24892: LD_ADDR_VAR 0 2
24896: PUSH
24897: LD_VAR 0 5
24901: ST_TO_ADDR
// end ;
24902: LD_VAR 0 2
24906: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24907: LD_INT 0
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
// if not factory then
24916: LD_VAR 0 1
24920: NOT
24921: IFFALSE 24925
// exit ;
24923: GO 25518
// if control = control_apeman then
24925: LD_VAR 0 4
24929: PUSH
24930: LD_INT 5
24932: EQUAL
24933: IFFALSE 25042
// begin tmp := UnitsInside ( factory ) ;
24935: LD_ADDR_VAR 0 8
24939: PUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 313
24949: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24950: LD_VAR 0 8
24954: PPUSH
24955: LD_INT 25
24957: PUSH
24958: LD_INT 12
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PPUSH
24965: CALL_OW 72
24969: NOT
24970: IFFALSE 24980
// control := control_manual ;
24972: LD_ADDR_VAR 0 4
24976: PUSH
24977: LD_INT 1
24979: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24980: LD_ADDR_VAR 0 8
24984: PUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL 24677 0 1
24994: ST_TO_ADDR
// if tmp then
24995: LD_VAR 0 8
24999: IFFALSE 25042
// begin for i in tmp do
25001: LD_ADDR_VAR 0 7
25005: PUSH
25006: LD_VAR 0 8
25010: PUSH
25011: FOR_IN
25012: IFFALSE 25040
// if i [ 1 ] = b_ext_radio then
25014: LD_VAR 0 7
25018: PUSH
25019: LD_INT 1
25021: ARRAY
25022: PUSH
25023: LD_INT 22
25025: EQUAL
25026: IFFALSE 25038
// begin control := control_remote ;
25028: LD_ADDR_VAR 0 4
25032: PUSH
25033: LD_INT 2
25035: ST_TO_ADDR
// break ;
25036: GO 25040
// end ;
25038: GO 25011
25040: POP
25041: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25042: LD_VAR 0 1
25046: PPUSH
25047: LD_VAR 0 2
25051: PPUSH
25052: LD_VAR 0 3
25056: PPUSH
25057: LD_VAR 0 4
25061: PPUSH
25062: LD_VAR 0 5
25066: PPUSH
25067: CALL_OW 448
25071: IFFALSE 25106
// begin result := [ chassis , engine , control , weapon ] ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: LD_VAR 0 2
25082: PUSH
25083: LD_VAR 0 3
25087: PUSH
25088: LD_VAR 0 4
25092: PUSH
25093: LD_VAR 0 5
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: ST_TO_ADDR
// exit ;
25104: GO 25518
// end ; _chassis := AvailableChassisList ( factory ) ;
25106: LD_ADDR_VAR 0 9
25110: PUSH
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 475
25120: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25121: LD_ADDR_VAR 0 11
25125: PUSH
25126: LD_VAR 0 1
25130: PPUSH
25131: CALL_OW 476
25135: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25136: LD_ADDR_VAR 0 12
25140: PUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: CALL_OW 477
25150: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25151: LD_ADDR_VAR 0 10
25155: PUSH
25156: LD_VAR 0 1
25160: PPUSH
25161: CALL_OW 478
25165: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25166: LD_VAR 0 9
25170: NOT
25171: PUSH
25172: LD_VAR 0 11
25176: NOT
25177: OR
25178: PUSH
25179: LD_VAR 0 12
25183: NOT
25184: OR
25185: PUSH
25186: LD_VAR 0 10
25190: NOT
25191: OR
25192: IFFALSE 25227
// begin result := [ chassis , engine , control , weapon ] ;
25194: LD_ADDR_VAR 0 6
25198: PUSH
25199: LD_VAR 0 2
25203: PUSH
25204: LD_VAR 0 3
25208: PUSH
25209: LD_VAR 0 4
25213: PUSH
25214: LD_VAR 0 5
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: ST_TO_ADDR
// exit ;
25225: GO 25518
// end ; if not chassis in _chassis then
25227: LD_VAR 0 2
25231: PUSH
25232: LD_VAR 0 9
25236: IN
25237: NOT
25238: IFFALSE 25264
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25240: LD_ADDR_VAR 0 2
25244: PUSH
25245: LD_VAR 0 9
25249: PUSH
25250: LD_INT 1
25252: PPUSH
25253: LD_VAR 0 9
25257: PPUSH
25258: CALL_OW 12
25262: ARRAY
25263: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25264: LD_VAR 0 2
25268: PPUSH
25269: LD_VAR 0 3
25273: PPUSH
25274: CALL 25523 0 2
25278: NOT
25279: IFFALSE 25338
// repeat engine := _engine [ 1 ] ;
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_VAR 0 11
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25295: LD_ADDR_VAR 0 11
25299: PUSH
25300: LD_VAR 0 11
25304: PPUSH
25305: LD_INT 1
25307: PPUSH
25308: CALL_OW 3
25312: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25313: LD_VAR 0 2
25317: PPUSH
25318: LD_VAR 0 3
25322: PPUSH
25323: CALL 25523 0 2
25327: PUSH
25328: LD_VAR 0 11
25332: PUSH
25333: EMPTY
25334: EQUAL
25335: OR
25336: IFFALSE 25281
// if not control in _control then
25338: LD_VAR 0 4
25342: PUSH
25343: LD_VAR 0 12
25347: IN
25348: NOT
25349: IFFALSE 25375
// control := _control [ rand ( 1 , _control ) ] ;
25351: LD_ADDR_VAR 0 4
25355: PUSH
25356: LD_VAR 0 12
25360: PUSH
25361: LD_INT 1
25363: PPUSH
25364: LD_VAR 0 12
25368: PPUSH
25369: CALL_OW 12
25373: ARRAY
25374: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25375: LD_VAR 0 2
25379: PPUSH
25380: LD_VAR 0 5
25384: PPUSH
25385: CALL 25743 0 2
25389: NOT
25390: IFFALSE 25449
// repeat weapon := _weapon [ 1 ] ;
25392: LD_ADDR_VAR 0 5
25396: PUSH
25397: LD_VAR 0 10
25401: PUSH
25402: LD_INT 1
25404: ARRAY
25405: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25406: LD_ADDR_VAR 0 10
25410: PUSH
25411: LD_VAR 0 10
25415: PPUSH
25416: LD_INT 1
25418: PPUSH
25419: CALL_OW 3
25423: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25424: LD_VAR 0 2
25428: PPUSH
25429: LD_VAR 0 5
25433: PPUSH
25434: CALL 25743 0 2
25438: PUSH
25439: LD_VAR 0 10
25443: PUSH
25444: EMPTY
25445: EQUAL
25446: OR
25447: IFFALSE 25392
// result := [ ] ;
25449: LD_ADDR_VAR 0 6
25453: PUSH
25454: EMPTY
25455: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25456: LD_VAR 0 1
25460: PPUSH
25461: LD_VAR 0 2
25465: PPUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: LD_VAR 0 4
25475: PPUSH
25476: LD_VAR 0 5
25480: PPUSH
25481: CALL_OW 448
25485: IFFALSE 25518
// result := [ chassis , engine , control , weapon ] ;
25487: LD_ADDR_VAR 0 6
25491: PUSH
25492: LD_VAR 0 2
25496: PUSH
25497: LD_VAR 0 3
25501: PUSH
25502: LD_VAR 0 4
25506: PUSH
25507: LD_VAR 0 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: ST_TO_ADDR
// end ;
25518: LD_VAR 0 6
25522: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25523: LD_INT 0
25525: PPUSH
// if not chassis or not engine then
25526: LD_VAR 0 1
25530: NOT
25531: PUSH
25532: LD_VAR 0 2
25536: NOT
25537: OR
25538: IFFALSE 25542
// exit ;
25540: GO 25738
// case engine of engine_solar :
25542: LD_VAR 0 2
25546: PUSH
25547: LD_INT 2
25549: DOUBLE
25550: EQUAL
25551: IFTRUE 25555
25553: GO 25593
25555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25556: LD_ADDR_VAR 0 3
25560: PUSH
25561: LD_INT 11
25563: PUSH
25564: LD_INT 12
25566: PUSH
25567: LD_INT 13
25569: PUSH
25570: LD_INT 14
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: LD_INT 3
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: ST_TO_ADDR
25591: GO 25722
25593: LD_INT 1
25595: DOUBLE
25596: EQUAL
25597: IFTRUE 25601
25599: GO 25663
25601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25602: LD_ADDR_VAR 0 3
25606: PUSH
25607: LD_INT 11
25609: PUSH
25610: LD_INT 12
25612: PUSH
25613: LD_INT 13
25615: PUSH
25616: LD_INT 14
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: LD_INT 4
25630: PUSH
25631: LD_INT 5
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 23
25639: PUSH
25640: LD_INT 22
25642: PUSH
25643: LD_INT 24
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 25722
25663: LD_INT 3
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25721
25671: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 13
25679: PUSH
25680: LD_INT 14
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: LD_INT 4
25691: PUSH
25692: LD_INT 5
25694: PUSH
25695: LD_INT 21
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_INT 23
25703: PUSH
25704: LD_INT 24
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: ST_TO_ADDR
25719: GO 25722
25721: POP
// result := ( chassis in result ) ;
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_VAR 0 1
25731: PUSH
25732: LD_VAR 0 3
25736: IN
25737: ST_TO_ADDR
// end ;
25738: LD_VAR 0 3
25742: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25743: LD_INT 0
25745: PPUSH
// if not chassis or not weapon then
25746: LD_VAR 0 1
25750: NOT
25751: PUSH
25752: LD_VAR 0 2
25756: NOT
25757: OR
25758: IFFALSE 25762
// exit ;
25760: GO 26824
// case weapon of us_machine_gun :
25762: LD_VAR 0 2
25766: PUSH
25767: LD_INT 2
25769: DOUBLE
25770: EQUAL
25771: IFTRUE 25775
25773: GO 25805
25775: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 4
25792: PUSH
25793: LD_INT 5
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: ST_TO_ADDR
25803: GO 26808
25805: LD_INT 3
25807: DOUBLE
25808: EQUAL
25809: IFTRUE 25813
25811: GO 25843
25813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25814: LD_ADDR_VAR 0 3
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: LD_INT 4
25830: PUSH
25831: LD_INT 5
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: ST_TO_ADDR
25841: GO 26808
25843: LD_INT 11
25845: DOUBLE
25846: EQUAL
25847: IFTRUE 25851
25849: GO 25881
25851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25852: LD_ADDR_VAR 0 3
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: LD_INT 4
25868: PUSH
25869: LD_INT 5
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: ST_TO_ADDR
25879: GO 26808
25881: LD_INT 4
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25915
25889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25890: LD_ADDR_VAR 0 3
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 3
25900: PUSH
25901: LD_INT 4
25903: PUSH
25904: LD_INT 5
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: ST_TO_ADDR
25913: GO 26808
25915: LD_INT 5
25917: DOUBLE
25918: EQUAL
25919: IFTRUE 25923
25921: GO 25949
25923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 3
25934: PUSH
25935: LD_INT 4
25937: PUSH
25938: LD_INT 5
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
25947: GO 26808
25949: LD_INT 9
25951: DOUBLE
25952: EQUAL
25953: IFTRUE 25957
25955: GO 25983
25957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 3
25968: PUSH
25969: LD_INT 4
25971: PUSH
25972: LD_INT 5
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: ST_TO_ADDR
25981: GO 26808
25983: LD_INT 7
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26017
25991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: LD_INT 4
26005: PUSH
26006: LD_INT 5
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: ST_TO_ADDR
26015: GO 26808
26017: LD_INT 12
26019: DOUBLE
26020: EQUAL
26021: IFTRUE 26025
26023: GO 26051
26025: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26026: LD_ADDR_VAR 0 3
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 4
26039: PUSH
26040: LD_INT 5
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: ST_TO_ADDR
26049: GO 26808
26051: LD_INT 13
26053: DOUBLE
26054: EQUAL
26055: IFTRUE 26059
26057: GO 26085
26059: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26060: LD_ADDR_VAR 0 3
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 4
26073: PUSH
26074: LD_INT 5
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: ST_TO_ADDR
26083: GO 26808
26085: LD_INT 14
26087: DOUBLE
26088: EQUAL
26089: IFTRUE 26093
26091: GO 26111
26093: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26094: LD_ADDR_VAR 0 3
26098: PUSH
26099: LD_INT 4
26101: PUSH
26102: LD_INT 5
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: ST_TO_ADDR
26109: GO 26808
26111: LD_INT 6
26113: DOUBLE
26114: EQUAL
26115: IFTRUE 26119
26117: GO 26137
26119: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_INT 4
26127: PUSH
26128: LD_INT 5
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26808
26137: LD_INT 10
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26163
26145: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 4
26153: PUSH
26154: LD_INT 5
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: ST_TO_ADDR
26161: GO 26808
26163: LD_INT 22
26165: DOUBLE
26166: EQUAL
26167: IFTRUE 26171
26169: GO 26197
26171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26172: LD_ADDR_VAR 0 3
26176: PUSH
26177: LD_INT 11
26179: PUSH
26180: LD_INT 12
26182: PUSH
26183: LD_INT 13
26185: PUSH
26186: LD_INT 14
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: ST_TO_ADDR
26195: GO 26808
26197: LD_INT 23
26199: DOUBLE
26200: EQUAL
26201: IFTRUE 26205
26203: GO 26231
26205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26206: LD_ADDR_VAR 0 3
26210: PUSH
26211: LD_INT 11
26213: PUSH
26214: LD_INT 12
26216: PUSH
26217: LD_INT 13
26219: PUSH
26220: LD_INT 14
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: ST_TO_ADDR
26229: GO 26808
26231: LD_INT 24
26233: DOUBLE
26234: EQUAL
26235: IFTRUE 26239
26237: GO 26265
26239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26240: LD_ADDR_VAR 0 3
26244: PUSH
26245: LD_INT 11
26247: PUSH
26248: LD_INT 12
26250: PUSH
26251: LD_INT 13
26253: PUSH
26254: LD_INT 14
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: ST_TO_ADDR
26263: GO 26808
26265: LD_INT 30
26267: DOUBLE
26268: EQUAL
26269: IFTRUE 26273
26271: GO 26299
26273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26274: LD_ADDR_VAR 0 3
26278: PUSH
26279: LD_INT 11
26281: PUSH
26282: LD_INT 12
26284: PUSH
26285: LD_INT 13
26287: PUSH
26288: LD_INT 14
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: ST_TO_ADDR
26297: GO 26808
26299: LD_INT 25
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26325
26307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26308: LD_ADDR_VAR 0 3
26312: PUSH
26313: LD_INT 13
26315: PUSH
26316: LD_INT 14
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: ST_TO_ADDR
26323: GO 26808
26325: LD_INT 27
26327: DOUBLE
26328: EQUAL
26329: IFTRUE 26333
26331: GO 26351
26333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26334: LD_ADDR_VAR 0 3
26338: PUSH
26339: LD_INT 13
26341: PUSH
26342: LD_INT 14
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: ST_TO_ADDR
26349: GO 26808
26351: LD_EXP 98
26355: DOUBLE
26356: EQUAL
26357: IFTRUE 26361
26359: GO 26387
26361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26362: LD_ADDR_VAR 0 3
26366: PUSH
26367: LD_INT 11
26369: PUSH
26370: LD_INT 12
26372: PUSH
26373: LD_INT 13
26375: PUSH
26376: LD_INT 14
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: ST_TO_ADDR
26385: GO 26808
26387: LD_INT 28
26389: DOUBLE
26390: EQUAL
26391: IFTRUE 26395
26393: GO 26413
26395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26396: LD_ADDR_VAR 0 3
26400: PUSH
26401: LD_INT 13
26403: PUSH
26404: LD_INT 14
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: ST_TO_ADDR
26411: GO 26808
26413: LD_INT 29
26415: DOUBLE
26416: EQUAL
26417: IFTRUE 26421
26419: GO 26439
26421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26422: LD_ADDR_VAR 0 3
26426: PUSH
26427: LD_INT 13
26429: PUSH
26430: LD_INT 14
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: ST_TO_ADDR
26437: GO 26808
26439: LD_INT 31
26441: DOUBLE
26442: EQUAL
26443: IFTRUE 26447
26445: GO 26465
26447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 13
26455: PUSH
26456: LD_INT 14
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: ST_TO_ADDR
26463: GO 26808
26465: LD_INT 26
26467: DOUBLE
26468: EQUAL
26469: IFTRUE 26473
26471: GO 26491
26473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_INT 13
26481: PUSH
26482: LD_INT 14
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: ST_TO_ADDR
26489: GO 26808
26491: LD_INT 42
26493: DOUBLE
26494: EQUAL
26495: IFTRUE 26499
26497: GO 26525
26499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: LD_INT 21
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_INT 23
26513: PUSH
26514: LD_INT 24
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: ST_TO_ADDR
26523: GO 26808
26525: LD_INT 43
26527: DOUBLE
26528: EQUAL
26529: IFTRUE 26533
26531: GO 26559
26533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_INT 21
26541: PUSH
26542: LD_INT 22
26544: PUSH
26545: LD_INT 23
26547: PUSH
26548: LD_INT 24
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
26557: GO 26808
26559: LD_INT 44
26561: DOUBLE
26562: EQUAL
26563: IFTRUE 26567
26565: GO 26593
26567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26568: LD_ADDR_VAR 0 3
26572: PUSH
26573: LD_INT 21
26575: PUSH
26576: LD_INT 22
26578: PUSH
26579: LD_INT 23
26581: PUSH
26582: LD_INT 24
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
26591: GO 26808
26593: LD_INT 45
26595: DOUBLE
26596: EQUAL
26597: IFTRUE 26601
26599: GO 26627
26601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26602: LD_ADDR_VAR 0 3
26606: PUSH
26607: LD_INT 21
26609: PUSH
26610: LD_INT 22
26612: PUSH
26613: LD_INT 23
26615: PUSH
26616: LD_INT 24
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: ST_TO_ADDR
26625: GO 26808
26627: LD_INT 49
26629: DOUBLE
26630: EQUAL
26631: IFTRUE 26635
26633: GO 26661
26635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 21
26643: PUSH
26644: LD_INT 22
26646: PUSH
26647: LD_INT 23
26649: PUSH
26650: LD_INT 24
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: ST_TO_ADDR
26659: GO 26808
26661: LD_INT 51
26663: DOUBLE
26664: EQUAL
26665: IFTRUE 26669
26667: GO 26695
26669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26670: LD_ADDR_VAR 0 3
26674: PUSH
26675: LD_INT 21
26677: PUSH
26678: LD_INT 22
26680: PUSH
26681: LD_INT 23
26683: PUSH
26684: LD_INT 24
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
26693: GO 26808
26695: LD_INT 52
26697: DOUBLE
26698: EQUAL
26699: IFTRUE 26703
26701: GO 26729
26703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26704: LD_ADDR_VAR 0 3
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 22
26714: PUSH
26715: LD_INT 23
26717: PUSH
26718: LD_INT 24
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: ST_TO_ADDR
26727: GO 26808
26729: LD_INT 53
26731: DOUBLE
26732: EQUAL
26733: IFTRUE 26737
26735: GO 26755
26737: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_INT 23
26745: PUSH
26746: LD_INT 24
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: ST_TO_ADDR
26753: GO 26808
26755: LD_INT 46
26757: DOUBLE
26758: EQUAL
26759: IFTRUE 26763
26761: GO 26781
26763: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26764: LD_ADDR_VAR 0 3
26768: PUSH
26769: LD_INT 23
26771: PUSH
26772: LD_INT 24
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: ST_TO_ADDR
26779: GO 26808
26781: LD_INT 47
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26807
26789: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_INT 23
26797: PUSH
26798: LD_INT 24
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: ST_TO_ADDR
26805: GO 26808
26807: POP
// result := ( chassis in result ) ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_VAR 0 1
26817: PUSH
26818: LD_VAR 0 3
26822: IN
26823: ST_TO_ADDR
// end ;
26824: LD_VAR 0 3
26828: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26829: LD_INT 0
26831: PPUSH
26832: PPUSH
26833: PPUSH
26834: PPUSH
26835: PPUSH
26836: PPUSH
26837: PPUSH
// result := array ;
26838: LD_ADDR_VAR 0 5
26842: PUSH
26843: LD_VAR 0 1
26847: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26848: LD_VAR 0 1
26852: NOT
26853: PUSH
26854: LD_VAR 0 2
26858: NOT
26859: OR
26860: PUSH
26861: LD_VAR 0 3
26865: NOT
26866: OR
26867: PUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_VAR 0 1
26877: GREATER
26878: OR
26879: PUSH
26880: LD_VAR 0 3
26884: PUSH
26885: LD_VAR 0 1
26889: GREATER
26890: OR
26891: IFFALSE 26895
// exit ;
26893: GO 27191
// if direction then
26895: LD_VAR 0 4
26899: IFFALSE 26963
// begin d := 1 ;
26901: LD_ADDR_VAR 0 9
26905: PUSH
26906: LD_INT 1
26908: ST_TO_ADDR
// if i_from > i_to then
26909: LD_VAR 0 2
26913: PUSH
26914: LD_VAR 0 3
26918: GREATER
26919: IFFALSE 26945
// length := ( array - i_from ) + i_to else
26921: LD_ADDR_VAR 0 11
26925: PUSH
26926: LD_VAR 0 1
26930: PUSH
26931: LD_VAR 0 2
26935: MINUS
26936: PUSH
26937: LD_VAR 0 3
26941: PLUS
26942: ST_TO_ADDR
26943: GO 26961
// length := i_to - i_from ;
26945: LD_ADDR_VAR 0 11
26949: PUSH
26950: LD_VAR 0 3
26954: PUSH
26955: LD_VAR 0 2
26959: MINUS
26960: ST_TO_ADDR
// end else
26961: GO 27024
// begin d := - 1 ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: ST_TO_ADDR
// if i_from > i_to then
26972: LD_VAR 0 2
26976: PUSH
26977: LD_VAR 0 3
26981: GREATER
26982: IFFALSE 27002
// length := i_from - i_to else
26984: LD_ADDR_VAR 0 11
26988: PUSH
26989: LD_VAR 0 2
26993: PUSH
26994: LD_VAR 0 3
26998: MINUS
26999: ST_TO_ADDR
27000: GO 27024
// length := ( array - i_to ) + i_from ;
27002: LD_ADDR_VAR 0 11
27006: PUSH
27007: LD_VAR 0 1
27011: PUSH
27012: LD_VAR 0 3
27016: MINUS
27017: PUSH
27018: LD_VAR 0 2
27022: PLUS
27023: ST_TO_ADDR
// end ; if not length then
27024: LD_VAR 0 11
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27191
// tmp := array ;
27033: LD_ADDR_VAR 0 10
27037: PUSH
27038: LD_VAR 0 1
27042: ST_TO_ADDR
// for i = 1 to length do
27043: LD_ADDR_VAR 0 6
27047: PUSH
27048: DOUBLE
27049: LD_INT 1
27051: DEC
27052: ST_TO_ADDR
27053: LD_VAR 0 11
27057: PUSH
27058: FOR_TO
27059: IFFALSE 27179
// begin for j = 1 to array do
27061: LD_ADDR_VAR 0 7
27065: PUSH
27066: DOUBLE
27067: LD_INT 1
27069: DEC
27070: ST_TO_ADDR
27071: LD_VAR 0 1
27075: PUSH
27076: FOR_TO
27077: IFFALSE 27165
// begin k := j + d ;
27079: LD_ADDR_VAR 0 8
27083: PUSH
27084: LD_VAR 0 7
27088: PUSH
27089: LD_VAR 0 9
27093: PLUS
27094: ST_TO_ADDR
// if k > array then
27095: LD_VAR 0 8
27099: PUSH
27100: LD_VAR 0 1
27104: GREATER
27105: IFFALSE 27115
// k := 1 ;
27107: LD_ADDR_VAR 0 8
27111: PUSH
27112: LD_INT 1
27114: ST_TO_ADDR
// if not k then
27115: LD_VAR 0 8
27119: NOT
27120: IFFALSE 27132
// k := array ;
27122: LD_ADDR_VAR 0 8
27126: PUSH
27127: LD_VAR 0 1
27131: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27132: LD_ADDR_VAR 0 10
27136: PUSH
27137: LD_VAR 0 10
27141: PPUSH
27142: LD_VAR 0 8
27146: PPUSH
27147: LD_VAR 0 1
27151: PUSH
27152: LD_VAR 0 7
27156: ARRAY
27157: PPUSH
27158: CALL_OW 1
27162: ST_TO_ADDR
// end ;
27163: GO 27076
27165: POP
27166: POP
// array := tmp ;
27167: LD_ADDR_VAR 0 1
27171: PUSH
27172: LD_VAR 0 10
27176: ST_TO_ADDR
// end ;
27177: GO 27058
27179: POP
27180: POP
// result := array ;
27181: LD_ADDR_VAR 0 5
27185: PUSH
27186: LD_VAR 0 1
27190: ST_TO_ADDR
// end ;
27191: LD_VAR 0 5
27195: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27196: LD_INT 0
27198: PPUSH
27199: PPUSH
// result := 0 ;
27200: LD_ADDR_VAR 0 3
27204: PUSH
27205: LD_INT 0
27207: ST_TO_ADDR
// if not array or not value in array then
27208: LD_VAR 0 1
27212: NOT
27213: PUSH
27214: LD_VAR 0 2
27218: PUSH
27219: LD_VAR 0 1
27223: IN
27224: NOT
27225: OR
27226: IFFALSE 27230
// exit ;
27228: GO 27284
// for i = 1 to array do
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: DOUBLE
27236: LD_INT 1
27238: DEC
27239: ST_TO_ADDR
27240: LD_VAR 0 1
27244: PUSH
27245: FOR_TO
27246: IFFALSE 27282
// if value = array [ i ] then
27248: LD_VAR 0 2
27252: PUSH
27253: LD_VAR 0 1
27257: PUSH
27258: LD_VAR 0 4
27262: ARRAY
27263: EQUAL
27264: IFFALSE 27280
// begin result := i ;
27266: LD_ADDR_VAR 0 3
27270: PUSH
27271: LD_VAR 0 4
27275: ST_TO_ADDR
// exit ;
27276: POP
27277: POP
27278: GO 27284
// end ;
27280: GO 27245
27282: POP
27283: POP
// end ;
27284: LD_VAR 0 3
27288: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27289: LD_INT 0
27291: PPUSH
// vc_chassis := chassis ;
27292: LD_ADDR_OWVAR 37
27296: PUSH
27297: LD_VAR 0 1
27301: ST_TO_ADDR
// vc_engine := engine ;
27302: LD_ADDR_OWVAR 39
27306: PUSH
27307: LD_VAR 0 2
27311: ST_TO_ADDR
// vc_control := control ;
27312: LD_ADDR_OWVAR 38
27316: PUSH
27317: LD_VAR 0 3
27321: ST_TO_ADDR
// vc_weapon := weapon ;
27322: LD_ADDR_OWVAR 40
27326: PUSH
27327: LD_VAR 0 4
27331: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27332: LD_ADDR_OWVAR 41
27336: PUSH
27337: LD_VAR 0 5
27341: ST_TO_ADDR
// end ;
27342: LD_VAR 0 6
27346: RET
// export function WantPlant ( unit ) ; var task ; begin
27347: LD_INT 0
27349: PPUSH
27350: PPUSH
// result := false ;
27351: LD_ADDR_VAR 0 2
27355: PUSH
27356: LD_INT 0
27358: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27359: LD_ADDR_VAR 0 3
27363: PUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: CALL_OW 437
27373: ST_TO_ADDR
// if task then
27374: LD_VAR 0 3
27378: IFFALSE 27406
// if task [ 1 ] [ 1 ] = p then
27380: LD_VAR 0 3
27384: PUSH
27385: LD_INT 1
27387: ARRAY
27388: PUSH
27389: LD_INT 1
27391: ARRAY
27392: PUSH
27393: LD_STRING p
27395: EQUAL
27396: IFFALSE 27406
// result := true ;
27398: LD_ADDR_VAR 0 2
27402: PUSH
27403: LD_INT 1
27405: ST_TO_ADDR
// end ;
27406: LD_VAR 0 2
27410: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27411: LD_INT 0
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
// if pos < 1 then
27417: LD_VAR 0 2
27421: PUSH
27422: LD_INT 1
27424: LESS
27425: IFFALSE 27429
// exit ;
27427: GO 27732
// if pos = 1 then
27429: LD_VAR 0 2
27433: PUSH
27434: LD_INT 1
27436: EQUAL
27437: IFFALSE 27470
// result := Replace ( arr , pos [ 1 ] , value ) else
27439: LD_ADDR_VAR 0 4
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: ARRAY
27457: PPUSH
27458: LD_VAR 0 3
27462: PPUSH
27463: CALL_OW 1
27467: ST_TO_ADDR
27468: GO 27732
// begin tmp := arr ;
27470: LD_ADDR_VAR 0 6
27474: PUSH
27475: LD_VAR 0 1
27479: ST_TO_ADDR
// s_arr := [ tmp ] ;
27480: LD_ADDR_VAR 0 7
27484: PUSH
27485: LD_VAR 0 6
27489: PUSH
27490: EMPTY
27491: LIST
27492: ST_TO_ADDR
// for i = 1 to pos - 1 do
27493: LD_ADDR_VAR 0 5
27497: PUSH
27498: DOUBLE
27499: LD_INT 1
27501: DEC
27502: ST_TO_ADDR
27503: LD_VAR 0 2
27507: PUSH
27508: LD_INT 1
27510: MINUS
27511: PUSH
27512: FOR_TO
27513: IFFALSE 27558
// begin tmp := tmp [ pos [ i ] ] ;
27515: LD_ADDR_VAR 0 6
27519: PUSH
27520: LD_VAR 0 6
27524: PUSH
27525: LD_VAR 0 2
27529: PUSH
27530: LD_VAR 0 5
27534: ARRAY
27535: ARRAY
27536: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27537: LD_ADDR_VAR 0 7
27541: PUSH
27542: LD_VAR 0 7
27546: PUSH
27547: LD_VAR 0 6
27551: PUSH
27552: EMPTY
27553: LIST
27554: ADD
27555: ST_TO_ADDR
// end ;
27556: GO 27512
27558: POP
27559: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27560: LD_ADDR_VAR 0 6
27564: PUSH
27565: LD_VAR 0 6
27569: PPUSH
27570: LD_VAR 0 2
27574: PUSH
27575: LD_VAR 0 2
27579: ARRAY
27580: PPUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: CALL_OW 1
27590: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27591: LD_ADDR_VAR 0 7
27595: PUSH
27596: LD_VAR 0 7
27600: PPUSH
27601: LD_VAR 0 7
27605: PPUSH
27606: LD_VAR 0 6
27610: PPUSH
27611: CALL_OW 1
27615: ST_TO_ADDR
// for i = s_arr downto 2 do
27616: LD_ADDR_VAR 0 5
27620: PUSH
27621: DOUBLE
27622: LD_VAR 0 7
27626: INC
27627: ST_TO_ADDR
27628: LD_INT 2
27630: PUSH
27631: FOR_DOWNTO
27632: IFFALSE 27716
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27634: LD_ADDR_VAR 0 6
27638: PUSH
27639: LD_VAR 0 7
27643: PUSH
27644: LD_VAR 0 5
27648: PUSH
27649: LD_INT 1
27651: MINUS
27652: ARRAY
27653: PPUSH
27654: LD_VAR 0 2
27658: PUSH
27659: LD_VAR 0 5
27663: PUSH
27664: LD_INT 1
27666: MINUS
27667: ARRAY
27668: PPUSH
27669: LD_VAR 0 7
27673: PUSH
27674: LD_VAR 0 5
27678: ARRAY
27679: PPUSH
27680: CALL_OW 1
27684: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27685: LD_ADDR_VAR 0 7
27689: PUSH
27690: LD_VAR 0 7
27694: PPUSH
27695: LD_VAR 0 5
27699: PUSH
27700: LD_INT 1
27702: MINUS
27703: PPUSH
27704: LD_VAR 0 6
27708: PPUSH
27709: CALL_OW 1
27713: ST_TO_ADDR
// end ;
27714: GO 27631
27716: POP
27717: POP
// result := s_arr [ 1 ] ;
27718: LD_ADDR_VAR 0 4
27722: PUSH
27723: LD_VAR 0 7
27727: PUSH
27728: LD_INT 1
27730: ARRAY
27731: ST_TO_ADDR
// end ; end ;
27732: LD_VAR 0 4
27736: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27737: LD_INT 0
27739: PPUSH
27740: PPUSH
// if not list then
27741: LD_VAR 0 1
27745: NOT
27746: IFFALSE 27750
// exit ;
27748: GO 27841
// i := list [ pos1 ] ;
27750: LD_ADDR_VAR 0 5
27754: PUSH
27755: LD_VAR 0 1
27759: PUSH
27760: LD_VAR 0 2
27764: ARRAY
27765: ST_TO_ADDR
// if not i then
27766: LD_VAR 0 5
27770: NOT
27771: IFFALSE 27775
// exit ;
27773: GO 27841
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27775: LD_ADDR_VAR 0 1
27779: PUSH
27780: LD_VAR 0 1
27784: PPUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: LD_VAR 0 1
27794: PUSH
27795: LD_VAR 0 3
27799: ARRAY
27800: PPUSH
27801: CALL_OW 1
27805: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27806: LD_ADDR_VAR 0 1
27810: PUSH
27811: LD_VAR 0 1
27815: PPUSH
27816: LD_VAR 0 3
27820: PPUSH
27821: LD_VAR 0 5
27825: PPUSH
27826: CALL_OW 1
27830: ST_TO_ADDR
// result := list ;
27831: LD_ADDR_VAR 0 4
27835: PUSH
27836: LD_VAR 0 1
27840: ST_TO_ADDR
// end ;
27841: LD_VAR 0 4
27845: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27846: LD_INT 0
27848: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27849: LD_ADDR_VAR 0 5
27853: PUSH
27854: LD_VAR 0 1
27858: PPUSH
27859: CALL_OW 250
27863: PPUSH
27864: LD_VAR 0 1
27868: PPUSH
27869: CALL_OW 251
27873: PPUSH
27874: LD_VAR 0 2
27878: PPUSH
27879: LD_VAR 0 3
27883: PPUSH
27884: LD_VAR 0 4
27888: PPUSH
27889: CALL 27899 0 5
27893: ST_TO_ADDR
// end ;
27894: LD_VAR 0 5
27898: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27899: LD_INT 0
27901: PPUSH
27902: PPUSH
27903: PPUSH
27904: PPUSH
// if not list then
27905: LD_VAR 0 3
27909: NOT
27910: IFFALSE 27914
// exit ;
27912: GO 28302
// result := [ ] ;
27914: LD_ADDR_VAR 0 6
27918: PUSH
27919: EMPTY
27920: ST_TO_ADDR
// for i in list do
27921: LD_ADDR_VAR 0 7
27925: PUSH
27926: LD_VAR 0 3
27930: PUSH
27931: FOR_IN
27932: IFFALSE 28134
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27934: LD_ADDR_VAR 0 9
27938: PUSH
27939: LD_VAR 0 7
27943: PPUSH
27944: LD_VAR 0 1
27948: PPUSH
27949: LD_VAR 0 2
27953: PPUSH
27954: CALL_OW 297
27958: ST_TO_ADDR
// if not result then
27959: LD_VAR 0 6
27963: NOT
27964: IFFALSE 27990
// result := [ [ i , tmp ] ] else
27966: LD_ADDR_VAR 0 6
27970: PUSH
27971: LD_VAR 0 7
27975: PUSH
27976: LD_VAR 0 9
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: ST_TO_ADDR
27988: GO 28132
// begin if result [ result ] [ 2 ] < tmp then
27990: LD_VAR 0 6
27994: PUSH
27995: LD_VAR 0 6
27999: ARRAY
28000: PUSH
28001: LD_INT 2
28003: ARRAY
28004: PUSH
28005: LD_VAR 0 9
28009: LESS
28010: IFFALSE 28052
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28012: LD_ADDR_VAR 0 6
28016: PUSH
28017: LD_VAR 0 6
28021: PPUSH
28022: LD_VAR 0 6
28026: PUSH
28027: LD_INT 1
28029: PLUS
28030: PPUSH
28031: LD_VAR 0 7
28035: PUSH
28036: LD_VAR 0 9
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 2
28049: ST_TO_ADDR
28050: GO 28132
// for j = 1 to result do
28052: LD_ADDR_VAR 0 8
28056: PUSH
28057: DOUBLE
28058: LD_INT 1
28060: DEC
28061: ST_TO_ADDR
28062: LD_VAR 0 6
28066: PUSH
28067: FOR_TO
28068: IFFALSE 28130
// begin if tmp < result [ j ] [ 2 ] then
28070: LD_VAR 0 9
28074: PUSH
28075: LD_VAR 0 6
28079: PUSH
28080: LD_VAR 0 8
28084: ARRAY
28085: PUSH
28086: LD_INT 2
28088: ARRAY
28089: LESS
28090: IFFALSE 28128
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28092: LD_ADDR_VAR 0 6
28096: PUSH
28097: LD_VAR 0 6
28101: PPUSH
28102: LD_VAR 0 8
28106: PPUSH
28107: LD_VAR 0 7
28111: PUSH
28112: LD_VAR 0 9
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 2
28125: ST_TO_ADDR
// break ;
28126: GO 28130
// end ; end ;
28128: GO 28067
28130: POP
28131: POP
// end ; end ;
28132: GO 27931
28134: POP
28135: POP
// if result and not asc then
28136: LD_VAR 0 6
28140: PUSH
28141: LD_VAR 0 4
28145: NOT
28146: AND
28147: IFFALSE 28222
// begin tmp := result ;
28149: LD_ADDR_VAR 0 9
28153: PUSH
28154: LD_VAR 0 6
28158: ST_TO_ADDR
// for i = tmp downto 1 do
28159: LD_ADDR_VAR 0 7
28163: PUSH
28164: DOUBLE
28165: LD_VAR 0 9
28169: INC
28170: ST_TO_ADDR
28171: LD_INT 1
28173: PUSH
28174: FOR_DOWNTO
28175: IFFALSE 28220
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28177: LD_ADDR_VAR 0 6
28181: PUSH
28182: LD_VAR 0 6
28186: PPUSH
28187: LD_VAR 0 9
28191: PUSH
28192: LD_VAR 0 7
28196: MINUS
28197: PUSH
28198: LD_INT 1
28200: PLUS
28201: PPUSH
28202: LD_VAR 0 9
28206: PUSH
28207: LD_VAR 0 7
28211: ARRAY
28212: PPUSH
28213: CALL_OW 1
28217: ST_TO_ADDR
28218: GO 28174
28220: POP
28221: POP
// end ; tmp := [ ] ;
28222: LD_ADDR_VAR 0 9
28226: PUSH
28227: EMPTY
28228: ST_TO_ADDR
// if mode then
28229: LD_VAR 0 5
28233: IFFALSE 28302
// begin for i = 1 to result do
28235: LD_ADDR_VAR 0 7
28239: PUSH
28240: DOUBLE
28241: LD_INT 1
28243: DEC
28244: ST_TO_ADDR
28245: LD_VAR 0 6
28249: PUSH
28250: FOR_TO
28251: IFFALSE 28290
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28253: LD_ADDR_VAR 0 9
28257: PUSH
28258: LD_VAR 0 9
28262: PPUSH
28263: LD_VAR 0 7
28267: PPUSH
28268: LD_VAR 0 6
28272: PUSH
28273: LD_VAR 0 7
28277: ARRAY
28278: PUSH
28279: LD_INT 1
28281: ARRAY
28282: PPUSH
28283: CALL_OW 1
28287: ST_TO_ADDR
28288: GO 28250
28290: POP
28291: POP
// result := tmp ;
28292: LD_ADDR_VAR 0 6
28296: PUSH
28297: LD_VAR 0 9
28301: ST_TO_ADDR
// end ; end ;
28302: LD_VAR 0 6
28306: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28315: LD_ADDR_VAR 0 5
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: ST_TO_ADDR
// if not x or not y then
28337: LD_VAR 0 2
28341: NOT
28342: PUSH
28343: LD_VAR 0 3
28347: NOT
28348: OR
28349: IFFALSE 28353
// exit ;
28351: GO 30005
// if not range then
28353: LD_VAR 0 4
28357: NOT
28358: IFFALSE 28368
// range := 10 ;
28360: LD_ADDR_VAR 0 4
28364: PUSH
28365: LD_INT 10
28367: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28368: LD_ADDR_VAR 0 8
28372: PUSH
28373: LD_INT 81
28375: PUSH
28376: LD_VAR 0 1
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 92
28387: PUSH
28388: LD_VAR 0 2
28392: PUSH
28393: LD_VAR 0 3
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: LD_INT 21
28414: PUSH
28415: LD_INT 3
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 69
28435: ST_TO_ADDR
// if not tmp then
28436: LD_VAR 0 8
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 30005
// for i in tmp do
28445: LD_ADDR_VAR 0 6
28449: PUSH
28450: LD_VAR 0 8
28454: PUSH
28455: FOR_IN
28456: IFFALSE 29980
// begin points := [ 0 , 0 , 0 ] ;
28458: LD_ADDR_VAR 0 9
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: ST_TO_ADDR
// bpoints := 1 ;
28477: LD_ADDR_VAR 0 10
28481: PUSH
28482: LD_INT 1
28484: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28485: LD_VAR 0 6
28489: PPUSH
28490: CALL_OW 247
28494: PUSH
28495: LD_INT 1
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 29081
28503: POP
// begin if GetClass ( i ) = 1 then
28504: LD_VAR 0 6
28508: PPUSH
28509: CALL_OW 257
28513: PUSH
28514: LD_INT 1
28516: EQUAL
28517: IFFALSE 28538
// points := [ 10 , 5 , 3 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 10
28526: PUSH
28527: LD_INT 5
28529: PUSH
28530: LD_INT 3
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 257
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: LD_INT 4
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: IN
28562: IFFALSE 28583
// points := [ 3 , 2 , 1 ] ;
28564: LD_ADDR_VAR 0 9
28568: PUSH
28569: LD_INT 3
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28583: LD_VAR 0 6
28587: PPUSH
28588: CALL_OW 257
28592: PUSH
28593: LD_INT 5
28595: EQUAL
28596: IFFALSE 28617
// points := [ 130 , 5 , 2 ] ;
28598: LD_ADDR_VAR 0 9
28602: PUSH
28603: LD_INT 130
28605: PUSH
28606: LD_INT 5
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28617: LD_VAR 0 6
28621: PPUSH
28622: CALL_OW 257
28626: PUSH
28627: LD_INT 8
28629: EQUAL
28630: IFFALSE 28651
// points := [ 35 , 35 , 30 ] ;
28632: LD_ADDR_VAR 0 9
28636: PUSH
28637: LD_INT 35
28639: PUSH
28640: LD_INT 35
28642: PUSH
28643: LD_INT 30
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28651: LD_VAR 0 6
28655: PPUSH
28656: CALL_OW 257
28660: PUSH
28661: LD_INT 9
28663: EQUAL
28664: IFFALSE 28685
// points := [ 20 , 55 , 40 ] ;
28666: LD_ADDR_VAR 0 9
28670: PUSH
28671: LD_INT 20
28673: PUSH
28674: LD_INT 55
28676: PUSH
28677: LD_INT 40
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28685: LD_VAR 0 6
28689: PPUSH
28690: CALL_OW 257
28694: PUSH
28695: LD_INT 12
28697: PUSH
28698: LD_INT 16
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: IN
28705: IFFALSE 28726
// points := [ 5 , 3 , 2 ] ;
28707: LD_ADDR_VAR 0 9
28711: PUSH
28712: LD_INT 5
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 2
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28726: LD_VAR 0 6
28730: PPUSH
28731: CALL_OW 257
28735: PUSH
28736: LD_INT 17
28738: EQUAL
28739: IFFALSE 28760
// points := [ 100 , 50 , 75 ] ;
28741: LD_ADDR_VAR 0 9
28745: PUSH
28746: LD_INT 100
28748: PUSH
28749: LD_INT 50
28751: PUSH
28752: LD_INT 75
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: LIST
28759: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28760: LD_VAR 0 6
28764: PPUSH
28765: CALL_OW 257
28769: PUSH
28770: LD_INT 15
28772: EQUAL
28773: IFFALSE 28794
// points := [ 10 , 5 , 3 ] ;
28775: LD_ADDR_VAR 0 9
28779: PUSH
28780: LD_INT 10
28782: PUSH
28783: LD_INT 5
28785: PUSH
28786: LD_INT 3
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28794: LD_VAR 0 6
28798: PPUSH
28799: CALL_OW 257
28803: PUSH
28804: LD_INT 14
28806: EQUAL
28807: IFFALSE 28828
// points := [ 10 , 0 , 0 ] ;
28809: LD_ADDR_VAR 0 9
28813: PUSH
28814: LD_INT 10
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28828: LD_VAR 0 6
28832: PPUSH
28833: CALL_OW 257
28837: PUSH
28838: LD_INT 11
28840: EQUAL
28841: IFFALSE 28862
// points := [ 30 , 10 , 5 ] ;
28843: LD_ADDR_VAR 0 9
28847: PUSH
28848: LD_INT 30
28850: PUSH
28851: LD_INT 10
28853: PUSH
28854: LD_INT 5
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28862: LD_VAR 0 1
28866: PPUSH
28867: LD_INT 5
28869: PPUSH
28870: CALL_OW 321
28874: PUSH
28875: LD_INT 2
28877: EQUAL
28878: IFFALSE 28895
// bpoints := bpoints * 1.8 ;
28880: LD_ADDR_VAR 0 10
28884: PUSH
28885: LD_VAR 0 10
28889: PUSH
28890: LD_REAL  1.80000000000000E+0000
28893: MUL
28894: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28895: LD_VAR 0 6
28899: PPUSH
28900: CALL_OW 257
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 3
28913: PUSH
28914: LD_INT 4
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: IN
28923: PUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: LD_INT 51
28931: PPUSH
28932: CALL_OW 321
28936: PUSH
28937: LD_INT 2
28939: EQUAL
28940: AND
28941: IFFALSE 28958
// bpoints := bpoints * 1.2 ;
28943: LD_ADDR_VAR 0 10
28947: PUSH
28948: LD_VAR 0 10
28952: PUSH
28953: LD_REAL  1.20000000000000E+0000
28956: MUL
28957: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28958: LD_VAR 0 6
28962: PPUSH
28963: CALL_OW 257
28967: PUSH
28968: LD_INT 5
28970: PUSH
28971: LD_INT 7
28973: PUSH
28974: LD_INT 9
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: IN
28982: PUSH
28983: LD_VAR 0 1
28987: PPUSH
28988: LD_INT 52
28990: PPUSH
28991: CALL_OW 321
28995: PUSH
28996: LD_INT 2
28998: EQUAL
28999: AND
29000: IFFALSE 29017
// bpoints := bpoints * 1.5 ;
29002: LD_ADDR_VAR 0 10
29006: PUSH
29007: LD_VAR 0 10
29011: PUSH
29012: LD_REAL  1.50000000000000E+0000
29015: MUL
29016: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29017: LD_VAR 0 1
29021: PPUSH
29022: LD_INT 66
29024: PPUSH
29025: CALL_OW 321
29029: PUSH
29030: LD_INT 2
29032: EQUAL
29033: IFFALSE 29050
// bpoints := bpoints * 1.1 ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 10
29044: PUSH
29045: LD_REAL  1.10000000000000E+0000
29048: MUL
29049: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29050: LD_ADDR_VAR 0 10
29054: PUSH
29055: LD_VAR 0 10
29059: PUSH
29060: LD_VAR 0 6
29064: PPUSH
29065: LD_INT 1
29067: PPUSH
29068: CALL_OW 259
29072: PUSH
29073: LD_REAL  1.15000000000000E+0000
29076: MUL
29077: MUL
29078: ST_TO_ADDR
// end ; unit_vehicle :
29079: GO 29909
29081: LD_INT 2
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29897
29089: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29090: LD_VAR 0 6
29094: PPUSH
29095: CALL_OW 264
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: LD_INT 42
29105: PUSH
29106: LD_INT 24
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: IN
29114: IFFALSE 29135
// points := [ 25 , 5 , 3 ] ;
29116: LD_ADDR_VAR 0 9
29120: PUSH
29121: LD_INT 25
29123: PUSH
29124: LD_INT 5
29126: PUSH
29127: LD_INT 3
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: LIST
29134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29135: LD_VAR 0 6
29139: PPUSH
29140: CALL_OW 264
29144: PUSH
29145: LD_INT 4
29147: PUSH
29148: LD_INT 43
29150: PUSH
29151: LD_INT 25
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: IN
29159: IFFALSE 29180
// points := [ 40 , 15 , 5 ] ;
29161: LD_ADDR_VAR 0 9
29165: PUSH
29166: LD_INT 40
29168: PUSH
29169: LD_INT 15
29171: PUSH
29172: LD_INT 5
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: LIST
29179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29180: LD_VAR 0 6
29184: PPUSH
29185: CALL_OW 264
29189: PUSH
29190: LD_INT 3
29192: PUSH
29193: LD_INT 23
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: IN
29200: IFFALSE 29221
// points := [ 7 , 25 , 8 ] ;
29202: LD_ADDR_VAR 0 9
29206: PUSH
29207: LD_INT 7
29209: PUSH
29210: LD_INT 25
29212: PUSH
29213: LD_INT 8
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29221: LD_VAR 0 6
29225: PPUSH
29226: CALL_OW 264
29230: PUSH
29231: LD_INT 5
29233: PUSH
29234: LD_INT 27
29236: PUSH
29237: LD_INT 44
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: IN
29245: IFFALSE 29266
// points := [ 14 , 50 , 16 ] ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_INT 14
29254: PUSH
29255: LD_INT 50
29257: PUSH
29258: LD_INT 16
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29266: LD_VAR 0 6
29270: PPUSH
29271: CALL_OW 264
29275: PUSH
29276: LD_INT 6
29278: PUSH
29279: LD_INT 46
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: IN
29286: IFFALSE 29307
// points := [ 32 , 120 , 70 ] ;
29288: LD_ADDR_VAR 0 9
29292: PUSH
29293: LD_INT 32
29295: PUSH
29296: LD_INT 120
29298: PUSH
29299: LD_INT 70
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29307: LD_VAR 0 6
29311: PPUSH
29312: CALL_OW 264
29316: PUSH
29317: LD_INT 7
29319: PUSH
29320: LD_INT 28
29322: PUSH
29323: LD_INT 45
29325: PUSH
29326: LD_EXP 98
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: IN
29337: IFFALSE 29358
// points := [ 35 , 20 , 45 ] ;
29339: LD_ADDR_VAR 0 9
29343: PUSH
29344: LD_INT 35
29346: PUSH
29347: LD_INT 20
29349: PUSH
29350: LD_INT 45
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29358: LD_VAR 0 6
29362: PPUSH
29363: CALL_OW 264
29367: PUSH
29368: LD_INT 47
29370: PUSH
29371: EMPTY
29372: LIST
29373: IN
29374: IFFALSE 29395
// points := [ 67 , 45 , 75 ] ;
29376: LD_ADDR_VAR 0 9
29380: PUSH
29381: LD_INT 67
29383: PUSH
29384: LD_INT 45
29386: PUSH
29387: LD_INT 75
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29395: LD_VAR 0 6
29399: PPUSH
29400: CALL_OW 264
29404: PUSH
29405: LD_INT 26
29407: PUSH
29408: EMPTY
29409: LIST
29410: IN
29411: IFFALSE 29432
// points := [ 120 , 30 , 80 ] ;
29413: LD_ADDR_VAR 0 9
29417: PUSH
29418: LD_INT 120
29420: PUSH
29421: LD_INT 30
29423: PUSH
29424: LD_INT 80
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29432: LD_VAR 0 6
29436: PPUSH
29437: CALL_OW 264
29441: PUSH
29442: LD_INT 22
29444: PUSH
29445: EMPTY
29446: LIST
29447: IN
29448: IFFALSE 29469
// points := [ 40 , 1 , 1 ] ;
29450: LD_ADDR_VAR 0 9
29454: PUSH
29455: LD_INT 40
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29469: LD_VAR 0 6
29473: PPUSH
29474: CALL_OW 264
29478: PUSH
29479: LD_INT 29
29481: PUSH
29482: EMPTY
29483: LIST
29484: IN
29485: IFFALSE 29506
// points := [ 70 , 200 , 400 ] ;
29487: LD_ADDR_VAR 0 9
29491: PUSH
29492: LD_INT 70
29494: PUSH
29495: LD_INT 200
29497: PUSH
29498: LD_INT 400
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29506: LD_VAR 0 6
29510: PPUSH
29511: CALL_OW 264
29515: PUSH
29516: LD_INT 14
29518: PUSH
29519: LD_INT 53
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: IN
29526: IFFALSE 29547
// points := [ 40 , 10 , 20 ] ;
29528: LD_ADDR_VAR 0 9
29532: PUSH
29533: LD_INT 40
29535: PUSH
29536: LD_INT 10
29538: PUSH
29539: LD_INT 20
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29547: LD_VAR 0 6
29551: PPUSH
29552: CALL_OW 264
29556: PUSH
29557: LD_INT 9
29559: PUSH
29560: EMPTY
29561: LIST
29562: IN
29563: IFFALSE 29584
// points := [ 5 , 70 , 20 ] ;
29565: LD_ADDR_VAR 0 9
29569: PUSH
29570: LD_INT 5
29572: PUSH
29573: LD_INT 70
29575: PUSH
29576: LD_INT 20
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29584: LD_VAR 0 6
29588: PPUSH
29589: CALL_OW 264
29593: PUSH
29594: LD_INT 10
29596: PUSH
29597: EMPTY
29598: LIST
29599: IN
29600: IFFALSE 29621
// points := [ 35 , 110 , 70 ] ;
29602: LD_ADDR_VAR 0 9
29606: PUSH
29607: LD_INT 35
29609: PUSH
29610: LD_INT 110
29612: PUSH
29613: LD_INT 70
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29621: LD_VAR 0 6
29625: PPUSH
29626: CALL_OW 265
29630: PUSH
29631: LD_INT 25
29633: EQUAL
29634: IFFALSE 29655
// points := [ 80 , 65 , 100 ] ;
29636: LD_ADDR_VAR 0 9
29640: PUSH
29641: LD_INT 80
29643: PUSH
29644: LD_INT 65
29646: PUSH
29647: LD_INT 100
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29655: LD_VAR 0 6
29659: PPUSH
29660: CALL_OW 263
29664: PUSH
29665: LD_INT 1
29667: EQUAL
29668: IFFALSE 29703
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29670: LD_ADDR_VAR 0 10
29674: PUSH
29675: LD_VAR 0 10
29679: PUSH
29680: LD_VAR 0 6
29684: PPUSH
29685: CALL_OW 311
29689: PPUSH
29690: LD_INT 3
29692: PPUSH
29693: CALL_OW 259
29697: PUSH
29698: LD_INT 4
29700: MUL
29701: MUL
29702: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29703: LD_VAR 0 6
29707: PPUSH
29708: CALL_OW 263
29712: PUSH
29713: LD_INT 2
29715: EQUAL
29716: IFFALSE 29767
// begin j := IsControledBy ( i ) ;
29718: LD_ADDR_VAR 0 7
29722: PUSH
29723: LD_VAR 0 6
29727: PPUSH
29728: CALL_OW 312
29732: ST_TO_ADDR
// if j then
29733: LD_VAR 0 7
29737: IFFALSE 29767
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29739: LD_ADDR_VAR 0 10
29743: PUSH
29744: LD_VAR 0 10
29748: PUSH
29749: LD_VAR 0 7
29753: PPUSH
29754: LD_INT 3
29756: PPUSH
29757: CALL_OW 259
29761: PUSH
29762: LD_INT 3
29764: MUL
29765: MUL
29766: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29767: LD_VAR 0 6
29771: PPUSH
29772: CALL_OW 264
29776: PUSH
29777: LD_INT 5
29779: PUSH
29780: LD_INT 6
29782: PUSH
29783: LD_INT 46
29785: PUSH
29786: LD_INT 44
29788: PUSH
29789: LD_INT 47
29791: PUSH
29792: LD_INT 45
29794: PUSH
29795: LD_INT 28
29797: PUSH
29798: LD_INT 7
29800: PUSH
29801: LD_INT 27
29803: PUSH
29804: LD_INT 29
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: IN
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_INT 52
29827: PPUSH
29828: CALL_OW 321
29832: PUSH
29833: LD_INT 2
29835: EQUAL
29836: AND
29837: IFFALSE 29854
// bpoints := bpoints * 1.2 ;
29839: LD_ADDR_VAR 0 10
29843: PUSH
29844: LD_VAR 0 10
29848: PUSH
29849: LD_REAL  1.20000000000000E+0000
29852: MUL
29853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29854: LD_VAR 0 6
29858: PPUSH
29859: CALL_OW 264
29863: PUSH
29864: LD_INT 6
29866: PUSH
29867: LD_INT 46
29869: PUSH
29870: LD_INT 47
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: IN
29878: IFFALSE 29895
// bpoints := bpoints * 1.2 ;
29880: LD_ADDR_VAR 0 10
29884: PUSH
29885: LD_VAR 0 10
29889: PUSH
29890: LD_REAL  1.20000000000000E+0000
29893: MUL
29894: ST_TO_ADDR
// end ; unit_building :
29895: GO 29909
29897: LD_INT 3
29899: DOUBLE
29900: EQUAL
29901: IFTRUE 29905
29903: GO 29908
29905: POP
// ; end ;
29906: GO 29909
29908: POP
// for j = 1 to 3 do
29909: LD_ADDR_VAR 0 7
29913: PUSH
29914: DOUBLE
29915: LD_INT 1
29917: DEC
29918: ST_TO_ADDR
29919: LD_INT 3
29921: PUSH
29922: FOR_TO
29923: IFFALSE 29976
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29925: LD_ADDR_VAR 0 5
29929: PUSH
29930: LD_VAR 0 5
29934: PPUSH
29935: LD_VAR 0 7
29939: PPUSH
29940: LD_VAR 0 5
29944: PUSH
29945: LD_VAR 0 7
29949: ARRAY
29950: PUSH
29951: LD_VAR 0 9
29955: PUSH
29956: LD_VAR 0 7
29960: ARRAY
29961: PUSH
29962: LD_VAR 0 10
29966: MUL
29967: PLUS
29968: PPUSH
29969: CALL_OW 1
29973: ST_TO_ADDR
29974: GO 29922
29976: POP
29977: POP
// end ;
29978: GO 28455
29980: POP
29981: POP
// result := Replace ( result , 4 , tmp ) ;
29982: LD_ADDR_VAR 0 5
29986: PUSH
29987: LD_VAR 0 5
29991: PPUSH
29992: LD_INT 4
29994: PPUSH
29995: LD_VAR 0 8
29999: PPUSH
30000: CALL_OW 1
30004: ST_TO_ADDR
// end ;
30005: LD_VAR 0 5
30009: RET
// export function DangerAtRange ( unit , range ) ; begin
30010: LD_INT 0
30012: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL_OW 255
30027: PPUSH
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 250
30037: PPUSH
30038: LD_VAR 0 1
30042: PPUSH
30043: CALL_OW 251
30047: PPUSH
30048: LD_VAR 0 2
30052: PPUSH
30053: CALL 28307 0 4
30057: ST_TO_ADDR
// end ;
30058: LD_VAR 0 3
30062: RET
// export function DangerInArea ( side , area ) ; begin
30063: LD_INT 0
30065: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30066: LD_ADDR_VAR 0 3
30070: PUSH
30071: LD_VAR 0 2
30075: PPUSH
30076: LD_INT 81
30078: PUSH
30079: LD_VAR 0 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 70
30092: ST_TO_ADDR
// end ;
30093: LD_VAR 0 3
30097: RET
// export function IsExtension ( b ) ; begin
30098: LD_INT 0
30100: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 23
30113: PUSH
30114: LD_INT 20
30116: PUSH
30117: LD_INT 22
30119: PUSH
30120: LD_INT 17
30122: PUSH
30123: LD_INT 24
30125: PUSH
30126: LD_INT 21
30128: PUSH
30129: LD_INT 19
30131: PUSH
30132: LD_INT 16
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 18
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: IN
30153: ST_TO_ADDR
// end ;
30154: LD_VAR 0 2
30158: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
30163: PPUSH
// result := [ ] ;
30164: LD_ADDR_VAR 0 4
30168: PUSH
30169: EMPTY
30170: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30171: LD_ADDR_VAR 0 5
30175: PUSH
30176: LD_VAR 0 2
30180: PPUSH
30181: LD_INT 21
30183: PUSH
30184: LD_INT 3
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PPUSH
30191: CALL_OW 70
30195: ST_TO_ADDR
// if not tmp then
30196: LD_VAR 0 5
30200: NOT
30201: IFFALSE 30205
// exit ;
30203: GO 30269
// if checkLink then
30205: LD_VAR 0 3
30209: IFFALSE 30259
// begin for i in tmp do
30211: LD_ADDR_VAR 0 6
30215: PUSH
30216: LD_VAR 0 5
30220: PUSH
30221: FOR_IN
30222: IFFALSE 30257
// if GetBase ( i ) <> base then
30224: LD_VAR 0 6
30228: PPUSH
30229: CALL_OW 274
30233: PUSH
30234: LD_VAR 0 1
30238: NONEQUAL
30239: IFFALSE 30255
// ComLinkToBase ( base , i ) ;
30241: LD_VAR 0 1
30245: PPUSH
30246: LD_VAR 0 6
30250: PPUSH
30251: CALL_OW 169
30255: GO 30221
30257: POP
30258: POP
// end ; result := tmp ;
30259: LD_ADDR_VAR 0 4
30263: PUSH
30264: LD_VAR 0 5
30268: ST_TO_ADDR
// end ;
30269: LD_VAR 0 4
30273: RET
// export function ComComplete ( units , b ) ; var i ; begin
30274: LD_INT 0
30276: PPUSH
30277: PPUSH
// if not units then
30278: LD_VAR 0 1
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30377
// for i in units do
30287: LD_ADDR_VAR 0 4
30291: PUSH
30292: LD_VAR 0 1
30296: PUSH
30297: FOR_IN
30298: IFFALSE 30375
// if BuildingStatus ( b ) = bs_build then
30300: LD_VAR 0 2
30304: PPUSH
30305: CALL_OW 461
30309: PUSH
30310: LD_INT 1
30312: EQUAL
30313: IFFALSE 30373
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30315: LD_VAR 0 4
30319: PPUSH
30320: LD_STRING h
30322: PUSH
30323: LD_VAR 0 2
30327: PPUSH
30328: CALL_OW 250
30332: PUSH
30333: LD_VAR 0 2
30337: PPUSH
30338: CALL_OW 251
30342: PUSH
30343: LD_VAR 0 2
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: PUSH
30366: EMPTY
30367: LIST
30368: PPUSH
30369: CALL_OW 446
30373: GO 30297
30375: POP
30376: POP
// end ;
30377: LD_VAR 0 3
30381: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30382: LD_INT 0
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
30389: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30390: LD_VAR 0 1
30394: NOT
30395: PUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 263
30405: PUSH
30406: LD_INT 2
30408: NONEQUAL
30409: OR
30410: IFFALSE 30414
// exit ;
30412: GO 30730
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30414: LD_ADDR_VAR 0 6
30418: PUSH
30419: LD_INT 22
30421: PUSH
30422: LD_VAR 0 1
30426: PPUSH
30427: CALL_OW 255
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 36
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 34
30451: PUSH
30452: LD_INT 31
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PPUSH
30468: CALL_OW 69
30472: ST_TO_ADDR
// if not tmp then
30473: LD_VAR 0 6
30477: NOT
30478: IFFALSE 30482
// exit ;
30480: GO 30730
// result := [ ] ;
30482: LD_ADDR_VAR 0 2
30486: PUSH
30487: EMPTY
30488: ST_TO_ADDR
// for i in tmp do
30489: LD_ADDR_VAR 0 3
30493: PUSH
30494: LD_VAR 0 6
30498: PUSH
30499: FOR_IN
30500: IFFALSE 30571
// begin t := UnitsInside ( i ) ;
30502: LD_ADDR_VAR 0 4
30506: PUSH
30507: LD_VAR 0 3
30511: PPUSH
30512: CALL_OW 313
30516: ST_TO_ADDR
// if t then
30517: LD_VAR 0 4
30521: IFFALSE 30569
// for j in t do
30523: LD_ADDR_VAR 0 7
30527: PUSH
30528: LD_VAR 0 4
30532: PUSH
30533: FOR_IN
30534: IFFALSE 30567
// result := Replace ( result , result + 1 , j ) ;
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_VAR 0 2
30545: PPUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_INT 1
30553: PLUS
30554: PPUSH
30555: LD_VAR 0 7
30559: PPUSH
30560: CALL_OW 1
30564: ST_TO_ADDR
30565: GO 30533
30567: POP
30568: POP
// end ;
30569: GO 30499
30571: POP
30572: POP
// if not result then
30573: LD_VAR 0 2
30577: NOT
30578: IFFALSE 30582
// exit ;
30580: GO 30730
// mech := result [ 1 ] ;
30582: LD_ADDR_VAR 0 5
30586: PUSH
30587: LD_VAR 0 2
30591: PUSH
30592: LD_INT 1
30594: ARRAY
30595: ST_TO_ADDR
// if result > 1 then
30596: LD_VAR 0 2
30600: PUSH
30601: LD_INT 1
30603: GREATER
30604: IFFALSE 30716
// begin for i = 2 to result do
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: DOUBLE
30612: LD_INT 2
30614: DEC
30615: ST_TO_ADDR
30616: LD_VAR 0 2
30620: PUSH
30621: FOR_TO
30622: IFFALSE 30714
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30624: LD_ADDR_VAR 0 4
30628: PUSH
30629: LD_VAR 0 2
30633: PUSH
30634: LD_VAR 0 3
30638: ARRAY
30639: PPUSH
30640: LD_INT 3
30642: PPUSH
30643: CALL_OW 259
30647: PUSH
30648: LD_VAR 0 2
30652: PUSH
30653: LD_VAR 0 3
30657: ARRAY
30658: PPUSH
30659: CALL_OW 432
30663: MINUS
30664: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30665: LD_VAR 0 4
30669: PUSH
30670: LD_VAR 0 5
30674: PPUSH
30675: LD_INT 3
30677: PPUSH
30678: CALL_OW 259
30682: PUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: CALL_OW 432
30692: MINUS
30693: GREATEREQUAL
30694: IFFALSE 30712
// mech := result [ i ] ;
30696: LD_ADDR_VAR 0 5
30700: PUSH
30701: LD_VAR 0 2
30705: PUSH
30706: LD_VAR 0 3
30710: ARRAY
30711: ST_TO_ADDR
// end ;
30712: GO 30621
30714: POP
30715: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30716: LD_VAR 0 1
30720: PPUSH
30721: LD_VAR 0 5
30725: PPUSH
30726: CALL_OW 135
// end ;
30730: LD_VAR 0 2
30734: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30735: LD_INT 0
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
// result := [ ] ;
30750: LD_ADDR_VAR 0 7
30754: PUSH
30755: EMPTY
30756: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 266
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: IN
30777: NOT
30778: IFFALSE 30782
// exit ;
30780: GO 32416
// if name then
30782: LD_VAR 0 3
30786: IFFALSE 30802
// SetBName ( base_dep , name ) ;
30788: LD_VAR 0 1
30792: PPUSH
30793: LD_VAR 0 3
30797: PPUSH
30798: CALL_OW 500
// base := GetBase ( base_dep ) ;
30802: LD_ADDR_VAR 0 15
30806: PUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 274
30816: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30817: LD_ADDR_VAR 0 16
30821: PUSH
30822: LD_VAR 0 1
30826: PPUSH
30827: CALL_OW 255
30831: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30832: LD_ADDR_VAR 0 17
30836: PUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 248
30846: ST_TO_ADDR
// if sources then
30847: LD_VAR 0 5
30851: IFFALSE 30898
// for i = 1 to 3 do
30853: LD_ADDR_VAR 0 8
30857: PUSH
30858: DOUBLE
30859: LD_INT 1
30861: DEC
30862: ST_TO_ADDR
30863: LD_INT 3
30865: PUSH
30866: FOR_TO
30867: IFFALSE 30896
// AddResourceType ( base , i , sources [ i ] ) ;
30869: LD_VAR 0 15
30873: PPUSH
30874: LD_VAR 0 8
30878: PPUSH
30879: LD_VAR 0 5
30883: PUSH
30884: LD_VAR 0 8
30888: ARRAY
30889: PPUSH
30890: CALL_OW 276
30894: GO 30866
30896: POP
30897: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30898: LD_ADDR_VAR 0 18
30902: PUSH
30903: LD_VAR 0 15
30907: PPUSH
30908: LD_VAR 0 2
30912: PPUSH
30913: LD_INT 1
30915: PPUSH
30916: CALL 30159 0 3
30920: ST_TO_ADDR
// InitHc ;
30921: CALL_OW 19
// InitUc ;
30925: CALL_OW 18
// uc_side := side ;
30929: LD_ADDR_OWVAR 20
30933: PUSH
30934: LD_VAR 0 16
30938: ST_TO_ADDR
// uc_nation := nation ;
30939: LD_ADDR_OWVAR 21
30943: PUSH
30944: LD_VAR 0 17
30948: ST_TO_ADDR
// if buildings then
30949: LD_VAR 0 18
30953: IFFALSE 32275
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30955: LD_ADDR_VAR 0 19
30959: PUSH
30960: LD_VAR 0 18
30964: PPUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 30
30970: PUSH
30971: LD_INT 29
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 30
30980: PUSH
30981: LD_INT 30
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: PPUSH
30993: CALL_OW 72
30997: ST_TO_ADDR
// if tmp then
30998: LD_VAR 0 19
31002: IFFALSE 31050
// for i in tmp do
31004: LD_ADDR_VAR 0 8
31008: PUSH
31009: LD_VAR 0 19
31013: PUSH
31014: FOR_IN
31015: IFFALSE 31048
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31017: LD_VAR 0 8
31021: PPUSH
31022: CALL_OW 250
31026: PPUSH
31027: LD_VAR 0 8
31031: PPUSH
31032: CALL_OW 251
31036: PPUSH
31037: LD_VAR 0 16
31041: PPUSH
31042: CALL_OW 441
31046: GO 31014
31048: POP
31049: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31050: LD_VAR 0 18
31054: PPUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 30
31060: PUSH
31061: LD_INT 32
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 30
31070: PUSH
31071: LD_INT 33
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 72
31087: IFFALSE 31175
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31089: LD_ADDR_VAR 0 8
31093: PUSH
31094: LD_VAR 0 18
31098: PPUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 30
31104: PUSH
31105: LD_INT 32
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 30
31114: PUSH
31115: LD_INT 33
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: PPUSH
31127: CALL_OW 72
31131: PUSH
31132: FOR_IN
31133: IFFALSE 31173
// begin if not GetBWeapon ( i ) then
31135: LD_VAR 0 8
31139: PPUSH
31140: CALL_OW 269
31144: NOT
31145: IFFALSE 31171
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31147: LD_VAR 0 8
31151: PPUSH
31152: LD_VAR 0 8
31156: PPUSH
31157: LD_VAR 0 2
31161: PPUSH
31162: CALL 32421 0 2
31166: PPUSH
31167: CALL_OW 431
// end ;
31171: GO 31132
31173: POP
31174: POP
// end ; for i = 1 to personel do
31175: LD_ADDR_VAR 0 8
31179: PUSH
31180: DOUBLE
31181: LD_INT 1
31183: DEC
31184: ST_TO_ADDR
31185: LD_VAR 0 6
31189: PUSH
31190: FOR_TO
31191: IFFALSE 32255
// begin if i > 4 then
31193: LD_VAR 0 8
31197: PUSH
31198: LD_INT 4
31200: GREATER
31201: IFFALSE 31205
// break ;
31203: GO 32255
// case i of 1 :
31205: LD_VAR 0 8
31209: PUSH
31210: LD_INT 1
31212: DOUBLE
31213: EQUAL
31214: IFTRUE 31218
31216: GO 31298
31218: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31219: LD_ADDR_VAR 0 12
31223: PUSH
31224: LD_VAR 0 18
31228: PPUSH
31229: LD_INT 22
31231: PUSH
31232: LD_VAR 0 16
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 58
31243: PUSH
31244: EMPTY
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 32
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 30
31262: PUSH
31263: LD_INT 4
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 30
31272: PUSH
31273: LD_INT 5
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: PPUSH
31291: CALL_OW 72
31295: ST_TO_ADDR
31296: GO 31520
31298: LD_INT 2
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31368
31306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31307: LD_ADDR_VAR 0 12
31311: PUSH
31312: LD_VAR 0 18
31316: PPUSH
31317: LD_INT 22
31319: PUSH
31320: LD_VAR 0 16
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 30
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 30
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PPUSH
31361: CALL_OW 72
31365: ST_TO_ADDR
31366: GO 31520
31368: LD_INT 3
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31438
31376: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31377: LD_ADDR_VAR 0 12
31381: PUSH
31382: LD_VAR 0 18
31386: PPUSH
31387: LD_INT 22
31389: PUSH
31390: LD_VAR 0 16
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 30
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 30
31414: PUSH
31415: LD_INT 3
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 72
31435: ST_TO_ADDR
31436: GO 31520
31438: LD_INT 4
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31519
31446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31447: LD_ADDR_VAR 0 12
31451: PUSH
31452: LD_VAR 0 18
31456: PPUSH
31457: LD_INT 22
31459: PUSH
31460: LD_VAR 0 16
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 30
31474: PUSH
31475: LD_INT 6
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 30
31484: PUSH
31485: LD_INT 7
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 30
31494: PUSH
31495: LD_INT 8
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PPUSH
31512: CALL_OW 72
31516: ST_TO_ADDR
31517: GO 31520
31519: POP
// if i = 1 then
31520: LD_VAR 0 8
31524: PUSH
31525: LD_INT 1
31527: EQUAL
31528: IFFALSE 31639
// begin tmp := [ ] ;
31530: LD_ADDR_VAR 0 19
31534: PUSH
31535: EMPTY
31536: ST_TO_ADDR
// for j in f do
31537: LD_ADDR_VAR 0 9
31541: PUSH
31542: LD_VAR 0 12
31546: PUSH
31547: FOR_IN
31548: IFFALSE 31621
// if GetBType ( j ) = b_bunker then
31550: LD_VAR 0 9
31554: PPUSH
31555: CALL_OW 266
31559: PUSH
31560: LD_INT 32
31562: EQUAL
31563: IFFALSE 31590
// tmp := Insert ( tmp , 1 , j ) else
31565: LD_ADDR_VAR 0 19
31569: PUSH
31570: LD_VAR 0 19
31574: PPUSH
31575: LD_INT 1
31577: PPUSH
31578: LD_VAR 0 9
31582: PPUSH
31583: CALL_OW 2
31587: ST_TO_ADDR
31588: GO 31619
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31590: LD_ADDR_VAR 0 19
31594: PUSH
31595: LD_VAR 0 19
31599: PPUSH
31600: LD_VAR 0 19
31604: PUSH
31605: LD_INT 1
31607: PLUS
31608: PPUSH
31609: LD_VAR 0 9
31613: PPUSH
31614: CALL_OW 2
31618: ST_TO_ADDR
31619: GO 31547
31621: POP
31622: POP
// if tmp then
31623: LD_VAR 0 19
31627: IFFALSE 31639
// f := tmp ;
31629: LD_ADDR_VAR 0 12
31633: PUSH
31634: LD_VAR 0 19
31638: ST_TO_ADDR
// end ; x := personel [ i ] ;
31639: LD_ADDR_VAR 0 13
31643: PUSH
31644: LD_VAR 0 6
31648: PUSH
31649: LD_VAR 0 8
31653: ARRAY
31654: ST_TO_ADDR
// if x = - 1 then
31655: LD_VAR 0 13
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: EQUAL
31664: IFFALSE 31873
// begin for j in f do
31666: LD_ADDR_VAR 0 9
31670: PUSH
31671: LD_VAR 0 12
31675: PUSH
31676: FOR_IN
31677: IFFALSE 31869
// repeat InitHc ;
31679: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31683: LD_VAR 0 9
31687: PPUSH
31688: CALL_OW 266
31692: PUSH
31693: LD_INT 5
31695: EQUAL
31696: IFFALSE 31766
// begin if UnitsInside ( j ) < 3 then
31698: LD_VAR 0 9
31702: PPUSH
31703: CALL_OW 313
31707: PUSH
31708: LD_INT 3
31710: LESS
31711: IFFALSE 31747
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31713: LD_INT 0
31715: PPUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 8
31721: PUSH
31722: LD_INT 9
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: PUSH
31730: LD_VAR 0 17
31734: ARRAY
31735: PPUSH
31736: LD_VAR 0 4
31740: PPUSH
31741: CALL_OW 380
31745: GO 31764
// PrepareHuman ( false , i , skill ) ;
31747: LD_INT 0
31749: PPUSH
31750: LD_VAR 0 8
31754: PPUSH
31755: LD_VAR 0 4
31759: PPUSH
31760: CALL_OW 380
// end else
31764: GO 31783
// PrepareHuman ( false , i , skill ) ;
31766: LD_INT 0
31768: PPUSH
31769: LD_VAR 0 8
31773: PPUSH
31774: LD_VAR 0 4
31778: PPUSH
31779: CALL_OW 380
// un := CreateHuman ;
31783: LD_ADDR_VAR 0 14
31787: PUSH
31788: CALL_OW 44
31792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31793: LD_ADDR_VAR 0 7
31797: PUSH
31798: LD_VAR 0 7
31802: PPUSH
31803: LD_INT 1
31805: PPUSH
31806: LD_VAR 0 14
31810: PPUSH
31811: CALL_OW 2
31815: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31816: LD_VAR 0 14
31820: PPUSH
31821: LD_VAR 0 9
31825: PPUSH
31826: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31830: LD_VAR 0 9
31834: PPUSH
31835: CALL_OW 313
31839: PUSH
31840: LD_INT 6
31842: EQUAL
31843: PUSH
31844: LD_VAR 0 9
31848: PPUSH
31849: CALL_OW 266
31853: PUSH
31854: LD_INT 32
31856: PUSH
31857: LD_INT 31
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: IN
31864: OR
31865: IFFALSE 31679
31867: GO 31676
31869: POP
31870: POP
// end else
31871: GO 32253
// for j = 1 to x do
31873: LD_ADDR_VAR 0 9
31877: PUSH
31878: DOUBLE
31879: LD_INT 1
31881: DEC
31882: ST_TO_ADDR
31883: LD_VAR 0 13
31887: PUSH
31888: FOR_TO
31889: IFFALSE 32251
// begin InitHc ;
31891: CALL_OW 19
// if not f then
31895: LD_VAR 0 12
31899: NOT
31900: IFFALSE 31989
// begin PrepareHuman ( false , i , skill ) ;
31902: LD_INT 0
31904: PPUSH
31905: LD_VAR 0 8
31909: PPUSH
31910: LD_VAR 0 4
31914: PPUSH
31915: CALL_OW 380
// un := CreateHuman ;
31919: LD_ADDR_VAR 0 14
31923: PUSH
31924: CALL_OW 44
31928: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31929: LD_ADDR_VAR 0 7
31933: PUSH
31934: LD_VAR 0 7
31938: PPUSH
31939: LD_INT 1
31941: PPUSH
31942: LD_VAR 0 14
31946: PPUSH
31947: CALL_OW 2
31951: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31952: LD_VAR 0 14
31956: PPUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 250
31966: PPUSH
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 251
31976: PPUSH
31977: LD_INT 10
31979: PPUSH
31980: LD_INT 0
31982: PPUSH
31983: CALL_OW 50
// continue ;
31987: GO 31888
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31989: LD_VAR 0 12
31993: PUSH
31994: LD_INT 1
31996: ARRAY
31997: PPUSH
31998: CALL_OW 313
32002: PUSH
32003: LD_VAR 0 12
32007: PUSH
32008: LD_INT 1
32010: ARRAY
32011: PPUSH
32012: CALL_OW 266
32016: PUSH
32017: LD_INT 32
32019: PUSH
32020: LD_INT 31
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: IN
32027: AND
32028: PUSH
32029: LD_VAR 0 12
32033: PUSH
32034: LD_INT 1
32036: ARRAY
32037: PPUSH
32038: CALL_OW 313
32042: PUSH
32043: LD_INT 6
32045: EQUAL
32046: OR
32047: IFFALSE 32067
// f := Delete ( f , 1 ) ;
32049: LD_ADDR_VAR 0 12
32053: PUSH
32054: LD_VAR 0 12
32058: PPUSH
32059: LD_INT 1
32061: PPUSH
32062: CALL_OW 3
32066: ST_TO_ADDR
// if not f then
32067: LD_VAR 0 12
32071: NOT
32072: IFFALSE 32090
// begin x := x + 2 ;
32074: LD_ADDR_VAR 0 13
32078: PUSH
32079: LD_VAR 0 13
32083: PUSH
32084: LD_INT 2
32086: PLUS
32087: ST_TO_ADDR
// continue ;
32088: GO 31888
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32090: LD_VAR 0 12
32094: PUSH
32095: LD_INT 1
32097: ARRAY
32098: PPUSH
32099: CALL_OW 266
32103: PUSH
32104: LD_INT 5
32106: EQUAL
32107: IFFALSE 32181
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32109: LD_VAR 0 12
32113: PUSH
32114: LD_INT 1
32116: ARRAY
32117: PPUSH
32118: CALL_OW 313
32122: PUSH
32123: LD_INT 3
32125: LESS
32126: IFFALSE 32162
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32128: LD_INT 0
32130: PPUSH
32131: LD_INT 5
32133: PUSH
32134: LD_INT 8
32136: PUSH
32137: LD_INT 9
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: PUSH
32145: LD_VAR 0 17
32149: ARRAY
32150: PPUSH
32151: LD_VAR 0 4
32155: PPUSH
32156: CALL_OW 380
32160: GO 32179
// PrepareHuman ( false , i , skill ) ;
32162: LD_INT 0
32164: PPUSH
32165: LD_VAR 0 8
32169: PPUSH
32170: LD_VAR 0 4
32174: PPUSH
32175: CALL_OW 380
// end else
32179: GO 32198
// PrepareHuman ( false , i , skill ) ;
32181: LD_INT 0
32183: PPUSH
32184: LD_VAR 0 8
32188: PPUSH
32189: LD_VAR 0 4
32193: PPUSH
32194: CALL_OW 380
// un := CreateHuman ;
32198: LD_ADDR_VAR 0 14
32202: PUSH
32203: CALL_OW 44
32207: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32208: LD_ADDR_VAR 0 7
32212: PUSH
32213: LD_VAR 0 7
32217: PPUSH
32218: LD_INT 1
32220: PPUSH
32221: LD_VAR 0 14
32225: PPUSH
32226: CALL_OW 2
32230: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32231: LD_VAR 0 14
32235: PPUSH
32236: LD_VAR 0 12
32240: PUSH
32241: LD_INT 1
32243: ARRAY
32244: PPUSH
32245: CALL_OW 52
// end ;
32249: GO 31888
32251: POP
32252: POP
// end ;
32253: GO 31190
32255: POP
32256: POP
// result := result ^ buildings ;
32257: LD_ADDR_VAR 0 7
32261: PUSH
32262: LD_VAR 0 7
32266: PUSH
32267: LD_VAR 0 18
32271: ADD
32272: ST_TO_ADDR
// end else
32273: GO 32416
// begin for i = 1 to personel do
32275: LD_ADDR_VAR 0 8
32279: PUSH
32280: DOUBLE
32281: LD_INT 1
32283: DEC
32284: ST_TO_ADDR
32285: LD_VAR 0 6
32289: PUSH
32290: FOR_TO
32291: IFFALSE 32414
// begin if i > 4 then
32293: LD_VAR 0 8
32297: PUSH
32298: LD_INT 4
32300: GREATER
32301: IFFALSE 32305
// break ;
32303: GO 32414
// x := personel [ i ] ;
32305: LD_ADDR_VAR 0 13
32309: PUSH
32310: LD_VAR 0 6
32314: PUSH
32315: LD_VAR 0 8
32319: ARRAY
32320: ST_TO_ADDR
// if x = - 1 then
32321: LD_VAR 0 13
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: EQUAL
32330: IFFALSE 32334
// continue ;
32332: GO 32290
// PrepareHuman ( false , i , skill ) ;
32334: LD_INT 0
32336: PPUSH
32337: LD_VAR 0 8
32341: PPUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: CALL_OW 380
// un := CreateHuman ;
32351: LD_ADDR_VAR 0 14
32355: PUSH
32356: CALL_OW 44
32360: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32361: LD_VAR 0 14
32365: PPUSH
32366: LD_VAR 0 1
32370: PPUSH
32371: CALL_OW 250
32375: PPUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 251
32385: PPUSH
32386: LD_INT 10
32388: PPUSH
32389: LD_INT 0
32391: PPUSH
32392: CALL_OW 50
// result := result ^ un ;
32396: LD_ADDR_VAR 0 7
32400: PUSH
32401: LD_VAR 0 7
32405: PUSH
32406: LD_VAR 0 14
32410: ADD
32411: ST_TO_ADDR
// end ;
32412: GO 32290
32414: POP
32415: POP
// end ; end ;
32416: LD_VAR 0 7
32420: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32421: LD_INT 0
32423: PPUSH
32424: PPUSH
32425: PPUSH
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// result := false ;
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: LD_INT 0
32446: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32447: LD_VAR 0 1
32451: NOT
32452: PUSH
32453: LD_VAR 0 1
32457: PPUSH
32458: CALL_OW 266
32462: PUSH
32463: LD_INT 32
32465: PUSH
32466: LD_INT 33
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: IN
32473: NOT
32474: OR
32475: IFFALSE 32479
// exit ;
32477: GO 33588
// nat := GetNation ( tower ) ;
32479: LD_ADDR_VAR 0 12
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 248
32493: ST_TO_ADDR
// side := GetSide ( tower ) ;
32494: LD_ADDR_VAR 0 16
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 255
32508: ST_TO_ADDR
// x := GetX ( tower ) ;
32509: LD_ADDR_VAR 0 10
32513: PUSH
32514: LD_VAR 0 1
32518: PPUSH
32519: CALL_OW 250
32523: ST_TO_ADDR
// y := GetY ( tower ) ;
32524: LD_ADDR_VAR 0 11
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 251
32538: ST_TO_ADDR
// if not x or not y then
32539: LD_VAR 0 10
32543: NOT
32544: PUSH
32545: LD_VAR 0 11
32549: NOT
32550: OR
32551: IFFALSE 32555
// exit ;
32553: GO 33588
// weapon := 0 ;
32555: LD_ADDR_VAR 0 18
32559: PUSH
32560: LD_INT 0
32562: ST_TO_ADDR
// fac_list := [ ] ;
32563: LD_ADDR_VAR 0 17
32567: PUSH
32568: EMPTY
32569: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32570: LD_ADDR_VAR 0 6
32574: PUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 274
32584: PPUSH
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_INT 0
32592: PPUSH
32593: CALL 30159 0 3
32597: PPUSH
32598: LD_INT 30
32600: PUSH
32601: LD_INT 3
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PPUSH
32608: CALL_OW 72
32612: ST_TO_ADDR
// if not factories then
32613: LD_VAR 0 6
32617: NOT
32618: IFFALSE 32622
// exit ;
32620: GO 33588
// for i in factories do
32622: LD_ADDR_VAR 0 8
32626: PUSH
32627: LD_VAR 0 6
32631: PUSH
32632: FOR_IN
32633: IFFALSE 32658
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32635: LD_ADDR_VAR 0 17
32639: PUSH
32640: LD_VAR 0 17
32644: PUSH
32645: LD_VAR 0 8
32649: PPUSH
32650: CALL_OW 478
32654: UNION
32655: ST_TO_ADDR
32656: GO 32632
32658: POP
32659: POP
// if not fac_list then
32660: LD_VAR 0 17
32664: NOT
32665: IFFALSE 32669
// exit ;
32667: GO 33588
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32669: LD_ADDR_VAR 0 5
32673: PUSH
32674: LD_INT 4
32676: PUSH
32677: LD_INT 5
32679: PUSH
32680: LD_INT 9
32682: PUSH
32683: LD_INT 10
32685: PUSH
32686: LD_INT 6
32688: PUSH
32689: LD_INT 7
32691: PUSH
32692: LD_INT 11
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 27
32706: PUSH
32707: LD_INT 28
32709: PUSH
32710: LD_INT 26
32712: PUSH
32713: LD_INT 30
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 43
32724: PUSH
32725: LD_INT 44
32727: PUSH
32728: LD_INT 46
32730: PUSH
32731: LD_INT 45
32733: PUSH
32734: LD_INT 47
32736: PUSH
32737: LD_INT 49
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 12
32757: ARRAY
32758: ST_TO_ADDR
// list := list isect fac_list ;
32759: LD_ADDR_VAR 0 5
32763: PUSH
32764: LD_VAR 0 5
32768: PUSH
32769: LD_VAR 0 17
32773: ISECT
32774: ST_TO_ADDR
// if not list then
32775: LD_VAR 0 5
32779: NOT
32780: IFFALSE 32784
// exit ;
32782: GO 33588
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32784: LD_VAR 0 12
32788: PUSH
32789: LD_INT 3
32791: EQUAL
32792: PUSH
32793: LD_INT 49
32795: PUSH
32796: LD_VAR 0 5
32800: IN
32801: AND
32802: PUSH
32803: LD_INT 31
32805: PPUSH
32806: LD_VAR 0 16
32810: PPUSH
32811: CALL_OW 321
32815: PUSH
32816: LD_INT 2
32818: EQUAL
32819: AND
32820: IFFALSE 32880
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32822: LD_INT 22
32824: PUSH
32825: LD_VAR 0 16
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 35
32836: PUSH
32837: LD_INT 49
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 91
32846: PUSH
32847: LD_VAR 0 1
32851: PUSH
32852: LD_INT 10
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: LIST
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: LIST
32864: PPUSH
32865: CALL_OW 69
32869: NOT
32870: IFFALSE 32880
// weapon := ru_time_lapser ;
32872: LD_ADDR_VAR 0 18
32876: PUSH
32877: LD_INT 49
32879: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32880: LD_VAR 0 12
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: IN
32895: PUSH
32896: LD_INT 11
32898: PUSH
32899: LD_VAR 0 5
32903: IN
32904: PUSH
32905: LD_INT 30
32907: PUSH
32908: LD_VAR 0 5
32912: IN
32913: OR
32914: AND
32915: PUSH
32916: LD_INT 6
32918: PPUSH
32919: LD_VAR 0 16
32923: PPUSH
32924: CALL_OW 321
32928: PUSH
32929: LD_INT 2
32931: EQUAL
32932: AND
32933: IFFALSE 33098
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32935: LD_INT 22
32937: PUSH
32938: LD_VAR 0 16
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 35
32952: PUSH
32953: LD_INT 11
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 35
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 91
32977: PUSH
32978: LD_VAR 0 1
32982: PUSH
32983: LD_INT 18
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: PPUSH
32996: CALL_OW 69
33000: NOT
33001: PUSH
33002: LD_INT 22
33004: PUSH
33005: LD_VAR 0 16
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 32
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 30
33029: PUSH
33030: LD_INT 33
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 91
33044: PUSH
33045: LD_VAR 0 1
33049: PUSH
33050: LD_INT 12
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: EMPTY
33064: LIST
33065: PPUSH
33066: CALL_OW 69
33070: PUSH
33071: LD_INT 2
33073: GREATER
33074: AND
33075: IFFALSE 33098
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33077: LD_ADDR_VAR 0 18
33081: PUSH
33082: LD_INT 11
33084: PUSH
33085: LD_INT 30
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_VAR 0 12
33096: ARRAY
33097: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33098: LD_VAR 0 18
33102: NOT
33103: PUSH
33104: LD_INT 40
33106: PPUSH
33107: LD_VAR 0 16
33111: PPUSH
33112: CALL_OW 321
33116: PUSH
33117: LD_INT 2
33119: EQUAL
33120: AND
33121: PUSH
33122: LD_INT 7
33124: PUSH
33125: LD_VAR 0 5
33129: IN
33130: PUSH
33131: LD_INT 28
33133: PUSH
33134: LD_VAR 0 5
33138: IN
33139: OR
33140: PUSH
33141: LD_INT 45
33143: PUSH
33144: LD_VAR 0 5
33148: IN
33149: OR
33150: AND
33151: IFFALSE 33405
// begin hex := GetHexInfo ( x , y ) ;
33153: LD_ADDR_VAR 0 4
33157: PUSH
33158: LD_VAR 0 10
33162: PPUSH
33163: LD_VAR 0 11
33167: PPUSH
33168: CALL_OW 546
33172: ST_TO_ADDR
// if hex [ 1 ] then
33173: LD_VAR 0 4
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: IFFALSE 33185
// exit ;
33183: GO 33588
// height := hex [ 2 ] ;
33185: LD_ADDR_VAR 0 15
33189: PUSH
33190: LD_VAR 0 4
33194: PUSH
33195: LD_INT 2
33197: ARRAY
33198: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33199: LD_ADDR_VAR 0 14
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: LD_INT 5
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// for i in tmp do
33222: LD_ADDR_VAR 0 8
33226: PUSH
33227: LD_VAR 0 14
33231: PUSH
33232: FOR_IN
33233: IFFALSE 33403
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33235: LD_ADDR_VAR 0 9
33239: PUSH
33240: LD_VAR 0 10
33244: PPUSH
33245: LD_VAR 0 8
33249: PPUSH
33250: LD_INT 5
33252: PPUSH
33253: CALL_OW 272
33257: PUSH
33258: LD_VAR 0 11
33262: PPUSH
33263: LD_VAR 0 8
33267: PPUSH
33268: LD_INT 5
33270: PPUSH
33271: CALL_OW 273
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33280: LD_VAR 0 9
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: LD_VAR 0 9
33293: PUSH
33294: LD_INT 2
33296: ARRAY
33297: PPUSH
33298: CALL_OW 488
33302: IFFALSE 33401
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33304: LD_ADDR_VAR 0 4
33308: PUSH
33309: LD_VAR 0 9
33313: PUSH
33314: LD_INT 1
33316: ARRAY
33317: PPUSH
33318: LD_VAR 0 9
33322: PUSH
33323: LD_INT 2
33325: ARRAY
33326: PPUSH
33327: CALL_OW 546
33331: ST_TO_ADDR
// if hex [ 1 ] then
33332: LD_VAR 0 4
33336: PUSH
33337: LD_INT 1
33339: ARRAY
33340: IFFALSE 33344
// continue ;
33342: GO 33232
// h := hex [ 2 ] ;
33344: LD_ADDR_VAR 0 13
33348: PUSH
33349: LD_VAR 0 4
33353: PUSH
33354: LD_INT 2
33356: ARRAY
33357: ST_TO_ADDR
// if h + 7 < height then
33358: LD_VAR 0 13
33362: PUSH
33363: LD_INT 7
33365: PLUS
33366: PUSH
33367: LD_VAR 0 15
33371: LESS
33372: IFFALSE 33401
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33374: LD_ADDR_VAR 0 18
33378: PUSH
33379: LD_INT 7
33381: PUSH
33382: LD_INT 28
33384: PUSH
33385: LD_INT 45
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: PUSH
33393: LD_VAR 0 12
33397: ARRAY
33398: ST_TO_ADDR
// break ;
33399: GO 33403
// end ; end ; end ;
33401: GO 33232
33403: POP
33404: POP
// end ; if not weapon then
33405: LD_VAR 0 18
33409: NOT
33410: IFFALSE 33470
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33412: LD_ADDR_VAR 0 5
33416: PUSH
33417: LD_VAR 0 5
33421: PUSH
33422: LD_INT 11
33424: PUSH
33425: LD_INT 30
33427: PUSH
33428: LD_INT 49
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: DIFF
33436: ST_TO_ADDR
// if not list then
33437: LD_VAR 0 5
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33588
// weapon := list [ rand ( 1 , list ) ] ;
33446: LD_ADDR_VAR 0 18
33450: PUSH
33451: LD_VAR 0 5
33455: PUSH
33456: LD_INT 1
33458: PPUSH
33459: LD_VAR 0 5
33463: PPUSH
33464: CALL_OW 12
33468: ARRAY
33469: ST_TO_ADDR
// end ; if weapon then
33470: LD_VAR 0 18
33474: IFFALSE 33588
// begin tmp := CostOfWeapon ( weapon ) ;
33476: LD_ADDR_VAR 0 14
33480: PUSH
33481: LD_VAR 0 18
33485: PPUSH
33486: CALL_OW 451
33490: ST_TO_ADDR
// j := GetBase ( tower ) ;
33491: LD_ADDR_VAR 0 9
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 274
33505: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33506: LD_VAR 0 9
33510: PPUSH
33511: LD_INT 1
33513: PPUSH
33514: CALL_OW 275
33518: PUSH
33519: LD_VAR 0 14
33523: PUSH
33524: LD_INT 1
33526: ARRAY
33527: GREATEREQUAL
33528: PUSH
33529: LD_VAR 0 9
33533: PPUSH
33534: LD_INT 2
33536: PPUSH
33537: CALL_OW 275
33541: PUSH
33542: LD_VAR 0 14
33546: PUSH
33547: LD_INT 2
33549: ARRAY
33550: GREATEREQUAL
33551: AND
33552: PUSH
33553: LD_VAR 0 9
33557: PPUSH
33558: LD_INT 3
33560: PPUSH
33561: CALL_OW 275
33565: PUSH
33566: LD_VAR 0 14
33570: PUSH
33571: LD_INT 3
33573: ARRAY
33574: GREATEREQUAL
33575: AND
33576: IFFALSE 33588
// result := weapon ;
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_VAR 0 18
33587: ST_TO_ADDR
// end ; end ;
33588: LD_VAR 0 3
33592: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33593: LD_INT 0
33595: PPUSH
33596: PPUSH
// result := true ;
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_INT 1
33604: ST_TO_ADDR
// if array1 = array2 then
33605: LD_VAR 0 1
33609: PUSH
33610: LD_VAR 0 2
33614: EQUAL
33615: IFFALSE 33675
// begin for i = 1 to array1 do
33617: LD_ADDR_VAR 0 4
33621: PUSH
33622: DOUBLE
33623: LD_INT 1
33625: DEC
33626: ST_TO_ADDR
33627: LD_VAR 0 1
33631: PUSH
33632: FOR_TO
33633: IFFALSE 33671
// if array1 [ i ] <> array2 [ i ] then
33635: LD_VAR 0 1
33639: PUSH
33640: LD_VAR 0 4
33644: ARRAY
33645: PUSH
33646: LD_VAR 0 2
33650: PUSH
33651: LD_VAR 0 4
33655: ARRAY
33656: NONEQUAL
33657: IFFALSE 33669
// begin result := false ;
33659: LD_ADDR_VAR 0 3
33663: PUSH
33664: LD_INT 0
33666: ST_TO_ADDR
// break ;
33667: GO 33671
// end ;
33669: GO 33632
33671: POP
33672: POP
// end else
33673: GO 33683
// result := false ;
33675: LD_ADDR_VAR 0 3
33679: PUSH
33680: LD_INT 0
33682: ST_TO_ADDR
// end ;
33683: LD_VAR 0 3
33687: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
// if not array1 or not array2 then
33692: LD_VAR 0 1
33696: NOT
33697: PUSH
33698: LD_VAR 0 2
33702: NOT
33703: OR
33704: IFFALSE 33708
// exit ;
33706: GO 33772
// result := true ;
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 1
33715: ST_TO_ADDR
// for i = 1 to array1 do
33716: LD_ADDR_VAR 0 4
33720: PUSH
33721: DOUBLE
33722: LD_INT 1
33724: DEC
33725: ST_TO_ADDR
33726: LD_VAR 0 1
33730: PUSH
33731: FOR_TO
33732: IFFALSE 33770
// if array1 [ i ] <> array2 [ i ] then
33734: LD_VAR 0 1
33738: PUSH
33739: LD_VAR 0 4
33743: ARRAY
33744: PUSH
33745: LD_VAR 0 2
33749: PUSH
33750: LD_VAR 0 4
33754: ARRAY
33755: NONEQUAL
33756: IFFALSE 33768
// begin result := false ;
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: LD_INT 0
33765: ST_TO_ADDR
// break ;
33766: GO 33770
// end ;
33768: GO 33731
33770: POP
33771: POP
// end ;
33772: LD_VAR 0 3
33776: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
33781: PPUSH
// pom := GetBase ( fac ) ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 274
33796: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: LD_VAR 0 2
33806: PUSH
33807: LD_INT 1
33809: ARRAY
33810: PPUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_INT 2
33818: ARRAY
33819: PPUSH
33820: LD_VAR 0 2
33824: PUSH
33825: LD_INT 3
33827: ARRAY
33828: PPUSH
33829: LD_VAR 0 2
33833: PUSH
33834: LD_INT 4
33836: ARRAY
33837: PPUSH
33838: CALL_OW 449
33842: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_VAR 0 5
33852: PPUSH
33853: LD_INT 1
33855: PPUSH
33856: CALL_OW 275
33860: PUSH
33861: LD_VAR 0 4
33865: PUSH
33866: LD_INT 1
33868: ARRAY
33869: GREATEREQUAL
33870: PUSH
33871: LD_VAR 0 5
33875: PPUSH
33876: LD_INT 2
33878: PPUSH
33879: CALL_OW 275
33883: PUSH
33884: LD_VAR 0 4
33888: PUSH
33889: LD_INT 2
33891: ARRAY
33892: GREATEREQUAL
33893: AND
33894: PUSH
33895: LD_VAR 0 5
33899: PPUSH
33900: LD_INT 3
33902: PPUSH
33903: CALL_OW 275
33907: PUSH
33908: LD_VAR 0 4
33912: PUSH
33913: LD_INT 3
33915: ARRAY
33916: GREATEREQUAL
33917: AND
33918: ST_TO_ADDR
// end ;
33919: LD_VAR 0 3
33923: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33924: LD_INT 0
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
// pom := GetBase ( building ) ;
33930: LD_ADDR_VAR 0 3
33934: PUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 274
33944: ST_TO_ADDR
// if not pom then
33945: LD_VAR 0 3
33949: NOT
33950: IFFALSE 33954
// exit ;
33952: GO 34124
// btype := GetBType ( building ) ;
33954: LD_ADDR_VAR 0 5
33958: PUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 266
33968: ST_TO_ADDR
// if btype = b_armoury then
33969: LD_VAR 0 5
33973: PUSH
33974: LD_INT 4
33976: EQUAL
33977: IFFALSE 33987
// btype := b_barracks ;
33979: LD_ADDR_VAR 0 5
33983: PUSH
33984: LD_INT 5
33986: ST_TO_ADDR
// if btype = b_depot then
33987: LD_VAR 0 5
33991: PUSH
33992: LD_INT 0
33994: EQUAL
33995: IFFALSE 34005
// btype := b_warehouse ;
33997: LD_ADDR_VAR 0 5
34001: PUSH
34002: LD_INT 1
34004: ST_TO_ADDR
// if btype = b_workshop then
34005: LD_VAR 0 5
34009: PUSH
34010: LD_INT 2
34012: EQUAL
34013: IFFALSE 34023
// btype := b_factory ;
34015: LD_ADDR_VAR 0 5
34019: PUSH
34020: LD_INT 3
34022: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34023: LD_ADDR_VAR 0 4
34027: PUSH
34028: LD_VAR 0 5
34032: PPUSH
34033: LD_VAR 0 1
34037: PPUSH
34038: CALL_OW 248
34042: PPUSH
34043: CALL_OW 450
34047: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34048: LD_ADDR_VAR 0 2
34052: PUSH
34053: LD_VAR 0 3
34057: PPUSH
34058: LD_INT 1
34060: PPUSH
34061: CALL_OW 275
34065: PUSH
34066: LD_VAR 0 4
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: GREATEREQUAL
34075: PUSH
34076: LD_VAR 0 3
34080: PPUSH
34081: LD_INT 2
34083: PPUSH
34084: CALL_OW 275
34088: PUSH
34089: LD_VAR 0 4
34093: PUSH
34094: LD_INT 2
34096: ARRAY
34097: GREATEREQUAL
34098: AND
34099: PUSH
34100: LD_VAR 0 3
34104: PPUSH
34105: LD_INT 3
34107: PPUSH
34108: CALL_OW 275
34112: PUSH
34113: LD_VAR 0 4
34117: PUSH
34118: LD_INT 3
34120: ARRAY
34121: GREATEREQUAL
34122: AND
34123: ST_TO_ADDR
// end ;
34124: LD_VAR 0 2
34128: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34129: LD_INT 0
34131: PPUSH
34132: PPUSH
34133: PPUSH
// pom := GetBase ( building ) ;
34134: LD_ADDR_VAR 0 4
34138: PUSH
34139: LD_VAR 0 1
34143: PPUSH
34144: CALL_OW 274
34148: ST_TO_ADDR
// if not pom then
34149: LD_VAR 0 4
34153: NOT
34154: IFFALSE 34158
// exit ;
34156: GO 34259
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34158: LD_ADDR_VAR 0 5
34162: PUSH
34163: LD_VAR 0 2
34167: PPUSH
34168: LD_VAR 0 1
34172: PPUSH
34173: CALL_OW 248
34177: PPUSH
34178: CALL_OW 450
34182: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_VAR 0 4
34192: PPUSH
34193: LD_INT 1
34195: PPUSH
34196: CALL_OW 275
34200: PUSH
34201: LD_VAR 0 5
34205: PUSH
34206: LD_INT 1
34208: ARRAY
34209: GREATEREQUAL
34210: PUSH
34211: LD_VAR 0 4
34215: PPUSH
34216: LD_INT 2
34218: PPUSH
34219: CALL_OW 275
34223: PUSH
34224: LD_VAR 0 5
34228: PUSH
34229: LD_INT 2
34231: ARRAY
34232: GREATEREQUAL
34233: AND
34234: PUSH
34235: LD_VAR 0 4
34239: PPUSH
34240: LD_INT 3
34242: PPUSH
34243: CALL_OW 275
34247: PUSH
34248: LD_VAR 0 5
34252: PUSH
34253: LD_INT 3
34255: ARRAY
34256: GREATEREQUAL
34257: AND
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 3
34263: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
// result := false ;
34277: LD_ADDR_VAR 0 8
34281: PUSH
34282: LD_INT 0
34284: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34285: LD_VAR 0 5
34289: NOT
34290: PUSH
34291: LD_VAR 0 1
34295: NOT
34296: OR
34297: PUSH
34298: LD_VAR 0 2
34302: NOT
34303: OR
34304: PUSH
34305: LD_VAR 0 3
34309: NOT
34310: OR
34311: IFFALSE 34315
// exit ;
34313: GO 35129
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34315: LD_ADDR_VAR 0 14
34319: PUSH
34320: LD_VAR 0 1
34324: PPUSH
34325: LD_VAR 0 2
34329: PPUSH
34330: LD_VAR 0 3
34334: PPUSH
34335: LD_VAR 0 4
34339: PPUSH
34340: LD_VAR 0 5
34344: PUSH
34345: LD_INT 1
34347: ARRAY
34348: PPUSH
34349: CALL_OW 248
34353: PPUSH
34354: LD_INT 0
34356: PPUSH
34357: CALL 36366 0 6
34361: ST_TO_ADDR
// if not hexes then
34362: LD_VAR 0 14
34366: NOT
34367: IFFALSE 34371
// exit ;
34369: GO 35129
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34371: LD_ADDR_VAR 0 17
34375: PUSH
34376: LD_VAR 0 5
34380: PPUSH
34381: LD_INT 22
34383: PUSH
34384: LD_VAR 0 13
34388: PPUSH
34389: CALL_OW 255
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 30
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 30
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PPUSH
34430: CALL_OW 72
34434: ST_TO_ADDR
// for i = 1 to hexes do
34435: LD_ADDR_VAR 0 9
34439: PUSH
34440: DOUBLE
34441: LD_INT 1
34443: DEC
34444: ST_TO_ADDR
34445: LD_VAR 0 14
34449: PUSH
34450: FOR_TO
34451: IFFALSE 35127
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34453: LD_ADDR_VAR 0 13
34457: PUSH
34458: LD_VAR 0 14
34462: PUSH
34463: LD_VAR 0 9
34467: ARRAY
34468: PUSH
34469: LD_INT 1
34471: ARRAY
34472: PPUSH
34473: LD_VAR 0 14
34477: PUSH
34478: LD_VAR 0 9
34482: ARRAY
34483: PUSH
34484: LD_INT 2
34486: ARRAY
34487: PPUSH
34488: CALL_OW 428
34492: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34493: LD_VAR 0 14
34497: PUSH
34498: LD_VAR 0 9
34502: ARRAY
34503: PUSH
34504: LD_INT 1
34506: ARRAY
34507: PPUSH
34508: LD_VAR 0 14
34512: PUSH
34513: LD_VAR 0 9
34517: ARRAY
34518: PUSH
34519: LD_INT 2
34521: ARRAY
34522: PPUSH
34523: CALL_OW 351
34527: PUSH
34528: LD_VAR 0 14
34532: PUSH
34533: LD_VAR 0 9
34537: ARRAY
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: PPUSH
34543: LD_VAR 0 14
34547: PUSH
34548: LD_VAR 0 9
34552: ARRAY
34553: PUSH
34554: LD_INT 2
34556: ARRAY
34557: PPUSH
34558: CALL_OW 488
34562: NOT
34563: OR
34564: PUSH
34565: LD_VAR 0 13
34569: PPUSH
34570: CALL_OW 247
34574: PUSH
34575: LD_INT 3
34577: EQUAL
34578: OR
34579: IFFALSE 34585
// exit ;
34581: POP
34582: POP
34583: GO 35129
// if not tmp then
34585: LD_VAR 0 13
34589: NOT
34590: IFFALSE 34594
// continue ;
34592: GO 34450
// result := true ;
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: LD_INT 1
34601: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34602: LD_VAR 0 6
34606: PUSH
34607: LD_VAR 0 13
34611: PPUSH
34612: CALL_OW 247
34616: PUSH
34617: LD_INT 2
34619: EQUAL
34620: AND
34621: PUSH
34622: LD_VAR 0 13
34626: PPUSH
34627: CALL_OW 263
34631: PUSH
34632: LD_INT 1
34634: EQUAL
34635: AND
34636: IFFALSE 34800
// begin if IsDrivenBy ( tmp ) then
34638: LD_VAR 0 13
34642: PPUSH
34643: CALL_OW 311
34647: IFFALSE 34651
// continue ;
34649: GO 34450
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34651: LD_VAR 0 6
34655: PPUSH
34656: LD_INT 3
34658: PUSH
34659: LD_INT 60
34661: PUSH
34662: EMPTY
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 55
34674: PUSH
34675: EMPTY
34676: LIST
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 72
34690: IFFALSE 34798
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34692: LD_ADDR_VAR 0 18
34696: PUSH
34697: LD_VAR 0 6
34701: PPUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 60
34707: PUSH
34708: EMPTY
34709: LIST
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: LD_INT 55
34720: PUSH
34721: EMPTY
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PPUSH
34732: CALL_OW 72
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: ST_TO_ADDR
// if IsInUnit ( driver ) then
34741: LD_VAR 0 18
34745: PPUSH
34746: CALL_OW 310
34750: IFFALSE 34761
// ComExit ( driver ) ;
34752: LD_VAR 0 18
34756: PPUSH
34757: CALL 59550 0 1
// AddComEnterUnit ( driver , tmp ) ;
34761: LD_VAR 0 18
34765: PPUSH
34766: LD_VAR 0 13
34770: PPUSH
34771: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34775: LD_VAR 0 18
34779: PPUSH
34780: LD_VAR 0 7
34784: PPUSH
34785: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34789: LD_VAR 0 18
34793: PPUSH
34794: CALL_OW 181
// end ; continue ;
34798: GO 34450
// end ; if not cleaners or not tmp in cleaners then
34800: LD_VAR 0 6
34804: NOT
34805: PUSH
34806: LD_VAR 0 13
34810: PUSH
34811: LD_VAR 0 6
34815: IN
34816: NOT
34817: OR
34818: IFFALSE 35125
// begin if dep then
34820: LD_VAR 0 17
34824: IFFALSE 34960
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34826: LD_ADDR_VAR 0 16
34830: PUSH
34831: LD_VAR 0 17
34835: PUSH
34836: LD_INT 1
34838: ARRAY
34839: PPUSH
34840: CALL_OW 250
34844: PPUSH
34845: LD_VAR 0 17
34849: PUSH
34850: LD_INT 1
34852: ARRAY
34853: PPUSH
34854: CALL_OW 254
34858: PPUSH
34859: LD_INT 5
34861: PPUSH
34862: CALL_OW 272
34866: PUSH
34867: LD_VAR 0 17
34871: PUSH
34872: LD_INT 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 251
34880: PPUSH
34881: LD_VAR 0 17
34885: PUSH
34886: LD_INT 1
34888: ARRAY
34889: PPUSH
34890: CALL_OW 254
34894: PPUSH
34895: LD_INT 5
34897: PPUSH
34898: CALL_OW 273
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34907: LD_VAR 0 16
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: PPUSH
34916: LD_VAR 0 16
34920: PUSH
34921: LD_INT 2
34923: ARRAY
34924: PPUSH
34925: CALL_OW 488
34929: IFFALSE 34960
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34931: LD_VAR 0 13
34935: PPUSH
34936: LD_VAR 0 16
34940: PUSH
34941: LD_INT 1
34943: ARRAY
34944: PPUSH
34945: LD_VAR 0 16
34949: PUSH
34950: LD_INT 2
34952: ARRAY
34953: PPUSH
34954: CALL_OW 111
// continue ;
34958: GO 34450
// end ; end ; r := GetDir ( tmp ) ;
34960: LD_ADDR_VAR 0 15
34964: PUSH
34965: LD_VAR 0 13
34969: PPUSH
34970: CALL_OW 254
34974: ST_TO_ADDR
// if r = 5 then
34975: LD_VAR 0 15
34979: PUSH
34980: LD_INT 5
34982: EQUAL
34983: IFFALSE 34993
// r := 0 ;
34985: LD_ADDR_VAR 0 15
34989: PUSH
34990: LD_INT 0
34992: ST_TO_ADDR
// for j = r to 5 do
34993: LD_ADDR_VAR 0 10
34997: PUSH
34998: DOUBLE
34999: LD_VAR 0 15
35003: DEC
35004: ST_TO_ADDR
35005: LD_INT 5
35007: PUSH
35008: FOR_TO
35009: IFFALSE 35123
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35011: LD_ADDR_VAR 0 11
35015: PUSH
35016: LD_VAR 0 13
35020: PPUSH
35021: CALL_OW 250
35025: PPUSH
35026: LD_VAR 0 10
35030: PPUSH
35031: LD_INT 2
35033: PPUSH
35034: CALL_OW 272
35038: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35039: LD_ADDR_VAR 0 12
35043: PUSH
35044: LD_VAR 0 13
35048: PPUSH
35049: CALL_OW 251
35053: PPUSH
35054: LD_VAR 0 10
35058: PPUSH
35059: LD_INT 2
35061: PPUSH
35062: CALL_OW 273
35066: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35067: LD_VAR 0 11
35071: PPUSH
35072: LD_VAR 0 12
35076: PPUSH
35077: CALL_OW 488
35081: PUSH
35082: LD_VAR 0 11
35086: PPUSH
35087: LD_VAR 0 12
35091: PPUSH
35092: CALL_OW 428
35096: NOT
35097: AND
35098: IFFALSE 35121
// begin ComMoveXY ( tmp , _x , _y ) ;
35100: LD_VAR 0 13
35104: PPUSH
35105: LD_VAR 0 11
35109: PPUSH
35110: LD_VAR 0 12
35114: PPUSH
35115: CALL_OW 111
// break ;
35119: GO 35123
// end ; end ;
35121: GO 35008
35123: POP
35124: POP
// end ; end ;
35125: GO 34450
35127: POP
35128: POP
// end ;
35129: LD_VAR 0 8
35133: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35134: LD_INT 0
35136: PPUSH
// result := true ;
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_INT 1
35144: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35145: LD_VAR 0 2
35149: PUSH
35150: LD_INT 24
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35164
35156: LD_INT 33
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35189
35164: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_INT 32
35172: PPUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 321
35182: PUSH
35183: LD_INT 2
35185: EQUAL
35186: ST_TO_ADDR
35187: GO 35509
35189: LD_INT 20
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35222
35197: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_INT 6
35205: PPUSH
35206: LD_VAR 0 1
35210: PPUSH
35211: CALL_OW 321
35215: PUSH
35216: LD_INT 2
35218: EQUAL
35219: ST_TO_ADDR
35220: GO 35509
35222: LD_INT 22
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35236
35228: LD_INT 36
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35236
35234: GO 35261
35236: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_INT 15
35244: PPUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 321
35254: PUSH
35255: LD_INT 2
35257: EQUAL
35258: ST_TO_ADDR
35259: GO 35509
35261: LD_INT 30
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35294
35269: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_INT 20
35277: PPUSH
35278: LD_VAR 0 1
35282: PPUSH
35283: CALL_OW 321
35287: PUSH
35288: LD_INT 2
35290: EQUAL
35291: ST_TO_ADDR
35292: GO 35509
35294: LD_INT 28
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35308
35300: LD_INT 21
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35333
35308: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35309: LD_ADDR_VAR 0 3
35313: PUSH
35314: LD_INT 21
35316: PPUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 321
35326: PUSH
35327: LD_INT 2
35329: EQUAL
35330: ST_TO_ADDR
35331: GO 35509
35333: LD_INT 16
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35341
35339: GO 35368
35341: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35342: LD_ADDR_VAR 0 3
35346: PUSH
35347: LD_EXP 105
35351: PPUSH
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 321
35361: PUSH
35362: LD_INT 2
35364: EQUAL
35365: ST_TO_ADDR
35366: GO 35509
35368: LD_INT 19
35370: DOUBLE
35371: EQUAL
35372: IFTRUE 35382
35374: LD_INT 23
35376: DOUBLE
35377: EQUAL
35378: IFTRUE 35382
35380: GO 35409
35382: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_EXP 104
35392: PPUSH
35393: LD_VAR 0 1
35397: PPUSH
35398: CALL_OW 321
35402: PUSH
35403: LD_INT 2
35405: EQUAL
35406: ST_TO_ADDR
35407: GO 35509
35409: LD_INT 17
35411: DOUBLE
35412: EQUAL
35413: IFTRUE 35417
35415: GO 35442
35417: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35418: LD_ADDR_VAR 0 3
35422: PUSH
35423: LD_INT 39
35425: PPUSH
35426: LD_VAR 0 1
35430: PPUSH
35431: CALL_OW 321
35435: PUSH
35436: LD_INT 2
35438: EQUAL
35439: ST_TO_ADDR
35440: GO 35509
35442: LD_INT 18
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35450
35448: GO 35475
35450: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_INT 40
35458: PPUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: CALL_OW 321
35468: PUSH
35469: LD_INT 2
35471: EQUAL
35472: ST_TO_ADDR
35473: GO 35509
35475: LD_INT 27
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35483
35481: GO 35508
35483: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35484: LD_ADDR_VAR 0 3
35488: PUSH
35489: LD_INT 35
35491: PPUSH
35492: LD_VAR 0 1
35496: PPUSH
35497: CALL_OW 321
35501: PUSH
35502: LD_INT 2
35504: EQUAL
35505: ST_TO_ADDR
35506: GO 35509
35508: POP
// end ;
35509: LD_VAR 0 3
35513: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35514: LD_INT 0
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
35525: PPUSH
35526: PPUSH
// result := false ;
35527: LD_ADDR_VAR 0 6
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35535: LD_VAR 0 1
35539: NOT
35540: PUSH
35541: LD_VAR 0 1
35545: PPUSH
35546: CALL_OW 266
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: IN
35561: NOT
35562: OR
35563: PUSH
35564: LD_VAR 0 2
35568: NOT
35569: OR
35570: PUSH
35571: LD_VAR 0 5
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 4
35590: PUSH
35591: LD_INT 5
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: IN
35602: NOT
35603: OR
35604: PUSH
35605: LD_VAR 0 3
35609: PPUSH
35610: LD_VAR 0 4
35614: PPUSH
35615: CALL_OW 488
35619: NOT
35620: OR
35621: IFFALSE 35625
// exit ;
35623: GO 36361
// side := GetSide ( depot ) ;
35625: LD_ADDR_VAR 0 9
35629: PUSH
35630: LD_VAR 0 1
35634: PPUSH
35635: CALL_OW 255
35639: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35640: LD_VAR 0 9
35644: PPUSH
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL 35134 0 2
35654: NOT
35655: IFFALSE 35659
// exit ;
35657: GO 36361
// pom := GetBase ( depot ) ;
35659: LD_ADDR_VAR 0 10
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 274
35673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35674: LD_ADDR_VAR 0 11
35678: PUSH
35679: LD_VAR 0 2
35683: PPUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 248
35693: PPUSH
35694: CALL_OW 450
35698: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35699: LD_VAR 0 10
35703: PPUSH
35704: LD_INT 1
35706: PPUSH
35707: CALL_OW 275
35711: PUSH
35712: LD_VAR 0 11
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: GREATEREQUAL
35721: PUSH
35722: LD_VAR 0 10
35726: PPUSH
35727: LD_INT 2
35729: PPUSH
35730: CALL_OW 275
35734: PUSH
35735: LD_VAR 0 11
35739: PUSH
35740: LD_INT 2
35742: ARRAY
35743: GREATEREQUAL
35744: AND
35745: PUSH
35746: LD_VAR 0 10
35750: PPUSH
35751: LD_INT 3
35753: PPUSH
35754: CALL_OW 275
35758: PUSH
35759: LD_VAR 0 11
35763: PUSH
35764: LD_INT 3
35766: ARRAY
35767: GREATEREQUAL
35768: AND
35769: NOT
35770: IFFALSE 35774
// exit ;
35772: GO 36361
// if GetBType ( depot ) = b_depot then
35774: LD_VAR 0 1
35778: PPUSH
35779: CALL_OW 266
35783: PUSH
35784: LD_INT 0
35786: EQUAL
35787: IFFALSE 35799
// dist := 28 else
35789: LD_ADDR_VAR 0 14
35793: PUSH
35794: LD_INT 28
35796: ST_TO_ADDR
35797: GO 35807
// dist := 36 ;
35799: LD_ADDR_VAR 0 14
35803: PUSH
35804: LD_INT 36
35806: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35807: LD_VAR 0 1
35811: PPUSH
35812: LD_VAR 0 3
35816: PPUSH
35817: LD_VAR 0 4
35821: PPUSH
35822: CALL_OW 297
35826: PUSH
35827: LD_VAR 0 14
35831: GREATER
35832: IFFALSE 35836
// exit ;
35834: GO 36361
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35836: LD_ADDR_VAR 0 12
35840: PUSH
35841: LD_VAR 0 2
35845: PPUSH
35846: LD_VAR 0 3
35850: PPUSH
35851: LD_VAR 0 4
35855: PPUSH
35856: LD_VAR 0 5
35860: PPUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL_OW 248
35870: PPUSH
35871: LD_INT 0
35873: PPUSH
35874: CALL 36366 0 6
35878: ST_TO_ADDR
// if not hexes then
35879: LD_VAR 0 12
35883: NOT
35884: IFFALSE 35888
// exit ;
35886: GO 36361
// hex := GetHexInfo ( x , y ) ;
35888: LD_ADDR_VAR 0 15
35892: PUSH
35893: LD_VAR 0 3
35897: PPUSH
35898: LD_VAR 0 4
35902: PPUSH
35903: CALL_OW 546
35907: ST_TO_ADDR
// if hex [ 1 ] then
35908: LD_VAR 0 15
35912: PUSH
35913: LD_INT 1
35915: ARRAY
35916: IFFALSE 35920
// exit ;
35918: GO 36361
// height := hex [ 2 ] ;
35920: LD_ADDR_VAR 0 13
35924: PUSH
35925: LD_VAR 0 15
35929: PUSH
35930: LD_INT 2
35932: ARRAY
35933: ST_TO_ADDR
// for i = 1 to hexes do
35934: LD_ADDR_VAR 0 7
35938: PUSH
35939: DOUBLE
35940: LD_INT 1
35942: DEC
35943: ST_TO_ADDR
35944: LD_VAR 0 12
35948: PUSH
35949: FOR_TO
35950: IFFALSE 36280
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35952: LD_VAR 0 12
35956: PUSH
35957: LD_VAR 0 7
35961: ARRAY
35962: PUSH
35963: LD_INT 1
35965: ARRAY
35966: PPUSH
35967: LD_VAR 0 12
35971: PUSH
35972: LD_VAR 0 7
35976: ARRAY
35977: PUSH
35978: LD_INT 2
35980: ARRAY
35981: PPUSH
35982: CALL_OW 488
35986: NOT
35987: PUSH
35988: LD_VAR 0 12
35992: PUSH
35993: LD_VAR 0 7
35997: ARRAY
35998: PUSH
35999: LD_INT 1
36001: ARRAY
36002: PPUSH
36003: LD_VAR 0 12
36007: PUSH
36008: LD_VAR 0 7
36012: ARRAY
36013: PUSH
36014: LD_INT 2
36016: ARRAY
36017: PPUSH
36018: CALL_OW 428
36022: PUSH
36023: LD_INT 0
36025: GREATER
36026: OR
36027: PUSH
36028: LD_VAR 0 12
36032: PUSH
36033: LD_VAR 0 7
36037: ARRAY
36038: PUSH
36039: LD_INT 1
36041: ARRAY
36042: PPUSH
36043: LD_VAR 0 12
36047: PUSH
36048: LD_VAR 0 7
36052: ARRAY
36053: PUSH
36054: LD_INT 2
36056: ARRAY
36057: PPUSH
36058: CALL_OW 351
36062: OR
36063: IFFALSE 36069
// exit ;
36065: POP
36066: POP
36067: GO 36361
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36069: LD_ADDR_VAR 0 8
36073: PUSH
36074: LD_VAR 0 12
36078: PUSH
36079: LD_VAR 0 7
36083: ARRAY
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 12
36093: PUSH
36094: LD_VAR 0 7
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 546
36108: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36109: LD_VAR 0 8
36113: PUSH
36114: LD_INT 1
36116: ARRAY
36117: PUSH
36118: LD_VAR 0 8
36122: PUSH
36123: LD_INT 2
36125: ARRAY
36126: PUSH
36127: LD_VAR 0 13
36131: PUSH
36132: LD_INT 2
36134: PLUS
36135: GREATER
36136: OR
36137: PUSH
36138: LD_VAR 0 8
36142: PUSH
36143: LD_INT 2
36145: ARRAY
36146: PUSH
36147: LD_VAR 0 13
36151: PUSH
36152: LD_INT 2
36154: MINUS
36155: LESS
36156: OR
36157: PUSH
36158: LD_VAR 0 8
36162: PUSH
36163: LD_INT 3
36165: ARRAY
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 8
36172: PUSH
36173: LD_INT 9
36175: PUSH
36176: LD_INT 10
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 13
36187: PUSH
36188: LD_INT 16
36190: PUSH
36191: LD_INT 17
36193: PUSH
36194: LD_INT 18
36196: PUSH
36197: LD_INT 19
36199: PUSH
36200: LD_INT 20
36202: PUSH
36203: LD_INT 21
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: IN
36221: NOT
36222: OR
36223: PUSH
36224: LD_VAR 0 8
36228: PUSH
36229: LD_INT 5
36231: ARRAY
36232: NOT
36233: OR
36234: PUSH
36235: LD_VAR 0 8
36239: PUSH
36240: LD_INT 6
36242: ARRAY
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: LD_INT 7
36252: PUSH
36253: LD_INT 9
36255: PUSH
36256: LD_INT 10
36258: PUSH
36259: LD_INT 11
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: IN
36270: NOT
36271: OR
36272: IFFALSE 36278
// exit ;
36274: POP
36275: POP
36276: GO 36361
// end ;
36278: GO 35949
36280: POP
36281: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36282: LD_VAR 0 9
36286: PPUSH
36287: LD_VAR 0 3
36291: PPUSH
36292: LD_VAR 0 4
36296: PPUSH
36297: LD_INT 20
36299: PPUSH
36300: CALL 28307 0 4
36304: PUSH
36305: LD_INT 4
36307: ARRAY
36308: IFFALSE 36312
// exit ;
36310: GO 36361
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36312: LD_VAR 0 2
36316: PUSH
36317: LD_INT 29
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: IN
36327: PUSH
36328: LD_VAR 0 3
36332: PPUSH
36333: LD_VAR 0 4
36337: PPUSH
36338: LD_VAR 0 9
36342: PPUSH
36343: CALL_OW 440
36347: NOT
36348: AND
36349: IFFALSE 36353
// exit ;
36351: GO 36361
// result := true ;
36353: LD_ADDR_VAR 0 6
36357: PUSH
36358: LD_INT 1
36360: ST_TO_ADDR
// end ;
36361: LD_VAR 0 6
36365: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36366: LD_INT 0
36368: PPUSH
36369: PPUSH
36370: PPUSH
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
// result = [ ] ;
36426: LD_ADDR_VAR 0 7
36430: PUSH
36431: EMPTY
36432: ST_TO_ADDR
// temp_list = [ ] ;
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: EMPTY
36439: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36440: LD_VAR 0 4
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: LD_INT 4
36459: PUSH
36460: LD_INT 5
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: IN
36471: NOT
36472: PUSH
36473: LD_VAR 0 1
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: IN
36488: PUSH
36489: LD_VAR 0 5
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: IN
36508: NOT
36509: AND
36510: OR
36511: IFFALSE 36515
// exit ;
36513: GO 54906
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36515: LD_VAR 0 1
36519: PUSH
36520: LD_INT 6
36522: PUSH
36523: LD_INT 7
36525: PUSH
36526: LD_INT 8
36528: PUSH
36529: LD_INT 13
36531: PUSH
36532: LD_INT 12
36534: PUSH
36535: LD_INT 15
36537: PUSH
36538: LD_INT 11
36540: PUSH
36541: LD_INT 14
36543: PUSH
36544: LD_INT 10
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: IN
36558: IFFALSE 36568
// btype = b_lab ;
36560: LD_ADDR_VAR 0 1
36564: PUSH
36565: LD_INT 6
36567: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36568: LD_VAR 0 6
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: IN
36587: NOT
36588: PUSH
36589: LD_VAR 0 1
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 3
36605: PUSH
36606: LD_INT 6
36608: PUSH
36609: LD_INT 36
36611: PUSH
36612: LD_INT 4
36614: PUSH
36615: LD_INT 5
36617: PUSH
36618: LD_INT 31
36620: PUSH
36621: LD_INT 32
36623: PUSH
36624: LD_INT 33
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: IN
36640: NOT
36641: PUSH
36642: LD_VAR 0 6
36646: PUSH
36647: LD_INT 1
36649: EQUAL
36650: AND
36651: OR
36652: PUSH
36653: LD_VAR 0 1
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 3
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: IN
36668: NOT
36669: PUSH
36670: LD_VAR 0 6
36674: PUSH
36675: LD_INT 2
36677: EQUAL
36678: AND
36679: OR
36680: IFFALSE 36690
// mode = 0 ;
36682: LD_ADDR_VAR 0 6
36686: PUSH
36687: LD_INT 0
36689: ST_TO_ADDR
// case mode of 0 :
36690: LD_VAR 0 6
36694: PUSH
36695: LD_INT 0
36697: DOUBLE
36698: EQUAL
36699: IFTRUE 36703
36701: GO 48156
36703: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36704: LD_ADDR_VAR 0 11
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 3
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36897: LD_ADDR_VAR 0 12
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: NEG
37032: PUSH
37033: LD_INT 1
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37093: LD_ADDR_VAR 0 13
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: LD_INT 3
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 3
37252: NEG
37253: PUSH
37254: LD_INT 2
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: LD_INT 3
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37292: LD_ADDR_VAR 0 14
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: NEG
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 2
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 3
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 3
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 2
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37488: LD_ADDR_VAR 0 15
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37681: LD_ADDR_VAR 0 16
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 2
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 3
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37874: LD_ADDR_VAR 0 17
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38104: LD_ADDR_VAR 0 18
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38334: LD_ADDR_VAR 0 19
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38564: LD_ADDR_VAR 0 20
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: NEG
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38794: LD_ADDR_VAR 0 21
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 2
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 2
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39024: LD_ADDR_VAR 0 22
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: NEG
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39254: LD_ADDR_VAR 0 23
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39534: LD_ADDR_VAR 0 24
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 3
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39810: LD_ADDR_VAR 0 25
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40084: LD_ADDR_VAR 0 26
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40360: LD_ADDR_VAR 0 27
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 3
40605: NEG
40606: PUSH
40607: LD_INT 2
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40640: LD_ADDR_VAR 0 28
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 3
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40922: LD_ADDR_VAR 0 29
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 3
41166: NEG
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41201: LD_ADDR_VAR 0 30
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 2
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 3
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41479: LD_ADDR_VAR 0 31
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 3
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: NEG
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41757: LD_ADDR_VAR 0 32
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: LD_INT 2
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 3
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 3
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42035: LD_ADDR_VAR 0 33
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 3
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42314: LD_ADDR_VAR 0 34
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42594: LD_ADDR_VAR 0 35
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42706: LD_ADDR_VAR 0 36
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42818: LD_ADDR_VAR 0 37
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42930: LD_ADDR_VAR 0 38
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43042: LD_ADDR_VAR 0 39
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43154: LD_ADDR_VAR 0 40
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43266: LD_ADDR_VAR 0 41
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 3
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: LD_INT 3
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43616: LD_ADDR_VAR 0 42
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 3
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 3
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 3
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 3
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: LD_INT 3
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 3
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: NEG
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: LD_INT 3
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43966: LD_ADDR_VAR 0 43
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 3
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44314: LD_ADDR_VAR 0 44
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 3
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 3
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 3
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 3
44611: NEG
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44664: LD_ADDR_VAR 0 45
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 3
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 3
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 3
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45014: LD_ADDR_VAR 0 46
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 3
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: NEG
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45362: LD_ADDR_VAR 0 47
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45513: LD_ADDR_VAR 0 48
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45660: LD_ADDR_VAR 0 49
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45804: LD_ADDR_VAR 0 50
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45948: LD_ADDR_VAR 0 51
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46095: LD_ADDR_VAR 0 52
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46246: LD_ADDR_VAR 0 53
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46476: LD_ADDR_VAR 0 54
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46706: LD_ADDR_VAR 0 55
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46936: LD_ADDR_VAR 0 56
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47166: LD_ADDR_VAR 0 57
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47396: LD_ADDR_VAR 0 58
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47626: LD_ADDR_VAR 0 59
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47714: LD_ADDR_VAR 0 60
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47802: LD_ADDR_VAR 0 61
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47890: LD_ADDR_VAR 0 62
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47978: LD_ADDR_VAR 0 63
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48066: LD_ADDR_VAR 0 64
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// end ; 1 :
48154: GO 54051
48156: LD_INT 1
48158: DOUBLE
48159: EQUAL
48160: IFTRUE 48164
48162: GO 50787
48164: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48165: LD_ADDR_VAR 0 11
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 3
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48209: LD_ADDR_VAR 0 12
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48250: LD_ADDR_VAR 0 13
48254: PUSH
48255: LD_INT 3
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48290: LD_ADDR_VAR 0 14
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48331: LD_ADDR_VAR 0 15
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48375: LD_ADDR_VAR 0 16
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: NEG
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48421: LD_ADDR_VAR 0 17
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48465: LD_ADDR_VAR 0 18
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 3
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48506: LD_ADDR_VAR 0 19
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48546: LD_ADDR_VAR 0 20
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 3
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48587: LD_ADDR_VAR 0 21
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: LIST
48630: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48631: LD_ADDR_VAR 0 22
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48677: LD_ADDR_VAR 0 23
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 4
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: LIST
48720: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48721: LD_ADDR_VAR 0 24
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 4
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48762: LD_ADDR_VAR 0 25
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 4
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48802: LD_ADDR_VAR 0 26
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 4
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48843: LD_ADDR_VAR 0 27
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 4
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48887: LD_ADDR_VAR 0 28
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: NEG
48907: PUSH
48908: LD_INT 4
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 4
48918: NEG
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48933: LD_ADDR_VAR 0 29
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 4
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: NEG
49009: PUSH
49010: LD_INT 5
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 5
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: LD_INT 4
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 6
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 6
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 5
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49088: LD_ADDR_VAR 0 30
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 4
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 4
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 5
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 5
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 5
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 6
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 6
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49231: LD_ADDR_VAR 0 31
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 3
49248: PUSH
49249: LD_INT 3
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 4
49268: PUSH
49269: LD_INT 3
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 4
49278: PUSH
49279: LD_INT 4
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: PUSH
49289: LD_INT 4
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 4
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 5
49308: PUSH
49309: LD_INT 5
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 4
49318: PUSH
49319: LD_INT 5
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 6
49328: PUSH
49329: LD_INT 5
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 6
49338: PUSH
49339: LD_INT 6
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 5
49348: PUSH
49349: LD_INT 6
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49370: LD_ADDR_VAR 0 32
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 4
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 5
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 5
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 4
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 6
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 6
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 5
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49513: LD_ADDR_VAR 0 33
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 4
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 4
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 5
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 5
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 5
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 6
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 6
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49668: LD_ADDR_VAR 0 34
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: NEG
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 4
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 4
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 4
49747: NEG
49748: PUSH
49749: LD_INT 5
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 5
49759: NEG
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 5
49771: NEG
49772: PUSH
49773: LD_INT 5
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 5
49783: NEG
49784: PUSH
49785: LD_INT 6
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 6
49795: NEG
49796: PUSH
49797: LD_INT 5
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 6
49807: NEG
49808: PUSH
49809: LD_INT 6
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49831: LD_ADDR_VAR 0 41
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 3
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49875: LD_ADDR_VAR 0 42
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49916: LD_ADDR_VAR 0 43
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49956: LD_ADDR_VAR 0 44
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49997: LD_ADDR_VAR 0 45
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50041: LD_ADDR_VAR 0 46
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50087: LD_ADDR_VAR 0 47
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50120: LD_ADDR_VAR 0 48
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50151: LD_ADDR_VAR 0 49
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50180: LD_ADDR_VAR 0 50
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50209: LD_ADDR_VAR 0 51
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50240: LD_ADDR_VAR 0 52
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50273: LD_ADDR_VAR 0 53
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50317: LD_ADDR_VAR 0 54
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50358: LD_ADDR_VAR 0 55
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 3
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50398: LD_ADDR_VAR 0 56
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50439: LD_ADDR_VAR 0 57
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50483: LD_ADDR_VAR 0 58
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: NEG
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50529: LD_ADDR_VAR 0 59
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50573: LD_ADDR_VAR 0 60
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50614: LD_ADDR_VAR 0 61
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50654: LD_ADDR_VAR 0 62
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50695: LD_ADDR_VAR 0 63
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 2
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50739: LD_ADDR_VAR 0 64
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: LIST
50784: ST_TO_ADDR
// end ; 2 :
50785: GO 54051
50787: LD_INT 2
50789: DOUBLE
50790: EQUAL
50791: IFTRUE 50795
50793: GO 54050
50795: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50796: LD_ADDR_VAR 0 29
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 4
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 5
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 4
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 5
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 4
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: PUSH
50927: LD_INT 4
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: LD_INT 4
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 4
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 4
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 4
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 4
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: LD_INT 5
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 5
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 5
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 4
51135: NEG
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 4
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 4
51158: NEG
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 5
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 5
51241: NEG
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 5
51253: NEG
51254: PUSH
51255: LD_INT 5
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: LD_INT 5
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 5
51277: NEG
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51334: LD_ADDR_VAR 0 30
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: LD_INT 4
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 5
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 5
51371: PUSH
51372: LD_INT 5
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 4
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: LD_INT 4
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 5
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 5
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 4
51524: NEG
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 3
51547: NEG
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 5
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 5
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 5
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: NEG
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: NEG
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 4
51698: NEG
51699: PUSH
51700: LD_INT 4
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 4
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 4
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 5
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 5
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51881: LD_ADDR_VAR 0 31
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 4
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 5
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 5
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 4
52037: NEG
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 4
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 4
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: NEG
52096: PUSH
52097: LD_INT 5
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 4
52131: NEG
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 5
52143: NEG
52144: PUSH
52145: LD_INT 4
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 5
52155: NEG
52156: PUSH
52157: LD_INT 5
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: LD_INT 5
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 5
52179: NEG
52180: PUSH
52181: LD_INT 3
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 4
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: LD_INT 4
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 4
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 4
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52431: LD_ADDR_VAR 0 32
52435: PUSH
52436: LD_INT 4
52438: NEG
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 4
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 4
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 5
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 5
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 5
52517: NEG
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 3
52529: NEG
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 4
52600: NEG
52601: PUSH
52602: LD_INT 3
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 4
52612: NEG
52613: PUSH
52614: LD_INT 4
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: LD_INT 4
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 4
52636: NEG
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 4
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: LD_INT 5
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 4
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 5
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 5
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 4
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 4
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: LD_INT 2
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: LD_INT 4
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 4
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 5
52863: PUSH
52864: LD_INT 4
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 5
52873: PUSH
52874: LD_INT 5
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 4
52883: PUSH
52884: LD_INT 5
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 4
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 5
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: LD_INT 5
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52978: LD_ADDR_VAR 0 33
52982: PUSH
52983: LD_INT 4
52985: NEG
52986: PUSH
52987: LD_INT 4
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 4
52997: NEG
52998: PUSH
52999: LD_INT 5
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 4
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: NEG
53022: PUSH
53023: LD_INT 3
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 4
53033: NEG
53034: PUSH
53035: LD_INT 3
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 5
53045: NEG
53046: PUSH
53047: LD_INT 4
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 5
53057: NEG
53058: PUSH
53059: LD_INT 5
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: LD_INT 5
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 5
53081: NEG
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 4
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 0
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 4
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 5
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 5
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 3
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 5
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 4
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 4
53318: PUSH
53319: LD_INT 4
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: LD_INT 4
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 4
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 4
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 4
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 4
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 5
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53516: LD_ADDR_VAR 0 34
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 4
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 5
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 5
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 4
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 4
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 4
53718: PUSH
53719: LD_INT 4
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 5
53738: PUSH
53739: LD_INT 4
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 4
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 5
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 4
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 4
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 4
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 4
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 4
53946: NEG
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 5
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 5
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 5
53980: NEG
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// end ; end ;
54048: GO 54051
54050: POP
// case btype of b_depot , b_warehouse :
54051: LD_VAR 0 1
54055: PUSH
54056: LD_INT 0
54058: DOUBLE
54059: EQUAL
54060: IFTRUE 54070
54062: LD_INT 1
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54271
54070: POP
// case nation of nation_american :
54071: LD_VAR 0 5
54075: PUSH
54076: LD_INT 1
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54140
54084: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54085: LD_ADDR_VAR 0 9
54089: PUSH
54090: LD_VAR 0 11
54094: PUSH
54095: LD_VAR 0 12
54099: PUSH
54100: LD_VAR 0 13
54104: PUSH
54105: LD_VAR 0 14
54109: PUSH
54110: LD_VAR 0 15
54114: PUSH
54115: LD_VAR 0 16
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 4
54132: PUSH
54133: LD_INT 1
54135: PLUS
54136: ARRAY
54137: ST_TO_ADDR
54138: GO 54269
54140: LD_INT 2
54142: DOUBLE
54143: EQUAL
54144: IFTRUE 54148
54146: GO 54204
54148: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54149: LD_ADDR_VAR 0 9
54153: PUSH
54154: LD_VAR 0 17
54158: PUSH
54159: LD_VAR 0 18
54163: PUSH
54164: LD_VAR 0 19
54168: PUSH
54169: LD_VAR 0 20
54173: PUSH
54174: LD_VAR 0 21
54178: PUSH
54179: LD_VAR 0 22
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: PUSH
54192: LD_VAR 0 4
54196: PUSH
54197: LD_INT 1
54199: PLUS
54200: ARRAY
54201: ST_TO_ADDR
54202: GO 54269
54204: LD_INT 3
54206: DOUBLE
54207: EQUAL
54208: IFTRUE 54212
54210: GO 54268
54212: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54213: LD_ADDR_VAR 0 9
54217: PUSH
54218: LD_VAR 0 23
54222: PUSH
54223: LD_VAR 0 24
54227: PUSH
54228: LD_VAR 0 25
54232: PUSH
54233: LD_VAR 0 26
54237: PUSH
54238: LD_VAR 0 27
54242: PUSH
54243: LD_VAR 0 28
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: PUSH
54256: LD_VAR 0 4
54260: PUSH
54261: LD_INT 1
54263: PLUS
54264: ARRAY
54265: ST_TO_ADDR
54266: GO 54269
54268: POP
54269: GO 54824
54271: LD_INT 2
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54285
54277: LD_INT 3
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54285
54283: GO 54341
54285: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54286: LD_ADDR_VAR 0 9
54290: PUSH
54291: LD_VAR 0 29
54295: PUSH
54296: LD_VAR 0 30
54300: PUSH
54301: LD_VAR 0 31
54305: PUSH
54306: LD_VAR 0 32
54310: PUSH
54311: LD_VAR 0 33
54315: PUSH
54316: LD_VAR 0 34
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: PUSH
54329: LD_VAR 0 4
54333: PUSH
54334: LD_INT 1
54336: PLUS
54337: ARRAY
54338: ST_TO_ADDR
54339: GO 54824
54341: LD_INT 16
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54403
54347: LD_INT 17
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54403
54353: LD_INT 18
54355: DOUBLE
54356: EQUAL
54357: IFTRUE 54403
54359: LD_INT 19
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54403
54365: LD_INT 22
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54403
54371: LD_INT 20
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54403
54377: LD_INT 21
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54403
54383: LD_INT 23
54385: DOUBLE
54386: EQUAL
54387: IFTRUE 54403
54389: LD_INT 24
54391: DOUBLE
54392: EQUAL
54393: IFTRUE 54403
54395: LD_INT 25
54397: DOUBLE
54398: EQUAL
54399: IFTRUE 54403
54401: GO 54459
54403: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54404: LD_ADDR_VAR 0 9
54408: PUSH
54409: LD_VAR 0 35
54413: PUSH
54414: LD_VAR 0 36
54418: PUSH
54419: LD_VAR 0 37
54423: PUSH
54424: LD_VAR 0 38
54428: PUSH
54429: LD_VAR 0 39
54433: PUSH
54434: LD_VAR 0 40
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: LD_VAR 0 4
54451: PUSH
54452: LD_INT 1
54454: PLUS
54455: ARRAY
54456: ST_TO_ADDR
54457: GO 54824
54459: LD_INT 6
54461: DOUBLE
54462: EQUAL
54463: IFTRUE 54515
54465: LD_INT 7
54467: DOUBLE
54468: EQUAL
54469: IFTRUE 54515
54471: LD_INT 8
54473: DOUBLE
54474: EQUAL
54475: IFTRUE 54515
54477: LD_INT 13
54479: DOUBLE
54480: EQUAL
54481: IFTRUE 54515
54483: LD_INT 12
54485: DOUBLE
54486: EQUAL
54487: IFTRUE 54515
54489: LD_INT 15
54491: DOUBLE
54492: EQUAL
54493: IFTRUE 54515
54495: LD_INT 11
54497: DOUBLE
54498: EQUAL
54499: IFTRUE 54515
54501: LD_INT 14
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54515
54507: LD_INT 10
54509: DOUBLE
54510: EQUAL
54511: IFTRUE 54515
54513: GO 54571
54515: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54516: LD_ADDR_VAR 0 9
54520: PUSH
54521: LD_VAR 0 41
54525: PUSH
54526: LD_VAR 0 42
54530: PUSH
54531: LD_VAR 0 43
54535: PUSH
54536: LD_VAR 0 44
54540: PUSH
54541: LD_VAR 0 45
54545: PUSH
54546: LD_VAR 0 46
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: PUSH
54559: LD_VAR 0 4
54563: PUSH
54564: LD_INT 1
54566: PLUS
54567: ARRAY
54568: ST_TO_ADDR
54569: GO 54824
54571: LD_INT 36
54573: DOUBLE
54574: EQUAL
54575: IFTRUE 54579
54577: GO 54635
54579: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 47
54589: PUSH
54590: LD_VAR 0 48
54594: PUSH
54595: LD_VAR 0 49
54599: PUSH
54600: LD_VAR 0 50
54604: PUSH
54605: LD_VAR 0 51
54609: PUSH
54610: LD_VAR 0 52
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: PUSH
54623: LD_VAR 0 4
54627: PUSH
54628: LD_INT 1
54630: PLUS
54631: ARRAY
54632: ST_TO_ADDR
54633: GO 54824
54635: LD_INT 4
54637: DOUBLE
54638: EQUAL
54639: IFTRUE 54661
54641: LD_INT 5
54643: DOUBLE
54644: EQUAL
54645: IFTRUE 54661
54647: LD_INT 34
54649: DOUBLE
54650: EQUAL
54651: IFTRUE 54661
54653: LD_INT 37
54655: DOUBLE
54656: EQUAL
54657: IFTRUE 54661
54659: GO 54717
54661: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54662: LD_ADDR_VAR 0 9
54666: PUSH
54667: LD_VAR 0 53
54671: PUSH
54672: LD_VAR 0 54
54676: PUSH
54677: LD_VAR 0 55
54681: PUSH
54682: LD_VAR 0 56
54686: PUSH
54687: LD_VAR 0 57
54691: PUSH
54692: LD_VAR 0 58
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: PUSH
54705: LD_VAR 0 4
54709: PUSH
54710: LD_INT 1
54712: PLUS
54713: ARRAY
54714: ST_TO_ADDR
54715: GO 54824
54717: LD_INT 31
54719: DOUBLE
54720: EQUAL
54721: IFTRUE 54767
54723: LD_INT 32
54725: DOUBLE
54726: EQUAL
54727: IFTRUE 54767
54729: LD_INT 33
54731: DOUBLE
54732: EQUAL
54733: IFTRUE 54767
54735: LD_INT 27
54737: DOUBLE
54738: EQUAL
54739: IFTRUE 54767
54741: LD_INT 26
54743: DOUBLE
54744: EQUAL
54745: IFTRUE 54767
54747: LD_INT 28
54749: DOUBLE
54750: EQUAL
54751: IFTRUE 54767
54753: LD_INT 29
54755: DOUBLE
54756: EQUAL
54757: IFTRUE 54767
54759: LD_INT 30
54761: DOUBLE
54762: EQUAL
54763: IFTRUE 54767
54765: GO 54823
54767: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54768: LD_ADDR_VAR 0 9
54772: PUSH
54773: LD_VAR 0 59
54777: PUSH
54778: LD_VAR 0 60
54782: PUSH
54783: LD_VAR 0 61
54787: PUSH
54788: LD_VAR 0 62
54792: PUSH
54793: LD_VAR 0 63
54797: PUSH
54798: LD_VAR 0 64
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: PUSH
54811: LD_VAR 0 4
54815: PUSH
54816: LD_INT 1
54818: PLUS
54819: ARRAY
54820: ST_TO_ADDR
54821: GO 54824
54823: POP
// temp_list2 = [ ] ;
54824: LD_ADDR_VAR 0 10
54828: PUSH
54829: EMPTY
54830: ST_TO_ADDR
// for i in temp_list do
54831: LD_ADDR_VAR 0 8
54835: PUSH
54836: LD_VAR 0 9
54840: PUSH
54841: FOR_IN
54842: IFFALSE 54894
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54844: LD_ADDR_VAR 0 10
54848: PUSH
54849: LD_VAR 0 10
54853: PUSH
54854: LD_VAR 0 8
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PUSH
54863: LD_VAR 0 2
54867: PLUS
54868: PUSH
54869: LD_VAR 0 8
54873: PUSH
54874: LD_INT 2
54876: ARRAY
54877: PUSH
54878: LD_VAR 0 3
54882: PLUS
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: ADD
54891: ST_TO_ADDR
54892: GO 54841
54894: POP
54895: POP
// result = temp_list2 ;
54896: LD_ADDR_VAR 0 7
54900: PUSH
54901: LD_VAR 0 10
54905: ST_TO_ADDR
// end ;
54906: LD_VAR 0 7
54910: RET
// export function EnemyInRange ( unit , dist ) ; begin
54911: LD_INT 0
54913: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54914: LD_ADDR_VAR 0 3
54918: PUSH
54919: LD_VAR 0 1
54923: PPUSH
54924: CALL_OW 255
54928: PPUSH
54929: LD_VAR 0 1
54933: PPUSH
54934: CALL_OW 250
54938: PPUSH
54939: LD_VAR 0 1
54943: PPUSH
54944: CALL_OW 251
54948: PPUSH
54949: LD_VAR 0 2
54953: PPUSH
54954: CALL 28307 0 4
54958: PUSH
54959: LD_INT 4
54961: ARRAY
54962: ST_TO_ADDR
// end ;
54963: LD_VAR 0 3
54967: RET
// export function PlayerSeeMe ( unit ) ; begin
54968: LD_INT 0
54970: PPUSH
// result := See ( your_side , unit ) ;
54971: LD_ADDR_VAR 0 2
54975: PUSH
54976: LD_OWVAR 2
54980: PPUSH
54981: LD_VAR 0 1
54985: PPUSH
54986: CALL_OW 292
54990: ST_TO_ADDR
// end ;
54991: LD_VAR 0 2
54995: RET
// export function ReverseDir ( unit ) ; begin
54996: LD_INT 0
54998: PPUSH
// if not unit then
54999: LD_VAR 0 1
55003: NOT
55004: IFFALSE 55008
// exit ;
55006: GO 55031
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55008: LD_ADDR_VAR 0 2
55012: PUSH
55013: LD_VAR 0 1
55017: PPUSH
55018: CALL_OW 254
55022: PUSH
55023: LD_INT 3
55025: PLUS
55026: PUSH
55027: LD_INT 6
55029: MOD
55030: ST_TO_ADDR
// end ;
55031: LD_VAR 0 2
55035: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55036: LD_INT 0
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
// if not hexes then
55043: LD_VAR 0 2
55047: NOT
55048: IFFALSE 55052
// exit ;
55050: GO 55200
// dist := 9999 ;
55052: LD_ADDR_VAR 0 5
55056: PUSH
55057: LD_INT 9999
55059: ST_TO_ADDR
// for i = 1 to hexes do
55060: LD_ADDR_VAR 0 4
55064: PUSH
55065: DOUBLE
55066: LD_INT 1
55068: DEC
55069: ST_TO_ADDR
55070: LD_VAR 0 2
55074: PUSH
55075: FOR_TO
55076: IFFALSE 55188
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55078: LD_VAR 0 1
55082: PPUSH
55083: LD_VAR 0 2
55087: PUSH
55088: LD_VAR 0 4
55092: ARRAY
55093: PUSH
55094: LD_INT 1
55096: ARRAY
55097: PPUSH
55098: LD_VAR 0 2
55102: PUSH
55103: LD_VAR 0 4
55107: ARRAY
55108: PUSH
55109: LD_INT 2
55111: ARRAY
55112: PPUSH
55113: CALL_OW 297
55117: PUSH
55118: LD_VAR 0 5
55122: LESS
55123: IFFALSE 55186
// begin hex := hexes [ i ] ;
55125: LD_ADDR_VAR 0 7
55129: PUSH
55130: LD_VAR 0 2
55134: PUSH
55135: LD_VAR 0 4
55139: ARRAY
55140: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55141: LD_ADDR_VAR 0 5
55145: PUSH
55146: LD_VAR 0 1
55150: PPUSH
55151: LD_VAR 0 2
55155: PUSH
55156: LD_VAR 0 4
55160: ARRAY
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: PPUSH
55166: LD_VAR 0 2
55170: PUSH
55171: LD_VAR 0 4
55175: ARRAY
55176: PUSH
55177: LD_INT 2
55179: ARRAY
55180: PPUSH
55181: CALL_OW 297
55185: ST_TO_ADDR
// end ; end ;
55186: GO 55075
55188: POP
55189: POP
// result := hex ;
55190: LD_ADDR_VAR 0 3
55194: PUSH
55195: LD_VAR 0 7
55199: ST_TO_ADDR
// end ;
55200: LD_VAR 0 3
55204: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55205: LD_INT 0
55207: PPUSH
55208: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55209: LD_VAR 0 1
55213: NOT
55214: PUSH
55215: LD_VAR 0 1
55219: PUSH
55220: LD_INT 21
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 23
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PPUSH
55244: CALL_OW 69
55248: IN
55249: NOT
55250: OR
55251: IFFALSE 55255
// exit ;
55253: GO 55302
// for i = 1 to 3 do
55255: LD_ADDR_VAR 0 3
55259: PUSH
55260: DOUBLE
55261: LD_INT 1
55263: DEC
55264: ST_TO_ADDR
55265: LD_INT 3
55267: PUSH
55268: FOR_TO
55269: IFFALSE 55300
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55271: LD_VAR 0 1
55275: PPUSH
55276: CALL_OW 250
55280: PPUSH
55281: LD_VAR 0 1
55285: PPUSH
55286: CALL_OW 251
55290: PPUSH
55291: LD_INT 1
55293: PPUSH
55294: CALL_OW 453
55298: GO 55268
55300: POP
55301: POP
// end ;
55302: LD_VAR 0 2
55306: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55307: LD_INT 0
55309: PPUSH
55310: PPUSH
55311: PPUSH
55312: PPUSH
55313: PPUSH
55314: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55315: LD_VAR 0 1
55319: NOT
55320: PUSH
55321: LD_VAR 0 2
55325: NOT
55326: OR
55327: PUSH
55328: LD_VAR 0 1
55332: PPUSH
55333: CALL_OW 314
55337: OR
55338: IFFALSE 55342
// exit ;
55340: GO 55783
// x := GetX ( enemy_unit ) ;
55342: LD_ADDR_VAR 0 7
55346: PUSH
55347: LD_VAR 0 2
55351: PPUSH
55352: CALL_OW 250
55356: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55357: LD_ADDR_VAR 0 8
55361: PUSH
55362: LD_VAR 0 2
55366: PPUSH
55367: CALL_OW 251
55371: ST_TO_ADDR
// if not x or not y then
55372: LD_VAR 0 7
55376: NOT
55377: PUSH
55378: LD_VAR 0 8
55382: NOT
55383: OR
55384: IFFALSE 55388
// exit ;
55386: GO 55783
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55388: LD_ADDR_VAR 0 6
55392: PUSH
55393: LD_VAR 0 7
55397: PPUSH
55398: LD_INT 0
55400: PPUSH
55401: LD_INT 4
55403: PPUSH
55404: CALL_OW 272
55408: PUSH
55409: LD_VAR 0 8
55413: PPUSH
55414: LD_INT 0
55416: PPUSH
55417: LD_INT 4
55419: PPUSH
55420: CALL_OW 273
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_VAR 0 7
55433: PPUSH
55434: LD_INT 1
55436: PPUSH
55437: LD_INT 4
55439: PPUSH
55440: CALL_OW 272
55444: PUSH
55445: LD_VAR 0 8
55449: PPUSH
55450: LD_INT 1
55452: PPUSH
55453: LD_INT 4
55455: PPUSH
55456: CALL_OW 273
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_VAR 0 7
55469: PPUSH
55470: LD_INT 2
55472: PPUSH
55473: LD_INT 4
55475: PPUSH
55476: CALL_OW 272
55480: PUSH
55481: LD_VAR 0 8
55485: PPUSH
55486: LD_INT 2
55488: PPUSH
55489: LD_INT 4
55491: PPUSH
55492: CALL_OW 273
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_VAR 0 7
55505: PPUSH
55506: LD_INT 3
55508: PPUSH
55509: LD_INT 4
55511: PPUSH
55512: CALL_OW 272
55516: PUSH
55517: LD_VAR 0 8
55521: PPUSH
55522: LD_INT 3
55524: PPUSH
55525: LD_INT 4
55527: PPUSH
55528: CALL_OW 273
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_VAR 0 7
55541: PPUSH
55542: LD_INT 4
55544: PPUSH
55545: LD_INT 4
55547: PPUSH
55548: CALL_OW 272
55552: PUSH
55553: LD_VAR 0 8
55557: PPUSH
55558: LD_INT 4
55560: PPUSH
55561: LD_INT 4
55563: PPUSH
55564: CALL_OW 273
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_VAR 0 7
55577: PPUSH
55578: LD_INT 5
55580: PPUSH
55581: LD_INT 4
55583: PPUSH
55584: CALL_OW 272
55588: PUSH
55589: LD_VAR 0 8
55593: PPUSH
55594: LD_INT 5
55596: PPUSH
55597: LD_INT 4
55599: PPUSH
55600: CALL_OW 273
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: ST_TO_ADDR
// for i = tmp downto 1 do
55617: LD_ADDR_VAR 0 4
55621: PUSH
55622: DOUBLE
55623: LD_VAR 0 6
55627: INC
55628: ST_TO_ADDR
55629: LD_INT 1
55631: PUSH
55632: FOR_DOWNTO
55633: IFFALSE 55734
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55635: LD_VAR 0 6
55639: PUSH
55640: LD_VAR 0 4
55644: ARRAY
55645: PUSH
55646: LD_INT 1
55648: ARRAY
55649: PPUSH
55650: LD_VAR 0 6
55654: PUSH
55655: LD_VAR 0 4
55659: ARRAY
55660: PUSH
55661: LD_INT 2
55663: ARRAY
55664: PPUSH
55665: CALL_OW 488
55669: NOT
55670: PUSH
55671: LD_VAR 0 6
55675: PUSH
55676: LD_VAR 0 4
55680: ARRAY
55681: PUSH
55682: LD_INT 1
55684: ARRAY
55685: PPUSH
55686: LD_VAR 0 6
55690: PUSH
55691: LD_VAR 0 4
55695: ARRAY
55696: PUSH
55697: LD_INT 2
55699: ARRAY
55700: PPUSH
55701: CALL_OW 428
55705: PUSH
55706: LD_INT 0
55708: NONEQUAL
55709: OR
55710: IFFALSE 55732
// tmp := Delete ( tmp , i ) ;
55712: LD_ADDR_VAR 0 6
55716: PUSH
55717: LD_VAR 0 6
55721: PPUSH
55722: LD_VAR 0 4
55726: PPUSH
55727: CALL_OW 3
55731: ST_TO_ADDR
55732: GO 55632
55734: POP
55735: POP
// j := GetClosestHex ( unit , tmp ) ;
55736: LD_ADDR_VAR 0 5
55740: PUSH
55741: LD_VAR 0 1
55745: PPUSH
55746: LD_VAR 0 6
55750: PPUSH
55751: CALL 55036 0 2
55755: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55756: LD_VAR 0 1
55760: PPUSH
55761: LD_VAR 0 5
55765: PUSH
55766: LD_INT 1
55768: ARRAY
55769: PPUSH
55770: LD_VAR 0 5
55774: PUSH
55775: LD_INT 2
55777: ARRAY
55778: PPUSH
55779: CALL_OW 111
// end ;
55783: LD_VAR 0 3
55787: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55788: LD_INT 0
55790: PPUSH
55791: PPUSH
55792: PPUSH
// uc_side = 0 ;
55793: LD_ADDR_OWVAR 20
55797: PUSH
55798: LD_INT 0
55800: ST_TO_ADDR
// uc_nation = 0 ;
55801: LD_ADDR_OWVAR 21
55805: PUSH
55806: LD_INT 0
55808: ST_TO_ADDR
// InitHc_All ( ) ;
55809: CALL_OW 584
// InitVc ;
55813: CALL_OW 20
// if mastodonts then
55817: LD_VAR 0 6
55821: IFFALSE 55888
// for i = 1 to mastodonts do
55823: LD_ADDR_VAR 0 11
55827: PUSH
55828: DOUBLE
55829: LD_INT 1
55831: DEC
55832: ST_TO_ADDR
55833: LD_VAR 0 6
55837: PUSH
55838: FOR_TO
55839: IFFALSE 55886
// begin vc_chassis := 31 ;
55841: LD_ADDR_OWVAR 37
55845: PUSH
55846: LD_INT 31
55848: ST_TO_ADDR
// vc_control := control_rider ;
55849: LD_ADDR_OWVAR 38
55853: PUSH
55854: LD_INT 4
55856: ST_TO_ADDR
// animal := CreateVehicle ;
55857: LD_ADDR_VAR 0 12
55861: PUSH
55862: CALL_OW 45
55866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55867: LD_VAR 0 12
55871: PPUSH
55872: LD_VAR 0 8
55876: PPUSH
55877: LD_INT 0
55879: PPUSH
55880: CALL 58076 0 3
// end ;
55884: GO 55838
55886: POP
55887: POP
// if horses then
55888: LD_VAR 0 5
55892: IFFALSE 55959
// for i = 1 to horses do
55894: LD_ADDR_VAR 0 11
55898: PUSH
55899: DOUBLE
55900: LD_INT 1
55902: DEC
55903: ST_TO_ADDR
55904: LD_VAR 0 5
55908: PUSH
55909: FOR_TO
55910: IFFALSE 55957
// begin hc_class := 21 ;
55912: LD_ADDR_OWVAR 28
55916: PUSH
55917: LD_INT 21
55919: ST_TO_ADDR
// hc_gallery :=  ;
55920: LD_ADDR_OWVAR 33
55924: PUSH
55925: LD_STRING 
55927: ST_TO_ADDR
// animal := CreateHuman ;
55928: LD_ADDR_VAR 0 12
55932: PUSH
55933: CALL_OW 44
55937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55938: LD_VAR 0 12
55942: PPUSH
55943: LD_VAR 0 8
55947: PPUSH
55948: LD_INT 0
55950: PPUSH
55951: CALL 58076 0 3
// end ;
55955: GO 55909
55957: POP
55958: POP
// if birds then
55959: LD_VAR 0 1
55963: IFFALSE 56030
// for i = 1 to birds do
55965: LD_ADDR_VAR 0 11
55969: PUSH
55970: DOUBLE
55971: LD_INT 1
55973: DEC
55974: ST_TO_ADDR
55975: LD_VAR 0 1
55979: PUSH
55980: FOR_TO
55981: IFFALSE 56028
// begin hc_class = 18 ;
55983: LD_ADDR_OWVAR 28
55987: PUSH
55988: LD_INT 18
55990: ST_TO_ADDR
// hc_gallery =  ;
55991: LD_ADDR_OWVAR 33
55995: PUSH
55996: LD_STRING 
55998: ST_TO_ADDR
// animal := CreateHuman ;
55999: LD_ADDR_VAR 0 12
56003: PUSH
56004: CALL_OW 44
56008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56009: LD_VAR 0 12
56013: PPUSH
56014: LD_VAR 0 8
56018: PPUSH
56019: LD_INT 0
56021: PPUSH
56022: CALL 58076 0 3
// end ;
56026: GO 55980
56028: POP
56029: POP
// if tigers then
56030: LD_VAR 0 2
56034: IFFALSE 56118
// for i = 1 to tigers do
56036: LD_ADDR_VAR 0 11
56040: PUSH
56041: DOUBLE
56042: LD_INT 1
56044: DEC
56045: ST_TO_ADDR
56046: LD_VAR 0 2
56050: PUSH
56051: FOR_TO
56052: IFFALSE 56116
// begin hc_class = class_tiger ;
56054: LD_ADDR_OWVAR 28
56058: PUSH
56059: LD_INT 14
56061: ST_TO_ADDR
// hc_gallery =  ;
56062: LD_ADDR_OWVAR 33
56066: PUSH
56067: LD_STRING 
56069: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56070: LD_ADDR_OWVAR 35
56074: PUSH
56075: LD_INT 7
56077: NEG
56078: PPUSH
56079: LD_INT 7
56081: PPUSH
56082: CALL_OW 12
56086: ST_TO_ADDR
// animal := CreateHuman ;
56087: LD_ADDR_VAR 0 12
56091: PUSH
56092: CALL_OW 44
56096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56097: LD_VAR 0 12
56101: PPUSH
56102: LD_VAR 0 8
56106: PPUSH
56107: LD_INT 0
56109: PPUSH
56110: CALL 58076 0 3
// end ;
56114: GO 56051
56116: POP
56117: POP
// if apemans then
56118: LD_VAR 0 3
56122: IFFALSE 56245
// for i = 1 to apemans do
56124: LD_ADDR_VAR 0 11
56128: PUSH
56129: DOUBLE
56130: LD_INT 1
56132: DEC
56133: ST_TO_ADDR
56134: LD_VAR 0 3
56138: PUSH
56139: FOR_TO
56140: IFFALSE 56243
// begin hc_class = class_apeman ;
56142: LD_ADDR_OWVAR 28
56146: PUSH
56147: LD_INT 12
56149: ST_TO_ADDR
// hc_gallery =  ;
56150: LD_ADDR_OWVAR 33
56154: PUSH
56155: LD_STRING 
56157: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56158: LD_ADDR_OWVAR 35
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PPUSH
56167: LD_INT 2
56169: PPUSH
56170: CALL_OW 12
56174: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56175: LD_ADDR_OWVAR 31
56179: PUSH
56180: LD_INT 1
56182: PPUSH
56183: LD_INT 3
56185: PPUSH
56186: CALL_OW 12
56190: PUSH
56191: LD_INT 1
56193: PPUSH
56194: LD_INT 3
56196: PPUSH
56197: CALL_OW 12
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: ST_TO_ADDR
// animal := CreateHuman ;
56214: LD_ADDR_VAR 0 12
56218: PUSH
56219: CALL_OW 44
56223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56224: LD_VAR 0 12
56228: PPUSH
56229: LD_VAR 0 8
56233: PPUSH
56234: LD_INT 0
56236: PPUSH
56237: CALL 58076 0 3
// end ;
56241: GO 56139
56243: POP
56244: POP
// if enchidnas then
56245: LD_VAR 0 4
56249: IFFALSE 56316
// for i = 1 to enchidnas do
56251: LD_ADDR_VAR 0 11
56255: PUSH
56256: DOUBLE
56257: LD_INT 1
56259: DEC
56260: ST_TO_ADDR
56261: LD_VAR 0 4
56265: PUSH
56266: FOR_TO
56267: IFFALSE 56314
// begin hc_class = 13 ;
56269: LD_ADDR_OWVAR 28
56273: PUSH
56274: LD_INT 13
56276: ST_TO_ADDR
// hc_gallery =  ;
56277: LD_ADDR_OWVAR 33
56281: PUSH
56282: LD_STRING 
56284: ST_TO_ADDR
// animal := CreateHuman ;
56285: LD_ADDR_VAR 0 12
56289: PUSH
56290: CALL_OW 44
56294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56295: LD_VAR 0 12
56299: PPUSH
56300: LD_VAR 0 8
56304: PPUSH
56305: LD_INT 0
56307: PPUSH
56308: CALL 58076 0 3
// end ;
56312: GO 56266
56314: POP
56315: POP
// if fishes then
56316: LD_VAR 0 7
56320: IFFALSE 56387
// for i = 1 to fishes do
56322: LD_ADDR_VAR 0 11
56326: PUSH
56327: DOUBLE
56328: LD_INT 1
56330: DEC
56331: ST_TO_ADDR
56332: LD_VAR 0 7
56336: PUSH
56337: FOR_TO
56338: IFFALSE 56385
// begin hc_class = 20 ;
56340: LD_ADDR_OWVAR 28
56344: PUSH
56345: LD_INT 20
56347: ST_TO_ADDR
// hc_gallery =  ;
56348: LD_ADDR_OWVAR 33
56352: PUSH
56353: LD_STRING 
56355: ST_TO_ADDR
// animal := CreateHuman ;
56356: LD_ADDR_VAR 0 12
56360: PUSH
56361: CALL_OW 44
56365: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56366: LD_VAR 0 12
56370: PPUSH
56371: LD_VAR 0 9
56375: PPUSH
56376: LD_INT 0
56378: PPUSH
56379: CALL 58076 0 3
// end ;
56383: GO 56337
56385: POP
56386: POP
// end ;
56387: LD_VAR 0 10
56391: RET
// export function WantHeal ( sci , unit ) ; begin
56392: LD_INT 0
56394: PPUSH
// if GetTaskList ( sci ) > 0 then
56395: LD_VAR 0 1
56399: PPUSH
56400: CALL_OW 437
56404: PUSH
56405: LD_INT 0
56407: GREATER
56408: IFFALSE 56478
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56410: LD_VAR 0 1
56414: PPUSH
56415: CALL_OW 437
56419: PUSH
56420: LD_INT 1
56422: ARRAY
56423: PUSH
56424: LD_INT 1
56426: ARRAY
56427: PUSH
56428: LD_STRING l
56430: EQUAL
56431: PUSH
56432: LD_VAR 0 1
56436: PPUSH
56437: CALL_OW 437
56441: PUSH
56442: LD_INT 1
56444: ARRAY
56445: PUSH
56446: LD_INT 4
56448: ARRAY
56449: PUSH
56450: LD_VAR 0 2
56454: EQUAL
56455: AND
56456: IFFALSE 56468
// result := true else
56458: LD_ADDR_VAR 0 3
56462: PUSH
56463: LD_INT 1
56465: ST_TO_ADDR
56466: GO 56476
// result := false ;
56468: LD_ADDR_VAR 0 3
56472: PUSH
56473: LD_INT 0
56475: ST_TO_ADDR
// end else
56476: GO 56486
// result := false ;
56478: LD_ADDR_VAR 0 3
56482: PUSH
56483: LD_INT 0
56485: ST_TO_ADDR
// end ;
56486: LD_VAR 0 3
56490: RET
// export function HealTarget ( sci ) ; begin
56491: LD_INT 0
56493: PPUSH
// if not sci then
56494: LD_VAR 0 1
56498: NOT
56499: IFFALSE 56503
// exit ;
56501: GO 56568
// result := 0 ;
56503: LD_ADDR_VAR 0 2
56507: PUSH
56508: LD_INT 0
56510: ST_TO_ADDR
// if GetTaskList ( sci ) then
56511: LD_VAR 0 1
56515: PPUSH
56516: CALL_OW 437
56520: IFFALSE 56568
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56522: LD_VAR 0 1
56526: PPUSH
56527: CALL_OW 437
56531: PUSH
56532: LD_INT 1
56534: ARRAY
56535: PUSH
56536: LD_INT 1
56538: ARRAY
56539: PUSH
56540: LD_STRING l
56542: EQUAL
56543: IFFALSE 56568
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56545: LD_ADDR_VAR 0 2
56549: PUSH
56550: LD_VAR 0 1
56554: PPUSH
56555: CALL_OW 437
56559: PUSH
56560: LD_INT 1
56562: ARRAY
56563: PUSH
56564: LD_INT 4
56566: ARRAY
56567: ST_TO_ADDR
// end ;
56568: LD_VAR 0 2
56572: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56573: LD_INT 0
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
// if not base_units then
56579: LD_VAR 0 1
56583: NOT
56584: IFFALSE 56588
// exit ;
56586: GO 56675
// result := false ;
56588: LD_ADDR_VAR 0 2
56592: PUSH
56593: LD_INT 0
56595: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56596: LD_ADDR_VAR 0 5
56600: PUSH
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_INT 21
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PPUSH
56616: CALL_OW 72
56620: ST_TO_ADDR
// if not tmp then
56621: LD_VAR 0 5
56625: NOT
56626: IFFALSE 56630
// exit ;
56628: GO 56675
// for i in tmp do
56630: LD_ADDR_VAR 0 3
56634: PUSH
56635: LD_VAR 0 5
56639: PUSH
56640: FOR_IN
56641: IFFALSE 56673
// begin result := EnemyInRange ( i , 22 ) ;
56643: LD_ADDR_VAR 0 2
56647: PUSH
56648: LD_VAR 0 3
56652: PPUSH
56653: LD_INT 22
56655: PPUSH
56656: CALL 54911 0 2
56660: ST_TO_ADDR
// if result then
56661: LD_VAR 0 2
56665: IFFALSE 56671
// exit ;
56667: POP
56668: POP
56669: GO 56675
// end ;
56671: GO 56640
56673: POP
56674: POP
// end ;
56675: LD_VAR 0 2
56679: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56680: LD_INT 0
56682: PPUSH
56683: PPUSH
// if not units then
56684: LD_VAR 0 1
56688: NOT
56689: IFFALSE 56693
// exit ;
56691: GO 56763
// result := [ ] ;
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: EMPTY
56699: ST_TO_ADDR
// for i in units do
56700: LD_ADDR_VAR 0 4
56704: PUSH
56705: LD_VAR 0 1
56709: PUSH
56710: FOR_IN
56711: IFFALSE 56761
// if GetTag ( i ) = tag then
56713: LD_VAR 0 4
56717: PPUSH
56718: CALL_OW 110
56722: PUSH
56723: LD_VAR 0 2
56727: EQUAL
56728: IFFALSE 56759
// result := Replace ( result , result + 1 , i ) ;
56730: LD_ADDR_VAR 0 3
56734: PUSH
56735: LD_VAR 0 3
56739: PPUSH
56740: LD_VAR 0 3
56744: PUSH
56745: LD_INT 1
56747: PLUS
56748: PPUSH
56749: LD_VAR 0 4
56753: PPUSH
56754: CALL_OW 1
56758: ST_TO_ADDR
56759: GO 56710
56761: POP
56762: POP
// end ;
56763: LD_VAR 0 3
56767: RET
// export function IsDriver ( un ) ; begin
56768: LD_INT 0
56770: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56771: LD_ADDR_VAR 0 2
56775: PUSH
56776: LD_VAR 0 1
56780: PUSH
56781: LD_INT 55
56783: PUSH
56784: EMPTY
56785: LIST
56786: PPUSH
56787: CALL_OW 69
56791: IN
56792: ST_TO_ADDR
// end ;
56793: LD_VAR 0 2
56797: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56798: LD_INT 0
56800: PPUSH
56801: PPUSH
// list := [ ] ;
56802: LD_ADDR_VAR 0 5
56806: PUSH
56807: EMPTY
56808: ST_TO_ADDR
// case d of 0 :
56809: LD_VAR 0 3
56813: PUSH
56814: LD_INT 0
56816: DOUBLE
56817: EQUAL
56818: IFTRUE 56822
56820: GO 56955
56822: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56823: LD_ADDR_VAR 0 5
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 4
56835: MINUS
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_INT 4
56844: MINUS
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: PUSH
56854: LD_VAR 0 1
56858: PUSH
56859: LD_INT 3
56861: MINUS
56862: PUSH
56863: LD_VAR 0 2
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 4
56883: PLUS
56884: PUSH
56885: LD_VAR 0 2
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: LD_INT 3
56905: PLUS
56906: PUSH
56907: LD_VAR 0 2
56911: PUSH
56912: LD_INT 3
56914: PLUS
56915: PUSH
56916: LD_INT 5
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: LD_VAR 0 1
56928: PUSH
56929: LD_VAR 0 2
56933: PUSH
56934: LD_INT 4
56936: PLUS
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// end ; 1 :
56953: GO 57653
56955: LD_INT 1
56957: DOUBLE
56958: EQUAL
56959: IFTRUE 56963
56961: GO 57096
56963: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56964: LD_ADDR_VAR 0 5
56968: PUSH
56969: LD_VAR 0 1
56973: PUSH
56974: LD_VAR 0 2
56978: PUSH
56979: LD_INT 4
56981: MINUS
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: LD_VAR 0 1
56995: PUSH
56996: LD_INT 3
56998: MINUS
56999: PUSH
57000: LD_VAR 0 2
57004: PUSH
57005: LD_INT 3
57007: MINUS
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: PUSH
57017: LD_VAR 0 1
57021: PUSH
57022: LD_INT 4
57024: MINUS
57025: PUSH
57026: LD_VAR 0 2
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: PUSH
57039: LD_VAR 0 1
57043: PUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_INT 3
57051: PLUS
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: LD_VAR 0 1
57065: PUSH
57066: LD_INT 4
57068: PLUS
57069: PUSH
57070: LD_VAR 0 2
57074: PUSH
57075: LD_INT 4
57077: PLUS
57078: PUSH
57079: LD_INT 5
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// end ; 2 :
57094: GO 57653
57096: LD_INT 2
57098: DOUBLE
57099: EQUAL
57100: IFTRUE 57104
57102: GO 57233
57104: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57105: LD_ADDR_VAR 0 5
57109: PUSH
57110: LD_VAR 0 1
57114: PUSH
57115: LD_VAR 0 2
57119: PUSH
57120: LD_INT 3
57122: MINUS
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: PUSH
57132: LD_VAR 0 1
57136: PUSH
57137: LD_INT 4
57139: PLUS
57140: PUSH
57141: LD_VAR 0 2
57145: PUSH
57146: LD_INT 4
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_VAR 0 2
57163: PUSH
57164: LD_INT 4
57166: PLUS
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: PUSH
57176: LD_VAR 0 1
57180: PUSH
57181: LD_INT 3
57183: MINUS
57184: PUSH
57185: LD_VAR 0 2
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: PUSH
57198: LD_VAR 0 1
57202: PUSH
57203: LD_INT 4
57205: MINUS
57206: PUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_INT 4
57214: MINUS
57215: PUSH
57216: LD_INT 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: ST_TO_ADDR
// end ; 3 :
57231: GO 57653
57233: LD_INT 3
57235: DOUBLE
57236: EQUAL
57237: IFTRUE 57241
57239: GO 57374
57241: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57242: LD_ADDR_VAR 0 5
57246: PUSH
57247: LD_VAR 0 1
57251: PUSH
57252: LD_INT 3
57254: PLUS
57255: PUSH
57256: LD_VAR 0 2
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: PUSH
57269: LD_VAR 0 1
57273: PUSH
57274: LD_INT 4
57276: PLUS
57277: PUSH
57278: LD_VAR 0 2
57282: PUSH
57283: LD_INT 4
57285: PLUS
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: PUSH
57295: LD_VAR 0 1
57299: PUSH
57300: LD_INT 4
57302: MINUS
57303: PUSH
57304: LD_VAR 0 2
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: PUSH
57317: LD_VAR 0 1
57321: PUSH
57322: LD_VAR 0 2
57326: PUSH
57327: LD_INT 4
57329: MINUS
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: PUSH
57339: LD_VAR 0 1
57343: PUSH
57344: LD_INT 3
57346: MINUS
57347: PUSH
57348: LD_VAR 0 2
57352: PUSH
57353: LD_INT 3
57355: MINUS
57356: PUSH
57357: LD_INT 2
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// end ; 4 :
57372: GO 57653
57374: LD_INT 4
57376: DOUBLE
57377: EQUAL
57378: IFTRUE 57382
57380: GO 57515
57382: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57383: LD_ADDR_VAR 0 5
57387: PUSH
57388: LD_VAR 0 1
57392: PUSH
57393: LD_VAR 0 2
57397: PUSH
57398: LD_INT 4
57400: PLUS
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: PUSH
57410: LD_VAR 0 1
57414: PUSH
57415: LD_INT 3
57417: PLUS
57418: PUSH
57419: LD_VAR 0 2
57423: PUSH
57424: LD_INT 3
57426: PLUS
57427: PUSH
57428: LD_INT 5
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: PUSH
57436: LD_VAR 0 1
57440: PUSH
57441: LD_INT 4
57443: PLUS
57444: PUSH
57445: LD_VAR 0 2
57449: PUSH
57450: LD_INT 4
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: PUSH
57458: LD_VAR 0 1
57462: PUSH
57463: LD_VAR 0 2
57467: PUSH
57468: LD_INT 3
57470: MINUS
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: PUSH
57480: LD_VAR 0 1
57484: PUSH
57485: LD_INT 4
57487: MINUS
57488: PUSH
57489: LD_VAR 0 2
57493: PUSH
57494: LD_INT 4
57496: MINUS
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// end ; 5 :
57513: GO 57653
57515: LD_INT 5
57517: DOUBLE
57518: EQUAL
57519: IFTRUE 57523
57521: GO 57652
57523: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57524: LD_ADDR_VAR 0 5
57528: PUSH
57529: LD_VAR 0 1
57533: PUSH
57534: LD_INT 4
57536: MINUS
57537: PUSH
57538: LD_VAR 0 2
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: PUSH
57551: LD_VAR 0 1
57555: PUSH
57556: LD_VAR 0 2
57560: PUSH
57561: LD_INT 4
57563: MINUS
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_INT 4
57580: PLUS
57581: PUSH
57582: LD_VAR 0 2
57586: PUSH
57587: LD_INT 4
57589: PLUS
57590: PUSH
57591: LD_INT 5
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: LD_VAR 0 1
57603: PUSH
57604: LD_INT 3
57606: PLUS
57607: PUSH
57608: LD_VAR 0 2
57612: PUSH
57613: LD_INT 4
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: PUSH
57621: LD_VAR 0 1
57625: PUSH
57626: LD_VAR 0 2
57630: PUSH
57631: LD_INT 3
57633: PLUS
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
// end ; end ;
57650: GO 57653
57652: POP
// result := list ;
57653: LD_ADDR_VAR 0 4
57657: PUSH
57658: LD_VAR 0 5
57662: ST_TO_ADDR
// end ;
57663: LD_VAR 0 4
57667: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57668: LD_INT 0
57670: PPUSH
57671: PPUSH
57672: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57673: LD_VAR 0 1
57677: NOT
57678: PUSH
57679: LD_VAR 0 2
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 4
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: IN
57702: NOT
57703: OR
57704: IFFALSE 57708
// exit ;
57706: GO 57800
// tmp := [ ] ;
57708: LD_ADDR_VAR 0 5
57712: PUSH
57713: EMPTY
57714: ST_TO_ADDR
// for i in units do
57715: LD_ADDR_VAR 0 4
57719: PUSH
57720: LD_VAR 0 1
57724: PUSH
57725: FOR_IN
57726: IFFALSE 57769
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57728: LD_ADDR_VAR 0 5
57732: PUSH
57733: LD_VAR 0 5
57737: PPUSH
57738: LD_VAR 0 5
57742: PUSH
57743: LD_INT 1
57745: PLUS
57746: PPUSH
57747: LD_VAR 0 4
57751: PPUSH
57752: LD_VAR 0 2
57756: PPUSH
57757: CALL_OW 259
57761: PPUSH
57762: CALL_OW 2
57766: ST_TO_ADDR
57767: GO 57725
57769: POP
57770: POP
// if not tmp then
57771: LD_VAR 0 5
57775: NOT
57776: IFFALSE 57780
// exit ;
57778: GO 57800
// result := SortListByListDesc ( units , tmp ) ;
57780: LD_ADDR_VAR 0 3
57784: PUSH
57785: LD_VAR 0 1
57789: PPUSH
57790: LD_VAR 0 5
57794: PPUSH
57795: CALL_OW 77
57799: ST_TO_ADDR
// end ;
57800: LD_VAR 0 3
57804: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57805: LD_INT 0
57807: PPUSH
57808: PPUSH
57809: PPUSH
// result := false ;
57810: LD_ADDR_VAR 0 3
57814: PUSH
57815: LD_INT 0
57817: ST_TO_ADDR
// x := GetX ( building ) ;
57818: LD_ADDR_VAR 0 4
57822: PUSH
57823: LD_VAR 0 2
57827: PPUSH
57828: CALL_OW 250
57832: ST_TO_ADDR
// y := GetY ( building ) ;
57833: LD_ADDR_VAR 0 5
57837: PUSH
57838: LD_VAR 0 2
57842: PPUSH
57843: CALL_OW 251
57847: ST_TO_ADDR
// if not building or not x or not y then
57848: LD_VAR 0 2
57852: NOT
57853: PUSH
57854: LD_VAR 0 4
57858: NOT
57859: OR
57860: PUSH
57861: LD_VAR 0 5
57865: NOT
57866: OR
57867: IFFALSE 57871
// exit ;
57869: GO 57963
// if GetTaskList ( unit ) then
57871: LD_VAR 0 1
57875: PPUSH
57876: CALL_OW 437
57880: IFFALSE 57963
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57882: LD_STRING e
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 437
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_INT 1
57901: ARRAY
57902: EQUAL
57903: PUSH
57904: LD_VAR 0 4
57908: PUSH
57909: LD_VAR 0 1
57913: PPUSH
57914: CALL_OW 437
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PUSH
57923: LD_INT 2
57925: ARRAY
57926: EQUAL
57927: AND
57928: PUSH
57929: LD_VAR 0 5
57933: PUSH
57934: LD_VAR 0 1
57938: PPUSH
57939: CALL_OW 437
57943: PUSH
57944: LD_INT 1
57946: ARRAY
57947: PUSH
57948: LD_INT 3
57950: ARRAY
57951: EQUAL
57952: AND
57953: IFFALSE 57963
// result := true end ;
57955: LD_ADDR_VAR 0 3
57959: PUSH
57960: LD_INT 1
57962: ST_TO_ADDR
// end ;
57963: LD_VAR 0 3
57967: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57968: LD_INT 0
57970: PPUSH
// result := false ;
57971: LD_ADDR_VAR 0 4
57975: PUSH
57976: LD_INT 0
57978: ST_TO_ADDR
// if GetTaskList ( unit ) then
57979: LD_VAR 0 1
57983: PPUSH
57984: CALL_OW 437
57988: IFFALSE 58071
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57990: LD_STRING M
57992: PUSH
57993: LD_VAR 0 1
57997: PPUSH
57998: CALL_OW 437
58002: PUSH
58003: LD_INT 1
58005: ARRAY
58006: PUSH
58007: LD_INT 1
58009: ARRAY
58010: EQUAL
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_VAR 0 1
58021: PPUSH
58022: CALL_OW 437
58026: PUSH
58027: LD_INT 1
58029: ARRAY
58030: PUSH
58031: LD_INT 2
58033: ARRAY
58034: EQUAL
58035: AND
58036: PUSH
58037: LD_VAR 0 3
58041: PUSH
58042: LD_VAR 0 1
58046: PPUSH
58047: CALL_OW 437
58051: PUSH
58052: LD_INT 1
58054: ARRAY
58055: PUSH
58056: LD_INT 3
58058: ARRAY
58059: EQUAL
58060: AND
58061: IFFALSE 58071
// result := true ;
58063: LD_ADDR_VAR 0 4
58067: PUSH
58068: LD_INT 1
58070: ST_TO_ADDR
// end ; end ;
58071: LD_VAR 0 4
58075: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58076: LD_INT 0
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
// if not unit or not area then
58082: LD_VAR 0 1
58086: NOT
58087: PUSH
58088: LD_VAR 0 2
58092: NOT
58093: OR
58094: IFFALSE 58098
// exit ;
58096: GO 58262
// tmp := AreaToList ( area , i ) ;
58098: LD_ADDR_VAR 0 6
58102: PUSH
58103: LD_VAR 0 2
58107: PPUSH
58108: LD_VAR 0 5
58112: PPUSH
58113: CALL_OW 517
58117: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58118: LD_ADDR_VAR 0 5
58122: PUSH
58123: DOUBLE
58124: LD_INT 1
58126: DEC
58127: ST_TO_ADDR
58128: LD_VAR 0 6
58132: PUSH
58133: LD_INT 1
58135: ARRAY
58136: PUSH
58137: FOR_TO
58138: IFFALSE 58260
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58140: LD_ADDR_VAR 0 7
58144: PUSH
58145: LD_VAR 0 6
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PUSH
58154: LD_VAR 0 5
58158: ARRAY
58159: PUSH
58160: LD_VAR 0 6
58164: PUSH
58165: LD_INT 2
58167: ARRAY
58168: PUSH
58169: LD_VAR 0 5
58173: ARRAY
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58179: LD_VAR 0 7
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PPUSH
58188: LD_VAR 0 7
58192: PUSH
58193: LD_INT 2
58195: ARRAY
58196: PPUSH
58197: CALL_OW 428
58201: PUSH
58202: LD_INT 0
58204: EQUAL
58205: IFFALSE 58258
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58207: LD_VAR 0 1
58211: PPUSH
58212: LD_VAR 0 7
58216: PUSH
58217: LD_INT 1
58219: ARRAY
58220: PPUSH
58221: LD_VAR 0 7
58225: PUSH
58226: LD_INT 2
58228: ARRAY
58229: PPUSH
58230: LD_VAR 0 3
58234: PPUSH
58235: CALL_OW 48
// result := IsPlaced ( unit ) ;
58239: LD_ADDR_VAR 0 4
58243: PUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 305
58253: ST_TO_ADDR
// exit ;
58254: POP
58255: POP
58256: GO 58262
// end ; end ;
58258: GO 58137
58260: POP
58261: POP
// end ;
58262: LD_VAR 0 4
58266: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58267: LD_INT 0
58269: PPUSH
58270: PPUSH
58271: PPUSH
// if not side or side > 8 then
58272: LD_VAR 0 1
58276: NOT
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: LD_INT 8
58285: GREATER
58286: OR
58287: IFFALSE 58291
// exit ;
58289: GO 58478
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58291: LD_ADDR_VAR 0 4
58295: PUSH
58296: LD_INT 22
58298: PUSH
58299: LD_VAR 0 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 21
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PPUSH
58322: CALL_OW 69
58326: ST_TO_ADDR
// if not tmp then
58327: LD_VAR 0 4
58331: NOT
58332: IFFALSE 58336
// exit ;
58334: GO 58478
// enable_addtolog := true ;
58336: LD_ADDR_OWVAR 81
58340: PUSH
58341: LD_INT 1
58343: ST_TO_ADDR
// AddToLog ( [ ) ;
58344: LD_STRING [
58346: PPUSH
58347: CALL_OW 561
// for i in tmp do
58351: LD_ADDR_VAR 0 3
58355: PUSH
58356: LD_VAR 0 4
58360: PUSH
58361: FOR_IN
58362: IFFALSE 58469
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58364: LD_STRING [
58366: PUSH
58367: LD_VAR 0 3
58371: PPUSH
58372: CALL_OW 266
58376: STR
58377: PUSH
58378: LD_STRING , 
58380: STR
58381: PUSH
58382: LD_VAR 0 3
58386: PPUSH
58387: CALL_OW 250
58391: STR
58392: PUSH
58393: LD_STRING , 
58395: STR
58396: PUSH
58397: LD_VAR 0 3
58401: PPUSH
58402: CALL_OW 251
58406: STR
58407: PUSH
58408: LD_STRING , 
58410: STR
58411: PUSH
58412: LD_VAR 0 3
58416: PPUSH
58417: CALL_OW 254
58421: STR
58422: PUSH
58423: LD_STRING , 
58425: STR
58426: PUSH
58427: LD_VAR 0 3
58431: PPUSH
58432: LD_INT 1
58434: PPUSH
58435: CALL_OW 268
58439: STR
58440: PUSH
58441: LD_STRING , 
58443: STR
58444: PUSH
58445: LD_VAR 0 3
58449: PPUSH
58450: LD_INT 2
58452: PPUSH
58453: CALL_OW 268
58457: STR
58458: PUSH
58459: LD_STRING ],
58461: STR
58462: PPUSH
58463: CALL_OW 561
// end ;
58467: GO 58361
58469: POP
58470: POP
// AddToLog ( ]; ) ;
58471: LD_STRING ];
58473: PPUSH
58474: CALL_OW 561
// end ;
58478: LD_VAR 0 2
58482: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58483: LD_INT 0
58485: PPUSH
58486: PPUSH
58487: PPUSH
58488: PPUSH
58489: PPUSH
// if not area or not rate or not max then
58490: LD_VAR 0 1
58494: NOT
58495: PUSH
58496: LD_VAR 0 2
58500: NOT
58501: OR
58502: PUSH
58503: LD_VAR 0 4
58507: NOT
58508: OR
58509: IFFALSE 58513
// exit ;
58511: GO 58705
// while 1 do
58513: LD_INT 1
58515: IFFALSE 58705
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58517: LD_ADDR_VAR 0 9
58521: PUSH
58522: LD_VAR 0 1
58526: PPUSH
58527: LD_INT 1
58529: PPUSH
58530: CALL_OW 287
58534: PUSH
58535: LD_INT 10
58537: MUL
58538: ST_TO_ADDR
// r := rate / 10 ;
58539: LD_ADDR_VAR 0 7
58543: PUSH
58544: LD_VAR 0 2
58548: PUSH
58549: LD_INT 10
58551: DIVREAL
58552: ST_TO_ADDR
// time := 1 1$00 ;
58553: LD_ADDR_VAR 0 8
58557: PUSH
58558: LD_INT 2100
58560: ST_TO_ADDR
// if amount < min then
58561: LD_VAR 0 9
58565: PUSH
58566: LD_VAR 0 3
58570: LESS
58571: IFFALSE 58589
// r := r * 2 else
58573: LD_ADDR_VAR 0 7
58577: PUSH
58578: LD_VAR 0 7
58582: PUSH
58583: LD_INT 2
58585: MUL
58586: ST_TO_ADDR
58587: GO 58615
// if amount > max then
58589: LD_VAR 0 9
58593: PUSH
58594: LD_VAR 0 4
58598: GREATER
58599: IFFALSE 58615
// r := r / 2 ;
58601: LD_ADDR_VAR 0 7
58605: PUSH
58606: LD_VAR 0 7
58610: PUSH
58611: LD_INT 2
58613: DIVREAL
58614: ST_TO_ADDR
// time := time / r ;
58615: LD_ADDR_VAR 0 8
58619: PUSH
58620: LD_VAR 0 8
58624: PUSH
58625: LD_VAR 0 7
58629: DIVREAL
58630: ST_TO_ADDR
// if time < 0 then
58631: LD_VAR 0 8
58635: PUSH
58636: LD_INT 0
58638: LESS
58639: IFFALSE 58656
// time := time * - 1 ;
58641: LD_ADDR_VAR 0 8
58645: PUSH
58646: LD_VAR 0 8
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: MUL
58655: ST_TO_ADDR
// wait ( time ) ;
58656: LD_VAR 0 8
58660: PPUSH
58661: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58665: LD_INT 35
58667: PPUSH
58668: LD_INT 875
58670: PPUSH
58671: CALL_OW 12
58675: PPUSH
58676: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58680: LD_INT 1
58682: PPUSH
58683: LD_INT 5
58685: PPUSH
58686: CALL_OW 12
58690: PPUSH
58691: LD_VAR 0 1
58695: PPUSH
58696: LD_INT 1
58698: PPUSH
58699: CALL_OW 55
// end ;
58703: GO 58513
// end ;
58705: LD_VAR 0 5
58709: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58710: LD_INT 0
58712: PPUSH
58713: PPUSH
58714: PPUSH
58715: PPUSH
58716: PPUSH
58717: PPUSH
58718: PPUSH
58719: PPUSH
// if not turrets or not factories then
58720: LD_VAR 0 1
58724: NOT
58725: PUSH
58726: LD_VAR 0 2
58730: NOT
58731: OR
58732: IFFALSE 58736
// exit ;
58734: GO 59043
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58736: LD_ADDR_VAR 0 10
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: LD_INT 6
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 4
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 5
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 24
58778: PUSH
58779: LD_INT 25
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 23
58788: PUSH
58789: LD_INT 27
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 42
58802: PUSH
58803: LD_INT 43
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 44
58812: PUSH
58813: LD_INT 46
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 45
58822: PUSH
58823: LD_INT 47
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: LIST
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// result := [ ] ;
58840: LD_ADDR_VAR 0 3
58844: PUSH
58845: EMPTY
58846: ST_TO_ADDR
// for i in turrets do
58847: LD_ADDR_VAR 0 4
58851: PUSH
58852: LD_VAR 0 1
58856: PUSH
58857: FOR_IN
58858: IFFALSE 59041
// begin nat := GetNation ( i ) ;
58860: LD_ADDR_VAR 0 7
58864: PUSH
58865: LD_VAR 0 4
58869: PPUSH
58870: CALL_OW 248
58874: ST_TO_ADDR
// weapon := 0 ;
58875: LD_ADDR_VAR 0 8
58879: PUSH
58880: LD_INT 0
58882: ST_TO_ADDR
// if not nat then
58883: LD_VAR 0 7
58887: NOT
58888: IFFALSE 58892
// continue ;
58890: GO 58857
// for j in list [ nat ] do
58892: LD_ADDR_VAR 0 5
58896: PUSH
58897: LD_VAR 0 10
58901: PUSH
58902: LD_VAR 0 7
58906: ARRAY
58907: PUSH
58908: FOR_IN
58909: IFFALSE 58950
// if GetBWeapon ( i ) = j [ 1 ] then
58911: LD_VAR 0 4
58915: PPUSH
58916: CALL_OW 269
58920: PUSH
58921: LD_VAR 0 5
58925: PUSH
58926: LD_INT 1
58928: ARRAY
58929: EQUAL
58930: IFFALSE 58948
// begin weapon := j [ 2 ] ;
58932: LD_ADDR_VAR 0 8
58936: PUSH
58937: LD_VAR 0 5
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: ST_TO_ADDR
// break ;
58946: GO 58950
// end ;
58948: GO 58908
58950: POP
58951: POP
// if not weapon then
58952: LD_VAR 0 8
58956: NOT
58957: IFFALSE 58961
// continue ;
58959: GO 58857
// for k in factories do
58961: LD_ADDR_VAR 0 6
58965: PUSH
58966: LD_VAR 0 2
58970: PUSH
58971: FOR_IN
58972: IFFALSE 59037
// begin weapons := AvailableWeaponList ( k ) ;
58974: LD_ADDR_VAR 0 9
58978: PUSH
58979: LD_VAR 0 6
58983: PPUSH
58984: CALL_OW 478
58988: ST_TO_ADDR
// if not weapons then
58989: LD_VAR 0 9
58993: NOT
58994: IFFALSE 58998
// continue ;
58996: GO 58971
// if weapon in weapons then
58998: LD_VAR 0 8
59002: PUSH
59003: LD_VAR 0 9
59007: IN
59008: IFFALSE 59035
// begin result := [ i , weapon ] ;
59010: LD_ADDR_VAR 0 3
59014: PUSH
59015: LD_VAR 0 4
59019: PUSH
59020: LD_VAR 0 8
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: ST_TO_ADDR
// exit ;
59029: POP
59030: POP
59031: POP
59032: POP
59033: GO 59043
// end ; end ;
59035: GO 58971
59037: POP
59038: POP
// end ;
59039: GO 58857
59041: POP
59042: POP
// end ;
59043: LD_VAR 0 3
59047: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59048: LD_INT 0
59050: PPUSH
// if not side or side > 8 then
59051: LD_VAR 0 3
59055: NOT
59056: PUSH
59057: LD_VAR 0 3
59061: PUSH
59062: LD_INT 8
59064: GREATER
59065: OR
59066: IFFALSE 59070
// exit ;
59068: GO 59129
// if not range then
59070: LD_VAR 0 4
59074: NOT
59075: IFFALSE 59086
// range := - 12 ;
59077: LD_ADDR_VAR 0 4
59081: PUSH
59082: LD_INT 12
59084: NEG
59085: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59086: LD_VAR 0 1
59090: PPUSH
59091: LD_VAR 0 2
59095: PPUSH
59096: LD_VAR 0 3
59100: PPUSH
59101: LD_VAR 0 4
59105: PPUSH
59106: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59110: LD_VAR 0 1
59114: PPUSH
59115: LD_VAR 0 2
59119: PPUSH
59120: LD_VAR 0 3
59124: PPUSH
59125: CALL_OW 331
// end ;
59129: LD_VAR 0 5
59133: RET
// export function Video ( mode ) ; begin
59134: LD_INT 0
59136: PPUSH
// ingame_video = mode ;
59137: LD_ADDR_OWVAR 52
59141: PUSH
59142: LD_VAR 0 1
59146: ST_TO_ADDR
// interface_hidden = mode ;
59147: LD_ADDR_OWVAR 54
59151: PUSH
59152: LD_VAR 0 1
59156: ST_TO_ADDR
// end ;
59157: LD_VAR 0 2
59161: RET
// export function Join ( array , element ) ; begin
59162: LD_INT 0
59164: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59165: LD_ADDR_VAR 0 3
59169: PUSH
59170: LD_VAR 0 1
59174: PPUSH
59175: LD_VAR 0 1
59179: PUSH
59180: LD_INT 1
59182: PLUS
59183: PPUSH
59184: LD_VAR 0 2
59188: PPUSH
59189: CALL_OW 1
59193: ST_TO_ADDR
// end ;
59194: LD_VAR 0 3
59198: RET
// export function JoinUnion ( array , element ) ; begin
59199: LD_INT 0
59201: PPUSH
// result := array union element ;
59202: LD_ADDR_VAR 0 3
59206: PUSH
59207: LD_VAR 0 1
59211: PUSH
59212: LD_VAR 0 2
59216: UNION
59217: ST_TO_ADDR
// end ;
59218: LD_VAR 0 3
59222: RET
// export function GetBehemoths ( side ) ; begin
59223: LD_INT 0
59225: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59226: LD_ADDR_VAR 0 2
59230: PUSH
59231: LD_INT 22
59233: PUSH
59234: LD_VAR 0 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 31
59245: PUSH
59246: LD_INT 25
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PPUSH
59257: CALL_OW 69
59261: ST_TO_ADDR
// end ;
59262: LD_VAR 0 2
59266: RET
// export function Shuffle ( array ) ; var i , index ; begin
59267: LD_INT 0
59269: PPUSH
59270: PPUSH
59271: PPUSH
// result := [ ] ;
59272: LD_ADDR_VAR 0 2
59276: PUSH
59277: EMPTY
59278: ST_TO_ADDR
// if not array then
59279: LD_VAR 0 1
59283: NOT
59284: IFFALSE 59288
// exit ;
59286: GO 59387
// Randomize ;
59288: CALL_OW 10
// for i = array downto 1 do
59292: LD_ADDR_VAR 0 3
59296: PUSH
59297: DOUBLE
59298: LD_VAR 0 1
59302: INC
59303: ST_TO_ADDR
59304: LD_INT 1
59306: PUSH
59307: FOR_DOWNTO
59308: IFFALSE 59385
// begin index := rand ( 1 , array ) ;
59310: LD_ADDR_VAR 0 4
59314: PUSH
59315: LD_INT 1
59317: PPUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: CALL_OW 12
59327: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59328: LD_ADDR_VAR 0 2
59332: PUSH
59333: LD_VAR 0 2
59337: PPUSH
59338: LD_VAR 0 2
59342: PUSH
59343: LD_INT 1
59345: PLUS
59346: PPUSH
59347: LD_VAR 0 1
59351: PUSH
59352: LD_VAR 0 4
59356: ARRAY
59357: PPUSH
59358: CALL_OW 2
59362: ST_TO_ADDR
// array := Delete ( array , index ) ;
59363: LD_ADDR_VAR 0 1
59367: PUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: LD_VAR 0 4
59377: PPUSH
59378: CALL_OW 3
59382: ST_TO_ADDR
// end ;
59383: GO 59307
59385: POP
59386: POP
// end ;
59387: LD_VAR 0 2
59391: RET
// export function GetBaseMaterials ( base ) ; begin
59392: LD_INT 0
59394: PPUSH
// result := [ 0 , 0 , 0 ] ;
59395: LD_ADDR_VAR 0 2
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// if not base then
59414: LD_VAR 0 1
59418: NOT
59419: IFFALSE 59423
// exit ;
59421: GO 59472
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59423: LD_ADDR_VAR 0 2
59427: PUSH
59428: LD_VAR 0 1
59432: PPUSH
59433: LD_INT 1
59435: PPUSH
59436: CALL_OW 275
59440: PUSH
59441: LD_VAR 0 1
59445: PPUSH
59446: LD_INT 2
59448: PPUSH
59449: CALL_OW 275
59453: PUSH
59454: LD_VAR 0 1
59458: PPUSH
59459: LD_INT 3
59461: PPUSH
59462: CALL_OW 275
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: ST_TO_ADDR
// end ;
59472: LD_VAR 0 2
59476: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59477: LD_INT 0
59479: PPUSH
59480: PPUSH
// result := array ;
59481: LD_ADDR_VAR 0 3
59485: PUSH
59486: LD_VAR 0 1
59490: ST_TO_ADDR
// if size > 0 then
59491: LD_VAR 0 2
59495: PUSH
59496: LD_INT 0
59498: GREATER
59499: IFFALSE 59545
// for i := array downto size do
59501: LD_ADDR_VAR 0 4
59505: PUSH
59506: DOUBLE
59507: LD_VAR 0 1
59511: INC
59512: ST_TO_ADDR
59513: LD_VAR 0 2
59517: PUSH
59518: FOR_DOWNTO
59519: IFFALSE 59543
// result := Delete ( result , result ) ;
59521: LD_ADDR_VAR 0 3
59525: PUSH
59526: LD_VAR 0 3
59530: PPUSH
59531: LD_VAR 0 3
59535: PPUSH
59536: CALL_OW 3
59540: ST_TO_ADDR
59541: GO 59518
59543: POP
59544: POP
// end ;
59545: LD_VAR 0 3
59549: RET
// export function ComExit ( unit ) ; var tmp ; begin
59550: LD_INT 0
59552: PPUSH
59553: PPUSH
// if not IsInUnit ( unit ) then
59554: LD_VAR 0 1
59558: PPUSH
59559: CALL_OW 310
59563: NOT
59564: IFFALSE 59568
// exit ;
59566: GO 59628
// tmp := IsInUnit ( unit ) ;
59568: LD_ADDR_VAR 0 3
59572: PUSH
59573: LD_VAR 0 1
59577: PPUSH
59578: CALL_OW 310
59582: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59583: LD_VAR 0 3
59587: PPUSH
59588: CALL_OW 247
59592: PUSH
59593: LD_INT 2
59595: EQUAL
59596: IFFALSE 59609
// ComExitVehicle ( unit ) else
59598: LD_VAR 0 1
59602: PPUSH
59603: CALL_OW 121
59607: GO 59618
// ComExitBuilding ( unit ) ;
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 122
// result := tmp ;
59618: LD_ADDR_VAR 0 2
59622: PUSH
59623: LD_VAR 0 3
59627: ST_TO_ADDR
// end ;
59628: LD_VAR 0 2
59632: RET
// export function ComExitAll ( units ) ; var i ; begin
59633: LD_INT 0
59635: PPUSH
59636: PPUSH
// if not units then
59637: LD_VAR 0 1
59641: NOT
59642: IFFALSE 59646
// exit ;
59644: GO 59672
// for i in units do
59646: LD_ADDR_VAR 0 3
59650: PUSH
59651: LD_VAR 0 1
59655: PUSH
59656: FOR_IN
59657: IFFALSE 59670
// ComExit ( i ) ;
59659: LD_VAR 0 3
59663: PPUSH
59664: CALL 59550 0 1
59668: GO 59656
59670: POP
59671: POP
// end ;
59672: LD_VAR 0 2
59676: RET
// export function ResetHc ; begin
59677: LD_INT 0
59679: PPUSH
// InitHc ;
59680: CALL_OW 19
// hc_importance := 0 ;
59684: LD_ADDR_OWVAR 32
59688: PUSH
59689: LD_INT 0
59691: ST_TO_ADDR
// end ;
59692: LD_VAR 0 1
59696: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59697: LD_INT 0
59699: PPUSH
59700: PPUSH
59701: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59702: LD_ADDR_VAR 0 6
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: LD_VAR 0 3
59716: PLUS
59717: PUSH
59718: LD_INT 2
59720: DIV
59721: ST_TO_ADDR
// if _x < 0 then
59722: LD_VAR 0 6
59726: PUSH
59727: LD_INT 0
59729: LESS
59730: IFFALSE 59747
// _x := _x * - 1 ;
59732: LD_ADDR_VAR 0 6
59736: PUSH
59737: LD_VAR 0 6
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: MUL
59746: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59747: LD_ADDR_VAR 0 7
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_VAR 0 4
59761: PLUS
59762: PUSH
59763: LD_INT 2
59765: DIV
59766: ST_TO_ADDR
// if _y < 0 then
59767: LD_VAR 0 7
59771: PUSH
59772: LD_INT 0
59774: LESS
59775: IFFALSE 59792
// _y := _y * - 1 ;
59777: LD_ADDR_VAR 0 7
59781: PUSH
59782: LD_VAR 0 7
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: MUL
59791: ST_TO_ADDR
// result := [ _x , _y ] ;
59792: LD_ADDR_VAR 0 5
59796: PUSH
59797: LD_VAR 0 6
59801: PUSH
59802: LD_VAR 0 7
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// end ;
59811: LD_VAR 0 5
59815: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59816: LD_INT 0
59818: PPUSH
59819: PPUSH
59820: PPUSH
59821: PPUSH
// task := GetTaskList ( unit ) ;
59822: LD_ADDR_VAR 0 7
59826: PUSH
59827: LD_VAR 0 1
59831: PPUSH
59832: CALL_OW 437
59836: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59837: LD_VAR 0 7
59841: NOT
59842: PUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: LD_VAR 0 2
59852: PPUSH
59853: CALL_OW 308
59857: NOT
59858: AND
59859: IFFALSE 59863
// exit ;
59861: GO 59981
// if IsInArea ( unit , area ) then
59863: LD_VAR 0 1
59867: PPUSH
59868: LD_VAR 0 2
59872: PPUSH
59873: CALL_OW 308
59877: IFFALSE 59895
// begin ComMoveToArea ( unit , goAway ) ;
59879: LD_VAR 0 1
59883: PPUSH
59884: LD_VAR 0 3
59888: PPUSH
59889: CALL_OW 113
// exit ;
59893: GO 59981
// end ; if task [ 1 ] [ 1 ] <> M then
59895: LD_VAR 0 7
59899: PUSH
59900: LD_INT 1
59902: ARRAY
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PUSH
59908: LD_STRING M
59910: NONEQUAL
59911: IFFALSE 59915
// exit ;
59913: GO 59981
// x := task [ 1 ] [ 2 ] ;
59915: LD_ADDR_VAR 0 5
59919: PUSH
59920: LD_VAR 0 7
59924: PUSH
59925: LD_INT 1
59927: ARRAY
59928: PUSH
59929: LD_INT 2
59931: ARRAY
59932: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59933: LD_ADDR_VAR 0 6
59937: PUSH
59938: LD_VAR 0 7
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: PUSH
59947: LD_INT 3
59949: ARRAY
59950: ST_TO_ADDR
// if InArea ( x , y , area ) then
59951: LD_VAR 0 5
59955: PPUSH
59956: LD_VAR 0 6
59960: PPUSH
59961: LD_VAR 0 2
59965: PPUSH
59966: CALL_OW 309
59970: IFFALSE 59981
// ComStop ( unit ) ;
59972: LD_VAR 0 1
59976: PPUSH
59977: CALL_OW 141
// end ;
59981: LD_VAR 0 4
59985: RET
// export function Abs ( value ) ; begin
59986: LD_INT 0
59988: PPUSH
// result := value ;
59989: LD_ADDR_VAR 0 2
59993: PUSH
59994: LD_VAR 0 1
59998: ST_TO_ADDR
// if value < 0 then
59999: LD_VAR 0 1
60003: PUSH
60004: LD_INT 0
60006: LESS
60007: IFFALSE 60024
// result := value * - 1 ;
60009: LD_ADDR_VAR 0 2
60013: PUSH
60014: LD_VAR 0 1
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: MUL
60023: ST_TO_ADDR
// end ;
60024: LD_VAR 0 2
60028: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60029: LD_INT 0
60031: PPUSH
60032: PPUSH
60033: PPUSH
60034: PPUSH
60035: PPUSH
60036: PPUSH
60037: PPUSH
60038: PPUSH
// if not unit or not building then
60039: LD_VAR 0 1
60043: NOT
60044: PUSH
60045: LD_VAR 0 2
60049: NOT
60050: OR
60051: IFFALSE 60055
// exit ;
60053: GO 60281
// x := GetX ( building ) ;
60055: LD_ADDR_VAR 0 4
60059: PUSH
60060: LD_VAR 0 2
60064: PPUSH
60065: CALL_OW 250
60069: ST_TO_ADDR
// y := GetY ( building ) ;
60070: LD_ADDR_VAR 0 6
60074: PUSH
60075: LD_VAR 0 2
60079: PPUSH
60080: CALL_OW 251
60084: ST_TO_ADDR
// d := GetDir ( building ) ;
60085: LD_ADDR_VAR 0 8
60089: PUSH
60090: LD_VAR 0 2
60094: PPUSH
60095: CALL_OW 254
60099: ST_TO_ADDR
// r := 4 ;
60100: LD_ADDR_VAR 0 9
60104: PUSH
60105: LD_INT 4
60107: ST_TO_ADDR
// for i := 1 to 5 do
60108: LD_ADDR_VAR 0 10
60112: PUSH
60113: DOUBLE
60114: LD_INT 1
60116: DEC
60117: ST_TO_ADDR
60118: LD_INT 5
60120: PUSH
60121: FOR_TO
60122: IFFALSE 60279
// begin _x := ShiftX ( x , d , r + i ) ;
60124: LD_ADDR_VAR 0 5
60128: PUSH
60129: LD_VAR 0 4
60133: PPUSH
60134: LD_VAR 0 8
60138: PPUSH
60139: LD_VAR 0 9
60143: PUSH
60144: LD_VAR 0 10
60148: PLUS
60149: PPUSH
60150: CALL_OW 272
60154: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60155: LD_ADDR_VAR 0 7
60159: PUSH
60160: LD_VAR 0 6
60164: PPUSH
60165: LD_VAR 0 8
60169: PPUSH
60170: LD_VAR 0 9
60174: PUSH
60175: LD_VAR 0 10
60179: PLUS
60180: PPUSH
60181: CALL_OW 273
60185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60186: LD_VAR 0 5
60190: PPUSH
60191: LD_VAR 0 7
60195: PPUSH
60196: CALL_OW 488
60200: PUSH
60201: LD_VAR 0 5
60205: PPUSH
60206: LD_VAR 0 7
60210: PPUSH
60211: CALL_OW 428
60215: PPUSH
60216: CALL_OW 247
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: IN
60231: NOT
60232: AND
60233: IFFALSE 60277
// begin ComMoveXY ( unit , _x , _y ) ;
60235: LD_VAR 0 1
60239: PPUSH
60240: LD_VAR 0 5
60244: PPUSH
60245: LD_VAR 0 7
60249: PPUSH
60250: CALL_OW 111
// result := [ _x , _y ] ;
60254: LD_ADDR_VAR 0 3
60258: PUSH
60259: LD_VAR 0 5
60263: PUSH
60264: LD_VAR 0 7
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: ST_TO_ADDR
// exit ;
60273: POP
60274: POP
60275: GO 60281
// end ; end ;
60277: GO 60121
60279: POP
60280: POP
// end ;
60281: LD_VAR 0 3
60285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60286: LD_INT 0
60288: PPUSH
60289: PPUSH
60290: PPUSH
// result := 0 ;
60291: LD_ADDR_VAR 0 3
60295: PUSH
60296: LD_INT 0
60298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60299: LD_VAR 0 1
60303: PUSH
60304: LD_INT 0
60306: LESS
60307: PUSH
60308: LD_VAR 0 1
60312: PUSH
60313: LD_INT 8
60315: GREATER
60316: OR
60317: PUSH
60318: LD_VAR 0 2
60322: PUSH
60323: LD_INT 0
60325: LESS
60326: OR
60327: PUSH
60328: LD_VAR 0 2
60332: PUSH
60333: LD_INT 8
60335: GREATER
60336: OR
60337: IFFALSE 60341
// exit ;
60339: GO 60416
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60341: LD_ADDR_VAR 0 4
60345: PUSH
60346: LD_INT 22
60348: PUSH
60349: LD_VAR 0 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PPUSH
60358: CALL_OW 69
60362: PUSH
60363: FOR_IN
60364: IFFALSE 60414
// begin un := UnitShoot ( i ) ;
60366: LD_ADDR_VAR 0 5
60370: PUSH
60371: LD_VAR 0 4
60375: PPUSH
60376: CALL_OW 504
60380: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60381: LD_VAR 0 5
60385: PPUSH
60386: CALL_OW 255
60390: PUSH
60391: LD_VAR 0 1
60395: EQUAL
60396: IFFALSE 60412
// begin result := un ;
60398: LD_ADDR_VAR 0 3
60402: PUSH
60403: LD_VAR 0 5
60407: ST_TO_ADDR
// exit ;
60408: POP
60409: POP
60410: GO 60416
// end ; end ;
60412: GO 60363
60414: POP
60415: POP
// end ;
60416: LD_VAR 0 3
60420: RET
// export function GetCargoBay ( units ) ; begin
60421: LD_INT 0
60423: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60424: LD_ADDR_VAR 0 2
60428: PUSH
60429: LD_VAR 0 1
60433: PPUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 34
60439: PUSH
60440: LD_INT 12
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 34
60449: PUSH
60450: LD_INT 51
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 34
60459: PUSH
60460: LD_INT 32
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 34
60469: PUSH
60470: LD_EXP 94
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: PPUSH
60486: CALL_OW 72
60490: ST_TO_ADDR
// end ;
60491: LD_VAR 0 2
60495: RET
// export function Negate ( value ) ; begin
60496: LD_INT 0
60498: PPUSH
// result := not value ;
60499: LD_ADDR_VAR 0 2
60503: PUSH
60504: LD_VAR 0 1
60508: NOT
60509: ST_TO_ADDR
// end ;
60510: LD_VAR 0 2
60514: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
60515: LD_INT 0
60517: PPUSH
// if x1 = x2 then
60518: LD_VAR 0 1
60522: PUSH
60523: LD_VAR 0 3
60527: EQUAL
60528: IFFALSE 60562
// begin if y1 > y2 then
60530: LD_VAR 0 2
60534: PUSH
60535: LD_VAR 0 4
60539: GREATER
60540: IFFALSE 60552
// result := 0 else
60542: LD_ADDR_VAR 0 5
60546: PUSH
60547: LD_INT 0
60549: ST_TO_ADDR
60550: GO 60560
// result := 3 ;
60552: LD_ADDR_VAR 0 5
60556: PUSH
60557: LD_INT 3
60559: ST_TO_ADDR
// exit ;
60560: GO 60648
// end ; if y1 = y2 then
60562: LD_VAR 0 2
60566: PUSH
60567: LD_VAR 0 4
60571: EQUAL
60572: IFFALSE 60606
// begin if x1 > x2 then
60574: LD_VAR 0 1
60578: PUSH
60579: LD_VAR 0 3
60583: GREATER
60584: IFFALSE 60596
// result := 1 else
60586: LD_ADDR_VAR 0 5
60590: PUSH
60591: LD_INT 1
60593: ST_TO_ADDR
60594: GO 60604
// result := 4 ;
60596: LD_ADDR_VAR 0 5
60600: PUSH
60601: LD_INT 4
60603: ST_TO_ADDR
// exit ;
60604: GO 60648
// end ; if x1 > x2 and y1 > y2 then
60606: LD_VAR 0 1
60610: PUSH
60611: LD_VAR 0 3
60615: GREATER
60616: PUSH
60617: LD_VAR 0 2
60621: PUSH
60622: LD_VAR 0 4
60626: GREATER
60627: AND
60628: IFFALSE 60640
// result := 2 else
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: LD_INT 2
60637: ST_TO_ADDR
60638: GO 60648
// result := 5 ;
60640: LD_ADDR_VAR 0 5
60644: PUSH
60645: LD_INT 5
60647: ST_TO_ADDR
// end ;
60648: LD_VAR 0 5
60652: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60653: LD_INT 0
60655: PPUSH
60656: PPUSH
// if not driver or not IsInUnit ( driver ) then
60657: LD_VAR 0 1
60661: NOT
60662: PUSH
60663: LD_VAR 0 1
60667: PPUSH
60668: CALL_OW 310
60672: NOT
60673: OR
60674: IFFALSE 60678
// exit ;
60676: GO 60768
// vehicle := IsInUnit ( driver ) ;
60678: LD_ADDR_VAR 0 3
60682: PUSH
60683: LD_VAR 0 1
60687: PPUSH
60688: CALL_OW 310
60692: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60693: LD_VAR 0 1
60697: PPUSH
60698: LD_STRING \
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: PUSH
60728: LD_STRING E
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_VAR 0 3
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PPUSH
60764: CALL_OW 446
// end ;
60768: LD_VAR 0 2
60772: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60773: LD_INT 0
60775: PPUSH
60776: PPUSH
// if not driver or not IsInUnit ( driver ) then
60777: LD_VAR 0 1
60781: NOT
60782: PUSH
60783: LD_VAR 0 1
60787: PPUSH
60788: CALL_OW 310
60792: NOT
60793: OR
60794: IFFALSE 60798
// exit ;
60796: GO 60888
// vehicle := IsInUnit ( driver ) ;
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: LD_VAR 0 1
60807: PPUSH
60808: CALL_OW 310
60812: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60813: LD_VAR 0 1
60817: PPUSH
60818: LD_STRING \
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: PUSH
60848: LD_STRING E
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_VAR 0 3
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PPUSH
60884: CALL_OW 447
// end ;
60888: LD_VAR 0 2
60892: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60893: LD_INT 0
60895: PPUSH
60896: PPUSH
60897: PPUSH
// tmp := [ ] ;
60898: LD_ADDR_VAR 0 5
60902: PUSH
60903: EMPTY
60904: ST_TO_ADDR
// for i in units do
60905: LD_ADDR_VAR 0 4
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: FOR_IN
60916: IFFALSE 60954
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60918: LD_ADDR_VAR 0 5
60922: PUSH
60923: LD_VAR 0 5
60927: PPUSH
60928: LD_VAR 0 5
60932: PUSH
60933: LD_INT 1
60935: PLUS
60936: PPUSH
60937: LD_VAR 0 4
60941: PPUSH
60942: CALL_OW 256
60946: PPUSH
60947: CALL_OW 2
60951: ST_TO_ADDR
60952: GO 60915
60954: POP
60955: POP
// if not tmp then
60956: LD_VAR 0 5
60960: NOT
60961: IFFALSE 60965
// exit ;
60963: GO 61013
// if asc then
60965: LD_VAR 0 2
60969: IFFALSE 60993
// result := SortListByListAsc ( units , tmp ) else
60971: LD_ADDR_VAR 0 3
60975: PUSH
60976: LD_VAR 0 1
60980: PPUSH
60981: LD_VAR 0 5
60985: PPUSH
60986: CALL_OW 76
60990: ST_TO_ADDR
60991: GO 61013
// result := SortListByListDesc ( units , tmp ) ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 5
61007: PPUSH
61008: CALL_OW 77
61012: ST_TO_ADDR
// end ;
61013: LD_VAR 0 3
61017: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61018: LD_INT 0
61020: PPUSH
61021: PPUSH
// task := GetTaskList ( mech ) ;
61022: LD_ADDR_VAR 0 4
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL_OW 437
61036: ST_TO_ADDR
// if not task then
61037: LD_VAR 0 4
61041: NOT
61042: IFFALSE 61046
// exit ;
61044: GO 61088
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: LD_VAR 0 4
61055: PUSH
61056: LD_INT 1
61058: ARRAY
61059: PUSH
61060: LD_INT 1
61062: ARRAY
61063: PUSH
61064: LD_STRING r
61066: EQUAL
61067: PUSH
61068: LD_VAR 0 4
61072: PUSH
61073: LD_INT 1
61075: ARRAY
61076: PUSH
61077: LD_INT 4
61079: ARRAY
61080: PUSH
61081: LD_VAR 0 2
61085: EQUAL
61086: AND
61087: ST_TO_ADDR
// end ;
61088: LD_VAR 0 3
61092: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61093: LD_INT 0
61095: PPUSH
// SetDir ( unit , d ) ;
61096: LD_VAR 0 1
61100: PPUSH
61101: LD_VAR 0 4
61105: PPUSH
61106: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61110: LD_VAR 0 1
61114: PPUSH
61115: LD_VAR 0 2
61119: PPUSH
61120: LD_VAR 0 3
61124: PPUSH
61125: LD_VAR 0 5
61129: PPUSH
61130: CALL_OW 48
// end ;
61134: LD_VAR 0 6
61138: RET
// export function ToNaturalNumber ( number ) ; begin
61139: LD_INT 0
61141: PPUSH
// result := number div 1 ;
61142: LD_ADDR_VAR 0 2
61146: PUSH
61147: LD_VAR 0 1
61151: PUSH
61152: LD_INT 1
61154: DIV
61155: ST_TO_ADDR
// if number < 0 then
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 0
61163: LESS
61164: IFFALSE 61174
// result := 0 ;
61166: LD_ADDR_VAR 0 2
61170: PUSH
61171: LD_INT 0
61173: ST_TO_ADDR
// end ;
61174: LD_VAR 0 2
61178: RET
// export function SortByClass ( units , class ) ; var un ; begin
61179: LD_INT 0
61181: PPUSH
61182: PPUSH
// if not units or not class then
61183: LD_VAR 0 1
61187: NOT
61188: PUSH
61189: LD_VAR 0 2
61193: NOT
61194: OR
61195: IFFALSE 61199
// exit ;
61197: GO 61294
// result := [ ] ;
61199: LD_ADDR_VAR 0 3
61203: PUSH
61204: EMPTY
61205: ST_TO_ADDR
// for un in units do
61206: LD_ADDR_VAR 0 4
61210: PUSH
61211: LD_VAR 0 1
61215: PUSH
61216: FOR_IN
61217: IFFALSE 61292
// if GetClass ( un ) = class then
61219: LD_VAR 0 4
61223: PPUSH
61224: CALL_OW 257
61228: PUSH
61229: LD_VAR 0 2
61233: EQUAL
61234: IFFALSE 61261
// result := Insert ( result , 1 , un ) else
61236: LD_ADDR_VAR 0 3
61240: PUSH
61241: LD_VAR 0 3
61245: PPUSH
61246: LD_INT 1
61248: PPUSH
61249: LD_VAR 0 4
61253: PPUSH
61254: CALL_OW 2
61258: ST_TO_ADDR
61259: GO 61290
// result := Replace ( result , result + 1 , un ) ;
61261: LD_ADDR_VAR 0 3
61265: PUSH
61266: LD_VAR 0 3
61270: PPUSH
61271: LD_VAR 0 3
61275: PUSH
61276: LD_INT 1
61278: PLUS
61279: PPUSH
61280: LD_VAR 0 4
61284: PPUSH
61285: CALL_OW 1
61289: ST_TO_ADDR
61290: GO 61216
61292: POP
61293: POP
// end ;
61294: LD_VAR 0 3
61298: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61299: LD_INT 0
61301: PPUSH
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
61306: PPUSH
61307: PPUSH
// result := [ ] ;
61308: LD_ADDR_VAR 0 4
61312: PUSH
61313: EMPTY
61314: ST_TO_ADDR
// if x - r < 0 then
61315: LD_VAR 0 1
61319: PUSH
61320: LD_VAR 0 3
61324: MINUS
61325: PUSH
61326: LD_INT 0
61328: LESS
61329: IFFALSE 61341
// min_x := 0 else
61331: LD_ADDR_VAR 0 8
61335: PUSH
61336: LD_INT 0
61338: ST_TO_ADDR
61339: GO 61357
// min_x := x - r ;
61341: LD_ADDR_VAR 0 8
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: LD_VAR 0 3
61355: MINUS
61356: ST_TO_ADDR
// if y - r < 0 then
61357: LD_VAR 0 2
61361: PUSH
61362: LD_VAR 0 3
61366: MINUS
61367: PUSH
61368: LD_INT 0
61370: LESS
61371: IFFALSE 61383
// min_y := 0 else
61373: LD_ADDR_VAR 0 7
61377: PUSH
61378: LD_INT 0
61380: ST_TO_ADDR
61381: GO 61399
// min_y := y - r ;
61383: LD_ADDR_VAR 0 7
61387: PUSH
61388: LD_VAR 0 2
61392: PUSH
61393: LD_VAR 0 3
61397: MINUS
61398: ST_TO_ADDR
// max_x := x + r ;
61399: LD_ADDR_VAR 0 9
61403: PUSH
61404: LD_VAR 0 1
61408: PUSH
61409: LD_VAR 0 3
61413: PLUS
61414: ST_TO_ADDR
// max_y := y + r ;
61415: LD_ADDR_VAR 0 10
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_VAR 0 3
61429: PLUS
61430: ST_TO_ADDR
// for _x = min_x to max_x do
61431: LD_ADDR_VAR 0 5
61435: PUSH
61436: DOUBLE
61437: LD_VAR 0 8
61441: DEC
61442: ST_TO_ADDR
61443: LD_VAR 0 9
61447: PUSH
61448: FOR_TO
61449: IFFALSE 61550
// for _y = min_y to max_y do
61451: LD_ADDR_VAR 0 6
61455: PUSH
61456: DOUBLE
61457: LD_VAR 0 7
61461: DEC
61462: ST_TO_ADDR
61463: LD_VAR 0 10
61467: PUSH
61468: FOR_TO
61469: IFFALSE 61546
// begin if not ValidHex ( _x , _y ) then
61471: LD_VAR 0 5
61475: PPUSH
61476: LD_VAR 0 6
61480: PPUSH
61481: CALL_OW 488
61485: NOT
61486: IFFALSE 61490
// continue ;
61488: GO 61468
// if GetResourceTypeXY ( _x , _y ) then
61490: LD_VAR 0 5
61494: PPUSH
61495: LD_VAR 0 6
61499: PPUSH
61500: CALL_OW 283
61504: IFFALSE 61544
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61506: LD_ADDR_VAR 0 4
61510: PUSH
61511: LD_VAR 0 4
61515: PPUSH
61516: LD_VAR 0 4
61520: PUSH
61521: LD_INT 1
61523: PLUS
61524: PPUSH
61525: LD_VAR 0 5
61529: PUSH
61530: LD_VAR 0 6
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PPUSH
61539: CALL_OW 1
61543: ST_TO_ADDR
// end ;
61544: GO 61468
61546: POP
61547: POP
61548: GO 61448
61550: POP
61551: POP
// end ;
61552: LD_VAR 0 4
61556: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
61557: LD_INT 0
61559: PPUSH
61560: PPUSH
61561: PPUSH
61562: PPUSH
61563: PPUSH
61564: PPUSH
// if not units then
61565: LD_VAR 0 1
61569: NOT
61570: IFFALSE 61574
// exit ;
61572: GO 61975
// result := UnitFilter ( units , [ f_ok ] ) ;
61574: LD_ADDR_VAR 0 3
61578: PUSH
61579: LD_VAR 0 1
61583: PPUSH
61584: LD_INT 50
61586: PUSH
61587: EMPTY
61588: LIST
61589: PPUSH
61590: CALL_OW 72
61594: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61595: LD_ADDR_VAR 0 7
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: LD_INT 1
61607: ARRAY
61608: PPUSH
61609: CALL_OW 255
61613: ST_TO_ADDR
// if not result then
61614: LD_VAR 0 3
61618: NOT
61619: IFFALSE 61623
// exit ;
61621: GO 61975
// for i in result do
61623: LD_ADDR_VAR 0 4
61627: PUSH
61628: LD_VAR 0 3
61632: PUSH
61633: FOR_IN
61634: IFFALSE 61973
// begin tag := GetTag ( i ) + 1 ;
61636: LD_ADDR_VAR 0 8
61640: PUSH
61641: LD_VAR 0 4
61645: PPUSH
61646: CALL_OW 110
61650: PUSH
61651: LD_INT 1
61653: PLUS
61654: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61655: LD_ADDR_VAR 0 6
61659: PUSH
61660: LD_VAR 0 4
61664: PPUSH
61665: CALL_OW 250
61669: PPUSH
61670: LD_VAR 0 4
61674: PPUSH
61675: CALL_OW 251
61679: PPUSH
61680: LD_INT 6
61682: PPUSH
61683: CALL 61299 0 3
61687: ST_TO_ADDR
// if cr then
61688: LD_VAR 0 6
61692: IFFALSE 61731
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61694: LD_VAR 0 4
61698: PPUSH
61699: LD_VAR 0 6
61703: PUSH
61704: LD_INT 1
61706: ARRAY
61707: PUSH
61708: LD_INT 1
61710: ARRAY
61711: PPUSH
61712: LD_VAR 0 6
61716: PUSH
61717: LD_INT 1
61719: ARRAY
61720: PUSH
61721: LD_INT 2
61723: ARRAY
61724: PPUSH
61725: CALL_OW 116
61729: GO 61971
// if path > tag then
61731: LD_VAR 0 2
61735: PUSH
61736: LD_VAR 0 8
61740: GREATER
61741: IFFALSE 61919
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
61743: LD_ADDR_VAR 0 5
61747: PUSH
61748: LD_INT 81
61750: PUSH
61751: LD_VAR 0 7
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 91
61762: PUSH
61763: LD_VAR 0 4
61767: PUSH
61768: LD_INT 12
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PPUSH
61780: CALL_OW 69
61784: ST_TO_ADDR
// if enemy then
61785: LD_VAR 0 5
61789: IFFALSE 61817
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61791: LD_VAR 0 4
61795: PPUSH
61796: LD_VAR 0 5
61800: PPUSH
61801: LD_VAR 0 4
61805: PPUSH
61806: CALL_OW 74
61810: PPUSH
61811: CALL_OW 115
61815: GO 61917
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61817: LD_VAR 0 4
61821: PPUSH
61822: LD_VAR 0 2
61826: PUSH
61827: LD_VAR 0 8
61831: ARRAY
61832: PUSH
61833: LD_INT 1
61835: ARRAY
61836: PPUSH
61837: LD_VAR 0 2
61841: PUSH
61842: LD_VAR 0 8
61846: ARRAY
61847: PUSH
61848: LD_INT 2
61850: ARRAY
61851: PPUSH
61852: CALL_OW 297
61856: PUSH
61857: LD_INT 6
61859: GREATER
61860: IFFALSE 61903
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61862: LD_VAR 0 4
61866: PPUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 8
61876: ARRAY
61877: PUSH
61878: LD_INT 1
61880: ARRAY
61881: PPUSH
61882: LD_VAR 0 2
61886: PUSH
61887: LD_VAR 0 8
61891: ARRAY
61892: PUSH
61893: LD_INT 2
61895: ARRAY
61896: PPUSH
61897: CALL_OW 114
61901: GO 61917
// SetTag ( i , tag ) ;
61903: LD_VAR 0 4
61907: PPUSH
61908: LD_VAR 0 8
61912: PPUSH
61913: CALL_OW 109
// end else
61917: GO 61971
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61919: LD_ADDR_VAR 0 5
61923: PUSH
61924: LD_INT 81
61926: PUSH
61927: LD_VAR 0 7
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PPUSH
61936: CALL_OW 69
61940: ST_TO_ADDR
// if enemy then
61941: LD_VAR 0 5
61945: IFFALSE 61971
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61947: LD_VAR 0 4
61951: PPUSH
61952: LD_VAR 0 5
61956: PPUSH
61957: LD_VAR 0 4
61961: PPUSH
61962: CALL_OW 74
61966: PPUSH
61967: CALL_OW 115
// end ; end ;
61971: GO 61633
61973: POP
61974: POP
// end ; end_of_file
61975: LD_VAR 0 3
61979: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61980: LD_VAR 0 1
61984: PPUSH
61985: LD_VAR 0 2
61989: PPUSH
61990: LD_VAR 0 3
61994: PPUSH
61995: LD_VAR 0 4
61999: PPUSH
62000: LD_VAR 0 5
62004: PPUSH
62005: LD_VAR 0 6
62009: PPUSH
62010: CALL 4304 0 6
// end ;
62014: PPOPN 6
62016: END
