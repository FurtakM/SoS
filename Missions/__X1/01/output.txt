// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// every 0 0$1 do
4304: GO 4306
4306: DISABLE
// begin enable ;
4307: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4308: LD_STRING updateTimer(
4310: PUSH
4311: LD_OWVAR 1
4315: STR
4316: PUSH
4317: LD_STRING );
4319: STR
4320: PPUSH
4321: CALL_OW 559
// end ;
4325: END
// export function SOS_MapStart ( ) ; begin
4326: LD_INT 0
4328: PPUSH
// if streamModeActive then
4329: LD_EXP 23
4333: IFFALSE 4342
// DefineStreamItems ( true ) ;
4335: LD_INT 1
4337: PPUSH
4338: CALL 5996 0 1
// UpdateFactoryWaypoints ( ) ;
4342: CALL 18857 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4346: CALL 19114 0 0
// end ;
4350: LD_VAR 0 1
4354: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4355: LD_INT 0
4357: PPUSH
// if p2 = 100 then
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 100
4365: EQUAL
4366: IFFALSE 5369
// begin if not StreamModeActive then
4368: LD_EXP 23
4372: NOT
4373: IFFALSE 4383
// StreamModeActive := true ;
4375: LD_ADDR_EXP 23
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// if p3 = 0 then
4383: LD_VAR 0 3
4387: PUSH
4388: LD_INT 0
4390: EQUAL
4391: IFFALSE 4397
// InitStreamMode ;
4393: CALL 5532 0 0
// if p3 = 1 then
4397: LD_VAR 0 3
4401: PUSH
4402: LD_INT 1
4404: EQUAL
4405: IFFALSE 4415
// sRocket := true ;
4407: LD_ADDR_EXP 28
4411: PUSH
4412: LD_INT 1
4414: ST_TO_ADDR
// if p3 = 2 then
4415: LD_VAR 0 3
4419: PUSH
4420: LD_INT 2
4422: EQUAL
4423: IFFALSE 4433
// sSpeed := true ;
4425: LD_ADDR_EXP 27
4429: PUSH
4430: LD_INT 1
4432: ST_TO_ADDR
// if p3 = 3 then
4433: LD_VAR 0 3
4437: PUSH
4438: LD_INT 3
4440: EQUAL
4441: IFFALSE 4451
// sEngine := true ;
4443: LD_ADDR_EXP 29
4447: PUSH
4448: LD_INT 1
4450: ST_TO_ADDR
// if p3 = 4 then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 4
4458: EQUAL
4459: IFFALSE 4469
// sSpec := true ;
4461: LD_ADDR_EXP 26
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// if p3 = 5 then
4469: LD_VAR 0 3
4473: PUSH
4474: LD_INT 5
4476: EQUAL
4477: IFFALSE 4487
// sLevel := true ;
4479: LD_ADDR_EXP 30
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// if p3 = 6 then
4487: LD_VAR 0 3
4491: PUSH
4492: LD_INT 6
4494: EQUAL
4495: IFFALSE 4505
// sArmoury := true ;
4497: LD_ADDR_EXP 31
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// if p3 = 7 then
4505: LD_VAR 0 3
4509: PUSH
4510: LD_INT 7
4512: EQUAL
4513: IFFALSE 4523
// sRadar := true ;
4515: LD_ADDR_EXP 32
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// if p3 = 8 then
4523: LD_VAR 0 3
4527: PUSH
4528: LD_INT 8
4530: EQUAL
4531: IFFALSE 4541
// sBunker := true ;
4533: LD_ADDR_EXP 33
4537: PUSH
4538: LD_INT 1
4540: ST_TO_ADDR
// if p3 = 9 then
4541: LD_VAR 0 3
4545: PUSH
4546: LD_INT 9
4548: EQUAL
4549: IFFALSE 4559
// sHack := true ;
4551: LD_ADDR_EXP 34
4555: PUSH
4556: LD_INT 1
4558: ST_TO_ADDR
// if p3 = 10 then
4559: LD_VAR 0 3
4563: PUSH
4564: LD_INT 10
4566: EQUAL
4567: IFFALSE 4577
// sFire := true ;
4569: LD_ADDR_EXP 35
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// if p3 = 11 then
4577: LD_VAR 0 3
4581: PUSH
4582: LD_INT 11
4584: EQUAL
4585: IFFALSE 4595
// sRefresh := true ;
4587: LD_ADDR_EXP 36
4591: PUSH
4592: LD_INT 1
4594: ST_TO_ADDR
// if p3 = 12 then
4595: LD_VAR 0 3
4599: PUSH
4600: LD_INT 12
4602: EQUAL
4603: IFFALSE 4613
// sExp := true ;
4605: LD_ADDR_EXP 37
4609: PUSH
4610: LD_INT 1
4612: ST_TO_ADDR
// if p3 = 13 then
4613: LD_VAR 0 3
4617: PUSH
4618: LD_INT 13
4620: EQUAL
4621: IFFALSE 4631
// sDepot := true ;
4623: LD_ADDR_EXP 38
4627: PUSH
4628: LD_INT 1
4630: ST_TO_ADDR
// if p3 = 14 then
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 14
4638: EQUAL
4639: IFFALSE 4649
// sFlag := true ;
4641: LD_ADDR_EXP 39
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// if p3 = 15 then
4649: LD_VAR 0 3
4653: PUSH
4654: LD_INT 15
4656: EQUAL
4657: IFFALSE 4667
// sKamikadze := true ;
4659: LD_ADDR_EXP 47
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// if p3 = 16 then
4667: LD_VAR 0 3
4671: PUSH
4672: LD_INT 16
4674: EQUAL
4675: IFFALSE 4685
// sTroll := true ;
4677: LD_ADDR_EXP 48
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// if p3 = 17 then
4685: LD_VAR 0 3
4689: PUSH
4690: LD_INT 17
4692: EQUAL
4693: IFFALSE 4703
// sSlow := true ;
4695: LD_ADDR_EXP 49
4699: PUSH
4700: LD_INT 1
4702: ST_TO_ADDR
// if p3 = 18 then
4703: LD_VAR 0 3
4707: PUSH
4708: LD_INT 18
4710: EQUAL
4711: IFFALSE 4721
// sLack := true ;
4713: LD_ADDR_EXP 50
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// if p3 = 19 then
4721: LD_VAR 0 3
4725: PUSH
4726: LD_INT 19
4728: EQUAL
4729: IFFALSE 4739
// sTank := true ;
4731: LD_ADDR_EXP 52
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// if p3 = 20 then
4739: LD_VAR 0 3
4743: PUSH
4744: LD_INT 20
4746: EQUAL
4747: IFFALSE 4757
// sRemote := true ;
4749: LD_ADDR_EXP 53
4753: PUSH
4754: LD_INT 1
4756: ST_TO_ADDR
// if p3 = 21 then
4757: LD_VAR 0 3
4761: PUSH
4762: LD_INT 21
4764: EQUAL
4765: IFFALSE 4775
// sPowell := true ;
4767: LD_ADDR_EXP 54
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// if p3 = 22 then
4775: LD_VAR 0 3
4779: PUSH
4780: LD_INT 22
4782: EQUAL
4783: IFFALSE 4793
// sTeleport := true ;
4785: LD_ADDR_EXP 57
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// if p3 = 23 then
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 23
4800: EQUAL
4801: IFFALSE 4811
// sOilTower := true ;
4803: LD_ADDR_EXP 59
4807: PUSH
4808: LD_INT 1
4810: ST_TO_ADDR
// if p3 = 24 then
4811: LD_VAR 0 3
4815: PUSH
4816: LD_INT 24
4818: EQUAL
4819: IFFALSE 4829
// sShovel := true ;
4821: LD_ADDR_EXP 60
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// if p3 = 25 then
4829: LD_VAR 0 3
4833: PUSH
4834: LD_INT 25
4836: EQUAL
4837: IFFALSE 4847
// sSheik := true ;
4839: LD_ADDR_EXP 61
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// if p3 = 26 then
4847: LD_VAR 0 3
4851: PUSH
4852: LD_INT 26
4854: EQUAL
4855: IFFALSE 4865
// sEarthquake := true ;
4857: LD_ADDR_EXP 63
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// if p3 = 27 then
4865: LD_VAR 0 3
4869: PUSH
4870: LD_INT 27
4872: EQUAL
4873: IFFALSE 4883
// sAI := true ;
4875: LD_ADDR_EXP 64
4879: PUSH
4880: LD_INT 1
4882: ST_TO_ADDR
// if p3 = 28 then
4883: LD_VAR 0 3
4887: PUSH
4888: LD_INT 28
4890: EQUAL
4891: IFFALSE 4901
// sCargo := true ;
4893: LD_ADDR_EXP 67
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// if p3 = 29 then
4901: LD_VAR 0 3
4905: PUSH
4906: LD_INT 29
4908: EQUAL
4909: IFFALSE 4919
// sDLaser := true ;
4911: LD_ADDR_EXP 68
4915: PUSH
4916: LD_INT 1
4918: ST_TO_ADDR
// if p3 = 30 then
4919: LD_VAR 0 3
4923: PUSH
4924: LD_INT 30
4926: EQUAL
4927: IFFALSE 4937
// sExchange := true ;
4929: LD_ADDR_EXP 69
4933: PUSH
4934: LD_INT 1
4936: ST_TO_ADDR
// if p3 = 31 then
4937: LD_VAR 0 3
4941: PUSH
4942: LD_INT 31
4944: EQUAL
4945: IFFALSE 4955
// sFac := true ;
4947: LD_ADDR_EXP 70
4951: PUSH
4952: LD_INT 1
4954: ST_TO_ADDR
// if p3 = 32 then
4955: LD_VAR 0 3
4959: PUSH
4960: LD_INT 32
4962: EQUAL
4963: IFFALSE 4973
// sPower := true ;
4965: LD_ADDR_EXP 71
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// if p3 = 33 then
4973: LD_VAR 0 3
4977: PUSH
4978: LD_INT 33
4980: EQUAL
4981: IFFALSE 4991
// sRandom := true ;
4983: LD_ADDR_EXP 72
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 34 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 34
4998: EQUAL
4999: IFFALSE 5009
// sShield := true ;
5001: LD_ADDR_EXP 73
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if p3 = 35 then
5009: LD_VAR 0 3
5013: PUSH
5014: LD_INT 35
5016: EQUAL
5017: IFFALSE 5027
// sTime := true ;
5019: LD_ADDR_EXP 74
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// if p3 = 36 then
5027: LD_VAR 0 3
5031: PUSH
5032: LD_INT 36
5034: EQUAL
5035: IFFALSE 5045
// sTools := true ;
5037: LD_ADDR_EXP 75
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// if p3 = 101 then
5045: LD_VAR 0 3
5049: PUSH
5050: LD_INT 101
5052: EQUAL
5053: IFFALSE 5063
// sSold := true ;
5055: LD_ADDR_EXP 40
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// if p3 = 102 then
5063: LD_VAR 0 3
5067: PUSH
5068: LD_INT 102
5070: EQUAL
5071: IFFALSE 5081
// sDiff := true ;
5073: LD_ADDR_EXP 41
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// if p3 = 103 then
5081: LD_VAR 0 3
5085: PUSH
5086: LD_INT 103
5088: EQUAL
5089: IFFALSE 5099
// sFog := true ;
5091: LD_ADDR_EXP 44
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// if p3 = 104 then
5099: LD_VAR 0 3
5103: PUSH
5104: LD_INT 104
5106: EQUAL
5107: IFFALSE 5117
// sReset := true ;
5109: LD_ADDR_EXP 45
5113: PUSH
5114: LD_INT 1
5116: ST_TO_ADDR
// if p3 = 105 then
5117: LD_VAR 0 3
5121: PUSH
5122: LD_INT 105
5124: EQUAL
5125: IFFALSE 5135
// sSun := true ;
5127: LD_ADDR_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// if p3 = 106 then
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 106
5142: EQUAL
5143: IFFALSE 5153
// sTiger := true ;
5145: LD_ADDR_EXP 42
5149: PUSH
5150: LD_INT 1
5152: ST_TO_ADDR
// if p3 = 107 then
5153: LD_VAR 0 3
5157: PUSH
5158: LD_INT 107
5160: EQUAL
5161: IFFALSE 5171
// sBomb := true ;
5163: LD_ADDR_EXP 43
5167: PUSH
5168: LD_INT 1
5170: ST_TO_ADDR
// if p3 = 108 then
5171: LD_VAR 0 3
5175: PUSH
5176: LD_INT 108
5178: EQUAL
5179: IFFALSE 5189
// sWound := true ;
5181: LD_ADDR_EXP 51
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// if p3 = 109 then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 109
5196: EQUAL
5197: IFFALSE 5207
// sBetray := true ;
5199: LD_ADDR_EXP 55
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// if p3 = 110 then
5207: LD_VAR 0 3
5211: PUSH
5212: LD_INT 110
5214: EQUAL
5215: IFFALSE 5225
// sContamin := true ;
5217: LD_ADDR_EXP 56
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if p3 = 111 then
5225: LD_VAR 0 3
5229: PUSH
5230: LD_INT 111
5232: EQUAL
5233: IFFALSE 5243
// sOil := true ;
5235: LD_ADDR_EXP 58
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// if p3 = 112 then
5243: LD_VAR 0 3
5247: PUSH
5248: LD_INT 112
5250: EQUAL
5251: IFFALSE 5261
// sStu := true ;
5253: LD_ADDR_EXP 62
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// if p3 = 113 then
5261: LD_VAR 0 3
5265: PUSH
5266: LD_INT 113
5268: EQUAL
5269: IFFALSE 5279
// sBazooka := true ;
5271: LD_ADDR_EXP 65
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// if p3 = 114 then
5279: LD_VAR 0 3
5283: PUSH
5284: LD_INT 114
5286: EQUAL
5287: IFFALSE 5297
// sMortar := true ;
5289: LD_ADDR_EXP 66
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// if p3 = 115 then
5297: LD_VAR 0 3
5301: PUSH
5302: LD_INT 115
5304: EQUAL
5305: IFFALSE 5315
// sRanger := true ;
5307: LD_ADDR_EXP 76
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// if p3 = 116 then
5315: LD_VAR 0 3
5319: PUSH
5320: LD_INT 116
5322: EQUAL
5323: IFFALSE 5333
// sComputer := true ;
5325: LD_ADDR_EXP 77
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if p3 = 117 then
5333: LD_VAR 0 3
5337: PUSH
5338: LD_INT 117
5340: EQUAL
5341: IFFALSE 5351
// s30 := true ;
5343: LD_ADDR_EXP 78
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// if p3 = 118 then
5351: LD_VAR 0 3
5355: PUSH
5356: LD_INT 118
5358: EQUAL
5359: IFFALSE 5369
// s60 := true ;
5361: LD_ADDR_EXP 79
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// end ; if p2 = 101 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_INT 101
5376: EQUAL
5377: IFFALSE 5505
// begin case p3 of 1 :
5379: LD_VAR 0 3
5383: PUSH
5384: LD_INT 1
5386: DOUBLE
5387: EQUAL
5388: IFTRUE 5392
5390: GO 5399
5392: POP
// hHackUnlimitedResources ; 2 :
5393: CALL 17603 0 0
5397: GO 5505
5399: LD_INT 2
5401: DOUBLE
5402: EQUAL
5403: IFTRUE 5407
5405: GO 5414
5407: POP
// hHackSetLevel10 ; 3 :
5408: CALL 17736 0 0
5412: GO 5505
5414: LD_INT 3
5416: DOUBLE
5417: EQUAL
5418: IFTRUE 5422
5420: GO 5429
5422: POP
// hHackSetLevel10YourUnits ; 4 :
5423: CALL 17821 0 0
5427: GO 5505
5429: LD_INT 4
5431: DOUBLE
5432: EQUAL
5433: IFTRUE 5437
5435: GO 5444
5437: POP
// hHackInvincible ; 5 :
5438: CALL 18269 0 0
5442: GO 5505
5444: LD_INT 5
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5459
5452: POP
// hHackInvisible ; 6 :
5453: CALL 18380 0 0
5457: GO 5505
5459: LD_INT 6
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5474
5467: POP
// hHackChangeYourSide ; 7 :
5468: CALL 18437 0 0
5472: GO 5505
5474: LD_INT 7
5476: DOUBLE
5477: EQUAL
5478: IFTRUE 5482
5480: GO 5489
5482: POP
// hHackChangeUnitSide ; 8 :
5483: CALL 18479 0 0
5487: GO 5505
5489: LD_INT 8
5491: DOUBLE
5492: EQUAL
5493: IFTRUE 5497
5495: GO 5504
5497: POP
// hHackFog ; end ;
5498: CALL 18580 0 0
5502: GO 5505
5504: POP
// end ; end ;
5505: LD_VAR 0 7
5509: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5510: GO 5512
5512: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5513: LD_STRING initStreamRollete();
5515: PPUSH
5516: CALL_OW 559
// InitStreamMode ;
5520: CALL 5532 0 0
// DefineStreamItems ( false ) ;
5524: LD_INT 0
5526: PPUSH
5527: CALL 5996 0 1
// end ;
5531: END
// function InitStreamMode ; begin
5532: LD_INT 0
5534: PPUSH
// streamModeActive := false ;
5535: LD_ADDR_EXP 23
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// normalCounter := 36 ;
5543: LD_ADDR_EXP 24
5547: PUSH
5548: LD_INT 36
5550: ST_TO_ADDR
// hardcoreCounter := 18 ;
5551: LD_ADDR_EXP 25
5555: PUSH
5556: LD_INT 18
5558: ST_TO_ADDR
// sRocket := false ;
5559: LD_ADDR_EXP 28
5563: PUSH
5564: LD_INT 0
5566: ST_TO_ADDR
// sSpeed := false ;
5567: LD_ADDR_EXP 27
5571: PUSH
5572: LD_INT 0
5574: ST_TO_ADDR
// sEngine := false ;
5575: LD_ADDR_EXP 29
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// sSpec := false ;
5583: LD_ADDR_EXP 26
5587: PUSH
5588: LD_INT 0
5590: ST_TO_ADDR
// sLevel := false ;
5591: LD_ADDR_EXP 30
5595: PUSH
5596: LD_INT 0
5598: ST_TO_ADDR
// sArmoury := false ;
5599: LD_ADDR_EXP 31
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// sRadar := false ;
5607: LD_ADDR_EXP 32
5611: PUSH
5612: LD_INT 0
5614: ST_TO_ADDR
// sBunker := false ;
5615: LD_ADDR_EXP 33
5619: PUSH
5620: LD_INT 0
5622: ST_TO_ADDR
// sHack := false ;
5623: LD_ADDR_EXP 34
5627: PUSH
5628: LD_INT 0
5630: ST_TO_ADDR
// sFire := false ;
5631: LD_ADDR_EXP 35
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// sRefresh := false ;
5639: LD_ADDR_EXP 36
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// sExp := false ;
5647: LD_ADDR_EXP 37
5651: PUSH
5652: LD_INT 0
5654: ST_TO_ADDR
// sDepot := false ;
5655: LD_ADDR_EXP 38
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// sFlag := false ;
5663: LD_ADDR_EXP 39
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// sKamikadze := false ;
5671: LD_ADDR_EXP 47
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// sTroll := false ;
5679: LD_ADDR_EXP 48
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// sSlow := false ;
5687: LD_ADDR_EXP 49
5691: PUSH
5692: LD_INT 0
5694: ST_TO_ADDR
// sLack := false ;
5695: LD_ADDR_EXP 50
5699: PUSH
5700: LD_INT 0
5702: ST_TO_ADDR
// sTank := false ;
5703: LD_ADDR_EXP 52
5707: PUSH
5708: LD_INT 0
5710: ST_TO_ADDR
// sRemote := false ;
5711: LD_ADDR_EXP 53
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// sPowell := false ;
5719: LD_ADDR_EXP 54
5723: PUSH
5724: LD_INT 0
5726: ST_TO_ADDR
// sTeleport := false ;
5727: LD_ADDR_EXP 57
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// sOilTower := false ;
5735: LD_ADDR_EXP 59
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// sShovel := false ;
5743: LD_ADDR_EXP 60
5747: PUSH
5748: LD_INT 0
5750: ST_TO_ADDR
// sSheik := false ;
5751: LD_ADDR_EXP 61
5755: PUSH
5756: LD_INT 0
5758: ST_TO_ADDR
// sEarthquake := false ;
5759: LD_ADDR_EXP 63
5763: PUSH
5764: LD_INT 0
5766: ST_TO_ADDR
// sAI := false ;
5767: LD_ADDR_EXP 64
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// sCargo := false ;
5775: LD_ADDR_EXP 67
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// sDLaser := false ;
5783: LD_ADDR_EXP 68
5787: PUSH
5788: LD_INT 0
5790: ST_TO_ADDR
// sExchange := false ;
5791: LD_ADDR_EXP 69
5795: PUSH
5796: LD_INT 0
5798: ST_TO_ADDR
// sFac := false ;
5799: LD_ADDR_EXP 70
5803: PUSH
5804: LD_INT 0
5806: ST_TO_ADDR
// sPower := false ;
5807: LD_ADDR_EXP 71
5811: PUSH
5812: LD_INT 0
5814: ST_TO_ADDR
// sRandom := false ;
5815: LD_ADDR_EXP 72
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// sShield := false ;
5823: LD_ADDR_EXP 73
5827: PUSH
5828: LD_INT 0
5830: ST_TO_ADDR
// sTime := false ;
5831: LD_ADDR_EXP 74
5835: PUSH
5836: LD_INT 0
5838: ST_TO_ADDR
// sTools := false ;
5839: LD_ADDR_EXP 75
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// sSold := false ;
5847: LD_ADDR_EXP 40
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// sDiff := false ;
5855: LD_ADDR_EXP 41
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// sFog := false ;
5863: LD_ADDR_EXP 44
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// sReset := false ;
5871: LD_ADDR_EXP 45
5875: PUSH
5876: LD_INT 0
5878: ST_TO_ADDR
// sSun := false ;
5879: LD_ADDR_EXP 46
5883: PUSH
5884: LD_INT 0
5886: ST_TO_ADDR
// sTiger := false ;
5887: LD_ADDR_EXP 42
5891: PUSH
5892: LD_INT 0
5894: ST_TO_ADDR
// sBomb := false ;
5895: LD_ADDR_EXP 43
5899: PUSH
5900: LD_INT 0
5902: ST_TO_ADDR
// sWound := false ;
5903: LD_ADDR_EXP 51
5907: PUSH
5908: LD_INT 0
5910: ST_TO_ADDR
// sBetray := false ;
5911: LD_ADDR_EXP 55
5915: PUSH
5916: LD_INT 0
5918: ST_TO_ADDR
// sContamin := false ;
5919: LD_ADDR_EXP 56
5923: PUSH
5924: LD_INT 0
5926: ST_TO_ADDR
// sOil := false ;
5927: LD_ADDR_EXP 58
5931: PUSH
5932: LD_INT 0
5934: ST_TO_ADDR
// sStu := false ;
5935: LD_ADDR_EXP 62
5939: PUSH
5940: LD_INT 0
5942: ST_TO_ADDR
// sBazooka := false ;
5943: LD_ADDR_EXP 65
5947: PUSH
5948: LD_INT 0
5950: ST_TO_ADDR
// sMortar := false ;
5951: LD_ADDR_EXP 66
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
// sRanger := false ;
5959: LD_ADDR_EXP 76
5963: PUSH
5964: LD_INT 0
5966: ST_TO_ADDR
// sComputer := false ;
5967: LD_ADDR_EXP 77
5971: PUSH
5972: LD_INT 0
5974: ST_TO_ADDR
// s30 := false ;
5975: LD_ADDR_EXP 78
5979: PUSH
5980: LD_INT 0
5982: ST_TO_ADDR
// s60 := false ;
5983: LD_ADDR_EXP 79
5987: PUSH
5988: LD_INT 0
5990: ST_TO_ADDR
// end ;
5991: LD_VAR 0 1
5995: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5996: LD_INT 0
5998: PPUSH
5999: PPUSH
6000: PPUSH
6001: PPUSH
6002: PPUSH
6003: PPUSH
6004: PPUSH
// result := [ ] ;
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// if campaign_id = 1 then
6012: LD_OWVAR 69
6016: PUSH
6017: LD_INT 1
6019: EQUAL
6020: IFFALSE 9186
// begin case mission_number of 1 :
6022: LD_OWVAR 70
6026: PUSH
6027: LD_INT 1
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6111
6035: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_INT 2
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 101
6081: PUSH
6082: LD_INT 102
6084: PUSH
6085: LD_INT 106
6087: PUSH
6088: LD_INT 116
6090: PUSH
6091: LD_INT 117
6093: PUSH
6094: LD_INT 118
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: ST_TO_ADDR
6109: GO 9184
6111: LD_INT 2
6113: DOUBLE
6114: EQUAL
6115: IFTRUE 6119
6117: GO 6203
6119: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6120: LD_ADDR_VAR 0 2
6124: PUSH
6125: LD_INT 2
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: LD_INT 11
6133: PUSH
6134: LD_INT 12
6136: PUSH
6137: LD_INT 15
6139: PUSH
6140: LD_INT 16
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_INT 23
6148: PUSH
6149: LD_INT 26
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 101
6165: PUSH
6166: LD_INT 102
6168: PUSH
6169: LD_INT 105
6171: PUSH
6172: LD_INT 106
6174: PUSH
6175: LD_INT 108
6177: PUSH
6178: LD_INT 116
6180: PUSH
6181: LD_INT 117
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: ST_TO_ADDR
6201: GO 9184
6203: LD_INT 3
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6299
6211: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: LD_INT 11
6228: PUSH
6229: LD_INT 12
6231: PUSH
6232: LD_INT 15
6234: PUSH
6235: LD_INT 16
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_INT 26
6243: PUSH
6244: LD_INT 36
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 101
6261: PUSH
6262: LD_INT 102
6264: PUSH
6265: LD_INT 105
6267: PUSH
6268: LD_INT 106
6270: PUSH
6271: LD_INT 108
6273: PUSH
6274: LD_INT 116
6276: PUSH
6277: LD_INT 117
6279: PUSH
6280: LD_INT 118
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: ST_TO_ADDR
6297: GO 9184
6299: LD_INT 4
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6403
6307: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6308: LD_ADDR_VAR 0 2
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: LD_INT 4
6318: PUSH
6319: LD_INT 5
6321: PUSH
6322: LD_INT 8
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: LD_INT 15
6333: PUSH
6334: LD_INT 16
6336: PUSH
6337: LD_INT 22
6339: PUSH
6340: LD_INT 23
6342: PUSH
6343: LD_INT 26
6345: PUSH
6346: LD_INT 36
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 101
6365: PUSH
6366: LD_INT 102
6368: PUSH
6369: LD_INT 105
6371: PUSH
6372: LD_INT 106
6374: PUSH
6375: LD_INT 108
6377: PUSH
6378: LD_INT 116
6380: PUSH
6381: LD_INT 117
6383: PUSH
6384: LD_INT 118
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: ST_TO_ADDR
6401: GO 9184
6403: LD_INT 5
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6523
6411: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6412: LD_ADDR_VAR 0 2
6416: PUSH
6417: LD_INT 2
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 6
6428: PUSH
6429: LD_INT 8
6431: PUSH
6432: LD_INT 11
6434: PUSH
6435: LD_INT 12
6437: PUSH
6438: LD_INT 15
6440: PUSH
6441: LD_INT 16
6443: PUSH
6444: LD_INT 22
6446: PUSH
6447: LD_INT 23
6449: PUSH
6450: LD_INT 25
6452: PUSH
6453: LD_INT 26
6455: PUSH
6456: LD_INT 36
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 101
6477: PUSH
6478: LD_INT 102
6480: PUSH
6481: LD_INT 105
6483: PUSH
6484: LD_INT 106
6486: PUSH
6487: LD_INT 108
6489: PUSH
6490: LD_INT 109
6492: PUSH
6493: LD_INT 112
6495: PUSH
6496: LD_INT 116
6498: PUSH
6499: LD_INT 117
6501: PUSH
6502: LD_INT 118
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: ST_TO_ADDR
6521: GO 9184
6523: LD_INT 6
6525: DOUBLE
6526: EQUAL
6527: IFTRUE 6531
6529: GO 6663
6531: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6532: LD_ADDR_VAR 0 2
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 5
6545: PUSH
6546: LD_INT 6
6548: PUSH
6549: LD_INT 8
6551: PUSH
6552: LD_INT 11
6554: PUSH
6555: LD_INT 12
6557: PUSH
6558: LD_INT 15
6560: PUSH
6561: LD_INT 16
6563: PUSH
6564: LD_INT 20
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_INT 23
6575: PUSH
6576: LD_INT 25
6578: PUSH
6579: LD_INT 26
6581: PUSH
6582: LD_INT 30
6584: PUSH
6585: LD_INT 31
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 101
6617: PUSH
6618: LD_INT 102
6620: PUSH
6621: LD_INT 105
6623: PUSH
6624: LD_INT 106
6626: PUSH
6627: LD_INT 108
6629: PUSH
6630: LD_INT 109
6632: PUSH
6633: LD_INT 112
6635: PUSH
6636: LD_INT 116
6638: PUSH
6639: LD_INT 117
6641: PUSH
6642: LD_INT 118
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: ST_TO_ADDR
6661: GO 9184
6663: LD_INT 7
6665: DOUBLE
6666: EQUAL
6667: IFTRUE 6671
6669: GO 6783
6671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 11
6691: PUSH
6692: LD_INT 12
6694: PUSH
6695: LD_INT 15
6697: PUSH
6698: LD_INT 16
6700: PUSH
6701: LD_INT 20
6703: PUSH
6704: LD_INT 21
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 23
6712: PUSH
6713: LD_INT 25
6715: PUSH
6716: LD_INT 26
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 101
6737: PUSH
6738: LD_INT 102
6740: PUSH
6741: LD_INT 103
6743: PUSH
6744: LD_INT 105
6746: PUSH
6747: LD_INT 106
6749: PUSH
6750: LD_INT 108
6752: PUSH
6753: LD_INT 112
6755: PUSH
6756: LD_INT 116
6758: PUSH
6759: LD_INT 117
6761: PUSH
6762: LD_INT 118
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9184
6783: LD_INT 8
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6931
6791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6792: LD_ADDR_VAR 0 2
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 6
6808: PUSH
6809: LD_INT 7
6811: PUSH
6812: LD_INT 8
6814: PUSH
6815: LD_INT 11
6817: PUSH
6818: LD_INT 12
6820: PUSH
6821: LD_INT 15
6823: PUSH
6824: LD_INT 16
6826: PUSH
6827: LD_INT 20
6829: PUSH
6830: LD_INT 21
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 23
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 26
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 31
6850: PUSH
6851: LD_INT 32
6853: PUSH
6854: LD_INT 36
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 101
6881: PUSH
6882: LD_INT 102
6884: PUSH
6885: LD_INT 103
6887: PUSH
6888: LD_INT 105
6890: PUSH
6891: LD_INT 106
6893: PUSH
6894: LD_INT 108
6896: PUSH
6897: LD_INT 109
6899: PUSH
6900: LD_INT 112
6902: PUSH
6903: LD_INT 116
6905: PUSH
6906: LD_INT 117
6908: PUSH
6909: LD_INT 118
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
6929: GO 9184
6931: LD_INT 9
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 7087
6939: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: LD_INT 2
6947: PUSH
6948: LD_INT 4
6950: PUSH
6951: LD_INT 5
6953: PUSH
6954: LD_INT 6
6956: PUSH
6957: LD_INT 7
6959: PUSH
6960: LD_INT 8
6962: PUSH
6963: LD_INT 11
6965: PUSH
6966: LD_INT 12
6968: PUSH
6969: LD_INT 15
6971: PUSH
6972: LD_INT 16
6974: PUSH
6975: LD_INT 20
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_INT 23
6986: PUSH
6987: LD_INT 25
6989: PUSH
6990: LD_INT 26
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 31
7001: PUSH
7002: LD_INT 32
7004: PUSH
7005: LD_INT 36
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 101
7033: PUSH
7034: LD_INT 102
7036: PUSH
7037: LD_INT 103
7039: PUSH
7040: LD_INT 105
7042: PUSH
7043: LD_INT 106
7045: PUSH
7046: LD_INT 108
7048: PUSH
7049: LD_INT 109
7051: PUSH
7052: LD_INT 112
7054: PUSH
7055: LD_INT 114
7057: PUSH
7058: LD_INT 116
7060: PUSH
7061: LD_INT 117
7063: PUSH
7064: LD_INT 118
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 9184
7087: LD_INT 10
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7291
7095: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: LD_INT 6
7112: PUSH
7113: LD_INT 7
7115: PUSH
7116: LD_INT 8
7118: PUSH
7119: LD_INT 9
7121: PUSH
7122: LD_INT 10
7124: PUSH
7125: LD_INT 11
7127: PUSH
7128: LD_INT 12
7130: PUSH
7131: LD_INT 13
7133: PUSH
7134: LD_INT 14
7136: PUSH
7137: LD_INT 15
7139: PUSH
7140: LD_INT 16
7142: PUSH
7143: LD_INT 17
7145: PUSH
7146: LD_INT 18
7148: PUSH
7149: LD_INT 19
7151: PUSH
7152: LD_INT 20
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_INT 23
7163: PUSH
7164: LD_INT 24
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 26
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 31
7181: PUSH
7182: LD_INT 32
7184: PUSH
7185: LD_INT 36
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 101
7221: PUSH
7222: LD_INT 102
7224: PUSH
7225: LD_INT 103
7227: PUSH
7228: LD_INT 104
7230: PUSH
7231: LD_INT 105
7233: PUSH
7234: LD_INT 106
7236: PUSH
7237: LD_INT 107
7239: PUSH
7240: LD_INT 108
7242: PUSH
7243: LD_INT 109
7245: PUSH
7246: LD_INT 110
7248: PUSH
7249: LD_INT 111
7251: PUSH
7252: LD_INT 112
7254: PUSH
7255: LD_INT 114
7257: PUSH
7258: LD_INT 116
7260: PUSH
7261: LD_INT 117
7263: PUSH
7264: LD_INT 118
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: ST_TO_ADDR
7289: GO 9184
7291: LD_INT 11
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7503
7299: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7300: LD_ADDR_VAR 0 2
7304: PUSH
7305: LD_INT 2
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: LD_INT 9
7328: PUSH
7329: LD_INT 10
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 13
7340: PUSH
7341: LD_INT 14
7343: PUSH
7344: LD_INT 15
7346: PUSH
7347: LD_INT 16
7349: PUSH
7350: LD_INT 17
7352: PUSH
7353: LD_INT 18
7355: PUSH
7356: LD_INT 19
7358: PUSH
7359: LD_INT 20
7361: PUSH
7362: LD_INT 21
7364: PUSH
7365: LD_INT 22
7367: PUSH
7368: LD_INT 23
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 26
7379: PUSH
7380: LD_INT 28
7382: PUSH
7383: LD_INT 30
7385: PUSH
7386: LD_INT 31
7388: PUSH
7389: LD_INT 32
7391: PUSH
7392: LD_INT 34
7394: PUSH
7395: LD_INT 36
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 101
7433: PUSH
7434: LD_INT 102
7436: PUSH
7437: LD_INT 103
7439: PUSH
7440: LD_INT 104
7442: PUSH
7443: LD_INT 105
7445: PUSH
7446: LD_INT 106
7448: PUSH
7449: LD_INT 107
7451: PUSH
7452: LD_INT 108
7454: PUSH
7455: LD_INT 109
7457: PUSH
7458: LD_INT 110
7460: PUSH
7461: LD_INT 111
7463: PUSH
7464: LD_INT 112
7466: PUSH
7467: LD_INT 114
7469: PUSH
7470: LD_INT 116
7472: PUSH
7473: LD_INT 117
7475: PUSH
7476: LD_INT 118
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ST_TO_ADDR
7501: GO 9184
7503: LD_INT 12
7505: DOUBLE
7506: EQUAL
7507: IFTRUE 7511
7509: GO 7731
7511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7512: LD_ADDR_VAR 0 2
7516: PUSH
7517: LD_INT 1
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: LD_INT 7
7537: PUSH
7538: LD_INT 8
7540: PUSH
7541: LD_INT 9
7543: PUSH
7544: LD_INT 10
7546: PUSH
7547: LD_INT 11
7549: PUSH
7550: LD_INT 12
7552: PUSH
7553: LD_INT 13
7555: PUSH
7556: LD_INT 14
7558: PUSH
7559: LD_INT 15
7561: PUSH
7562: LD_INT 16
7564: PUSH
7565: LD_INT 17
7567: PUSH
7568: LD_INT 18
7570: PUSH
7571: LD_INT 19
7573: PUSH
7574: LD_INT 20
7576: PUSH
7577: LD_INT 21
7579: PUSH
7580: LD_INT 22
7582: PUSH
7583: LD_INT 23
7585: PUSH
7586: LD_INT 24
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 26
7594: PUSH
7595: LD_INT 27
7597: PUSH
7598: LD_INT 28
7600: PUSH
7601: LD_INT 30
7603: PUSH
7604: LD_INT 31
7606: PUSH
7607: LD_INT 32
7609: PUSH
7610: LD_INT 33
7612: PUSH
7613: LD_INT 34
7615: PUSH
7616: LD_INT 36
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 101
7657: PUSH
7658: LD_INT 102
7660: PUSH
7661: LD_INT 103
7663: PUSH
7664: LD_INT 104
7666: PUSH
7667: LD_INT 105
7669: PUSH
7670: LD_INT 106
7672: PUSH
7673: LD_INT 107
7675: PUSH
7676: LD_INT 108
7678: PUSH
7679: LD_INT 109
7681: PUSH
7682: LD_INT 110
7684: PUSH
7685: LD_INT 111
7687: PUSH
7688: LD_INT 112
7690: PUSH
7691: LD_INT 113
7693: PUSH
7694: LD_INT 114
7696: PUSH
7697: LD_INT 116
7699: PUSH
7700: LD_INT 117
7702: PUSH
7703: LD_INT 118
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: ST_TO_ADDR
7729: GO 9184
7731: LD_INT 13
7733: DOUBLE
7734: EQUAL
7735: IFTRUE 7739
7737: GO 7947
7739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7740: LD_ADDR_VAR 0 2
7744: PUSH
7745: LD_INT 1
7747: PUSH
7748: LD_INT 2
7750: PUSH
7751: LD_INT 3
7753: PUSH
7754: LD_INT 4
7756: PUSH
7757: LD_INT 5
7759: PUSH
7760: LD_INT 8
7762: PUSH
7763: LD_INT 9
7765: PUSH
7766: LD_INT 10
7768: PUSH
7769: LD_INT 11
7771: PUSH
7772: LD_INT 12
7774: PUSH
7775: LD_INT 14
7777: PUSH
7778: LD_INT 15
7780: PUSH
7781: LD_INT 16
7783: PUSH
7784: LD_INT 17
7786: PUSH
7787: LD_INT 18
7789: PUSH
7790: LD_INT 19
7792: PUSH
7793: LD_INT 20
7795: PUSH
7796: LD_INT 21
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 23
7804: PUSH
7805: LD_INT 24
7807: PUSH
7808: LD_INT 25
7810: PUSH
7811: LD_INT 26
7813: PUSH
7814: LD_INT 27
7816: PUSH
7817: LD_INT 28
7819: PUSH
7820: LD_INT 30
7822: PUSH
7823: LD_INT 31
7825: PUSH
7826: LD_INT 32
7828: PUSH
7829: LD_INT 33
7831: PUSH
7832: LD_INT 34
7834: PUSH
7835: LD_INT 36
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 101
7873: PUSH
7874: LD_INT 102
7876: PUSH
7877: LD_INT 103
7879: PUSH
7880: LD_INT 104
7882: PUSH
7883: LD_INT 105
7885: PUSH
7886: LD_INT 106
7888: PUSH
7889: LD_INT 107
7891: PUSH
7892: LD_INT 108
7894: PUSH
7895: LD_INT 109
7897: PUSH
7898: LD_INT 110
7900: PUSH
7901: LD_INT 111
7903: PUSH
7904: LD_INT 112
7906: PUSH
7907: LD_INT 113
7909: PUSH
7910: LD_INT 114
7912: PUSH
7913: LD_INT 116
7915: PUSH
7916: LD_INT 117
7918: PUSH
7919: LD_INT 118
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 9184
7947: LD_INT 14
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8179
7955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7956: LD_ADDR_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: LD_INT 6
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 13
7999: PUSH
8000: LD_INT 14
8002: PUSH
8003: LD_INT 15
8005: PUSH
8006: LD_INT 16
8008: PUSH
8009: LD_INT 17
8011: PUSH
8012: LD_INT 18
8014: PUSH
8015: LD_INT 19
8017: PUSH
8018: LD_INT 20
8020: PUSH
8021: LD_INT 21
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_INT 23
8029: PUSH
8030: LD_INT 24
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 26
8038: PUSH
8039: LD_INT 27
8041: PUSH
8042: LD_INT 28
8044: PUSH
8045: LD_INT 29
8047: PUSH
8048: LD_INT 30
8050: PUSH
8051: LD_INT 31
8053: PUSH
8054: LD_INT 32
8056: PUSH
8057: LD_INT 33
8059: PUSH
8060: LD_INT 34
8062: PUSH
8063: LD_INT 36
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 101
8105: PUSH
8106: LD_INT 102
8108: PUSH
8109: LD_INT 103
8111: PUSH
8112: LD_INT 104
8114: PUSH
8115: LD_INT 105
8117: PUSH
8118: LD_INT 106
8120: PUSH
8121: LD_INT 107
8123: PUSH
8124: LD_INT 108
8126: PUSH
8127: LD_INT 109
8129: PUSH
8130: LD_INT 110
8132: PUSH
8133: LD_INT 111
8135: PUSH
8136: LD_INT 112
8138: PUSH
8139: LD_INT 113
8141: PUSH
8142: LD_INT 114
8144: PUSH
8145: LD_INT 116
8147: PUSH
8148: LD_INT 117
8150: PUSH
8151: LD_INT 118
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: ST_TO_ADDR
8177: GO 9184
8179: LD_INT 15
8181: DOUBLE
8182: EQUAL
8183: IFTRUE 8187
8185: GO 8411
8187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8188: LD_ADDR_VAR 0 2
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: LD_INT 6
8210: PUSH
8211: LD_INT 7
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: LD_INT 9
8219: PUSH
8220: LD_INT 10
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 13
8231: PUSH
8232: LD_INT 14
8234: PUSH
8235: LD_INT 15
8237: PUSH
8238: LD_INT 16
8240: PUSH
8241: LD_INT 17
8243: PUSH
8244: LD_INT 18
8246: PUSH
8247: LD_INT 19
8249: PUSH
8250: LD_INT 20
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_INT 23
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 27
8273: PUSH
8274: LD_INT 28
8276: PUSH
8277: LD_INT 29
8279: PUSH
8280: LD_INT 30
8282: PUSH
8283: LD_INT 31
8285: PUSH
8286: LD_INT 32
8288: PUSH
8289: LD_INT 33
8291: PUSH
8292: LD_INT 34
8294: PUSH
8295: LD_INT 36
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 101
8337: PUSH
8338: LD_INT 102
8340: PUSH
8341: LD_INT 103
8343: PUSH
8344: LD_INT 104
8346: PUSH
8347: LD_INT 105
8349: PUSH
8350: LD_INT 106
8352: PUSH
8353: LD_INT 107
8355: PUSH
8356: LD_INT 108
8358: PUSH
8359: LD_INT 109
8361: PUSH
8362: LD_INT 110
8364: PUSH
8365: LD_INT 111
8367: PUSH
8368: LD_INT 112
8370: PUSH
8371: LD_INT 113
8373: PUSH
8374: LD_INT 114
8376: PUSH
8377: LD_INT 116
8379: PUSH
8380: LD_INT 117
8382: PUSH
8383: LD_INT 118
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: ST_TO_ADDR
8409: GO 9184
8411: LD_INT 16
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8555
8419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8420: LD_ADDR_VAR 0 2
8424: PUSH
8425: LD_INT 2
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: LD_INT 7
8436: PUSH
8437: LD_INT 11
8439: PUSH
8440: LD_INT 12
8442: PUSH
8443: LD_INT 15
8445: PUSH
8446: LD_INT 16
8448: PUSH
8449: LD_INT 20
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 23
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 26
8466: PUSH
8467: LD_INT 30
8469: PUSH
8470: LD_INT 31
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: LD_INT 33
8478: PUSH
8479: LD_INT 34
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 101
8505: PUSH
8506: LD_INT 102
8508: PUSH
8509: LD_INT 103
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 108
8517: PUSH
8518: LD_INT 112
8520: PUSH
8521: LD_INT 113
8523: PUSH
8524: LD_INT 114
8526: PUSH
8527: LD_INT 116
8529: PUSH
8530: LD_INT 117
8532: PUSH
8533: LD_INT 118
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: ST_TO_ADDR
8553: GO 9184
8555: LD_INT 17
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8787
8563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_INT 1
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: LD_INT 6
8586: PUSH
8587: LD_INT 7
8589: PUSH
8590: LD_INT 8
8592: PUSH
8593: LD_INT 9
8595: PUSH
8596: LD_INT 10
8598: PUSH
8599: LD_INT 11
8601: PUSH
8602: LD_INT 12
8604: PUSH
8605: LD_INT 13
8607: PUSH
8608: LD_INT 14
8610: PUSH
8611: LD_INT 15
8613: PUSH
8614: LD_INT 16
8616: PUSH
8617: LD_INT 17
8619: PUSH
8620: LD_INT 18
8622: PUSH
8623: LD_INT 19
8625: PUSH
8626: LD_INT 20
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 23
8637: PUSH
8638: LD_INT 24
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 27
8649: PUSH
8650: LD_INT 28
8652: PUSH
8653: LD_INT 29
8655: PUSH
8656: LD_INT 30
8658: PUSH
8659: LD_INT 31
8661: PUSH
8662: LD_INT 32
8664: PUSH
8665: LD_INT 33
8667: PUSH
8668: LD_INT 34
8670: PUSH
8671: LD_INT 36
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 101
8713: PUSH
8714: LD_INT 102
8716: PUSH
8717: LD_INT 103
8719: PUSH
8720: LD_INT 104
8722: PUSH
8723: LD_INT 105
8725: PUSH
8726: LD_INT 106
8728: PUSH
8729: LD_INT 107
8731: PUSH
8732: LD_INT 108
8734: PUSH
8735: LD_INT 109
8737: PUSH
8738: LD_INT 110
8740: PUSH
8741: LD_INT 111
8743: PUSH
8744: LD_INT 112
8746: PUSH
8747: LD_INT 113
8749: PUSH
8750: LD_INT 114
8752: PUSH
8753: LD_INT 116
8755: PUSH
8756: LD_INT 117
8758: PUSH
8759: LD_INT 118
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: ST_TO_ADDR
8785: GO 9184
8787: LD_INT 18
8789: DOUBLE
8790: EQUAL
8791: IFTRUE 8795
8793: GO 8943
8795: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8796: LD_ADDR_VAR 0 2
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: LD_INT 4
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 11
8815: PUSH
8816: LD_INT 12
8818: PUSH
8819: LD_INT 15
8821: PUSH
8822: LD_INT 16
8824: PUSH
8825: LD_INT 20
8827: PUSH
8828: LD_INT 21
8830: PUSH
8831: LD_INT 22
8833: PUSH
8834: LD_INT 23
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 30
8845: PUSH
8846: LD_INT 31
8848: PUSH
8849: LD_INT 32
8851: PUSH
8852: LD_INT 33
8854: PUSH
8855: LD_INT 34
8857: PUSH
8858: LD_INT 35
8860: PUSH
8861: LD_INT 36
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 101
8889: PUSH
8890: LD_INT 102
8892: PUSH
8893: LD_INT 103
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 108
8901: PUSH
8902: LD_INT 112
8904: PUSH
8905: LD_INT 113
8907: PUSH
8908: LD_INT 114
8910: PUSH
8911: LD_INT 115
8913: PUSH
8914: LD_INT 116
8916: PUSH
8917: LD_INT 117
8919: PUSH
8920: LD_INT 118
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: ST_TO_ADDR
8941: GO 9184
8943: LD_INT 19
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9183
8951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: LD_INT 1
8959: PUSH
8960: LD_INT 2
8962: PUSH
8963: LD_INT 3
8965: PUSH
8966: LD_INT 4
8968: PUSH
8969: LD_INT 5
8971: PUSH
8972: LD_INT 6
8974: PUSH
8975: LD_INT 7
8977: PUSH
8978: LD_INT 8
8980: PUSH
8981: LD_INT 9
8983: PUSH
8984: LD_INT 10
8986: PUSH
8987: LD_INT 11
8989: PUSH
8990: LD_INT 12
8992: PUSH
8993: LD_INT 13
8995: PUSH
8996: LD_INT 14
8998: PUSH
8999: LD_INT 15
9001: PUSH
9002: LD_INT 16
9004: PUSH
9005: LD_INT 17
9007: PUSH
9008: LD_INT 18
9010: PUSH
9011: LD_INT 19
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 24
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 26
9034: PUSH
9035: LD_INT 27
9037: PUSH
9038: LD_INT 28
9040: PUSH
9041: LD_INT 29
9043: PUSH
9044: LD_INT 30
9046: PUSH
9047: LD_INT 31
9049: PUSH
9050: LD_INT 32
9052: PUSH
9053: LD_INT 33
9055: PUSH
9056: LD_INT 34
9058: PUSH
9059: LD_INT 35
9061: PUSH
9062: LD_INT 36
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 101
9105: PUSH
9106: LD_INT 102
9108: PUSH
9109: LD_INT 103
9111: PUSH
9112: LD_INT 104
9114: PUSH
9115: LD_INT 105
9117: PUSH
9118: LD_INT 106
9120: PUSH
9121: LD_INT 107
9123: PUSH
9124: LD_INT 108
9126: PUSH
9127: LD_INT 109
9129: PUSH
9130: LD_INT 110
9132: PUSH
9133: LD_INT 111
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 113
9141: PUSH
9142: LD_INT 114
9144: PUSH
9145: LD_INT 115
9147: PUSH
9148: LD_INT 116
9150: PUSH
9151: LD_INT 117
9153: PUSH
9154: LD_INT 118
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 9184
9183: POP
// end else
9184: GO 9415
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 3
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 6
9208: PUSH
9209: LD_INT 7
9211: PUSH
9212: LD_INT 8
9214: PUSH
9215: LD_INT 9
9217: PUSH
9218: LD_INT 10
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 13
9229: PUSH
9230: LD_INT 14
9232: PUSH
9233: LD_INT 15
9235: PUSH
9236: LD_INT 16
9238: PUSH
9239: LD_INT 17
9241: PUSH
9242: LD_INT 18
9244: PUSH
9245: LD_INT 19
9247: PUSH
9248: LD_INT 20
9250: PUSH
9251: LD_INT 21
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_INT 23
9259: PUSH
9260: LD_INT 24
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 26
9268: PUSH
9269: LD_INT 27
9271: PUSH
9272: LD_INT 28
9274: PUSH
9275: LD_INT 29
9277: PUSH
9278: LD_INT 30
9280: PUSH
9281: LD_INT 31
9283: PUSH
9284: LD_INT 32
9286: PUSH
9287: LD_INT 33
9289: PUSH
9290: LD_INT 34
9292: PUSH
9293: LD_INT 35
9295: PUSH
9296: LD_INT 36
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 101
9339: PUSH
9340: LD_INT 102
9342: PUSH
9343: LD_INT 103
9345: PUSH
9346: LD_INT 104
9348: PUSH
9349: LD_INT 105
9351: PUSH
9352: LD_INT 106
9354: PUSH
9355: LD_INT 107
9357: PUSH
9358: LD_INT 108
9360: PUSH
9361: LD_INT 109
9363: PUSH
9364: LD_INT 110
9366: PUSH
9367: LD_INT 111
9369: PUSH
9370: LD_INT 112
9372: PUSH
9373: LD_INT 113
9375: PUSH
9376: LD_INT 114
9378: PUSH
9379: LD_INT 115
9381: PUSH
9382: LD_INT 116
9384: PUSH
9385: LD_INT 117
9387: PUSH
9388: LD_INT 118
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: ST_TO_ADDR
// if result then
9415: LD_VAR 0 2
9419: IFFALSE 10205
// begin normal :=  ;
9421: LD_ADDR_VAR 0 5
9425: PUSH
9426: LD_STRING 
9428: ST_TO_ADDR
// hardcore :=  ;
9429: LD_ADDR_VAR 0 6
9433: PUSH
9434: LD_STRING 
9436: ST_TO_ADDR
// active :=  ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_STRING 
9444: ST_TO_ADDR
// for i = 1 to normalCounter do
9445: LD_ADDR_VAR 0 8
9449: PUSH
9450: DOUBLE
9451: LD_INT 1
9453: DEC
9454: ST_TO_ADDR
9455: LD_EXP 24
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9562
// begin tmp := 0 ;
9463: LD_ADDR_VAR 0 3
9467: PUSH
9468: LD_STRING 0
9470: ST_TO_ADDR
// if result [ 1 ] then
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: IFFALSE 9544
// if result [ 1 ] [ 1 ] = i then
9481: LD_VAR 0 2
9485: PUSH
9486: LD_INT 1
9488: ARRAY
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PUSH
9494: LD_VAR 0 8
9498: EQUAL
9499: IFFALSE 9544
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9501: LD_ADDR_VAR 0 2
9505: PUSH
9506: LD_VAR 0 2
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 3
9530: PPUSH
9531: CALL_OW 1
9535: ST_TO_ADDR
// tmp := 1 ;
9536: LD_ADDR_VAR 0 3
9540: PUSH
9541: LD_STRING 1
9543: ST_TO_ADDR
// end ; normal := normal & tmp ;
9544: LD_ADDR_VAR 0 5
9548: PUSH
9549: LD_VAR 0 5
9553: PUSH
9554: LD_VAR 0 3
9558: STR
9559: ST_TO_ADDR
// end ;
9560: GO 9460
9562: POP
9563: POP
// for i = 1 to hardcoreCounter do
9564: LD_ADDR_VAR 0 8
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_EXP 25
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9685
// begin tmp := 0 ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_STRING 0
9589: ST_TO_ADDR
// if result [ 2 ] then
9590: LD_VAR 0 2
9594: PUSH
9595: LD_INT 2
9597: ARRAY
9598: IFFALSE 9667
// if result [ 2 ] [ 1 ] = 100 + i then
9600: LD_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PUSH
9613: LD_INT 100
9615: PUSH
9616: LD_VAR 0 8
9620: PLUS
9621: EQUAL
9622: IFFALSE 9667
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9624: LD_ADDR_VAR 0 2
9628: PUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: LD_INT 2
9636: PPUSH
9637: LD_VAR 0 2
9641: PUSH
9642: LD_INT 2
9644: ARRAY
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 3
9653: PPUSH
9654: CALL_OW 1
9658: ST_TO_ADDR
// tmp := 1 ;
9659: LD_ADDR_VAR 0 3
9663: PUSH
9664: LD_STRING 1
9666: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_VAR 0 6
9676: PUSH
9677: LD_VAR 0 3
9681: STR
9682: ST_TO_ADDR
// end ;
9683: GO 9579
9685: POP
9686: POP
// if isGameLoad then
9687: LD_VAR 0 1
9691: IFFALSE 10166
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_EXP 28
9702: PUSH
9703: LD_EXP 27
9707: PUSH
9708: LD_EXP 29
9712: PUSH
9713: LD_EXP 26
9717: PUSH
9718: LD_EXP 30
9722: PUSH
9723: LD_EXP 31
9727: PUSH
9728: LD_EXP 32
9732: PUSH
9733: LD_EXP 33
9737: PUSH
9738: LD_EXP 34
9742: PUSH
9743: LD_EXP 35
9747: PUSH
9748: LD_EXP 36
9752: PUSH
9753: LD_EXP 37
9757: PUSH
9758: LD_EXP 38
9762: PUSH
9763: LD_EXP 39
9767: PUSH
9768: LD_EXP 47
9772: PUSH
9773: LD_EXP 48
9777: PUSH
9778: LD_EXP 49
9782: PUSH
9783: LD_EXP 50
9787: PUSH
9788: LD_EXP 52
9792: PUSH
9793: LD_EXP 53
9797: PUSH
9798: LD_EXP 54
9802: PUSH
9803: LD_EXP 57
9807: PUSH
9808: LD_EXP 59
9812: PUSH
9813: LD_EXP 60
9817: PUSH
9818: LD_EXP 61
9822: PUSH
9823: LD_EXP 63
9827: PUSH
9828: LD_EXP 64
9832: PUSH
9833: LD_EXP 67
9837: PUSH
9838: LD_EXP 68
9842: PUSH
9843: LD_EXP 69
9847: PUSH
9848: LD_EXP 70
9852: PUSH
9853: LD_EXP 71
9857: PUSH
9858: LD_EXP 72
9862: PUSH
9863: LD_EXP 73
9867: PUSH
9868: LD_EXP 74
9872: PUSH
9873: LD_EXP 75
9877: PUSH
9878: LD_EXP 40
9882: PUSH
9883: LD_EXP 41
9887: PUSH
9888: LD_EXP 44
9892: PUSH
9893: LD_EXP 45
9897: PUSH
9898: LD_EXP 46
9902: PUSH
9903: LD_EXP 42
9907: PUSH
9908: LD_EXP 43
9912: PUSH
9913: LD_EXP 51
9917: PUSH
9918: LD_EXP 55
9922: PUSH
9923: LD_EXP 56
9927: PUSH
9928: LD_EXP 58
9932: PUSH
9933: LD_EXP 62
9937: PUSH
9938: LD_EXP 65
9942: PUSH
9943: LD_EXP 66
9947: PUSH
9948: LD_EXP 76
9952: PUSH
9953: LD_EXP 77
9957: PUSH
9958: LD_EXP 78
9962: PUSH
9963: LD_EXP 79
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: ST_TO_ADDR
// tmp :=  ;
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_STRING 
10031: ST_TO_ADDR
// for i = 1 to normalCounter do
10032: LD_ADDR_VAR 0 8
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_EXP 24
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10084
// begin if flags [ i ] then
10050: LD_VAR 0 4
10054: PUSH
10055: LD_VAR 0 8
10059: ARRAY
10060: IFFALSE 10082
// tmp := tmp & i & ; ;
10062: LD_ADDR_VAR 0 3
10066: PUSH
10067: LD_VAR 0 3
10071: PUSH
10072: LD_VAR 0 8
10076: STR
10077: PUSH
10078: LD_STRING ;
10080: STR
10081: ST_TO_ADDR
// end ;
10082: GO 10047
10084: POP
10085: POP
// for i = 1 to hardcoreCounter do
10086: LD_ADDR_VAR 0 8
10090: PUSH
10091: DOUBLE
10092: LD_INT 1
10094: DEC
10095: ST_TO_ADDR
10096: LD_EXP 25
10100: PUSH
10101: FOR_TO
10102: IFFALSE 10148
// begin if flags [ normalCounter + i ] then
10104: LD_VAR 0 4
10108: PUSH
10109: LD_EXP 24
10113: PUSH
10114: LD_VAR 0 8
10118: PLUS
10119: ARRAY
10120: IFFALSE 10146
// tmp := tmp & ( 100 + i ) & ; ;
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 100
10134: PUSH
10135: LD_VAR 0 8
10139: PLUS
10140: STR
10141: PUSH
10142: LD_STRING ;
10144: STR
10145: ST_TO_ADDR
// end ;
10146: GO 10101
10148: POP
10149: POP
// if tmp then
10150: LD_VAR 0 3
10154: IFFALSE 10166
// active := tmp ;
10156: LD_ADDR_VAR 0 7
10160: PUSH
10161: LD_VAR 0 3
10165: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10166: LD_STRING getStreamItemsFromMission("
10168: PUSH
10169: LD_VAR 0 5
10173: STR
10174: PUSH
10175: LD_STRING ","
10177: STR
10178: PUSH
10179: LD_VAR 0 6
10183: STR
10184: PUSH
10185: LD_STRING ","
10187: STR
10188: PUSH
10189: LD_VAR 0 7
10193: STR
10194: PUSH
10195: LD_STRING ")
10197: STR
10198: PPUSH
10199: CALL_OW 559
// end else
10203: GO 10212
// ToLua ( getStreamItemsFromMission("","","") ) ;
10205: LD_STRING getStreamItemsFromMission("","","")
10207: PPUSH
10208: CALL_OW 559
// end ;
10212: LD_VAR 0 2
10216: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10217: LD_EXP 23
10221: PUSH
10222: LD_EXP 28
10226: AND
10227: IFFALSE 10351
10229: GO 10231
10231: DISABLE
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
// begin enable ;
10236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_OWVAR 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 34
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 34
10269: PUSH
10270: LD_INT 45
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 34
10279: PUSH
10280: LD_INT 28
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 34
10289: PUSH
10290: LD_INT 47
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PPUSH
10308: CALL_OW 69
10312: ST_TO_ADDR
// if not tmp then
10313: LD_VAR 0 2
10317: NOT
10318: IFFALSE 10322
// exit ;
10320: GO 10351
// for i in tmp do
10322: LD_ADDR_VAR 0 1
10326: PUSH
10327: LD_VAR 0 2
10331: PUSH
10332: FOR_IN
10333: IFFALSE 10349
// begin SetLives ( i , 0 ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_INT 0
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: GO 10332
10349: POP
10350: POP
// end ;
10351: PPOPN 2
10353: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10354: LD_EXP 23
10358: PUSH
10359: LD_EXP 29
10363: AND
10364: IFFALSE 10448
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
// begin enable ;
10373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_OWVAR 2
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 32
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: ST_TO_ADDR
// if not tmp then
10410: LD_VAR 0 2
10414: NOT
10415: IFFALSE 10419
// exit ;
10417: GO 10448
// for i in tmp do
10419: LD_ADDR_VAR 0 1
10423: PUSH
10424: LD_VAR 0 2
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10446
// begin SetLives ( i , 0 ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: LD_INT 0
10439: PPUSH
10440: CALL_OW 234
// end ;
10444: GO 10429
10446: POP
10447: POP
// end ;
10448: PPOPN 2
10450: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10451: LD_EXP 23
10455: PUSH
10456: LD_EXP 26
10460: AND
10461: IFFALSE 10554
10463: GO 10465
10465: DISABLE
10466: LD_INT 0
10468: PPUSH
// begin enable ;
10469: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: LD_INT 22
10477: PUSH
10478: LD_OWVAR 2
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: LD_INT 25
10492: PUSH
10493: LD_INT 5
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 25
10502: PUSH
10503: LD_INT 9
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 25
10512: PUSH
10513: LD_INT 8
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10552
// begin SetClass ( i , 1 ) ;
10538: LD_VAR 0 1
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 336
// end ;
10550: GO 10535
10552: POP
10553: POP
// end ;
10554: PPOPN 1
10556: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10557: LD_EXP 23
10561: PUSH
10562: LD_EXP 27
10566: AND
10567: PUSH
10568: LD_OWVAR 65
10572: PUSH
10573: LD_INT 7
10575: LESS
10576: AND
10577: IFFALSE 10591
10579: GO 10581
10581: DISABLE
// begin enable ;
10582: ENABLE
// game_speed := 7 ;
10583: LD_ADDR_OWVAR 65
10587: PUSH
10588: LD_INT 7
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10592: LD_EXP 23
10596: PUSH
10597: LD_EXP 30
10601: AND
10602: IFFALSE 10804
10604: GO 10606
10606: DISABLE
10607: LD_INT 0
10609: PPUSH
10610: PPUSH
10611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10612: LD_ADDR_VAR 0 3
10616: PUSH
10617: LD_INT 81
10619: PUSH
10620: LD_OWVAR 2
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: ST_TO_ADDR
// if not tmp then
10648: LD_VAR 0 3
10652: NOT
10653: IFFALSE 10657
// exit ;
10655: GO 10804
// if tmp > 5 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 5
10664: GREATER
10665: IFFALSE 10677
// k := 5 else
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 5
10674: ST_TO_ADDR
10675: GO 10687
// k := tmp ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_VAR 0 3
10686: ST_TO_ADDR
// for i := 1 to k do
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: DOUBLE
10693: LD_INT 1
10695: DEC
10696: ST_TO_ADDR
10697: LD_VAR 0 2
10701: PUSH
10702: FOR_TO
10703: IFFALSE 10802
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 1
10714: ARRAY
10715: PPUSH
10716: LD_VAR 0 1
10720: PUSH
10721: LD_INT 4
10723: MOD
10724: PUSH
10725: LD_INT 1
10727: PLUS
10728: PPUSH
10729: CALL_OW 259
10733: PUSH
10734: LD_INT 10
10736: LESS
10737: IFFALSE 10800
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10739: LD_VAR 0 3
10743: PUSH
10744: LD_VAR 0 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 4
10757: MOD
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: PPUSH
10763: LD_VAR 0 3
10767: PUSH
10768: LD_VAR 0 1
10772: ARRAY
10773: PPUSH
10774: LD_VAR 0 1
10778: PUSH
10779: LD_INT 4
10781: MOD
10782: PUSH
10783: LD_INT 1
10785: PLUS
10786: PPUSH
10787: CALL_OW 259
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: PPUSH
10796: CALL_OW 237
10800: GO 10702
10802: POP
10803: POP
// end ;
10804: PPOPN 3
10806: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10807: LD_EXP 23
10811: PUSH
10812: LD_EXP 31
10816: AND
10817: IFFALSE 10837
10819: GO 10821
10821: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10822: LD_INT 4
10824: PPUSH
10825: LD_OWVAR 2
10829: PPUSH
10830: LD_INT 0
10832: PPUSH
10833: CALL_OW 324
10837: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10838: LD_EXP 23
10842: PUSH
10843: LD_EXP 60
10847: AND
10848: IFFALSE 10868
10850: GO 10852
10852: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10853: LD_INT 19
10855: PPUSH
10856: LD_OWVAR 2
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL_OW 324
10868: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10869: LD_EXP 23
10873: PUSH
10874: LD_EXP 32
10878: AND
10879: IFFALSE 10981
10881: GO 10883
10883: DISABLE
10884: LD_INT 0
10886: PPUSH
10887: PPUSH
// begin enable ;
10888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10889: LD_ADDR_VAR 0 2
10893: PUSH
10894: LD_INT 22
10896: PUSH
10897: LD_OWVAR 2
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 34
10911: PUSH
10912: LD_INT 11
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 34
10921: PUSH
10922: LD_INT 30
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: ST_TO_ADDR
// if not tmp then
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10952
// exit ;
10950: GO 10981
// for i in tmp do
10952: LD_ADDR_VAR 0 1
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: FOR_IN
10963: IFFALSE 10979
// begin SetLives ( i , 0 ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_INT 0
10972: PPUSH
10973: CALL_OW 234
// end ;
10977: GO 10962
10979: POP
10980: POP
// end ;
10981: PPOPN 2
10983: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10984: LD_EXP 23
10988: PUSH
10989: LD_EXP 33
10993: AND
10994: IFFALSE 11014
10996: GO 10998
10998: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10999: LD_INT 32
11001: PPUSH
11002: LD_OWVAR 2
11006: PPUSH
11007: LD_INT 0
11009: PPUSH
11010: CALL_OW 324
11014: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11015: LD_EXP 23
11019: PUSH
11020: LD_EXP 34
11024: AND
11025: IFFALSE 11206
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
11033: PPUSH
11034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11035: LD_ADDR_VAR 0 2
11039: PUSH
11040: LD_INT 22
11042: PUSH
11043: LD_OWVAR 2
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 33
11054: PUSH
11055: LD_INT 3
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: ST_TO_ADDR
// if not tmp then
11071: LD_VAR 0 2
11075: NOT
11076: IFFALSE 11080
// exit ;
11078: GO 11206
// side := 0 ;
11080: LD_ADDR_VAR 0 3
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// for i := 1 to 8 do
11088: LD_ADDR_VAR 0 1
11092: PUSH
11093: DOUBLE
11094: LD_INT 1
11096: DEC
11097: ST_TO_ADDR
11098: LD_INT 8
11100: PUSH
11101: FOR_TO
11102: IFFALSE 11150
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11104: LD_OWVAR 2
11108: PUSH
11109: LD_VAR 0 1
11113: NONEQUAL
11114: PUSH
11115: LD_OWVAR 2
11119: PPUSH
11120: LD_VAR 0 1
11124: PPUSH
11125: CALL_OW 81
11129: PUSH
11130: LD_INT 2
11132: EQUAL
11133: AND
11134: IFFALSE 11148
// begin side := i ;
11136: LD_ADDR_VAR 0 3
11140: PUSH
11141: LD_VAR 0 1
11145: ST_TO_ADDR
// break ;
11146: GO 11150
// end ;
11148: GO 11101
11150: POP
11151: POP
// if not side then
11152: LD_VAR 0 3
11156: NOT
11157: IFFALSE 11161
// exit ;
11159: GO 11206
// for i := 1 to tmp do
11161: LD_ADDR_VAR 0 1
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 2
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11204
// if Prob ( 60 ) then
11179: LD_INT 60
11181: PPUSH
11182: CALL_OW 13
11186: IFFALSE 11202
// SetSide ( i , side ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: CALL_OW 235
11202: GO 11176
11204: POP
11205: POP
// end ;
11206: PPOPN 3
11208: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11209: LD_EXP 23
11213: PUSH
11214: LD_EXP 36
11218: AND
11219: IFFALSE 11338
11221: GO 11223
11223: DISABLE
11224: LD_INT 0
11226: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11227: LD_ADDR_VAR 0 1
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_OWVAR 2
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 23
11259: PUSH
11260: LD_INT 0
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11336
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL_OW 257
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: LD_INT 4
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: IN
11312: IFFALSE 11334
// SetClass ( un , rand ( 1 , 4 ) ) ;
11314: LD_VAR 0 1
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: LD_INT 4
11324: PPUSH
11325: CALL_OW 12
11329: PPUSH
11330: CALL_OW 336
11334: GO 11281
11336: POP
11337: POP
// end ;
11338: PPOPN 1
11340: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11341: LD_EXP 23
11345: PUSH
11346: LD_EXP 35
11350: AND
11351: IFFALSE 11430
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11359: LD_ADDR_VAR 0 1
11363: PUSH
11364: LD_INT 22
11366: PUSH
11367: LD_OWVAR 2
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 21
11378: PUSH
11379: LD_INT 3
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: ST_TO_ADDR
// if not tmp then
11395: LD_VAR 0 1
11399: NOT
11400: IFFALSE 11404
// exit ;
11402: GO 11430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11404: LD_VAR 0 1
11408: PUSH
11409: LD_INT 1
11411: PPUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 12
11421: ARRAY
11422: PPUSH
11423: LD_INT 100
11425: PPUSH
11426: CALL_OW 234
// end ;
11430: PPOPN 1
11432: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11433: LD_EXP 23
11437: PUSH
11438: LD_EXP 37
11442: AND
11443: IFFALSE 11541
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11451: LD_ADDR_VAR 0 1
11455: PUSH
11456: LD_INT 22
11458: PUSH
11459: LD_OWVAR 2
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 21
11470: PUSH
11471: LD_INT 1
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PPUSH
11482: CALL_OW 69
11486: ST_TO_ADDR
// if not tmp then
11487: LD_VAR 0 1
11491: NOT
11492: IFFALSE 11496
// exit ;
11494: GO 11541
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11496: LD_VAR 0 1
11500: PUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 12
11513: ARRAY
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: LD_INT 4
11520: PPUSH
11521: CALL_OW 12
11525: PPUSH
11526: LD_INT 3000
11528: PPUSH
11529: LD_INT 9000
11531: PPUSH
11532: CALL_OW 12
11536: PPUSH
11537: CALL_OW 492
// end ;
11541: PPOPN 1
11543: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11544: LD_EXP 23
11548: PUSH
11549: LD_EXP 38
11553: AND
11554: IFFALSE 11574
11556: GO 11558
11558: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11559: LD_INT 1
11561: PPUSH
11562: LD_OWVAR 2
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 324
11574: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11575: LD_EXP 23
11579: PUSH
11580: LD_EXP 39
11584: AND
11585: IFFALSE 11668
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_OWVAR 2
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: ST_TO_ADDR
// if not tmp then
11630: LD_VAR 0 2
11634: NOT
11635: IFFALSE 11639
// exit ;
11637: GO 11668
// for i in tmp do
11639: LD_ADDR_VAR 0 1
11643: PUSH
11644: LD_VAR 0 2
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11666
// SetBLevel ( i , 10 ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 10
11659: PPUSH
11660: CALL_OW 241
11664: GO 11649
11666: POP
11667: POP
// end ;
11668: PPOPN 2
11670: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11671: LD_EXP 23
11675: PUSH
11676: LD_EXP 40
11680: AND
11681: IFFALSE 11792
11683: GO 11685
11685: DISABLE
11686: LD_INT 0
11688: PPUSH
11689: PPUSH
11690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11691: LD_ADDR_VAR 0 3
11695: PUSH
11696: LD_INT 22
11698: PUSH
11699: LD_OWVAR 2
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: ST_TO_ADDR
// if not tmp then
11727: LD_VAR 0 3
11731: NOT
11732: IFFALSE 11736
// exit ;
11734: GO 11792
// un := tmp [ rand ( 1 , tmp ) ] ;
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 1
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: CALL_OW 12
11758: ARRAY
11759: ST_TO_ADDR
// if Crawls ( un ) then
11760: LD_VAR 0 2
11764: PPUSH
11765: CALL_OW 318
11769: IFFALSE 11780
// ComWalk ( un ) ;
11771: LD_VAR 0 2
11775: PPUSH
11776: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11780: LD_VAR 0 2
11784: PPUSH
11785: LD_INT 5
11787: PPUSH
11788: CALL_OW 336
// end ;
11792: PPOPN 3
11794: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11795: LD_EXP 23
11799: PUSH
11800: LD_EXP 41
11804: AND
11805: PUSH
11806: LD_OWVAR 67
11810: PUSH
11811: LD_INT 4
11813: LESS
11814: AND
11815: IFFALSE 11834
11817: GO 11819
11819: DISABLE
// begin Difficulty := Difficulty + 1 ;
11820: LD_ADDR_OWVAR 67
11824: PUSH
11825: LD_OWVAR 67
11829: PUSH
11830: LD_INT 1
11832: PLUS
11833: ST_TO_ADDR
// end ;
11834: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11835: LD_EXP 23
11839: PUSH
11840: LD_EXP 42
11844: AND
11845: IFFALSE 11948
11847: GO 11849
11849: DISABLE
11850: LD_INT 0
11852: PPUSH
// begin for i := 1 to 5 do
11853: LD_ADDR_VAR 0 1
11857: PUSH
11858: DOUBLE
11859: LD_INT 1
11861: DEC
11862: ST_TO_ADDR
11863: LD_INT 5
11865: PUSH
11866: FOR_TO
11867: IFFALSE 11946
// begin uc_nation := nation_nature ;
11869: LD_ADDR_OWVAR 21
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// uc_side := 0 ;
11877: LD_ADDR_OWVAR 20
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11885: LD_ADDR_OWVAR 29
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 12
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: ST_TO_ADDR
// hc_agressivity := 20 ;
11900: LD_ADDR_OWVAR 35
11904: PUSH
11905: LD_INT 20
11907: ST_TO_ADDR
// hc_class := class_tiger ;
11908: LD_ADDR_OWVAR 28
11912: PUSH
11913: LD_INT 14
11915: ST_TO_ADDR
// hc_gallery :=  ;
11916: LD_ADDR_OWVAR 33
11920: PUSH
11921: LD_STRING 
11923: ST_TO_ADDR
// hc_name :=  ;
11924: LD_ADDR_OWVAR 26
11928: PUSH
11929: LD_STRING 
11931: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11932: CALL_OW 44
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 51
// end ;
11944: GO 11866
11946: POP
11947: POP
// end ;
11948: PPOPN 1
11950: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11951: LD_EXP 23
11955: PUSH
11956: LD_EXP 43
11960: AND
11961: IFFALSE 11970
11963: GO 11965
11965: DISABLE
// StreamSibBomb ;
11966: CALL 11971 0 0
11970: END
// export function StreamSibBomb ; var i , x , y ; begin
11971: LD_INT 0
11973: PPUSH
11974: PPUSH
11975: PPUSH
11976: PPUSH
// result := false ;
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_INT 0
11984: ST_TO_ADDR
// for i := 1 to 16 do
11985: LD_ADDR_VAR 0 2
11989: PUSH
11990: DOUBLE
11991: LD_INT 1
11993: DEC
11994: ST_TO_ADDR
11995: LD_INT 16
11997: PUSH
11998: FOR_TO
11999: IFFALSE 12198
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12001: LD_ADDR_VAR 0 3
12005: PUSH
12006: LD_INT 10
12008: PUSH
12009: LD_INT 20
12011: PUSH
12012: LD_INT 30
12014: PUSH
12015: LD_INT 40
12017: PUSH
12018: LD_INT 50
12020: PUSH
12021: LD_INT 60
12023: PUSH
12024: LD_INT 70
12026: PUSH
12027: LD_INT 80
12029: PUSH
12030: LD_INT 90
12032: PUSH
12033: LD_INT 100
12035: PUSH
12036: LD_INT 110
12038: PUSH
12039: LD_INT 120
12041: PUSH
12042: LD_INT 130
12044: PUSH
12045: LD_INT 140
12047: PUSH
12048: LD_INT 150
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 15
12073: PPUSH
12074: CALL_OW 12
12078: ARRAY
12079: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12080: LD_ADDR_VAR 0 4
12084: PUSH
12085: LD_INT 10
12087: PUSH
12088: LD_INT 20
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 40
12096: PUSH
12097: LD_INT 50
12099: PUSH
12100: LD_INT 60
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 80
12108: PUSH
12109: LD_INT 90
12111: PUSH
12112: LD_INT 100
12114: PUSH
12115: LD_INT 110
12117: PUSH
12118: LD_INT 120
12120: PUSH
12121: LD_INT 130
12123: PUSH
12124: LD_INT 140
12126: PUSH
12127: LD_INT 150
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 1
12149: PPUSH
12150: LD_INT 15
12152: PPUSH
12153: CALL_OW 12
12157: ARRAY
12158: ST_TO_ADDR
// if ValidHex ( x , y ) then
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_VAR 0 4
12168: PPUSH
12169: CALL_OW 488
12173: IFFALSE 12196
// begin result := [ x , y ] ;
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_VAR 0 3
12184: PUSH
12185: LD_VAR 0 4
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: ST_TO_ADDR
// break ;
12194: GO 12198
// end ; end ;
12196: GO 11998
12198: POP
12199: POP
// if result then
12200: LD_VAR 0 1
12204: IFFALSE 12264
// begin ToLua ( playSibBomb() ) ;
12206: LD_STRING playSibBomb()
12208: PPUSH
12209: CALL_OW 559
// wait ( 0 0$14 ) ;
12213: LD_INT 490
12215: PPUSH
12216: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 1
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 1
12233: PUSH
12234: LD_INT 2
12236: ARRAY
12237: PPUSH
12238: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 2
12258: ARRAY
12259: PPUSH
12260: CALL_OW 429
// end ; end ;
12264: LD_VAR 0 1
12268: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12269: LD_EXP 23
12273: PUSH
12274: LD_EXP 45
12278: AND
12279: IFFALSE 12291
12281: GO 12283
12283: DISABLE
// YouLost (  ) ;
12284: LD_STRING 
12286: PPUSH
12287: CALL_OW 104
12291: END
// every 0 0$1 trigger StreamModeActive and sFog do
12292: LD_EXP 23
12296: PUSH
12297: LD_EXP 44
12301: AND
12302: IFFALSE 12316
12304: GO 12306
12306: DISABLE
// FogOff ( your_side ) ;
12307: LD_OWVAR 2
12311: PPUSH
12312: CALL_OW 344
12316: END
// every 0 0$1 trigger StreamModeActive and sSun do
12317: LD_EXP 23
12321: PUSH
12322: LD_EXP 46
12326: AND
12327: IFFALSE 12355
12329: GO 12331
12331: DISABLE
// begin solar_recharge_percent := 0 ;
12332: LD_ADDR_OWVAR 79
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12340: LD_INT 10500
12342: PPUSH
12343: CALL_OW 67
// solar_recharge_percent := 100 ;
12347: LD_ADDR_OWVAR 79
12351: PUSH
12352: LD_INT 100
12354: ST_TO_ADDR
// end ;
12355: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12356: LD_EXP 23
12360: PUSH
12361: LD_EXP 47
12365: AND
12366: IFFALSE 12605
12368: GO 12370
12370: DISABLE
12371: LD_INT 0
12373: PPUSH
12374: PPUSH
12375: PPUSH
// begin tmp := [ ] ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: EMPTY
12382: ST_TO_ADDR
// for i := 1 to 6 do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_INT 6
12395: PUSH
12396: FOR_TO
12397: IFFALSE 12502
// begin uc_nation := nation_nature ;
12399: LD_ADDR_OWVAR 21
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// uc_side := 0 ;
12407: LD_ADDR_OWVAR 20
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12415: LD_ADDR_OWVAR 29
12419: PUSH
12420: LD_INT 12
12422: PUSH
12423: LD_INT 12
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: ST_TO_ADDR
// hc_agressivity := 20 ;
12430: LD_ADDR_OWVAR 35
12434: PUSH
12435: LD_INT 20
12437: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12438: LD_ADDR_OWVAR 28
12442: PUSH
12443: LD_INT 17
12445: ST_TO_ADDR
// hc_gallery :=  ;
12446: LD_ADDR_OWVAR 33
12450: PUSH
12451: LD_STRING 
12453: ST_TO_ADDR
// hc_name :=  ;
12454: LD_ADDR_OWVAR 26
12458: PUSH
12459: LD_STRING 
12461: ST_TO_ADDR
// un := CreateHuman ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: CALL_OW 44
12471: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 51
// tmp := tmp ^ un ;
12484: LD_ADDR_VAR 0 3
12488: PUSH
12489: LD_VAR 0 3
12493: PUSH
12494: LD_VAR 0 2
12498: ADD
12499: ST_TO_ADDR
// end ;
12500: GO 12396
12502: POP
12503: POP
// repeat wait ( 0 0$1 ) ;
12504: LD_INT 35
12506: PPUSH
12507: CALL_OW 67
// for un in tmp do
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_VAR 0 3
12520: PUSH
12521: FOR_IN
12522: IFFALSE 12596
// begin if IsDead ( un ) then
12524: LD_VAR 0 2
12528: PPUSH
12529: CALL_OW 301
12533: IFFALSE 12553
// begin tmp := tmp diff un ;
12535: LD_ADDR_VAR 0 3
12539: PUSH
12540: LD_VAR 0 3
12544: PUSH
12545: LD_VAR 0 2
12549: DIFF
12550: ST_TO_ADDR
// continue ;
12551: GO 12521
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12553: LD_VAR 0 2
12557: PPUSH
12558: LD_INT 3
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_INT 0
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 69
12579: PPUSH
12580: LD_VAR 0 2
12584: PPUSH
12585: CALL_OW 74
12589: PPUSH
12590: CALL_OW 115
// end ;
12594: GO 12521
12596: POP
12597: POP
// until not tmp ;
12598: LD_VAR 0 3
12602: NOT
12603: IFFALSE 12504
// end ;
12605: PPOPN 3
12607: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12608: LD_EXP 23
12612: PUSH
12613: LD_EXP 48
12617: AND
12618: IFFALSE 12672
12620: GO 12622
12622: DISABLE
// begin ToLua ( displayTroll(); ) ;
12623: LD_STRING displayTroll();
12625: PPUSH
12626: CALL_OW 559
// wait ( 3 3$00 ) ;
12630: LD_INT 6300
12632: PPUSH
12633: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12637: LD_STRING hideTroll();
12639: PPUSH
12640: CALL_OW 559
// wait ( 1 1$00 ) ;
12644: LD_INT 2100
12646: PPUSH
12647: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12651: LD_STRING displayTroll();
12653: PPUSH
12654: CALL_OW 559
// wait ( 1 1$00 ) ;
12658: LD_INT 2100
12660: PPUSH
12661: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12665: LD_STRING hideTroll();
12667: PPUSH
12668: CALL_OW 559
// end ;
12672: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12673: LD_EXP 23
12677: PUSH
12678: LD_EXP 49
12682: AND
12683: IFFALSE 12746
12685: GO 12687
12687: DISABLE
12688: LD_INT 0
12690: PPUSH
// begin p := 0 ;
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// repeat game_speed := 1 ;
12699: LD_ADDR_OWVAR 65
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12707: LD_INT 35
12709: PPUSH
12710: CALL_OW 67
// p := p + 1 ;
12714: LD_ADDR_VAR 0 1
12718: PUSH
12719: LD_VAR 0 1
12723: PUSH
12724: LD_INT 1
12726: PLUS
12727: ST_TO_ADDR
// until p >= 60 ;
12728: LD_VAR 0 1
12732: PUSH
12733: LD_INT 60
12735: GREATEREQUAL
12736: IFFALSE 12699
// game_speed := 4 ;
12738: LD_ADDR_OWVAR 65
12742: PUSH
12743: LD_INT 4
12745: ST_TO_ADDR
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12749: LD_EXP 23
12753: PUSH
12754: LD_EXP 50
12758: AND
12759: IFFALSE 12905
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_OWVAR 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 0
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// if not depot then
12822: LD_VAR 0 1
12826: NOT
12827: IFFALSE 12831
// exit ;
12829: GO 12905
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12831: LD_ADDR_VAR 0 2
12835: PUSH
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: PPUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 12
12853: ARRAY
12854: PPUSH
12855: CALL_OW 274
12859: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12860: LD_VAR 0 2
12864: PPUSH
12865: LD_INT 1
12867: PPUSH
12868: LD_INT 0
12870: PPUSH
12871: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12875: LD_VAR 0 2
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12890: LD_VAR 0 2
12894: PPUSH
12895: LD_INT 3
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 277
// end ;
12905: PPOPN 2
12907: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12908: LD_EXP 23
12912: PUSH
12913: LD_EXP 51
12917: AND
12918: IFFALSE 13015
12920: GO 12922
12922: DISABLE
12923: LD_INT 0
12925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_OWVAR 2
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 21
12945: PUSH
12946: LD_INT 1
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: LD_INT 23
12958: PUSH
12959: LD_INT 0
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: ST_TO_ADDR
// if not tmp then
12980: LD_VAR 0 1
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 1
12996: PPUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 12
13006: ARRAY
13007: PPUSH
13008: LD_INT 200
13010: PPUSH
13011: CALL_OW 234
// end ;
13015: PPOPN 1
13017: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13018: LD_EXP 23
13022: PUSH
13023: LD_EXP 52
13027: AND
13028: IFFALSE 13107
13030: GO 13032
13032: DISABLE
13033: LD_INT 0
13035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13036: LD_ADDR_VAR 0 1
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_OWVAR 2
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 21
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: ST_TO_ADDR
// if not tmp then
13072: LD_VAR 0 1
13076: NOT
13077: IFFALSE 13081
// exit ;
13079: GO 13107
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13081: LD_VAR 0 1
13085: PUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_VAR 0 1
13093: PPUSH
13094: CALL_OW 12
13098: ARRAY
13099: PPUSH
13100: LD_INT 60
13102: PPUSH
13103: CALL_OW 234
// end ;
13107: PPOPN 1
13109: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13110: LD_EXP 23
13114: PUSH
13115: LD_EXP 53
13119: AND
13120: IFFALSE 13219
13122: GO 13124
13124: DISABLE
13125: LD_INT 0
13127: PPUSH
13128: PPUSH
// begin enable ;
13129: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_OWVAR 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 61
13149: PUSH
13150: EMPTY
13151: LIST
13152: PUSH
13153: LD_INT 33
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: ST_TO_ADDR
// if not tmp then
13173: LD_VAR 0 1
13177: NOT
13178: IFFALSE 13182
// exit ;
13180: GO 13219
// for i in tmp do
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: FOR_IN
13193: IFFALSE 13217
// if IsControledBy ( i ) then
13195: LD_VAR 0 2
13199: PPUSH
13200: CALL_OW 312
13204: IFFALSE 13215
// ComUnlink ( i ) ;
13206: LD_VAR 0 2
13210: PPUSH
13211: CALL_OW 136
13215: GO 13192
13217: POP
13218: POP
// end ;
13219: PPOPN 2
13221: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13222: LD_EXP 23
13226: PUSH
13227: LD_EXP 54
13231: AND
13232: IFFALSE 13372
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
13240: PPUSH
// begin ToLua ( displayPowell(); ) ;
13241: LD_STRING displayPowell();
13243: PPUSH
13244: CALL_OW 559
// uc_side := 0 ;
13248: LD_ADDR_OWVAR 20
13252: PUSH
13253: LD_INT 0
13255: ST_TO_ADDR
// uc_nation := 2 ;
13256: LD_ADDR_OWVAR 21
13260: PUSH
13261: LD_INT 2
13263: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13264: LD_ADDR_OWVAR 37
13268: PUSH
13269: LD_INT 14
13271: ST_TO_ADDR
// vc_engine := engine_siberite ;
13272: LD_ADDR_OWVAR 39
13276: PUSH
13277: LD_INT 3
13279: ST_TO_ADDR
// vc_control := control_apeman ;
13280: LD_ADDR_OWVAR 38
13284: PUSH
13285: LD_INT 5
13287: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13288: LD_ADDR_OWVAR 40
13292: PUSH
13293: LD_INT 29
13295: ST_TO_ADDR
// un := CreateVehicle ;
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: CALL_OW 45
13305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13318: LD_INT 35
13320: PPUSH
13321: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13325: LD_VAR 0 2
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_OWVAR 2
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 69
13346: PPUSH
13347: LD_VAR 0 2
13351: PPUSH
13352: CALL_OW 74
13356: PPUSH
13357: CALL_OW 115
// until IsDead ( un ) ;
13361: LD_VAR 0 2
13365: PPUSH
13366: CALL_OW 301
13370: IFFALSE 13318
// end ;
13372: PPOPN 2
13374: END
// every 0 0$1 trigger StreamModeActive and sStu do
13375: LD_EXP 23
13379: PUSH
13380: LD_EXP 62
13384: AND
13385: IFFALSE 13401
13387: GO 13389
13389: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13390: LD_STRING displayStucuk();
13392: PPUSH
13393: CALL_OW 559
// ResetFog ;
13397: CALL_OW 335
// end ;
13401: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13402: LD_EXP 23
13406: PUSH
13407: LD_EXP 55
13411: AND
13412: IFFALSE 13553
13414: GO 13416
13416: DISABLE
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13421: LD_ADDR_VAR 0 2
13425: PUSH
13426: LD_INT 22
13428: PUSH
13429: LD_OWVAR 2
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// if not tmp then
13457: LD_VAR 0 2
13461: NOT
13462: IFFALSE 13466
// exit ;
13464: GO 13553
// un := tmp [ rand ( 1 , tmp ) ] ;
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_VAR 0 2
13475: PUSH
13476: LD_INT 1
13478: PPUSH
13479: LD_VAR 0 2
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13502: LD_VAR 0 1
13506: PPUSH
13507: LD_OWVAR 3
13511: PUSH
13512: LD_VAR 0 1
13516: DIFF
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 74
13527: PPUSH
13528: CALL_OW 115
// wait ( 0 0$20 ) ;
13532: LD_INT 700
13534: PPUSH
13535: CALL_OW 67
// SetSide ( un , your_side ) ;
13539: LD_VAR 0 1
13543: PPUSH
13544: LD_OWVAR 2
13548: PPUSH
13549: CALL_OW 235
// end ;
13553: PPOPN 2
13555: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13556: LD_EXP 23
13560: PUSH
13561: LD_EXP 56
13565: AND
13566: IFFALSE 13672
13568: GO 13570
13570: DISABLE
13571: LD_INT 0
13573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13574: LD_ADDR_VAR 0 1
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_OWVAR 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 30
13596: PUSH
13597: LD_INT 0
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 30
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 69
13627: ST_TO_ADDR
// if not depot then
13628: LD_VAR 0 1
13632: NOT
13633: IFFALSE 13637
// exit ;
13635: GO 13672
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13637: LD_VAR 0 1
13641: PUSH
13642: LD_INT 1
13644: ARRAY
13645: PPUSH
13646: CALL_OW 250
13650: PPUSH
13651: LD_VAR 0 1
13655: PUSH
13656: LD_INT 1
13658: ARRAY
13659: PPUSH
13660: CALL_OW 251
13664: PPUSH
13665: LD_INT 70
13667: PPUSH
13668: CALL_OW 495
// end ;
13672: PPOPN 1
13674: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13675: LD_EXP 23
13679: PUSH
13680: LD_EXP 57
13684: AND
13685: IFFALSE 13896
13687: GO 13689
13689: DISABLE
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13697: LD_ADDR_VAR 0 5
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_OWVAR 2
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 21
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 69
13732: ST_TO_ADDR
// if not tmp then
13733: LD_VAR 0 5
13737: NOT
13738: IFFALSE 13742
// exit ;
13740: GO 13896
// for i in tmp do
13742: LD_ADDR_VAR 0 1
13746: PUSH
13747: LD_VAR 0 5
13751: PUSH
13752: FOR_IN
13753: IFFALSE 13894
// begin d := rand ( 0 , 5 ) ;
13755: LD_ADDR_VAR 0 4
13759: PUSH
13760: LD_INT 0
13762: PPUSH
13763: LD_INT 5
13765: PPUSH
13766: CALL_OW 12
13770: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_VAR 0 1
13780: PPUSH
13781: CALL_OW 250
13785: PPUSH
13786: LD_VAR 0 4
13790: PPUSH
13791: LD_INT 3
13793: PPUSH
13794: LD_INT 12
13796: PPUSH
13797: CALL_OW 12
13801: PPUSH
13802: CALL_OW 272
13806: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 251
13821: PPUSH
13822: LD_VAR 0 4
13826: PPUSH
13827: LD_INT 3
13829: PPUSH
13830: LD_INT 12
13832: PPUSH
13833: CALL_OW 12
13837: PPUSH
13838: CALL_OW 273
13842: ST_TO_ADDR
// if ValidHex ( x , y ) then
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_VAR 0 3
13852: PPUSH
13853: CALL_OW 488
13857: IFFALSE 13892
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 3
13876: PPUSH
13877: LD_INT 6
13879: PPUSH
13880: CALL_OW 12
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 483
// end ;
13892: GO 13752
13894: POP
13895: POP
// end ;
13896: PPOPN 5
13898: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13899: LD_EXP 23
13903: PUSH
13904: LD_EXP 58
13908: AND
13909: IFFALSE 14003
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13918: LD_ADDR_VAR 0 2
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_OWVAR 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 32
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 21
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: ST_TO_ADDR
// if not tmp then
13965: LD_VAR 0 2
13969: NOT
13970: IFFALSE 13974
// exit ;
13972: GO 14003
// for i in tmp do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_VAR 0 2
13983: PUSH
13984: FOR_IN
13985: IFFALSE 14001
// SetFuel ( i , 0 ) ;
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 240
13999: GO 13984
14001: POP
14002: POP
// end ;
14003: PPOPN 2
14005: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14006: LD_EXP 23
14010: PUSH
14011: LD_EXP 59
14015: AND
14016: IFFALSE 14082
14018: GO 14020
14020: DISABLE
14021: LD_INT 0
14023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_INT 22
14031: PUSH
14032: LD_OWVAR 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 30
14043: PUSH
14044: LD_INT 29
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: ST_TO_ADDR
// if not tmp then
14060: LD_VAR 0 1
14064: NOT
14065: IFFALSE 14069
// exit ;
14067: GO 14082
// DestroyUnit ( tmp [ 1 ] ) ;
14069: LD_VAR 0 1
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: CALL_OW 65
// end ;
14082: PPOPN 1
14084: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14085: LD_EXP 23
14089: PUSH
14090: LD_EXP 61
14094: AND
14095: IFFALSE 14224
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
// begin uc_side := 0 ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_INT 0
14110: ST_TO_ADDR
// uc_nation := nation_arabian ;
14111: LD_ADDR_OWVAR 21
14115: PUSH
14116: LD_INT 2
14118: ST_TO_ADDR
// hc_gallery :=  ;
14119: LD_ADDR_OWVAR 33
14123: PUSH
14124: LD_STRING 
14126: ST_TO_ADDR
// hc_name :=  ;
14127: LD_ADDR_OWVAR 26
14131: PUSH
14132: LD_STRING 
14134: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14135: LD_INT 1
14137: PPUSH
14138: LD_INT 11
14140: PPUSH
14141: LD_INT 10
14143: PPUSH
14144: CALL_OW 380
// un := CreateHuman ;
14148: LD_ADDR_VAR 0 1
14152: PUSH
14153: CALL_OW 44
14157: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14170: LD_INT 35
14172: PPUSH
14173: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14177: LD_VAR 0 1
14181: PPUSH
14182: LD_INT 22
14184: PUSH
14185: LD_OWVAR 2
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 69
14198: PPUSH
14199: LD_VAR 0 1
14203: PPUSH
14204: CALL_OW 74
14208: PPUSH
14209: CALL_OW 115
// until IsDead ( un ) ;
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 301
14222: IFFALSE 14170
// end ;
14224: PPOPN 1
14226: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14227: LD_EXP 23
14231: PUSH
14232: LD_EXP 63
14236: AND
14237: IFFALSE 14249
14239: GO 14241
14241: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14242: LD_STRING earthquake(getX(game), 0, 32)
14244: PPUSH
14245: CALL_OW 559
14249: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14250: LD_EXP 23
14254: PUSH
14255: LD_EXP 64
14259: AND
14260: IFFALSE 14351
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
// begin enable ;
14268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_OWVAR 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 33
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// if not tmp then
14316: LD_VAR 0 1
14320: NOT
14321: IFFALSE 14325
// exit ;
14323: GO 14351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14325: LD_VAR 0 1
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 12
14342: ARRAY
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 234
// end ;
14351: PPOPN 1
14353: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14354: LD_EXP 23
14358: PUSH
14359: LD_EXP 65
14363: AND
14364: IFFALSE 14505
14366: GO 14368
14368: DISABLE
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_OWVAR 2
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 25
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: ST_TO_ADDR
// if not tmp then
14410: LD_VAR 0 3
14414: NOT
14415: IFFALSE 14419
// exit ;
14417: GO 14505
// un := tmp [ rand ( 1 , tmp ) ] ;
14419: LD_ADDR_VAR 0 2
14423: PUSH
14424: LD_VAR 0 3
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: CALL_OW 12
14441: ARRAY
14442: ST_TO_ADDR
// if Crawls ( un ) then
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 318
14452: IFFALSE 14463
// ComWalk ( un ) ;
14454: LD_VAR 0 2
14458: PPUSH
14459: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_INT 9
14470: PPUSH
14471: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14475: LD_INT 28
14477: PPUSH
14478: LD_OWVAR 2
14482: PPUSH
14483: LD_INT 2
14485: PPUSH
14486: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14490: LD_INT 29
14492: PPUSH
14493: LD_OWVAR 2
14497: PPUSH
14498: LD_INT 2
14500: PPUSH
14501: CALL_OW 322
// end ;
14505: PPOPN 3
14507: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14508: LD_EXP 23
14512: PUSH
14513: LD_EXP 66
14517: AND
14518: IFFALSE 14629
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14528: LD_ADDR_VAR 0 3
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 3
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14629
// un := tmp [ rand ( 1 , tmp ) ] ;
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: LD_VAR 0 3
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_VAR 0 3
14590: PPUSH
14591: CALL_OW 12
14595: ARRAY
14596: ST_TO_ADDR
// if Crawls ( un ) then
14597: LD_VAR 0 2
14601: PPUSH
14602: CALL_OW 318
14606: IFFALSE 14617
// ComWalk ( un ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_INT 8
14624: PPUSH
14625: CALL_OW 336
// end ;
14629: PPOPN 3
14631: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14632: LD_EXP 23
14636: PUSH
14637: LD_EXP 67
14641: AND
14642: IFFALSE 14786
14644: GO 14646
14646: DISABLE
14647: LD_INT 0
14649: PPUSH
14650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14651: LD_ADDR_VAR 0 2
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_OWVAR 2
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: LD_INT 34
14683: PUSH
14684: LD_INT 12
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 34
14693: PUSH
14694: LD_INT 51
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 34
14703: PUSH
14704: LD_INT 32
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PPUSH
14722: CALL_OW 69
14726: ST_TO_ADDR
// if not tmp then
14727: LD_VAR 0 2
14731: NOT
14732: IFFALSE 14736
// exit ;
14734: GO 14786
// for i in tmp do
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 2
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14784
// if GetCargo ( i , mat_artifact ) = 0 then
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_INT 4
14756: PPUSH
14757: CALL_OW 289
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: IFFALSE 14782
// SetCargo ( i , mat_siberit , 100 ) ;
14767: LD_VAR 0 1
14771: PPUSH
14772: LD_INT 3
14774: PPUSH
14775: LD_INT 100
14777: PPUSH
14778: CALL_OW 290
14782: GO 14746
14784: POP
14785: POP
// end ;
14786: PPOPN 2
14788: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14789: LD_EXP 23
14793: PUSH
14794: LD_EXP 68
14798: AND
14799: IFFALSE 14982
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 69
14829: ST_TO_ADDR
// if not tmp then
14830: LD_VAR 0 2
14834: NOT
14835: IFFALSE 14839
// exit ;
14837: GO 14982
// for i := 1 to 2 do
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: DOUBLE
14845: LD_INT 1
14847: DEC
14848: ST_TO_ADDR
14849: LD_INT 2
14851: PUSH
14852: FOR_TO
14853: IFFALSE 14980
// begin uc_side := your_side ;
14855: LD_ADDR_OWVAR 20
14859: PUSH
14860: LD_OWVAR 2
14864: ST_TO_ADDR
// uc_nation := nation_american ;
14865: LD_ADDR_OWVAR 21
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// vc_chassis := us_morphling ;
14873: LD_ADDR_OWVAR 37
14877: PUSH
14878: LD_INT 5
14880: ST_TO_ADDR
// vc_engine := engine_siberite ;
14881: LD_ADDR_OWVAR 39
14885: PUSH
14886: LD_INT 3
14888: ST_TO_ADDR
// vc_control := control_computer ;
14889: LD_ADDR_OWVAR 38
14893: PUSH
14894: LD_INT 3
14896: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14897: LD_ADDR_OWVAR 40
14901: PUSH
14902: LD_INT 10
14904: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14905: LD_VAR 0 2
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: CALL_OW 310
14918: NOT
14919: IFFALSE 14966
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14921: CALL_OW 45
14925: PPUSH
14926: LD_VAR 0 2
14930: PUSH
14931: LD_INT 1
14933: ARRAY
14934: PPUSH
14935: CALL_OW 250
14939: PPUSH
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: CALL_OW 251
14953: PPUSH
14954: LD_INT 12
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: CALL_OW 50
14964: GO 14978
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14966: CALL_OW 45
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 51
// end ;
14978: GO 14852
14980: POP
14981: POP
// end ;
14982: PPOPN 2
14984: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14985: LD_EXP 23
14989: PUSH
14990: LD_EXP 69
14994: AND
14995: IFFALSE 15217
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
15006: PPUSH
15007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15008: LD_ADDR_VAR 0 6
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_OWVAR 2
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 3
15037: PUSH
15038: LD_INT 23
15040: PUSH
15041: LD_INT 0
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if not tmp then
15062: LD_VAR 0 6
15066: NOT
15067: IFFALSE 15071
// exit ;
15069: GO 15217
// s1 := rand ( 1 , 4 ) ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_INT 4
15081: PPUSH
15082: CALL_OW 12
15086: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15087: LD_ADDR_VAR 0 4
15091: PUSH
15092: LD_VAR 0 6
15096: PUSH
15097: LD_INT 1
15099: ARRAY
15100: PPUSH
15101: LD_VAR 0 2
15105: PPUSH
15106: CALL_OW 259
15110: ST_TO_ADDR
// if s1 = 1 then
15111: LD_VAR 0 2
15115: PUSH
15116: LD_INT 1
15118: EQUAL
15119: IFFALSE 15139
// s2 := rand ( 2 , 4 ) else
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 2
15128: PPUSH
15129: LD_INT 4
15131: PPUSH
15132: CALL_OW 12
15136: ST_TO_ADDR
15137: GO 15147
// s2 := 1 ;
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15147: LD_ADDR_VAR 0 5
15151: PUSH
15152: LD_VAR 0 6
15156: PUSH
15157: LD_INT 1
15159: ARRAY
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: CALL_OW 259
15170: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15171: LD_VAR 0 6
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: LD_VAR 0 2
15184: PPUSH
15185: LD_VAR 0 5
15189: PPUSH
15190: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15194: LD_VAR 0 6
15198: PUSH
15199: LD_INT 1
15201: ARRAY
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: CALL_OW 237
// end ;
15217: PPOPN 6
15219: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15220: LD_EXP 23
15224: PUSH
15225: LD_EXP 70
15229: AND
15230: IFFALSE 15309
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_INT 22
15245: PUSH
15246: LD_OWVAR 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PPUSH
15269: CALL_OW 69
15273: ST_TO_ADDR
// if not tmp then
15274: LD_VAR 0 1
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15283: LD_VAR 0 1
15287: PUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 12
15300: ARRAY
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 234
// end ;
15309: PPOPN 1
15311: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15312: LD_EXP 23
15316: PUSH
15317: LD_EXP 71
15321: AND
15322: IFFALSE 15434
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_OWVAR 2
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: LD_INT 30
15353: PUSH
15354: LD_INT 27
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 30
15363: PUSH
15364: LD_INT 26
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 28
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 69
15395: ST_TO_ADDR
// if not tmp then
15396: LD_VAR 0 2
15400: NOT
15401: IFFALSE 15405
// exit ;
15403: GO 15434
// for i in tmp do
15405: LD_ADDR_VAR 0 1
15409: PUSH
15410: LD_VAR 0 2
15414: PUSH
15415: FOR_IN
15416: IFFALSE 15432
// SetLives ( i , 1 ) ;
15418: LD_VAR 0 1
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 234
15430: GO 15415
15432: POP
15433: POP
// end ;
15434: PPOPN 2
15436: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15437: LD_EXP 23
15441: PUSH
15442: LD_EXP 72
15446: AND
15447: IFFALSE 15734
15449: GO 15451
15451: DISABLE
15452: LD_INT 0
15454: PPUSH
15455: PPUSH
15456: PPUSH
// begin i := rand ( 1 , 7 ) ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 7
15467: PPUSH
15468: CALL_OW 12
15472: ST_TO_ADDR
// case i of 1 :
15473: LD_VAR 0 1
15477: PUSH
15478: LD_INT 1
15480: DOUBLE
15481: EQUAL
15482: IFTRUE 15486
15484: GO 15496
15486: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15487: LD_STRING earthquake(getX(game), 0, 32)
15489: PPUSH
15490: CALL_OW 559
15494: GO 15734
15496: LD_INT 2
15498: DOUBLE
15499: EQUAL
15500: IFTRUE 15504
15502: GO 15518
15504: POP
// begin ToLua ( displayStucuk(); ) ;
15505: LD_STRING displayStucuk();
15507: PPUSH
15508: CALL_OW 559
// ResetFog ;
15512: CALL_OW 335
// end ; 3 :
15516: GO 15734
15518: LD_INT 3
15520: DOUBLE
15521: EQUAL
15522: IFTRUE 15526
15524: GO 15630
15526: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 22
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 25
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// if not tmp then
15563: LD_VAR 0 2
15567: NOT
15568: IFFALSE 15572
// exit ;
15570: GO 15734
// un := tmp [ rand ( 1 , tmp ) ] ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 1
15584: PPUSH
15585: LD_VAR 0 2
15589: PPUSH
15590: CALL_OW 12
15594: ARRAY
15595: ST_TO_ADDR
// if Crawls ( un ) then
15596: LD_VAR 0 3
15600: PPUSH
15601: CALL_OW 318
15605: IFFALSE 15616
// ComWalk ( un ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 8
15623: PPUSH
15624: CALL_OW 336
// end ; 4 :
15628: GO 15734
15630: LD_INT 4
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15712
15638: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_OWVAR 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: LD_INT 29
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PPUSH
15670: CALL_OW 69
15674: ST_TO_ADDR
// if not tmp then
15675: LD_VAR 0 2
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 15734
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15684: LD_VAR 0 2
15688: PUSH
15689: LD_INT 1
15691: ARRAY
15692: PPUSH
15693: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15697: LD_VAR 0 2
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 65
// end ; 5 .. 7 :
15710: GO 15734
15712: LD_INT 5
15714: DOUBLE
15715: GREATEREQUAL
15716: IFFALSE 15724
15718: LD_INT 7
15720: DOUBLE
15721: LESSEQUAL
15722: IFTRUE 15726
15724: GO 15733
15726: POP
// StreamSibBomb ; end ;
15727: CALL 11971 0 0
15731: GO 15734
15733: POP
// end ;
15734: PPOPN 3
15736: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15737: LD_EXP 23
15741: PUSH
15742: LD_EXP 73
15746: AND
15747: IFFALSE 15903
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
15756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15757: LD_ADDR_VAR 0 2
15761: PUSH
15762: LD_INT 81
15764: PUSH
15765: LD_OWVAR 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 21
15779: PUSH
15780: LD_INT 1
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 21
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 2
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15903
// p := 0 ;
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 0
15827: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15828: LD_INT 35
15830: PPUSH
15831: CALL_OW 67
// p := p + 1 ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 1
15847: PLUS
15848: ST_TO_ADDR
// for i in tmp do
15849: LD_ADDR_VAR 0 1
15853: PUSH
15854: LD_VAR 0 2
15858: PUSH
15859: FOR_IN
15860: IFFALSE 15891
// if GetLives ( i ) < 1000 then
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 256
15871: PUSH
15872: LD_INT 1000
15874: LESS
15875: IFFALSE 15889
// SetLives ( i , 1000 ) ;
15877: LD_VAR 0 1
15881: PPUSH
15882: LD_INT 1000
15884: PPUSH
15885: CALL_OW 234
15889: GO 15859
15891: POP
15892: POP
// until p > 20 ;
15893: LD_VAR 0 3
15897: PUSH
15898: LD_INT 20
15900: GREATER
15901: IFFALSE 15828
// end ;
15903: PPOPN 3
15905: END
// every 0 0$1 trigger StreamModeActive and sTime do
15906: LD_EXP 23
15910: PUSH
15911: LD_EXP 74
15915: AND
15916: IFFALSE 15951
15918: GO 15920
15920: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15921: LD_INT 28
15923: PPUSH
15924: LD_OWVAR 2
15928: PPUSH
15929: LD_INT 2
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15936: LD_INT 30
15938: PPUSH
15939: LD_OWVAR 2
15943: PPUSH
15944: LD_INT 2
15946: PPUSH
15947: CALL_OW 322
// end ;
15951: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15952: LD_EXP 23
15956: PUSH
15957: LD_EXP 75
15961: AND
15962: IFFALSE 16083
15964: GO 15966
15966: DISABLE
15967: LD_INT 0
15969: PPUSH
15970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: LD_INT 22
15978: PUSH
15979: LD_OWVAR 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 21
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 3
16000: PUSH
16001: LD_INT 23
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PPUSH
16020: CALL_OW 69
16024: ST_TO_ADDR
// if not tmp then
16025: LD_VAR 0 2
16029: NOT
16030: IFFALSE 16034
// exit ;
16032: GO 16083
// for i in tmp do
16034: LD_ADDR_VAR 0 1
16038: PUSH
16039: LD_VAR 0 2
16043: PUSH
16044: FOR_IN
16045: IFFALSE 16081
// begin if Crawls ( i ) then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 318
16056: IFFALSE 16067
// ComWalk ( i ) ;
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 138
// SetClass ( i , 2 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 2
16074: PPUSH
16075: CALL_OW 336
// end ;
16079: GO 16044
16081: POP
16082: POP
// end ;
16083: PPOPN 2
16085: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16086: LD_EXP 23
16090: PUSH
16091: LD_EXP 76
16095: AND
16096: IFFALSE 16384
16098: GO 16100
16100: DISABLE
16101: LD_INT 0
16103: PPUSH
16104: PPUSH
16105: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16106: LD_OWVAR 2
16110: PPUSH
16111: LD_INT 9
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16124: LD_INT 9
16126: PPUSH
16127: LD_OWVAR 2
16131: PPUSH
16132: CALL_OW 343
// uc_side := 9 ;
16136: LD_ADDR_OWVAR 20
16140: PUSH
16141: LD_INT 9
16143: ST_TO_ADDR
// uc_nation := 2 ;
16144: LD_ADDR_OWVAR 21
16148: PUSH
16149: LD_INT 2
16151: ST_TO_ADDR
// hc_name := Dark Warrior ;
16152: LD_ADDR_OWVAR 26
16156: PUSH
16157: LD_STRING Dark Warrior
16159: ST_TO_ADDR
// hc_gallery :=  ;
16160: LD_ADDR_OWVAR 33
16164: PUSH
16165: LD_STRING 
16167: ST_TO_ADDR
// hc_noskilllimit := true ;
16168: LD_ADDR_OWVAR 76
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16176: LD_ADDR_OWVAR 31
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: LD_INT 30
16186: PUSH
16187: LD_INT 30
16189: PUSH
16190: LD_INT 30
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: ST_TO_ADDR
// un := CreateHuman ;
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: CALL_OW 44
16208: ST_TO_ADDR
// hc_noskilllimit := false ;
16209: LD_ADDR_OWVAR 76
16213: PUSH
16214: LD_INT 0
16216: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 51
// ToLua ( playRanger() ) ;
16229: LD_STRING playRanger()
16231: PPUSH
16232: CALL_OW 559
// p := 0 ;
16236: LD_ADDR_VAR 0 2
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16244: LD_INT 35
16246: PPUSH
16247: CALL_OW 67
// p := p + 1 ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_VAR 0 2
16260: PUSH
16261: LD_INT 1
16263: PLUS
16264: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16265: LD_VAR 0 3
16269: PPUSH
16270: CALL_OW 256
16274: PUSH
16275: LD_INT 1000
16277: LESS
16278: IFFALSE 16292
// SetLives ( un , 1000 ) ;
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1000
16287: PPUSH
16288: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_INT 81
16299: PUSH
16300: LD_OWVAR 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 91
16311: PUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 30
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: CALL_OW 74
16343: PPUSH
16344: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16348: LD_VAR 0 2
16352: PUSH
16353: LD_INT 80
16355: GREATER
16356: PUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: CALL_OW 301
16366: OR
16367: IFFALSE 16244
// if un then
16369: LD_VAR 0 3
16373: IFFALSE 16384
// RemoveUnit ( un ) ;
16375: LD_VAR 0 3
16379: PPUSH
16380: CALL_OW 64
// end ;
16384: PPOPN 3
16386: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16387: LD_EXP 77
16391: IFFALSE 16507
16393: GO 16395
16395: DISABLE
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16401: LD_ADDR_VAR 0 2
16405: PUSH
16406: LD_INT 81
16408: PUSH
16409: LD_OWVAR 2
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 21
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16437: LD_STRING playComputer()
16439: PPUSH
16440: CALL_OW 559
// if not tmp then
16444: LD_VAR 0 2
16448: NOT
16449: IFFALSE 16453
// exit ;
16451: GO 16507
// for i in tmp do
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_VAR 0 2
16462: PUSH
16463: FOR_IN
16464: IFFALSE 16505
// for j := 1 to 4 do
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: DOUBLE
16472: LD_INT 1
16474: DEC
16475: ST_TO_ADDR
16476: LD_INT 4
16478: PUSH
16479: FOR_TO
16480: IFFALSE 16501
// SetSkill ( i , j , 10 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 10
16494: PPUSH
16495: CALL_OW 237
16499: GO 16479
16501: POP
16502: POP
16503: GO 16463
16505: POP
16506: POP
// end ;
16507: PPOPN 3
16509: END
// every 0 0$1 trigger s30 do var i , tmp ;
16510: LD_EXP 78
16514: IFFALSE 16583
16516: GO 16518
16518: DISABLE
16519: LD_INT 0
16521: PPUSH
16522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16523: LD_ADDR_VAR 0 2
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not tmp then
16545: LD_VAR 0 2
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 16583
// for i in tmp do
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: LD_VAR 0 2
16563: PUSH
16564: FOR_IN
16565: IFFALSE 16581
// SetLives ( i , 300 ) ;
16567: LD_VAR 0 1
16571: PPUSH
16572: LD_INT 300
16574: PPUSH
16575: CALL_OW 234
16579: GO 16564
16581: POP
16582: POP
// end ;
16583: PPOPN 2
16585: END
// every 0 0$1 trigger s60 do var i , tmp ;
16586: LD_EXP 79
16590: IFFALSE 16659
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16599: LD_ADDR_VAR 0 2
16603: PUSH
16604: LD_INT 22
16606: PUSH
16607: LD_OWVAR 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: ST_TO_ADDR
// if not tmp then
16621: LD_VAR 0 2
16625: NOT
16626: IFFALSE 16630
// exit ;
16628: GO 16659
// for i in tmp do
16630: LD_ADDR_VAR 0 1
16634: PUSH
16635: LD_VAR 0 2
16639: PUSH
16640: FOR_IN
16641: IFFALSE 16657
// SetLives ( i , 600 ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_INT 600
16650: PPUSH
16651: CALL_OW 234
16655: GO 16640
16657: POP
16658: POP
// end ;
16659: PPOPN 2
16661: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16662: LD_INT 0
16664: PPUSH
// case cmd of 301 :
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 301
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16710
16678: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16679: LD_VAR 0 6
16683: PPUSH
16684: LD_VAR 0 7
16688: PPUSH
16689: LD_VAR 0 8
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: CALL 17911 0 5
16708: GO 16831
16710: LD_INT 302
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16755
16718: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16719: LD_VAR 0 6
16723: PPUSH
16724: LD_VAR 0 7
16728: PPUSH
16729: LD_VAR 0 8
16733: PPUSH
16734: LD_VAR 0 9
16738: PPUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: LD_VAR 0 5
16748: PPUSH
16749: CALL 18002 0 6
16753: GO 16831
16755: LD_INT 303
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16800
16763: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16764: LD_VAR 0 6
16768: PPUSH
16769: LD_VAR 0 7
16773: PPUSH
16774: LD_VAR 0 8
16778: PPUSH
16779: LD_VAR 0 9
16783: PPUSH
16784: LD_VAR 0 4
16788: PPUSH
16789: LD_VAR 0 5
16793: PPUSH
16794: CALL 16836 0 6
16798: GO 16831
16800: LD_INT 304
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16830
16808: POP
// hHackTeleport ( unit , x , y ) ; end ;
16809: LD_VAR 0 2
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 5
16823: PPUSH
16824: CALL 18595 0 3
16828: GO 16831
16830: POP
// end ;
16831: LD_VAR 0 12
16835: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16840: LD_VAR 0 1
16844: PUSH
16845: LD_INT 1
16847: LESS
16848: PUSH
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 3
16856: GREATER
16857: OR
16858: PUSH
16859: LD_VAR 0 5
16863: PPUSH
16864: LD_VAR 0 6
16868: PPUSH
16869: CALL_OW 428
16873: OR
16874: IFFALSE 16878
// exit ;
16876: GO 17598
// uc_side := your_side ;
16878: LD_ADDR_OWVAR 20
16882: PUSH
16883: LD_OWVAR 2
16887: ST_TO_ADDR
// uc_nation := nation ;
16888: LD_ADDR_OWVAR 21
16892: PUSH
16893: LD_VAR 0 1
16897: ST_TO_ADDR
// bc_level = 1 ;
16898: LD_ADDR_OWVAR 43
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// case btype of 1 :
16906: LD_VAR 0 2
16910: PUSH
16911: LD_INT 1
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16930
16919: POP
// bc_type := b_depot ; 2 :
16920: LD_ADDR_OWVAR 42
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
16928: GO 17542
16930: LD_INT 2
16932: DOUBLE
16933: EQUAL
16934: IFTRUE 16938
16936: GO 16949
16938: POP
// bc_type := b_warehouse ; 3 :
16939: LD_ADDR_OWVAR 42
16943: PUSH
16944: LD_INT 1
16946: ST_TO_ADDR
16947: GO 17542
16949: LD_INT 3
16951: DOUBLE
16952: EQUAL
16953: IFTRUE 16957
16955: GO 16968
16957: POP
// bc_type := b_lab ; 4 .. 9 :
16958: LD_ADDR_OWVAR 42
16962: PUSH
16963: LD_INT 6
16965: ST_TO_ADDR
16966: GO 17542
16968: LD_INT 4
16970: DOUBLE
16971: GREATEREQUAL
16972: IFFALSE 16980
16974: LD_INT 9
16976: DOUBLE
16977: LESSEQUAL
16978: IFTRUE 16982
16980: GO 17034
16982: POP
// begin bc_type := b_lab_half ;
16983: LD_ADDR_OWVAR 42
16987: PUSH
16988: LD_INT 7
16990: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16991: LD_ADDR_OWVAR 44
16995: PUSH
16996: LD_INT 10
16998: PUSH
16999: LD_INT 11
17001: PUSH
17002: LD_INT 12
17004: PUSH
17005: LD_INT 15
17007: PUSH
17008: LD_INT 14
17010: PUSH
17011: LD_INT 13
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: LD_INT 3
17029: MINUS
17030: ARRAY
17031: ST_TO_ADDR
// end ; 10 .. 13 :
17032: GO 17542
17034: LD_INT 10
17036: DOUBLE
17037: GREATEREQUAL
17038: IFFALSE 17046
17040: LD_INT 13
17042: DOUBLE
17043: LESSEQUAL
17044: IFTRUE 17048
17046: GO 17125
17048: POP
// begin bc_type := b_lab_full ;
17049: LD_ADDR_OWVAR 42
17053: PUSH
17054: LD_INT 8
17056: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17057: LD_ADDR_OWVAR 44
17061: PUSH
17062: LD_INT 10
17064: PUSH
17065: LD_INT 12
17067: PUSH
17068: LD_INT 14
17070: PUSH
17071: LD_INT 13
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_VAR 0 2
17084: PUSH
17085: LD_INT 9
17087: MINUS
17088: ARRAY
17089: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17090: LD_ADDR_OWVAR 45
17094: PUSH
17095: LD_INT 11
17097: PUSH
17098: LD_INT 15
17100: PUSH
17101: LD_INT 12
17103: PUSH
17104: LD_INT 15
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: PUSH
17113: LD_VAR 0 2
17117: PUSH
17118: LD_INT 9
17120: MINUS
17121: ARRAY
17122: ST_TO_ADDR
// end ; 14 :
17123: GO 17542
17125: LD_INT 14
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17144
17133: POP
// bc_type := b_workshop ; 15 :
17134: LD_ADDR_OWVAR 42
17138: PUSH
17139: LD_INT 2
17141: ST_TO_ADDR
17142: GO 17542
17144: LD_INT 15
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17163
17152: POP
// bc_type := b_factory ; 16 :
17153: LD_ADDR_OWVAR 42
17157: PUSH
17158: LD_INT 3
17160: ST_TO_ADDR
17161: GO 17542
17163: LD_INT 16
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17182
17171: POP
// bc_type := b_ext_gun ; 17 :
17172: LD_ADDR_OWVAR 42
17176: PUSH
17177: LD_INT 17
17179: ST_TO_ADDR
17180: GO 17542
17182: LD_INT 17
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17218
17190: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17191: LD_ADDR_OWVAR 42
17195: PUSH
17196: LD_INT 19
17198: PUSH
17199: LD_INT 23
17201: PUSH
17202: LD_INT 19
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: ST_TO_ADDR
17216: GO 17542
17218: LD_INT 18
17220: DOUBLE
17221: EQUAL
17222: IFTRUE 17226
17224: GO 17237
17226: POP
// bc_type := b_ext_radar ; 19 :
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 20
17234: ST_TO_ADDR
17235: GO 17542
17237: LD_INT 19
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17256
17245: POP
// bc_type := b_ext_radio ; 20 :
17246: LD_ADDR_OWVAR 42
17250: PUSH
17251: LD_INT 22
17253: ST_TO_ADDR
17254: GO 17542
17256: LD_INT 20
17258: DOUBLE
17259: EQUAL
17260: IFTRUE 17264
17262: GO 17275
17264: POP
// bc_type := b_ext_siberium ; 21 :
17265: LD_ADDR_OWVAR 42
17269: PUSH
17270: LD_INT 21
17272: ST_TO_ADDR
17273: GO 17542
17275: LD_INT 21
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17294
17283: POP
// bc_type := b_ext_computer ; 22 :
17284: LD_ADDR_OWVAR 42
17288: PUSH
17289: LD_INT 24
17291: ST_TO_ADDR
17292: GO 17542
17294: LD_INT 22
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17313
17302: POP
// bc_type := b_ext_track ; 23 :
17303: LD_ADDR_OWVAR 42
17307: PUSH
17308: LD_INT 16
17310: ST_TO_ADDR
17311: GO 17542
17313: LD_INT 23
17315: DOUBLE
17316: EQUAL
17317: IFTRUE 17321
17319: GO 17332
17321: POP
// bc_type := b_ext_laser ; 24 :
17322: LD_ADDR_OWVAR 42
17326: PUSH
17327: LD_INT 25
17329: ST_TO_ADDR
17330: GO 17542
17332: LD_INT 24
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17351
17340: POP
// bc_type := b_control_tower ; 25 :
17341: LD_ADDR_OWVAR 42
17345: PUSH
17346: LD_INT 36
17348: ST_TO_ADDR
17349: GO 17542
17351: LD_INT 25
17353: DOUBLE
17354: EQUAL
17355: IFTRUE 17359
17357: GO 17370
17359: POP
// bc_type := b_breastwork ; 26 :
17360: LD_ADDR_OWVAR 42
17364: PUSH
17365: LD_INT 31
17367: ST_TO_ADDR
17368: GO 17542
17370: LD_INT 26
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17389
17378: POP
// bc_type := b_bunker ; 27 :
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 32
17386: ST_TO_ADDR
17387: GO 17542
17389: LD_INT 27
17391: DOUBLE
17392: EQUAL
17393: IFTRUE 17397
17395: GO 17408
17397: POP
// bc_type := b_turret ; 28 :
17398: LD_ADDR_OWVAR 42
17402: PUSH
17403: LD_INT 33
17405: ST_TO_ADDR
17406: GO 17542
17408: LD_INT 28
17410: DOUBLE
17411: EQUAL
17412: IFTRUE 17416
17414: GO 17427
17416: POP
// bc_type := b_armoury ; 29 :
17417: LD_ADDR_OWVAR 42
17421: PUSH
17422: LD_INT 4
17424: ST_TO_ADDR
17425: GO 17542
17427: LD_INT 29
17429: DOUBLE
17430: EQUAL
17431: IFTRUE 17435
17433: GO 17446
17435: POP
// bc_type := b_barracks ; 30 :
17436: LD_ADDR_OWVAR 42
17440: PUSH
17441: LD_INT 5
17443: ST_TO_ADDR
17444: GO 17542
17446: LD_INT 30
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17465
17454: POP
// bc_type := b_solar_power ; 31 :
17455: LD_ADDR_OWVAR 42
17459: PUSH
17460: LD_INT 27
17462: ST_TO_ADDR
17463: GO 17542
17465: LD_INT 31
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17473
17471: GO 17484
17473: POP
// bc_type := b_oil_power ; 32 :
17474: LD_ADDR_OWVAR 42
17478: PUSH
17479: LD_INT 26
17481: ST_TO_ADDR
17482: GO 17542
17484: LD_INT 32
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 17503
17492: POP
// bc_type := b_siberite_power ; 33 :
17493: LD_ADDR_OWVAR 42
17497: PUSH
17498: LD_INT 28
17500: ST_TO_ADDR
17501: GO 17542
17503: LD_INT 33
17505: DOUBLE
17506: EQUAL
17507: IFTRUE 17511
17509: GO 17522
17511: POP
// bc_type := b_oil_mine ; 34 :
17512: LD_ADDR_OWVAR 42
17516: PUSH
17517: LD_INT 29
17519: ST_TO_ADDR
17520: GO 17542
17522: LD_INT 34
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17541
17530: POP
// bc_type := b_siberite_mine ; end ;
17531: LD_ADDR_OWVAR 42
17535: PUSH
17536: LD_INT 30
17538: ST_TO_ADDR
17539: GO 17542
17541: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17542: LD_ADDR_VAR 0 8
17546: PUSH
17547: LD_VAR 0 5
17551: PPUSH
17552: LD_VAR 0 6
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: CALL_OW 47
17566: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17567: LD_OWVAR 42
17571: PUSH
17572: LD_INT 32
17574: PUSH
17575: LD_INT 33
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: IN
17582: IFFALSE 17598
// PlaceWeaponTurret ( b , weapon ) ;
17584: LD_VAR 0 8
17588: PPUSH
17589: LD_VAR 0 4
17593: PPUSH
17594: CALL_OW 431
// end ;
17598: LD_VAR 0 7
17602: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17603: LD_INT 0
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17609: LD_ADDR_VAR 0 4
17613: PUSH
17614: LD_INT 22
17616: PUSH
17617: LD_OWVAR 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 30
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 30
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: ST_TO_ADDR
// if not tmp then
17663: LD_VAR 0 4
17667: NOT
17668: IFFALSE 17672
// exit ;
17670: GO 17731
// for i in tmp do
17672: LD_ADDR_VAR 0 2
17676: PUSH
17677: LD_VAR 0 4
17681: PUSH
17682: FOR_IN
17683: IFFALSE 17729
// for j = 1 to 3 do
17685: LD_ADDR_VAR 0 3
17689: PUSH
17690: DOUBLE
17691: LD_INT 1
17693: DEC
17694: ST_TO_ADDR
17695: LD_INT 3
17697: PUSH
17698: FOR_TO
17699: IFFALSE 17725
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17701: LD_VAR 0 2
17705: PPUSH
17706: CALL_OW 274
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 99999
17718: PPUSH
17719: CALL_OW 277
17723: GO 17698
17725: POP
17726: POP
17727: GO 17682
17729: POP
17730: POP
// end ;
17731: LD_VAR 0 1
17735: RET
// export function hHackSetLevel10 ; var i , j ; begin
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: PUSH
17761: FOR_IN
17762: IFFALSE 17814
// if IsSelected ( i ) then
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL_OW 306
17773: IFFALSE 17812
// begin for j := 1 to 4 do
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: DOUBLE
17781: LD_INT 1
17783: DEC
17784: ST_TO_ADDR
17785: LD_INT 4
17787: PUSH
17788: FOR_TO
17789: IFFALSE 17810
// SetSkill ( i , j , 10 ) ;
17791: LD_VAR 0 2
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: CALL_OW 237
17808: GO 17788
17810: POP
17811: POP
// end ;
17812: GO 17761
17814: POP
17815: POP
// end ;
17816: LD_VAR 0 1
17820: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17821: LD_INT 0
17823: PPUSH
17824: PPUSH
17825: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_OWVAR 2
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: PUSH
17862: FOR_IN
17863: IFFALSE 17904
// begin for j := 1 to 4 do
17865: LD_ADDR_VAR 0 3
17869: PUSH
17870: DOUBLE
17871: LD_INT 1
17873: DEC
17874: ST_TO_ADDR
17875: LD_INT 4
17877: PUSH
17878: FOR_TO
17879: IFFALSE 17900
// SetSkill ( i , j , 10 ) ;
17881: LD_VAR 0 2
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 10
17893: PPUSH
17894: CALL_OW 237
17898: GO 17878
17900: POP
17901: POP
// end ;
17902: GO 17862
17904: POP
17905: POP
// end ;
17906: LD_VAR 0 1
17910: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17911: LD_INT 0
17913: PPUSH
// uc_side := your_side ;
17914: LD_ADDR_OWVAR 20
17918: PUSH
17919: LD_OWVAR 2
17923: ST_TO_ADDR
// uc_nation := nation ;
17924: LD_ADDR_OWVAR 21
17928: PUSH
17929: LD_VAR 0 1
17933: ST_TO_ADDR
// InitHc ;
17934: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17938: LD_INT 0
17940: PPUSH
17941: LD_VAR 0 2
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17955: LD_VAR 0 4
17959: PPUSH
17960: LD_VAR 0 5
17964: PPUSH
17965: CALL_OW 428
17969: PUSH
17970: LD_INT 0
17972: EQUAL
17973: IFFALSE 17997
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17975: CALL_OW 44
17979: PPUSH
17980: LD_VAR 0 4
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: CALL_OW 48
// end ;
17997: LD_VAR 0 6
18001: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
// uc_side := your_side ;
18006: LD_ADDR_OWVAR 20
18010: PUSH
18011: LD_OWVAR 2
18015: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18016: LD_VAR 0 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 4
18032: PUSH
18033: LD_INT 5
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: IN
18043: IFFALSE 18055
// uc_nation := nation_american else
18045: LD_ADDR_OWVAR 21
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
18053: GO 18098
// if chassis in [ 11 , 12 , 13 , 14 ] then
18055: LD_VAR 0 1
18059: PUSH
18060: LD_INT 11
18062: PUSH
18063: LD_INT 12
18065: PUSH
18066: LD_INT 13
18068: PUSH
18069: LD_INT 14
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: IN
18078: IFFALSE 18090
// uc_nation := nation_arabian else
18080: LD_ADDR_OWVAR 21
18084: PUSH
18085: LD_INT 2
18087: ST_TO_ADDR
18088: GO 18098
// uc_nation := nation_russian ;
18090: LD_ADDR_OWVAR 21
18094: PUSH
18095: LD_INT 3
18097: ST_TO_ADDR
// vc_chassis := chassis ;
18098: LD_ADDR_OWVAR 37
18102: PUSH
18103: LD_VAR 0 1
18107: ST_TO_ADDR
// vc_engine := engine ;
18108: LD_ADDR_OWVAR 39
18112: PUSH
18113: LD_VAR 0 2
18117: ST_TO_ADDR
// vc_control := control ;
18118: LD_ADDR_OWVAR 38
18122: PUSH
18123: LD_VAR 0 3
18127: ST_TO_ADDR
// vc_weapon := weapon ;
18128: LD_ADDR_OWVAR 40
18132: PUSH
18133: LD_VAR 0 4
18137: ST_TO_ADDR
// un := CreateVehicle ;
18138: LD_ADDR_VAR 0 8
18142: PUSH
18143: CALL_OW 45
18147: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18148: LD_VAR 0 8
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: LD_INT 5
18158: PPUSH
18159: CALL_OW 12
18163: PPUSH
18164: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18168: LD_VAR 0 8
18172: PPUSH
18173: LD_VAR 0 5
18177: PPUSH
18178: LD_VAR 0 6
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 48
// end ;
18190: LD_VAR 0 7
18194: RET
// export hInvincible ; every 1 do
18195: GO 18197
18197: DISABLE
// hInvincible := [ ] ;
18198: LD_ADDR_EXP 80
18202: PUSH
18203: EMPTY
18204: ST_TO_ADDR
18205: END
// every 10 do var i ;
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
// begin enable ;
18212: ENABLE
// if not hInvincible then
18213: LD_EXP 80
18217: NOT
18218: IFFALSE 18222
// exit ;
18220: GO 18266
// for i in hInvincible do
18222: LD_ADDR_VAR 0 1
18226: PUSH
18227: LD_EXP 80
18231: PUSH
18232: FOR_IN
18233: IFFALSE 18264
// if GetLives ( i ) < 1000 then
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 256
18244: PUSH
18245: LD_INT 1000
18247: LESS
18248: IFFALSE 18262
// SetLives ( i , 1000 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 1000
18257: PPUSH
18258: CALL_OW 234
18262: GO 18232
18264: POP
18265: POP
// end ;
18266: PPOPN 1
18268: END
// export function hHackInvincible ; var i ; begin
18269: LD_INT 0
18271: PPUSH
18272: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18273: LD_ADDR_VAR 0 2
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 21
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: PPUSH
18306: CALL_OW 69
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18373
// if IsSelected ( i ) then
18314: LD_VAR 0 2
18318: PPUSH
18319: CALL_OW 306
18323: IFFALSE 18371
// begin if i in hInvincible then
18325: LD_VAR 0 2
18329: PUSH
18330: LD_EXP 80
18334: IN
18335: IFFALSE 18355
// hInvincible := hInvincible diff i else
18337: LD_ADDR_EXP 80
18341: PUSH
18342: LD_EXP 80
18346: PUSH
18347: LD_VAR 0 2
18351: DIFF
18352: ST_TO_ADDR
18353: GO 18371
// hInvincible := hInvincible union i ;
18355: LD_ADDR_EXP 80
18359: PUSH
18360: LD_EXP 80
18364: PUSH
18365: LD_VAR 0 2
18369: UNION
18370: ST_TO_ADDR
// end ;
18371: GO 18311
18373: POP
18374: POP
// end ;
18375: LD_VAR 0 1
18379: RET
// export function hHackInvisible ; var i , j ; begin
18380: LD_INT 0
18382: PPUSH
18383: PPUSH
18384: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_INT 21
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PUSH
18405: FOR_IN
18406: IFFALSE 18430
// if IsSelected ( i ) then
18408: LD_VAR 0 2
18412: PPUSH
18413: CALL_OW 306
18417: IFFALSE 18428
// ComForceInvisible ( i ) ;
18419: LD_VAR 0 2
18423: PPUSH
18424: CALL_OW 496
18428: GO 18405
18430: POP
18431: POP
// end ;
18432: LD_VAR 0 1
18436: RET
// export function hHackChangeYourSide ; begin
18437: LD_INT 0
18439: PPUSH
// if your_side = 8 then
18440: LD_OWVAR 2
18444: PUSH
18445: LD_INT 8
18447: EQUAL
18448: IFFALSE 18460
// your_side := 0 else
18450: LD_ADDR_OWVAR 2
18454: PUSH
18455: LD_INT 0
18457: ST_TO_ADDR
18458: GO 18474
// your_side := your_side + 1 ;
18460: LD_ADDR_OWVAR 2
18464: PUSH
18465: LD_OWVAR 2
18469: PUSH
18470: LD_INT 1
18472: PLUS
18473: ST_TO_ADDR
// end ;
18474: LD_VAR 0 1
18478: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// for i in all_units do
18484: LD_ADDR_VAR 0 2
18488: PUSH
18489: LD_OWVAR 3
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18573
// if IsSelected ( i ) then
18497: LD_VAR 0 2
18501: PPUSH
18502: CALL_OW 306
18506: IFFALSE 18571
// begin j := GetSide ( i ) ;
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 255
18522: ST_TO_ADDR
// if j = 8 then
18523: LD_VAR 0 3
18527: PUSH
18528: LD_INT 8
18530: EQUAL
18531: IFFALSE 18543
// j := 0 else
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
18541: GO 18557
// j := j + 1 ;
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: LD_VAR 0 3
18552: PUSH
18553: LD_INT 1
18555: PLUS
18556: ST_TO_ADDR
// SetSide ( i , j ) ;
18557: LD_VAR 0 2
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: CALL_OW 235
// end ;
18571: GO 18494
18573: POP
18574: POP
// end ;
18575: LD_VAR 0 1
18579: RET
// export function hHackFog ; begin
18580: LD_INT 0
18582: PPUSH
// FogOff ( true ) ;
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 344
// end ;
18590: LD_VAR 0 1
18594: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18595: LD_INT 0
18597: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 483
// CenterOnXY ( x , y ) ;
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: CALL_OW 84
// end ;
18637: LD_VAR 0 4
18641: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18646: LD_VAR 0 1
18650: NOT
18651: PUSH
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: CALL_OW 488
18666: NOT
18667: OR
18668: PUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 266
18678: PUSH
18679: LD_INT 3
18681: NONEQUAL
18682: PUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 247
18692: PUSH
18693: LD_INT 1
18695: EQUAL
18696: NOT
18697: AND
18698: OR
18699: IFFALSE 18703
// exit ;
18701: GO 18852
// if GetType ( factory ) = unit_human then
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 247
18712: PUSH
18713: LD_INT 1
18715: EQUAL
18716: IFFALSE 18733
// factory := IsInUnit ( factory ) ;
18718: LD_ADDR_VAR 0 1
18722: PUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL_OW 310
18732: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL_OW 266
18742: PUSH
18743: LD_INT 3
18745: NONEQUAL
18746: IFFALSE 18750
// exit ;
18748: GO 18852
// if HexInfo ( x , y ) = factory then
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: CALL_OW 428
18764: PUSH
18765: LD_VAR 0 1
18769: EQUAL
18770: IFFALSE 18797
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18772: LD_ADDR_EXP 81
18776: PUSH
18777: LD_EXP 81
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: LD_INT 0
18789: PPUSH
18790: CALL_OW 1
18794: ST_TO_ADDR
18795: GO 18848
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18797: LD_ADDR_EXP 81
18801: PUSH
18802: LD_EXP 81
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 255
18821: PUSH
18822: LD_VAR 0 1
18826: PUSH
18827: LD_VAR 0 2
18831: PUSH
18832: LD_VAR 0 3
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 1
18847: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18848: CALL 18857 0 0
// end ;
18852: LD_VAR 0 4
18856: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18857: LD_INT 0
18859: PPUSH
18860: PPUSH
18861: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18862: LD_STRING resetFactoryWaypoint();
18864: PPUSH
18865: CALL_OW 559
// if factoryWaypoints then
18869: LD_EXP 81
18873: IFFALSE 18999
// begin list := PrepareArray ( factoryWaypoints ) ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_EXP 81
18884: PPUSH
18885: CALL 65754 0 1
18889: ST_TO_ADDR
// for i := 1 to list do
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: DOUBLE
18896: LD_INT 1
18898: DEC
18899: ST_TO_ADDR
18900: LD_VAR 0 3
18904: PUSH
18905: FOR_TO
18906: IFFALSE 18997
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18908: LD_STRING setFactoryWaypointXY(
18910: PUSH
18911: LD_VAR 0 3
18915: PUSH
18916: LD_VAR 0 2
18920: ARRAY
18921: PUSH
18922: LD_INT 1
18924: ARRAY
18925: STR
18926: PUSH
18927: LD_STRING ,
18929: STR
18930: PUSH
18931: LD_VAR 0 3
18935: PUSH
18936: LD_VAR 0 2
18940: ARRAY
18941: PUSH
18942: LD_INT 2
18944: ARRAY
18945: STR
18946: PUSH
18947: LD_STRING ,
18949: STR
18950: PUSH
18951: LD_VAR 0 3
18955: PUSH
18956: LD_VAR 0 2
18960: ARRAY
18961: PUSH
18962: LD_INT 3
18964: ARRAY
18965: STR
18966: PUSH
18967: LD_STRING ,
18969: STR
18970: PUSH
18971: LD_VAR 0 3
18975: PUSH
18976: LD_VAR 0 2
18980: ARRAY
18981: PUSH
18982: LD_INT 4
18984: ARRAY
18985: STR
18986: PUSH
18987: LD_STRING )
18989: STR
18990: PPUSH
18991: CALL_OW 559
18995: GO 18905
18997: POP
18998: POP
// end ; end ;
18999: LD_VAR 0 1
19003: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19004: LD_INT 0
19006: PPUSH
// if HexInfo ( x , y ) = warehouse then
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL_OW 428
19021: PUSH
19022: LD_VAR 0 1
19026: EQUAL
19027: IFFALSE 19054
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19029: LD_ADDR_EXP 82
19033: PUSH
19034: LD_EXP 82
19038: PPUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_INT 0
19046: PPUSH
19047: CALL_OW 1
19051: ST_TO_ADDR
19052: GO 19105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19054: LD_ADDR_EXP 82
19058: PUSH
19059: LD_EXP 82
19063: PPUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 255
19078: PUSH
19079: LD_VAR 0 1
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_VAR 0 3
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 1
19104: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19105: CALL 19114 0 0
// end ;
19109: LD_VAR 0 4
19113: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19119: LD_STRING resetWarehouseGatheringPoints();
19121: PPUSH
19122: CALL_OW 559
// if warehouseGatheringPoints then
19126: LD_EXP 82
19130: IFFALSE 19256
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: LD_EXP 82
19141: PPUSH
19142: CALL 65754 0 1
19146: ST_TO_ADDR
// for i := 1 to list do
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: DOUBLE
19153: LD_INT 1
19155: DEC
19156: ST_TO_ADDR
19157: LD_VAR 0 3
19161: PUSH
19162: FOR_TO
19163: IFFALSE 19254
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19165: LD_STRING setWarehouseGatheringPointXY(
19167: PUSH
19168: LD_VAR 0 3
19172: PUSH
19173: LD_VAR 0 2
19177: ARRAY
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: STR
19183: PUSH
19184: LD_STRING ,
19186: STR
19187: PUSH
19188: LD_VAR 0 3
19192: PUSH
19193: LD_VAR 0 2
19197: ARRAY
19198: PUSH
19199: LD_INT 2
19201: ARRAY
19202: STR
19203: PUSH
19204: LD_STRING ,
19206: STR
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_VAR 0 2
19217: ARRAY
19218: PUSH
19219: LD_INT 3
19221: ARRAY
19222: STR
19223: PUSH
19224: LD_STRING ,
19226: STR
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: LD_VAR 0 2
19237: ARRAY
19238: PUSH
19239: LD_INT 4
19241: ARRAY
19242: STR
19243: PUSH
19244: LD_STRING )
19246: STR
19247: PPUSH
19248: CALL_OW 559
19252: GO 19162
19254: POP
19255: POP
// end ; end ;
19256: LD_VAR 0 1
19260: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19261: LD_EXP 82
19265: IFFALSE 19952
19267: GO 19269
19269: DISABLE
19270: LD_INT 0
19272: PPUSH
19273: PPUSH
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
19280: PPUSH
// begin enable ;
19281: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: LD_EXP 82
19291: PPUSH
19292: CALL 65754 0 1
19296: ST_TO_ADDR
// if not list then
19297: LD_VAR 0 3
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19952
// for i := 1 to list do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: DOUBLE
19312: LD_INT 1
19314: DEC
19315: ST_TO_ADDR
19316: LD_VAR 0 3
19320: PUSH
19321: FOR_TO
19322: IFFALSE 19950
// begin depot := list [ i ] [ 2 ] ;
19324: LD_ADDR_VAR 0 8
19328: PUSH
19329: LD_VAR 0 3
19333: PUSH
19334: LD_VAR 0 1
19338: ARRAY
19339: PUSH
19340: LD_INT 2
19342: ARRAY
19343: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19344: LD_ADDR_VAR 0 5
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_VAR 0 1
19358: ARRAY
19359: PUSH
19360: LD_INT 1
19362: ARRAY
19363: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19364: LD_VAR 0 8
19368: PPUSH
19369: CALL_OW 301
19373: PUSH
19374: LD_VAR 0 5
19378: PUSH
19379: LD_VAR 0 8
19383: PPUSH
19384: CALL_OW 255
19388: NONEQUAL
19389: OR
19390: IFFALSE 19419
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19392: LD_ADDR_EXP 82
19396: PUSH
19397: LD_EXP 82
19401: PPUSH
19402: LD_VAR 0 8
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: CALL_OW 1
19414: ST_TO_ADDR
// exit ;
19415: POP
19416: POP
19417: GO 19952
// end ; x := list [ i ] [ 3 ] ;
19419: LD_ADDR_VAR 0 6
19423: PUSH
19424: LD_VAR 0 3
19428: PUSH
19429: LD_VAR 0 1
19433: ARRAY
19434: PUSH
19435: LD_INT 3
19437: ARRAY
19438: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19439: LD_ADDR_VAR 0 7
19443: PUSH
19444: LD_VAR 0 3
19448: PUSH
19449: LD_VAR 0 1
19453: ARRAY
19454: PUSH
19455: LD_INT 4
19457: ARRAY
19458: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19459: LD_ADDR_VAR 0 9
19463: PUSH
19464: LD_VAR 0 6
19468: PPUSH
19469: LD_VAR 0 7
19473: PPUSH
19474: LD_INT 16
19476: PPUSH
19477: CALL 64338 0 3
19481: ST_TO_ADDR
// if not cratesNearbyPoint then
19482: LD_VAR 0 9
19486: NOT
19487: IFFALSE 19493
// exit ;
19489: POP
19490: POP
19491: GO 19952
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_INT 22
19500: PUSH
19501: LD_VAR 0 5
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: LD_INT 60
19515: PUSH
19516: EMPTY
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 91
19525: PUSH
19526: LD_VAR 0 8
19530: PUSH
19531: LD_INT 6
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 16
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: PPUSH
19573: CALL_OW 69
19577: PUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: CALL_OW 313
19587: PPUSH
19588: LD_INT 3
19590: PUSH
19591: LD_INT 60
19593: PUSH
19594: EMPTY
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 25
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 25
19616: PUSH
19617: LD_INT 16
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 72
19637: UNION
19638: ST_TO_ADDR
// if tmp then
19639: LD_VAR 0 4
19643: IFFALSE 19723
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19645: LD_ADDR_VAR 0 4
19649: PUSH
19650: LD_VAR 0 4
19654: PPUSH
19655: LD_INT 3
19657: PPUSH
19658: CALL 62305 0 2
19662: ST_TO_ADDR
// for j in tmp do
19663: LD_ADDR_VAR 0 2
19667: PUSH
19668: LD_VAR 0 4
19672: PUSH
19673: FOR_IN
19674: IFFALSE 19717
// begin if IsInUnit ( j ) then
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL_OW 310
19685: IFFALSE 19696
// ComExit ( j ) ;
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL 62388 0 1
// AddComCollect ( j , x , y ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 6
19705: PPUSH
19706: LD_VAR 0 7
19710: PPUSH
19711: CALL_OW 177
// end ;
19715: GO 19673
19717: POP
19718: POP
// exit ;
19719: POP
19720: POP
19721: GO 19952
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19723: LD_ADDR_VAR 0 4
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_VAR 0 5
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 91
19742: PUSH
19743: LD_VAR 0 8
19747: PUSH
19748: LD_INT 8
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: LD_INT 34
19761: PUSH
19762: LD_INT 12
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 34
19771: PUSH
19772: LD_INT 51
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 34
19781: PUSH
19782: LD_INT 32
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 34
19791: PUSH
19792: LD_EXP 95
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: ST_TO_ADDR
// if tmp then
19818: LD_VAR 0 4
19822: IFFALSE 19948
// begin for j in tmp do
19824: LD_ADDR_VAR 0 2
19828: PUSH
19829: LD_VAR 0 4
19833: PUSH
19834: FOR_IN
19835: IFFALSE 19946
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19837: LD_VAR 0 2
19841: PPUSH
19842: CALL_OW 262
19846: PUSH
19847: LD_INT 3
19849: EQUAL
19850: PUSH
19851: LD_VAR 0 2
19855: PPUSH
19856: CALL_OW 261
19860: PUSH
19861: LD_INT 20
19863: GREATER
19864: OR
19865: PUSH
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 314
19875: NOT
19876: AND
19877: PUSH
19878: LD_VAR 0 2
19882: PPUSH
19883: CALL_OW 263
19887: PUSH
19888: LD_INT 1
19890: NONEQUAL
19891: PUSH
19892: LD_VAR 0 2
19896: PPUSH
19897: CALL_OW 311
19901: OR
19902: AND
19903: IFFALSE 19944
// begin ComCollect ( j , x , y ) ;
19905: LD_VAR 0 2
19909: PPUSH
19910: LD_VAR 0 6
19914: PPUSH
19915: LD_VAR 0 7
19919: PPUSH
19920: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19924: LD_VAR 0 2
19928: PPUSH
19929: LD_VAR 0 8
19933: PPUSH
19934: CALL_OW 172
// exit ;
19938: POP
19939: POP
19940: POP
19941: POP
19942: GO 19952
// end ;
19944: GO 19834
19946: POP
19947: POP
// end ; end ;
19948: GO 19321
19950: POP
19951: POP
// end ; end_of_file
19952: PPOPN 9
19954: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19955: LD_VAR 0 1
19959: PUSH
19960: LD_INT 200
19962: DOUBLE
19963: GREATEREQUAL
19964: IFFALSE 19972
19966: LD_INT 299
19968: DOUBLE
19969: LESSEQUAL
19970: IFTRUE 19974
19972: GO 20006
19974: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19975: LD_VAR 0 1
19979: PPUSH
19980: LD_VAR 0 2
19984: PPUSH
19985: LD_VAR 0 3
19989: PPUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: LD_VAR 0 5
19999: PPUSH
20000: CALL 20496 0 5
20004: GO 20083
20006: LD_INT 300
20008: DOUBLE
20009: GREATEREQUAL
20010: IFFALSE 20018
20012: LD_INT 399
20014: DOUBLE
20015: LESSEQUAL
20016: IFTRUE 20020
20018: GO 20082
20020: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_VAR 0 2
20030: PPUSH
20031: LD_VAR 0 3
20035: PPUSH
20036: LD_VAR 0 4
20040: PPUSH
20041: LD_VAR 0 5
20045: PPUSH
20046: LD_VAR 0 6
20050: PPUSH
20051: LD_VAR 0 7
20055: PPUSH
20056: LD_VAR 0 8
20060: PPUSH
20061: LD_VAR 0 9
20065: PPUSH
20066: LD_VAR 0 10
20070: PPUSH
20071: LD_VAR 0 11
20075: PPUSH
20076: CALL 16662 0 11
20080: GO 20083
20082: POP
// end ;
20083: PPOPN 11
20085: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_VAR 0 3
20100: PPUSH
20101: LD_VAR 0 4
20105: PPUSH
20106: LD_VAR 0 5
20110: PPUSH
20111: CALL 20232 0 5
// end ; end_of_file
20115: PPOPN 5
20117: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20118: LD_INT 0
20120: PPUSH
20121: PPUSH
20122: PPUSH
20123: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20124: LD_VAR 0 1
20128: PPUSH
20129: CALL_OW 264
20133: PUSH
20134: LD_EXP 98
20138: EQUAL
20139: IFFALSE 20211
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20141: LD_INT 68
20143: PPUSH
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 255
20153: PPUSH
20154: CALL_OW 321
20158: PUSH
20159: LD_INT 2
20161: EQUAL
20162: IFFALSE 20174
// eff := 70 else
20164: LD_ADDR_VAR 0 4
20168: PUSH
20169: LD_INT 70
20171: ST_TO_ADDR
20172: GO 20182
// eff := 30 ;
20174: LD_ADDR_VAR 0 4
20178: PUSH
20179: LD_INT 30
20181: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20182: LD_VAR 0 1
20186: PPUSH
20187: CALL_OW 250
20191: PPUSH
20192: LD_VAR 0 1
20196: PPUSH
20197: CALL_OW 251
20201: PPUSH
20202: LD_VAR 0 4
20206: PPUSH
20207: CALL_OW 495
// end ; end ;
20211: LD_VAR 0 2
20215: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20216: LD_INT 0
20218: PPUSH
// end ;
20219: LD_VAR 0 4
20223: RET
// export function SOS_Command ( cmd ) ; begin
20224: LD_INT 0
20226: PPUSH
// end ;
20227: LD_VAR 0 2
20231: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20232: LD_INT 0
20234: PPUSH
// end ;
20235: LD_VAR 0 6
20239: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
// if not vehicle or not factory then
20244: LD_VAR 0 1
20248: NOT
20249: PUSH
20250: LD_VAR 0 2
20254: NOT
20255: OR
20256: IFFALSE 20260
// exit ;
20258: GO 20491
// if factoryWaypoints >= factory then
20260: LD_EXP 81
20264: PUSH
20265: LD_VAR 0 2
20269: GREATEREQUAL
20270: IFFALSE 20491
// if factoryWaypoints [ factory ] then
20272: LD_EXP 81
20276: PUSH
20277: LD_VAR 0 2
20281: ARRAY
20282: IFFALSE 20491
// begin if GetControl ( vehicle ) = control_manual then
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 263
20293: PUSH
20294: LD_INT 1
20296: EQUAL
20297: IFFALSE 20378
// begin driver := IsDrivenBy ( vehicle ) ;
20299: LD_ADDR_VAR 0 4
20303: PUSH
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 311
20313: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20314: LD_VAR 0 4
20318: PPUSH
20319: LD_EXP 81
20323: PUSH
20324: LD_VAR 0 2
20328: ARRAY
20329: PUSH
20330: LD_INT 3
20332: ARRAY
20333: PPUSH
20334: LD_EXP 81
20338: PUSH
20339: LD_VAR 0 2
20343: ARRAY
20344: PUSH
20345: LD_INT 4
20347: ARRAY
20348: PPUSH
20349: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20353: LD_VAR 0 4
20357: PPUSH
20358: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20362: LD_VAR 0 4
20366: PPUSH
20367: LD_VAR 0 2
20371: PPUSH
20372: CALL_OW 180
// end else
20376: GO 20491
// if GetControl ( vehicle ) = control_remote then
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 263
20387: PUSH
20388: LD_INT 2
20390: EQUAL
20391: IFFALSE 20452
// begin wait ( 0 0$2 ) ;
20393: LD_INT 70
20395: PPUSH
20396: CALL_OW 67
// if Connect ( vehicle ) then
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL 32699 0 1
20409: IFFALSE 20450
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20411: LD_VAR 0 1
20415: PPUSH
20416: LD_EXP 81
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: PUSH
20427: LD_INT 3
20429: ARRAY
20430: PPUSH
20431: LD_EXP 81
20435: PUSH
20436: LD_VAR 0 2
20440: ARRAY
20441: PUSH
20442: LD_INT 4
20444: ARRAY
20445: PPUSH
20446: CALL_OW 171
// end else
20450: GO 20491
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20452: LD_VAR 0 1
20456: PPUSH
20457: LD_EXP 81
20461: PUSH
20462: LD_VAR 0 2
20466: ARRAY
20467: PUSH
20468: LD_INT 3
20470: ARRAY
20471: PPUSH
20472: LD_EXP 81
20476: PUSH
20477: LD_VAR 0 2
20481: ARRAY
20482: PUSH
20483: LD_INT 4
20485: ARRAY
20486: PPUSH
20487: CALL_OW 171
// end ; end ;
20491: LD_VAR 0 3
20495: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20496: LD_INT 0
20498: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20499: LD_VAR 0 1
20503: PUSH
20504: LD_INT 250
20506: EQUAL
20507: PUSH
20508: LD_VAR 0 2
20512: PPUSH
20513: CALL_OW 264
20517: PUSH
20518: LD_EXP 101
20522: EQUAL
20523: AND
20524: IFFALSE 20545
// MinerPlaceMine ( unit , x , y ) ;
20526: LD_VAR 0 2
20530: PPUSH
20531: LD_VAR 0 4
20535: PPUSH
20536: LD_VAR 0 5
20540: PPUSH
20541: CALL 22944 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20545: LD_VAR 0 1
20549: PUSH
20550: LD_INT 251
20552: EQUAL
20553: PUSH
20554: LD_VAR 0 2
20558: PPUSH
20559: CALL_OW 264
20563: PUSH
20564: LD_EXP 101
20568: EQUAL
20569: AND
20570: IFFALSE 20591
// MinerDetonateMine ( unit , x , y ) ;
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_VAR 0 4
20581: PPUSH
20582: LD_VAR 0 5
20586: PPUSH
20587: CALL 23221 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20591: LD_VAR 0 1
20595: PUSH
20596: LD_INT 252
20598: EQUAL
20599: PUSH
20600: LD_VAR 0 2
20604: PPUSH
20605: CALL_OW 264
20609: PUSH
20610: LD_EXP 101
20614: EQUAL
20615: AND
20616: IFFALSE 20637
// MinerCreateMinefield ( unit , x , y ) ;
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_VAR 0 4
20627: PPUSH
20628: LD_VAR 0 5
20632: PPUSH
20633: CALL 23638 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20637: LD_VAR 0 1
20641: PUSH
20642: LD_INT 253
20644: EQUAL
20645: PUSH
20646: LD_VAR 0 2
20650: PPUSH
20651: CALL_OW 257
20655: PUSH
20656: LD_INT 5
20658: EQUAL
20659: AND
20660: IFFALSE 20681
// ComBinocular ( unit , x , y ) ;
20662: LD_VAR 0 2
20666: PPUSH
20667: LD_VAR 0 4
20671: PPUSH
20672: LD_VAR 0 5
20676: PPUSH
20677: CALL 24009 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20681: LD_VAR 0 1
20685: PUSH
20686: LD_INT 254
20688: EQUAL
20689: PUSH
20690: LD_VAR 0 2
20694: PPUSH
20695: CALL_OW 264
20699: PUSH
20700: LD_EXP 96
20704: EQUAL
20705: AND
20706: PUSH
20707: LD_VAR 0 3
20711: PPUSH
20712: CALL_OW 263
20716: PUSH
20717: LD_INT 3
20719: EQUAL
20720: AND
20721: IFFALSE 20737
// HackDestroyVehicle ( unit , selectedUnit ) ;
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL 22304 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20737: LD_VAR 0 1
20741: PUSH
20742: LD_INT 255
20744: EQUAL
20745: PUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 264
20755: PUSH
20756: LD_INT 14
20758: PUSH
20759: LD_INT 53
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: IN
20766: AND
20767: PUSH
20768: LD_VAR 0 4
20772: PPUSH
20773: LD_VAR 0 5
20777: PPUSH
20778: CALL_OW 488
20782: AND
20783: IFFALSE 20807
// CutTreeXYR ( unit , x , y , 12 ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_VAR 0 4
20794: PPUSH
20795: LD_VAR 0 5
20799: PPUSH
20800: LD_INT 12
20802: PPUSH
20803: CALL 20870 0 4
// if cmd = 256 then
20807: LD_VAR 0 1
20811: PUSH
20812: LD_INT 256
20814: EQUAL
20815: IFFALSE 20836
// SetFactoryWaypoint ( unit , x , y ) ;
20817: LD_VAR 0 2
20821: PPUSH
20822: LD_VAR 0 4
20826: PPUSH
20827: LD_VAR 0 5
20831: PPUSH
20832: CALL 18642 0 3
// if cmd = 257 then
20836: LD_VAR 0 1
20840: PUSH
20841: LD_INT 257
20843: EQUAL
20844: IFFALSE 20865
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20846: LD_VAR 0 2
20850: PPUSH
20851: LD_VAR 0 4
20855: PPUSH
20856: LD_VAR 0 5
20860: PPUSH
20861: CALL 19004 0 3
// end ;
20865: LD_VAR 0 6
20869: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
20874: PPUSH
20875: PPUSH
20876: PPUSH
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20881: LD_VAR 0 1
20885: NOT
20886: PUSH
20887: LD_VAR 0 2
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: CALL_OW 488
20901: NOT
20902: OR
20903: PUSH
20904: LD_VAR 0 4
20908: NOT
20909: OR
20910: IFFALSE 20914
// exit ;
20912: GO 21254
// list := [ ] ;
20914: LD_ADDR_VAR 0 13
20918: PUSH
20919: EMPTY
20920: ST_TO_ADDR
// if x - r < 0 then
20921: LD_VAR 0 2
20925: PUSH
20926: LD_VAR 0 4
20930: MINUS
20931: PUSH
20932: LD_INT 0
20934: LESS
20935: IFFALSE 20947
// min_x := 0 else
20937: LD_ADDR_VAR 0 7
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
20945: GO 20963
// min_x := x - r ;
20947: LD_ADDR_VAR 0 7
20951: PUSH
20952: LD_VAR 0 2
20956: PUSH
20957: LD_VAR 0 4
20961: MINUS
20962: ST_TO_ADDR
// if y - r < 0 then
20963: LD_VAR 0 3
20967: PUSH
20968: LD_VAR 0 4
20972: MINUS
20973: PUSH
20974: LD_INT 0
20976: LESS
20977: IFFALSE 20989
// min_y := 0 else
20979: LD_ADDR_VAR 0 8
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
20987: GO 21005
// min_y := y - r ;
20989: LD_ADDR_VAR 0 8
20993: PUSH
20994: LD_VAR 0 3
20998: PUSH
20999: LD_VAR 0 4
21003: MINUS
21004: ST_TO_ADDR
// max_x := x + r ;
21005: LD_ADDR_VAR 0 9
21009: PUSH
21010: LD_VAR 0 2
21014: PUSH
21015: LD_VAR 0 4
21019: PLUS
21020: ST_TO_ADDR
// max_y := y + r ;
21021: LD_ADDR_VAR 0 10
21025: PUSH
21026: LD_VAR 0 3
21030: PUSH
21031: LD_VAR 0 4
21035: PLUS
21036: ST_TO_ADDR
// for _x = min_x to max_x do
21037: LD_ADDR_VAR 0 11
21041: PUSH
21042: DOUBLE
21043: LD_VAR 0 7
21047: DEC
21048: ST_TO_ADDR
21049: LD_VAR 0 9
21053: PUSH
21054: FOR_TO
21055: IFFALSE 21172
// for _y = min_y to max_y do
21057: LD_ADDR_VAR 0 12
21061: PUSH
21062: DOUBLE
21063: LD_VAR 0 8
21067: DEC
21068: ST_TO_ADDR
21069: LD_VAR 0 10
21073: PUSH
21074: FOR_TO
21075: IFFALSE 21168
// begin if not ValidHex ( _x , _y ) then
21077: LD_VAR 0 11
21081: PPUSH
21082: LD_VAR 0 12
21086: PPUSH
21087: CALL_OW 488
21091: NOT
21092: IFFALSE 21096
// continue ;
21094: GO 21074
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21096: LD_VAR 0 11
21100: PPUSH
21101: LD_VAR 0 12
21105: PPUSH
21106: CALL_OW 351
21110: PUSH
21111: LD_VAR 0 11
21115: PPUSH
21116: LD_VAR 0 12
21120: PPUSH
21121: CALL_OW 554
21125: AND
21126: IFFALSE 21166
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21128: LD_ADDR_VAR 0 13
21132: PUSH
21133: LD_VAR 0 13
21137: PPUSH
21138: LD_VAR 0 13
21142: PUSH
21143: LD_INT 1
21145: PLUS
21146: PPUSH
21147: LD_VAR 0 11
21151: PUSH
21152: LD_VAR 0 12
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 2
21165: ST_TO_ADDR
// end ;
21166: GO 21074
21168: POP
21169: POP
21170: GO 21054
21172: POP
21173: POP
// if not list then
21174: LD_VAR 0 13
21178: NOT
21179: IFFALSE 21183
// exit ;
21181: GO 21254
// for i in list do
21183: LD_ADDR_VAR 0 6
21187: PUSH
21188: LD_VAR 0 13
21192: PUSH
21193: FOR_IN
21194: IFFALSE 21252
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_STRING M
21203: PUSH
21204: LD_VAR 0 6
21208: PUSH
21209: LD_INT 1
21211: ARRAY
21212: PUSH
21213: LD_VAR 0 6
21217: PUSH
21218: LD_INT 2
21220: ARRAY
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: PPUSH
21246: CALL_OW 447
21250: GO 21193
21252: POP
21253: POP
// end ;
21254: LD_VAR 0 5
21258: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21259: LD_EXP 84
21263: NOT
21264: IFFALSE 21314
21266: GO 21268
21268: DISABLE
// begin initHack := true ;
21269: LD_ADDR_EXP 84
21273: PUSH
21274: LD_INT 1
21276: ST_TO_ADDR
// hackTanks := [ ] ;
21277: LD_ADDR_EXP 85
21281: PUSH
21282: EMPTY
21283: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21284: LD_ADDR_EXP 86
21288: PUSH
21289: EMPTY
21290: ST_TO_ADDR
// hackLimit := 3 ;
21291: LD_ADDR_EXP 87
21295: PUSH
21296: LD_INT 3
21298: ST_TO_ADDR
// hackDist := 12 ;
21299: LD_ADDR_EXP 88
21303: PUSH
21304: LD_INT 12
21306: ST_TO_ADDR
// hackCounter := [ ] ;
21307: LD_ADDR_EXP 89
21311: PUSH
21312: EMPTY
21313: ST_TO_ADDR
// end ;
21314: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21315: LD_EXP 84
21319: PUSH
21320: LD_INT 34
21322: PUSH
21323: LD_EXP 96
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: AND
21337: IFFALSE 21592
21339: GO 21341
21341: DISABLE
21342: LD_INT 0
21344: PPUSH
21345: PPUSH
// begin enable ;
21346: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21347: LD_ADDR_VAR 0 1
21351: PUSH
21352: LD_INT 34
21354: PUSH
21355: LD_EXP 96
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PPUSH
21364: CALL_OW 69
21368: PUSH
21369: FOR_IN
21370: IFFALSE 21590
// begin if not i in hackTanks then
21372: LD_VAR 0 1
21376: PUSH
21377: LD_EXP 85
21381: IN
21382: NOT
21383: IFFALSE 21466
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21385: LD_ADDR_EXP 85
21389: PUSH
21390: LD_EXP 85
21394: PPUSH
21395: LD_EXP 85
21399: PUSH
21400: LD_INT 1
21402: PLUS
21403: PPUSH
21404: LD_VAR 0 1
21408: PPUSH
21409: CALL_OW 1
21413: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21414: LD_ADDR_EXP 86
21418: PUSH
21419: LD_EXP 86
21423: PPUSH
21424: LD_EXP 86
21428: PUSH
21429: LD_INT 1
21431: PLUS
21432: PPUSH
21433: EMPTY
21434: PPUSH
21435: CALL_OW 1
21439: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21440: LD_ADDR_EXP 89
21444: PUSH
21445: LD_EXP 89
21449: PPUSH
21450: LD_EXP 89
21454: PUSH
21455: LD_INT 1
21457: PLUS
21458: PPUSH
21459: EMPTY
21460: PPUSH
21461: CALL_OW 1
21465: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 302
21475: NOT
21476: IFFALSE 21489
// begin HackUnlinkAll ( i ) ;
21478: LD_VAR 0 1
21482: PPUSH
21483: CALL 21595 0 1
// continue ;
21487: GO 21369
// end ; HackCheckCapturedStatus ( i ) ;
21489: LD_VAR 0 1
21493: PPUSH
21494: CALL 22038 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_INT 81
21505: PUSH
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 255
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 33
21522: PUSH
21523: LD_INT 3
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 91
21532: PUSH
21533: LD_VAR 0 1
21537: PUSH
21538: LD_EXP 88
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 50
21550: PUSH
21551: EMPTY
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: PPUSH
21560: CALL_OW 69
21564: ST_TO_ADDR
// if not tmp then
21565: LD_VAR 0 2
21569: NOT
21570: IFFALSE 21574
// continue ;
21572: GO 21369
// HackLink ( i , tmp ) ;
21574: LD_VAR 0 1
21578: PPUSH
21579: LD_VAR 0 2
21583: PPUSH
21584: CALL 21731 0 2
// end ;
21588: GO 21369
21590: POP
21591: POP
// end ;
21592: PPOPN 2
21594: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21595: LD_INT 0
21597: PPUSH
21598: PPUSH
21599: PPUSH
// if not hack in hackTanks then
21600: LD_VAR 0 1
21604: PUSH
21605: LD_EXP 85
21609: IN
21610: NOT
21611: IFFALSE 21615
// exit ;
21613: GO 21726
// index := GetElementIndex ( hackTanks , hack ) ;
21615: LD_ADDR_VAR 0 4
21619: PUSH
21620: LD_EXP 85
21624: PPUSH
21625: LD_VAR 0 1
21629: PPUSH
21630: CALL 29513 0 2
21634: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21635: LD_EXP 86
21639: PUSH
21640: LD_VAR 0 4
21644: ARRAY
21645: IFFALSE 21726
// begin for i in hackTanksCaptured [ index ] do
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_EXP 86
21656: PUSH
21657: LD_VAR 0 4
21661: ARRAY
21662: PUSH
21663: FOR_IN
21664: IFFALSE 21690
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21666: LD_VAR 0 3
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: PPUSH
21675: LD_VAR 0 3
21679: PUSH
21680: LD_INT 2
21682: ARRAY
21683: PPUSH
21684: CALL_OW 235
21688: GO 21663
21690: POP
21691: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21692: LD_ADDR_EXP 86
21696: PUSH
21697: LD_EXP 86
21701: PPUSH
21702: LD_VAR 0 4
21706: PPUSH
21707: EMPTY
21708: PPUSH
21709: CALL_OW 1
21713: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21714: LD_VAR 0 1
21718: PPUSH
21719: LD_INT 0
21721: PPUSH
21722: CALL_OW 505
// end ; end ;
21726: LD_VAR 0 2
21730: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21731: LD_INT 0
21733: PPUSH
21734: PPUSH
21735: PPUSH
// if not hack in hackTanks or not vehicles then
21736: LD_VAR 0 1
21740: PUSH
21741: LD_EXP 85
21745: IN
21746: NOT
21747: PUSH
21748: LD_VAR 0 2
21752: NOT
21753: OR
21754: IFFALSE 21758
// exit ;
21756: GO 22033
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21758: LD_ADDR_VAR 0 2
21762: PUSH
21763: LD_VAR 0 1
21767: PPUSH
21768: LD_VAR 0 2
21772: PPUSH
21773: LD_INT 1
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: CALL 30163 0 4
21783: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21784: LD_ADDR_VAR 0 5
21788: PUSH
21789: LD_EXP 85
21793: PPUSH
21794: LD_VAR 0 1
21798: PPUSH
21799: CALL 29513 0 2
21803: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21804: LD_EXP 86
21808: PUSH
21809: LD_VAR 0 5
21813: ARRAY
21814: PUSH
21815: LD_EXP 87
21819: LESS
21820: IFFALSE 22009
// begin for i := 1 to vehicles do
21822: LD_ADDR_VAR 0 4
21826: PUSH
21827: DOUBLE
21828: LD_INT 1
21830: DEC
21831: ST_TO_ADDR
21832: LD_VAR 0 2
21836: PUSH
21837: FOR_TO
21838: IFFALSE 22007
// begin if hackTanksCaptured [ index ] = hackLimit then
21840: LD_EXP 86
21844: PUSH
21845: LD_VAR 0 5
21849: ARRAY
21850: PUSH
21851: LD_EXP 87
21855: EQUAL
21856: IFFALSE 21860
// break ;
21858: GO 22007
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21860: LD_ADDR_EXP 89
21864: PUSH
21865: LD_EXP 89
21869: PPUSH
21870: LD_VAR 0 5
21874: PPUSH
21875: LD_EXP 89
21879: PUSH
21880: LD_VAR 0 5
21884: ARRAY
21885: PUSH
21886: LD_INT 1
21888: PLUS
21889: PPUSH
21890: CALL_OW 1
21894: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21895: LD_ADDR_EXP 86
21899: PUSH
21900: LD_EXP 86
21904: PPUSH
21905: LD_VAR 0 5
21909: PUSH
21910: LD_EXP 86
21914: PUSH
21915: LD_VAR 0 5
21919: ARRAY
21920: PUSH
21921: LD_INT 1
21923: PLUS
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PPUSH
21929: LD_VAR 0 2
21933: PUSH
21934: LD_VAR 0 4
21938: ARRAY
21939: PUSH
21940: LD_VAR 0 2
21944: PUSH
21945: LD_VAR 0 4
21949: ARRAY
21950: PPUSH
21951: CALL_OW 255
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PPUSH
21960: CALL 29728 0 3
21964: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21965: LD_VAR 0 2
21969: PUSH
21970: LD_VAR 0 4
21974: ARRAY
21975: PPUSH
21976: LD_VAR 0 1
21980: PPUSH
21981: CALL_OW 255
21985: PPUSH
21986: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 4
21999: ARRAY
22000: PPUSH
22001: CALL_OW 141
// end ;
22005: GO 21837
22007: POP
22008: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_EXP 86
22018: PUSH
22019: LD_VAR 0 5
22023: ARRAY
22024: PUSH
22025: LD_INT 0
22027: PLUS
22028: PPUSH
22029: CALL_OW 505
// end ;
22033: LD_VAR 0 3
22037: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22038: LD_INT 0
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
// if not hack in hackTanks then
22044: LD_VAR 0 1
22048: PUSH
22049: LD_EXP 85
22053: IN
22054: NOT
22055: IFFALSE 22059
// exit ;
22057: GO 22299
// index := GetElementIndex ( hackTanks , hack ) ;
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_EXP 85
22068: PPUSH
22069: LD_VAR 0 1
22073: PPUSH
22074: CALL 29513 0 2
22078: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22079: LD_ADDR_VAR 0 3
22083: PUSH
22084: DOUBLE
22085: LD_EXP 86
22089: PUSH
22090: LD_VAR 0 4
22094: ARRAY
22095: INC
22096: ST_TO_ADDR
22097: LD_INT 1
22099: PUSH
22100: FOR_DOWNTO
22101: IFFALSE 22273
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_EXP 86
22112: PUSH
22113: LD_VAR 0 4
22117: ARRAY
22118: PUSH
22119: LD_VAR 0 3
22123: ARRAY
22124: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22125: LD_VAR 0 5
22129: PUSH
22130: LD_INT 1
22132: ARRAY
22133: PPUSH
22134: CALL_OW 302
22138: NOT
22139: PUSH
22140: LD_VAR 0 5
22144: PUSH
22145: LD_INT 1
22147: ARRAY
22148: PPUSH
22149: CALL_OW 255
22153: PUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 255
22163: NONEQUAL
22164: OR
22165: IFFALSE 22271
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22167: LD_VAR 0 5
22171: PUSH
22172: LD_INT 1
22174: ARRAY
22175: PPUSH
22176: CALL_OW 305
22180: PUSH
22181: LD_VAR 0 5
22185: PUSH
22186: LD_INT 1
22188: ARRAY
22189: PPUSH
22190: CALL_OW 255
22194: PUSH
22195: LD_VAR 0 1
22199: PPUSH
22200: CALL_OW 255
22204: EQUAL
22205: AND
22206: IFFALSE 22230
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22208: LD_VAR 0 5
22212: PUSH
22213: LD_INT 1
22215: ARRAY
22216: PPUSH
22217: LD_VAR 0 5
22221: PUSH
22222: LD_INT 2
22224: ARRAY
22225: PPUSH
22226: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22230: LD_ADDR_EXP 86
22234: PUSH
22235: LD_EXP 86
22239: PPUSH
22240: LD_VAR 0 4
22244: PPUSH
22245: LD_EXP 86
22249: PUSH
22250: LD_VAR 0 4
22254: ARRAY
22255: PPUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: CALL_OW 3
22265: PPUSH
22266: CALL_OW 1
22270: ST_TO_ADDR
// end ; end ;
22271: GO 22100
22273: POP
22274: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_EXP 86
22284: PUSH
22285: LD_VAR 0 4
22289: ARRAY
22290: PUSH
22291: LD_INT 0
22293: PLUS
22294: PPUSH
22295: CALL_OW 505
// end ;
22299: LD_VAR 0 2
22303: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
22309: PPUSH
// if not hack in hackTanks then
22310: LD_VAR 0 1
22314: PUSH
22315: LD_EXP 85
22319: IN
22320: NOT
22321: IFFALSE 22325
// exit ;
22323: GO 22410
// index := GetElementIndex ( hackTanks , hack ) ;
22325: LD_ADDR_VAR 0 5
22329: PUSH
22330: LD_EXP 85
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: CALL 29513 0 2
22344: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: DOUBLE
22351: LD_INT 1
22353: DEC
22354: ST_TO_ADDR
22355: LD_EXP 86
22359: PUSH
22360: LD_VAR 0 5
22364: ARRAY
22365: PUSH
22366: FOR_TO
22367: IFFALSE 22408
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22369: LD_EXP 86
22373: PUSH
22374: LD_VAR 0 5
22378: ARRAY
22379: PUSH
22380: LD_VAR 0 4
22384: ARRAY
22385: PUSH
22386: LD_INT 1
22388: ARRAY
22389: PUSH
22390: LD_VAR 0 2
22394: EQUAL
22395: IFFALSE 22406
// KillUnit ( vehicle ) ;
22397: LD_VAR 0 2
22401: PPUSH
22402: CALL_OW 66
22406: GO 22366
22408: POP
22409: POP
// end ;
22410: LD_VAR 0 3
22414: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22415: LD_EXP 90
22419: NOT
22420: IFFALSE 22455
22422: GO 22424
22424: DISABLE
// begin initMiner := true ;
22425: LD_ADDR_EXP 90
22429: PUSH
22430: LD_INT 1
22432: ST_TO_ADDR
// minersList := [ ] ;
22433: LD_ADDR_EXP 91
22437: PUSH
22438: EMPTY
22439: ST_TO_ADDR
// minerMinesList := [ ] ;
22440: LD_ADDR_EXP 92
22444: PUSH
22445: EMPTY
22446: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22447: LD_ADDR_EXP 93
22451: PUSH
22452: LD_INT 5
22454: ST_TO_ADDR
// end ;
22455: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22456: LD_EXP 90
22460: PUSH
22461: LD_INT 34
22463: PUSH
22464: LD_EXP 101
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PPUSH
22473: CALL_OW 69
22477: AND
22478: IFFALSE 22941
22480: GO 22482
22482: DISABLE
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// begin enable ;
22489: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22490: LD_ADDR_VAR 0 1
22494: PUSH
22495: LD_INT 34
22497: PUSH
22498: LD_EXP 101
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PUSH
22512: FOR_IN
22513: IFFALSE 22585
// begin if not i in minersList then
22515: LD_VAR 0 1
22519: PUSH
22520: LD_EXP 91
22524: IN
22525: NOT
22526: IFFALSE 22583
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22528: LD_ADDR_EXP 91
22532: PUSH
22533: LD_EXP 91
22537: PPUSH
22538: LD_EXP 91
22542: PUSH
22543: LD_INT 1
22545: PLUS
22546: PPUSH
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 1
22556: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22557: LD_ADDR_EXP 92
22561: PUSH
22562: LD_EXP 92
22566: PPUSH
22567: LD_EXP 92
22571: PUSH
22572: LD_INT 1
22574: PLUS
22575: PPUSH
22576: EMPTY
22577: PPUSH
22578: CALL_OW 1
22582: ST_TO_ADDR
// end end ;
22583: GO 22512
22585: POP
22586: POP
// for i := minerMinesList downto 1 do
22587: LD_ADDR_VAR 0 1
22591: PUSH
22592: DOUBLE
22593: LD_EXP 92
22597: INC
22598: ST_TO_ADDR
22599: LD_INT 1
22601: PUSH
22602: FOR_DOWNTO
22603: IFFALSE 22939
// begin if IsLive ( minersList [ i ] ) then
22605: LD_EXP 91
22609: PUSH
22610: LD_VAR 0 1
22614: ARRAY
22615: PPUSH
22616: CALL_OW 300
22620: IFFALSE 22648
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22622: LD_EXP 91
22626: PUSH
22627: LD_VAR 0 1
22631: ARRAY
22632: PPUSH
22633: LD_EXP 92
22637: PUSH
22638: LD_VAR 0 1
22642: ARRAY
22643: PPUSH
22644: CALL_OW 505
// if not minerMinesList [ i ] then
22648: LD_EXP 92
22652: PUSH
22653: LD_VAR 0 1
22657: ARRAY
22658: NOT
22659: IFFALSE 22663
// continue ;
22661: GO 22602
// for j := minerMinesList [ i ] downto 1 do
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: DOUBLE
22669: LD_EXP 92
22673: PUSH
22674: LD_VAR 0 1
22678: ARRAY
22679: INC
22680: ST_TO_ADDR
22681: LD_INT 1
22683: PUSH
22684: FOR_DOWNTO
22685: IFFALSE 22935
// begin side := GetSide ( minersList [ i ] ) ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_EXP 91
22696: PUSH
22697: LD_VAR 0 1
22701: ARRAY
22702: PPUSH
22703: CALL_OW 255
22707: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22708: LD_ADDR_VAR 0 4
22712: PUSH
22713: LD_EXP 92
22717: PUSH
22718: LD_VAR 0 1
22722: ARRAY
22723: PUSH
22724: LD_VAR 0 2
22728: ARRAY
22729: PUSH
22730: LD_INT 1
22732: ARRAY
22733: PPUSH
22734: LD_EXP 92
22738: PUSH
22739: LD_VAR 0 1
22743: ARRAY
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 2
22753: ARRAY
22754: PPUSH
22755: CALL_OW 428
22759: ST_TO_ADDR
// if not tmp then
22760: LD_VAR 0 4
22764: NOT
22765: IFFALSE 22769
// continue ;
22767: GO 22684
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22769: LD_VAR 0 4
22773: PUSH
22774: LD_INT 81
22776: PUSH
22777: LD_VAR 0 3
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PPUSH
22786: CALL_OW 69
22790: IN
22791: PUSH
22792: LD_EXP 92
22796: PUSH
22797: LD_VAR 0 1
22801: ARRAY
22802: PUSH
22803: LD_VAR 0 2
22807: ARRAY
22808: PUSH
22809: LD_INT 1
22811: ARRAY
22812: PPUSH
22813: LD_EXP 92
22817: PUSH
22818: LD_VAR 0 1
22822: ARRAY
22823: PUSH
22824: LD_VAR 0 2
22828: ARRAY
22829: PUSH
22830: LD_INT 2
22832: ARRAY
22833: PPUSH
22834: CALL_OW 458
22838: AND
22839: IFFALSE 22933
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22841: LD_EXP 92
22845: PUSH
22846: LD_VAR 0 1
22850: ARRAY
22851: PUSH
22852: LD_VAR 0 2
22856: ARRAY
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: PPUSH
22862: LD_EXP 92
22866: PUSH
22867: LD_VAR 0 1
22871: ARRAY
22872: PUSH
22873: LD_VAR 0 2
22877: ARRAY
22878: PUSH
22879: LD_INT 2
22881: ARRAY
22882: PPUSH
22883: LD_VAR 0 3
22887: PPUSH
22888: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22892: LD_ADDR_EXP 92
22896: PUSH
22897: LD_EXP 92
22901: PPUSH
22902: LD_VAR 0 1
22906: PPUSH
22907: LD_EXP 92
22911: PUSH
22912: LD_VAR 0 1
22916: ARRAY
22917: PPUSH
22918: LD_VAR 0 2
22922: PPUSH
22923: CALL_OW 3
22927: PPUSH
22928: CALL_OW 1
22932: ST_TO_ADDR
// end ; end ;
22933: GO 22684
22935: POP
22936: POP
// end ;
22937: GO 22602
22939: POP
22940: POP
// end ;
22941: PPOPN 4
22943: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
// result := false ;
22948: LD_ADDR_VAR 0 4
22952: PUSH
22953: LD_INT 0
22955: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 264
22965: PUSH
22966: LD_EXP 101
22970: EQUAL
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23216
// index := GetElementIndex ( minersList , unit ) ;
22976: LD_ADDR_VAR 0 5
22980: PUSH
22981: LD_EXP 91
22985: PPUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL 29513 0 2
22995: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22996: LD_EXP 92
23000: PUSH
23001: LD_VAR 0 5
23005: ARRAY
23006: PUSH
23007: LD_EXP 93
23011: GREATEREQUAL
23012: IFFALSE 23016
// exit ;
23014: GO 23216
// ComMoveXY ( unit , x , y ) ;
23016: LD_VAR 0 1
23020: PPUSH
23021: LD_VAR 0 2
23025: PPUSH
23026: LD_VAR 0 3
23030: PPUSH
23031: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23035: LD_INT 35
23037: PPUSH
23038: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23042: LD_VAR 0 1
23046: PPUSH
23047: LD_VAR 0 2
23051: PPUSH
23052: LD_VAR 0 3
23056: PPUSH
23057: CALL 60799 0 3
23061: NOT
23062: PUSH
23063: LD_VAR 0 1
23067: PPUSH
23068: CALL_OW 314
23072: AND
23073: IFFALSE 23077
// exit ;
23075: GO 23216
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23077: LD_VAR 0 2
23081: PPUSH
23082: LD_VAR 0 3
23086: PPUSH
23087: CALL_OW 428
23091: PUSH
23092: LD_VAR 0 1
23096: EQUAL
23097: PUSH
23098: LD_VAR 0 1
23102: PPUSH
23103: CALL_OW 314
23107: NOT
23108: AND
23109: IFFALSE 23035
// PlaySoundXY ( x , y , PlantMine ) ;
23111: LD_VAR 0 2
23115: PPUSH
23116: LD_VAR 0 3
23120: PPUSH
23121: LD_STRING PlantMine
23123: PPUSH
23124: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_VAR 0 3
23137: PPUSH
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 255
23147: PPUSH
23148: LD_INT 0
23150: PPUSH
23151: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23155: LD_ADDR_EXP 92
23159: PUSH
23160: LD_EXP 92
23164: PPUSH
23165: LD_VAR 0 5
23169: PUSH
23170: LD_EXP 92
23174: PUSH
23175: LD_VAR 0 5
23179: ARRAY
23180: PUSH
23181: LD_INT 1
23183: PLUS
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: LD_VAR 0 2
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PPUSH
23203: CALL 29728 0 3
23207: ST_TO_ADDR
// result := true ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_INT 1
23215: ST_TO_ADDR
// end ;
23216: LD_VAR 0 4
23220: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
23225: PPUSH
// if not unit in minersList then
23226: LD_VAR 0 1
23230: PUSH
23231: LD_EXP 91
23235: IN
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23633
// index := GetElementIndex ( minersList , unit ) ;
23241: LD_ADDR_VAR 0 6
23245: PUSH
23246: LD_EXP 91
23250: PPUSH
23251: LD_VAR 0 1
23255: PPUSH
23256: CALL 29513 0 2
23260: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23261: LD_ADDR_VAR 0 5
23265: PUSH
23266: DOUBLE
23267: LD_EXP 92
23271: PUSH
23272: LD_VAR 0 6
23276: ARRAY
23277: INC
23278: ST_TO_ADDR
23279: LD_INT 1
23281: PUSH
23282: FOR_DOWNTO
23283: IFFALSE 23444
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23285: LD_EXP 92
23289: PUSH
23290: LD_VAR 0 6
23294: ARRAY
23295: PUSH
23296: LD_VAR 0 5
23300: ARRAY
23301: PUSH
23302: LD_INT 1
23304: ARRAY
23305: PUSH
23306: LD_VAR 0 2
23310: EQUAL
23311: PUSH
23312: LD_EXP 92
23316: PUSH
23317: LD_VAR 0 6
23321: ARRAY
23322: PUSH
23323: LD_VAR 0 5
23327: ARRAY
23328: PUSH
23329: LD_INT 2
23331: ARRAY
23332: PUSH
23333: LD_VAR 0 3
23337: EQUAL
23338: AND
23339: IFFALSE 23442
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23341: LD_EXP 92
23345: PUSH
23346: LD_VAR 0 6
23350: ARRAY
23351: PUSH
23352: LD_VAR 0 5
23356: ARRAY
23357: PUSH
23358: LD_INT 1
23360: ARRAY
23361: PPUSH
23362: LD_EXP 92
23366: PUSH
23367: LD_VAR 0 6
23371: ARRAY
23372: PUSH
23373: LD_VAR 0 5
23377: ARRAY
23378: PUSH
23379: LD_INT 2
23381: ARRAY
23382: PPUSH
23383: LD_VAR 0 1
23387: PPUSH
23388: CALL_OW 255
23392: PPUSH
23393: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23397: LD_ADDR_EXP 92
23401: PUSH
23402: LD_EXP 92
23406: PPUSH
23407: LD_VAR 0 6
23411: PPUSH
23412: LD_EXP 92
23416: PUSH
23417: LD_VAR 0 6
23421: ARRAY
23422: PPUSH
23423: LD_VAR 0 5
23427: PPUSH
23428: CALL_OW 3
23432: PPUSH
23433: CALL_OW 1
23437: ST_TO_ADDR
// exit ;
23438: POP
23439: POP
23440: GO 23633
// end ; end ;
23442: GO 23282
23444: POP
23445: POP
// for i := minerMinesList [ index ] downto 1 do
23446: LD_ADDR_VAR 0 5
23450: PUSH
23451: DOUBLE
23452: LD_EXP 92
23456: PUSH
23457: LD_VAR 0 6
23461: ARRAY
23462: INC
23463: ST_TO_ADDR
23464: LD_INT 1
23466: PUSH
23467: FOR_DOWNTO
23468: IFFALSE 23631
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23470: LD_EXP 92
23474: PUSH
23475: LD_VAR 0 6
23479: ARRAY
23480: PUSH
23481: LD_VAR 0 5
23485: ARRAY
23486: PUSH
23487: LD_INT 1
23489: ARRAY
23490: PPUSH
23491: LD_EXP 92
23495: PUSH
23496: LD_VAR 0 6
23500: ARRAY
23501: PUSH
23502: LD_VAR 0 5
23506: ARRAY
23507: PUSH
23508: LD_INT 2
23510: ARRAY
23511: PPUSH
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 298
23526: PUSH
23527: LD_INT 6
23529: LESS
23530: IFFALSE 23629
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23532: LD_EXP 92
23536: PUSH
23537: LD_VAR 0 6
23541: ARRAY
23542: PUSH
23543: LD_VAR 0 5
23547: ARRAY
23548: PUSH
23549: LD_INT 1
23551: ARRAY
23552: PPUSH
23553: LD_EXP 92
23557: PUSH
23558: LD_VAR 0 6
23562: ARRAY
23563: PUSH
23564: LD_VAR 0 5
23568: ARRAY
23569: PUSH
23570: LD_INT 2
23572: ARRAY
23573: PPUSH
23574: LD_VAR 0 1
23578: PPUSH
23579: CALL_OW 255
23583: PPUSH
23584: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23588: LD_ADDR_EXP 92
23592: PUSH
23593: LD_EXP 92
23597: PPUSH
23598: LD_VAR 0 6
23602: PPUSH
23603: LD_EXP 92
23607: PUSH
23608: LD_VAR 0 6
23612: ARRAY
23613: PPUSH
23614: LD_VAR 0 5
23618: PPUSH
23619: CALL_OW 3
23623: PPUSH
23624: CALL_OW 1
23628: ST_TO_ADDR
// end ; end ;
23629: GO 23467
23631: POP
23632: POP
// end ;
23633: LD_VAR 0 4
23637: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23638: LD_INT 0
23640: PPUSH
23641: PPUSH
23642: PPUSH
23643: PPUSH
23644: PPUSH
23645: PPUSH
23646: PPUSH
23647: PPUSH
23648: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23649: LD_VAR 0 1
23653: PPUSH
23654: CALL_OW 264
23658: PUSH
23659: LD_EXP 101
23663: EQUAL
23664: NOT
23665: PUSH
23666: LD_VAR 0 1
23670: PUSH
23671: LD_EXP 91
23675: IN
23676: NOT
23677: OR
23678: IFFALSE 23682
// exit ;
23680: GO 24004
// index := GetElementIndex ( minersList , unit ) ;
23682: LD_ADDR_VAR 0 6
23686: PUSH
23687: LD_EXP 91
23691: PPUSH
23692: LD_VAR 0 1
23696: PPUSH
23697: CALL 29513 0 2
23701: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23702: LD_ADDR_VAR 0 8
23706: PUSH
23707: LD_EXP 93
23711: PUSH
23712: LD_EXP 92
23716: PUSH
23717: LD_VAR 0 6
23721: ARRAY
23722: MINUS
23723: ST_TO_ADDR
// if not minesFreeAmount then
23724: LD_VAR 0 8
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 24004
// tmp := [ ] ;
23733: LD_ADDR_VAR 0 7
23737: PUSH
23738: EMPTY
23739: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23740: LD_ADDR_VAR 0 5
23744: PUSH
23745: DOUBLE
23746: LD_INT 1
23748: DEC
23749: ST_TO_ADDR
23750: LD_VAR 0 8
23754: PUSH
23755: FOR_TO
23756: IFFALSE 23951
// begin _d := rand ( 0 , 5 ) ;
23758: LD_ADDR_VAR 0 11
23762: PUSH
23763: LD_INT 0
23765: PPUSH
23766: LD_INT 5
23768: PPUSH
23769: CALL_OW 12
23773: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23774: LD_ADDR_VAR 0 12
23778: PUSH
23779: LD_INT 2
23781: PPUSH
23782: LD_INT 6
23784: PPUSH
23785: CALL_OW 12
23789: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23790: LD_ADDR_VAR 0 9
23794: PUSH
23795: LD_VAR 0 2
23799: PPUSH
23800: LD_VAR 0 11
23804: PPUSH
23805: LD_VAR 0 12
23809: PPUSH
23810: CALL_OW 272
23814: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23815: LD_ADDR_VAR 0 10
23819: PUSH
23820: LD_VAR 0 3
23824: PPUSH
23825: LD_VAR 0 11
23829: PPUSH
23830: LD_VAR 0 12
23834: PPUSH
23835: CALL_OW 273
23839: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23840: LD_VAR 0 9
23844: PPUSH
23845: LD_VAR 0 10
23849: PPUSH
23850: CALL_OW 488
23854: PUSH
23855: LD_VAR 0 9
23859: PUSH
23860: LD_VAR 0 10
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_VAR 0 7
23873: IN
23874: NOT
23875: AND
23876: PUSH
23877: LD_VAR 0 9
23881: PPUSH
23882: LD_VAR 0 10
23886: PPUSH
23887: CALL_OW 458
23891: NOT
23892: AND
23893: IFFALSE 23935
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23895: LD_ADDR_VAR 0 7
23899: PUSH
23900: LD_VAR 0 7
23904: PPUSH
23905: LD_VAR 0 7
23909: PUSH
23910: LD_INT 1
23912: PLUS
23913: PPUSH
23914: LD_VAR 0 9
23918: PUSH
23919: LD_VAR 0 10
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PPUSH
23928: CALL_OW 1
23932: ST_TO_ADDR
23933: GO 23949
// i := i - 1 ;
23935: LD_ADDR_VAR 0 5
23939: PUSH
23940: LD_VAR 0 5
23944: PUSH
23945: LD_INT 1
23947: MINUS
23948: ST_TO_ADDR
// end ;
23949: GO 23755
23951: POP
23952: POP
// for i in tmp do
23953: LD_ADDR_VAR 0 5
23957: PUSH
23958: LD_VAR 0 7
23962: PUSH
23963: FOR_IN
23964: IFFALSE 24002
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23966: LD_VAR 0 1
23970: PPUSH
23971: LD_VAR 0 5
23975: PUSH
23976: LD_INT 1
23978: ARRAY
23979: PPUSH
23980: LD_VAR 0 5
23984: PUSH
23985: LD_INT 2
23987: ARRAY
23988: PPUSH
23989: CALL 22944 0 3
23993: NOT
23994: IFFALSE 24000
// exit ;
23996: POP
23997: POP
23998: GO 24004
24000: GO 23963
24002: POP
24003: POP
// end ;
24004: LD_VAR 0 4
24008: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24009: LD_INT 0
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
// if not GetClass ( unit ) = class_sniper then
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 257
24027: PUSH
24028: LD_INT 5
24030: EQUAL
24031: NOT
24032: IFFALSE 24036
// exit ;
24034: GO 24424
// dist := 8 ;
24036: LD_ADDR_VAR 0 5
24040: PUSH
24041: LD_INT 8
24043: ST_TO_ADDR
// viewRange := 12 ;
24044: LD_ADDR_VAR 0 7
24048: PUSH
24049: LD_INT 12
24051: ST_TO_ADDR
// side := GetSide ( unit ) ;
24052: LD_ADDR_VAR 0 6
24056: PUSH
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 255
24066: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24067: LD_INT 61
24069: PPUSH
24070: LD_VAR 0 6
24074: PPUSH
24075: CALL_OW 321
24079: PUSH
24080: LD_INT 2
24082: EQUAL
24083: IFFALSE 24093
// viewRange := 16 ;
24085: LD_ADDR_VAR 0 7
24089: PUSH
24090: LD_INT 16
24092: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_VAR 0 2
24102: PPUSH
24103: LD_VAR 0 3
24107: PPUSH
24108: CALL_OW 297
24112: PUSH
24113: LD_VAR 0 5
24117: GREATER
24118: IFFALSE 24197
// begin ComMoveXY ( unit , x , y ) ;
24120: LD_VAR 0 1
24124: PPUSH
24125: LD_VAR 0 2
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24139: LD_INT 35
24141: PPUSH
24142: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24146: LD_VAR 0 1
24150: PPUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: LD_VAR 0 3
24160: PPUSH
24161: CALL 60799 0 3
24165: NOT
24166: IFFALSE 24170
// exit ;
24168: GO 24424
// until GetDistUnitXY ( unit , x , y ) < dist ;
24170: LD_VAR 0 1
24174: PPUSH
24175: LD_VAR 0 2
24179: PPUSH
24180: LD_VAR 0 3
24184: PPUSH
24185: CALL_OW 297
24189: PUSH
24190: LD_VAR 0 5
24194: LESS
24195: IFFALSE 24139
// end ; ComTurnXY ( unit , x , y ) ;
24197: LD_VAR 0 1
24201: PPUSH
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 118
// wait ( 5 ) ;
24216: LD_INT 5
24218: PPUSH
24219: CALL_OW 67
// _d := GetDir ( unit ) ;
24223: LD_ADDR_VAR 0 10
24227: PUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 254
24237: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24238: LD_ADDR_VAR 0 8
24242: PUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 250
24252: PPUSH
24253: LD_VAR 0 10
24257: PPUSH
24258: LD_VAR 0 5
24262: PPUSH
24263: CALL_OW 272
24267: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24268: LD_ADDR_VAR 0 9
24272: PUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 251
24282: PPUSH
24283: LD_VAR 0 10
24287: PPUSH
24288: LD_VAR 0 5
24292: PPUSH
24293: CALL_OW 273
24297: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24298: LD_VAR 0 8
24302: PPUSH
24303: LD_VAR 0 9
24307: PPUSH
24308: CALL_OW 488
24312: NOT
24313: IFFALSE 24317
// exit ;
24315: GO 24424
// ComAnimCustom ( unit , 1 ) ;
24317: LD_VAR 0 1
24321: PPUSH
24322: LD_INT 1
24324: PPUSH
24325: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24329: LD_VAR 0 8
24333: PPUSH
24334: LD_VAR 0 9
24338: PPUSH
24339: LD_VAR 0 6
24343: PPUSH
24344: LD_VAR 0 7
24348: PPUSH
24349: CALL_OW 330
// repeat wait ( 1 ) ;
24353: LD_INT 1
24355: PPUSH
24356: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24360: LD_VAR 0 1
24364: PPUSH
24365: CALL_OW 316
24369: PUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 314
24379: OR
24380: PUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 302
24390: NOT
24391: OR
24392: PUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 301
24402: OR
24403: IFFALSE 24353
// RemoveSeeing ( _x , _y , side ) ;
24405: LD_VAR 0 8
24409: PPUSH
24410: LD_VAR 0 9
24414: PPUSH
24415: LD_VAR 0 6
24419: PPUSH
24420: CALL_OW 331
// end ; end_of_file
24424: LD_VAR 0 4
24428: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
24429: LD_INT 0
24431: PPUSH
// ar_miner := 81 ;
24432: LD_ADDR_EXP 101
24436: PUSH
24437: LD_INT 81
24439: ST_TO_ADDR
// ar_crane := 88 ;
24440: LD_ADDR_EXP 100
24444: PUSH
24445: LD_INT 88
24447: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
24448: LD_ADDR_EXP 95
24452: PUSH
24453: LD_INT 89
24455: ST_TO_ADDR
// us_hack := 99 ;
24456: LD_ADDR_EXP 96
24460: PUSH
24461: LD_INT 99
24463: ST_TO_ADDR
// us_artillery := 97 ;
24464: LD_ADDR_EXP 97
24468: PUSH
24469: LD_INT 97
24471: ST_TO_ADDR
// ar_bio_bomb := 91 ;
24472: LD_ADDR_EXP 98
24476: PUSH
24477: LD_INT 91
24479: ST_TO_ADDR
// ar_mortar := 92 ;
24480: LD_ADDR_EXP 99
24484: PUSH
24485: LD_INT 92
24487: ST_TO_ADDR
// ru_flamethrower := 93 ;
24488: LD_ADDR_EXP 102
24492: PUSH
24493: LD_INT 93
24495: ST_TO_ADDR
// ru_radar := 98 ;
24496: LD_ADDR_EXP 94
24500: PUSH
24501: LD_INT 98
24503: ST_TO_ADDR
// tech_Artillery := 80 ;
24504: LD_ADDR_EXP 103
24508: PUSH
24509: LD_INT 80
24511: ST_TO_ADDR
// tech_RadMat := 81 ;
24512: LD_ADDR_EXP 104
24516: PUSH
24517: LD_INT 81
24519: ST_TO_ADDR
// tech_BasicTools := 82 ;
24520: LD_ADDR_EXP 105
24524: PUSH
24525: LD_INT 82
24527: ST_TO_ADDR
// tech_Cargo := 83 ;
24528: LD_ADDR_EXP 106
24532: PUSH
24533: LD_INT 83
24535: ST_TO_ADDR
// tech_Track := 84 ;
24536: LD_ADDR_EXP 107
24540: PUSH
24541: LD_INT 84
24543: ST_TO_ADDR
// tech_Crane := 85 ;
24544: LD_ADDR_EXP 108
24548: PUSH
24549: LD_INT 85
24551: ST_TO_ADDR
// tech_Bulldozer := 86 ;
24552: LD_ADDR_EXP 109
24556: PUSH
24557: LD_INT 86
24559: ST_TO_ADDR
// tech_Hovercraft := 87 ;
24560: LD_ADDR_EXP 110
24564: PUSH
24565: LD_INT 87
24567: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
24568: LD_ADDR_EXP 111
24572: PUSH
24573: LD_INT 88
24575: ST_TO_ADDR
// end ;
24576: LD_VAR 0 1
24580: RET
// every 1 do
24581: GO 24583
24583: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
24584: CALL 24429 0 0
24588: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24589: LD_INT 0
24591: PPUSH
24592: PPUSH
// if exist_mode then
24593: LD_VAR 0 2
24597: IFFALSE 24622
// unit := CreateCharacter ( prefix & ident ) else
24599: LD_ADDR_VAR 0 5
24603: PUSH
24604: LD_VAR 0 3
24608: PUSH
24609: LD_VAR 0 1
24613: STR
24614: PPUSH
24615: CALL_OW 34
24619: ST_TO_ADDR
24620: GO 24637
// unit := NewCharacter ( ident ) ;
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: LD_VAR 0 1
24631: PPUSH
24632: CALL_OW 25
24636: ST_TO_ADDR
// result := unit ;
24637: LD_ADDR_VAR 0 4
24641: PUSH
24642: LD_VAR 0 5
24646: ST_TO_ADDR
// end ;
24647: LD_VAR 0 4
24651: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24652: LD_INT 0
24654: PPUSH
24655: PPUSH
// if not side or not nation then
24656: LD_VAR 0 1
24660: NOT
24661: PUSH
24662: LD_VAR 0 2
24666: NOT
24667: OR
24668: IFFALSE 24672
// exit ;
24670: GO 25440
// case nation of nation_american :
24672: LD_VAR 0 2
24676: PUSH
24677: LD_INT 1
24679: DOUBLE
24680: EQUAL
24681: IFTRUE 24685
24683: GO 24899
24685: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24686: LD_ADDR_VAR 0 4
24690: PUSH
24691: LD_INT 35
24693: PUSH
24694: LD_INT 45
24696: PUSH
24697: LD_INT 46
24699: PUSH
24700: LD_INT 47
24702: PUSH
24703: LD_INT 82
24705: PUSH
24706: LD_INT 83
24708: PUSH
24709: LD_INT 84
24711: PUSH
24712: LD_INT 85
24714: PUSH
24715: LD_INT 86
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 6
24726: PUSH
24727: LD_INT 15
24729: PUSH
24730: LD_INT 16
24732: PUSH
24733: LD_INT 7
24735: PUSH
24736: LD_INT 12
24738: PUSH
24739: LD_INT 13
24741: PUSH
24742: LD_INT 10
24744: PUSH
24745: LD_INT 14
24747: PUSH
24748: LD_INT 20
24750: PUSH
24751: LD_INT 21
24753: PUSH
24754: LD_INT 22
24756: PUSH
24757: LD_INT 25
24759: PUSH
24760: LD_INT 32
24762: PUSH
24763: LD_INT 27
24765: PUSH
24766: LD_INT 36
24768: PUSH
24769: LD_INT 69
24771: PUSH
24772: LD_INT 39
24774: PUSH
24775: LD_INT 34
24777: PUSH
24778: LD_INT 40
24780: PUSH
24781: LD_INT 48
24783: PUSH
24784: LD_INT 49
24786: PUSH
24787: LD_INT 50
24789: PUSH
24790: LD_INT 51
24792: PUSH
24793: LD_INT 52
24795: PUSH
24796: LD_INT 53
24798: PUSH
24799: LD_INT 54
24801: PUSH
24802: LD_INT 55
24804: PUSH
24805: LD_INT 56
24807: PUSH
24808: LD_INT 57
24810: PUSH
24811: LD_INT 58
24813: PUSH
24814: LD_INT 59
24816: PUSH
24817: LD_INT 60
24819: PUSH
24820: LD_INT 61
24822: PUSH
24823: LD_INT 62
24825: PUSH
24826: LD_INT 80
24828: PUSH
24829: LD_INT 82
24831: PUSH
24832: LD_INT 83
24834: PUSH
24835: LD_INT 84
24837: PUSH
24838: LD_INT 85
24840: PUSH
24841: LD_INT 86
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
24897: GO 25364
24899: LD_INT 2
24901: DOUBLE
24902: EQUAL
24903: IFTRUE 24907
24905: GO 25133
24907: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24908: LD_ADDR_VAR 0 4
24912: PUSH
24913: LD_INT 35
24915: PUSH
24916: LD_INT 45
24918: PUSH
24919: LD_INT 46
24921: PUSH
24922: LD_INT 47
24924: PUSH
24925: LD_INT 82
24927: PUSH
24928: LD_INT 83
24930: PUSH
24931: LD_INT 84
24933: PUSH
24934: LD_INT 85
24936: PUSH
24937: LD_INT 87
24939: PUSH
24940: LD_INT 70
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 11
24948: PUSH
24949: LD_INT 3
24951: PUSH
24952: LD_INT 4
24954: PUSH
24955: LD_INT 5
24957: PUSH
24958: LD_INT 6
24960: PUSH
24961: LD_INT 15
24963: PUSH
24964: LD_INT 18
24966: PUSH
24967: LD_INT 7
24969: PUSH
24970: LD_INT 17
24972: PUSH
24973: LD_INT 8
24975: PUSH
24976: LD_INT 20
24978: PUSH
24979: LD_INT 21
24981: PUSH
24982: LD_INT 22
24984: PUSH
24985: LD_INT 72
24987: PUSH
24988: LD_INT 26
24990: PUSH
24991: LD_INT 69
24993: PUSH
24994: LD_INT 39
24996: PUSH
24997: LD_INT 40
24999: PUSH
25000: LD_INT 41
25002: PUSH
25003: LD_INT 42
25005: PUSH
25006: LD_INT 43
25008: PUSH
25009: LD_INT 48
25011: PUSH
25012: LD_INT 49
25014: PUSH
25015: LD_INT 50
25017: PUSH
25018: LD_INT 51
25020: PUSH
25021: LD_INT 52
25023: PUSH
25024: LD_INT 53
25026: PUSH
25027: LD_INT 54
25029: PUSH
25030: LD_INT 55
25032: PUSH
25033: LD_INT 56
25035: PUSH
25036: LD_INT 60
25038: PUSH
25039: LD_INT 61
25041: PUSH
25042: LD_INT 62
25044: PUSH
25045: LD_INT 66
25047: PUSH
25048: LD_INT 67
25050: PUSH
25051: LD_INT 68
25053: PUSH
25054: LD_INT 81
25056: PUSH
25057: LD_INT 82
25059: PUSH
25060: LD_INT 83
25062: PUSH
25063: LD_INT 84
25065: PUSH
25066: LD_INT 85
25068: PUSH
25069: LD_INT 87
25071: PUSH
25072: LD_INT 88
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: ST_TO_ADDR
25131: GO 25364
25133: LD_INT 3
25135: DOUBLE
25136: EQUAL
25137: IFTRUE 25141
25139: GO 25363
25141: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25142: LD_ADDR_VAR 0 4
25146: PUSH
25147: LD_INT 46
25149: PUSH
25150: LD_INT 47
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 82
25161: PUSH
25162: LD_INT 83
25164: PUSH
25165: LD_INT 84
25167: PUSH
25168: LD_INT 85
25170: PUSH
25171: LD_INT 86
25173: PUSH
25174: LD_INT 11
25176: PUSH
25177: LD_INT 9
25179: PUSH
25180: LD_INT 20
25182: PUSH
25183: LD_INT 19
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 24
25191: PUSH
25192: LD_INT 22
25194: PUSH
25195: LD_INT 25
25197: PUSH
25198: LD_INT 28
25200: PUSH
25201: LD_INT 29
25203: PUSH
25204: LD_INT 30
25206: PUSH
25207: LD_INT 31
25209: PUSH
25210: LD_INT 37
25212: PUSH
25213: LD_INT 38
25215: PUSH
25216: LD_INT 32
25218: PUSH
25219: LD_INT 27
25221: PUSH
25222: LD_INT 33
25224: PUSH
25225: LD_INT 69
25227: PUSH
25228: LD_INT 39
25230: PUSH
25231: LD_INT 34
25233: PUSH
25234: LD_INT 40
25236: PUSH
25237: LD_INT 71
25239: PUSH
25240: LD_INT 23
25242: PUSH
25243: LD_INT 44
25245: PUSH
25246: LD_INT 48
25248: PUSH
25249: LD_INT 49
25251: PUSH
25252: LD_INT 50
25254: PUSH
25255: LD_INT 51
25257: PUSH
25258: LD_INT 52
25260: PUSH
25261: LD_INT 53
25263: PUSH
25264: LD_INT 54
25266: PUSH
25267: LD_INT 55
25269: PUSH
25270: LD_INT 56
25272: PUSH
25273: LD_INT 57
25275: PUSH
25276: LD_INT 58
25278: PUSH
25279: LD_INT 59
25281: PUSH
25282: LD_INT 63
25284: PUSH
25285: LD_INT 64
25287: PUSH
25288: LD_INT 65
25290: PUSH
25291: LD_INT 82
25293: PUSH
25294: LD_INT 83
25296: PUSH
25297: LD_INT 84
25299: PUSH
25300: LD_INT 85
25302: PUSH
25303: LD_INT 86
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: ST_TO_ADDR
25361: GO 25364
25363: POP
// if state > - 1 and state < 3 then
25364: LD_VAR 0 3
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: GREATER
25373: PUSH
25374: LD_VAR 0 3
25378: PUSH
25379: LD_INT 3
25381: LESS
25382: AND
25383: IFFALSE 25440
// for i in result do
25385: LD_ADDR_VAR 0 5
25389: PUSH
25390: LD_VAR 0 4
25394: PUSH
25395: FOR_IN
25396: IFFALSE 25438
// if GetTech ( i , side ) <> state then
25398: LD_VAR 0 5
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 321
25412: PUSH
25413: LD_VAR 0 3
25417: NONEQUAL
25418: IFFALSE 25436
// result := result diff i ;
25420: LD_ADDR_VAR 0 4
25424: PUSH
25425: LD_VAR 0 4
25429: PUSH
25430: LD_VAR 0 5
25434: DIFF
25435: ST_TO_ADDR
25436: GO 25395
25438: POP
25439: POP
// end ;
25440: LD_VAR 0 4
25444: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25445: LD_INT 0
25447: PPUSH
25448: PPUSH
25449: PPUSH
// result := true ;
25450: LD_ADDR_VAR 0 3
25454: PUSH
25455: LD_INT 1
25457: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: LD_VAR 0 2
25467: PPUSH
25468: CALL_OW 480
25472: ST_TO_ADDR
// if not tmp then
25473: LD_VAR 0 5
25477: NOT
25478: IFFALSE 25482
// exit ;
25480: GO 25531
// for i in tmp do
25482: LD_ADDR_VAR 0 4
25486: PUSH
25487: LD_VAR 0 5
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25529
// if GetTech ( i , side ) <> state_researched then
25495: LD_VAR 0 4
25499: PPUSH
25500: LD_VAR 0 1
25504: PPUSH
25505: CALL_OW 321
25509: PUSH
25510: LD_INT 2
25512: NONEQUAL
25513: IFFALSE 25527
// begin result := false ;
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 0
25522: ST_TO_ADDR
// exit ;
25523: POP
25524: POP
25525: GO 25531
// end ;
25527: GO 25492
25529: POP
25530: POP
// end ;
25531: LD_VAR 0 3
25535: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25536: LD_INT 0
25538: PPUSH
25539: PPUSH
25540: PPUSH
25541: PPUSH
25542: PPUSH
25543: PPUSH
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25551: LD_VAR 0 1
25555: NOT
25556: PUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 257
25566: PUSH
25567: LD_INT 9
25569: NONEQUAL
25570: OR
25571: IFFALSE 25575
// exit ;
25573: GO 26148
// side := GetSide ( unit ) ;
25575: LD_ADDR_VAR 0 9
25579: PUSH
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 255
25589: ST_TO_ADDR
// tech_space := tech_spacanom ;
25590: LD_ADDR_VAR 0 12
25594: PUSH
25595: LD_INT 29
25597: ST_TO_ADDR
// tech_time := tech_taurad ;
25598: LD_ADDR_VAR 0 13
25602: PUSH
25603: LD_INT 28
25605: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25606: LD_ADDR_VAR 0 11
25610: PUSH
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL_OW 310
25620: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25621: LD_VAR 0 11
25625: PPUSH
25626: CALL_OW 247
25630: PUSH
25631: LD_INT 2
25633: EQUAL
25634: IFFALSE 25638
// exit ;
25636: GO 26148
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25638: LD_ADDR_VAR 0 8
25642: PUSH
25643: LD_INT 81
25645: PUSH
25646: LD_VAR 0 9
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 3
25657: PUSH
25658: LD_INT 21
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PPUSH
25676: CALL_OW 69
25680: ST_TO_ADDR
// if not tmp then
25681: LD_VAR 0 8
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 26148
// if in_unit then
25690: LD_VAR 0 11
25694: IFFALSE 25718
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25696: LD_ADDR_VAR 0 10
25700: PUSH
25701: LD_VAR 0 8
25705: PPUSH
25706: LD_VAR 0 11
25710: PPUSH
25711: CALL_OW 74
25715: ST_TO_ADDR
25716: GO 25738
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25718: LD_ADDR_VAR 0 10
25722: PUSH
25723: LD_VAR 0 8
25727: PPUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 74
25737: ST_TO_ADDR
// if not enemy then
25738: LD_VAR 0 10
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 26148
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25747: LD_VAR 0 11
25751: PUSH
25752: LD_VAR 0 11
25756: PPUSH
25757: LD_VAR 0 10
25761: PPUSH
25762: CALL_OW 296
25766: PUSH
25767: LD_INT 13
25769: GREATER
25770: AND
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: LD_VAR 0 10
25781: PPUSH
25782: CALL_OW 296
25786: PUSH
25787: LD_INT 12
25789: GREATER
25790: OR
25791: IFFALSE 25795
// exit ;
25793: GO 26148
// missile := [ 1 ] ;
25795: LD_ADDR_VAR 0 14
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25806: LD_VAR 0 9
25810: PPUSH
25811: LD_VAR 0 12
25815: PPUSH
25816: CALL_OW 325
25820: IFFALSE 25849
// missile := Replace ( missile , missile + 1 , 2 ) ;
25822: LD_ADDR_VAR 0 14
25826: PUSH
25827: LD_VAR 0 14
25831: PPUSH
25832: LD_VAR 0 14
25836: PUSH
25837: LD_INT 1
25839: PLUS
25840: PPUSH
25841: LD_INT 2
25843: PPUSH
25844: CALL_OW 1
25848: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25849: LD_VAR 0 9
25853: PPUSH
25854: LD_VAR 0 13
25858: PPUSH
25859: CALL_OW 325
25863: PUSH
25864: LD_VAR 0 10
25868: PPUSH
25869: CALL_OW 255
25873: PPUSH
25874: LD_VAR 0 13
25878: PPUSH
25879: CALL_OW 325
25883: NOT
25884: AND
25885: IFFALSE 25914
// missile := Replace ( missile , missile + 1 , 3 ) ;
25887: LD_ADDR_VAR 0 14
25891: PUSH
25892: LD_VAR 0 14
25896: PPUSH
25897: LD_VAR 0 14
25901: PUSH
25902: LD_INT 1
25904: PLUS
25905: PPUSH
25906: LD_INT 3
25908: PPUSH
25909: CALL_OW 1
25913: ST_TO_ADDR
// if missile < 2 then
25914: LD_VAR 0 14
25918: PUSH
25919: LD_INT 2
25921: LESS
25922: IFFALSE 25926
// exit ;
25924: GO 26148
// x := GetX ( enemy ) ;
25926: LD_ADDR_VAR 0 4
25930: PUSH
25931: LD_VAR 0 10
25935: PPUSH
25936: CALL_OW 250
25940: ST_TO_ADDR
// y := GetY ( enemy ) ;
25941: LD_ADDR_VAR 0 5
25945: PUSH
25946: LD_VAR 0 10
25950: PPUSH
25951: CALL_OW 251
25955: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25956: LD_ADDR_VAR 0 6
25960: PUSH
25961: LD_VAR 0 4
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PPUSH
25970: LD_INT 1
25972: PPUSH
25973: CALL_OW 12
25977: PLUS
25978: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25979: LD_ADDR_VAR 0 7
25983: PUSH
25984: LD_VAR 0 5
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PPUSH
25993: LD_INT 1
25995: PPUSH
25996: CALL_OW 12
26000: PLUS
26001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26002: LD_VAR 0 6
26006: PPUSH
26007: LD_VAR 0 7
26011: PPUSH
26012: CALL_OW 488
26016: NOT
26017: IFFALSE 26039
// begin _x := x ;
26019: LD_ADDR_VAR 0 6
26023: PUSH
26024: LD_VAR 0 4
26028: ST_TO_ADDR
// _y := y ;
26029: LD_ADDR_VAR 0 7
26033: PUSH
26034: LD_VAR 0 5
26038: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_INT 1
26046: PPUSH
26047: LD_VAR 0 14
26051: PPUSH
26052: CALL_OW 12
26056: ST_TO_ADDR
// case i of 1 :
26057: LD_VAR 0 3
26061: PUSH
26062: LD_INT 1
26064: DOUBLE
26065: EQUAL
26066: IFTRUE 26070
26068: GO 26087
26070: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_VAR 0 10
26080: PPUSH
26081: CALL_OW 115
26085: GO 26148
26087: LD_INT 2
26089: DOUBLE
26090: EQUAL
26091: IFTRUE 26095
26093: GO 26117
26095: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26096: LD_VAR 0 1
26100: PPUSH
26101: LD_VAR 0 6
26105: PPUSH
26106: LD_VAR 0 7
26110: PPUSH
26111: CALL_OW 153
26115: GO 26148
26117: LD_INT 3
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26147
26125: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26126: LD_VAR 0 1
26130: PPUSH
26131: LD_VAR 0 6
26135: PPUSH
26136: LD_VAR 0 7
26140: PPUSH
26141: CALL_OW 154
26145: GO 26148
26147: POP
// end ;
26148: LD_VAR 0 2
26152: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26153: LD_INT 0
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
// if not unit or not building then
26161: LD_VAR 0 1
26165: NOT
26166: PUSH
26167: LD_VAR 0 2
26171: NOT
26172: OR
26173: IFFALSE 26177
// exit ;
26175: GO 26335
// x := GetX ( building ) ;
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: LD_VAR 0 2
26186: PPUSH
26187: CALL_OW 250
26191: ST_TO_ADDR
// y := GetY ( building ) ;
26192: LD_ADDR_VAR 0 6
26196: PUSH
26197: LD_VAR 0 2
26201: PPUSH
26202: CALL_OW 251
26206: ST_TO_ADDR
// for i = 0 to 5 do
26207: LD_ADDR_VAR 0 4
26211: PUSH
26212: DOUBLE
26213: LD_INT 0
26215: DEC
26216: ST_TO_ADDR
26217: LD_INT 5
26219: PUSH
26220: FOR_TO
26221: IFFALSE 26333
// begin _x := ShiftX ( x , i , 3 ) ;
26223: LD_ADDR_VAR 0 7
26227: PUSH
26228: LD_VAR 0 5
26232: PPUSH
26233: LD_VAR 0 4
26237: PPUSH
26238: LD_INT 3
26240: PPUSH
26241: CALL_OW 272
26245: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26246: LD_ADDR_VAR 0 8
26250: PUSH
26251: LD_VAR 0 6
26255: PPUSH
26256: LD_VAR 0 4
26260: PPUSH
26261: LD_INT 3
26263: PPUSH
26264: CALL_OW 273
26268: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26269: LD_VAR 0 7
26273: PPUSH
26274: LD_VAR 0 8
26278: PPUSH
26279: CALL_OW 488
26283: NOT
26284: IFFALSE 26288
// continue ;
26286: GO 26220
// if HexInfo ( _x , _y ) = 0 then
26288: LD_VAR 0 7
26292: PPUSH
26293: LD_VAR 0 8
26297: PPUSH
26298: CALL_OW 428
26302: PUSH
26303: LD_INT 0
26305: EQUAL
26306: IFFALSE 26331
// begin ComMoveXY ( unit , _x , _y ) ;
26308: LD_VAR 0 1
26312: PPUSH
26313: LD_VAR 0 7
26317: PPUSH
26318: LD_VAR 0 8
26322: PPUSH
26323: CALL_OW 111
// exit ;
26327: POP
26328: POP
26329: GO 26335
// end ; end ;
26331: GO 26220
26333: POP
26334: POP
// end ;
26335: LD_VAR 0 3
26339: RET
// export function ScanBase ( side , base_area ) ; begin
26340: LD_INT 0
26342: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26343: LD_ADDR_VAR 0 3
26347: PUSH
26348: LD_VAR 0 2
26352: PPUSH
26353: LD_INT 81
26355: PUSH
26356: LD_VAR 0 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PPUSH
26365: CALL_OW 70
26369: ST_TO_ADDR
// end ;
26370: LD_VAR 0 3
26374: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26375: LD_INT 0
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
// result := false ;
26381: LD_ADDR_VAR 0 2
26385: PUSH
26386: LD_INT 0
26388: ST_TO_ADDR
// side := GetSide ( unit ) ;
26389: LD_ADDR_VAR 0 3
26393: PUSH
26394: LD_VAR 0 1
26398: PPUSH
26399: CALL_OW 255
26403: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 248
26418: ST_TO_ADDR
// case nat of 1 :
26419: LD_VAR 0 4
26423: PUSH
26424: LD_INT 1
26426: DOUBLE
26427: EQUAL
26428: IFTRUE 26432
26430: GO 26443
26432: POP
// tech := tech_lassight ; 2 :
26433: LD_ADDR_VAR 0 5
26437: PUSH
26438: LD_INT 12
26440: ST_TO_ADDR
26441: GO 26482
26443: LD_INT 2
26445: DOUBLE
26446: EQUAL
26447: IFTRUE 26451
26449: GO 26462
26451: POP
// tech := tech_mortar ; 3 :
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: LD_INT 41
26459: ST_TO_ADDR
26460: GO 26482
26462: LD_INT 3
26464: DOUBLE
26465: EQUAL
26466: IFTRUE 26470
26468: GO 26481
26470: POP
// tech := tech_bazooka ; end ;
26471: LD_ADDR_VAR 0 5
26475: PUSH
26476: LD_INT 44
26478: ST_TO_ADDR
26479: GO 26482
26481: POP
// if Researched ( side , tech ) then
26482: LD_VAR 0 3
26486: PPUSH
26487: LD_VAR 0 5
26491: PPUSH
26492: CALL_OW 325
26496: IFFALSE 26523
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26498: LD_ADDR_VAR 0 2
26502: PUSH
26503: LD_INT 5
26505: PUSH
26506: LD_INT 8
26508: PUSH
26509: LD_INT 9
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: PUSH
26517: LD_VAR 0 4
26521: ARRAY
26522: ST_TO_ADDR
// end ;
26523: LD_VAR 0 2
26527: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26528: LD_INT 0
26530: PPUSH
26531: PPUSH
26532: PPUSH
// if not mines then
26533: LD_VAR 0 2
26537: NOT
26538: IFFALSE 26542
// exit ;
26540: GO 26686
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26542: LD_ADDR_VAR 0 5
26546: PUSH
26547: LD_INT 81
26549: PUSH
26550: LD_VAR 0 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 3
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PPUSH
26580: CALL_OW 69
26584: ST_TO_ADDR
// for i in mines do
26585: LD_ADDR_VAR 0 4
26589: PUSH
26590: LD_VAR 0 2
26594: PUSH
26595: FOR_IN
26596: IFFALSE 26684
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26598: LD_VAR 0 4
26602: PUSH
26603: LD_INT 1
26605: ARRAY
26606: PPUSH
26607: LD_VAR 0 4
26611: PUSH
26612: LD_INT 2
26614: ARRAY
26615: PPUSH
26616: CALL_OW 458
26620: NOT
26621: IFFALSE 26625
// continue ;
26623: GO 26595
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26625: LD_VAR 0 4
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: PPUSH
26634: LD_VAR 0 4
26638: PUSH
26639: LD_INT 2
26641: ARRAY
26642: PPUSH
26643: CALL_OW 428
26647: PUSH
26648: LD_VAR 0 5
26652: IN
26653: IFFALSE 26682
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26655: LD_VAR 0 4
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 4
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: LD_VAR 0 1
26677: PPUSH
26678: CALL_OW 456
// end ;
26682: GO 26595
26684: POP
26685: POP
// end ;
26686: LD_VAR 0 3
26690: RET
// export function Count ( array ) ; var i ; begin
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
// result := 0 ;
26695: LD_ADDR_VAR 0 2
26699: PUSH
26700: LD_INT 0
26702: ST_TO_ADDR
// for i in array do
26703: LD_ADDR_VAR 0 3
26707: PUSH
26708: LD_VAR 0 1
26712: PUSH
26713: FOR_IN
26714: IFFALSE 26738
// if i then
26716: LD_VAR 0 3
26720: IFFALSE 26736
// result := result + 1 ;
26722: LD_ADDR_VAR 0 2
26726: PUSH
26727: LD_VAR 0 2
26731: PUSH
26732: LD_INT 1
26734: PLUS
26735: ST_TO_ADDR
26736: GO 26713
26738: POP
26739: POP
// end ;
26740: LD_VAR 0 2
26744: RET
// export function IsEmpty ( building ) ; begin
26745: LD_INT 0
26747: PPUSH
// if not building then
26748: LD_VAR 0 1
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 26800
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26757: LD_ADDR_VAR 0 2
26761: PUSH
26762: LD_VAR 0 1
26766: PUSH
26767: LD_INT 22
26769: PUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 255
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 58
26786: PUSH
26787: EMPTY
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: IN
26799: ST_TO_ADDR
// end ;
26800: LD_VAR 0 2
26804: RET
// export function IsNotFull ( building ) ; var places ; begin
26805: LD_INT 0
26807: PPUSH
26808: PPUSH
// if not building then
26809: LD_VAR 0 1
26813: NOT
26814: IFFALSE 26818
// exit ;
26816: GO 26989
// result := false ;
26818: LD_ADDR_VAR 0 2
26822: PUSH
26823: LD_INT 0
26825: ST_TO_ADDR
// places := 0 ;
26826: LD_ADDR_VAR 0 3
26830: PUSH
26831: LD_INT 0
26833: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26834: LD_VAR 0 1
26838: PPUSH
26839: CALL_OW 266
26843: PUSH
26844: LD_INT 0
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26906
26850: LD_INT 1
26852: DOUBLE
26853: EQUAL
26854: IFTRUE 26906
26856: LD_INT 6
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26906
26862: LD_INT 7
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26906
26868: LD_INT 8
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26906
26874: LD_INT 4
26876: DOUBLE
26877: EQUAL
26878: IFTRUE 26906
26880: LD_INT 5
26882: DOUBLE
26883: EQUAL
26884: IFTRUE 26906
26886: LD_INT 2
26888: DOUBLE
26889: EQUAL
26890: IFTRUE 26906
26892: LD_INT 3
26894: DOUBLE
26895: EQUAL
26896: IFTRUE 26906
26898: LD_INT 35
26900: DOUBLE
26901: EQUAL
26902: IFTRUE 26906
26904: GO 26917
26906: POP
// places := 6 ; b_bunker , b_breastwork :
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_INT 6
26914: ST_TO_ADDR
26915: GO 26962
26917: LD_INT 32
26919: DOUBLE
26920: EQUAL
26921: IFTRUE 26931
26923: LD_INT 31
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26931
26929: GO 26942
26931: POP
// places := 1 ; b_control_tower :
26932: LD_ADDR_VAR 0 3
26936: PUSH
26937: LD_INT 1
26939: ST_TO_ADDR
26940: GO 26962
26942: LD_INT 36
26944: DOUBLE
26945: EQUAL
26946: IFTRUE 26950
26948: GO 26961
26950: POP
// places := 3 ; end ;
26951: LD_ADDR_VAR 0 3
26955: PUSH
26956: LD_INT 3
26958: ST_TO_ADDR
26959: GO 26962
26961: POP
// if places then
26962: LD_VAR 0 3
26966: IFFALSE 26989
// result := UnitsInside ( building ) < places ;
26968: LD_ADDR_VAR 0 2
26972: PUSH
26973: LD_VAR 0 1
26977: PPUSH
26978: CALL_OW 313
26982: PUSH
26983: LD_VAR 0 3
26987: LESS
26988: ST_TO_ADDR
// end ;
26989: LD_VAR 0 2
26993: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
// tmp := [ ] ;
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: EMPTY
27006: ST_TO_ADDR
// list := [ ] ;
27007: LD_ADDR_VAR 0 5
27011: PUSH
27012: EMPTY
27013: ST_TO_ADDR
// for i = 16 to 25 do
27014: LD_ADDR_VAR 0 4
27018: PUSH
27019: DOUBLE
27020: LD_INT 16
27022: DEC
27023: ST_TO_ADDR
27024: LD_INT 25
27026: PUSH
27027: FOR_TO
27028: IFFALSE 27101
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_VAR 0 3
27039: PUSH
27040: LD_INT 22
27042: PUSH
27043: LD_VAR 0 1
27047: PPUSH
27048: CALL_OW 255
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 91
27059: PUSH
27060: LD_VAR 0 1
27064: PUSH
27065: LD_INT 6
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 30
27075: PUSH
27076: LD_VAR 0 4
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: EMPTY
27091: LIST
27092: PPUSH
27093: CALL_OW 69
27097: ADD
27098: ST_TO_ADDR
27099: GO 27027
27101: POP
27102: POP
// for i = 1 to tmp do
27103: LD_ADDR_VAR 0 4
27107: PUSH
27108: DOUBLE
27109: LD_INT 1
27111: DEC
27112: ST_TO_ADDR
27113: LD_VAR 0 3
27117: PUSH
27118: FOR_TO
27119: IFFALSE 27207
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27121: LD_ADDR_VAR 0 5
27125: PUSH
27126: LD_VAR 0 5
27130: PUSH
27131: LD_VAR 0 3
27135: PUSH
27136: LD_VAR 0 4
27140: ARRAY
27141: PPUSH
27142: CALL_OW 266
27146: PUSH
27147: LD_VAR 0 3
27151: PUSH
27152: LD_VAR 0 4
27156: ARRAY
27157: PPUSH
27158: CALL_OW 250
27162: PUSH
27163: LD_VAR 0 3
27167: PUSH
27168: LD_VAR 0 4
27172: ARRAY
27173: PPUSH
27174: CALL_OW 251
27178: PUSH
27179: LD_VAR 0 3
27183: PUSH
27184: LD_VAR 0 4
27188: ARRAY
27189: PPUSH
27190: CALL_OW 254
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: ADD
27204: ST_TO_ADDR
27205: GO 27118
27207: POP
27208: POP
// result := list ;
27209: LD_ADDR_VAR 0 2
27213: PUSH
27214: LD_VAR 0 5
27218: ST_TO_ADDR
// end ;
27219: LD_VAR 0 2
27223: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27224: LD_INT 0
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
// if not factory then
27233: LD_VAR 0 1
27237: NOT
27238: IFFALSE 27242
// exit ;
27240: GO 27835
// if control = control_apeman then
27242: LD_VAR 0 4
27246: PUSH
27247: LD_INT 5
27249: EQUAL
27250: IFFALSE 27359
// begin tmp := UnitsInside ( factory ) ;
27252: LD_ADDR_VAR 0 8
27256: PUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 313
27266: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27267: LD_VAR 0 8
27271: PPUSH
27272: LD_INT 25
27274: PUSH
27275: LD_INT 12
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PPUSH
27282: CALL_OW 72
27286: NOT
27287: IFFALSE 27297
// control := control_manual ;
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: LD_INT 1
27296: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27297: LD_ADDR_VAR 0 8
27301: PUSH
27302: LD_VAR 0 1
27306: PPUSH
27307: CALL 26994 0 1
27311: ST_TO_ADDR
// if tmp then
27312: LD_VAR 0 8
27316: IFFALSE 27359
// begin for i in tmp do
27318: LD_ADDR_VAR 0 7
27322: PUSH
27323: LD_VAR 0 8
27327: PUSH
27328: FOR_IN
27329: IFFALSE 27357
// if i [ 1 ] = b_ext_radio then
27331: LD_VAR 0 7
27335: PUSH
27336: LD_INT 1
27338: ARRAY
27339: PUSH
27340: LD_INT 22
27342: EQUAL
27343: IFFALSE 27355
// begin control := control_remote ;
27345: LD_ADDR_VAR 0 4
27349: PUSH
27350: LD_INT 2
27352: ST_TO_ADDR
// break ;
27353: GO 27357
// end ;
27355: GO 27328
27357: POP
27358: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27359: LD_VAR 0 1
27363: PPUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: LD_VAR 0 3
27373: PPUSH
27374: LD_VAR 0 4
27378: PPUSH
27379: LD_VAR 0 5
27383: PPUSH
27384: CALL_OW 448
27388: IFFALSE 27423
// begin result := [ chassis , engine , control , weapon ] ;
27390: LD_ADDR_VAR 0 6
27394: PUSH
27395: LD_VAR 0 2
27399: PUSH
27400: LD_VAR 0 3
27404: PUSH
27405: LD_VAR 0 4
27409: PUSH
27410: LD_VAR 0 5
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
// exit ;
27421: GO 27835
// end ; _chassis := AvailableChassisList ( factory ) ;
27423: LD_ADDR_VAR 0 9
27427: PUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 475
27437: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27438: LD_ADDR_VAR 0 11
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 476
27452: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27453: LD_ADDR_VAR 0 12
27457: PUSH
27458: LD_VAR 0 1
27462: PPUSH
27463: CALL_OW 477
27467: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27468: LD_ADDR_VAR 0 10
27472: PUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 478
27482: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27483: LD_VAR 0 9
27487: NOT
27488: PUSH
27489: LD_VAR 0 11
27493: NOT
27494: OR
27495: PUSH
27496: LD_VAR 0 12
27500: NOT
27501: OR
27502: PUSH
27503: LD_VAR 0 10
27507: NOT
27508: OR
27509: IFFALSE 27544
// begin result := [ chassis , engine , control , weapon ] ;
27511: LD_ADDR_VAR 0 6
27515: PUSH
27516: LD_VAR 0 2
27520: PUSH
27521: LD_VAR 0 3
27525: PUSH
27526: LD_VAR 0 4
27530: PUSH
27531: LD_VAR 0 5
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// exit ;
27542: GO 27835
// end ; if not chassis in _chassis then
27544: LD_VAR 0 2
27548: PUSH
27549: LD_VAR 0 9
27553: IN
27554: NOT
27555: IFFALSE 27581
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: LD_VAR 0 9
27566: PUSH
27567: LD_INT 1
27569: PPUSH
27570: LD_VAR 0 9
27574: PPUSH
27575: CALL_OW 12
27579: ARRAY
27580: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27581: LD_VAR 0 2
27585: PPUSH
27586: LD_VAR 0 3
27590: PPUSH
27591: CALL 27840 0 2
27595: NOT
27596: IFFALSE 27655
// repeat engine := _engine [ 1 ] ;
27598: LD_ADDR_VAR 0 3
27602: PUSH
27603: LD_VAR 0 11
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27612: LD_ADDR_VAR 0 11
27616: PUSH
27617: LD_VAR 0 11
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: CALL_OW 3
27629: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_VAR 0 3
27639: PPUSH
27640: CALL 27840 0 2
27644: PUSH
27645: LD_VAR 0 11
27649: PUSH
27650: EMPTY
27651: EQUAL
27652: OR
27653: IFFALSE 27598
// if not control in _control then
27655: LD_VAR 0 4
27659: PUSH
27660: LD_VAR 0 12
27664: IN
27665: NOT
27666: IFFALSE 27692
// control := _control [ rand ( 1 , _control ) ] ;
27668: LD_ADDR_VAR 0 4
27672: PUSH
27673: LD_VAR 0 12
27677: PUSH
27678: LD_INT 1
27680: PPUSH
27681: LD_VAR 0 12
27685: PPUSH
27686: CALL_OW 12
27690: ARRAY
27691: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27692: LD_VAR 0 2
27696: PPUSH
27697: LD_VAR 0 5
27701: PPUSH
27702: CALL 28060 0 2
27706: NOT
27707: IFFALSE 27766
// repeat weapon := _weapon [ 1 ] ;
27709: LD_ADDR_VAR 0 5
27713: PUSH
27714: LD_VAR 0 10
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27723: LD_ADDR_VAR 0 10
27727: PUSH
27728: LD_VAR 0 10
27732: PPUSH
27733: LD_INT 1
27735: PPUSH
27736: CALL_OW 3
27740: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27741: LD_VAR 0 2
27745: PPUSH
27746: LD_VAR 0 5
27750: PPUSH
27751: CALL 28060 0 2
27755: PUSH
27756: LD_VAR 0 10
27760: PUSH
27761: EMPTY
27762: EQUAL
27763: OR
27764: IFFALSE 27709
// result := [ ] ;
27766: LD_ADDR_VAR 0 6
27770: PUSH
27771: EMPTY
27772: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27773: LD_VAR 0 1
27777: PPUSH
27778: LD_VAR 0 2
27782: PPUSH
27783: LD_VAR 0 3
27787: PPUSH
27788: LD_VAR 0 4
27792: PPUSH
27793: LD_VAR 0 5
27797: PPUSH
27798: CALL_OW 448
27802: IFFALSE 27835
// result := [ chassis , engine , control , weapon ] ;
27804: LD_ADDR_VAR 0 6
27808: PUSH
27809: LD_VAR 0 2
27813: PUSH
27814: LD_VAR 0 3
27818: PUSH
27819: LD_VAR 0 4
27823: PUSH
27824: LD_VAR 0 5
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
// end ;
27835: LD_VAR 0 6
27839: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27840: LD_INT 0
27842: PPUSH
// if not chassis or not engine then
27843: LD_VAR 0 1
27847: NOT
27848: PUSH
27849: LD_VAR 0 2
27853: NOT
27854: OR
27855: IFFALSE 27859
// exit ;
27857: GO 28055
// case engine of engine_solar :
27859: LD_VAR 0 2
27863: PUSH
27864: LD_INT 2
27866: DOUBLE
27867: EQUAL
27868: IFTRUE 27872
27870: GO 27910
27872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27873: LD_ADDR_VAR 0 3
27877: PUSH
27878: LD_INT 11
27880: PUSH
27881: LD_INT 12
27883: PUSH
27884: LD_INT 13
27886: PUSH
27887: LD_INT 14
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
27908: GO 28039
27910: LD_INT 1
27912: DOUBLE
27913: EQUAL
27914: IFTRUE 27918
27916: GO 27980
27918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_INT 11
27926: PUSH
27927: LD_INT 12
27929: PUSH
27930: LD_INT 13
27932: PUSH
27933: LD_INT 14
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: LD_INT 4
27947: PUSH
27948: LD_INT 5
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 23
27956: PUSH
27957: LD_INT 22
27959: PUSH
27960: LD_INT 24
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
27978: GO 28039
27980: LD_INT 3
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 27988
27986: GO 28038
27988: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_INT 13
27996: PUSH
27997: LD_INT 14
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: LD_INT 5
28011: PUSH
28012: LD_INT 21
28014: PUSH
28015: LD_INT 22
28017: PUSH
28018: LD_INT 23
28020: PUSH
28021: LD_INT 24
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: ST_TO_ADDR
28036: GO 28039
28038: POP
// result := ( chassis in result ) ;
28039: LD_ADDR_VAR 0 3
28043: PUSH
28044: LD_VAR 0 1
28048: PUSH
28049: LD_VAR 0 3
28053: IN
28054: ST_TO_ADDR
// end ;
28055: LD_VAR 0 3
28059: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28060: LD_INT 0
28062: PPUSH
// if not chassis or not weapon then
28063: LD_VAR 0 1
28067: NOT
28068: PUSH
28069: LD_VAR 0 2
28073: NOT
28074: OR
28075: IFFALSE 28079
// exit ;
28077: GO 29141
// case weapon of us_machine_gun :
28079: LD_VAR 0 2
28083: PUSH
28084: LD_INT 2
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28122
28092: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28093: LD_ADDR_VAR 0 3
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 3
28106: PUSH
28107: LD_INT 4
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
28120: GO 29125
28122: LD_INT 3
28124: DOUBLE
28125: EQUAL
28126: IFTRUE 28130
28128: GO 28160
28130: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28131: LD_ADDR_VAR 0 3
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 4
28147: PUSH
28148: LD_INT 5
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
28158: GO 29125
28160: LD_INT 11
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28198
28168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 4
28185: PUSH
28186: LD_INT 5
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
28196: GO 29125
28198: LD_INT 4
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28232
28206: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28207: LD_ADDR_VAR 0 3
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 4
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
28230: GO 29125
28232: LD_INT 5
28234: DOUBLE
28235: EQUAL
28236: IFTRUE 28240
28238: GO 28266
28240: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28241: LD_ADDR_VAR 0 3
28245: PUSH
28246: LD_INT 2
28248: PUSH
28249: LD_INT 3
28251: PUSH
28252: LD_INT 4
28254: PUSH
28255: LD_INT 5
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
28264: GO 29125
28266: LD_INT 9
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28300
28274: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28275: LD_ADDR_VAR 0 3
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 4
28288: PUSH
28289: LD_INT 5
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: ST_TO_ADDR
28298: GO 29125
28300: LD_INT 7
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28334
28308: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: LD_INT 3
28319: PUSH
28320: LD_INT 4
28322: PUSH
28323: LD_INT 5
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: ST_TO_ADDR
28332: GO 29125
28334: LD_INT 12
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 28368
28342: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 4
28356: PUSH
28357: LD_INT 5
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: ST_TO_ADDR
28366: GO 29125
28368: LD_INT 13
28370: DOUBLE
28371: EQUAL
28372: IFTRUE 28376
28374: GO 28402
28376: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28377: LD_ADDR_VAR 0 3
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: LD_INT 3
28387: PUSH
28388: LD_INT 4
28390: PUSH
28391: LD_INT 5
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: ST_TO_ADDR
28400: GO 29125
28402: LD_INT 14
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28410
28408: GO 28428
28410: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 4
28418: PUSH
28419: LD_INT 5
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: ST_TO_ADDR
28426: GO 29125
28428: LD_INT 6
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28454
28436: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28437: LD_ADDR_VAR 0 3
28441: PUSH
28442: LD_INT 4
28444: PUSH
28445: LD_INT 5
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: ST_TO_ADDR
28452: GO 29125
28454: LD_INT 10
28456: DOUBLE
28457: EQUAL
28458: IFTRUE 28462
28460: GO 28480
28462: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28463: LD_ADDR_VAR 0 3
28467: PUSH
28468: LD_INT 4
28470: PUSH
28471: LD_INT 5
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: ST_TO_ADDR
28478: GO 29125
28480: LD_INT 22
28482: DOUBLE
28483: EQUAL
28484: IFTRUE 28488
28486: GO 28514
28488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: LD_INT 11
28496: PUSH
28497: LD_INT 12
28499: PUSH
28500: LD_INT 13
28502: PUSH
28503: LD_INT 14
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
28512: GO 29125
28514: LD_INT 23
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28548
28522: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 11
28530: PUSH
28531: LD_INT 12
28533: PUSH
28534: LD_INT 13
28536: PUSH
28537: LD_INT 14
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: ST_TO_ADDR
28546: GO 29125
28548: LD_INT 24
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28582
28556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_INT 11
28564: PUSH
28565: LD_INT 12
28567: PUSH
28568: LD_INT 13
28570: PUSH
28571: LD_INT 14
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: ST_TO_ADDR
28580: GO 29125
28582: LD_INT 30
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28616
28590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_INT 11
28598: PUSH
28599: LD_INT 12
28601: PUSH
28602: LD_INT 13
28604: PUSH
28605: LD_INT 14
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
28614: GO 29125
28616: LD_INT 25
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28642
28624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28625: LD_ADDR_VAR 0 3
28629: PUSH
28630: LD_INT 13
28632: PUSH
28633: LD_INT 14
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: ST_TO_ADDR
28640: GO 29125
28642: LD_INT 27
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28650
28648: GO 28668
28650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28651: LD_ADDR_VAR 0 3
28655: PUSH
28656: LD_INT 13
28658: PUSH
28659: LD_INT 14
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: ST_TO_ADDR
28666: GO 29125
28668: LD_EXP 99
28672: DOUBLE
28673: EQUAL
28674: IFTRUE 28678
28676: GO 28704
28678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 11
28686: PUSH
28687: LD_INT 12
28689: PUSH
28690: LD_INT 13
28692: PUSH
28693: LD_INT 14
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: ST_TO_ADDR
28702: GO 29125
28704: LD_INT 28
28706: DOUBLE
28707: EQUAL
28708: IFTRUE 28712
28710: GO 28730
28712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_INT 13
28720: PUSH
28721: LD_INT 14
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: ST_TO_ADDR
28728: GO 29125
28730: LD_INT 29
28732: DOUBLE
28733: EQUAL
28734: IFTRUE 28738
28736: GO 28756
28738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28739: LD_ADDR_VAR 0 3
28743: PUSH
28744: LD_INT 13
28746: PUSH
28747: LD_INT 14
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: ST_TO_ADDR
28754: GO 29125
28756: LD_INT 31
28758: DOUBLE
28759: EQUAL
28760: IFTRUE 28764
28762: GO 28782
28764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28765: LD_ADDR_VAR 0 3
28769: PUSH
28770: LD_INT 13
28772: PUSH
28773: LD_INT 14
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: ST_TO_ADDR
28780: GO 29125
28782: LD_INT 26
28784: DOUBLE
28785: EQUAL
28786: IFTRUE 28790
28788: GO 28808
28790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28791: LD_ADDR_VAR 0 3
28795: PUSH
28796: LD_INT 13
28798: PUSH
28799: LD_INT 14
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: ST_TO_ADDR
28806: GO 29125
28808: LD_INT 42
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28816
28814: GO 28842
28816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_INT 21
28824: PUSH
28825: LD_INT 22
28827: PUSH
28828: LD_INT 23
28830: PUSH
28831: LD_INT 24
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
28840: GO 29125
28842: LD_INT 43
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28876
28850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: LD_INT 21
28858: PUSH
28859: LD_INT 22
28861: PUSH
28862: LD_INT 23
28864: PUSH
28865: LD_INT 24
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
28874: GO 29125
28876: LD_INT 44
28878: DOUBLE
28879: EQUAL
28880: IFTRUE 28884
28882: GO 28910
28884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28885: LD_ADDR_VAR 0 3
28889: PUSH
28890: LD_INT 21
28892: PUSH
28893: LD_INT 22
28895: PUSH
28896: LD_INT 23
28898: PUSH
28899: LD_INT 24
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: ST_TO_ADDR
28908: GO 29125
28910: LD_INT 45
28912: DOUBLE
28913: EQUAL
28914: IFTRUE 28918
28916: GO 28944
28918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28919: LD_ADDR_VAR 0 3
28923: PUSH
28924: LD_INT 21
28926: PUSH
28927: LD_INT 22
28929: PUSH
28930: LD_INT 23
28932: PUSH
28933: LD_INT 24
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: ST_TO_ADDR
28942: GO 29125
28944: LD_INT 49
28946: DOUBLE
28947: EQUAL
28948: IFTRUE 28952
28950: GO 28978
28952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_INT 21
28960: PUSH
28961: LD_INT 22
28963: PUSH
28964: LD_INT 23
28966: PUSH
28967: LD_INT 24
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
28976: GO 29125
28978: LD_INT 51
28980: DOUBLE
28981: EQUAL
28982: IFTRUE 28986
28984: GO 29012
28986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28987: LD_ADDR_VAR 0 3
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 22
28997: PUSH
28998: LD_INT 23
29000: PUSH
29001: LD_INT 24
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: ST_TO_ADDR
29010: GO 29125
29012: LD_INT 52
29014: DOUBLE
29015: EQUAL
29016: IFTRUE 29020
29018: GO 29046
29020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29021: LD_ADDR_VAR 0 3
29025: PUSH
29026: LD_INT 21
29028: PUSH
29029: LD_INT 22
29031: PUSH
29032: LD_INT 23
29034: PUSH
29035: LD_INT 24
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: ST_TO_ADDR
29044: GO 29125
29046: LD_INT 53
29048: DOUBLE
29049: EQUAL
29050: IFTRUE 29054
29052: GO 29072
29054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29055: LD_ADDR_VAR 0 3
29059: PUSH
29060: LD_INT 23
29062: PUSH
29063: LD_INT 24
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: ST_TO_ADDR
29070: GO 29125
29072: LD_INT 46
29074: DOUBLE
29075: EQUAL
29076: IFTRUE 29080
29078: GO 29098
29080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: LD_INT 23
29088: PUSH
29089: LD_INT 24
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: ST_TO_ADDR
29096: GO 29125
29098: LD_INT 47
29100: DOUBLE
29101: EQUAL
29102: IFTRUE 29106
29104: GO 29124
29106: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29107: LD_ADDR_VAR 0 3
29111: PUSH
29112: LD_INT 23
29114: PUSH
29115: LD_INT 24
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: ST_TO_ADDR
29122: GO 29125
29124: POP
// result := ( chassis in result ) ;
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_VAR 0 1
29134: PUSH
29135: LD_VAR 0 3
29139: IN
29140: ST_TO_ADDR
// end ;
29141: LD_VAR 0 3
29145: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// result := array ;
29155: LD_ADDR_VAR 0 5
29159: PUSH
29160: LD_VAR 0 1
29164: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29165: LD_VAR 0 1
29169: NOT
29170: PUSH
29171: LD_VAR 0 2
29175: NOT
29176: OR
29177: PUSH
29178: LD_VAR 0 3
29182: NOT
29183: OR
29184: PUSH
29185: LD_VAR 0 2
29189: PUSH
29190: LD_VAR 0 1
29194: GREATER
29195: OR
29196: PUSH
29197: LD_VAR 0 3
29201: PUSH
29202: LD_VAR 0 1
29206: GREATER
29207: OR
29208: IFFALSE 29212
// exit ;
29210: GO 29508
// if direction then
29212: LD_VAR 0 4
29216: IFFALSE 29280
// begin d := 1 ;
29218: LD_ADDR_VAR 0 9
29222: PUSH
29223: LD_INT 1
29225: ST_TO_ADDR
// if i_from > i_to then
29226: LD_VAR 0 2
29230: PUSH
29231: LD_VAR 0 3
29235: GREATER
29236: IFFALSE 29262
// length := ( array - i_from ) + i_to else
29238: LD_ADDR_VAR 0 11
29242: PUSH
29243: LD_VAR 0 1
29247: PUSH
29248: LD_VAR 0 2
29252: MINUS
29253: PUSH
29254: LD_VAR 0 3
29258: PLUS
29259: ST_TO_ADDR
29260: GO 29278
// length := i_to - i_from ;
29262: LD_ADDR_VAR 0 11
29266: PUSH
29267: LD_VAR 0 3
29271: PUSH
29272: LD_VAR 0 2
29276: MINUS
29277: ST_TO_ADDR
// end else
29278: GO 29341
// begin d := - 1 ;
29280: LD_ADDR_VAR 0 9
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: ST_TO_ADDR
// if i_from > i_to then
29289: LD_VAR 0 2
29293: PUSH
29294: LD_VAR 0 3
29298: GREATER
29299: IFFALSE 29319
// length := i_from - i_to else
29301: LD_ADDR_VAR 0 11
29305: PUSH
29306: LD_VAR 0 2
29310: PUSH
29311: LD_VAR 0 3
29315: MINUS
29316: ST_TO_ADDR
29317: GO 29341
// length := ( array - i_to ) + i_from ;
29319: LD_ADDR_VAR 0 11
29323: PUSH
29324: LD_VAR 0 1
29328: PUSH
29329: LD_VAR 0 3
29333: MINUS
29334: PUSH
29335: LD_VAR 0 2
29339: PLUS
29340: ST_TO_ADDR
// end ; if not length then
29341: LD_VAR 0 11
29345: NOT
29346: IFFALSE 29350
// exit ;
29348: GO 29508
// tmp := array ;
29350: LD_ADDR_VAR 0 10
29354: PUSH
29355: LD_VAR 0 1
29359: ST_TO_ADDR
// for i = 1 to length do
29360: LD_ADDR_VAR 0 6
29364: PUSH
29365: DOUBLE
29366: LD_INT 1
29368: DEC
29369: ST_TO_ADDR
29370: LD_VAR 0 11
29374: PUSH
29375: FOR_TO
29376: IFFALSE 29496
// begin for j = 1 to array do
29378: LD_ADDR_VAR 0 7
29382: PUSH
29383: DOUBLE
29384: LD_INT 1
29386: DEC
29387: ST_TO_ADDR
29388: LD_VAR 0 1
29392: PUSH
29393: FOR_TO
29394: IFFALSE 29482
// begin k := j + d ;
29396: LD_ADDR_VAR 0 8
29400: PUSH
29401: LD_VAR 0 7
29405: PUSH
29406: LD_VAR 0 9
29410: PLUS
29411: ST_TO_ADDR
// if k > array then
29412: LD_VAR 0 8
29416: PUSH
29417: LD_VAR 0 1
29421: GREATER
29422: IFFALSE 29432
// k := 1 ;
29424: LD_ADDR_VAR 0 8
29428: PUSH
29429: LD_INT 1
29431: ST_TO_ADDR
// if not k then
29432: LD_VAR 0 8
29436: NOT
29437: IFFALSE 29449
// k := array ;
29439: LD_ADDR_VAR 0 8
29443: PUSH
29444: LD_VAR 0 1
29448: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29449: LD_ADDR_VAR 0 10
29453: PUSH
29454: LD_VAR 0 10
29458: PPUSH
29459: LD_VAR 0 8
29463: PPUSH
29464: LD_VAR 0 1
29468: PUSH
29469: LD_VAR 0 7
29473: ARRAY
29474: PPUSH
29475: CALL_OW 1
29479: ST_TO_ADDR
// end ;
29480: GO 29393
29482: POP
29483: POP
// array := tmp ;
29484: LD_ADDR_VAR 0 1
29488: PUSH
29489: LD_VAR 0 10
29493: ST_TO_ADDR
// end ;
29494: GO 29375
29496: POP
29497: POP
// result := array ;
29498: LD_ADDR_VAR 0 5
29502: PUSH
29503: LD_VAR 0 1
29507: ST_TO_ADDR
// end ;
29508: LD_VAR 0 5
29512: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
// result := 0 ;
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: LD_INT 0
29524: ST_TO_ADDR
// if not array or not value in array then
29525: LD_VAR 0 1
29529: NOT
29530: PUSH
29531: LD_VAR 0 2
29535: PUSH
29536: LD_VAR 0 1
29540: IN
29541: NOT
29542: OR
29543: IFFALSE 29547
// exit ;
29545: GO 29601
// for i = 1 to array do
29547: LD_ADDR_VAR 0 4
29551: PUSH
29552: DOUBLE
29553: LD_INT 1
29555: DEC
29556: ST_TO_ADDR
29557: LD_VAR 0 1
29561: PUSH
29562: FOR_TO
29563: IFFALSE 29599
// if value = array [ i ] then
29565: LD_VAR 0 2
29569: PUSH
29570: LD_VAR 0 1
29574: PUSH
29575: LD_VAR 0 4
29579: ARRAY
29580: EQUAL
29581: IFFALSE 29597
// begin result := i ;
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_VAR 0 4
29592: ST_TO_ADDR
// exit ;
29593: POP
29594: POP
29595: GO 29601
// end ;
29597: GO 29562
29599: POP
29600: POP
// end ;
29601: LD_VAR 0 3
29605: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29606: LD_INT 0
29608: PPUSH
// vc_chassis := chassis ;
29609: LD_ADDR_OWVAR 37
29613: PUSH
29614: LD_VAR 0 1
29618: ST_TO_ADDR
// vc_engine := engine ;
29619: LD_ADDR_OWVAR 39
29623: PUSH
29624: LD_VAR 0 2
29628: ST_TO_ADDR
// vc_control := control ;
29629: LD_ADDR_OWVAR 38
29633: PUSH
29634: LD_VAR 0 3
29638: ST_TO_ADDR
// vc_weapon := weapon ;
29639: LD_ADDR_OWVAR 40
29643: PUSH
29644: LD_VAR 0 4
29648: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29649: LD_ADDR_OWVAR 41
29653: PUSH
29654: LD_VAR 0 5
29658: ST_TO_ADDR
// end ;
29659: LD_VAR 0 6
29663: RET
// export function WantPlant ( unit ) ; var task ; begin
29664: LD_INT 0
29666: PPUSH
29667: PPUSH
// result := false ;
29668: LD_ADDR_VAR 0 2
29672: PUSH
29673: LD_INT 0
29675: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29676: LD_ADDR_VAR 0 3
29680: PUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 437
29690: ST_TO_ADDR
// if task then
29691: LD_VAR 0 3
29695: IFFALSE 29723
// if task [ 1 ] [ 1 ] = p then
29697: LD_VAR 0 3
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: PUSH
29706: LD_INT 1
29708: ARRAY
29709: PUSH
29710: LD_STRING p
29712: EQUAL
29713: IFFALSE 29723
// result := true ;
29715: LD_ADDR_VAR 0 2
29719: PUSH
29720: LD_INT 1
29722: ST_TO_ADDR
// end ;
29723: LD_VAR 0 2
29727: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29728: LD_INT 0
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
// if pos < 1 then
29734: LD_VAR 0 2
29738: PUSH
29739: LD_INT 1
29741: LESS
29742: IFFALSE 29746
// exit ;
29744: GO 30049
// if pos = 1 then
29746: LD_VAR 0 2
29750: PUSH
29751: LD_INT 1
29753: EQUAL
29754: IFFALSE 29787
// result := Replace ( arr , pos [ 1 ] , value ) else
29756: LD_ADDR_VAR 0 4
29760: PUSH
29761: LD_VAR 0 1
29765: PPUSH
29766: LD_VAR 0 2
29770: PUSH
29771: LD_INT 1
29773: ARRAY
29774: PPUSH
29775: LD_VAR 0 3
29779: PPUSH
29780: CALL_OW 1
29784: ST_TO_ADDR
29785: GO 30049
// begin tmp := arr ;
29787: LD_ADDR_VAR 0 6
29791: PUSH
29792: LD_VAR 0 1
29796: ST_TO_ADDR
// s_arr := [ tmp ] ;
29797: LD_ADDR_VAR 0 7
29801: PUSH
29802: LD_VAR 0 6
29806: PUSH
29807: EMPTY
29808: LIST
29809: ST_TO_ADDR
// for i = 1 to pos - 1 do
29810: LD_ADDR_VAR 0 5
29814: PUSH
29815: DOUBLE
29816: LD_INT 1
29818: DEC
29819: ST_TO_ADDR
29820: LD_VAR 0 2
29824: PUSH
29825: LD_INT 1
29827: MINUS
29828: PUSH
29829: FOR_TO
29830: IFFALSE 29875
// begin tmp := tmp [ pos [ i ] ] ;
29832: LD_ADDR_VAR 0 6
29836: PUSH
29837: LD_VAR 0 6
29841: PUSH
29842: LD_VAR 0 2
29846: PUSH
29847: LD_VAR 0 5
29851: ARRAY
29852: ARRAY
29853: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29854: LD_ADDR_VAR 0 7
29858: PUSH
29859: LD_VAR 0 7
29863: PUSH
29864: LD_VAR 0 6
29868: PUSH
29869: EMPTY
29870: LIST
29871: ADD
29872: ST_TO_ADDR
// end ;
29873: GO 29829
29875: POP
29876: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29877: LD_ADDR_VAR 0 6
29881: PUSH
29882: LD_VAR 0 6
29886: PPUSH
29887: LD_VAR 0 2
29891: PUSH
29892: LD_VAR 0 2
29896: ARRAY
29897: PPUSH
29898: LD_VAR 0 3
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29908: LD_ADDR_VAR 0 7
29912: PUSH
29913: LD_VAR 0 7
29917: PPUSH
29918: LD_VAR 0 7
29922: PPUSH
29923: LD_VAR 0 6
29927: PPUSH
29928: CALL_OW 1
29932: ST_TO_ADDR
// for i = s_arr downto 2 do
29933: LD_ADDR_VAR 0 5
29937: PUSH
29938: DOUBLE
29939: LD_VAR 0 7
29943: INC
29944: ST_TO_ADDR
29945: LD_INT 2
29947: PUSH
29948: FOR_DOWNTO
29949: IFFALSE 30033
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29951: LD_ADDR_VAR 0 6
29955: PUSH
29956: LD_VAR 0 7
29960: PUSH
29961: LD_VAR 0 5
29965: PUSH
29966: LD_INT 1
29968: MINUS
29969: ARRAY
29970: PPUSH
29971: LD_VAR 0 2
29975: PUSH
29976: LD_VAR 0 5
29980: PUSH
29981: LD_INT 1
29983: MINUS
29984: ARRAY
29985: PPUSH
29986: LD_VAR 0 7
29990: PUSH
29991: LD_VAR 0 5
29995: ARRAY
29996: PPUSH
29997: CALL_OW 1
30001: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30002: LD_ADDR_VAR 0 7
30006: PUSH
30007: LD_VAR 0 7
30011: PPUSH
30012: LD_VAR 0 5
30016: PUSH
30017: LD_INT 1
30019: MINUS
30020: PPUSH
30021: LD_VAR 0 6
30025: PPUSH
30026: CALL_OW 1
30030: ST_TO_ADDR
// end ;
30031: GO 29948
30033: POP
30034: POP
// result := s_arr [ 1 ] ;
30035: LD_ADDR_VAR 0 4
30039: PUSH
30040: LD_VAR 0 7
30044: PUSH
30045: LD_INT 1
30047: ARRAY
30048: ST_TO_ADDR
// end ; end ;
30049: LD_VAR 0 4
30053: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30054: LD_INT 0
30056: PPUSH
30057: PPUSH
// if not list then
30058: LD_VAR 0 1
30062: NOT
30063: IFFALSE 30067
// exit ;
30065: GO 30158
// i := list [ pos1 ] ;
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_VAR 0 1
30076: PUSH
30077: LD_VAR 0 2
30081: ARRAY
30082: ST_TO_ADDR
// if not i then
30083: LD_VAR 0 5
30087: NOT
30088: IFFALSE 30092
// exit ;
30090: GO 30158
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_VAR 0 1
30101: PPUSH
30102: LD_VAR 0 2
30106: PPUSH
30107: LD_VAR 0 1
30111: PUSH
30112: LD_VAR 0 3
30116: ARRAY
30117: PPUSH
30118: CALL_OW 1
30122: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: LD_VAR 0 1
30132: PPUSH
30133: LD_VAR 0 3
30137: PPUSH
30138: LD_VAR 0 5
30142: PPUSH
30143: CALL_OW 1
30147: ST_TO_ADDR
// result := list ;
30148: LD_ADDR_VAR 0 4
30152: PUSH
30153: LD_VAR 0 1
30157: ST_TO_ADDR
// end ;
30158: LD_VAR 0 4
30162: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30163: LD_INT 0
30165: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30166: LD_ADDR_VAR 0 5
30170: PUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: CALL_OW 250
30180: PPUSH
30181: LD_VAR 0 1
30185: PPUSH
30186: CALL_OW 251
30190: PPUSH
30191: LD_VAR 0 2
30195: PPUSH
30196: LD_VAR 0 3
30200: PPUSH
30201: LD_VAR 0 4
30205: PPUSH
30206: CALL 30216 0 5
30210: ST_TO_ADDR
// end ;
30211: LD_VAR 0 5
30215: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30216: LD_INT 0
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
// if not list then
30222: LD_VAR 0 3
30226: NOT
30227: IFFALSE 30231
// exit ;
30229: GO 30619
// result := [ ] ;
30231: LD_ADDR_VAR 0 6
30235: PUSH
30236: EMPTY
30237: ST_TO_ADDR
// for i in list do
30238: LD_ADDR_VAR 0 7
30242: PUSH
30243: LD_VAR 0 3
30247: PUSH
30248: FOR_IN
30249: IFFALSE 30451
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30251: LD_ADDR_VAR 0 9
30255: PUSH
30256: LD_VAR 0 7
30260: PPUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_VAR 0 2
30270: PPUSH
30271: CALL_OW 297
30275: ST_TO_ADDR
// if not result then
30276: LD_VAR 0 6
30280: NOT
30281: IFFALSE 30307
// result := [ [ i , tmp ] ] else
30283: LD_ADDR_VAR 0 6
30287: PUSH
30288: LD_VAR 0 7
30292: PUSH
30293: LD_VAR 0 9
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: ST_TO_ADDR
30305: GO 30449
// begin if result [ result ] [ 2 ] < tmp then
30307: LD_VAR 0 6
30311: PUSH
30312: LD_VAR 0 6
30316: ARRAY
30317: PUSH
30318: LD_INT 2
30320: ARRAY
30321: PUSH
30322: LD_VAR 0 9
30326: LESS
30327: IFFALSE 30369
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30329: LD_ADDR_VAR 0 6
30333: PUSH
30334: LD_VAR 0 6
30338: PPUSH
30339: LD_VAR 0 6
30343: PUSH
30344: LD_INT 1
30346: PLUS
30347: PPUSH
30348: LD_VAR 0 7
30352: PUSH
30353: LD_VAR 0 9
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PPUSH
30362: CALL_OW 2
30366: ST_TO_ADDR
30367: GO 30449
// for j = 1 to result do
30369: LD_ADDR_VAR 0 8
30373: PUSH
30374: DOUBLE
30375: LD_INT 1
30377: DEC
30378: ST_TO_ADDR
30379: LD_VAR 0 6
30383: PUSH
30384: FOR_TO
30385: IFFALSE 30447
// begin if tmp < result [ j ] [ 2 ] then
30387: LD_VAR 0 9
30391: PUSH
30392: LD_VAR 0 6
30396: PUSH
30397: LD_VAR 0 8
30401: ARRAY
30402: PUSH
30403: LD_INT 2
30405: ARRAY
30406: LESS
30407: IFFALSE 30445
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30409: LD_ADDR_VAR 0 6
30413: PUSH
30414: LD_VAR 0 6
30418: PPUSH
30419: LD_VAR 0 8
30423: PPUSH
30424: LD_VAR 0 7
30428: PUSH
30429: LD_VAR 0 9
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 2
30442: ST_TO_ADDR
// break ;
30443: GO 30447
// end ; end ;
30445: GO 30384
30447: POP
30448: POP
// end ; end ;
30449: GO 30248
30451: POP
30452: POP
// if result and not asc then
30453: LD_VAR 0 6
30457: PUSH
30458: LD_VAR 0 4
30462: NOT
30463: AND
30464: IFFALSE 30539
// begin tmp := result ;
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: LD_VAR 0 6
30475: ST_TO_ADDR
// for i = tmp downto 1 do
30476: LD_ADDR_VAR 0 7
30480: PUSH
30481: DOUBLE
30482: LD_VAR 0 9
30486: INC
30487: ST_TO_ADDR
30488: LD_INT 1
30490: PUSH
30491: FOR_DOWNTO
30492: IFFALSE 30537
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30494: LD_ADDR_VAR 0 6
30498: PUSH
30499: LD_VAR 0 6
30503: PPUSH
30504: LD_VAR 0 9
30508: PUSH
30509: LD_VAR 0 7
30513: MINUS
30514: PUSH
30515: LD_INT 1
30517: PLUS
30518: PPUSH
30519: LD_VAR 0 9
30523: PUSH
30524: LD_VAR 0 7
30528: ARRAY
30529: PPUSH
30530: CALL_OW 1
30534: ST_TO_ADDR
30535: GO 30491
30537: POP
30538: POP
// end ; tmp := [ ] ;
30539: LD_ADDR_VAR 0 9
30543: PUSH
30544: EMPTY
30545: ST_TO_ADDR
// if mode then
30546: LD_VAR 0 5
30550: IFFALSE 30619
// begin for i = 1 to result do
30552: LD_ADDR_VAR 0 7
30556: PUSH
30557: DOUBLE
30558: LD_INT 1
30560: DEC
30561: ST_TO_ADDR
30562: LD_VAR 0 6
30566: PUSH
30567: FOR_TO
30568: IFFALSE 30607
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30570: LD_ADDR_VAR 0 9
30574: PUSH
30575: LD_VAR 0 9
30579: PPUSH
30580: LD_VAR 0 7
30584: PPUSH
30585: LD_VAR 0 6
30589: PUSH
30590: LD_VAR 0 7
30594: ARRAY
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: CALL_OW 1
30604: ST_TO_ADDR
30605: GO 30567
30607: POP
30608: POP
// result := tmp ;
30609: LD_ADDR_VAR 0 6
30613: PUSH
30614: LD_VAR 0 9
30618: ST_TO_ADDR
// end ; end ;
30619: LD_VAR 0 6
30623: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30624: LD_INT 0
30626: PPUSH
30627: PPUSH
30628: PPUSH
30629: PPUSH
30630: PPUSH
30631: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30632: LD_ADDR_VAR 0 5
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// if not x or not y then
30654: LD_VAR 0 2
30658: NOT
30659: PUSH
30660: LD_VAR 0 3
30664: NOT
30665: OR
30666: IFFALSE 30670
// exit ;
30668: GO 32322
// if not range then
30670: LD_VAR 0 4
30674: NOT
30675: IFFALSE 30685
// range := 10 ;
30677: LD_ADDR_VAR 0 4
30681: PUSH
30682: LD_INT 10
30684: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30685: LD_ADDR_VAR 0 8
30689: PUSH
30690: LD_INT 81
30692: PUSH
30693: LD_VAR 0 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 92
30704: PUSH
30705: LD_VAR 0 2
30709: PUSH
30710: LD_VAR 0 3
30714: PUSH
30715: LD_VAR 0 4
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 21
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: PPUSH
30748: CALL_OW 69
30752: ST_TO_ADDR
// if not tmp then
30753: LD_VAR 0 8
30757: NOT
30758: IFFALSE 30762
// exit ;
30760: GO 32322
// for i in tmp do
30762: LD_ADDR_VAR 0 6
30766: PUSH
30767: LD_VAR 0 8
30771: PUSH
30772: FOR_IN
30773: IFFALSE 32297
// begin points := [ 0 , 0 , 0 ] ;
30775: LD_ADDR_VAR 0 9
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// bpoints := 1 ;
30794: LD_ADDR_VAR 0 10
30798: PUSH
30799: LD_INT 1
30801: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30802: LD_VAR 0 6
30806: PPUSH
30807: CALL_OW 247
30811: PUSH
30812: LD_INT 1
30814: DOUBLE
30815: EQUAL
30816: IFTRUE 30820
30818: GO 31398
30820: POP
// begin if GetClass ( i ) = 1 then
30821: LD_VAR 0 6
30825: PPUSH
30826: CALL_OW 257
30830: PUSH
30831: LD_INT 1
30833: EQUAL
30834: IFFALSE 30855
// points := [ 10 , 5 , 3 ] ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_INT 10
30843: PUSH
30844: LD_INT 5
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30855: LD_VAR 0 6
30859: PPUSH
30860: CALL_OW 257
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 3
30870: PUSH
30871: LD_INT 4
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: IN
30879: IFFALSE 30900
// points := [ 3 , 2 , 1 ] ;
30881: LD_ADDR_VAR 0 9
30885: PUSH
30886: LD_INT 3
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30900: LD_VAR 0 6
30904: PPUSH
30905: CALL_OW 257
30909: PUSH
30910: LD_INT 5
30912: EQUAL
30913: IFFALSE 30934
// points := [ 130 , 5 , 2 ] ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_INT 130
30922: PUSH
30923: LD_INT 5
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30934: LD_VAR 0 6
30938: PPUSH
30939: CALL_OW 257
30943: PUSH
30944: LD_INT 8
30946: EQUAL
30947: IFFALSE 30968
// points := [ 35 , 35 , 30 ] ;
30949: LD_ADDR_VAR 0 9
30953: PUSH
30954: LD_INT 35
30956: PUSH
30957: LD_INT 35
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30968: LD_VAR 0 6
30972: PPUSH
30973: CALL_OW 257
30977: PUSH
30978: LD_INT 9
30980: EQUAL
30981: IFFALSE 31002
// points := [ 20 , 55 , 40 ] ;
30983: LD_ADDR_VAR 0 9
30987: PUSH
30988: LD_INT 20
30990: PUSH
30991: LD_INT 55
30993: PUSH
30994: LD_INT 40
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31002: LD_VAR 0 6
31006: PPUSH
31007: CALL_OW 257
31011: PUSH
31012: LD_INT 12
31014: PUSH
31015: LD_INT 16
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: IN
31022: IFFALSE 31043
// points := [ 5 , 3 , 2 ] ;
31024: LD_ADDR_VAR 0 9
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31043: LD_VAR 0 6
31047: PPUSH
31048: CALL_OW 257
31052: PUSH
31053: LD_INT 17
31055: EQUAL
31056: IFFALSE 31077
// points := [ 100 , 50 , 75 ] ;
31058: LD_ADDR_VAR 0 9
31062: PUSH
31063: LD_INT 100
31065: PUSH
31066: LD_INT 50
31068: PUSH
31069: LD_INT 75
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31077: LD_VAR 0 6
31081: PPUSH
31082: CALL_OW 257
31086: PUSH
31087: LD_INT 15
31089: EQUAL
31090: IFFALSE 31111
// points := [ 10 , 5 , 3 ] ;
31092: LD_ADDR_VAR 0 9
31096: PUSH
31097: LD_INT 10
31099: PUSH
31100: LD_INT 5
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31111: LD_VAR 0 6
31115: PPUSH
31116: CALL_OW 257
31120: PUSH
31121: LD_INT 14
31123: EQUAL
31124: IFFALSE 31145
// points := [ 10 , 0 , 0 ] ;
31126: LD_ADDR_VAR 0 9
31130: PUSH
31131: LD_INT 10
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31145: LD_VAR 0 6
31149: PPUSH
31150: CALL_OW 257
31154: PUSH
31155: LD_INT 11
31157: EQUAL
31158: IFFALSE 31179
// points := [ 30 , 10 , 5 ] ;
31160: LD_ADDR_VAR 0 9
31164: PUSH
31165: LD_INT 30
31167: PUSH
31168: LD_INT 10
31170: PUSH
31171: LD_INT 5
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31179: LD_VAR 0 1
31183: PPUSH
31184: LD_INT 5
31186: PPUSH
31187: CALL_OW 321
31191: PUSH
31192: LD_INT 2
31194: EQUAL
31195: IFFALSE 31212
// bpoints := bpoints * 1.8 ;
31197: LD_ADDR_VAR 0 10
31201: PUSH
31202: LD_VAR 0 10
31206: PUSH
31207: LD_REAL  1.80000000000000E+0000
31210: MUL
31211: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31212: LD_VAR 0 6
31216: PPUSH
31217: CALL_OW 257
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 4
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: IN
31240: PUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: LD_INT 51
31248: PPUSH
31249: CALL_OW 321
31253: PUSH
31254: LD_INT 2
31256: EQUAL
31257: AND
31258: IFFALSE 31275
// bpoints := bpoints * 1.2 ;
31260: LD_ADDR_VAR 0 10
31264: PUSH
31265: LD_VAR 0 10
31269: PUSH
31270: LD_REAL  1.20000000000000E+0000
31273: MUL
31274: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31275: LD_VAR 0 6
31279: PPUSH
31280: CALL_OW 257
31284: PUSH
31285: LD_INT 5
31287: PUSH
31288: LD_INT 7
31290: PUSH
31291: LD_INT 9
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: IN
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: LD_INT 52
31307: PPUSH
31308: CALL_OW 321
31312: PUSH
31313: LD_INT 2
31315: EQUAL
31316: AND
31317: IFFALSE 31334
// bpoints := bpoints * 1.5 ;
31319: LD_ADDR_VAR 0 10
31323: PUSH
31324: LD_VAR 0 10
31328: PUSH
31329: LD_REAL  1.50000000000000E+0000
31332: MUL
31333: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31334: LD_VAR 0 1
31338: PPUSH
31339: LD_INT 66
31341: PPUSH
31342: CALL_OW 321
31346: PUSH
31347: LD_INT 2
31349: EQUAL
31350: IFFALSE 31367
// bpoints := bpoints * 1.1 ;
31352: LD_ADDR_VAR 0 10
31356: PUSH
31357: LD_VAR 0 10
31361: PUSH
31362: LD_REAL  1.10000000000000E+0000
31365: MUL
31366: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31367: LD_ADDR_VAR 0 10
31371: PUSH
31372: LD_VAR 0 10
31376: PUSH
31377: LD_VAR 0 6
31381: PPUSH
31382: LD_INT 1
31384: PPUSH
31385: CALL_OW 259
31389: PUSH
31390: LD_REAL  1.15000000000000E+0000
31393: MUL
31394: MUL
31395: ST_TO_ADDR
// end ; unit_vehicle :
31396: GO 32226
31398: LD_INT 2
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 32214
31406: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31407: LD_VAR 0 6
31411: PPUSH
31412: CALL_OW 264
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 42
31422: PUSH
31423: LD_INT 24
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: IN
31431: IFFALSE 31452
// points := [ 25 , 5 , 3 ] ;
31433: LD_ADDR_VAR 0 9
31437: PUSH
31438: LD_INT 25
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31452: LD_VAR 0 6
31456: PPUSH
31457: CALL_OW 264
31461: PUSH
31462: LD_INT 4
31464: PUSH
31465: LD_INT 43
31467: PUSH
31468: LD_INT 25
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: IN
31476: IFFALSE 31497
// points := [ 40 , 15 , 5 ] ;
31478: LD_ADDR_VAR 0 9
31482: PUSH
31483: LD_INT 40
31485: PUSH
31486: LD_INT 15
31488: PUSH
31489: LD_INT 5
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31497: LD_VAR 0 6
31501: PPUSH
31502: CALL_OW 264
31506: PUSH
31507: LD_INT 3
31509: PUSH
31510: LD_INT 23
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: IN
31517: IFFALSE 31538
// points := [ 7 , 25 , 8 ] ;
31519: LD_ADDR_VAR 0 9
31523: PUSH
31524: LD_INT 7
31526: PUSH
31527: LD_INT 25
31529: PUSH
31530: LD_INT 8
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31538: LD_VAR 0 6
31542: PPUSH
31543: CALL_OW 264
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: LD_INT 27
31553: PUSH
31554: LD_INT 44
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: IN
31562: IFFALSE 31583
// points := [ 14 , 50 , 16 ] ;
31564: LD_ADDR_VAR 0 9
31568: PUSH
31569: LD_INT 14
31571: PUSH
31572: LD_INT 50
31574: PUSH
31575: LD_INT 16
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31583: LD_VAR 0 6
31587: PPUSH
31588: CALL_OW 264
31592: PUSH
31593: LD_INT 6
31595: PUSH
31596: LD_INT 46
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: IN
31603: IFFALSE 31624
// points := [ 32 , 120 , 70 ] ;
31605: LD_ADDR_VAR 0 9
31609: PUSH
31610: LD_INT 32
31612: PUSH
31613: LD_INT 120
31615: PUSH
31616: LD_INT 70
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31624: LD_VAR 0 6
31628: PPUSH
31629: CALL_OW 264
31633: PUSH
31634: LD_INT 7
31636: PUSH
31637: LD_INT 28
31639: PUSH
31640: LD_INT 45
31642: PUSH
31643: LD_EXP 99
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: IN
31654: IFFALSE 31675
// points := [ 35 , 20 , 45 ] ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_INT 35
31663: PUSH
31664: LD_INT 20
31666: PUSH
31667: LD_INT 45
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 264
31684: PUSH
31685: LD_INT 47
31687: PUSH
31688: EMPTY
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 67 , 45 , 75 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 67
31700: PUSH
31701: LD_INT 45
31703: PUSH
31704: LD_INT 75
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 264
31721: PUSH
31722: LD_INT 26
31724: PUSH
31725: EMPTY
31726: LIST
31727: IN
31728: IFFALSE 31749
// points := [ 120 , 30 , 80 ] ;
31730: LD_ADDR_VAR 0 9
31734: PUSH
31735: LD_INT 120
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 80
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31749: LD_VAR 0 6
31753: PPUSH
31754: CALL_OW 264
31758: PUSH
31759: LD_INT 22
31761: PUSH
31762: EMPTY
31763: LIST
31764: IN
31765: IFFALSE 31786
// points := [ 40 , 1 , 1 ] ;
31767: LD_ADDR_VAR 0 9
31771: PUSH
31772: LD_INT 40
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31786: LD_VAR 0 6
31790: PPUSH
31791: CALL_OW 264
31795: PUSH
31796: LD_INT 29
31798: PUSH
31799: EMPTY
31800: LIST
31801: IN
31802: IFFALSE 31823
// points := [ 70 , 200 , 400 ] ;
31804: LD_ADDR_VAR 0 9
31808: PUSH
31809: LD_INT 70
31811: PUSH
31812: LD_INT 200
31814: PUSH
31815: LD_INT 400
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31823: LD_VAR 0 6
31827: PPUSH
31828: CALL_OW 264
31832: PUSH
31833: LD_INT 14
31835: PUSH
31836: LD_INT 53
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: IN
31843: IFFALSE 31864
// points := [ 40 , 10 , 20 ] ;
31845: LD_ADDR_VAR 0 9
31849: PUSH
31850: LD_INT 40
31852: PUSH
31853: LD_INT 10
31855: PUSH
31856: LD_INT 20
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31864: LD_VAR 0 6
31868: PPUSH
31869: CALL_OW 264
31873: PUSH
31874: LD_INT 9
31876: PUSH
31877: EMPTY
31878: LIST
31879: IN
31880: IFFALSE 31901
// points := [ 5 , 70 , 20 ] ;
31882: LD_ADDR_VAR 0 9
31886: PUSH
31887: LD_INT 5
31889: PUSH
31890: LD_INT 70
31892: PUSH
31893: LD_INT 20
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31901: LD_VAR 0 6
31905: PPUSH
31906: CALL_OW 264
31910: PUSH
31911: LD_INT 10
31913: PUSH
31914: EMPTY
31915: LIST
31916: IN
31917: IFFALSE 31938
// points := [ 35 , 110 , 70 ] ;
31919: LD_ADDR_VAR 0 9
31923: PUSH
31924: LD_INT 35
31926: PUSH
31927: LD_INT 110
31929: PUSH
31930: LD_INT 70
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31938: LD_VAR 0 6
31942: PPUSH
31943: CALL_OW 265
31947: PUSH
31948: LD_INT 25
31950: EQUAL
31951: IFFALSE 31972
// points := [ 80 , 65 , 100 ] ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_INT 80
31960: PUSH
31961: LD_INT 65
31963: PUSH
31964: LD_INT 100
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 263
31981: PUSH
31982: LD_INT 1
31984: EQUAL
31985: IFFALSE 32020
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31987: LD_ADDR_VAR 0 10
31991: PUSH
31992: LD_VAR 0 10
31996: PUSH
31997: LD_VAR 0 6
32001: PPUSH
32002: CALL_OW 311
32006: PPUSH
32007: LD_INT 3
32009: PPUSH
32010: CALL_OW 259
32014: PUSH
32015: LD_INT 4
32017: MUL
32018: MUL
32019: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32020: LD_VAR 0 6
32024: PPUSH
32025: CALL_OW 263
32029: PUSH
32030: LD_INT 2
32032: EQUAL
32033: IFFALSE 32084
// begin j := IsControledBy ( i ) ;
32035: LD_ADDR_VAR 0 7
32039: PUSH
32040: LD_VAR 0 6
32044: PPUSH
32045: CALL_OW 312
32049: ST_TO_ADDR
// if j then
32050: LD_VAR 0 7
32054: IFFALSE 32084
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32056: LD_ADDR_VAR 0 10
32060: PUSH
32061: LD_VAR 0 10
32065: PUSH
32066: LD_VAR 0 7
32070: PPUSH
32071: LD_INT 3
32073: PPUSH
32074: CALL_OW 259
32078: PUSH
32079: LD_INT 3
32081: MUL
32082: MUL
32083: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32084: LD_VAR 0 6
32088: PPUSH
32089: CALL_OW 264
32093: PUSH
32094: LD_INT 5
32096: PUSH
32097: LD_INT 6
32099: PUSH
32100: LD_INT 46
32102: PUSH
32103: LD_INT 44
32105: PUSH
32106: LD_INT 47
32108: PUSH
32109: LD_INT 45
32111: PUSH
32112: LD_INT 28
32114: PUSH
32115: LD_INT 7
32117: PUSH
32118: LD_INT 27
32120: PUSH
32121: LD_INT 29
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: IN
32136: PUSH
32137: LD_VAR 0 1
32141: PPUSH
32142: LD_INT 52
32144: PPUSH
32145: CALL_OW 321
32149: PUSH
32150: LD_INT 2
32152: EQUAL
32153: AND
32154: IFFALSE 32171
// bpoints := bpoints * 1.2 ;
32156: LD_ADDR_VAR 0 10
32160: PUSH
32161: LD_VAR 0 10
32165: PUSH
32166: LD_REAL  1.20000000000000E+0000
32169: MUL
32170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32171: LD_VAR 0 6
32175: PPUSH
32176: CALL_OW 264
32180: PUSH
32181: LD_INT 6
32183: PUSH
32184: LD_INT 46
32186: PUSH
32187: LD_INT 47
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: IN
32195: IFFALSE 32212
// bpoints := bpoints * 1.2 ;
32197: LD_ADDR_VAR 0 10
32201: PUSH
32202: LD_VAR 0 10
32206: PUSH
32207: LD_REAL  1.20000000000000E+0000
32210: MUL
32211: ST_TO_ADDR
// end ; unit_building :
32212: GO 32226
32214: LD_INT 3
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32225
32222: POP
// ; end ;
32223: GO 32226
32225: POP
// for j = 1 to 3 do
32226: LD_ADDR_VAR 0 7
32230: PUSH
32231: DOUBLE
32232: LD_INT 1
32234: DEC
32235: ST_TO_ADDR
32236: LD_INT 3
32238: PUSH
32239: FOR_TO
32240: IFFALSE 32293
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_VAR 0 5
32251: PPUSH
32252: LD_VAR 0 7
32256: PPUSH
32257: LD_VAR 0 5
32261: PUSH
32262: LD_VAR 0 7
32266: ARRAY
32267: PUSH
32268: LD_VAR 0 9
32272: PUSH
32273: LD_VAR 0 7
32277: ARRAY
32278: PUSH
32279: LD_VAR 0 10
32283: MUL
32284: PLUS
32285: PPUSH
32286: CALL_OW 1
32290: ST_TO_ADDR
32291: GO 32239
32293: POP
32294: POP
// end ;
32295: GO 30772
32297: POP
32298: POP
// result := Replace ( result , 4 , tmp ) ;
32299: LD_ADDR_VAR 0 5
32303: PUSH
32304: LD_VAR 0 5
32308: PPUSH
32309: LD_INT 4
32311: PPUSH
32312: LD_VAR 0 8
32316: PPUSH
32317: CALL_OW 1
32321: ST_TO_ADDR
// end ;
32322: LD_VAR 0 5
32326: RET
// export function DangerAtRange ( unit , range ) ; begin
32327: LD_INT 0
32329: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32330: LD_ADDR_VAR 0 3
32334: PUSH
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 255
32344: PPUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 250
32354: PPUSH
32355: LD_VAR 0 1
32359: PPUSH
32360: CALL_OW 251
32364: PPUSH
32365: LD_VAR 0 2
32369: PPUSH
32370: CALL 30624 0 4
32374: ST_TO_ADDR
// end ;
32375: LD_VAR 0 3
32379: RET
// export function DangerInArea ( side , area ) ; begin
32380: LD_INT 0
32382: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32383: LD_ADDR_VAR 0 3
32387: PUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: LD_INT 81
32395: PUSH
32396: LD_VAR 0 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PPUSH
32405: CALL_OW 70
32409: ST_TO_ADDR
// end ;
32410: LD_VAR 0 3
32414: RET
// export function IsExtension ( b ) ; begin
32415: LD_INT 0
32417: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32418: LD_ADDR_VAR 0 2
32422: PUSH
32423: LD_VAR 0 1
32427: PUSH
32428: LD_INT 23
32430: PUSH
32431: LD_INT 20
32433: PUSH
32434: LD_INT 22
32436: PUSH
32437: LD_INT 17
32439: PUSH
32440: LD_INT 24
32442: PUSH
32443: LD_INT 21
32445: PUSH
32446: LD_INT 19
32448: PUSH
32449: LD_INT 16
32451: PUSH
32452: LD_INT 25
32454: PUSH
32455: LD_INT 18
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: IN
32470: ST_TO_ADDR
// end ;
32471: LD_VAR 0 2
32475: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
32480: PPUSH
// result := [ ] ;
32481: LD_ADDR_VAR 0 4
32485: PUSH
32486: EMPTY
32487: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32488: LD_ADDR_VAR 0 5
32492: PUSH
32493: LD_VAR 0 2
32497: PPUSH
32498: LD_INT 21
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PPUSH
32508: CALL_OW 70
32512: ST_TO_ADDR
// if not tmp then
32513: LD_VAR 0 5
32517: NOT
32518: IFFALSE 32522
// exit ;
32520: GO 32586
// if checkLink then
32522: LD_VAR 0 3
32526: IFFALSE 32576
// begin for i in tmp do
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_VAR 0 5
32537: PUSH
32538: FOR_IN
32539: IFFALSE 32574
// if GetBase ( i ) <> base then
32541: LD_VAR 0 6
32545: PPUSH
32546: CALL_OW 274
32550: PUSH
32551: LD_VAR 0 1
32555: NONEQUAL
32556: IFFALSE 32572
// ComLinkToBase ( base , i ) ;
32558: LD_VAR 0 1
32562: PPUSH
32563: LD_VAR 0 6
32567: PPUSH
32568: CALL_OW 169
32572: GO 32538
32574: POP
32575: POP
// end ; result := tmp ;
32576: LD_ADDR_VAR 0 4
32580: PUSH
32581: LD_VAR 0 5
32585: ST_TO_ADDR
// end ;
32586: LD_VAR 0 4
32590: RET
// export function ComComplete ( units , b ) ; var i ; begin
32591: LD_INT 0
32593: PPUSH
32594: PPUSH
// if not units then
32595: LD_VAR 0 1
32599: NOT
32600: IFFALSE 32604
// exit ;
32602: GO 32694
// for i in units do
32604: LD_ADDR_VAR 0 4
32608: PUSH
32609: LD_VAR 0 1
32613: PUSH
32614: FOR_IN
32615: IFFALSE 32692
// if BuildingStatus ( b ) = bs_build then
32617: LD_VAR 0 2
32621: PPUSH
32622: CALL_OW 461
32626: PUSH
32627: LD_INT 1
32629: EQUAL
32630: IFFALSE 32690
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32632: LD_VAR 0 4
32636: PPUSH
32637: LD_STRING h
32639: PUSH
32640: LD_VAR 0 2
32644: PPUSH
32645: CALL_OW 250
32649: PUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: CALL_OW 251
32659: PUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: PPUSH
32686: CALL_OW 446
32690: GO 32614
32692: POP
32693: POP
// end ;
32694: LD_VAR 0 3
32698: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32699: LD_INT 0
32701: PPUSH
32702: PPUSH
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32707: LD_VAR 0 1
32711: NOT
32712: PUSH
32713: LD_VAR 0 1
32717: PPUSH
32718: CALL_OW 263
32722: PUSH
32723: LD_INT 2
32725: NONEQUAL
32726: OR
32727: IFFALSE 32731
// exit ;
32729: GO 33047
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32731: LD_ADDR_VAR 0 6
32735: PUSH
32736: LD_INT 22
32738: PUSH
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL_OW 255
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 30
32758: PUSH
32759: LD_INT 36
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 34
32768: PUSH
32769: LD_INT 31
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PPUSH
32785: CALL_OW 69
32789: ST_TO_ADDR
// if not tmp then
32790: LD_VAR 0 6
32794: NOT
32795: IFFALSE 32799
// exit ;
32797: GO 33047
// result := [ ] ;
32799: LD_ADDR_VAR 0 2
32803: PUSH
32804: EMPTY
32805: ST_TO_ADDR
// for i in tmp do
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_VAR 0 6
32815: PUSH
32816: FOR_IN
32817: IFFALSE 32888
// begin t := UnitsInside ( i ) ;
32819: LD_ADDR_VAR 0 4
32823: PUSH
32824: LD_VAR 0 3
32828: PPUSH
32829: CALL_OW 313
32833: ST_TO_ADDR
// if t then
32834: LD_VAR 0 4
32838: IFFALSE 32886
// for j in t do
32840: LD_ADDR_VAR 0 7
32844: PUSH
32845: LD_VAR 0 4
32849: PUSH
32850: FOR_IN
32851: IFFALSE 32884
// result := Replace ( result , result + 1 , j ) ;
32853: LD_ADDR_VAR 0 2
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_VAR 0 2
32867: PUSH
32868: LD_INT 1
32870: PLUS
32871: PPUSH
32872: LD_VAR 0 7
32876: PPUSH
32877: CALL_OW 1
32881: ST_TO_ADDR
32882: GO 32850
32884: POP
32885: POP
// end ;
32886: GO 32816
32888: POP
32889: POP
// if not result then
32890: LD_VAR 0 2
32894: NOT
32895: IFFALSE 32899
// exit ;
32897: GO 33047
// mech := result [ 1 ] ;
32899: LD_ADDR_VAR 0 5
32903: PUSH
32904: LD_VAR 0 2
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: ST_TO_ADDR
// if result > 1 then
32913: LD_VAR 0 2
32917: PUSH
32918: LD_INT 1
32920: GREATER
32921: IFFALSE 33033
// begin for i = 2 to result do
32923: LD_ADDR_VAR 0 3
32927: PUSH
32928: DOUBLE
32929: LD_INT 2
32931: DEC
32932: ST_TO_ADDR
32933: LD_VAR 0 2
32937: PUSH
32938: FOR_TO
32939: IFFALSE 33031
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32941: LD_ADDR_VAR 0 4
32945: PUSH
32946: LD_VAR 0 2
32950: PUSH
32951: LD_VAR 0 3
32955: ARRAY
32956: PPUSH
32957: LD_INT 3
32959: PPUSH
32960: CALL_OW 259
32964: PUSH
32965: LD_VAR 0 2
32969: PUSH
32970: LD_VAR 0 3
32974: ARRAY
32975: PPUSH
32976: CALL_OW 432
32980: MINUS
32981: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32982: LD_VAR 0 4
32986: PUSH
32987: LD_VAR 0 5
32991: PPUSH
32992: LD_INT 3
32994: PPUSH
32995: CALL_OW 259
32999: PUSH
33000: LD_VAR 0 5
33004: PPUSH
33005: CALL_OW 432
33009: MINUS
33010: GREATEREQUAL
33011: IFFALSE 33029
// mech := result [ i ] ;
33013: LD_ADDR_VAR 0 5
33017: PUSH
33018: LD_VAR 0 2
33022: PUSH
33023: LD_VAR 0 3
33027: ARRAY
33028: ST_TO_ADDR
// end ;
33029: GO 32938
33031: POP
33032: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33033: LD_VAR 0 1
33037: PPUSH
33038: LD_VAR 0 5
33042: PPUSH
33043: CALL_OW 135
// end ;
33047: LD_VAR 0 2
33051: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33052: LD_INT 0
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
// result := [ ] ;
33067: LD_ADDR_VAR 0 7
33071: PUSH
33072: EMPTY
33073: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33074: LD_VAR 0 1
33078: PPUSH
33079: CALL_OW 266
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: IN
33094: NOT
33095: IFFALSE 33099
// exit ;
33097: GO 34733
// if name then
33099: LD_VAR 0 3
33103: IFFALSE 33119
// SetBName ( base_dep , name ) ;
33105: LD_VAR 0 1
33109: PPUSH
33110: LD_VAR 0 3
33114: PPUSH
33115: CALL_OW 500
// base := GetBase ( base_dep ) ;
33119: LD_ADDR_VAR 0 15
33123: PUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 274
33133: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33134: LD_ADDR_VAR 0 16
33138: PUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: CALL_OW 255
33148: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33149: LD_ADDR_VAR 0 17
33153: PUSH
33154: LD_VAR 0 1
33158: PPUSH
33159: CALL_OW 248
33163: ST_TO_ADDR
// if sources then
33164: LD_VAR 0 5
33168: IFFALSE 33215
// for i = 1 to 3 do
33170: LD_ADDR_VAR 0 8
33174: PUSH
33175: DOUBLE
33176: LD_INT 1
33178: DEC
33179: ST_TO_ADDR
33180: LD_INT 3
33182: PUSH
33183: FOR_TO
33184: IFFALSE 33213
// AddResourceType ( base , i , sources [ i ] ) ;
33186: LD_VAR 0 15
33190: PPUSH
33191: LD_VAR 0 8
33195: PPUSH
33196: LD_VAR 0 5
33200: PUSH
33201: LD_VAR 0 8
33205: ARRAY
33206: PPUSH
33207: CALL_OW 276
33211: GO 33183
33213: POP
33214: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33215: LD_ADDR_VAR 0 18
33219: PUSH
33220: LD_VAR 0 15
33224: PPUSH
33225: LD_VAR 0 2
33229: PPUSH
33230: LD_INT 1
33232: PPUSH
33233: CALL 32476 0 3
33237: ST_TO_ADDR
// InitHc ;
33238: CALL_OW 19
// InitUc ;
33242: CALL_OW 18
// uc_side := side ;
33246: LD_ADDR_OWVAR 20
33250: PUSH
33251: LD_VAR 0 16
33255: ST_TO_ADDR
// uc_nation := nation ;
33256: LD_ADDR_OWVAR 21
33260: PUSH
33261: LD_VAR 0 17
33265: ST_TO_ADDR
// if buildings then
33266: LD_VAR 0 18
33270: IFFALSE 34592
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33272: LD_ADDR_VAR 0 19
33276: PUSH
33277: LD_VAR 0 18
33281: PPUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 30
33287: PUSH
33288: LD_INT 29
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 30
33297: PUSH
33298: LD_INT 30
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: LIST
33309: PPUSH
33310: CALL_OW 72
33314: ST_TO_ADDR
// if tmp then
33315: LD_VAR 0 19
33319: IFFALSE 33367
// for i in tmp do
33321: LD_ADDR_VAR 0 8
33325: PUSH
33326: LD_VAR 0 19
33330: PUSH
33331: FOR_IN
33332: IFFALSE 33365
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33334: LD_VAR 0 8
33338: PPUSH
33339: CALL_OW 250
33343: PPUSH
33344: LD_VAR 0 8
33348: PPUSH
33349: CALL_OW 251
33353: PPUSH
33354: LD_VAR 0 16
33358: PPUSH
33359: CALL_OW 441
33363: GO 33331
33365: POP
33366: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33367: LD_VAR 0 18
33371: PPUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 30
33377: PUSH
33378: LD_INT 32
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 30
33387: PUSH
33388: LD_INT 33
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: PPUSH
33400: CALL_OW 72
33404: IFFALSE 33492
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33406: LD_ADDR_VAR 0 8
33410: PUSH
33411: LD_VAR 0 18
33415: PPUSH
33416: LD_INT 2
33418: PUSH
33419: LD_INT 30
33421: PUSH
33422: LD_INT 32
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 30
33431: PUSH
33432: LD_INT 33
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 72
33448: PUSH
33449: FOR_IN
33450: IFFALSE 33490
// begin if not GetBWeapon ( i ) then
33452: LD_VAR 0 8
33456: PPUSH
33457: CALL_OW 269
33461: NOT
33462: IFFALSE 33488
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33464: LD_VAR 0 8
33468: PPUSH
33469: LD_VAR 0 8
33473: PPUSH
33474: LD_VAR 0 2
33478: PPUSH
33479: CALL 34738 0 2
33483: PPUSH
33484: CALL_OW 431
// end ;
33488: GO 33449
33490: POP
33491: POP
// end ; for i = 1 to personel do
33492: LD_ADDR_VAR 0 8
33496: PUSH
33497: DOUBLE
33498: LD_INT 1
33500: DEC
33501: ST_TO_ADDR
33502: LD_VAR 0 6
33506: PUSH
33507: FOR_TO
33508: IFFALSE 34572
// begin if i > 4 then
33510: LD_VAR 0 8
33514: PUSH
33515: LD_INT 4
33517: GREATER
33518: IFFALSE 33522
// break ;
33520: GO 34572
// case i of 1 :
33522: LD_VAR 0 8
33526: PUSH
33527: LD_INT 1
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33615
33535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33536: LD_ADDR_VAR 0 12
33540: PUSH
33541: LD_VAR 0 18
33545: PPUSH
33546: LD_INT 22
33548: PUSH
33549: LD_VAR 0 16
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 58
33560: PUSH
33561: EMPTY
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 30
33569: PUSH
33570: LD_INT 32
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 30
33579: PUSH
33580: LD_INT 4
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 30
33589: PUSH
33590: LD_INT 5
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: PPUSH
33608: CALL_OW 72
33612: ST_TO_ADDR
33613: GO 33837
33615: LD_INT 2
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33685
33623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33624: LD_ADDR_VAR 0 12
33628: PUSH
33629: LD_VAR 0 18
33633: PPUSH
33634: LD_INT 22
33636: PUSH
33637: LD_VAR 0 16
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 30
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 30
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: LIST
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PPUSH
33678: CALL_OW 72
33682: ST_TO_ADDR
33683: GO 33837
33685: LD_INT 3
33687: DOUBLE
33688: EQUAL
33689: IFTRUE 33693
33691: GO 33755
33693: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33694: LD_ADDR_VAR 0 12
33698: PUSH
33699: LD_VAR 0 18
33703: PPUSH
33704: LD_INT 22
33706: PUSH
33707: LD_VAR 0 16
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: LD_INT 30
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 30
33731: PUSH
33732: LD_INT 3
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 72
33752: ST_TO_ADDR
33753: GO 33837
33755: LD_INT 4
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33836
33763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33764: LD_ADDR_VAR 0 12
33768: PUSH
33769: LD_VAR 0 18
33773: PPUSH
33774: LD_INT 22
33776: PUSH
33777: LD_VAR 0 16
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 30
33791: PUSH
33792: LD_INT 6
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 30
33801: PUSH
33802: LD_INT 7
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 30
33811: PUSH
33812: LD_INT 8
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PPUSH
33829: CALL_OW 72
33833: ST_TO_ADDR
33834: GO 33837
33836: POP
// if i = 1 then
33837: LD_VAR 0 8
33841: PUSH
33842: LD_INT 1
33844: EQUAL
33845: IFFALSE 33956
// begin tmp := [ ] ;
33847: LD_ADDR_VAR 0 19
33851: PUSH
33852: EMPTY
33853: ST_TO_ADDR
// for j in f do
33854: LD_ADDR_VAR 0 9
33858: PUSH
33859: LD_VAR 0 12
33863: PUSH
33864: FOR_IN
33865: IFFALSE 33938
// if GetBType ( j ) = b_bunker then
33867: LD_VAR 0 9
33871: PPUSH
33872: CALL_OW 266
33876: PUSH
33877: LD_INT 32
33879: EQUAL
33880: IFFALSE 33907
// tmp := Insert ( tmp , 1 , j ) else
33882: LD_ADDR_VAR 0 19
33886: PUSH
33887: LD_VAR 0 19
33891: PPUSH
33892: LD_INT 1
33894: PPUSH
33895: LD_VAR 0 9
33899: PPUSH
33900: CALL_OW 2
33904: ST_TO_ADDR
33905: GO 33936
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33907: LD_ADDR_VAR 0 19
33911: PUSH
33912: LD_VAR 0 19
33916: PPUSH
33917: LD_VAR 0 19
33921: PUSH
33922: LD_INT 1
33924: PLUS
33925: PPUSH
33926: LD_VAR 0 9
33930: PPUSH
33931: CALL_OW 2
33935: ST_TO_ADDR
33936: GO 33864
33938: POP
33939: POP
// if tmp then
33940: LD_VAR 0 19
33944: IFFALSE 33956
// f := tmp ;
33946: LD_ADDR_VAR 0 12
33950: PUSH
33951: LD_VAR 0 19
33955: ST_TO_ADDR
// end ; x := personel [ i ] ;
33956: LD_ADDR_VAR 0 13
33960: PUSH
33961: LD_VAR 0 6
33965: PUSH
33966: LD_VAR 0 8
33970: ARRAY
33971: ST_TO_ADDR
// if x = - 1 then
33972: LD_VAR 0 13
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: EQUAL
33981: IFFALSE 34190
// begin for j in f do
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_VAR 0 12
33992: PUSH
33993: FOR_IN
33994: IFFALSE 34186
// repeat InitHc ;
33996: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34000: LD_VAR 0 9
34004: PPUSH
34005: CALL_OW 266
34009: PUSH
34010: LD_INT 5
34012: EQUAL
34013: IFFALSE 34083
// begin if UnitsInside ( j ) < 3 then
34015: LD_VAR 0 9
34019: PPUSH
34020: CALL_OW 313
34024: PUSH
34025: LD_INT 3
34027: LESS
34028: IFFALSE 34064
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34030: LD_INT 0
34032: PPUSH
34033: LD_INT 5
34035: PUSH
34036: LD_INT 8
34038: PUSH
34039: LD_INT 9
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: PUSH
34047: LD_VAR 0 17
34051: ARRAY
34052: PPUSH
34053: LD_VAR 0 4
34057: PPUSH
34058: CALL_OW 380
34062: GO 34081
// PrepareHuman ( false , i , skill ) ;
34064: LD_INT 0
34066: PPUSH
34067: LD_VAR 0 8
34071: PPUSH
34072: LD_VAR 0 4
34076: PPUSH
34077: CALL_OW 380
// end else
34081: GO 34100
// PrepareHuman ( false , i , skill ) ;
34083: LD_INT 0
34085: PPUSH
34086: LD_VAR 0 8
34090: PPUSH
34091: LD_VAR 0 4
34095: PPUSH
34096: CALL_OW 380
// un := CreateHuman ;
34100: LD_ADDR_VAR 0 14
34104: PUSH
34105: CALL_OW 44
34109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34110: LD_ADDR_VAR 0 7
34114: PUSH
34115: LD_VAR 0 7
34119: PPUSH
34120: LD_INT 1
34122: PPUSH
34123: LD_VAR 0 14
34127: PPUSH
34128: CALL_OW 2
34132: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34133: LD_VAR 0 14
34137: PPUSH
34138: LD_VAR 0 9
34142: PPUSH
34143: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34147: LD_VAR 0 9
34151: PPUSH
34152: CALL_OW 313
34156: PUSH
34157: LD_INT 6
34159: EQUAL
34160: PUSH
34161: LD_VAR 0 9
34165: PPUSH
34166: CALL_OW 266
34170: PUSH
34171: LD_INT 32
34173: PUSH
34174: LD_INT 31
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: IN
34181: OR
34182: IFFALSE 33996
34184: GO 33993
34186: POP
34187: POP
// end else
34188: GO 34570
// for j = 1 to x do
34190: LD_ADDR_VAR 0 9
34194: PUSH
34195: DOUBLE
34196: LD_INT 1
34198: DEC
34199: ST_TO_ADDR
34200: LD_VAR 0 13
34204: PUSH
34205: FOR_TO
34206: IFFALSE 34568
// begin InitHc ;
34208: CALL_OW 19
// if not f then
34212: LD_VAR 0 12
34216: NOT
34217: IFFALSE 34306
// begin PrepareHuman ( false , i , skill ) ;
34219: LD_INT 0
34221: PPUSH
34222: LD_VAR 0 8
34226: PPUSH
34227: LD_VAR 0 4
34231: PPUSH
34232: CALL_OW 380
// un := CreateHuman ;
34236: LD_ADDR_VAR 0 14
34240: PUSH
34241: CALL_OW 44
34245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34246: LD_ADDR_VAR 0 7
34250: PUSH
34251: LD_VAR 0 7
34255: PPUSH
34256: LD_INT 1
34258: PPUSH
34259: LD_VAR 0 14
34263: PPUSH
34264: CALL_OW 2
34268: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34269: LD_VAR 0 14
34273: PPUSH
34274: LD_VAR 0 1
34278: PPUSH
34279: CALL_OW 250
34283: PPUSH
34284: LD_VAR 0 1
34288: PPUSH
34289: CALL_OW 251
34293: PPUSH
34294: LD_INT 10
34296: PPUSH
34297: LD_INT 0
34299: PPUSH
34300: CALL_OW 50
// continue ;
34304: GO 34205
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34306: LD_VAR 0 12
34310: PUSH
34311: LD_INT 1
34313: ARRAY
34314: PPUSH
34315: CALL_OW 313
34319: PUSH
34320: LD_VAR 0 12
34324: PUSH
34325: LD_INT 1
34327: ARRAY
34328: PPUSH
34329: CALL_OW 266
34333: PUSH
34334: LD_INT 32
34336: PUSH
34337: LD_INT 31
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: IN
34344: AND
34345: PUSH
34346: LD_VAR 0 12
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: CALL_OW 313
34359: PUSH
34360: LD_INT 6
34362: EQUAL
34363: OR
34364: IFFALSE 34384
// f := Delete ( f , 1 ) ;
34366: LD_ADDR_VAR 0 12
34370: PUSH
34371: LD_VAR 0 12
34375: PPUSH
34376: LD_INT 1
34378: PPUSH
34379: CALL_OW 3
34383: ST_TO_ADDR
// if not f then
34384: LD_VAR 0 12
34388: NOT
34389: IFFALSE 34407
// begin x := x + 2 ;
34391: LD_ADDR_VAR 0 13
34395: PUSH
34396: LD_VAR 0 13
34400: PUSH
34401: LD_INT 2
34403: PLUS
34404: ST_TO_ADDR
// continue ;
34405: GO 34205
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34407: LD_VAR 0 12
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: CALL_OW 266
34420: PUSH
34421: LD_INT 5
34423: EQUAL
34424: IFFALSE 34498
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34426: LD_VAR 0 12
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 313
34439: PUSH
34440: LD_INT 3
34442: LESS
34443: IFFALSE 34479
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34445: LD_INT 0
34447: PPUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 8
34453: PUSH
34454: LD_INT 9
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: PUSH
34462: LD_VAR 0 17
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 4
34472: PPUSH
34473: CALL_OW 380
34477: GO 34496
// PrepareHuman ( false , i , skill ) ;
34479: LD_INT 0
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 380
// end else
34496: GO 34515
// PrepareHuman ( false , i , skill ) ;
34498: LD_INT 0
34500: PPUSH
34501: LD_VAR 0 8
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: CALL_OW 380
// un := CreateHuman ;
34515: LD_ADDR_VAR 0 14
34519: PUSH
34520: CALL_OW 44
34524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 7
34534: PPUSH
34535: LD_INT 1
34537: PPUSH
34538: LD_VAR 0 14
34542: PPUSH
34543: CALL_OW 2
34547: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34548: LD_VAR 0 14
34552: PPUSH
34553: LD_VAR 0 12
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: CALL_OW 52
// end ;
34566: GO 34205
34568: POP
34569: POP
// end ;
34570: GO 33507
34572: POP
34573: POP
// result := result ^ buildings ;
34574: LD_ADDR_VAR 0 7
34578: PUSH
34579: LD_VAR 0 7
34583: PUSH
34584: LD_VAR 0 18
34588: ADD
34589: ST_TO_ADDR
// end else
34590: GO 34733
// begin for i = 1 to personel do
34592: LD_ADDR_VAR 0 8
34596: PUSH
34597: DOUBLE
34598: LD_INT 1
34600: DEC
34601: ST_TO_ADDR
34602: LD_VAR 0 6
34606: PUSH
34607: FOR_TO
34608: IFFALSE 34731
// begin if i > 4 then
34610: LD_VAR 0 8
34614: PUSH
34615: LD_INT 4
34617: GREATER
34618: IFFALSE 34622
// break ;
34620: GO 34731
// x := personel [ i ] ;
34622: LD_ADDR_VAR 0 13
34626: PUSH
34627: LD_VAR 0 6
34631: PUSH
34632: LD_VAR 0 8
34636: ARRAY
34637: ST_TO_ADDR
// if x = - 1 then
34638: LD_VAR 0 13
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: EQUAL
34647: IFFALSE 34651
// continue ;
34649: GO 34607
// PrepareHuman ( false , i , skill ) ;
34651: LD_INT 0
34653: PPUSH
34654: LD_VAR 0 8
34658: PPUSH
34659: LD_VAR 0 4
34663: PPUSH
34664: CALL_OW 380
// un := CreateHuman ;
34668: LD_ADDR_VAR 0 14
34672: PUSH
34673: CALL_OW 44
34677: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34678: LD_VAR 0 14
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 250
34692: PPUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 251
34702: PPUSH
34703: LD_INT 10
34705: PPUSH
34706: LD_INT 0
34708: PPUSH
34709: CALL_OW 50
// result := result ^ un ;
34713: LD_ADDR_VAR 0 7
34717: PUSH
34718: LD_VAR 0 7
34722: PUSH
34723: LD_VAR 0 14
34727: ADD
34728: ST_TO_ADDR
// end ;
34729: GO 34607
34731: POP
34732: POP
// end ; end ;
34733: LD_VAR 0 7
34737: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34738: LD_INT 0
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
// result := false ;
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34764: LD_VAR 0 1
34768: NOT
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 266
34779: PUSH
34780: LD_INT 32
34782: PUSH
34783: LD_INT 33
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: IN
34790: NOT
34791: OR
34792: IFFALSE 34796
// exit ;
34794: GO 35905
// nat := GetNation ( tower ) ;
34796: LD_ADDR_VAR 0 12
34800: PUSH
34801: LD_VAR 0 1
34805: PPUSH
34806: CALL_OW 248
34810: ST_TO_ADDR
// side := GetSide ( tower ) ;
34811: LD_ADDR_VAR 0 16
34815: PUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 255
34825: ST_TO_ADDR
// x := GetX ( tower ) ;
34826: LD_ADDR_VAR 0 10
34830: PUSH
34831: LD_VAR 0 1
34835: PPUSH
34836: CALL_OW 250
34840: ST_TO_ADDR
// y := GetY ( tower ) ;
34841: LD_ADDR_VAR 0 11
34845: PUSH
34846: LD_VAR 0 1
34850: PPUSH
34851: CALL_OW 251
34855: ST_TO_ADDR
// if not x or not y then
34856: LD_VAR 0 10
34860: NOT
34861: PUSH
34862: LD_VAR 0 11
34866: NOT
34867: OR
34868: IFFALSE 34872
// exit ;
34870: GO 35905
// weapon := 0 ;
34872: LD_ADDR_VAR 0 18
34876: PUSH
34877: LD_INT 0
34879: ST_TO_ADDR
// fac_list := [ ] ;
34880: LD_ADDR_VAR 0 17
34884: PUSH
34885: EMPTY
34886: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34887: LD_ADDR_VAR 0 6
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL_OW 274
34901: PPUSH
34902: LD_VAR 0 2
34906: PPUSH
34907: LD_INT 0
34909: PPUSH
34910: CALL 32476 0 3
34914: PPUSH
34915: LD_INT 30
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PPUSH
34925: CALL_OW 72
34929: ST_TO_ADDR
// if not factories then
34930: LD_VAR 0 6
34934: NOT
34935: IFFALSE 34939
// exit ;
34937: GO 35905
// for i in factories do
34939: LD_ADDR_VAR 0 8
34943: PUSH
34944: LD_VAR 0 6
34948: PUSH
34949: FOR_IN
34950: IFFALSE 34975
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34952: LD_ADDR_VAR 0 17
34956: PUSH
34957: LD_VAR 0 17
34961: PUSH
34962: LD_VAR 0 8
34966: PPUSH
34967: CALL_OW 478
34971: UNION
34972: ST_TO_ADDR
34973: GO 34949
34975: POP
34976: POP
// if not fac_list then
34977: LD_VAR 0 17
34981: NOT
34982: IFFALSE 34986
// exit ;
34984: GO 35905
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34986: LD_ADDR_VAR 0 5
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: LD_INT 5
34996: PUSH
34997: LD_INT 9
34999: PUSH
35000: LD_INT 10
35002: PUSH
35003: LD_INT 6
35005: PUSH
35006: LD_INT 7
35008: PUSH
35009: LD_INT 11
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 27
35023: PUSH
35024: LD_INT 28
35026: PUSH
35027: LD_INT 26
35029: PUSH
35030: LD_INT 30
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 43
35041: PUSH
35042: LD_INT 44
35044: PUSH
35045: LD_INT 46
35047: PUSH
35048: LD_INT 45
35050: PUSH
35051: LD_INT 47
35053: PUSH
35054: LD_INT 49
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: PUSH
35070: LD_VAR 0 12
35074: ARRAY
35075: ST_TO_ADDR
// list := list isect fac_list ;
35076: LD_ADDR_VAR 0 5
35080: PUSH
35081: LD_VAR 0 5
35085: PUSH
35086: LD_VAR 0 17
35090: ISECT
35091: ST_TO_ADDR
// if not list then
35092: LD_VAR 0 5
35096: NOT
35097: IFFALSE 35101
// exit ;
35099: GO 35905
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35101: LD_VAR 0 12
35105: PUSH
35106: LD_INT 3
35108: EQUAL
35109: PUSH
35110: LD_INT 49
35112: PUSH
35113: LD_VAR 0 5
35117: IN
35118: AND
35119: PUSH
35120: LD_INT 31
35122: PPUSH
35123: LD_VAR 0 16
35127: PPUSH
35128: CALL_OW 321
35132: PUSH
35133: LD_INT 2
35135: EQUAL
35136: AND
35137: IFFALSE 35197
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35139: LD_INT 22
35141: PUSH
35142: LD_VAR 0 16
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 35
35153: PUSH
35154: LD_INT 49
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 91
35163: PUSH
35164: LD_VAR 0 1
35168: PUSH
35169: LD_INT 10
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: LIST
35181: PPUSH
35182: CALL_OW 69
35186: NOT
35187: IFFALSE 35197
// weapon := ru_time_lapser ;
35189: LD_ADDR_VAR 0 18
35193: PUSH
35194: LD_INT 49
35196: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35197: LD_VAR 0 12
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: IN
35212: PUSH
35213: LD_INT 11
35215: PUSH
35216: LD_VAR 0 5
35220: IN
35221: PUSH
35222: LD_INT 30
35224: PUSH
35225: LD_VAR 0 5
35229: IN
35230: OR
35231: AND
35232: PUSH
35233: LD_INT 6
35235: PPUSH
35236: LD_VAR 0 16
35240: PPUSH
35241: CALL_OW 321
35245: PUSH
35246: LD_INT 2
35248: EQUAL
35249: AND
35250: IFFALSE 35415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35252: LD_INT 22
35254: PUSH
35255: LD_VAR 0 16
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: LD_INT 35
35269: PUSH
35270: LD_INT 11
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 35
35279: PUSH
35280: LD_INT 30
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 91
35294: PUSH
35295: LD_VAR 0 1
35299: PUSH
35300: LD_INT 18
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PPUSH
35313: CALL_OW 69
35317: NOT
35318: PUSH
35319: LD_INT 22
35321: PUSH
35322: LD_VAR 0 16
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 30
35336: PUSH
35337: LD_INT 32
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 30
35346: PUSH
35347: LD_INT 33
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 91
35361: PUSH
35362: LD_VAR 0 1
35366: PUSH
35367: LD_INT 12
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: PPUSH
35383: CALL_OW 69
35387: PUSH
35388: LD_INT 2
35390: GREATER
35391: AND
35392: IFFALSE 35415
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35394: LD_ADDR_VAR 0 18
35398: PUSH
35399: LD_INT 11
35401: PUSH
35402: LD_INT 30
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_VAR 0 12
35413: ARRAY
35414: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35415: LD_VAR 0 18
35419: NOT
35420: PUSH
35421: LD_INT 40
35423: PPUSH
35424: LD_VAR 0 16
35428: PPUSH
35429: CALL_OW 321
35433: PUSH
35434: LD_INT 2
35436: EQUAL
35437: AND
35438: PUSH
35439: LD_INT 7
35441: PUSH
35442: LD_VAR 0 5
35446: IN
35447: PUSH
35448: LD_INT 28
35450: PUSH
35451: LD_VAR 0 5
35455: IN
35456: OR
35457: PUSH
35458: LD_INT 45
35460: PUSH
35461: LD_VAR 0 5
35465: IN
35466: OR
35467: AND
35468: IFFALSE 35722
// begin hex := GetHexInfo ( x , y ) ;
35470: LD_ADDR_VAR 0 4
35474: PUSH
35475: LD_VAR 0 10
35479: PPUSH
35480: LD_VAR 0 11
35484: PPUSH
35485: CALL_OW 546
35489: ST_TO_ADDR
// if hex [ 1 ] then
35490: LD_VAR 0 4
35494: PUSH
35495: LD_INT 1
35497: ARRAY
35498: IFFALSE 35502
// exit ;
35500: GO 35905
// height := hex [ 2 ] ;
35502: LD_ADDR_VAR 0 15
35506: PUSH
35507: LD_VAR 0 4
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35516: LD_ADDR_VAR 0 14
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: LD_INT 5
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: ST_TO_ADDR
// for i in tmp do
35539: LD_ADDR_VAR 0 8
35543: PUSH
35544: LD_VAR 0 14
35548: PUSH
35549: FOR_IN
35550: IFFALSE 35720
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35552: LD_ADDR_VAR 0 9
35556: PUSH
35557: LD_VAR 0 10
35561: PPUSH
35562: LD_VAR 0 8
35566: PPUSH
35567: LD_INT 5
35569: PPUSH
35570: CALL_OW 272
35574: PUSH
35575: LD_VAR 0 11
35579: PPUSH
35580: LD_VAR 0 8
35584: PPUSH
35585: LD_INT 5
35587: PPUSH
35588: CALL_OW 273
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35597: LD_VAR 0 9
35601: PUSH
35602: LD_INT 1
35604: ARRAY
35605: PPUSH
35606: LD_VAR 0 9
35610: PUSH
35611: LD_INT 2
35613: ARRAY
35614: PPUSH
35615: CALL_OW 488
35619: IFFALSE 35718
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35621: LD_ADDR_VAR 0 4
35625: PUSH
35626: LD_VAR 0 9
35630: PUSH
35631: LD_INT 1
35633: ARRAY
35634: PPUSH
35635: LD_VAR 0 9
35639: PUSH
35640: LD_INT 2
35642: ARRAY
35643: PPUSH
35644: CALL_OW 546
35648: ST_TO_ADDR
// if hex [ 1 ] then
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 1
35656: ARRAY
35657: IFFALSE 35661
// continue ;
35659: GO 35549
// h := hex [ 2 ] ;
35661: LD_ADDR_VAR 0 13
35665: PUSH
35666: LD_VAR 0 4
35670: PUSH
35671: LD_INT 2
35673: ARRAY
35674: ST_TO_ADDR
// if h + 7 < height then
35675: LD_VAR 0 13
35679: PUSH
35680: LD_INT 7
35682: PLUS
35683: PUSH
35684: LD_VAR 0 15
35688: LESS
35689: IFFALSE 35718
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35691: LD_ADDR_VAR 0 18
35695: PUSH
35696: LD_INT 7
35698: PUSH
35699: LD_INT 28
35701: PUSH
35702: LD_INT 45
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: PUSH
35710: LD_VAR 0 12
35714: ARRAY
35715: ST_TO_ADDR
// break ;
35716: GO 35720
// end ; end ; end ;
35718: GO 35549
35720: POP
35721: POP
// end ; if not weapon then
35722: LD_VAR 0 18
35726: NOT
35727: IFFALSE 35787
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35729: LD_ADDR_VAR 0 5
35733: PUSH
35734: LD_VAR 0 5
35738: PUSH
35739: LD_INT 11
35741: PUSH
35742: LD_INT 30
35744: PUSH
35745: LD_INT 49
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: DIFF
35753: ST_TO_ADDR
// if not list then
35754: LD_VAR 0 5
35758: NOT
35759: IFFALSE 35763
// exit ;
35761: GO 35905
// weapon := list [ rand ( 1 , list ) ] ;
35763: LD_ADDR_VAR 0 18
35767: PUSH
35768: LD_VAR 0 5
35772: PUSH
35773: LD_INT 1
35775: PPUSH
35776: LD_VAR 0 5
35780: PPUSH
35781: CALL_OW 12
35785: ARRAY
35786: ST_TO_ADDR
// end ; if weapon then
35787: LD_VAR 0 18
35791: IFFALSE 35905
// begin tmp := CostOfWeapon ( weapon ) ;
35793: LD_ADDR_VAR 0 14
35797: PUSH
35798: LD_VAR 0 18
35802: PPUSH
35803: CALL_OW 451
35807: ST_TO_ADDR
// j := GetBase ( tower ) ;
35808: LD_ADDR_VAR 0 9
35812: PUSH
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 274
35822: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35823: LD_VAR 0 9
35827: PPUSH
35828: LD_INT 1
35830: PPUSH
35831: CALL_OW 275
35835: PUSH
35836: LD_VAR 0 14
35840: PUSH
35841: LD_INT 1
35843: ARRAY
35844: GREATEREQUAL
35845: PUSH
35846: LD_VAR 0 9
35850: PPUSH
35851: LD_INT 2
35853: PPUSH
35854: CALL_OW 275
35858: PUSH
35859: LD_VAR 0 14
35863: PUSH
35864: LD_INT 2
35866: ARRAY
35867: GREATEREQUAL
35868: AND
35869: PUSH
35870: LD_VAR 0 9
35874: PPUSH
35875: LD_INT 3
35877: PPUSH
35878: CALL_OW 275
35882: PUSH
35883: LD_VAR 0 14
35887: PUSH
35888: LD_INT 3
35890: ARRAY
35891: GREATEREQUAL
35892: AND
35893: IFFALSE 35905
// result := weapon ;
35895: LD_ADDR_VAR 0 3
35899: PUSH
35900: LD_VAR 0 18
35904: ST_TO_ADDR
// end ; end ;
35905: LD_VAR 0 3
35909: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35910: LD_INT 0
35912: PPUSH
35913: PPUSH
// result := true ;
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_INT 1
35921: ST_TO_ADDR
// if array1 = array2 then
35922: LD_VAR 0 1
35926: PUSH
35927: LD_VAR 0 2
35931: EQUAL
35932: IFFALSE 35992
// begin for i = 1 to array1 do
35934: LD_ADDR_VAR 0 4
35938: PUSH
35939: DOUBLE
35940: LD_INT 1
35942: DEC
35943: ST_TO_ADDR
35944: LD_VAR 0 1
35948: PUSH
35949: FOR_TO
35950: IFFALSE 35988
// if array1 [ i ] <> array2 [ i ] then
35952: LD_VAR 0 1
35956: PUSH
35957: LD_VAR 0 4
35961: ARRAY
35962: PUSH
35963: LD_VAR 0 2
35967: PUSH
35968: LD_VAR 0 4
35972: ARRAY
35973: NONEQUAL
35974: IFFALSE 35986
// begin result := false ;
35976: LD_ADDR_VAR 0 3
35980: PUSH
35981: LD_INT 0
35983: ST_TO_ADDR
// break ;
35984: GO 35988
// end ;
35986: GO 35949
35988: POP
35989: POP
// end else
35990: GO 36000
// result := false ;
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 0
35999: ST_TO_ADDR
// end ;
36000: LD_VAR 0 3
36004: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36005: LD_INT 0
36007: PPUSH
36008: PPUSH
// if not array1 or not array2 then
36009: LD_VAR 0 1
36013: NOT
36014: PUSH
36015: LD_VAR 0 2
36019: NOT
36020: OR
36021: IFFALSE 36025
// exit ;
36023: GO 36089
// result := true ;
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_INT 1
36032: ST_TO_ADDR
// for i = 1 to array1 do
36033: LD_ADDR_VAR 0 4
36037: PUSH
36038: DOUBLE
36039: LD_INT 1
36041: DEC
36042: ST_TO_ADDR
36043: LD_VAR 0 1
36047: PUSH
36048: FOR_TO
36049: IFFALSE 36087
// if array1 [ i ] <> array2 [ i ] then
36051: LD_VAR 0 1
36055: PUSH
36056: LD_VAR 0 4
36060: ARRAY
36061: PUSH
36062: LD_VAR 0 2
36066: PUSH
36067: LD_VAR 0 4
36071: ARRAY
36072: NONEQUAL
36073: IFFALSE 36085
// begin result := false ;
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_INT 0
36082: ST_TO_ADDR
// break ;
36083: GO 36087
// end ;
36085: GO 36048
36087: POP
36088: POP
// end ;
36089: LD_VAR 0 3
36093: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36094: LD_INT 0
36096: PPUSH
36097: PPUSH
36098: PPUSH
// pom := GetBase ( fac ) ;
36099: LD_ADDR_VAR 0 5
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 274
36113: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36114: LD_ADDR_VAR 0 4
36118: PUSH
36119: LD_VAR 0 2
36123: PUSH
36124: LD_INT 1
36126: ARRAY
36127: PPUSH
36128: LD_VAR 0 2
36132: PUSH
36133: LD_INT 2
36135: ARRAY
36136: PPUSH
36137: LD_VAR 0 2
36141: PUSH
36142: LD_INT 3
36144: ARRAY
36145: PPUSH
36146: LD_VAR 0 2
36150: PUSH
36151: LD_INT 4
36153: ARRAY
36154: PPUSH
36155: CALL_OW 449
36159: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36160: LD_ADDR_VAR 0 3
36164: PUSH
36165: LD_VAR 0 5
36169: PPUSH
36170: LD_INT 1
36172: PPUSH
36173: CALL_OW 275
36177: PUSH
36178: LD_VAR 0 4
36182: PUSH
36183: LD_INT 1
36185: ARRAY
36186: GREATEREQUAL
36187: PUSH
36188: LD_VAR 0 5
36192: PPUSH
36193: LD_INT 2
36195: PPUSH
36196: CALL_OW 275
36200: PUSH
36201: LD_VAR 0 4
36205: PUSH
36206: LD_INT 2
36208: ARRAY
36209: GREATEREQUAL
36210: AND
36211: PUSH
36212: LD_VAR 0 5
36216: PPUSH
36217: LD_INT 3
36219: PPUSH
36220: CALL_OW 275
36224: PUSH
36225: LD_VAR 0 4
36229: PUSH
36230: LD_INT 3
36232: ARRAY
36233: GREATEREQUAL
36234: AND
36235: ST_TO_ADDR
// end ;
36236: LD_VAR 0 3
36240: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36241: LD_INT 0
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
// pom := GetBase ( building ) ;
36247: LD_ADDR_VAR 0 3
36251: PUSH
36252: LD_VAR 0 1
36256: PPUSH
36257: CALL_OW 274
36261: ST_TO_ADDR
// if not pom then
36262: LD_VAR 0 3
36266: NOT
36267: IFFALSE 36271
// exit ;
36269: GO 36441
// btype := GetBType ( building ) ;
36271: LD_ADDR_VAR 0 5
36275: PUSH
36276: LD_VAR 0 1
36280: PPUSH
36281: CALL_OW 266
36285: ST_TO_ADDR
// if btype = b_armoury then
36286: LD_VAR 0 5
36290: PUSH
36291: LD_INT 4
36293: EQUAL
36294: IFFALSE 36304
// btype := b_barracks ;
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_INT 5
36303: ST_TO_ADDR
// if btype = b_depot then
36304: LD_VAR 0 5
36308: PUSH
36309: LD_INT 0
36311: EQUAL
36312: IFFALSE 36322
// btype := b_warehouse ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_INT 1
36321: ST_TO_ADDR
// if btype = b_workshop then
36322: LD_VAR 0 5
36326: PUSH
36327: LD_INT 2
36329: EQUAL
36330: IFFALSE 36340
// btype := b_factory ;
36332: LD_ADDR_VAR 0 5
36336: PUSH
36337: LD_INT 3
36339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36340: LD_ADDR_VAR 0 4
36344: PUSH
36345: LD_VAR 0 5
36349: PPUSH
36350: LD_VAR 0 1
36354: PPUSH
36355: CALL_OW 248
36359: PPUSH
36360: CALL_OW 450
36364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36365: LD_ADDR_VAR 0 2
36369: PUSH
36370: LD_VAR 0 3
36374: PPUSH
36375: LD_INT 1
36377: PPUSH
36378: CALL_OW 275
36382: PUSH
36383: LD_VAR 0 4
36387: PUSH
36388: LD_INT 1
36390: ARRAY
36391: GREATEREQUAL
36392: PUSH
36393: LD_VAR 0 3
36397: PPUSH
36398: LD_INT 2
36400: PPUSH
36401: CALL_OW 275
36405: PUSH
36406: LD_VAR 0 4
36410: PUSH
36411: LD_INT 2
36413: ARRAY
36414: GREATEREQUAL
36415: AND
36416: PUSH
36417: LD_VAR 0 3
36421: PPUSH
36422: LD_INT 3
36424: PPUSH
36425: CALL_OW 275
36429: PUSH
36430: LD_VAR 0 4
36434: PUSH
36435: LD_INT 3
36437: ARRAY
36438: GREATEREQUAL
36439: AND
36440: ST_TO_ADDR
// end ;
36441: LD_VAR 0 2
36445: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36446: LD_INT 0
36448: PPUSH
36449: PPUSH
36450: PPUSH
// pom := GetBase ( building ) ;
36451: LD_ADDR_VAR 0 4
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 274
36465: ST_TO_ADDR
// if not pom then
36466: LD_VAR 0 4
36470: NOT
36471: IFFALSE 36475
// exit ;
36473: GO 36576
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36475: LD_ADDR_VAR 0 5
36479: PUSH
36480: LD_VAR 0 2
36484: PPUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 248
36494: PPUSH
36495: CALL_OW 450
36499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: LD_INT 1
36512: PPUSH
36513: CALL_OW 275
36517: PUSH
36518: LD_VAR 0 5
36522: PUSH
36523: LD_INT 1
36525: ARRAY
36526: GREATEREQUAL
36527: PUSH
36528: LD_VAR 0 4
36532: PPUSH
36533: LD_INT 2
36535: PPUSH
36536: CALL_OW 275
36540: PUSH
36541: LD_VAR 0 5
36545: PUSH
36546: LD_INT 2
36548: ARRAY
36549: GREATEREQUAL
36550: AND
36551: PUSH
36552: LD_VAR 0 4
36556: PPUSH
36557: LD_INT 3
36559: PPUSH
36560: CALL_OW 275
36564: PUSH
36565: LD_VAR 0 5
36569: PUSH
36570: LD_INT 3
36572: ARRAY
36573: GREATEREQUAL
36574: AND
36575: ST_TO_ADDR
// end ;
36576: LD_VAR 0 3
36580: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36581: LD_INT 0
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
// result := false ;
36594: LD_ADDR_VAR 0 8
36598: PUSH
36599: LD_INT 0
36601: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36602: LD_VAR 0 5
36606: NOT
36607: PUSH
36608: LD_VAR 0 1
36612: NOT
36613: OR
36614: PUSH
36615: LD_VAR 0 2
36619: NOT
36620: OR
36621: PUSH
36622: LD_VAR 0 3
36626: NOT
36627: OR
36628: IFFALSE 36632
// exit ;
36630: GO 37446
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36632: LD_ADDR_VAR 0 14
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: LD_VAR 0 2
36646: PPUSH
36647: LD_VAR 0 3
36651: PPUSH
36652: LD_VAR 0 4
36656: PPUSH
36657: LD_VAR 0 5
36661: PUSH
36662: LD_INT 1
36664: ARRAY
36665: PPUSH
36666: CALL_OW 248
36670: PPUSH
36671: LD_INT 0
36673: PPUSH
36674: CALL 38683 0 6
36678: ST_TO_ADDR
// if not hexes then
36679: LD_VAR 0 14
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 37446
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36688: LD_ADDR_VAR 0 17
36692: PUSH
36693: LD_VAR 0 5
36697: PPUSH
36698: LD_INT 22
36700: PUSH
36701: LD_VAR 0 13
36705: PPUSH
36706: CALL_OW 255
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 30
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 30
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PPUSH
36747: CALL_OW 72
36751: ST_TO_ADDR
// for i = 1 to hexes do
36752: LD_ADDR_VAR 0 9
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_VAR 0 14
36766: PUSH
36767: FOR_TO
36768: IFFALSE 37444
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36770: LD_ADDR_VAR 0 13
36774: PUSH
36775: LD_VAR 0 14
36779: PUSH
36780: LD_VAR 0 9
36784: ARRAY
36785: PUSH
36786: LD_INT 1
36788: ARRAY
36789: PPUSH
36790: LD_VAR 0 14
36794: PUSH
36795: LD_VAR 0 9
36799: ARRAY
36800: PUSH
36801: LD_INT 2
36803: ARRAY
36804: PPUSH
36805: CALL_OW 428
36809: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36810: LD_VAR 0 14
36814: PUSH
36815: LD_VAR 0 9
36819: ARRAY
36820: PUSH
36821: LD_INT 1
36823: ARRAY
36824: PPUSH
36825: LD_VAR 0 14
36829: PUSH
36830: LD_VAR 0 9
36834: ARRAY
36835: PUSH
36836: LD_INT 2
36838: ARRAY
36839: PPUSH
36840: CALL_OW 351
36844: PUSH
36845: LD_VAR 0 14
36849: PUSH
36850: LD_VAR 0 9
36854: ARRAY
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: LD_VAR 0 14
36864: PUSH
36865: LD_VAR 0 9
36869: ARRAY
36870: PUSH
36871: LD_INT 2
36873: ARRAY
36874: PPUSH
36875: CALL_OW 488
36879: NOT
36880: OR
36881: PUSH
36882: LD_VAR 0 13
36886: PPUSH
36887: CALL_OW 247
36891: PUSH
36892: LD_INT 3
36894: EQUAL
36895: OR
36896: IFFALSE 36902
// exit ;
36898: POP
36899: POP
36900: GO 37446
// if not tmp then
36902: LD_VAR 0 13
36906: NOT
36907: IFFALSE 36911
// continue ;
36909: GO 36767
// result := true ;
36911: LD_ADDR_VAR 0 8
36915: PUSH
36916: LD_INT 1
36918: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36919: LD_VAR 0 6
36923: PUSH
36924: LD_VAR 0 13
36928: PPUSH
36929: CALL_OW 247
36933: PUSH
36934: LD_INT 2
36936: EQUAL
36937: AND
36938: PUSH
36939: LD_VAR 0 13
36943: PPUSH
36944: CALL_OW 263
36948: PUSH
36949: LD_INT 1
36951: EQUAL
36952: AND
36953: IFFALSE 37117
// begin if IsDrivenBy ( tmp ) then
36955: LD_VAR 0 13
36959: PPUSH
36960: CALL_OW 311
36964: IFFALSE 36968
// continue ;
36966: GO 36767
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36968: LD_VAR 0 6
36972: PPUSH
36973: LD_INT 3
36975: PUSH
36976: LD_INT 60
36978: PUSH
36979: EMPTY
36980: LIST
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: LD_INT 55
36991: PUSH
36992: EMPTY
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PPUSH
37003: CALL_OW 72
37007: IFFALSE 37115
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37009: LD_ADDR_VAR 0 18
37013: PUSH
37014: LD_VAR 0 6
37018: PPUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 60
37024: PUSH
37025: EMPTY
37026: LIST
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 3
37034: PUSH
37035: LD_INT 55
37037: PUSH
37038: EMPTY
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PPUSH
37049: CALL_OW 72
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: ST_TO_ADDR
// if IsInUnit ( driver ) then
37058: LD_VAR 0 18
37062: PPUSH
37063: CALL_OW 310
37067: IFFALSE 37078
// ComExit ( driver ) ;
37069: LD_VAR 0 18
37073: PPUSH
37074: CALL 62388 0 1
// AddComEnterUnit ( driver , tmp ) ;
37078: LD_VAR 0 18
37082: PPUSH
37083: LD_VAR 0 13
37087: PPUSH
37088: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37092: LD_VAR 0 18
37096: PPUSH
37097: LD_VAR 0 7
37101: PPUSH
37102: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37106: LD_VAR 0 18
37110: PPUSH
37111: CALL_OW 181
// end ; continue ;
37115: GO 36767
// end ; if not cleaners or not tmp in cleaners then
37117: LD_VAR 0 6
37121: NOT
37122: PUSH
37123: LD_VAR 0 13
37127: PUSH
37128: LD_VAR 0 6
37132: IN
37133: NOT
37134: OR
37135: IFFALSE 37442
// begin if dep then
37137: LD_VAR 0 17
37141: IFFALSE 37277
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37143: LD_ADDR_VAR 0 16
37147: PUSH
37148: LD_VAR 0 17
37152: PUSH
37153: LD_INT 1
37155: ARRAY
37156: PPUSH
37157: CALL_OW 250
37161: PPUSH
37162: LD_VAR 0 17
37166: PUSH
37167: LD_INT 1
37169: ARRAY
37170: PPUSH
37171: CALL_OW 254
37175: PPUSH
37176: LD_INT 5
37178: PPUSH
37179: CALL_OW 272
37183: PUSH
37184: LD_VAR 0 17
37188: PUSH
37189: LD_INT 1
37191: ARRAY
37192: PPUSH
37193: CALL_OW 251
37197: PPUSH
37198: LD_VAR 0 17
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PPUSH
37207: CALL_OW 254
37211: PPUSH
37212: LD_INT 5
37214: PPUSH
37215: CALL_OW 273
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37224: LD_VAR 0 16
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PPUSH
37233: LD_VAR 0 16
37237: PUSH
37238: LD_INT 2
37240: ARRAY
37241: PPUSH
37242: CALL_OW 488
37246: IFFALSE 37277
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37248: LD_VAR 0 13
37252: PPUSH
37253: LD_VAR 0 16
37257: PUSH
37258: LD_INT 1
37260: ARRAY
37261: PPUSH
37262: LD_VAR 0 16
37266: PUSH
37267: LD_INT 2
37269: ARRAY
37270: PPUSH
37271: CALL_OW 111
// continue ;
37275: GO 36767
// end ; end ; r := GetDir ( tmp ) ;
37277: LD_ADDR_VAR 0 15
37281: PUSH
37282: LD_VAR 0 13
37286: PPUSH
37287: CALL_OW 254
37291: ST_TO_ADDR
// if r = 5 then
37292: LD_VAR 0 15
37296: PUSH
37297: LD_INT 5
37299: EQUAL
37300: IFFALSE 37310
// r := 0 ;
37302: LD_ADDR_VAR 0 15
37306: PUSH
37307: LD_INT 0
37309: ST_TO_ADDR
// for j = r to 5 do
37310: LD_ADDR_VAR 0 10
37314: PUSH
37315: DOUBLE
37316: LD_VAR 0 15
37320: DEC
37321: ST_TO_ADDR
37322: LD_INT 5
37324: PUSH
37325: FOR_TO
37326: IFFALSE 37440
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37328: LD_ADDR_VAR 0 11
37332: PUSH
37333: LD_VAR 0 13
37337: PPUSH
37338: CALL_OW 250
37342: PPUSH
37343: LD_VAR 0 10
37347: PPUSH
37348: LD_INT 2
37350: PPUSH
37351: CALL_OW 272
37355: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37356: LD_ADDR_VAR 0 12
37360: PUSH
37361: LD_VAR 0 13
37365: PPUSH
37366: CALL_OW 251
37370: PPUSH
37371: LD_VAR 0 10
37375: PPUSH
37376: LD_INT 2
37378: PPUSH
37379: CALL_OW 273
37383: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37384: LD_VAR 0 11
37388: PPUSH
37389: LD_VAR 0 12
37393: PPUSH
37394: CALL_OW 488
37398: PUSH
37399: LD_VAR 0 11
37403: PPUSH
37404: LD_VAR 0 12
37408: PPUSH
37409: CALL_OW 428
37413: NOT
37414: AND
37415: IFFALSE 37438
// begin ComMoveXY ( tmp , _x , _y ) ;
37417: LD_VAR 0 13
37421: PPUSH
37422: LD_VAR 0 11
37426: PPUSH
37427: LD_VAR 0 12
37431: PPUSH
37432: CALL_OW 111
// break ;
37436: GO 37440
// end ; end ;
37438: GO 37325
37440: POP
37441: POP
// end ; end ;
37442: GO 36767
37444: POP
37445: POP
// end ;
37446: LD_VAR 0 8
37450: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37451: LD_INT 0
37453: PPUSH
// result := true ;
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 1
37461: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37462: LD_VAR 0 2
37466: PUSH
37467: LD_INT 24
37469: DOUBLE
37470: EQUAL
37471: IFTRUE 37481
37473: LD_INT 33
37475: DOUBLE
37476: EQUAL
37477: IFTRUE 37481
37479: GO 37506
37481: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37482: LD_ADDR_VAR 0 3
37486: PUSH
37487: LD_INT 32
37489: PPUSH
37490: LD_VAR 0 1
37494: PPUSH
37495: CALL_OW 321
37499: PUSH
37500: LD_INT 2
37502: EQUAL
37503: ST_TO_ADDR
37504: GO 37826
37506: LD_INT 20
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 37539
37514: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: LD_INT 6
37522: PPUSH
37523: LD_VAR 0 1
37527: PPUSH
37528: CALL_OW 321
37532: PUSH
37533: LD_INT 2
37535: EQUAL
37536: ST_TO_ADDR
37537: GO 37826
37539: LD_INT 22
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37553
37545: LD_INT 36
37547: DOUBLE
37548: EQUAL
37549: IFTRUE 37553
37551: GO 37578
37553: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 15
37561: PPUSH
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 321
37571: PUSH
37572: LD_INT 2
37574: EQUAL
37575: ST_TO_ADDR
37576: GO 37826
37578: LD_INT 30
37580: DOUBLE
37581: EQUAL
37582: IFTRUE 37586
37584: GO 37611
37586: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37587: LD_ADDR_VAR 0 3
37591: PUSH
37592: LD_INT 20
37594: PPUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 321
37604: PUSH
37605: LD_INT 2
37607: EQUAL
37608: ST_TO_ADDR
37609: GO 37826
37611: LD_INT 28
37613: DOUBLE
37614: EQUAL
37615: IFTRUE 37625
37617: LD_INT 21
37619: DOUBLE
37620: EQUAL
37621: IFTRUE 37625
37623: GO 37650
37625: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37626: LD_ADDR_VAR 0 3
37630: PUSH
37631: LD_INT 21
37633: PPUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 321
37643: PUSH
37644: LD_INT 2
37646: EQUAL
37647: ST_TO_ADDR
37648: GO 37826
37650: LD_INT 16
37652: DOUBLE
37653: EQUAL
37654: IFTRUE 37658
37656: GO 37685
37658: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37659: LD_ADDR_VAR 0 3
37663: PUSH
37664: LD_EXP 107
37668: PPUSH
37669: LD_VAR 0 1
37673: PPUSH
37674: CALL_OW 321
37678: PUSH
37679: LD_INT 2
37681: EQUAL
37682: ST_TO_ADDR
37683: GO 37826
37685: LD_INT 19
37687: DOUBLE
37688: EQUAL
37689: IFTRUE 37699
37691: LD_INT 23
37693: DOUBLE
37694: EQUAL
37695: IFTRUE 37699
37697: GO 37726
37699: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37700: LD_ADDR_VAR 0 3
37704: PUSH
37705: LD_EXP 106
37709: PPUSH
37710: LD_VAR 0 1
37714: PPUSH
37715: CALL_OW 321
37719: PUSH
37720: LD_INT 2
37722: EQUAL
37723: ST_TO_ADDR
37724: GO 37826
37726: LD_INT 17
37728: DOUBLE
37729: EQUAL
37730: IFTRUE 37734
37732: GO 37759
37734: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 39
37742: PPUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 321
37752: PUSH
37753: LD_INT 2
37755: EQUAL
37756: ST_TO_ADDR
37757: GO 37826
37759: LD_INT 18
37761: DOUBLE
37762: EQUAL
37763: IFTRUE 37767
37765: GO 37792
37767: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37768: LD_ADDR_VAR 0 3
37772: PUSH
37773: LD_INT 40
37775: PPUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: CALL_OW 321
37785: PUSH
37786: LD_INT 2
37788: EQUAL
37789: ST_TO_ADDR
37790: GO 37826
37792: LD_INT 27
37794: DOUBLE
37795: EQUAL
37796: IFTRUE 37800
37798: GO 37825
37800: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37801: LD_ADDR_VAR 0 3
37805: PUSH
37806: LD_INT 35
37808: PPUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 321
37818: PUSH
37819: LD_INT 2
37821: EQUAL
37822: ST_TO_ADDR
37823: GO 37826
37825: POP
// end ;
37826: LD_VAR 0 3
37830: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37831: LD_INT 0
37833: PPUSH
37834: PPUSH
37835: PPUSH
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
37842: PPUSH
37843: PPUSH
// result := false ;
37844: LD_ADDR_VAR 0 6
37848: PUSH
37849: LD_INT 0
37851: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37852: LD_VAR 0 1
37856: NOT
37857: PUSH
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 266
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: IN
37878: NOT
37879: OR
37880: PUSH
37881: LD_VAR 0 2
37885: NOT
37886: OR
37887: PUSH
37888: LD_VAR 0 5
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 4
37907: PUSH
37908: LD_INT 5
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: IN
37919: NOT
37920: OR
37921: PUSH
37922: LD_VAR 0 3
37926: PPUSH
37927: LD_VAR 0 4
37931: PPUSH
37932: CALL_OW 488
37936: NOT
37937: OR
37938: IFFALSE 37942
// exit ;
37940: GO 38678
// side := GetSide ( depot ) ;
37942: LD_ADDR_VAR 0 9
37946: PUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 255
37956: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37957: LD_VAR 0 9
37961: PPUSH
37962: LD_VAR 0 2
37966: PPUSH
37967: CALL 37451 0 2
37971: NOT
37972: IFFALSE 37976
// exit ;
37974: GO 38678
// pom := GetBase ( depot ) ;
37976: LD_ADDR_VAR 0 10
37980: PUSH
37981: LD_VAR 0 1
37985: PPUSH
37986: CALL_OW 274
37990: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37991: LD_ADDR_VAR 0 11
37995: PUSH
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL_OW 248
38010: PPUSH
38011: CALL_OW 450
38015: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38016: LD_VAR 0 10
38020: PPUSH
38021: LD_INT 1
38023: PPUSH
38024: CALL_OW 275
38028: PUSH
38029: LD_VAR 0 11
38033: PUSH
38034: LD_INT 1
38036: ARRAY
38037: GREATEREQUAL
38038: PUSH
38039: LD_VAR 0 10
38043: PPUSH
38044: LD_INT 2
38046: PPUSH
38047: CALL_OW 275
38051: PUSH
38052: LD_VAR 0 11
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: GREATEREQUAL
38061: AND
38062: PUSH
38063: LD_VAR 0 10
38067: PPUSH
38068: LD_INT 3
38070: PPUSH
38071: CALL_OW 275
38075: PUSH
38076: LD_VAR 0 11
38080: PUSH
38081: LD_INT 3
38083: ARRAY
38084: GREATEREQUAL
38085: AND
38086: NOT
38087: IFFALSE 38091
// exit ;
38089: GO 38678
// if GetBType ( depot ) = b_depot then
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL_OW 266
38100: PUSH
38101: LD_INT 0
38103: EQUAL
38104: IFFALSE 38116
// dist := 28 else
38106: LD_ADDR_VAR 0 14
38110: PUSH
38111: LD_INT 28
38113: ST_TO_ADDR
38114: GO 38124
// dist := 36 ;
38116: LD_ADDR_VAR 0 14
38120: PUSH
38121: LD_INT 36
38123: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38124: LD_VAR 0 1
38128: PPUSH
38129: LD_VAR 0 3
38133: PPUSH
38134: LD_VAR 0 4
38138: PPUSH
38139: CALL_OW 297
38143: PUSH
38144: LD_VAR 0 14
38148: GREATER
38149: IFFALSE 38153
// exit ;
38151: GO 38678
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38153: LD_ADDR_VAR 0 12
38157: PUSH
38158: LD_VAR 0 2
38162: PPUSH
38163: LD_VAR 0 3
38167: PPUSH
38168: LD_VAR 0 4
38172: PPUSH
38173: LD_VAR 0 5
38177: PPUSH
38178: LD_VAR 0 1
38182: PPUSH
38183: CALL_OW 248
38187: PPUSH
38188: LD_INT 0
38190: PPUSH
38191: CALL 38683 0 6
38195: ST_TO_ADDR
// if not hexes then
38196: LD_VAR 0 12
38200: NOT
38201: IFFALSE 38205
// exit ;
38203: GO 38678
// hex := GetHexInfo ( x , y ) ;
38205: LD_ADDR_VAR 0 15
38209: PUSH
38210: LD_VAR 0 3
38214: PPUSH
38215: LD_VAR 0 4
38219: PPUSH
38220: CALL_OW 546
38224: ST_TO_ADDR
// if hex [ 1 ] then
38225: LD_VAR 0 15
38229: PUSH
38230: LD_INT 1
38232: ARRAY
38233: IFFALSE 38237
// exit ;
38235: GO 38678
// height := hex [ 2 ] ;
38237: LD_ADDR_VAR 0 13
38241: PUSH
38242: LD_VAR 0 15
38246: PUSH
38247: LD_INT 2
38249: ARRAY
38250: ST_TO_ADDR
// for i = 1 to hexes do
38251: LD_ADDR_VAR 0 7
38255: PUSH
38256: DOUBLE
38257: LD_INT 1
38259: DEC
38260: ST_TO_ADDR
38261: LD_VAR 0 12
38265: PUSH
38266: FOR_TO
38267: IFFALSE 38597
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38269: LD_VAR 0 12
38273: PUSH
38274: LD_VAR 0 7
38278: ARRAY
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: PPUSH
38284: LD_VAR 0 12
38288: PUSH
38289: LD_VAR 0 7
38293: ARRAY
38294: PUSH
38295: LD_INT 2
38297: ARRAY
38298: PPUSH
38299: CALL_OW 488
38303: NOT
38304: PUSH
38305: LD_VAR 0 12
38309: PUSH
38310: LD_VAR 0 7
38314: ARRAY
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: PPUSH
38320: LD_VAR 0 12
38324: PUSH
38325: LD_VAR 0 7
38329: ARRAY
38330: PUSH
38331: LD_INT 2
38333: ARRAY
38334: PPUSH
38335: CALL_OW 428
38339: PUSH
38340: LD_INT 0
38342: GREATER
38343: OR
38344: PUSH
38345: LD_VAR 0 12
38349: PUSH
38350: LD_VAR 0 7
38354: ARRAY
38355: PUSH
38356: LD_INT 1
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 12
38364: PUSH
38365: LD_VAR 0 7
38369: ARRAY
38370: PUSH
38371: LD_INT 2
38373: ARRAY
38374: PPUSH
38375: CALL_OW 351
38379: OR
38380: IFFALSE 38386
// exit ;
38382: POP
38383: POP
38384: GO 38678
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38386: LD_ADDR_VAR 0 8
38390: PUSH
38391: LD_VAR 0 12
38395: PUSH
38396: LD_VAR 0 7
38400: ARRAY
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PPUSH
38406: LD_VAR 0 12
38410: PUSH
38411: LD_VAR 0 7
38415: ARRAY
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PPUSH
38421: CALL_OW 546
38425: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38426: LD_VAR 0 8
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PUSH
38435: LD_VAR 0 8
38439: PUSH
38440: LD_INT 2
38442: ARRAY
38443: PUSH
38444: LD_VAR 0 13
38448: PUSH
38449: LD_INT 2
38451: PLUS
38452: GREATER
38453: OR
38454: PUSH
38455: LD_VAR 0 8
38459: PUSH
38460: LD_INT 2
38462: ARRAY
38463: PUSH
38464: LD_VAR 0 13
38468: PUSH
38469: LD_INT 2
38471: MINUS
38472: LESS
38473: OR
38474: PUSH
38475: LD_VAR 0 8
38479: PUSH
38480: LD_INT 3
38482: ARRAY
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 8
38489: PUSH
38490: LD_INT 9
38492: PUSH
38493: LD_INT 10
38495: PUSH
38496: LD_INT 11
38498: PUSH
38499: LD_INT 12
38501: PUSH
38502: LD_INT 13
38504: PUSH
38505: LD_INT 16
38507: PUSH
38508: LD_INT 17
38510: PUSH
38511: LD_INT 18
38513: PUSH
38514: LD_INT 19
38516: PUSH
38517: LD_INT 20
38519: PUSH
38520: LD_INT 21
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: IN
38538: NOT
38539: OR
38540: PUSH
38541: LD_VAR 0 8
38545: PUSH
38546: LD_INT 5
38548: ARRAY
38549: NOT
38550: OR
38551: PUSH
38552: LD_VAR 0 8
38556: PUSH
38557: LD_INT 6
38559: ARRAY
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 7
38569: PUSH
38570: LD_INT 9
38572: PUSH
38573: LD_INT 10
38575: PUSH
38576: LD_INT 11
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: IN
38587: NOT
38588: OR
38589: IFFALSE 38595
// exit ;
38591: POP
38592: POP
38593: GO 38678
// end ;
38595: GO 38266
38597: POP
38598: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38599: LD_VAR 0 9
38603: PPUSH
38604: LD_VAR 0 3
38608: PPUSH
38609: LD_VAR 0 4
38613: PPUSH
38614: LD_INT 20
38616: PPUSH
38617: CALL 30624 0 4
38621: PUSH
38622: LD_INT 4
38624: ARRAY
38625: IFFALSE 38629
// exit ;
38627: GO 38678
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38629: LD_VAR 0 2
38633: PUSH
38634: LD_INT 29
38636: PUSH
38637: LD_INT 30
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: IN
38644: PUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: LD_VAR 0 4
38654: PPUSH
38655: LD_VAR 0 9
38659: PPUSH
38660: CALL_OW 440
38664: NOT
38665: AND
38666: IFFALSE 38670
// exit ;
38668: GO 38678
// result := true ;
38670: LD_ADDR_VAR 0 6
38674: PUSH
38675: LD_INT 1
38677: ST_TO_ADDR
// end ;
38678: LD_VAR 0 6
38682: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38683: LD_INT 0
38685: PPUSH
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
38707: PPUSH
38708: PPUSH
38709: PPUSH
38710: PPUSH
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
38733: PPUSH
38734: PPUSH
38735: PPUSH
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
// result = [ ] ;
38743: LD_ADDR_VAR 0 7
38747: PUSH
38748: EMPTY
38749: ST_TO_ADDR
// temp_list = [ ] ;
38750: LD_ADDR_VAR 0 9
38754: PUSH
38755: EMPTY
38756: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38757: LD_VAR 0 4
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: IN
38788: NOT
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: IN
38805: PUSH
38806: LD_VAR 0 5
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: IN
38825: NOT
38826: AND
38827: OR
38828: IFFALSE 38832
// exit ;
38830: GO 57223
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38832: LD_VAR 0 1
38836: PUSH
38837: LD_INT 6
38839: PUSH
38840: LD_INT 7
38842: PUSH
38843: LD_INT 8
38845: PUSH
38846: LD_INT 13
38848: PUSH
38849: LD_INT 12
38851: PUSH
38852: LD_INT 15
38854: PUSH
38855: LD_INT 11
38857: PUSH
38858: LD_INT 14
38860: PUSH
38861: LD_INT 10
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: IN
38875: IFFALSE 38885
// btype = b_lab ;
38877: LD_ADDR_VAR 0 1
38881: PUSH
38882: LD_INT 6
38884: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38885: LD_VAR 0 6
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: IN
38904: NOT
38905: PUSH
38906: LD_VAR 0 1
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: LD_INT 3
38922: PUSH
38923: LD_INT 6
38925: PUSH
38926: LD_INT 36
38928: PUSH
38929: LD_INT 4
38931: PUSH
38932: LD_INT 5
38934: PUSH
38935: LD_INT 31
38937: PUSH
38938: LD_INT 32
38940: PUSH
38941: LD_INT 33
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: IN
38957: NOT
38958: PUSH
38959: LD_VAR 0 6
38963: PUSH
38964: LD_INT 1
38966: EQUAL
38967: AND
38968: OR
38969: PUSH
38970: LD_VAR 0 1
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: IN
38985: NOT
38986: PUSH
38987: LD_VAR 0 6
38991: PUSH
38992: LD_INT 2
38994: EQUAL
38995: AND
38996: OR
38997: IFFALSE 39007
// mode = 0 ;
38999: LD_ADDR_VAR 0 6
39003: PUSH
39004: LD_INT 0
39006: ST_TO_ADDR
// case mode of 0 :
39007: LD_VAR 0 6
39011: PUSH
39012: LD_INT 0
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 50473
39020: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39021: LD_ADDR_VAR 0 11
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: LD_INT 3
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39214: LD_ADDR_VAR 0 12
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39410: LD_ADDR_VAR 0 13
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: NEG
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 3
39581: NEG
39582: PUSH
39583: LD_INT 3
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39609: LD_ADDR_VAR 0 14
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 3
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39805: LD_ADDR_VAR 0 15
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39998: LD_ADDR_VAR 0 16
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 3
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40191: LD_ADDR_VAR 0 17
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40421: LD_ADDR_VAR 0 18
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40651: LD_ADDR_VAR 0 19
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40881: LD_ADDR_VAR 0 20
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41111: LD_ADDR_VAR 0 21
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41341: LD_ADDR_VAR 0 22
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 2
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41571: LD_ADDR_VAR 0 23
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 3
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41851: LD_ADDR_VAR 0 24
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 2
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42127: LD_ADDR_VAR 0 25
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: NEG
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 3
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 3
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 3
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42401: LD_ADDR_VAR 0 26
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 2
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 3
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42677: LD_ADDR_VAR 0 27
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: NEG
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42957: LD_ADDR_VAR 0 28
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43239: LD_ADDR_VAR 0 29
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 3
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43518: LD_ADDR_VAR 0 30
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 3
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 3
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43796: LD_ADDR_VAR 0 31
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 1
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: NEG
43986: PUSH
43987: LD_INT 3
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 3
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44074: LD_ADDR_VAR 0 32
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44352: LD_ADDR_VAR 0 33
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 2
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 3
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44631: LD_ADDR_VAR 0 34
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 3
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 3
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44911: LD_ADDR_VAR 0 35
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45023: LD_ADDR_VAR 0 36
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45135: LD_ADDR_VAR 0 37
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45247: LD_ADDR_VAR 0 38
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45359: LD_ADDR_VAR 0 39
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45471: LD_ADDR_VAR 0 40
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45583: LD_ADDR_VAR 0 41
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 3
45857: NEG
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: NEG
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: NEG
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: NEG
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45933: LD_ADDR_VAR 0 42
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 2
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 3
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 3
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 3
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 3
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46283: LD_ADDR_VAR 0 43
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: NEG
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46631: LD_ADDR_VAR 0 44
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 3
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46981: LD_ADDR_VAR 0 45
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 3
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 3
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47331: LD_ADDR_VAR 0 46
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 3
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 3
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47679: LD_ADDR_VAR 0 47
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47830: LD_ADDR_VAR 0 48
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47977: LD_ADDR_VAR 0 49
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48121: LD_ADDR_VAR 0 50
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48265: LD_ADDR_VAR 0 51
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48412: LD_ADDR_VAR 0 52
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48563: LD_ADDR_VAR 0 53
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48793: LD_ADDR_VAR 0 54
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49023: LD_ADDR_VAR 0 55
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 2
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49253: LD_ADDR_VAR 0 56
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49483: LD_ADDR_VAR 0 57
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49713: LD_ADDR_VAR 0 58
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49943: LD_ADDR_VAR 0 59
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 0
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50031: LD_ADDR_VAR 0 60
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50119: LD_ADDR_VAR 0 61
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50207: LD_ADDR_VAR 0 62
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50295: LD_ADDR_VAR 0 63
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50383: LD_ADDR_VAR 0 64
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: ST_TO_ADDR
// end ; 1 :
50471: GO 56368
50473: LD_INT 1
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 53104
50481: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50482: LD_ADDR_VAR 0 11
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50526: LD_ADDR_VAR 0 12
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50567: LD_ADDR_VAR 0 13
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50607: LD_ADDR_VAR 0 14
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50648: LD_ADDR_VAR 0 15
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50692: LD_ADDR_VAR 0 16
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: LD_INT 3
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50738: LD_ADDR_VAR 0 17
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50782: LD_ADDR_VAR 0 18
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50823: LD_ADDR_VAR 0 19
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 3
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50863: LD_ADDR_VAR 0 20
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 21
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50948: LD_ADDR_VAR 0 22
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 3
50979: NEG
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50994: LD_ADDR_VAR 0 23
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 4
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51038: LD_ADDR_VAR 0 24
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 4
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51079: LD_ADDR_VAR 0 25
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51119: LD_ADDR_VAR 0 26
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 4
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51160: LD_ADDR_VAR 0 27
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51204: LD_ADDR_VAR 0 28
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: LD_INT 3
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: LD_INT 4
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: NEG
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51250: LD_ADDR_VAR 0 29
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 4
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 4
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 5
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 5
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 4
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 6
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 6
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 5
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51405: LD_ADDR_VAR 0 30
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 4
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 5
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 5
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 5
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 6
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 6
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51548: LD_ADDR_VAR 0 31
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 5
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 5
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 4
51635: PUSH
51636: LD_INT 5
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 6
51645: PUSH
51646: LD_INT 5
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 6
51655: PUSH
51656: LD_INT 6
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 5
51665: PUSH
51666: LD_INT 6
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51687: LD_ADDR_VAR 0 32
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 3
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 4
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 5
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 5
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 6
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 6
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: LD_INT 5
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51830: LD_ADDR_VAR 0 33
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 4
51882: NEG
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 4
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 5
51916: NEG
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 5
51927: NEG
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 5
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 6
51950: NEG
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 6
51961: NEG
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51985: LD_ADDR_VAR 0 34
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 3
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: NEG
52029: PUSH
52030: LD_INT 4
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 4
52040: NEG
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 4
52052: NEG
52053: PUSH
52054: LD_INT 4
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 4
52064: NEG
52065: PUSH
52066: LD_INT 5
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 5
52076: NEG
52077: PUSH
52078: LD_INT 4
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 5
52088: NEG
52089: PUSH
52090: LD_INT 5
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: LD_INT 6
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 6
52112: NEG
52113: PUSH
52114: LD_INT 5
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 6
52124: NEG
52125: PUSH
52126: LD_INT 6
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52148: LD_ADDR_VAR 0 41
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52192: LD_ADDR_VAR 0 42
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52233: LD_ADDR_VAR 0 43
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52273: LD_ADDR_VAR 0 44
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52314: LD_ADDR_VAR 0 45
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52358: LD_ADDR_VAR 0 46
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52404: LD_ADDR_VAR 0 47
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52437: LD_ADDR_VAR 0 48
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52468: LD_ADDR_VAR 0 49
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52497: LD_ADDR_VAR 0 50
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52526: LD_ADDR_VAR 0 51
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52557: LD_ADDR_VAR 0 52
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52590: LD_ADDR_VAR 0 53
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52634: LD_ADDR_VAR 0 54
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52675: LD_ADDR_VAR 0 55
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52715: LD_ADDR_VAR 0 56
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52756: LD_ADDR_VAR 0 57
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52800: LD_ADDR_VAR 0 58
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 3
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52846: LD_ADDR_VAR 0 59
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52890: LD_ADDR_VAR 0 60
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52931: LD_ADDR_VAR 0 61
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52971: LD_ADDR_VAR 0 62
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: LD_INT 2
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53012: LD_ADDR_VAR 0 63
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: NEG
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: NEG
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53056: LD_ADDR_VAR 0 64
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// end ; 2 :
53102: GO 56368
53104: LD_INT 2
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 56367
53112: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53113: LD_ADDR_VAR 0 29
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 5
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 5
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 4
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 5
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 4
53243: PUSH
53244: LD_INT 4
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: LD_INT 4
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 4
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 4
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 4
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: LD_INT 5
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 4
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: LD_INT 5
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 4
53452: NEG
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 4
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 4
53498: NEG
53499: PUSH
53500: LD_INT 4
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 4
53510: NEG
53511: PUSH
53512: LD_INT 5
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: LD_INT 4
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 4
53546: NEG
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 5
53558: NEG
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 5
53570: NEG
53571: PUSH
53572: LD_INT 5
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 3
53582: NEG
53583: PUSH
53584: LD_INT 5
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 5
53594: NEG
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53651: LD_ADDR_VAR 0 30
53655: PUSH
53656: LD_INT 4
53658: PUSH
53659: LD_INT 4
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 5
53688: PUSH
53689: LD_INT 5
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: LD_INT 4
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 5
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 5
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 4
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 4
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 4
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: NEG
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 5
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 5
53920: NEG
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: NEG
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 4
54003: NEG
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 4
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 4
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: LD_INT 4
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 5
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 4
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 5
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 2
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: LD_INT 5
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54198: LD_ADDR_VAR 0 31
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 4
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 5
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 4
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 5
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 3
54298: NEG
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: NEG
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: NEG
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 4
54400: NEG
54401: PUSH
54402: LD_INT 4
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 4
54412: NEG
54413: PUSH
54414: LD_INT 5
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: LD_INT 4
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: NEG
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 5
54460: NEG
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 5
54472: NEG
54473: PUSH
54474: LD_INT 5
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 5
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 5
54496: NEG
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 4
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 4
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 4
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 5
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 5
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 4
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54748: LD_ADDR_VAR 0 32
54752: PUSH
54753: LD_INT 4
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 4
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: LD_INT 1
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 4
54800: NEG
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 5
54811: NEG
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 5
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 5
54834: NEG
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 3
54857: NEG
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 4
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 4
54917: NEG
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 4
54929: NEG
54930: PUSH
54931: LD_INT 4
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 4
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 4
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 4
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 5
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: LD_INT 4
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 5
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 3
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 3
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 4
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 2
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 4
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 5
55180: PUSH
55181: LD_INT 4
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: PUSH
55191: LD_INT 5
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 4
55200: PUSH
55201: LD_INT 5
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 4
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 5
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: LD_INT 5
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55295: LD_ADDR_VAR 0 33
55299: PUSH
55300: LD_INT 4
55302: NEG
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 4
55314: NEG
55315: PUSH
55316: LD_INT 5
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 4
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: NEG
55351: PUSH
55352: LD_INT 3
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 5
55362: NEG
55363: PUSH
55364: LD_INT 4
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 5
55374: NEG
55375: PUSH
55376: LD_INT 5
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: NEG
55387: PUSH
55388: LD_INT 5
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 5
55398: NEG
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 4
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 4
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 4
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 4
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 5
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 5
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 4
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 4
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 4
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: LD_INT 4
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 4
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 4
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 4
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 5
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55833: LD_ADDR_VAR 0 34
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 4
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 5
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 4
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 4
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 5
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 5
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 4
56025: PUSH
56026: LD_INT 2
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: LD_INT 4
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: LD_INT 3
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 5
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: LD_INT 5
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: LD_INT 5
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: LD_INT 4
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: LD_INT 5
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 4
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 4
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 4
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 4
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 5
56274: NEG
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 5
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 5
56297: NEG
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// end ; end ;
56365: GO 56368
56367: POP
// case btype of b_depot , b_warehouse :
56368: LD_VAR 0 1
56372: PUSH
56373: LD_INT 0
56375: DOUBLE
56376: EQUAL
56377: IFTRUE 56387
56379: LD_INT 1
56381: DOUBLE
56382: EQUAL
56383: IFTRUE 56387
56385: GO 56588
56387: POP
// case nation of nation_american :
56388: LD_VAR 0 5
56392: PUSH
56393: LD_INT 1
56395: DOUBLE
56396: EQUAL
56397: IFTRUE 56401
56399: GO 56457
56401: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56402: LD_ADDR_VAR 0 9
56406: PUSH
56407: LD_VAR 0 11
56411: PUSH
56412: LD_VAR 0 12
56416: PUSH
56417: LD_VAR 0 13
56421: PUSH
56422: LD_VAR 0 14
56426: PUSH
56427: LD_VAR 0 15
56431: PUSH
56432: LD_VAR 0 16
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: PUSH
56445: LD_VAR 0 4
56449: PUSH
56450: LD_INT 1
56452: PLUS
56453: ARRAY
56454: ST_TO_ADDR
56455: GO 56586
56457: LD_INT 2
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56465
56463: GO 56521
56465: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56466: LD_ADDR_VAR 0 9
56470: PUSH
56471: LD_VAR 0 17
56475: PUSH
56476: LD_VAR 0 18
56480: PUSH
56481: LD_VAR 0 19
56485: PUSH
56486: LD_VAR 0 20
56490: PUSH
56491: LD_VAR 0 21
56495: PUSH
56496: LD_VAR 0 22
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: PUSH
56509: LD_VAR 0 4
56513: PUSH
56514: LD_INT 1
56516: PLUS
56517: ARRAY
56518: ST_TO_ADDR
56519: GO 56586
56521: LD_INT 3
56523: DOUBLE
56524: EQUAL
56525: IFTRUE 56529
56527: GO 56585
56529: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56530: LD_ADDR_VAR 0 9
56534: PUSH
56535: LD_VAR 0 23
56539: PUSH
56540: LD_VAR 0 24
56544: PUSH
56545: LD_VAR 0 25
56549: PUSH
56550: LD_VAR 0 26
56554: PUSH
56555: LD_VAR 0 27
56559: PUSH
56560: LD_VAR 0 28
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: PUSH
56573: LD_VAR 0 4
56577: PUSH
56578: LD_INT 1
56580: PLUS
56581: ARRAY
56582: ST_TO_ADDR
56583: GO 56586
56585: POP
56586: GO 57141
56588: LD_INT 2
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56602
56594: LD_INT 3
56596: DOUBLE
56597: EQUAL
56598: IFTRUE 56602
56600: GO 56658
56602: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56603: LD_ADDR_VAR 0 9
56607: PUSH
56608: LD_VAR 0 29
56612: PUSH
56613: LD_VAR 0 30
56617: PUSH
56618: LD_VAR 0 31
56622: PUSH
56623: LD_VAR 0 32
56627: PUSH
56628: LD_VAR 0 33
56632: PUSH
56633: LD_VAR 0 34
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: PUSH
56646: LD_VAR 0 4
56650: PUSH
56651: LD_INT 1
56653: PLUS
56654: ARRAY
56655: ST_TO_ADDR
56656: GO 57141
56658: LD_INT 16
56660: DOUBLE
56661: EQUAL
56662: IFTRUE 56720
56664: LD_INT 17
56666: DOUBLE
56667: EQUAL
56668: IFTRUE 56720
56670: LD_INT 18
56672: DOUBLE
56673: EQUAL
56674: IFTRUE 56720
56676: LD_INT 19
56678: DOUBLE
56679: EQUAL
56680: IFTRUE 56720
56682: LD_INT 22
56684: DOUBLE
56685: EQUAL
56686: IFTRUE 56720
56688: LD_INT 20
56690: DOUBLE
56691: EQUAL
56692: IFTRUE 56720
56694: LD_INT 21
56696: DOUBLE
56697: EQUAL
56698: IFTRUE 56720
56700: LD_INT 23
56702: DOUBLE
56703: EQUAL
56704: IFTRUE 56720
56706: LD_INT 24
56708: DOUBLE
56709: EQUAL
56710: IFTRUE 56720
56712: LD_INT 25
56714: DOUBLE
56715: EQUAL
56716: IFTRUE 56720
56718: GO 56776
56720: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56721: LD_ADDR_VAR 0 9
56725: PUSH
56726: LD_VAR 0 35
56730: PUSH
56731: LD_VAR 0 36
56735: PUSH
56736: LD_VAR 0 37
56740: PUSH
56741: LD_VAR 0 38
56745: PUSH
56746: LD_VAR 0 39
56750: PUSH
56751: LD_VAR 0 40
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: PUSH
56764: LD_VAR 0 4
56768: PUSH
56769: LD_INT 1
56771: PLUS
56772: ARRAY
56773: ST_TO_ADDR
56774: GO 57141
56776: LD_INT 6
56778: DOUBLE
56779: EQUAL
56780: IFTRUE 56832
56782: LD_INT 7
56784: DOUBLE
56785: EQUAL
56786: IFTRUE 56832
56788: LD_INT 8
56790: DOUBLE
56791: EQUAL
56792: IFTRUE 56832
56794: LD_INT 13
56796: DOUBLE
56797: EQUAL
56798: IFTRUE 56832
56800: LD_INT 12
56802: DOUBLE
56803: EQUAL
56804: IFTRUE 56832
56806: LD_INT 15
56808: DOUBLE
56809: EQUAL
56810: IFTRUE 56832
56812: LD_INT 11
56814: DOUBLE
56815: EQUAL
56816: IFTRUE 56832
56818: LD_INT 14
56820: DOUBLE
56821: EQUAL
56822: IFTRUE 56832
56824: LD_INT 10
56826: DOUBLE
56827: EQUAL
56828: IFTRUE 56832
56830: GO 56888
56832: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56833: LD_ADDR_VAR 0 9
56837: PUSH
56838: LD_VAR 0 41
56842: PUSH
56843: LD_VAR 0 42
56847: PUSH
56848: LD_VAR 0 43
56852: PUSH
56853: LD_VAR 0 44
56857: PUSH
56858: LD_VAR 0 45
56862: PUSH
56863: LD_VAR 0 46
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 4
56880: PUSH
56881: LD_INT 1
56883: PLUS
56884: ARRAY
56885: ST_TO_ADDR
56886: GO 57141
56888: LD_INT 36
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56896
56894: GO 56952
56896: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56897: LD_ADDR_VAR 0 9
56901: PUSH
56902: LD_VAR 0 47
56906: PUSH
56907: LD_VAR 0 48
56911: PUSH
56912: LD_VAR 0 49
56916: PUSH
56917: LD_VAR 0 50
56921: PUSH
56922: LD_VAR 0 51
56926: PUSH
56927: LD_VAR 0 52
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: PUSH
56940: LD_VAR 0 4
56944: PUSH
56945: LD_INT 1
56947: PLUS
56948: ARRAY
56949: ST_TO_ADDR
56950: GO 57141
56952: LD_INT 4
56954: DOUBLE
56955: EQUAL
56956: IFTRUE 56978
56958: LD_INT 5
56960: DOUBLE
56961: EQUAL
56962: IFTRUE 56978
56964: LD_INT 34
56966: DOUBLE
56967: EQUAL
56968: IFTRUE 56978
56970: LD_INT 37
56972: DOUBLE
56973: EQUAL
56974: IFTRUE 56978
56976: GO 57034
56978: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56979: LD_ADDR_VAR 0 9
56983: PUSH
56984: LD_VAR 0 53
56988: PUSH
56989: LD_VAR 0 54
56993: PUSH
56994: LD_VAR 0 55
56998: PUSH
56999: LD_VAR 0 56
57003: PUSH
57004: LD_VAR 0 57
57008: PUSH
57009: LD_VAR 0 58
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: PUSH
57022: LD_VAR 0 4
57026: PUSH
57027: LD_INT 1
57029: PLUS
57030: ARRAY
57031: ST_TO_ADDR
57032: GO 57141
57034: LD_INT 31
57036: DOUBLE
57037: EQUAL
57038: IFTRUE 57084
57040: LD_INT 32
57042: DOUBLE
57043: EQUAL
57044: IFTRUE 57084
57046: LD_INT 33
57048: DOUBLE
57049: EQUAL
57050: IFTRUE 57084
57052: LD_INT 27
57054: DOUBLE
57055: EQUAL
57056: IFTRUE 57084
57058: LD_INT 26
57060: DOUBLE
57061: EQUAL
57062: IFTRUE 57084
57064: LD_INT 28
57066: DOUBLE
57067: EQUAL
57068: IFTRUE 57084
57070: LD_INT 29
57072: DOUBLE
57073: EQUAL
57074: IFTRUE 57084
57076: LD_INT 30
57078: DOUBLE
57079: EQUAL
57080: IFTRUE 57084
57082: GO 57140
57084: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57085: LD_ADDR_VAR 0 9
57089: PUSH
57090: LD_VAR 0 59
57094: PUSH
57095: LD_VAR 0 60
57099: PUSH
57100: LD_VAR 0 61
57104: PUSH
57105: LD_VAR 0 62
57109: PUSH
57110: LD_VAR 0 63
57114: PUSH
57115: LD_VAR 0 64
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: PUSH
57128: LD_VAR 0 4
57132: PUSH
57133: LD_INT 1
57135: PLUS
57136: ARRAY
57137: ST_TO_ADDR
57138: GO 57141
57140: POP
// temp_list2 = [ ] ;
57141: LD_ADDR_VAR 0 10
57145: PUSH
57146: EMPTY
57147: ST_TO_ADDR
// for i in temp_list do
57148: LD_ADDR_VAR 0 8
57152: PUSH
57153: LD_VAR 0 9
57157: PUSH
57158: FOR_IN
57159: IFFALSE 57211
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57161: LD_ADDR_VAR 0 10
57165: PUSH
57166: LD_VAR 0 10
57170: PUSH
57171: LD_VAR 0 8
57175: PUSH
57176: LD_INT 1
57178: ARRAY
57179: PUSH
57180: LD_VAR 0 2
57184: PLUS
57185: PUSH
57186: LD_VAR 0 8
57190: PUSH
57191: LD_INT 2
57193: ARRAY
57194: PUSH
57195: LD_VAR 0 3
57199: PLUS
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: ADD
57208: ST_TO_ADDR
57209: GO 57158
57211: POP
57212: POP
// result = temp_list2 ;
57213: LD_ADDR_VAR 0 7
57217: PUSH
57218: LD_VAR 0 10
57222: ST_TO_ADDR
// end ;
57223: LD_VAR 0 7
57227: RET
// export function EnemyInRange ( unit , dist ) ; begin
57228: LD_INT 0
57230: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57231: LD_ADDR_VAR 0 3
57235: PUSH
57236: LD_VAR 0 1
57240: PPUSH
57241: CALL_OW 255
57245: PPUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 250
57255: PPUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 251
57265: PPUSH
57266: LD_VAR 0 2
57270: PPUSH
57271: CALL 30624 0 4
57275: PUSH
57276: LD_INT 4
57278: ARRAY
57279: ST_TO_ADDR
// end ;
57280: LD_VAR 0 3
57284: RET
// export function PlayerSeeMe ( unit ) ; begin
57285: LD_INT 0
57287: PPUSH
// result := See ( your_side , unit ) ;
57288: LD_ADDR_VAR 0 2
57292: PUSH
57293: LD_OWVAR 2
57297: PPUSH
57298: LD_VAR 0 1
57302: PPUSH
57303: CALL_OW 292
57307: ST_TO_ADDR
// end ;
57308: LD_VAR 0 2
57312: RET
// export function ReverseDir ( unit ) ; begin
57313: LD_INT 0
57315: PPUSH
// if not unit then
57316: LD_VAR 0 1
57320: NOT
57321: IFFALSE 57325
// exit ;
57323: GO 57348
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57325: LD_ADDR_VAR 0 2
57329: PUSH
57330: LD_VAR 0 1
57334: PPUSH
57335: CALL_OW 254
57339: PUSH
57340: LD_INT 3
57342: PLUS
57343: PUSH
57344: LD_INT 6
57346: MOD
57347: ST_TO_ADDR
// end ;
57348: LD_VAR 0 2
57352: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57353: LD_INT 0
57355: PPUSH
57356: PPUSH
57357: PPUSH
57358: PPUSH
57359: PPUSH
// if not hexes then
57360: LD_VAR 0 2
57364: NOT
57365: IFFALSE 57369
// exit ;
57367: GO 57517
// dist := 9999 ;
57369: LD_ADDR_VAR 0 5
57373: PUSH
57374: LD_INT 9999
57376: ST_TO_ADDR
// for i = 1 to hexes do
57377: LD_ADDR_VAR 0 4
57381: PUSH
57382: DOUBLE
57383: LD_INT 1
57385: DEC
57386: ST_TO_ADDR
57387: LD_VAR 0 2
57391: PUSH
57392: FOR_TO
57393: IFFALSE 57505
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57395: LD_VAR 0 1
57399: PPUSH
57400: LD_VAR 0 2
57404: PUSH
57405: LD_VAR 0 4
57409: ARRAY
57410: PUSH
57411: LD_INT 1
57413: ARRAY
57414: PPUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_VAR 0 4
57424: ARRAY
57425: PUSH
57426: LD_INT 2
57428: ARRAY
57429: PPUSH
57430: CALL_OW 297
57434: PUSH
57435: LD_VAR 0 5
57439: LESS
57440: IFFALSE 57503
// begin hex := hexes [ i ] ;
57442: LD_ADDR_VAR 0 7
57446: PUSH
57447: LD_VAR 0 2
57451: PUSH
57452: LD_VAR 0 4
57456: ARRAY
57457: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57458: LD_ADDR_VAR 0 5
57462: PUSH
57463: LD_VAR 0 1
57467: PPUSH
57468: LD_VAR 0 2
57472: PUSH
57473: LD_VAR 0 4
57477: ARRAY
57478: PUSH
57479: LD_INT 1
57481: ARRAY
57482: PPUSH
57483: LD_VAR 0 2
57487: PUSH
57488: LD_VAR 0 4
57492: ARRAY
57493: PUSH
57494: LD_INT 2
57496: ARRAY
57497: PPUSH
57498: CALL_OW 297
57502: ST_TO_ADDR
// end ; end ;
57503: GO 57392
57505: POP
57506: POP
// result := hex ;
57507: LD_ADDR_VAR 0 3
57511: PUSH
57512: LD_VAR 0 7
57516: ST_TO_ADDR
// end ;
57517: LD_VAR 0 3
57521: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57522: LD_INT 0
57524: PPUSH
57525: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57526: LD_VAR 0 1
57530: NOT
57531: PUSH
57532: LD_VAR 0 1
57536: PUSH
57537: LD_INT 21
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 23
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PPUSH
57561: CALL_OW 69
57565: IN
57566: NOT
57567: OR
57568: IFFALSE 57572
// exit ;
57570: GO 57619
// for i = 1 to 3 do
57572: LD_ADDR_VAR 0 3
57576: PUSH
57577: DOUBLE
57578: LD_INT 1
57580: DEC
57581: ST_TO_ADDR
57582: LD_INT 3
57584: PUSH
57585: FOR_TO
57586: IFFALSE 57617
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: CALL_OW 250
57597: PPUSH
57598: LD_VAR 0 1
57602: PPUSH
57603: CALL_OW 251
57607: PPUSH
57608: LD_INT 1
57610: PPUSH
57611: CALL_OW 453
57615: GO 57585
57617: POP
57618: POP
// end ;
57619: LD_VAR 0 2
57623: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57624: LD_INT 0
57626: PPUSH
57627: PPUSH
57628: PPUSH
57629: PPUSH
57630: PPUSH
57631: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57632: LD_VAR 0 1
57636: NOT
57637: PUSH
57638: LD_VAR 0 2
57642: NOT
57643: OR
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: CALL_OW 314
57654: OR
57655: IFFALSE 57659
// exit ;
57657: GO 58100
// x := GetX ( enemy_unit ) ;
57659: LD_ADDR_VAR 0 7
57663: PUSH
57664: LD_VAR 0 2
57668: PPUSH
57669: CALL_OW 250
57673: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57674: LD_ADDR_VAR 0 8
57678: PUSH
57679: LD_VAR 0 2
57683: PPUSH
57684: CALL_OW 251
57688: ST_TO_ADDR
// if not x or not y then
57689: LD_VAR 0 7
57693: NOT
57694: PUSH
57695: LD_VAR 0 8
57699: NOT
57700: OR
57701: IFFALSE 57705
// exit ;
57703: GO 58100
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57705: LD_ADDR_VAR 0 6
57709: PUSH
57710: LD_VAR 0 7
57714: PPUSH
57715: LD_INT 0
57717: PPUSH
57718: LD_INT 4
57720: PPUSH
57721: CALL_OW 272
57725: PUSH
57726: LD_VAR 0 8
57730: PPUSH
57731: LD_INT 0
57733: PPUSH
57734: LD_INT 4
57736: PPUSH
57737: CALL_OW 273
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_VAR 0 7
57750: PPUSH
57751: LD_INT 1
57753: PPUSH
57754: LD_INT 4
57756: PPUSH
57757: CALL_OW 272
57761: PUSH
57762: LD_VAR 0 8
57766: PPUSH
57767: LD_INT 1
57769: PPUSH
57770: LD_INT 4
57772: PPUSH
57773: CALL_OW 273
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_VAR 0 7
57786: PPUSH
57787: LD_INT 2
57789: PPUSH
57790: LD_INT 4
57792: PPUSH
57793: CALL_OW 272
57797: PUSH
57798: LD_VAR 0 8
57802: PPUSH
57803: LD_INT 2
57805: PPUSH
57806: LD_INT 4
57808: PPUSH
57809: CALL_OW 273
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_VAR 0 7
57822: PPUSH
57823: LD_INT 3
57825: PPUSH
57826: LD_INT 4
57828: PPUSH
57829: CALL_OW 272
57833: PUSH
57834: LD_VAR 0 8
57838: PPUSH
57839: LD_INT 3
57841: PPUSH
57842: LD_INT 4
57844: PPUSH
57845: CALL_OW 273
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_VAR 0 7
57858: PPUSH
57859: LD_INT 4
57861: PPUSH
57862: LD_INT 4
57864: PPUSH
57865: CALL_OW 272
57869: PUSH
57870: LD_VAR 0 8
57874: PPUSH
57875: LD_INT 4
57877: PPUSH
57878: LD_INT 4
57880: PPUSH
57881: CALL_OW 273
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_VAR 0 7
57894: PPUSH
57895: LD_INT 5
57897: PPUSH
57898: LD_INT 4
57900: PPUSH
57901: CALL_OW 272
57905: PUSH
57906: LD_VAR 0 8
57910: PPUSH
57911: LD_INT 5
57913: PPUSH
57914: LD_INT 4
57916: PPUSH
57917: CALL_OW 273
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// for i = tmp downto 1 do
57934: LD_ADDR_VAR 0 4
57938: PUSH
57939: DOUBLE
57940: LD_VAR 0 6
57944: INC
57945: ST_TO_ADDR
57946: LD_INT 1
57948: PUSH
57949: FOR_DOWNTO
57950: IFFALSE 58051
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57952: LD_VAR 0 6
57956: PUSH
57957: LD_VAR 0 4
57961: ARRAY
57962: PUSH
57963: LD_INT 1
57965: ARRAY
57966: PPUSH
57967: LD_VAR 0 6
57971: PUSH
57972: LD_VAR 0 4
57976: ARRAY
57977: PUSH
57978: LD_INT 2
57980: ARRAY
57981: PPUSH
57982: CALL_OW 488
57986: NOT
57987: PUSH
57988: LD_VAR 0 6
57992: PUSH
57993: LD_VAR 0 4
57997: ARRAY
57998: PUSH
57999: LD_INT 1
58001: ARRAY
58002: PPUSH
58003: LD_VAR 0 6
58007: PUSH
58008: LD_VAR 0 4
58012: ARRAY
58013: PUSH
58014: LD_INT 2
58016: ARRAY
58017: PPUSH
58018: CALL_OW 428
58022: PUSH
58023: LD_INT 0
58025: NONEQUAL
58026: OR
58027: IFFALSE 58049
// tmp := Delete ( tmp , i ) ;
58029: LD_ADDR_VAR 0 6
58033: PUSH
58034: LD_VAR 0 6
58038: PPUSH
58039: LD_VAR 0 4
58043: PPUSH
58044: CALL_OW 3
58048: ST_TO_ADDR
58049: GO 57949
58051: POP
58052: POP
// j := GetClosestHex ( unit , tmp ) ;
58053: LD_ADDR_VAR 0 5
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: LD_VAR 0 6
58067: PPUSH
58068: CALL 57353 0 2
58072: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58073: LD_VAR 0 1
58077: PPUSH
58078: LD_VAR 0 5
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: PPUSH
58087: LD_VAR 0 5
58091: PUSH
58092: LD_INT 2
58094: ARRAY
58095: PPUSH
58096: CALL_OW 111
// end ;
58100: LD_VAR 0 3
58104: RET
// export function PrepareApemanSoldier ( ) ; begin
58105: LD_INT 0
58107: PPUSH
// uc_nation := 0 ;
58108: LD_ADDR_OWVAR 21
58112: PUSH
58113: LD_INT 0
58115: ST_TO_ADDR
// hc_sex := sex_male ;
58116: LD_ADDR_OWVAR 27
58120: PUSH
58121: LD_INT 1
58123: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58124: LD_ADDR_OWVAR 28
58128: PUSH
58129: LD_INT 15
58131: ST_TO_ADDR
// hc_gallery :=  ;
58132: LD_ADDR_OWVAR 33
58136: PUSH
58137: LD_STRING 
58139: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58140: LD_ADDR_OWVAR 31
58144: PUSH
58145: LD_INT 0
58147: PPUSH
58148: LD_INT 3
58150: PPUSH
58151: CALL_OW 12
58155: PUSH
58156: LD_INT 0
58158: PPUSH
58159: LD_INT 3
58161: PPUSH
58162: CALL_OW 12
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: ST_TO_ADDR
// end ;
58179: LD_VAR 0 1
58183: RET
// export function PrepareApemanEngineer ( ) ; begin
58184: LD_INT 0
58186: PPUSH
// uc_nation := 0 ;
58187: LD_ADDR_OWVAR 21
58191: PUSH
58192: LD_INT 0
58194: ST_TO_ADDR
// hc_sex := sex_male ;
58195: LD_ADDR_OWVAR 27
58199: PUSH
58200: LD_INT 1
58202: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58203: LD_ADDR_OWVAR 28
58207: PUSH
58208: LD_INT 16
58210: ST_TO_ADDR
// hc_gallery :=  ;
58211: LD_ADDR_OWVAR 33
58215: PUSH
58216: LD_STRING 
58218: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58219: LD_ADDR_OWVAR 31
58223: PUSH
58224: LD_INT 0
58226: PPUSH
58227: LD_INT 3
58229: PPUSH
58230: CALL_OW 12
58234: PUSH
58235: LD_INT 0
58237: PPUSH
58238: LD_INT 3
58240: PPUSH
58241: CALL_OW 12
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: ST_TO_ADDR
// end ;
58258: LD_VAR 0 1
58262: RET
// export function PrepareApeman ( agressivity ) ; begin
58263: LD_INT 0
58265: PPUSH
// uc_side := 0 ;
58266: LD_ADDR_OWVAR 20
58270: PUSH
58271: LD_INT 0
58273: ST_TO_ADDR
// uc_nation := 0 ;
58274: LD_ADDR_OWVAR 21
58278: PUSH
58279: LD_INT 0
58281: ST_TO_ADDR
// hc_sex := sex_male ;
58282: LD_ADDR_OWVAR 27
58286: PUSH
58287: LD_INT 1
58289: ST_TO_ADDR
// hc_class := class_apeman ;
58290: LD_ADDR_OWVAR 28
58294: PUSH
58295: LD_INT 12
58297: ST_TO_ADDR
// hc_gallery :=  ;
58298: LD_ADDR_OWVAR 33
58302: PUSH
58303: LD_STRING 
58305: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58306: LD_ADDR_OWVAR 35
58310: PUSH
58311: LD_VAR 0 1
58315: NEG
58316: PPUSH
58317: LD_VAR 0 1
58321: PPUSH
58322: CALL_OW 12
58326: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58327: LD_ADDR_OWVAR 31
58331: PUSH
58332: LD_INT 0
58334: PPUSH
58335: LD_INT 3
58337: PPUSH
58338: CALL_OW 12
58342: PUSH
58343: LD_INT 0
58345: PPUSH
58346: LD_INT 3
58348: PPUSH
58349: CALL_OW 12
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// end ;
58366: LD_VAR 0 2
58370: RET
// export function PrepareTiger ( agressivity ) ; begin
58371: LD_INT 0
58373: PPUSH
// uc_side := 0 ;
58374: LD_ADDR_OWVAR 20
58378: PUSH
58379: LD_INT 0
58381: ST_TO_ADDR
// uc_nation := 0 ;
58382: LD_ADDR_OWVAR 21
58386: PUSH
58387: LD_INT 0
58389: ST_TO_ADDR
// hc_class := class_tiger ;
58390: LD_ADDR_OWVAR 28
58394: PUSH
58395: LD_INT 14
58397: ST_TO_ADDR
// hc_gallery :=  ;
58398: LD_ADDR_OWVAR 33
58402: PUSH
58403: LD_STRING 
58405: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58406: LD_ADDR_OWVAR 35
58410: PUSH
58411: LD_VAR 0 1
58415: NEG
58416: PPUSH
58417: LD_VAR 0 1
58421: PPUSH
58422: CALL_OW 12
58426: ST_TO_ADDR
// end ;
58427: LD_VAR 0 2
58431: RET
// export function PrepareEnchidna ( ) ; begin
58432: LD_INT 0
58434: PPUSH
// uc_side := 0 ;
58435: LD_ADDR_OWVAR 20
58439: PUSH
58440: LD_INT 0
58442: ST_TO_ADDR
// uc_nation := 0 ;
58443: LD_ADDR_OWVAR 21
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// hc_class := class_baggie ;
58451: LD_ADDR_OWVAR 28
58455: PUSH
58456: LD_INT 13
58458: ST_TO_ADDR
// hc_gallery :=  ;
58459: LD_ADDR_OWVAR 33
58463: PUSH
58464: LD_STRING 
58466: ST_TO_ADDR
// end ;
58467: LD_VAR 0 1
58471: RET
// export function PrepareFrog ( ) ; begin
58472: LD_INT 0
58474: PPUSH
// uc_side := 0 ;
58475: LD_ADDR_OWVAR 20
58479: PUSH
58480: LD_INT 0
58482: ST_TO_ADDR
// uc_nation := 0 ;
58483: LD_ADDR_OWVAR 21
58487: PUSH
58488: LD_INT 0
58490: ST_TO_ADDR
// hc_class := class_frog ;
58491: LD_ADDR_OWVAR 28
58495: PUSH
58496: LD_INT 19
58498: ST_TO_ADDR
// hc_gallery :=  ;
58499: LD_ADDR_OWVAR 33
58503: PUSH
58504: LD_STRING 
58506: ST_TO_ADDR
// end ;
58507: LD_VAR 0 1
58511: RET
// export function PrepareFish ( ) ; begin
58512: LD_INT 0
58514: PPUSH
// uc_side := 0 ;
58515: LD_ADDR_OWVAR 20
58519: PUSH
58520: LD_INT 0
58522: ST_TO_ADDR
// uc_nation := 0 ;
58523: LD_ADDR_OWVAR 21
58527: PUSH
58528: LD_INT 0
58530: ST_TO_ADDR
// hc_class := class_fish ;
58531: LD_ADDR_OWVAR 28
58535: PUSH
58536: LD_INT 20
58538: ST_TO_ADDR
// hc_gallery :=  ;
58539: LD_ADDR_OWVAR 33
58543: PUSH
58544: LD_STRING 
58546: ST_TO_ADDR
// end ;
58547: LD_VAR 0 1
58551: RET
// export function PrepareBird ( ) ; begin
58552: LD_INT 0
58554: PPUSH
// uc_side := 0 ;
58555: LD_ADDR_OWVAR 20
58559: PUSH
58560: LD_INT 0
58562: ST_TO_ADDR
// uc_nation := 0 ;
58563: LD_ADDR_OWVAR 21
58567: PUSH
58568: LD_INT 0
58570: ST_TO_ADDR
// hc_class := class_phororhacos ;
58571: LD_ADDR_OWVAR 28
58575: PUSH
58576: LD_INT 18
58578: ST_TO_ADDR
// hc_gallery :=  ;
58579: LD_ADDR_OWVAR 33
58583: PUSH
58584: LD_STRING 
58586: ST_TO_ADDR
// end ;
58587: LD_VAR 0 1
58591: RET
// export function PrepareHorse ( ) ; begin
58592: LD_INT 0
58594: PPUSH
// uc_side := 0 ;
58595: LD_ADDR_OWVAR 20
58599: PUSH
58600: LD_INT 0
58602: ST_TO_ADDR
// uc_nation := 0 ;
58603: LD_ADDR_OWVAR 21
58607: PUSH
58608: LD_INT 0
58610: ST_TO_ADDR
// hc_class := class_horse ;
58611: LD_ADDR_OWVAR 28
58615: PUSH
58616: LD_INT 21
58618: ST_TO_ADDR
// hc_gallery :=  ;
58619: LD_ADDR_OWVAR 33
58623: PUSH
58624: LD_STRING 
58626: ST_TO_ADDR
// end ;
58627: LD_VAR 0 1
58631: RET
// export function PrepareMastodont ( ) ; begin
58632: LD_INT 0
58634: PPUSH
// uc_side := 0 ;
58635: LD_ADDR_OWVAR 20
58639: PUSH
58640: LD_INT 0
58642: ST_TO_ADDR
// uc_nation := 0 ;
58643: LD_ADDR_OWVAR 21
58647: PUSH
58648: LD_INT 0
58650: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58651: LD_ADDR_OWVAR 37
58655: PUSH
58656: LD_INT 31
58658: ST_TO_ADDR
// vc_control := control_rider ;
58659: LD_ADDR_OWVAR 38
58663: PUSH
58664: LD_INT 4
58666: ST_TO_ADDR
// end ;
58667: LD_VAR 0 1
58671: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58672: LD_INT 0
58674: PPUSH
58675: PPUSH
58676: PPUSH
// uc_side = 0 ;
58677: LD_ADDR_OWVAR 20
58681: PUSH
58682: LD_INT 0
58684: ST_TO_ADDR
// uc_nation = 0 ;
58685: LD_ADDR_OWVAR 21
58689: PUSH
58690: LD_INT 0
58692: ST_TO_ADDR
// InitHc_All ( ) ;
58693: CALL_OW 584
// InitVc ;
58697: CALL_OW 20
// if mastodonts then
58701: LD_VAR 0 6
58705: IFFALSE 58772
// for i = 1 to mastodonts do
58707: LD_ADDR_VAR 0 11
58711: PUSH
58712: DOUBLE
58713: LD_INT 1
58715: DEC
58716: ST_TO_ADDR
58717: LD_VAR 0 6
58721: PUSH
58722: FOR_TO
58723: IFFALSE 58770
// begin vc_chassis := 31 ;
58725: LD_ADDR_OWVAR 37
58729: PUSH
58730: LD_INT 31
58732: ST_TO_ADDR
// vc_control := control_rider ;
58733: LD_ADDR_OWVAR 38
58737: PUSH
58738: LD_INT 4
58740: ST_TO_ADDR
// animal := CreateVehicle ;
58741: LD_ADDR_VAR 0 12
58745: PUSH
58746: CALL_OW 45
58750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58751: LD_VAR 0 12
58755: PPUSH
58756: LD_VAR 0 8
58760: PPUSH
58761: LD_INT 0
58763: PPUSH
58764: CALL 60907 0 3
// end ;
58768: GO 58722
58770: POP
58771: POP
// if horses then
58772: LD_VAR 0 5
58776: IFFALSE 58843
// for i = 1 to horses do
58778: LD_ADDR_VAR 0 11
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_VAR 0 5
58792: PUSH
58793: FOR_TO
58794: IFFALSE 58841
// begin hc_class := 21 ;
58796: LD_ADDR_OWVAR 28
58800: PUSH
58801: LD_INT 21
58803: ST_TO_ADDR
// hc_gallery :=  ;
58804: LD_ADDR_OWVAR 33
58808: PUSH
58809: LD_STRING 
58811: ST_TO_ADDR
// animal := CreateHuman ;
58812: LD_ADDR_VAR 0 12
58816: PUSH
58817: CALL_OW 44
58821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58822: LD_VAR 0 12
58826: PPUSH
58827: LD_VAR 0 8
58831: PPUSH
58832: LD_INT 0
58834: PPUSH
58835: CALL 60907 0 3
// end ;
58839: GO 58793
58841: POP
58842: POP
// if birds then
58843: LD_VAR 0 1
58847: IFFALSE 58914
// for i = 1 to birds do
58849: LD_ADDR_VAR 0 11
58853: PUSH
58854: DOUBLE
58855: LD_INT 1
58857: DEC
58858: ST_TO_ADDR
58859: LD_VAR 0 1
58863: PUSH
58864: FOR_TO
58865: IFFALSE 58912
// begin hc_class = 18 ;
58867: LD_ADDR_OWVAR 28
58871: PUSH
58872: LD_INT 18
58874: ST_TO_ADDR
// hc_gallery =  ;
58875: LD_ADDR_OWVAR 33
58879: PUSH
58880: LD_STRING 
58882: ST_TO_ADDR
// animal := CreateHuman ;
58883: LD_ADDR_VAR 0 12
58887: PUSH
58888: CALL_OW 44
58892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58893: LD_VAR 0 12
58897: PPUSH
58898: LD_VAR 0 8
58902: PPUSH
58903: LD_INT 0
58905: PPUSH
58906: CALL 60907 0 3
// end ;
58910: GO 58864
58912: POP
58913: POP
// if tigers then
58914: LD_VAR 0 2
58918: IFFALSE 59002
// for i = 1 to tigers do
58920: LD_ADDR_VAR 0 11
58924: PUSH
58925: DOUBLE
58926: LD_INT 1
58928: DEC
58929: ST_TO_ADDR
58930: LD_VAR 0 2
58934: PUSH
58935: FOR_TO
58936: IFFALSE 59000
// begin hc_class = class_tiger ;
58938: LD_ADDR_OWVAR 28
58942: PUSH
58943: LD_INT 14
58945: ST_TO_ADDR
// hc_gallery =  ;
58946: LD_ADDR_OWVAR 33
58950: PUSH
58951: LD_STRING 
58953: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58954: LD_ADDR_OWVAR 35
58958: PUSH
58959: LD_INT 7
58961: NEG
58962: PPUSH
58963: LD_INT 7
58965: PPUSH
58966: CALL_OW 12
58970: ST_TO_ADDR
// animal := CreateHuman ;
58971: LD_ADDR_VAR 0 12
58975: PUSH
58976: CALL_OW 44
58980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58981: LD_VAR 0 12
58985: PPUSH
58986: LD_VAR 0 8
58990: PPUSH
58991: LD_INT 0
58993: PPUSH
58994: CALL 60907 0 3
// end ;
58998: GO 58935
59000: POP
59001: POP
// if apemans then
59002: LD_VAR 0 3
59006: IFFALSE 59129
// for i = 1 to apemans do
59008: LD_ADDR_VAR 0 11
59012: PUSH
59013: DOUBLE
59014: LD_INT 1
59016: DEC
59017: ST_TO_ADDR
59018: LD_VAR 0 3
59022: PUSH
59023: FOR_TO
59024: IFFALSE 59127
// begin hc_class = class_apeman ;
59026: LD_ADDR_OWVAR 28
59030: PUSH
59031: LD_INT 12
59033: ST_TO_ADDR
// hc_gallery =  ;
59034: LD_ADDR_OWVAR 33
59038: PUSH
59039: LD_STRING 
59041: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59042: LD_ADDR_OWVAR 35
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PPUSH
59051: LD_INT 2
59053: PPUSH
59054: CALL_OW 12
59058: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59059: LD_ADDR_OWVAR 31
59063: PUSH
59064: LD_INT 1
59066: PPUSH
59067: LD_INT 3
59069: PPUSH
59070: CALL_OW 12
59074: PUSH
59075: LD_INT 1
59077: PPUSH
59078: LD_INT 3
59080: PPUSH
59081: CALL_OW 12
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// animal := CreateHuman ;
59098: LD_ADDR_VAR 0 12
59102: PUSH
59103: CALL_OW 44
59107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59108: LD_VAR 0 12
59112: PPUSH
59113: LD_VAR 0 8
59117: PPUSH
59118: LD_INT 0
59120: PPUSH
59121: CALL 60907 0 3
// end ;
59125: GO 59023
59127: POP
59128: POP
// if enchidnas then
59129: LD_VAR 0 4
59133: IFFALSE 59200
// for i = 1 to enchidnas do
59135: LD_ADDR_VAR 0 11
59139: PUSH
59140: DOUBLE
59141: LD_INT 1
59143: DEC
59144: ST_TO_ADDR
59145: LD_VAR 0 4
59149: PUSH
59150: FOR_TO
59151: IFFALSE 59198
// begin hc_class = 13 ;
59153: LD_ADDR_OWVAR 28
59157: PUSH
59158: LD_INT 13
59160: ST_TO_ADDR
// hc_gallery =  ;
59161: LD_ADDR_OWVAR 33
59165: PUSH
59166: LD_STRING 
59168: ST_TO_ADDR
// animal := CreateHuman ;
59169: LD_ADDR_VAR 0 12
59173: PUSH
59174: CALL_OW 44
59178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59179: LD_VAR 0 12
59183: PPUSH
59184: LD_VAR 0 8
59188: PPUSH
59189: LD_INT 0
59191: PPUSH
59192: CALL 60907 0 3
// end ;
59196: GO 59150
59198: POP
59199: POP
// if fishes then
59200: LD_VAR 0 7
59204: IFFALSE 59271
// for i = 1 to fishes do
59206: LD_ADDR_VAR 0 11
59210: PUSH
59211: DOUBLE
59212: LD_INT 1
59214: DEC
59215: ST_TO_ADDR
59216: LD_VAR 0 7
59220: PUSH
59221: FOR_TO
59222: IFFALSE 59269
// begin hc_class = 20 ;
59224: LD_ADDR_OWVAR 28
59228: PUSH
59229: LD_INT 20
59231: ST_TO_ADDR
// hc_gallery =  ;
59232: LD_ADDR_OWVAR 33
59236: PUSH
59237: LD_STRING 
59239: ST_TO_ADDR
// animal := CreateHuman ;
59240: LD_ADDR_VAR 0 12
59244: PUSH
59245: CALL_OW 44
59249: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59250: LD_VAR 0 12
59254: PPUSH
59255: LD_VAR 0 9
59259: PPUSH
59260: LD_INT 0
59262: PPUSH
59263: CALL 60907 0 3
// end ;
59267: GO 59221
59269: POP
59270: POP
// end ;
59271: LD_VAR 0 10
59275: RET
// export function WantHeal ( sci , unit ) ; begin
59276: LD_INT 0
59278: PPUSH
// if GetTaskList ( sci ) > 0 then
59279: LD_VAR 0 1
59283: PPUSH
59284: CALL_OW 437
59288: PUSH
59289: LD_INT 0
59291: GREATER
59292: IFFALSE 59362
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59294: LD_VAR 0 1
59298: PPUSH
59299: CALL_OW 437
59303: PUSH
59304: LD_INT 1
59306: ARRAY
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_STRING l
59314: EQUAL
59315: PUSH
59316: LD_VAR 0 1
59320: PPUSH
59321: CALL_OW 437
59325: PUSH
59326: LD_INT 1
59328: ARRAY
59329: PUSH
59330: LD_INT 4
59332: ARRAY
59333: PUSH
59334: LD_VAR 0 2
59338: EQUAL
59339: AND
59340: IFFALSE 59352
// result := true else
59342: LD_ADDR_VAR 0 3
59346: PUSH
59347: LD_INT 1
59349: ST_TO_ADDR
59350: GO 59360
// result := false ;
59352: LD_ADDR_VAR 0 3
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// end else
59360: GO 59370
// result := false ;
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: LD_INT 0
59369: ST_TO_ADDR
// end ;
59370: LD_VAR 0 3
59374: RET
// export function HealTarget ( sci ) ; begin
59375: LD_INT 0
59377: PPUSH
// if not sci then
59378: LD_VAR 0 1
59382: NOT
59383: IFFALSE 59387
// exit ;
59385: GO 59452
// result := 0 ;
59387: LD_ADDR_VAR 0 2
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// if GetTaskList ( sci ) then
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 437
59404: IFFALSE 59452
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59406: LD_VAR 0 1
59410: PPUSH
59411: CALL_OW 437
59415: PUSH
59416: LD_INT 1
59418: ARRAY
59419: PUSH
59420: LD_INT 1
59422: ARRAY
59423: PUSH
59424: LD_STRING l
59426: EQUAL
59427: IFFALSE 59452
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59429: LD_ADDR_VAR 0 2
59433: PUSH
59434: LD_VAR 0 1
59438: PPUSH
59439: CALL_OW 437
59443: PUSH
59444: LD_INT 1
59446: ARRAY
59447: PUSH
59448: LD_INT 4
59450: ARRAY
59451: ST_TO_ADDR
// end ;
59452: LD_VAR 0 2
59456: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59457: LD_INT 0
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
// if not base_units then
59463: LD_VAR 0 1
59467: NOT
59468: IFFALSE 59472
// exit ;
59470: GO 59559
// result := false ;
59472: LD_ADDR_VAR 0 2
59476: PUSH
59477: LD_INT 0
59479: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59480: LD_ADDR_VAR 0 5
59484: PUSH
59485: LD_VAR 0 1
59489: PPUSH
59490: LD_INT 21
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PPUSH
59500: CALL_OW 72
59504: ST_TO_ADDR
// if not tmp then
59505: LD_VAR 0 5
59509: NOT
59510: IFFALSE 59514
// exit ;
59512: GO 59559
// for i in tmp do
59514: LD_ADDR_VAR 0 3
59518: PUSH
59519: LD_VAR 0 5
59523: PUSH
59524: FOR_IN
59525: IFFALSE 59557
// begin result := EnemyInRange ( i , 22 ) ;
59527: LD_ADDR_VAR 0 2
59531: PUSH
59532: LD_VAR 0 3
59536: PPUSH
59537: LD_INT 22
59539: PPUSH
59540: CALL 57228 0 2
59544: ST_TO_ADDR
// if result then
59545: LD_VAR 0 2
59549: IFFALSE 59555
// exit ;
59551: POP
59552: POP
59553: GO 59559
// end ;
59555: GO 59524
59557: POP
59558: POP
// end ;
59559: LD_VAR 0 2
59563: RET
// export function FilterByTag ( units , tag ) ; begin
59564: LD_INT 0
59566: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59567: LD_ADDR_VAR 0 3
59571: PUSH
59572: LD_VAR 0 1
59576: PPUSH
59577: LD_INT 120
59579: PUSH
59580: LD_VAR 0 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PPUSH
59589: CALL_OW 72
59593: ST_TO_ADDR
// end ;
59594: LD_VAR 0 3
59598: RET
// export function IsDriver ( un ) ; begin
59599: LD_INT 0
59601: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59602: LD_ADDR_VAR 0 2
59606: PUSH
59607: LD_VAR 0 1
59611: PUSH
59612: LD_INT 55
59614: PUSH
59615: EMPTY
59616: LIST
59617: PPUSH
59618: CALL_OW 69
59622: IN
59623: ST_TO_ADDR
// end ;
59624: LD_VAR 0 2
59628: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59629: LD_INT 0
59631: PPUSH
59632: PPUSH
// list := [ ] ;
59633: LD_ADDR_VAR 0 5
59637: PUSH
59638: EMPTY
59639: ST_TO_ADDR
// case d of 0 :
59640: LD_VAR 0 3
59644: PUSH
59645: LD_INT 0
59647: DOUBLE
59648: EQUAL
59649: IFTRUE 59653
59651: GO 59786
59653: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59654: LD_ADDR_VAR 0 5
59658: PUSH
59659: LD_VAR 0 1
59663: PUSH
59664: LD_INT 4
59666: MINUS
59667: PUSH
59668: LD_VAR 0 2
59672: PUSH
59673: LD_INT 4
59675: MINUS
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: PUSH
59685: LD_VAR 0 1
59689: PUSH
59690: LD_INT 3
59692: MINUS
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: LD_INT 4
59714: PLUS
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: PUSH
59729: LD_VAR 0 1
59733: PUSH
59734: LD_INT 3
59736: PLUS
59737: PUSH
59738: LD_VAR 0 2
59742: PUSH
59743: LD_INT 3
59745: PLUS
59746: PUSH
59747: LD_INT 5
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_VAR 0 1
59759: PUSH
59760: LD_VAR 0 2
59764: PUSH
59765: LD_INT 4
59767: PLUS
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: ST_TO_ADDR
// end ; 1 :
59784: GO 60484
59786: LD_INT 1
59788: DOUBLE
59789: EQUAL
59790: IFTRUE 59794
59792: GO 59927
59794: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59795: LD_ADDR_VAR 0 5
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_VAR 0 2
59809: PUSH
59810: LD_INT 4
59812: MINUS
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 3
59829: MINUS
59830: PUSH
59831: LD_VAR 0 2
59835: PUSH
59836: LD_INT 3
59838: MINUS
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 4
59855: MINUS
59856: PUSH
59857: LD_VAR 0 2
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_VAR 0 2
59879: PUSH
59880: LD_INT 3
59882: PLUS
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: PUSH
59892: LD_VAR 0 1
59896: PUSH
59897: LD_INT 4
59899: PLUS
59900: PUSH
59901: LD_VAR 0 2
59905: PUSH
59906: LD_INT 4
59908: PLUS
59909: PUSH
59910: LD_INT 5
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// end ; 2 :
59925: GO 60484
59927: LD_INT 2
59929: DOUBLE
59930: EQUAL
59931: IFTRUE 59935
59933: GO 60064
59935: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59936: LD_ADDR_VAR 0 5
59940: PUSH
59941: LD_VAR 0 1
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 3
59953: MINUS
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 1
59967: PUSH
59968: LD_INT 4
59970: PLUS
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 4
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: PUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 4
59997: PLUS
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 3
60014: MINUS
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: PUSH
60029: LD_VAR 0 1
60033: PUSH
60034: LD_INT 4
60036: MINUS
60037: PUSH
60038: LD_VAR 0 2
60042: PUSH
60043: LD_INT 4
60045: MINUS
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// end ; 3 :
60062: GO 60484
60064: LD_INT 3
60066: DOUBLE
60067: EQUAL
60068: IFTRUE 60072
60070: GO 60205
60072: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60073: LD_ADDR_VAR 0 5
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 3
60085: PLUS
60086: PUSH
60087: LD_VAR 0 2
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 4
60107: PLUS
60108: PUSH
60109: LD_VAR 0 2
60113: PUSH
60114: LD_INT 4
60116: PLUS
60117: PUSH
60118: LD_INT 5
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 4
60133: MINUS
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 4
60160: MINUS
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: LD_VAR 0 1
60174: PUSH
60175: LD_INT 3
60177: MINUS
60178: PUSH
60179: LD_VAR 0 2
60183: PUSH
60184: LD_INT 3
60186: MINUS
60187: PUSH
60188: LD_INT 2
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: ST_TO_ADDR
// end ; 4 :
60203: GO 60484
60205: LD_INT 4
60207: DOUBLE
60208: EQUAL
60209: IFTRUE 60213
60211: GO 60346
60213: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60214: LD_ADDR_VAR 0 5
60218: PUSH
60219: LD_VAR 0 1
60223: PUSH
60224: LD_VAR 0 2
60228: PUSH
60229: LD_INT 4
60231: PLUS
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_INT 3
60248: PLUS
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 3
60257: PLUS
60258: PUSH
60259: LD_INT 5
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: PUSH
60267: LD_VAR 0 1
60271: PUSH
60272: LD_INT 4
60274: PLUS
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 3
60301: MINUS
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_INT 4
60318: MINUS
60319: PUSH
60320: LD_VAR 0 2
60324: PUSH
60325: LD_INT 4
60327: MINUS
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// end ; 5 :
60344: GO 60484
60346: LD_INT 5
60348: DOUBLE
60349: EQUAL
60350: IFTRUE 60354
60352: GO 60483
60354: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60355: LD_ADDR_VAR 0 5
60359: PUSH
60360: LD_VAR 0 1
60364: PUSH
60365: LD_INT 4
60367: MINUS
60368: PUSH
60369: LD_VAR 0 2
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_VAR 0 2
60391: PUSH
60392: LD_INT 4
60394: MINUS
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: LD_INT 4
60411: PLUS
60412: PUSH
60413: LD_VAR 0 2
60417: PUSH
60418: LD_INT 4
60420: PLUS
60421: PUSH
60422: LD_INT 5
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_INT 3
60437: PLUS
60438: PUSH
60439: LD_VAR 0 2
60443: PUSH
60444: LD_INT 4
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 1
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 3
60464: PLUS
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: ST_TO_ADDR
// end ; end ;
60481: GO 60484
60483: POP
// result := list ;
60484: LD_ADDR_VAR 0 4
60488: PUSH
60489: LD_VAR 0 5
60493: ST_TO_ADDR
// end ;
60494: LD_VAR 0 4
60498: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60499: LD_INT 0
60501: PPUSH
60502: PPUSH
60503: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60504: LD_VAR 0 1
60508: NOT
60509: PUSH
60510: LD_VAR 0 2
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 4
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: IN
60533: NOT
60534: OR
60535: IFFALSE 60539
// exit ;
60537: GO 60631
// tmp := [ ] ;
60539: LD_ADDR_VAR 0 5
60543: PUSH
60544: EMPTY
60545: ST_TO_ADDR
// for i in units do
60546: LD_ADDR_VAR 0 4
60550: PUSH
60551: LD_VAR 0 1
60555: PUSH
60556: FOR_IN
60557: IFFALSE 60600
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60559: LD_ADDR_VAR 0 5
60563: PUSH
60564: LD_VAR 0 5
60568: PPUSH
60569: LD_VAR 0 5
60573: PUSH
60574: LD_INT 1
60576: PLUS
60577: PPUSH
60578: LD_VAR 0 4
60582: PPUSH
60583: LD_VAR 0 2
60587: PPUSH
60588: CALL_OW 259
60592: PPUSH
60593: CALL_OW 2
60597: ST_TO_ADDR
60598: GO 60556
60600: POP
60601: POP
// if not tmp then
60602: LD_VAR 0 5
60606: NOT
60607: IFFALSE 60611
// exit ;
60609: GO 60631
// result := SortListByListDesc ( units , tmp ) ;
60611: LD_ADDR_VAR 0 3
60615: PUSH
60616: LD_VAR 0 1
60620: PPUSH
60621: LD_VAR 0 5
60625: PPUSH
60626: CALL_OW 77
60630: ST_TO_ADDR
// end ;
60631: LD_VAR 0 3
60635: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60636: LD_INT 0
60638: PPUSH
60639: PPUSH
60640: PPUSH
// result := false ;
60641: LD_ADDR_VAR 0 3
60645: PUSH
60646: LD_INT 0
60648: ST_TO_ADDR
// x := GetX ( building ) ;
60649: LD_ADDR_VAR 0 4
60653: PUSH
60654: LD_VAR 0 2
60658: PPUSH
60659: CALL_OW 250
60663: ST_TO_ADDR
// y := GetY ( building ) ;
60664: LD_ADDR_VAR 0 5
60668: PUSH
60669: LD_VAR 0 2
60673: PPUSH
60674: CALL_OW 251
60678: ST_TO_ADDR
// if not building or not x or not y then
60679: LD_VAR 0 2
60683: NOT
60684: PUSH
60685: LD_VAR 0 4
60689: NOT
60690: OR
60691: PUSH
60692: LD_VAR 0 5
60696: NOT
60697: OR
60698: IFFALSE 60702
// exit ;
60700: GO 60794
// if GetTaskList ( unit ) then
60702: LD_VAR 0 1
60706: PPUSH
60707: CALL_OW 437
60711: IFFALSE 60794
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60713: LD_STRING e
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: CALL_OW 437
60725: PUSH
60726: LD_INT 1
60728: ARRAY
60729: PUSH
60730: LD_INT 1
60732: ARRAY
60733: EQUAL
60734: PUSH
60735: LD_VAR 0 4
60739: PUSH
60740: LD_VAR 0 1
60744: PPUSH
60745: CALL_OW 437
60749: PUSH
60750: LD_INT 1
60752: ARRAY
60753: PUSH
60754: LD_INT 2
60756: ARRAY
60757: EQUAL
60758: AND
60759: PUSH
60760: LD_VAR 0 5
60764: PUSH
60765: LD_VAR 0 1
60769: PPUSH
60770: CALL_OW 437
60774: PUSH
60775: LD_INT 1
60777: ARRAY
60778: PUSH
60779: LD_INT 3
60781: ARRAY
60782: EQUAL
60783: AND
60784: IFFALSE 60794
// result := true end ;
60786: LD_ADDR_VAR 0 3
60790: PUSH
60791: LD_INT 1
60793: ST_TO_ADDR
// end ;
60794: LD_VAR 0 3
60798: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60799: LD_INT 0
60801: PPUSH
// result := false ;
60802: LD_ADDR_VAR 0 4
60806: PUSH
60807: LD_INT 0
60809: ST_TO_ADDR
// if GetTaskList ( unit ) then
60810: LD_VAR 0 1
60814: PPUSH
60815: CALL_OW 437
60819: IFFALSE 60902
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60821: LD_STRING M
60823: PUSH
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 437
60833: PUSH
60834: LD_INT 1
60836: ARRAY
60837: PUSH
60838: LD_INT 1
60840: ARRAY
60841: EQUAL
60842: PUSH
60843: LD_VAR 0 2
60847: PUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: CALL_OW 437
60857: PUSH
60858: LD_INT 1
60860: ARRAY
60861: PUSH
60862: LD_INT 2
60864: ARRAY
60865: EQUAL
60866: AND
60867: PUSH
60868: LD_VAR 0 3
60872: PUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 437
60882: PUSH
60883: LD_INT 1
60885: ARRAY
60886: PUSH
60887: LD_INT 3
60889: ARRAY
60890: EQUAL
60891: AND
60892: IFFALSE 60902
// result := true ;
60894: LD_ADDR_VAR 0 4
60898: PUSH
60899: LD_INT 1
60901: ST_TO_ADDR
// end ; end ;
60902: LD_VAR 0 4
60906: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60907: LD_INT 0
60909: PPUSH
60910: PPUSH
60911: PPUSH
60912: PPUSH
// if not unit or not area then
60913: LD_VAR 0 1
60917: NOT
60918: PUSH
60919: LD_VAR 0 2
60923: NOT
60924: OR
60925: IFFALSE 60929
// exit ;
60927: GO 61093
// tmp := AreaToList ( area , i ) ;
60929: LD_ADDR_VAR 0 6
60933: PUSH
60934: LD_VAR 0 2
60938: PPUSH
60939: LD_VAR 0 5
60943: PPUSH
60944: CALL_OW 517
60948: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60949: LD_ADDR_VAR 0 5
60953: PUSH
60954: DOUBLE
60955: LD_INT 1
60957: DEC
60958: ST_TO_ADDR
60959: LD_VAR 0 6
60963: PUSH
60964: LD_INT 1
60966: ARRAY
60967: PUSH
60968: FOR_TO
60969: IFFALSE 61091
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60971: LD_ADDR_VAR 0 7
60975: PUSH
60976: LD_VAR 0 6
60980: PUSH
60981: LD_INT 1
60983: ARRAY
60984: PUSH
60985: LD_VAR 0 5
60989: ARRAY
60990: PUSH
60991: LD_VAR 0 6
60995: PUSH
60996: LD_INT 2
60998: ARRAY
60999: PUSH
61000: LD_VAR 0 5
61004: ARRAY
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61010: LD_VAR 0 7
61014: PUSH
61015: LD_INT 1
61017: ARRAY
61018: PPUSH
61019: LD_VAR 0 7
61023: PUSH
61024: LD_INT 2
61026: ARRAY
61027: PPUSH
61028: CALL_OW 428
61032: PUSH
61033: LD_INT 0
61035: EQUAL
61036: IFFALSE 61089
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61038: LD_VAR 0 1
61042: PPUSH
61043: LD_VAR 0 7
61047: PUSH
61048: LD_INT 1
61050: ARRAY
61051: PPUSH
61052: LD_VAR 0 7
61056: PUSH
61057: LD_INT 2
61059: ARRAY
61060: PPUSH
61061: LD_VAR 0 3
61065: PPUSH
61066: CALL_OW 48
// result := IsPlaced ( unit ) ;
61070: LD_ADDR_VAR 0 4
61074: PUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: CALL_OW 305
61084: ST_TO_ADDR
// exit ;
61085: POP
61086: POP
61087: GO 61093
// end ; end ;
61089: GO 60968
61091: POP
61092: POP
// end ;
61093: LD_VAR 0 4
61097: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61098: LD_INT 0
61100: PPUSH
61101: PPUSH
61102: PPUSH
// if not side or side > 8 then
61103: LD_VAR 0 1
61107: NOT
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: LD_INT 8
61116: GREATER
61117: OR
61118: IFFALSE 61122
// exit ;
61120: GO 61309
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61122: LD_ADDR_VAR 0 4
61126: PUSH
61127: LD_INT 22
61129: PUSH
61130: LD_VAR 0 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 21
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PPUSH
61153: CALL_OW 69
61157: ST_TO_ADDR
// if not tmp then
61158: LD_VAR 0 4
61162: NOT
61163: IFFALSE 61167
// exit ;
61165: GO 61309
// enable_addtolog := true ;
61167: LD_ADDR_OWVAR 81
61171: PUSH
61172: LD_INT 1
61174: ST_TO_ADDR
// AddToLog ( [ ) ;
61175: LD_STRING [
61177: PPUSH
61178: CALL_OW 561
// for i in tmp do
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: LD_VAR 0 4
61191: PUSH
61192: FOR_IN
61193: IFFALSE 61300
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61195: LD_STRING [
61197: PUSH
61198: LD_VAR 0 3
61202: PPUSH
61203: CALL_OW 266
61207: STR
61208: PUSH
61209: LD_STRING , 
61211: STR
61212: PUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: CALL_OW 250
61222: STR
61223: PUSH
61224: LD_STRING , 
61226: STR
61227: PUSH
61228: LD_VAR 0 3
61232: PPUSH
61233: CALL_OW 251
61237: STR
61238: PUSH
61239: LD_STRING , 
61241: STR
61242: PUSH
61243: LD_VAR 0 3
61247: PPUSH
61248: CALL_OW 254
61252: STR
61253: PUSH
61254: LD_STRING , 
61256: STR
61257: PUSH
61258: LD_VAR 0 3
61262: PPUSH
61263: LD_INT 1
61265: PPUSH
61266: CALL_OW 268
61270: STR
61271: PUSH
61272: LD_STRING , 
61274: STR
61275: PUSH
61276: LD_VAR 0 3
61280: PPUSH
61281: LD_INT 2
61283: PPUSH
61284: CALL_OW 268
61288: STR
61289: PUSH
61290: LD_STRING ],
61292: STR
61293: PPUSH
61294: CALL_OW 561
// end ;
61298: GO 61192
61300: POP
61301: POP
// AddToLog ( ]; ) ;
61302: LD_STRING ];
61304: PPUSH
61305: CALL_OW 561
// end ;
61309: LD_VAR 0 2
61313: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61314: LD_INT 0
61316: PPUSH
61317: PPUSH
61318: PPUSH
61319: PPUSH
61320: PPUSH
// if not area or not rate or not max then
61321: LD_VAR 0 1
61325: NOT
61326: PUSH
61327: LD_VAR 0 2
61331: NOT
61332: OR
61333: PUSH
61334: LD_VAR 0 4
61338: NOT
61339: OR
61340: IFFALSE 61344
// exit ;
61342: GO 61533
// while 1 do
61344: LD_INT 1
61346: IFFALSE 61533
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61348: LD_ADDR_VAR 0 9
61352: PUSH
61353: LD_VAR 0 1
61357: PPUSH
61358: LD_INT 1
61360: PPUSH
61361: CALL_OW 287
61365: PUSH
61366: LD_INT 10
61368: MUL
61369: ST_TO_ADDR
// r := rate / 10 ;
61370: LD_ADDR_VAR 0 7
61374: PUSH
61375: LD_VAR 0 2
61379: PUSH
61380: LD_INT 10
61382: DIVREAL
61383: ST_TO_ADDR
// time := 1 1$00 ;
61384: LD_ADDR_VAR 0 8
61388: PUSH
61389: LD_INT 2100
61391: ST_TO_ADDR
// if amount < min then
61392: LD_VAR 0 9
61396: PUSH
61397: LD_VAR 0 3
61401: LESS
61402: IFFALSE 61420
// r := r * 2 else
61404: LD_ADDR_VAR 0 7
61408: PUSH
61409: LD_VAR 0 7
61413: PUSH
61414: LD_INT 2
61416: MUL
61417: ST_TO_ADDR
61418: GO 61446
// if amount > max then
61420: LD_VAR 0 9
61424: PUSH
61425: LD_VAR 0 4
61429: GREATER
61430: IFFALSE 61446
// r := r / 2 ;
61432: LD_ADDR_VAR 0 7
61436: PUSH
61437: LD_VAR 0 7
61441: PUSH
61442: LD_INT 2
61444: DIVREAL
61445: ST_TO_ADDR
// time := time / r ;
61446: LD_ADDR_VAR 0 8
61450: PUSH
61451: LD_VAR 0 8
61455: PUSH
61456: LD_VAR 0 7
61460: DIVREAL
61461: ST_TO_ADDR
// if time < 0 then
61462: LD_VAR 0 8
61466: PUSH
61467: LD_INT 0
61469: LESS
61470: IFFALSE 61487
// time := time * - 1 ;
61472: LD_ADDR_VAR 0 8
61476: PUSH
61477: LD_VAR 0 8
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: MUL
61486: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61487: LD_VAR 0 8
61491: PUSH
61492: LD_INT 35
61494: PPUSH
61495: LD_INT 875
61497: PPUSH
61498: CALL_OW 12
61502: PLUS
61503: PPUSH
61504: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61508: LD_INT 1
61510: PPUSH
61511: LD_INT 5
61513: PPUSH
61514: CALL_OW 12
61518: PPUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: LD_INT 1
61526: PPUSH
61527: CALL_OW 55
// end ;
61531: GO 61344
// end ;
61533: LD_VAR 0 5
61537: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61538: LD_INT 0
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
61544: PPUSH
61545: PPUSH
61546: PPUSH
61547: PPUSH
// if not turrets or not factories then
61548: LD_VAR 0 1
61552: NOT
61553: PUSH
61554: LD_VAR 0 2
61558: NOT
61559: OR
61560: IFFALSE 61564
// exit ;
61562: GO 61871
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61564: LD_ADDR_VAR 0 10
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: LD_INT 6
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: LD_INT 4
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 24
61606: PUSH
61607: LD_INT 25
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 23
61616: PUSH
61617: LD_INT 27
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 42
61630: PUSH
61631: LD_INT 43
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 44
61640: PUSH
61641: LD_INT 46
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 45
61650: PUSH
61651: LD_INT 47
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// result := [ ] ;
61668: LD_ADDR_VAR 0 3
61672: PUSH
61673: EMPTY
61674: ST_TO_ADDR
// for i in turrets do
61675: LD_ADDR_VAR 0 4
61679: PUSH
61680: LD_VAR 0 1
61684: PUSH
61685: FOR_IN
61686: IFFALSE 61869
// begin nat := GetNation ( i ) ;
61688: LD_ADDR_VAR 0 7
61692: PUSH
61693: LD_VAR 0 4
61697: PPUSH
61698: CALL_OW 248
61702: ST_TO_ADDR
// weapon := 0 ;
61703: LD_ADDR_VAR 0 8
61707: PUSH
61708: LD_INT 0
61710: ST_TO_ADDR
// if not nat then
61711: LD_VAR 0 7
61715: NOT
61716: IFFALSE 61720
// continue ;
61718: GO 61685
// for j in list [ nat ] do
61720: LD_ADDR_VAR 0 5
61724: PUSH
61725: LD_VAR 0 10
61729: PUSH
61730: LD_VAR 0 7
61734: ARRAY
61735: PUSH
61736: FOR_IN
61737: IFFALSE 61778
// if GetBWeapon ( i ) = j [ 1 ] then
61739: LD_VAR 0 4
61743: PPUSH
61744: CALL_OW 269
61748: PUSH
61749: LD_VAR 0 5
61753: PUSH
61754: LD_INT 1
61756: ARRAY
61757: EQUAL
61758: IFFALSE 61776
// begin weapon := j [ 2 ] ;
61760: LD_ADDR_VAR 0 8
61764: PUSH
61765: LD_VAR 0 5
61769: PUSH
61770: LD_INT 2
61772: ARRAY
61773: ST_TO_ADDR
// break ;
61774: GO 61778
// end ;
61776: GO 61736
61778: POP
61779: POP
// if not weapon then
61780: LD_VAR 0 8
61784: NOT
61785: IFFALSE 61789
// continue ;
61787: GO 61685
// for k in factories do
61789: LD_ADDR_VAR 0 6
61793: PUSH
61794: LD_VAR 0 2
61798: PUSH
61799: FOR_IN
61800: IFFALSE 61865
// begin weapons := AvailableWeaponList ( k ) ;
61802: LD_ADDR_VAR 0 9
61806: PUSH
61807: LD_VAR 0 6
61811: PPUSH
61812: CALL_OW 478
61816: ST_TO_ADDR
// if not weapons then
61817: LD_VAR 0 9
61821: NOT
61822: IFFALSE 61826
// continue ;
61824: GO 61799
// if weapon in weapons then
61826: LD_VAR 0 8
61830: PUSH
61831: LD_VAR 0 9
61835: IN
61836: IFFALSE 61863
// begin result := [ i , weapon ] ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 4
61847: PUSH
61848: LD_VAR 0 8
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: ST_TO_ADDR
// exit ;
61857: POP
61858: POP
61859: POP
61860: POP
61861: GO 61871
// end ; end ;
61863: GO 61799
61865: POP
61866: POP
// end ;
61867: GO 61685
61869: POP
61870: POP
// end ;
61871: LD_VAR 0 3
61875: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61876: LD_INT 0
61878: PPUSH
// if not side or side > 8 then
61879: LD_VAR 0 3
61883: NOT
61884: PUSH
61885: LD_VAR 0 3
61889: PUSH
61890: LD_INT 8
61892: GREATER
61893: OR
61894: IFFALSE 61898
// exit ;
61896: GO 61957
// if not range then
61898: LD_VAR 0 4
61902: NOT
61903: IFFALSE 61914
// range := - 12 ;
61905: LD_ADDR_VAR 0 4
61909: PUSH
61910: LD_INT 12
61912: NEG
61913: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61914: LD_VAR 0 1
61918: PPUSH
61919: LD_VAR 0 2
61923: PPUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: LD_VAR 0 4
61933: PPUSH
61934: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61938: LD_VAR 0 1
61942: PPUSH
61943: LD_VAR 0 2
61947: PPUSH
61948: LD_VAR 0 3
61952: PPUSH
61953: CALL_OW 331
// end ;
61957: LD_VAR 0 5
61961: RET
// export function Video ( mode ) ; begin
61962: LD_INT 0
61964: PPUSH
// ingame_video = mode ;
61965: LD_ADDR_OWVAR 52
61969: PUSH
61970: LD_VAR 0 1
61974: ST_TO_ADDR
// interface_hidden = mode ;
61975: LD_ADDR_OWVAR 54
61979: PUSH
61980: LD_VAR 0 1
61984: ST_TO_ADDR
// end ;
61985: LD_VAR 0 2
61989: RET
// export function Join ( array , element ) ; begin
61990: LD_INT 0
61992: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61993: LD_ADDR_VAR 0 3
61997: PUSH
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_INT 1
62010: PLUS
62011: PPUSH
62012: LD_VAR 0 2
62016: PPUSH
62017: CALL_OW 1
62021: ST_TO_ADDR
// end ;
62022: LD_VAR 0 3
62026: RET
// export function JoinUnion ( array , element ) ; begin
62027: LD_INT 0
62029: PPUSH
// result := array union element ;
62030: LD_ADDR_VAR 0 3
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_VAR 0 2
62044: UNION
62045: ST_TO_ADDR
// end ;
62046: LD_VAR 0 3
62050: RET
// export function GetBehemoths ( side ) ; begin
62051: LD_INT 0
62053: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62054: LD_ADDR_VAR 0 2
62058: PUSH
62059: LD_INT 22
62061: PUSH
62062: LD_VAR 0 1
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 31
62073: PUSH
62074: LD_INT 25
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PPUSH
62085: CALL_OW 69
62089: ST_TO_ADDR
// end ;
62090: LD_VAR 0 2
62094: RET
// export function Shuffle ( array ) ; var i , index ; begin
62095: LD_INT 0
62097: PPUSH
62098: PPUSH
62099: PPUSH
// result := [ ] ;
62100: LD_ADDR_VAR 0 2
62104: PUSH
62105: EMPTY
62106: ST_TO_ADDR
// if not array then
62107: LD_VAR 0 1
62111: NOT
62112: IFFALSE 62116
// exit ;
62114: GO 62215
// Randomize ;
62116: CALL_OW 10
// for i = array downto 1 do
62120: LD_ADDR_VAR 0 3
62124: PUSH
62125: DOUBLE
62126: LD_VAR 0 1
62130: INC
62131: ST_TO_ADDR
62132: LD_INT 1
62134: PUSH
62135: FOR_DOWNTO
62136: IFFALSE 62213
// begin index := rand ( 1 , array ) ;
62138: LD_ADDR_VAR 0 4
62142: PUSH
62143: LD_INT 1
62145: PPUSH
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL_OW 12
62155: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62156: LD_ADDR_VAR 0 2
62160: PUSH
62161: LD_VAR 0 2
62165: PPUSH
62166: LD_VAR 0 2
62170: PUSH
62171: LD_INT 1
62173: PLUS
62174: PPUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_VAR 0 4
62184: ARRAY
62185: PPUSH
62186: CALL_OW 2
62190: ST_TO_ADDR
// array := Delete ( array , index ) ;
62191: LD_ADDR_VAR 0 1
62195: PUSH
62196: LD_VAR 0 1
62200: PPUSH
62201: LD_VAR 0 4
62205: PPUSH
62206: CALL_OW 3
62210: ST_TO_ADDR
// end ;
62211: GO 62135
62213: POP
62214: POP
// end ;
62215: LD_VAR 0 2
62219: RET
// export function GetBaseMaterials ( base ) ; begin
62220: LD_INT 0
62222: PPUSH
// result := [ 0 , 0 , 0 ] ;
62223: LD_ADDR_VAR 0 2
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// if not base then
62242: LD_VAR 0 1
62246: NOT
62247: IFFALSE 62251
// exit ;
62249: GO 62300
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62251: LD_ADDR_VAR 0 2
62255: PUSH
62256: LD_VAR 0 1
62260: PPUSH
62261: LD_INT 1
62263: PPUSH
62264: CALL_OW 275
62268: PUSH
62269: LD_VAR 0 1
62273: PPUSH
62274: LD_INT 2
62276: PPUSH
62277: CALL_OW 275
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_INT 3
62289: PPUSH
62290: CALL_OW 275
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: LIST
62299: ST_TO_ADDR
// end ;
62300: LD_VAR 0 2
62304: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62305: LD_INT 0
62307: PPUSH
62308: PPUSH
// result := array ;
62309: LD_ADDR_VAR 0 3
62313: PUSH
62314: LD_VAR 0 1
62318: ST_TO_ADDR
// if size >= result then
62319: LD_VAR 0 2
62323: PUSH
62324: LD_VAR 0 3
62328: GREATEREQUAL
62329: IFFALSE 62333
// exit ;
62331: GO 62383
// if size then
62333: LD_VAR 0 2
62337: IFFALSE 62383
// for i := array downto size do
62339: LD_ADDR_VAR 0 4
62343: PUSH
62344: DOUBLE
62345: LD_VAR 0 1
62349: INC
62350: ST_TO_ADDR
62351: LD_VAR 0 2
62355: PUSH
62356: FOR_DOWNTO
62357: IFFALSE 62381
// result := Delete ( result , result ) ;
62359: LD_ADDR_VAR 0 3
62363: PUSH
62364: LD_VAR 0 3
62368: PPUSH
62369: LD_VAR 0 3
62373: PPUSH
62374: CALL_OW 3
62378: ST_TO_ADDR
62379: GO 62356
62381: POP
62382: POP
// end ;
62383: LD_VAR 0 3
62387: RET
// export function ComExit ( unit ) ; var tmp ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not IsInUnit ( unit ) then
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 310
62401: NOT
62402: IFFALSE 62406
// exit ;
62404: GO 62466
// tmp := IsInUnit ( unit ) ;
62406: LD_ADDR_VAR 0 3
62410: PUSH
62411: LD_VAR 0 1
62415: PPUSH
62416: CALL_OW 310
62420: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62421: LD_VAR 0 3
62425: PPUSH
62426: CALL_OW 247
62430: PUSH
62431: LD_INT 2
62433: EQUAL
62434: IFFALSE 62447
// ComExitVehicle ( unit ) else
62436: LD_VAR 0 1
62440: PPUSH
62441: CALL_OW 121
62445: GO 62456
// ComExitBuilding ( unit ) ;
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 122
// result := tmp ;
62456: LD_ADDR_VAR 0 2
62460: PUSH
62461: LD_VAR 0 3
62465: ST_TO_ADDR
// end ;
62466: LD_VAR 0 2
62470: RET
// export function ComExitAll ( units ) ; var i ; begin
62471: LD_INT 0
62473: PPUSH
62474: PPUSH
// if not units then
62475: LD_VAR 0 1
62479: NOT
62480: IFFALSE 62484
// exit ;
62482: GO 62510
// for i in units do
62484: LD_ADDR_VAR 0 3
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: FOR_IN
62495: IFFALSE 62508
// ComExit ( i ) ;
62497: LD_VAR 0 3
62501: PPUSH
62502: CALL 62388 0 1
62506: GO 62494
62508: POP
62509: POP
// end ;
62510: LD_VAR 0 2
62514: RET
// export function ResetHc ; begin
62515: LD_INT 0
62517: PPUSH
// InitHc ;
62518: CALL_OW 19
// hc_importance := 0 ;
62522: LD_ADDR_OWVAR 32
62526: PUSH
62527: LD_INT 0
62529: ST_TO_ADDR
// end ;
62530: LD_VAR 0 1
62534: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
62539: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62540: LD_ADDR_VAR 0 6
62544: PUSH
62545: LD_VAR 0 1
62549: PUSH
62550: LD_VAR 0 3
62554: PLUS
62555: PUSH
62556: LD_INT 2
62558: DIV
62559: ST_TO_ADDR
// if _x < 0 then
62560: LD_VAR 0 6
62564: PUSH
62565: LD_INT 0
62567: LESS
62568: IFFALSE 62585
// _x := _x * - 1 ;
62570: LD_ADDR_VAR 0 6
62574: PUSH
62575: LD_VAR 0 6
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: MUL
62584: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62585: LD_ADDR_VAR 0 7
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_VAR 0 4
62599: PLUS
62600: PUSH
62601: LD_INT 2
62603: DIV
62604: ST_TO_ADDR
// if _y < 0 then
62605: LD_VAR 0 7
62609: PUSH
62610: LD_INT 0
62612: LESS
62613: IFFALSE 62630
// _y := _y * - 1 ;
62615: LD_ADDR_VAR 0 7
62619: PUSH
62620: LD_VAR 0 7
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: MUL
62629: ST_TO_ADDR
// result := [ _x , _y ] ;
62630: LD_ADDR_VAR 0 5
62634: PUSH
62635: LD_VAR 0 6
62639: PUSH
62640: LD_VAR 0 7
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// end ;
62649: LD_VAR 0 5
62653: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62654: LD_INT 0
62656: PPUSH
62657: PPUSH
62658: PPUSH
62659: PPUSH
// task := GetTaskList ( unit ) ;
62660: LD_ADDR_VAR 0 7
62664: PUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: CALL_OW 437
62674: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62675: LD_VAR 0 7
62679: NOT
62680: PUSH
62681: LD_VAR 0 1
62685: PPUSH
62686: LD_VAR 0 2
62690: PPUSH
62691: CALL_OW 308
62695: NOT
62696: AND
62697: IFFALSE 62701
// exit ;
62699: GO 62819
// if IsInArea ( unit , area ) then
62701: LD_VAR 0 1
62705: PPUSH
62706: LD_VAR 0 2
62710: PPUSH
62711: CALL_OW 308
62715: IFFALSE 62733
// begin ComMoveToArea ( unit , goAway ) ;
62717: LD_VAR 0 1
62721: PPUSH
62722: LD_VAR 0 3
62726: PPUSH
62727: CALL_OW 113
// exit ;
62731: GO 62819
// end ; if task [ 1 ] [ 1 ] <> M then
62733: LD_VAR 0 7
62737: PUSH
62738: LD_INT 1
62740: ARRAY
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_STRING M
62748: NONEQUAL
62749: IFFALSE 62753
// exit ;
62751: GO 62819
// x := task [ 1 ] [ 2 ] ;
62753: LD_ADDR_VAR 0 5
62757: PUSH
62758: LD_VAR 0 7
62762: PUSH
62763: LD_INT 1
62765: ARRAY
62766: PUSH
62767: LD_INT 2
62769: ARRAY
62770: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62771: LD_ADDR_VAR 0 6
62775: PUSH
62776: LD_VAR 0 7
62780: PUSH
62781: LD_INT 1
62783: ARRAY
62784: PUSH
62785: LD_INT 3
62787: ARRAY
62788: ST_TO_ADDR
// if InArea ( x , y , area ) then
62789: LD_VAR 0 5
62793: PPUSH
62794: LD_VAR 0 6
62798: PPUSH
62799: LD_VAR 0 2
62803: PPUSH
62804: CALL_OW 309
62808: IFFALSE 62819
// ComStop ( unit ) ;
62810: LD_VAR 0 1
62814: PPUSH
62815: CALL_OW 141
// end ;
62819: LD_VAR 0 4
62823: RET
// export function Abs ( value ) ; begin
62824: LD_INT 0
62826: PPUSH
// result := value ;
62827: LD_ADDR_VAR 0 2
62831: PUSH
62832: LD_VAR 0 1
62836: ST_TO_ADDR
// if value < 0 then
62837: LD_VAR 0 1
62841: PUSH
62842: LD_INT 0
62844: LESS
62845: IFFALSE 62862
// result := value * - 1 ;
62847: LD_ADDR_VAR 0 2
62851: PUSH
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: MUL
62861: ST_TO_ADDR
// end ;
62862: LD_VAR 0 2
62866: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62867: LD_INT 0
62869: PPUSH
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
62876: PPUSH
// if not unit or not building then
62877: LD_VAR 0 1
62881: NOT
62882: PUSH
62883: LD_VAR 0 2
62887: NOT
62888: OR
62889: IFFALSE 62893
// exit ;
62891: GO 63119
// x := GetX ( building ) ;
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 2
62902: PPUSH
62903: CALL_OW 250
62907: ST_TO_ADDR
// y := GetY ( building ) ;
62908: LD_ADDR_VAR 0 6
62912: PUSH
62913: LD_VAR 0 2
62917: PPUSH
62918: CALL_OW 251
62922: ST_TO_ADDR
// d := GetDir ( building ) ;
62923: LD_ADDR_VAR 0 8
62927: PUSH
62928: LD_VAR 0 2
62932: PPUSH
62933: CALL_OW 254
62937: ST_TO_ADDR
// r := 4 ;
62938: LD_ADDR_VAR 0 9
62942: PUSH
62943: LD_INT 4
62945: ST_TO_ADDR
// for i := 1 to 5 do
62946: LD_ADDR_VAR 0 10
62950: PUSH
62951: DOUBLE
62952: LD_INT 1
62954: DEC
62955: ST_TO_ADDR
62956: LD_INT 5
62958: PUSH
62959: FOR_TO
62960: IFFALSE 63117
// begin _x := ShiftX ( x , d , r + i ) ;
62962: LD_ADDR_VAR 0 5
62966: PUSH
62967: LD_VAR 0 4
62971: PPUSH
62972: LD_VAR 0 8
62976: PPUSH
62977: LD_VAR 0 9
62981: PUSH
62982: LD_VAR 0 10
62986: PLUS
62987: PPUSH
62988: CALL_OW 272
62992: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62993: LD_ADDR_VAR 0 7
62997: PUSH
62998: LD_VAR 0 6
63002: PPUSH
63003: LD_VAR 0 8
63007: PPUSH
63008: LD_VAR 0 9
63012: PUSH
63013: LD_VAR 0 10
63017: PLUS
63018: PPUSH
63019: CALL_OW 273
63023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63024: LD_VAR 0 5
63028: PPUSH
63029: LD_VAR 0 7
63033: PPUSH
63034: CALL_OW 488
63038: PUSH
63039: LD_VAR 0 5
63043: PPUSH
63044: LD_VAR 0 7
63048: PPUSH
63049: CALL_OW 428
63053: PPUSH
63054: CALL_OW 247
63058: PUSH
63059: LD_INT 3
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: IN
63069: NOT
63070: AND
63071: IFFALSE 63115
// begin ComMoveXY ( unit , _x , _y ) ;
63073: LD_VAR 0 1
63077: PPUSH
63078: LD_VAR 0 5
63082: PPUSH
63083: LD_VAR 0 7
63087: PPUSH
63088: CALL_OW 111
// result := [ _x , _y ] ;
63092: LD_ADDR_VAR 0 3
63096: PUSH
63097: LD_VAR 0 5
63101: PUSH
63102: LD_VAR 0 7
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// exit ;
63111: POP
63112: POP
63113: GO 63119
// end ; end ;
63115: GO 62959
63117: POP
63118: POP
// end ;
63119: LD_VAR 0 3
63123: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
63128: PPUSH
// result := 0 ;
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_INT 0
63136: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63137: LD_VAR 0 1
63141: PUSH
63142: LD_INT 0
63144: LESS
63145: PUSH
63146: LD_VAR 0 1
63150: PUSH
63151: LD_INT 8
63153: GREATER
63154: OR
63155: PUSH
63156: LD_VAR 0 2
63160: PUSH
63161: LD_INT 0
63163: LESS
63164: OR
63165: PUSH
63166: LD_VAR 0 2
63170: PUSH
63171: LD_INT 8
63173: GREATER
63174: OR
63175: IFFALSE 63179
// exit ;
63177: GO 63254
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63179: LD_ADDR_VAR 0 4
63183: PUSH
63184: LD_INT 22
63186: PUSH
63187: LD_VAR 0 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PPUSH
63196: CALL_OW 69
63200: PUSH
63201: FOR_IN
63202: IFFALSE 63252
// begin un := UnitShoot ( i ) ;
63204: LD_ADDR_VAR 0 5
63208: PUSH
63209: LD_VAR 0 4
63213: PPUSH
63214: CALL_OW 504
63218: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63219: LD_VAR 0 5
63223: PPUSH
63224: CALL_OW 255
63228: PUSH
63229: LD_VAR 0 1
63233: EQUAL
63234: IFFALSE 63250
// begin result := un ;
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: LD_VAR 0 5
63245: ST_TO_ADDR
// exit ;
63246: POP
63247: POP
63248: GO 63254
// end ; end ;
63250: GO 63201
63252: POP
63253: POP
// end ;
63254: LD_VAR 0 3
63258: RET
// export function GetCargoBay ( units ) ; begin
63259: LD_INT 0
63261: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63262: LD_ADDR_VAR 0 2
63266: PUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 34
63277: PUSH
63278: LD_INT 12
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 34
63287: PUSH
63288: LD_INT 51
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 34
63297: PUSH
63298: LD_INT 32
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 34
63307: PUSH
63308: LD_EXP 95
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: PPUSH
63324: CALL_OW 72
63328: ST_TO_ADDR
// end ;
63329: LD_VAR 0 2
63333: RET
// export function Negate ( value ) ; begin
63334: LD_INT 0
63336: PPUSH
// result := not value ;
63337: LD_ADDR_VAR 0 2
63341: PUSH
63342: LD_VAR 0 1
63346: NOT
63347: ST_TO_ADDR
// end ;
63348: LD_VAR 0 2
63352: RET
// export function Inc ( value ) ; begin
63353: LD_INT 0
63355: PPUSH
// result := value + 1 ;
63356: LD_ADDR_VAR 0 2
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_INT 1
63368: PLUS
63369: ST_TO_ADDR
// end ;
63370: LD_VAR 0 2
63374: RET
// export function Dec ( value ) ; begin
63375: LD_INT 0
63377: PPUSH
// result := value - 1 ;
63378: LD_ADDR_VAR 0 2
63382: PUSH
63383: LD_VAR 0 1
63387: PUSH
63388: LD_INT 1
63390: MINUS
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63407: LD_VAR 0 1
63411: PPUSH
63412: LD_VAR 0 2
63416: PPUSH
63417: CALL_OW 488
63421: NOT
63422: PUSH
63423: LD_VAR 0 3
63427: PPUSH
63428: LD_VAR 0 4
63432: PPUSH
63433: CALL_OW 488
63437: NOT
63438: OR
63439: IFFALSE 63452
// begin result := - 1 ;
63441: LD_ADDR_VAR 0 5
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: ST_TO_ADDR
// exit ;
63450: GO 63687
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63452: LD_ADDR_VAR 0 12
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: LD_VAR 0 2
63466: PPUSH
63467: LD_VAR 0 3
63471: PPUSH
63472: LD_VAR 0 4
63476: PPUSH
63477: CALL 62535 0 4
63481: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63482: LD_ADDR_VAR 0 11
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: LD_VAR 0 2
63496: PPUSH
63497: LD_VAR 0 12
63501: PUSH
63502: LD_INT 1
63504: ARRAY
63505: PPUSH
63506: LD_VAR 0 12
63510: PUSH
63511: LD_INT 2
63513: ARRAY
63514: PPUSH
63515: CALL_OW 298
63519: ST_TO_ADDR
// distance := 9999 ;
63520: LD_ADDR_VAR 0 10
63524: PUSH
63525: LD_INT 9999
63527: ST_TO_ADDR
// for i := 0 to 5 do
63528: LD_ADDR_VAR 0 6
63532: PUSH
63533: DOUBLE
63534: LD_INT 0
63536: DEC
63537: ST_TO_ADDR
63538: LD_INT 5
63540: PUSH
63541: FOR_TO
63542: IFFALSE 63685
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63544: LD_ADDR_VAR 0 7
63548: PUSH
63549: LD_VAR 0 1
63553: PPUSH
63554: LD_VAR 0 6
63558: PPUSH
63559: LD_VAR 0 11
63563: PPUSH
63564: CALL_OW 272
63568: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63569: LD_ADDR_VAR 0 8
63573: PUSH
63574: LD_VAR 0 2
63578: PPUSH
63579: LD_VAR 0 6
63583: PPUSH
63584: LD_VAR 0 11
63588: PPUSH
63589: CALL_OW 273
63593: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63594: LD_VAR 0 7
63598: PPUSH
63599: LD_VAR 0 8
63603: PPUSH
63604: CALL_OW 488
63608: NOT
63609: IFFALSE 63613
// continue ;
63611: GO 63541
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63613: LD_ADDR_VAR 0 9
63617: PUSH
63618: LD_VAR 0 12
63622: PUSH
63623: LD_INT 1
63625: ARRAY
63626: PPUSH
63627: LD_VAR 0 12
63631: PUSH
63632: LD_INT 2
63634: ARRAY
63635: PPUSH
63636: LD_VAR 0 7
63640: PPUSH
63641: LD_VAR 0 8
63645: PPUSH
63646: CALL_OW 298
63650: ST_TO_ADDR
// if tmp < distance then
63651: LD_VAR 0 9
63655: PUSH
63656: LD_VAR 0 10
63660: LESS
63661: IFFALSE 63683
// begin result := i ;
63663: LD_ADDR_VAR 0 5
63667: PUSH
63668: LD_VAR 0 6
63672: ST_TO_ADDR
// distance := tmp ;
63673: LD_ADDR_VAR 0 10
63677: PUSH
63678: LD_VAR 0 9
63682: ST_TO_ADDR
// end ; end ;
63683: GO 63541
63685: POP
63686: POP
// end ;
63687: LD_VAR 0 5
63691: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
// if not driver or not IsInUnit ( driver ) then
63696: LD_VAR 0 1
63700: NOT
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 310
63711: NOT
63712: OR
63713: IFFALSE 63717
// exit ;
63715: GO 63807
// vehicle := IsInUnit ( driver ) ;
63717: LD_ADDR_VAR 0 3
63721: PUSH
63722: LD_VAR 0 1
63726: PPUSH
63727: CALL_OW 310
63731: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63732: LD_VAR 0 1
63736: PPUSH
63737: LD_STRING \
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: PUSH
63767: LD_STRING E
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_VAR 0 3
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PPUSH
63803: CALL_OW 446
// end ;
63807: LD_VAR 0 2
63811: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63812: LD_INT 0
63814: PPUSH
63815: PPUSH
// if not driver or not IsInUnit ( driver ) then
63816: LD_VAR 0 1
63820: NOT
63821: PUSH
63822: LD_VAR 0 1
63826: PPUSH
63827: CALL_OW 310
63831: NOT
63832: OR
63833: IFFALSE 63837
// exit ;
63835: GO 63927
// vehicle := IsInUnit ( driver ) ;
63837: LD_ADDR_VAR 0 3
63841: PUSH
63842: LD_VAR 0 1
63846: PPUSH
63847: CALL_OW 310
63851: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63852: LD_VAR 0 1
63856: PPUSH
63857: LD_STRING \
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: PUSH
63887: LD_STRING E
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_VAR 0 3
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PPUSH
63923: CALL_OW 447
// end ;
63927: LD_VAR 0 2
63931: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63932: LD_INT 0
63934: PPUSH
63935: PPUSH
63936: PPUSH
// tmp := [ ] ;
63937: LD_ADDR_VAR 0 5
63941: PUSH
63942: EMPTY
63943: ST_TO_ADDR
// for i in units do
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: LD_VAR 0 1
63953: PUSH
63954: FOR_IN
63955: IFFALSE 63993
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63957: LD_ADDR_VAR 0 5
63961: PUSH
63962: LD_VAR 0 5
63966: PPUSH
63967: LD_VAR 0 5
63971: PUSH
63972: LD_INT 1
63974: PLUS
63975: PPUSH
63976: LD_VAR 0 4
63980: PPUSH
63981: CALL_OW 256
63985: PPUSH
63986: CALL_OW 2
63990: ST_TO_ADDR
63991: GO 63954
63993: POP
63994: POP
// if not tmp then
63995: LD_VAR 0 5
63999: NOT
64000: IFFALSE 64004
// exit ;
64002: GO 64052
// if asc then
64004: LD_VAR 0 2
64008: IFFALSE 64032
// result := SortListByListAsc ( units , tmp ) else
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_VAR 0 5
64024: PPUSH
64025: CALL_OW 76
64029: ST_TO_ADDR
64030: GO 64052
// result := SortListByListDesc ( units , tmp ) ;
64032: LD_ADDR_VAR 0 3
64036: PUSH
64037: LD_VAR 0 1
64041: PPUSH
64042: LD_VAR 0 5
64046: PPUSH
64047: CALL_OW 77
64051: ST_TO_ADDR
// end ;
64052: LD_VAR 0 3
64056: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64057: LD_INT 0
64059: PPUSH
64060: PPUSH
// task := GetTaskList ( mech ) ;
64061: LD_ADDR_VAR 0 4
64065: PUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: CALL_OW 437
64075: ST_TO_ADDR
// if not task then
64076: LD_VAR 0 4
64080: NOT
64081: IFFALSE 64085
// exit ;
64083: GO 64127
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64085: LD_ADDR_VAR 0 3
64089: PUSH
64090: LD_VAR 0 4
64094: PUSH
64095: LD_INT 1
64097: ARRAY
64098: PUSH
64099: LD_INT 1
64101: ARRAY
64102: PUSH
64103: LD_STRING r
64105: EQUAL
64106: PUSH
64107: LD_VAR 0 4
64111: PUSH
64112: LD_INT 1
64114: ARRAY
64115: PUSH
64116: LD_INT 4
64118: ARRAY
64119: PUSH
64120: LD_VAR 0 2
64124: EQUAL
64125: AND
64126: ST_TO_ADDR
// end ;
64127: LD_VAR 0 3
64131: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64132: LD_INT 0
64134: PPUSH
// SetDir ( unit , d ) ;
64135: LD_VAR 0 1
64139: PPUSH
64140: LD_VAR 0 4
64144: PPUSH
64145: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64149: LD_VAR 0 1
64153: PPUSH
64154: LD_VAR 0 2
64158: PPUSH
64159: LD_VAR 0 3
64163: PPUSH
64164: LD_VAR 0 5
64168: PPUSH
64169: CALL_OW 48
// end ;
64173: LD_VAR 0 6
64177: RET
// export function ToNaturalNumber ( number ) ; begin
64178: LD_INT 0
64180: PPUSH
// result := number div 1 ;
64181: LD_ADDR_VAR 0 2
64185: PUSH
64186: LD_VAR 0 1
64190: PUSH
64191: LD_INT 1
64193: DIV
64194: ST_TO_ADDR
// if number < 0 then
64195: LD_VAR 0 1
64199: PUSH
64200: LD_INT 0
64202: LESS
64203: IFFALSE 64213
// result := 0 ;
64205: LD_ADDR_VAR 0 2
64209: PUSH
64210: LD_INT 0
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 2
64217: RET
// export function SortByClass ( units , class ) ; var un ; begin
64218: LD_INT 0
64220: PPUSH
64221: PPUSH
// if not units or not class then
64222: LD_VAR 0 1
64226: NOT
64227: PUSH
64228: LD_VAR 0 2
64232: NOT
64233: OR
64234: IFFALSE 64238
// exit ;
64236: GO 64333
// result := [ ] ;
64238: LD_ADDR_VAR 0 3
64242: PUSH
64243: EMPTY
64244: ST_TO_ADDR
// for un in units do
64245: LD_ADDR_VAR 0 4
64249: PUSH
64250: LD_VAR 0 1
64254: PUSH
64255: FOR_IN
64256: IFFALSE 64331
// if GetClass ( un ) = class then
64258: LD_VAR 0 4
64262: PPUSH
64263: CALL_OW 257
64267: PUSH
64268: LD_VAR 0 2
64272: EQUAL
64273: IFFALSE 64300
// result := Insert ( result , 1 , un ) else
64275: LD_ADDR_VAR 0 3
64279: PUSH
64280: LD_VAR 0 3
64284: PPUSH
64285: LD_INT 1
64287: PPUSH
64288: LD_VAR 0 4
64292: PPUSH
64293: CALL_OW 2
64297: ST_TO_ADDR
64298: GO 64329
// result := Replace ( result , result + 1 , un ) ;
64300: LD_ADDR_VAR 0 3
64304: PUSH
64305: LD_VAR 0 3
64309: PPUSH
64310: LD_VAR 0 3
64314: PUSH
64315: LD_INT 1
64317: PLUS
64318: PPUSH
64319: LD_VAR 0 4
64323: PPUSH
64324: CALL_OW 1
64328: ST_TO_ADDR
64329: GO 64255
64331: POP
64332: POP
// end ;
64333: LD_VAR 0 3
64337: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64338: LD_INT 0
64340: PPUSH
64341: PPUSH
64342: PPUSH
64343: PPUSH
64344: PPUSH
64345: PPUSH
64346: PPUSH
// result := [ ] ;
64347: LD_ADDR_VAR 0 4
64351: PUSH
64352: EMPTY
64353: ST_TO_ADDR
// if x - r < 0 then
64354: LD_VAR 0 1
64358: PUSH
64359: LD_VAR 0 3
64363: MINUS
64364: PUSH
64365: LD_INT 0
64367: LESS
64368: IFFALSE 64380
// min_x := 0 else
64370: LD_ADDR_VAR 0 8
64374: PUSH
64375: LD_INT 0
64377: ST_TO_ADDR
64378: GO 64396
// min_x := x - r ;
64380: LD_ADDR_VAR 0 8
64384: PUSH
64385: LD_VAR 0 1
64389: PUSH
64390: LD_VAR 0 3
64394: MINUS
64395: ST_TO_ADDR
// if y - r < 0 then
64396: LD_VAR 0 2
64400: PUSH
64401: LD_VAR 0 3
64405: MINUS
64406: PUSH
64407: LD_INT 0
64409: LESS
64410: IFFALSE 64422
// min_y := 0 else
64412: LD_ADDR_VAR 0 7
64416: PUSH
64417: LD_INT 0
64419: ST_TO_ADDR
64420: GO 64438
// min_y := y - r ;
64422: LD_ADDR_VAR 0 7
64426: PUSH
64427: LD_VAR 0 2
64431: PUSH
64432: LD_VAR 0 3
64436: MINUS
64437: ST_TO_ADDR
// max_x := x + r ;
64438: LD_ADDR_VAR 0 9
64442: PUSH
64443: LD_VAR 0 1
64447: PUSH
64448: LD_VAR 0 3
64452: PLUS
64453: ST_TO_ADDR
// max_y := y + r ;
64454: LD_ADDR_VAR 0 10
64458: PUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_VAR 0 3
64468: PLUS
64469: ST_TO_ADDR
// for _x = min_x to max_x do
64470: LD_ADDR_VAR 0 5
64474: PUSH
64475: DOUBLE
64476: LD_VAR 0 8
64480: DEC
64481: ST_TO_ADDR
64482: LD_VAR 0 9
64486: PUSH
64487: FOR_TO
64488: IFFALSE 64589
// for _y = min_y to max_y do
64490: LD_ADDR_VAR 0 6
64494: PUSH
64495: DOUBLE
64496: LD_VAR 0 7
64500: DEC
64501: ST_TO_ADDR
64502: LD_VAR 0 10
64506: PUSH
64507: FOR_TO
64508: IFFALSE 64585
// begin if not ValidHex ( _x , _y ) then
64510: LD_VAR 0 5
64514: PPUSH
64515: LD_VAR 0 6
64519: PPUSH
64520: CALL_OW 488
64524: NOT
64525: IFFALSE 64529
// continue ;
64527: GO 64507
// if GetResourceTypeXY ( _x , _y ) then
64529: LD_VAR 0 5
64533: PPUSH
64534: LD_VAR 0 6
64538: PPUSH
64539: CALL_OW 283
64543: IFFALSE 64583
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64545: LD_ADDR_VAR 0 4
64549: PUSH
64550: LD_VAR 0 4
64554: PPUSH
64555: LD_VAR 0 4
64559: PUSH
64560: LD_INT 1
64562: PLUS
64563: PPUSH
64564: LD_VAR 0 5
64568: PUSH
64569: LD_VAR 0 6
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PPUSH
64578: CALL_OW 1
64582: ST_TO_ADDR
// end ;
64583: GO 64507
64585: POP
64586: POP
64587: GO 64487
64589: POP
64590: POP
// end ;
64591: LD_VAR 0 4
64595: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64596: LD_INT 0
64598: PPUSH
64599: PPUSH
64600: PPUSH
64601: PPUSH
64602: PPUSH
64603: PPUSH
64604: PPUSH
64605: PPUSH
// if not units then
64606: LD_VAR 0 1
64610: NOT
64611: IFFALSE 64615
// exit ;
64613: GO 65141
// result := UnitFilter ( units , [ f_ok ] ) ;
64615: LD_ADDR_VAR 0 3
64619: PUSH
64620: LD_VAR 0 1
64624: PPUSH
64625: LD_INT 50
64627: PUSH
64628: EMPTY
64629: LIST
64630: PPUSH
64631: CALL_OW 72
64635: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64636: LD_ADDR_VAR 0 8
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_INT 1
64648: ARRAY
64649: PPUSH
64650: CALL_OW 255
64654: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64655: LD_ADDR_VAR 0 10
64659: PUSH
64660: LD_INT 29
64662: PUSH
64663: LD_EXP 98
64667: PUSH
64668: LD_INT 49
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// if not result then
64676: LD_VAR 0 3
64680: NOT
64681: IFFALSE 64685
// exit ;
64683: GO 65141
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64685: LD_ADDR_VAR 0 5
64689: PUSH
64690: LD_INT 81
64692: PUSH
64693: LD_VAR 0 8
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PPUSH
64702: CALL_OW 69
64706: ST_TO_ADDR
// for i in result do
64707: LD_ADDR_VAR 0 4
64711: PUSH
64712: LD_VAR 0 3
64716: PUSH
64717: FOR_IN
64718: IFFALSE 65139
// begin tag := GetTag ( i ) + 1 ;
64720: LD_ADDR_VAR 0 9
64724: PUSH
64725: LD_VAR 0 4
64729: PPUSH
64730: CALL_OW 110
64734: PUSH
64735: LD_INT 1
64737: PLUS
64738: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64739: LD_ADDR_VAR 0 7
64743: PUSH
64744: LD_VAR 0 4
64748: PPUSH
64749: CALL_OW 250
64753: PPUSH
64754: LD_VAR 0 4
64758: PPUSH
64759: CALL_OW 251
64763: PPUSH
64764: LD_INT 6
64766: PPUSH
64767: CALL 64338 0 3
64771: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64772: LD_VAR 0 4
64776: PPUSH
64777: CALL_OW 247
64781: PUSH
64782: LD_INT 2
64784: EQUAL
64785: PUSH
64786: LD_VAR 0 7
64790: AND
64791: PUSH
64792: LD_VAR 0 4
64796: PPUSH
64797: CALL_OW 264
64801: PUSH
64802: LD_VAR 0 10
64806: IN
64807: NOT
64808: AND
64809: IFFALSE 64848
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64811: LD_VAR 0 4
64815: PPUSH
64816: LD_VAR 0 7
64820: PUSH
64821: LD_INT 1
64823: ARRAY
64824: PUSH
64825: LD_INT 1
64827: ARRAY
64828: PPUSH
64829: LD_VAR 0 7
64833: PUSH
64834: LD_INT 1
64836: ARRAY
64837: PUSH
64838: LD_INT 2
64840: ARRAY
64841: PPUSH
64842: CALL_OW 116
64846: GO 65137
// if path > tag then
64848: LD_VAR 0 2
64852: PUSH
64853: LD_VAR 0 9
64857: GREATER
64858: IFFALSE 65066
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64860: LD_ADDR_VAR 0 6
64864: PUSH
64865: LD_VAR 0 5
64869: PPUSH
64870: LD_INT 91
64872: PUSH
64873: LD_VAR 0 4
64877: PUSH
64878: LD_INT 8
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: LIST
64885: PPUSH
64886: CALL_OW 72
64890: ST_TO_ADDR
// if nearEnemy then
64891: LD_VAR 0 6
64895: IFFALSE 64964
// begin if GetWeapon ( i ) = ru_time_lapser then
64897: LD_VAR 0 4
64901: PPUSH
64902: CALL_OW 264
64906: PUSH
64907: LD_INT 49
64909: EQUAL
64910: IFFALSE 64938
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64912: LD_VAR 0 4
64916: PPUSH
64917: LD_VAR 0 6
64921: PPUSH
64922: LD_VAR 0 4
64926: PPUSH
64927: CALL_OW 74
64931: PPUSH
64932: CALL_OW 112
64936: GO 64962
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64938: LD_VAR 0 4
64942: PPUSH
64943: LD_VAR 0 6
64947: PPUSH
64948: LD_VAR 0 4
64952: PPUSH
64953: CALL_OW 74
64957: PPUSH
64958: CALL_OW 115
// end else
64962: GO 65064
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64964: LD_VAR 0 4
64968: PPUSH
64969: LD_VAR 0 2
64973: PUSH
64974: LD_VAR 0 9
64978: ARRAY
64979: PUSH
64980: LD_INT 1
64982: ARRAY
64983: PPUSH
64984: LD_VAR 0 2
64988: PUSH
64989: LD_VAR 0 9
64993: ARRAY
64994: PUSH
64995: LD_INT 2
64997: ARRAY
64998: PPUSH
64999: CALL_OW 297
65003: PUSH
65004: LD_INT 6
65006: GREATER
65007: IFFALSE 65050
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65009: LD_VAR 0 4
65013: PPUSH
65014: LD_VAR 0 2
65018: PUSH
65019: LD_VAR 0 9
65023: ARRAY
65024: PUSH
65025: LD_INT 1
65027: ARRAY
65028: PPUSH
65029: LD_VAR 0 2
65033: PUSH
65034: LD_VAR 0 9
65038: ARRAY
65039: PUSH
65040: LD_INT 2
65042: ARRAY
65043: PPUSH
65044: CALL_OW 114
65048: GO 65064
// SetTag ( i , tag ) ;
65050: LD_VAR 0 4
65054: PPUSH
65055: LD_VAR 0 9
65059: PPUSH
65060: CALL_OW 109
// end else
65064: GO 65137
// if enemy then
65066: LD_VAR 0 5
65070: IFFALSE 65137
// begin if GetWeapon ( i ) = ru_time_lapser then
65072: LD_VAR 0 4
65076: PPUSH
65077: CALL_OW 264
65081: PUSH
65082: LD_INT 49
65084: EQUAL
65085: IFFALSE 65113
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65087: LD_VAR 0 4
65091: PPUSH
65092: LD_VAR 0 5
65096: PPUSH
65097: LD_VAR 0 4
65101: PPUSH
65102: CALL_OW 74
65106: PPUSH
65107: CALL_OW 112
65111: GO 65137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65113: LD_VAR 0 4
65117: PPUSH
65118: LD_VAR 0 5
65122: PPUSH
65123: LD_VAR 0 4
65127: PPUSH
65128: CALL_OW 74
65132: PPUSH
65133: CALL_OW 115
// end ; end ;
65137: GO 64717
65139: POP
65140: POP
// end ;
65141: LD_VAR 0 3
65145: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
65150: PPUSH
// if not unit or IsInUnit ( unit ) then
65151: LD_VAR 0 1
65155: NOT
65156: PUSH
65157: LD_VAR 0 1
65161: PPUSH
65162: CALL_OW 310
65166: OR
65167: IFFALSE 65171
// exit ;
65169: GO 65262
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65171: LD_ADDR_VAR 0 4
65175: PUSH
65176: LD_VAR 0 1
65180: PPUSH
65181: CALL_OW 250
65185: PPUSH
65186: LD_VAR 0 2
65190: PPUSH
65191: LD_INT 1
65193: PPUSH
65194: CALL_OW 272
65198: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65199: LD_ADDR_VAR 0 5
65203: PUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL_OW 251
65213: PPUSH
65214: LD_VAR 0 2
65218: PPUSH
65219: LD_INT 1
65221: PPUSH
65222: CALL_OW 273
65226: ST_TO_ADDR
// if ValidHex ( x , y ) then
65227: LD_VAR 0 4
65231: PPUSH
65232: LD_VAR 0 5
65236: PPUSH
65237: CALL_OW 488
65241: IFFALSE 65262
// ComTurnXY ( unit , x , y ) ;
65243: LD_VAR 0 1
65247: PPUSH
65248: LD_VAR 0 4
65252: PPUSH
65253: LD_VAR 0 5
65257: PPUSH
65258: CALL_OW 118
// end ;
65262: LD_VAR 0 3
65266: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65267: LD_INT 0
65269: PPUSH
65270: PPUSH
// result := false ;
65271: LD_ADDR_VAR 0 3
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// if not units then
65279: LD_VAR 0 2
65283: NOT
65284: IFFALSE 65288
// exit ;
65286: GO 65333
// for i in units do
65288: LD_ADDR_VAR 0 4
65292: PUSH
65293: LD_VAR 0 2
65297: PUSH
65298: FOR_IN
65299: IFFALSE 65331
// if See ( side , i ) then
65301: LD_VAR 0 1
65305: PPUSH
65306: LD_VAR 0 4
65310: PPUSH
65311: CALL_OW 292
65315: IFFALSE 65329
// begin result := true ;
65317: LD_ADDR_VAR 0 3
65321: PUSH
65322: LD_INT 1
65324: ST_TO_ADDR
// exit ;
65325: POP
65326: POP
65327: GO 65333
// end ;
65329: GO 65298
65331: POP
65332: POP
// end ;
65333: LD_VAR 0 3
65337: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65338: LD_INT 0
65340: PPUSH
65341: PPUSH
65342: PPUSH
65343: PPUSH
// if not unit or not points then
65344: LD_VAR 0 1
65348: NOT
65349: PUSH
65350: LD_VAR 0 2
65354: NOT
65355: OR
65356: IFFALSE 65360
// exit ;
65358: GO 65450
// dist := 99999 ;
65360: LD_ADDR_VAR 0 5
65364: PUSH
65365: LD_INT 99999
65367: ST_TO_ADDR
// for i in points do
65368: LD_ADDR_VAR 0 4
65372: PUSH
65373: LD_VAR 0 2
65377: PUSH
65378: FOR_IN
65379: IFFALSE 65448
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65381: LD_ADDR_VAR 0 6
65385: PUSH
65386: LD_VAR 0 1
65390: PPUSH
65391: LD_VAR 0 4
65395: PUSH
65396: LD_INT 1
65398: ARRAY
65399: PPUSH
65400: LD_VAR 0 4
65404: PUSH
65405: LD_INT 2
65407: ARRAY
65408: PPUSH
65409: CALL_OW 297
65413: ST_TO_ADDR
// if tmpDist < dist then
65414: LD_VAR 0 6
65418: PUSH
65419: LD_VAR 0 5
65423: LESS
65424: IFFALSE 65446
// begin result := i ;
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: LD_VAR 0 4
65435: ST_TO_ADDR
// dist := tmpDist ;
65436: LD_ADDR_VAR 0 5
65440: PUSH
65441: LD_VAR 0 6
65445: ST_TO_ADDR
// end ; end ;
65446: GO 65378
65448: POP
65449: POP
// end ;
65450: LD_VAR 0 3
65454: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65455: LD_INT 0
65457: PPUSH
// uc_side := side ;
65458: LD_ADDR_OWVAR 20
65462: PUSH
65463: LD_VAR 0 1
65467: ST_TO_ADDR
// uc_nation := 3 ;
65468: LD_ADDR_OWVAR 21
65472: PUSH
65473: LD_INT 3
65475: ST_TO_ADDR
// vc_chassis := 25 ;
65476: LD_ADDR_OWVAR 37
65480: PUSH
65481: LD_INT 25
65483: ST_TO_ADDR
// vc_engine := engine_siberite ;
65484: LD_ADDR_OWVAR 39
65488: PUSH
65489: LD_INT 3
65491: ST_TO_ADDR
// vc_control := control_computer ;
65492: LD_ADDR_OWVAR 38
65496: PUSH
65497: LD_INT 3
65499: ST_TO_ADDR
// vc_weapon := 59 ;
65500: LD_ADDR_OWVAR 40
65504: PUSH
65505: LD_INT 59
65507: ST_TO_ADDR
// result := CreateVehicle ;
65508: LD_ADDR_VAR 0 5
65512: PUSH
65513: CALL_OW 45
65517: ST_TO_ADDR
// SetDir ( result , d ) ;
65518: LD_VAR 0 5
65522: PPUSH
65523: LD_VAR 0 4
65527: PPUSH
65528: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65532: LD_VAR 0 5
65536: PPUSH
65537: LD_VAR 0 2
65541: PPUSH
65542: LD_VAR 0 3
65546: PPUSH
65547: LD_INT 0
65549: PPUSH
65550: CALL_OW 48
// end ;
65554: LD_VAR 0 5
65558: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65559: LD_INT 0
65561: PPUSH
65562: PPUSH
65563: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65564: LD_ADDR_VAR 0 2
65568: PUSH
65569: LD_INT 0
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65587: LD_VAR 0 1
65591: NOT
65592: PUSH
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 264
65602: PUSH
65603: LD_INT 12
65605: PUSH
65606: LD_INT 51
65608: PUSH
65609: LD_INT 32
65611: PUSH
65612: LD_EXP 95
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: IN
65623: NOT
65624: OR
65625: IFFALSE 65629
// exit ;
65627: GO 65727
// for i := 1 to 3 do
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: DOUBLE
65635: LD_INT 1
65637: DEC
65638: ST_TO_ADDR
65639: LD_INT 3
65641: PUSH
65642: FOR_TO
65643: IFFALSE 65725
// begin tmp := GetCargo ( cargo , i ) ;
65645: LD_ADDR_VAR 0 4
65649: PUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: LD_VAR 0 3
65659: PPUSH
65660: CALL_OW 289
65664: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65665: LD_ADDR_VAR 0 2
65669: PUSH
65670: LD_VAR 0 2
65674: PPUSH
65675: LD_VAR 0 3
65679: PPUSH
65680: LD_VAR 0 4
65684: PPUSH
65685: CALL_OW 1
65689: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65690: LD_ADDR_VAR 0 2
65694: PUSH
65695: LD_VAR 0 2
65699: PPUSH
65700: LD_INT 4
65702: PPUSH
65703: LD_VAR 0 2
65707: PUSH
65708: LD_INT 4
65710: ARRAY
65711: PUSH
65712: LD_VAR 0 4
65716: PLUS
65717: PPUSH
65718: CALL_OW 1
65722: ST_TO_ADDR
// end ;
65723: GO 65642
65725: POP
65726: POP
// end ;
65727: LD_VAR 0 2
65731: RET
// export function Length ( array ) ; begin
65732: LD_INT 0
65734: PPUSH
// result := array + 0 ;
65735: LD_ADDR_VAR 0 2
65739: PUSH
65740: LD_VAR 0 1
65744: PUSH
65745: LD_INT 0
65747: PLUS
65748: ST_TO_ADDR
// end ;
65749: LD_VAR 0 2
65753: RET
// export function PrepareArray ( array ) ; begin
65754: LD_INT 0
65756: PPUSH
// result := array diff 0 ;
65757: LD_ADDR_VAR 0 2
65761: PUSH
65762: LD_VAR 0 1
65766: PUSH
65767: LD_INT 0
65769: DIFF
65770: ST_TO_ADDR
// if not result [ 1 ] then
65771: LD_VAR 0 2
65775: PUSH
65776: LD_INT 1
65778: ARRAY
65779: NOT
65780: IFFALSE 65800
// result := Delete ( result , 1 ) ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_VAR 0 2
65791: PPUSH
65792: LD_INT 1
65794: PPUSH
65795: CALL_OW 3
65799: ST_TO_ADDR
// end ; end_of_file
65800: LD_VAR 0 2
65804: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65805: LD_VAR 0 1
65809: PPUSH
65810: LD_VAR 0 2
65814: PPUSH
65815: LD_VAR 0 3
65819: PPUSH
65820: LD_VAR 0 4
65824: PPUSH
65825: LD_VAR 0 5
65829: PPUSH
65830: LD_VAR 0 6
65834: PPUSH
65835: CALL 4355 0 6
// end ;
65839: PPOPN 6
65841: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65842: LD_INT 0
65844: PPUSH
// begin if not units then
65845: LD_VAR 0 1
65849: NOT
65850: IFFALSE 65854
// exit ;
65852: GO 65854
// end ;
65854: PPOPN 7
65856: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65857: CALL 4326 0 0
// end ;
65861: PPOPN 1
65863: END
