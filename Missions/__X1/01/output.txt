// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3321 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 17
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 18
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 19
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 20
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 21
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; var i , un ; begin
 109: LD_INT 0
 111: PPUSH
 112: PPUSH
 113: PPUSH
// InGameOn ;
 114: CALL_OW 8
// PrepareKurtGroup ;
 118: CALL 3168 0 0
// PrepareSheikGroup ;
 122: CALL 2806 0 0
// specGroup := [ ] ;
 126: LD_ADDR_EXP 16
 130: PUSH
 131: EMPTY
 132: ST_TO_ADDR
// for i := 1 to 3 do
 133: LD_ADDR_VAR 0 2
 137: PUSH
 138: DOUBLE
 139: LD_INT 1
 141: DEC
 142: ST_TO_ADDR
 143: LD_INT 3
 145: PUSH
 146: FOR_TO
 147: IFFALSE 265
// begin uc_side := 5 ;
 149: LD_ADDR_OWVAR 20
 153: PUSH
 154: LD_INT 5
 156: ST_TO_ADDR
// uc_nation := 2 ;
 157: LD_ADDR_OWVAR 21
 161: PUSH
 162: LD_INT 2
 164: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 165: LD_INT 0
 167: PPUSH
 168: LD_INT 1
 170: PPUSH
 171: LD_INT 3
 173: PPUSH
 174: CALL_OW 380
// un := CreateHuman ;
 178: LD_ADDR_VAR 0 3
 182: PUSH
 183: CALL_OW 44
 187: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 188: LD_VAR 0 3
 192: PPUSH
 193: LD_INT 3
 195: PPUSH
 196: LD_INT 0
 198: PPUSH
 199: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 203: LD_ADDR_EXP 16
 207: PUSH
 208: LD_EXP 16
 212: PPUSH
 213: LD_EXP 16
 217: PUSH
 218: LD_INT 1
 220: PLUS
 221: PPUSH
 222: LD_VAR 0 3
 226: PPUSH
 227: CALL_OW 1
 231: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 232: LD_VAR 0 3
 236: PPUSH
 237: LD_INT 92
 239: PPUSH
 240: LD_INT 66
 242: PPUSH
 243: CALL_OW 111
// AddComHold ( un ) ;
 247: LD_VAR 0 3
 251: PPUSH
 252: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 256: LD_INT 18
 258: PPUSH
 259: CALL_OW 67
// end ;
 263: GO 146
 265: POP
 266: POP
// PrepareHeikeGroup ;
 267: CALL 2718 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 271: LD_INT 51
 273: PPUSH
 274: LD_INT 85
 276: PPUSH
 277: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: LD_INT 5
 289: PPUSH
 290: LD_INT 32763
 292: NEG
 293: PPUSH
 294: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 298: LD_INT 1
 300: PPUSH
 301: LD_INT 1
 303: PPUSH
 304: LD_INT 5
 306: PPUSH
 307: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 311: LD_EXP 1
 315: PPUSH
 316: LD_INT 50
 318: PPUSH
 319: LD_INT 86
 321: PPUSH
 322: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 326: LD_EXP 5
 330: PPUSH
 331: LD_INT 51
 333: PPUSH
 334: LD_INT 90
 336: PPUSH
 337: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 341: LD_EXP 1
 345: PPUSH
 346: LD_EXP 5
 350: PPUSH
 351: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 355: LD_EXP 5
 359: PPUSH
 360: LD_EXP 1
 364: PPUSH
 365: CALL_OW 179
// wait ( 0 0$3 ) ;
 369: LD_INT 105
 371: PPUSH
 372: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 376: LD_EXP 5
 380: PPUSH
 381: LD_STRING DK-1
 383: PPUSH
 384: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 388: LD_EXP 1
 392: PPUSH
 393: LD_STRING DH-1
 395: PPUSH
 396: CALL_OW 88
// wait ( 0 0$2 ) ;
 400: LD_INT 70
 402: PPUSH
 403: CALL_OW 67
// PrepareArabian ;
 407: CALL 3569 0 0
// InGameOff ;
 411: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 415: LD_STRING O1
 417: PPUSH
 418: CALL_OW 337
// goWithHeike := true ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// SaveForQuickRestart ;
 430: CALL_OW 22
// end ;
 434: LD_VAR 0 1
 438: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 439: LD_INT 2
 441: PPUSH
 442: LD_INT 5
 444: PPUSH
 445: CALL_OW 81
 449: PUSH
 450: LD_INT 2
 452: EQUAL
 453: IFFALSE 599
 455: GO 457
 457: DISABLE
 458: LD_INT 0
 460: PPUSH
// begin goWithHeike := false ;
 461: LD_ADDR_EXP 18
 465: PUSH
 466: LD_INT 0
 468: ST_TO_ADDR
// DialogueOn ;
 469: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 473: LD_EXP 1
 477: PPUSH
 478: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 482: LD_EXP 5
 486: PPUSH
 487: LD_STRING DK-betray-1
 489: PPUSH
 490: CALL_OW 88
// DialogueOff ;
 494: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 498: LD_EXP 5
 502: PPUSH
 503: LD_INT 90
 505: PPUSH
 506: LD_INT 46
 508: PPUSH
 509: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 513: LD_INT 35
 515: PPUSH
 516: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 520: LD_ADDR_VAR 0 1
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 5
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 25
 537: PUSH
 538: LD_INT 1
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: PPUSH
 549: CALL_OW 69
 553: PUSH
 554: LD_EXP 5
 558: DIFF
 559: PUSH
 560: FOR_IN
 561: IFFALSE 579
// ComAttackUnit ( i , Heike ) ;
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_EXP 1
 572: PPUSH
 573: CALL_OW 115
 577: GO 560
 579: POP
 580: POP
// until IsDead ( Heike ) ;
 581: LD_EXP 1
 585: PPUSH
 586: CALL_OW 301
 590: IFFALSE 513
// YouLost ( Betray ) ;
 592: LD_STRING Betray
 594: PPUSH
 595: CALL_OW 104
// end ;
 599: PPOPN 1
 601: END
// every 0 0$1 trigger goWithHeike do
 602: LD_EXP 18
 606: IFFALSE 661
 608: GO 610
 610: DISABLE
// begin enable ;
 611: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 612: LD_EXP 1
 616: PPUSH
 617: LD_EXP 5
 621: PPUSH
 622: CALL_OW 296
 626: PUSH
 627: LD_INT 3
 629: GREATER
 630: IFFALSE 661
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 632: LD_EXP 5
 636: PPUSH
 637: LD_EXP 1
 641: PPUSH
 642: CALL_OW 250
 646: PPUSH
 647: LD_EXP 1
 651: PPUSH
 652: CALL_OW 251
 656: PPUSH
 657: CALL_OW 111
// end ;
 661: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 662: LD_INT 2
 664: PPUSH
 665: LD_INT 47
 667: PPUSH
 668: LD_INT 68
 670: PPUSH
 671: CALL_OW 293
 675: PUSH
 676: LD_EXP 19
 680: NOT
 681: AND
 682: IFFALSE 743
 684: GO 686
 686: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 687: LD_EXP 1
 691: PPUSH
 692: LD_STRING DH-spot-1
 694: PPUSH
 695: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 699: LD_INT 47
 701: PPUSH
 702: LD_INT 68
 704: PPUSH
 705: CALL_OW 428
 709: PPUSH
 710: CALL_OW 313
 714: PUSH
 715: LD_INT 1
 717: ARRAY
 718: PPUSH
 719: LD_STRING DRa-spot-1
 721: PPUSH
 722: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 726: LD_INT 90
 728: PPUSH
 729: LD_INT 41
 731: PPUSH
 732: LD_INT 2
 734: PPUSH
 735: LD_INT 6
 737: NEG
 738: PPUSH
 739: CALL_OW 330
// end ;
 743: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 744: LD_INT 2
 746: PPUSH
 747: LD_INT 93
 749: PPUSH
 750: LD_INT 89
 752: PPUSH
 753: CALL_OW 293
 757: PUSH
 758: LD_EXP 19
 762: NOT
 763: AND
 764: IFFALSE 825
 766: GO 768
 768: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 769: LD_EXP 1
 773: PPUSH
 774: LD_STRING DH-spot-1
 776: PPUSH
 777: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 781: LD_INT 93
 783: PPUSH
 784: LD_INT 89
 786: PPUSH
 787: CALL_OW 428
 791: PPUSH
 792: CALL_OW 313
 796: PUSH
 797: LD_INT 1
 799: ARRAY
 800: PPUSH
 801: LD_STRING DRa-spot-2
 803: PPUSH
 804: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 808: LD_INT 90
 810: PPUSH
 811: LD_INT 41
 813: PPUSH
 814: LD_INT 2
 816: PPUSH
 817: LD_INT 6
 819: NEG
 820: PPUSH
 821: CALL_OW 330
// end ;
 825: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 826: LD_EXP 21
 830: PUSH
 831: LD_EXP 14
 835: PPUSH
 836: LD_INT 101
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 72
 850: AND
 851: IFFALSE 1175
 853: GO 855
 855: DISABLE
 856: LD_INT 0
 858: PPUSH
 859: PPUSH
 860: PPUSH
 861: PPUSH
 862: PPUSH
// begin enable ;
 863: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 864: LD_ADDR_VAR 0 1
 868: PUSH
 869: LD_EXP 14
 873: PPUSH
 874: LD_INT 101
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PPUSH
 884: CALL_OW 72
 888: ST_TO_ADDR
// if not tmp then
 889: LD_VAR 0 1
 893: NOT
 894: IFFALSE 898
// exit ;
 896: GO 1175
// InGameOn ;
 898: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 902: LD_EXP 1
 906: PUSH
 907: LD_EXP 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: LD_VAR 0 1
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: PPUSH
 925: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 929: LD_VAR 0 1
 933: PUSH
 934: LD_INT 1
 936: ARRAY
 937: PPUSH
 938: LD_EXP 1
 942: PPUSH
 943: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 947: LD_VAR 0 1
 951: PUSH
 952: LD_INT 1
 954: ARRAY
 955: PPUSH
 956: LD_STRING DG-meeting-1
 958: PPUSH
 959: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 963: LD_ADDR_VAR 0 3
 967: PUSH
 968: LD_INT 81
 970: PUSH
 971: LD_INT 10
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 63
 980: PUSH
 981: LD_INT 25
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 108
 990: PUSH
 991: LD_INT 73
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: LIST
1002: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1003: LD_ADDR_VAR 0 4
1007: PUSH
1008: LD_INT 9999
1010: PUSH
1011: EMPTY
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: ST_TO_ADDR
// for i := 1 to 3 do
1017: LD_ADDR_VAR 0 2
1021: PUSH
1022: DOUBLE
1023: LD_INT 1
1025: DEC
1026: ST_TO_ADDR
1027: LD_INT 3
1029: PUSH
1030: FOR_TO
1031: IFFALSE 1115
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1033: LD_ADDR_VAR 0 5
1037: PUSH
1038: LD_EXP 1
1042: PPUSH
1043: LD_VAR 0 3
1047: PUSH
1048: LD_VAR 0 2
1052: ARRAY
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 3
1062: PUSH
1063: LD_VAR 0 2
1067: ARRAY
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PPUSH
1073: CALL_OW 297
1077: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1078: LD_VAR 0 4
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PUSH
1087: LD_VAR 0 5
1091: GREATER
1092: IFFALSE 1113
// dist := [ tdist , i ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_VAR 0 5
1103: PUSH
1104: LD_VAR 0 2
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: ST_TO_ADDR
// end ;
1113: GO 1030
1115: POP
1116: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1117: LD_EXP 1
1121: PPUSH
1122: LD_VAR 0 3
1126: PUSH
1127: LD_VAR 0 4
1131: PUSH
1132: LD_INT 2
1134: ARRAY
1135: ARRAY
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_VAR 0 4
1150: PUSH
1151: LD_INT 2
1153: ARRAY
1154: ARRAY
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PPUSH
1160: CALL_OW 111
// wait ( 0 0$3 ) ;
1164: LD_INT 105
1166: PPUSH
1167: CALL_OW 67
// InGameOff ;
1171: CALL_OW 9
// end ;
1175: PPOPN 5
1177: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1178: LD_EXP 1
1182: PPUSH
1183: LD_INT 14
1185: PPUSH
1186: CALL_OW 296
1190: PUSH
1191: LD_INT 40
1193: GREATER
1194: PUSH
1195: LD_EXP 1
1199: PPUSH
1200: CALL_OW 316
1204: AND
1205: IFFALSE 1222
1207: GO 1209
1209: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_STRING DK-idle-1
1217: PPUSH
1218: CALL_OW 88
// end ;
1222: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1223: LD_INT 2
1225: PPUSH
1226: LD_INT 59
1228: PPUSH
1229: LD_INT 47
1231: PPUSH
1232: CALL_OW 293
1236: IFFALSE 1393
1238: GO 1240
1240: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1241: LD_INT 59
1243: PPUSH
1244: LD_INT 47
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 10
1252: NEG
1253: PPUSH
1254: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1258: LD_INT 59
1260: PPUSH
1261: LD_INT 47
1263: PPUSH
1264: CALL_OW 86
// goWithHeike := false ;
1268: LD_ADDR_EXP 18
1272: PUSH
1273: LD_INT 0
1275: ST_TO_ADDR
// baseSpotted := true ;
1276: LD_ADDR_EXP 19
1280: PUSH
1281: LD_INT 1
1283: ST_TO_ADDR
// InGameOn ;
1284: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1288: LD_EXP 1
1292: PUSH
1293: LD_EXP 5
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: LD_INT 54
1304: PPUSH
1305: LD_INT 45
1307: PPUSH
1308: CALL_OW 111
// wait ( 0 0$1 ) ;
1312: LD_INT 35
1314: PPUSH
1315: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1319: LD_EXP 1
1323: PUSH
1324: LD_EXP 5
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: LD_INT 59
1335: PPUSH
1336: LD_INT 47
1338: PPUSH
1339: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1343: LD_EXP 1
1347: PPUSH
1348: LD_STRING DH-base-1
1350: PPUSH
1351: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1355: LD_EXP 5
1359: PPUSH
1360: LD_STRING DK-base-1
1362: PPUSH
1363: CALL_OW 88
// InGameOff ;
1367: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1371: LD_ADDR_EXP 17
1375: PUSH
1376: LD_EXP 17
1380: PUSH
1381: LD_INT 1
1383: PLUS
1384: ST_TO_ADDR
// goWithHeike := true ;
1385: LD_ADDR_EXP 18
1389: PUSH
1390: LD_INT 1
1392: ST_TO_ADDR
// end ;
1393: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1394: LD_INT 2
1396: PPUSH
1397: LD_EXP 8
1401: PPUSH
1402: CALL_OW 292
1406: IFFALSE 2715
1408: GO 1410
1410: DISABLE
1411: LD_INT 0
1413: PPUSH
1414: PPUSH
1415: PPUSH
// begin meetingActive := false ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_INT 0
1423: ST_TO_ADDR
// goWithHeike := false ;
1424: LD_ADDR_EXP 18
1428: PUSH
1429: LD_INT 0
1431: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1432: LD_ADDR_VAR 0 2
1436: PUSH
1437: LD_INT 6
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 517
1447: ST_TO_ADDR
// for i := 1 to 4 do
1448: LD_ADDR_VAR 0 1
1452: PUSH
1453: DOUBLE
1454: LD_INT 1
1456: DEC
1457: ST_TO_ADDR
1458: LD_INT 4
1460: PUSH
1461: FOR_TO
1462: IFFALSE 1529
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1464: LD_EXP 15
1468: PUSH
1469: LD_VAR 0 1
1473: ARRAY
1474: PPUSH
1475: LD_VAR 0 2
1479: PUSH
1480: LD_INT 1
1482: ARRAY
1483: PUSH
1484: LD_VAR 0 1
1488: ARRAY
1489: PPUSH
1490: LD_VAR 0 2
1494: PUSH
1495: LD_INT 2
1497: ARRAY
1498: PUSH
1499: LD_VAR 0 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1509: LD_EXP 15
1513: PUSH
1514: LD_VAR 0 1
1518: ARRAY
1519: PPUSH
1520: LD_INT 14
1522: PPUSH
1523: CALL_OW 179
// end ;
1527: GO 1461
1529: POP
1530: POP
// InGameOn ;
1531: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1535: LD_EXP 8
1539: PPUSH
1540: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1544: LD_EXP 1
1548: PPUSH
1549: LD_EXP 8
1553: PPUSH
1554: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1558: LD_EXP 5
1562: PPUSH
1563: LD_EXP 1
1567: PPUSH
1568: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1572: LD_INT 10
1574: PPUSH
1575: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1579: LD_EXP 1
1583: PPUSH
1584: LD_EXP 8
1588: PPUSH
1589: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_EXP 1
1602: PPUSH
1603: CALL_OW 250
1607: PPUSH
1608: LD_INT 5
1610: PPUSH
1611: LD_INT 1
1613: PPUSH
1614: CALL_OW 272
1618: PPUSH
1619: LD_EXP 1
1623: PPUSH
1624: CALL_OW 251
1628: PPUSH
1629: LD_INT 5
1631: PPUSH
1632: LD_INT 1
1634: PPUSH
1635: CALL_OW 273
1639: PPUSH
1640: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1644: LD_EXP 1
1648: PPUSH
1649: LD_EXP 8
1653: PPUSH
1654: CALL_OW 296
1658: PUSH
1659: LD_INT 5
1661: LESS
1662: PUSH
1663: LD_EXP 5
1667: PPUSH
1668: LD_EXP 8
1672: PPUSH
1673: CALL_OW 296
1677: PUSH
1678: LD_INT 6
1680: LESS
1681: AND
1682: IFFALSE 1572
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1684: LD_EXP 1
1688: PUSH
1689: LD_EXP 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PPUSH
1698: LD_EXP 8
1702: PPUSH
1703: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1707: LD_EXP 8
1711: PUSH
1712: LD_EXP 4
1716: PUSH
1717: LD_EXP 9
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: LD_EXP 1
1731: PPUSH
1732: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1736: LD_INT 7
1738: PPUSH
1739: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1743: LD_EXP 8
1747: PPUSH
1748: LD_STRING DKu-Kurt-1
1750: PPUSH
1751: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1755: LD_EXP 5
1759: PPUSH
1760: LD_STRING DK-Kurt-1
1762: PPUSH
1763: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1767: LD_EXP 8
1771: PPUSH
1772: LD_STRING DKu-Kurt-2
1774: PPUSH
1775: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1779: LD_INT 7
1781: PPUSH
1782: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1786: LD_EXP 1
1790: PPUSH
1791: LD_STRING DH-Kurt-1
1793: PPUSH
1794: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1798: LD_EXP 8
1802: PPUSH
1803: LD_STRING DKu-Kurt-3
1805: PPUSH
1806: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1810: LD_EXP 5
1814: PPUSH
1815: LD_STRING DK-Kurt-3
1817: PPUSH
1818: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1822: LD_EXP 9
1826: PPUSH
1827: LD_STRING DHa-Kurt-3
1829: PPUSH
1830: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1834: LD_EXP 4
1838: PPUSH
1839: LD_STRING DO-Kurt-3
1841: PPUSH
1842: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: LD_EXP 8
1855: PUSH
1856: LD_EXP 4
1860: PUSH
1861: LD_EXP 9
1865: PUSH
1866: LD_EXP 5
1870: PUSH
1871: LD_EXP 1
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_EXP 16
1887: UNION
1888: ST_TO_ADDR
// for i = 1 to tmp2 do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1980
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1907: LD_VAR 0 3
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_INT 1
1925: ARRAY
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_INT 4
1934: PLUS
1935: ARRAY
1936: PPUSH
1937: LD_VAR 0 2
1941: PUSH
1942: LD_INT 2
1944: ARRAY
1945: PUSH
1946: LD_VAR 0 1
1950: PUSH
1951: LD_INT 4
1953: PLUS
1954: ARRAY
1955: PPUSH
1956: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1960: LD_VAR 0 3
1964: PUSH
1965: LD_VAR 0 1
1969: ARRAY
1970: PPUSH
1971: LD_INT 14
1973: PPUSH
1974: CALL_OW 179
// end ;
1978: GO 1904
1980: POP
1981: POP
// wait ( 0 0$2 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// CenterOnUnits ( eon ) ;
1989: LD_INT 14
1991: PPUSH
1992: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1996: LD_INT 90
1998: PPUSH
1999: LD_INT 43
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 21
2007: NEG
2008: PPUSH
2009: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2013: LD_EXP 2
2017: PPUSH
2018: LD_INT 84
2020: PPUSH
2021: LD_INT 36
2023: PPUSH
2024: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2028: LD_EXP 2
2032: PPUSH
2033: LD_INT 14
2035: PPUSH
2036: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2040: LD_EXP 11
2044: PPUSH
2045: LD_INT 85
2047: PPUSH
2048: LD_INT 36
2050: PPUSH
2051: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2055: LD_EXP 11
2059: PPUSH
2060: LD_INT 14
2062: PPUSH
2063: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 86
2074: PPUSH
2075: LD_INT 36
2077: PPUSH
2078: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2082: LD_EXP 10
2086: PPUSH
2087: LD_INT 14
2089: PPUSH
2090: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2094: LD_EXP 7
2098: PPUSH
2099: LD_INT 87
2101: PPUSH
2102: LD_INT 36
2104: PPUSH
2105: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2109: LD_EXP 7
2113: PPUSH
2114: LD_INT 14
2116: PPUSH
2117: CALL_OW 179
// wait ( 0 0$3 ) ;
2121: LD_INT 105
2123: PPUSH
2124: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2128: LD_INT 35
2130: PPUSH
2131: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
2135: LD_EXP 1
2139: PPUSH
2140: LD_INT 6
2142: PPUSH
2143: CALL_OW 308
2147: IFFALSE 2128
// heikeNearbyEon := true ;
2149: LD_ADDR_EXP 20
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2157: LD_EXP 6
2161: PPUSH
2162: LD_INT 88
2164: PPUSH
2165: LD_INT 37
2167: PPUSH
2168: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2172: LD_EXP 6
2176: PPUSH
2177: LD_EXP 13
2181: PUSH
2182: LD_INT 1
2184: ARRAY
2185: PPUSH
2186: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2190: LD_EXP 13
2194: PUSH
2195: LD_INT 1
2197: ARRAY
2198: PPUSH
2199: LD_INT 89
2201: PPUSH
2202: LD_INT 37
2204: PPUSH
2205: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2209: LD_EXP 13
2213: PUSH
2214: LD_INT 2
2216: ARRAY
2217: PPUSH
2218: LD_INT 91
2220: PPUSH
2221: LD_INT 39
2223: PPUSH
2224: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2228: LD_EXP 13
2232: PPUSH
2233: LD_EXP 11
2237: PPUSH
2238: CALL_OW 179
// wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2249: LD_EXP 13
2253: PUSH
2254: LD_INT 1
2256: ARRAY
2257: PPUSH
2258: LD_STRING DS-eon-1
2260: PPUSH
2261: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2265: LD_EXP 6
2269: PPUSH
2270: LD_STRING DSh-eon-1
2272: PPUSH
2273: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2277: LD_EXP 13
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_STRING DS-eon-2
2288: PPUSH
2289: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2293: LD_EXP 6
2297: PPUSH
2298: LD_STRING DSh-eon-1a
2300: PPUSH
2301: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2305: LD_EXP 13
2309: PUSH
2310: LD_INT 1
2312: ARRAY
2313: PPUSH
2314: LD_INT 92
2316: PPUSH
2317: LD_INT 43
2319: PPUSH
2320: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2324: LD_EXP 13
2328: PUSH
2329: LD_INT 1
2331: ARRAY
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2340: LD_EXP 13
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 93
2351: PPUSH
2352: LD_INT 41
2354: PPUSH
2355: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2359: LD_EXP 13
2363: PUSH
2364: LD_INT 2
2366: ARRAY
2367: PPUSH
2368: LD_INT 93
2370: PPUSH
2371: LD_INT 40
2373: PPUSH
2374: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2378: LD_EXP 6
2382: PPUSH
2383: LD_INT 88
2385: PPUSH
2386: LD_INT 41
2388: PPUSH
2389: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2393: LD_EXP 6
2397: PPUSH
2398: LD_INT 87
2400: PPUSH
2401: LD_INT 41
2403: PPUSH
2404: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2408: LD_INT 35
2410: PPUSH
2411: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2415: LD_EXP 6
2419: PPUSH
2420: LD_INT 88
2422: PPUSH
2423: LD_INT 41
2425: PPUSH
2426: CALL_OW 307
2430: IFFALSE 2408
// wait ( 0 0$1 ) ;
2432: LD_INT 35
2434: PPUSH
2435: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2439: LD_EXP 6
2443: PPUSH
2444: LD_STRING DSh-eon-2
2446: PPUSH
2447: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2451: LD_EXP 11
2455: PPUSH
2456: LD_INT 87
2458: PPUSH
2459: LD_INT 40
2461: PPUSH
2462: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2466: LD_EXP 11
2470: PPUSH
2471: LD_INT 86
2473: PPUSH
2474: LD_INT 40
2476: PPUSH
2477: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2481: LD_INT 35
2483: PPUSH
2484: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2488: LD_EXP 11
2492: PPUSH
2493: LD_INT 87
2495: PPUSH
2496: LD_INT 40
2498: PPUSH
2499: CALL_OW 307
2503: IFFALSE 2481
// Say ( Shariff , DShar-eon-3 ) ;
2505: LD_EXP 11
2509: PPUSH
2510: LD_STRING DShar-eon-3
2512: PPUSH
2513: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2517: LD_INT 10
2519: PPUSH
2520: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2524: LD_EXP 5
2528: PPUSH
2529: LD_EXP 1
2533: PPUSH
2534: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2538: LD_EXP 11
2542: PPUSH
2543: LD_STRING DShar-eon-4
2545: PPUSH
2546: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2550: LD_EXP 5
2554: PPUSH
2555: LD_STRING DK-eon-4
2557: PPUSH
2558: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2562: LD_EXP 5
2566: PPUSH
2567: LD_INT 14
2569: PPUSH
2570: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2574: LD_INT 35
2576: PPUSH
2577: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2581: LD_EXP 5
2585: PPUSH
2586: CALL_OW 305
2590: NOT
2591: IFFALSE 2574
// ComTurnUnit ( Shariff , Heike ) ;
2593: LD_EXP 11
2597: PPUSH
2598: LD_EXP 1
2602: PPUSH
2603: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2607: LD_EXP 11
2611: PPUSH
2612: LD_STRING DShar-eon-5
2614: PPUSH
2615: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2619: LD_EXP 1
2623: PPUSH
2624: LD_INT 91
2626: PPUSH
2627: LD_INT 44
2629: PPUSH
2630: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2634: LD_EXP 1
2638: PPUSH
2639: LD_INT 14
2641: PPUSH
2642: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2646: LD_INT 35
2648: PPUSH
2649: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2653: LD_EXP 1
2657: PPUSH
2658: LD_INT 91
2660: PPUSH
2661: LD_INT 44
2663: PPUSH
2664: CALL_OW 307
2668: IFFALSE 2646
// Say ( Heike , DH-eon-5 ) ;
2670: LD_EXP 1
2674: PPUSH
2675: LD_STRING DH-eon-5
2677: PPUSH
2678: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2682: LD_EXP 1
2686: PPUSH
2687: LD_INT 14
2689: PPUSH
2690: CALL_OW 120
// wait ( 0 0$2 ) ;
2694: LD_INT 70
2696: PPUSH
2697: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2701: LD_INT 1
2703: PPUSH
2704: LD_STRING %_cont
2706: PPUSH
2707: CALL_OW 340
// InGameOff ;
2711: CALL_OW 9
// end ; end_of_file
2715: PPOPN 3
2717: END
// export function PrepareHeikeGroup ; begin
2718: LD_INT 0
2720: PPUSH
// uc_side := 2 ;
2721: LD_ADDR_OWVAR 20
2725: PUSH
2726: LD_INT 2
2728: ST_TO_ADDR
// uc_nation := 2 ;
2729: LD_ADDR_OWVAR 21
2733: PUSH
2734: LD_INT 2
2736: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2737: LD_ADDR_EXP 1
2741: PUSH
2742: LD_STRING Heike
2744: PPUSH
2745: CALL_OW 25
2749: ST_TO_ADDR
// uc_side := 5 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 5
2757: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2758: LD_ADDR_EXP 5
2762: PUSH
2763: LD_STRING Kaia
2765: PPUSH
2766: CALL_OW 25
2770: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2771: LD_EXP 1
2775: PPUSH
2776: LD_INT 3
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2786: LD_EXP 5
2790: PPUSH
2791: LD_INT 3
2793: PPUSH
2794: LD_INT 0
2796: PPUSH
2797: CALL_OW 49
// end ;
2801: LD_VAR 0 1
2805: RET
// export function PrepareSheikGroup ; var un , i ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
// uc_side := 5 ;
2811: LD_ADDR_OWVAR 20
2815: PUSH
2816: LD_INT 5
2818: ST_TO_ADDR
// uc_nation := 2 ;
2819: LD_ADDR_OWVAR 21
2823: PUSH
2824: LD_INT 2
2826: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2827: LD_ADDR_EXP 10
2831: PUSH
2832: LD_STRING Ali
2834: PPUSH
2835: CALL_OW 25
2839: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2840: LD_ADDR_EXP 11
2844: PUSH
2845: LD_STRING Abdul
2847: PPUSH
2848: CALL_OW 25
2852: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2853: LD_ADDR_EXP 2
2857: PUSH
2858: LD_STRING Omar
2860: PPUSH
2861: CALL_OW 25
2865: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2866: LD_ADDR_EXP 7
2870: PUSH
2871: LD_STRING Mahtab
2873: PPUSH
2874: CALL_OW 25
2878: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2879: LD_ADDR_EXP 6
2883: PUSH
2884: LD_STRING Shahrzad
2886: PPUSH
2887: CALL_OW 25
2891: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2892: LD_EXP 10
2896: PPUSH
2897: LD_INT 85
2899: PPUSH
2900: LD_INT 37
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2910: LD_EXP 11
2914: PPUSH
2915: LD_INT 87
2917: PPUSH
2918: LD_INT 37
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2928: LD_EXP 2
2932: PPUSH
2933: LD_INT 85
2935: PPUSH
2936: LD_INT 35
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2946: LD_EXP 7
2950: PPUSH
2951: LD_INT 86
2953: PPUSH
2954: LD_INT 39
2956: PPUSH
2957: LD_INT 0
2959: PPUSH
2960: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2964: LD_EXP 6
2968: PPUSH
2969: LD_INT 88
2971: PPUSH
2972: LD_INT 39
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2982: LD_EXP 10
2986: PPUSH
2987: LD_EXP 11
2991: PPUSH
2992: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2996: LD_EXP 11
3000: PPUSH
3001: LD_EXP 10
3005: PPUSH
3006: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3010: LD_EXP 2
3014: PPUSH
3015: LD_EXP 11
3019: PPUSH
3020: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3024: LD_EXP 7
3028: PUSH
3029: LD_EXP 6
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: LD_EXP 11
3042: PPUSH
3043: CALL_OW 119
// for i := 1 to 2 do
3047: LD_ADDR_VAR 0 3
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 2
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3147
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3063: LD_INT 2
3065: PPUSH
3066: LD_INT 4
3068: PPUSH
3069: LD_INT 6
3071: PPUSH
3072: CALL_OW 380
// un := CreateHuman ;
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: CALL_OW 44
3085: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3086: LD_VAR 0 2
3090: PPUSH
3091: LD_INT 90
3093: PPUSH
3094: LD_INT 44
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: LD_INT 91
3114: PPUSH
3115: LD_INT 43
3117: PPUSH
3118: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3122: LD_ADDR_EXP 13
3126: PUSH
3127: LD_EXP 13
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: LD_VAR 0 2
3139: PPUSH
3140: CALL_OW 2
3144: ST_TO_ADDR
// end ;
3145: GO 3060
3147: POP
3148: POP
// scientists := scientists diff 0 ;
3149: LD_ADDR_EXP 13
3153: PUSH
3154: LD_EXP 13
3158: PUSH
3159: LD_INT 0
3161: DIFF
3162: ST_TO_ADDR
// end ;
3163: LD_VAR 0 1
3167: RET
// export function PrepareKurtGroup ; var i ; begin
3168: LD_INT 0
3170: PPUSH
3171: PPUSH
// uc_side := 5 ;
3172: LD_ADDR_OWVAR 20
3176: PUSH
3177: LD_INT 5
3179: ST_TO_ADDR
// uc_nation := 2 ;
3180: LD_ADDR_OWVAR 21
3184: PUSH
3185: LD_INT 2
3187: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3188: LD_ADDR_EXP 8
3192: PUSH
3193: LD_STRING Kurt
3195: PPUSH
3196: CALL_OW 25
3200: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3201: LD_ADDR_EXP 4
3205: PUSH
3206: LD_STRING Olaf
3208: PPUSH
3209: CALL_OW 25
3213: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3214: LD_ADDR_EXP 9
3218: PUSH
3219: LD_STRING Hans
3221: PPUSH
3222: CALL_OW 25
3226: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3227: LD_ADDR_VAR 0 2
3231: PUSH
3232: LD_EXP 8
3236: PUSH
3237: LD_EXP 9
3241: PUSH
3242: LD_EXP 4
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: FOR_IN
3253: IFFALSE 3272
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 10
3262: PPUSH
3263: LD_INT 0
3265: PPUSH
3266: CALL_OW 49
3270: GO 3252
3272: POP
3273: POP
// ComTurnUnit ( Kurt , Hans ) ;
3274: LD_EXP 8
3278: PPUSH
3279: LD_EXP 9
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3288: LD_EXP 4
3292: PPUSH
3293: LD_EXP 9
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3302: LD_EXP 9
3306: PPUSH
3307: LD_EXP 4
3311: PPUSH
3312: CALL_OW 119
// end ;
3316: LD_VAR 0 1
3320: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3327: LD_ADDR_VAR 0 2
3331: PUSH
3332: LD_INT 21
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PPUSH
3342: CALL_OW 69
3346: PUSH
3347: LD_INT 14
3349: DIFF
3350: PUSH
3351: FOR_IN
3352: IFFALSE 3432
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3354: LD_VAR 0 2
3358: PPUSH
3359: CALL_OW 266
3363: PUSH
3364: LD_INT 6
3366: PUSH
3367: LD_INT 31
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: IN
3374: IFFALSE 3398
// SetLives ( i , rand ( 500 , 600 ) ) else
3376: LD_VAR 0 2
3380: PPUSH
3381: LD_INT 500
3383: PPUSH
3384: LD_INT 600
3386: PPUSH
3387: CALL_OW 12
3391: PPUSH
3392: CALL_OW 234
3396: GO 3418
// SetLives ( i , rand ( 300 , 499 ) ) ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_INT 300
3405: PPUSH
3406: LD_INT 499
3408: PPUSH
3409: CALL_OW 12
3413: PPUSH
3414: CALL_OW 234
// SetSide ( i , 5 ) ;
3418: LD_VAR 0 2
3422: PPUSH
3423: LD_INT 5
3425: PPUSH
3426: CALL_OW 235
// end ;
3430: GO 3351
3432: POP
3433: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: LD_INT 9
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: CALL_OW 517
3449: ST_TO_ADDR
// uc_side := 4 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 4
3457: ST_TO_ADDR
// uc_nation := 1 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 1
3465: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3466: LD_ADDR_VAR 0 2
3470: PUSH
3471: DOUBLE
3472: LD_INT 1
3474: DEC
3475: ST_TO_ADDR
3476: LD_VAR 0 4
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3562
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_VAR 0 2
3509: PUSH
3510: LD_INT 3
3512: MOD
3513: PUSH
3514: LD_INT 1
3516: PLUS
3517: ARRAY
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL_OW 380
// un := CreateHuman ;
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: CALL_OW 44
3535: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3536: LD_VAR 0 3
3540: PPUSH
3541: LD_INT 9
3543: PPUSH
3544: LD_INT 0
3546: PPUSH
3547: CALL_OW 49
// KillUnit ( un ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: CALL_OW 66
// end ;
3560: GO 3485
3562: POP
3563: POP
// end ;
3564: LD_VAR 0 1
3568: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3569: LD_INT 0
3571: PPUSH
3572: PPUSH
3573: PPUSH
3574: PPUSH
3575: PPUSH
3576: PPUSH
3577: PPUSH
// uc_side := 5 ;
3578: LD_ADDR_OWVAR 20
3582: PUSH
3583: LD_INT 5
3585: ST_TO_ADDR
// uc_nation := 2 ;
3586: LD_ADDR_OWVAR 21
3590: PUSH
3591: LD_INT 2
3593: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3594: LD_ADDR_VAR 0 6
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 4
3604: PUSH
3605: LD_INT 5
3607: PUSH
3608: LD_INT 14
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: ST_TO_ADDR
// InitHc ;
3617: CALL_OW 19
// for i in area do
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_VAR 0 6
3630: PUSH
3631: FOR_IN
3632: IFFALSE 3796
// begin tmp := AreaToList ( i , 0 ) ;
3634: LD_ADDR_VAR 0 5
3638: PUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 517
3651: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_VAR 0 5
3666: PUSH
3667: LD_INT 1
3669: ARRAY
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3792
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3674: LD_INT 1
3676: PPUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_INT 3
3682: PPUSH
3683: CALL_OW 380
// un := CreateHuman ;
3687: LD_ADDR_VAR 0 7
3691: PUSH
3692: CALL_OW 44
3696: ST_TO_ADDR
// if i = spawnBaseArea3 then
3697: LD_VAR 0 2
3701: PUSH
3702: LD_INT 5
3704: EQUAL
3705: IFFALSE 3723
// eonGuards := eonGuards ^ un ;
3707: LD_ADDR_EXP 14
3711: PUSH
3712: LD_EXP 14
3716: PUSH
3717: LD_VAR 0 7
3721: ADD
3722: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3723: LD_VAR 0 7
3727: PPUSH
3728: LD_VAR 0 2
3732: PPUSH
3733: LD_INT 0
3735: PPUSH
3736: CALL_OW 49
// ComHold ( un ) ;
3740: LD_VAR 0 7
3744: PPUSH
3745: CALL_OW 140
// if i = spawnBaseArea4 then
3749: LD_VAR 0 2
3753: PUSH
3754: LD_INT 14
3756: EQUAL
3757: IFFALSE 3790
// begin firstGroup := firstGroup ^ un ;
3759: LD_ADDR_EXP 15
3763: PUSH
3764: LD_EXP 15
3768: PUSH
3769: LD_VAR 0 7
3773: ADD
3774: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 108
3782: PPUSH
3783: LD_INT 47
3785: PPUSH
3786: CALL_OW 118
// end ; end ;
3790: GO 3671
3792: POP
3793: POP
// end ;
3794: GO 3631
3796: POP
3797: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_INT 30
3810: PUSH
3811: LD_INT 31
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PPUSH
3818: CALL_OW 69
3822: PUSH
3823: FOR_TO
3824: IFFALSE 3918
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3826: LD_ADDR_VAR 0 4
3830: PUSH
3831: LD_INT 30
3833: PUSH
3834: LD_INT 31
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PPUSH
3841: CALL_OW 69
3845: PUSH
3846: LD_VAR 0 2
3850: ARRAY
3851: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: LD_INT 3
3860: PPUSH
3861: CALL_OW 380
// un := CreateHuman ;
3865: LD_ADDR_VAR 0 7
3869: PUSH
3870: CALL_OW 44
3874: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3875: LD_VAR 0 7
3879: PPUSH
3880: LD_VAR 0 4
3884: PPUSH
3885: CALL_OW 254
3889: PUSH
3890: LD_INT 3
3892: PLUS
3893: PUSH
3894: LD_INT 6
3896: MOD
3897: PPUSH
3898: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3902: LD_VAR 0 7
3906: PPUSH
3907: LD_VAR 0 4
3911: PPUSH
3912: CALL_OW 52
// end ;
3916: GO 3823
3918: POP
3919: POP
// end ; end_of_file
3920: LD_VAR 0 1
3924: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 2
3932: EQUAL
3933: PUSH
3934: LD_VAR 0 2
3938: PUSH
3939: LD_INT 5
3941: EQUAL
3942: AND
3943: IFFALSE 3961
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3945: LD_INT 2
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: CALL_OW 80
// end ;
3961: PPOPN 2
3963: END
// every 0 0$1 trigger scientists do var i ;
3964: LD_EXP 13
3968: IFFALSE 4176
3970: GO 3972
3972: DISABLE
3973: LD_INT 0
3975: PPUSH
// begin repeat for i in scientists do
3976: LD_ADDR_VAR 0 1
3980: PUSH
3981: LD_EXP 13
3985: PUSH
3986: FOR_IN
3987: IFFALSE 4161
// begin wait ( 0 0$1 ) ;
3989: LD_INT 35
3991: PPUSH
3992: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_INT 11
4003: PUSH
4004: LD_INT 13
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_VAR 0 1
4015: PUSH
4016: LD_INT 2
4018: MOD
4019: PUSH
4020: LD_INT 1
4022: PLUS
4023: ARRAY
4024: PPUSH
4025: CALL_OW 308
4029: NOT
4030: IFFALSE 4065
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4032: LD_VAR 0 1
4036: PPUSH
4037: LD_INT 11
4039: PUSH
4040: LD_INT 13
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: LD_VAR 0 1
4051: PUSH
4052: LD_INT 2
4054: MOD
4055: PUSH
4056: LD_INT 1
4058: PLUS
4059: ARRAY
4060: PPUSH
4061: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4065: LD_VAR 0 1
4069: PPUSH
4070: LD_INT 14
4072: PPUSH
4073: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4077: LD_VAR 0 1
4081: PPUSH
4082: LD_INT 70
4084: PPUSH
4085: CALL_OW 202
// if rand ( 0 , 1 ) then
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 1
4094: PPUSH
4095: CALL_OW 12
4099: IFFALSE 4113
// AddComAnim ( i , 15 ) ;
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_INT 15
4108: PPUSH
4109: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4113: LD_VAR 0 1
4117: PPUSH
4118: LD_INT 35
4120: PPUSH
4121: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4125: LD_VAR 0 1
4129: PPUSH
4130: LD_INT 12
4132: PPUSH
4133: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4137: LD_VAR 0 1
4141: PPUSH
4142: LD_INT 93
4144: PPUSH
4145: LD_INT 40
4147: PPUSH
4148: CALL_OW 178
// wait ( 0 0$1 ) ;
4152: LD_INT 35
4154: PPUSH
4155: CALL_OW 67
// end ;
4159: GO 3986
4161: POP
4162: POP
// wait ( 0 0$10 ) ;
4163: LD_INT 350
4165: PPUSH
4166: CALL_OW 67
// until heikeNearbyEon ;
4170: LD_EXP 20
4174: IFFALSE 3976
// end ; end_of_file
4176: PPOPN 1
4178: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4179: GO 4181
4181: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4182: LD_STRING initStreamRollete();
4184: PPUSH
4185: CALL_OW 559
// InitStreamMode ;
4189: CALL 4198 0 0
// DefineStreamItems ( ) ;
4193: CALL 4638 0 0
// end ;
4197: END
// function InitStreamMode ; begin
4198: LD_INT 0
4200: PPUSH
// streamModeActive := false ;
4201: LD_ADDR_EXP 22
4205: PUSH
4206: LD_INT 0
4208: ST_TO_ADDR
// normalCounter := 36 ;
4209: LD_ADDR_EXP 23
4213: PUSH
4214: LD_INT 36
4216: ST_TO_ADDR
// hardcoreCounter := 16 ;
4217: LD_ADDR_EXP 24
4221: PUSH
4222: LD_INT 16
4224: ST_TO_ADDR
// sRocket := false ;
4225: LD_ADDR_EXP 27
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
// sSpeed := false ;
4233: LD_ADDR_EXP 26
4237: PUSH
4238: LD_INT 0
4240: ST_TO_ADDR
// sEngine := false ;
4241: LD_ADDR_EXP 28
4245: PUSH
4246: LD_INT 0
4248: ST_TO_ADDR
// sSpec := false ;
4249: LD_ADDR_EXP 25
4253: PUSH
4254: LD_INT 0
4256: ST_TO_ADDR
// sLevel := false ;
4257: LD_ADDR_EXP 29
4261: PUSH
4262: LD_INT 0
4264: ST_TO_ADDR
// sArmoury := false ;
4265: LD_ADDR_EXP 30
4269: PUSH
4270: LD_INT 0
4272: ST_TO_ADDR
// sRadar := false ;
4273: LD_ADDR_EXP 31
4277: PUSH
4278: LD_INT 0
4280: ST_TO_ADDR
// sBunker := false ;
4281: LD_ADDR_EXP 32
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// sHack := false ;
4289: LD_ADDR_EXP 33
4293: PUSH
4294: LD_INT 0
4296: ST_TO_ADDR
// sFire := false ;
4297: LD_ADDR_EXP 34
4301: PUSH
4302: LD_INT 0
4304: ST_TO_ADDR
// sRefresh := false ;
4305: LD_ADDR_EXP 35
4309: PUSH
4310: LD_INT 0
4312: ST_TO_ADDR
// sExp := false ;
4313: LD_ADDR_EXP 36
4317: PUSH
4318: LD_INT 0
4320: ST_TO_ADDR
// sDepot := false ;
4321: LD_ADDR_EXP 37
4325: PUSH
4326: LD_INT 0
4328: ST_TO_ADDR
// sFlag := false ;
4329: LD_ADDR_EXP 38
4333: PUSH
4334: LD_INT 0
4336: ST_TO_ADDR
// sKamikadze := false ;
4337: LD_ADDR_EXP 46
4341: PUSH
4342: LD_INT 0
4344: ST_TO_ADDR
// sTroll := false ;
4345: LD_ADDR_EXP 47
4349: PUSH
4350: LD_INT 0
4352: ST_TO_ADDR
// sSlow := false ;
4353: LD_ADDR_EXP 48
4357: PUSH
4358: LD_INT 0
4360: ST_TO_ADDR
// sLack := false ;
4361: LD_ADDR_EXP 49
4365: PUSH
4366: LD_INT 0
4368: ST_TO_ADDR
// sTank := false ;
4369: LD_ADDR_EXP 51
4373: PUSH
4374: LD_INT 0
4376: ST_TO_ADDR
// sRemote := false ;
4377: LD_ADDR_EXP 52
4381: PUSH
4382: LD_INT 0
4384: ST_TO_ADDR
// sPowell := false ;
4385: LD_ADDR_EXP 53
4389: PUSH
4390: LD_INT 0
4392: ST_TO_ADDR
// sTeleport := false ;
4393: LD_ADDR_EXP 56
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// sOilTower := false ;
4401: LD_ADDR_EXP 58
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// sShovel := false ;
4409: LD_ADDR_EXP 59
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// sSheik := false ;
4417: LD_ADDR_EXP 60
4421: PUSH
4422: LD_INT 0
4424: ST_TO_ADDR
// sEarthquake := false ;
4425: LD_ADDR_EXP 62
4429: PUSH
4430: LD_INT 0
4432: ST_TO_ADDR
// sAI := false ;
4433: LD_ADDR_EXP 63
4437: PUSH
4438: LD_INT 0
4440: ST_TO_ADDR
// sCargo := false ;
4441: LD_ADDR_EXP 66
4445: PUSH
4446: LD_INT 0
4448: ST_TO_ADDR
// sDLaser := false ;
4449: LD_ADDR_EXP 67
4453: PUSH
4454: LD_INT 0
4456: ST_TO_ADDR
// sExchange := false ;
4457: LD_ADDR_EXP 68
4461: PUSH
4462: LD_INT 0
4464: ST_TO_ADDR
// sFac := false ;
4465: LD_ADDR_EXP 69
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// sPower := false ;
4473: LD_ADDR_EXP 70
4477: PUSH
4478: LD_INT 0
4480: ST_TO_ADDR
// sRandom := false ;
4481: LD_ADDR_EXP 71
4485: PUSH
4486: LD_INT 0
4488: ST_TO_ADDR
// sShield := false ;
4489: LD_ADDR_EXP 72
4493: PUSH
4494: LD_INT 0
4496: ST_TO_ADDR
// sTime := false ;
4497: LD_ADDR_EXP 73
4501: PUSH
4502: LD_INT 0
4504: ST_TO_ADDR
// sTools := false ;
4505: LD_ADDR_EXP 74
4509: PUSH
4510: LD_INT 0
4512: ST_TO_ADDR
// sSold := false ;
4513: LD_ADDR_EXP 39
4517: PUSH
4518: LD_INT 0
4520: ST_TO_ADDR
// sDiff := false ;
4521: LD_ADDR_EXP 40
4525: PUSH
4526: LD_INT 0
4528: ST_TO_ADDR
// sFog := false ;
4529: LD_ADDR_EXP 43
4533: PUSH
4534: LD_INT 0
4536: ST_TO_ADDR
// sReset := false ;
4537: LD_ADDR_EXP 44
4541: PUSH
4542: LD_INT 0
4544: ST_TO_ADDR
// sSun := false ;
4545: LD_ADDR_EXP 45
4549: PUSH
4550: LD_INT 0
4552: ST_TO_ADDR
// sTiger := false ;
4553: LD_ADDR_EXP 41
4557: PUSH
4558: LD_INT 0
4560: ST_TO_ADDR
// sBomb := false ;
4561: LD_ADDR_EXP 42
4565: PUSH
4566: LD_INT 0
4568: ST_TO_ADDR
// sWound := false ;
4569: LD_ADDR_EXP 50
4573: PUSH
4574: LD_INT 0
4576: ST_TO_ADDR
// sBetray := false ;
4577: LD_ADDR_EXP 54
4581: PUSH
4582: LD_INT 0
4584: ST_TO_ADDR
// sContamin := false ;
4585: LD_ADDR_EXP 55
4589: PUSH
4590: LD_INT 0
4592: ST_TO_ADDR
// sOil := false ;
4593: LD_ADDR_EXP 57
4597: PUSH
4598: LD_INT 0
4600: ST_TO_ADDR
// sStu := false ;
4601: LD_ADDR_EXP 61
4605: PUSH
4606: LD_INT 0
4608: ST_TO_ADDR
// sBazooka := false ;
4609: LD_ADDR_EXP 64
4613: PUSH
4614: LD_INT 0
4616: ST_TO_ADDR
// sMortar := false ;
4617: LD_ADDR_EXP 65
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// sRanger := false ;
4625: LD_ADDR_EXP 75
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// end ;
4633: LD_VAR 0 1
4637: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4638: LD_INT 0
4640: PPUSH
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
// result := [ ] ;
4645: LD_ADDR_VAR 0 1
4649: PUSH
4650: EMPTY
4651: ST_TO_ADDR
// if campaign_id = 1 then
4652: LD_OWVAR 69
4656: PUSH
4657: LD_INT 1
4659: EQUAL
4660: IFFALSE 7598
// begin case mission_number of 1 :
4662: LD_OWVAR 70
4666: PUSH
4667: LD_INT 1
4669: DOUBLE
4670: EQUAL
4671: IFTRUE 4675
4673: GO 4739
4675: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4676: LD_ADDR_VAR 0 1
4680: PUSH
4681: LD_INT 2
4683: PUSH
4684: LD_INT 4
4686: PUSH
4687: LD_INT 11
4689: PUSH
4690: LD_INT 12
4692: PUSH
4693: LD_INT 15
4695: PUSH
4696: LD_INT 16
4698: PUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 23
4704: PUSH
4705: LD_INT 26
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: PUSH
4719: LD_INT 101
4721: PUSH
4722: LD_INT 102
4724: PUSH
4725: LD_INT 106
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: ST_TO_ADDR
4737: GO 7596
4739: LD_INT 2
4741: DOUBLE
4742: EQUAL
4743: IFTRUE 4747
4745: GO 4819
4747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4748: LD_ADDR_VAR 0 1
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 4
4758: PUSH
4759: LD_INT 11
4761: PUSH
4762: LD_INT 12
4764: PUSH
4765: LD_INT 15
4767: PUSH
4768: LD_INT 16
4770: PUSH
4771: LD_INT 22
4773: PUSH
4774: LD_INT 23
4776: PUSH
4777: LD_INT 26
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 101
4793: PUSH
4794: LD_INT 102
4796: PUSH
4797: LD_INT 105
4799: PUSH
4800: LD_INT 106
4802: PUSH
4803: LD_INT 108
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: ST_TO_ADDR
4817: GO 7596
4819: LD_INT 3
4821: DOUBLE
4822: EQUAL
4823: IFTRUE 4827
4825: GO 4903
4827: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4828: LD_ADDR_VAR 0 1
4832: PUSH
4833: LD_INT 2
4835: PUSH
4836: LD_INT 4
4838: PUSH
4839: LD_INT 5
4841: PUSH
4842: LD_INT 11
4844: PUSH
4845: LD_INT 12
4847: PUSH
4848: LD_INT 15
4850: PUSH
4851: LD_INT 16
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 26
4859: PUSH
4860: LD_INT 36
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 101
4877: PUSH
4878: LD_INT 102
4880: PUSH
4881: LD_INT 105
4883: PUSH
4884: LD_INT 106
4886: PUSH
4887: LD_INT 108
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: ST_TO_ADDR
4901: GO 7596
4903: LD_INT 4
4905: DOUBLE
4906: EQUAL
4907: IFTRUE 4911
4909: GO 4995
4911: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4912: LD_ADDR_VAR 0 1
4916: PUSH
4917: LD_INT 2
4919: PUSH
4920: LD_INT 4
4922: PUSH
4923: LD_INT 5
4925: PUSH
4926: LD_INT 8
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 12
4934: PUSH
4935: LD_INT 15
4937: PUSH
4938: LD_INT 16
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_INT 23
4946: PUSH
4947: LD_INT 26
4949: PUSH
4950: LD_INT 36
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 101
4969: PUSH
4970: LD_INT 102
4972: PUSH
4973: LD_INT 105
4975: PUSH
4976: LD_INT 106
4978: PUSH
4979: LD_INT 108
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: ST_TO_ADDR
4993: GO 7596
4995: LD_INT 5
4997: DOUBLE
4998: EQUAL
4999: IFTRUE 5003
5001: GO 5103
5003: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5004: LD_ADDR_VAR 0 1
5008: PUSH
5009: LD_INT 2
5011: PUSH
5012: LD_INT 4
5014: PUSH
5015: LD_INT 5
5017: PUSH
5018: LD_INT 6
5020: PUSH
5021: LD_INT 8
5023: PUSH
5024: LD_INT 11
5026: PUSH
5027: LD_INT 12
5029: PUSH
5030: LD_INT 15
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: LD_INT 22
5038: PUSH
5039: LD_INT 23
5041: PUSH
5042: LD_INT 25
5044: PUSH
5045: LD_INT 26
5047: PUSH
5048: LD_INT 36
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 101
5069: PUSH
5070: LD_INT 102
5072: PUSH
5073: LD_INT 105
5075: PUSH
5076: LD_INT 106
5078: PUSH
5079: LD_INT 108
5081: PUSH
5082: LD_INT 109
5084: PUSH
5085: LD_INT 112
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: ST_TO_ADDR
5101: GO 7596
5103: LD_INT 6
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5231
5111: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5112: LD_ADDR_VAR 0 1
5116: PUSH
5117: LD_INT 2
5119: PUSH
5120: LD_INT 4
5122: PUSH
5123: LD_INT 5
5125: PUSH
5126: LD_INT 6
5128: PUSH
5129: LD_INT 8
5131: PUSH
5132: LD_INT 11
5134: PUSH
5135: LD_INT 12
5137: PUSH
5138: LD_INT 15
5140: PUSH
5141: LD_INT 16
5143: PUSH
5144: LD_INT 20
5146: PUSH
5147: LD_INT 21
5149: PUSH
5150: LD_INT 22
5152: PUSH
5153: LD_INT 23
5155: PUSH
5156: LD_INT 25
5158: PUSH
5159: LD_INT 26
5161: PUSH
5162: LD_INT 30
5164: PUSH
5165: LD_INT 31
5167: PUSH
5168: LD_INT 32
5170: PUSH
5171: LD_INT 36
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 101
5197: PUSH
5198: LD_INT 102
5200: PUSH
5201: LD_INT 105
5203: PUSH
5204: LD_INT 106
5206: PUSH
5207: LD_INT 108
5209: PUSH
5210: LD_INT 109
5212: PUSH
5213: LD_INT 112
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: ST_TO_ADDR
5229: GO 7596
5231: LD_INT 7
5233: DOUBLE
5234: EQUAL
5235: IFTRUE 5239
5237: GO 5339
5239: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5240: LD_ADDR_VAR 0 1
5244: PUSH
5245: LD_INT 2
5247: PUSH
5248: LD_INT 4
5250: PUSH
5251: LD_INT 5
5253: PUSH
5254: LD_INT 7
5256: PUSH
5257: LD_INT 11
5259: PUSH
5260: LD_INT 12
5262: PUSH
5263: LD_INT 15
5265: PUSH
5266: LD_INT 16
5268: PUSH
5269: LD_INT 20
5271: PUSH
5272: LD_INT 21
5274: PUSH
5275: LD_INT 22
5277: PUSH
5278: LD_INT 23
5280: PUSH
5281: LD_INT 25
5283: PUSH
5284: LD_INT 26
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 101
5305: PUSH
5306: LD_INT 102
5308: PUSH
5309: LD_INT 103
5311: PUSH
5312: LD_INT 105
5314: PUSH
5315: LD_INT 106
5317: PUSH
5318: LD_INT 108
5320: PUSH
5321: LD_INT 112
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: ST_TO_ADDR
5337: GO 7596
5339: LD_INT 8
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5475
5347: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5348: LD_ADDR_VAR 0 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 5
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: LD_INT 7
5367: PUSH
5368: LD_INT 8
5370: PUSH
5371: LD_INT 11
5373: PUSH
5374: LD_INT 12
5376: PUSH
5377: LD_INT 15
5379: PUSH
5380: LD_INT 16
5382: PUSH
5383: LD_INT 20
5385: PUSH
5386: LD_INT 21
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 23
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 26
5400: PUSH
5401: LD_INT 30
5403: PUSH
5404: LD_INT 31
5406: PUSH
5407: LD_INT 32
5409: PUSH
5410: LD_INT 36
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 101
5437: PUSH
5438: LD_INT 102
5440: PUSH
5441: LD_INT 103
5443: PUSH
5444: LD_INT 105
5446: PUSH
5447: LD_INT 106
5449: PUSH
5450: LD_INT 108
5452: PUSH
5453: LD_INT 109
5455: PUSH
5456: LD_INT 112
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 7596
5475: LD_INT 9
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5619
5483: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5484: LD_ADDR_VAR 0 1
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 4
5494: PUSH
5495: LD_INT 5
5497: PUSH
5498: LD_INT 6
5500: PUSH
5501: LD_INT 7
5503: PUSH
5504: LD_INT 8
5506: PUSH
5507: LD_INT 11
5509: PUSH
5510: LD_INT 12
5512: PUSH
5513: LD_INT 15
5515: PUSH
5516: LD_INT 16
5518: PUSH
5519: LD_INT 20
5521: PUSH
5522: LD_INT 21
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 23
5530: PUSH
5531: LD_INT 25
5533: PUSH
5534: LD_INT 26
5536: PUSH
5537: LD_INT 28
5539: PUSH
5540: LD_INT 30
5542: PUSH
5543: LD_INT 31
5545: PUSH
5546: LD_INT 32
5548: PUSH
5549: LD_INT 36
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 101
5577: PUSH
5578: LD_INT 102
5580: PUSH
5581: LD_INT 103
5583: PUSH
5584: LD_INT 105
5586: PUSH
5587: LD_INT 106
5589: PUSH
5590: LD_INT 108
5592: PUSH
5593: LD_INT 109
5595: PUSH
5596: LD_INT 112
5598: PUSH
5599: LD_INT 114
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: ST_TO_ADDR
5617: GO 7596
5619: LD_INT 10
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5811
5627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5628: LD_ADDR_VAR 0 1
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 6
5644: PUSH
5645: LD_INT 7
5647: PUSH
5648: LD_INT 8
5650: PUSH
5651: LD_INT 9
5653: PUSH
5654: LD_INT 10
5656: PUSH
5657: LD_INT 11
5659: PUSH
5660: LD_INT 12
5662: PUSH
5663: LD_INT 13
5665: PUSH
5666: LD_INT 14
5668: PUSH
5669: LD_INT 15
5671: PUSH
5672: LD_INT 16
5674: PUSH
5675: LD_INT 17
5677: PUSH
5678: LD_INT 18
5680: PUSH
5681: LD_INT 19
5683: PUSH
5684: LD_INT 20
5686: PUSH
5687: LD_INT 21
5689: PUSH
5690: LD_INT 22
5692: PUSH
5693: LD_INT 23
5695: PUSH
5696: LD_INT 24
5698: PUSH
5699: LD_INT 25
5701: PUSH
5702: LD_INT 26
5704: PUSH
5705: LD_INT 28
5707: PUSH
5708: LD_INT 30
5710: PUSH
5711: LD_INT 31
5713: PUSH
5714: LD_INT 32
5716: PUSH
5717: LD_INT 36
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: PUSH
5751: LD_INT 101
5753: PUSH
5754: LD_INT 102
5756: PUSH
5757: LD_INT 103
5759: PUSH
5760: LD_INT 104
5762: PUSH
5763: LD_INT 105
5765: PUSH
5766: LD_INT 106
5768: PUSH
5769: LD_INT 107
5771: PUSH
5772: LD_INT 108
5774: PUSH
5775: LD_INT 109
5777: PUSH
5778: LD_INT 110
5780: PUSH
5781: LD_INT 111
5783: PUSH
5784: LD_INT 112
5786: PUSH
5787: LD_INT 114
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: ST_TO_ADDR
5809: GO 7596
5811: LD_INT 11
5813: DOUBLE
5814: EQUAL
5815: IFTRUE 5819
5817: GO 6011
5819: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5820: LD_ADDR_VAR 0 1
5824: PUSH
5825: LD_INT 2
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: LD_INT 4
5833: PUSH
5834: LD_INT 5
5836: PUSH
5837: LD_INT 6
5839: PUSH
5840: LD_INT 7
5842: PUSH
5843: LD_INT 8
5845: PUSH
5846: LD_INT 9
5848: PUSH
5849: LD_INT 10
5851: PUSH
5852: LD_INT 11
5854: PUSH
5855: LD_INT 12
5857: PUSH
5858: LD_INT 13
5860: PUSH
5861: LD_INT 14
5863: PUSH
5864: LD_INT 15
5866: PUSH
5867: LD_INT 16
5869: PUSH
5870: LD_INT 17
5872: PUSH
5873: LD_INT 18
5875: PUSH
5876: LD_INT 19
5878: PUSH
5879: LD_INT 20
5881: PUSH
5882: LD_INT 21
5884: PUSH
5885: LD_INT 22
5887: PUSH
5888: LD_INT 23
5890: PUSH
5891: LD_INT 24
5893: PUSH
5894: LD_INT 25
5896: PUSH
5897: LD_INT 26
5899: PUSH
5900: LD_INT 28
5902: PUSH
5903: LD_INT 30
5905: PUSH
5906: LD_INT 31
5908: PUSH
5909: LD_INT 32
5911: PUSH
5912: LD_INT 34
5914: PUSH
5915: LD_INT 36
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 101
5953: PUSH
5954: LD_INT 102
5956: PUSH
5957: LD_INT 103
5959: PUSH
5960: LD_INT 104
5962: PUSH
5963: LD_INT 105
5965: PUSH
5966: LD_INT 106
5968: PUSH
5969: LD_INT 107
5971: PUSH
5972: LD_INT 108
5974: PUSH
5975: LD_INT 109
5977: PUSH
5978: LD_INT 110
5980: PUSH
5981: LD_INT 111
5983: PUSH
5984: LD_INT 112
5986: PUSH
5987: LD_INT 114
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: ST_TO_ADDR
6009: GO 7596
6011: LD_INT 12
6013: DOUBLE
6014: EQUAL
6015: IFTRUE 6019
6017: GO 6227
6019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6020: LD_ADDR_VAR 0 1
6024: PUSH
6025: LD_INT 1
6027: PUSH
6028: LD_INT 2
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: LD_INT 4
6036: PUSH
6037: LD_INT 5
6039: PUSH
6040: LD_INT 6
6042: PUSH
6043: LD_INT 7
6045: PUSH
6046: LD_INT 8
6048: PUSH
6049: LD_INT 9
6051: PUSH
6052: LD_INT 10
6054: PUSH
6055: LD_INT 11
6057: PUSH
6058: LD_INT 12
6060: PUSH
6061: LD_INT 13
6063: PUSH
6064: LD_INT 14
6066: PUSH
6067: LD_INT 15
6069: PUSH
6070: LD_INT 16
6072: PUSH
6073: LD_INT 17
6075: PUSH
6076: LD_INT 18
6078: PUSH
6079: LD_INT 19
6081: PUSH
6082: LD_INT 20
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_INT 23
6093: PUSH
6094: LD_INT 24
6096: PUSH
6097: LD_INT 25
6099: PUSH
6100: LD_INT 26
6102: PUSH
6103: LD_INT 27
6105: PUSH
6106: LD_INT 28
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 31
6114: PUSH
6115: LD_INT 32
6117: PUSH
6118: LD_INT 33
6120: PUSH
6121: LD_INT 34
6123: PUSH
6124: LD_INT 36
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 101
6165: PUSH
6166: LD_INT 102
6168: PUSH
6169: LD_INT 103
6171: PUSH
6172: LD_INT 104
6174: PUSH
6175: LD_INT 105
6177: PUSH
6178: LD_INT 106
6180: PUSH
6181: LD_INT 107
6183: PUSH
6184: LD_INT 108
6186: PUSH
6187: LD_INT 109
6189: PUSH
6190: LD_INT 110
6192: PUSH
6193: LD_INT 111
6195: PUSH
6196: LD_INT 112
6198: PUSH
6199: LD_INT 113
6201: PUSH
6202: LD_INT 114
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: ST_TO_ADDR
6225: GO 7596
6227: LD_INT 13
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6431
6235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6236: LD_ADDR_VAR 0 1
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: LD_INT 4
6252: PUSH
6253: LD_INT 5
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: LD_INT 9
6261: PUSH
6262: LD_INT 10
6264: PUSH
6265: LD_INT 11
6267: PUSH
6268: LD_INT 12
6270: PUSH
6271: LD_INT 14
6273: PUSH
6274: LD_INT 15
6276: PUSH
6277: LD_INT 16
6279: PUSH
6280: LD_INT 17
6282: PUSH
6283: LD_INT 18
6285: PUSH
6286: LD_INT 19
6288: PUSH
6289: LD_INT 20
6291: PUSH
6292: LD_INT 21
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 23
6300: PUSH
6301: LD_INT 24
6303: PUSH
6304: LD_INT 25
6306: PUSH
6307: LD_INT 26
6309: PUSH
6310: LD_INT 27
6312: PUSH
6313: LD_INT 28
6315: PUSH
6316: LD_INT 30
6318: PUSH
6319: LD_INT 31
6321: PUSH
6322: LD_INT 32
6324: PUSH
6325: LD_INT 33
6327: PUSH
6328: LD_INT 34
6330: PUSH
6331: LD_INT 36
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 101
6369: PUSH
6370: LD_INT 102
6372: PUSH
6373: LD_INT 103
6375: PUSH
6376: LD_INT 104
6378: PUSH
6379: LD_INT 105
6381: PUSH
6382: LD_INT 106
6384: PUSH
6385: LD_INT 107
6387: PUSH
6388: LD_INT 108
6390: PUSH
6391: LD_INT 109
6393: PUSH
6394: LD_INT 110
6396: PUSH
6397: LD_INT 111
6399: PUSH
6400: LD_INT 112
6402: PUSH
6403: LD_INT 113
6405: PUSH
6406: LD_INT 114
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: ST_TO_ADDR
6429: GO 7596
6431: LD_INT 14
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6651
6439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6440: LD_ADDR_VAR 0 1
6444: PUSH
6445: LD_INT 1
6447: PUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: LD_INT 5
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: LD_INT 7
6465: PUSH
6466: LD_INT 8
6468: PUSH
6469: LD_INT 9
6471: PUSH
6472: LD_INT 10
6474: PUSH
6475: LD_INT 11
6477: PUSH
6478: LD_INT 12
6480: PUSH
6481: LD_INT 13
6483: PUSH
6484: LD_INT 14
6486: PUSH
6487: LD_INT 15
6489: PUSH
6490: LD_INT 16
6492: PUSH
6493: LD_INT 17
6495: PUSH
6496: LD_INT 18
6498: PUSH
6499: LD_INT 19
6501: PUSH
6502: LD_INT 20
6504: PUSH
6505: LD_INT 21
6507: PUSH
6508: LD_INT 22
6510: PUSH
6511: LD_INT 23
6513: PUSH
6514: LD_INT 24
6516: PUSH
6517: LD_INT 25
6519: PUSH
6520: LD_INT 26
6522: PUSH
6523: LD_INT 27
6525: PUSH
6526: LD_INT 28
6528: PUSH
6529: LD_INT 29
6531: PUSH
6532: LD_INT 30
6534: PUSH
6535: LD_INT 31
6537: PUSH
6538: LD_INT 32
6540: PUSH
6541: LD_INT 33
6543: PUSH
6544: LD_INT 34
6546: PUSH
6547: LD_INT 36
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 101
6589: PUSH
6590: LD_INT 102
6592: PUSH
6593: LD_INT 103
6595: PUSH
6596: LD_INT 104
6598: PUSH
6599: LD_INT 105
6601: PUSH
6602: LD_INT 106
6604: PUSH
6605: LD_INT 107
6607: PUSH
6608: LD_INT 108
6610: PUSH
6611: LD_INT 109
6613: PUSH
6614: LD_INT 110
6616: PUSH
6617: LD_INT 111
6619: PUSH
6620: LD_INT 112
6622: PUSH
6623: LD_INT 113
6625: PUSH
6626: LD_INT 114
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: ST_TO_ADDR
6649: GO 7596
6651: LD_INT 15
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6871
6659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6660: LD_ADDR_VAR 0 1
6664: PUSH
6665: LD_INT 1
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: LD_INT 5
6679: PUSH
6680: LD_INT 6
6682: PUSH
6683: LD_INT 7
6685: PUSH
6686: LD_INT 8
6688: PUSH
6689: LD_INT 9
6691: PUSH
6692: LD_INT 10
6694: PUSH
6695: LD_INT 11
6697: PUSH
6698: LD_INT 12
6700: PUSH
6701: LD_INT 13
6703: PUSH
6704: LD_INT 14
6706: PUSH
6707: LD_INT 15
6709: PUSH
6710: LD_INT 16
6712: PUSH
6713: LD_INT 17
6715: PUSH
6716: LD_INT 18
6718: PUSH
6719: LD_INT 19
6721: PUSH
6722: LD_INT 20
6724: PUSH
6725: LD_INT 21
6727: PUSH
6728: LD_INT 22
6730: PUSH
6731: LD_INT 23
6733: PUSH
6734: LD_INT 24
6736: PUSH
6737: LD_INT 25
6739: PUSH
6740: LD_INT 26
6742: PUSH
6743: LD_INT 27
6745: PUSH
6746: LD_INT 28
6748: PUSH
6749: LD_INT 29
6751: PUSH
6752: LD_INT 30
6754: PUSH
6755: LD_INT 31
6757: PUSH
6758: LD_INT 32
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 34
6766: PUSH
6767: LD_INT 36
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 101
6809: PUSH
6810: LD_INT 102
6812: PUSH
6813: LD_INT 103
6815: PUSH
6816: LD_INT 104
6818: PUSH
6819: LD_INT 105
6821: PUSH
6822: LD_INT 106
6824: PUSH
6825: LD_INT 107
6827: PUSH
6828: LD_INT 108
6830: PUSH
6831: LD_INT 109
6833: PUSH
6834: LD_INT 110
6836: PUSH
6837: LD_INT 111
6839: PUSH
6840: LD_INT 112
6842: PUSH
6843: LD_INT 113
6845: PUSH
6846: LD_INT 114
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7596
6871: LD_INT 16
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 7003
6879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6880: LD_ADDR_VAR 0 1
6884: PUSH
6885: LD_INT 2
6887: PUSH
6888: LD_INT 4
6890: PUSH
6891: LD_INT 5
6893: PUSH
6894: LD_INT 7
6896: PUSH
6897: LD_INT 11
6899: PUSH
6900: LD_INT 12
6902: PUSH
6903: LD_INT 15
6905: PUSH
6906: LD_INT 16
6908: PUSH
6909: LD_INT 20
6911: PUSH
6912: LD_INT 21
6914: PUSH
6915: LD_INT 22
6917: PUSH
6918: LD_INT 23
6920: PUSH
6921: LD_INT 25
6923: PUSH
6924: LD_INT 26
6926: PUSH
6927: LD_INT 30
6929: PUSH
6930: LD_INT 31
6932: PUSH
6933: LD_INT 32
6935: PUSH
6936: LD_INT 33
6938: PUSH
6939: LD_INT 34
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 101
6965: PUSH
6966: LD_INT 102
6968: PUSH
6969: LD_INT 103
6971: PUSH
6972: LD_INT 106
6974: PUSH
6975: LD_INT 108
6977: PUSH
6978: LD_INT 112
6980: PUSH
6981: LD_INT 113
6983: PUSH
6984: LD_INT 114
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: ST_TO_ADDR
7001: GO 7596
7003: LD_INT 17
7005: DOUBLE
7006: EQUAL
7007: IFTRUE 7011
7009: GO 7223
7011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7012: LD_ADDR_VAR 0 1
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 4
7028: PUSH
7029: LD_INT 5
7031: PUSH
7032: LD_INT 6
7034: PUSH
7035: LD_INT 7
7037: PUSH
7038: LD_INT 8
7040: PUSH
7041: LD_INT 9
7043: PUSH
7044: LD_INT 10
7046: PUSH
7047: LD_INT 11
7049: PUSH
7050: LD_INT 12
7052: PUSH
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: LD_INT 15
7061: PUSH
7062: LD_INT 16
7064: PUSH
7065: LD_INT 17
7067: PUSH
7068: LD_INT 18
7070: PUSH
7071: LD_INT 19
7073: PUSH
7074: LD_INT 20
7076: PUSH
7077: LD_INT 21
7079: PUSH
7080: LD_INT 22
7082: PUSH
7083: LD_INT 23
7085: PUSH
7086: LD_INT 24
7088: PUSH
7089: LD_INT 25
7091: PUSH
7092: LD_INT 26
7094: PUSH
7095: LD_INT 27
7097: PUSH
7098: LD_INT 28
7100: PUSH
7101: LD_INT 29
7103: PUSH
7104: LD_INT 30
7106: PUSH
7107: LD_INT 31
7109: PUSH
7110: LD_INT 32
7112: PUSH
7113: LD_INT 33
7115: PUSH
7116: LD_INT 34
7118: PUSH
7119: LD_INT 36
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 101
7161: PUSH
7162: LD_INT 102
7164: PUSH
7165: LD_INT 103
7167: PUSH
7168: LD_INT 104
7170: PUSH
7171: LD_INT 105
7173: PUSH
7174: LD_INT 106
7176: PUSH
7177: LD_INT 107
7179: PUSH
7180: LD_INT 108
7182: PUSH
7183: LD_INT 109
7185: PUSH
7186: LD_INT 110
7188: PUSH
7189: LD_INT 111
7191: PUSH
7192: LD_INT 112
7194: PUSH
7195: LD_INT 113
7197: PUSH
7198: LD_INT 114
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 7596
7223: LD_INT 18
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7367
7231: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7232: LD_ADDR_VAR 0 1
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: LD_INT 5
7245: PUSH
7246: LD_INT 7
7248: PUSH
7249: LD_INT 11
7251: PUSH
7252: LD_INT 12
7254: PUSH
7255: LD_INT 15
7257: PUSH
7258: LD_INT 16
7260: PUSH
7261: LD_INT 20
7263: PUSH
7264: LD_INT 21
7266: PUSH
7267: LD_INT 22
7269: PUSH
7270: LD_INT 23
7272: PUSH
7273: LD_INT 25
7275: PUSH
7276: LD_INT 26
7278: PUSH
7279: LD_INT 30
7281: PUSH
7282: LD_INT 31
7284: PUSH
7285: LD_INT 32
7287: PUSH
7288: LD_INT 33
7290: PUSH
7291: LD_INT 34
7293: PUSH
7294: LD_INT 35
7296: PUSH
7297: LD_INT 36
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 101
7325: PUSH
7326: LD_INT 102
7328: PUSH
7329: LD_INT 103
7331: PUSH
7332: LD_INT 106
7334: PUSH
7335: LD_INT 108
7337: PUSH
7338: LD_INT 112
7340: PUSH
7341: LD_INT 113
7343: PUSH
7344: LD_INT 114
7346: PUSH
7347: LD_INT 115
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: ST_TO_ADDR
7365: GO 7596
7367: LD_INT 19
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7595
7375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_INT 1
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 5
7395: PUSH
7396: LD_INT 6
7398: PUSH
7399: LD_INT 7
7401: PUSH
7402: LD_INT 8
7404: PUSH
7405: LD_INT 9
7407: PUSH
7408: LD_INT 10
7410: PUSH
7411: LD_INT 11
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 13
7419: PUSH
7420: LD_INT 14
7422: PUSH
7423: LD_INT 15
7425: PUSH
7426: LD_INT 16
7428: PUSH
7429: LD_INT 17
7431: PUSH
7432: LD_INT 18
7434: PUSH
7435: LD_INT 19
7437: PUSH
7438: LD_INT 20
7440: PUSH
7441: LD_INT 21
7443: PUSH
7444: LD_INT 22
7446: PUSH
7447: LD_INT 23
7449: PUSH
7450: LD_INT 24
7452: PUSH
7453: LD_INT 25
7455: PUSH
7456: LD_INT 26
7458: PUSH
7459: LD_INT 27
7461: PUSH
7462: LD_INT 28
7464: PUSH
7465: LD_INT 29
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 31
7473: PUSH
7474: LD_INT 32
7476: PUSH
7477: LD_INT 33
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 35
7485: PUSH
7486: LD_INT 36
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 101
7529: PUSH
7530: LD_INT 102
7532: PUSH
7533: LD_INT 103
7535: PUSH
7536: LD_INT 104
7538: PUSH
7539: LD_INT 105
7541: PUSH
7542: LD_INT 106
7544: PUSH
7545: LD_INT 107
7547: PUSH
7548: LD_INT 108
7550: PUSH
7551: LD_INT 109
7553: PUSH
7554: LD_INT 110
7556: PUSH
7557: LD_INT 111
7559: PUSH
7560: LD_INT 112
7562: PUSH
7563: LD_INT 113
7565: PUSH
7566: LD_INT 114
7568: PUSH
7569: LD_INT 115
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: ST_TO_ADDR
7593: GO 7596
7595: POP
// end else
7596: GO 7815
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7598: LD_ADDR_VAR 0 1
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 2
7608: PUSH
7609: LD_INT 3
7611: PUSH
7612: LD_INT 4
7614: PUSH
7615: LD_INT 5
7617: PUSH
7618: LD_INT 6
7620: PUSH
7621: LD_INT 7
7623: PUSH
7624: LD_INT 8
7626: PUSH
7627: LD_INT 9
7629: PUSH
7630: LD_INT 10
7632: PUSH
7633: LD_INT 11
7635: PUSH
7636: LD_INT 12
7638: PUSH
7639: LD_INT 13
7641: PUSH
7642: LD_INT 14
7644: PUSH
7645: LD_INT 15
7647: PUSH
7648: LD_INT 16
7650: PUSH
7651: LD_INT 17
7653: PUSH
7654: LD_INT 18
7656: PUSH
7657: LD_INT 19
7659: PUSH
7660: LD_INT 20
7662: PUSH
7663: LD_INT 21
7665: PUSH
7666: LD_INT 22
7668: PUSH
7669: LD_INT 23
7671: PUSH
7672: LD_INT 24
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 26
7680: PUSH
7681: LD_INT 27
7683: PUSH
7684: LD_INT 28
7686: PUSH
7687: LD_INT 29
7689: PUSH
7690: LD_INT 30
7692: PUSH
7693: LD_INT 31
7695: PUSH
7696: LD_INT 32
7698: PUSH
7699: LD_INT 33
7701: PUSH
7702: LD_INT 34
7704: PUSH
7705: LD_INT 35
7707: PUSH
7708: LD_INT 36
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 101
7751: PUSH
7752: LD_INT 102
7754: PUSH
7755: LD_INT 103
7757: PUSH
7758: LD_INT 104
7760: PUSH
7761: LD_INT 105
7763: PUSH
7764: LD_INT 106
7766: PUSH
7767: LD_INT 107
7769: PUSH
7770: LD_INT 108
7772: PUSH
7773: LD_INT 109
7775: PUSH
7776: LD_INT 110
7778: PUSH
7779: LD_INT 111
7781: PUSH
7782: LD_INT 112
7784: PUSH
7785: LD_INT 113
7787: PUSH
7788: LD_INT 114
7790: PUSH
7791: LD_INT 115
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: ST_TO_ADDR
// if result then
7815: LD_VAR 0 1
7819: IFFALSE 8108
// begin normal :=  ;
7821: LD_ADDR_VAR 0 3
7825: PUSH
7826: LD_STRING 
7828: ST_TO_ADDR
// hardcore :=  ;
7829: LD_ADDR_VAR 0 4
7833: PUSH
7834: LD_STRING 
7836: ST_TO_ADDR
// for i = 1 to normalCounter do
7837: LD_ADDR_VAR 0 5
7841: PUSH
7842: DOUBLE
7843: LD_INT 1
7845: DEC
7846: ST_TO_ADDR
7847: LD_EXP 23
7851: PUSH
7852: FOR_TO
7853: IFFALSE 7954
// begin tmp := 0 ;
7855: LD_ADDR_VAR 0 2
7859: PUSH
7860: LD_STRING 0
7862: ST_TO_ADDR
// if result [ 1 ] then
7863: LD_VAR 0 1
7867: PUSH
7868: LD_INT 1
7870: ARRAY
7871: IFFALSE 7936
// if result [ 1 ] [ 1 ] = i then
7873: LD_VAR 0 1
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PUSH
7882: LD_INT 1
7884: ARRAY
7885: PUSH
7886: LD_VAR 0 5
7890: EQUAL
7891: IFFALSE 7936
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7893: LD_ADDR_VAR 0 1
7897: PUSH
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_INT 1
7905: PPUSH
7906: LD_VAR 0 1
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 1
7917: PPUSH
7918: CALL_OW 3
7922: PPUSH
7923: CALL_OW 1
7927: ST_TO_ADDR
// tmp := 1 ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_STRING 1
7935: ST_TO_ADDR
// end ; normal := normal & tmp ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 3
7945: PUSH
7946: LD_VAR 0 2
7950: STR
7951: ST_TO_ADDR
// end ;
7952: GO 7852
7954: POP
7955: POP
// for i = 1 to hardcoreCounter do
7956: LD_ADDR_VAR 0 5
7960: PUSH
7961: DOUBLE
7962: LD_INT 1
7964: DEC
7965: ST_TO_ADDR
7966: LD_EXP 24
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8077
// begin tmp := 0 ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_STRING 0
7981: ST_TO_ADDR
// if result [ 2 ] then
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 2
7989: ARRAY
7990: IFFALSE 8059
// if result [ 2 ] [ 1 ] = 100 + i then
7992: LD_VAR 0 1
7996: PUSH
7997: LD_INT 2
7999: ARRAY
8000: PUSH
8001: LD_INT 1
8003: ARRAY
8004: PUSH
8005: LD_INT 100
8007: PUSH
8008: LD_VAR 0 5
8012: PLUS
8013: EQUAL
8014: IFFALSE 8059
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8016: LD_ADDR_VAR 0 1
8020: PUSH
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_INT 2
8028: PPUSH
8029: LD_VAR 0 1
8033: PUSH
8034: LD_INT 2
8036: ARRAY
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 3
8045: PPUSH
8046: CALL_OW 1
8050: ST_TO_ADDR
// tmp := 1 ;
8051: LD_ADDR_VAR 0 2
8055: PUSH
8056: LD_STRING 1
8058: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8059: LD_ADDR_VAR 0 4
8063: PUSH
8064: LD_VAR 0 4
8068: PUSH
8069: LD_VAR 0 2
8073: STR
8074: ST_TO_ADDR
// end ;
8075: GO 7971
8077: POP
8078: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8079: LD_STRING getStreamItemsFromMission("
8081: PUSH
8082: LD_VAR 0 3
8086: STR
8087: PUSH
8088: LD_STRING ","
8090: STR
8091: PUSH
8092: LD_VAR 0 4
8096: STR
8097: PUSH
8098: LD_STRING ")
8100: STR
8101: PPUSH
8102: CALL_OW 559
// end else
8106: GO 8115
// ToLua ( getStreamItemsFromMission("","") ) ;
8108: LD_STRING getStreamItemsFromMission("","")
8110: PPUSH
8111: CALL_OW 559
// end ;
8115: LD_VAR 0 1
8119: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8120: LD_VAR 0 2
8124: PUSH
8125: LD_INT 100
8127: EQUAL
8128: IFFALSE 9077
// begin if not StreamModeActive then
8130: LD_EXP 22
8134: NOT
8135: IFFALSE 8145
// StreamModeActive := true ;
8137: LD_ADDR_EXP 22
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 0 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 0
8152: EQUAL
8153: IFFALSE 8159
// InitStreamMode ;
8155: CALL 4198 0 0
// if p3 = 1 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 1
8166: EQUAL
8167: IFFALSE 8177
// sRocket := true ;
8169: LD_ADDR_EXP 27
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 2 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 2
8184: EQUAL
8185: IFFALSE 8195
// sSpeed := true ;
8187: LD_ADDR_EXP 26
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 3 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 3
8202: EQUAL
8203: IFFALSE 8213
// sEngine := true ;
8205: LD_ADDR_EXP 28
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 4 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 4
8220: EQUAL
8221: IFFALSE 8231
// sSpec := true ;
8223: LD_ADDR_EXP 25
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 5 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 5
8238: EQUAL
8239: IFFALSE 8249
// sLevel := true ;
8241: LD_ADDR_EXP 29
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 6 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 6
8256: EQUAL
8257: IFFALSE 8267
// sArmoury := true ;
8259: LD_ADDR_EXP 30
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 7 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 7
8274: EQUAL
8275: IFFALSE 8285
// sRadar := true ;
8277: LD_ADDR_EXP 31
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 8 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 8
8292: EQUAL
8293: IFFALSE 8303
// sBunker := true ;
8295: LD_ADDR_EXP 32
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 9 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 9
8310: EQUAL
8311: IFFALSE 8321
// sHack := true ;
8313: LD_ADDR_EXP 33
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 10 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 10
8328: EQUAL
8329: IFFALSE 8339
// sFire := true ;
8331: LD_ADDR_EXP 34
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 11 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 11
8346: EQUAL
8347: IFFALSE 8357
// sRefresh := true ;
8349: LD_ADDR_EXP 35
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 12 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 12
8364: EQUAL
8365: IFFALSE 8375
// sExp := true ;
8367: LD_ADDR_EXP 36
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 13 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 13
8382: EQUAL
8383: IFFALSE 8393
// sDepot := true ;
8385: LD_ADDR_EXP 37
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 14 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 14
8400: EQUAL
8401: IFFALSE 8411
// sFlag := true ;
8403: LD_ADDR_EXP 38
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 15 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 15
8418: EQUAL
8419: IFFALSE 8429
// sKamikadze := true ;
8421: LD_ADDR_EXP 46
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 16 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 16
8436: EQUAL
8437: IFFALSE 8447
// sTroll := true ;
8439: LD_ADDR_EXP 47
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 17 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 17
8454: EQUAL
8455: IFFALSE 8465
// sSlow := true ;
8457: LD_ADDR_EXP 48
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 18 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 18
8472: EQUAL
8473: IFFALSE 8483
// sLack := true ;
8475: LD_ADDR_EXP 49
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// if p3 = 19 then
8483: LD_VAR 0 3
8487: PUSH
8488: LD_INT 19
8490: EQUAL
8491: IFFALSE 8501
// sTank := true ;
8493: LD_ADDR_EXP 51
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// if p3 = 20 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_INT 20
8508: EQUAL
8509: IFFALSE 8519
// sRemote := true ;
8511: LD_ADDR_EXP 52
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// if p3 = 21 then
8519: LD_VAR 0 3
8523: PUSH
8524: LD_INT 21
8526: EQUAL
8527: IFFALSE 8537
// sPowell := true ;
8529: LD_ADDR_EXP 53
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// if p3 = 22 then
8537: LD_VAR 0 3
8541: PUSH
8542: LD_INT 22
8544: EQUAL
8545: IFFALSE 8555
// sTeleport := true ;
8547: LD_ADDR_EXP 56
8551: PUSH
8552: LD_INT 1
8554: ST_TO_ADDR
// if p3 = 23 then
8555: LD_VAR 0 3
8559: PUSH
8560: LD_INT 23
8562: EQUAL
8563: IFFALSE 8573
// sOilTower := true ;
8565: LD_ADDR_EXP 58
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// if p3 = 24 then
8573: LD_VAR 0 3
8577: PUSH
8578: LD_INT 24
8580: EQUAL
8581: IFFALSE 8591
// sShovel := true ;
8583: LD_ADDR_EXP 59
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// if p3 = 25 then
8591: LD_VAR 0 3
8595: PUSH
8596: LD_INT 25
8598: EQUAL
8599: IFFALSE 8609
// sSheik := true ;
8601: LD_ADDR_EXP 60
8605: PUSH
8606: LD_INT 1
8608: ST_TO_ADDR
// if p3 = 26 then
8609: LD_VAR 0 3
8613: PUSH
8614: LD_INT 26
8616: EQUAL
8617: IFFALSE 8627
// sEarthquake := true ;
8619: LD_ADDR_EXP 62
8623: PUSH
8624: LD_INT 1
8626: ST_TO_ADDR
// if p3 = 27 then
8627: LD_VAR 0 3
8631: PUSH
8632: LD_INT 27
8634: EQUAL
8635: IFFALSE 8645
// sAI := true ;
8637: LD_ADDR_EXP 63
8641: PUSH
8642: LD_INT 1
8644: ST_TO_ADDR
// if p3 = 28 then
8645: LD_VAR 0 3
8649: PUSH
8650: LD_INT 28
8652: EQUAL
8653: IFFALSE 8663
// sCargo := true ;
8655: LD_ADDR_EXP 66
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// if p3 = 29 then
8663: LD_VAR 0 3
8667: PUSH
8668: LD_INT 29
8670: EQUAL
8671: IFFALSE 8681
// sDLaser := true ;
8673: LD_ADDR_EXP 67
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// if p3 = 30 then
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 30
8688: EQUAL
8689: IFFALSE 8699
// sExchange := true ;
8691: LD_ADDR_EXP 68
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
// if p3 = 31 then
8699: LD_VAR 0 3
8703: PUSH
8704: LD_INT 31
8706: EQUAL
8707: IFFALSE 8717
// sFac := true ;
8709: LD_ADDR_EXP 69
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// if p3 = 32 then
8717: LD_VAR 0 3
8721: PUSH
8722: LD_INT 32
8724: EQUAL
8725: IFFALSE 8735
// sPower := true ;
8727: LD_ADDR_EXP 70
8731: PUSH
8732: LD_INT 1
8734: ST_TO_ADDR
// if p3 = 33 then
8735: LD_VAR 0 3
8739: PUSH
8740: LD_INT 33
8742: EQUAL
8743: IFFALSE 8753
// sRandom := true ;
8745: LD_ADDR_EXP 71
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// if p3 = 34 then
8753: LD_VAR 0 3
8757: PUSH
8758: LD_INT 34
8760: EQUAL
8761: IFFALSE 8771
// sShield := true ;
8763: LD_ADDR_EXP 72
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// if p3 = 35 then
8771: LD_VAR 0 3
8775: PUSH
8776: LD_INT 35
8778: EQUAL
8779: IFFALSE 8789
// sTime := true ;
8781: LD_ADDR_EXP 73
8785: PUSH
8786: LD_INT 1
8788: ST_TO_ADDR
// if p3 = 36 then
8789: LD_VAR 0 3
8793: PUSH
8794: LD_INT 36
8796: EQUAL
8797: IFFALSE 8807
// sTools := true ;
8799: LD_ADDR_EXP 74
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// if p3 = 101 then
8807: LD_VAR 0 3
8811: PUSH
8812: LD_INT 101
8814: EQUAL
8815: IFFALSE 8825
// sSold := true ;
8817: LD_ADDR_EXP 39
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// if p3 = 102 then
8825: LD_VAR 0 3
8829: PUSH
8830: LD_INT 102
8832: EQUAL
8833: IFFALSE 8843
// sDiff := true ;
8835: LD_ADDR_EXP 40
8839: PUSH
8840: LD_INT 1
8842: ST_TO_ADDR
// if p3 = 103 then
8843: LD_VAR 0 3
8847: PUSH
8848: LD_INT 103
8850: EQUAL
8851: IFFALSE 8861
// sFog := true ;
8853: LD_ADDR_EXP 43
8857: PUSH
8858: LD_INT 1
8860: ST_TO_ADDR
// if p3 = 104 then
8861: LD_VAR 0 3
8865: PUSH
8866: LD_INT 104
8868: EQUAL
8869: IFFALSE 8879
// sReset := true ;
8871: LD_ADDR_EXP 44
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
// if p3 = 105 then
8879: LD_VAR 0 3
8883: PUSH
8884: LD_INT 105
8886: EQUAL
8887: IFFALSE 8897
// sSun := true ;
8889: LD_ADDR_EXP 45
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// if p3 = 106 then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 106
8904: EQUAL
8905: IFFALSE 8915
// sTiger := true ;
8907: LD_ADDR_EXP 41
8911: PUSH
8912: LD_INT 1
8914: ST_TO_ADDR
// if p3 = 107 then
8915: LD_VAR 0 3
8919: PUSH
8920: LD_INT 107
8922: EQUAL
8923: IFFALSE 8933
// sBomb := true ;
8925: LD_ADDR_EXP 42
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// if p3 = 108 then
8933: LD_VAR 0 3
8937: PUSH
8938: LD_INT 108
8940: EQUAL
8941: IFFALSE 8951
// sWound := true ;
8943: LD_ADDR_EXP 50
8947: PUSH
8948: LD_INT 1
8950: ST_TO_ADDR
// if p3 = 109 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 109
8958: EQUAL
8959: IFFALSE 8969
// sBetray := true ;
8961: LD_ADDR_EXP 54
8965: PUSH
8966: LD_INT 1
8968: ST_TO_ADDR
// if p3 = 110 then
8969: LD_VAR 0 3
8973: PUSH
8974: LD_INT 110
8976: EQUAL
8977: IFFALSE 8987
// sContamin := true ;
8979: LD_ADDR_EXP 55
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// if p3 = 111 then
8987: LD_VAR 0 3
8991: PUSH
8992: LD_INT 111
8994: EQUAL
8995: IFFALSE 9005
// sOil := true ;
8997: LD_ADDR_EXP 57
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// if p3 = 112 then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_INT 112
9012: EQUAL
9013: IFFALSE 9023
// sStu := true ;
9015: LD_ADDR_EXP 61
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// if p3 = 113 then
9023: LD_VAR 0 3
9027: PUSH
9028: LD_INT 113
9030: EQUAL
9031: IFFALSE 9041
// sBazooka := true ;
9033: LD_ADDR_EXP 64
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// if p3 = 114 then
9041: LD_VAR 0 3
9045: PUSH
9046: LD_INT 114
9048: EQUAL
9049: IFFALSE 9059
// sMortar := true ;
9051: LD_ADDR_EXP 65
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
// if p3 = 115 then
9059: LD_VAR 0 3
9063: PUSH
9064: LD_INT 115
9066: EQUAL
9067: IFFALSE 9077
// sRanger := true ;
9069: LD_ADDR_EXP 75
9073: PUSH
9074: LD_INT 1
9076: ST_TO_ADDR
// end ; end ;
9077: PPOPN 6
9079: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9080: LD_EXP 22
9084: PUSH
9085: LD_EXP 27
9089: AND
9090: IFFALSE 9214
9092: GO 9094
9094: DISABLE
9095: LD_INT 0
9097: PPUSH
9098: PPUSH
// begin enable ;
9099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9100: LD_ADDR_VAR 0 2
9104: PUSH
9105: LD_INT 22
9107: PUSH
9108: LD_OWVAR 2
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 2
9119: PUSH
9120: LD_INT 34
9122: PUSH
9123: LD_INT 7
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 34
9132: PUSH
9133: LD_INT 45
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 34
9142: PUSH
9143: LD_INT 28
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 34
9152: PUSH
9153: LD_INT 47
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PPUSH
9171: CALL_OW 69
9175: ST_TO_ADDR
// if not tmp then
9176: LD_VAR 0 2
9180: NOT
9181: IFFALSE 9185
// exit ;
9183: GO 9214
// for i in tmp do
9185: LD_ADDR_VAR 0 1
9189: PUSH
9190: LD_VAR 0 2
9194: PUSH
9195: FOR_IN
9196: IFFALSE 9212
// begin SetLives ( i , 0 ) ;
9198: LD_VAR 0 1
9202: PPUSH
9203: LD_INT 0
9205: PPUSH
9206: CALL_OW 234
// end ;
9210: GO 9195
9212: POP
9213: POP
// end ;
9214: PPOPN 2
9216: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9217: LD_EXP 22
9221: PUSH
9222: LD_EXP 28
9226: AND
9227: IFFALSE 9311
9229: GO 9231
9231: DISABLE
9232: LD_INT 0
9234: PPUSH
9235: PPUSH
// begin enable ;
9236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_OWVAR 2
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 32
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PPUSH
9268: CALL_OW 69
9272: ST_TO_ADDR
// if not tmp then
9273: LD_VAR 0 2
9277: NOT
9278: IFFALSE 9282
// exit ;
9280: GO 9311
// for i in tmp do
9282: LD_ADDR_VAR 0 1
9286: PUSH
9287: LD_VAR 0 2
9291: PUSH
9292: FOR_IN
9293: IFFALSE 9309
// begin SetLives ( i , 0 ) ;
9295: LD_VAR 0 1
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: CALL_OW 234
// end ;
9307: GO 9292
9309: POP
9310: POP
// end ;
9311: PPOPN 2
9313: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9314: LD_EXP 22
9318: PUSH
9319: LD_EXP 25
9323: AND
9324: IFFALSE 9417
9326: GO 9328
9328: DISABLE
9329: LD_INT 0
9331: PPUSH
// begin enable ;
9332: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9333: LD_ADDR_VAR 0 1
9337: PUSH
9338: LD_INT 22
9340: PUSH
9341: LD_OWVAR 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: LD_INT 25
9355: PUSH
9356: LD_INT 5
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 25
9365: PUSH
9366: LD_INT 9
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 25
9375: PUSH
9376: LD_INT 8
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PPUSH
9393: CALL_OW 69
9397: PUSH
9398: FOR_IN
9399: IFFALSE 9415
// begin SetClass ( i , 1 ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 336
// end ;
9413: GO 9398
9415: POP
9416: POP
// end ;
9417: PPOPN 1
9419: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9420: LD_EXP 22
9424: PUSH
9425: LD_EXP 26
9429: AND
9430: PUSH
9431: LD_OWVAR 65
9435: PUSH
9436: LD_INT 7
9438: LESS
9439: AND
9440: IFFALSE 9454
9442: GO 9444
9444: DISABLE
// begin enable ;
9445: ENABLE
// game_speed := 7 ;
9446: LD_ADDR_OWVAR 65
9450: PUSH
9451: LD_INT 7
9453: ST_TO_ADDR
// end ;
9454: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9455: LD_EXP 22
9459: PUSH
9460: LD_EXP 29
9464: AND
9465: IFFALSE 9667
9467: GO 9469
9469: DISABLE
9470: LD_INT 0
9472: PPUSH
9473: PPUSH
9474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9475: LD_ADDR_VAR 0 3
9479: PUSH
9480: LD_INT 81
9482: PUSH
9483: LD_OWVAR 2
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: LD_INT 21
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 69
9510: ST_TO_ADDR
// if not tmp then
9511: LD_VAR 0 3
9515: NOT
9516: IFFALSE 9520
// exit ;
9518: GO 9667
// if tmp > 5 then
9520: LD_VAR 0 3
9524: PUSH
9525: LD_INT 5
9527: GREATER
9528: IFFALSE 9540
// k := 5 else
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: LD_INT 5
9537: ST_TO_ADDR
9538: GO 9550
// k := tmp ;
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: LD_VAR 0 3
9549: ST_TO_ADDR
// for i := 1 to k do
9550: LD_ADDR_VAR 0 1
9554: PUSH
9555: DOUBLE
9556: LD_INT 1
9558: DEC
9559: ST_TO_ADDR
9560: LD_VAR 0 2
9564: PUSH
9565: FOR_TO
9566: IFFALSE 9665
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_VAR 0 1
9577: ARRAY
9578: PPUSH
9579: LD_VAR 0 1
9583: PUSH
9584: LD_INT 4
9586: MOD
9587: PUSH
9588: LD_INT 1
9590: PLUS
9591: PPUSH
9592: CALL_OW 259
9596: PUSH
9597: LD_INT 10
9599: LESS
9600: IFFALSE 9663
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9602: LD_VAR 0 3
9606: PUSH
9607: LD_VAR 0 1
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 1
9617: PUSH
9618: LD_INT 4
9620: MOD
9621: PUSH
9622: LD_INT 1
9624: PLUS
9625: PPUSH
9626: LD_VAR 0 3
9630: PUSH
9631: LD_VAR 0 1
9635: ARRAY
9636: PPUSH
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 4
9644: MOD
9645: PUSH
9646: LD_INT 1
9648: PLUS
9649: PPUSH
9650: CALL_OW 259
9654: PUSH
9655: LD_INT 1
9657: PLUS
9658: PPUSH
9659: CALL_OW 237
9663: GO 9565
9665: POP
9666: POP
// end ;
9667: PPOPN 3
9669: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9670: LD_EXP 22
9674: PUSH
9675: LD_EXP 30
9679: AND
9680: IFFALSE 9700
9682: GO 9684
9684: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9685: LD_INT 4
9687: PPUSH
9688: LD_OWVAR 2
9692: PPUSH
9693: LD_INT 0
9695: PPUSH
9696: CALL_OW 324
9700: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9701: LD_EXP 22
9705: PUSH
9706: LD_EXP 59
9710: AND
9711: IFFALSE 9731
9713: GO 9715
9715: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9716: LD_INT 19
9718: PPUSH
9719: LD_OWVAR 2
9723: PPUSH
9724: LD_INT 0
9726: PPUSH
9727: CALL_OW 324
9731: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9732: LD_EXP 22
9736: PUSH
9737: LD_EXP 31
9741: AND
9742: IFFALSE 9844
9744: GO 9746
9746: DISABLE
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
// begin enable ;
9751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9752: LD_ADDR_VAR 0 2
9756: PUSH
9757: LD_INT 22
9759: PUSH
9760: LD_OWVAR 2
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 34
9774: PUSH
9775: LD_INT 11
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 34
9784: PUSH
9785: LD_INT 30
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// if not tmp then
9806: LD_VAR 0 2
9810: NOT
9811: IFFALSE 9815
// exit ;
9813: GO 9844
// for i in tmp do
9815: LD_ADDR_VAR 0 1
9819: PUSH
9820: LD_VAR 0 2
9824: PUSH
9825: FOR_IN
9826: IFFALSE 9842
// begin SetLives ( i , 0 ) ;
9828: LD_VAR 0 1
9832: PPUSH
9833: LD_INT 0
9835: PPUSH
9836: CALL_OW 234
// end ;
9840: GO 9825
9842: POP
9843: POP
// end ;
9844: PPOPN 2
9846: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9847: LD_EXP 22
9851: PUSH
9852: LD_EXP 32
9856: AND
9857: IFFALSE 9877
9859: GO 9861
9861: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9862: LD_INT 32
9864: PPUSH
9865: LD_OWVAR 2
9869: PPUSH
9870: LD_INT 0
9872: PPUSH
9873: CALL_OW 324
9877: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9878: LD_EXP 22
9882: PUSH
9883: LD_EXP 33
9887: AND
9888: IFFALSE 10069
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
9897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_OWVAR 2
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 33
9917: PUSH
9918: LD_INT 3
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 69
9933: ST_TO_ADDR
// if not tmp then
9934: LD_VAR 0 2
9938: NOT
9939: IFFALSE 9943
// exit ;
9941: GO 10069
// side := 0 ;
9943: LD_ADDR_VAR 0 3
9947: PUSH
9948: LD_INT 0
9950: ST_TO_ADDR
// for i := 1 to 8 do
9951: LD_ADDR_VAR 0 1
9955: PUSH
9956: DOUBLE
9957: LD_INT 1
9959: DEC
9960: ST_TO_ADDR
9961: LD_INT 8
9963: PUSH
9964: FOR_TO
9965: IFFALSE 10013
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9967: LD_OWVAR 2
9971: PUSH
9972: LD_VAR 0 1
9976: NONEQUAL
9977: PUSH
9978: LD_OWVAR 2
9982: PPUSH
9983: LD_VAR 0 1
9987: PPUSH
9988: CALL_OW 81
9992: PUSH
9993: LD_INT 2
9995: EQUAL
9996: AND
9997: IFFALSE 10011
// begin side := i ;
9999: LD_ADDR_VAR 0 3
10003: PUSH
10004: LD_VAR 0 1
10008: ST_TO_ADDR
// break ;
10009: GO 10013
// end ;
10011: GO 9964
10013: POP
10014: POP
// if not side then
10015: LD_VAR 0 3
10019: NOT
10020: IFFALSE 10024
// exit ;
10022: GO 10069
// for i := 1 to tmp do
10024: LD_ADDR_VAR 0 1
10028: PUSH
10029: DOUBLE
10030: LD_INT 1
10032: DEC
10033: ST_TO_ADDR
10034: LD_VAR 0 2
10038: PUSH
10039: FOR_TO
10040: IFFALSE 10067
// if Prob ( 60 ) then
10042: LD_INT 60
10044: PPUSH
10045: CALL_OW 13
10049: IFFALSE 10065
// SetSide ( i , side ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 3
10060: PPUSH
10061: CALL_OW 235
10065: GO 10039
10067: POP
10068: POP
// end ;
10069: PPOPN 3
10071: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10072: LD_EXP 22
10076: PUSH
10077: LD_EXP 35
10081: AND
10082: IFFALSE 10201
10084: GO 10086
10086: DISABLE
10087: LD_INT 0
10089: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10090: LD_ADDR_VAR 0 1
10094: PUSH
10095: LD_INT 22
10097: PUSH
10098: LD_OWVAR 2
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 21
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 3
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 0
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: PPUSH
10139: CALL_OW 69
10143: PUSH
10144: FOR_IN
10145: IFFALSE 10199
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 257
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: LD_INT 2
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: IN
10175: IFFALSE 10197
// SetClass ( un , rand ( 1 , 4 ) ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: LD_INT 4
10187: PPUSH
10188: CALL_OW 12
10192: PPUSH
10193: CALL_OW 336
10197: GO 10144
10199: POP
10200: POP
// end ;
10201: PPOPN 1
10203: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10204: LD_EXP 22
10208: PUSH
10209: LD_EXP 34
10213: AND
10214: IFFALSE 10293
10216: GO 10218
10218: DISABLE
10219: LD_INT 0
10221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10222: LD_ADDR_VAR 0 1
10226: PUSH
10227: LD_INT 22
10229: PUSH
10230: LD_OWVAR 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 21
10241: PUSH
10242: LD_INT 3
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: ST_TO_ADDR
// if not tmp then
10258: LD_VAR 0 1
10262: NOT
10263: IFFALSE 10267
// exit ;
10265: GO 10293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10267: LD_VAR 0 1
10271: PUSH
10272: LD_INT 1
10274: PPUSH
10275: LD_VAR 0 1
10279: PPUSH
10280: CALL_OW 12
10284: ARRAY
10285: PPUSH
10286: LD_INT 100
10288: PPUSH
10289: CALL_OW 234
// end ;
10293: PPOPN 1
10295: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10296: LD_EXP 22
10300: PUSH
10301: LD_EXP 36
10305: AND
10306: IFFALSE 10404
10308: GO 10310
10310: DISABLE
10311: LD_INT 0
10313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10314: LD_ADDR_VAR 0 1
10318: PUSH
10319: LD_INT 22
10321: PUSH
10322: LD_OWVAR 2
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 21
10333: PUSH
10334: LD_INT 1
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: ST_TO_ADDR
// if not tmp then
10350: LD_VAR 0 1
10354: NOT
10355: IFFALSE 10359
// exit ;
10357: GO 10404
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10359: LD_VAR 0 1
10363: PUSH
10364: LD_INT 1
10366: PPUSH
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL_OW 12
10376: ARRAY
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: LD_INT 4
10383: PPUSH
10384: CALL_OW 12
10388: PPUSH
10389: LD_INT 3000
10391: PPUSH
10392: LD_INT 9000
10394: PPUSH
10395: CALL_OW 12
10399: PPUSH
10400: CALL_OW 492
// end ;
10404: PPOPN 1
10406: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10407: LD_EXP 22
10411: PUSH
10412: LD_EXP 37
10416: AND
10417: IFFALSE 10437
10419: GO 10421
10421: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10422: LD_INT 1
10424: PPUSH
10425: LD_OWVAR 2
10429: PPUSH
10430: LD_INT 0
10432: PPUSH
10433: CALL_OW 324
10437: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10438: LD_EXP 22
10442: PUSH
10443: LD_EXP 38
10447: AND
10448: IFFALSE 10531
10450: GO 10452
10452: DISABLE
10453: LD_INT 0
10455: PPUSH
10456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_INT 22
10464: PUSH
10465: LD_OWVAR 2
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 21
10476: PUSH
10477: LD_INT 3
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PPUSH
10488: CALL_OW 69
10492: ST_TO_ADDR
// if not tmp then
10493: LD_VAR 0 2
10497: NOT
10498: IFFALSE 10502
// exit ;
10500: GO 10531
// for i in tmp do
10502: LD_ADDR_VAR 0 1
10506: PUSH
10507: LD_VAR 0 2
10511: PUSH
10512: FOR_IN
10513: IFFALSE 10529
// SetBLevel ( i , 10 ) ;
10515: LD_VAR 0 1
10519: PPUSH
10520: LD_INT 10
10522: PPUSH
10523: CALL_OW 241
10527: GO 10512
10529: POP
10530: POP
// end ;
10531: PPOPN 2
10533: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10534: LD_EXP 22
10538: PUSH
10539: LD_EXP 39
10543: AND
10544: IFFALSE 10655
10546: GO 10548
10548: DISABLE
10549: LD_INT 0
10551: PPUSH
10552: PPUSH
10553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10554: LD_ADDR_VAR 0 3
10558: PUSH
10559: LD_INT 22
10561: PUSH
10562: LD_OWVAR 2
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 25
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PPUSH
10585: CALL_OW 69
10589: ST_TO_ADDR
// if not tmp then
10590: LD_VAR 0 3
10594: NOT
10595: IFFALSE 10599
// exit ;
10597: GO 10655
// un := tmp [ rand ( 1 , tmp ) ] ;
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: LD_VAR 0 3
10608: PUSH
10609: LD_INT 1
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: CALL_OW 12
10621: ARRAY
10622: ST_TO_ADDR
// if Crawls ( un ) then
10623: LD_VAR 0 2
10627: PPUSH
10628: CALL_OW 318
10632: IFFALSE 10643
// ComWalk ( un ) ;
10634: LD_VAR 0 2
10638: PPUSH
10639: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10643: LD_VAR 0 2
10647: PPUSH
10648: LD_INT 5
10650: PPUSH
10651: CALL_OW 336
// end ;
10655: PPOPN 3
10657: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10658: LD_EXP 22
10662: PUSH
10663: LD_EXP 40
10667: AND
10668: PUSH
10669: LD_OWVAR 67
10673: PUSH
10674: LD_INT 3
10676: LESS
10677: AND
10678: IFFALSE 10697
10680: GO 10682
10682: DISABLE
// Difficulty := Difficulty + 1 ;
10683: LD_ADDR_OWVAR 67
10687: PUSH
10688: LD_OWVAR 67
10692: PUSH
10693: LD_INT 1
10695: PLUS
10696: ST_TO_ADDR
10697: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10698: LD_EXP 22
10702: PUSH
10703: LD_EXP 41
10707: AND
10708: IFFALSE 10811
10710: GO 10712
10712: DISABLE
10713: LD_INT 0
10715: PPUSH
// begin for i := 1 to 5 do
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: DOUBLE
10722: LD_INT 1
10724: DEC
10725: ST_TO_ADDR
10726: LD_INT 5
10728: PUSH
10729: FOR_TO
10730: IFFALSE 10809
// begin uc_nation := nation_nature ;
10732: LD_ADDR_OWVAR 21
10736: PUSH
10737: LD_INT 0
10739: ST_TO_ADDR
// uc_side := 0 ;
10740: LD_ADDR_OWVAR 20
10744: PUSH
10745: LD_INT 0
10747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10748: LD_ADDR_OWVAR 29
10752: PUSH
10753: LD_INT 12
10755: PUSH
10756: LD_INT 12
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: ST_TO_ADDR
// hc_agressivity := 20 ;
10763: LD_ADDR_OWVAR 35
10767: PUSH
10768: LD_INT 20
10770: ST_TO_ADDR
// hc_class := class_tiger ;
10771: LD_ADDR_OWVAR 28
10775: PUSH
10776: LD_INT 14
10778: ST_TO_ADDR
// hc_gallery :=  ;
10779: LD_ADDR_OWVAR 33
10783: PUSH
10784: LD_STRING 
10786: ST_TO_ADDR
// hc_name :=  ;
10787: LD_ADDR_OWVAR 26
10791: PUSH
10792: LD_STRING 
10794: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10795: CALL_OW 44
10799: PPUSH
10800: LD_INT 0
10802: PPUSH
10803: CALL_OW 51
// end ;
10807: GO 10729
10809: POP
10810: POP
// end ;
10811: PPOPN 1
10813: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10814: LD_EXP 22
10818: PUSH
10819: LD_EXP 42
10823: AND
10824: IFFALSE 10833
10826: GO 10828
10828: DISABLE
// StreamSibBomb ;
10829: CALL 10834 0 0
10833: END
// export function StreamSibBomb ; var i , x , y ; begin
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
// result := false ;
10840: LD_ADDR_VAR 0 1
10844: PUSH
10845: LD_INT 0
10847: ST_TO_ADDR
// for i := 1 to 16 do
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: DOUBLE
10854: LD_INT 1
10856: DEC
10857: ST_TO_ADDR
10858: LD_INT 16
10860: PUSH
10861: FOR_TO
10862: IFFALSE 11061
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_INT 10
10871: PUSH
10872: LD_INT 20
10874: PUSH
10875: LD_INT 30
10877: PUSH
10878: LD_INT 40
10880: PUSH
10881: LD_INT 50
10883: PUSH
10884: LD_INT 60
10886: PUSH
10887: LD_INT 70
10889: PUSH
10890: LD_INT 80
10892: PUSH
10893: LD_INT 90
10895: PUSH
10896: LD_INT 100
10898: PUSH
10899: LD_INT 110
10901: PUSH
10902: LD_INT 120
10904: PUSH
10905: LD_INT 130
10907: PUSH
10908: LD_INT 140
10910: PUSH
10911: LD_INT 150
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 1
10933: PPUSH
10934: LD_INT 15
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10943: LD_ADDR_VAR 0 4
10947: PUSH
10948: LD_INT 10
10950: PUSH
10951: LD_INT 20
10953: PUSH
10954: LD_INT 30
10956: PUSH
10957: LD_INT 40
10959: PUSH
10960: LD_INT 50
10962: PUSH
10963: LD_INT 60
10965: PUSH
10966: LD_INT 70
10968: PUSH
10969: LD_INT 80
10971: PUSH
10972: LD_INT 90
10974: PUSH
10975: LD_INT 100
10977: PUSH
10978: LD_INT 110
10980: PUSH
10981: LD_INT 120
10983: PUSH
10984: LD_INT 130
10986: PUSH
10987: LD_INT 140
10989: PUSH
10990: LD_INT 150
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 1
11012: PPUSH
11013: LD_INT 15
11015: PPUSH
11016: CALL_OW 12
11020: ARRAY
11021: ST_TO_ADDR
// if ValidHex ( x , y ) then
11022: LD_VAR 0 3
11026: PPUSH
11027: LD_VAR 0 4
11031: PPUSH
11032: CALL_OW 488
11036: IFFALSE 11059
// begin result := [ x , y ] ;
11038: LD_ADDR_VAR 0 1
11042: PUSH
11043: LD_VAR 0 3
11047: PUSH
11048: LD_VAR 0 4
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// break ;
11057: GO 11061
// end ; end ;
11059: GO 10861
11061: POP
11062: POP
// if result then
11063: LD_VAR 0 1
11067: IFFALSE 11127
// begin ToLua ( playSibBomb() ) ;
11069: LD_STRING playSibBomb()
11071: PPUSH
11072: CALL_OW 559
// wait ( 0 0$14 ) ;
11076: LD_INT 490
11078: PPUSH
11079: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11083: LD_VAR 0 1
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 1
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11105: LD_VAR 0 1
11109: PUSH
11110: LD_INT 1
11112: ARRAY
11113: PPUSH
11114: LD_VAR 0 1
11118: PUSH
11119: LD_INT 2
11121: ARRAY
11122: PPUSH
11123: CALL_OW 429
// end ; end ;
11127: LD_VAR 0 1
11131: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11132: LD_EXP 22
11136: PUSH
11137: LD_EXP 44
11141: AND
11142: IFFALSE 11154
11144: GO 11146
11146: DISABLE
// YouLost (  ) ;
11147: LD_STRING 
11149: PPUSH
11150: CALL_OW 104
11154: END
// every 0 0$1 trigger StreamModeActive and sFog do
11155: LD_EXP 22
11159: PUSH
11160: LD_EXP 43
11164: AND
11165: IFFALSE 11179
11167: GO 11169
11169: DISABLE
// FogOff ( your_side ) ;
11170: LD_OWVAR 2
11174: PPUSH
11175: CALL_OW 344
11179: END
// every 0 0$1 trigger StreamModeActive and sSun do
11180: LD_EXP 22
11184: PUSH
11185: LD_EXP 45
11189: AND
11190: IFFALSE 11218
11192: GO 11194
11194: DISABLE
// begin solar_recharge_percent := 0 ;
11195: LD_ADDR_OWVAR 79
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11203: LD_INT 10500
11205: PPUSH
11206: CALL_OW 67
// solar_recharge_percent := 100 ;
11210: LD_ADDR_OWVAR 79
11214: PUSH
11215: LD_INT 100
11217: ST_TO_ADDR
// end ;
11218: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11219: LD_EXP 22
11223: PUSH
11224: LD_EXP 46
11228: AND
11229: IFFALSE 11468
11231: GO 11233
11233: DISABLE
11234: LD_INT 0
11236: PPUSH
11237: PPUSH
11238: PPUSH
// begin tmp := [ ] ;
11239: LD_ADDR_VAR 0 3
11243: PUSH
11244: EMPTY
11245: ST_TO_ADDR
// for i := 1 to 6 do
11246: LD_ADDR_VAR 0 1
11250: PUSH
11251: DOUBLE
11252: LD_INT 1
11254: DEC
11255: ST_TO_ADDR
11256: LD_INT 6
11258: PUSH
11259: FOR_TO
11260: IFFALSE 11365
// begin uc_nation := nation_nature ;
11262: LD_ADDR_OWVAR 21
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// uc_side := 0 ;
11270: LD_ADDR_OWVAR 20
11274: PUSH
11275: LD_INT 0
11277: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11278: LD_ADDR_OWVAR 29
11282: PUSH
11283: LD_INT 12
11285: PUSH
11286: LD_INT 12
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: ST_TO_ADDR
// hc_agressivity := 20 ;
11293: LD_ADDR_OWVAR 35
11297: PUSH
11298: LD_INT 20
11300: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11301: LD_ADDR_OWVAR 28
11305: PUSH
11306: LD_INT 17
11308: ST_TO_ADDR
// hc_gallery :=  ;
11309: LD_ADDR_OWVAR 33
11313: PUSH
11314: LD_STRING 
11316: ST_TO_ADDR
// hc_name :=  ;
11317: LD_ADDR_OWVAR 26
11321: PUSH
11322: LD_STRING 
11324: ST_TO_ADDR
// un := CreateHuman ;
11325: LD_ADDR_VAR 0 2
11329: PUSH
11330: CALL_OW 44
11334: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11335: LD_VAR 0 2
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 51
// tmp := tmp ^ un ;
11347: LD_ADDR_VAR 0 3
11351: PUSH
11352: LD_VAR 0 3
11356: PUSH
11357: LD_VAR 0 2
11361: ADD
11362: ST_TO_ADDR
// end ;
11363: GO 11259
11365: POP
11366: POP
// repeat wait ( 0 0$1 ) ;
11367: LD_INT 35
11369: PPUSH
11370: CALL_OW 67
// for un in tmp do
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_VAR 0 3
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11459
// begin if IsDead ( un ) then
11387: LD_VAR 0 2
11391: PPUSH
11392: CALL_OW 301
11396: IFFALSE 11416
// begin tmp := tmp diff un ;
11398: LD_ADDR_VAR 0 3
11402: PUSH
11403: LD_VAR 0 3
11407: PUSH
11408: LD_VAR 0 2
11412: DIFF
11413: ST_TO_ADDR
// continue ;
11414: GO 11384
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11416: LD_VAR 0 2
11420: PPUSH
11421: LD_INT 3
11423: PUSH
11424: LD_INT 22
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: PPUSH
11443: LD_VAR 0 2
11447: PPUSH
11448: CALL_OW 74
11452: PPUSH
11453: CALL_OW 115
// end ;
11457: GO 11384
11459: POP
11460: POP
// until not tmp ;
11461: LD_VAR 0 3
11465: NOT
11466: IFFALSE 11367
// end ;
11468: PPOPN 3
11470: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11471: LD_EXP 22
11475: PUSH
11476: LD_EXP 47
11480: AND
11481: IFFALSE 11535
11483: GO 11485
11485: DISABLE
// begin ToLua ( displayTroll(); ) ;
11486: LD_STRING displayTroll();
11488: PPUSH
11489: CALL_OW 559
// wait ( 3 3$00 ) ;
11493: LD_INT 6300
11495: PPUSH
11496: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11500: LD_STRING hideTroll();
11502: PPUSH
11503: CALL_OW 559
// wait ( 1 1$00 ) ;
11507: LD_INT 2100
11509: PPUSH
11510: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11514: LD_STRING displayTroll();
11516: PPUSH
11517: CALL_OW 559
// wait ( 1 1$00 ) ;
11521: LD_INT 2100
11523: PPUSH
11524: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11528: LD_STRING hideTroll();
11530: PPUSH
11531: CALL_OW 559
// end ;
11535: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11536: LD_EXP 22
11540: PUSH
11541: LD_EXP 48
11545: AND
11546: IFFALSE 11609
11548: GO 11550
11550: DISABLE
11551: LD_INT 0
11553: PPUSH
// begin p := 0 ;
11554: LD_ADDR_VAR 0 1
11558: PUSH
11559: LD_INT 0
11561: ST_TO_ADDR
// repeat game_speed := 1 ;
11562: LD_ADDR_OWVAR 65
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11570: LD_INT 35
11572: PPUSH
11573: CALL_OW 67
// p := p + 1 ;
11577: LD_ADDR_VAR 0 1
11581: PUSH
11582: LD_VAR 0 1
11586: PUSH
11587: LD_INT 1
11589: PLUS
11590: ST_TO_ADDR
// until p >= 60 ;
11591: LD_VAR 0 1
11595: PUSH
11596: LD_INT 60
11598: GREATEREQUAL
11599: IFFALSE 11562
// game_speed := 4 ;
11601: LD_ADDR_OWVAR 65
11605: PUSH
11606: LD_INT 4
11608: ST_TO_ADDR
// end ;
11609: PPOPN 1
11611: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11612: LD_EXP 22
11616: PUSH
11617: LD_EXP 49
11621: AND
11622: IFFALSE 11768
11624: GO 11626
11626: DISABLE
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11631: LD_ADDR_VAR 0 1
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_OWVAR 2
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 2
11650: PUSH
11651: LD_INT 30
11653: PUSH
11654: LD_INT 0
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 30
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 69
11684: ST_TO_ADDR
// if not depot then
11685: LD_VAR 0 1
11689: NOT
11690: IFFALSE 11694
// exit ;
11692: GO 11768
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_VAR 0 1
11703: PUSH
11704: LD_INT 1
11706: PPUSH
11707: LD_VAR 0 1
11711: PPUSH
11712: CALL_OW 12
11716: ARRAY
11717: PPUSH
11718: CALL_OW 274
11722: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11723: LD_VAR 0 2
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: LD_INT 0
11733: PPUSH
11734: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11738: LD_VAR 0 2
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: LD_INT 0
11748: PPUSH
11749: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 3
11760: PPUSH
11761: LD_INT 0
11763: PPUSH
11764: CALL_OW 277
// end ;
11768: PPOPN 2
11770: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11771: LD_EXP 22
11775: PUSH
11776: LD_EXP 50
11780: AND
11781: IFFALSE 11878
11783: GO 11785
11785: DISABLE
11786: LD_INT 0
11788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11789: LD_ADDR_VAR 0 1
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_OWVAR 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 21
11808: PUSH
11809: LD_INT 1
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 0
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: ST_TO_ADDR
// if not tmp then
11843: LD_VAR 0 1
11847: NOT
11848: IFFALSE 11852
// exit ;
11850: GO 11878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11852: LD_VAR 0 1
11856: PUSH
11857: LD_INT 1
11859: PPUSH
11860: LD_VAR 0 1
11864: PPUSH
11865: CALL_OW 12
11869: ARRAY
11870: PPUSH
11871: LD_INT 200
11873: PPUSH
11874: CALL_OW 234
// end ;
11878: PPOPN 1
11880: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11881: LD_EXP 22
11885: PUSH
11886: LD_EXP 51
11890: AND
11891: IFFALSE 11970
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11899: LD_ADDR_VAR 0 1
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_OWVAR 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 21
11918: PUSH
11919: LD_INT 2
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 1
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11944: LD_VAR 0 1
11948: PUSH
11949: LD_INT 1
11951: PPUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 12
11961: ARRAY
11962: PPUSH
11963: LD_INT 60
11965: PPUSH
11966: CALL_OW 234
// end ;
11970: PPOPN 1
11972: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11973: LD_EXP 22
11977: PUSH
11978: LD_EXP 52
11982: AND
11983: IFFALSE 12082
11985: GO 11987
11987: DISABLE
11988: LD_INT 0
11990: PPUSH
11991: PPUSH
// begin enable ;
11992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11993: LD_ADDR_VAR 0 1
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_OWVAR 2
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 61
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: LD_INT 33
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 69
12035: ST_TO_ADDR
// if not tmp then
12036: LD_VAR 0 1
12040: NOT
12041: IFFALSE 12045
// exit ;
12043: GO 12082
// for i in tmp do
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_VAR 0 1
12054: PUSH
12055: FOR_IN
12056: IFFALSE 12080
// if IsControledBy ( i ) then
12058: LD_VAR 0 2
12062: PPUSH
12063: CALL_OW 312
12067: IFFALSE 12078
// ComUnlink ( i ) ;
12069: LD_VAR 0 2
12073: PPUSH
12074: CALL_OW 136
12078: GO 12055
12080: POP
12081: POP
// end ;
12082: PPOPN 2
12084: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12085: LD_EXP 22
12089: PUSH
12090: LD_EXP 53
12094: AND
12095: IFFALSE 12235
12097: GO 12099
12099: DISABLE
12100: LD_INT 0
12102: PPUSH
12103: PPUSH
// begin ToLua ( displayPowell(); ) ;
12104: LD_STRING displayPowell();
12106: PPUSH
12107: CALL_OW 559
// uc_side := 0 ;
12111: LD_ADDR_OWVAR 20
12115: PUSH
12116: LD_INT 0
12118: ST_TO_ADDR
// uc_nation := 2 ;
12119: LD_ADDR_OWVAR 21
12123: PUSH
12124: LD_INT 2
12126: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12127: LD_ADDR_OWVAR 37
12131: PUSH
12132: LD_INT 14
12134: ST_TO_ADDR
// vc_engine := engine_siberite ;
12135: LD_ADDR_OWVAR 39
12139: PUSH
12140: LD_INT 3
12142: ST_TO_ADDR
// vc_control := control_apeman ;
12143: LD_ADDR_OWVAR 38
12147: PUSH
12148: LD_INT 5
12150: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12151: LD_ADDR_OWVAR 40
12155: PUSH
12156: LD_INT 29
12158: ST_TO_ADDR
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 2
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12181: LD_INT 35
12183: PPUSH
12184: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12188: LD_VAR 0 2
12192: PPUSH
12193: LD_INT 22
12195: PUSH
12196: LD_OWVAR 2
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: PPUSH
12210: LD_VAR 0 2
12214: PPUSH
12215: CALL_OW 74
12219: PPUSH
12220: CALL_OW 115
// until IsDead ( un ) ;
12224: LD_VAR 0 2
12228: PPUSH
12229: CALL_OW 301
12233: IFFALSE 12181
// end ;
12235: PPOPN 2
12237: END
// every 0 0$1 trigger StreamModeActive and sStu do
12238: LD_EXP 22
12242: PUSH
12243: LD_EXP 61
12247: AND
12248: IFFALSE 12264
12250: GO 12252
12252: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12253: LD_STRING displayStucuk();
12255: PPUSH
12256: CALL_OW 559
// ResetFog ;
12260: CALL_OW 335
// end ;
12264: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12265: LD_EXP 22
12269: PUSH
12270: LD_EXP 54
12274: AND
12275: IFFALSE 12416
12277: GO 12279
12279: DISABLE
12280: LD_INT 0
12282: PPUSH
12283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_OWVAR 2
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 21
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: ST_TO_ADDR
// if not tmp then
12320: LD_VAR 0 2
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 12416
// un := tmp [ rand ( 1 , tmp ) ] ;
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_VAR 0 2
12338: PUSH
12339: LD_INT 1
12341: PPUSH
12342: LD_VAR 0 2
12346: PPUSH
12347: CALL_OW 12
12351: ARRAY
12352: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_INT 0
12360: PPUSH
12361: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12365: LD_VAR 0 1
12369: PPUSH
12370: LD_OWVAR 3
12374: PUSH
12375: LD_VAR 0 1
12379: DIFF
12380: PPUSH
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 74
12390: PPUSH
12391: CALL_OW 115
// wait ( 0 0$20 ) ;
12395: LD_INT 700
12397: PPUSH
12398: CALL_OW 67
// SetSide ( un , your_side ) ;
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_OWVAR 2
12411: PPUSH
12412: CALL_OW 235
// end ;
12416: PPOPN 2
12418: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12419: LD_EXP 22
12423: PUSH
12424: LD_EXP 55
12428: AND
12429: IFFALSE 12535
12431: GO 12433
12433: DISABLE
12434: LD_INT 0
12436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12437: LD_ADDR_VAR 0 1
12441: PUSH
12442: LD_INT 22
12444: PUSH
12445: LD_OWVAR 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 0
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: ST_TO_ADDR
// if not depot then
12491: LD_VAR 0 1
12495: NOT
12496: IFFALSE 12500
// exit ;
12498: GO 12535
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12500: LD_VAR 0 1
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: CALL_OW 250
12513: PPUSH
12514: LD_VAR 0 1
12518: PUSH
12519: LD_INT 1
12521: ARRAY
12522: PPUSH
12523: CALL_OW 251
12527: PPUSH
12528: LD_INT 70
12530: PPUSH
12531: CALL_OW 495
// end ;
12535: PPOPN 1
12537: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12538: LD_EXP 22
12542: PUSH
12543: LD_EXP 56
12547: AND
12548: IFFALSE 12759
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
12559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12560: LD_ADDR_VAR 0 5
12564: PUSH
12565: LD_INT 22
12567: PUSH
12568: LD_OWVAR 2
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 21
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PPUSH
12591: CALL_OW 69
12595: ST_TO_ADDR
// if not tmp then
12596: LD_VAR 0 5
12600: NOT
12601: IFFALSE 12605
// exit ;
12603: GO 12759
// for i in tmp do
12605: LD_ADDR_VAR 0 1
12609: PUSH
12610: LD_VAR 0 5
12614: PUSH
12615: FOR_IN
12616: IFFALSE 12757
// begin d := rand ( 0 , 5 ) ;
12618: LD_ADDR_VAR 0 4
12622: PUSH
12623: LD_INT 0
12625: PPUSH
12626: LD_INT 5
12628: PPUSH
12629: CALL_OW 12
12633: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 250
12648: PPUSH
12649: LD_VAR 0 4
12653: PPUSH
12654: LD_INT 3
12656: PPUSH
12657: LD_INT 12
12659: PPUSH
12660: CALL_OW 12
12664: PPUSH
12665: CALL_OW 272
12669: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_VAR 0 1
12679: PPUSH
12680: CALL_OW 251
12684: PPUSH
12685: LD_VAR 0 4
12689: PPUSH
12690: LD_INT 3
12692: PPUSH
12693: LD_INT 12
12695: PPUSH
12696: CALL_OW 12
12700: PPUSH
12701: CALL_OW 273
12705: ST_TO_ADDR
// if ValidHex ( x , y ) then
12706: LD_VAR 0 2
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: CALL_OW 488
12720: IFFALSE 12755
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12722: LD_VAR 0 1
12726: PPUSH
12727: LD_VAR 0 2
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 3
12739: PPUSH
12740: LD_INT 6
12742: PPUSH
12743: CALL_OW 12
12747: PPUSH
12748: LD_INT 1
12750: PPUSH
12751: CALL_OW 483
// end ;
12755: GO 12615
12757: POP
12758: POP
// end ;
12759: PPOPN 5
12761: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12762: LD_EXP 22
12766: PUSH
12767: LD_EXP 57
12771: AND
12772: IFFALSE 12866
12774: GO 12776
12776: DISABLE
12777: LD_INT 0
12779: PPUSH
12780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12781: LD_ADDR_VAR 0 2
12785: PUSH
12786: LD_INT 22
12788: PUSH
12789: LD_OWVAR 2
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 32
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: ST_TO_ADDR
// if not tmp then
12828: LD_VAR 0 2
12832: NOT
12833: IFFALSE 12837
// exit ;
12835: GO 12866
// for i in tmp do
12837: LD_ADDR_VAR 0 1
12841: PUSH
12842: LD_VAR 0 2
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12864
// SetFuel ( i , 0 ) ;
12850: LD_VAR 0 1
12854: PPUSH
12855: LD_INT 0
12857: PPUSH
12858: CALL_OW 240
12862: GO 12847
12864: POP
12865: POP
// end ;
12866: PPOPN 2
12868: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12869: LD_EXP 22
12873: PUSH
12874: LD_EXP 58
12878: AND
12879: IFFALSE 12945
12881: GO 12883
12883: DISABLE
12884: LD_INT 0
12886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12887: LD_ADDR_VAR 0 1
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_OWVAR 2
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 30
12906: PUSH
12907: LD_INT 29
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PPUSH
12918: CALL_OW 69
12922: ST_TO_ADDR
// if not tmp then
12923: LD_VAR 0 1
12927: NOT
12928: IFFALSE 12932
// exit ;
12930: GO 12945
// DestroyUnit ( tmp [ 1 ] ) ;
12932: LD_VAR 0 1
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 65
// end ;
12945: PPOPN 1
12947: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12948: LD_EXP 22
12952: PUSH
12953: LD_EXP 60
12957: AND
12958: IFFALSE 13087
12960: GO 12962
12962: DISABLE
12963: LD_INT 0
12965: PPUSH
// begin uc_side := 0 ;
12966: LD_ADDR_OWVAR 20
12970: PUSH
12971: LD_INT 0
12973: ST_TO_ADDR
// uc_nation := nation_arabian ;
12974: LD_ADDR_OWVAR 21
12978: PUSH
12979: LD_INT 2
12981: ST_TO_ADDR
// hc_gallery :=  ;
12982: LD_ADDR_OWVAR 33
12986: PUSH
12987: LD_STRING 
12989: ST_TO_ADDR
// hc_name :=  ;
12990: LD_ADDR_OWVAR 26
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12998: LD_INT 1
13000: PPUSH
13001: LD_INT 11
13003: PPUSH
13004: LD_INT 10
13006: PPUSH
13007: CALL_OW 380
// un := CreateHuman ;
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: CALL_OW 44
13020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13033: LD_INT 35
13035: PPUSH
13036: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_INT 22
13047: PUSH
13048: LD_OWVAR 2
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PPUSH
13057: CALL_OW 69
13061: PPUSH
13062: LD_VAR 0 1
13066: PPUSH
13067: CALL_OW 74
13071: PPUSH
13072: CALL_OW 115
// until IsDead ( un ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: CALL_OW 301
13085: IFFALSE 13033
// end ;
13087: PPOPN 1
13089: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13090: LD_EXP 22
13094: PUSH
13095: LD_EXP 62
13099: AND
13100: IFFALSE 13112
13102: GO 13104
13104: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13105: LD_STRING earthquake(getX(game), 0, 32)
13107: PPUSH
13108: CALL_OW 559
13112: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13113: LD_EXP 22
13117: PUSH
13118: LD_EXP 63
13122: AND
13123: IFFALSE 13214
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
// begin enable ;
13131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13132: LD_ADDR_VAR 0 1
13136: PUSH
13137: LD_INT 22
13139: PUSH
13140: LD_OWVAR 2
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 21
13151: PUSH
13152: LD_INT 2
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 33
13161: PUSH
13162: LD_INT 3
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: ST_TO_ADDR
// if not tmp then
13179: LD_VAR 0 1
13183: NOT
13184: IFFALSE 13188
// exit ;
13186: GO 13214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: PPUSH
13196: LD_VAR 0 1
13200: PPUSH
13201: CALL_OW 12
13205: ARRAY
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 234
// end ;
13214: PPOPN 1
13216: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13217: LD_EXP 22
13221: PUSH
13222: LD_EXP 64
13226: AND
13227: IFFALSE 13368
13229: GO 13231
13231: DISABLE
13232: LD_INT 0
13234: PPUSH
13235: PPUSH
13236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13237: LD_ADDR_VAR 0 3
13241: PUSH
13242: LD_INT 22
13244: PUSH
13245: LD_OWVAR 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: ST_TO_ADDR
// if not tmp then
13273: LD_VAR 0 3
13277: NOT
13278: IFFALSE 13282
// exit ;
13280: GO 13368
// un := tmp [ rand ( 1 , tmp ) ] ;
13282: LD_ADDR_VAR 0 2
13286: PUSH
13287: LD_VAR 0 3
13291: PUSH
13292: LD_INT 1
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: CALL_OW 12
13304: ARRAY
13305: ST_TO_ADDR
// if Crawls ( un ) then
13306: LD_VAR 0 2
13310: PPUSH
13311: CALL_OW 318
13315: IFFALSE 13326
// ComWalk ( un ) ;
13317: LD_VAR 0 2
13321: PPUSH
13322: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13326: LD_VAR 0 2
13330: PPUSH
13331: LD_INT 9
13333: PPUSH
13334: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13338: LD_INT 28
13340: PPUSH
13341: LD_OWVAR 2
13345: PPUSH
13346: LD_INT 2
13348: PPUSH
13349: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13353: LD_INT 29
13355: PPUSH
13356: LD_OWVAR 2
13360: PPUSH
13361: LD_INT 2
13363: PPUSH
13364: CALL_OW 322
// end ;
13368: PPOPN 3
13370: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13371: LD_EXP 22
13375: PUSH
13376: LD_EXP 65
13380: AND
13381: IFFALSE 13492
13383: GO 13385
13385: DISABLE
13386: LD_INT 0
13388: PPUSH
13389: PPUSH
13390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_INT 22
13398: PUSH
13399: LD_OWVAR 2
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 69
13426: ST_TO_ADDR
// if not tmp then
13427: LD_VAR 0 3
13431: NOT
13432: IFFALSE 13436
// exit ;
13434: GO 13492
// un := tmp [ rand ( 1 , tmp ) ] ;
13436: LD_ADDR_VAR 0 2
13440: PUSH
13441: LD_VAR 0 3
13445: PUSH
13446: LD_INT 1
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: CALL_OW 12
13458: ARRAY
13459: ST_TO_ADDR
// if Crawls ( un ) then
13460: LD_VAR 0 2
13464: PPUSH
13465: CALL_OW 318
13469: IFFALSE 13480
// ComWalk ( un ) ;
13471: LD_VAR 0 2
13475: PPUSH
13476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13480: LD_VAR 0 2
13484: PPUSH
13485: LD_INT 8
13487: PPUSH
13488: CALL_OW 336
// end ;
13492: PPOPN 3
13494: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13495: LD_EXP 22
13499: PUSH
13500: LD_EXP 66
13504: AND
13505: IFFALSE 13649
13507: GO 13509
13509: DISABLE
13510: LD_INT 0
13512: PPUSH
13513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 22
13521: PUSH
13522: LD_OWVAR 2
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 21
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 2
13543: PUSH
13544: LD_INT 34
13546: PUSH
13547: LD_INT 12
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 34
13556: PUSH
13557: LD_INT 51
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 34
13566: PUSH
13567: LD_INT 32
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: PPUSH
13585: CALL_OW 69
13589: ST_TO_ADDR
// if not tmp then
13590: LD_VAR 0 2
13594: NOT
13595: IFFALSE 13599
// exit ;
13597: GO 13649
// for i in tmp do
13599: LD_ADDR_VAR 0 1
13603: PUSH
13604: LD_VAR 0 2
13608: PUSH
13609: FOR_IN
13610: IFFALSE 13647
// if GetCargo ( i , mat_artifact ) = 0 then
13612: LD_VAR 0 1
13616: PPUSH
13617: LD_INT 4
13619: PPUSH
13620: CALL_OW 289
13624: PUSH
13625: LD_INT 0
13627: EQUAL
13628: IFFALSE 13645
// SetCargo ( i , mat_siberit , 100 ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_INT 3
13637: PPUSH
13638: LD_INT 100
13640: PPUSH
13641: CALL_OW 290
13645: GO 13609
13647: POP
13648: POP
// end ;
13649: PPOPN 2
13651: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13652: LD_EXP 22
13656: PUSH
13657: LD_EXP 67
13661: AND
13662: IFFALSE 13845
13664: GO 13666
13666: DISABLE
13667: LD_INT 0
13669: PPUSH
13670: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13671: LD_ADDR_VAR 0 2
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: ST_TO_ADDR
// if not tmp then
13693: LD_VAR 0 2
13697: NOT
13698: IFFALSE 13702
// exit ;
13700: GO 13845
// for i := 1 to 2 do
13702: LD_ADDR_VAR 0 1
13706: PUSH
13707: DOUBLE
13708: LD_INT 1
13710: DEC
13711: ST_TO_ADDR
13712: LD_INT 2
13714: PUSH
13715: FOR_TO
13716: IFFALSE 13843
// begin uc_side := your_side ;
13718: LD_ADDR_OWVAR 20
13722: PUSH
13723: LD_OWVAR 2
13727: ST_TO_ADDR
// uc_nation := nation_american ;
13728: LD_ADDR_OWVAR 21
13732: PUSH
13733: LD_INT 1
13735: ST_TO_ADDR
// vc_chassis := us_morphling ;
13736: LD_ADDR_OWVAR 37
13740: PUSH
13741: LD_INT 5
13743: ST_TO_ADDR
// vc_engine := engine_siberite ;
13744: LD_ADDR_OWVAR 39
13748: PUSH
13749: LD_INT 3
13751: ST_TO_ADDR
// vc_control := control_computer ;
13752: LD_ADDR_OWVAR 38
13756: PUSH
13757: LD_INT 3
13759: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13760: LD_ADDR_OWVAR 40
13764: PUSH
13765: LD_INT 10
13767: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13768: LD_VAR 0 2
13772: PUSH
13773: LD_INT 1
13775: ARRAY
13776: PPUSH
13777: CALL_OW 310
13781: NOT
13782: IFFALSE 13829
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13784: CALL_OW 45
13788: PPUSH
13789: LD_VAR 0 2
13793: PUSH
13794: LD_INT 1
13796: ARRAY
13797: PPUSH
13798: CALL_OW 250
13802: PPUSH
13803: LD_VAR 0 2
13807: PUSH
13808: LD_INT 1
13810: ARRAY
13811: PPUSH
13812: CALL_OW 251
13816: PPUSH
13817: LD_INT 12
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 50
13827: GO 13841
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13829: CALL_OW 45
13833: PPUSH
13834: LD_INT 1
13836: PPUSH
13837: CALL_OW 51
// end ;
13841: GO 13715
13843: POP
13844: POP
// end ;
13845: PPOPN 2
13847: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13848: LD_EXP 22
13852: PUSH
13853: LD_EXP 68
13857: AND
13858: IFFALSE 14080
13860: GO 13862
13862: DISABLE
13863: LD_INT 0
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
13870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13871: LD_ADDR_VAR 0 6
13875: PUSH
13876: LD_INT 22
13878: PUSH
13879: LD_OWVAR 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 23
13903: PUSH
13904: LD_INT 0
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 69
13924: ST_TO_ADDR
// if not tmp then
13925: LD_VAR 0 6
13929: NOT
13930: IFFALSE 13934
// exit ;
13932: GO 14080
// s1 := rand ( 1 , 4 ) ;
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_INT 1
13941: PPUSH
13942: LD_INT 4
13944: PPUSH
13945: CALL_OW 12
13949: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13950: LD_ADDR_VAR 0 4
13954: PUSH
13955: LD_VAR 0 6
13959: PUSH
13960: LD_INT 1
13962: ARRAY
13963: PPUSH
13964: LD_VAR 0 2
13968: PPUSH
13969: CALL_OW 259
13973: ST_TO_ADDR
// if s1 = 1 then
13974: LD_VAR 0 2
13978: PUSH
13979: LD_INT 1
13981: EQUAL
13982: IFFALSE 14002
// s2 := rand ( 2 , 4 ) else
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: LD_INT 2
13991: PPUSH
13992: LD_INT 4
13994: PPUSH
13995: CALL_OW 12
13999: ST_TO_ADDR
14000: GO 14010
// s2 := 1 ;
14002: LD_ADDR_VAR 0 3
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14010: LD_ADDR_VAR 0 5
14014: PUSH
14015: LD_VAR 0 6
14019: PUSH
14020: LD_INT 1
14022: ARRAY
14023: PPUSH
14024: LD_VAR 0 3
14028: PPUSH
14029: CALL_OW 259
14033: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14034: LD_VAR 0 6
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: PPUSH
14043: LD_VAR 0 2
14047: PPUSH
14048: LD_VAR 0 5
14052: PPUSH
14053: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14057: LD_VAR 0 6
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_VAR 0 4
14075: PPUSH
14076: CALL_OW 237
// end ;
14080: PPOPN 6
14082: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14083: LD_EXP 22
14087: PUSH
14088: LD_EXP 69
14092: AND
14093: IFFALSE 14172
14095: GO 14097
14097: DISABLE
14098: LD_INT 0
14100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14101: LD_ADDR_VAR 0 1
14105: PUSH
14106: LD_INT 22
14108: PUSH
14109: LD_OWVAR 2
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 3
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 69
14136: ST_TO_ADDR
// if not tmp then
14137: LD_VAR 0 1
14141: NOT
14142: IFFALSE 14146
// exit ;
14144: GO 14172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14146: LD_VAR 0 1
14150: PUSH
14151: LD_INT 1
14153: PPUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 12
14163: ARRAY
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 234
// end ;
14172: PPOPN 1
14174: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14175: LD_EXP 22
14179: PUSH
14180: LD_EXP 70
14184: AND
14185: IFFALSE 14297
14187: GO 14189
14189: DISABLE
14190: LD_INT 0
14192: PPUSH
14193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14194: LD_ADDR_VAR 0 2
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_OWVAR 2
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_INT 27
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 30
14226: PUSH
14227: LD_INT 26
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 30
14236: PUSH
14237: LD_INT 28
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PPUSH
14254: CALL_OW 69
14258: ST_TO_ADDR
// if not tmp then
14259: LD_VAR 0 2
14263: NOT
14264: IFFALSE 14268
// exit ;
14266: GO 14297
// for i in tmp do
14268: LD_ADDR_VAR 0 1
14272: PUSH
14273: LD_VAR 0 2
14277: PUSH
14278: FOR_IN
14279: IFFALSE 14295
// SetLives ( i , 1 ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 234
14293: GO 14278
14295: POP
14296: POP
// end ;
14297: PPOPN 2
14299: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14300: LD_EXP 22
14304: PUSH
14305: LD_EXP 71
14309: AND
14310: IFFALSE 14584
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
14319: PPUSH
// begin i := rand ( 1 , 7 ) ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: LD_INT 1
14327: PPUSH
14328: LD_INT 7
14330: PPUSH
14331: CALL_OW 12
14335: ST_TO_ADDR
// case i of 1 :
14336: LD_VAR 0 1
14340: PUSH
14341: LD_INT 1
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14359
14349: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14350: LD_STRING earthquake(getX(game), 0, 32)
14352: PPUSH
14353: CALL_OW 559
14357: GO 14584
14359: LD_INT 2
14361: DOUBLE
14362: EQUAL
14363: IFTRUE 14367
14365: GO 14381
14367: POP
// begin ToLua ( displayStucuk(); ) ;
14368: LD_STRING displayStucuk();
14370: PPUSH
14371: CALL_OW 559
// ResetFog ;
14375: CALL_OW 335
// end ; 3 :
14379: GO 14584
14381: LD_INT 3
14383: DOUBLE
14384: EQUAL
14385: IFTRUE 14389
14387: GO 14493
14389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14390: LD_ADDR_VAR 0 2
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_OWVAR 2
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 25
14409: PUSH
14410: LD_INT 1
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PPUSH
14421: CALL_OW 69
14425: ST_TO_ADDR
// if not tmp then
14426: LD_VAR 0 2
14430: NOT
14431: IFFALSE 14435
// exit ;
14433: GO 14584
// un := tmp [ rand ( 1 , tmp ) ] ;
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_VAR 0 2
14444: PUSH
14445: LD_INT 1
14447: PPUSH
14448: LD_VAR 0 2
14452: PPUSH
14453: CALL_OW 12
14457: ARRAY
14458: ST_TO_ADDR
// if Crawls ( un ) then
14459: LD_VAR 0 3
14463: PPUSH
14464: CALL_OW 318
14468: IFFALSE 14479
// ComWalk ( un ) ;
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14479: LD_VAR 0 3
14483: PPUSH
14484: LD_INT 8
14486: PPUSH
14487: CALL_OW 336
// end ; 4 :
14491: GO 14584
14493: LD_INT 4
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14562
14501: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14502: LD_ADDR_VAR 0 2
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_OWVAR 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 30
14521: PUSH
14522: LD_INT 29
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: ST_TO_ADDR
// if not tmp then
14538: LD_VAR 0 2
14542: NOT
14543: IFFALSE 14547
// exit ;
14545: GO 14584
// DestroyUnit ( tmp [ 1 ] ) ;
14547: LD_VAR 0 2
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PPUSH
14556: CALL_OW 65
// end ; 5 .. 7 :
14560: GO 14584
14562: LD_INT 5
14564: DOUBLE
14565: GREATEREQUAL
14566: IFFALSE 14574
14568: LD_INT 7
14570: DOUBLE
14571: LESSEQUAL
14572: IFTRUE 14576
14574: GO 14583
14576: POP
// StreamSibBomb ; end ;
14577: CALL 10834 0 0
14581: GO 14584
14583: POP
// end ;
14584: PPOPN 3
14586: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14587: LD_EXP 22
14591: PUSH
14592: LD_EXP 72
14596: AND
14597: IFFALSE 14753
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14607: LD_ADDR_VAR 0 2
14611: PUSH
14612: LD_INT 81
14614: PUSH
14615: LD_OWVAR 2
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: LD_INT 21
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 21
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: ST_TO_ADDR
// if not tmp then
14661: LD_VAR 0 2
14665: NOT
14666: IFFALSE 14670
// exit ;
14668: GO 14753
// p := 0 ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 0
14677: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14678: LD_INT 35
14680: PPUSH
14681: CALL_OW 67
// p := p + 1 ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_VAR 0 3
14694: PUSH
14695: LD_INT 1
14697: PLUS
14698: ST_TO_ADDR
// for i in tmp do
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_VAR 0 2
14708: PUSH
14709: FOR_IN
14710: IFFALSE 14741
// if GetLives ( i ) < 1000 then
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 256
14721: PUSH
14722: LD_INT 1000
14724: LESS
14725: IFFALSE 14739
// SetLives ( i , 1000 ) ;
14727: LD_VAR 0 1
14731: PPUSH
14732: LD_INT 1000
14734: PPUSH
14735: CALL_OW 234
14739: GO 14709
14741: POP
14742: POP
// until p > 20 ;
14743: LD_VAR 0 3
14747: PUSH
14748: LD_INT 20
14750: GREATER
14751: IFFALSE 14678
// end ;
14753: PPOPN 3
14755: END
// every 0 0$1 trigger StreamModeActive and sTime do
14756: LD_EXP 22
14760: PUSH
14761: LD_EXP 73
14765: AND
14766: IFFALSE 14801
14768: GO 14770
14770: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14771: LD_INT 28
14773: PPUSH
14774: LD_OWVAR 2
14778: PPUSH
14779: LD_INT 2
14781: PPUSH
14782: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14786: LD_INT 30
14788: PPUSH
14789: LD_OWVAR 2
14793: PPUSH
14794: LD_INT 2
14796: PPUSH
14797: CALL_OW 322
// end ;
14801: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14802: LD_EXP 22
14806: PUSH
14807: LD_EXP 74
14811: AND
14812: IFFALSE 14933
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14821: LD_ADDR_VAR 0 2
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_OWVAR 2
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 21
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 23
14853: PUSH
14854: LD_INT 0
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if not tmp then
14875: LD_VAR 0 2
14879: NOT
14880: IFFALSE 14884
// exit ;
14882: GO 14933
// for i in tmp do
14884: LD_ADDR_VAR 0 1
14888: PUSH
14889: LD_VAR 0 2
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14931
// begin if Crawls ( i ) then
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 318
14906: IFFALSE 14917
// ComWalk ( i ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 138
// SetClass ( i , 2 ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: LD_INT 2
14924: PPUSH
14925: CALL_OW 336
// end ;
14929: GO 14894
14931: POP
14932: POP
// end ;
14933: PPOPN 2
14935: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14936: LD_EXP 22
14940: PUSH
14941: LD_EXP 75
14945: AND
14946: IFFALSE 15227
14948: GO 14950
14950: DISABLE
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
14955: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14956: LD_OWVAR 2
14960: PPUSH
14961: LD_INT 9
14963: PPUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14974: LD_INT 9
14976: PPUSH
14977: LD_OWVAR 2
14981: PPUSH
14982: CALL_OW 343
// uc_side := 9 ;
14986: LD_ADDR_OWVAR 20
14990: PUSH
14991: LD_INT 9
14993: ST_TO_ADDR
// uc_nation := 2 ;
14994: LD_ADDR_OWVAR 21
14998: PUSH
14999: LD_INT 2
15001: ST_TO_ADDR
// hc_name := Dark Warrior ;
15002: LD_ADDR_OWVAR 26
15006: PUSH
15007: LD_STRING Dark Warrior
15009: ST_TO_ADDR
// hc_gallery :=  ;
15010: LD_ADDR_OWVAR 33
15014: PUSH
15015: LD_STRING 
15017: ST_TO_ADDR
// hc_noskilllimit := true ;
15018: LD_ADDR_OWVAR 76
15022: PUSH
15023: LD_INT 1
15025: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15026: LD_ADDR_OWVAR 31
15030: PUSH
15031: LD_INT 30
15033: PUSH
15034: LD_INT 30
15036: PUSH
15037: LD_INT 30
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// un := CreateHuman ;
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: CALL_OW 44
15058: ST_TO_ADDR
// hc_noskilllimit := false ;
15059: LD_ADDR_OWVAR 76
15063: PUSH
15064: LD_INT 0
15066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 51
// p := 0 ;
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: LD_INT 0
15086: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15087: LD_INT 35
15089: PPUSH
15090: CALL_OW 67
// p := p + 1 ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_VAR 0 2
15103: PUSH
15104: LD_INT 1
15106: PLUS
15107: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15108: LD_VAR 0 3
15112: PPUSH
15113: CALL_OW 256
15117: PUSH
15118: LD_INT 1000
15120: LESS
15121: IFFALSE 15135
// SetLives ( un , 1000 ) ;
15123: LD_VAR 0 3
15127: PPUSH
15128: LD_INT 1000
15130: PPUSH
15131: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15135: LD_VAR 0 3
15139: PPUSH
15140: LD_INT 81
15142: PUSH
15143: LD_OWVAR 2
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 91
15154: PUSH
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 30
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 69
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: CALL_OW 74
15186: PPUSH
15187: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15191: LD_VAR 0 2
15195: PUSH
15196: LD_INT 60
15198: GREATER
15199: PUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: CALL_OW 301
15209: OR
15210: IFFALSE 15087
// if un then
15212: LD_VAR 0 3
15216: IFFALSE 15227
// RemoveUnit ( un ) ;
15218: LD_VAR 0 3
15222: PPUSH
15223: CALL_OW 64
// end ;
15227: PPOPN 3
15229: END
