// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3397 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3244 0 0
// PrepareSheikGroup ;
 123: CALL 2882 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2794 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3645 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// SaveForQuickRestart ;
 431: CALL_OW 22
// end ;
 435: LD_VAR 0 1
 439: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 440: LD_INT 2
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: CALL_OW 81
 450: PUSH
 451: LD_INT 2
 453: EQUAL
 454: IFFALSE 600
 456: GO 458
 458: DISABLE
 459: LD_INT 0
 461: PPUSH
// begin goWithHeike := false ;
 462: LD_ADDR_EXP 18
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// DialogueOn ;
 470: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 474: LD_EXP 1
 478: PPUSH
 479: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 483: LD_EXP 5
 487: PPUSH
 488: LD_STRING DK-betray-1
 490: PPUSH
 491: CALL_OW 88
// DialogueOff ;
 495: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 499: LD_EXP 5
 503: PPUSH
 504: LD_INT 90
 506: PPUSH
 507: LD_INT 46
 509: PPUSH
 510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 521: LD_ADDR_VAR 0 1
 525: PUSH
 526: LD_INT 22
 528: PUSH
 529: LD_INT 5
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 25
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: LD_EXP 5
 559: DIFF
 560: PUSH
 561: FOR_IN
 562: IFFALSE 580
// ComAttackUnit ( i , Heike ) ;
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_EXP 1
 573: PPUSH
 574: CALL_OW 115
 578: GO 561
 580: POP
 581: POP
// until IsDead ( Heike ) ;
 582: LD_EXP 1
 586: PPUSH
 587: CALL_OW 301
 591: IFFALSE 514
// YouLost ( Betray ) ;
 593: LD_STRING Betray
 595: PPUSH
 596: CALL_OW 104
// end ;
 600: PPOPN 1
 602: END
// every 0 0$1 trigger goWithHeike do
 603: LD_EXP 18
 607: IFFALSE 662
 609: GO 611
 611: DISABLE
// begin enable ;
 612: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 613: LD_EXP 1
 617: PPUSH
 618: LD_EXP 5
 622: PPUSH
 623: CALL_OW 296
 627: PUSH
 628: LD_INT 3
 630: GREATER
 631: IFFALSE 662
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 633: LD_EXP 5
 637: PPUSH
 638: LD_EXP 1
 642: PPUSH
 643: CALL_OW 250
 647: PPUSH
 648: LD_EXP 1
 652: PPUSH
 653: CALL_OW 251
 657: PPUSH
 658: CALL_OW 111
// end ;
 662: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 663: LD_INT 2
 665: PPUSH
 666: LD_INT 47
 668: PPUSH
 669: LD_INT 68
 671: PPUSH
 672: CALL_OW 293
 676: PUSH
 677: LD_EXP 19
 681: NOT
 682: AND
 683: PUSH
 684: LD_EXP 22
 688: NOT
 689: AND
 690: IFFALSE 751
 692: GO 694
 694: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING DH-spot-1
 702: PPUSH
 703: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 707: LD_INT 47
 709: PPUSH
 710: LD_INT 68
 712: PPUSH
 713: CALL_OW 428
 717: PPUSH
 718: CALL_OW 313
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_STRING DRa-spot-1
 729: PPUSH
 730: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 734: LD_INT 90
 736: PPUSH
 737: LD_INT 41
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 6
 745: NEG
 746: PPUSH
 747: CALL_OW 330
// end ;
 751: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 93
 757: PPUSH
 758: LD_INT 89
 760: PPUSH
 761: CALL_OW 293
 765: PUSH
 766: LD_EXP 19
 770: NOT
 771: AND
 772: PUSH
 773: LD_EXP 22
 777: NOT
 778: AND
 779: IFFALSE 840
 781: GO 783
 783: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING DH-spot-1
 791: PPUSH
 792: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 796: LD_INT 93
 798: PPUSH
 799: LD_INT 89
 801: PPUSH
 802: CALL_OW 428
 806: PPUSH
 807: CALL_OW 313
 811: PUSH
 812: LD_INT 1
 814: ARRAY
 815: PPUSH
 816: LD_STRING DRa-spot-2
 818: PPUSH
 819: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 823: LD_INT 90
 825: PPUSH
 826: LD_INT 41
 828: PPUSH
 829: LD_INT 2
 831: PPUSH
 832: LD_INT 6
 834: NEG
 835: PPUSH
 836: CALL_OW 330
// end ;
 840: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 841: LD_EXP 21
 845: PUSH
 846: LD_EXP 14
 850: PPUSH
 851: LD_INT 101
 853: PUSH
 854: LD_INT 2
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 72
 865: AND
 866: PUSH
 867: LD_EXP 22
 871: NOT
 872: AND
 873: IFFALSE 1197
 875: GO 877
 877: DISABLE
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
 883: PPUSH
 884: PPUSH
// begin enable ;
 885: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_EXP 14
 895: PPUSH
 896: LD_INT 101
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 72
 910: ST_TO_ADDR
// if not tmp then
 911: LD_VAR 0 1
 915: NOT
 916: IFFALSE 920
// exit ;
 918: GO 1197
// InGameOn ;
 920: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 924: LD_EXP 1
 928: PUSH
 929: LD_EXP 5
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: LD_EXP 1
 964: PPUSH
 965: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 969: LD_VAR 0 1
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: LD_STRING DG-meeting-1
 980: PPUSH
 981: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 81
 992: PUSH
 993: LD_INT 10
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 63
1002: PUSH
1003: LD_INT 25
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 108
1012: PUSH
1013: LD_INT 73
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_INT 9999
1032: PUSH
1033: EMPTY
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// for i := 1 to 3 do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 3
1051: PUSH
1052: FOR_TO
1053: IFFALSE 1137
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1055: LD_ADDR_VAR 0 5
1059: PUSH
1060: LD_EXP 1
1064: PPUSH
1065: LD_VAR 0 3
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_VAR 0 3
1084: PUSH
1085: LD_VAR 0 2
1089: ARRAY
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 297
1099: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1100: LD_VAR 0 4
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PUSH
1109: LD_VAR 0 5
1113: GREATER
1114: IFFALSE 1135
// dist := [ tdist , i ] ;
1116: LD_ADDR_VAR 0 4
1120: PUSH
1121: LD_VAR 0 5
1125: PUSH
1126: LD_VAR 0 2
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// end ;
1135: GO 1052
1137: POP
1138: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1139: LD_EXP 1
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 2
1156: ARRAY
1157: ARRAY
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: LD_VAR 0 3
1167: PUSH
1168: LD_VAR 0 4
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ARRAY
1177: PUSH
1178: LD_INT 2
1180: ARRAY
1181: PPUSH
1182: CALL_OW 111
// wait ( 0 0$3 ) ;
1186: LD_INT 105
1188: PPUSH
1189: CALL_OW 67
// InGameOff ;
1193: CALL_OW 9
// end ;
1197: PPOPN 5
1199: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1200: LD_EXP 1
1204: PPUSH
1205: LD_INT 14
1207: PPUSH
1208: CALL_OW 296
1212: PUSH
1213: LD_INT 40
1215: GREATER
1216: PUSH
1217: LD_EXP 1
1221: PPUSH
1222: CALL_OW 316
1226: AND
1227: PUSH
1228: LD_EXP 22
1232: NOT
1233: AND
1234: IFFALSE 1251
1236: GO 1238
1238: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1239: LD_EXP 5
1243: PPUSH
1244: LD_STRING DK-idle-1
1246: PPUSH
1247: CALL_OW 88
// end ;
1251: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1252: LD_INT 2
1254: PPUSH
1255: LD_INT 59
1257: PPUSH
1258: LD_INT 47
1260: PPUSH
1261: CALL_OW 293
1265: PUSH
1266: LD_EXP 22
1270: NOT
1271: AND
1272: IFFALSE 1429
1274: GO 1276
1276: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1277: LD_INT 59
1279: PPUSH
1280: LD_INT 47
1282: PPUSH
1283: LD_INT 2
1285: PPUSH
1286: LD_INT 10
1288: NEG
1289: PPUSH
1290: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1294: LD_INT 59
1296: PPUSH
1297: LD_INT 47
1299: PPUSH
1300: CALL_OW 86
// goWithHeike := false ;
1304: LD_ADDR_EXP 18
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// baseSpotted := true ;
1312: LD_ADDR_EXP 19
1316: PUSH
1317: LD_INT 1
1319: ST_TO_ADDR
// InGameOn ;
1320: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1324: LD_EXP 1
1328: PUSH
1329: LD_EXP 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: LD_INT 54
1340: PPUSH
1341: LD_INT 45
1343: PPUSH
1344: CALL_OW 111
// wait ( 0 0$1 ) ;
1348: LD_INT 35
1350: PPUSH
1351: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1355: LD_EXP 1
1359: PUSH
1360: LD_EXP 5
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: LD_INT 59
1371: PPUSH
1372: LD_INT 47
1374: PPUSH
1375: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1379: LD_EXP 1
1383: PPUSH
1384: LD_STRING DH-base-1
1386: PPUSH
1387: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1391: LD_EXP 5
1395: PPUSH
1396: LD_STRING DK-base-1
1398: PPUSH
1399: CALL_OW 88
// InGameOff ;
1403: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1407: LD_ADDR_EXP 17
1411: PUSH
1412: LD_EXP 17
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ST_TO_ADDR
// goWithHeike := true ;
1421: LD_ADDR_EXP 18
1425: PUSH
1426: LD_INT 1
1428: ST_TO_ADDR
// end ;
1429: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1430: LD_INT 2
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 292
1442: PUSH
1443: LD_EXP 22
1447: NOT
1448: AND
1449: IFFALSE 2791
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
// begin meetingActive := false ;
1460: LD_ADDR_EXP 21
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// goWithHeike := false ;
1468: LD_ADDR_EXP 18
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_INT 6
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 517
1491: ST_TO_ADDR
// for i := 1 to 4 do
1492: LD_ADDR_VAR 0 1
1496: PUSH
1497: DOUBLE
1498: LD_INT 1
1500: DEC
1501: ST_TO_ADDR
1502: LD_INT 4
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1573
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1508: LD_EXP 15
1512: PUSH
1513: LD_VAR 0 1
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 1
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 2
1538: PUSH
1539: LD_INT 2
1541: ARRAY
1542: PUSH
1543: LD_VAR 0 1
1547: ARRAY
1548: PPUSH
1549: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1553: LD_EXP 15
1557: PUSH
1558: LD_VAR 0 1
1562: ARRAY
1563: PPUSH
1564: LD_INT 14
1566: PPUSH
1567: CALL_OW 179
// end ;
1571: GO 1505
1573: POP
1574: POP
// InGameOn ;
1575: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1579: LD_EXP 8
1583: PPUSH
1584: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1588: LD_EXP 1
1592: PPUSH
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_EXP 1
1611: PPUSH
1612: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1623: LD_EXP 1
1627: PPUSH
1628: LD_EXP 8
1632: PPUSH
1633: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_EXP 1
1646: PPUSH
1647: CALL_OW 250
1651: PPUSH
1652: LD_INT 5
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: CALL_OW 272
1662: PPUSH
1663: LD_EXP 1
1667: PPUSH
1668: CALL_OW 251
1672: PPUSH
1673: LD_INT 5
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 273
1683: PPUSH
1684: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_EXP 8
1697: PPUSH
1698: CALL_OW 296
1702: PUSH
1703: LD_INT 5
1705: LESS
1706: PUSH
1707: LD_EXP 5
1711: PPUSH
1712: LD_EXP 8
1716: PPUSH
1717: CALL_OW 296
1721: PUSH
1722: LD_INT 6
1724: LESS
1725: AND
1726: IFFALSE 1616
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1728: LD_EXP 1
1732: PUSH
1733: LD_EXP 5
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: LD_EXP 8
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1751: LD_EXP 8
1755: PUSH
1756: LD_EXP 4
1760: PUSH
1761: LD_EXP 9
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: LD_EXP 1
1775: PPUSH
1776: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1780: LD_INT 7
1782: PPUSH
1783: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1787: LD_EXP 8
1791: PPUSH
1792: LD_STRING DKu-Kurt-1
1794: PPUSH
1795: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1799: LD_EXP 5
1803: PPUSH
1804: LD_STRING DK-Kurt-1
1806: PPUSH
1807: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1811: LD_EXP 8
1815: PPUSH
1816: LD_STRING DKu-Kurt-2
1818: PPUSH
1819: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1823: LD_INT 7
1825: PPUSH
1826: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1830: LD_EXP 1
1834: PPUSH
1835: LD_STRING DH-Kurt-1
1837: PPUSH
1838: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1842: LD_EXP 8
1846: PPUSH
1847: LD_STRING DKu-Kurt-3
1849: PPUSH
1850: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1854: LD_EXP 5
1858: PPUSH
1859: LD_STRING DK-Kurt-3
1861: PPUSH
1862: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1866: LD_EXP 9
1870: PPUSH
1871: LD_STRING DHa-Kurt-3
1873: PPUSH
1874: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1878: LD_EXP 4
1882: PPUSH
1883: LD_STRING DO-Kurt-3
1885: PPUSH
1886: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1890: LD_ADDR_VAR 0 3
1894: PUSH
1895: LD_EXP 8
1899: PUSH
1900: LD_EXP 4
1904: PUSH
1905: LD_EXP 9
1909: PUSH
1910: LD_EXP 5
1914: PUSH
1915: LD_EXP 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_EXP 16
1931: UNION
1932: ST_TO_ADDR
// for i = 1 to tmp2 do
1933: LD_ADDR_VAR 0 1
1937: PUSH
1938: DOUBLE
1939: LD_INT 1
1941: DEC
1942: ST_TO_ADDR
1943: LD_VAR 0 3
1947: PUSH
1948: FOR_TO
1949: IFFALSE 2024
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1951: LD_VAR 0 3
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_INT 4
1978: PLUS
1979: ARRAY
1980: PPUSH
1981: LD_VAR 0 2
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PUSH
1990: LD_VAR 0 1
1994: PUSH
1995: LD_INT 4
1997: PLUS
1998: ARRAY
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2004: LD_VAR 0 3
2008: PUSH
2009: LD_VAR 0 1
2013: ARRAY
2014: PPUSH
2015: LD_INT 14
2017: PPUSH
2018: CALL_OW 179
// end ;
2022: GO 1948
2024: POP
2025: POP
// wait ( 0 0$2 ) ;
2026: LD_INT 70
2028: PPUSH
2029: CALL_OW 67
// CenterOnUnits ( eon ) ;
2033: LD_INT 14
2035: PPUSH
2036: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2040: LD_INT 90
2042: PPUSH
2043: LD_INT 43
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 21
2051: NEG
2052: PPUSH
2053: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2057: LD_EXP 2
2061: PPUSH
2062: LD_INT 84
2064: PPUSH
2065: LD_INT 36
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2072: LD_EXP 2
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2084: LD_EXP 11
2088: PPUSH
2089: LD_INT 85
2091: PPUSH
2092: LD_INT 36
2094: PPUSH
2095: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2099: LD_EXP 11
2103: PPUSH
2104: LD_INT 14
2106: PPUSH
2107: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2111: LD_EXP 10
2115: PPUSH
2116: LD_INT 86
2118: PPUSH
2119: LD_INT 36
2121: PPUSH
2122: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2126: LD_EXP 10
2130: PPUSH
2131: LD_INT 14
2133: PPUSH
2134: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2138: LD_EXP 7
2142: PPUSH
2143: LD_INT 87
2145: PPUSH
2146: LD_INT 36
2148: PPUSH
2149: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2153: LD_EXP 7
2157: PPUSH
2158: LD_INT 14
2160: PPUSH
2161: CALL_OW 179
// wait ( 0 0$3 ) ;
2165: LD_INT 105
2167: PPUSH
2168: CALL_OW 67
// p := 0 ;
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_INT 0
2179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// p := p + 1 ;
2187: LD_ADDR_VAR 0 4
2191: PUSH
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: PLUS
2200: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2201: LD_EXP 1
2205: PPUSH
2206: LD_INT 6
2208: PPUSH
2209: CALL_OW 308
2213: PUSH
2214: LD_VAR 0 4
2218: PUSH
2219: LD_INT 10
2221: GREATER
2222: OR
2223: IFFALSE 2180
// heikeNearbyEon := true ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_INT 88
2240: PPUSH
2241: LD_INT 37
2243: PPUSH
2244: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2248: LD_EXP 6
2252: PPUSH
2253: LD_EXP 13
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2266: LD_EXP 13
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: LD_INT 89
2277: PPUSH
2278: LD_INT 37
2280: PPUSH
2281: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2285: LD_EXP 13
2289: PUSH
2290: LD_INT 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 91
2296: PPUSH
2297: LD_INT 39
2299: PPUSH
2300: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2304: LD_EXP 13
2308: PPUSH
2309: LD_EXP 11
2313: PPUSH
2314: CALL_OW 179
// wait ( 0 0$1 ) ;
2318: LD_INT 35
2320: PPUSH
2321: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2325: LD_EXP 13
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: LD_STRING DS-eon-1
2336: PPUSH
2337: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2341: LD_EXP 6
2345: PPUSH
2346: LD_STRING DSh-eon-1
2348: PPUSH
2349: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2353: LD_EXP 13
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_STRING DS-eon-2
2364: PPUSH
2365: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2369: LD_EXP 6
2373: PPUSH
2374: LD_STRING DSh-eon-1a
2376: PPUSH
2377: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2381: LD_EXP 13
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: LD_INT 92
2392: PPUSH
2393: LD_INT 43
2395: PPUSH
2396: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2400: LD_EXP 13
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_INT 14
2411: PPUSH
2412: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2416: LD_EXP 13
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: LD_INT 93
2427: PPUSH
2428: LD_INT 41
2430: PPUSH
2431: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2435: LD_EXP 13
2439: PUSH
2440: LD_INT 2
2442: ARRAY
2443: PPUSH
2444: LD_INT 93
2446: PPUSH
2447: LD_INT 40
2449: PPUSH
2450: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2454: LD_EXP 6
2458: PPUSH
2459: LD_INT 88
2461: PPUSH
2462: LD_INT 41
2464: PPUSH
2465: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2469: LD_EXP 6
2473: PPUSH
2474: LD_INT 87
2476: PPUSH
2477: LD_INT 41
2479: PPUSH
2480: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2491: LD_EXP 6
2495: PPUSH
2496: LD_INT 88
2498: PPUSH
2499: LD_INT 41
2501: PPUSH
2502: CALL_OW 307
2506: IFFALSE 2484
// wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_STRING DSh-eon-2
2522: PPUSH
2523: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2527: LD_EXP 11
2531: PPUSH
2532: LD_INT 87
2534: PPUSH
2535: LD_INT 40
2537: PPUSH
2538: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2542: LD_EXP 11
2546: PPUSH
2547: LD_INT 86
2549: PPUSH
2550: LD_INT 40
2552: PPUSH
2553: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2557: LD_INT 35
2559: PPUSH
2560: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_INT 87
2571: PPUSH
2572: LD_INT 40
2574: PPUSH
2575: CALL_OW 307
2579: IFFALSE 2557
// Say ( Shariff , DShar-eon-3 ) ;
2581: LD_EXP 11
2585: PPUSH
2586: LD_STRING DShar-eon-3
2588: PPUSH
2589: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2600: LD_EXP 5
2604: PPUSH
2605: LD_EXP 1
2609: PPUSH
2610: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2614: LD_EXP 11
2618: PPUSH
2619: LD_STRING DShar-eon-4
2621: PPUSH
2622: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2626: LD_EXP 5
2630: PPUSH
2631: LD_STRING DK-eon-4
2633: PPUSH
2634: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2638: LD_EXP 5
2642: PPUSH
2643: LD_INT 14
2645: PPUSH
2646: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2650: LD_INT 35
2652: PPUSH
2653: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2657: LD_EXP 5
2661: PPUSH
2662: CALL_OW 305
2666: NOT
2667: IFFALSE 2650
// ComTurnUnit ( Shariff , Heike ) ;
2669: LD_EXP 11
2673: PPUSH
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_STRING DShar-eon-5
2690: PPUSH
2691: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2695: LD_EXP 1
2699: PPUSH
2700: LD_INT 91
2702: PPUSH
2703: LD_INT 44
2705: PPUSH
2706: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2710: LD_EXP 1
2714: PPUSH
2715: LD_INT 14
2717: PPUSH
2718: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2722: LD_INT 35
2724: PPUSH
2725: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2729: LD_EXP 1
2733: PPUSH
2734: LD_INT 91
2736: PPUSH
2737: LD_INT 44
2739: PPUSH
2740: CALL_OW 307
2744: IFFALSE 2722
// Say ( Heike , DH-eon-5 ) ;
2746: LD_EXP 1
2750: PPUSH
2751: LD_STRING DH-eon-5
2753: PPUSH
2754: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2758: LD_EXP 1
2762: PPUSH
2763: LD_INT 14
2765: PPUSH
2766: CALL_OW 120
// wait ( 0 0$2 ) ;
2770: LD_INT 70
2772: PPUSH
2773: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2777: LD_INT 1
2779: PPUSH
2780: LD_STRING %_cont
2782: PPUSH
2783: CALL_OW 340
// InGameOff ;
2787: CALL_OW 9
// end ; end_of_file
2791: PPOPN 4
2793: END
// export function PrepareHeikeGroup ; begin
2794: LD_INT 0
2796: PPUSH
// uc_side := 2 ;
2797: LD_ADDR_OWVAR 20
2801: PUSH
2802: LD_INT 2
2804: ST_TO_ADDR
// uc_nation := 2 ;
2805: LD_ADDR_OWVAR 21
2809: PUSH
2810: LD_INT 2
2812: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2813: LD_ADDR_EXP 1
2817: PUSH
2818: LD_STRING Heike
2820: PPUSH
2821: CALL_OW 25
2825: ST_TO_ADDR
// uc_side := 5 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 5
2833: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2834: LD_ADDR_EXP 5
2838: PUSH
2839: LD_STRING Kaia
2841: PPUSH
2842: CALL_OW 25
2846: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2847: LD_EXP 1
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2862: LD_EXP 5
2866: PPUSH
2867: LD_INT 3
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: CALL_OW 49
// end ;
2877: LD_VAR 0 1
2881: RET
// export function PrepareSheikGroup ; var un , i ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
2886: PPUSH
// uc_side := 5 ;
2887: LD_ADDR_OWVAR 20
2891: PUSH
2892: LD_INT 5
2894: ST_TO_ADDR
// uc_nation := 2 ;
2895: LD_ADDR_OWVAR 21
2899: PUSH
2900: LD_INT 2
2902: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2903: LD_ADDR_EXP 10
2907: PUSH
2908: LD_STRING Ali
2910: PPUSH
2911: CALL_OW 25
2915: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2916: LD_ADDR_EXP 11
2920: PUSH
2921: LD_STRING Abdul
2923: PPUSH
2924: CALL_OW 25
2928: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2929: LD_ADDR_EXP 2
2933: PUSH
2934: LD_STRING Omar
2936: PPUSH
2937: CALL_OW 25
2941: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2942: LD_ADDR_EXP 7
2946: PUSH
2947: LD_STRING Mahtab
2949: PPUSH
2950: CALL_OW 25
2954: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2955: LD_ADDR_EXP 6
2959: PUSH
2960: LD_STRING Shahrzad
2962: PPUSH
2963: CALL_OW 25
2967: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2968: LD_EXP 10
2972: PPUSH
2973: LD_INT 85
2975: PPUSH
2976: LD_INT 37
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2986: LD_EXP 11
2990: PPUSH
2991: LD_INT 87
2993: PPUSH
2994: LD_INT 37
2996: PPUSH
2997: LD_INT 0
2999: PPUSH
3000: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3004: LD_EXP 2
3008: PPUSH
3009: LD_INT 85
3011: PPUSH
3012: LD_INT 35
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3022: LD_EXP 7
3026: PPUSH
3027: LD_INT 86
3029: PPUSH
3030: LD_INT 39
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3040: LD_EXP 6
3044: PPUSH
3045: LD_INT 88
3047: PPUSH
3048: LD_INT 39
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3058: LD_EXP 10
3062: PPUSH
3063: LD_EXP 11
3067: PPUSH
3068: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3072: LD_EXP 11
3076: PPUSH
3077: LD_EXP 10
3081: PPUSH
3082: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3086: LD_EXP 2
3090: PPUSH
3091: LD_EXP 11
3095: PPUSH
3096: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3100: LD_EXP 7
3104: PUSH
3105: LD_EXP 6
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PPUSH
3114: LD_EXP 11
3118: PPUSH
3119: CALL_OW 119
// for i := 1 to 2 do
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 2
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3223
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3139: LD_INT 2
3141: PPUSH
3142: LD_INT 4
3144: PPUSH
3145: LD_INT 6
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 2
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_INT 90
3169: PPUSH
3170: LD_INT 44
3172: PPUSH
3173: LD_INT 3
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3183: LD_VAR 0 2
3187: PPUSH
3188: LD_INT 91
3190: PPUSH
3191: LD_INT 43
3193: PPUSH
3194: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3198: LD_ADDR_EXP 13
3202: PUSH
3203: LD_EXP 13
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 2
3220: ST_TO_ADDR
// end ;
3221: GO 3136
3223: POP
3224: POP
// scientists := scientists diff 0 ;
3225: LD_ADDR_EXP 13
3229: PUSH
3230: LD_EXP 13
3234: PUSH
3235: LD_INT 0
3237: DIFF
3238: ST_TO_ADDR
// end ;
3239: LD_VAR 0 1
3243: RET
// export function PrepareKurtGroup ; var i ; begin
3244: LD_INT 0
3246: PPUSH
3247: PPUSH
// uc_side := 5 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 5
3255: ST_TO_ADDR
// uc_nation := 2 ;
3256: LD_ADDR_OWVAR 21
3260: PUSH
3261: LD_INT 2
3263: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_STRING Kurt
3271: PPUSH
3272: CALL_OW 25
3276: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3277: LD_ADDR_EXP 4
3281: PUSH
3282: LD_STRING Olaf
3284: PPUSH
3285: CALL_OW 25
3289: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3290: LD_ADDR_EXP 9
3294: PUSH
3295: LD_STRING Hans
3297: PPUSH
3298: CALL_OW 25
3302: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3303: LD_ADDR_VAR 0 2
3307: PUSH
3308: LD_EXP 8
3312: PUSH
3313: LD_EXP 9
3317: PUSH
3318: LD_EXP 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3348
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 10
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: CALL_OW 49
3346: GO 3328
3348: POP
3349: POP
// ComTurnUnit ( Kurt , Hans ) ;
3350: LD_EXP 8
3354: PPUSH
3355: LD_EXP 9
3359: PPUSH
3360: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3364: LD_EXP 4
3368: PPUSH
3369: LD_EXP 9
3373: PPUSH
3374: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3378: LD_EXP 9
3382: PPUSH
3383: LD_EXP 4
3387: PPUSH
3388: CALL_OW 119
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
3402: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3403: LD_ADDR_VAR 0 2
3407: PUSH
3408: LD_INT 21
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 69
3422: PUSH
3423: LD_INT 14
3425: DIFF
3426: PUSH
3427: FOR_IN
3428: IFFALSE 3508
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3430: LD_VAR 0 2
3434: PPUSH
3435: CALL_OW 266
3439: PUSH
3440: LD_INT 6
3442: PUSH
3443: LD_INT 31
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: IN
3450: IFFALSE 3474
// SetLives ( i , rand ( 500 , 600 ) ) else
3452: LD_VAR 0 2
3456: PPUSH
3457: LD_INT 500
3459: PPUSH
3460: LD_INT 600
3462: PPUSH
3463: CALL_OW 12
3467: PPUSH
3468: CALL_OW 234
3472: GO 3494
// SetLives ( i , rand ( 300 , 499 ) ) ;
3474: LD_VAR 0 2
3478: PPUSH
3479: LD_INT 300
3481: PPUSH
3482: LD_INT 499
3484: PPUSH
3485: CALL_OW 12
3489: PPUSH
3490: CALL_OW 234
// SetSide ( i , 5 ) ;
3494: LD_VAR 0 2
3498: PPUSH
3499: LD_INT 5
3501: PPUSH
3502: CALL_OW 235
// end ;
3506: GO 3427
3508: POP
3509: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3510: LD_ADDR_VAR 0 4
3514: PUSH
3515: LD_INT 9
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 517
3525: ST_TO_ADDR
// uc_side := 4 ;
3526: LD_ADDR_OWVAR 20
3530: PUSH
3531: LD_INT 4
3533: ST_TO_ADDR
// uc_nation := 1 ;
3534: LD_ADDR_OWVAR 21
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3542: LD_ADDR_VAR 0 2
3546: PUSH
3547: DOUBLE
3548: LD_INT 1
3550: DEC
3551: ST_TO_ADDR
3552: LD_VAR 0 4
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3638
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3564: LD_INT 0
3566: PPUSH
3567: LD_INT 1
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_VAR 0 2
3585: PUSH
3586: LD_INT 3
3588: MOD
3589: PUSH
3590: LD_INT 1
3592: PLUS
3593: ARRAY
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 380
// un := CreateHuman ;
3602: LD_ADDR_VAR 0 3
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3612: LD_VAR 0 3
3616: PPUSH
3617: LD_INT 9
3619: PPUSH
3620: LD_INT 0
3622: PPUSH
3623: CALL_OW 49
// KillUnit ( un ) ;
3627: LD_VAR 0 3
3631: PPUSH
3632: CALL_OW 66
// end ;
3636: GO 3561
3638: POP
3639: POP
// end ;
3640: LD_VAR 0 1
3644: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3645: LD_INT 0
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
3653: PPUSH
// uc_side := 5 ;
3654: LD_ADDR_OWVAR 20
3658: PUSH
3659: LD_INT 5
3661: ST_TO_ADDR
// uc_nation := 2 ;
3662: LD_ADDR_OWVAR 21
3666: PUSH
3667: LD_INT 2
3669: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3670: LD_ADDR_VAR 0 6
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 4
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: LD_INT 14
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: ST_TO_ADDR
// InitHc ;
3693: CALL_OW 19
// for i in area do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: LD_VAR 0 6
3706: PUSH
3707: FOR_IN
3708: IFFALSE 3872
// begin tmp := AreaToList ( i , 0 ) ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 2
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3728: LD_ADDR_VAR 0 3
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_VAR 0 5
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: FOR_TO
3748: IFFALSE 3868
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3750: LD_INT 1
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 3
3758: PPUSH
3759: CALL_OW 380
// un := CreateHuman ;
3763: LD_ADDR_VAR 0 7
3767: PUSH
3768: CALL_OW 44
3772: ST_TO_ADDR
// if i = spawnBaseArea3 then
3773: LD_VAR 0 2
3777: PUSH
3778: LD_INT 5
3780: EQUAL
3781: IFFALSE 3799
// eonGuards := eonGuards ^ un ;
3783: LD_ADDR_EXP 14
3787: PUSH
3788: LD_EXP 14
3792: PUSH
3793: LD_VAR 0 7
3797: ADD
3798: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3799: LD_VAR 0 7
3803: PPUSH
3804: LD_VAR 0 2
3808: PPUSH
3809: LD_INT 0
3811: PPUSH
3812: CALL_OW 49
// ComHold ( un ) ;
3816: LD_VAR 0 7
3820: PPUSH
3821: CALL_OW 140
// if i = spawnBaseArea4 then
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 14
3832: EQUAL
3833: IFFALSE 3866
// begin firstGroup := firstGroup ^ un ;
3835: LD_ADDR_EXP 15
3839: PUSH
3840: LD_EXP 15
3844: PUSH
3845: LD_VAR 0 7
3849: ADD
3850: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3851: LD_VAR 0 7
3855: PPUSH
3856: LD_INT 108
3858: PPUSH
3859: LD_INT 47
3861: PPUSH
3862: CALL_OW 118
// end ; end ;
3866: GO 3747
3868: POP
3869: POP
// end ;
3870: GO 3707
3872: POP
3873: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 30
3886: PUSH
3887: LD_INT 31
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: FOR_TO
3900: IFFALSE 3994
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3902: LD_ADDR_VAR 0 4
3906: PUSH
3907: LD_INT 30
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PPUSH
3917: CALL_OW 69
3921: PUSH
3922: LD_VAR 0 2
3926: ARRAY
3927: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 3
3936: PPUSH
3937: CALL_OW 380
// un := CreateHuman ;
3941: LD_ADDR_VAR 0 7
3945: PUSH
3946: CALL_OW 44
3950: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3951: LD_VAR 0 7
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: CALL_OW 254
3965: PUSH
3966: LD_INT 3
3968: PLUS
3969: PUSH
3970: LD_INT 6
3972: MOD
3973: PPUSH
3974: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3978: LD_VAR 0 7
3982: PPUSH
3983: LD_VAR 0 4
3987: PPUSH
3988: CALL_OW 52
// end ;
3992: GO 3899
3994: POP
3995: POP
// end ; end_of_file
3996: LD_VAR 0 1
4000: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 2
4008: EQUAL
4009: PUSH
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 5
4017: EQUAL
4018: AND
4019: IFFALSE 4045
// begin kaiaAttacked := true ;
4021: LD_ADDR_EXP 22
4025: PUSH
4026: LD_INT 1
4028: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4029: LD_INT 2
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: CALL_OW 80
// end ; end ;
4045: PPOPN 2
4047: END
// every 0 0$1 trigger scientists do var i ;
4048: LD_EXP 13
4052: IFFALSE 4260
4054: GO 4056
4056: DISABLE
4057: LD_INT 0
4059: PPUSH
// begin repeat for i in scientists do
4060: LD_ADDR_VAR 0 1
4064: PUSH
4065: LD_EXP 13
4069: PUSH
4070: FOR_IN
4071: IFFALSE 4245
// begin wait ( 0 0$1 ) ;
4073: LD_INT 35
4075: PPUSH
4076: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4080: LD_VAR 0 1
4084: PPUSH
4085: LD_INT 11
4087: PUSH
4088: LD_INT 13
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_VAR 0 1
4099: PUSH
4100: LD_INT 2
4102: MOD
4103: PUSH
4104: LD_INT 1
4106: PLUS
4107: ARRAY
4108: PPUSH
4109: CALL_OW 308
4113: NOT
4114: IFFALSE 4149
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4116: LD_VAR 0 1
4120: PPUSH
4121: LD_INT 11
4123: PUSH
4124: LD_INT 13
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_VAR 0 1
4135: PUSH
4136: LD_INT 2
4138: MOD
4139: PUSH
4140: LD_INT 1
4142: PLUS
4143: ARRAY
4144: PPUSH
4145: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_INT 14
4156: PPUSH
4157: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_INT 70
4168: PPUSH
4169: CALL_OW 202
// if rand ( 0 , 1 ) then
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: CALL_OW 12
4183: IFFALSE 4197
// AddComAnim ( i , 15 ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 15
4192: PPUSH
4193: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4197: LD_VAR 0 1
4201: PPUSH
4202: LD_INT 35
4204: PPUSH
4205: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4209: LD_VAR 0 1
4213: PPUSH
4214: LD_INT 12
4216: PPUSH
4217: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 93
4228: PPUSH
4229: LD_INT 40
4231: PPUSH
4232: CALL_OW 178
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// end ;
4243: GO 4070
4245: POP
4246: POP
// wait ( 0 0$10 ) ;
4247: LD_INT 350
4249: PPUSH
4250: CALL_OW 67
// until heikeNearbyEon ;
4254: LD_EXP 20
4258: IFFALSE 4060
// end ; end_of_file
4260: PPOPN 1
4262: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 100
4270: EQUAL
4271: IFFALSE 5220
// begin if not StreamModeActive then
4273: LD_EXP 23
4277: NOT
4278: IFFALSE 4288
// StreamModeActive := true ;
4280: LD_ADDR_EXP 23
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// if p3 = 0 then
4288: LD_VAR 0 3
4292: PUSH
4293: LD_INT 0
4295: EQUAL
4296: IFFALSE 4302
// InitStreamMode ;
4298: CALL 5378 0 0
// if p3 = 1 then
4302: LD_VAR 0 3
4306: PUSH
4307: LD_INT 1
4309: EQUAL
4310: IFFALSE 4320
// sRocket := true ;
4312: LD_ADDR_EXP 28
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// if p3 = 2 then
4320: LD_VAR 0 3
4324: PUSH
4325: LD_INT 2
4327: EQUAL
4328: IFFALSE 4338
// sSpeed := true ;
4330: LD_ADDR_EXP 27
4334: PUSH
4335: LD_INT 1
4337: ST_TO_ADDR
// if p3 = 3 then
4338: LD_VAR 0 3
4342: PUSH
4343: LD_INT 3
4345: EQUAL
4346: IFFALSE 4356
// sEngine := true ;
4348: LD_ADDR_EXP 29
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// if p3 = 4 then
4356: LD_VAR 0 3
4360: PUSH
4361: LD_INT 4
4363: EQUAL
4364: IFFALSE 4374
// sSpec := true ;
4366: LD_ADDR_EXP 26
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// if p3 = 5 then
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 5
4381: EQUAL
4382: IFFALSE 4392
// sLevel := true ;
4384: LD_ADDR_EXP 30
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// if p3 = 6 then
4392: LD_VAR 0 3
4396: PUSH
4397: LD_INT 6
4399: EQUAL
4400: IFFALSE 4410
// sArmoury := true ;
4402: LD_ADDR_EXP 31
4406: PUSH
4407: LD_INT 1
4409: ST_TO_ADDR
// if p3 = 7 then
4410: LD_VAR 0 3
4414: PUSH
4415: LD_INT 7
4417: EQUAL
4418: IFFALSE 4428
// sRadar := true ;
4420: LD_ADDR_EXP 32
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// if p3 = 8 then
4428: LD_VAR 0 3
4432: PUSH
4433: LD_INT 8
4435: EQUAL
4436: IFFALSE 4446
// sBunker := true ;
4438: LD_ADDR_EXP 33
4442: PUSH
4443: LD_INT 1
4445: ST_TO_ADDR
// if p3 = 9 then
4446: LD_VAR 0 3
4450: PUSH
4451: LD_INT 9
4453: EQUAL
4454: IFFALSE 4464
// sHack := true ;
4456: LD_ADDR_EXP 34
4460: PUSH
4461: LD_INT 1
4463: ST_TO_ADDR
// if p3 = 10 then
4464: LD_VAR 0 3
4468: PUSH
4469: LD_INT 10
4471: EQUAL
4472: IFFALSE 4482
// sFire := true ;
4474: LD_ADDR_EXP 35
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// if p3 = 11 then
4482: LD_VAR 0 3
4486: PUSH
4487: LD_INT 11
4489: EQUAL
4490: IFFALSE 4500
// sRefresh := true ;
4492: LD_ADDR_EXP 36
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// if p3 = 12 then
4500: LD_VAR 0 3
4504: PUSH
4505: LD_INT 12
4507: EQUAL
4508: IFFALSE 4518
// sExp := true ;
4510: LD_ADDR_EXP 37
4514: PUSH
4515: LD_INT 1
4517: ST_TO_ADDR
// if p3 = 13 then
4518: LD_VAR 0 3
4522: PUSH
4523: LD_INT 13
4525: EQUAL
4526: IFFALSE 4536
// sDepot := true ;
4528: LD_ADDR_EXP 38
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// if p3 = 14 then
4536: LD_VAR 0 3
4540: PUSH
4541: LD_INT 14
4543: EQUAL
4544: IFFALSE 4554
// sFlag := true ;
4546: LD_ADDR_EXP 39
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// if p3 = 15 then
4554: LD_VAR 0 3
4558: PUSH
4559: LD_INT 15
4561: EQUAL
4562: IFFALSE 4572
// sKamikadze := true ;
4564: LD_ADDR_EXP 47
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// if p3 = 16 then
4572: LD_VAR 0 3
4576: PUSH
4577: LD_INT 16
4579: EQUAL
4580: IFFALSE 4590
// sTroll := true ;
4582: LD_ADDR_EXP 48
4586: PUSH
4587: LD_INT 1
4589: ST_TO_ADDR
// if p3 = 17 then
4590: LD_VAR 0 3
4594: PUSH
4595: LD_INT 17
4597: EQUAL
4598: IFFALSE 4608
// sSlow := true ;
4600: LD_ADDR_EXP 49
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// if p3 = 18 then
4608: LD_VAR 0 3
4612: PUSH
4613: LD_INT 18
4615: EQUAL
4616: IFFALSE 4626
// sLack := true ;
4618: LD_ADDR_EXP 50
4622: PUSH
4623: LD_INT 1
4625: ST_TO_ADDR
// if p3 = 19 then
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 19
4633: EQUAL
4634: IFFALSE 4644
// sTank := true ;
4636: LD_ADDR_EXP 52
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// if p3 = 20 then
4644: LD_VAR 0 3
4648: PUSH
4649: LD_INT 20
4651: EQUAL
4652: IFFALSE 4662
// sRemote := true ;
4654: LD_ADDR_EXP 53
4658: PUSH
4659: LD_INT 1
4661: ST_TO_ADDR
// if p3 = 21 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 21
4669: EQUAL
4670: IFFALSE 4680
// sPowell := true ;
4672: LD_ADDR_EXP 54
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 22 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 22
4687: EQUAL
4688: IFFALSE 4698
// sTeleport := true ;
4690: LD_ADDR_EXP 57
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 23 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 23
4705: EQUAL
4706: IFFALSE 4716
// sOilTower := true ;
4708: LD_ADDR_EXP 59
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 24 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 24
4723: EQUAL
4724: IFFALSE 4734
// sShovel := true ;
4726: LD_ADDR_EXP 60
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 25 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 25
4741: EQUAL
4742: IFFALSE 4752
// sSheik := true ;
4744: LD_ADDR_EXP 61
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 26 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 26
4759: EQUAL
4760: IFFALSE 4770
// sEarthquake := true ;
4762: LD_ADDR_EXP 63
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 27 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 27
4777: EQUAL
4778: IFFALSE 4788
// sAI := true ;
4780: LD_ADDR_EXP 64
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 28 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 28
4795: EQUAL
4796: IFFALSE 4806
// sCargo := true ;
4798: LD_ADDR_EXP 67
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 29 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 29
4813: EQUAL
4814: IFFALSE 4824
// sDLaser := true ;
4816: LD_ADDR_EXP 68
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 30 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 30
4831: EQUAL
4832: IFFALSE 4842
// sExchange := true ;
4834: LD_ADDR_EXP 69
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 31 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 31
4849: EQUAL
4850: IFFALSE 4860
// sFac := true ;
4852: LD_ADDR_EXP 70
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 32 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 32
4867: EQUAL
4868: IFFALSE 4878
// sPower := true ;
4870: LD_ADDR_EXP 71
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 33 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 33
4885: EQUAL
4886: IFFALSE 4896
// sRandom := true ;
4888: LD_ADDR_EXP 72
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 34 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 34
4903: EQUAL
4904: IFFALSE 4914
// sShield := true ;
4906: LD_ADDR_EXP 73
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 35 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 35
4921: EQUAL
4922: IFFALSE 4932
// sTime := true ;
4924: LD_ADDR_EXP 74
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 36 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 36
4939: EQUAL
4940: IFFALSE 4950
// sTools := true ;
4942: LD_ADDR_EXP 75
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 101 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 101
4957: EQUAL
4958: IFFALSE 4968
// sSold := true ;
4960: LD_ADDR_EXP 40
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 102 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 102
4975: EQUAL
4976: IFFALSE 4986
// sDiff := true ;
4978: LD_ADDR_EXP 41
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 103 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 103
4993: EQUAL
4994: IFFALSE 5004
// sFog := true ;
4996: LD_ADDR_EXP 44
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 104 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 104
5011: EQUAL
5012: IFFALSE 5022
// sReset := true ;
5014: LD_ADDR_EXP 45
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 105 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 105
5029: EQUAL
5030: IFFALSE 5040
// sSun := true ;
5032: LD_ADDR_EXP 46
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 106 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 106
5047: EQUAL
5048: IFFALSE 5058
// sTiger := true ;
5050: LD_ADDR_EXP 42
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 107 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 107
5065: EQUAL
5066: IFFALSE 5076
// sBomb := true ;
5068: LD_ADDR_EXP 43
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 108 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 108
5083: EQUAL
5084: IFFALSE 5094
// sWound := true ;
5086: LD_ADDR_EXP 51
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 109 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 109
5101: EQUAL
5102: IFFALSE 5112
// sBetray := true ;
5104: LD_ADDR_EXP 55
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 110 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 110
5119: EQUAL
5120: IFFALSE 5130
// sContamin := true ;
5122: LD_ADDR_EXP 56
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 111 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 111
5137: EQUAL
5138: IFFALSE 5148
// sOil := true ;
5140: LD_ADDR_EXP 58
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 112 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 112
5155: EQUAL
5156: IFFALSE 5166
// sStu := true ;
5158: LD_ADDR_EXP 62
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 113 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 113
5173: EQUAL
5174: IFFALSE 5184
// sBazooka := true ;
5176: LD_ADDR_EXP 65
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 114 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 114
5191: EQUAL
5192: IFFALSE 5202
// sMortar := true ;
5194: LD_ADDR_EXP 66
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 115 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 115
5209: EQUAL
5210: IFFALSE 5220
// sRanger := true ;
5212: LD_ADDR_EXP 76
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// end ; if p2 = 101 then
5220: LD_VAR 0 2
5224: PUSH
5225: LD_INT 101
5227: EQUAL
5228: IFFALSE 5356
// begin case p3 of 1 :
5230: LD_VAR 0 3
5234: PUSH
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5243
5241: GO 5250
5243: POP
// hHackUnlimitedResources ; 2 :
5244: CALL 16391 0 0
5248: GO 5356
5250: LD_INT 2
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5265
5258: POP
// hHackSetLevel10 ; 3 :
5259: CALL 16524 0 0
5263: GO 5356
5265: LD_INT 3
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5280
5273: POP
// hHackSetLevel10YourUnits ; 4 :
5274: CALL 16609 0 0
5278: GO 5356
5280: LD_INT 4
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5288
5286: GO 5295
5288: POP
// hHackInvincible ; 5 :
5289: CALL 17057 0 0
5293: GO 5356
5295: LD_INT 5
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5303
5301: GO 5310
5303: POP
// hHackInvisible ; 6 :
5304: CALL 17168 0 0
5308: GO 5356
5310: LD_INT 6
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5325
5318: POP
// hHackChangeYourSide ; 7 :
5319: CALL 17225 0 0
5323: GO 5356
5325: LD_INT 7
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5340
5333: POP
// hHackChangeUnitSide ; 8 :
5334: CALL 17267 0 0
5338: GO 5356
5340: LD_INT 8
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5355
5348: POP
// hHackFog ; end ;
5349: CALL 17368 0 0
5353: GO 5356
5355: POP
// end ; end ;
5356: PPOPN 6
5358: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5359: GO 5361
5361: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5362: LD_STRING initStreamRollete();
5364: PPUSH
5365: CALL_OW 559
// InitStreamMode ;
5369: CALL 5378 0 0
// DefineStreamItems ( ) ;
5373: CALL 5818 0 0
// end ;
5377: END
// function InitStreamMode ; begin
5378: LD_INT 0
5380: PPUSH
// streamModeActive := false ;
5381: LD_ADDR_EXP 23
5385: PUSH
5386: LD_INT 0
5388: ST_TO_ADDR
// normalCounter := 36 ;
5389: LD_ADDR_EXP 24
5393: PUSH
5394: LD_INT 36
5396: ST_TO_ADDR
// hardcoreCounter := 16 ;
5397: LD_ADDR_EXP 25
5401: PUSH
5402: LD_INT 16
5404: ST_TO_ADDR
// sRocket := false ;
5405: LD_ADDR_EXP 28
5409: PUSH
5410: LD_INT 0
5412: ST_TO_ADDR
// sSpeed := false ;
5413: LD_ADDR_EXP 27
5417: PUSH
5418: LD_INT 0
5420: ST_TO_ADDR
// sEngine := false ;
5421: LD_ADDR_EXP 29
5425: PUSH
5426: LD_INT 0
5428: ST_TO_ADDR
// sSpec := false ;
5429: LD_ADDR_EXP 26
5433: PUSH
5434: LD_INT 0
5436: ST_TO_ADDR
// sLevel := false ;
5437: LD_ADDR_EXP 30
5441: PUSH
5442: LD_INT 0
5444: ST_TO_ADDR
// sArmoury := false ;
5445: LD_ADDR_EXP 31
5449: PUSH
5450: LD_INT 0
5452: ST_TO_ADDR
// sRadar := false ;
5453: LD_ADDR_EXP 32
5457: PUSH
5458: LD_INT 0
5460: ST_TO_ADDR
// sBunker := false ;
5461: LD_ADDR_EXP 33
5465: PUSH
5466: LD_INT 0
5468: ST_TO_ADDR
// sHack := false ;
5469: LD_ADDR_EXP 34
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// sFire := false ;
5477: LD_ADDR_EXP 35
5481: PUSH
5482: LD_INT 0
5484: ST_TO_ADDR
// sRefresh := false ;
5485: LD_ADDR_EXP 36
5489: PUSH
5490: LD_INT 0
5492: ST_TO_ADDR
// sExp := false ;
5493: LD_ADDR_EXP 37
5497: PUSH
5498: LD_INT 0
5500: ST_TO_ADDR
// sDepot := false ;
5501: LD_ADDR_EXP 38
5505: PUSH
5506: LD_INT 0
5508: ST_TO_ADDR
// sFlag := false ;
5509: LD_ADDR_EXP 39
5513: PUSH
5514: LD_INT 0
5516: ST_TO_ADDR
// sKamikadze := false ;
5517: LD_ADDR_EXP 47
5521: PUSH
5522: LD_INT 0
5524: ST_TO_ADDR
// sTroll := false ;
5525: LD_ADDR_EXP 48
5529: PUSH
5530: LD_INT 0
5532: ST_TO_ADDR
// sSlow := false ;
5533: LD_ADDR_EXP 49
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// sLack := false ;
5541: LD_ADDR_EXP 50
5545: PUSH
5546: LD_INT 0
5548: ST_TO_ADDR
// sTank := false ;
5549: LD_ADDR_EXP 52
5553: PUSH
5554: LD_INT 0
5556: ST_TO_ADDR
// sRemote := false ;
5557: LD_ADDR_EXP 53
5561: PUSH
5562: LD_INT 0
5564: ST_TO_ADDR
// sPowell := false ;
5565: LD_ADDR_EXP 54
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// sTeleport := false ;
5573: LD_ADDR_EXP 57
5577: PUSH
5578: LD_INT 0
5580: ST_TO_ADDR
// sOilTower := false ;
5581: LD_ADDR_EXP 59
5585: PUSH
5586: LD_INT 0
5588: ST_TO_ADDR
// sShovel := false ;
5589: LD_ADDR_EXP 60
5593: PUSH
5594: LD_INT 0
5596: ST_TO_ADDR
// sSheik := false ;
5597: LD_ADDR_EXP 61
5601: PUSH
5602: LD_INT 0
5604: ST_TO_ADDR
// sEarthquake := false ;
5605: LD_ADDR_EXP 63
5609: PUSH
5610: LD_INT 0
5612: ST_TO_ADDR
// sAI := false ;
5613: LD_ADDR_EXP 64
5617: PUSH
5618: LD_INT 0
5620: ST_TO_ADDR
// sCargo := false ;
5621: LD_ADDR_EXP 67
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// sDLaser := false ;
5629: LD_ADDR_EXP 68
5633: PUSH
5634: LD_INT 0
5636: ST_TO_ADDR
// sExchange := false ;
5637: LD_ADDR_EXP 69
5641: PUSH
5642: LD_INT 0
5644: ST_TO_ADDR
// sFac := false ;
5645: LD_ADDR_EXP 70
5649: PUSH
5650: LD_INT 0
5652: ST_TO_ADDR
// sPower := false ;
5653: LD_ADDR_EXP 71
5657: PUSH
5658: LD_INT 0
5660: ST_TO_ADDR
// sRandom := false ;
5661: LD_ADDR_EXP 72
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// sShield := false ;
5669: LD_ADDR_EXP 73
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// sTime := false ;
5677: LD_ADDR_EXP 74
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// sTools := false ;
5685: LD_ADDR_EXP 75
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// sSold := false ;
5693: LD_ADDR_EXP 40
5697: PUSH
5698: LD_INT 0
5700: ST_TO_ADDR
// sDiff := false ;
5701: LD_ADDR_EXP 41
5705: PUSH
5706: LD_INT 0
5708: ST_TO_ADDR
// sFog := false ;
5709: LD_ADDR_EXP 44
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// sReset := false ;
5717: LD_ADDR_EXP 45
5721: PUSH
5722: LD_INT 0
5724: ST_TO_ADDR
// sSun := false ;
5725: LD_ADDR_EXP 46
5729: PUSH
5730: LD_INT 0
5732: ST_TO_ADDR
// sTiger := false ;
5733: LD_ADDR_EXP 42
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// sBomb := false ;
5741: LD_ADDR_EXP 43
5745: PUSH
5746: LD_INT 0
5748: ST_TO_ADDR
// sWound := false ;
5749: LD_ADDR_EXP 51
5753: PUSH
5754: LD_INT 0
5756: ST_TO_ADDR
// sBetray := false ;
5757: LD_ADDR_EXP 55
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// sContamin := false ;
5765: LD_ADDR_EXP 56
5769: PUSH
5770: LD_INT 0
5772: ST_TO_ADDR
// sOil := false ;
5773: LD_ADDR_EXP 58
5777: PUSH
5778: LD_INT 0
5780: ST_TO_ADDR
// sStu := false ;
5781: LD_ADDR_EXP 62
5785: PUSH
5786: LD_INT 0
5788: ST_TO_ADDR
// sBazooka := false ;
5789: LD_ADDR_EXP 65
5793: PUSH
5794: LD_INT 0
5796: ST_TO_ADDR
// sMortar := false ;
5797: LD_ADDR_EXP 66
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// sRanger := false ;
5805: LD_ADDR_EXP 76
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// end ;
5813: LD_VAR 0 1
5817: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5818: LD_INT 0
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
5824: PPUSH
// result := [ ] ;
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: EMPTY
5831: ST_TO_ADDR
// if campaign_id = 1 then
5832: LD_OWVAR 69
5836: PUSH
5837: LD_INT 1
5839: EQUAL
5840: IFFALSE 8778
// begin case mission_number of 1 :
5842: LD_OWVAR 70
5846: PUSH
5847: LD_INT 1
5849: DOUBLE
5850: EQUAL
5851: IFTRUE 5855
5853: GO 5919
5855: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5856: LD_ADDR_VAR 0 1
5860: PUSH
5861: LD_INT 2
5863: PUSH
5864: LD_INT 4
5866: PUSH
5867: LD_INT 11
5869: PUSH
5870: LD_INT 12
5872: PUSH
5873: LD_INT 15
5875: PUSH
5876: LD_INT 16
5878: PUSH
5879: LD_INT 22
5881: PUSH
5882: LD_INT 23
5884: PUSH
5885: LD_INT 26
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 101
5901: PUSH
5902: LD_INT 102
5904: PUSH
5905: LD_INT 106
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 8776
5919: LD_INT 2
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5999
5927: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5928: LD_ADDR_VAR 0 1
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 4
5938: PUSH
5939: LD_INT 11
5941: PUSH
5942: LD_INT 12
5944: PUSH
5945: LD_INT 15
5947: PUSH
5948: LD_INT 16
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_INT 23
5956: PUSH
5957: LD_INT 26
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 101
5973: PUSH
5974: LD_INT 102
5976: PUSH
5977: LD_INT 105
5979: PUSH
5980: LD_INT 106
5982: PUSH
5983: LD_INT 108
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: ST_TO_ADDR
5997: GO 8776
5999: LD_INT 3
6001: DOUBLE
6002: EQUAL
6003: IFTRUE 6007
6005: GO 6083
6007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6008: LD_ADDR_VAR 0 1
6012: PUSH
6013: LD_INT 2
6015: PUSH
6016: LD_INT 4
6018: PUSH
6019: LD_INT 5
6021: PUSH
6022: LD_INT 11
6024: PUSH
6025: LD_INT 12
6027: PUSH
6028: LD_INT 15
6030: PUSH
6031: LD_INT 16
6033: PUSH
6034: LD_INT 22
6036: PUSH
6037: LD_INT 26
6039: PUSH
6040: LD_INT 36
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 101
6057: PUSH
6058: LD_INT 102
6060: PUSH
6061: LD_INT 105
6063: PUSH
6064: LD_INT 106
6066: PUSH
6067: LD_INT 108
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: ST_TO_ADDR
6081: GO 8776
6083: LD_INT 4
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6175
6091: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6092: LD_ADDR_VAR 0 1
6096: PUSH
6097: LD_INT 2
6099: PUSH
6100: LD_INT 4
6102: PUSH
6103: LD_INT 5
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 11
6111: PUSH
6112: LD_INT 12
6114: PUSH
6115: LD_INT 15
6117: PUSH
6118: LD_INT 16
6120: PUSH
6121: LD_INT 22
6123: PUSH
6124: LD_INT 23
6126: PUSH
6127: LD_INT 26
6129: PUSH
6130: LD_INT 36
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 101
6149: PUSH
6150: LD_INT 102
6152: PUSH
6153: LD_INT 105
6155: PUSH
6156: LD_INT 106
6158: PUSH
6159: LD_INT 108
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: ST_TO_ADDR
6173: GO 8776
6175: LD_INT 5
6177: DOUBLE
6178: EQUAL
6179: IFTRUE 6183
6181: GO 6283
6183: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6184: LD_ADDR_VAR 0 1
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: LD_INT 4
6194: PUSH
6195: LD_INT 5
6197: PUSH
6198: LD_INT 6
6200: PUSH
6201: LD_INT 8
6203: PUSH
6204: LD_INT 11
6206: PUSH
6207: LD_INT 12
6209: PUSH
6210: LD_INT 15
6212: PUSH
6213: LD_INT 16
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 23
6221: PUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 36
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 101
6249: PUSH
6250: LD_INT 102
6252: PUSH
6253: LD_INT 105
6255: PUSH
6256: LD_INT 106
6258: PUSH
6259: LD_INT 108
6261: PUSH
6262: LD_INT 109
6264: PUSH
6265: LD_INT 112
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: ST_TO_ADDR
6281: GO 8776
6283: LD_INT 6
6285: DOUBLE
6286: EQUAL
6287: IFTRUE 6291
6289: GO 6411
6291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 6
6308: PUSH
6309: LD_INT 8
6311: PUSH
6312: LD_INT 11
6314: PUSH
6315: LD_INT 12
6317: PUSH
6318: LD_INT 15
6320: PUSH
6321: LD_INT 16
6323: PUSH
6324: LD_INT 20
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 26
6341: PUSH
6342: LD_INT 30
6344: PUSH
6345: LD_INT 31
6347: PUSH
6348: LD_INT 32
6350: PUSH
6351: LD_INT 36
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 101
6377: PUSH
6378: LD_INT 102
6380: PUSH
6381: LD_INT 105
6383: PUSH
6384: LD_INT 106
6386: PUSH
6387: LD_INT 108
6389: PUSH
6390: LD_INT 109
6392: PUSH
6393: LD_INT 112
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: ST_TO_ADDR
6409: GO 8776
6411: LD_INT 7
6413: DOUBLE
6414: EQUAL
6415: IFTRUE 6419
6417: GO 6519
6419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: LD_INT 7
6436: PUSH
6437: LD_INT 11
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: LD_INT 15
6445: PUSH
6446: LD_INT 16
6448: PUSH
6449: LD_INT 20
6451: PUSH
6452: LD_INT 21
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_INT 23
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 26
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 101
6485: PUSH
6486: LD_INT 102
6488: PUSH
6489: LD_INT 103
6491: PUSH
6492: LD_INT 105
6494: PUSH
6495: LD_INT 106
6497: PUSH
6498: LD_INT 108
6500: PUSH
6501: LD_INT 112
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 8776
6519: LD_INT 8
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6655
6527: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6528: LD_ADDR_VAR 0 1
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: LD_INT 4
6538: PUSH
6539: LD_INT 5
6541: PUSH
6542: LD_INT 6
6544: PUSH
6545: LD_INT 7
6547: PUSH
6548: LD_INT 8
6550: PUSH
6551: LD_INT 11
6553: PUSH
6554: LD_INT 12
6556: PUSH
6557: LD_INT 15
6559: PUSH
6560: LD_INT 16
6562: PUSH
6563: LD_INT 20
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 22
6571: PUSH
6572: LD_INT 23
6574: PUSH
6575: LD_INT 25
6577: PUSH
6578: LD_INT 26
6580: PUSH
6581: LD_INT 30
6583: PUSH
6584: LD_INT 31
6586: PUSH
6587: LD_INT 32
6589: PUSH
6590: LD_INT 36
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 101
6617: PUSH
6618: LD_INT 102
6620: PUSH
6621: LD_INT 103
6623: PUSH
6624: LD_INT 105
6626: PUSH
6627: LD_INT 106
6629: PUSH
6630: LD_INT 108
6632: PUSH
6633: LD_INT 109
6635: PUSH
6636: LD_INT 112
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: ST_TO_ADDR
6653: GO 8776
6655: LD_INT 9
6657: DOUBLE
6658: EQUAL
6659: IFTRUE 6663
6661: GO 6799
6663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6664: LD_ADDR_VAR 0 1
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: LD_INT 4
6674: PUSH
6675: LD_INT 5
6677: PUSH
6678: LD_INT 6
6680: PUSH
6681: LD_INT 7
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 15
6695: PUSH
6696: LD_INT 16
6698: PUSH
6699: LD_INT 20
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 22
6707: PUSH
6708: LD_INT 23
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 26
6716: PUSH
6717: LD_INT 28
6719: PUSH
6720: LD_INT 30
6722: PUSH
6723: LD_INT 31
6725: PUSH
6726: LD_INT 32
6728: PUSH
6729: LD_INT 36
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 101
6757: PUSH
6758: LD_INT 102
6760: PUSH
6761: LD_INT 103
6763: PUSH
6764: LD_INT 105
6766: PUSH
6767: LD_INT 106
6769: PUSH
6770: LD_INT 108
6772: PUSH
6773: LD_INT 109
6775: PUSH
6776: LD_INT 112
6778: PUSH
6779: LD_INT 114
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 8776
6799: LD_INT 10
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6991
6807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6808: LD_ADDR_VAR 0 1
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: LD_INT 6
6824: PUSH
6825: LD_INT 7
6827: PUSH
6828: LD_INT 8
6830: PUSH
6831: LD_INT 9
6833: PUSH
6834: LD_INT 10
6836: PUSH
6837: LD_INT 11
6839: PUSH
6840: LD_INT 12
6842: PUSH
6843: LD_INT 13
6845: PUSH
6846: LD_INT 14
6848: PUSH
6849: LD_INT 15
6851: PUSH
6852: LD_INT 16
6854: PUSH
6855: LD_INT 17
6857: PUSH
6858: LD_INT 18
6860: PUSH
6861: LD_INT 19
6863: PUSH
6864: LD_INT 20
6866: PUSH
6867: LD_INT 21
6869: PUSH
6870: LD_INT 22
6872: PUSH
6873: LD_INT 23
6875: PUSH
6876: LD_INT 24
6878: PUSH
6879: LD_INT 25
6881: PUSH
6882: LD_INT 26
6884: PUSH
6885: LD_INT 28
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 31
6893: PUSH
6894: LD_INT 32
6896: PUSH
6897: LD_INT 36
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 101
6933: PUSH
6934: LD_INT 102
6936: PUSH
6937: LD_INT 103
6939: PUSH
6940: LD_INT 104
6942: PUSH
6943: LD_INT 105
6945: PUSH
6946: LD_INT 106
6948: PUSH
6949: LD_INT 107
6951: PUSH
6952: LD_INT 108
6954: PUSH
6955: LD_INT 109
6957: PUSH
6958: LD_INT 110
6960: PUSH
6961: LD_INT 111
6963: PUSH
6964: LD_INT 112
6966: PUSH
6967: LD_INT 114
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: ST_TO_ADDR
6989: GO 8776
6991: LD_INT 11
6993: DOUBLE
6994: EQUAL
6995: IFTRUE 6999
6997: GO 7191
6999: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7000: LD_ADDR_VAR 0 1
7004: PUSH
7005: LD_INT 2
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 4
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: LD_INT 6
7019: PUSH
7020: LD_INT 7
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: LD_INT 9
7028: PUSH
7029: LD_INT 10
7031: PUSH
7032: LD_INT 11
7034: PUSH
7035: LD_INT 12
7037: PUSH
7038: LD_INT 13
7040: PUSH
7041: LD_INT 14
7043: PUSH
7044: LD_INT 15
7046: PUSH
7047: LD_INT 16
7049: PUSH
7050: LD_INT 17
7052: PUSH
7053: LD_INT 18
7055: PUSH
7056: LD_INT 19
7058: PUSH
7059: LD_INT 20
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 23
7070: PUSH
7071: LD_INT 24
7073: PUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 26
7079: PUSH
7080: LD_INT 28
7082: PUSH
7083: LD_INT 30
7085: PUSH
7086: LD_INT 31
7088: PUSH
7089: LD_INT 32
7091: PUSH
7092: LD_INT 34
7094: PUSH
7095: LD_INT 36
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 101
7133: PUSH
7134: LD_INT 102
7136: PUSH
7137: LD_INT 103
7139: PUSH
7140: LD_INT 104
7142: PUSH
7143: LD_INT 105
7145: PUSH
7146: LD_INT 106
7148: PUSH
7149: LD_INT 107
7151: PUSH
7152: LD_INT 108
7154: PUSH
7155: LD_INT 109
7157: PUSH
7158: LD_INT 110
7160: PUSH
7161: LD_INT 111
7163: PUSH
7164: LD_INT 112
7166: PUSH
7167: LD_INT 114
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 8776
7191: LD_INT 12
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7407
7199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7200: LD_ADDR_VAR 0 1
7204: PUSH
7205: LD_INT 1
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: LD_INT 6
7222: PUSH
7223: LD_INT 7
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: LD_INT 9
7231: PUSH
7232: LD_INT 10
7234: PUSH
7235: LD_INT 11
7237: PUSH
7238: LD_INT 12
7240: PUSH
7241: LD_INT 13
7243: PUSH
7244: LD_INT 14
7246: PUSH
7247: LD_INT 15
7249: PUSH
7250: LD_INT 16
7252: PUSH
7253: LD_INT 17
7255: PUSH
7256: LD_INT 18
7258: PUSH
7259: LD_INT 19
7261: PUSH
7262: LD_INT 20
7264: PUSH
7265: LD_INT 21
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 23
7273: PUSH
7274: LD_INT 24
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 26
7282: PUSH
7283: LD_INT 27
7285: PUSH
7286: LD_INT 28
7288: PUSH
7289: LD_INT 30
7291: PUSH
7292: LD_INT 31
7294: PUSH
7295: LD_INT 32
7297: PUSH
7298: LD_INT 33
7300: PUSH
7301: LD_INT 34
7303: PUSH
7304: LD_INT 36
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 101
7345: PUSH
7346: LD_INT 102
7348: PUSH
7349: LD_INT 103
7351: PUSH
7352: LD_INT 104
7354: PUSH
7355: LD_INT 105
7357: PUSH
7358: LD_INT 106
7360: PUSH
7361: LD_INT 107
7363: PUSH
7364: LD_INT 108
7366: PUSH
7367: LD_INT 109
7369: PUSH
7370: LD_INT 110
7372: PUSH
7373: LD_INT 111
7375: PUSH
7376: LD_INT 112
7378: PUSH
7379: LD_INT 113
7381: PUSH
7382: LD_INT 114
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: ST_TO_ADDR
7405: GO 8776
7407: LD_INT 13
7409: DOUBLE
7410: EQUAL
7411: IFTRUE 7415
7413: GO 7611
7415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7416: LD_ADDR_VAR 0 1
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: LD_INT 3
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: LD_INT 8
7438: PUSH
7439: LD_INT 9
7441: PUSH
7442: LD_INT 10
7444: PUSH
7445: LD_INT 11
7447: PUSH
7448: LD_INT 12
7450: PUSH
7451: LD_INT 14
7453: PUSH
7454: LD_INT 15
7456: PUSH
7457: LD_INT 16
7459: PUSH
7460: LD_INT 17
7462: PUSH
7463: LD_INT 18
7465: PUSH
7466: LD_INT 19
7468: PUSH
7469: LD_INT 20
7471: PUSH
7472: LD_INT 21
7474: PUSH
7475: LD_INT 22
7477: PUSH
7478: LD_INT 23
7480: PUSH
7481: LD_INT 24
7483: PUSH
7484: LD_INT 25
7486: PUSH
7487: LD_INT 26
7489: PUSH
7490: LD_INT 27
7492: PUSH
7493: LD_INT 28
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 31
7501: PUSH
7502: LD_INT 32
7504: PUSH
7505: LD_INT 33
7507: PUSH
7508: LD_INT 34
7510: PUSH
7511: LD_INT 36
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 101
7549: PUSH
7550: LD_INT 102
7552: PUSH
7553: LD_INT 103
7555: PUSH
7556: LD_INT 104
7558: PUSH
7559: LD_INT 105
7561: PUSH
7562: LD_INT 106
7564: PUSH
7565: LD_INT 107
7567: PUSH
7568: LD_INT 108
7570: PUSH
7571: LD_INT 109
7573: PUSH
7574: LD_INT 110
7576: PUSH
7577: LD_INT 111
7579: PUSH
7580: LD_INT 112
7582: PUSH
7583: LD_INT 113
7585: PUSH
7586: LD_INT 114
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: ST_TO_ADDR
7609: GO 8776
7611: LD_INT 14
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7831
7619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7620: LD_ADDR_VAR 0 1
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: LD_INT 6
7642: PUSH
7643: LD_INT 7
7645: PUSH
7646: LD_INT 8
7648: PUSH
7649: LD_INT 9
7651: PUSH
7652: LD_INT 10
7654: PUSH
7655: LD_INT 11
7657: PUSH
7658: LD_INT 12
7660: PUSH
7661: LD_INT 13
7663: PUSH
7664: LD_INT 14
7666: PUSH
7667: LD_INT 15
7669: PUSH
7670: LD_INT 16
7672: PUSH
7673: LD_INT 17
7675: PUSH
7676: LD_INT 18
7678: PUSH
7679: LD_INT 19
7681: PUSH
7682: LD_INT 20
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 23
7693: PUSH
7694: LD_INT 24
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 26
7702: PUSH
7703: LD_INT 27
7705: PUSH
7706: LD_INT 28
7708: PUSH
7709: LD_INT 29
7711: PUSH
7712: LD_INT 30
7714: PUSH
7715: LD_INT 31
7717: PUSH
7718: LD_INT 32
7720: PUSH
7721: LD_INT 33
7723: PUSH
7724: LD_INT 34
7726: PUSH
7727: LD_INT 36
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 101
7769: PUSH
7770: LD_INT 102
7772: PUSH
7773: LD_INT 103
7775: PUSH
7776: LD_INT 104
7778: PUSH
7779: LD_INT 105
7781: PUSH
7782: LD_INT 106
7784: PUSH
7785: LD_INT 107
7787: PUSH
7788: LD_INT 108
7790: PUSH
7791: LD_INT 109
7793: PUSH
7794: LD_INT 110
7796: PUSH
7797: LD_INT 111
7799: PUSH
7800: LD_INT 112
7802: PUSH
7803: LD_INT 113
7805: PUSH
7806: LD_INT 114
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: ST_TO_ADDR
7829: GO 8776
7831: LD_INT 15
7833: DOUBLE
7834: EQUAL
7835: IFTRUE 7839
7837: GO 8051
7839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7840: LD_ADDR_VAR 0 1
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: LD_INT 2
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 4
7856: PUSH
7857: LD_INT 5
7859: PUSH
7860: LD_INT 6
7862: PUSH
7863: LD_INT 7
7865: PUSH
7866: LD_INT 8
7868: PUSH
7869: LD_INT 9
7871: PUSH
7872: LD_INT 10
7874: PUSH
7875: LD_INT 11
7877: PUSH
7878: LD_INT 12
7880: PUSH
7881: LD_INT 13
7883: PUSH
7884: LD_INT 14
7886: PUSH
7887: LD_INT 15
7889: PUSH
7890: LD_INT 16
7892: PUSH
7893: LD_INT 17
7895: PUSH
7896: LD_INT 18
7898: PUSH
7899: LD_INT 19
7901: PUSH
7902: LD_INT 20
7904: PUSH
7905: LD_INT 21
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_INT 23
7913: PUSH
7914: LD_INT 24
7916: PUSH
7917: LD_INT 25
7919: PUSH
7920: LD_INT 26
7922: PUSH
7923: LD_INT 27
7925: PUSH
7926: LD_INT 28
7928: PUSH
7929: LD_INT 29
7931: PUSH
7932: LD_INT 30
7934: PUSH
7935: LD_INT 31
7937: PUSH
7938: LD_INT 32
7940: PUSH
7941: LD_INT 33
7943: PUSH
7944: LD_INT 34
7946: PUSH
7947: LD_INT 36
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 101
7989: PUSH
7990: LD_INT 102
7992: PUSH
7993: LD_INT 103
7995: PUSH
7996: LD_INT 104
7998: PUSH
7999: LD_INT 105
8001: PUSH
8002: LD_INT 106
8004: PUSH
8005: LD_INT 107
8007: PUSH
8008: LD_INT 108
8010: PUSH
8011: LD_INT 109
8013: PUSH
8014: LD_INT 110
8016: PUSH
8017: LD_INT 111
8019: PUSH
8020: LD_INT 112
8022: PUSH
8023: LD_INT 113
8025: PUSH
8026: LD_INT 114
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: ST_TO_ADDR
8049: GO 8776
8051: LD_INT 16
8053: DOUBLE
8054: EQUAL
8055: IFTRUE 8059
8057: GO 8183
8059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8060: LD_ADDR_VAR 0 1
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 4
8070: PUSH
8071: LD_INT 5
8073: PUSH
8074: LD_INT 7
8076: PUSH
8077: LD_INT 11
8079: PUSH
8080: LD_INT 12
8082: PUSH
8083: LD_INT 15
8085: PUSH
8086: LD_INT 16
8088: PUSH
8089: LD_INT 20
8091: PUSH
8092: LD_INT 21
8094: PUSH
8095: LD_INT 22
8097: PUSH
8098: LD_INT 23
8100: PUSH
8101: LD_INT 25
8103: PUSH
8104: LD_INT 26
8106: PUSH
8107: LD_INT 30
8109: PUSH
8110: LD_INT 31
8112: PUSH
8113: LD_INT 32
8115: PUSH
8116: LD_INT 33
8118: PUSH
8119: LD_INT 34
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 101
8145: PUSH
8146: LD_INT 102
8148: PUSH
8149: LD_INT 103
8151: PUSH
8152: LD_INT 106
8154: PUSH
8155: LD_INT 108
8157: PUSH
8158: LD_INT 112
8160: PUSH
8161: LD_INT 113
8163: PUSH
8164: LD_INT 114
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: ST_TO_ADDR
8181: GO 8776
8183: LD_INT 17
8185: DOUBLE
8186: EQUAL
8187: IFTRUE 8191
8189: GO 8403
8191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8192: LD_ADDR_VAR 0 1
8196: PUSH
8197: LD_INT 1
8199: PUSH
8200: LD_INT 2
8202: PUSH
8203: LD_INT 3
8205: PUSH
8206: LD_INT 4
8208: PUSH
8209: LD_INT 5
8211: PUSH
8212: LD_INT 6
8214: PUSH
8215: LD_INT 7
8217: PUSH
8218: LD_INT 8
8220: PUSH
8221: LD_INT 9
8223: PUSH
8224: LD_INT 10
8226: PUSH
8227: LD_INT 11
8229: PUSH
8230: LD_INT 12
8232: PUSH
8233: LD_INT 13
8235: PUSH
8236: LD_INT 14
8238: PUSH
8239: LD_INT 15
8241: PUSH
8242: LD_INT 16
8244: PUSH
8245: LD_INT 17
8247: PUSH
8248: LD_INT 18
8250: PUSH
8251: LD_INT 19
8253: PUSH
8254: LD_INT 20
8256: PUSH
8257: LD_INT 21
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_INT 23
8265: PUSH
8266: LD_INT 24
8268: PUSH
8269: LD_INT 25
8271: PUSH
8272: LD_INT 26
8274: PUSH
8275: LD_INT 27
8277: PUSH
8278: LD_INT 28
8280: PUSH
8281: LD_INT 29
8283: PUSH
8284: LD_INT 30
8286: PUSH
8287: LD_INT 31
8289: PUSH
8290: LD_INT 32
8292: PUSH
8293: LD_INT 33
8295: PUSH
8296: LD_INT 34
8298: PUSH
8299: LD_INT 36
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 101
8341: PUSH
8342: LD_INT 102
8344: PUSH
8345: LD_INT 103
8347: PUSH
8348: LD_INT 104
8350: PUSH
8351: LD_INT 105
8353: PUSH
8354: LD_INT 106
8356: PUSH
8357: LD_INT 107
8359: PUSH
8360: LD_INT 108
8362: PUSH
8363: LD_INT 109
8365: PUSH
8366: LD_INT 110
8368: PUSH
8369: LD_INT 111
8371: PUSH
8372: LD_INT 112
8374: PUSH
8375: LD_INT 113
8377: PUSH
8378: LD_INT 114
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: ST_TO_ADDR
8401: GO 8776
8403: LD_INT 18
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8547
8411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: LD_INT 4
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: LD_INT 7
8428: PUSH
8429: LD_INT 11
8431: PUSH
8432: LD_INT 12
8434: PUSH
8435: LD_INT 15
8437: PUSH
8438: LD_INT 16
8440: PUSH
8441: LD_INT 20
8443: PUSH
8444: LD_INT 21
8446: PUSH
8447: LD_INT 22
8449: PUSH
8450: LD_INT 23
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 26
8458: PUSH
8459: LD_INT 30
8461: PUSH
8462: LD_INT 31
8464: PUSH
8465: LD_INT 32
8467: PUSH
8468: LD_INT 33
8470: PUSH
8471: LD_INT 34
8473: PUSH
8474: LD_INT 35
8476: PUSH
8477: LD_INT 36
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 101
8505: PUSH
8506: LD_INT 102
8508: PUSH
8509: LD_INT 103
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 108
8517: PUSH
8518: LD_INT 112
8520: PUSH
8521: LD_INT 113
8523: PUSH
8524: LD_INT 114
8526: PUSH
8527: LD_INT 115
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
8545: GO 8776
8547: LD_INT 19
8549: DOUBLE
8550: EQUAL
8551: IFTRUE 8555
8553: GO 8775
8555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8556: LD_ADDR_VAR 0 1
8560: PUSH
8561: LD_INT 1
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 4
8572: PUSH
8573: LD_INT 5
8575: PUSH
8576: LD_INT 6
8578: PUSH
8579: LD_INT 7
8581: PUSH
8582: LD_INT 8
8584: PUSH
8585: LD_INT 9
8587: PUSH
8588: LD_INT 10
8590: PUSH
8591: LD_INT 11
8593: PUSH
8594: LD_INT 12
8596: PUSH
8597: LD_INT 13
8599: PUSH
8600: LD_INT 14
8602: PUSH
8603: LD_INT 15
8605: PUSH
8606: LD_INT 16
8608: PUSH
8609: LD_INT 17
8611: PUSH
8612: LD_INT 18
8614: PUSH
8615: LD_INT 19
8617: PUSH
8618: LD_INT 20
8620: PUSH
8621: LD_INT 21
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 23
8629: PUSH
8630: LD_INT 24
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: LD_INT 26
8638: PUSH
8639: LD_INT 27
8641: PUSH
8642: LD_INT 28
8644: PUSH
8645: LD_INT 29
8647: PUSH
8648: LD_INT 30
8650: PUSH
8651: LD_INT 31
8653: PUSH
8654: LD_INT 32
8656: PUSH
8657: LD_INT 33
8659: PUSH
8660: LD_INT 34
8662: PUSH
8663: LD_INT 35
8665: PUSH
8666: LD_INT 36
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 101
8709: PUSH
8710: LD_INT 102
8712: PUSH
8713: LD_INT 103
8715: PUSH
8716: LD_INT 104
8718: PUSH
8719: LD_INT 105
8721: PUSH
8722: LD_INT 106
8724: PUSH
8725: LD_INT 107
8727: PUSH
8728: LD_INT 108
8730: PUSH
8731: LD_INT 109
8733: PUSH
8734: LD_INT 110
8736: PUSH
8737: LD_INT 111
8739: PUSH
8740: LD_INT 112
8742: PUSH
8743: LD_INT 113
8745: PUSH
8746: LD_INT 114
8748: PUSH
8749: LD_INT 115
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: ST_TO_ADDR
8773: GO 8776
8775: POP
// end else
8776: GO 8995
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8778: LD_ADDR_VAR 0 1
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 3
8791: PUSH
8792: LD_INT 4
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 6
8800: PUSH
8801: LD_INT 7
8803: PUSH
8804: LD_INT 8
8806: PUSH
8807: LD_INT 9
8809: PUSH
8810: LD_INT 10
8812: PUSH
8813: LD_INT 11
8815: PUSH
8816: LD_INT 12
8818: PUSH
8819: LD_INT 13
8821: PUSH
8822: LD_INT 14
8824: PUSH
8825: LD_INT 15
8827: PUSH
8828: LD_INT 16
8830: PUSH
8831: LD_INT 17
8833: PUSH
8834: LD_INT 18
8836: PUSH
8837: LD_INT 19
8839: PUSH
8840: LD_INT 20
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 23
8851: PUSH
8852: LD_INT 24
8854: PUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 26
8860: PUSH
8861: LD_INT 27
8863: PUSH
8864: LD_INT 28
8866: PUSH
8867: LD_INT 29
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 31
8875: PUSH
8876: LD_INT 32
8878: PUSH
8879: LD_INT 33
8881: PUSH
8882: LD_INT 34
8884: PUSH
8885: LD_INT 35
8887: PUSH
8888: LD_INT 36
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 101
8931: PUSH
8932: LD_INT 102
8934: PUSH
8935: LD_INT 103
8937: PUSH
8938: LD_INT 104
8940: PUSH
8941: LD_INT 105
8943: PUSH
8944: LD_INT 106
8946: PUSH
8947: LD_INT 107
8949: PUSH
8950: LD_INT 108
8952: PUSH
8953: LD_INT 109
8955: PUSH
8956: LD_INT 110
8958: PUSH
8959: LD_INT 111
8961: PUSH
8962: LD_INT 112
8964: PUSH
8965: LD_INT 113
8967: PUSH
8968: LD_INT 114
8970: PUSH
8971: LD_INT 115
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: ST_TO_ADDR
// if result then
8995: LD_VAR 0 1
8999: IFFALSE 9288
// begin normal :=  ;
9001: LD_ADDR_VAR 0 3
9005: PUSH
9006: LD_STRING 
9008: ST_TO_ADDR
// hardcore :=  ;
9009: LD_ADDR_VAR 0 4
9013: PUSH
9014: LD_STRING 
9016: ST_TO_ADDR
// for i = 1 to normalCounter do
9017: LD_ADDR_VAR 0 5
9021: PUSH
9022: DOUBLE
9023: LD_INT 1
9025: DEC
9026: ST_TO_ADDR
9027: LD_EXP 24
9031: PUSH
9032: FOR_TO
9033: IFFALSE 9134
// begin tmp := 0 ;
9035: LD_ADDR_VAR 0 2
9039: PUSH
9040: LD_STRING 0
9042: ST_TO_ADDR
// if result [ 1 ] then
9043: LD_VAR 0 1
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: IFFALSE 9116
// if result [ 1 ] [ 1 ] = i then
9053: LD_VAR 0 1
9057: PUSH
9058: LD_INT 1
9060: ARRAY
9061: PUSH
9062: LD_INT 1
9064: ARRAY
9065: PUSH
9066: LD_VAR 0 5
9070: EQUAL
9071: IFFALSE 9116
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9073: LD_ADDR_VAR 0 1
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: LD_INT 1
9085: PPUSH
9086: LD_VAR 0 1
9090: PUSH
9091: LD_INT 1
9093: ARRAY
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 3
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// tmp := 1 ;
9108: LD_ADDR_VAR 0 2
9112: PUSH
9113: LD_STRING 1
9115: ST_TO_ADDR
// end ; normal := normal & tmp ;
9116: LD_ADDR_VAR 0 3
9120: PUSH
9121: LD_VAR 0 3
9125: PUSH
9126: LD_VAR 0 2
9130: STR
9131: ST_TO_ADDR
// end ;
9132: GO 9032
9134: POP
9135: POP
// for i = 1 to hardcoreCounter do
9136: LD_ADDR_VAR 0 5
9140: PUSH
9141: DOUBLE
9142: LD_INT 1
9144: DEC
9145: ST_TO_ADDR
9146: LD_EXP 25
9150: PUSH
9151: FOR_TO
9152: IFFALSE 9257
// begin tmp := 0 ;
9154: LD_ADDR_VAR 0 2
9158: PUSH
9159: LD_STRING 0
9161: ST_TO_ADDR
// if result [ 2 ] then
9162: LD_VAR 0 1
9166: PUSH
9167: LD_INT 2
9169: ARRAY
9170: IFFALSE 9239
// if result [ 2 ] [ 1 ] = 100 + i then
9172: LD_VAR 0 1
9176: PUSH
9177: LD_INT 2
9179: ARRAY
9180: PUSH
9181: LD_INT 1
9183: ARRAY
9184: PUSH
9185: LD_INT 100
9187: PUSH
9188: LD_VAR 0 5
9192: PLUS
9193: EQUAL
9194: IFFALSE 9239
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9196: LD_ADDR_VAR 0 1
9200: PUSH
9201: LD_VAR 0 1
9205: PPUSH
9206: LD_INT 2
9208: PPUSH
9209: LD_VAR 0 1
9213: PUSH
9214: LD_INT 2
9216: ARRAY
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: CALL_OW 3
9225: PPUSH
9226: CALL_OW 1
9230: ST_TO_ADDR
// tmp := 1 ;
9231: LD_ADDR_VAR 0 2
9235: PUSH
9236: LD_STRING 1
9238: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9239: LD_ADDR_VAR 0 4
9243: PUSH
9244: LD_VAR 0 4
9248: PUSH
9249: LD_VAR 0 2
9253: STR
9254: ST_TO_ADDR
// end ;
9255: GO 9151
9257: POP
9258: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9259: LD_STRING getStreamItemsFromMission("
9261: PUSH
9262: LD_VAR 0 3
9266: STR
9267: PUSH
9268: LD_STRING ","
9270: STR
9271: PUSH
9272: LD_VAR 0 4
9276: STR
9277: PUSH
9278: LD_STRING ")
9280: STR
9281: PPUSH
9282: CALL_OW 559
// end else
9286: GO 9295
// ToLua ( getStreamItemsFromMission("","") ) ;
9288: LD_STRING getStreamItemsFromMission("","")
9290: PPUSH
9291: CALL_OW 559
// end ;
9295: LD_VAR 0 1
9299: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9300: LD_EXP 23
9304: PUSH
9305: LD_EXP 28
9309: AND
9310: IFFALSE 9434
9312: GO 9314
9314: DISABLE
9315: LD_INT 0
9317: PPUSH
9318: PPUSH
// begin enable ;
9319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9320: LD_ADDR_VAR 0 2
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_OWVAR 2
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 2
9339: PUSH
9340: LD_INT 34
9342: PUSH
9343: LD_INT 7
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 34
9352: PUSH
9353: LD_INT 45
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 34
9362: PUSH
9363: LD_INT 28
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 34
9372: PUSH
9373: LD_INT 47
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PPUSH
9391: CALL_OW 69
9395: ST_TO_ADDR
// if not tmp then
9396: LD_VAR 0 2
9400: NOT
9401: IFFALSE 9405
// exit ;
9403: GO 9434
// for i in tmp do
9405: LD_ADDR_VAR 0 1
9409: PUSH
9410: LD_VAR 0 2
9414: PUSH
9415: FOR_IN
9416: IFFALSE 9432
// begin SetLives ( i , 0 ) ;
9418: LD_VAR 0 1
9422: PPUSH
9423: LD_INT 0
9425: PPUSH
9426: CALL_OW 234
// end ;
9430: GO 9415
9432: POP
9433: POP
// end ;
9434: PPOPN 2
9436: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9437: LD_EXP 23
9441: PUSH
9442: LD_EXP 29
9446: AND
9447: IFFALSE 9531
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
// begin enable ;
9456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_OWVAR 2
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 32
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 69
9492: ST_TO_ADDR
// if not tmp then
9493: LD_VAR 0 2
9497: NOT
9498: IFFALSE 9502
// exit ;
9500: GO 9531
// for i in tmp do
9502: LD_ADDR_VAR 0 1
9506: PUSH
9507: LD_VAR 0 2
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9529
// begin SetLives ( i , 0 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 0
9522: PPUSH
9523: CALL_OW 234
// end ;
9527: GO 9512
9529: POP
9530: POP
// end ;
9531: PPOPN 2
9533: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9534: LD_EXP 23
9538: PUSH
9539: LD_EXP 26
9543: AND
9544: IFFALSE 9637
9546: GO 9548
9548: DISABLE
9549: LD_INT 0
9551: PPUSH
// begin enable ;
9552: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9553: LD_ADDR_VAR 0 1
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_OWVAR 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 2
9572: PUSH
9573: LD_INT 25
9575: PUSH
9576: LD_INT 5
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 25
9585: PUSH
9586: LD_INT 9
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 25
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: FOR_IN
9619: IFFALSE 9635
// begin SetClass ( i , 1 ) ;
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_INT 1
9628: PPUSH
9629: CALL_OW 336
// end ;
9633: GO 9618
9635: POP
9636: POP
// end ;
9637: PPOPN 1
9639: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9640: LD_EXP 23
9644: PUSH
9645: LD_EXP 27
9649: AND
9650: PUSH
9651: LD_OWVAR 65
9655: PUSH
9656: LD_INT 7
9658: LESS
9659: AND
9660: IFFALSE 9674
9662: GO 9664
9664: DISABLE
// begin enable ;
9665: ENABLE
// game_speed := 7 ;
9666: LD_ADDR_OWVAR 65
9670: PUSH
9671: LD_INT 7
9673: ST_TO_ADDR
// end ;
9674: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9675: LD_EXP 23
9679: PUSH
9680: LD_EXP 30
9684: AND
9685: IFFALSE 9887
9687: GO 9689
9689: DISABLE
9690: LD_INT 0
9692: PPUSH
9693: PPUSH
9694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9695: LD_ADDR_VAR 0 3
9699: PUSH
9700: LD_INT 81
9702: PUSH
9703: LD_OWVAR 2
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 21
9714: PUSH
9715: LD_INT 1
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: ST_TO_ADDR
// if not tmp then
9731: LD_VAR 0 3
9735: NOT
9736: IFFALSE 9740
// exit ;
9738: GO 9887
// if tmp > 5 then
9740: LD_VAR 0 3
9744: PUSH
9745: LD_INT 5
9747: GREATER
9748: IFFALSE 9760
// k := 5 else
9750: LD_ADDR_VAR 0 2
9754: PUSH
9755: LD_INT 5
9757: ST_TO_ADDR
9758: GO 9770
// k := tmp ;
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: LD_VAR 0 3
9769: ST_TO_ADDR
// for i := 1 to k do
9770: LD_ADDR_VAR 0 1
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 2
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9885
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9788: LD_VAR 0 3
9792: PUSH
9793: LD_VAR 0 1
9797: ARRAY
9798: PPUSH
9799: LD_VAR 0 1
9803: PUSH
9804: LD_INT 4
9806: MOD
9807: PUSH
9808: LD_INT 1
9810: PLUS
9811: PPUSH
9812: CALL_OW 259
9816: PUSH
9817: LD_INT 10
9819: LESS
9820: IFFALSE 9883
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9822: LD_VAR 0 3
9826: PUSH
9827: LD_VAR 0 1
9831: ARRAY
9832: PPUSH
9833: LD_VAR 0 1
9837: PUSH
9838: LD_INT 4
9840: MOD
9841: PUSH
9842: LD_INT 1
9844: PLUS
9845: PPUSH
9846: LD_VAR 0 3
9850: PUSH
9851: LD_VAR 0 1
9855: ARRAY
9856: PPUSH
9857: LD_VAR 0 1
9861: PUSH
9862: LD_INT 4
9864: MOD
9865: PUSH
9866: LD_INT 1
9868: PLUS
9869: PPUSH
9870: CALL_OW 259
9874: PUSH
9875: LD_INT 1
9877: PLUS
9878: PPUSH
9879: CALL_OW 237
9883: GO 9785
9885: POP
9886: POP
// end ;
9887: PPOPN 3
9889: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9890: LD_EXP 23
9894: PUSH
9895: LD_EXP 31
9899: AND
9900: IFFALSE 9920
9902: GO 9904
9904: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9905: LD_INT 4
9907: PPUSH
9908: LD_OWVAR 2
9912: PPUSH
9913: LD_INT 0
9915: PPUSH
9916: CALL_OW 324
9920: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9921: LD_EXP 23
9925: PUSH
9926: LD_EXP 60
9930: AND
9931: IFFALSE 9951
9933: GO 9935
9935: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9936: LD_INT 19
9938: PPUSH
9939: LD_OWVAR 2
9943: PPUSH
9944: LD_INT 0
9946: PPUSH
9947: CALL_OW 324
9951: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9952: LD_EXP 23
9956: PUSH
9957: LD_EXP 32
9961: AND
9962: IFFALSE 10064
9964: GO 9966
9966: DISABLE
9967: LD_INT 0
9969: PPUSH
9970: PPUSH
// begin enable ;
9971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9972: LD_ADDR_VAR 0 2
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_OWVAR 2
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: LD_INT 34
9994: PUSH
9995: LD_INT 11
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 34
10004: PUSH
10005: LD_INT 30
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 69
10025: ST_TO_ADDR
// if not tmp then
10026: LD_VAR 0 2
10030: NOT
10031: IFFALSE 10035
// exit ;
10033: GO 10064
// for i in tmp do
10035: LD_ADDR_VAR 0 1
10039: PUSH
10040: LD_VAR 0 2
10044: PUSH
10045: FOR_IN
10046: IFFALSE 10062
// begin SetLives ( i , 0 ) ;
10048: LD_VAR 0 1
10052: PPUSH
10053: LD_INT 0
10055: PPUSH
10056: CALL_OW 234
// end ;
10060: GO 10045
10062: POP
10063: POP
// end ;
10064: PPOPN 2
10066: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10067: LD_EXP 23
10071: PUSH
10072: LD_EXP 33
10076: AND
10077: IFFALSE 10097
10079: GO 10081
10081: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10082: LD_INT 32
10084: PPUSH
10085: LD_OWVAR 2
10089: PPUSH
10090: LD_INT 0
10092: PPUSH
10093: CALL_OW 324
10097: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10098: LD_EXP 23
10102: PUSH
10103: LD_EXP 34
10107: AND
10108: IFFALSE 10289
10110: GO 10112
10112: DISABLE
10113: LD_INT 0
10115: PPUSH
10116: PPUSH
10117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10118: LD_ADDR_VAR 0 2
10122: PUSH
10123: LD_INT 22
10125: PUSH
10126: LD_OWVAR 2
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 33
10137: PUSH
10138: LD_INT 3
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 69
10153: ST_TO_ADDR
// if not tmp then
10154: LD_VAR 0 2
10158: NOT
10159: IFFALSE 10163
// exit ;
10161: GO 10289
// side := 0 ;
10163: LD_ADDR_VAR 0 3
10167: PUSH
10168: LD_INT 0
10170: ST_TO_ADDR
// for i := 1 to 8 do
10171: LD_ADDR_VAR 0 1
10175: PUSH
10176: DOUBLE
10177: LD_INT 1
10179: DEC
10180: ST_TO_ADDR
10181: LD_INT 8
10183: PUSH
10184: FOR_TO
10185: IFFALSE 10233
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10187: LD_OWVAR 2
10191: PUSH
10192: LD_VAR 0 1
10196: NONEQUAL
10197: PUSH
10198: LD_OWVAR 2
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 81
10212: PUSH
10213: LD_INT 2
10215: EQUAL
10216: AND
10217: IFFALSE 10231
// begin side := i ;
10219: LD_ADDR_VAR 0 3
10223: PUSH
10224: LD_VAR 0 1
10228: ST_TO_ADDR
// break ;
10229: GO 10233
// end ;
10231: GO 10184
10233: POP
10234: POP
// if not side then
10235: LD_VAR 0 3
10239: NOT
10240: IFFALSE 10244
// exit ;
10242: GO 10289
// for i := 1 to tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: DOUBLE
10250: LD_INT 1
10252: DEC
10253: ST_TO_ADDR
10254: LD_VAR 0 2
10258: PUSH
10259: FOR_TO
10260: IFFALSE 10287
// if Prob ( 60 ) then
10262: LD_INT 60
10264: PPUSH
10265: CALL_OW 13
10269: IFFALSE 10285
// SetSide ( i , side ) ;
10271: LD_VAR 0 1
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: CALL_OW 235
10285: GO 10259
10287: POP
10288: POP
// end ;
10289: PPOPN 3
10291: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10292: LD_EXP 23
10296: PUSH
10297: LD_EXP 36
10301: AND
10302: IFFALSE 10421
10304: GO 10306
10306: DISABLE
10307: LD_INT 0
10309: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10310: LD_ADDR_VAR 0 1
10314: PUSH
10315: LD_INT 22
10317: PUSH
10318: LD_OWVAR 2
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 21
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 3
10339: PUSH
10340: LD_INT 23
10342: PUSH
10343: LD_INT 0
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: PUSH
10364: FOR_IN
10365: IFFALSE 10419
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL_OW 257
10376: PUSH
10377: LD_INT 1
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: IN
10395: IFFALSE 10417
// SetClass ( un , rand ( 1 , 4 ) ) ;
10397: LD_VAR 0 1
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: LD_INT 4
10407: PPUSH
10408: CALL_OW 12
10412: PPUSH
10413: CALL_OW 336
10417: GO 10364
10419: POP
10420: POP
// end ;
10421: PPOPN 1
10423: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10424: LD_EXP 23
10428: PUSH
10429: LD_EXP 35
10433: AND
10434: IFFALSE 10513
10436: GO 10438
10438: DISABLE
10439: LD_INT 0
10441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10442: LD_ADDR_VAR 0 1
10446: PUSH
10447: LD_INT 22
10449: PUSH
10450: LD_OWVAR 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 21
10461: PUSH
10462: LD_INT 3
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 69
10477: ST_TO_ADDR
// if not tmp then
10478: LD_VAR 0 1
10482: NOT
10483: IFFALSE 10487
// exit ;
10485: GO 10513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10487: LD_VAR 0 1
10491: PUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_VAR 0 1
10499: PPUSH
10500: CALL_OW 12
10504: ARRAY
10505: PPUSH
10506: LD_INT 100
10508: PPUSH
10509: CALL_OW 234
// end ;
10513: PPOPN 1
10515: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10516: LD_EXP 23
10520: PUSH
10521: LD_EXP 37
10525: AND
10526: IFFALSE 10624
10528: GO 10530
10530: DISABLE
10531: LD_INT 0
10533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10534: LD_ADDR_VAR 0 1
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_OWVAR 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 21
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: CALL_OW 69
10569: ST_TO_ADDR
// if not tmp then
10570: LD_VAR 0 1
10574: NOT
10575: IFFALSE 10579
// exit ;
10577: GO 10624
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10579: LD_VAR 0 1
10583: PUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: CALL_OW 12
10596: ARRAY
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: LD_INT 4
10603: PPUSH
10604: CALL_OW 12
10608: PPUSH
10609: LD_INT 3000
10611: PPUSH
10612: LD_INT 9000
10614: PPUSH
10615: CALL_OW 12
10619: PPUSH
10620: CALL_OW 492
// end ;
10624: PPOPN 1
10626: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10627: LD_EXP 23
10631: PUSH
10632: LD_EXP 38
10636: AND
10637: IFFALSE 10657
10639: GO 10641
10641: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10642: LD_INT 1
10644: PPUSH
10645: LD_OWVAR 2
10649: PPUSH
10650: LD_INT 0
10652: PPUSH
10653: CALL_OW 324
10657: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10658: LD_EXP 23
10662: PUSH
10663: LD_EXP 39
10667: AND
10668: IFFALSE 10751
10670: GO 10672
10672: DISABLE
10673: LD_INT 0
10675: PPUSH
10676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_OWVAR 2
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 21
10696: PUSH
10697: LD_INT 3
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PPUSH
10708: CALL_OW 69
10712: ST_TO_ADDR
// if not tmp then
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10722
// exit ;
10720: GO 10751
// for i in tmp do
10722: LD_ADDR_VAR 0 1
10726: PUSH
10727: LD_VAR 0 2
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10749
// SetBLevel ( i , 10 ) ;
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_INT 10
10742: PPUSH
10743: CALL_OW 241
10747: GO 10732
10749: POP
10750: POP
// end ;
10751: PPOPN 2
10753: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10754: LD_EXP 23
10758: PUSH
10759: LD_EXP 40
10763: AND
10764: IFFALSE 10875
10766: GO 10768
10768: DISABLE
10769: LD_INT 0
10771: PPUSH
10772: PPUSH
10773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10774: LD_ADDR_VAR 0 3
10778: PUSH
10779: LD_INT 22
10781: PUSH
10782: LD_OWVAR 2
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: ST_TO_ADDR
// if not tmp then
10810: LD_VAR 0 3
10814: NOT
10815: IFFALSE 10819
// exit ;
10817: GO 10875
// un := tmp [ rand ( 1 , tmp ) ] ;
10819: LD_ADDR_VAR 0 2
10823: PUSH
10824: LD_VAR 0 3
10828: PUSH
10829: LD_INT 1
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: CALL_OW 12
10841: ARRAY
10842: ST_TO_ADDR
// if Crawls ( un ) then
10843: LD_VAR 0 2
10847: PPUSH
10848: CALL_OW 318
10852: IFFALSE 10863
// ComWalk ( un ) ;
10854: LD_VAR 0 2
10858: PPUSH
10859: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10863: LD_VAR 0 2
10867: PPUSH
10868: LD_INT 5
10870: PPUSH
10871: CALL_OW 336
// end ;
10875: PPOPN 3
10877: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10878: LD_EXP 23
10882: PUSH
10883: LD_EXP 41
10887: AND
10888: PUSH
10889: LD_OWVAR 67
10893: PUSH
10894: LD_INT 3
10896: LESS
10897: AND
10898: IFFALSE 10917
10900: GO 10902
10902: DISABLE
// Difficulty := Difficulty + 1 ;
10903: LD_ADDR_OWVAR 67
10907: PUSH
10908: LD_OWVAR 67
10912: PUSH
10913: LD_INT 1
10915: PLUS
10916: ST_TO_ADDR
10917: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10918: LD_EXP 23
10922: PUSH
10923: LD_EXP 42
10927: AND
10928: IFFALSE 11031
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
// begin for i := 1 to 5 do
10936: LD_ADDR_VAR 0 1
10940: PUSH
10941: DOUBLE
10942: LD_INT 1
10944: DEC
10945: ST_TO_ADDR
10946: LD_INT 5
10948: PUSH
10949: FOR_TO
10950: IFFALSE 11029
// begin uc_nation := nation_nature ;
10952: LD_ADDR_OWVAR 21
10956: PUSH
10957: LD_INT 0
10959: ST_TO_ADDR
// uc_side := 0 ;
10960: LD_ADDR_OWVAR 20
10964: PUSH
10965: LD_INT 0
10967: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10968: LD_ADDR_OWVAR 29
10972: PUSH
10973: LD_INT 12
10975: PUSH
10976: LD_INT 12
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
// hc_agressivity := 20 ;
10983: LD_ADDR_OWVAR 35
10987: PUSH
10988: LD_INT 20
10990: ST_TO_ADDR
// hc_class := class_tiger ;
10991: LD_ADDR_OWVAR 28
10995: PUSH
10996: LD_INT 14
10998: ST_TO_ADDR
// hc_gallery :=  ;
10999: LD_ADDR_OWVAR 33
11003: PUSH
11004: LD_STRING 
11006: ST_TO_ADDR
// hc_name :=  ;
11007: LD_ADDR_OWVAR 26
11011: PUSH
11012: LD_STRING 
11014: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11015: CALL_OW 44
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 51
// end ;
11027: GO 10949
11029: POP
11030: POP
// end ;
11031: PPOPN 1
11033: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11034: LD_EXP 23
11038: PUSH
11039: LD_EXP 43
11043: AND
11044: IFFALSE 11053
11046: GO 11048
11048: DISABLE
// StreamSibBomb ;
11049: CALL 11054 0 0
11053: END
// export function StreamSibBomb ; var i , x , y ; begin
11054: LD_INT 0
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
// result := false ;
11060: LD_ADDR_VAR 0 1
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// for i := 1 to 16 do
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: DOUBLE
11074: LD_INT 1
11076: DEC
11077: ST_TO_ADDR
11078: LD_INT 16
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11281
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11084: LD_ADDR_VAR 0 3
11088: PUSH
11089: LD_INT 10
11091: PUSH
11092: LD_INT 20
11094: PUSH
11095: LD_INT 30
11097: PUSH
11098: LD_INT 40
11100: PUSH
11101: LD_INT 50
11103: PUSH
11104: LD_INT 60
11106: PUSH
11107: LD_INT 70
11109: PUSH
11110: LD_INT 80
11112: PUSH
11113: LD_INT 90
11115: PUSH
11116: LD_INT 100
11118: PUSH
11119: LD_INT 110
11121: PUSH
11122: LD_INT 120
11124: PUSH
11125: LD_INT 130
11127: PUSH
11128: LD_INT 140
11130: PUSH
11131: LD_INT 150
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 1
11153: PPUSH
11154: LD_INT 15
11156: PPUSH
11157: CALL_OW 12
11161: ARRAY
11162: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11163: LD_ADDR_VAR 0 4
11167: PUSH
11168: LD_INT 10
11170: PUSH
11171: LD_INT 20
11173: PUSH
11174: LD_INT 30
11176: PUSH
11177: LD_INT 40
11179: PUSH
11180: LD_INT 50
11182: PUSH
11183: LD_INT 60
11185: PUSH
11186: LD_INT 70
11188: PUSH
11189: LD_INT 80
11191: PUSH
11192: LD_INT 90
11194: PUSH
11195: LD_INT 100
11197: PUSH
11198: LD_INT 110
11200: PUSH
11201: LD_INT 120
11203: PUSH
11204: LD_INT 130
11206: PUSH
11207: LD_INT 140
11209: PUSH
11210: LD_INT 150
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_INT 15
11235: PPUSH
11236: CALL_OW 12
11240: ARRAY
11241: ST_TO_ADDR
// if ValidHex ( x , y ) then
11242: LD_VAR 0 3
11246: PPUSH
11247: LD_VAR 0 4
11251: PPUSH
11252: CALL_OW 488
11256: IFFALSE 11279
// begin result := [ x , y ] ;
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: LD_VAR 0 3
11267: PUSH
11268: LD_VAR 0 4
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: ST_TO_ADDR
// break ;
11277: GO 11281
// end ; end ;
11279: GO 11081
11281: POP
11282: POP
// if result then
11283: LD_VAR 0 1
11287: IFFALSE 11347
// begin ToLua ( playSibBomb() ) ;
11289: LD_STRING playSibBomb()
11291: PPUSH
11292: CALL_OW 559
// wait ( 0 0$14 ) ;
11296: LD_INT 490
11298: PPUSH
11299: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11303: LD_VAR 0 1
11307: PUSH
11308: LD_INT 1
11310: ARRAY
11311: PPUSH
11312: LD_VAR 0 1
11316: PUSH
11317: LD_INT 2
11319: ARRAY
11320: PPUSH
11321: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11325: LD_VAR 0 1
11329: PUSH
11330: LD_INT 1
11332: ARRAY
11333: PPUSH
11334: LD_VAR 0 1
11338: PUSH
11339: LD_INT 2
11341: ARRAY
11342: PPUSH
11343: CALL_OW 429
// end ; end ;
11347: LD_VAR 0 1
11351: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11352: LD_EXP 23
11356: PUSH
11357: LD_EXP 45
11361: AND
11362: IFFALSE 11374
11364: GO 11366
11366: DISABLE
// YouLost (  ) ;
11367: LD_STRING 
11369: PPUSH
11370: CALL_OW 104
11374: END
// every 0 0$1 trigger StreamModeActive and sFog do
11375: LD_EXP 23
11379: PUSH
11380: LD_EXP 44
11384: AND
11385: IFFALSE 11399
11387: GO 11389
11389: DISABLE
// FogOff ( your_side ) ;
11390: LD_OWVAR 2
11394: PPUSH
11395: CALL_OW 344
11399: END
// every 0 0$1 trigger StreamModeActive and sSun do
11400: LD_EXP 23
11404: PUSH
11405: LD_EXP 46
11409: AND
11410: IFFALSE 11438
11412: GO 11414
11414: DISABLE
// begin solar_recharge_percent := 0 ;
11415: LD_ADDR_OWVAR 79
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11423: LD_INT 10500
11425: PPUSH
11426: CALL_OW 67
// solar_recharge_percent := 100 ;
11430: LD_ADDR_OWVAR 79
11434: PUSH
11435: LD_INT 100
11437: ST_TO_ADDR
// end ;
11438: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11439: LD_EXP 23
11443: PUSH
11444: LD_EXP 47
11448: AND
11449: IFFALSE 11688
11451: GO 11453
11453: DISABLE
11454: LD_INT 0
11456: PPUSH
11457: PPUSH
11458: PPUSH
// begin tmp := [ ] ;
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: EMPTY
11465: ST_TO_ADDR
// for i := 1 to 6 do
11466: LD_ADDR_VAR 0 1
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 6
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11585
// begin uc_nation := nation_nature ;
11482: LD_ADDR_OWVAR 21
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// uc_side := 0 ;
11490: LD_ADDR_OWVAR 20
11494: PUSH
11495: LD_INT 0
11497: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11498: LD_ADDR_OWVAR 29
11502: PUSH
11503: LD_INT 12
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: ST_TO_ADDR
// hc_agressivity := 20 ;
11513: LD_ADDR_OWVAR 35
11517: PUSH
11518: LD_INT 20
11520: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11521: LD_ADDR_OWVAR 28
11525: PUSH
11526: LD_INT 17
11528: ST_TO_ADDR
// hc_gallery :=  ;
11529: LD_ADDR_OWVAR 33
11533: PUSH
11534: LD_STRING 
11536: ST_TO_ADDR
// hc_name :=  ;
11537: LD_ADDR_OWVAR 26
11541: PUSH
11542: LD_STRING 
11544: ST_TO_ADDR
// un := CreateHuman ;
11545: LD_ADDR_VAR 0 2
11549: PUSH
11550: CALL_OW 44
11554: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11555: LD_VAR 0 2
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 51
// tmp := tmp ^ un ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_VAR 0 3
11576: PUSH
11577: LD_VAR 0 2
11581: ADD
11582: ST_TO_ADDR
// end ;
11583: GO 11479
11585: POP
11586: POP
// repeat wait ( 0 0$1 ) ;
11587: LD_INT 35
11589: PPUSH
11590: CALL_OW 67
// for un in tmp do
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_VAR 0 3
11603: PUSH
11604: FOR_IN
11605: IFFALSE 11679
// begin if IsDead ( un ) then
11607: LD_VAR 0 2
11611: PPUSH
11612: CALL_OW 301
11616: IFFALSE 11636
// begin tmp := tmp diff un ;
11618: LD_ADDR_VAR 0 3
11622: PUSH
11623: LD_VAR 0 3
11627: PUSH
11628: LD_VAR 0 2
11632: DIFF
11633: ST_TO_ADDR
// continue ;
11634: GO 11604
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11636: LD_VAR 0 2
11640: PPUSH
11641: LD_INT 3
11643: PUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 0
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: PPUSH
11663: LD_VAR 0 2
11667: PPUSH
11668: CALL_OW 74
11672: PPUSH
11673: CALL_OW 115
// end ;
11677: GO 11604
11679: POP
11680: POP
// until not tmp ;
11681: LD_VAR 0 3
11685: NOT
11686: IFFALSE 11587
// end ;
11688: PPOPN 3
11690: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11691: LD_EXP 23
11695: PUSH
11696: LD_EXP 48
11700: AND
11701: IFFALSE 11755
11703: GO 11705
11705: DISABLE
// begin ToLua ( displayTroll(); ) ;
11706: LD_STRING displayTroll();
11708: PPUSH
11709: CALL_OW 559
// wait ( 3 3$00 ) ;
11713: LD_INT 6300
11715: PPUSH
11716: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11720: LD_STRING hideTroll();
11722: PPUSH
11723: CALL_OW 559
// wait ( 1 1$00 ) ;
11727: LD_INT 2100
11729: PPUSH
11730: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11734: LD_STRING displayTroll();
11736: PPUSH
11737: CALL_OW 559
// wait ( 1 1$00 ) ;
11741: LD_INT 2100
11743: PPUSH
11744: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11748: LD_STRING hideTroll();
11750: PPUSH
11751: CALL_OW 559
// end ;
11755: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11756: LD_EXP 23
11760: PUSH
11761: LD_EXP 49
11765: AND
11766: IFFALSE 11829
11768: GO 11770
11770: DISABLE
11771: LD_INT 0
11773: PPUSH
// begin p := 0 ;
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// repeat game_speed := 1 ;
11782: LD_ADDR_OWVAR 65
11786: PUSH
11787: LD_INT 1
11789: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11790: LD_INT 35
11792: PPUSH
11793: CALL_OW 67
// p := p + 1 ;
11797: LD_ADDR_VAR 0 1
11801: PUSH
11802: LD_VAR 0 1
11806: PUSH
11807: LD_INT 1
11809: PLUS
11810: ST_TO_ADDR
// until p >= 60 ;
11811: LD_VAR 0 1
11815: PUSH
11816: LD_INT 60
11818: GREATEREQUAL
11819: IFFALSE 11782
// game_speed := 4 ;
11821: LD_ADDR_OWVAR 65
11825: PUSH
11826: LD_INT 4
11828: ST_TO_ADDR
// end ;
11829: PPOPN 1
11831: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11832: LD_EXP 23
11836: PUSH
11837: LD_EXP 50
11841: AND
11842: IFFALSE 11988
11844: GO 11846
11846: DISABLE
11847: LD_INT 0
11849: PPUSH
11850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_OWVAR 2
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 0
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: ST_TO_ADDR
// if not depot then
11905: LD_VAR 0 1
11909: NOT
11910: IFFALSE 11914
// exit ;
11912: GO 11988
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11914: LD_ADDR_VAR 0 2
11918: PUSH
11919: LD_VAR 0 1
11923: PUSH
11924: LD_INT 1
11926: PPUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 12
11936: ARRAY
11937: PPUSH
11938: CALL_OW 274
11942: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11943: LD_VAR 0 2
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: LD_INT 0
11953: PPUSH
11954: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11958: LD_VAR 0 2
11962: PPUSH
11963: LD_INT 2
11965: PPUSH
11966: LD_INT 0
11968: PPUSH
11969: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11973: LD_VAR 0 2
11977: PPUSH
11978: LD_INT 3
11980: PPUSH
11981: LD_INT 0
11983: PPUSH
11984: CALL_OW 277
// end ;
11988: PPOPN 2
11990: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11991: LD_EXP 23
11995: PUSH
11996: LD_EXP 51
12000: AND
12001: IFFALSE 12098
12003: GO 12005
12005: DISABLE
12006: LD_INT 0
12008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: LD_INT 22
12016: PUSH
12017: LD_OWVAR 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 1
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 23
12041: PUSH
12042: LD_INT 0
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 69
12062: ST_TO_ADDR
// if not tmp then
12063: LD_VAR 0 1
12067: NOT
12068: IFFALSE 12072
// exit ;
12070: GO 12098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12072: LD_VAR 0 1
12076: PUSH
12077: LD_INT 1
12079: PPUSH
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 12
12089: ARRAY
12090: PPUSH
12091: LD_INT 200
12093: PPUSH
12094: CALL_OW 234
// end ;
12098: PPOPN 1
12100: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12101: LD_EXP 23
12105: PUSH
12106: LD_EXP 52
12110: AND
12111: IFFALSE 12190
12113: GO 12115
12115: DISABLE
12116: LD_INT 0
12118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12119: LD_ADDR_VAR 0 1
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_OWVAR 2
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 21
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: ST_TO_ADDR
// if not tmp then
12155: LD_VAR 0 1
12159: NOT
12160: IFFALSE 12164
// exit ;
12162: GO 12190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12164: LD_VAR 0 1
12168: PUSH
12169: LD_INT 1
12171: PPUSH
12172: LD_VAR 0 1
12176: PPUSH
12177: CALL_OW 12
12181: ARRAY
12182: PPUSH
12183: LD_INT 60
12185: PPUSH
12186: CALL_OW 234
// end ;
12190: PPOPN 1
12192: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12193: LD_EXP 23
12197: PUSH
12198: LD_EXP 53
12202: AND
12203: IFFALSE 12302
12205: GO 12207
12207: DISABLE
12208: LD_INT 0
12210: PPUSH
12211: PPUSH
// begin enable ;
12212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12213: LD_ADDR_VAR 0 1
12217: PUSH
12218: LD_INT 22
12220: PUSH
12221: LD_OWVAR 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 61
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: LD_INT 33
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: ST_TO_ADDR
// if not tmp then
12256: LD_VAR 0 1
12260: NOT
12261: IFFALSE 12265
// exit ;
12263: GO 12302
// for i in tmp do
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_VAR 0 1
12274: PUSH
12275: FOR_IN
12276: IFFALSE 12300
// if IsControledBy ( i ) then
12278: LD_VAR 0 2
12282: PPUSH
12283: CALL_OW 312
12287: IFFALSE 12298
// ComUnlink ( i ) ;
12289: LD_VAR 0 2
12293: PPUSH
12294: CALL_OW 136
12298: GO 12275
12300: POP
12301: POP
// end ;
12302: PPOPN 2
12304: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12305: LD_EXP 23
12309: PUSH
12310: LD_EXP 54
12314: AND
12315: IFFALSE 12455
12317: GO 12319
12319: DISABLE
12320: LD_INT 0
12322: PPUSH
12323: PPUSH
// begin ToLua ( displayPowell(); ) ;
12324: LD_STRING displayPowell();
12326: PPUSH
12327: CALL_OW 559
// uc_side := 0 ;
12331: LD_ADDR_OWVAR 20
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// uc_nation := 2 ;
12339: LD_ADDR_OWVAR 21
12343: PUSH
12344: LD_INT 2
12346: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12347: LD_ADDR_OWVAR 37
12351: PUSH
12352: LD_INT 14
12354: ST_TO_ADDR
// vc_engine := engine_siberite ;
12355: LD_ADDR_OWVAR 39
12359: PUSH
12360: LD_INT 3
12362: ST_TO_ADDR
// vc_control := control_apeman ;
12363: LD_ADDR_OWVAR 38
12367: PUSH
12368: LD_INT 5
12370: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12371: LD_ADDR_OWVAR 40
12375: PUSH
12376: LD_INT 29
12378: ST_TO_ADDR
// un := CreateVehicle ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: CALL_OW 45
12388: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12389: LD_VAR 0 2
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12401: LD_INT 35
12403: PPUSH
12404: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12408: LD_VAR 0 2
12412: PPUSH
12413: LD_INT 22
12415: PUSH
12416: LD_OWVAR 2
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PPUSH
12430: LD_VAR 0 2
12434: PPUSH
12435: CALL_OW 74
12439: PPUSH
12440: CALL_OW 115
// until IsDead ( un ) ;
12444: LD_VAR 0 2
12448: PPUSH
12449: CALL_OW 301
12453: IFFALSE 12401
// end ;
12455: PPOPN 2
12457: END
// every 0 0$1 trigger StreamModeActive and sStu do
12458: LD_EXP 23
12462: PUSH
12463: LD_EXP 62
12467: AND
12468: IFFALSE 12484
12470: GO 12472
12472: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12473: LD_STRING displayStucuk();
12475: PPUSH
12476: CALL_OW 559
// ResetFog ;
12480: CALL_OW 335
// end ;
12484: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12485: LD_EXP 23
12489: PUSH
12490: LD_EXP 55
12494: AND
12495: IFFALSE 12636
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12504: LD_ADDR_VAR 0 2
12508: PUSH
12509: LD_INT 22
12511: PUSH
12512: LD_OWVAR 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 21
12523: PUSH
12524: LD_INT 1
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: ST_TO_ADDR
// if not tmp then
12540: LD_VAR 0 2
12544: NOT
12545: IFFALSE 12549
// exit ;
12547: GO 12636
// un := tmp [ rand ( 1 , tmp ) ] ;
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_VAR 0 2
12558: PUSH
12559: LD_INT 1
12561: PPUSH
12562: LD_VAR 0 2
12566: PPUSH
12567: CALL_OW 12
12571: ARRAY
12572: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12573: LD_VAR 0 1
12577: PPUSH
12578: LD_INT 0
12580: PPUSH
12581: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12585: LD_VAR 0 1
12589: PPUSH
12590: LD_OWVAR 3
12594: PUSH
12595: LD_VAR 0 1
12599: DIFF
12600: PPUSH
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 74
12610: PPUSH
12611: CALL_OW 115
// wait ( 0 0$20 ) ;
12615: LD_INT 700
12617: PPUSH
12618: CALL_OW 67
// SetSide ( un , your_side ) ;
12622: LD_VAR 0 1
12626: PPUSH
12627: LD_OWVAR 2
12631: PPUSH
12632: CALL_OW 235
// end ;
12636: PPOPN 2
12638: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12639: LD_EXP 23
12643: PUSH
12644: LD_EXP 56
12648: AND
12649: IFFALSE 12755
12651: GO 12653
12653: DISABLE
12654: LD_INT 0
12656: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_INT 22
12664: PUSH
12665: LD_OWVAR 2
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 30
12679: PUSH
12680: LD_INT 0
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 30
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: ST_TO_ADDR
// if not depot then
12711: LD_VAR 0 1
12715: NOT
12716: IFFALSE 12720
// exit ;
12718: GO 12755
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12720: LD_VAR 0 1
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: PPUSH
12729: CALL_OW 250
12733: PPUSH
12734: LD_VAR 0 1
12738: PUSH
12739: LD_INT 1
12741: ARRAY
12742: PPUSH
12743: CALL_OW 251
12747: PPUSH
12748: LD_INT 70
12750: PPUSH
12751: CALL_OW 495
// end ;
12755: PPOPN 1
12757: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12758: LD_EXP 23
12762: PUSH
12763: LD_EXP 57
12767: AND
12768: IFFALSE 12979
12770: GO 12772
12772: DISABLE
12773: LD_INT 0
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12780: LD_ADDR_VAR 0 5
12784: PUSH
12785: LD_INT 22
12787: PUSH
12788: LD_OWVAR 2
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 21
12799: PUSH
12800: LD_INT 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: ST_TO_ADDR
// if not tmp then
12816: LD_VAR 0 5
12820: NOT
12821: IFFALSE 12825
// exit ;
12823: GO 12979
// for i in tmp do
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_VAR 0 5
12834: PUSH
12835: FOR_IN
12836: IFFALSE 12977
// begin d := rand ( 0 , 5 ) ;
12838: LD_ADDR_VAR 0 4
12842: PUSH
12843: LD_INT 0
12845: PPUSH
12846: LD_INT 5
12848: PPUSH
12849: CALL_OW 12
12853: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12854: LD_ADDR_VAR 0 2
12858: PUSH
12859: LD_VAR 0 1
12863: PPUSH
12864: CALL_OW 250
12868: PPUSH
12869: LD_VAR 0 4
12873: PPUSH
12874: LD_INT 3
12876: PPUSH
12877: LD_INT 12
12879: PPUSH
12880: CALL_OW 12
12884: PPUSH
12885: CALL_OW 272
12889: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_VAR 0 1
12899: PPUSH
12900: CALL_OW 251
12904: PPUSH
12905: LD_VAR 0 4
12909: PPUSH
12910: LD_INT 3
12912: PPUSH
12913: LD_INT 12
12915: PPUSH
12916: CALL_OW 12
12920: PPUSH
12921: CALL_OW 273
12925: ST_TO_ADDR
// if ValidHex ( x , y ) then
12926: LD_VAR 0 2
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: CALL_OW 488
12940: IFFALSE 12975
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12942: LD_VAR 0 1
12946: PPUSH
12947: LD_VAR 0 2
12951: PPUSH
12952: LD_VAR 0 3
12956: PPUSH
12957: LD_INT 3
12959: PPUSH
12960: LD_INT 6
12962: PPUSH
12963: CALL_OW 12
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: CALL_OW 483
// end ;
12975: GO 12835
12977: POP
12978: POP
// end ;
12979: PPOPN 5
12981: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12982: LD_EXP 23
12986: PUSH
12987: LD_EXP 58
12991: AND
12992: IFFALSE 13086
12994: GO 12996
12996: DISABLE
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13001: LD_ADDR_VAR 0 2
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_OWVAR 2
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 32
13020: PUSH
13021: LD_INT 1
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 21
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: ST_TO_ADDR
// if not tmp then
13048: LD_VAR 0 2
13052: NOT
13053: IFFALSE 13057
// exit ;
13055: GO 13086
// for i in tmp do
13057: LD_ADDR_VAR 0 1
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13084
// SetFuel ( i , 0 ) ;
13070: LD_VAR 0 1
13074: PPUSH
13075: LD_INT 0
13077: PPUSH
13078: CALL_OW 240
13082: GO 13067
13084: POP
13085: POP
// end ;
13086: PPOPN 2
13088: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13089: LD_EXP 23
13093: PUSH
13094: LD_EXP 59
13098: AND
13099: IFFALSE 13165
13101: GO 13103
13103: DISABLE
13104: LD_INT 0
13106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13107: LD_ADDR_VAR 0 1
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_OWVAR 2
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 30
13126: PUSH
13127: LD_INT 29
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PPUSH
13138: CALL_OW 69
13142: ST_TO_ADDR
// if not tmp then
13143: LD_VAR 0 1
13147: NOT
13148: IFFALSE 13152
// exit ;
13150: GO 13165
// DestroyUnit ( tmp [ 1 ] ) ;
13152: LD_VAR 0 1
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PPUSH
13161: CALL_OW 65
// end ;
13165: PPOPN 1
13167: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13168: LD_EXP 23
13172: PUSH
13173: LD_EXP 61
13177: AND
13178: IFFALSE 13307
13180: GO 13182
13182: DISABLE
13183: LD_INT 0
13185: PPUSH
// begin uc_side := 0 ;
13186: LD_ADDR_OWVAR 20
13190: PUSH
13191: LD_INT 0
13193: ST_TO_ADDR
// uc_nation := nation_arabian ;
13194: LD_ADDR_OWVAR 21
13198: PUSH
13199: LD_INT 2
13201: ST_TO_ADDR
// hc_gallery :=  ;
13202: LD_ADDR_OWVAR 33
13206: PUSH
13207: LD_STRING 
13209: ST_TO_ADDR
// hc_name :=  ;
13210: LD_ADDR_OWVAR 26
13214: PUSH
13215: LD_STRING 
13217: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13218: LD_INT 1
13220: PPUSH
13221: LD_INT 11
13223: PPUSH
13224: LD_INT 10
13226: PPUSH
13227: CALL_OW 380
// un := CreateHuman ;
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: CALL_OW 44
13240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13241: LD_VAR 0 1
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13253: LD_INT 35
13255: PPUSH
13256: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13260: LD_VAR 0 1
13264: PPUSH
13265: LD_INT 22
13267: PUSH
13268: LD_OWVAR 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: PPUSH
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 74
13291: PPUSH
13292: CALL_OW 115
// until IsDead ( un ) ;
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 301
13305: IFFALSE 13253
// end ;
13307: PPOPN 1
13309: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13310: LD_EXP 23
13314: PUSH
13315: LD_EXP 63
13319: AND
13320: IFFALSE 13332
13322: GO 13324
13324: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13325: LD_STRING earthquake(getX(game), 0, 32)
13327: PPUSH
13328: CALL_OW 559
13332: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13333: LD_EXP 23
13337: PUSH
13338: LD_EXP 64
13342: AND
13343: IFFALSE 13434
13345: GO 13347
13347: DISABLE
13348: LD_INT 0
13350: PPUSH
// begin enable ;
13351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13352: LD_ADDR_VAR 0 1
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_OWVAR 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 21
13371: PUSH
13372: LD_INT 2
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 33
13381: PUSH
13382: LD_INT 3
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: PPUSH
13394: CALL_OW 69
13398: ST_TO_ADDR
// if not tmp then
13399: LD_VAR 0 1
13403: NOT
13404: IFFALSE 13408
// exit ;
13406: GO 13434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13408: LD_VAR 0 1
13412: PUSH
13413: LD_INT 1
13415: PPUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 12
13425: ARRAY
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 234
// end ;
13434: PPOPN 1
13436: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13437: LD_EXP 23
13441: PUSH
13442: LD_EXP 65
13446: AND
13447: IFFALSE 13588
13449: GO 13451
13451: DISABLE
13452: LD_INT 0
13454: PPUSH
13455: PPUSH
13456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13457: LD_ADDR_VAR 0 3
13461: PUSH
13462: LD_INT 22
13464: PUSH
13465: LD_OWVAR 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PPUSH
13488: CALL_OW 69
13492: ST_TO_ADDR
// if not tmp then
13493: LD_VAR 0 3
13497: NOT
13498: IFFALSE 13502
// exit ;
13500: GO 13588
// un := tmp [ rand ( 1 , tmp ) ] ;
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_VAR 0 3
13511: PUSH
13512: LD_INT 1
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: CALL_OW 12
13524: ARRAY
13525: ST_TO_ADDR
// if Crawls ( un ) then
13526: LD_VAR 0 2
13530: PPUSH
13531: CALL_OW 318
13535: IFFALSE 13546
// ComWalk ( un ) ;
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 9
13553: PPUSH
13554: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13558: LD_INT 28
13560: PPUSH
13561: LD_OWVAR 2
13565: PPUSH
13566: LD_INT 2
13568: PPUSH
13569: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13573: LD_INT 29
13575: PPUSH
13576: LD_OWVAR 2
13580: PPUSH
13581: LD_INT 2
13583: PPUSH
13584: CALL_OW 322
// end ;
13588: PPOPN 3
13590: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13591: LD_EXP 23
13595: PUSH
13596: LD_EXP 66
13600: AND
13601: IFFALSE 13712
13603: GO 13605
13605: DISABLE
13606: LD_INT 0
13608: PPUSH
13609: PPUSH
13610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13611: LD_ADDR_VAR 0 3
13615: PUSH
13616: LD_INT 22
13618: PUSH
13619: LD_OWVAR 2
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 1
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PPUSH
13642: CALL_OW 69
13646: ST_TO_ADDR
// if not tmp then
13647: LD_VAR 0 3
13651: NOT
13652: IFFALSE 13656
// exit ;
13654: GO 13712
// un := tmp [ rand ( 1 , tmp ) ] ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 1
13668: PPUSH
13669: LD_VAR 0 3
13673: PPUSH
13674: CALL_OW 12
13678: ARRAY
13679: ST_TO_ADDR
// if Crawls ( un ) then
13680: LD_VAR 0 2
13684: PPUSH
13685: CALL_OW 318
13689: IFFALSE 13700
// ComWalk ( un ) ;
13691: LD_VAR 0 2
13695: PPUSH
13696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13700: LD_VAR 0 2
13704: PPUSH
13705: LD_INT 8
13707: PPUSH
13708: CALL_OW 336
// end ;
13712: PPOPN 3
13714: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13715: LD_EXP 23
13719: PUSH
13720: LD_EXP 67
13724: AND
13725: IFFALSE 13869
13727: GO 13729
13729: DISABLE
13730: LD_INT 0
13732: PPUSH
13733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13734: LD_ADDR_VAR 0 2
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_OWVAR 2
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 21
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 2
13763: PUSH
13764: LD_INT 34
13766: PUSH
13767: LD_INT 12
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 34
13776: PUSH
13777: LD_INT 51
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 32
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PPUSH
13805: CALL_OW 69
13809: ST_TO_ADDR
// if not tmp then
13810: LD_VAR 0 2
13814: NOT
13815: IFFALSE 13819
// exit ;
13817: GO 13869
// for i in tmp do
13819: LD_ADDR_VAR 0 1
13823: PUSH
13824: LD_VAR 0 2
13828: PUSH
13829: FOR_IN
13830: IFFALSE 13867
// if GetCargo ( i , mat_artifact ) = 0 then
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_INT 4
13839: PPUSH
13840: CALL_OW 289
13844: PUSH
13845: LD_INT 0
13847: EQUAL
13848: IFFALSE 13865
// SetCargo ( i , mat_siberit , 100 ) ;
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 3
13857: PPUSH
13858: LD_INT 100
13860: PPUSH
13861: CALL_OW 290
13865: GO 13829
13867: POP
13868: POP
// end ;
13869: PPOPN 2
13871: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13872: LD_EXP 23
13876: PUSH
13877: LD_EXP 68
13881: AND
13882: IFFALSE 14065
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_OWVAR 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PPUSH
13908: CALL_OW 69
13912: ST_TO_ADDR
// if not tmp then
13913: LD_VAR 0 2
13917: NOT
13918: IFFALSE 13922
// exit ;
13920: GO 14065
// for i := 1 to 2 do
13922: LD_ADDR_VAR 0 1
13926: PUSH
13927: DOUBLE
13928: LD_INT 1
13930: DEC
13931: ST_TO_ADDR
13932: LD_INT 2
13934: PUSH
13935: FOR_TO
13936: IFFALSE 14063
// begin uc_side := your_side ;
13938: LD_ADDR_OWVAR 20
13942: PUSH
13943: LD_OWVAR 2
13947: ST_TO_ADDR
// uc_nation := nation_american ;
13948: LD_ADDR_OWVAR 21
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// vc_chassis := us_morphling ;
13956: LD_ADDR_OWVAR 37
13960: PUSH
13961: LD_INT 5
13963: ST_TO_ADDR
// vc_engine := engine_siberite ;
13964: LD_ADDR_OWVAR 39
13968: PUSH
13969: LD_INT 3
13971: ST_TO_ADDR
// vc_control := control_computer ;
13972: LD_ADDR_OWVAR 38
13976: PUSH
13977: LD_INT 3
13979: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13980: LD_ADDR_OWVAR 40
13984: PUSH
13985: LD_INT 10
13987: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: PPUSH
13997: CALL_OW 310
14001: NOT
14002: IFFALSE 14049
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14004: CALL_OW 45
14008: PPUSH
14009: LD_VAR 0 2
14013: PUSH
14014: LD_INT 1
14016: ARRAY
14017: PPUSH
14018: CALL_OW 250
14022: PPUSH
14023: LD_VAR 0 2
14027: PUSH
14028: LD_INT 1
14030: ARRAY
14031: PPUSH
14032: CALL_OW 251
14036: PPUSH
14037: LD_INT 12
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: CALL_OW 50
14047: GO 14061
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14049: CALL_OW 45
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 51
// end ;
14061: GO 13935
14063: POP
14064: POP
// end ;
14065: PPOPN 2
14067: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14068: LD_EXP 23
14072: PUSH
14073: LD_EXP 69
14077: AND
14078: IFFALSE 14300
14080: GO 14082
14082: DISABLE
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14091: LD_ADDR_VAR 0 6
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_OWVAR 2
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 21
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 3
14120: PUSH
14121: LD_INT 23
14123: PUSH
14124: LD_INT 0
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: ST_TO_ADDR
// if not tmp then
14145: LD_VAR 0 6
14149: NOT
14150: IFFALSE 14154
// exit ;
14152: GO 14300
// s1 := rand ( 1 , 4 ) ;
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: LD_INT 1
14161: PPUSH
14162: LD_INT 4
14164: PPUSH
14165: CALL_OW 12
14169: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14170: LD_ADDR_VAR 0 4
14174: PUSH
14175: LD_VAR 0 6
14179: PUSH
14180: LD_INT 1
14182: ARRAY
14183: PPUSH
14184: LD_VAR 0 2
14188: PPUSH
14189: CALL_OW 259
14193: ST_TO_ADDR
// if s1 = 1 then
14194: LD_VAR 0 2
14198: PUSH
14199: LD_INT 1
14201: EQUAL
14202: IFFALSE 14222
// s2 := rand ( 2 , 4 ) else
14204: LD_ADDR_VAR 0 3
14208: PUSH
14209: LD_INT 2
14211: PPUSH
14212: LD_INT 4
14214: PPUSH
14215: CALL_OW 12
14219: ST_TO_ADDR
14220: GO 14230
// s2 := 1 ;
14222: LD_ADDR_VAR 0 3
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14230: LD_ADDR_VAR 0 5
14234: PUSH
14235: LD_VAR 0 6
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 259
14253: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14254: LD_VAR 0 6
14258: PUSH
14259: LD_INT 1
14261: ARRAY
14262: PPUSH
14263: LD_VAR 0 2
14267: PPUSH
14268: LD_VAR 0 5
14272: PPUSH
14273: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14277: LD_VAR 0 6
14281: PUSH
14282: LD_INT 1
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_VAR 0 4
14295: PPUSH
14296: CALL_OW 237
// end ;
14300: PPOPN 6
14302: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14303: LD_EXP 23
14307: PUSH
14308: LD_EXP 70
14312: AND
14313: IFFALSE 14392
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_OWVAR 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 30
14340: PUSH
14341: LD_INT 3
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 1
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14366: LD_VAR 0 1
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 234
// end ;
14392: PPOPN 1
14394: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14395: LD_EXP 23
14399: PUSH
14400: LD_EXP 71
14404: AND
14405: IFFALSE 14517
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
14413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14414: LD_ADDR_VAR 0 2
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_OWVAR 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 2
14433: PUSH
14434: LD_INT 30
14436: PUSH
14437: LD_INT 27
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 30
14446: PUSH
14447: LD_INT 26
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 28
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 69
14478: ST_TO_ADDR
// if not tmp then
14479: LD_VAR 0 2
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14517
// for i in tmp do
14488: LD_ADDR_VAR 0 1
14492: PUSH
14493: LD_VAR 0 2
14497: PUSH
14498: FOR_IN
14499: IFFALSE 14515
// SetLives ( i , 1 ) ;
14501: LD_VAR 0 1
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 234
14513: GO 14498
14515: POP
14516: POP
// end ;
14517: PPOPN 2
14519: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14520: LD_EXP 23
14524: PUSH
14525: LD_EXP 72
14529: AND
14530: IFFALSE 14804
14532: GO 14534
14534: DISABLE
14535: LD_INT 0
14537: PPUSH
14538: PPUSH
14539: PPUSH
// begin i := rand ( 1 , 7 ) ;
14540: LD_ADDR_VAR 0 1
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_INT 7
14550: PPUSH
14551: CALL_OW 12
14555: ST_TO_ADDR
// case i of 1 :
14556: LD_VAR 0 1
14560: PUSH
14561: LD_INT 1
14563: DOUBLE
14564: EQUAL
14565: IFTRUE 14569
14567: GO 14579
14569: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14570: LD_STRING earthquake(getX(game), 0, 32)
14572: PPUSH
14573: CALL_OW 559
14577: GO 14804
14579: LD_INT 2
14581: DOUBLE
14582: EQUAL
14583: IFTRUE 14587
14585: GO 14601
14587: POP
// begin ToLua ( displayStucuk(); ) ;
14588: LD_STRING displayStucuk();
14590: PPUSH
14591: CALL_OW 559
// ResetFog ;
14595: CALL_OW 335
// end ; 3 :
14599: GO 14804
14601: LD_INT 3
14603: DOUBLE
14604: EQUAL
14605: IFTRUE 14609
14607: GO 14713
14609: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 22
14617: PUSH
14618: LD_OWVAR 2
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 25
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL_OW 69
14645: ST_TO_ADDR
// if not tmp then
14646: LD_VAR 0 2
14650: NOT
14651: IFFALSE 14655
// exit ;
14653: GO 14804
// un := tmp [ rand ( 1 , tmp ) ] ;
14655: LD_ADDR_VAR 0 3
14659: PUSH
14660: LD_VAR 0 2
14664: PUSH
14665: LD_INT 1
14667: PPUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: CALL_OW 12
14677: ARRAY
14678: ST_TO_ADDR
// if Crawls ( un ) then
14679: LD_VAR 0 3
14683: PPUSH
14684: CALL_OW 318
14688: IFFALSE 14699
// ComWalk ( un ) ;
14690: LD_VAR 0 3
14694: PPUSH
14695: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14699: LD_VAR 0 3
14703: PPUSH
14704: LD_INT 8
14706: PPUSH
14707: CALL_OW 336
// end ; 4 :
14711: GO 14804
14713: LD_INT 4
14715: DOUBLE
14716: EQUAL
14717: IFTRUE 14721
14719: GO 14782
14721: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_OWVAR 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 30
14741: PUSH
14742: LD_INT 29
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: ST_TO_ADDR
// if not tmp then
14758: LD_VAR 0 2
14762: NOT
14763: IFFALSE 14767
// exit ;
14765: GO 14804
// DestroyUnit ( tmp [ 1 ] ) ;
14767: LD_VAR 0 2
14771: PUSH
14772: LD_INT 1
14774: ARRAY
14775: PPUSH
14776: CALL_OW 65
// end ; 5 .. 7 :
14780: GO 14804
14782: LD_INT 5
14784: DOUBLE
14785: GREATEREQUAL
14786: IFFALSE 14794
14788: LD_INT 7
14790: DOUBLE
14791: LESSEQUAL
14792: IFTRUE 14796
14794: GO 14803
14796: POP
// StreamSibBomb ; end ;
14797: CALL 11054 0 0
14801: GO 14804
14803: POP
// end ;
14804: PPOPN 3
14806: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14807: LD_EXP 23
14811: PUSH
14812: LD_EXP 73
14816: AND
14817: IFFALSE 14973
14819: GO 14821
14821: DISABLE
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
14826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14827: LD_ADDR_VAR 0 2
14831: PUSH
14832: LD_INT 81
14834: PUSH
14835: LD_OWVAR 2
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 21
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 21
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PPUSH
14876: CALL_OW 69
14880: ST_TO_ADDR
// if not tmp then
14881: LD_VAR 0 2
14885: NOT
14886: IFFALSE 14890
// exit ;
14888: GO 14973
// p := 0 ;
14890: LD_ADDR_VAR 0 3
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14898: LD_INT 35
14900: PPUSH
14901: CALL_OW 67
// p := p + 1 ;
14905: LD_ADDR_VAR 0 3
14909: PUSH
14910: LD_VAR 0 3
14914: PUSH
14915: LD_INT 1
14917: PLUS
14918: ST_TO_ADDR
// for i in tmp do
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_VAR 0 2
14928: PUSH
14929: FOR_IN
14930: IFFALSE 14961
// if GetLives ( i ) < 1000 then
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 256
14941: PUSH
14942: LD_INT 1000
14944: LESS
14945: IFFALSE 14959
// SetLives ( i , 1000 ) ;
14947: LD_VAR 0 1
14951: PPUSH
14952: LD_INT 1000
14954: PPUSH
14955: CALL_OW 234
14959: GO 14929
14961: POP
14962: POP
// until p > 20 ;
14963: LD_VAR 0 3
14967: PUSH
14968: LD_INT 20
14970: GREATER
14971: IFFALSE 14898
// end ;
14973: PPOPN 3
14975: END
// every 0 0$1 trigger StreamModeActive and sTime do
14976: LD_EXP 23
14980: PUSH
14981: LD_EXP 74
14985: AND
14986: IFFALSE 15021
14988: GO 14990
14990: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14991: LD_INT 28
14993: PPUSH
14994: LD_OWVAR 2
14998: PPUSH
14999: LD_INT 2
15001: PPUSH
15002: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15006: LD_INT 30
15008: PPUSH
15009: LD_OWVAR 2
15013: PPUSH
15014: LD_INT 2
15016: PPUSH
15017: CALL_OW 322
// end ;
15021: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15022: LD_EXP 23
15026: PUSH
15027: LD_EXP 75
15031: AND
15032: IFFALSE 15153
15034: GO 15036
15036: DISABLE
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15041: LD_ADDR_VAR 0 2
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_OWVAR 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 21
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: LD_INT 23
15073: PUSH
15074: LD_INT 0
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: ST_TO_ADDR
// if not tmp then
15095: LD_VAR 0 2
15099: NOT
15100: IFFALSE 15104
// exit ;
15102: GO 15153
// for i in tmp do
15104: LD_ADDR_VAR 0 1
15108: PUSH
15109: LD_VAR 0 2
15113: PUSH
15114: FOR_IN
15115: IFFALSE 15151
// begin if Crawls ( i ) then
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 318
15126: IFFALSE 15137
// ComWalk ( i ) ;
15128: LD_VAR 0 1
15132: PPUSH
15133: CALL_OW 138
// SetClass ( i , 2 ) ;
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_INT 2
15144: PPUSH
15145: CALL_OW 336
// end ;
15149: GO 15114
15151: POP
15152: POP
// end ;
15153: PPOPN 2
15155: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15156: LD_EXP 23
15160: PUSH
15161: LD_EXP 76
15165: AND
15166: IFFALSE 15447
15168: GO 15170
15170: DISABLE
15171: LD_INT 0
15173: PPUSH
15174: PPUSH
15175: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15176: LD_OWVAR 2
15180: PPUSH
15181: LD_INT 9
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15194: LD_INT 9
15196: PPUSH
15197: LD_OWVAR 2
15201: PPUSH
15202: CALL_OW 343
// uc_side := 9 ;
15206: LD_ADDR_OWVAR 20
15210: PUSH
15211: LD_INT 9
15213: ST_TO_ADDR
// uc_nation := 2 ;
15214: LD_ADDR_OWVAR 21
15218: PUSH
15219: LD_INT 2
15221: ST_TO_ADDR
// hc_name := Dark Warrior ;
15222: LD_ADDR_OWVAR 26
15226: PUSH
15227: LD_STRING Dark Warrior
15229: ST_TO_ADDR
// hc_gallery :=  ;
15230: LD_ADDR_OWVAR 33
15234: PUSH
15235: LD_STRING 
15237: ST_TO_ADDR
// hc_noskilllimit := true ;
15238: LD_ADDR_OWVAR 76
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15246: LD_ADDR_OWVAR 31
15250: PUSH
15251: LD_INT 30
15253: PUSH
15254: LD_INT 30
15256: PUSH
15257: LD_INT 30
15259: PUSH
15260: LD_INT 30
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: ST_TO_ADDR
// un := CreateHuman ;
15269: LD_ADDR_VAR 0 3
15273: PUSH
15274: CALL_OW 44
15278: ST_TO_ADDR
// hc_noskilllimit := false ;
15279: LD_ADDR_OWVAR 76
15283: PUSH
15284: LD_INT 0
15286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15287: LD_VAR 0 3
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 51
// p := 0 ;
15299: LD_ADDR_VAR 0 2
15303: PUSH
15304: LD_INT 0
15306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15307: LD_INT 35
15309: PPUSH
15310: CALL_OW 67
// p := p + 1 ;
15314: LD_ADDR_VAR 0 2
15318: PUSH
15319: LD_VAR 0 2
15323: PUSH
15324: LD_INT 1
15326: PLUS
15327: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15328: LD_VAR 0 3
15332: PPUSH
15333: CALL_OW 256
15337: PUSH
15338: LD_INT 1000
15340: LESS
15341: IFFALSE 15355
// SetLives ( un , 1000 ) ;
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1000
15350: PPUSH
15351: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_INT 81
15362: PUSH
15363: LD_OWVAR 2
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 91
15374: PUSH
15375: LD_VAR 0 3
15379: PUSH
15380: LD_INT 30
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PPUSH
15392: CALL_OW 69
15396: PPUSH
15397: LD_VAR 0 3
15401: PPUSH
15402: CALL_OW 74
15406: PPUSH
15407: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15411: LD_VAR 0 2
15415: PUSH
15416: LD_INT 60
15418: GREATER
15419: PUSH
15420: LD_VAR 0 3
15424: PPUSH
15425: CALL_OW 301
15429: OR
15430: IFFALSE 15307
// if un then
15432: LD_VAR 0 3
15436: IFFALSE 15447
// RemoveUnit ( un ) ;
15438: LD_VAR 0 3
15442: PPUSH
15443: CALL_OW 64
// end ;
15447: PPOPN 3
15449: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15450: LD_INT 0
15452: PPUSH
// case cmd of 301 :
15453: LD_VAR 0 1
15457: PUSH
15458: LD_INT 301
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15498
15466: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15467: LD_VAR 0 6
15471: PPUSH
15472: LD_VAR 0 7
15476: PPUSH
15477: LD_VAR 0 8
15481: PPUSH
15482: LD_VAR 0 4
15486: PPUSH
15487: LD_VAR 0 5
15491: PPUSH
15492: CALL 16699 0 5
15496: GO 15619
15498: LD_INT 302
15500: DOUBLE
15501: EQUAL
15502: IFTRUE 15506
15504: GO 15543
15506: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15507: LD_VAR 0 6
15511: PPUSH
15512: LD_VAR 0 7
15516: PPUSH
15517: LD_VAR 0 8
15521: PPUSH
15522: LD_VAR 0 9
15526: PPUSH
15527: LD_VAR 0 4
15531: PPUSH
15532: LD_VAR 0 5
15536: PPUSH
15537: CALL 16790 0 6
15541: GO 15619
15543: LD_INT 303
15545: DOUBLE
15546: EQUAL
15547: IFTRUE 15551
15549: GO 15588
15551: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15552: LD_VAR 0 6
15556: PPUSH
15557: LD_VAR 0 7
15561: PPUSH
15562: LD_VAR 0 8
15566: PPUSH
15567: LD_VAR 0 9
15571: PPUSH
15572: LD_VAR 0 4
15576: PPUSH
15577: LD_VAR 0 5
15581: PPUSH
15582: CALL 15624 0 6
15586: GO 15619
15588: LD_INT 304
15590: DOUBLE
15591: EQUAL
15592: IFTRUE 15596
15594: GO 15618
15596: POP
// hHackTeleport ( unit , x , y ) ; end ;
15597: LD_VAR 0 2
15601: PPUSH
15602: LD_VAR 0 4
15606: PPUSH
15607: LD_VAR 0 5
15611: PPUSH
15612: CALL 17383 0 3
15616: GO 15619
15618: POP
// end ;
15619: LD_VAR 0 12
15623: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15624: LD_INT 0
15626: PPUSH
15627: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15628: LD_VAR 0 1
15632: PUSH
15633: LD_INT 1
15635: LESS
15636: PUSH
15637: LD_VAR 0 1
15641: PUSH
15642: LD_INT 3
15644: GREATER
15645: OR
15646: PUSH
15647: LD_VAR 0 5
15651: PPUSH
15652: LD_VAR 0 6
15656: PPUSH
15657: CALL_OW 428
15661: OR
15662: IFFALSE 15666
// exit ;
15664: GO 16386
// uc_side := your_side ;
15666: LD_ADDR_OWVAR 20
15670: PUSH
15671: LD_OWVAR 2
15675: ST_TO_ADDR
// uc_nation := nation ;
15676: LD_ADDR_OWVAR 21
15680: PUSH
15681: LD_VAR 0 1
15685: ST_TO_ADDR
// bc_level = 1 ;
15686: LD_ADDR_OWVAR 43
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// case btype of 1 :
15694: LD_VAR 0 2
15698: PUSH
15699: LD_INT 1
15701: DOUBLE
15702: EQUAL
15703: IFTRUE 15707
15705: GO 15718
15707: POP
// bc_type := b_depot ; 2 :
15708: LD_ADDR_OWVAR 42
15712: PUSH
15713: LD_INT 0
15715: ST_TO_ADDR
15716: GO 16330
15718: LD_INT 2
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15737
15726: POP
// bc_type := b_warehouse ; 3 :
15727: LD_ADDR_OWVAR 42
15731: PUSH
15732: LD_INT 1
15734: ST_TO_ADDR
15735: GO 16330
15737: LD_INT 3
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15756
15745: POP
// bc_type := b_lab ; 4 .. 9 :
15746: LD_ADDR_OWVAR 42
15750: PUSH
15751: LD_INT 6
15753: ST_TO_ADDR
15754: GO 16330
15756: LD_INT 4
15758: DOUBLE
15759: GREATEREQUAL
15760: IFFALSE 15768
15762: LD_INT 9
15764: DOUBLE
15765: LESSEQUAL
15766: IFTRUE 15770
15768: GO 15822
15770: POP
// begin bc_type := b_lab_half ;
15771: LD_ADDR_OWVAR 42
15775: PUSH
15776: LD_INT 7
15778: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15779: LD_ADDR_OWVAR 44
15783: PUSH
15784: LD_INT 10
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 12
15792: PUSH
15793: LD_INT 15
15795: PUSH
15796: LD_INT 14
15798: PUSH
15799: LD_INT 13
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: LD_VAR 0 2
15814: PUSH
15815: LD_INT 3
15817: MINUS
15818: ARRAY
15819: ST_TO_ADDR
// end ; 10 .. 13 :
15820: GO 16330
15822: LD_INT 10
15824: DOUBLE
15825: GREATEREQUAL
15826: IFFALSE 15834
15828: LD_INT 13
15830: DOUBLE
15831: LESSEQUAL
15832: IFTRUE 15836
15834: GO 15913
15836: POP
// begin bc_type := b_lab_full ;
15837: LD_ADDR_OWVAR 42
15841: PUSH
15842: LD_INT 8
15844: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15845: LD_ADDR_OWVAR 44
15849: PUSH
15850: LD_INT 10
15852: PUSH
15853: LD_INT 12
15855: PUSH
15856: LD_INT 14
15858: PUSH
15859: LD_INT 13
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: PUSH
15868: LD_VAR 0 2
15872: PUSH
15873: LD_INT 9
15875: MINUS
15876: ARRAY
15877: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15878: LD_ADDR_OWVAR 45
15882: PUSH
15883: LD_INT 11
15885: PUSH
15886: LD_INT 15
15888: PUSH
15889: LD_INT 12
15891: PUSH
15892: LD_INT 15
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: PUSH
15901: LD_VAR 0 2
15905: PUSH
15906: LD_INT 9
15908: MINUS
15909: ARRAY
15910: ST_TO_ADDR
// end ; 14 :
15911: GO 16330
15913: LD_INT 14
15915: DOUBLE
15916: EQUAL
15917: IFTRUE 15921
15919: GO 15932
15921: POP
// bc_type := b_workshop ; 15 :
15922: LD_ADDR_OWVAR 42
15926: PUSH
15927: LD_INT 2
15929: ST_TO_ADDR
15930: GO 16330
15932: LD_INT 15
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15951
15940: POP
// bc_type := b_factory ; 16 :
15941: LD_ADDR_OWVAR 42
15945: PUSH
15946: LD_INT 3
15948: ST_TO_ADDR
15949: GO 16330
15951: LD_INT 16
15953: DOUBLE
15954: EQUAL
15955: IFTRUE 15959
15957: GO 15970
15959: POP
// bc_type := b_ext_gun ; 17 :
15960: LD_ADDR_OWVAR 42
15964: PUSH
15965: LD_INT 17
15967: ST_TO_ADDR
15968: GO 16330
15970: LD_INT 17
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 16006
15978: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15979: LD_ADDR_OWVAR 42
15983: PUSH
15984: LD_INT 19
15986: PUSH
15987: LD_INT 23
15989: PUSH
15990: LD_INT 19
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: LIST
15997: PUSH
15998: LD_VAR 0 1
16002: ARRAY
16003: ST_TO_ADDR
16004: GO 16330
16006: LD_INT 18
16008: DOUBLE
16009: EQUAL
16010: IFTRUE 16014
16012: GO 16025
16014: POP
// bc_type := b_ext_radar ; 19 :
16015: LD_ADDR_OWVAR 42
16019: PUSH
16020: LD_INT 20
16022: ST_TO_ADDR
16023: GO 16330
16025: LD_INT 19
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16044
16033: POP
// bc_type := b_ext_radio ; 20 :
16034: LD_ADDR_OWVAR 42
16038: PUSH
16039: LD_INT 22
16041: ST_TO_ADDR
16042: GO 16330
16044: LD_INT 20
16046: DOUBLE
16047: EQUAL
16048: IFTRUE 16052
16050: GO 16063
16052: POP
// bc_type := b_ext_siberium ; 21 :
16053: LD_ADDR_OWVAR 42
16057: PUSH
16058: LD_INT 21
16060: ST_TO_ADDR
16061: GO 16330
16063: LD_INT 21
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16082
16071: POP
// bc_type := b_ext_computer ; 22 :
16072: LD_ADDR_OWVAR 42
16076: PUSH
16077: LD_INT 24
16079: ST_TO_ADDR
16080: GO 16330
16082: LD_INT 22
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16101
16090: POP
// bc_type := b_ext_track ; 23 :
16091: LD_ADDR_OWVAR 42
16095: PUSH
16096: LD_INT 16
16098: ST_TO_ADDR
16099: GO 16330
16101: LD_INT 23
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16120
16109: POP
// bc_type := b_ext_laser ; 24 :
16110: LD_ADDR_OWVAR 42
16114: PUSH
16115: LD_INT 25
16117: ST_TO_ADDR
16118: GO 16330
16120: LD_INT 24
16122: DOUBLE
16123: EQUAL
16124: IFTRUE 16128
16126: GO 16139
16128: POP
// bc_type := b_control_tower ; 25 :
16129: LD_ADDR_OWVAR 42
16133: PUSH
16134: LD_INT 36
16136: ST_TO_ADDR
16137: GO 16330
16139: LD_INT 25
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16158
16147: POP
// bc_type := b_breastwork ; 26 :
16148: LD_ADDR_OWVAR 42
16152: PUSH
16153: LD_INT 31
16155: ST_TO_ADDR
16156: GO 16330
16158: LD_INT 26
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16177
16166: POP
// bc_type := b_bunker ; 27 :
16167: LD_ADDR_OWVAR 42
16171: PUSH
16172: LD_INT 32
16174: ST_TO_ADDR
16175: GO 16330
16177: LD_INT 27
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16196
16185: POP
// bc_type := b_turret ; 28 :
16186: LD_ADDR_OWVAR 42
16190: PUSH
16191: LD_INT 33
16193: ST_TO_ADDR
16194: GO 16330
16196: LD_INT 28
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16215
16204: POP
// bc_type := b_armoury ; 29 :
16205: LD_ADDR_OWVAR 42
16209: PUSH
16210: LD_INT 4
16212: ST_TO_ADDR
16213: GO 16330
16215: LD_INT 29
16217: DOUBLE
16218: EQUAL
16219: IFTRUE 16223
16221: GO 16234
16223: POP
// bc_type := b_barracks ; 30 :
16224: LD_ADDR_OWVAR 42
16228: PUSH
16229: LD_INT 5
16231: ST_TO_ADDR
16232: GO 16330
16234: LD_INT 30
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16253
16242: POP
// bc_type := b_solar_power ; 31 :
16243: LD_ADDR_OWVAR 42
16247: PUSH
16248: LD_INT 27
16250: ST_TO_ADDR
16251: GO 16330
16253: LD_INT 31
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16272
16261: POP
// bc_type := b_oil_power ; 32 :
16262: LD_ADDR_OWVAR 42
16266: PUSH
16267: LD_INT 26
16269: ST_TO_ADDR
16270: GO 16330
16272: LD_INT 32
16274: DOUBLE
16275: EQUAL
16276: IFTRUE 16280
16278: GO 16291
16280: POP
// bc_type := b_siberite_power ; 33 :
16281: LD_ADDR_OWVAR 42
16285: PUSH
16286: LD_INT 28
16288: ST_TO_ADDR
16289: GO 16330
16291: LD_INT 33
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16310
16299: POP
// bc_type := b_oil_mine ; 34 :
16300: LD_ADDR_OWVAR 42
16304: PUSH
16305: LD_INT 29
16307: ST_TO_ADDR
16308: GO 16330
16310: LD_INT 34
16312: DOUBLE
16313: EQUAL
16314: IFTRUE 16318
16316: GO 16329
16318: POP
// bc_type := b_siberite_mine ; end ;
16319: LD_ADDR_OWVAR 42
16323: PUSH
16324: LD_INT 30
16326: ST_TO_ADDR
16327: GO 16330
16329: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16330: LD_ADDR_VAR 0 8
16334: PUSH
16335: LD_VAR 0 5
16339: PPUSH
16340: LD_VAR 0 6
16344: PPUSH
16345: LD_VAR 0 3
16349: PPUSH
16350: CALL_OW 47
16354: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16355: LD_OWVAR 42
16359: PUSH
16360: LD_INT 32
16362: PUSH
16363: LD_INT 33
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: IN
16370: IFFALSE 16386
// PlaceWeaponTurret ( b , weapon ) ;
16372: LD_VAR 0 8
16376: PPUSH
16377: LD_VAR 0 4
16381: PPUSH
16382: CALL_OW 431
// end ;
16386: LD_VAR 0 7
16390: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16391: LD_INT 0
16393: PPUSH
16394: PPUSH
16395: PPUSH
16396: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16397: LD_ADDR_VAR 0 4
16401: PUSH
16402: LD_INT 22
16404: PUSH
16405: LD_OWVAR 2
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 2
16416: PUSH
16417: LD_INT 30
16419: PUSH
16420: LD_INT 0
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 30
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PPUSH
16446: CALL_OW 69
16450: ST_TO_ADDR
// if not tmp then
16451: LD_VAR 0 4
16455: NOT
16456: IFFALSE 16460
// exit ;
16458: GO 16519
// for i in tmp do
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_VAR 0 4
16469: PUSH
16470: FOR_IN
16471: IFFALSE 16517
// for j = 1 to 3 do
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: DOUBLE
16479: LD_INT 1
16481: DEC
16482: ST_TO_ADDR
16483: LD_INT 3
16485: PUSH
16486: FOR_TO
16487: IFFALSE 16513
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16489: LD_VAR 0 2
16493: PPUSH
16494: CALL_OW 274
16498: PPUSH
16499: LD_VAR 0 3
16503: PPUSH
16504: LD_INT 99999
16506: PPUSH
16507: CALL_OW 277
16511: GO 16486
16513: POP
16514: POP
16515: GO 16470
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 1
16523: RET
// export function hHackSetLevel10 ; var i , j ; begin
16524: LD_INT 0
16526: PPUSH
16527: PPUSH
16528: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16529: LD_ADDR_VAR 0 2
16533: PUSH
16534: LD_INT 21
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: PUSH
16549: FOR_IN
16550: IFFALSE 16602
// if IsSelected ( i ) then
16552: LD_VAR 0 2
16556: PPUSH
16557: CALL_OW 306
16561: IFFALSE 16600
// begin for j := 1 to 4 do
16563: LD_ADDR_VAR 0 3
16567: PUSH
16568: DOUBLE
16569: LD_INT 1
16571: DEC
16572: ST_TO_ADDR
16573: LD_INT 4
16575: PUSH
16576: FOR_TO
16577: IFFALSE 16598
// SetSkill ( i , j , 10 ) ;
16579: LD_VAR 0 2
16583: PPUSH
16584: LD_VAR 0 3
16588: PPUSH
16589: LD_INT 10
16591: PPUSH
16592: CALL_OW 237
16596: GO 16576
16598: POP
16599: POP
// end ;
16600: GO 16549
16602: POP
16603: POP
// end ;
16604: LD_VAR 0 1
16608: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16609: LD_INT 0
16611: PPUSH
16612: PPUSH
16613: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16614: LD_ADDR_VAR 0 2
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_OWVAR 2
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 21
16633: PUSH
16634: LD_INT 1
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL_OW 69
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16692
// begin for j := 1 to 4 do
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: DOUBLE
16659: LD_INT 1
16661: DEC
16662: ST_TO_ADDR
16663: LD_INT 4
16665: PUSH
16666: FOR_TO
16667: IFFALSE 16688
// SetSkill ( i , j , 10 ) ;
16669: LD_VAR 0 2
16673: PPUSH
16674: LD_VAR 0 3
16678: PPUSH
16679: LD_INT 10
16681: PPUSH
16682: CALL_OW 237
16686: GO 16666
16688: POP
16689: POP
// end ;
16690: GO 16650
16692: POP
16693: POP
// end ;
16694: LD_VAR 0 1
16698: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16699: LD_INT 0
16701: PPUSH
// uc_side := your_side ;
16702: LD_ADDR_OWVAR 20
16706: PUSH
16707: LD_OWVAR 2
16711: ST_TO_ADDR
// uc_nation := nation ;
16712: LD_ADDR_OWVAR 21
16716: PUSH
16717: LD_VAR 0 1
16721: ST_TO_ADDR
// InitHc ;
16722: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16726: LD_INT 0
16728: PPUSH
16729: LD_VAR 0 2
16733: PPUSH
16734: LD_VAR 0 3
16738: PPUSH
16739: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16743: LD_VAR 0 4
16747: PPUSH
16748: LD_VAR 0 5
16752: PPUSH
16753: CALL_OW 428
16757: PUSH
16758: LD_INT 0
16760: EQUAL
16761: IFFALSE 16785
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16763: CALL_OW 44
16767: PPUSH
16768: LD_VAR 0 4
16772: PPUSH
16773: LD_VAR 0 5
16777: PPUSH
16778: LD_INT 1
16780: PPUSH
16781: CALL_OW 48
// end ;
16785: LD_VAR 0 6
16789: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16790: LD_INT 0
16792: PPUSH
16793: PPUSH
// uc_side := your_side ;
16794: LD_ADDR_OWVAR 20
16798: PUSH
16799: LD_OWVAR 2
16803: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16804: LD_VAR 0 1
16808: PUSH
16809: LD_INT 1
16811: PUSH
16812: LD_INT 2
16814: PUSH
16815: LD_INT 3
16817: PUSH
16818: LD_INT 4
16820: PUSH
16821: LD_INT 5
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: IN
16831: IFFALSE 16843
// uc_nation := nation_american else
16833: LD_ADDR_OWVAR 21
16837: PUSH
16838: LD_INT 1
16840: ST_TO_ADDR
16841: GO 16886
// if chassis in [ 11 , 12 , 13 , 14 ] then
16843: LD_VAR 0 1
16847: PUSH
16848: LD_INT 11
16850: PUSH
16851: LD_INT 12
16853: PUSH
16854: LD_INT 13
16856: PUSH
16857: LD_INT 14
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: IN
16866: IFFALSE 16878
// uc_nation := nation_arabian else
16868: LD_ADDR_OWVAR 21
16872: PUSH
16873: LD_INT 2
16875: ST_TO_ADDR
16876: GO 16886
// uc_nation := nation_russian ;
16878: LD_ADDR_OWVAR 21
16882: PUSH
16883: LD_INT 3
16885: ST_TO_ADDR
// vc_chassis := chassis ;
16886: LD_ADDR_OWVAR 37
16890: PUSH
16891: LD_VAR 0 1
16895: ST_TO_ADDR
// vc_engine := engine ;
16896: LD_ADDR_OWVAR 39
16900: PUSH
16901: LD_VAR 0 2
16905: ST_TO_ADDR
// vc_control := control ;
16906: LD_ADDR_OWVAR 38
16910: PUSH
16911: LD_VAR 0 3
16915: ST_TO_ADDR
// vc_weapon := weapon ;
16916: LD_ADDR_OWVAR 40
16920: PUSH
16921: LD_VAR 0 4
16925: ST_TO_ADDR
// un := CreateVehicle ;
16926: LD_ADDR_VAR 0 8
16930: PUSH
16931: CALL_OW 45
16935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16936: LD_VAR 0 8
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: LD_INT 5
16946: PPUSH
16947: CALL_OW 12
16951: PPUSH
16952: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16956: LD_VAR 0 8
16960: PPUSH
16961: LD_VAR 0 5
16965: PPUSH
16966: LD_VAR 0 6
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 48
// end ;
16978: LD_VAR 0 7
16982: RET
// export hInvincible ; every 1 do
16983: GO 16985
16985: DISABLE
// hInvincible := [ ] ;
16986: LD_ADDR_EXP 77
16990: PUSH
16991: EMPTY
16992: ST_TO_ADDR
16993: END
// every 10 do var i ;
16994: GO 16996
16996: DISABLE
16997: LD_INT 0
16999: PPUSH
// begin enable ;
17000: ENABLE
// if not hInvincible then
17001: LD_EXP 77
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17054
// for i in hInvincible do
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_EXP 77
17019: PUSH
17020: FOR_IN
17021: IFFALSE 17052
// if GetLives ( i ) < 1000 then
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL_OW 256
17032: PUSH
17033: LD_INT 1000
17035: LESS
17036: IFFALSE 17050
// SetLives ( i , 1000 ) ;
17038: LD_VAR 0 1
17042: PPUSH
17043: LD_INT 1000
17045: PPUSH
17046: CALL_OW 234
17050: GO 17020
17052: POP
17053: POP
// end ;
17054: PPOPN 1
17056: END
// export function hHackInvincible ; var i ; begin
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17061: LD_ADDR_VAR 0 2
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: LD_INT 21
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 21
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: PPUSH
17094: CALL_OW 69
17098: PUSH
17099: FOR_IN
17100: IFFALSE 17161
// if IsSelected ( i ) then
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 306
17111: IFFALSE 17159
// begin if i in hInvincible then
17113: LD_VAR 0 2
17117: PUSH
17118: LD_EXP 77
17122: IN
17123: IFFALSE 17143
// hInvincible := hInvincible diff i else
17125: LD_ADDR_EXP 77
17129: PUSH
17130: LD_EXP 77
17134: PUSH
17135: LD_VAR 0 2
17139: DIFF
17140: ST_TO_ADDR
17141: GO 17159
// hInvincible := hInvincible union i ;
17143: LD_ADDR_EXP 77
17147: PUSH
17148: LD_EXP 77
17152: PUSH
17153: LD_VAR 0 2
17157: UNION
17158: ST_TO_ADDR
// end ;
17159: GO 17099
17161: POP
17162: POP
// end ;
17163: LD_VAR 0 1
17167: RET
// export function hHackInvisible ; var i , j ; begin
17168: LD_INT 0
17170: PPUSH
17171: PPUSH
17172: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL_OW 69
17192: PUSH
17193: FOR_IN
17194: IFFALSE 17218
// if IsSelected ( i ) then
17196: LD_VAR 0 2
17200: PPUSH
17201: CALL_OW 306
17205: IFFALSE 17216
// ComForceInvisible ( i ) ;
17207: LD_VAR 0 2
17211: PPUSH
17212: CALL_OW 496
17216: GO 17193
17218: POP
17219: POP
// end ;
17220: LD_VAR 0 1
17224: RET
// export function hHackChangeYourSide ; begin
17225: LD_INT 0
17227: PPUSH
// if your_side = 8 then
17228: LD_OWVAR 2
17232: PUSH
17233: LD_INT 8
17235: EQUAL
17236: IFFALSE 17248
// your_side := 0 else
17238: LD_ADDR_OWVAR 2
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
17246: GO 17262
// your_side := your_side + 1 ;
17248: LD_ADDR_OWVAR 2
17252: PUSH
17253: LD_OWVAR 2
17257: PUSH
17258: LD_INT 1
17260: PLUS
17261: ST_TO_ADDR
// end ;
17262: LD_VAR 0 1
17266: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17267: LD_INT 0
17269: PPUSH
17270: PPUSH
17271: PPUSH
// for i in all_units do
17272: LD_ADDR_VAR 0 2
17276: PUSH
17277: LD_OWVAR 3
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17361
// if IsSelected ( i ) then
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 306
17294: IFFALSE 17359
// begin j := GetSide ( i ) ;
17296: LD_ADDR_VAR 0 3
17300: PUSH
17301: LD_VAR 0 2
17305: PPUSH
17306: CALL_OW 255
17310: ST_TO_ADDR
// if j = 8 then
17311: LD_VAR 0 3
17315: PUSH
17316: LD_INT 8
17318: EQUAL
17319: IFFALSE 17331
// j := 0 else
17321: LD_ADDR_VAR 0 3
17325: PUSH
17326: LD_INT 0
17328: ST_TO_ADDR
17329: GO 17345
// j := j + 1 ;
17331: LD_ADDR_VAR 0 3
17335: PUSH
17336: LD_VAR 0 3
17340: PUSH
17341: LD_INT 1
17343: PLUS
17344: ST_TO_ADDR
// SetSide ( i , j ) ;
17345: LD_VAR 0 2
17349: PPUSH
17350: LD_VAR 0 3
17354: PPUSH
17355: CALL_OW 235
// end ;
17359: GO 17282
17361: POP
17362: POP
// end ;
17363: LD_VAR 0 1
17367: RET
// export function hHackFog ; begin
17368: LD_INT 0
17370: PPUSH
// FogOff ( true ) ;
17371: LD_INT 1
17373: PPUSH
17374: CALL_OW 344
// end ;
17378: LD_VAR 0 1
17382: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17383: LD_INT 0
17385: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_VAR 0 2
17395: PPUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: CALL_OW 483
// CenterOnXY ( x , y ) ;
17411: LD_VAR 0 2
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: CALL_OW 84
// end ;
17425: LD_VAR 0 4
17429: RET
