// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 64409 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 64409 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// export globalGameSaveCounter ; every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// every 0 0$1 do
4577: GO 4579
4579: DISABLE
// begin globalGameSaveCounter := 0 ;
4580: LD_ADDR_EXP 23
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4588: LD_STRING setGameSaveCounter(0)
4590: PPUSH
4591: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4595: LD_STRING initStreamRollete();
4597: PPUSH
4598: CALL_OW 559
// InitStreamMode ;
4602: CALL 5928 0 0
// DefineStreamItems ( false ) ;
4606: LD_INT 0
4608: PPUSH
4609: CALL 6392 0 1
// end ;
4613: END
// export function SOS_MapStart ( ) ; begin
4614: LD_INT 0
4616: PPUSH
// if streamModeActive then
4617: LD_EXP 24
4621: IFFALSE 4630
// DefineStreamItems ( true ) ;
4623: LD_INT 1
4625: PPUSH
4626: CALL 6392 0 1
// UpdateLuaVariables ( ) ;
4630: CALL 4647 0 0
// UpdateFactoryWaypoints ( ) ;
4634: CALL 19253 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4638: CALL 19510 0 0
// end ;
4642: LD_VAR 0 1
4646: RET
// function UpdateLuaVariables ( ) ; begin
4647: LD_INT 0
4649: PPUSH
// if globalGameSaveCounter then
4650: LD_EXP 23
4654: IFFALSE 4688
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4656: LD_ADDR_EXP 23
4660: PUSH
4661: LD_EXP 23
4665: PPUSH
4666: CALL 63630 0 1
4670: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4671: LD_STRING setGameSaveCounter(
4673: PUSH
4674: LD_EXP 23
4678: STR
4679: PUSH
4680: LD_STRING )
4682: STR
4683: PPUSH
4684: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4688: LD_STRING setGameDifficulty(
4690: PUSH
4691: LD_OWVAR 67
4695: STR
4696: PUSH
4697: LD_STRING )
4699: STR
4700: PPUSH
4701: CALL_OW 559
// end ;
4705: LD_VAR 0 1
4709: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4710: LD_INT 0
4712: PPUSH
// if p2 = stream_mode then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_INT 100
4720: EQUAL
4721: IFFALSE 5724
// begin if not StreamModeActive then
4723: LD_EXP 24
4727: NOT
4728: IFFALSE 4738
// StreamModeActive := true ;
4730: LD_ADDR_EXP 24
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 0 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 0
4745: EQUAL
4746: IFFALSE 4752
// InitStreamMode ;
4748: CALL 5928 0 0
// if p3 = 1 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 1
4759: EQUAL
4760: IFFALSE 4770
// sRocket := true ;
4762: LD_ADDR_EXP 29
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 2 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 2
4777: EQUAL
4778: IFFALSE 4788
// sSpeed := true ;
4780: LD_ADDR_EXP 28
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 3 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 3
4795: EQUAL
4796: IFFALSE 4806
// sEngine := true ;
4798: LD_ADDR_EXP 30
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 4 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 4
4813: EQUAL
4814: IFFALSE 4824
// sSpec := true ;
4816: LD_ADDR_EXP 27
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 5 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 5
4831: EQUAL
4832: IFFALSE 4842
// sLevel := true ;
4834: LD_ADDR_EXP 31
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 6 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 6
4849: EQUAL
4850: IFFALSE 4860
// sArmoury := true ;
4852: LD_ADDR_EXP 32
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 7 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 7
4867: EQUAL
4868: IFFALSE 4878
// sRadar := true ;
4870: LD_ADDR_EXP 33
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 8 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 8
4885: EQUAL
4886: IFFALSE 4896
// sBunker := true ;
4888: LD_ADDR_EXP 34
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 9 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 9
4903: EQUAL
4904: IFFALSE 4914
// sHack := true ;
4906: LD_ADDR_EXP 35
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 10 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 10
4921: EQUAL
4922: IFFALSE 4932
// sFire := true ;
4924: LD_ADDR_EXP 36
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 11 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 11
4939: EQUAL
4940: IFFALSE 4950
// sRefresh := true ;
4942: LD_ADDR_EXP 37
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 12 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 12
4957: EQUAL
4958: IFFALSE 4968
// sExp := true ;
4960: LD_ADDR_EXP 38
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 13 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 13
4975: EQUAL
4976: IFFALSE 4986
// sDepot := true ;
4978: LD_ADDR_EXP 39
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 14 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 14
4993: EQUAL
4994: IFFALSE 5004
// sFlag := true ;
4996: LD_ADDR_EXP 40
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 15 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 15
5011: EQUAL
5012: IFFALSE 5022
// sKamikadze := true ;
5014: LD_ADDR_EXP 48
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 16 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 16
5029: EQUAL
5030: IFFALSE 5040
// sTroll := true ;
5032: LD_ADDR_EXP 49
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 17 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 17
5047: EQUAL
5048: IFFALSE 5058
// sSlow := true ;
5050: LD_ADDR_EXP 50
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 18 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 18
5065: EQUAL
5066: IFFALSE 5076
// sLack := true ;
5068: LD_ADDR_EXP 51
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 19 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 19
5083: EQUAL
5084: IFFALSE 5094
// sTank := true ;
5086: LD_ADDR_EXP 53
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 20 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 20
5101: EQUAL
5102: IFFALSE 5112
// sRemote := true ;
5104: LD_ADDR_EXP 54
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 21 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 21
5119: EQUAL
5120: IFFALSE 5130
// sPowell := true ;
5122: LD_ADDR_EXP 55
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 22 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 22
5137: EQUAL
5138: IFFALSE 5148
// sTeleport := true ;
5140: LD_ADDR_EXP 58
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 23 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 23
5155: EQUAL
5156: IFFALSE 5166
// sOilTower := true ;
5158: LD_ADDR_EXP 60
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 24 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 24
5173: EQUAL
5174: IFFALSE 5184
// sShovel := true ;
5176: LD_ADDR_EXP 61
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 25 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 25
5191: EQUAL
5192: IFFALSE 5202
// sSheik := true ;
5194: LD_ADDR_EXP 62
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 26 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 26
5209: EQUAL
5210: IFFALSE 5220
// sEarthquake := true ;
5212: LD_ADDR_EXP 64
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 27 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 27
5227: EQUAL
5228: IFFALSE 5238
// sAI := true ;
5230: LD_ADDR_EXP 65
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 28 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 28
5245: EQUAL
5246: IFFALSE 5256
// sCargo := true ;
5248: LD_ADDR_EXP 68
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 29 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 29
5263: EQUAL
5264: IFFALSE 5274
// sDLaser := true ;
5266: LD_ADDR_EXP 69
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 30 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 30
5281: EQUAL
5282: IFFALSE 5292
// sExchange := true ;
5284: LD_ADDR_EXP 70
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 31 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 31
5299: EQUAL
5300: IFFALSE 5310
// sFac := true ;
5302: LD_ADDR_EXP 71
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 32 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 32
5317: EQUAL
5318: IFFALSE 5328
// sPower := true ;
5320: LD_ADDR_EXP 72
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 33 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 33
5335: EQUAL
5336: IFFALSE 5346
// sRandom := true ;
5338: LD_ADDR_EXP 73
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 34 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 34
5353: EQUAL
5354: IFFALSE 5364
// sShield := true ;
5356: LD_ADDR_EXP 74
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 35 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 35
5371: EQUAL
5372: IFFALSE 5382
// sTime := true ;
5374: LD_ADDR_EXP 75
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 36 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 36
5389: EQUAL
5390: IFFALSE 5400
// sTools := true ;
5392: LD_ADDR_EXP 76
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 101 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 101
5407: EQUAL
5408: IFFALSE 5418
// sSold := true ;
5410: LD_ADDR_EXP 41
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 102 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 102
5425: EQUAL
5426: IFFALSE 5436
// sDiff := true ;
5428: LD_ADDR_EXP 42
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 103 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 103
5443: EQUAL
5444: IFFALSE 5454
// sFog := true ;
5446: LD_ADDR_EXP 45
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 104 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 104
5461: EQUAL
5462: IFFALSE 5472
// sReset := true ;
5464: LD_ADDR_EXP 46
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 105 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 105
5479: EQUAL
5480: IFFALSE 5490
// sSun := true ;
5482: LD_ADDR_EXP 47
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 106 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 106
5497: EQUAL
5498: IFFALSE 5508
// sTiger := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 107 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 107
5515: EQUAL
5516: IFFALSE 5526
// sBomb := true ;
5518: LD_ADDR_EXP 44
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 108 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 108
5533: EQUAL
5534: IFFALSE 5544
// sWound := true ;
5536: LD_ADDR_EXP 52
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 109 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 109
5551: EQUAL
5552: IFFALSE 5562
// sBetray := true ;
5554: LD_ADDR_EXP 56
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 110 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 110
5569: EQUAL
5570: IFFALSE 5580
// sContamin := true ;
5572: LD_ADDR_EXP 57
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 111 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 111
5587: EQUAL
5588: IFFALSE 5598
// sOil := true ;
5590: LD_ADDR_EXP 59
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 112 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 112
5605: EQUAL
5606: IFFALSE 5616
// sStu := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 113 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 113
5623: EQUAL
5624: IFFALSE 5634
// sBazooka := true ;
5626: LD_ADDR_EXP 66
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 114 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 114
5641: EQUAL
5642: IFFALSE 5652
// sMortar := true ;
5644: LD_ADDR_EXP 67
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 115 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 115
5659: EQUAL
5660: IFFALSE 5670
// sRanger := true ;
5662: LD_ADDR_EXP 77
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 116 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 116
5677: EQUAL
5678: IFFALSE 5688
// sComputer := true ;
5680: LD_ADDR_EXP 78
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 117 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 117
5695: EQUAL
5696: IFFALSE 5706
// s30 := true ;
5698: LD_ADDR_EXP 79
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 118 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 118
5713: EQUAL
5714: IFFALSE 5724
// s60 := true ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// end ; if p2 = hack_mode then
5724: LD_VAR 0 2
5728: PUSH
5729: LD_INT 101
5731: EQUAL
5732: IFFALSE 5860
// begin case p3 of 1 :
5734: LD_VAR 0 3
5738: PUSH
5739: LD_INT 1
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackUnlimitedResources ; 2 :
5748: CALL 17999 0 0
5752: GO 5860
5754: LD_INT 2
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackSetLevel10 ; 3 :
5763: CALL 18132 0 0
5767: GO 5860
5769: LD_INT 3
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5777
5775: GO 5784
5777: POP
// hHackSetLevel10YourUnits ; 4 :
5778: CALL 18217 0 0
5782: GO 5860
5784: LD_INT 4
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5799
5792: POP
// hHackInvincible ; 5 :
5793: CALL 18665 0 0
5797: GO 5860
5799: LD_INT 5
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5814
5807: POP
// hHackInvisible ; 6 :
5808: CALL 18776 0 0
5812: GO 5860
5814: LD_INT 6
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5822
5820: GO 5829
5822: POP
// hHackChangeYourSide ; 7 :
5823: CALL 18833 0 0
5827: GO 5860
5829: LD_INT 7
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5844
5837: POP
// hHackChangeUnitSide ; 8 :
5838: CALL 18875 0 0
5842: GO 5860
5844: LD_INT 8
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5859
5852: POP
// hHackFog ; end ;
5853: CALL 18976 0 0
5857: GO 5860
5859: POP
// end ; if p2 = game_save_mode then
5860: LD_VAR 0 2
5864: PUSH
5865: LD_INT 102
5867: EQUAL
5868: IFFALSE 5923
// begin if p3 = 1 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 1
5877: EQUAL
5878: IFFALSE 5890
// globalGameSaveCounter := p4 ;
5880: LD_ADDR_EXP 23
5884: PUSH
5885: LD_VAR 0 4
5889: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 2
5897: EQUAL
5898: PUSH
5899: LD_EXP 23
5903: AND
5904: IFFALSE 5923
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5906: LD_STRING setGameSaveCounter(
5908: PUSH
5909: LD_EXP 23
5913: STR
5914: PUSH
5915: LD_STRING )
5917: STR
5918: PPUSH
5919: CALL_OW 559
// end ; end ;
5923: LD_VAR 0 7
5927: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5928: LD_INT 0
5930: PPUSH
// streamModeActive := false ;
5931: LD_ADDR_EXP 24
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// normalCounter := 36 ;
5939: LD_ADDR_EXP 25
5943: PUSH
5944: LD_INT 36
5946: ST_TO_ADDR
// hardcoreCounter := 18 ;
5947: LD_ADDR_EXP 26
5951: PUSH
5952: LD_INT 18
5954: ST_TO_ADDR
// sRocket := false ;
5955: LD_ADDR_EXP 29
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sSpeed := false ;
5963: LD_ADDR_EXP 28
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sEngine := false ;
5971: LD_ADDR_EXP 30
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sSpec := false ;
5979: LD_ADDR_EXP 27
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sLevel := false ;
5987: LD_ADDR_EXP 31
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sArmoury := false ;
5995: LD_ADDR_EXP 32
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sRadar := false ;
6003: LD_ADDR_EXP 33
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sBunker := false ;
6011: LD_ADDR_EXP 34
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sHack := false ;
6019: LD_ADDR_EXP 35
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sFire := false ;
6027: LD_ADDR_EXP 36
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sRefresh := false ;
6035: LD_ADDR_EXP 37
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sExp := false ;
6043: LD_ADDR_EXP 38
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sDepot := false ;
6051: LD_ADDR_EXP 39
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sFlag := false ;
6059: LD_ADDR_EXP 40
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sKamikadze := false ;
6067: LD_ADDR_EXP 48
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sTroll := false ;
6075: LD_ADDR_EXP 49
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sSlow := false ;
6083: LD_ADDR_EXP 50
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sLack := false ;
6091: LD_ADDR_EXP 51
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sTank := false ;
6099: LD_ADDR_EXP 53
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sRemote := false ;
6107: LD_ADDR_EXP 54
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sPowell := false ;
6115: LD_ADDR_EXP 55
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sTeleport := false ;
6123: LD_ADDR_EXP 58
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sOilTower := false ;
6131: LD_ADDR_EXP 60
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sShovel := false ;
6139: LD_ADDR_EXP 61
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sSheik := false ;
6147: LD_ADDR_EXP 62
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sEarthquake := false ;
6155: LD_ADDR_EXP 64
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sAI := false ;
6163: LD_ADDR_EXP 65
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sCargo := false ;
6171: LD_ADDR_EXP 68
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sDLaser := false ;
6179: LD_ADDR_EXP 69
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sExchange := false ;
6187: LD_ADDR_EXP 70
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sFac := false ;
6195: LD_ADDR_EXP 71
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sPower := false ;
6203: LD_ADDR_EXP 72
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sRandom := false ;
6211: LD_ADDR_EXP 73
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sShield := false ;
6219: LD_ADDR_EXP 74
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sTime := false ;
6227: LD_ADDR_EXP 75
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sTools := false ;
6235: LD_ADDR_EXP 76
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sSold := false ;
6243: LD_ADDR_EXP 41
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sDiff := false ;
6251: LD_ADDR_EXP 42
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sFog := false ;
6259: LD_ADDR_EXP 45
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sReset := false ;
6267: LD_ADDR_EXP 46
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sSun := false ;
6275: LD_ADDR_EXP 47
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sTiger := false ;
6283: LD_ADDR_EXP 43
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sBomb := false ;
6291: LD_ADDR_EXP 44
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sWound := false ;
6299: LD_ADDR_EXP 52
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sBetray := false ;
6307: LD_ADDR_EXP 56
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sContamin := false ;
6315: LD_ADDR_EXP 57
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sOil := false ;
6323: LD_ADDR_EXP 59
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sStu := false ;
6331: LD_ADDR_EXP 63
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sBazooka := false ;
6339: LD_ADDR_EXP 66
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sMortar := false ;
6347: LD_ADDR_EXP 67
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sRanger := false ;
6355: LD_ADDR_EXP 77
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sComputer := false ;
6363: LD_ADDR_EXP 78
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// s30 := false ;
6371: LD_ADDR_EXP 79
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// s60 := false ;
6379: LD_ADDR_EXP 80
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// end ;
6387: LD_VAR 0 1
6391: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
// result := [ ] ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: EMPTY
6407: ST_TO_ADDR
// if campaign_id = 1 then
6408: LD_OWVAR 69
6412: PUSH
6413: LD_INT 1
6415: EQUAL
6416: IFFALSE 9582
// begin case mission_number of 1 :
6418: LD_OWVAR 70
6422: PUSH
6423: LD_INT 1
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6507
6431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 12
6448: PUSH
6449: LD_INT 15
6451: PUSH
6452: LD_INT 16
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_INT 23
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 101
6477: PUSH
6478: LD_INT 102
6480: PUSH
6481: LD_INT 106
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: ST_TO_ADDR
6505: GO 9580
6507: LD_INT 2
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6599
6515: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 11
6529: PUSH
6530: LD_INT 12
6532: PUSH
6533: LD_INT 15
6535: PUSH
6536: LD_INT 16
6538: PUSH
6539: LD_INT 22
6541: PUSH
6542: LD_INT 23
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 101
6561: PUSH
6562: LD_INT 102
6564: PUSH
6565: LD_INT 105
6567: PUSH
6568: LD_INT 106
6570: PUSH
6571: LD_INT 108
6573: PUSH
6574: LD_INT 116
6576: PUSH
6577: LD_INT 117
6579: PUSH
6580: LD_INT 118
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: ST_TO_ADDR
6597: GO 9580
6599: LD_INT 3
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6695
6607: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: LD_INT 11
6624: PUSH
6625: LD_INT 12
6627: PUSH
6628: LD_INT 15
6630: PUSH
6631: LD_INT 16
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 26
6639: PUSH
6640: LD_INT 36
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 101
6657: PUSH
6658: LD_INT 102
6660: PUSH
6661: LD_INT 105
6663: PUSH
6664: LD_INT 106
6666: PUSH
6667: LD_INT 108
6669: PUSH
6670: LD_INT 116
6672: PUSH
6673: LD_INT 117
6675: PUSH
6676: LD_INT 118
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 9580
6695: LD_INT 4
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6799
6703: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 4
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: LD_INT 8
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 15
6729: PUSH
6730: LD_INT 16
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_INT 23
6738: PUSH
6739: LD_INT 26
6741: PUSH
6742: LD_INT 36
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 101
6761: PUSH
6762: LD_INT 102
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 108
6773: PUSH
6774: LD_INT 116
6776: PUSH
6777: LD_INT 117
6779: PUSH
6780: LD_INT 118
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 9580
6799: LD_INT 5
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6919
6807: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: LD_INT 6
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: LD_INT 11
6830: PUSH
6831: LD_INT 12
6833: PUSH
6834: LD_INT 15
6836: PUSH
6837: LD_INT 16
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 23
6845: PUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 26
6851: PUSH
6852: LD_INT 36
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 101
6873: PUSH
6874: LD_INT 102
6876: PUSH
6877: LD_INT 105
6879: PUSH
6880: LD_INT 106
6882: PUSH
6883: LD_INT 108
6885: PUSH
6886: LD_INT 109
6888: PUSH
6889: LD_INT 112
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 9580
6919: LD_INT 6
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 7059
6927: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: LD_INT 6
6944: PUSH
6945: LD_INT 8
6947: PUSH
6948: LD_INT 11
6950: PUSH
6951: LD_INT 12
6953: PUSH
6954: LD_INT 15
6956: PUSH
6957: LD_INT 16
6959: PUSH
6960: LD_INT 20
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: LD_INT 30
6980: PUSH
6981: LD_INT 31
6983: PUSH
6984: LD_INT 32
6986: PUSH
6987: LD_INT 36
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 101
7013: PUSH
7014: LD_INT 102
7016: PUSH
7017: LD_INT 105
7019: PUSH
7020: LD_INT 106
7022: PUSH
7023: LD_INT 108
7025: PUSH
7026: LD_INT 109
7028: PUSH
7029: LD_INT 112
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 9580
7059: LD_INT 7
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7179
7067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 4
7078: PUSH
7079: LD_INT 5
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: LD_INT 11
7087: PUSH
7088: LD_INT 12
7090: PUSH
7091: LD_INT 15
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: LD_INT 20
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 26
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 101
7133: PUSH
7134: LD_INT 102
7136: PUSH
7137: LD_INT 103
7139: PUSH
7140: LD_INT 105
7142: PUSH
7143: LD_INT 106
7145: PUSH
7146: LD_INT 108
7148: PUSH
7149: LD_INT 112
7151: PUSH
7152: LD_INT 116
7154: PUSH
7155: LD_INT 117
7157: PUSH
7158: LD_INT 118
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 9580
7179: LD_INT 8
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7327
7187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7188: LD_ADDR_VAR 0 2
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: LD_INT 6
7204: PUSH
7205: LD_INT 7
7207: PUSH
7208: LD_INT 8
7210: PUSH
7211: LD_INT 11
7213: PUSH
7214: LD_INT 12
7216: PUSH
7217: LD_INT 15
7219: PUSH
7220: LD_INT 16
7222: PUSH
7223: LD_INT 20
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 30
7243: PUSH
7244: LD_INT 31
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 101
7277: PUSH
7278: LD_INT 102
7280: PUSH
7281: LD_INT 103
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 109
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 116
7301: PUSH
7302: LD_INT 117
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9580
7327: LD_INT 9
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7483
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 7
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: LD_INT 11
7361: PUSH
7362: LD_INT 12
7364: PUSH
7365: LD_INT 15
7367: PUSH
7368: LD_INT 16
7370: PUSH
7371: LD_INT 20
7373: PUSH
7374: LD_INT 21
7376: PUSH
7377: LD_INT 22
7379: PUSH
7380: LD_INT 23
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 26
7388: PUSH
7389: LD_INT 28
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 31
7397: PUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 36
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 101
7429: PUSH
7430: LD_INT 102
7432: PUSH
7433: LD_INT 103
7435: PUSH
7436: LD_INT 105
7438: PUSH
7439: LD_INT 106
7441: PUSH
7442: LD_INT 108
7444: PUSH
7445: LD_INT 109
7447: PUSH
7448: LD_INT 112
7450: PUSH
7451: LD_INT 114
7453: PUSH
7454: LD_INT 116
7456: PUSH
7457: LD_INT 117
7459: PUSH
7460: LD_INT 118
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 9580
7483: LD_INT 10
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7491
7489: GO 7687
7491: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7492: LD_ADDR_VAR 0 2
7496: PUSH
7497: LD_INT 2
7499: PUSH
7500: LD_INT 4
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 6
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: LD_INT 12
7526: PUSH
7527: LD_INT 13
7529: PUSH
7530: LD_INT 14
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 17
7541: PUSH
7542: LD_INT 18
7544: PUSH
7545: LD_INT 19
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 23
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 26
7568: PUSH
7569: LD_INT 28
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 31
7577: PUSH
7578: LD_INT 32
7580: PUSH
7581: LD_INT 36
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 101
7617: PUSH
7618: LD_INT 102
7620: PUSH
7621: LD_INT 103
7623: PUSH
7624: LD_INT 104
7626: PUSH
7627: LD_INT 105
7629: PUSH
7630: LD_INT 106
7632: PUSH
7633: LD_INT 107
7635: PUSH
7636: LD_INT 108
7638: PUSH
7639: LD_INT 109
7641: PUSH
7642: LD_INT 110
7644: PUSH
7645: LD_INT 111
7647: PUSH
7648: LD_INT 112
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: ST_TO_ADDR
7685: GO 9580
7687: LD_INT 11
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7899
7695: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 4
7709: PUSH
7710: LD_INT 5
7712: PUSH
7713: LD_INT 6
7715: PUSH
7716: LD_INT 7
7718: PUSH
7719: LD_INT 8
7721: PUSH
7722: LD_INT 9
7724: PUSH
7725: LD_INT 10
7727: PUSH
7728: LD_INT 11
7730: PUSH
7731: LD_INT 12
7733: PUSH
7734: LD_INT 13
7736: PUSH
7737: LD_INT 14
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 17
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 28
7778: PUSH
7779: LD_INT 30
7781: PUSH
7782: LD_INT 31
7784: PUSH
7785: LD_INT 32
7787: PUSH
7788: LD_INT 34
7790: PUSH
7791: LD_INT 36
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 101
7829: PUSH
7830: LD_INT 102
7832: PUSH
7833: LD_INT 103
7835: PUSH
7836: LD_INT 104
7838: PUSH
7839: LD_INT 105
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 108
7850: PUSH
7851: LD_INT 109
7853: PUSH
7854: LD_INT 110
7856: PUSH
7857: LD_INT 111
7859: PUSH
7860: LD_INT 112
7862: PUSH
7863: LD_INT 114
7865: PUSH
7866: LD_INT 116
7868: PUSH
7869: LD_INT 117
7871: PUSH
7872: LD_INT 118
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 9580
7899: LD_INT 12
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8127
7907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7908: LD_ADDR_VAR 0 2
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: LD_INT 6
7930: PUSH
7931: LD_INT 7
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: LD_INT 9
7939: PUSH
7940: LD_INT 10
7942: PUSH
7943: LD_INT 11
7945: PUSH
7946: LD_INT 12
7948: PUSH
7949: LD_INT 13
7951: PUSH
7952: LD_INT 14
7954: PUSH
7955: LD_INT 15
7957: PUSH
7958: LD_INT 16
7960: PUSH
7961: LD_INT 17
7963: PUSH
7964: LD_INT 18
7966: PUSH
7967: LD_INT 19
7969: PUSH
7970: LD_INT 20
7972: PUSH
7973: LD_INT 21
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_INT 23
7981: PUSH
7982: LD_INT 24
7984: PUSH
7985: LD_INT 25
7987: PUSH
7988: LD_INT 26
7990: PUSH
7991: LD_INT 27
7993: PUSH
7994: LD_INT 28
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 31
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 33
8008: PUSH
8009: LD_INT 34
8011: PUSH
8012: LD_INT 36
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 101
8053: PUSH
8054: LD_INT 102
8056: PUSH
8057: LD_INT 103
8059: PUSH
8060: LD_INT 104
8062: PUSH
8063: LD_INT 105
8065: PUSH
8066: LD_INT 106
8068: PUSH
8069: LD_INT 107
8071: PUSH
8072: LD_INT 108
8074: PUSH
8075: LD_INT 109
8077: PUSH
8078: LD_INT 110
8080: PUSH
8081: LD_INT 111
8083: PUSH
8084: LD_INT 112
8086: PUSH
8087: LD_INT 113
8089: PUSH
8090: LD_INT 114
8092: PUSH
8093: LD_INT 116
8095: PUSH
8096: LD_INT 117
8098: PUSH
8099: LD_INT 118
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: ST_TO_ADDR
8125: GO 9580
8127: LD_INT 13
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8343
8135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: LD_INT 5
8155: PUSH
8156: LD_INT 8
8158: PUSH
8159: LD_INT 9
8161: PUSH
8162: LD_INT 10
8164: PUSH
8165: LD_INT 11
8167: PUSH
8168: LD_INT 12
8170: PUSH
8171: LD_INT 14
8173: PUSH
8174: LD_INT 15
8176: PUSH
8177: LD_INT 16
8179: PUSH
8180: LD_INT 17
8182: PUSH
8183: LD_INT 18
8185: PUSH
8186: LD_INT 19
8188: PUSH
8189: LD_INT 20
8191: PUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 24
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 26
8209: PUSH
8210: LD_INT 27
8212: PUSH
8213: LD_INT 28
8215: PUSH
8216: LD_INT 30
8218: PUSH
8219: LD_INT 31
8221: PUSH
8222: LD_INT 32
8224: PUSH
8225: LD_INT 33
8227: PUSH
8228: LD_INT 34
8230: PUSH
8231: LD_INT 36
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 101
8269: PUSH
8270: LD_INT 102
8272: PUSH
8273: LD_INT 103
8275: PUSH
8276: LD_INT 104
8278: PUSH
8279: LD_INT 105
8281: PUSH
8282: LD_INT 106
8284: PUSH
8285: LD_INT 107
8287: PUSH
8288: LD_INT 108
8290: PUSH
8291: LD_INT 109
8293: PUSH
8294: LD_INT 110
8296: PUSH
8297: LD_INT 111
8299: PUSH
8300: LD_INT 112
8302: PUSH
8303: LD_INT 113
8305: PUSH
8306: LD_INT 114
8308: PUSH
8309: LD_INT 116
8311: PUSH
8312: LD_INT 117
8314: PUSH
8315: LD_INT 118
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: ST_TO_ADDR
8341: GO 9580
8343: LD_INT 14
8345: DOUBLE
8346: EQUAL
8347: IFTRUE 8351
8349: GO 8575
8351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8352: LD_ADDR_VAR 0 2
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 6
8374: PUSH
8375: LD_INT 7
8377: PUSH
8378: LD_INT 8
8380: PUSH
8381: LD_INT 9
8383: PUSH
8384: LD_INT 10
8386: PUSH
8387: LD_INT 11
8389: PUSH
8390: LD_INT 12
8392: PUSH
8393: LD_INT 13
8395: PUSH
8396: LD_INT 14
8398: PUSH
8399: LD_INT 15
8401: PUSH
8402: LD_INT 16
8404: PUSH
8405: LD_INT 17
8407: PUSH
8408: LD_INT 18
8410: PUSH
8411: LD_INT 19
8413: PUSH
8414: LD_INT 20
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 22
8422: PUSH
8423: LD_INT 23
8425: PUSH
8426: LD_INT 24
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 27
8437: PUSH
8438: LD_INT 28
8440: PUSH
8441: LD_INT 29
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_INT 31
8449: PUSH
8450: LD_INT 32
8452: PUSH
8453: LD_INT 33
8455: PUSH
8456: LD_INT 34
8458: PUSH
8459: LD_INT 36
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 101
8501: PUSH
8502: LD_INT 102
8504: PUSH
8505: LD_INT 103
8507: PUSH
8508: LD_INT 104
8510: PUSH
8511: LD_INT 105
8513: PUSH
8514: LD_INT 106
8516: PUSH
8517: LD_INT 107
8519: PUSH
8520: LD_INT 108
8522: PUSH
8523: LD_INT 109
8525: PUSH
8526: LD_INT 110
8528: PUSH
8529: LD_INT 111
8531: PUSH
8532: LD_INT 112
8534: PUSH
8535: LD_INT 113
8537: PUSH
8538: LD_INT 114
8540: PUSH
8541: LD_INT 116
8543: PUSH
8544: LD_INT 117
8546: PUSH
8547: LD_INT 118
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 9580
8575: LD_INT 15
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8807
8583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8584: LD_ADDR_VAR 0 2
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 4
8600: PUSH
8601: LD_INT 5
8603: PUSH
8604: LD_INT 6
8606: PUSH
8607: LD_INT 7
8609: PUSH
8610: LD_INT 8
8612: PUSH
8613: LD_INT 9
8615: PUSH
8616: LD_INT 10
8618: PUSH
8619: LD_INT 11
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: LD_INT 15
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: LD_INT 17
8639: PUSH
8640: LD_INT 18
8642: PUSH
8643: LD_INT 19
8645: PUSH
8646: LD_INT 20
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_INT 23
8657: PUSH
8658: LD_INT 24
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 26
8666: PUSH
8667: LD_INT 27
8669: PUSH
8670: LD_INT 28
8672: PUSH
8673: LD_INT 29
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 31
8681: PUSH
8682: LD_INT 32
8684: PUSH
8685: LD_INT 33
8687: PUSH
8688: LD_INT 34
8690: PUSH
8691: LD_INT 36
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 101
8733: PUSH
8734: LD_INT 102
8736: PUSH
8737: LD_INT 103
8739: PUSH
8740: LD_INT 104
8742: PUSH
8743: LD_INT 105
8745: PUSH
8746: LD_INT 106
8748: PUSH
8749: LD_INT 107
8751: PUSH
8752: LD_INT 108
8754: PUSH
8755: LD_INT 109
8757: PUSH
8758: LD_INT 110
8760: PUSH
8761: LD_INT 111
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 113
8769: PUSH
8770: LD_INT 114
8772: PUSH
8773: LD_INT 116
8775: PUSH
8776: LD_INT 117
8778: PUSH
8779: LD_INT 118
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 9580
8807: LD_INT 16
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8951
8815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 7
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 12
8838: PUSH
8839: LD_INT 15
8841: PUSH
8842: LD_INT 16
8844: PUSH
8845: LD_INT 20
8847: PUSH
8848: LD_INT 21
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 23
8856: PUSH
8857: LD_INT 25
8859: PUSH
8860: LD_INT 26
8862: PUSH
8863: LD_INT 30
8865: PUSH
8866: LD_INT 31
8868: PUSH
8869: LD_INT 32
8871: PUSH
8872: LD_INT 33
8874: PUSH
8875: LD_INT 34
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 101
8901: PUSH
8902: LD_INT 102
8904: PUSH
8905: LD_INT 103
8907: PUSH
8908: LD_INT 106
8910: PUSH
8911: LD_INT 108
8913: PUSH
8914: LD_INT 112
8916: PUSH
8917: LD_INT 113
8919: PUSH
8920: LD_INT 114
8922: PUSH
8923: LD_INT 116
8925: PUSH
8926: LD_INT 117
8928: PUSH
8929: LD_INT 118
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ST_TO_ADDR
8949: GO 9580
8951: LD_INT 17
8953: DOUBLE
8954: EQUAL
8955: IFTRUE 8959
8957: GO 9183
8959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8960: LD_ADDR_VAR 0 2
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 4
8976: PUSH
8977: LD_INT 5
8979: PUSH
8980: LD_INT 6
8982: PUSH
8983: LD_INT 7
8985: PUSH
8986: LD_INT 8
8988: PUSH
8989: LD_INT 9
8991: PUSH
8992: LD_INT 10
8994: PUSH
8995: LD_INT 11
8997: PUSH
8998: LD_INT 12
9000: PUSH
9001: LD_INT 13
9003: PUSH
9004: LD_INT 14
9006: PUSH
9007: LD_INT 15
9009: PUSH
9010: LD_INT 16
9012: PUSH
9013: LD_INT 17
9015: PUSH
9016: LD_INT 18
9018: PUSH
9019: LD_INT 19
9021: PUSH
9022: LD_INT 20
9024: PUSH
9025: LD_INT 21
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_INT 23
9033: PUSH
9034: LD_INT 24
9036: PUSH
9037: LD_INT 25
9039: PUSH
9040: LD_INT 26
9042: PUSH
9043: LD_INT 27
9045: PUSH
9046: LD_INT 28
9048: PUSH
9049: LD_INT 29
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 34
9066: PUSH
9067: LD_INT 36
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 101
9109: PUSH
9110: LD_INT 102
9112: PUSH
9113: LD_INT 103
9115: PUSH
9116: LD_INT 104
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 107
9127: PUSH
9128: LD_INT 108
9130: PUSH
9131: LD_INT 109
9133: PUSH
9134: LD_INT 110
9136: PUSH
9137: LD_INT 111
9139: PUSH
9140: LD_INT 112
9142: PUSH
9143: LD_INT 113
9145: PUSH
9146: LD_INT 114
9148: PUSH
9149: LD_INT 116
9151: PUSH
9152: LD_INT 117
9154: PUSH
9155: LD_INT 118
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 9580
9183: LD_INT 18
9185: DOUBLE
9186: EQUAL
9187: IFTRUE 9191
9189: GO 9339
9191: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 7
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 15
9217: PUSH
9218: LD_INT 16
9220: PUSH
9221: LD_INT 20
9223: PUSH
9224: LD_INT 21
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 23
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 26
9238: PUSH
9239: LD_INT 30
9241: PUSH
9242: LD_INT 31
9244: PUSH
9245: LD_INT 32
9247: PUSH
9248: LD_INT 33
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 35
9256: PUSH
9257: LD_INT 36
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 101
9285: PUSH
9286: LD_INT 102
9288: PUSH
9289: LD_INT 103
9291: PUSH
9292: LD_INT 106
9294: PUSH
9295: LD_INT 108
9297: PUSH
9298: LD_INT 112
9300: PUSH
9301: LD_INT 113
9303: PUSH
9304: LD_INT 114
9306: PUSH
9307: LD_INT 115
9309: PUSH
9310: LD_INT 116
9312: PUSH
9313: LD_INT 117
9315: PUSH
9316: LD_INT 118
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: ST_TO_ADDR
9337: GO 9580
9339: LD_INT 19
9341: DOUBLE
9342: EQUAL
9343: IFTRUE 9347
9345: GO 9579
9347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: LD_INT 5
9367: PUSH
9368: LD_INT 6
9370: PUSH
9371: LD_INT 7
9373: PUSH
9374: LD_INT 8
9376: PUSH
9377: LD_INT 9
9379: PUSH
9380: LD_INT 10
9382: PUSH
9383: LD_INT 11
9385: PUSH
9386: LD_INT 12
9388: PUSH
9389: LD_INT 13
9391: PUSH
9392: LD_INT 14
9394: PUSH
9395: LD_INT 15
9397: PUSH
9398: LD_INT 16
9400: PUSH
9401: LD_INT 17
9403: PUSH
9404: LD_INT 18
9406: PUSH
9407: LD_INT 19
9409: PUSH
9410: LD_INT 20
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 23
9421: PUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 26
9430: PUSH
9431: LD_INT 27
9433: PUSH
9434: LD_INT 28
9436: PUSH
9437: LD_INT 29
9439: PUSH
9440: LD_INT 30
9442: PUSH
9443: LD_INT 31
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: LD_INT 33
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 35
9457: PUSH
9458: LD_INT 36
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 101
9501: PUSH
9502: LD_INT 102
9504: PUSH
9505: LD_INT 103
9507: PUSH
9508: LD_INT 104
9510: PUSH
9511: LD_INT 105
9513: PUSH
9514: LD_INT 106
9516: PUSH
9517: LD_INT 107
9519: PUSH
9520: LD_INT 108
9522: PUSH
9523: LD_INT 109
9525: PUSH
9526: LD_INT 110
9528: PUSH
9529: LD_INT 111
9531: PUSH
9532: LD_INT 112
9534: PUSH
9535: LD_INT 113
9537: PUSH
9538: LD_INT 114
9540: PUSH
9541: LD_INT 115
9543: PUSH
9544: LD_INT 116
9546: PUSH
9547: LD_INT 117
9549: PUSH
9550: LD_INT 118
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 9580
9579: POP
// end else
9580: GO 9811
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 3
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 7
9607: PUSH
9608: LD_INT 8
9610: PUSH
9611: LD_INT 9
9613: PUSH
9614: LD_INT 10
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 13
9625: PUSH
9626: LD_INT 14
9628: PUSH
9629: LD_INT 15
9631: PUSH
9632: LD_INT 16
9634: PUSH
9635: LD_INT 17
9637: PUSH
9638: LD_INT 18
9640: PUSH
9641: LD_INT 19
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 24
9658: PUSH
9659: LD_INT 25
9661: PUSH
9662: LD_INT 26
9664: PUSH
9665: LD_INT 27
9667: PUSH
9668: LD_INT 28
9670: PUSH
9671: LD_INT 29
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 33
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: LD_INT 35
9691: PUSH
9692: LD_INT 36
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 101
9735: PUSH
9736: LD_INT 102
9738: PUSH
9739: LD_INT 103
9741: PUSH
9742: LD_INT 104
9744: PUSH
9745: LD_INT 105
9747: PUSH
9748: LD_INT 106
9750: PUSH
9751: LD_INT 107
9753: PUSH
9754: LD_INT 108
9756: PUSH
9757: LD_INT 109
9759: PUSH
9760: LD_INT 110
9762: PUSH
9763: LD_INT 111
9765: PUSH
9766: LD_INT 112
9768: PUSH
9769: LD_INT 113
9771: PUSH
9772: LD_INT 114
9774: PUSH
9775: LD_INT 115
9777: PUSH
9778: LD_INT 116
9780: PUSH
9781: LD_INT 117
9783: PUSH
9784: LD_INT 118
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// if result then
9811: LD_VAR 0 2
9815: IFFALSE 10601
// begin normal :=  ;
9817: LD_ADDR_VAR 0 5
9821: PUSH
9822: LD_STRING 
9824: ST_TO_ADDR
// hardcore :=  ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_STRING 
9832: ST_TO_ADDR
// active :=  ;
9833: LD_ADDR_VAR 0 7
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// for i = 1 to normalCounter do
9841: LD_ADDR_VAR 0 8
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_EXP 25
9855: PUSH
9856: FOR_TO
9857: IFFALSE 9958
// begin tmp := 0 ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: LD_STRING 0
9866: ST_TO_ADDR
// if result [ 1 ] then
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: IFFALSE 9940
// if result [ 1 ] [ 1 ] = i then
9877: LD_VAR 0 2
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PUSH
9890: LD_VAR 0 8
9894: EQUAL
9895: IFFALSE 9940
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9897: LD_ADDR_VAR 0 2
9901: PUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 3
9926: PPUSH
9927: CALL_OW 1
9931: ST_TO_ADDR
// tmp := 1 ;
9932: LD_ADDR_VAR 0 3
9936: PUSH
9937: LD_STRING 1
9939: ST_TO_ADDR
// end ; normal := normal & tmp ;
9940: LD_ADDR_VAR 0 5
9944: PUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_VAR 0 3
9954: STR
9955: ST_TO_ADDR
// end ;
9956: GO 9856
9958: POP
9959: POP
// for i = 1 to hardcoreCounter do
9960: LD_ADDR_VAR 0 8
9964: PUSH
9965: DOUBLE
9966: LD_INT 1
9968: DEC
9969: ST_TO_ADDR
9970: LD_EXP 26
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10081
// begin tmp := 0 ;
9978: LD_ADDR_VAR 0 3
9982: PUSH
9983: LD_STRING 0
9985: ST_TO_ADDR
// if result [ 2 ] then
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: IFFALSE 10063
// if result [ 2 ] [ 1 ] = 100 + i then
9996: LD_VAR 0 2
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PUSH
10009: LD_INT 100
10011: PUSH
10012: LD_VAR 0 8
10016: PLUS
10017: EQUAL
10018: IFFALSE 10063
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 2
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 2
10040: ARRAY
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 3
10049: PPUSH
10050: CALL_OW 1
10054: ST_TO_ADDR
// tmp := 1 ;
10055: LD_ADDR_VAR 0 3
10059: PUSH
10060: LD_STRING 1
10062: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10063: LD_ADDR_VAR 0 6
10067: PUSH
10068: LD_VAR 0 6
10072: PUSH
10073: LD_VAR 0 3
10077: STR
10078: ST_TO_ADDR
// end ;
10079: GO 9975
10081: POP
10082: POP
// if isGameLoad then
10083: LD_VAR 0 1
10087: IFFALSE 10562
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10089: LD_ADDR_VAR 0 4
10093: PUSH
10094: LD_EXP 29
10098: PUSH
10099: LD_EXP 28
10103: PUSH
10104: LD_EXP 30
10108: PUSH
10109: LD_EXP 27
10113: PUSH
10114: LD_EXP 31
10118: PUSH
10119: LD_EXP 32
10123: PUSH
10124: LD_EXP 33
10128: PUSH
10129: LD_EXP 34
10133: PUSH
10134: LD_EXP 35
10138: PUSH
10139: LD_EXP 36
10143: PUSH
10144: LD_EXP 37
10148: PUSH
10149: LD_EXP 38
10153: PUSH
10154: LD_EXP 39
10158: PUSH
10159: LD_EXP 40
10163: PUSH
10164: LD_EXP 48
10168: PUSH
10169: LD_EXP 49
10173: PUSH
10174: LD_EXP 50
10178: PUSH
10179: LD_EXP 51
10183: PUSH
10184: LD_EXP 53
10188: PUSH
10189: LD_EXP 54
10193: PUSH
10194: LD_EXP 55
10198: PUSH
10199: LD_EXP 58
10203: PUSH
10204: LD_EXP 60
10208: PUSH
10209: LD_EXP 61
10213: PUSH
10214: LD_EXP 62
10218: PUSH
10219: LD_EXP 64
10223: PUSH
10224: LD_EXP 65
10228: PUSH
10229: LD_EXP 68
10233: PUSH
10234: LD_EXP 69
10238: PUSH
10239: LD_EXP 70
10243: PUSH
10244: LD_EXP 71
10248: PUSH
10249: LD_EXP 72
10253: PUSH
10254: LD_EXP 73
10258: PUSH
10259: LD_EXP 74
10263: PUSH
10264: LD_EXP 75
10268: PUSH
10269: LD_EXP 76
10273: PUSH
10274: LD_EXP 41
10278: PUSH
10279: LD_EXP 42
10283: PUSH
10284: LD_EXP 45
10288: PUSH
10289: LD_EXP 46
10293: PUSH
10294: LD_EXP 47
10298: PUSH
10299: LD_EXP 43
10303: PUSH
10304: LD_EXP 44
10308: PUSH
10309: LD_EXP 52
10313: PUSH
10314: LD_EXP 56
10318: PUSH
10319: LD_EXP 57
10323: PUSH
10324: LD_EXP 59
10328: PUSH
10329: LD_EXP 63
10333: PUSH
10334: LD_EXP 66
10338: PUSH
10339: LD_EXP 67
10343: PUSH
10344: LD_EXP 77
10348: PUSH
10349: LD_EXP 78
10353: PUSH
10354: LD_EXP 79
10358: PUSH
10359: LD_EXP 80
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// tmp :=  ;
10420: LD_ADDR_VAR 0 3
10424: PUSH
10425: LD_STRING 
10427: ST_TO_ADDR
// for i = 1 to normalCounter do
10428: LD_ADDR_VAR 0 8
10432: PUSH
10433: DOUBLE
10434: LD_INT 1
10436: DEC
10437: ST_TO_ADDR
10438: LD_EXP 25
10442: PUSH
10443: FOR_TO
10444: IFFALSE 10480
// begin if flags [ i ] then
10446: LD_VAR 0 4
10450: PUSH
10451: LD_VAR 0 8
10455: ARRAY
10456: IFFALSE 10478
// tmp := tmp & i & ; ;
10458: LD_ADDR_VAR 0 3
10462: PUSH
10463: LD_VAR 0 3
10467: PUSH
10468: LD_VAR 0 8
10472: STR
10473: PUSH
10474: LD_STRING ;
10476: STR
10477: ST_TO_ADDR
// end ;
10478: GO 10443
10480: POP
10481: POP
// for i = 1 to hardcoreCounter do
10482: LD_ADDR_VAR 0 8
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_EXP 26
10496: PUSH
10497: FOR_TO
10498: IFFALSE 10544
// begin if flags [ normalCounter + i ] then
10500: LD_VAR 0 4
10504: PUSH
10505: LD_EXP 25
10509: PUSH
10510: LD_VAR 0 8
10514: PLUS
10515: ARRAY
10516: IFFALSE 10542
// tmp := tmp & ( 100 + i ) & ; ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 100
10530: PUSH
10531: LD_VAR 0 8
10535: PLUS
10536: STR
10537: PUSH
10538: LD_STRING ;
10540: STR
10541: ST_TO_ADDR
// end ;
10542: GO 10497
10544: POP
10545: POP
// if tmp then
10546: LD_VAR 0 3
10550: IFFALSE 10562
// active := tmp ;
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: LD_VAR 0 3
10561: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10562: LD_STRING getStreamItemsFromMission("
10564: PUSH
10565: LD_VAR 0 5
10569: STR
10570: PUSH
10571: LD_STRING ","
10573: STR
10574: PUSH
10575: LD_VAR 0 6
10579: STR
10580: PUSH
10581: LD_STRING ","
10583: STR
10584: PUSH
10585: LD_VAR 0 7
10589: STR
10590: PUSH
10591: LD_STRING ")
10593: STR
10594: PPUSH
10595: CALL_OW 559
// end else
10599: GO 10608
// ToLua ( getStreamItemsFromMission("","","") ) ;
10601: LD_STRING getStreamItemsFromMission("","","")
10603: PPUSH
10604: CALL_OW 559
// end ;
10608: LD_VAR 0 2
10612: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10613: LD_EXP 24
10617: PUSH
10618: LD_EXP 29
10622: AND
10623: IFFALSE 10747
10625: GO 10627
10627: DISABLE
10628: LD_INT 0
10630: PPUSH
10631: PPUSH
// begin enable ;
10632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_OWVAR 2
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: LD_INT 34
10655: PUSH
10656: LD_INT 7
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 34
10665: PUSH
10666: LD_INT 45
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 34
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 34
10685: PUSH
10686: LD_INT 47
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: ST_TO_ADDR
// if not tmp then
10709: LD_VAR 0 2
10713: NOT
10714: IFFALSE 10718
// exit ;
10716: GO 10747
// for i in tmp do
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: LD_VAR 0 2
10727: PUSH
10728: FOR_IN
10729: IFFALSE 10745
// begin SetLives ( i , 0 ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 234
// end ;
10743: GO 10728
10745: POP
10746: POP
// end ;
10747: PPOPN 2
10749: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10750: LD_EXP 24
10754: PUSH
10755: LD_EXP 30
10759: AND
10760: IFFALSE 10844
10762: GO 10764
10764: DISABLE
10765: LD_INT 0
10767: PPUSH
10768: PPUSH
// begin enable ;
10769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_OWVAR 2
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 32
10789: PUSH
10790: LD_INT 3
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: ST_TO_ADDR
// if not tmp then
10806: LD_VAR 0 2
10810: NOT
10811: IFFALSE 10815
// exit ;
10813: GO 10844
// for i in tmp do
10815: LD_ADDR_VAR 0 1
10819: PUSH
10820: LD_VAR 0 2
10824: PUSH
10825: FOR_IN
10826: IFFALSE 10842
// begin SetLives ( i , 0 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 0
10835: PPUSH
10836: CALL_OW 234
// end ;
10840: GO 10825
10842: POP
10843: POP
// end ;
10844: PPOPN 2
10846: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10847: LD_EXP 24
10851: PUSH
10852: LD_EXP 27
10856: AND
10857: IFFALSE 10950
10859: GO 10861
10861: DISABLE
10862: LD_INT 0
10864: PPUSH
// begin enable ;
10865: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_OWVAR 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 9
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 8
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: PUSH
10931: FOR_IN
10932: IFFALSE 10948
// begin SetClass ( i , 1 ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 336
// end ;
10946: GO 10931
10948: POP
10949: POP
// end ;
10950: PPOPN 1
10952: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10953: LD_EXP 24
10957: PUSH
10958: LD_EXP 28
10962: AND
10963: PUSH
10964: LD_OWVAR 65
10968: PUSH
10969: LD_INT 7
10971: LESS
10972: AND
10973: IFFALSE 10987
10975: GO 10977
10977: DISABLE
// begin enable ;
10978: ENABLE
// game_speed := 7 ;
10979: LD_ADDR_OWVAR 65
10983: PUSH
10984: LD_INT 7
10986: ST_TO_ADDR
// end ;
10987: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 31
10997: AND
10998: IFFALSE 11200
11000: GO 11002
11002: DISABLE
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
11007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: LD_INT 81
11015: PUSH
11016: LD_OWVAR 2
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 21
11027: PUSH
11028: LD_INT 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 69
11043: ST_TO_ADDR
// if not tmp then
11044: LD_VAR 0 3
11048: NOT
11049: IFFALSE 11053
// exit ;
11051: GO 11200
// if tmp > 5 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 5
11060: GREATER
11061: IFFALSE 11073
// k := 5 else
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 5
11070: ST_TO_ADDR
11071: GO 11083
// k := tmp ;
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_VAR 0 3
11082: ST_TO_ADDR
// for i := 1 to k do
11083: LD_ADDR_VAR 0 1
11087: PUSH
11088: DOUBLE
11089: LD_INT 1
11091: DEC
11092: ST_TO_ADDR
11093: LD_VAR 0 2
11097: PUSH
11098: FOR_TO
11099: IFFALSE 11198
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_VAR 0 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_INT 4
11119: MOD
11120: PUSH
11121: LD_INT 1
11123: PLUS
11124: PPUSH
11125: CALL_OW 259
11129: PUSH
11130: LD_INT 10
11132: LESS
11133: IFFALSE 11196
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11135: LD_VAR 0 3
11139: PUSH
11140: LD_VAR 0 1
11144: ARRAY
11145: PPUSH
11146: LD_VAR 0 1
11150: PUSH
11151: LD_INT 4
11153: MOD
11154: PUSH
11155: LD_INT 1
11157: PLUS
11158: PPUSH
11159: LD_VAR 0 3
11163: PUSH
11164: LD_VAR 0 1
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 1
11174: PUSH
11175: LD_INT 4
11177: MOD
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: PPUSH
11183: CALL_OW 259
11187: PUSH
11188: LD_INT 1
11190: PLUS
11191: PPUSH
11192: CALL_OW 237
11196: GO 11098
11198: POP
11199: POP
// end ;
11200: PPOPN 3
11202: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11203: LD_EXP 24
11207: PUSH
11208: LD_EXP 32
11212: AND
11213: IFFALSE 11233
11215: GO 11217
11217: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11218: LD_INT 4
11220: PPUSH
11221: LD_OWVAR 2
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 324
11233: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11234: LD_EXP 24
11238: PUSH
11239: LD_EXP 61
11243: AND
11244: IFFALSE 11264
11246: GO 11248
11248: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11249: LD_INT 19
11251: PPUSH
11252: LD_OWVAR 2
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 324
11264: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11265: LD_EXP 24
11269: PUSH
11270: LD_EXP 33
11274: AND
11275: IFFALSE 11377
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
// begin enable ;
11284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_OWVAR 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 34
11307: PUSH
11308: LD_INT 11
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 34
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: ST_TO_ADDR
// if not tmp then
11339: LD_VAR 0 2
11343: NOT
11344: IFFALSE 11348
// exit ;
11346: GO 11377
// for i in tmp do
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: LD_VAR 0 2
11357: PUSH
11358: FOR_IN
11359: IFFALSE 11375
// begin SetLives ( i , 0 ) ;
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_INT 0
11368: PPUSH
11369: CALL_OW 234
// end ;
11373: GO 11358
11375: POP
11376: POP
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11380: LD_EXP 24
11384: PUSH
11385: LD_EXP 34
11389: AND
11390: IFFALSE 11410
11392: GO 11394
11394: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11395: LD_INT 32
11397: PPUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 324
11410: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11411: LD_EXP 24
11415: PUSH
11416: LD_EXP 35
11420: AND
11421: IFFALSE 11602
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 33
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 69
11466: ST_TO_ADDR
// if not tmp then
11467: LD_VAR 0 2
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11602
// side := 0 ;
11476: LD_ADDR_VAR 0 3
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// for i := 1 to 8 do
11484: LD_ADDR_VAR 0 1
11488: PUSH
11489: DOUBLE
11490: LD_INT 1
11492: DEC
11493: ST_TO_ADDR
11494: LD_INT 8
11496: PUSH
11497: FOR_TO
11498: IFFALSE 11546
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11500: LD_OWVAR 2
11504: PUSH
11505: LD_VAR 0 1
11509: NONEQUAL
11510: PUSH
11511: LD_OWVAR 2
11515: PPUSH
11516: LD_VAR 0 1
11520: PPUSH
11521: CALL_OW 81
11525: PUSH
11526: LD_INT 2
11528: EQUAL
11529: AND
11530: IFFALSE 11544
// begin side := i ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: ST_TO_ADDR
// break ;
11542: GO 11546
// end ;
11544: GO 11497
11546: POP
11547: POP
// if not side then
11548: LD_VAR 0 3
11552: NOT
11553: IFFALSE 11557
// exit ;
11555: GO 11602
// for i := 1 to tmp do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_VAR 0 2
11571: PUSH
11572: FOR_TO
11573: IFFALSE 11600
// if Prob ( 60 ) then
11575: LD_INT 60
11577: PPUSH
11578: CALL_OW 13
11582: IFFALSE 11598
// SetSide ( i , side ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: CALL_OW 235
11598: GO 11572
11600: POP
11601: POP
// end ;
11602: PPOPN 3
11604: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11605: LD_EXP 24
11609: PUSH
11610: LD_EXP 37
11614: AND
11615: IFFALSE 11734
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_OWVAR 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 3
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 0
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11732
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 257
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 4
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: IN
11708: IFFALSE 11730
// SetClass ( un , rand ( 1 , 4 ) ) ;
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_INT 4
11720: PPUSH
11721: CALL_OW 12
11725: PPUSH
11726: CALL_OW 336
11730: GO 11677
11732: POP
11733: POP
// end ;
11734: PPOPN 1
11736: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11737: LD_EXP 24
11741: PUSH
11742: LD_EXP 36
11746: AND
11747: IFFALSE 11826
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: ST_TO_ADDR
// if not tmp then
11791: LD_VAR 0 1
11795: NOT
11796: IFFALSE 11800
// exit ;
11798: GO 11826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 1
11807: PPUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: CALL_OW 12
11817: ARRAY
11818: PPUSH
11819: LD_INT 100
11821: PPUSH
11822: CALL_OW 234
// end ;
11826: PPOPN 1
11828: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11829: LD_EXP 24
11833: PUSH
11834: LD_EXP 38
11838: AND
11839: IFFALSE 11937
11841: GO 11843
11843: DISABLE
11844: LD_INT 0
11846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: LD_OWVAR 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: ST_TO_ADDR
// if not tmp then
11883: LD_VAR 0 1
11887: NOT
11888: IFFALSE 11892
// exit ;
11890: GO 11937
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: PPUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 12
11909: ARRAY
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: LD_INT 4
11916: PPUSH
11917: CALL_OW 12
11921: PPUSH
11922: LD_INT 3000
11924: PPUSH
11925: LD_INT 9000
11927: PPUSH
11928: CALL_OW 12
11932: PPUSH
11933: CALL_OW 492
// end ;
11937: PPOPN 1
11939: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11940: LD_EXP 24
11944: PUSH
11945: LD_EXP 39
11949: AND
11950: IFFALSE 11970
11952: GO 11954
11954: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11955: LD_INT 1
11957: PPUSH
11958: LD_OWVAR 2
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 324
11970: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11971: LD_EXP 24
11975: PUSH
11976: LD_EXP 40
11980: AND
11981: IFFALSE 12064
11983: GO 11985
11985: DISABLE
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_OWVAR 2
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 21
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: ST_TO_ADDR
// if not tmp then
12026: LD_VAR 0 2
12030: NOT
12031: IFFALSE 12035
// exit ;
12033: GO 12064
// for i in tmp do
12035: LD_ADDR_VAR 0 1
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12062
// SetBLevel ( i , 10 ) ;
12048: LD_VAR 0 1
12052: PPUSH
12053: LD_INT 10
12055: PPUSH
12056: CALL_OW 241
12060: GO 12045
12062: POP
12063: POP
// end ;
12064: PPOPN 2
12066: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12067: LD_EXP 24
12071: PUSH
12072: LD_EXP 41
12076: AND
12077: IFFALSE 12188
12079: GO 12081
12081: DISABLE
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12087: LD_ADDR_VAR 0 3
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_OWVAR 2
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 25
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 3
12127: NOT
12128: IFFALSE 12132
// exit ;
12130: GO 12188
// un := tmp [ rand ( 1 , tmp ) ] ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: CALL_OW 12
12154: ARRAY
12155: ST_TO_ADDR
// if Crawls ( un ) then
12156: LD_VAR 0 2
12160: PPUSH
12161: CALL_OW 318
12165: IFFALSE 12176
// ComWalk ( un ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12176: LD_VAR 0 2
12180: PPUSH
12181: LD_INT 5
12183: PPUSH
12184: CALL_OW 336
// end ;
12188: PPOPN 3
12190: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12191: LD_EXP 24
12195: PUSH
12196: LD_EXP 42
12200: AND
12201: PUSH
12202: LD_OWVAR 67
12206: PUSH
12207: LD_INT 4
12209: LESS
12210: AND
12211: IFFALSE 12230
12213: GO 12215
12215: DISABLE
// begin Difficulty := Difficulty + 1 ;
12216: LD_ADDR_OWVAR 67
12220: PUSH
12221: LD_OWVAR 67
12225: PUSH
12226: LD_INT 1
12228: PLUS
12229: ST_TO_ADDR
// end ;
12230: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12231: LD_EXP 24
12235: PUSH
12236: LD_EXP 43
12240: AND
12241: IFFALSE 12344
12243: GO 12245
12245: DISABLE
12246: LD_INT 0
12248: PPUSH
// begin for i := 1 to 5 do
12249: LD_ADDR_VAR 0 1
12253: PUSH
12254: DOUBLE
12255: LD_INT 1
12257: DEC
12258: ST_TO_ADDR
12259: LD_INT 5
12261: PUSH
12262: FOR_TO
12263: IFFALSE 12342
// begin uc_nation := nation_nature ;
12265: LD_ADDR_OWVAR 21
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// uc_side := 0 ;
12273: LD_ADDR_OWVAR 20
12277: PUSH
12278: LD_INT 0
12280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12281: LD_ADDR_OWVAR 29
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 12
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: ST_TO_ADDR
// hc_agressivity := 20 ;
12296: LD_ADDR_OWVAR 35
12300: PUSH
12301: LD_INT 20
12303: ST_TO_ADDR
// hc_class := class_tiger ;
12304: LD_ADDR_OWVAR 28
12308: PUSH
12309: LD_INT 14
12311: ST_TO_ADDR
// hc_gallery :=  ;
12312: LD_ADDR_OWVAR 33
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// hc_name :=  ;
12320: LD_ADDR_OWVAR 26
12324: PUSH
12325: LD_STRING 
12327: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12328: CALL_OW 44
12332: PPUSH
12333: LD_INT 0
12335: PPUSH
12336: CALL_OW 51
// end ;
12340: GO 12262
12342: POP
12343: POP
// end ;
12344: PPOPN 1
12346: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12347: LD_EXP 24
12351: PUSH
12352: LD_EXP 44
12356: AND
12357: IFFALSE 12366
12359: GO 12361
12361: DISABLE
// StreamSibBomb ;
12362: CALL 12367 0 0
12366: END
// export function StreamSibBomb ; var i , x , y ; begin
12367: LD_INT 0
12369: PPUSH
12370: PPUSH
12371: PPUSH
12372: PPUSH
// result := false ;
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// for i := 1 to 16 do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_INT 16
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12594
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_INT 10
12404: PUSH
12405: LD_INT 20
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 40
12413: PUSH
12414: LD_INT 50
12416: PUSH
12417: LD_INT 60
12419: PUSH
12420: LD_INT 70
12422: PUSH
12423: LD_INT 80
12425: PUSH
12426: LD_INT 90
12428: PUSH
12429: LD_INT 100
12431: PUSH
12432: LD_INT 110
12434: PUSH
12435: LD_INT 120
12437: PUSH
12438: LD_INT 130
12440: PUSH
12441: LD_INT 140
12443: PUSH
12444: LD_INT 150
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 15
12469: PPUSH
12470: CALL_OW 12
12474: ARRAY
12475: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12476: LD_ADDR_VAR 0 4
12480: PUSH
12481: LD_INT 10
12483: PUSH
12484: LD_INT 20
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 40
12492: PUSH
12493: LD_INT 50
12495: PUSH
12496: LD_INT 60
12498: PUSH
12499: LD_INT 70
12501: PUSH
12502: LD_INT 80
12504: PUSH
12505: LD_INT 90
12507: PUSH
12508: LD_INT 100
12510: PUSH
12511: LD_INT 110
12513: PUSH
12514: LD_INT 120
12516: PUSH
12517: LD_INT 130
12519: PUSH
12520: LD_INT 140
12522: PUSH
12523: LD_INT 150
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 15
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: ST_TO_ADDR
// if ValidHex ( x , y ) then
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_VAR 0 4
12564: PPUSH
12565: CALL_OW 488
12569: IFFALSE 12592
// begin result := [ x , y ] ;
12571: LD_ADDR_VAR 0 1
12575: PUSH
12576: LD_VAR 0 3
12580: PUSH
12581: LD_VAR 0 4
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: ST_TO_ADDR
// break ;
12590: GO 12594
// end ; end ;
12592: GO 12394
12594: POP
12595: POP
// if result then
12596: LD_VAR 0 1
12600: IFFALSE 12660
// begin ToLua ( playSibBomb() ) ;
12602: LD_STRING playSibBomb()
12604: PPUSH
12605: CALL_OW 559
// wait ( 0 0$14 ) ;
12609: LD_INT 490
12611: PPUSH
12612: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PPUSH
12634: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12638: LD_VAR 0 1
12642: PUSH
12643: LD_INT 1
12645: ARRAY
12646: PPUSH
12647: LD_VAR 0 1
12651: PUSH
12652: LD_INT 2
12654: ARRAY
12655: PPUSH
12656: CALL_OW 429
// end ; end ;
12660: LD_VAR 0 1
12664: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12665: LD_EXP 24
12669: PUSH
12670: LD_EXP 46
12674: AND
12675: IFFALSE 12687
12677: GO 12679
12679: DISABLE
// YouLost (  ) ;
12680: LD_STRING 
12682: PPUSH
12683: CALL_OW 104
12687: END
// every 0 0$1 trigger StreamModeActive and sFog do
12688: LD_EXP 24
12692: PUSH
12693: LD_EXP 45
12697: AND
12698: IFFALSE 12712
12700: GO 12702
12702: DISABLE
// FogOff ( your_side ) ;
12703: LD_OWVAR 2
12707: PPUSH
12708: CALL_OW 344
12712: END
// every 0 0$1 trigger StreamModeActive and sSun do
12713: LD_EXP 24
12717: PUSH
12718: LD_EXP 47
12722: AND
12723: IFFALSE 12751
12725: GO 12727
12727: DISABLE
// begin solar_recharge_percent := 0 ;
12728: LD_ADDR_OWVAR 79
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12736: LD_INT 10500
12738: PPUSH
12739: CALL_OW 67
// solar_recharge_percent := 100 ;
12743: LD_ADDR_OWVAR 79
12747: PUSH
12748: LD_INT 100
12750: ST_TO_ADDR
// end ;
12751: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12752: LD_EXP 24
12756: PUSH
12757: LD_EXP 48
12761: AND
12762: IFFALSE 13001
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin tmp := [ ] ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: EMPTY
12778: ST_TO_ADDR
// for i := 1 to 6 do
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: DOUBLE
12785: LD_INT 1
12787: DEC
12788: ST_TO_ADDR
12789: LD_INT 6
12791: PUSH
12792: FOR_TO
12793: IFFALSE 12898
// begin uc_nation := nation_nature ;
12795: LD_ADDR_OWVAR 21
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// uc_side := 0 ;
12803: LD_ADDR_OWVAR 20
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12811: LD_ADDR_OWVAR 29
12815: PUSH
12816: LD_INT 12
12818: PUSH
12819: LD_INT 12
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: ST_TO_ADDR
// hc_agressivity := 20 ;
12826: LD_ADDR_OWVAR 35
12830: PUSH
12831: LD_INT 20
12833: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12834: LD_ADDR_OWVAR 28
12838: PUSH
12839: LD_INT 17
12841: ST_TO_ADDR
// hc_gallery :=  ;
12842: LD_ADDR_OWVAR 33
12846: PUSH
12847: LD_STRING 
12849: ST_TO_ADDR
// hc_name :=  ;
12850: LD_ADDR_OWVAR 26
12854: PUSH
12855: LD_STRING 
12857: ST_TO_ADDR
// un := CreateHuman ;
12858: LD_ADDR_VAR 0 2
12862: PUSH
12863: CALL_OW 44
12867: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12868: LD_VAR 0 2
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 51
// tmp := tmp ^ un ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_VAR 0 3
12889: PUSH
12890: LD_VAR 0 2
12894: ADD
12895: ST_TO_ADDR
// end ;
12896: GO 12792
12898: POP
12899: POP
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// for un in tmp do
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_VAR 0 3
12916: PUSH
12917: FOR_IN
12918: IFFALSE 12992
// begin if IsDead ( un ) then
12920: LD_VAR 0 2
12924: PPUSH
12925: CALL_OW 301
12929: IFFALSE 12949
// begin tmp := tmp diff un ;
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: LD_VAR 0 3
12940: PUSH
12941: LD_VAR 0 2
12945: DIFF
12946: ST_TO_ADDR
// continue ;
12947: GO 12917
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12949: LD_VAR 0 2
12953: PPUSH
12954: LD_INT 3
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_INT 0
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 74
12985: PPUSH
12986: CALL_OW 115
// end ;
12990: GO 12917
12992: POP
12993: POP
// until not tmp ;
12994: LD_VAR 0 3
12998: NOT
12999: IFFALSE 12900
// end ;
13001: PPOPN 3
13003: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13004: LD_EXP 24
13008: PUSH
13009: LD_EXP 49
13013: AND
13014: IFFALSE 13068
13016: GO 13018
13018: DISABLE
// begin ToLua ( displayTroll(); ) ;
13019: LD_STRING displayTroll();
13021: PPUSH
13022: CALL_OW 559
// wait ( 3 3$00 ) ;
13026: LD_INT 6300
13028: PPUSH
13029: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13033: LD_STRING hideTroll();
13035: PPUSH
13036: CALL_OW 559
// wait ( 1 1$00 ) ;
13040: LD_INT 2100
13042: PPUSH
13043: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13047: LD_STRING displayTroll();
13049: PPUSH
13050: CALL_OW 559
// wait ( 1 1$00 ) ;
13054: LD_INT 2100
13056: PPUSH
13057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13061: LD_STRING hideTroll();
13063: PPUSH
13064: CALL_OW 559
// end ;
13068: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13069: LD_EXP 24
13073: PUSH
13074: LD_EXP 50
13078: AND
13079: IFFALSE 13142
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin p := 0 ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// repeat game_speed := 1 ;
13095: LD_ADDR_OWVAR 65
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13103: LD_INT 35
13105: PPUSH
13106: CALL_OW 67
// p := p + 1 ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 1
13122: PLUS
13123: ST_TO_ADDR
// until p >= 60 ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 60
13131: GREATEREQUAL
13132: IFFALSE 13095
// game_speed := 4 ;
13134: LD_ADDR_OWVAR 65
13138: PUSH
13139: LD_INT 4
13141: ST_TO_ADDR
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13145: LD_EXP 24
13149: PUSH
13150: LD_EXP 51
13154: AND
13155: IFFALSE 13301
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
13163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: LD_OWVAR 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: LD_INT 30
13186: PUSH
13187: LD_INT 0
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 30
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not depot then
13218: LD_VAR 0 1
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13301
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_VAR 0 1
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: PPUSH
13251: CALL_OW 274
13255: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13256: LD_VAR 0 2
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: LD_INT 0
13266: PPUSH
13267: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13271: LD_VAR 0 2
13275: PPUSH
13276: LD_INT 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_INT 3
13293: PPUSH
13294: LD_INT 0
13296: PPUSH
13297: CALL_OW 277
// end ;
13301: PPOPN 2
13303: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13304: LD_EXP 24
13308: PUSH
13309: LD_EXP 52
13313: AND
13314: IFFALSE 13411
13316: GO 13318
13318: DISABLE
13319: LD_INT 0
13321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_OWVAR 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: LD_INT 23
13354: PUSH
13355: LD_INT 0
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: ST_TO_ADDR
// if not tmp then
13376: LD_VAR 0 1
13380: NOT
13381: IFFALSE 13385
// exit ;
13383: GO 13411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 1
13392: PPUSH
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 12
13402: ARRAY
13403: PPUSH
13404: LD_INT 200
13406: PPUSH
13407: CALL_OW 234
// end ;
13411: PPOPN 1
13413: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13414: LD_EXP 24
13418: PUSH
13419: LD_EXP 53
13423: AND
13424: IFFALSE 13503
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_OWVAR 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 2
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 1
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13477: LD_VAR 0 1
13481: PUSH
13482: LD_INT 1
13484: PPUSH
13485: LD_VAR 0 1
13489: PPUSH
13490: CALL_OW 12
13494: ARRAY
13495: PPUSH
13496: LD_INT 60
13498: PPUSH
13499: CALL_OW 234
// end ;
13503: PPOPN 1
13505: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13506: LD_EXP 24
13510: PUSH
13511: LD_EXP 54
13515: AND
13516: IFFALSE 13615
13518: GO 13520
13520: DISABLE
13521: LD_INT 0
13523: PPUSH
13524: PPUSH
// begin enable ;
13525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13526: LD_ADDR_VAR 0 1
13530: PUSH
13531: LD_INT 22
13533: PUSH
13534: LD_OWVAR 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 61
13545: PUSH
13546: EMPTY
13547: LIST
13548: PUSH
13549: LD_INT 33
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// if not tmp then
13569: LD_VAR 0 1
13573: NOT
13574: IFFALSE 13578
// exit ;
13576: GO 13615
// for i in tmp do
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_VAR 0 1
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13613
// if IsControledBy ( i ) then
13591: LD_VAR 0 2
13595: PPUSH
13596: CALL_OW 312
13600: IFFALSE 13611
// ComUnlink ( i ) ;
13602: LD_VAR 0 2
13606: PPUSH
13607: CALL_OW 136
13611: GO 13588
13613: POP
13614: POP
// end ;
13615: PPOPN 2
13617: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13618: LD_EXP 24
13622: PUSH
13623: LD_EXP 55
13627: AND
13628: IFFALSE 13768
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
// begin ToLua ( displayPowell(); ) ;
13637: LD_STRING displayPowell();
13639: PPUSH
13640: CALL_OW 559
// uc_side := 0 ;
13644: LD_ADDR_OWVAR 20
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// uc_nation := 2 ;
13652: LD_ADDR_OWVAR 21
13656: PUSH
13657: LD_INT 2
13659: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13660: LD_ADDR_OWVAR 37
13664: PUSH
13665: LD_INT 14
13667: ST_TO_ADDR
// vc_engine := engine_siberite ;
13668: LD_ADDR_OWVAR 39
13672: PUSH
13673: LD_INT 3
13675: ST_TO_ADDR
// vc_control := control_apeman ;
13676: LD_ADDR_OWVAR 38
13680: PUSH
13681: LD_INT 5
13683: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13684: LD_ADDR_OWVAR 40
13688: PUSH
13689: LD_INT 29
13691: ST_TO_ADDR
// un := CreateVehicle ;
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: CALL_OW 45
13701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: LD_INT 1
13709: PPUSH
13710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13714: LD_INT 35
13716: PPUSH
13717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13721: LD_VAR 0 2
13725: PPUSH
13726: LD_INT 22
13728: PUSH
13729: LD_OWVAR 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 69
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 74
13752: PPUSH
13753: CALL_OW 115
// until IsDead ( un ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: CALL_OW 301
13766: IFFALSE 13714
// end ;
13768: PPOPN 2
13770: END
// every 0 0$1 trigger StreamModeActive and sStu do
13771: LD_EXP 24
13775: PUSH
13776: LD_EXP 63
13780: AND
13781: IFFALSE 13797
13783: GO 13785
13785: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13786: LD_STRING displayStucuk();
13788: PPUSH
13789: CALL_OW 559
// ResetFog ;
13793: CALL_OW 335
// end ;
13797: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13798: LD_EXP 24
13802: PUSH
13803: LD_EXP 56
13807: AND
13808: IFFALSE 13949
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
13816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_OWVAR 2
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: ST_TO_ADDR
// if not tmp then
13853: LD_VAR 0 2
13857: NOT
13858: IFFALSE 13862
// exit ;
13860: GO 13949
// un := tmp [ rand ( 1 , tmp ) ] ;
13862: LD_ADDR_VAR 0 1
13866: PUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_INT 1
13874: PPUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: CALL_OW 12
13884: ARRAY
13885: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13886: LD_VAR 0 1
13890: PPUSH
13891: LD_INT 0
13893: PPUSH
13894: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13898: LD_VAR 0 1
13902: PPUSH
13903: LD_OWVAR 3
13907: PUSH
13908: LD_VAR 0 1
13912: DIFF
13913: PPUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 74
13923: PPUSH
13924: CALL_OW 115
// wait ( 0 0$20 ) ;
13928: LD_INT 700
13930: PPUSH
13931: CALL_OW 67
// SetSide ( un , your_side ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: CALL_OW 235
// end ;
13949: PPOPN 2
13951: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13952: LD_EXP 24
13956: PUSH
13957: LD_EXP 57
13961: AND
13962: IFFALSE 14068
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_OWVAR 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 30
13992: PUSH
13993: LD_INT 0
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 69
14023: ST_TO_ADDR
// if not depot then
14024: LD_VAR 0 1
14028: NOT
14029: IFFALSE 14033
// exit ;
14031: GO 14068
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14033: LD_VAR 0 1
14037: PUSH
14038: LD_INT 1
14040: ARRAY
14041: PPUSH
14042: CALL_OW 250
14046: PPUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: CALL_OW 251
14060: PPUSH
14061: LD_INT 70
14063: PPUSH
14064: CALL_OW 495
// end ;
14068: PPOPN 1
14070: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14071: LD_EXP 24
14075: PUSH
14076: LD_EXP 58
14080: AND
14081: IFFALSE 14292
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14093: LD_ADDR_VAR 0 5
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PPUSH
14124: CALL_OW 69
14128: ST_TO_ADDR
// if not tmp then
14129: LD_VAR 0 5
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14292
// for i in tmp do
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: LD_VAR 0 5
14147: PUSH
14148: FOR_IN
14149: IFFALSE 14290
// begin d := rand ( 0 , 5 ) ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_INT 0
14158: PPUSH
14159: LD_INT 5
14161: PPUSH
14162: CALL_OW 12
14166: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: LD_INT 3
14189: PPUSH
14190: LD_INT 12
14192: PPUSH
14193: CALL_OW 12
14197: PPUSH
14198: CALL_OW 272
14202: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_VAR 0 1
14212: PPUSH
14213: CALL_OW 251
14217: PPUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 3
14225: PPUSH
14226: LD_INT 12
14228: PPUSH
14229: CALL_OW 12
14233: PPUSH
14234: CALL_OW 273
14238: ST_TO_ADDR
// if ValidHex ( x , y ) then
14239: LD_VAR 0 2
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 488
14253: IFFALSE 14288
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14255: LD_VAR 0 1
14259: PPUSH
14260: LD_VAR 0 2
14264: PPUSH
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 3
14272: PPUSH
14273: LD_INT 6
14275: PPUSH
14276: CALL_OW 12
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 483
// end ;
14288: GO 14148
14290: POP
14291: POP
// end ;
14292: PPOPN 5
14294: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14295: LD_EXP 24
14299: PUSH
14300: LD_EXP 59
14304: AND
14305: IFFALSE 14399
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14314: LD_ADDR_VAR 0 2
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_OWVAR 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 32
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: ST_TO_ADDR
// if not tmp then
14361: LD_VAR 0 2
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14399
// for i in tmp do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_VAR 0 2
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14397
// SetFuel ( i , 0 ) ;
14383: LD_VAR 0 1
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 240
14395: GO 14380
14397: POP
14398: POP
// end ;
14399: PPOPN 2
14401: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14402: LD_EXP 24
14406: PUSH
14407: LD_EXP 60
14411: AND
14412: IFFALSE 14478
14414: GO 14416
14416: DISABLE
14417: LD_INT 0
14419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_OWVAR 2
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 29
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: ST_TO_ADDR
// if not tmp then
14456: LD_VAR 0 1
14460: NOT
14461: IFFALSE 14465
// exit ;
14463: GO 14478
// DestroyUnit ( tmp [ 1 ] ) ;
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 65
// end ;
14478: PPOPN 1
14480: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14481: LD_EXP 24
14485: PUSH
14486: LD_EXP 62
14490: AND
14491: IFFALSE 14620
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
// begin uc_side := 0 ;
14499: LD_ADDR_OWVAR 20
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// uc_nation := nation_arabian ;
14507: LD_ADDR_OWVAR 21
14511: PUSH
14512: LD_INT 2
14514: ST_TO_ADDR
// hc_gallery :=  ;
14515: LD_ADDR_OWVAR 33
14519: PUSH
14520: LD_STRING 
14522: ST_TO_ADDR
// hc_name :=  ;
14523: LD_ADDR_OWVAR 26
14527: PUSH
14528: LD_STRING 
14530: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 11
14536: PPUSH
14537: LD_INT 10
14539: PPUSH
14540: CALL_OW 380
// un := CreateHuman ;
14544: LD_ADDR_VAR 0 1
14548: PUSH
14549: CALL_OW 44
14553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_INT 1
14561: PPUSH
14562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14566: LD_INT 35
14568: PPUSH
14569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 22
14580: PUSH
14581: LD_OWVAR 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PPUSH
14590: CALL_OW 69
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 74
14604: PPUSH
14605: CALL_OW 115
// until IsDead ( un ) ;
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 301
14618: IFFALSE 14566
// end ;
14620: PPOPN 1
14622: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14623: LD_EXP 24
14627: PUSH
14628: LD_EXP 64
14632: AND
14633: IFFALSE 14645
14635: GO 14637
14637: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14638: LD_STRING earthquake(getX(game), 0, 32)
14640: PPUSH
14641: CALL_OW 559
14645: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14646: LD_EXP 24
14650: PUSH
14651: LD_EXP 65
14655: AND
14656: IFFALSE 14747
14658: GO 14660
14660: DISABLE
14661: LD_INT 0
14663: PPUSH
// begin enable ;
14664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_OWVAR 2
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 33
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: ST_TO_ADDR
// if not tmp then
14712: LD_VAR 0 1
14716: NOT
14717: IFFALSE 14721
// exit ;
14719: GO 14747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14721: LD_VAR 0 1
14725: PUSH
14726: LD_INT 1
14728: PPUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 12
14738: ARRAY
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 234
// end ;
14747: PPOPN 1
14749: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14750: LD_EXP 24
14754: PUSH
14755: LD_EXP 66
14759: AND
14760: IFFALSE 14901
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
14769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_OWVAR 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: ST_TO_ADDR
// if not tmp then
14806: LD_VAR 0 3
14810: NOT
14811: IFFALSE 14815
// exit ;
14813: GO 14901
// un := tmp [ rand ( 1 , tmp ) ] ;
14815: LD_ADDR_VAR 0 2
14819: PUSH
14820: LD_VAR 0 3
14824: PUSH
14825: LD_INT 1
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 12
14837: ARRAY
14838: ST_TO_ADDR
// if Crawls ( un ) then
14839: LD_VAR 0 2
14843: PPUSH
14844: CALL_OW 318
14848: IFFALSE 14859
// ComWalk ( un ) ;
14850: LD_VAR 0 2
14854: PPUSH
14855: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_INT 9
14866: PPUSH
14867: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14871: LD_INT 28
14873: PPUSH
14874: LD_OWVAR 2
14878: PPUSH
14879: LD_INT 2
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14886: LD_INT 29
14888: PPUSH
14889: LD_OWVAR 2
14893: PPUSH
14894: LD_INT 2
14896: PPUSH
14897: CALL_OW 322
// end ;
14901: PPOPN 3
14903: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14904: LD_EXP 24
14908: PUSH
14909: LD_EXP 67
14913: AND
14914: IFFALSE 15025
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 25
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 3
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 15025
// un := tmp [ rand ( 1 , tmp ) ] ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_VAR 0 3
14978: PUSH
14979: LD_INT 1
14981: PPUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: CALL_OW 12
14991: ARRAY
14992: ST_TO_ADDR
// if Crawls ( un ) then
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 318
15002: IFFALSE 15013
// ComWalk ( un ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_INT 8
15020: PPUSH
15021: CALL_OW 336
// end ;
15025: PPOPN 3
15027: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15028: LD_EXP 24
15032: PUSH
15033: LD_EXP 68
15037: AND
15038: IFFALSE 15182
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 34
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 34
15089: PUSH
15090: LD_INT 51
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 34
15099: PUSH
15100: LD_INT 32
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// if not tmp then
15123: LD_VAR 0 2
15127: NOT
15128: IFFALSE 15132
// exit ;
15130: GO 15182
// for i in tmp do
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: FOR_IN
15143: IFFALSE 15180
// if GetCargo ( i , mat_artifact ) = 0 then
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 4
15152: PPUSH
15153: CALL_OW 289
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: IFFALSE 15178
// SetCargo ( i , mat_siberit , 100 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 3
15170: PPUSH
15171: LD_INT 100
15173: PPUSH
15174: CALL_OW 290
15178: GO 15142
15180: POP
15181: POP
// end ;
15182: PPOPN 2
15184: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15185: LD_EXP 24
15189: PUSH
15190: LD_EXP 69
15194: AND
15195: IFFALSE 15378
15197: GO 15199
15199: DISABLE
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_INT 22
15211: PUSH
15212: LD_OWVAR 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 69
15225: ST_TO_ADDR
// if not tmp then
15226: LD_VAR 0 2
15230: NOT
15231: IFFALSE 15235
// exit ;
15233: GO 15378
// for i := 1 to 2 do
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: DOUBLE
15241: LD_INT 1
15243: DEC
15244: ST_TO_ADDR
15245: LD_INT 2
15247: PUSH
15248: FOR_TO
15249: IFFALSE 15376
// begin uc_side := your_side ;
15251: LD_ADDR_OWVAR 20
15255: PUSH
15256: LD_OWVAR 2
15260: ST_TO_ADDR
// uc_nation := nation_american ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// vc_chassis := us_morphling ;
15269: LD_ADDR_OWVAR 37
15273: PUSH
15274: LD_INT 5
15276: ST_TO_ADDR
// vc_engine := engine_siberite ;
15277: LD_ADDR_OWVAR 39
15281: PUSH
15282: LD_INT 3
15284: ST_TO_ADDR
// vc_control := control_computer ;
15285: LD_ADDR_OWVAR 38
15289: PUSH
15290: LD_INT 3
15292: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15293: LD_ADDR_OWVAR 40
15297: PUSH
15298: LD_INT 10
15300: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 310
15314: NOT
15315: IFFALSE 15362
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15317: CALL_OW 45
15321: PPUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 250
15335: PPUSH
15336: LD_VAR 0 2
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: CALL_OW 251
15349: PPUSH
15350: LD_INT 12
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 50
15360: GO 15374
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15362: CALL_OW 45
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 51
// end ;
15374: GO 15248
15376: POP
15377: POP
// end ;
15378: PPOPN 2
15380: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15381: LD_EXP 24
15385: PUSH
15386: LD_EXP 70
15390: AND
15391: IFFALSE 15613
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15404: LD_ADDR_VAR 0 6
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_OWVAR 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 21
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 3
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 6
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15613
// s1 := rand ( 1 , 4 ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: PPUSH
15475: LD_INT 4
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15483: LD_ADDR_VAR 0 4
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 259
15506: ST_TO_ADDR
// if s1 = 1 then
15507: LD_VAR 0 2
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: IFFALSE 15535
// s2 := rand ( 2 , 4 ) else
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_INT 2
15524: PPUSH
15525: LD_INT 4
15527: PPUSH
15528: CALL_OW 12
15532: ST_TO_ADDR
15533: GO 15543
// s2 := 1 ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15543: LD_ADDR_VAR 0 5
15547: PUSH
15548: LD_VAR 0 6
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: CALL_OW 259
15566: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15567: LD_VAR 0 6
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 5
15585: PPUSH
15586: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15590: LD_VAR 0 6
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: CALL_OW 237
// end ;
15613: PPOPN 6
15615: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15616: LD_EXP 24
15620: PUSH
15621: LD_EXP 71
15625: AND
15626: IFFALSE 15705
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_OWVAR 2
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 1
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: PPOPN 1
15707: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15708: LD_EXP 24
15712: PUSH
15713: LD_EXP 72
15717: AND
15718: IFFALSE 15830
15720: GO 15722
15722: DISABLE
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: LD_INT 30
15749: PUSH
15750: LD_INT 27
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 30
15759: PUSH
15760: LD_INT 26
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 28
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 69
15791: ST_TO_ADDR
// if not tmp then
15792: LD_VAR 0 2
15796: NOT
15797: IFFALSE 15801
// exit ;
15799: GO 15830
// for i in tmp do
15801: LD_ADDR_VAR 0 1
15805: PUSH
15806: LD_VAR 0 2
15810: PUSH
15811: FOR_IN
15812: IFFALSE 15828
// SetLives ( i , 1 ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 234
15826: GO 15811
15828: POP
15829: POP
// end ;
15830: PPOPN 2
15832: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15833: LD_EXP 24
15837: PUSH
15838: LD_EXP 73
15842: AND
15843: IFFALSE 16130
15845: GO 15847
15847: DISABLE
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
15852: PPUSH
// begin i := rand ( 1 , 7 ) ;
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 7
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// case i of 1 :
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 1
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 15892
15882: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15883: LD_STRING earthquake(getX(game), 0, 32)
15885: PPUSH
15886: CALL_OW 559
15890: GO 16130
15892: LD_INT 2
15894: DOUBLE
15895: EQUAL
15896: IFTRUE 15900
15898: GO 15914
15900: POP
// begin ToLua ( displayStucuk(); ) ;
15901: LD_STRING displayStucuk();
15903: PPUSH
15904: CALL_OW 559
// ResetFog ;
15908: CALL_OW 335
// end ; 3 :
15912: GO 16130
15914: LD_INT 3
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 16026
15922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 25
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: ST_TO_ADDR
// if not tmp then
15959: LD_VAR 0 2
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16130
// un := tmp [ rand ( 1 , tmp ) ] ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 12
15990: ARRAY
15991: ST_TO_ADDR
// if Crawls ( un ) then
15992: LD_VAR 0 3
15996: PPUSH
15997: CALL_OW 318
16001: IFFALSE 16012
// ComWalk ( un ) ;
16003: LD_VAR 0 3
16007: PPUSH
16008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_INT 8
16019: PPUSH
16020: CALL_OW 336
// end ; 4 :
16024: GO 16130
16026: LD_INT 4
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16108
16034: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_OWVAR 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 30
16054: PUSH
16055: LD_INT 29
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 2
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16130
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16080: LD_VAR 0 2
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: PPUSH
16089: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16093: LD_VAR 0 2
16097: PUSH
16098: LD_INT 1
16100: ARRAY
16101: PPUSH
16102: CALL_OW 65
// end ; 5 .. 7 :
16106: GO 16130
16108: LD_INT 5
16110: DOUBLE
16111: GREATEREQUAL
16112: IFFALSE 16120
16114: LD_INT 7
16116: DOUBLE
16117: LESSEQUAL
16118: IFTRUE 16122
16120: GO 16129
16122: POP
// StreamSibBomb ; end ;
16123: CALL 12367 0 0
16127: GO 16130
16129: POP
// end ;
16130: PPOPN 3
16132: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16133: LD_EXP 24
16137: PUSH
16138: LD_EXP 74
16142: AND
16143: IFFALSE 16299
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 81
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 21
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: ST_TO_ADDR
// if not tmp then
16207: LD_VAR 0 2
16211: NOT
16212: IFFALSE 16216
// exit ;
16214: GO 16299
// p := 0 ;
16216: LD_ADDR_VAR 0 3
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// p := p + 1 ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 1
16243: PLUS
16244: ST_TO_ADDR
// for i in tmp do
16245: LD_ADDR_VAR 0 1
16249: PUSH
16250: LD_VAR 0 2
16254: PUSH
16255: FOR_IN
16256: IFFALSE 16287
// if GetLives ( i ) < 1000 then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 256
16267: PUSH
16268: LD_INT 1000
16270: LESS
16271: IFFALSE 16285
// SetLives ( i , 1000 ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: LD_INT 1000
16280: PPUSH
16281: CALL_OW 234
16285: GO 16255
16287: POP
16288: POP
// until p > 20 ;
16289: LD_VAR 0 3
16293: PUSH
16294: LD_INT 20
16296: GREATER
16297: IFFALSE 16224
// end ;
16299: PPOPN 3
16301: END
// every 0 0$1 trigger StreamModeActive and sTime do
16302: LD_EXP 24
16306: PUSH
16307: LD_EXP 75
16311: AND
16312: IFFALSE 16347
16314: GO 16316
16316: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16317: LD_INT 28
16319: PPUSH
16320: LD_OWVAR 2
16324: PPUSH
16325: LD_INT 2
16327: PPUSH
16328: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16332: LD_INT 30
16334: PPUSH
16335: LD_OWVAR 2
16339: PPUSH
16340: LD_INT 2
16342: PPUSH
16343: CALL_OW 322
// end ;
16347: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16348: LD_EXP 24
16352: PUSH
16353: LD_EXP 76
16357: AND
16358: IFFALSE 16479
16360: GO 16362
16362: DISABLE
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16367: LD_ADDR_VAR 0 2
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 21
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 23
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// if not tmp then
16421: LD_VAR 0 2
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 16479
// for i in tmp do
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_VAR 0 2
16439: PUSH
16440: FOR_IN
16441: IFFALSE 16477
// begin if Crawls ( i ) then
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 318
16452: IFFALSE 16463
// ComWalk ( i ) ;
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 138
// SetClass ( i , 2 ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_INT 2
16470: PPUSH
16471: CALL_OW 336
// end ;
16475: GO 16440
16477: POP
16478: POP
// end ;
16479: PPOPN 2
16481: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16482: LD_EXP 24
16486: PUSH
16487: LD_EXP 77
16491: AND
16492: IFFALSE 16780
16494: GO 16496
16496: DISABLE
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16502: LD_OWVAR 2
16506: PPUSH
16507: LD_INT 9
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16520: LD_INT 9
16522: PPUSH
16523: LD_OWVAR 2
16527: PPUSH
16528: CALL_OW 343
// uc_side := 9 ;
16532: LD_ADDR_OWVAR 20
16536: PUSH
16537: LD_INT 9
16539: ST_TO_ADDR
// uc_nation := 2 ;
16540: LD_ADDR_OWVAR 21
16544: PUSH
16545: LD_INT 2
16547: ST_TO_ADDR
// hc_name := Dark Warrior ;
16548: LD_ADDR_OWVAR 26
16552: PUSH
16553: LD_STRING Dark Warrior
16555: ST_TO_ADDR
// hc_gallery :=  ;
16556: LD_ADDR_OWVAR 33
16560: PUSH
16561: LD_STRING 
16563: ST_TO_ADDR
// hc_noskilllimit := true ;
16564: LD_ADDR_OWVAR 76
16568: PUSH
16569: LD_INT 1
16571: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16572: LD_ADDR_OWVAR 31
16576: PUSH
16577: LD_INT 30
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 30
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: ST_TO_ADDR
// un := CreateHuman ;
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: CALL_OW 44
16604: ST_TO_ADDR
// hc_noskilllimit := false ;
16605: LD_ADDR_OWVAR 76
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16613: LD_VAR 0 3
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 51
// ToLua ( playRanger() ) ;
16625: LD_STRING playRanger()
16627: PPUSH
16628: CALL_OW 559
// p := 0 ;
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16640: LD_INT 35
16642: PPUSH
16643: CALL_OW 67
// p := p + 1 ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: PLUS
16660: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16661: LD_VAR 0 3
16665: PPUSH
16666: CALL_OW 256
16670: PUSH
16671: LD_INT 1000
16673: LESS
16674: IFFALSE 16688
// SetLives ( un , 1000 ) ;
16676: LD_VAR 0 3
16680: PPUSH
16681: LD_INT 1000
16683: PPUSH
16684: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 81
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 91
16707: PUSH
16708: LD_VAR 0 3
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: CALL_OW 74
16739: PPUSH
16740: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 80
16751: GREATER
16752: PUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: CALL_OW 301
16762: OR
16763: IFFALSE 16640
// if un then
16765: LD_VAR 0 3
16769: IFFALSE 16780
// RemoveUnit ( un ) ;
16771: LD_VAR 0 3
16775: PPUSH
16776: CALL_OW 64
// end ;
16780: PPOPN 3
16782: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16783: LD_EXP 78
16787: IFFALSE 16903
16789: GO 16791
16791: DISABLE
16792: LD_INT 0
16794: PPUSH
16795: PPUSH
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 81
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16833: LD_STRING playComputer()
16835: PPUSH
16836: CALL_OW 559
// if not tmp then
16840: LD_VAR 0 2
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16903
// for i in tmp do
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_VAR 0 2
16858: PUSH
16859: FOR_IN
16860: IFFALSE 16901
// for j := 1 to 4 do
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: DOUBLE
16868: LD_INT 1
16870: DEC
16871: ST_TO_ADDR
16872: LD_INT 4
16874: PUSH
16875: FOR_TO
16876: IFFALSE 16897
// SetSkill ( i , j , 10 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 10
16890: PPUSH
16891: CALL_OW 237
16895: GO 16875
16897: POP
16898: POP
16899: GO 16859
16901: POP
16902: POP
// end ;
16903: PPOPN 3
16905: END
// every 0 0$1 trigger s30 do var i , tmp ;
16906: LD_EXP 79
16910: IFFALSE 16979
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// if not tmp then
16941: LD_VAR 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 16979
// for i in tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: FOR_IN
16961: IFFALSE 16977
// SetLives ( i , 300 ) ;
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 300
16970: PPUSH
16971: CALL_OW 234
16975: GO 16960
16977: POP
16978: POP
// end ;
16979: PPOPN 2
16981: END
// every 0 0$1 trigger s60 do var i , tmp ;
16982: LD_EXP 80
16986: IFFALSE 17055
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_OWVAR 2
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: ST_TO_ADDR
// if not tmp then
17017: LD_VAR 0 2
17021: NOT
17022: IFFALSE 17026
// exit ;
17024: GO 17055
// for i in tmp do
17026: LD_ADDR_VAR 0 1
17030: PUSH
17031: LD_VAR 0 2
17035: PUSH
17036: FOR_IN
17037: IFFALSE 17053
// SetLives ( i , 600 ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_INT 600
17046: PPUSH
17047: CALL_OW 234
17051: GO 17036
17053: POP
17054: POP
// end ;
17055: PPOPN 2
17057: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17058: LD_INT 0
17060: PPUSH
// case cmd of 301 :
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 301
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17106
17074: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17075: LD_VAR 0 6
17079: PPUSH
17080: LD_VAR 0 7
17084: PPUSH
17085: LD_VAR 0 8
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 18307 0 5
17104: GO 17227
17106: LD_INT 302
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17151
17114: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17115: LD_VAR 0 6
17119: PPUSH
17120: LD_VAR 0 7
17124: PPUSH
17125: LD_VAR 0 8
17129: PPUSH
17130: LD_VAR 0 9
17134: PPUSH
17135: LD_VAR 0 4
17139: PPUSH
17140: LD_VAR 0 5
17144: PPUSH
17145: CALL 18398 0 6
17149: GO 17227
17151: LD_INT 303
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17196
17159: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17160: LD_VAR 0 6
17164: PPUSH
17165: LD_VAR 0 7
17169: PPUSH
17170: LD_VAR 0 8
17174: PPUSH
17175: LD_VAR 0 9
17179: PPUSH
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_VAR 0 5
17189: PPUSH
17190: CALL 17232 0 6
17194: GO 17227
17196: LD_INT 304
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17226
17204: POP
// hHackTeleport ( unit , x , y ) ; end ;
17205: LD_VAR 0 2
17209: PPUSH
17210: LD_VAR 0 4
17214: PPUSH
17215: LD_VAR 0 5
17219: PPUSH
17220: CALL 18991 0 3
17224: GO 17227
17226: POP
// end ;
17227: LD_VAR 0 12
17231: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17232: LD_INT 0
17234: PPUSH
17235: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17236: LD_VAR 0 1
17240: PUSH
17241: LD_INT 1
17243: LESS
17244: PUSH
17245: LD_VAR 0 1
17249: PUSH
17250: LD_INT 3
17252: GREATER
17253: OR
17254: PUSH
17255: LD_VAR 0 5
17259: PPUSH
17260: LD_VAR 0 6
17264: PPUSH
17265: CALL_OW 428
17269: OR
17270: IFFALSE 17274
// exit ;
17272: GO 17994
// uc_side := your_side ;
17274: LD_ADDR_OWVAR 20
17278: PUSH
17279: LD_OWVAR 2
17283: ST_TO_ADDR
// uc_nation := nation ;
17284: LD_ADDR_OWVAR 21
17288: PUSH
17289: LD_VAR 0 1
17293: ST_TO_ADDR
// bc_level = 1 ;
17294: LD_ADDR_OWVAR 43
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// case btype of 1 :
17302: LD_VAR 0 2
17306: PUSH
17307: LD_INT 1
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17326
17315: POP
// bc_type := b_depot ; 2 :
17316: LD_ADDR_OWVAR 42
17320: PUSH
17321: LD_INT 0
17323: ST_TO_ADDR
17324: GO 17938
17326: LD_INT 2
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17345
17334: POP
// bc_type := b_warehouse ; 3 :
17335: LD_ADDR_OWVAR 42
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
17343: GO 17938
17345: LD_INT 3
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17364
17353: POP
// bc_type := b_lab ; 4 .. 9 :
17354: LD_ADDR_OWVAR 42
17358: PUSH
17359: LD_INT 6
17361: ST_TO_ADDR
17362: GO 17938
17364: LD_INT 4
17366: DOUBLE
17367: GREATEREQUAL
17368: IFFALSE 17376
17370: LD_INT 9
17372: DOUBLE
17373: LESSEQUAL
17374: IFTRUE 17378
17376: GO 17430
17378: POP
// begin bc_type := b_lab_half ;
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 7
17386: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17387: LD_ADDR_OWVAR 44
17391: PUSH
17392: LD_INT 10
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 15
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: LD_INT 13
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: PUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 3
17425: MINUS
17426: ARRAY
17427: ST_TO_ADDR
// end ; 10 .. 13 :
17428: GO 17938
17430: LD_INT 10
17432: DOUBLE
17433: GREATEREQUAL
17434: IFFALSE 17442
17436: LD_INT 13
17438: DOUBLE
17439: LESSEQUAL
17440: IFTRUE 17444
17442: GO 17521
17444: POP
// begin bc_type := b_lab_full ;
17445: LD_ADDR_OWVAR 42
17449: PUSH
17450: LD_INT 8
17452: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17453: LD_ADDR_OWVAR 44
17457: PUSH
17458: LD_INT 10
17460: PUSH
17461: LD_INT 12
17463: PUSH
17464: LD_INT 14
17466: PUSH
17467: LD_INT 13
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: LD_INT 9
17483: MINUS
17484: ARRAY
17485: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17486: LD_ADDR_OWVAR 45
17490: PUSH
17491: LD_INT 11
17493: PUSH
17494: LD_INT 15
17496: PUSH
17497: LD_INT 12
17499: PUSH
17500: LD_INT 15
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: LD_VAR 0 2
17513: PUSH
17514: LD_INT 9
17516: MINUS
17517: ARRAY
17518: ST_TO_ADDR
// end ; 14 :
17519: GO 17938
17521: LD_INT 14
17523: DOUBLE
17524: EQUAL
17525: IFTRUE 17529
17527: GO 17540
17529: POP
// bc_type := b_workshop ; 15 :
17530: LD_ADDR_OWVAR 42
17534: PUSH
17535: LD_INT 2
17537: ST_TO_ADDR
17538: GO 17938
17540: LD_INT 15
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 17559
17548: POP
// bc_type := b_factory ; 16 :
17549: LD_ADDR_OWVAR 42
17553: PUSH
17554: LD_INT 3
17556: ST_TO_ADDR
17557: GO 17938
17559: LD_INT 16
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17578
17567: POP
// bc_type := b_ext_gun ; 17 :
17568: LD_ADDR_OWVAR 42
17572: PUSH
17573: LD_INT 17
17575: ST_TO_ADDR
17576: GO 17938
17578: LD_INT 17
17580: DOUBLE
17581: EQUAL
17582: IFTRUE 17586
17584: GO 17614
17586: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17587: LD_ADDR_OWVAR 42
17591: PUSH
17592: LD_INT 19
17594: PUSH
17595: LD_INT 23
17597: PUSH
17598: LD_INT 19
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: LD_VAR 0 1
17610: ARRAY
17611: ST_TO_ADDR
17612: GO 17938
17614: LD_INT 18
17616: DOUBLE
17617: EQUAL
17618: IFTRUE 17622
17620: GO 17633
17622: POP
// bc_type := b_ext_radar ; 19 :
17623: LD_ADDR_OWVAR 42
17627: PUSH
17628: LD_INT 20
17630: ST_TO_ADDR
17631: GO 17938
17633: LD_INT 19
17635: DOUBLE
17636: EQUAL
17637: IFTRUE 17641
17639: GO 17652
17641: POP
// bc_type := b_ext_radio ; 20 :
17642: LD_ADDR_OWVAR 42
17646: PUSH
17647: LD_INT 22
17649: ST_TO_ADDR
17650: GO 17938
17652: LD_INT 20
17654: DOUBLE
17655: EQUAL
17656: IFTRUE 17660
17658: GO 17671
17660: POP
// bc_type := b_ext_siberium ; 21 :
17661: LD_ADDR_OWVAR 42
17665: PUSH
17666: LD_INT 21
17668: ST_TO_ADDR
17669: GO 17938
17671: LD_INT 21
17673: DOUBLE
17674: EQUAL
17675: IFTRUE 17679
17677: GO 17690
17679: POP
// bc_type := b_ext_computer ; 22 :
17680: LD_ADDR_OWVAR 42
17684: PUSH
17685: LD_INT 24
17687: ST_TO_ADDR
17688: GO 17938
17690: LD_INT 22
17692: DOUBLE
17693: EQUAL
17694: IFTRUE 17698
17696: GO 17709
17698: POP
// bc_type := b_ext_track ; 23 :
17699: LD_ADDR_OWVAR 42
17703: PUSH
17704: LD_INT 16
17706: ST_TO_ADDR
17707: GO 17938
17709: LD_INT 23
17711: DOUBLE
17712: EQUAL
17713: IFTRUE 17717
17715: GO 17728
17717: POP
// bc_type := b_ext_laser ; 24 :
17718: LD_ADDR_OWVAR 42
17722: PUSH
17723: LD_INT 25
17725: ST_TO_ADDR
17726: GO 17938
17728: LD_INT 24
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17747
17736: POP
// bc_type := b_control_tower ; 25 :
17737: LD_ADDR_OWVAR 42
17741: PUSH
17742: LD_INT 36
17744: ST_TO_ADDR
17745: GO 17938
17747: LD_INT 25
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17766
17755: POP
// bc_type := b_breastwork ; 26 :
17756: LD_ADDR_OWVAR 42
17760: PUSH
17761: LD_INT 31
17763: ST_TO_ADDR
17764: GO 17938
17766: LD_INT 26
17768: DOUBLE
17769: EQUAL
17770: IFTRUE 17774
17772: GO 17785
17774: POP
// bc_type := b_bunker ; 27 :
17775: LD_ADDR_OWVAR 42
17779: PUSH
17780: LD_INT 32
17782: ST_TO_ADDR
17783: GO 17938
17785: LD_INT 27
17787: DOUBLE
17788: EQUAL
17789: IFTRUE 17793
17791: GO 17804
17793: POP
// bc_type := b_turret ; 28 :
17794: LD_ADDR_OWVAR 42
17798: PUSH
17799: LD_INT 33
17801: ST_TO_ADDR
17802: GO 17938
17804: LD_INT 28
17806: DOUBLE
17807: EQUAL
17808: IFTRUE 17812
17810: GO 17823
17812: POP
// bc_type := b_armoury ; 29 :
17813: LD_ADDR_OWVAR 42
17817: PUSH
17818: LD_INT 4
17820: ST_TO_ADDR
17821: GO 17938
17823: LD_INT 29
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 17842
17831: POP
// bc_type := b_barracks ; 30 :
17832: LD_ADDR_OWVAR 42
17836: PUSH
17837: LD_INT 5
17839: ST_TO_ADDR
17840: GO 17938
17842: LD_INT 30
17844: DOUBLE
17845: EQUAL
17846: IFTRUE 17850
17848: GO 17861
17850: POP
// bc_type := b_solar_power ; 31 :
17851: LD_ADDR_OWVAR 42
17855: PUSH
17856: LD_INT 27
17858: ST_TO_ADDR
17859: GO 17938
17861: LD_INT 31
17863: DOUBLE
17864: EQUAL
17865: IFTRUE 17869
17867: GO 17880
17869: POP
// bc_type := b_oil_power ; 32 :
17870: LD_ADDR_OWVAR 42
17874: PUSH
17875: LD_INT 26
17877: ST_TO_ADDR
17878: GO 17938
17880: LD_INT 32
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 17899
17888: POP
// bc_type := b_siberite_power ; 33 :
17889: LD_ADDR_OWVAR 42
17893: PUSH
17894: LD_INT 28
17896: ST_TO_ADDR
17897: GO 17938
17899: LD_INT 33
17901: DOUBLE
17902: EQUAL
17903: IFTRUE 17907
17905: GO 17918
17907: POP
// bc_type := b_oil_mine ; 34 :
17908: LD_ADDR_OWVAR 42
17912: PUSH
17913: LD_INT 29
17915: ST_TO_ADDR
17916: GO 17938
17918: LD_INT 34
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17937
17926: POP
// bc_type := b_siberite_mine ; end ;
17927: LD_ADDR_OWVAR 42
17931: PUSH
17932: LD_INT 30
17934: ST_TO_ADDR
17935: GO 17938
17937: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17938: LD_ADDR_VAR 0 8
17942: PUSH
17943: LD_VAR 0 5
17947: PPUSH
17948: LD_VAR 0 6
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: CALL_OW 47
17962: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17963: LD_OWVAR 42
17967: PUSH
17968: LD_INT 32
17970: PUSH
17971: LD_INT 33
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: IN
17978: IFFALSE 17994
// PlaceWeaponTurret ( b , weapon ) ;
17980: LD_VAR 0 8
17984: PPUSH
17985: LD_VAR 0 4
17989: PPUSH
17990: CALL_OW 431
// end ;
17994: LD_VAR 0 7
17998: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18005: LD_ADDR_VAR 0 4
18009: PUSH
18010: LD_INT 22
18012: PUSH
18013: LD_OWVAR 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: LD_INT 30
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 30
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PPUSH
18054: CALL_OW 69
18058: ST_TO_ADDR
// if not tmp then
18059: LD_VAR 0 4
18063: NOT
18064: IFFALSE 18068
// exit ;
18066: GO 18127
// for i in tmp do
18068: LD_ADDR_VAR 0 2
18072: PUSH
18073: LD_VAR 0 4
18077: PUSH
18078: FOR_IN
18079: IFFALSE 18125
// for j = 1 to 3 do
18081: LD_ADDR_VAR 0 3
18085: PUSH
18086: DOUBLE
18087: LD_INT 1
18089: DEC
18090: ST_TO_ADDR
18091: LD_INT 3
18093: PUSH
18094: FOR_TO
18095: IFFALSE 18121
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18097: LD_VAR 0 2
18101: PPUSH
18102: CALL_OW 274
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: LD_INT 99999
18114: PPUSH
18115: CALL_OW 277
18119: GO 18094
18121: POP
18122: POP
18123: GO 18078
18125: POP
18126: POP
// end ;
18127: LD_VAR 0 1
18131: RET
// export function hHackSetLevel10 ; var i , j ; begin
18132: LD_INT 0
18134: PPUSH
18135: PPUSH
18136: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18137: LD_ADDR_VAR 0 2
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PPUSH
18152: CALL_OW 69
18156: PUSH
18157: FOR_IN
18158: IFFALSE 18210
// if IsSelected ( i ) then
18160: LD_VAR 0 2
18164: PPUSH
18165: CALL_OW 306
18169: IFFALSE 18208
// begin for j := 1 to 4 do
18171: LD_ADDR_VAR 0 3
18175: PUSH
18176: DOUBLE
18177: LD_INT 1
18179: DEC
18180: ST_TO_ADDR
18181: LD_INT 4
18183: PUSH
18184: FOR_TO
18185: IFFALSE 18206
// SetSkill ( i , j , 10 ) ;
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 10
18199: PPUSH
18200: CALL_OW 237
18204: GO 18184
18206: POP
18207: POP
// end ;
18208: GO 18157
18210: POP
18211: POP
// end ;
18212: LD_VAR 0 1
18216: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18217: LD_INT 0
18219: PPUSH
18220: PPUSH
18221: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18222: LD_ADDR_VAR 0 2
18226: PUSH
18227: LD_INT 22
18229: PUSH
18230: LD_OWVAR 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 21
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PPUSH
18253: CALL_OW 69
18257: PUSH
18258: FOR_IN
18259: IFFALSE 18300
// begin for j := 1 to 4 do
18261: LD_ADDR_VAR 0 3
18265: PUSH
18266: DOUBLE
18267: LD_INT 1
18269: DEC
18270: ST_TO_ADDR
18271: LD_INT 4
18273: PUSH
18274: FOR_TO
18275: IFFALSE 18296
// SetSkill ( i , j , 10 ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 10
18289: PPUSH
18290: CALL_OW 237
18294: GO 18274
18296: POP
18297: POP
// end ;
18298: GO 18258
18300: POP
18301: POP
// end ;
18302: LD_VAR 0 1
18306: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18307: LD_INT 0
18309: PPUSH
// uc_side := your_side ;
18310: LD_ADDR_OWVAR 20
18314: PUSH
18315: LD_OWVAR 2
18319: ST_TO_ADDR
// uc_nation := nation ;
18320: LD_ADDR_OWVAR 21
18324: PUSH
18325: LD_VAR 0 1
18329: ST_TO_ADDR
// InitHc ;
18330: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18334: LD_INT 0
18336: PPUSH
18337: LD_VAR 0 2
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18351: LD_VAR 0 4
18355: PPUSH
18356: LD_VAR 0 5
18360: PPUSH
18361: CALL_OW 428
18365: PUSH
18366: LD_INT 0
18368: EQUAL
18369: IFFALSE 18393
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18371: CALL_OW 44
18375: PPUSH
18376: LD_VAR 0 4
18380: PPUSH
18381: LD_VAR 0 5
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 48
// end ;
18393: LD_VAR 0 6
18397: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18398: LD_INT 0
18400: PPUSH
18401: PPUSH
// uc_side := your_side ;
18402: LD_ADDR_OWVAR 20
18406: PUSH
18407: LD_OWVAR 2
18411: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18412: LD_VAR 0 1
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 3
18425: PUSH
18426: LD_INT 4
18428: PUSH
18429: LD_INT 5
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: IN
18439: IFFALSE 18451
// uc_nation := nation_american else
18441: LD_ADDR_OWVAR 21
18445: PUSH
18446: LD_INT 1
18448: ST_TO_ADDR
18449: GO 18494
// if chassis in [ 11 , 12 , 13 , 14 ] then
18451: LD_VAR 0 1
18455: PUSH
18456: LD_INT 11
18458: PUSH
18459: LD_INT 12
18461: PUSH
18462: LD_INT 13
18464: PUSH
18465: LD_INT 14
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: IN
18474: IFFALSE 18486
// uc_nation := nation_arabian else
18476: LD_ADDR_OWVAR 21
18480: PUSH
18481: LD_INT 2
18483: ST_TO_ADDR
18484: GO 18494
// uc_nation := nation_russian ;
18486: LD_ADDR_OWVAR 21
18490: PUSH
18491: LD_INT 3
18493: ST_TO_ADDR
// vc_chassis := chassis ;
18494: LD_ADDR_OWVAR 37
18498: PUSH
18499: LD_VAR 0 1
18503: ST_TO_ADDR
// vc_engine := engine ;
18504: LD_ADDR_OWVAR 39
18508: PUSH
18509: LD_VAR 0 2
18513: ST_TO_ADDR
// vc_control := control ;
18514: LD_ADDR_OWVAR 38
18518: PUSH
18519: LD_VAR 0 3
18523: ST_TO_ADDR
// vc_weapon := weapon ;
18524: LD_ADDR_OWVAR 40
18528: PUSH
18529: LD_VAR 0 4
18533: ST_TO_ADDR
// un := CreateVehicle ;
18534: LD_ADDR_VAR 0 8
18538: PUSH
18539: CALL_OW 45
18543: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18544: LD_VAR 0 8
18548: PPUSH
18549: LD_INT 0
18551: PPUSH
18552: LD_INT 5
18554: PPUSH
18555: CALL_OW 12
18559: PPUSH
18560: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18564: LD_VAR 0 8
18568: PPUSH
18569: LD_VAR 0 5
18573: PPUSH
18574: LD_VAR 0 6
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 48
// end ;
18586: LD_VAR 0 7
18590: RET
// export hInvincible ; every 1 do
18591: GO 18593
18593: DISABLE
// hInvincible := [ ] ;
18594: LD_ADDR_EXP 81
18598: PUSH
18599: EMPTY
18600: ST_TO_ADDR
18601: END
// every 10 do var i ;
18602: GO 18604
18604: DISABLE
18605: LD_INT 0
18607: PPUSH
// begin enable ;
18608: ENABLE
// if not hInvincible then
18609: LD_EXP 81
18613: NOT
18614: IFFALSE 18618
// exit ;
18616: GO 18662
// for i in hInvincible do
18618: LD_ADDR_VAR 0 1
18622: PUSH
18623: LD_EXP 81
18627: PUSH
18628: FOR_IN
18629: IFFALSE 18660
// if GetLives ( i ) < 1000 then
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 256
18640: PUSH
18641: LD_INT 1000
18643: LESS
18644: IFFALSE 18658
// SetLives ( i , 1000 ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: LD_INT 1000
18653: PPUSH
18654: CALL_OW 234
18658: GO 18628
18660: POP
18661: POP
// end ;
18662: PPOPN 1
18664: END
// export function hHackInvincible ; var i ; begin
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18669: LD_ADDR_VAR 0 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: LD_INT 21
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 21
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 69
18706: PUSH
18707: FOR_IN
18708: IFFALSE 18769
// if IsSelected ( i ) then
18710: LD_VAR 0 2
18714: PPUSH
18715: CALL_OW 306
18719: IFFALSE 18767
// begin if i in hInvincible then
18721: LD_VAR 0 2
18725: PUSH
18726: LD_EXP 81
18730: IN
18731: IFFALSE 18751
// hInvincible := hInvincible diff i else
18733: LD_ADDR_EXP 81
18737: PUSH
18738: LD_EXP 81
18742: PUSH
18743: LD_VAR 0 2
18747: DIFF
18748: ST_TO_ADDR
18749: GO 18767
// hInvincible := hInvincible union i ;
18751: LD_ADDR_EXP 81
18755: PUSH
18756: LD_EXP 81
18760: PUSH
18761: LD_VAR 0 2
18765: UNION
18766: ST_TO_ADDR
// end ;
18767: GO 18707
18769: POP
18770: POP
// end ;
18771: LD_VAR 0 1
18775: RET
// export function hHackInvisible ; var i , j ; begin
18776: LD_INT 0
18778: PPUSH
18779: PPUSH
18780: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18781: LD_ADDR_VAR 0 2
18785: PUSH
18786: LD_INT 21
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PPUSH
18796: CALL_OW 69
18800: PUSH
18801: FOR_IN
18802: IFFALSE 18826
// if IsSelected ( i ) then
18804: LD_VAR 0 2
18808: PPUSH
18809: CALL_OW 306
18813: IFFALSE 18824
// ComForceInvisible ( i ) ;
18815: LD_VAR 0 2
18819: PPUSH
18820: CALL_OW 496
18824: GO 18801
18826: POP
18827: POP
// end ;
18828: LD_VAR 0 1
18832: RET
// export function hHackChangeYourSide ; begin
18833: LD_INT 0
18835: PPUSH
// if your_side = 8 then
18836: LD_OWVAR 2
18840: PUSH
18841: LD_INT 8
18843: EQUAL
18844: IFFALSE 18856
// your_side := 0 else
18846: LD_ADDR_OWVAR 2
18850: PUSH
18851: LD_INT 0
18853: ST_TO_ADDR
18854: GO 18870
// your_side := your_side + 1 ;
18856: LD_ADDR_OWVAR 2
18860: PUSH
18861: LD_OWVAR 2
18865: PUSH
18866: LD_INT 1
18868: PLUS
18869: ST_TO_ADDR
// end ;
18870: LD_VAR 0 1
18874: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18875: LD_INT 0
18877: PPUSH
18878: PPUSH
18879: PPUSH
// for i in all_units do
18880: LD_ADDR_VAR 0 2
18884: PUSH
18885: LD_OWVAR 3
18889: PUSH
18890: FOR_IN
18891: IFFALSE 18969
// if IsSelected ( i ) then
18893: LD_VAR 0 2
18897: PPUSH
18898: CALL_OW 306
18902: IFFALSE 18967
// begin j := GetSide ( i ) ;
18904: LD_ADDR_VAR 0 3
18908: PUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: CALL_OW 255
18918: ST_TO_ADDR
// if j = 8 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 8
18926: EQUAL
18927: IFFALSE 18939
// j := 0 else
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_INT 0
18936: ST_TO_ADDR
18937: GO 18953
// j := j + 1 ;
18939: LD_ADDR_VAR 0 3
18943: PUSH
18944: LD_VAR 0 3
18948: PUSH
18949: LD_INT 1
18951: PLUS
18952: ST_TO_ADDR
// SetSide ( i , j ) ;
18953: LD_VAR 0 2
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: CALL_OW 235
// end ;
18967: GO 18890
18969: POP
18970: POP
// end ;
18971: LD_VAR 0 1
18975: RET
// export function hHackFog ; begin
18976: LD_INT 0
18978: PPUSH
// FogOff ( true ) ;
18979: LD_INT 1
18981: PPUSH
18982: CALL_OW 344
// end ;
18986: LD_VAR 0 1
18990: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18991: LD_INT 0
18993: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18994: LD_VAR 0 1
18998: PPUSH
18999: LD_VAR 0 2
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 483
// CenterOnXY ( x , y ) ;
19019: LD_VAR 0 2
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: CALL_OW 84
// end ;
19033: LD_VAR 0 4
19037: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19038: LD_INT 0
19040: PPUSH
19041: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19042: LD_VAR 0 1
19046: NOT
19047: PUSH
19048: LD_VAR 0 2
19052: PPUSH
19053: LD_VAR 0 3
19057: PPUSH
19058: CALL_OW 488
19062: NOT
19063: OR
19064: PUSH
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 266
19074: PUSH
19075: LD_INT 3
19077: NONEQUAL
19078: PUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL_OW 247
19088: PUSH
19089: LD_INT 1
19091: EQUAL
19092: NOT
19093: AND
19094: OR
19095: IFFALSE 19099
// exit ;
19097: GO 19248
// if GetType ( factory ) = unit_human then
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 247
19108: PUSH
19109: LD_INT 1
19111: EQUAL
19112: IFFALSE 19129
// factory := IsInUnit ( factory ) ;
19114: LD_ADDR_VAR 0 1
19118: PUSH
19119: LD_VAR 0 1
19123: PPUSH
19124: CALL_OW 310
19128: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19129: LD_VAR 0 1
19133: PPUSH
19134: CALL_OW 266
19138: PUSH
19139: LD_INT 3
19141: NONEQUAL
19142: IFFALSE 19146
// exit ;
19144: GO 19248
// if HexInfo ( x , y ) = factory then
19146: LD_VAR 0 2
19150: PPUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: CALL_OW 428
19160: PUSH
19161: LD_VAR 0 1
19165: EQUAL
19166: IFFALSE 19193
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19168: LD_ADDR_EXP 82
19172: PUSH
19173: LD_EXP 82
19177: PPUSH
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_INT 0
19185: PPUSH
19186: CALL_OW 1
19190: ST_TO_ADDR
19191: GO 19244
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19193: LD_ADDR_EXP 82
19197: PUSH
19198: LD_EXP 82
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 255
19217: PUSH
19218: LD_VAR 0 1
19222: PUSH
19223: LD_VAR 0 2
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: PPUSH
19239: CALL_OW 1
19243: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19244: CALL 19253 0 0
// end ;
19248: LD_VAR 0 4
19252: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19253: LD_INT 0
19255: PPUSH
19256: PPUSH
19257: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19258: LD_STRING resetFactoryWaypoint();
19260: PPUSH
19261: CALL_OW 559
// if factoryWaypoints then
19265: LD_EXP 82
19269: IFFALSE 19395
// begin list := PrepareArray ( factoryWaypoints ) ;
19271: LD_ADDR_VAR 0 3
19275: PUSH
19276: LD_EXP 82
19280: PPUSH
19281: CALL 66027 0 1
19285: ST_TO_ADDR
// for i := 1 to list do
19286: LD_ADDR_VAR 0 2
19290: PUSH
19291: DOUBLE
19292: LD_INT 1
19294: DEC
19295: ST_TO_ADDR
19296: LD_VAR 0 3
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19393
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19304: LD_STRING setFactoryWaypointXY(
19306: PUSH
19307: LD_VAR 0 3
19311: PUSH
19312: LD_VAR 0 2
19316: ARRAY
19317: PUSH
19318: LD_INT 1
19320: ARRAY
19321: STR
19322: PUSH
19323: LD_STRING ,
19325: STR
19326: PUSH
19327: LD_VAR 0 3
19331: PUSH
19332: LD_VAR 0 2
19336: ARRAY
19337: PUSH
19338: LD_INT 2
19340: ARRAY
19341: STR
19342: PUSH
19343: LD_STRING ,
19345: STR
19346: PUSH
19347: LD_VAR 0 3
19351: PUSH
19352: LD_VAR 0 2
19356: ARRAY
19357: PUSH
19358: LD_INT 3
19360: ARRAY
19361: STR
19362: PUSH
19363: LD_STRING ,
19365: STR
19366: PUSH
19367: LD_VAR 0 3
19371: PUSH
19372: LD_VAR 0 2
19376: ARRAY
19377: PUSH
19378: LD_INT 4
19380: ARRAY
19381: STR
19382: PUSH
19383: LD_STRING )
19385: STR
19386: PPUSH
19387: CALL_OW 559
19391: GO 19301
19393: POP
19394: POP
// end ; end ;
19395: LD_VAR 0 1
19399: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19400: LD_INT 0
19402: PPUSH
// if HexInfo ( x , y ) = warehouse then
19403: LD_VAR 0 2
19407: PPUSH
19408: LD_VAR 0 3
19412: PPUSH
19413: CALL_OW 428
19417: PUSH
19418: LD_VAR 0 1
19422: EQUAL
19423: IFFALSE 19450
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19425: LD_ADDR_EXP 83
19429: PUSH
19430: LD_EXP 83
19434: PPUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 0
19442: PPUSH
19443: CALL_OW 1
19447: ST_TO_ADDR
19448: GO 19501
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19450: LD_ADDR_EXP 83
19454: PUSH
19455: LD_EXP 83
19459: PPUSH
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_VAR 0 1
19469: PPUSH
19470: CALL_OW 255
19474: PUSH
19475: LD_VAR 0 1
19479: PUSH
19480: LD_VAR 0 2
19484: PUSH
19485: LD_VAR 0 3
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 1
19500: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19501: CALL 19510 0 0
// end ;
19505: LD_VAR 0 4
19509: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
19514: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19515: LD_STRING resetWarehouseGatheringPoints();
19517: PPUSH
19518: CALL_OW 559
// if warehouseGatheringPoints then
19522: LD_EXP 83
19526: IFFALSE 19652
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19528: LD_ADDR_VAR 0 3
19532: PUSH
19533: LD_EXP 83
19537: PPUSH
19538: CALL 66027 0 1
19542: ST_TO_ADDR
// for i := 1 to list do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_INT 1
19551: DEC
19552: ST_TO_ADDR
19553: LD_VAR 0 3
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19650
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19561: LD_STRING setWarehouseGatheringPointXY(
19563: PUSH
19564: LD_VAR 0 3
19568: PUSH
19569: LD_VAR 0 2
19573: ARRAY
19574: PUSH
19575: LD_INT 1
19577: ARRAY
19578: STR
19579: PUSH
19580: LD_STRING ,
19582: STR
19583: PUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_VAR 0 2
19593: ARRAY
19594: PUSH
19595: LD_INT 2
19597: ARRAY
19598: STR
19599: PUSH
19600: LD_STRING ,
19602: STR
19603: PUSH
19604: LD_VAR 0 3
19608: PUSH
19609: LD_VAR 0 2
19613: ARRAY
19614: PUSH
19615: LD_INT 3
19617: ARRAY
19618: STR
19619: PUSH
19620: LD_STRING ,
19622: STR
19623: PUSH
19624: LD_VAR 0 3
19628: PUSH
19629: LD_VAR 0 2
19633: ARRAY
19634: PUSH
19635: LD_INT 4
19637: ARRAY
19638: STR
19639: PUSH
19640: LD_STRING )
19642: STR
19643: PPUSH
19644: CALL_OW 559
19648: GO 19558
19650: POP
19651: POP
// end ; end ;
19652: LD_VAR 0 1
19656: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19657: LD_EXP 83
19661: IFFALSE 20346
19663: GO 19665
19665: DISABLE
19666: LD_INT 0
19668: PPUSH
19669: PPUSH
19670: PPUSH
19671: PPUSH
19672: PPUSH
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
// begin enable ;
19677: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19678: LD_ADDR_VAR 0 3
19682: PUSH
19683: LD_EXP 83
19687: PPUSH
19688: CALL 66027 0 1
19692: ST_TO_ADDR
// if not list then
19693: LD_VAR 0 3
19697: NOT
19698: IFFALSE 19702
// exit ;
19700: GO 20346
// for i := 1 to list do
19702: LD_ADDR_VAR 0 1
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_VAR 0 3
19716: PUSH
19717: FOR_TO
19718: IFFALSE 20344
// begin depot := list [ i ] [ 2 ] ;
19720: LD_ADDR_VAR 0 8
19724: PUSH
19725: LD_VAR 0 3
19729: PUSH
19730: LD_VAR 0 1
19734: ARRAY
19735: PUSH
19736: LD_INT 2
19738: ARRAY
19739: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19740: LD_ADDR_VAR 0 5
19744: PUSH
19745: LD_VAR 0 3
19749: PUSH
19750: LD_VAR 0 1
19754: ARRAY
19755: PUSH
19756: LD_INT 1
19758: ARRAY
19759: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19760: LD_VAR 0 8
19764: PPUSH
19765: CALL_OW 301
19769: PUSH
19770: LD_VAR 0 5
19774: PUSH
19775: LD_VAR 0 8
19779: PPUSH
19780: CALL_OW 255
19784: NONEQUAL
19785: OR
19786: IFFALSE 19815
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19788: LD_ADDR_EXP 83
19792: PUSH
19793: LD_EXP 83
19797: PPUSH
19798: LD_VAR 0 8
19802: PPUSH
19803: LD_INT 0
19805: PPUSH
19806: CALL_OW 1
19810: ST_TO_ADDR
// exit ;
19811: POP
19812: POP
19813: GO 20346
// end ; x := list [ i ] [ 3 ] ;
19815: LD_ADDR_VAR 0 6
19819: PUSH
19820: LD_VAR 0 3
19824: PUSH
19825: LD_VAR 0 1
19829: ARRAY
19830: PUSH
19831: LD_INT 3
19833: ARRAY
19834: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19835: LD_ADDR_VAR 0 7
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_VAR 0 1
19849: ARRAY
19850: PUSH
19851: LD_INT 4
19853: ARRAY
19854: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19855: LD_ADDR_VAR 0 9
19859: PUSH
19860: LD_VAR 0 6
19864: PPUSH
19865: LD_VAR 0 7
19869: PPUSH
19870: LD_INT 16
19872: PPUSH
19873: CALL 64615 0 3
19877: ST_TO_ADDR
// if not cratesNearbyPoint then
19878: LD_VAR 0 9
19882: NOT
19883: IFFALSE 19889
// exit ;
19885: POP
19886: POP
19887: GO 20346
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19889: LD_ADDR_VAR 0 4
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_VAR 0 5
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: LD_INT 60
19911: PUSH
19912: EMPTY
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 91
19921: PUSH
19922: LD_VAR 0 8
19926: PUSH
19927: LD_INT 6
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: LD_INT 25
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 25
19950: PUSH
19951: LD_INT 16
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PPUSH
19969: CALL_OW 69
19973: PUSH
19974: LD_VAR 0 8
19978: PPUSH
19979: CALL_OW 313
19983: PPUSH
19984: LD_INT 3
19986: PUSH
19987: LD_INT 60
19989: PUSH
19990: EMPTY
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: PUSH
20000: LD_INT 25
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 25
20012: PUSH
20013: LD_INT 16
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PPUSH
20029: CALL_OW 72
20033: UNION
20034: ST_TO_ADDR
// if tmp then
20035: LD_VAR 0 4
20039: IFFALSE 20119
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20041: LD_ADDR_VAR 0 4
20045: PUSH
20046: LD_VAR 0 4
20050: PPUSH
20051: LD_INT 3
20053: PPUSH
20054: CALL 62584 0 2
20058: ST_TO_ADDR
// for j in tmp do
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_VAR 0 4
20068: PUSH
20069: FOR_IN
20070: IFFALSE 20113
// begin if IsInUnit ( j ) then
20072: LD_VAR 0 2
20076: PPUSH
20077: CALL_OW 310
20081: IFFALSE 20092
// ComExit ( j ) ;
20083: LD_VAR 0 2
20087: PPUSH
20088: CALL 62667 0 1
// AddComCollect ( j , x , y ) ;
20092: LD_VAR 0 2
20096: PPUSH
20097: LD_VAR 0 6
20101: PPUSH
20102: LD_VAR 0 7
20106: PPUSH
20107: CALL_OW 177
// end ;
20111: GO 20069
20113: POP
20114: POP
// exit ;
20115: POP
20116: POP
20117: GO 20346
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20119: LD_ADDR_VAR 0 4
20123: PUSH
20124: LD_INT 22
20126: PUSH
20127: LD_VAR 0 5
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 91
20138: PUSH
20139: LD_VAR 0 8
20143: PUSH
20144: LD_INT 8
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 34
20157: PUSH
20158: LD_INT 12
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 34
20167: PUSH
20168: LD_INT 51
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 34
20177: PUSH
20178: LD_INT 32
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 34
20187: PUSH
20188: LD_INT 89
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: PPUSH
20207: CALL_OW 69
20211: ST_TO_ADDR
// if tmp then
20212: LD_VAR 0 4
20216: IFFALSE 20342
// begin for j in tmp do
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_VAR 0 4
20227: PUSH
20228: FOR_IN
20229: IFFALSE 20340
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20231: LD_VAR 0 2
20235: PPUSH
20236: CALL_OW 262
20240: PUSH
20241: LD_INT 3
20243: EQUAL
20244: PUSH
20245: LD_VAR 0 2
20249: PPUSH
20250: CALL_OW 261
20254: PUSH
20255: LD_INT 20
20257: GREATER
20258: OR
20259: PUSH
20260: LD_VAR 0 2
20264: PPUSH
20265: CALL_OW 314
20269: NOT
20270: AND
20271: PUSH
20272: LD_VAR 0 2
20276: PPUSH
20277: CALL_OW 263
20281: PUSH
20282: LD_INT 1
20284: NONEQUAL
20285: PUSH
20286: LD_VAR 0 2
20290: PPUSH
20291: CALL_OW 311
20295: OR
20296: AND
20297: IFFALSE 20338
// begin ComCollect ( j , x , y ) ;
20299: LD_VAR 0 2
20303: PPUSH
20304: LD_VAR 0 6
20308: PPUSH
20309: LD_VAR 0 7
20313: PPUSH
20314: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20318: LD_VAR 0 2
20322: PPUSH
20323: LD_VAR 0 8
20327: PPUSH
20328: CALL_OW 172
// exit ;
20332: POP
20333: POP
20334: POP
20335: POP
20336: GO 20346
// end ;
20338: GO 20228
20340: POP
20341: POP
// end ; end ;
20342: GO 19717
20344: POP
20345: POP
// end ; end_of_file
20346: PPOPN 9
20348: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20349: LD_VAR 0 1
20353: PUSH
20354: LD_INT 200
20356: DOUBLE
20357: GREATEREQUAL
20358: IFFALSE 20366
20360: LD_INT 299
20362: DOUBLE
20363: LESSEQUAL
20364: IFTRUE 20368
20366: GO 20400
20368: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20369: LD_VAR 0 1
20373: PPUSH
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_VAR 0 4
20388: PPUSH
20389: LD_VAR 0 5
20393: PPUSH
20394: CALL 20888 0 5
20398: GO 20477
20400: LD_INT 300
20402: DOUBLE
20403: GREATEREQUAL
20404: IFFALSE 20412
20406: LD_INT 399
20408: DOUBLE
20409: LESSEQUAL
20410: IFTRUE 20414
20412: GO 20476
20414: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: LD_VAR 0 3
20429: PPUSH
20430: LD_VAR 0 4
20434: PPUSH
20435: LD_VAR 0 5
20439: PPUSH
20440: LD_VAR 0 6
20444: PPUSH
20445: LD_VAR 0 7
20449: PPUSH
20450: LD_VAR 0 8
20454: PPUSH
20455: LD_VAR 0 9
20459: PPUSH
20460: LD_VAR 0 10
20464: PPUSH
20465: LD_VAR 0 11
20469: PPUSH
20470: CALL 17058 0 11
20474: GO 20477
20476: POP
// end ;
20477: PPOPN 11
20479: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20480: LD_VAR 0 1
20484: PPUSH
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: LD_VAR 0 4
20499: PPUSH
20500: LD_VAR 0 5
20504: PPUSH
20505: CALL 20624 0 5
// end ; end_of_file
20509: PPOPN 5
20511: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20512: LD_INT 0
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20518: LD_VAR 0 1
20522: PPUSH
20523: CALL_OW 264
20527: PUSH
20528: LD_INT 91
20530: EQUAL
20531: IFFALSE 20603
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20533: LD_INT 68
20535: PPUSH
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 255
20545: PPUSH
20546: CALL_OW 321
20550: PUSH
20551: LD_INT 2
20553: EQUAL
20554: IFFALSE 20566
// eff := 70 else
20556: LD_ADDR_VAR 0 4
20560: PUSH
20561: LD_INT 70
20563: ST_TO_ADDR
20564: GO 20574
// eff := 30 ;
20566: LD_ADDR_VAR 0 4
20570: PUSH
20571: LD_INT 30
20573: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20574: LD_VAR 0 1
20578: PPUSH
20579: CALL_OW 250
20583: PPUSH
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 251
20593: PPUSH
20594: LD_VAR 0 4
20598: PPUSH
20599: CALL_OW 495
// end ; end ;
20603: LD_VAR 0 2
20607: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20608: LD_INT 0
20610: PPUSH
// end ;
20611: LD_VAR 0 4
20615: RET
// export function SOS_Command ( cmd ) ; begin
20616: LD_INT 0
20618: PPUSH
// end ;
20619: LD_VAR 0 2
20623: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20624: LD_INT 0
20626: PPUSH
// end ;
20627: LD_VAR 0 6
20631: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20632: LD_INT 0
20634: PPUSH
20635: PPUSH
// if not vehicle or not factory then
20636: LD_VAR 0 1
20640: NOT
20641: PUSH
20642: LD_VAR 0 2
20646: NOT
20647: OR
20648: IFFALSE 20652
// exit ;
20650: GO 20883
// if factoryWaypoints >= factory then
20652: LD_EXP 82
20656: PUSH
20657: LD_VAR 0 2
20661: GREATEREQUAL
20662: IFFALSE 20883
// if factoryWaypoints [ factory ] then
20664: LD_EXP 82
20668: PUSH
20669: LD_VAR 0 2
20673: ARRAY
20674: IFFALSE 20883
// begin if GetControl ( vehicle ) = control_manual then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 263
20685: PUSH
20686: LD_INT 1
20688: EQUAL
20689: IFFALSE 20770
// begin driver := IsDrivenBy ( vehicle ) ;
20691: LD_ADDR_VAR 0 4
20695: PUSH
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 311
20705: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20706: LD_VAR 0 4
20710: PPUSH
20711: LD_EXP 82
20715: PUSH
20716: LD_VAR 0 2
20720: ARRAY
20721: PUSH
20722: LD_INT 3
20724: ARRAY
20725: PPUSH
20726: LD_EXP 82
20730: PUSH
20731: LD_VAR 0 2
20735: ARRAY
20736: PUSH
20737: LD_INT 4
20739: ARRAY
20740: PPUSH
20741: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20745: LD_VAR 0 4
20749: PPUSH
20750: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20754: LD_VAR 0 4
20758: PPUSH
20759: LD_VAR 0 2
20763: PPUSH
20764: CALL_OW 180
// end else
20768: GO 20883
// if GetControl ( vehicle ) = control_remote then
20770: LD_VAR 0 1
20774: PPUSH
20775: CALL_OW 263
20779: PUSH
20780: LD_INT 2
20782: EQUAL
20783: IFFALSE 20844
// begin wait ( 0 0$2 ) ;
20785: LD_INT 70
20787: PPUSH
20788: CALL_OW 67
// if Connect ( vehicle ) then
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL 32907 0 1
20801: IFFALSE 20842
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20803: LD_VAR 0 1
20807: PPUSH
20808: LD_EXP 82
20812: PUSH
20813: LD_VAR 0 2
20817: ARRAY
20818: PUSH
20819: LD_INT 3
20821: ARRAY
20822: PPUSH
20823: LD_EXP 82
20827: PUSH
20828: LD_VAR 0 2
20832: ARRAY
20833: PUSH
20834: LD_INT 4
20836: ARRAY
20837: PPUSH
20838: CALL_OW 171
// end else
20842: GO 20883
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20844: LD_VAR 0 1
20848: PPUSH
20849: LD_EXP 82
20853: PUSH
20854: LD_VAR 0 2
20858: ARRAY
20859: PUSH
20860: LD_INT 3
20862: ARRAY
20863: PPUSH
20864: LD_EXP 82
20868: PUSH
20869: LD_VAR 0 2
20873: ARRAY
20874: PUSH
20875: LD_INT 4
20877: ARRAY
20878: PPUSH
20879: CALL_OW 171
// end ; end ;
20883: LD_VAR 0 3
20887: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20888: LD_INT 0
20890: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20891: LD_VAR 0 1
20895: PUSH
20896: LD_INT 250
20898: EQUAL
20899: PUSH
20900: LD_VAR 0 2
20904: PPUSH
20905: CALL_OW 264
20909: PUSH
20910: LD_INT 81
20912: EQUAL
20913: AND
20914: IFFALSE 20935
// MinerPlaceMine ( unit , x , y ) ;
20916: LD_VAR 0 2
20920: PPUSH
20921: LD_VAR 0 4
20925: PPUSH
20926: LD_VAR 0 5
20930: PPUSH
20931: CALL 23320 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20935: LD_VAR 0 1
20939: PUSH
20940: LD_INT 251
20942: EQUAL
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 264
20953: PUSH
20954: LD_INT 81
20956: EQUAL
20957: AND
20958: IFFALSE 20979
// MinerDetonateMine ( unit , x , y ) ;
20960: LD_VAR 0 2
20964: PPUSH
20965: LD_VAR 0 4
20969: PPUSH
20970: LD_VAR 0 5
20974: PPUSH
20975: CALL 23595 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20979: LD_VAR 0 1
20983: PUSH
20984: LD_INT 252
20986: EQUAL
20987: PUSH
20988: LD_VAR 0 2
20992: PPUSH
20993: CALL_OW 264
20997: PUSH
20998: LD_INT 81
21000: EQUAL
21001: AND
21002: IFFALSE 21023
// MinerCreateMinefield ( unit , x , y ) ;
21004: LD_VAR 0 2
21008: PPUSH
21009: LD_VAR 0 4
21013: PPUSH
21014: LD_VAR 0 5
21018: PPUSH
21019: CALL 24012 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21023: LD_VAR 0 1
21027: PUSH
21028: LD_INT 253
21030: EQUAL
21031: PUSH
21032: LD_VAR 0 2
21036: PPUSH
21037: CALL_OW 257
21041: PUSH
21042: LD_INT 5
21044: EQUAL
21045: AND
21046: IFFALSE 21067
// ComBinocular ( unit , x , y ) ;
21048: LD_VAR 0 2
21052: PPUSH
21053: LD_VAR 0 4
21057: PPUSH
21058: LD_VAR 0 5
21062: PPUSH
21063: CALL 24381 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21067: LD_VAR 0 1
21071: PUSH
21072: LD_INT 254
21074: EQUAL
21075: PUSH
21076: LD_VAR 0 2
21080: PPUSH
21081: CALL_OW 264
21085: PUSH
21086: LD_INT 99
21088: EQUAL
21089: AND
21090: PUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: CALL_OW 263
21100: PUSH
21101: LD_INT 3
21103: EQUAL
21104: AND
21105: IFFALSE 21121
// HackDestroyVehicle ( unit , selectedUnit ) ;
21107: LD_VAR 0 2
21111: PPUSH
21112: LD_VAR 0 3
21116: PPUSH
21117: CALL 22684 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21121: LD_VAR 0 1
21125: PUSH
21126: LD_INT 255
21128: EQUAL
21129: PUSH
21130: LD_VAR 0 2
21134: PPUSH
21135: CALL_OW 264
21139: PUSH
21140: LD_INT 14
21142: PUSH
21143: LD_INT 53
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: IN
21150: AND
21151: PUSH
21152: LD_VAR 0 4
21156: PPUSH
21157: LD_VAR 0 5
21161: PPUSH
21162: CALL_OW 488
21166: AND
21167: IFFALSE 21191
// CutTreeXYR ( unit , x , y , 12 ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 4
21178: PPUSH
21179: LD_VAR 0 5
21183: PPUSH
21184: LD_INT 12
21186: PPUSH
21187: CALL 21254 0 4
// if cmd = 256 then
21191: LD_VAR 0 1
21195: PUSH
21196: LD_INT 256
21198: EQUAL
21199: IFFALSE 21220
// SetFactoryWaypoint ( unit , x , y ) ;
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 4
21210: PPUSH
21211: LD_VAR 0 5
21215: PPUSH
21216: CALL 19038 0 3
// if cmd = 257 then
21220: LD_VAR 0 1
21224: PUSH
21225: LD_INT 257
21227: EQUAL
21228: IFFALSE 21249
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21230: LD_VAR 0 2
21234: PPUSH
21235: LD_VAR 0 4
21239: PPUSH
21240: LD_VAR 0 5
21244: PPUSH
21245: CALL 19400 0 3
// end ;
21249: LD_VAR 0 6
21253: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21265: LD_VAR 0 1
21269: NOT
21270: PUSH
21271: LD_VAR 0 2
21275: PPUSH
21276: LD_VAR 0 3
21280: PPUSH
21281: CALL_OW 488
21285: NOT
21286: OR
21287: PUSH
21288: LD_VAR 0 4
21292: NOT
21293: OR
21294: IFFALSE 21298
// exit ;
21296: GO 21638
// list := [ ] ;
21298: LD_ADDR_VAR 0 13
21302: PUSH
21303: EMPTY
21304: ST_TO_ADDR
// if x - r < 0 then
21305: LD_VAR 0 2
21309: PUSH
21310: LD_VAR 0 4
21314: MINUS
21315: PUSH
21316: LD_INT 0
21318: LESS
21319: IFFALSE 21331
// min_x := 0 else
21321: LD_ADDR_VAR 0 7
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
21329: GO 21347
// min_x := x - r ;
21331: LD_ADDR_VAR 0 7
21335: PUSH
21336: LD_VAR 0 2
21340: PUSH
21341: LD_VAR 0 4
21345: MINUS
21346: ST_TO_ADDR
// if y - r < 0 then
21347: LD_VAR 0 3
21351: PUSH
21352: LD_VAR 0 4
21356: MINUS
21357: PUSH
21358: LD_INT 0
21360: LESS
21361: IFFALSE 21373
// min_y := 0 else
21363: LD_ADDR_VAR 0 8
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
21371: GO 21389
// min_y := y - r ;
21373: LD_ADDR_VAR 0 8
21377: PUSH
21378: LD_VAR 0 3
21382: PUSH
21383: LD_VAR 0 4
21387: MINUS
21388: ST_TO_ADDR
// max_x := x + r ;
21389: LD_ADDR_VAR 0 9
21393: PUSH
21394: LD_VAR 0 2
21398: PUSH
21399: LD_VAR 0 4
21403: PLUS
21404: ST_TO_ADDR
// max_y := y + r ;
21405: LD_ADDR_VAR 0 10
21409: PUSH
21410: LD_VAR 0 3
21414: PUSH
21415: LD_VAR 0 4
21419: PLUS
21420: ST_TO_ADDR
// for _x = min_x to max_x do
21421: LD_ADDR_VAR 0 11
21425: PUSH
21426: DOUBLE
21427: LD_VAR 0 7
21431: DEC
21432: ST_TO_ADDR
21433: LD_VAR 0 9
21437: PUSH
21438: FOR_TO
21439: IFFALSE 21556
// for _y = min_y to max_y do
21441: LD_ADDR_VAR 0 12
21445: PUSH
21446: DOUBLE
21447: LD_VAR 0 8
21451: DEC
21452: ST_TO_ADDR
21453: LD_VAR 0 10
21457: PUSH
21458: FOR_TO
21459: IFFALSE 21552
// begin if not ValidHex ( _x , _y ) then
21461: LD_VAR 0 11
21465: PPUSH
21466: LD_VAR 0 12
21470: PPUSH
21471: CALL_OW 488
21475: NOT
21476: IFFALSE 21480
// continue ;
21478: GO 21458
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21480: LD_VAR 0 11
21484: PPUSH
21485: LD_VAR 0 12
21489: PPUSH
21490: CALL_OW 351
21494: PUSH
21495: LD_VAR 0 11
21499: PPUSH
21500: LD_VAR 0 12
21504: PPUSH
21505: CALL_OW 554
21509: AND
21510: IFFALSE 21550
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21512: LD_ADDR_VAR 0 13
21516: PUSH
21517: LD_VAR 0 13
21521: PPUSH
21522: LD_VAR 0 13
21526: PUSH
21527: LD_INT 1
21529: PLUS
21530: PPUSH
21531: LD_VAR 0 11
21535: PUSH
21536: LD_VAR 0 12
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PPUSH
21545: CALL_OW 2
21549: ST_TO_ADDR
// end ;
21550: GO 21458
21552: POP
21553: POP
21554: GO 21438
21556: POP
21557: POP
// if not list then
21558: LD_VAR 0 13
21562: NOT
21563: IFFALSE 21567
// exit ;
21565: GO 21638
// for i in list do
21567: LD_ADDR_VAR 0 6
21571: PUSH
21572: LD_VAR 0 13
21576: PUSH
21577: FOR_IN
21578: IFFALSE 21636
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_STRING M
21587: PUSH
21588: LD_VAR 0 6
21592: PUSH
21593: LD_INT 1
21595: ARRAY
21596: PUSH
21597: LD_VAR 0 6
21601: PUSH
21602: LD_INT 2
21604: ARRAY
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 0
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: PPUSH
21630: CALL_OW 447
21634: GO 21577
21636: POP
21637: POP
// end ;
21638: LD_VAR 0 5
21642: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21643: LD_EXP 85
21647: NOT
21648: IFFALSE 21698
21650: GO 21652
21652: DISABLE
// begin initHack := true ;
21653: LD_ADDR_EXP 85
21657: PUSH
21658: LD_INT 1
21660: ST_TO_ADDR
// hackTanks := [ ] ;
21661: LD_ADDR_EXP 86
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21668: LD_ADDR_EXP 87
21672: PUSH
21673: EMPTY
21674: ST_TO_ADDR
// hackLimit := 3 ;
21675: LD_ADDR_EXP 88
21679: PUSH
21680: LD_INT 3
21682: ST_TO_ADDR
// hackDist := 12 ;
21683: LD_ADDR_EXP 89
21687: PUSH
21688: LD_INT 12
21690: ST_TO_ADDR
// hackCounter := [ ] ;
21691: LD_ADDR_EXP 90
21695: PUSH
21696: EMPTY
21697: ST_TO_ADDR
// end ;
21698: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21699: LD_EXP 85
21703: PUSH
21704: LD_INT 34
21706: PUSH
21707: LD_INT 99
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PPUSH
21714: CALL_OW 69
21718: AND
21719: IFFALSE 21972
21721: GO 21723
21723: DISABLE
21724: LD_INT 0
21726: PPUSH
21727: PPUSH
// begin enable ;
21728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21729: LD_ADDR_VAR 0 1
21733: PUSH
21734: LD_INT 34
21736: PUSH
21737: LD_INT 99
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 69
21748: PUSH
21749: FOR_IN
21750: IFFALSE 21970
// begin if not i in hackTanks then
21752: LD_VAR 0 1
21756: PUSH
21757: LD_EXP 86
21761: IN
21762: NOT
21763: IFFALSE 21846
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21765: LD_ADDR_EXP 86
21769: PUSH
21770: LD_EXP 86
21774: PPUSH
21775: LD_EXP 86
21779: PUSH
21780: LD_INT 1
21782: PLUS
21783: PPUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 1
21793: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21794: LD_ADDR_EXP 87
21798: PUSH
21799: LD_EXP 87
21803: PPUSH
21804: LD_EXP 87
21808: PUSH
21809: LD_INT 1
21811: PLUS
21812: PPUSH
21813: EMPTY
21814: PPUSH
21815: CALL_OW 1
21819: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21820: LD_ADDR_EXP 90
21824: PUSH
21825: LD_EXP 90
21829: PPUSH
21830: LD_EXP 90
21834: PUSH
21835: LD_INT 1
21837: PLUS
21838: PPUSH
21839: EMPTY
21840: PPUSH
21841: CALL_OW 1
21845: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 302
21855: NOT
21856: IFFALSE 21869
// begin HackUnlinkAll ( i ) ;
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL 21975 0 1
// continue ;
21867: GO 21749
// end ; HackCheckCapturedStatus ( i ) ;
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL 22418 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_INT 81
21885: PUSH
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL_OW 255
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 33
21902: PUSH
21903: LD_INT 3
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 91
21912: PUSH
21913: LD_VAR 0 1
21917: PUSH
21918: LD_EXP 89
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 50
21930: PUSH
21931: EMPTY
21932: LIST
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PPUSH
21940: CALL_OW 69
21944: ST_TO_ADDR
// if not tmp then
21945: LD_VAR 0 2
21949: NOT
21950: IFFALSE 21954
// continue ;
21952: GO 21749
// HackLink ( i , tmp ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: CALL 22111 0 2
// end ;
21968: GO 21749
21970: POP
21971: POP
// end ;
21972: PPOPN 2
21974: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21975: LD_INT 0
21977: PPUSH
21978: PPUSH
21979: PPUSH
// if not hack in hackTanks then
21980: LD_VAR 0 1
21984: PUSH
21985: LD_EXP 86
21989: IN
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22106
// index := GetElementIndex ( hackTanks , hack ) ;
21995: LD_ADDR_VAR 0 4
21999: PUSH
22000: LD_EXP 86
22004: PPUSH
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL 29723 0 2
22014: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22015: LD_EXP 87
22019: PUSH
22020: LD_VAR 0 4
22024: ARRAY
22025: IFFALSE 22106
// begin for i in hackTanksCaptured [ index ] do
22027: LD_ADDR_VAR 0 3
22031: PUSH
22032: LD_EXP 87
22036: PUSH
22037: LD_VAR 0 4
22041: ARRAY
22042: PUSH
22043: FOR_IN
22044: IFFALSE 22070
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22046: LD_VAR 0 3
22050: PUSH
22051: LD_INT 1
22053: ARRAY
22054: PPUSH
22055: LD_VAR 0 3
22059: PUSH
22060: LD_INT 2
22062: ARRAY
22063: PPUSH
22064: CALL_OW 235
22068: GO 22043
22070: POP
22071: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22072: LD_ADDR_EXP 87
22076: PUSH
22077: LD_EXP 87
22081: PPUSH
22082: LD_VAR 0 4
22086: PPUSH
22087: EMPTY
22088: PPUSH
22089: CALL_OW 1
22093: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22094: LD_VAR 0 1
22098: PPUSH
22099: LD_INT 0
22101: PPUSH
22102: CALL_OW 505
// end ; end ;
22106: LD_VAR 0 2
22110: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22111: LD_INT 0
22113: PPUSH
22114: PPUSH
22115: PPUSH
// if not hack in hackTanks or not vehicles then
22116: LD_VAR 0 1
22120: PUSH
22121: LD_EXP 86
22125: IN
22126: NOT
22127: PUSH
22128: LD_VAR 0 2
22132: NOT
22133: OR
22134: IFFALSE 22138
// exit ;
22136: GO 22413
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22138: LD_ADDR_VAR 0 2
22142: PUSH
22143: LD_VAR 0 1
22147: PPUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: LD_INT 1
22158: PPUSH
22159: CALL 30373 0 4
22163: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22164: LD_ADDR_VAR 0 5
22168: PUSH
22169: LD_EXP 86
22173: PPUSH
22174: LD_VAR 0 1
22178: PPUSH
22179: CALL 29723 0 2
22183: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22184: LD_EXP 87
22188: PUSH
22189: LD_VAR 0 5
22193: ARRAY
22194: PUSH
22195: LD_EXP 88
22199: LESS
22200: IFFALSE 22389
// begin for i := 1 to vehicles do
22202: LD_ADDR_VAR 0 4
22206: PUSH
22207: DOUBLE
22208: LD_INT 1
22210: DEC
22211: ST_TO_ADDR
22212: LD_VAR 0 2
22216: PUSH
22217: FOR_TO
22218: IFFALSE 22387
// begin if hackTanksCaptured [ index ] = hackLimit then
22220: LD_EXP 87
22224: PUSH
22225: LD_VAR 0 5
22229: ARRAY
22230: PUSH
22231: LD_EXP 88
22235: EQUAL
22236: IFFALSE 22240
// break ;
22238: GO 22387
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22240: LD_ADDR_EXP 90
22244: PUSH
22245: LD_EXP 90
22249: PPUSH
22250: LD_VAR 0 5
22254: PPUSH
22255: LD_EXP 90
22259: PUSH
22260: LD_VAR 0 5
22264: ARRAY
22265: PUSH
22266: LD_INT 1
22268: PLUS
22269: PPUSH
22270: CALL_OW 1
22274: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22275: LD_ADDR_EXP 87
22279: PUSH
22280: LD_EXP 87
22284: PPUSH
22285: LD_VAR 0 5
22289: PUSH
22290: LD_EXP 87
22294: PUSH
22295: LD_VAR 0 5
22299: ARRAY
22300: PUSH
22301: LD_INT 1
22303: PLUS
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PPUSH
22309: LD_VAR 0 2
22313: PUSH
22314: LD_VAR 0 4
22318: ARRAY
22319: PUSH
22320: LD_VAR 0 2
22324: PUSH
22325: LD_VAR 0 4
22329: ARRAY
22330: PPUSH
22331: CALL_OW 255
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PPUSH
22340: CALL 29938 0 3
22344: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22345: LD_VAR 0 2
22349: PUSH
22350: LD_VAR 0 4
22354: ARRAY
22355: PPUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 255
22365: PPUSH
22366: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22370: LD_VAR 0 2
22374: PUSH
22375: LD_VAR 0 4
22379: ARRAY
22380: PPUSH
22381: CALL_OW 141
// end ;
22385: GO 22217
22387: POP
22388: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22389: LD_VAR 0 1
22393: PPUSH
22394: LD_EXP 87
22398: PUSH
22399: LD_VAR 0 5
22403: ARRAY
22404: PUSH
22405: LD_INT 0
22407: PLUS
22408: PPUSH
22409: CALL_OW 505
// end ;
22413: LD_VAR 0 3
22417: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22418: LD_INT 0
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
// if not hack in hackTanks then
22424: LD_VAR 0 1
22428: PUSH
22429: LD_EXP 86
22433: IN
22434: NOT
22435: IFFALSE 22439
// exit ;
22437: GO 22679
// index := GetElementIndex ( hackTanks , hack ) ;
22439: LD_ADDR_VAR 0 4
22443: PUSH
22444: LD_EXP 86
22448: PPUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL 29723 0 2
22458: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22459: LD_ADDR_VAR 0 3
22463: PUSH
22464: DOUBLE
22465: LD_EXP 87
22469: PUSH
22470: LD_VAR 0 4
22474: ARRAY
22475: INC
22476: ST_TO_ADDR
22477: LD_INT 1
22479: PUSH
22480: FOR_DOWNTO
22481: IFFALSE 22653
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22483: LD_ADDR_VAR 0 5
22487: PUSH
22488: LD_EXP 87
22492: PUSH
22493: LD_VAR 0 4
22497: ARRAY
22498: PUSH
22499: LD_VAR 0 3
22503: ARRAY
22504: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22505: LD_VAR 0 5
22509: PUSH
22510: LD_INT 1
22512: ARRAY
22513: PPUSH
22514: CALL_OW 302
22518: NOT
22519: PUSH
22520: LD_VAR 0 5
22524: PUSH
22525: LD_INT 1
22527: ARRAY
22528: PPUSH
22529: CALL_OW 255
22533: PUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: CALL_OW 255
22543: NONEQUAL
22544: OR
22545: IFFALSE 22651
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22547: LD_VAR 0 5
22551: PUSH
22552: LD_INT 1
22554: ARRAY
22555: PPUSH
22556: CALL_OW 305
22560: PUSH
22561: LD_VAR 0 5
22565: PUSH
22566: LD_INT 1
22568: ARRAY
22569: PPUSH
22570: CALL_OW 255
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 255
22584: EQUAL
22585: AND
22586: IFFALSE 22610
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22588: LD_VAR 0 5
22592: PUSH
22593: LD_INT 1
22595: ARRAY
22596: PPUSH
22597: LD_VAR 0 5
22601: PUSH
22602: LD_INT 2
22604: ARRAY
22605: PPUSH
22606: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22610: LD_ADDR_EXP 87
22614: PUSH
22615: LD_EXP 87
22619: PPUSH
22620: LD_VAR 0 4
22624: PPUSH
22625: LD_EXP 87
22629: PUSH
22630: LD_VAR 0 4
22634: ARRAY
22635: PPUSH
22636: LD_VAR 0 3
22640: PPUSH
22641: CALL_OW 3
22645: PPUSH
22646: CALL_OW 1
22650: ST_TO_ADDR
// end ; end ;
22651: GO 22480
22653: POP
22654: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_EXP 87
22664: PUSH
22665: LD_VAR 0 4
22669: ARRAY
22670: PUSH
22671: LD_INT 0
22673: PLUS
22674: PPUSH
22675: CALL_OW 505
// end ;
22679: LD_VAR 0 2
22683: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22684: LD_INT 0
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
// if not hack in hackTanks then
22690: LD_VAR 0 1
22694: PUSH
22695: LD_EXP 86
22699: IN
22700: NOT
22701: IFFALSE 22705
// exit ;
22703: GO 22790
// index := GetElementIndex ( hackTanks , hack ) ;
22705: LD_ADDR_VAR 0 5
22709: PUSH
22710: LD_EXP 86
22714: PPUSH
22715: LD_VAR 0 1
22719: PPUSH
22720: CALL 29723 0 2
22724: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22725: LD_ADDR_VAR 0 4
22729: PUSH
22730: DOUBLE
22731: LD_INT 1
22733: DEC
22734: ST_TO_ADDR
22735: LD_EXP 87
22739: PUSH
22740: LD_VAR 0 5
22744: ARRAY
22745: PUSH
22746: FOR_TO
22747: IFFALSE 22788
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22749: LD_EXP 87
22753: PUSH
22754: LD_VAR 0 5
22758: ARRAY
22759: PUSH
22760: LD_VAR 0 4
22764: ARRAY
22765: PUSH
22766: LD_INT 1
22768: ARRAY
22769: PUSH
22770: LD_VAR 0 2
22774: EQUAL
22775: IFFALSE 22786
// KillUnit ( vehicle ) ;
22777: LD_VAR 0 2
22781: PPUSH
22782: CALL_OW 66
22786: GO 22746
22788: POP
22789: POP
// end ;
22790: LD_VAR 0 3
22794: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22795: LD_EXP 91
22799: NOT
22800: IFFALSE 22835
22802: GO 22804
22804: DISABLE
// begin initMiner := true ;
22805: LD_ADDR_EXP 91
22809: PUSH
22810: LD_INT 1
22812: ST_TO_ADDR
// minersList := [ ] ;
22813: LD_ADDR_EXP 92
22817: PUSH
22818: EMPTY
22819: ST_TO_ADDR
// minerMinesList := [ ] ;
22820: LD_ADDR_EXP 93
22824: PUSH
22825: EMPTY
22826: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22827: LD_ADDR_EXP 94
22831: PUSH
22832: LD_INT 5
22834: ST_TO_ADDR
// end ;
22835: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22836: LD_EXP 91
22840: PUSH
22841: LD_INT 34
22843: PUSH
22844: LD_INT 81
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PPUSH
22851: CALL_OW 69
22855: AND
22856: IFFALSE 23317
22858: GO 22860
22860: DISABLE
22861: LD_INT 0
22863: PPUSH
22864: PPUSH
22865: PPUSH
22866: PPUSH
// begin enable ;
22867: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22868: LD_ADDR_VAR 0 1
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 81
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: PUSH
22888: FOR_IN
22889: IFFALSE 22961
// begin if not i in minersList then
22891: LD_VAR 0 1
22895: PUSH
22896: LD_EXP 92
22900: IN
22901: NOT
22902: IFFALSE 22959
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22904: LD_ADDR_EXP 92
22908: PUSH
22909: LD_EXP 92
22913: PPUSH
22914: LD_EXP 92
22918: PUSH
22919: LD_INT 1
22921: PLUS
22922: PPUSH
22923: LD_VAR 0 1
22927: PPUSH
22928: CALL_OW 1
22932: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22933: LD_ADDR_EXP 93
22937: PUSH
22938: LD_EXP 93
22942: PPUSH
22943: LD_EXP 93
22947: PUSH
22948: LD_INT 1
22950: PLUS
22951: PPUSH
22952: EMPTY
22953: PPUSH
22954: CALL_OW 1
22958: ST_TO_ADDR
// end end ;
22959: GO 22888
22961: POP
22962: POP
// for i := minerMinesList downto 1 do
22963: LD_ADDR_VAR 0 1
22967: PUSH
22968: DOUBLE
22969: LD_EXP 93
22973: INC
22974: ST_TO_ADDR
22975: LD_INT 1
22977: PUSH
22978: FOR_DOWNTO
22979: IFFALSE 23315
// begin if IsLive ( minersList [ i ] ) then
22981: LD_EXP 92
22985: PUSH
22986: LD_VAR 0 1
22990: ARRAY
22991: PPUSH
22992: CALL_OW 300
22996: IFFALSE 23024
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22998: LD_EXP 92
23002: PUSH
23003: LD_VAR 0 1
23007: ARRAY
23008: PPUSH
23009: LD_EXP 93
23013: PUSH
23014: LD_VAR 0 1
23018: ARRAY
23019: PPUSH
23020: CALL_OW 505
// if not minerMinesList [ i ] then
23024: LD_EXP 93
23028: PUSH
23029: LD_VAR 0 1
23033: ARRAY
23034: NOT
23035: IFFALSE 23039
// continue ;
23037: GO 22978
// for j := minerMinesList [ i ] downto 1 do
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: DOUBLE
23045: LD_EXP 93
23049: PUSH
23050: LD_VAR 0 1
23054: ARRAY
23055: INC
23056: ST_TO_ADDR
23057: LD_INT 1
23059: PUSH
23060: FOR_DOWNTO
23061: IFFALSE 23311
// begin side := GetSide ( minersList [ i ] ) ;
23063: LD_ADDR_VAR 0 3
23067: PUSH
23068: LD_EXP 92
23072: PUSH
23073: LD_VAR 0 1
23077: ARRAY
23078: PPUSH
23079: CALL_OW 255
23083: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23084: LD_ADDR_VAR 0 4
23088: PUSH
23089: LD_EXP 93
23093: PUSH
23094: LD_VAR 0 1
23098: ARRAY
23099: PUSH
23100: LD_VAR 0 2
23104: ARRAY
23105: PUSH
23106: LD_INT 1
23108: ARRAY
23109: PPUSH
23110: LD_EXP 93
23114: PUSH
23115: LD_VAR 0 1
23119: ARRAY
23120: PUSH
23121: LD_VAR 0 2
23125: ARRAY
23126: PUSH
23127: LD_INT 2
23129: ARRAY
23130: PPUSH
23131: CALL_OW 428
23135: ST_TO_ADDR
// if not tmp then
23136: LD_VAR 0 4
23140: NOT
23141: IFFALSE 23145
// continue ;
23143: GO 23060
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23145: LD_VAR 0 4
23149: PUSH
23150: LD_INT 81
23152: PUSH
23153: LD_VAR 0 3
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: IN
23167: PUSH
23168: LD_EXP 93
23172: PUSH
23173: LD_VAR 0 1
23177: ARRAY
23178: PUSH
23179: LD_VAR 0 2
23183: ARRAY
23184: PUSH
23185: LD_INT 1
23187: ARRAY
23188: PPUSH
23189: LD_EXP 93
23193: PUSH
23194: LD_VAR 0 1
23198: ARRAY
23199: PUSH
23200: LD_VAR 0 2
23204: ARRAY
23205: PUSH
23206: LD_INT 2
23208: ARRAY
23209: PPUSH
23210: CALL_OW 458
23214: AND
23215: IFFALSE 23309
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23217: LD_EXP 93
23221: PUSH
23222: LD_VAR 0 1
23226: ARRAY
23227: PUSH
23228: LD_VAR 0 2
23232: ARRAY
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: PPUSH
23238: LD_EXP 93
23242: PUSH
23243: LD_VAR 0 1
23247: ARRAY
23248: PUSH
23249: LD_VAR 0 2
23253: ARRAY
23254: PUSH
23255: LD_INT 2
23257: ARRAY
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23268: LD_ADDR_EXP 93
23272: PUSH
23273: LD_EXP 93
23277: PPUSH
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_EXP 93
23287: PUSH
23288: LD_VAR 0 1
23292: ARRAY
23293: PPUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 3
23303: PPUSH
23304: CALL_OW 1
23308: ST_TO_ADDR
// end ; end ;
23309: GO 23060
23311: POP
23312: POP
// end ;
23313: GO 22978
23315: POP
23316: POP
// end ;
23317: PPOPN 4
23319: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23320: LD_INT 0
23322: PPUSH
23323: PPUSH
// result := false ;
23324: LD_ADDR_VAR 0 4
23328: PUSH
23329: LD_INT 0
23331: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 264
23341: PUSH
23342: LD_INT 81
23344: EQUAL
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23590
// index := GetElementIndex ( minersList , unit ) ;
23350: LD_ADDR_VAR 0 5
23354: PUSH
23355: LD_EXP 92
23359: PPUSH
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL 29723 0 2
23369: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23370: LD_EXP 93
23374: PUSH
23375: LD_VAR 0 5
23379: ARRAY
23380: PUSH
23381: LD_EXP 94
23385: GREATEREQUAL
23386: IFFALSE 23390
// exit ;
23388: GO 23590
// ComMoveXY ( unit , x , y ) ;
23390: LD_VAR 0 1
23394: PPUSH
23395: LD_VAR 0 2
23399: PPUSH
23400: LD_VAR 0 3
23404: PPUSH
23405: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23409: LD_INT 35
23411: PPUSH
23412: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23416: LD_VAR 0 1
23420: PPUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL 61078 0 3
23435: NOT
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 314
23446: AND
23447: IFFALSE 23451
// exit ;
23449: GO 23590
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23451: LD_VAR 0 2
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: CALL_OW 428
23465: PUSH
23466: LD_VAR 0 1
23470: EQUAL
23471: PUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 314
23481: NOT
23482: AND
23483: IFFALSE 23409
// PlaySoundXY ( x , y , PlantMine ) ;
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_VAR 0 3
23494: PPUSH
23495: LD_STRING PlantMine
23497: PPUSH
23498: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23502: LD_VAR 0 2
23506: PPUSH
23507: LD_VAR 0 3
23511: PPUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 255
23521: PPUSH
23522: LD_INT 0
23524: PPUSH
23525: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23529: LD_ADDR_EXP 93
23533: PUSH
23534: LD_EXP 93
23538: PPUSH
23539: LD_VAR 0 5
23543: PUSH
23544: LD_EXP 93
23548: PUSH
23549: LD_VAR 0 5
23553: ARRAY
23554: PUSH
23555: LD_INT 1
23557: PLUS
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PPUSH
23563: LD_VAR 0 2
23567: PUSH
23568: LD_VAR 0 3
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PPUSH
23577: CALL 29938 0 3
23581: ST_TO_ADDR
// result := true ;
23582: LD_ADDR_VAR 0 4
23586: PUSH
23587: LD_INT 1
23589: ST_TO_ADDR
// end ;
23590: LD_VAR 0 4
23594: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23595: LD_INT 0
23597: PPUSH
23598: PPUSH
23599: PPUSH
// if not unit in minersList then
23600: LD_VAR 0 1
23604: PUSH
23605: LD_EXP 92
23609: IN
23610: NOT
23611: IFFALSE 23615
// exit ;
23613: GO 24007
// index := GetElementIndex ( minersList , unit ) ;
23615: LD_ADDR_VAR 0 6
23619: PUSH
23620: LD_EXP 92
23624: PPUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL 29723 0 2
23634: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23635: LD_ADDR_VAR 0 5
23639: PUSH
23640: DOUBLE
23641: LD_EXP 93
23645: PUSH
23646: LD_VAR 0 6
23650: ARRAY
23651: INC
23652: ST_TO_ADDR
23653: LD_INT 1
23655: PUSH
23656: FOR_DOWNTO
23657: IFFALSE 23818
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23659: LD_EXP 93
23663: PUSH
23664: LD_VAR 0 6
23668: ARRAY
23669: PUSH
23670: LD_VAR 0 5
23674: ARRAY
23675: PUSH
23676: LD_INT 1
23678: ARRAY
23679: PUSH
23680: LD_VAR 0 2
23684: EQUAL
23685: PUSH
23686: LD_EXP 93
23690: PUSH
23691: LD_VAR 0 6
23695: ARRAY
23696: PUSH
23697: LD_VAR 0 5
23701: ARRAY
23702: PUSH
23703: LD_INT 2
23705: ARRAY
23706: PUSH
23707: LD_VAR 0 3
23711: EQUAL
23712: AND
23713: IFFALSE 23816
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23715: LD_EXP 93
23719: PUSH
23720: LD_VAR 0 6
23724: ARRAY
23725: PUSH
23726: LD_VAR 0 5
23730: ARRAY
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: PPUSH
23736: LD_EXP 93
23740: PUSH
23741: LD_VAR 0 6
23745: ARRAY
23746: PUSH
23747: LD_VAR 0 5
23751: ARRAY
23752: PUSH
23753: LD_INT 2
23755: ARRAY
23756: PPUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 255
23766: PPUSH
23767: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23771: LD_ADDR_EXP 93
23775: PUSH
23776: LD_EXP 93
23780: PPUSH
23781: LD_VAR 0 6
23785: PPUSH
23786: LD_EXP 93
23790: PUSH
23791: LD_VAR 0 6
23795: ARRAY
23796: PPUSH
23797: LD_VAR 0 5
23801: PPUSH
23802: CALL_OW 3
23806: PPUSH
23807: CALL_OW 1
23811: ST_TO_ADDR
// exit ;
23812: POP
23813: POP
23814: GO 24007
// end ; end ;
23816: GO 23656
23818: POP
23819: POP
// for i := minerMinesList [ index ] downto 1 do
23820: LD_ADDR_VAR 0 5
23824: PUSH
23825: DOUBLE
23826: LD_EXP 93
23830: PUSH
23831: LD_VAR 0 6
23835: ARRAY
23836: INC
23837: ST_TO_ADDR
23838: LD_INT 1
23840: PUSH
23841: FOR_DOWNTO
23842: IFFALSE 24005
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23844: LD_EXP 93
23848: PUSH
23849: LD_VAR 0 6
23853: ARRAY
23854: PUSH
23855: LD_VAR 0 5
23859: ARRAY
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: LD_EXP 93
23869: PUSH
23870: LD_VAR 0 6
23874: ARRAY
23875: PUSH
23876: LD_VAR 0 5
23880: ARRAY
23881: PUSH
23882: LD_INT 2
23884: ARRAY
23885: PPUSH
23886: LD_VAR 0 2
23890: PPUSH
23891: LD_VAR 0 3
23895: PPUSH
23896: CALL_OW 298
23900: PUSH
23901: LD_INT 6
23903: LESS
23904: IFFALSE 24003
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23906: LD_EXP 93
23910: PUSH
23911: LD_VAR 0 6
23915: ARRAY
23916: PUSH
23917: LD_VAR 0 5
23921: ARRAY
23922: PUSH
23923: LD_INT 1
23925: ARRAY
23926: PPUSH
23927: LD_EXP 93
23931: PUSH
23932: LD_VAR 0 6
23936: ARRAY
23937: PUSH
23938: LD_VAR 0 5
23942: ARRAY
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: PPUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 255
23957: PPUSH
23958: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23962: LD_ADDR_EXP 93
23966: PUSH
23967: LD_EXP 93
23971: PPUSH
23972: LD_VAR 0 6
23976: PPUSH
23977: LD_EXP 93
23981: PUSH
23982: LD_VAR 0 6
23986: ARRAY
23987: PPUSH
23988: LD_VAR 0 5
23992: PPUSH
23993: CALL_OW 3
23997: PPUSH
23998: CALL_OW 1
24002: ST_TO_ADDR
// end ; end ;
24003: GO 23841
24005: POP
24006: POP
// end ;
24007: LD_VAR 0 4
24011: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
24019: PPUSH
24020: PPUSH
24021: PPUSH
24022: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24023: LD_VAR 0 1
24027: PPUSH
24028: CALL_OW 264
24032: PUSH
24033: LD_INT 81
24035: EQUAL
24036: NOT
24037: PUSH
24038: LD_VAR 0 1
24042: PUSH
24043: LD_EXP 92
24047: IN
24048: NOT
24049: OR
24050: IFFALSE 24054
// exit ;
24052: GO 24376
// index := GetElementIndex ( minersList , unit ) ;
24054: LD_ADDR_VAR 0 6
24058: PUSH
24059: LD_EXP 92
24063: PPUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL 29723 0 2
24073: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24074: LD_ADDR_VAR 0 8
24078: PUSH
24079: LD_EXP 94
24083: PUSH
24084: LD_EXP 93
24088: PUSH
24089: LD_VAR 0 6
24093: ARRAY
24094: MINUS
24095: ST_TO_ADDR
// if not minesFreeAmount then
24096: LD_VAR 0 8
24100: NOT
24101: IFFALSE 24105
// exit ;
24103: GO 24376
// tmp := [ ] ;
24105: LD_ADDR_VAR 0 7
24109: PUSH
24110: EMPTY
24111: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24112: LD_ADDR_VAR 0 5
24116: PUSH
24117: DOUBLE
24118: LD_INT 1
24120: DEC
24121: ST_TO_ADDR
24122: LD_VAR 0 8
24126: PUSH
24127: FOR_TO
24128: IFFALSE 24323
// begin _d := rand ( 0 , 5 ) ;
24130: LD_ADDR_VAR 0 11
24134: PUSH
24135: LD_INT 0
24137: PPUSH
24138: LD_INT 5
24140: PPUSH
24141: CALL_OW 12
24145: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24146: LD_ADDR_VAR 0 12
24150: PUSH
24151: LD_INT 2
24153: PPUSH
24154: LD_INT 6
24156: PPUSH
24157: CALL_OW 12
24161: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24162: LD_ADDR_VAR 0 9
24166: PUSH
24167: LD_VAR 0 2
24171: PPUSH
24172: LD_VAR 0 11
24176: PPUSH
24177: LD_VAR 0 12
24181: PPUSH
24182: CALL_OW 272
24186: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24187: LD_ADDR_VAR 0 10
24191: PUSH
24192: LD_VAR 0 3
24196: PPUSH
24197: LD_VAR 0 11
24201: PPUSH
24202: LD_VAR 0 12
24206: PPUSH
24207: CALL_OW 273
24211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24212: LD_VAR 0 9
24216: PPUSH
24217: LD_VAR 0 10
24221: PPUSH
24222: CALL_OW 488
24226: PUSH
24227: LD_VAR 0 9
24231: PUSH
24232: LD_VAR 0 10
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_VAR 0 7
24245: IN
24246: NOT
24247: AND
24248: PUSH
24249: LD_VAR 0 9
24253: PPUSH
24254: LD_VAR 0 10
24258: PPUSH
24259: CALL_OW 458
24263: NOT
24264: AND
24265: IFFALSE 24307
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24267: LD_ADDR_VAR 0 7
24271: PUSH
24272: LD_VAR 0 7
24276: PPUSH
24277: LD_VAR 0 7
24281: PUSH
24282: LD_INT 1
24284: PLUS
24285: PPUSH
24286: LD_VAR 0 9
24290: PUSH
24291: LD_VAR 0 10
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PPUSH
24300: CALL_OW 1
24304: ST_TO_ADDR
24305: GO 24321
// i := i - 1 ;
24307: LD_ADDR_VAR 0 5
24311: PUSH
24312: LD_VAR 0 5
24316: PUSH
24317: LD_INT 1
24319: MINUS
24320: ST_TO_ADDR
// end ;
24321: GO 24127
24323: POP
24324: POP
// for i in tmp do
24325: LD_ADDR_VAR 0 5
24329: PUSH
24330: LD_VAR 0 7
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24374
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24338: LD_VAR 0 1
24342: PPUSH
24343: LD_VAR 0 5
24347: PUSH
24348: LD_INT 1
24350: ARRAY
24351: PPUSH
24352: LD_VAR 0 5
24356: PUSH
24357: LD_INT 2
24359: ARRAY
24360: PPUSH
24361: CALL 23320 0 3
24365: NOT
24366: IFFALSE 24372
// exit ;
24368: POP
24369: POP
24370: GO 24376
24372: GO 24335
24374: POP
24375: POP
// end ;
24376: LD_VAR 0 4
24380: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24381: LD_INT 0
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
// if not GetClass ( unit ) = class_sniper then
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL_OW 257
24399: PUSH
24400: LD_INT 5
24402: EQUAL
24403: NOT
24404: IFFALSE 24408
// exit ;
24406: GO 24796
// dist := 8 ;
24408: LD_ADDR_VAR 0 5
24412: PUSH
24413: LD_INT 8
24415: ST_TO_ADDR
// viewRange := 12 ;
24416: LD_ADDR_VAR 0 7
24420: PUSH
24421: LD_INT 12
24423: ST_TO_ADDR
// side := GetSide ( unit ) ;
24424: LD_ADDR_VAR 0 6
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 255
24438: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24439: LD_INT 61
24441: PPUSH
24442: LD_VAR 0 6
24446: PPUSH
24447: CALL_OW 321
24451: PUSH
24452: LD_INT 2
24454: EQUAL
24455: IFFALSE 24465
// viewRange := 16 ;
24457: LD_ADDR_VAR 0 7
24461: PUSH
24462: LD_INT 16
24464: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24465: LD_VAR 0 1
24469: PPUSH
24470: LD_VAR 0 2
24474: PPUSH
24475: LD_VAR 0 3
24479: PPUSH
24480: CALL_OW 297
24484: PUSH
24485: LD_VAR 0 5
24489: GREATER
24490: IFFALSE 24569
// begin ComMoveXY ( unit , x , y ) ;
24492: LD_VAR 0 1
24496: PPUSH
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24511: LD_INT 35
24513: PPUSH
24514: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24518: LD_VAR 0 1
24522: PPUSH
24523: LD_VAR 0 2
24527: PPUSH
24528: LD_VAR 0 3
24532: PPUSH
24533: CALL 61078 0 3
24537: NOT
24538: IFFALSE 24542
// exit ;
24540: GO 24796
// until GetDistUnitXY ( unit , x , y ) < dist ;
24542: LD_VAR 0 1
24546: PPUSH
24547: LD_VAR 0 2
24551: PPUSH
24552: LD_VAR 0 3
24556: PPUSH
24557: CALL_OW 297
24561: PUSH
24562: LD_VAR 0 5
24566: LESS
24567: IFFALSE 24511
// end ; ComTurnXY ( unit , x , y ) ;
24569: LD_VAR 0 1
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: CALL_OW 118
// wait ( 5 ) ;
24588: LD_INT 5
24590: PPUSH
24591: CALL_OW 67
// _d := GetDir ( unit ) ;
24595: LD_ADDR_VAR 0 10
24599: PUSH
24600: LD_VAR 0 1
24604: PPUSH
24605: CALL_OW 254
24609: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24610: LD_ADDR_VAR 0 8
24614: PUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL_OW 250
24624: PPUSH
24625: LD_VAR 0 10
24629: PPUSH
24630: LD_VAR 0 5
24634: PPUSH
24635: CALL_OW 272
24639: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24640: LD_ADDR_VAR 0 9
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 251
24654: PPUSH
24655: LD_VAR 0 10
24659: PPUSH
24660: LD_VAR 0 5
24664: PPUSH
24665: CALL_OW 273
24669: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24670: LD_VAR 0 8
24674: PPUSH
24675: LD_VAR 0 9
24679: PPUSH
24680: CALL_OW 488
24684: NOT
24685: IFFALSE 24689
// exit ;
24687: GO 24796
// ComAnimCustom ( unit , 1 ) ;
24689: LD_VAR 0 1
24693: PPUSH
24694: LD_INT 1
24696: PPUSH
24697: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24701: LD_VAR 0 8
24705: PPUSH
24706: LD_VAR 0 9
24710: PPUSH
24711: LD_VAR 0 6
24715: PPUSH
24716: LD_VAR 0 7
24720: PPUSH
24721: CALL_OW 330
// repeat wait ( 1 ) ;
24725: LD_INT 1
24727: PPUSH
24728: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24732: LD_VAR 0 1
24736: PPUSH
24737: CALL_OW 316
24741: PUSH
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL_OW 314
24751: OR
24752: PUSH
24753: LD_VAR 0 1
24757: PPUSH
24758: CALL_OW 302
24762: NOT
24763: OR
24764: PUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 301
24774: OR
24775: IFFALSE 24725
// RemoveSeeing ( _x , _y , side ) ;
24777: LD_VAR 0 8
24781: PPUSH
24782: LD_VAR 0 9
24786: PPUSH
24787: LD_VAR 0 6
24791: PPUSH
24792: CALL_OW 331
// end ; end_of_file end_of_file
24796: LD_VAR 0 4
24800: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24801: LD_INT 0
24803: PPUSH
24804: PPUSH
// if exist_mode then
24805: LD_VAR 0 2
24809: IFFALSE 24834
// unit := CreateCharacter ( prefix & ident ) else
24811: LD_ADDR_VAR 0 5
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: LD_VAR 0 1
24825: STR
24826: PPUSH
24827: CALL_OW 34
24831: ST_TO_ADDR
24832: GO 24849
// unit := NewCharacter ( ident ) ;
24834: LD_ADDR_VAR 0 5
24838: PUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 25
24848: ST_TO_ADDR
// result := unit ;
24849: LD_ADDR_VAR 0 4
24853: PUSH
24854: LD_VAR 0 5
24858: ST_TO_ADDR
// end ;
24859: LD_VAR 0 4
24863: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24864: LD_INT 0
24866: PPUSH
24867: PPUSH
// if not side or not nation then
24868: LD_VAR 0 1
24872: NOT
24873: PUSH
24874: LD_VAR 0 2
24878: NOT
24879: OR
24880: IFFALSE 24884
// exit ;
24882: GO 25652
// case nation of nation_american :
24884: LD_VAR 0 2
24888: PUSH
24889: LD_INT 1
24891: DOUBLE
24892: EQUAL
24893: IFTRUE 24897
24895: GO 25111
24897: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24898: LD_ADDR_VAR 0 4
24902: PUSH
24903: LD_INT 35
24905: PUSH
24906: LD_INT 45
24908: PUSH
24909: LD_INT 46
24911: PUSH
24912: LD_INT 47
24914: PUSH
24915: LD_INT 82
24917: PUSH
24918: LD_INT 83
24920: PUSH
24921: LD_INT 84
24923: PUSH
24924: LD_INT 85
24926: PUSH
24927: LD_INT 86
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 6
24938: PUSH
24939: LD_INT 15
24941: PUSH
24942: LD_INT 16
24944: PUSH
24945: LD_INT 7
24947: PUSH
24948: LD_INT 12
24950: PUSH
24951: LD_INT 13
24953: PUSH
24954: LD_INT 10
24956: PUSH
24957: LD_INT 14
24959: PUSH
24960: LD_INT 20
24962: PUSH
24963: LD_INT 21
24965: PUSH
24966: LD_INT 22
24968: PUSH
24969: LD_INT 25
24971: PUSH
24972: LD_INT 32
24974: PUSH
24975: LD_INT 27
24977: PUSH
24978: LD_INT 36
24980: PUSH
24981: LD_INT 69
24983: PUSH
24984: LD_INT 39
24986: PUSH
24987: LD_INT 34
24989: PUSH
24990: LD_INT 40
24992: PUSH
24993: LD_INT 48
24995: PUSH
24996: LD_INT 49
24998: PUSH
24999: LD_INT 50
25001: PUSH
25002: LD_INT 51
25004: PUSH
25005: LD_INT 52
25007: PUSH
25008: LD_INT 53
25010: PUSH
25011: LD_INT 54
25013: PUSH
25014: LD_INT 55
25016: PUSH
25017: LD_INT 56
25019: PUSH
25020: LD_INT 57
25022: PUSH
25023: LD_INT 58
25025: PUSH
25026: LD_INT 59
25028: PUSH
25029: LD_INT 60
25031: PUSH
25032: LD_INT 61
25034: PUSH
25035: LD_INT 62
25037: PUSH
25038: LD_INT 80
25040: PUSH
25041: LD_INT 82
25043: PUSH
25044: LD_INT 83
25046: PUSH
25047: LD_INT 84
25049: PUSH
25050: LD_INT 85
25052: PUSH
25053: LD_INT 86
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: ST_TO_ADDR
25109: GO 25576
25111: LD_INT 2
25113: DOUBLE
25114: EQUAL
25115: IFTRUE 25119
25117: GO 25345
25119: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25120: LD_ADDR_VAR 0 4
25124: PUSH
25125: LD_INT 35
25127: PUSH
25128: LD_INT 45
25130: PUSH
25131: LD_INT 46
25133: PUSH
25134: LD_INT 47
25136: PUSH
25137: LD_INT 82
25139: PUSH
25140: LD_INT 83
25142: PUSH
25143: LD_INT 84
25145: PUSH
25146: LD_INT 85
25148: PUSH
25149: LD_INT 87
25151: PUSH
25152: LD_INT 70
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 11
25160: PUSH
25161: LD_INT 3
25163: PUSH
25164: LD_INT 4
25166: PUSH
25167: LD_INT 5
25169: PUSH
25170: LD_INT 6
25172: PUSH
25173: LD_INT 15
25175: PUSH
25176: LD_INT 18
25178: PUSH
25179: LD_INT 7
25181: PUSH
25182: LD_INT 17
25184: PUSH
25185: LD_INT 8
25187: PUSH
25188: LD_INT 20
25190: PUSH
25191: LD_INT 21
25193: PUSH
25194: LD_INT 22
25196: PUSH
25197: LD_INT 72
25199: PUSH
25200: LD_INT 26
25202: PUSH
25203: LD_INT 69
25205: PUSH
25206: LD_INT 39
25208: PUSH
25209: LD_INT 40
25211: PUSH
25212: LD_INT 41
25214: PUSH
25215: LD_INT 42
25217: PUSH
25218: LD_INT 43
25220: PUSH
25221: LD_INT 48
25223: PUSH
25224: LD_INT 49
25226: PUSH
25227: LD_INT 50
25229: PUSH
25230: LD_INT 51
25232: PUSH
25233: LD_INT 52
25235: PUSH
25236: LD_INT 53
25238: PUSH
25239: LD_INT 54
25241: PUSH
25242: LD_INT 55
25244: PUSH
25245: LD_INT 56
25247: PUSH
25248: LD_INT 60
25250: PUSH
25251: LD_INT 61
25253: PUSH
25254: LD_INT 62
25256: PUSH
25257: LD_INT 66
25259: PUSH
25260: LD_INT 67
25262: PUSH
25263: LD_INT 68
25265: PUSH
25266: LD_INT 81
25268: PUSH
25269: LD_INT 82
25271: PUSH
25272: LD_INT 83
25274: PUSH
25275: LD_INT 84
25277: PUSH
25278: LD_INT 85
25280: PUSH
25281: LD_INT 87
25283: PUSH
25284: LD_INT 88
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: ST_TO_ADDR
25343: GO 25576
25345: LD_INT 3
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25575
25353: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25354: LD_ADDR_VAR 0 4
25358: PUSH
25359: LD_INT 46
25361: PUSH
25362: LD_INT 47
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 82
25373: PUSH
25374: LD_INT 83
25376: PUSH
25377: LD_INT 84
25379: PUSH
25380: LD_INT 85
25382: PUSH
25383: LD_INT 86
25385: PUSH
25386: LD_INT 11
25388: PUSH
25389: LD_INT 9
25391: PUSH
25392: LD_INT 20
25394: PUSH
25395: LD_INT 19
25397: PUSH
25398: LD_INT 21
25400: PUSH
25401: LD_INT 24
25403: PUSH
25404: LD_INT 22
25406: PUSH
25407: LD_INT 25
25409: PUSH
25410: LD_INT 28
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: LD_INT 30
25418: PUSH
25419: LD_INT 31
25421: PUSH
25422: LD_INT 37
25424: PUSH
25425: LD_INT 38
25427: PUSH
25428: LD_INT 32
25430: PUSH
25431: LD_INT 27
25433: PUSH
25434: LD_INT 33
25436: PUSH
25437: LD_INT 69
25439: PUSH
25440: LD_INT 39
25442: PUSH
25443: LD_INT 34
25445: PUSH
25446: LD_INT 40
25448: PUSH
25449: LD_INT 71
25451: PUSH
25452: LD_INT 23
25454: PUSH
25455: LD_INT 44
25457: PUSH
25458: LD_INT 48
25460: PUSH
25461: LD_INT 49
25463: PUSH
25464: LD_INT 50
25466: PUSH
25467: LD_INT 51
25469: PUSH
25470: LD_INT 52
25472: PUSH
25473: LD_INT 53
25475: PUSH
25476: LD_INT 54
25478: PUSH
25479: LD_INT 55
25481: PUSH
25482: LD_INT 56
25484: PUSH
25485: LD_INT 57
25487: PUSH
25488: LD_INT 58
25490: PUSH
25491: LD_INT 59
25493: PUSH
25494: LD_INT 63
25496: PUSH
25497: LD_INT 64
25499: PUSH
25500: LD_INT 65
25502: PUSH
25503: LD_INT 82
25505: PUSH
25506: LD_INT 83
25508: PUSH
25509: LD_INT 84
25511: PUSH
25512: LD_INT 85
25514: PUSH
25515: LD_INT 86
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
25573: GO 25576
25575: POP
// if state > - 1 and state < 3 then
25576: LD_VAR 0 3
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: GREATER
25585: PUSH
25586: LD_VAR 0 3
25590: PUSH
25591: LD_INT 3
25593: LESS
25594: AND
25595: IFFALSE 25652
// for i in result do
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: LD_VAR 0 4
25606: PUSH
25607: FOR_IN
25608: IFFALSE 25650
// if GetTech ( i , side ) <> state then
25610: LD_VAR 0 5
25614: PPUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 321
25624: PUSH
25625: LD_VAR 0 3
25629: NONEQUAL
25630: IFFALSE 25648
// result := result diff i ;
25632: LD_ADDR_VAR 0 4
25636: PUSH
25637: LD_VAR 0 4
25641: PUSH
25642: LD_VAR 0 5
25646: DIFF
25647: ST_TO_ADDR
25648: GO 25607
25650: POP
25651: POP
// end ;
25652: LD_VAR 0 4
25656: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25657: LD_INT 0
25659: PPUSH
25660: PPUSH
25661: PPUSH
// result := true ;
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_INT 1
25669: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25670: LD_ADDR_VAR 0 5
25674: PUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: CALL_OW 480
25684: ST_TO_ADDR
// if not tmp then
25685: LD_VAR 0 5
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25743
// for i in tmp do
25694: LD_ADDR_VAR 0 4
25698: PUSH
25699: LD_VAR 0 5
25703: PUSH
25704: FOR_IN
25705: IFFALSE 25741
// if GetTech ( i , side ) <> state_researched then
25707: LD_VAR 0 4
25711: PPUSH
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL_OW 321
25721: PUSH
25722: LD_INT 2
25724: NONEQUAL
25725: IFFALSE 25739
// begin result := false ;
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_INT 0
25734: ST_TO_ADDR
// exit ;
25735: POP
25736: POP
25737: GO 25743
// end ;
25739: GO 25704
25741: POP
25742: POP
// end ;
25743: LD_VAR 0 3
25747: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25748: LD_INT 0
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25763: LD_VAR 0 1
25767: NOT
25768: PUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 257
25778: PUSH
25779: LD_INT 9
25781: NONEQUAL
25782: OR
25783: IFFALSE 25787
// exit ;
25785: GO 26360
// side := GetSide ( unit ) ;
25787: LD_ADDR_VAR 0 9
25791: PUSH
25792: LD_VAR 0 1
25796: PPUSH
25797: CALL_OW 255
25801: ST_TO_ADDR
// tech_space := tech_spacanom ;
25802: LD_ADDR_VAR 0 12
25806: PUSH
25807: LD_INT 29
25809: ST_TO_ADDR
// tech_time := tech_taurad ;
25810: LD_ADDR_VAR 0 13
25814: PUSH
25815: LD_INT 28
25817: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25818: LD_ADDR_VAR 0 11
25822: PUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: CALL_OW 310
25832: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25833: LD_VAR 0 11
25837: PPUSH
25838: CALL_OW 247
25842: PUSH
25843: LD_INT 2
25845: EQUAL
25846: IFFALSE 25850
// exit ;
25848: GO 26360
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25850: LD_ADDR_VAR 0 8
25854: PUSH
25855: LD_INT 81
25857: PUSH
25858: LD_VAR 0 9
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 3
25869: PUSH
25870: LD_INT 21
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PPUSH
25888: CALL_OW 69
25892: ST_TO_ADDR
// if not tmp then
25893: LD_VAR 0 8
25897: NOT
25898: IFFALSE 25902
// exit ;
25900: GO 26360
// if in_unit then
25902: LD_VAR 0 11
25906: IFFALSE 25930
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25908: LD_ADDR_VAR 0 10
25912: PUSH
25913: LD_VAR 0 8
25917: PPUSH
25918: LD_VAR 0 11
25922: PPUSH
25923: CALL_OW 74
25927: ST_TO_ADDR
25928: GO 25950
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25930: LD_ADDR_VAR 0 10
25934: PUSH
25935: LD_VAR 0 8
25939: PPUSH
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 74
25949: ST_TO_ADDR
// if not enemy then
25950: LD_VAR 0 10
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26360
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25959: LD_VAR 0 11
25963: PUSH
25964: LD_VAR 0 11
25968: PPUSH
25969: LD_VAR 0 10
25973: PPUSH
25974: CALL_OW 296
25978: PUSH
25979: LD_INT 13
25981: GREATER
25982: AND
25983: PUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: LD_VAR 0 10
25993: PPUSH
25994: CALL_OW 296
25998: PUSH
25999: LD_INT 12
26001: GREATER
26002: OR
26003: IFFALSE 26007
// exit ;
26005: GO 26360
// missile := [ 1 ] ;
26007: LD_ADDR_VAR 0 14
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26018: LD_VAR 0 9
26022: PPUSH
26023: LD_VAR 0 12
26027: PPUSH
26028: CALL_OW 325
26032: IFFALSE 26061
// missile := Replace ( missile , missile + 1 , 2 ) ;
26034: LD_ADDR_VAR 0 14
26038: PUSH
26039: LD_VAR 0 14
26043: PPUSH
26044: LD_VAR 0 14
26048: PUSH
26049: LD_INT 1
26051: PLUS
26052: PPUSH
26053: LD_INT 2
26055: PPUSH
26056: CALL_OW 1
26060: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26061: LD_VAR 0 9
26065: PPUSH
26066: LD_VAR 0 13
26070: PPUSH
26071: CALL_OW 325
26075: PUSH
26076: LD_VAR 0 10
26080: PPUSH
26081: CALL_OW 255
26085: PPUSH
26086: LD_VAR 0 13
26090: PPUSH
26091: CALL_OW 325
26095: NOT
26096: AND
26097: IFFALSE 26126
// missile := Replace ( missile , missile + 1 , 3 ) ;
26099: LD_ADDR_VAR 0 14
26103: PUSH
26104: LD_VAR 0 14
26108: PPUSH
26109: LD_VAR 0 14
26113: PUSH
26114: LD_INT 1
26116: PLUS
26117: PPUSH
26118: LD_INT 3
26120: PPUSH
26121: CALL_OW 1
26125: ST_TO_ADDR
// if missile < 2 then
26126: LD_VAR 0 14
26130: PUSH
26131: LD_INT 2
26133: LESS
26134: IFFALSE 26138
// exit ;
26136: GO 26360
// x := GetX ( enemy ) ;
26138: LD_ADDR_VAR 0 4
26142: PUSH
26143: LD_VAR 0 10
26147: PPUSH
26148: CALL_OW 250
26152: ST_TO_ADDR
// y := GetY ( enemy ) ;
26153: LD_ADDR_VAR 0 5
26157: PUSH
26158: LD_VAR 0 10
26162: PPUSH
26163: CALL_OW 251
26167: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26168: LD_ADDR_VAR 0 6
26172: PUSH
26173: LD_VAR 0 4
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: CALL_OW 12
26189: PLUS
26190: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26191: LD_ADDR_VAR 0 7
26195: PUSH
26196: LD_VAR 0 5
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PPUSH
26205: LD_INT 1
26207: PPUSH
26208: CALL_OW 12
26212: PLUS
26213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26214: LD_VAR 0 6
26218: PPUSH
26219: LD_VAR 0 7
26223: PPUSH
26224: CALL_OW 488
26228: NOT
26229: IFFALSE 26251
// begin _x := x ;
26231: LD_ADDR_VAR 0 6
26235: PUSH
26236: LD_VAR 0 4
26240: ST_TO_ADDR
// _y := y ;
26241: LD_ADDR_VAR 0 7
26245: PUSH
26246: LD_VAR 0 5
26250: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26251: LD_ADDR_VAR 0 3
26255: PUSH
26256: LD_INT 1
26258: PPUSH
26259: LD_VAR 0 14
26263: PPUSH
26264: CALL_OW 12
26268: ST_TO_ADDR
// case i of 1 :
26269: LD_VAR 0 3
26273: PUSH
26274: LD_INT 1
26276: DOUBLE
26277: EQUAL
26278: IFTRUE 26282
26280: GO 26299
26282: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26283: LD_VAR 0 1
26287: PPUSH
26288: LD_VAR 0 10
26292: PPUSH
26293: CALL_OW 115
26297: GO 26360
26299: LD_INT 2
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26329
26307: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26308: LD_VAR 0 1
26312: PPUSH
26313: LD_VAR 0 6
26317: PPUSH
26318: LD_VAR 0 7
26322: PPUSH
26323: CALL_OW 153
26327: GO 26360
26329: LD_INT 3
26331: DOUBLE
26332: EQUAL
26333: IFTRUE 26337
26335: GO 26359
26337: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26338: LD_VAR 0 1
26342: PPUSH
26343: LD_VAR 0 6
26347: PPUSH
26348: LD_VAR 0 7
26352: PPUSH
26353: CALL_OW 154
26357: GO 26360
26359: POP
// end ;
26360: LD_VAR 0 2
26364: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26365: LD_INT 0
26367: PPUSH
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
26372: PPUSH
// if not unit or not building then
26373: LD_VAR 0 1
26377: NOT
26378: PUSH
26379: LD_VAR 0 2
26383: NOT
26384: OR
26385: IFFALSE 26389
// exit ;
26387: GO 26547
// x := GetX ( building ) ;
26389: LD_ADDR_VAR 0 5
26393: PUSH
26394: LD_VAR 0 2
26398: PPUSH
26399: CALL_OW 250
26403: ST_TO_ADDR
// y := GetY ( building ) ;
26404: LD_ADDR_VAR 0 6
26408: PUSH
26409: LD_VAR 0 2
26413: PPUSH
26414: CALL_OW 251
26418: ST_TO_ADDR
// for i = 0 to 5 do
26419: LD_ADDR_VAR 0 4
26423: PUSH
26424: DOUBLE
26425: LD_INT 0
26427: DEC
26428: ST_TO_ADDR
26429: LD_INT 5
26431: PUSH
26432: FOR_TO
26433: IFFALSE 26545
// begin _x := ShiftX ( x , i , 3 ) ;
26435: LD_ADDR_VAR 0 7
26439: PUSH
26440: LD_VAR 0 5
26444: PPUSH
26445: LD_VAR 0 4
26449: PPUSH
26450: LD_INT 3
26452: PPUSH
26453: CALL_OW 272
26457: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26458: LD_ADDR_VAR 0 8
26462: PUSH
26463: LD_VAR 0 6
26467: PPUSH
26468: LD_VAR 0 4
26472: PPUSH
26473: LD_INT 3
26475: PPUSH
26476: CALL_OW 273
26480: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26481: LD_VAR 0 7
26485: PPUSH
26486: LD_VAR 0 8
26490: PPUSH
26491: CALL_OW 488
26495: NOT
26496: IFFALSE 26500
// continue ;
26498: GO 26432
// if HexInfo ( _x , _y ) = 0 then
26500: LD_VAR 0 7
26504: PPUSH
26505: LD_VAR 0 8
26509: PPUSH
26510: CALL_OW 428
26514: PUSH
26515: LD_INT 0
26517: EQUAL
26518: IFFALSE 26543
// begin ComMoveXY ( unit , _x , _y ) ;
26520: LD_VAR 0 1
26524: PPUSH
26525: LD_VAR 0 7
26529: PPUSH
26530: LD_VAR 0 8
26534: PPUSH
26535: CALL_OW 111
// exit ;
26539: POP
26540: POP
26541: GO 26547
// end ; end ;
26543: GO 26432
26545: POP
26546: POP
// end ;
26547: LD_VAR 0 3
26551: RET
// export function ScanBase ( side , base_area ) ; begin
26552: LD_INT 0
26554: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_INT 81
26567: PUSH
26568: LD_VAR 0 1
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PPUSH
26577: CALL_OW 70
26581: ST_TO_ADDR
// end ;
26582: LD_VAR 0 3
26586: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26587: LD_INT 0
26589: PPUSH
26590: PPUSH
26591: PPUSH
26592: PPUSH
// result := false ;
26593: LD_ADDR_VAR 0 2
26597: PUSH
26598: LD_INT 0
26600: ST_TO_ADDR
// side := GetSide ( unit ) ;
26601: LD_ADDR_VAR 0 3
26605: PUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL_OW 255
26615: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26616: LD_ADDR_VAR 0 4
26620: PUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: CALL_OW 248
26630: ST_TO_ADDR
// case nat of 1 :
26631: LD_VAR 0 4
26635: PUSH
26636: LD_INT 1
26638: DOUBLE
26639: EQUAL
26640: IFTRUE 26644
26642: GO 26655
26644: POP
// tech := tech_lassight ; 2 :
26645: LD_ADDR_VAR 0 5
26649: PUSH
26650: LD_INT 12
26652: ST_TO_ADDR
26653: GO 26694
26655: LD_INT 2
26657: DOUBLE
26658: EQUAL
26659: IFTRUE 26663
26661: GO 26674
26663: POP
// tech := tech_mortar ; 3 :
26664: LD_ADDR_VAR 0 5
26668: PUSH
26669: LD_INT 41
26671: ST_TO_ADDR
26672: GO 26694
26674: LD_INT 3
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26693
26682: POP
// tech := tech_bazooka ; end ;
26683: LD_ADDR_VAR 0 5
26687: PUSH
26688: LD_INT 44
26690: ST_TO_ADDR
26691: GO 26694
26693: POP
// if Researched ( side , tech ) then
26694: LD_VAR 0 3
26698: PPUSH
26699: LD_VAR 0 5
26703: PPUSH
26704: CALL_OW 325
26708: IFFALSE 26735
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26710: LD_ADDR_VAR 0 2
26714: PUSH
26715: LD_INT 5
26717: PUSH
26718: LD_INT 8
26720: PUSH
26721: LD_INT 9
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: PUSH
26729: LD_VAR 0 4
26733: ARRAY
26734: ST_TO_ADDR
// end ;
26735: LD_VAR 0 2
26739: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26740: LD_INT 0
26742: PPUSH
26743: PPUSH
26744: PPUSH
// if not mines then
26745: LD_VAR 0 2
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 26898
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26754: LD_ADDR_VAR 0 5
26758: PUSH
26759: LD_INT 81
26761: PUSH
26762: LD_VAR 0 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PPUSH
26792: CALL_OW 69
26796: ST_TO_ADDR
// for i in mines do
26797: LD_ADDR_VAR 0 4
26801: PUSH
26802: LD_VAR 0 2
26806: PUSH
26807: FOR_IN
26808: IFFALSE 26896
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26810: LD_VAR 0 4
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PPUSH
26819: LD_VAR 0 4
26823: PUSH
26824: LD_INT 2
26826: ARRAY
26827: PPUSH
26828: CALL_OW 458
26832: NOT
26833: IFFALSE 26837
// continue ;
26835: GO 26807
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26837: LD_VAR 0 4
26841: PUSH
26842: LD_INT 1
26844: ARRAY
26845: PPUSH
26846: LD_VAR 0 4
26850: PUSH
26851: LD_INT 2
26853: ARRAY
26854: PPUSH
26855: CALL_OW 428
26859: PUSH
26860: LD_VAR 0 5
26864: IN
26865: IFFALSE 26894
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26867: LD_VAR 0 4
26871: PUSH
26872: LD_INT 1
26874: ARRAY
26875: PPUSH
26876: LD_VAR 0 4
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: CALL_OW 456
// end ;
26894: GO 26807
26896: POP
26897: POP
// end ;
26898: LD_VAR 0 3
26902: RET
// export function Count ( array ) ; var i ; begin
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
// result := 0 ;
26907: LD_ADDR_VAR 0 2
26911: PUSH
26912: LD_INT 0
26914: ST_TO_ADDR
// for i in array do
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_VAR 0 1
26924: PUSH
26925: FOR_IN
26926: IFFALSE 26950
// if i then
26928: LD_VAR 0 3
26932: IFFALSE 26948
// result := result + 1 ;
26934: LD_ADDR_VAR 0 2
26938: PUSH
26939: LD_VAR 0 2
26943: PUSH
26944: LD_INT 1
26946: PLUS
26947: ST_TO_ADDR
26948: GO 26925
26950: POP
26951: POP
// end ;
26952: LD_VAR 0 2
26956: RET
// export function IsEmpty ( building ) ; begin
26957: LD_INT 0
26959: PPUSH
// if not building then
26960: LD_VAR 0 1
26964: NOT
26965: IFFALSE 26969
// exit ;
26967: GO 27012
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26969: LD_ADDR_VAR 0 2
26973: PUSH
26974: LD_VAR 0 1
26978: PUSH
26979: LD_INT 22
26981: PUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 255
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 58
26998: PUSH
26999: EMPTY
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: IN
27011: ST_TO_ADDR
// end ;
27012: LD_VAR 0 2
27016: RET
// export function IsNotFull ( building ) ; var places ; begin
27017: LD_INT 0
27019: PPUSH
27020: PPUSH
// if not building then
27021: LD_VAR 0 1
27025: NOT
27026: IFFALSE 27030
// exit ;
27028: GO 27201
// result := false ;
27030: LD_ADDR_VAR 0 2
27034: PUSH
27035: LD_INT 0
27037: ST_TO_ADDR
// places := 0 ;
27038: LD_ADDR_VAR 0 3
27042: PUSH
27043: LD_INT 0
27045: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 266
27055: PUSH
27056: LD_INT 0
27058: DOUBLE
27059: EQUAL
27060: IFTRUE 27118
27062: LD_INT 1
27064: DOUBLE
27065: EQUAL
27066: IFTRUE 27118
27068: LD_INT 6
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27118
27074: LD_INT 7
27076: DOUBLE
27077: EQUAL
27078: IFTRUE 27118
27080: LD_INT 8
27082: DOUBLE
27083: EQUAL
27084: IFTRUE 27118
27086: LD_INT 4
27088: DOUBLE
27089: EQUAL
27090: IFTRUE 27118
27092: LD_INT 5
27094: DOUBLE
27095: EQUAL
27096: IFTRUE 27118
27098: LD_INT 2
27100: DOUBLE
27101: EQUAL
27102: IFTRUE 27118
27104: LD_INT 3
27106: DOUBLE
27107: EQUAL
27108: IFTRUE 27118
27110: LD_INT 35
27112: DOUBLE
27113: EQUAL
27114: IFTRUE 27118
27116: GO 27129
27118: POP
// places := 6 ; b_bunker , b_breastwork :
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_INT 6
27126: ST_TO_ADDR
27127: GO 27174
27129: LD_INT 32
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27143
27135: LD_INT 31
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27154
27143: POP
// places := 1 ; b_control_tower :
27144: LD_ADDR_VAR 0 3
27148: PUSH
27149: LD_INT 1
27151: ST_TO_ADDR
27152: GO 27174
27154: LD_INT 36
27156: DOUBLE
27157: EQUAL
27158: IFTRUE 27162
27160: GO 27173
27162: POP
// places := 3 ; end ;
27163: LD_ADDR_VAR 0 3
27167: PUSH
27168: LD_INT 3
27170: ST_TO_ADDR
27171: GO 27174
27173: POP
// if places then
27174: LD_VAR 0 3
27178: IFFALSE 27201
// result := UnitsInside ( building ) < places ;
27180: LD_ADDR_VAR 0 2
27184: PUSH
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL_OW 313
27194: PUSH
27195: LD_VAR 0 3
27199: LESS
27200: ST_TO_ADDR
// end ;
27201: LD_VAR 0 2
27205: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27206: LD_INT 0
27208: PPUSH
27209: PPUSH
27210: PPUSH
27211: PPUSH
// tmp := [ ] ;
27212: LD_ADDR_VAR 0 3
27216: PUSH
27217: EMPTY
27218: ST_TO_ADDR
// list := [ ] ;
27219: LD_ADDR_VAR 0 5
27223: PUSH
27224: EMPTY
27225: ST_TO_ADDR
// for i = 16 to 25 do
27226: LD_ADDR_VAR 0 4
27230: PUSH
27231: DOUBLE
27232: LD_INT 16
27234: DEC
27235: ST_TO_ADDR
27236: LD_INT 25
27238: PUSH
27239: FOR_TO
27240: IFFALSE 27313
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: LD_VAR 0 3
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_VAR 0 1
27259: PPUSH
27260: CALL_OW 255
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 91
27271: PUSH
27272: LD_VAR 0 1
27276: PUSH
27277: LD_INT 6
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_VAR 0 4
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: PPUSH
27305: CALL_OW 69
27309: ADD
27310: ST_TO_ADDR
27311: GO 27239
27313: POP
27314: POP
// for i = 1 to tmp do
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: DOUBLE
27321: LD_INT 1
27323: DEC
27324: ST_TO_ADDR
27325: LD_VAR 0 3
27329: PUSH
27330: FOR_TO
27331: IFFALSE 27419
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27333: LD_ADDR_VAR 0 5
27337: PUSH
27338: LD_VAR 0 5
27342: PUSH
27343: LD_VAR 0 3
27347: PUSH
27348: LD_VAR 0 4
27352: ARRAY
27353: PPUSH
27354: CALL_OW 266
27358: PUSH
27359: LD_VAR 0 3
27363: PUSH
27364: LD_VAR 0 4
27368: ARRAY
27369: PPUSH
27370: CALL_OW 250
27374: PUSH
27375: LD_VAR 0 3
27379: PUSH
27380: LD_VAR 0 4
27384: ARRAY
27385: PPUSH
27386: CALL_OW 251
27390: PUSH
27391: LD_VAR 0 3
27395: PUSH
27396: LD_VAR 0 4
27400: ARRAY
27401: PPUSH
27402: CALL_OW 254
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: ADD
27416: ST_TO_ADDR
27417: GO 27330
27419: POP
27420: POP
// result := list ;
27421: LD_ADDR_VAR 0 2
27425: PUSH
27426: LD_VAR 0 5
27430: ST_TO_ADDR
// end ;
27431: LD_VAR 0 2
27435: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27436: LD_INT 0
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
// if not factory then
27445: LD_VAR 0 1
27449: NOT
27450: IFFALSE 27454
// exit ;
27452: GO 28047
// if control = control_apeman then
27454: LD_VAR 0 4
27458: PUSH
27459: LD_INT 5
27461: EQUAL
27462: IFFALSE 27571
// begin tmp := UnitsInside ( factory ) ;
27464: LD_ADDR_VAR 0 8
27468: PUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: CALL_OW 313
27478: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27479: LD_VAR 0 8
27483: PPUSH
27484: LD_INT 25
27486: PUSH
27487: LD_INT 12
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 72
27498: NOT
27499: IFFALSE 27509
// control := control_manual ;
27501: LD_ADDR_VAR 0 4
27505: PUSH
27506: LD_INT 1
27508: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27509: LD_ADDR_VAR 0 8
27513: PUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL 27206 0 1
27523: ST_TO_ADDR
// if tmp then
27524: LD_VAR 0 8
27528: IFFALSE 27571
// begin for i in tmp do
27530: LD_ADDR_VAR 0 7
27534: PUSH
27535: LD_VAR 0 8
27539: PUSH
27540: FOR_IN
27541: IFFALSE 27569
// if i [ 1 ] = b_ext_radio then
27543: LD_VAR 0 7
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: PUSH
27552: LD_INT 22
27554: EQUAL
27555: IFFALSE 27567
// begin control := control_remote ;
27557: LD_ADDR_VAR 0 4
27561: PUSH
27562: LD_INT 2
27564: ST_TO_ADDR
// break ;
27565: GO 27569
// end ;
27567: GO 27540
27569: POP
27570: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27571: LD_VAR 0 1
27575: PPUSH
27576: LD_VAR 0 2
27580: PPUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: LD_VAR 0 4
27590: PPUSH
27591: LD_VAR 0 5
27595: PPUSH
27596: CALL_OW 448
27600: IFFALSE 27635
// begin result := [ chassis , engine , control , weapon ] ;
27602: LD_ADDR_VAR 0 6
27606: PUSH
27607: LD_VAR 0 2
27611: PUSH
27612: LD_VAR 0 3
27616: PUSH
27617: LD_VAR 0 4
27621: PUSH
27622: LD_VAR 0 5
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// exit ;
27633: GO 28047
// end ; _chassis := AvailableChassisList ( factory ) ;
27635: LD_ADDR_VAR 0 9
27639: PUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: CALL_OW 475
27649: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27650: LD_ADDR_VAR 0 11
27654: PUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 476
27664: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27665: LD_ADDR_VAR 0 12
27669: PUSH
27670: LD_VAR 0 1
27674: PPUSH
27675: CALL_OW 477
27679: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27680: LD_ADDR_VAR 0 10
27684: PUSH
27685: LD_VAR 0 1
27689: PPUSH
27690: CALL_OW 478
27694: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27695: LD_VAR 0 9
27699: NOT
27700: PUSH
27701: LD_VAR 0 11
27705: NOT
27706: OR
27707: PUSH
27708: LD_VAR 0 12
27712: NOT
27713: OR
27714: PUSH
27715: LD_VAR 0 10
27719: NOT
27720: OR
27721: IFFALSE 27756
// begin result := [ chassis , engine , control , weapon ] ;
27723: LD_ADDR_VAR 0 6
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: LD_VAR 0 3
27737: PUSH
27738: LD_VAR 0 4
27742: PUSH
27743: LD_VAR 0 5
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: ST_TO_ADDR
// exit ;
27754: GO 28047
// end ; if not chassis in _chassis then
27756: LD_VAR 0 2
27760: PUSH
27761: LD_VAR 0 9
27765: IN
27766: NOT
27767: IFFALSE 27793
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27769: LD_ADDR_VAR 0 2
27773: PUSH
27774: LD_VAR 0 9
27778: PUSH
27779: LD_INT 1
27781: PPUSH
27782: LD_VAR 0 9
27786: PPUSH
27787: CALL_OW 12
27791: ARRAY
27792: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27793: LD_VAR 0 2
27797: PPUSH
27798: LD_VAR 0 3
27802: PPUSH
27803: CALL 28052 0 2
27807: NOT
27808: IFFALSE 27867
// repeat engine := _engine [ 1 ] ;
27810: LD_ADDR_VAR 0 3
27814: PUSH
27815: LD_VAR 0 11
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27824: LD_ADDR_VAR 0 11
27828: PUSH
27829: LD_VAR 0 11
27833: PPUSH
27834: LD_INT 1
27836: PPUSH
27837: CALL_OW 3
27841: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27842: LD_VAR 0 2
27846: PPUSH
27847: LD_VAR 0 3
27851: PPUSH
27852: CALL 28052 0 2
27856: PUSH
27857: LD_VAR 0 11
27861: PUSH
27862: EMPTY
27863: EQUAL
27864: OR
27865: IFFALSE 27810
// if not control in _control then
27867: LD_VAR 0 4
27871: PUSH
27872: LD_VAR 0 12
27876: IN
27877: NOT
27878: IFFALSE 27904
// control := _control [ rand ( 1 , _control ) ] ;
27880: LD_ADDR_VAR 0 4
27884: PUSH
27885: LD_VAR 0 12
27889: PUSH
27890: LD_INT 1
27892: PPUSH
27893: LD_VAR 0 12
27897: PPUSH
27898: CALL_OW 12
27902: ARRAY
27903: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27904: LD_VAR 0 2
27908: PPUSH
27909: LD_VAR 0 5
27913: PPUSH
27914: CALL 28272 0 2
27918: NOT
27919: IFFALSE 27978
// repeat weapon := _weapon [ 1 ] ;
27921: LD_ADDR_VAR 0 5
27925: PUSH
27926: LD_VAR 0 10
27930: PUSH
27931: LD_INT 1
27933: ARRAY
27934: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27935: LD_ADDR_VAR 0 10
27939: PUSH
27940: LD_VAR 0 10
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 3
27952: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27953: LD_VAR 0 2
27957: PPUSH
27958: LD_VAR 0 5
27962: PPUSH
27963: CALL 28272 0 2
27967: PUSH
27968: LD_VAR 0 10
27972: PUSH
27973: EMPTY
27974: EQUAL
27975: OR
27976: IFFALSE 27921
// result := [ ] ;
27978: LD_ADDR_VAR 0 6
27982: PUSH
27983: EMPTY
27984: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27985: LD_VAR 0 1
27989: PPUSH
27990: LD_VAR 0 2
27994: PPUSH
27995: LD_VAR 0 3
27999: PPUSH
28000: LD_VAR 0 4
28004: PPUSH
28005: LD_VAR 0 5
28009: PPUSH
28010: CALL_OW 448
28014: IFFALSE 28047
// result := [ chassis , engine , control , weapon ] ;
28016: LD_ADDR_VAR 0 6
28020: PUSH
28021: LD_VAR 0 2
28025: PUSH
28026: LD_VAR 0 3
28030: PUSH
28031: LD_VAR 0 4
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// end ;
28047: LD_VAR 0 6
28051: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28052: LD_INT 0
28054: PPUSH
// if not chassis or not engine then
28055: LD_VAR 0 1
28059: NOT
28060: PUSH
28061: LD_VAR 0 2
28065: NOT
28066: OR
28067: IFFALSE 28071
// exit ;
28069: GO 28267
// case engine of engine_solar :
28071: LD_VAR 0 2
28075: PUSH
28076: LD_INT 2
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28122
28084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 11
28092: PUSH
28093: LD_INT 12
28095: PUSH
28096: LD_INT 13
28098: PUSH
28099: LD_INT 14
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
28120: GO 28251
28122: LD_INT 1
28124: DOUBLE
28125: EQUAL
28126: IFTRUE 28130
28128: GO 28192
28130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28131: LD_ADDR_VAR 0 3
28135: PUSH
28136: LD_INT 11
28138: PUSH
28139: LD_INT 12
28141: PUSH
28142: LD_INT 13
28144: PUSH
28145: LD_INT 14
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 4
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: LD_INT 21
28165: PUSH
28166: LD_INT 23
28168: PUSH
28169: LD_INT 22
28171: PUSH
28172: LD_INT 24
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: ST_TO_ADDR
28190: GO 28251
28192: LD_INT 3
28194: DOUBLE
28195: EQUAL
28196: IFTRUE 28200
28198: GO 28250
28200: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_INT 13
28208: PUSH
28209: LD_INT 14
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: LD_INT 4
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: LD_INT 21
28226: PUSH
28227: LD_INT 22
28229: PUSH
28230: LD_INT 23
28232: PUSH
28233: LD_INT 24
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: ST_TO_ADDR
28248: GO 28251
28250: POP
// result := ( chassis in result ) ;
28251: LD_ADDR_VAR 0 3
28255: PUSH
28256: LD_VAR 0 1
28260: PUSH
28261: LD_VAR 0 3
28265: IN
28266: ST_TO_ADDR
// end ;
28267: LD_VAR 0 3
28271: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28272: LD_INT 0
28274: PPUSH
// if not chassis or not weapon then
28275: LD_VAR 0 1
28279: NOT
28280: PUSH
28281: LD_VAR 0 2
28285: NOT
28286: OR
28287: IFFALSE 28291
// exit ;
28289: GO 29351
// case weapon of us_machine_gun :
28291: LD_VAR 0 2
28295: PUSH
28296: LD_INT 2
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28334
28304: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28305: LD_ADDR_VAR 0 3
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: LD_INT 4
28321: PUSH
28322: LD_INT 5
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: ST_TO_ADDR
28332: GO 29335
28334: LD_INT 3
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 28372
28342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28343: LD_ADDR_VAR 0 3
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: LD_INT 5
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: ST_TO_ADDR
28370: GO 29335
28372: LD_INT 11
28374: DOUBLE
28375: EQUAL
28376: IFTRUE 28380
28378: GO 28410
28380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28381: LD_ADDR_VAR 0 3
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 3
28394: PUSH
28395: LD_INT 4
28397: PUSH
28398: LD_INT 5
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: ST_TO_ADDR
28408: GO 29335
28410: LD_INT 4
28412: DOUBLE
28413: EQUAL
28414: IFTRUE 28418
28416: GO 28444
28418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28419: LD_ADDR_VAR 0 3
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: LD_INT 4
28432: PUSH
28433: LD_INT 5
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: ST_TO_ADDR
28442: GO 29335
28444: LD_INT 5
28446: DOUBLE
28447: EQUAL
28448: IFTRUE 28452
28450: GO 28478
28452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: LD_INT 3
28463: PUSH
28464: LD_INT 4
28466: PUSH
28467: LD_INT 5
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
28476: GO 29335
28478: LD_INT 9
28480: DOUBLE
28481: EQUAL
28482: IFTRUE 28486
28484: GO 28512
28486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28487: LD_ADDR_VAR 0 3
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
28510: GO 29335
28512: LD_INT 7
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28546
28520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: LD_INT 4
28534: PUSH
28535: LD_INT 5
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
28544: GO 29335
28546: LD_INT 12
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28580
28554: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: LD_INT 3
28565: PUSH
28566: LD_INT 4
28568: PUSH
28569: LD_INT 5
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
28578: GO 29335
28580: LD_INT 13
28582: DOUBLE
28583: EQUAL
28584: IFTRUE 28588
28586: GO 28614
28588: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28589: LD_ADDR_VAR 0 3
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 3
28599: PUSH
28600: LD_INT 4
28602: PUSH
28603: LD_INT 5
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
28612: GO 29335
28614: LD_INT 14
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28640
28622: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 4
28630: PUSH
28631: LD_INT 5
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: ST_TO_ADDR
28638: GO 29335
28640: LD_INT 6
28642: DOUBLE
28643: EQUAL
28644: IFTRUE 28648
28646: GO 28666
28648: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28649: LD_ADDR_VAR 0 3
28653: PUSH
28654: LD_INT 4
28656: PUSH
28657: LD_INT 5
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: ST_TO_ADDR
28664: GO 29335
28666: LD_INT 10
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28692
28674: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28675: LD_ADDR_VAR 0 3
28679: PUSH
28680: LD_INT 4
28682: PUSH
28683: LD_INT 5
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: ST_TO_ADDR
28690: GO 29335
28692: LD_INT 22
28694: DOUBLE
28695: EQUAL
28696: IFTRUE 28700
28698: GO 28726
28700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28701: LD_ADDR_VAR 0 3
28705: PUSH
28706: LD_INT 11
28708: PUSH
28709: LD_INT 12
28711: PUSH
28712: LD_INT 13
28714: PUSH
28715: LD_INT 14
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
28724: GO 29335
28726: LD_INT 23
28728: DOUBLE
28729: EQUAL
28730: IFTRUE 28734
28732: GO 28760
28734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28735: LD_ADDR_VAR 0 3
28739: PUSH
28740: LD_INT 11
28742: PUSH
28743: LD_INT 12
28745: PUSH
28746: LD_INT 13
28748: PUSH
28749: LD_INT 14
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
28758: GO 29335
28760: LD_INT 24
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28794
28768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_INT 11
28776: PUSH
28777: LD_INT 12
28779: PUSH
28780: LD_INT 13
28782: PUSH
28783: LD_INT 14
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: ST_TO_ADDR
28792: GO 29335
28794: LD_INT 30
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28828
28802: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28803: LD_ADDR_VAR 0 3
28807: PUSH
28808: LD_INT 11
28810: PUSH
28811: LD_INT 12
28813: PUSH
28814: LD_INT 13
28816: PUSH
28817: LD_INT 14
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
28826: GO 29335
28828: LD_INT 25
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28854
28836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28837: LD_ADDR_VAR 0 3
28841: PUSH
28842: LD_INT 13
28844: PUSH
28845: LD_INT 14
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: ST_TO_ADDR
28852: GO 29335
28854: LD_INT 27
28856: DOUBLE
28857: EQUAL
28858: IFTRUE 28862
28860: GO 28880
28862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 13
28870: PUSH
28871: LD_INT 14
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: ST_TO_ADDR
28878: GO 29335
28880: LD_INT 92
28882: DOUBLE
28883: EQUAL
28884: IFTRUE 28888
28886: GO 28914
28888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28889: LD_ADDR_VAR 0 3
28893: PUSH
28894: LD_INT 11
28896: PUSH
28897: LD_INT 12
28899: PUSH
28900: LD_INT 13
28902: PUSH
28903: LD_INT 14
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
28912: GO 29335
28914: LD_INT 28
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28940
28922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28923: LD_ADDR_VAR 0 3
28927: PUSH
28928: LD_INT 13
28930: PUSH
28931: LD_INT 14
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: ST_TO_ADDR
28938: GO 29335
28940: LD_INT 29
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28966
28948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28949: LD_ADDR_VAR 0 3
28953: PUSH
28954: LD_INT 13
28956: PUSH
28957: LD_INT 14
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: ST_TO_ADDR
28964: GO 29335
28966: LD_INT 31
28968: DOUBLE
28969: EQUAL
28970: IFTRUE 28974
28972: GO 28992
28974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 13
28982: PUSH
28983: LD_INT 14
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: ST_TO_ADDR
28990: GO 29335
28992: LD_INT 26
28994: DOUBLE
28995: EQUAL
28996: IFTRUE 29000
28998: GO 29018
29000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29001: LD_ADDR_VAR 0 3
29005: PUSH
29006: LD_INT 13
29008: PUSH
29009: LD_INT 14
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: ST_TO_ADDR
29016: GO 29335
29018: LD_INT 42
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29052
29026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29027: LD_ADDR_VAR 0 3
29031: PUSH
29032: LD_INT 21
29034: PUSH
29035: LD_INT 22
29037: PUSH
29038: LD_INT 23
29040: PUSH
29041: LD_INT 24
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
29050: GO 29335
29052: LD_INT 43
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29086
29060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 22
29071: PUSH
29072: LD_INT 23
29074: PUSH
29075: LD_INT 24
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
29084: GO 29335
29086: LD_INT 44
29088: DOUBLE
29089: EQUAL
29090: IFTRUE 29094
29092: GO 29120
29094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29095: LD_ADDR_VAR 0 3
29099: PUSH
29100: LD_INT 21
29102: PUSH
29103: LD_INT 22
29105: PUSH
29106: LD_INT 23
29108: PUSH
29109: LD_INT 24
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
29118: GO 29335
29120: LD_INT 45
29122: DOUBLE
29123: EQUAL
29124: IFTRUE 29128
29126: GO 29154
29128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 21
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_INT 23
29142: PUSH
29143: LD_INT 24
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
29152: GO 29335
29154: LD_INT 49
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 29188
29162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29163: LD_ADDR_VAR 0 3
29167: PUSH
29168: LD_INT 21
29170: PUSH
29171: LD_INT 22
29173: PUSH
29174: LD_INT 23
29176: PUSH
29177: LD_INT 24
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
29186: GO 29335
29188: LD_INT 51
29190: DOUBLE
29191: EQUAL
29192: IFTRUE 29196
29194: GO 29222
29196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29197: LD_ADDR_VAR 0 3
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 22
29207: PUSH
29208: LD_INT 23
29210: PUSH
29211: LD_INT 24
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
29220: GO 29335
29222: LD_INT 52
29224: DOUBLE
29225: EQUAL
29226: IFTRUE 29230
29228: GO 29256
29230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_INT 21
29238: PUSH
29239: LD_INT 22
29241: PUSH
29242: LD_INT 23
29244: PUSH
29245: LD_INT 24
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: ST_TO_ADDR
29254: GO 29335
29256: LD_INT 53
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29282
29264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 23
29272: PUSH
29273: LD_INT 24
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: ST_TO_ADDR
29280: GO 29335
29282: LD_INT 46
29284: DOUBLE
29285: EQUAL
29286: IFTRUE 29290
29288: GO 29308
29290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29291: LD_ADDR_VAR 0 3
29295: PUSH
29296: LD_INT 23
29298: PUSH
29299: LD_INT 24
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: ST_TO_ADDR
29306: GO 29335
29308: LD_INT 47
29310: DOUBLE
29311: EQUAL
29312: IFTRUE 29316
29314: GO 29334
29316: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_INT 23
29324: PUSH
29325: LD_INT 24
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: ST_TO_ADDR
29332: GO 29335
29334: POP
// result := ( chassis in result ) ;
29335: LD_ADDR_VAR 0 3
29339: PUSH
29340: LD_VAR 0 1
29344: PUSH
29345: LD_VAR 0 3
29349: IN
29350: ST_TO_ADDR
// end ;
29351: LD_VAR 0 3
29355: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
// result := array ;
29365: LD_ADDR_VAR 0 5
29369: PUSH
29370: LD_VAR 0 1
29374: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29375: LD_VAR 0 1
29379: NOT
29380: PUSH
29381: LD_VAR 0 2
29385: NOT
29386: OR
29387: PUSH
29388: LD_VAR 0 3
29392: NOT
29393: OR
29394: PUSH
29395: LD_VAR 0 2
29399: PUSH
29400: LD_VAR 0 1
29404: GREATER
29405: OR
29406: PUSH
29407: LD_VAR 0 3
29411: PUSH
29412: LD_VAR 0 1
29416: GREATER
29417: OR
29418: IFFALSE 29422
// exit ;
29420: GO 29718
// if direction then
29422: LD_VAR 0 4
29426: IFFALSE 29490
// begin d := 1 ;
29428: LD_ADDR_VAR 0 9
29432: PUSH
29433: LD_INT 1
29435: ST_TO_ADDR
// if i_from > i_to then
29436: LD_VAR 0 2
29440: PUSH
29441: LD_VAR 0 3
29445: GREATER
29446: IFFALSE 29472
// length := ( array - i_from ) + i_to else
29448: LD_ADDR_VAR 0 11
29452: PUSH
29453: LD_VAR 0 1
29457: PUSH
29458: LD_VAR 0 2
29462: MINUS
29463: PUSH
29464: LD_VAR 0 3
29468: PLUS
29469: ST_TO_ADDR
29470: GO 29488
// length := i_to - i_from ;
29472: LD_ADDR_VAR 0 11
29476: PUSH
29477: LD_VAR 0 3
29481: PUSH
29482: LD_VAR 0 2
29486: MINUS
29487: ST_TO_ADDR
// end else
29488: GO 29551
// begin d := - 1 ;
29490: LD_ADDR_VAR 0 9
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: ST_TO_ADDR
// if i_from > i_to then
29499: LD_VAR 0 2
29503: PUSH
29504: LD_VAR 0 3
29508: GREATER
29509: IFFALSE 29529
// length := i_from - i_to else
29511: LD_ADDR_VAR 0 11
29515: PUSH
29516: LD_VAR 0 2
29520: PUSH
29521: LD_VAR 0 3
29525: MINUS
29526: ST_TO_ADDR
29527: GO 29551
// length := ( array - i_to ) + i_from ;
29529: LD_ADDR_VAR 0 11
29533: PUSH
29534: LD_VAR 0 1
29538: PUSH
29539: LD_VAR 0 3
29543: MINUS
29544: PUSH
29545: LD_VAR 0 2
29549: PLUS
29550: ST_TO_ADDR
// end ; if not length then
29551: LD_VAR 0 11
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 29718
// tmp := array ;
29560: LD_ADDR_VAR 0 10
29564: PUSH
29565: LD_VAR 0 1
29569: ST_TO_ADDR
// for i = 1 to length do
29570: LD_ADDR_VAR 0 6
29574: PUSH
29575: DOUBLE
29576: LD_INT 1
29578: DEC
29579: ST_TO_ADDR
29580: LD_VAR 0 11
29584: PUSH
29585: FOR_TO
29586: IFFALSE 29706
// begin for j = 1 to array do
29588: LD_ADDR_VAR 0 7
29592: PUSH
29593: DOUBLE
29594: LD_INT 1
29596: DEC
29597: ST_TO_ADDR
29598: LD_VAR 0 1
29602: PUSH
29603: FOR_TO
29604: IFFALSE 29692
// begin k := j + d ;
29606: LD_ADDR_VAR 0 8
29610: PUSH
29611: LD_VAR 0 7
29615: PUSH
29616: LD_VAR 0 9
29620: PLUS
29621: ST_TO_ADDR
// if k > array then
29622: LD_VAR 0 8
29626: PUSH
29627: LD_VAR 0 1
29631: GREATER
29632: IFFALSE 29642
// k := 1 ;
29634: LD_ADDR_VAR 0 8
29638: PUSH
29639: LD_INT 1
29641: ST_TO_ADDR
// if not k then
29642: LD_VAR 0 8
29646: NOT
29647: IFFALSE 29659
// k := array ;
29649: LD_ADDR_VAR 0 8
29653: PUSH
29654: LD_VAR 0 1
29658: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29659: LD_ADDR_VAR 0 10
29663: PUSH
29664: LD_VAR 0 10
29668: PPUSH
29669: LD_VAR 0 8
29673: PPUSH
29674: LD_VAR 0 1
29678: PUSH
29679: LD_VAR 0 7
29683: ARRAY
29684: PPUSH
29685: CALL_OW 1
29689: ST_TO_ADDR
// end ;
29690: GO 29603
29692: POP
29693: POP
// array := tmp ;
29694: LD_ADDR_VAR 0 1
29698: PUSH
29699: LD_VAR 0 10
29703: ST_TO_ADDR
// end ;
29704: GO 29585
29706: POP
29707: POP
// result := array ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_VAR 0 1
29717: ST_TO_ADDR
// end ;
29718: LD_VAR 0 5
29722: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29723: LD_INT 0
29725: PPUSH
29726: PPUSH
// result := 0 ;
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_INT 0
29734: ST_TO_ADDR
// if not array or not value in array then
29735: LD_VAR 0 1
29739: NOT
29740: PUSH
29741: LD_VAR 0 2
29745: PUSH
29746: LD_VAR 0 1
29750: IN
29751: NOT
29752: OR
29753: IFFALSE 29757
// exit ;
29755: GO 29811
// for i = 1 to array do
29757: LD_ADDR_VAR 0 4
29761: PUSH
29762: DOUBLE
29763: LD_INT 1
29765: DEC
29766: ST_TO_ADDR
29767: LD_VAR 0 1
29771: PUSH
29772: FOR_TO
29773: IFFALSE 29809
// if value = array [ i ] then
29775: LD_VAR 0 2
29779: PUSH
29780: LD_VAR 0 1
29784: PUSH
29785: LD_VAR 0 4
29789: ARRAY
29790: EQUAL
29791: IFFALSE 29807
// begin result := i ;
29793: LD_ADDR_VAR 0 3
29797: PUSH
29798: LD_VAR 0 4
29802: ST_TO_ADDR
// exit ;
29803: POP
29804: POP
29805: GO 29811
// end ;
29807: GO 29772
29809: POP
29810: POP
// end ;
29811: LD_VAR 0 3
29815: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29816: LD_INT 0
29818: PPUSH
// vc_chassis := chassis ;
29819: LD_ADDR_OWVAR 37
29823: PUSH
29824: LD_VAR 0 1
29828: ST_TO_ADDR
// vc_engine := engine ;
29829: LD_ADDR_OWVAR 39
29833: PUSH
29834: LD_VAR 0 2
29838: ST_TO_ADDR
// vc_control := control ;
29839: LD_ADDR_OWVAR 38
29843: PUSH
29844: LD_VAR 0 3
29848: ST_TO_ADDR
// vc_weapon := weapon ;
29849: LD_ADDR_OWVAR 40
29853: PUSH
29854: LD_VAR 0 4
29858: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29859: LD_ADDR_OWVAR 41
29863: PUSH
29864: LD_VAR 0 5
29868: ST_TO_ADDR
// end ;
29869: LD_VAR 0 6
29873: RET
// export function WantPlant ( unit ) ; var task ; begin
29874: LD_INT 0
29876: PPUSH
29877: PPUSH
// result := false ;
29878: LD_ADDR_VAR 0 2
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29886: LD_ADDR_VAR 0 3
29890: PUSH
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 437
29900: ST_TO_ADDR
// if task then
29901: LD_VAR 0 3
29905: IFFALSE 29933
// if task [ 1 ] [ 1 ] = p then
29907: LD_VAR 0 3
29911: PUSH
29912: LD_INT 1
29914: ARRAY
29915: PUSH
29916: LD_INT 1
29918: ARRAY
29919: PUSH
29920: LD_STRING p
29922: EQUAL
29923: IFFALSE 29933
// result := true ;
29925: LD_ADDR_VAR 0 2
29929: PUSH
29930: LD_INT 1
29932: ST_TO_ADDR
// end ;
29933: LD_VAR 0 2
29937: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29938: LD_INT 0
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
// if pos < 1 then
29944: LD_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: LESS
29952: IFFALSE 29956
// exit ;
29954: GO 30259
// if pos = 1 then
29956: LD_VAR 0 2
29960: PUSH
29961: LD_INT 1
29963: EQUAL
29964: IFFALSE 29997
// result := Replace ( arr , pos [ 1 ] , value ) else
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 1
29975: PPUSH
29976: LD_VAR 0 2
29980: PUSH
29981: LD_INT 1
29983: ARRAY
29984: PPUSH
29985: LD_VAR 0 3
29989: PPUSH
29990: CALL_OW 1
29994: ST_TO_ADDR
29995: GO 30259
// begin tmp := arr ;
29997: LD_ADDR_VAR 0 6
30001: PUSH
30002: LD_VAR 0 1
30006: ST_TO_ADDR
// s_arr := [ tmp ] ;
30007: LD_ADDR_VAR 0 7
30011: PUSH
30012: LD_VAR 0 6
30016: PUSH
30017: EMPTY
30018: LIST
30019: ST_TO_ADDR
// for i = 1 to pos - 1 do
30020: LD_ADDR_VAR 0 5
30024: PUSH
30025: DOUBLE
30026: LD_INT 1
30028: DEC
30029: ST_TO_ADDR
30030: LD_VAR 0 2
30034: PUSH
30035: LD_INT 1
30037: MINUS
30038: PUSH
30039: FOR_TO
30040: IFFALSE 30085
// begin tmp := tmp [ pos [ i ] ] ;
30042: LD_ADDR_VAR 0 6
30046: PUSH
30047: LD_VAR 0 6
30051: PUSH
30052: LD_VAR 0 2
30056: PUSH
30057: LD_VAR 0 5
30061: ARRAY
30062: ARRAY
30063: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30064: LD_ADDR_VAR 0 7
30068: PUSH
30069: LD_VAR 0 7
30073: PUSH
30074: LD_VAR 0 6
30078: PUSH
30079: EMPTY
30080: LIST
30081: ADD
30082: ST_TO_ADDR
// end ;
30083: GO 30039
30085: POP
30086: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30087: LD_ADDR_VAR 0 6
30091: PUSH
30092: LD_VAR 0 6
30096: PPUSH
30097: LD_VAR 0 2
30101: PUSH
30102: LD_VAR 0 2
30106: ARRAY
30107: PPUSH
30108: LD_VAR 0 3
30112: PPUSH
30113: CALL_OW 1
30117: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30118: LD_ADDR_VAR 0 7
30122: PUSH
30123: LD_VAR 0 7
30127: PPUSH
30128: LD_VAR 0 7
30132: PPUSH
30133: LD_VAR 0 6
30137: PPUSH
30138: CALL_OW 1
30142: ST_TO_ADDR
// for i = s_arr downto 2 do
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: DOUBLE
30149: LD_VAR 0 7
30153: INC
30154: ST_TO_ADDR
30155: LD_INT 2
30157: PUSH
30158: FOR_DOWNTO
30159: IFFALSE 30243
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30161: LD_ADDR_VAR 0 6
30165: PUSH
30166: LD_VAR 0 7
30170: PUSH
30171: LD_VAR 0 5
30175: PUSH
30176: LD_INT 1
30178: MINUS
30179: ARRAY
30180: PPUSH
30181: LD_VAR 0 2
30185: PUSH
30186: LD_VAR 0 5
30190: PUSH
30191: LD_INT 1
30193: MINUS
30194: ARRAY
30195: PPUSH
30196: LD_VAR 0 7
30200: PUSH
30201: LD_VAR 0 5
30205: ARRAY
30206: PPUSH
30207: CALL_OW 1
30211: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30212: LD_ADDR_VAR 0 7
30216: PUSH
30217: LD_VAR 0 7
30221: PPUSH
30222: LD_VAR 0 5
30226: PUSH
30227: LD_INT 1
30229: MINUS
30230: PPUSH
30231: LD_VAR 0 6
30235: PPUSH
30236: CALL_OW 1
30240: ST_TO_ADDR
// end ;
30241: GO 30158
30243: POP
30244: POP
// result := s_arr [ 1 ] ;
30245: LD_ADDR_VAR 0 4
30249: PUSH
30250: LD_VAR 0 7
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: ST_TO_ADDR
// end ; end ;
30259: LD_VAR 0 4
30263: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30264: LD_INT 0
30266: PPUSH
30267: PPUSH
// if not list then
30268: LD_VAR 0 1
30272: NOT
30273: IFFALSE 30277
// exit ;
30275: GO 30368
// i := list [ pos1 ] ;
30277: LD_ADDR_VAR 0 5
30281: PUSH
30282: LD_VAR 0 1
30286: PUSH
30287: LD_VAR 0 2
30291: ARRAY
30292: ST_TO_ADDR
// if not i then
30293: LD_VAR 0 5
30297: NOT
30298: IFFALSE 30302
// exit ;
30300: GO 30368
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30302: LD_ADDR_VAR 0 1
30306: PUSH
30307: LD_VAR 0 1
30311: PPUSH
30312: LD_VAR 0 2
30316: PPUSH
30317: LD_VAR 0 1
30321: PUSH
30322: LD_VAR 0 3
30326: ARRAY
30327: PPUSH
30328: CALL_OW 1
30332: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30333: LD_ADDR_VAR 0 1
30337: PUSH
30338: LD_VAR 0 1
30342: PPUSH
30343: LD_VAR 0 3
30347: PPUSH
30348: LD_VAR 0 5
30352: PPUSH
30353: CALL_OW 1
30357: ST_TO_ADDR
// result := list ;
30358: LD_ADDR_VAR 0 4
30362: PUSH
30363: LD_VAR 0 1
30367: ST_TO_ADDR
// end ;
30368: LD_VAR 0 4
30372: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30373: LD_INT 0
30375: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30376: LD_ADDR_VAR 0 5
30380: PUSH
30381: LD_VAR 0 1
30385: PPUSH
30386: CALL_OW 250
30390: PPUSH
30391: LD_VAR 0 1
30395: PPUSH
30396: CALL_OW 251
30400: PPUSH
30401: LD_VAR 0 2
30405: PPUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: LD_VAR 0 4
30415: PPUSH
30416: CALL 30426 0 5
30420: ST_TO_ADDR
// end ;
30421: LD_VAR 0 5
30425: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30426: LD_INT 0
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
// if not list then
30432: LD_VAR 0 3
30436: NOT
30437: IFFALSE 30441
// exit ;
30439: GO 30829
// result := [ ] ;
30441: LD_ADDR_VAR 0 6
30445: PUSH
30446: EMPTY
30447: ST_TO_ADDR
// for i in list do
30448: LD_ADDR_VAR 0 7
30452: PUSH
30453: LD_VAR 0 3
30457: PUSH
30458: FOR_IN
30459: IFFALSE 30661
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30461: LD_ADDR_VAR 0 9
30465: PUSH
30466: LD_VAR 0 7
30470: PPUSH
30471: LD_VAR 0 1
30475: PPUSH
30476: LD_VAR 0 2
30480: PPUSH
30481: CALL_OW 297
30485: ST_TO_ADDR
// if not result then
30486: LD_VAR 0 6
30490: NOT
30491: IFFALSE 30517
// result := [ [ i , tmp ] ] else
30493: LD_ADDR_VAR 0 6
30497: PUSH
30498: LD_VAR 0 7
30502: PUSH
30503: LD_VAR 0 9
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: ST_TO_ADDR
30515: GO 30659
// begin if result [ result ] [ 2 ] < tmp then
30517: LD_VAR 0 6
30521: PUSH
30522: LD_VAR 0 6
30526: ARRAY
30527: PUSH
30528: LD_INT 2
30530: ARRAY
30531: PUSH
30532: LD_VAR 0 9
30536: LESS
30537: IFFALSE 30579
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30539: LD_ADDR_VAR 0 6
30543: PUSH
30544: LD_VAR 0 6
30548: PPUSH
30549: LD_VAR 0 6
30553: PUSH
30554: LD_INT 1
30556: PLUS
30557: PPUSH
30558: LD_VAR 0 7
30562: PUSH
30563: LD_VAR 0 9
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PPUSH
30572: CALL_OW 2
30576: ST_TO_ADDR
30577: GO 30659
// for j = 1 to result do
30579: LD_ADDR_VAR 0 8
30583: PUSH
30584: DOUBLE
30585: LD_INT 1
30587: DEC
30588: ST_TO_ADDR
30589: LD_VAR 0 6
30593: PUSH
30594: FOR_TO
30595: IFFALSE 30657
// begin if tmp < result [ j ] [ 2 ] then
30597: LD_VAR 0 9
30601: PUSH
30602: LD_VAR 0 6
30606: PUSH
30607: LD_VAR 0 8
30611: ARRAY
30612: PUSH
30613: LD_INT 2
30615: ARRAY
30616: LESS
30617: IFFALSE 30655
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30619: LD_ADDR_VAR 0 6
30623: PUSH
30624: LD_VAR 0 6
30628: PPUSH
30629: LD_VAR 0 8
30633: PPUSH
30634: LD_VAR 0 7
30638: PUSH
30639: LD_VAR 0 9
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 2
30652: ST_TO_ADDR
// break ;
30653: GO 30657
// end ; end ;
30655: GO 30594
30657: POP
30658: POP
// end ; end ;
30659: GO 30458
30661: POP
30662: POP
// if result and not asc then
30663: LD_VAR 0 6
30667: PUSH
30668: LD_VAR 0 4
30672: NOT
30673: AND
30674: IFFALSE 30749
// begin tmp := result ;
30676: LD_ADDR_VAR 0 9
30680: PUSH
30681: LD_VAR 0 6
30685: ST_TO_ADDR
// for i = tmp downto 1 do
30686: LD_ADDR_VAR 0 7
30690: PUSH
30691: DOUBLE
30692: LD_VAR 0 9
30696: INC
30697: ST_TO_ADDR
30698: LD_INT 1
30700: PUSH
30701: FOR_DOWNTO
30702: IFFALSE 30747
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30704: LD_ADDR_VAR 0 6
30708: PUSH
30709: LD_VAR 0 6
30713: PPUSH
30714: LD_VAR 0 9
30718: PUSH
30719: LD_VAR 0 7
30723: MINUS
30724: PUSH
30725: LD_INT 1
30727: PLUS
30728: PPUSH
30729: LD_VAR 0 9
30733: PUSH
30734: LD_VAR 0 7
30738: ARRAY
30739: PPUSH
30740: CALL_OW 1
30744: ST_TO_ADDR
30745: GO 30701
30747: POP
30748: POP
// end ; tmp := [ ] ;
30749: LD_ADDR_VAR 0 9
30753: PUSH
30754: EMPTY
30755: ST_TO_ADDR
// if mode then
30756: LD_VAR 0 5
30760: IFFALSE 30829
// begin for i = 1 to result do
30762: LD_ADDR_VAR 0 7
30766: PUSH
30767: DOUBLE
30768: LD_INT 1
30770: DEC
30771: ST_TO_ADDR
30772: LD_VAR 0 6
30776: PUSH
30777: FOR_TO
30778: IFFALSE 30817
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30780: LD_ADDR_VAR 0 9
30784: PUSH
30785: LD_VAR 0 9
30789: PPUSH
30790: LD_VAR 0 7
30794: PPUSH
30795: LD_VAR 0 6
30799: PUSH
30800: LD_VAR 0 7
30804: ARRAY
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: PPUSH
30810: CALL_OW 1
30814: ST_TO_ADDR
30815: GO 30777
30817: POP
30818: POP
// result := tmp ;
30819: LD_ADDR_VAR 0 6
30823: PUSH
30824: LD_VAR 0 9
30828: ST_TO_ADDR
// end ; end ;
30829: LD_VAR 0 6
30833: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30834: LD_INT 0
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30842: LD_ADDR_VAR 0 5
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// if not x or not y then
30864: LD_VAR 0 2
30868: NOT
30869: PUSH
30870: LD_VAR 0 3
30874: NOT
30875: OR
30876: IFFALSE 30880
// exit ;
30878: GO 32530
// if not range then
30880: LD_VAR 0 4
30884: NOT
30885: IFFALSE 30895
// range := 10 ;
30887: LD_ADDR_VAR 0 4
30891: PUSH
30892: LD_INT 10
30894: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30895: LD_ADDR_VAR 0 8
30899: PUSH
30900: LD_INT 81
30902: PUSH
30903: LD_VAR 0 1
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 92
30914: PUSH
30915: LD_VAR 0 2
30919: PUSH
30920: LD_VAR 0 3
30924: PUSH
30925: LD_VAR 0 4
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 21
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: PPUSH
30958: CALL_OW 69
30962: ST_TO_ADDR
// if not tmp then
30963: LD_VAR 0 8
30967: NOT
30968: IFFALSE 30972
// exit ;
30970: GO 32530
// for i in tmp do
30972: LD_ADDR_VAR 0 6
30976: PUSH
30977: LD_VAR 0 8
30981: PUSH
30982: FOR_IN
30983: IFFALSE 32505
// begin points := [ 0 , 0 , 0 ] ;
30985: LD_ADDR_VAR 0 9
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// bpoints := 1 ;
31004: LD_ADDR_VAR 0 10
31008: PUSH
31009: LD_INT 1
31011: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31012: LD_VAR 0 6
31016: PPUSH
31017: CALL_OW 247
31021: PUSH
31022: LD_INT 1
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31608
31030: POP
// begin if GetClass ( i ) = 1 then
31031: LD_VAR 0 6
31035: PPUSH
31036: CALL_OW 257
31040: PUSH
31041: LD_INT 1
31043: EQUAL
31044: IFFALSE 31065
// points := [ 10 , 5 , 3 ] ;
31046: LD_ADDR_VAR 0 9
31050: PUSH
31051: LD_INT 10
31053: PUSH
31054: LD_INT 5
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 257
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: LD_INT 3
31080: PUSH
31081: LD_INT 4
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: IN
31089: IFFALSE 31110
// points := [ 3 , 2 , 1 ] ;
31091: LD_ADDR_VAR 0 9
31095: PUSH
31096: LD_INT 3
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31110: LD_VAR 0 6
31114: PPUSH
31115: CALL_OW 257
31119: PUSH
31120: LD_INT 5
31122: EQUAL
31123: IFFALSE 31144
// points := [ 130 , 5 , 2 ] ;
31125: LD_ADDR_VAR 0 9
31129: PUSH
31130: LD_INT 130
31132: PUSH
31133: LD_INT 5
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31144: LD_VAR 0 6
31148: PPUSH
31149: CALL_OW 257
31153: PUSH
31154: LD_INT 8
31156: EQUAL
31157: IFFALSE 31178
// points := [ 35 , 35 , 30 ] ;
31159: LD_ADDR_VAR 0 9
31163: PUSH
31164: LD_INT 35
31166: PUSH
31167: LD_INT 35
31169: PUSH
31170: LD_INT 30
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31178: LD_VAR 0 6
31182: PPUSH
31183: CALL_OW 257
31187: PUSH
31188: LD_INT 9
31190: EQUAL
31191: IFFALSE 31212
// points := [ 20 , 55 , 40 ] ;
31193: LD_ADDR_VAR 0 9
31197: PUSH
31198: LD_INT 20
31200: PUSH
31201: LD_INT 55
31203: PUSH
31204: LD_INT 40
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31212: LD_VAR 0 6
31216: PPUSH
31217: CALL_OW 257
31221: PUSH
31222: LD_INT 12
31224: PUSH
31225: LD_INT 16
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: IN
31232: IFFALSE 31253
// points := [ 5 , 3 , 2 ] ;
31234: LD_ADDR_VAR 0 9
31238: PUSH
31239: LD_INT 5
31241: PUSH
31242: LD_INT 3
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31253: LD_VAR 0 6
31257: PPUSH
31258: CALL_OW 257
31262: PUSH
31263: LD_INT 17
31265: EQUAL
31266: IFFALSE 31287
// points := [ 100 , 50 , 75 ] ;
31268: LD_ADDR_VAR 0 9
31272: PUSH
31273: LD_INT 100
31275: PUSH
31276: LD_INT 50
31278: PUSH
31279: LD_INT 75
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31287: LD_VAR 0 6
31291: PPUSH
31292: CALL_OW 257
31296: PUSH
31297: LD_INT 15
31299: EQUAL
31300: IFFALSE 31321
// points := [ 10 , 5 , 3 ] ;
31302: LD_ADDR_VAR 0 9
31306: PUSH
31307: LD_INT 10
31309: PUSH
31310: LD_INT 5
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31321: LD_VAR 0 6
31325: PPUSH
31326: CALL_OW 257
31330: PUSH
31331: LD_INT 14
31333: EQUAL
31334: IFFALSE 31355
// points := [ 10 , 0 , 0 ] ;
31336: LD_ADDR_VAR 0 9
31340: PUSH
31341: LD_INT 10
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31355: LD_VAR 0 6
31359: PPUSH
31360: CALL_OW 257
31364: PUSH
31365: LD_INT 11
31367: EQUAL
31368: IFFALSE 31389
// points := [ 30 , 10 , 5 ] ;
31370: LD_ADDR_VAR 0 9
31374: PUSH
31375: LD_INT 30
31377: PUSH
31378: LD_INT 10
31380: PUSH
31381: LD_INT 5
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: LIST
31388: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_INT 5
31396: PPUSH
31397: CALL_OW 321
31401: PUSH
31402: LD_INT 2
31404: EQUAL
31405: IFFALSE 31422
// bpoints := bpoints * 1.8 ;
31407: LD_ADDR_VAR 0 10
31411: PUSH
31412: LD_VAR 0 10
31416: PUSH
31417: LD_REAL  1.80000000000000E+0000
31420: MUL
31421: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31422: LD_VAR 0 6
31426: PPUSH
31427: CALL_OW 257
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 4
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: IN
31450: PUSH
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_INT 51
31458: PPUSH
31459: CALL_OW 321
31463: PUSH
31464: LD_INT 2
31466: EQUAL
31467: AND
31468: IFFALSE 31485
// bpoints := bpoints * 1.2 ;
31470: LD_ADDR_VAR 0 10
31474: PUSH
31475: LD_VAR 0 10
31479: PUSH
31480: LD_REAL  1.20000000000000E+0000
31483: MUL
31484: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31485: LD_VAR 0 6
31489: PPUSH
31490: CALL_OW 257
31494: PUSH
31495: LD_INT 5
31497: PUSH
31498: LD_INT 7
31500: PUSH
31501: LD_INT 9
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: IN
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: LD_INT 52
31517: PPUSH
31518: CALL_OW 321
31522: PUSH
31523: LD_INT 2
31525: EQUAL
31526: AND
31527: IFFALSE 31544
// bpoints := bpoints * 1.5 ;
31529: LD_ADDR_VAR 0 10
31533: PUSH
31534: LD_VAR 0 10
31538: PUSH
31539: LD_REAL  1.50000000000000E+0000
31542: MUL
31543: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31544: LD_VAR 0 1
31548: PPUSH
31549: LD_INT 66
31551: PPUSH
31552: CALL_OW 321
31556: PUSH
31557: LD_INT 2
31559: EQUAL
31560: IFFALSE 31577
// bpoints := bpoints * 1.1 ;
31562: LD_ADDR_VAR 0 10
31566: PUSH
31567: LD_VAR 0 10
31571: PUSH
31572: LD_REAL  1.10000000000000E+0000
31575: MUL
31576: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31577: LD_ADDR_VAR 0 10
31581: PUSH
31582: LD_VAR 0 10
31586: PUSH
31587: LD_VAR 0 6
31591: PPUSH
31592: LD_INT 1
31594: PPUSH
31595: CALL_OW 259
31599: PUSH
31600: LD_REAL  1.15000000000000E+0000
31603: MUL
31604: MUL
31605: ST_TO_ADDR
// end ; unit_vehicle :
31606: GO 32434
31608: LD_INT 2
31610: DOUBLE
31611: EQUAL
31612: IFTRUE 31616
31614: GO 32422
31616: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31617: LD_VAR 0 6
31621: PPUSH
31622: CALL_OW 264
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 42
31632: PUSH
31633: LD_INT 24
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: IN
31641: IFFALSE 31662
// points := [ 25 , 5 , 3 ] ;
31643: LD_ADDR_VAR 0 9
31647: PUSH
31648: LD_INT 25
31650: PUSH
31651: LD_INT 5
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31662: LD_VAR 0 6
31666: PPUSH
31667: CALL_OW 264
31671: PUSH
31672: LD_INT 4
31674: PUSH
31675: LD_INT 43
31677: PUSH
31678: LD_INT 25
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: IN
31686: IFFALSE 31707
// points := [ 40 , 15 , 5 ] ;
31688: LD_ADDR_VAR 0 9
31692: PUSH
31693: LD_INT 40
31695: PUSH
31696: LD_INT 15
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 264
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: LD_INT 23
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: IN
31727: IFFALSE 31748
// points := [ 7 , 25 , 8 ] ;
31729: LD_ADDR_VAR 0 9
31733: PUSH
31734: LD_INT 7
31736: PUSH
31737: LD_INT 25
31739: PUSH
31740: LD_INT 8
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31748: LD_VAR 0 6
31752: PPUSH
31753: CALL_OW 264
31757: PUSH
31758: LD_INT 5
31760: PUSH
31761: LD_INT 27
31763: PUSH
31764: LD_INT 44
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: IN
31772: IFFALSE 31793
// points := [ 14 , 50 , 16 ] ;
31774: LD_ADDR_VAR 0 9
31778: PUSH
31779: LD_INT 14
31781: PUSH
31782: LD_INT 50
31784: PUSH
31785: LD_INT 16
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31793: LD_VAR 0 6
31797: PPUSH
31798: CALL_OW 264
31802: PUSH
31803: LD_INT 6
31805: PUSH
31806: LD_INT 46
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: IN
31813: IFFALSE 31834
// points := [ 32 , 120 , 70 ] ;
31815: LD_ADDR_VAR 0 9
31819: PUSH
31820: LD_INT 32
31822: PUSH
31823: LD_INT 120
31825: PUSH
31826: LD_INT 70
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31834: LD_VAR 0 6
31838: PPUSH
31839: CALL_OW 264
31843: PUSH
31844: LD_INT 7
31846: PUSH
31847: LD_INT 28
31849: PUSH
31850: LD_INT 45
31852: PUSH
31853: LD_INT 92
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: IN
31862: IFFALSE 31883
// points := [ 35 , 20 , 45 ] ;
31864: LD_ADDR_VAR 0 9
31868: PUSH
31869: LD_INT 35
31871: PUSH
31872: LD_INT 20
31874: PUSH
31875: LD_INT 45
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31883: LD_VAR 0 6
31887: PPUSH
31888: CALL_OW 264
31892: PUSH
31893: LD_INT 47
31895: PUSH
31896: EMPTY
31897: LIST
31898: IN
31899: IFFALSE 31920
// points := [ 67 , 45 , 75 ] ;
31901: LD_ADDR_VAR 0 9
31905: PUSH
31906: LD_INT 67
31908: PUSH
31909: LD_INT 45
31911: PUSH
31912: LD_INT 75
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31920: LD_VAR 0 6
31924: PPUSH
31925: CALL_OW 264
31929: PUSH
31930: LD_INT 26
31932: PUSH
31933: EMPTY
31934: LIST
31935: IN
31936: IFFALSE 31957
// points := [ 120 , 30 , 80 ] ;
31938: LD_ADDR_VAR 0 9
31942: PUSH
31943: LD_INT 120
31945: PUSH
31946: LD_INT 30
31948: PUSH
31949: LD_INT 80
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31957: LD_VAR 0 6
31961: PPUSH
31962: CALL_OW 264
31966: PUSH
31967: LD_INT 22
31969: PUSH
31970: EMPTY
31971: LIST
31972: IN
31973: IFFALSE 31994
// points := [ 40 , 1 , 1 ] ;
31975: LD_ADDR_VAR 0 9
31979: PUSH
31980: LD_INT 40
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31994: LD_VAR 0 6
31998: PPUSH
31999: CALL_OW 264
32003: PUSH
32004: LD_INT 29
32006: PUSH
32007: EMPTY
32008: LIST
32009: IN
32010: IFFALSE 32031
// points := [ 70 , 200 , 400 ] ;
32012: LD_ADDR_VAR 0 9
32016: PUSH
32017: LD_INT 70
32019: PUSH
32020: LD_INT 200
32022: PUSH
32023: LD_INT 400
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32031: LD_VAR 0 6
32035: PPUSH
32036: CALL_OW 264
32040: PUSH
32041: LD_INT 14
32043: PUSH
32044: LD_INT 53
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: IN
32051: IFFALSE 32072
// points := [ 40 , 10 , 20 ] ;
32053: LD_ADDR_VAR 0 9
32057: PUSH
32058: LD_INT 40
32060: PUSH
32061: LD_INT 10
32063: PUSH
32064: LD_INT 20
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32072: LD_VAR 0 6
32076: PPUSH
32077: CALL_OW 264
32081: PUSH
32082: LD_INT 9
32084: PUSH
32085: EMPTY
32086: LIST
32087: IN
32088: IFFALSE 32109
// points := [ 5 , 70 , 20 ] ;
32090: LD_ADDR_VAR 0 9
32094: PUSH
32095: LD_INT 5
32097: PUSH
32098: LD_INT 70
32100: PUSH
32101: LD_INT 20
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32109: LD_VAR 0 6
32113: PPUSH
32114: CALL_OW 264
32118: PUSH
32119: LD_INT 10
32121: PUSH
32122: EMPTY
32123: LIST
32124: IN
32125: IFFALSE 32146
// points := [ 35 , 110 , 70 ] ;
32127: LD_ADDR_VAR 0 9
32131: PUSH
32132: LD_INT 35
32134: PUSH
32135: LD_INT 110
32137: PUSH
32138: LD_INT 70
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32146: LD_VAR 0 6
32150: PPUSH
32151: CALL_OW 265
32155: PUSH
32156: LD_INT 25
32158: EQUAL
32159: IFFALSE 32180
// points := [ 80 , 65 , 100 ] ;
32161: LD_ADDR_VAR 0 9
32165: PUSH
32166: LD_INT 80
32168: PUSH
32169: LD_INT 65
32171: PUSH
32172: LD_INT 100
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32180: LD_VAR 0 6
32184: PPUSH
32185: CALL_OW 263
32189: PUSH
32190: LD_INT 1
32192: EQUAL
32193: IFFALSE 32228
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32195: LD_ADDR_VAR 0 10
32199: PUSH
32200: LD_VAR 0 10
32204: PUSH
32205: LD_VAR 0 6
32209: PPUSH
32210: CALL_OW 311
32214: PPUSH
32215: LD_INT 3
32217: PPUSH
32218: CALL_OW 259
32222: PUSH
32223: LD_INT 4
32225: MUL
32226: MUL
32227: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32228: LD_VAR 0 6
32232: PPUSH
32233: CALL_OW 263
32237: PUSH
32238: LD_INT 2
32240: EQUAL
32241: IFFALSE 32292
// begin j := IsControledBy ( i ) ;
32243: LD_ADDR_VAR 0 7
32247: PUSH
32248: LD_VAR 0 6
32252: PPUSH
32253: CALL_OW 312
32257: ST_TO_ADDR
// if j then
32258: LD_VAR 0 7
32262: IFFALSE 32292
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32264: LD_ADDR_VAR 0 10
32268: PUSH
32269: LD_VAR 0 10
32273: PUSH
32274: LD_VAR 0 7
32278: PPUSH
32279: LD_INT 3
32281: PPUSH
32282: CALL_OW 259
32286: PUSH
32287: LD_INT 3
32289: MUL
32290: MUL
32291: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32292: LD_VAR 0 6
32296: PPUSH
32297: CALL_OW 264
32301: PUSH
32302: LD_INT 5
32304: PUSH
32305: LD_INT 6
32307: PUSH
32308: LD_INT 46
32310: PUSH
32311: LD_INT 44
32313: PUSH
32314: LD_INT 47
32316: PUSH
32317: LD_INT 45
32319: PUSH
32320: LD_INT 28
32322: PUSH
32323: LD_INT 7
32325: PUSH
32326: LD_INT 27
32328: PUSH
32329: LD_INT 29
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: IN
32344: PUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: LD_INT 52
32352: PPUSH
32353: CALL_OW 321
32357: PUSH
32358: LD_INT 2
32360: EQUAL
32361: AND
32362: IFFALSE 32379
// bpoints := bpoints * 1.2 ;
32364: LD_ADDR_VAR 0 10
32368: PUSH
32369: LD_VAR 0 10
32373: PUSH
32374: LD_REAL  1.20000000000000E+0000
32377: MUL
32378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32379: LD_VAR 0 6
32383: PPUSH
32384: CALL_OW 264
32388: PUSH
32389: LD_INT 6
32391: PUSH
32392: LD_INT 46
32394: PUSH
32395: LD_INT 47
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: IN
32403: IFFALSE 32420
// bpoints := bpoints * 1.2 ;
32405: LD_ADDR_VAR 0 10
32409: PUSH
32410: LD_VAR 0 10
32414: PUSH
32415: LD_REAL  1.20000000000000E+0000
32418: MUL
32419: ST_TO_ADDR
// end ; unit_building :
32420: GO 32434
32422: LD_INT 3
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32433
32430: POP
// ; end ;
32431: GO 32434
32433: POP
// for j = 1 to 3 do
32434: LD_ADDR_VAR 0 7
32438: PUSH
32439: DOUBLE
32440: LD_INT 1
32442: DEC
32443: ST_TO_ADDR
32444: LD_INT 3
32446: PUSH
32447: FOR_TO
32448: IFFALSE 32501
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32450: LD_ADDR_VAR 0 5
32454: PUSH
32455: LD_VAR 0 5
32459: PPUSH
32460: LD_VAR 0 7
32464: PPUSH
32465: LD_VAR 0 5
32469: PUSH
32470: LD_VAR 0 7
32474: ARRAY
32475: PUSH
32476: LD_VAR 0 9
32480: PUSH
32481: LD_VAR 0 7
32485: ARRAY
32486: PUSH
32487: LD_VAR 0 10
32491: MUL
32492: PLUS
32493: PPUSH
32494: CALL_OW 1
32498: ST_TO_ADDR
32499: GO 32447
32501: POP
32502: POP
// end ;
32503: GO 30982
32505: POP
32506: POP
// result := Replace ( result , 4 , tmp ) ;
32507: LD_ADDR_VAR 0 5
32511: PUSH
32512: LD_VAR 0 5
32516: PPUSH
32517: LD_INT 4
32519: PPUSH
32520: LD_VAR 0 8
32524: PPUSH
32525: CALL_OW 1
32529: ST_TO_ADDR
// end ;
32530: LD_VAR 0 5
32534: RET
// export function DangerAtRange ( unit , range ) ; begin
32535: LD_INT 0
32537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32538: LD_ADDR_VAR 0 3
32542: PUSH
32543: LD_VAR 0 1
32547: PPUSH
32548: CALL_OW 255
32552: PPUSH
32553: LD_VAR 0 1
32557: PPUSH
32558: CALL_OW 250
32562: PPUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 251
32572: PPUSH
32573: LD_VAR 0 2
32577: PPUSH
32578: CALL 30834 0 4
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 3
32587: RET
// export function DangerInArea ( side , area ) ; begin
32588: LD_INT 0
32590: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32591: LD_ADDR_VAR 0 3
32595: PUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_INT 81
32603: PUSH
32604: LD_VAR 0 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PPUSH
32613: CALL_OW 70
32617: ST_TO_ADDR
// end ;
32618: LD_VAR 0 3
32622: RET
// export function IsExtension ( b ) ; begin
32623: LD_INT 0
32625: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32626: LD_ADDR_VAR 0 2
32630: PUSH
32631: LD_VAR 0 1
32635: PUSH
32636: LD_INT 23
32638: PUSH
32639: LD_INT 20
32641: PUSH
32642: LD_INT 22
32644: PUSH
32645: LD_INT 17
32647: PUSH
32648: LD_INT 24
32650: PUSH
32651: LD_INT 21
32653: PUSH
32654: LD_INT 19
32656: PUSH
32657: LD_INT 16
32659: PUSH
32660: LD_INT 25
32662: PUSH
32663: LD_INT 18
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: IN
32678: ST_TO_ADDR
// end ;
32679: LD_VAR 0 2
32683: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32684: LD_INT 0
32686: PPUSH
32687: PPUSH
32688: PPUSH
// result := [ ] ;
32689: LD_ADDR_VAR 0 4
32693: PUSH
32694: EMPTY
32695: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 2
32705: PPUSH
32706: LD_INT 21
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PPUSH
32716: CALL_OW 70
32720: ST_TO_ADDR
// if not tmp then
32721: LD_VAR 0 5
32725: NOT
32726: IFFALSE 32730
// exit ;
32728: GO 32794
// if checkLink then
32730: LD_VAR 0 3
32734: IFFALSE 32784
// begin for i in tmp do
32736: LD_ADDR_VAR 0 6
32740: PUSH
32741: LD_VAR 0 5
32745: PUSH
32746: FOR_IN
32747: IFFALSE 32782
// if GetBase ( i ) <> base then
32749: LD_VAR 0 6
32753: PPUSH
32754: CALL_OW 274
32758: PUSH
32759: LD_VAR 0 1
32763: NONEQUAL
32764: IFFALSE 32780
// ComLinkToBase ( base , i ) ;
32766: LD_VAR 0 1
32770: PPUSH
32771: LD_VAR 0 6
32775: PPUSH
32776: CALL_OW 169
32780: GO 32746
32782: POP
32783: POP
// end ; result := tmp ;
32784: LD_ADDR_VAR 0 4
32788: PUSH
32789: LD_VAR 0 5
32793: ST_TO_ADDR
// end ;
32794: LD_VAR 0 4
32798: RET
// export function ComComplete ( units , b ) ; var i ; begin
32799: LD_INT 0
32801: PPUSH
32802: PPUSH
// if not units then
32803: LD_VAR 0 1
32807: NOT
32808: IFFALSE 32812
// exit ;
32810: GO 32902
// for i in units do
32812: LD_ADDR_VAR 0 4
32816: PUSH
32817: LD_VAR 0 1
32821: PUSH
32822: FOR_IN
32823: IFFALSE 32900
// if BuildingStatus ( b ) = bs_build then
32825: LD_VAR 0 2
32829: PPUSH
32830: CALL_OW 461
32834: PUSH
32835: LD_INT 1
32837: EQUAL
32838: IFFALSE 32898
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32840: LD_VAR 0 4
32844: PPUSH
32845: LD_STRING h
32847: PUSH
32848: LD_VAR 0 2
32852: PPUSH
32853: CALL_OW 250
32857: PUSH
32858: LD_VAR 0 2
32862: PPUSH
32863: CALL_OW 251
32867: PUSH
32868: LD_VAR 0 2
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: PPUSH
32894: CALL_OW 446
32898: GO 32822
32900: POP
32901: POP
// end ;
32902: LD_VAR 0 3
32906: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32907: LD_INT 0
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32915: LD_VAR 0 1
32919: NOT
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 263
32930: PUSH
32931: LD_INT 2
32933: NONEQUAL
32934: OR
32935: IFFALSE 32939
// exit ;
32937: GO 33255
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32939: LD_ADDR_VAR 0 6
32943: PUSH
32944: LD_INT 22
32946: PUSH
32947: LD_VAR 0 1
32951: PPUSH
32952: CALL_OW 255
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 30
32966: PUSH
32967: LD_INT 36
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 34
32976: PUSH
32977: LD_INT 31
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: LIST
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PPUSH
32993: CALL_OW 69
32997: ST_TO_ADDR
// if not tmp then
32998: LD_VAR 0 6
33002: NOT
33003: IFFALSE 33007
// exit ;
33005: GO 33255
// result := [ ] ;
33007: LD_ADDR_VAR 0 2
33011: PUSH
33012: EMPTY
33013: ST_TO_ADDR
// for i in tmp do
33014: LD_ADDR_VAR 0 3
33018: PUSH
33019: LD_VAR 0 6
33023: PUSH
33024: FOR_IN
33025: IFFALSE 33096
// begin t := UnitsInside ( i ) ;
33027: LD_ADDR_VAR 0 4
33031: PUSH
33032: LD_VAR 0 3
33036: PPUSH
33037: CALL_OW 313
33041: ST_TO_ADDR
// if t then
33042: LD_VAR 0 4
33046: IFFALSE 33094
// for j in t do
33048: LD_ADDR_VAR 0 7
33052: PUSH
33053: LD_VAR 0 4
33057: PUSH
33058: FOR_IN
33059: IFFALSE 33092
// result := Replace ( result , result + 1 , j ) ;
33061: LD_ADDR_VAR 0 2
33065: PUSH
33066: LD_VAR 0 2
33070: PPUSH
33071: LD_VAR 0 2
33075: PUSH
33076: LD_INT 1
33078: PLUS
33079: PPUSH
33080: LD_VAR 0 7
33084: PPUSH
33085: CALL_OW 1
33089: ST_TO_ADDR
33090: GO 33058
33092: POP
33093: POP
// end ;
33094: GO 33024
33096: POP
33097: POP
// if not result then
33098: LD_VAR 0 2
33102: NOT
33103: IFFALSE 33107
// exit ;
33105: GO 33255
// mech := result [ 1 ] ;
33107: LD_ADDR_VAR 0 5
33111: PUSH
33112: LD_VAR 0 2
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: ST_TO_ADDR
// if result > 1 then
33121: LD_VAR 0 2
33125: PUSH
33126: LD_INT 1
33128: GREATER
33129: IFFALSE 33241
// begin for i = 2 to result do
33131: LD_ADDR_VAR 0 3
33135: PUSH
33136: DOUBLE
33137: LD_INT 2
33139: DEC
33140: ST_TO_ADDR
33141: LD_VAR 0 2
33145: PUSH
33146: FOR_TO
33147: IFFALSE 33239
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33149: LD_ADDR_VAR 0 4
33153: PUSH
33154: LD_VAR 0 2
33158: PUSH
33159: LD_VAR 0 3
33163: ARRAY
33164: PPUSH
33165: LD_INT 3
33167: PPUSH
33168: CALL_OW 259
33172: PUSH
33173: LD_VAR 0 2
33177: PUSH
33178: LD_VAR 0 3
33182: ARRAY
33183: PPUSH
33184: CALL_OW 432
33188: MINUS
33189: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33190: LD_VAR 0 4
33194: PUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: LD_INT 3
33202: PPUSH
33203: CALL_OW 259
33207: PUSH
33208: LD_VAR 0 5
33212: PPUSH
33213: CALL_OW 432
33217: MINUS
33218: GREATEREQUAL
33219: IFFALSE 33237
// mech := result [ i ] ;
33221: LD_ADDR_VAR 0 5
33225: PUSH
33226: LD_VAR 0 2
33230: PUSH
33231: LD_VAR 0 3
33235: ARRAY
33236: ST_TO_ADDR
// end ;
33237: GO 33146
33239: POP
33240: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33241: LD_VAR 0 1
33245: PPUSH
33246: LD_VAR 0 5
33250: PPUSH
33251: CALL_OW 135
// end ;
33255: LD_VAR 0 2
33259: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33260: LD_INT 0
33262: PPUSH
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
// result := [ ] ;
33275: LD_ADDR_VAR 0 7
33279: PUSH
33280: EMPTY
33281: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL_OW 266
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: IN
33302: NOT
33303: IFFALSE 33307
// exit ;
33305: GO 34941
// if name then
33307: LD_VAR 0 3
33311: IFFALSE 33327
// SetBName ( base_dep , name ) ;
33313: LD_VAR 0 1
33317: PPUSH
33318: LD_VAR 0 3
33322: PPUSH
33323: CALL_OW 500
// base := GetBase ( base_dep ) ;
33327: LD_ADDR_VAR 0 15
33331: PUSH
33332: LD_VAR 0 1
33336: PPUSH
33337: CALL_OW 274
33341: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33342: LD_ADDR_VAR 0 16
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 255
33356: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33357: LD_ADDR_VAR 0 17
33361: PUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: CALL_OW 248
33371: ST_TO_ADDR
// if sources then
33372: LD_VAR 0 5
33376: IFFALSE 33423
// for i = 1 to 3 do
33378: LD_ADDR_VAR 0 8
33382: PUSH
33383: DOUBLE
33384: LD_INT 1
33386: DEC
33387: ST_TO_ADDR
33388: LD_INT 3
33390: PUSH
33391: FOR_TO
33392: IFFALSE 33421
// AddResourceType ( base , i , sources [ i ] ) ;
33394: LD_VAR 0 15
33398: PPUSH
33399: LD_VAR 0 8
33403: PPUSH
33404: LD_VAR 0 5
33408: PUSH
33409: LD_VAR 0 8
33413: ARRAY
33414: PPUSH
33415: CALL_OW 276
33419: GO 33391
33421: POP
33422: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33423: LD_ADDR_VAR 0 18
33427: PUSH
33428: LD_VAR 0 15
33432: PPUSH
33433: LD_VAR 0 2
33437: PPUSH
33438: LD_INT 1
33440: PPUSH
33441: CALL 32684 0 3
33445: ST_TO_ADDR
// InitHc ;
33446: CALL_OW 19
// InitUc ;
33450: CALL_OW 18
// uc_side := side ;
33454: LD_ADDR_OWVAR 20
33458: PUSH
33459: LD_VAR 0 16
33463: ST_TO_ADDR
// uc_nation := nation ;
33464: LD_ADDR_OWVAR 21
33468: PUSH
33469: LD_VAR 0 17
33473: ST_TO_ADDR
// if buildings then
33474: LD_VAR 0 18
33478: IFFALSE 34800
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33480: LD_ADDR_VAR 0 19
33484: PUSH
33485: LD_VAR 0 18
33489: PPUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 30
33495: PUSH
33496: LD_INT 29
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 30
33505: PUSH
33506: LD_INT 30
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: PPUSH
33518: CALL_OW 72
33522: ST_TO_ADDR
// if tmp then
33523: LD_VAR 0 19
33527: IFFALSE 33575
// for i in tmp do
33529: LD_ADDR_VAR 0 8
33533: PUSH
33534: LD_VAR 0 19
33538: PUSH
33539: FOR_IN
33540: IFFALSE 33573
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33542: LD_VAR 0 8
33546: PPUSH
33547: CALL_OW 250
33551: PPUSH
33552: LD_VAR 0 8
33556: PPUSH
33557: CALL_OW 251
33561: PPUSH
33562: LD_VAR 0 16
33566: PPUSH
33567: CALL_OW 441
33571: GO 33539
33573: POP
33574: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33575: LD_VAR 0 18
33579: PPUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 30
33585: PUSH
33586: LD_INT 32
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 30
33595: PUSH
33596: LD_INT 33
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: LIST
33607: PPUSH
33608: CALL_OW 72
33612: IFFALSE 33700
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33614: LD_ADDR_VAR 0 8
33618: PUSH
33619: LD_VAR 0 18
33623: PPUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 32
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_INT 33
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL_OW 72
33656: PUSH
33657: FOR_IN
33658: IFFALSE 33698
// begin if not GetBWeapon ( i ) then
33660: LD_VAR 0 8
33664: PPUSH
33665: CALL_OW 269
33669: NOT
33670: IFFALSE 33696
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33672: LD_VAR 0 8
33676: PPUSH
33677: LD_VAR 0 8
33681: PPUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: CALL 34946 0 2
33691: PPUSH
33692: CALL_OW 431
// end ;
33696: GO 33657
33698: POP
33699: POP
// end ; for i = 1 to personel do
33700: LD_ADDR_VAR 0 8
33704: PUSH
33705: DOUBLE
33706: LD_INT 1
33708: DEC
33709: ST_TO_ADDR
33710: LD_VAR 0 6
33714: PUSH
33715: FOR_TO
33716: IFFALSE 34780
// begin if i > 4 then
33718: LD_VAR 0 8
33722: PUSH
33723: LD_INT 4
33725: GREATER
33726: IFFALSE 33730
// break ;
33728: GO 34780
// case i of 1 :
33730: LD_VAR 0 8
33734: PUSH
33735: LD_INT 1
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33823
33743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33744: LD_ADDR_VAR 0 12
33748: PUSH
33749: LD_VAR 0 18
33753: PPUSH
33754: LD_INT 22
33756: PUSH
33757: LD_VAR 0 16
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 58
33768: PUSH
33769: EMPTY
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 30
33777: PUSH
33778: LD_INT 32
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 30
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 30
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: LIST
33815: PPUSH
33816: CALL_OW 72
33820: ST_TO_ADDR
33821: GO 34045
33823: LD_INT 2
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33893
33831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33832: LD_ADDR_VAR 0 12
33836: PUSH
33837: LD_VAR 0 18
33841: PPUSH
33842: LD_INT 22
33844: PUSH
33845: LD_VAR 0 16
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 30
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 30
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PPUSH
33886: CALL_OW 72
33890: ST_TO_ADDR
33891: GO 34045
33893: LD_INT 3
33895: DOUBLE
33896: EQUAL
33897: IFTRUE 33901
33899: GO 33963
33901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33902: LD_ADDR_VAR 0 12
33906: PUSH
33907: LD_VAR 0 18
33911: PPUSH
33912: LD_INT 22
33914: PUSH
33915: LD_VAR 0 16
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: LD_INT 30
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 30
33939: PUSH
33940: LD_INT 3
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 72
33960: ST_TO_ADDR
33961: GO 34045
33963: LD_INT 4
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 34044
33971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33972: LD_ADDR_VAR 0 12
33976: PUSH
33977: LD_VAR 0 18
33981: PPUSH
33982: LD_INT 22
33984: PUSH
33985: LD_VAR 0 16
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: LD_INT 30
33999: PUSH
34000: LD_INT 6
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 30
34009: PUSH
34010: LD_INT 7
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 30
34019: PUSH
34020: LD_INT 8
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PPUSH
34037: CALL_OW 72
34041: ST_TO_ADDR
34042: GO 34045
34044: POP
// if i = 1 then
34045: LD_VAR 0 8
34049: PUSH
34050: LD_INT 1
34052: EQUAL
34053: IFFALSE 34164
// begin tmp := [ ] ;
34055: LD_ADDR_VAR 0 19
34059: PUSH
34060: EMPTY
34061: ST_TO_ADDR
// for j in f do
34062: LD_ADDR_VAR 0 9
34066: PUSH
34067: LD_VAR 0 12
34071: PUSH
34072: FOR_IN
34073: IFFALSE 34146
// if GetBType ( j ) = b_bunker then
34075: LD_VAR 0 9
34079: PPUSH
34080: CALL_OW 266
34084: PUSH
34085: LD_INT 32
34087: EQUAL
34088: IFFALSE 34115
// tmp := Insert ( tmp , 1 , j ) else
34090: LD_ADDR_VAR 0 19
34094: PUSH
34095: LD_VAR 0 19
34099: PPUSH
34100: LD_INT 1
34102: PPUSH
34103: LD_VAR 0 9
34107: PPUSH
34108: CALL_OW 2
34112: ST_TO_ADDR
34113: GO 34144
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34115: LD_ADDR_VAR 0 19
34119: PUSH
34120: LD_VAR 0 19
34124: PPUSH
34125: LD_VAR 0 19
34129: PUSH
34130: LD_INT 1
34132: PLUS
34133: PPUSH
34134: LD_VAR 0 9
34138: PPUSH
34139: CALL_OW 2
34143: ST_TO_ADDR
34144: GO 34072
34146: POP
34147: POP
// if tmp then
34148: LD_VAR 0 19
34152: IFFALSE 34164
// f := tmp ;
34154: LD_ADDR_VAR 0 12
34158: PUSH
34159: LD_VAR 0 19
34163: ST_TO_ADDR
// end ; x := personel [ i ] ;
34164: LD_ADDR_VAR 0 13
34168: PUSH
34169: LD_VAR 0 6
34173: PUSH
34174: LD_VAR 0 8
34178: ARRAY
34179: ST_TO_ADDR
// if x = - 1 then
34180: LD_VAR 0 13
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: EQUAL
34189: IFFALSE 34398
// begin for j in f do
34191: LD_ADDR_VAR 0 9
34195: PUSH
34196: LD_VAR 0 12
34200: PUSH
34201: FOR_IN
34202: IFFALSE 34394
// repeat InitHc ;
34204: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34208: LD_VAR 0 9
34212: PPUSH
34213: CALL_OW 266
34217: PUSH
34218: LD_INT 5
34220: EQUAL
34221: IFFALSE 34291
// begin if UnitsInside ( j ) < 3 then
34223: LD_VAR 0 9
34227: PPUSH
34228: CALL_OW 313
34232: PUSH
34233: LD_INT 3
34235: LESS
34236: IFFALSE 34272
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34238: LD_INT 0
34240: PPUSH
34241: LD_INT 5
34243: PUSH
34244: LD_INT 8
34246: PUSH
34247: LD_INT 9
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: PUSH
34255: LD_VAR 0 17
34259: ARRAY
34260: PPUSH
34261: LD_VAR 0 4
34265: PPUSH
34266: CALL_OW 380
34270: GO 34289
// PrepareHuman ( false , i , skill ) ;
34272: LD_INT 0
34274: PPUSH
34275: LD_VAR 0 8
34279: PPUSH
34280: LD_VAR 0 4
34284: PPUSH
34285: CALL_OW 380
// end else
34289: GO 34308
// PrepareHuman ( false , i , skill ) ;
34291: LD_INT 0
34293: PPUSH
34294: LD_VAR 0 8
34298: PPUSH
34299: LD_VAR 0 4
34303: PPUSH
34304: CALL_OW 380
// un := CreateHuman ;
34308: LD_ADDR_VAR 0 14
34312: PUSH
34313: CALL_OW 44
34317: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34318: LD_ADDR_VAR 0 7
34322: PUSH
34323: LD_VAR 0 7
34327: PPUSH
34328: LD_INT 1
34330: PPUSH
34331: LD_VAR 0 14
34335: PPUSH
34336: CALL_OW 2
34340: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34341: LD_VAR 0 14
34345: PPUSH
34346: LD_VAR 0 9
34350: PPUSH
34351: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34355: LD_VAR 0 9
34359: PPUSH
34360: CALL_OW 313
34364: PUSH
34365: LD_INT 6
34367: EQUAL
34368: PUSH
34369: LD_VAR 0 9
34373: PPUSH
34374: CALL_OW 266
34378: PUSH
34379: LD_INT 32
34381: PUSH
34382: LD_INT 31
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: IN
34389: OR
34390: IFFALSE 34204
34392: GO 34201
34394: POP
34395: POP
// end else
34396: GO 34778
// for j = 1 to x do
34398: LD_ADDR_VAR 0 9
34402: PUSH
34403: DOUBLE
34404: LD_INT 1
34406: DEC
34407: ST_TO_ADDR
34408: LD_VAR 0 13
34412: PUSH
34413: FOR_TO
34414: IFFALSE 34776
// begin InitHc ;
34416: CALL_OW 19
// if not f then
34420: LD_VAR 0 12
34424: NOT
34425: IFFALSE 34514
// begin PrepareHuman ( false , i , skill ) ;
34427: LD_INT 0
34429: PPUSH
34430: LD_VAR 0 8
34434: PPUSH
34435: LD_VAR 0 4
34439: PPUSH
34440: CALL_OW 380
// un := CreateHuman ;
34444: LD_ADDR_VAR 0 14
34448: PUSH
34449: CALL_OW 44
34453: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34454: LD_ADDR_VAR 0 7
34458: PUSH
34459: LD_VAR 0 7
34463: PPUSH
34464: LD_INT 1
34466: PPUSH
34467: LD_VAR 0 14
34471: PPUSH
34472: CALL_OW 2
34476: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34477: LD_VAR 0 14
34481: PPUSH
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 250
34491: PPUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 251
34501: PPUSH
34502: LD_INT 10
34504: PPUSH
34505: LD_INT 0
34507: PPUSH
34508: CALL_OW 50
// continue ;
34512: GO 34413
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34514: LD_VAR 0 12
34518: PUSH
34519: LD_INT 1
34521: ARRAY
34522: PPUSH
34523: CALL_OW 313
34527: PUSH
34528: LD_VAR 0 12
34532: PUSH
34533: LD_INT 1
34535: ARRAY
34536: PPUSH
34537: CALL_OW 266
34541: PUSH
34542: LD_INT 32
34544: PUSH
34545: LD_INT 31
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: IN
34552: AND
34553: PUSH
34554: LD_VAR 0 12
34558: PUSH
34559: LD_INT 1
34561: ARRAY
34562: PPUSH
34563: CALL_OW 313
34567: PUSH
34568: LD_INT 6
34570: EQUAL
34571: OR
34572: IFFALSE 34592
// f := Delete ( f , 1 ) ;
34574: LD_ADDR_VAR 0 12
34578: PUSH
34579: LD_VAR 0 12
34583: PPUSH
34584: LD_INT 1
34586: PPUSH
34587: CALL_OW 3
34591: ST_TO_ADDR
// if not f then
34592: LD_VAR 0 12
34596: NOT
34597: IFFALSE 34615
// begin x := x + 2 ;
34599: LD_ADDR_VAR 0 13
34603: PUSH
34604: LD_VAR 0 13
34608: PUSH
34609: LD_INT 2
34611: PLUS
34612: ST_TO_ADDR
// continue ;
34613: GO 34413
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34615: LD_VAR 0 12
34619: PUSH
34620: LD_INT 1
34622: ARRAY
34623: PPUSH
34624: CALL_OW 266
34628: PUSH
34629: LD_INT 5
34631: EQUAL
34632: IFFALSE 34706
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34634: LD_VAR 0 12
34638: PUSH
34639: LD_INT 1
34641: ARRAY
34642: PPUSH
34643: CALL_OW 313
34647: PUSH
34648: LD_INT 3
34650: LESS
34651: IFFALSE 34687
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34653: LD_INT 0
34655: PPUSH
34656: LD_INT 5
34658: PUSH
34659: LD_INT 8
34661: PUSH
34662: LD_INT 9
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: PUSH
34670: LD_VAR 0 17
34674: ARRAY
34675: PPUSH
34676: LD_VAR 0 4
34680: PPUSH
34681: CALL_OW 380
34685: GO 34704
// PrepareHuman ( false , i , skill ) ;
34687: LD_INT 0
34689: PPUSH
34690: LD_VAR 0 8
34694: PPUSH
34695: LD_VAR 0 4
34699: PPUSH
34700: CALL_OW 380
// end else
34704: GO 34723
// PrepareHuman ( false , i , skill ) ;
34706: LD_INT 0
34708: PPUSH
34709: LD_VAR 0 8
34713: PPUSH
34714: LD_VAR 0 4
34718: PPUSH
34719: CALL_OW 380
// un := CreateHuman ;
34723: LD_ADDR_VAR 0 14
34727: PUSH
34728: CALL_OW 44
34732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34733: LD_ADDR_VAR 0 7
34737: PUSH
34738: LD_VAR 0 7
34742: PPUSH
34743: LD_INT 1
34745: PPUSH
34746: LD_VAR 0 14
34750: PPUSH
34751: CALL_OW 2
34755: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34756: LD_VAR 0 14
34760: PPUSH
34761: LD_VAR 0 12
34765: PUSH
34766: LD_INT 1
34768: ARRAY
34769: PPUSH
34770: CALL_OW 52
// end ;
34774: GO 34413
34776: POP
34777: POP
// end ;
34778: GO 33715
34780: POP
34781: POP
// result := result ^ buildings ;
34782: LD_ADDR_VAR 0 7
34786: PUSH
34787: LD_VAR 0 7
34791: PUSH
34792: LD_VAR 0 18
34796: ADD
34797: ST_TO_ADDR
// end else
34798: GO 34941
// begin for i = 1 to personel do
34800: LD_ADDR_VAR 0 8
34804: PUSH
34805: DOUBLE
34806: LD_INT 1
34808: DEC
34809: ST_TO_ADDR
34810: LD_VAR 0 6
34814: PUSH
34815: FOR_TO
34816: IFFALSE 34939
// begin if i > 4 then
34818: LD_VAR 0 8
34822: PUSH
34823: LD_INT 4
34825: GREATER
34826: IFFALSE 34830
// break ;
34828: GO 34939
// x := personel [ i ] ;
34830: LD_ADDR_VAR 0 13
34834: PUSH
34835: LD_VAR 0 6
34839: PUSH
34840: LD_VAR 0 8
34844: ARRAY
34845: ST_TO_ADDR
// if x = - 1 then
34846: LD_VAR 0 13
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: EQUAL
34855: IFFALSE 34859
// continue ;
34857: GO 34815
// PrepareHuman ( false , i , skill ) ;
34859: LD_INT 0
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: LD_VAR 0 4
34871: PPUSH
34872: CALL_OW 380
// un := CreateHuman ;
34876: LD_ADDR_VAR 0 14
34880: PUSH
34881: CALL_OW 44
34885: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34886: LD_VAR 0 14
34890: PPUSH
34891: LD_VAR 0 1
34895: PPUSH
34896: CALL_OW 250
34900: PPUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 251
34910: PPUSH
34911: LD_INT 10
34913: PPUSH
34914: LD_INT 0
34916: PPUSH
34917: CALL_OW 50
// result := result ^ un ;
34921: LD_ADDR_VAR 0 7
34925: PUSH
34926: LD_VAR 0 7
34930: PUSH
34931: LD_VAR 0 14
34935: ADD
34936: ST_TO_ADDR
// end ;
34937: GO 34815
34939: POP
34940: POP
// end ; end ;
34941: LD_VAR 0 7
34945: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34946: LD_INT 0
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
// result := false ;
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_INT 0
34971: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34972: LD_VAR 0 1
34976: NOT
34977: PUSH
34978: LD_VAR 0 1
34982: PPUSH
34983: CALL_OW 266
34987: PUSH
34988: LD_INT 32
34990: PUSH
34991: LD_INT 33
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: IN
34998: NOT
34999: OR
35000: IFFALSE 35004
// exit ;
35002: GO 36113
// nat := GetNation ( tower ) ;
35004: LD_ADDR_VAR 0 12
35008: PUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: CALL_OW 248
35018: ST_TO_ADDR
// side := GetSide ( tower ) ;
35019: LD_ADDR_VAR 0 16
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 255
35033: ST_TO_ADDR
// x := GetX ( tower ) ;
35034: LD_ADDR_VAR 0 10
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 250
35048: ST_TO_ADDR
// y := GetY ( tower ) ;
35049: LD_ADDR_VAR 0 11
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 251
35063: ST_TO_ADDR
// if not x or not y then
35064: LD_VAR 0 10
35068: NOT
35069: PUSH
35070: LD_VAR 0 11
35074: NOT
35075: OR
35076: IFFALSE 35080
// exit ;
35078: GO 36113
// weapon := 0 ;
35080: LD_ADDR_VAR 0 18
35084: PUSH
35085: LD_INT 0
35087: ST_TO_ADDR
// fac_list := [ ] ;
35088: LD_ADDR_VAR 0 17
35092: PUSH
35093: EMPTY
35094: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35095: LD_ADDR_VAR 0 6
35099: PUSH
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 274
35109: PPUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: LD_INT 0
35117: PPUSH
35118: CALL 32684 0 3
35122: PPUSH
35123: LD_INT 30
35125: PUSH
35126: LD_INT 3
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PPUSH
35133: CALL_OW 72
35137: ST_TO_ADDR
// if not factories then
35138: LD_VAR 0 6
35142: NOT
35143: IFFALSE 35147
// exit ;
35145: GO 36113
// for i in factories do
35147: LD_ADDR_VAR 0 8
35151: PUSH
35152: LD_VAR 0 6
35156: PUSH
35157: FOR_IN
35158: IFFALSE 35183
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35160: LD_ADDR_VAR 0 17
35164: PUSH
35165: LD_VAR 0 17
35169: PUSH
35170: LD_VAR 0 8
35174: PPUSH
35175: CALL_OW 478
35179: UNION
35180: ST_TO_ADDR
35181: GO 35157
35183: POP
35184: POP
// if not fac_list then
35185: LD_VAR 0 17
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 36113
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35194: LD_ADDR_VAR 0 5
35198: PUSH
35199: LD_INT 4
35201: PUSH
35202: LD_INT 5
35204: PUSH
35205: LD_INT 9
35207: PUSH
35208: LD_INT 10
35210: PUSH
35211: LD_INT 6
35213: PUSH
35214: LD_INT 7
35216: PUSH
35217: LD_INT 11
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 27
35231: PUSH
35232: LD_INT 28
35234: PUSH
35235: LD_INT 26
35237: PUSH
35238: LD_INT 30
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 43
35249: PUSH
35250: LD_INT 44
35252: PUSH
35253: LD_INT 46
35255: PUSH
35256: LD_INT 45
35258: PUSH
35259: LD_INT 47
35261: PUSH
35262: LD_INT 49
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: LIST
35277: PUSH
35278: LD_VAR 0 12
35282: ARRAY
35283: ST_TO_ADDR
// list := list isect fac_list ;
35284: LD_ADDR_VAR 0 5
35288: PUSH
35289: LD_VAR 0 5
35293: PUSH
35294: LD_VAR 0 17
35298: ISECT
35299: ST_TO_ADDR
// if not list then
35300: LD_VAR 0 5
35304: NOT
35305: IFFALSE 35309
// exit ;
35307: GO 36113
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35309: LD_VAR 0 12
35313: PUSH
35314: LD_INT 3
35316: EQUAL
35317: PUSH
35318: LD_INT 49
35320: PUSH
35321: LD_VAR 0 5
35325: IN
35326: AND
35327: PUSH
35328: LD_INT 31
35330: PPUSH
35331: LD_VAR 0 16
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: AND
35345: IFFALSE 35405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35347: LD_INT 22
35349: PUSH
35350: LD_VAR 0 16
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 35
35361: PUSH
35362: LD_INT 49
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 91
35371: PUSH
35372: LD_VAR 0 1
35376: PUSH
35377: LD_INT 10
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PPUSH
35390: CALL_OW 69
35394: NOT
35395: IFFALSE 35405
// weapon := ru_time_lapser ;
35397: LD_ADDR_VAR 0 18
35401: PUSH
35402: LD_INT 49
35404: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35405: LD_VAR 0 12
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: IN
35420: PUSH
35421: LD_INT 11
35423: PUSH
35424: LD_VAR 0 5
35428: IN
35429: PUSH
35430: LD_INT 30
35432: PUSH
35433: LD_VAR 0 5
35437: IN
35438: OR
35439: AND
35440: PUSH
35441: LD_INT 6
35443: PPUSH
35444: LD_VAR 0 16
35448: PPUSH
35449: CALL_OW 321
35453: PUSH
35454: LD_INT 2
35456: EQUAL
35457: AND
35458: IFFALSE 35623
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35460: LD_INT 22
35462: PUSH
35463: LD_VAR 0 16
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 35
35477: PUSH
35478: LD_INT 11
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 35
35487: PUSH
35488: LD_INT 30
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 91
35502: PUSH
35503: LD_VAR 0 1
35507: PUSH
35508: LD_INT 18
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PPUSH
35521: CALL_OW 69
35525: NOT
35526: PUSH
35527: LD_INT 22
35529: PUSH
35530: LD_VAR 0 16
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 30
35544: PUSH
35545: LD_INT 32
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 33
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 91
35569: PUSH
35570: LD_VAR 0 1
35574: PUSH
35575: LD_INT 12
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: PPUSH
35591: CALL_OW 69
35595: PUSH
35596: LD_INT 2
35598: GREATER
35599: AND
35600: IFFALSE 35623
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35602: LD_ADDR_VAR 0 18
35606: PUSH
35607: LD_INT 11
35609: PUSH
35610: LD_INT 30
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_VAR 0 12
35621: ARRAY
35622: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35623: LD_VAR 0 18
35627: NOT
35628: PUSH
35629: LD_INT 40
35631: PPUSH
35632: LD_VAR 0 16
35636: PPUSH
35637: CALL_OW 321
35641: PUSH
35642: LD_INT 2
35644: EQUAL
35645: AND
35646: PUSH
35647: LD_INT 7
35649: PUSH
35650: LD_VAR 0 5
35654: IN
35655: PUSH
35656: LD_INT 28
35658: PUSH
35659: LD_VAR 0 5
35663: IN
35664: OR
35665: PUSH
35666: LD_INT 45
35668: PUSH
35669: LD_VAR 0 5
35673: IN
35674: OR
35675: AND
35676: IFFALSE 35930
// begin hex := GetHexInfo ( x , y ) ;
35678: LD_ADDR_VAR 0 4
35682: PUSH
35683: LD_VAR 0 10
35687: PPUSH
35688: LD_VAR 0 11
35692: PPUSH
35693: CALL_OW 546
35697: ST_TO_ADDR
// if hex [ 1 ] then
35698: LD_VAR 0 4
35702: PUSH
35703: LD_INT 1
35705: ARRAY
35706: IFFALSE 35710
// exit ;
35708: GO 36113
// height := hex [ 2 ] ;
35710: LD_ADDR_VAR 0 15
35714: PUSH
35715: LD_VAR 0 4
35719: PUSH
35720: LD_INT 2
35722: ARRAY
35723: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35724: LD_ADDR_VAR 0 14
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 3
35737: PUSH
35738: LD_INT 5
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: ST_TO_ADDR
// for i in tmp do
35747: LD_ADDR_VAR 0 8
35751: PUSH
35752: LD_VAR 0 14
35756: PUSH
35757: FOR_IN
35758: IFFALSE 35928
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_VAR 0 10
35769: PPUSH
35770: LD_VAR 0 8
35774: PPUSH
35775: LD_INT 5
35777: PPUSH
35778: CALL_OW 272
35782: PUSH
35783: LD_VAR 0 11
35787: PPUSH
35788: LD_VAR 0 8
35792: PPUSH
35793: LD_INT 5
35795: PPUSH
35796: CALL_OW 273
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35805: LD_VAR 0 9
35809: PUSH
35810: LD_INT 1
35812: ARRAY
35813: PPUSH
35814: LD_VAR 0 9
35818: PUSH
35819: LD_INT 2
35821: ARRAY
35822: PPUSH
35823: CALL_OW 488
35827: IFFALSE 35926
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35829: LD_ADDR_VAR 0 4
35833: PUSH
35834: LD_VAR 0 9
35838: PUSH
35839: LD_INT 1
35841: ARRAY
35842: PPUSH
35843: LD_VAR 0 9
35847: PUSH
35848: LD_INT 2
35850: ARRAY
35851: PPUSH
35852: CALL_OW 546
35856: ST_TO_ADDR
// if hex [ 1 ] then
35857: LD_VAR 0 4
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: IFFALSE 35869
// continue ;
35867: GO 35757
// h := hex [ 2 ] ;
35869: LD_ADDR_VAR 0 13
35873: PUSH
35874: LD_VAR 0 4
35878: PUSH
35879: LD_INT 2
35881: ARRAY
35882: ST_TO_ADDR
// if h + 7 < height then
35883: LD_VAR 0 13
35887: PUSH
35888: LD_INT 7
35890: PLUS
35891: PUSH
35892: LD_VAR 0 15
35896: LESS
35897: IFFALSE 35926
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35899: LD_ADDR_VAR 0 18
35903: PUSH
35904: LD_INT 7
35906: PUSH
35907: LD_INT 28
35909: PUSH
35910: LD_INT 45
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: PUSH
35918: LD_VAR 0 12
35922: ARRAY
35923: ST_TO_ADDR
// break ;
35924: GO 35928
// end ; end ; end ;
35926: GO 35757
35928: POP
35929: POP
// end ; if not weapon then
35930: LD_VAR 0 18
35934: NOT
35935: IFFALSE 35995
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35937: LD_ADDR_VAR 0 5
35941: PUSH
35942: LD_VAR 0 5
35946: PUSH
35947: LD_INT 11
35949: PUSH
35950: LD_INT 30
35952: PUSH
35953: LD_INT 49
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: DIFF
35961: ST_TO_ADDR
// if not list then
35962: LD_VAR 0 5
35966: NOT
35967: IFFALSE 35971
// exit ;
35969: GO 36113
// weapon := list [ rand ( 1 , list ) ] ;
35971: LD_ADDR_VAR 0 18
35975: PUSH
35976: LD_VAR 0 5
35980: PUSH
35981: LD_INT 1
35983: PPUSH
35984: LD_VAR 0 5
35988: PPUSH
35989: CALL_OW 12
35993: ARRAY
35994: ST_TO_ADDR
// end ; if weapon then
35995: LD_VAR 0 18
35999: IFFALSE 36113
// begin tmp := CostOfWeapon ( weapon ) ;
36001: LD_ADDR_VAR 0 14
36005: PUSH
36006: LD_VAR 0 18
36010: PPUSH
36011: CALL_OW 451
36015: ST_TO_ADDR
// j := GetBase ( tower ) ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_VAR 0 1
36025: PPUSH
36026: CALL_OW 274
36030: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36031: LD_VAR 0 9
36035: PPUSH
36036: LD_INT 1
36038: PPUSH
36039: CALL_OW 275
36043: PUSH
36044: LD_VAR 0 14
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: GREATEREQUAL
36053: PUSH
36054: LD_VAR 0 9
36058: PPUSH
36059: LD_INT 2
36061: PPUSH
36062: CALL_OW 275
36066: PUSH
36067: LD_VAR 0 14
36071: PUSH
36072: LD_INT 2
36074: ARRAY
36075: GREATEREQUAL
36076: AND
36077: PUSH
36078: LD_VAR 0 9
36082: PPUSH
36083: LD_INT 3
36085: PPUSH
36086: CALL_OW 275
36090: PUSH
36091: LD_VAR 0 14
36095: PUSH
36096: LD_INT 3
36098: ARRAY
36099: GREATEREQUAL
36100: AND
36101: IFFALSE 36113
// result := weapon ;
36103: LD_ADDR_VAR 0 3
36107: PUSH
36108: LD_VAR 0 18
36112: ST_TO_ADDR
// end ; end ;
36113: LD_VAR 0 3
36117: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36118: LD_INT 0
36120: PPUSH
36121: PPUSH
// result := true ;
36122: LD_ADDR_VAR 0 3
36126: PUSH
36127: LD_INT 1
36129: ST_TO_ADDR
// if array1 = array2 then
36130: LD_VAR 0 1
36134: PUSH
36135: LD_VAR 0 2
36139: EQUAL
36140: IFFALSE 36200
// begin for i = 1 to array1 do
36142: LD_ADDR_VAR 0 4
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_VAR 0 1
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36196
// if array1 [ i ] <> array2 [ i ] then
36160: LD_VAR 0 1
36164: PUSH
36165: LD_VAR 0 4
36169: ARRAY
36170: PUSH
36171: LD_VAR 0 2
36175: PUSH
36176: LD_VAR 0 4
36180: ARRAY
36181: NONEQUAL
36182: IFFALSE 36194
// begin result := false ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// break ;
36192: GO 36196
// end ;
36194: GO 36157
36196: POP
36197: POP
// end else
36198: GO 36208
// result := false ;
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 0
36207: ST_TO_ADDR
// end ;
36208: LD_VAR 0 3
36212: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36213: LD_INT 0
36215: PPUSH
36216: PPUSH
// if not array1 or not array2 then
36217: LD_VAR 0 1
36221: NOT
36222: PUSH
36223: LD_VAR 0 2
36227: NOT
36228: OR
36229: IFFALSE 36233
// exit ;
36231: GO 36297
// result := true ;
36233: LD_ADDR_VAR 0 3
36237: PUSH
36238: LD_INT 1
36240: ST_TO_ADDR
// for i = 1 to array1 do
36241: LD_ADDR_VAR 0 4
36245: PUSH
36246: DOUBLE
36247: LD_INT 1
36249: DEC
36250: ST_TO_ADDR
36251: LD_VAR 0 1
36255: PUSH
36256: FOR_TO
36257: IFFALSE 36295
// if array1 [ i ] <> array2 [ i ] then
36259: LD_VAR 0 1
36263: PUSH
36264: LD_VAR 0 4
36268: ARRAY
36269: PUSH
36270: LD_VAR 0 2
36274: PUSH
36275: LD_VAR 0 4
36279: ARRAY
36280: NONEQUAL
36281: IFFALSE 36293
// begin result := false ;
36283: LD_ADDR_VAR 0 3
36287: PUSH
36288: LD_INT 0
36290: ST_TO_ADDR
// break ;
36291: GO 36295
// end ;
36293: GO 36256
36295: POP
36296: POP
// end ;
36297: LD_VAR 0 3
36301: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36302: LD_INT 0
36304: PPUSH
36305: PPUSH
36306: PPUSH
// pom := GetBase ( fac ) ;
36307: LD_ADDR_VAR 0 5
36311: PUSH
36312: LD_VAR 0 1
36316: PPUSH
36317: CALL_OW 274
36321: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36322: LD_ADDR_VAR 0 4
36326: PUSH
36327: LD_VAR 0 2
36331: PUSH
36332: LD_INT 1
36334: ARRAY
36335: PPUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_INT 2
36343: ARRAY
36344: PPUSH
36345: LD_VAR 0 2
36349: PUSH
36350: LD_INT 3
36352: ARRAY
36353: PPUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 4
36361: ARRAY
36362: PPUSH
36363: CALL_OW 449
36367: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36368: LD_ADDR_VAR 0 3
36372: PUSH
36373: LD_VAR 0 5
36377: PPUSH
36378: LD_INT 1
36380: PPUSH
36381: CALL_OW 275
36385: PUSH
36386: LD_VAR 0 4
36390: PUSH
36391: LD_INT 1
36393: ARRAY
36394: GREATEREQUAL
36395: PUSH
36396: LD_VAR 0 5
36400: PPUSH
36401: LD_INT 2
36403: PPUSH
36404: CALL_OW 275
36408: PUSH
36409: LD_VAR 0 4
36413: PUSH
36414: LD_INT 2
36416: ARRAY
36417: GREATEREQUAL
36418: AND
36419: PUSH
36420: LD_VAR 0 5
36424: PPUSH
36425: LD_INT 3
36427: PPUSH
36428: CALL_OW 275
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 3
36440: ARRAY
36441: GREATEREQUAL
36442: AND
36443: ST_TO_ADDR
// end ;
36444: LD_VAR 0 3
36448: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36449: LD_INT 0
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
// pom := GetBase ( building ) ;
36455: LD_ADDR_VAR 0 3
36459: PUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 274
36469: ST_TO_ADDR
// if not pom then
36470: LD_VAR 0 3
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 36649
// btype := GetBType ( building ) ;
36479: LD_ADDR_VAR 0 5
36483: PUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL_OW 266
36493: ST_TO_ADDR
// if btype = b_armoury then
36494: LD_VAR 0 5
36498: PUSH
36499: LD_INT 4
36501: EQUAL
36502: IFFALSE 36512
// btype := b_barracks ;
36504: LD_ADDR_VAR 0 5
36508: PUSH
36509: LD_INT 5
36511: ST_TO_ADDR
// if btype = b_depot then
36512: LD_VAR 0 5
36516: PUSH
36517: LD_INT 0
36519: EQUAL
36520: IFFALSE 36530
// btype := b_warehouse ;
36522: LD_ADDR_VAR 0 5
36526: PUSH
36527: LD_INT 1
36529: ST_TO_ADDR
// if btype = b_workshop then
36530: LD_VAR 0 5
36534: PUSH
36535: LD_INT 2
36537: EQUAL
36538: IFFALSE 36548
// btype := b_factory ;
36540: LD_ADDR_VAR 0 5
36544: PUSH
36545: LD_INT 3
36547: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36548: LD_ADDR_VAR 0 4
36552: PUSH
36553: LD_VAR 0 5
36557: PPUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 248
36567: PPUSH
36568: CALL_OW 450
36572: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36573: LD_ADDR_VAR 0 2
36577: PUSH
36578: LD_VAR 0 3
36582: PPUSH
36583: LD_INT 1
36585: PPUSH
36586: CALL_OW 275
36590: PUSH
36591: LD_VAR 0 4
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: GREATEREQUAL
36600: PUSH
36601: LD_VAR 0 3
36605: PPUSH
36606: LD_INT 2
36608: PPUSH
36609: CALL_OW 275
36613: PUSH
36614: LD_VAR 0 4
36618: PUSH
36619: LD_INT 2
36621: ARRAY
36622: GREATEREQUAL
36623: AND
36624: PUSH
36625: LD_VAR 0 3
36629: PPUSH
36630: LD_INT 3
36632: PPUSH
36633: CALL_OW 275
36637: PUSH
36638: LD_VAR 0 4
36642: PUSH
36643: LD_INT 3
36645: ARRAY
36646: GREATEREQUAL
36647: AND
36648: ST_TO_ADDR
// end ;
36649: LD_VAR 0 2
36653: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36654: LD_INT 0
36656: PPUSH
36657: PPUSH
36658: PPUSH
// pom := GetBase ( building ) ;
36659: LD_ADDR_VAR 0 4
36663: PUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 274
36673: ST_TO_ADDR
// if not pom then
36674: LD_VAR 0 4
36678: NOT
36679: IFFALSE 36683
// exit ;
36681: GO 36784
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36683: LD_ADDR_VAR 0 5
36687: PUSH
36688: LD_VAR 0 2
36692: PPUSH
36693: LD_VAR 0 1
36697: PPUSH
36698: CALL_OW 248
36702: PPUSH
36703: CALL_OW 450
36707: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_VAR 0 4
36717: PPUSH
36718: LD_INT 1
36720: PPUSH
36721: CALL_OW 275
36725: PUSH
36726: LD_VAR 0 5
36730: PUSH
36731: LD_INT 1
36733: ARRAY
36734: GREATEREQUAL
36735: PUSH
36736: LD_VAR 0 4
36740: PPUSH
36741: LD_INT 2
36743: PPUSH
36744: CALL_OW 275
36748: PUSH
36749: LD_VAR 0 5
36753: PUSH
36754: LD_INT 2
36756: ARRAY
36757: GREATEREQUAL
36758: AND
36759: PUSH
36760: LD_VAR 0 4
36764: PPUSH
36765: LD_INT 3
36767: PPUSH
36768: CALL_OW 275
36772: PUSH
36773: LD_VAR 0 5
36777: PUSH
36778: LD_INT 3
36780: ARRAY
36781: GREATEREQUAL
36782: AND
36783: ST_TO_ADDR
// end ;
36784: LD_VAR 0 3
36788: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36789: LD_INT 0
36791: PPUSH
36792: PPUSH
36793: PPUSH
36794: PPUSH
36795: PPUSH
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
// result := false ;
36802: LD_ADDR_VAR 0 8
36806: PUSH
36807: LD_INT 0
36809: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36810: LD_VAR 0 5
36814: NOT
36815: PUSH
36816: LD_VAR 0 1
36820: NOT
36821: OR
36822: PUSH
36823: LD_VAR 0 2
36827: NOT
36828: OR
36829: PUSH
36830: LD_VAR 0 3
36834: NOT
36835: OR
36836: IFFALSE 36840
// exit ;
36838: GO 37654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36840: LD_ADDR_VAR 0 14
36844: PUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_VAR 0 2
36854: PPUSH
36855: LD_VAR 0 3
36859: PPUSH
36860: LD_VAR 0 4
36864: PPUSH
36865: LD_VAR 0 5
36869: PUSH
36870: LD_INT 1
36872: ARRAY
36873: PPUSH
36874: CALL_OW 248
36878: PPUSH
36879: LD_INT 0
36881: PPUSH
36882: CALL 38887 0 6
36886: ST_TO_ADDR
// if not hexes then
36887: LD_VAR 0 14
36891: NOT
36892: IFFALSE 36896
// exit ;
36894: GO 37654
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36896: LD_ADDR_VAR 0 17
36900: PUSH
36901: LD_VAR 0 5
36905: PPUSH
36906: LD_INT 22
36908: PUSH
36909: LD_VAR 0 13
36913: PPUSH
36914: CALL_OW 255
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 30
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PPUSH
36955: CALL_OW 72
36959: ST_TO_ADDR
// for i = 1 to hexes do
36960: LD_ADDR_VAR 0 9
36964: PUSH
36965: DOUBLE
36966: LD_INT 1
36968: DEC
36969: ST_TO_ADDR
36970: LD_VAR 0 14
36974: PUSH
36975: FOR_TO
36976: IFFALSE 37652
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36978: LD_ADDR_VAR 0 13
36982: PUSH
36983: LD_VAR 0 14
36987: PUSH
36988: LD_VAR 0 9
36992: ARRAY
36993: PUSH
36994: LD_INT 1
36996: ARRAY
36997: PPUSH
36998: LD_VAR 0 14
37002: PUSH
37003: LD_VAR 0 9
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: CALL_OW 428
37017: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37018: LD_VAR 0 14
37022: PUSH
37023: LD_VAR 0 9
37027: ARRAY
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: PPUSH
37033: LD_VAR 0 14
37037: PUSH
37038: LD_VAR 0 9
37042: ARRAY
37043: PUSH
37044: LD_INT 2
37046: ARRAY
37047: PPUSH
37048: CALL_OW 351
37052: PUSH
37053: LD_VAR 0 14
37057: PUSH
37058: LD_VAR 0 9
37062: ARRAY
37063: PUSH
37064: LD_INT 1
37066: ARRAY
37067: PPUSH
37068: LD_VAR 0 14
37072: PUSH
37073: LD_VAR 0 9
37077: ARRAY
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: PPUSH
37083: CALL_OW 488
37087: NOT
37088: OR
37089: PUSH
37090: LD_VAR 0 13
37094: PPUSH
37095: CALL_OW 247
37099: PUSH
37100: LD_INT 3
37102: EQUAL
37103: OR
37104: IFFALSE 37110
// exit ;
37106: POP
37107: POP
37108: GO 37654
// if not tmp then
37110: LD_VAR 0 13
37114: NOT
37115: IFFALSE 37119
// continue ;
37117: GO 36975
// result := true ;
37119: LD_ADDR_VAR 0 8
37123: PUSH
37124: LD_INT 1
37126: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37127: LD_VAR 0 6
37131: PUSH
37132: LD_VAR 0 13
37136: PPUSH
37137: CALL_OW 247
37141: PUSH
37142: LD_INT 2
37144: EQUAL
37145: AND
37146: PUSH
37147: LD_VAR 0 13
37151: PPUSH
37152: CALL_OW 263
37156: PUSH
37157: LD_INT 1
37159: EQUAL
37160: AND
37161: IFFALSE 37325
// begin if IsDrivenBy ( tmp ) then
37163: LD_VAR 0 13
37167: PPUSH
37168: CALL_OW 311
37172: IFFALSE 37176
// continue ;
37174: GO 36975
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37176: LD_VAR 0 6
37180: PPUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 60
37186: PUSH
37187: EMPTY
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 55
37199: PUSH
37200: EMPTY
37201: LIST
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PPUSH
37211: CALL_OW 72
37215: IFFALSE 37323
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37217: LD_ADDR_VAR 0 18
37221: PUSH
37222: LD_VAR 0 6
37226: PPUSH
37227: LD_INT 3
37229: PUSH
37230: LD_INT 60
37232: PUSH
37233: EMPTY
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: LD_INT 55
37245: PUSH
37246: EMPTY
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PPUSH
37257: CALL_OW 72
37261: PUSH
37262: LD_INT 1
37264: ARRAY
37265: ST_TO_ADDR
// if IsInUnit ( driver ) then
37266: LD_VAR 0 18
37270: PPUSH
37271: CALL_OW 310
37275: IFFALSE 37286
// ComExit ( driver ) ;
37277: LD_VAR 0 18
37281: PPUSH
37282: CALL 62667 0 1
// AddComEnterUnit ( driver , tmp ) ;
37286: LD_VAR 0 18
37290: PPUSH
37291: LD_VAR 0 13
37295: PPUSH
37296: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37300: LD_VAR 0 18
37304: PPUSH
37305: LD_VAR 0 7
37309: PPUSH
37310: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37314: LD_VAR 0 18
37318: PPUSH
37319: CALL_OW 181
// end ; continue ;
37323: GO 36975
// end ; if not cleaners or not tmp in cleaners then
37325: LD_VAR 0 6
37329: NOT
37330: PUSH
37331: LD_VAR 0 13
37335: PUSH
37336: LD_VAR 0 6
37340: IN
37341: NOT
37342: OR
37343: IFFALSE 37650
// begin if dep then
37345: LD_VAR 0 17
37349: IFFALSE 37485
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37351: LD_ADDR_VAR 0 16
37355: PUSH
37356: LD_VAR 0 17
37360: PUSH
37361: LD_INT 1
37363: ARRAY
37364: PPUSH
37365: CALL_OW 250
37369: PPUSH
37370: LD_VAR 0 17
37374: PUSH
37375: LD_INT 1
37377: ARRAY
37378: PPUSH
37379: CALL_OW 254
37383: PPUSH
37384: LD_INT 5
37386: PPUSH
37387: CALL_OW 272
37391: PUSH
37392: LD_VAR 0 17
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: CALL_OW 251
37405: PPUSH
37406: LD_VAR 0 17
37410: PUSH
37411: LD_INT 1
37413: ARRAY
37414: PPUSH
37415: CALL_OW 254
37419: PPUSH
37420: LD_INT 5
37422: PPUSH
37423: CALL_OW 273
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37432: LD_VAR 0 16
37436: PUSH
37437: LD_INT 1
37439: ARRAY
37440: PPUSH
37441: LD_VAR 0 16
37445: PUSH
37446: LD_INT 2
37448: ARRAY
37449: PPUSH
37450: CALL_OW 488
37454: IFFALSE 37485
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37456: LD_VAR 0 13
37460: PPUSH
37461: LD_VAR 0 16
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: PPUSH
37470: LD_VAR 0 16
37474: PUSH
37475: LD_INT 2
37477: ARRAY
37478: PPUSH
37479: CALL_OW 111
// continue ;
37483: GO 36975
// end ; end ; r := GetDir ( tmp ) ;
37485: LD_ADDR_VAR 0 15
37489: PUSH
37490: LD_VAR 0 13
37494: PPUSH
37495: CALL_OW 254
37499: ST_TO_ADDR
// if r = 5 then
37500: LD_VAR 0 15
37504: PUSH
37505: LD_INT 5
37507: EQUAL
37508: IFFALSE 37518
// r := 0 ;
37510: LD_ADDR_VAR 0 15
37514: PUSH
37515: LD_INT 0
37517: ST_TO_ADDR
// for j = r to 5 do
37518: LD_ADDR_VAR 0 10
37522: PUSH
37523: DOUBLE
37524: LD_VAR 0 15
37528: DEC
37529: ST_TO_ADDR
37530: LD_INT 5
37532: PUSH
37533: FOR_TO
37534: IFFALSE 37648
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37536: LD_ADDR_VAR 0 11
37540: PUSH
37541: LD_VAR 0 13
37545: PPUSH
37546: CALL_OW 250
37550: PPUSH
37551: LD_VAR 0 10
37555: PPUSH
37556: LD_INT 2
37558: PPUSH
37559: CALL_OW 272
37563: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37564: LD_ADDR_VAR 0 12
37568: PUSH
37569: LD_VAR 0 13
37573: PPUSH
37574: CALL_OW 251
37578: PPUSH
37579: LD_VAR 0 10
37583: PPUSH
37584: LD_INT 2
37586: PPUSH
37587: CALL_OW 273
37591: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37592: LD_VAR 0 11
37596: PPUSH
37597: LD_VAR 0 12
37601: PPUSH
37602: CALL_OW 488
37606: PUSH
37607: LD_VAR 0 11
37611: PPUSH
37612: LD_VAR 0 12
37616: PPUSH
37617: CALL_OW 428
37621: NOT
37622: AND
37623: IFFALSE 37646
// begin ComMoveXY ( tmp , _x , _y ) ;
37625: LD_VAR 0 13
37629: PPUSH
37630: LD_VAR 0 11
37634: PPUSH
37635: LD_VAR 0 12
37639: PPUSH
37640: CALL_OW 111
// break ;
37644: GO 37648
// end ; end ;
37646: GO 37533
37648: POP
37649: POP
// end ; end ;
37650: GO 36975
37652: POP
37653: POP
// end ;
37654: LD_VAR 0 8
37658: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37659: LD_INT 0
37661: PPUSH
// result := true ;
37662: LD_ADDR_VAR 0 3
37666: PUSH
37667: LD_INT 1
37669: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37670: LD_VAR 0 2
37674: PUSH
37675: LD_INT 24
37677: DOUBLE
37678: EQUAL
37679: IFTRUE 37689
37681: LD_INT 33
37683: DOUBLE
37684: EQUAL
37685: IFTRUE 37689
37687: GO 37714
37689: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_INT 32
37697: PPUSH
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 321
37707: PUSH
37708: LD_INT 2
37710: EQUAL
37711: ST_TO_ADDR
37712: GO 38030
37714: LD_INT 20
37716: DOUBLE
37717: EQUAL
37718: IFTRUE 37722
37720: GO 37747
37722: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_INT 6
37730: PPUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 321
37740: PUSH
37741: LD_INT 2
37743: EQUAL
37744: ST_TO_ADDR
37745: GO 38030
37747: LD_INT 22
37749: DOUBLE
37750: EQUAL
37751: IFTRUE 37761
37753: LD_INT 36
37755: DOUBLE
37756: EQUAL
37757: IFTRUE 37761
37759: GO 37786
37761: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37762: LD_ADDR_VAR 0 3
37766: PUSH
37767: LD_INT 15
37769: PPUSH
37770: LD_VAR 0 1
37774: PPUSH
37775: CALL_OW 321
37779: PUSH
37780: LD_INT 2
37782: EQUAL
37783: ST_TO_ADDR
37784: GO 38030
37786: LD_INT 30
37788: DOUBLE
37789: EQUAL
37790: IFTRUE 37794
37792: GO 37819
37794: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37795: LD_ADDR_VAR 0 3
37799: PUSH
37800: LD_INT 20
37802: PPUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 321
37812: PUSH
37813: LD_INT 2
37815: EQUAL
37816: ST_TO_ADDR
37817: GO 38030
37819: LD_INT 28
37821: DOUBLE
37822: EQUAL
37823: IFTRUE 37833
37825: LD_INT 21
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37858
37833: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 21
37841: PPUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: CALL_OW 321
37851: PUSH
37852: LD_INT 2
37854: EQUAL
37855: ST_TO_ADDR
37856: GO 38030
37858: LD_INT 16
37860: DOUBLE
37861: EQUAL
37862: IFTRUE 37866
37864: GO 37891
37866: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37867: LD_ADDR_VAR 0 3
37871: PUSH
37872: LD_INT 84
37874: PPUSH
37875: LD_VAR 0 1
37879: PPUSH
37880: CALL_OW 321
37884: PUSH
37885: LD_INT 2
37887: EQUAL
37888: ST_TO_ADDR
37889: GO 38030
37891: LD_INT 19
37893: DOUBLE
37894: EQUAL
37895: IFTRUE 37905
37897: LD_INT 23
37899: DOUBLE
37900: EQUAL
37901: IFTRUE 37905
37903: GO 37930
37905: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37906: LD_ADDR_VAR 0 3
37910: PUSH
37911: LD_INT 83
37913: PPUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 321
37923: PUSH
37924: LD_INT 2
37926: EQUAL
37927: ST_TO_ADDR
37928: GO 38030
37930: LD_INT 17
37932: DOUBLE
37933: EQUAL
37934: IFTRUE 37938
37936: GO 37963
37938: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37939: LD_ADDR_VAR 0 3
37943: PUSH
37944: LD_INT 39
37946: PPUSH
37947: LD_VAR 0 1
37951: PPUSH
37952: CALL_OW 321
37956: PUSH
37957: LD_INT 2
37959: EQUAL
37960: ST_TO_ADDR
37961: GO 38030
37963: LD_INT 18
37965: DOUBLE
37966: EQUAL
37967: IFTRUE 37971
37969: GO 37996
37971: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37972: LD_ADDR_VAR 0 3
37976: PUSH
37977: LD_INT 40
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 321
37989: PUSH
37990: LD_INT 2
37992: EQUAL
37993: ST_TO_ADDR
37994: GO 38030
37996: LD_INT 27
37998: DOUBLE
37999: EQUAL
38000: IFTRUE 38004
38002: GO 38029
38004: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38005: LD_ADDR_VAR 0 3
38009: PUSH
38010: LD_INT 35
38012: PPUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 321
38022: PUSH
38023: LD_INT 2
38025: EQUAL
38026: ST_TO_ADDR
38027: GO 38030
38029: POP
// end ;
38030: LD_VAR 0 3
38034: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38035: LD_INT 0
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
// result := false ;
38048: LD_ADDR_VAR 0 6
38052: PUSH
38053: LD_INT 0
38055: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38056: LD_VAR 0 1
38060: NOT
38061: PUSH
38062: LD_VAR 0 1
38066: PPUSH
38067: CALL_OW 266
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: IN
38082: NOT
38083: OR
38084: PUSH
38085: LD_VAR 0 2
38089: NOT
38090: OR
38091: PUSH
38092: LD_VAR 0 5
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: LD_INT 5
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: IN
38123: NOT
38124: OR
38125: PUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: LD_VAR 0 4
38135: PPUSH
38136: CALL_OW 488
38140: NOT
38141: OR
38142: IFFALSE 38146
// exit ;
38144: GO 38882
// side := GetSide ( depot ) ;
38146: LD_ADDR_VAR 0 9
38150: PUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 255
38160: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38161: LD_VAR 0 9
38165: PPUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: CALL 37659 0 2
38175: NOT
38176: IFFALSE 38180
// exit ;
38178: GO 38882
// pom := GetBase ( depot ) ;
38180: LD_ADDR_VAR 0 10
38184: PUSH
38185: LD_VAR 0 1
38189: PPUSH
38190: CALL_OW 274
38194: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38195: LD_ADDR_VAR 0 11
38199: PUSH
38200: LD_VAR 0 2
38204: PPUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 248
38214: PPUSH
38215: CALL_OW 450
38219: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38220: LD_VAR 0 10
38224: PPUSH
38225: LD_INT 1
38227: PPUSH
38228: CALL_OW 275
38232: PUSH
38233: LD_VAR 0 11
38237: PUSH
38238: LD_INT 1
38240: ARRAY
38241: GREATEREQUAL
38242: PUSH
38243: LD_VAR 0 10
38247: PPUSH
38248: LD_INT 2
38250: PPUSH
38251: CALL_OW 275
38255: PUSH
38256: LD_VAR 0 11
38260: PUSH
38261: LD_INT 2
38263: ARRAY
38264: GREATEREQUAL
38265: AND
38266: PUSH
38267: LD_VAR 0 10
38271: PPUSH
38272: LD_INT 3
38274: PPUSH
38275: CALL_OW 275
38279: PUSH
38280: LD_VAR 0 11
38284: PUSH
38285: LD_INT 3
38287: ARRAY
38288: GREATEREQUAL
38289: AND
38290: NOT
38291: IFFALSE 38295
// exit ;
38293: GO 38882
// if GetBType ( depot ) = b_depot then
38295: LD_VAR 0 1
38299: PPUSH
38300: CALL_OW 266
38304: PUSH
38305: LD_INT 0
38307: EQUAL
38308: IFFALSE 38320
// dist := 28 else
38310: LD_ADDR_VAR 0 14
38314: PUSH
38315: LD_INT 28
38317: ST_TO_ADDR
38318: GO 38328
// dist := 36 ;
38320: LD_ADDR_VAR 0 14
38324: PUSH
38325: LD_INT 36
38327: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38328: LD_VAR 0 1
38332: PPUSH
38333: LD_VAR 0 3
38337: PPUSH
38338: LD_VAR 0 4
38342: PPUSH
38343: CALL_OW 297
38347: PUSH
38348: LD_VAR 0 14
38352: GREATER
38353: IFFALSE 38357
// exit ;
38355: GO 38882
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38357: LD_ADDR_VAR 0 12
38361: PUSH
38362: LD_VAR 0 2
38366: PPUSH
38367: LD_VAR 0 3
38371: PPUSH
38372: LD_VAR 0 4
38376: PPUSH
38377: LD_VAR 0 5
38381: PPUSH
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 248
38391: PPUSH
38392: LD_INT 0
38394: PPUSH
38395: CALL 38887 0 6
38399: ST_TO_ADDR
// if not hexes then
38400: LD_VAR 0 12
38404: NOT
38405: IFFALSE 38409
// exit ;
38407: GO 38882
// hex := GetHexInfo ( x , y ) ;
38409: LD_ADDR_VAR 0 15
38413: PUSH
38414: LD_VAR 0 3
38418: PPUSH
38419: LD_VAR 0 4
38423: PPUSH
38424: CALL_OW 546
38428: ST_TO_ADDR
// if hex [ 1 ] then
38429: LD_VAR 0 15
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: IFFALSE 38441
// exit ;
38439: GO 38882
// height := hex [ 2 ] ;
38441: LD_ADDR_VAR 0 13
38445: PUSH
38446: LD_VAR 0 15
38450: PUSH
38451: LD_INT 2
38453: ARRAY
38454: ST_TO_ADDR
// for i = 1 to hexes do
38455: LD_ADDR_VAR 0 7
38459: PUSH
38460: DOUBLE
38461: LD_INT 1
38463: DEC
38464: ST_TO_ADDR
38465: LD_VAR 0 12
38469: PUSH
38470: FOR_TO
38471: IFFALSE 38801
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38473: LD_VAR 0 12
38477: PUSH
38478: LD_VAR 0 7
38482: ARRAY
38483: PUSH
38484: LD_INT 1
38486: ARRAY
38487: PPUSH
38488: LD_VAR 0 12
38492: PUSH
38493: LD_VAR 0 7
38497: ARRAY
38498: PUSH
38499: LD_INT 2
38501: ARRAY
38502: PPUSH
38503: CALL_OW 488
38507: NOT
38508: PUSH
38509: LD_VAR 0 12
38513: PUSH
38514: LD_VAR 0 7
38518: ARRAY
38519: PUSH
38520: LD_INT 1
38522: ARRAY
38523: PPUSH
38524: LD_VAR 0 12
38528: PUSH
38529: LD_VAR 0 7
38533: ARRAY
38534: PUSH
38535: LD_INT 2
38537: ARRAY
38538: PPUSH
38539: CALL_OW 428
38543: PUSH
38544: LD_INT 0
38546: GREATER
38547: OR
38548: PUSH
38549: LD_VAR 0 12
38553: PUSH
38554: LD_VAR 0 7
38558: ARRAY
38559: PUSH
38560: LD_INT 1
38562: ARRAY
38563: PPUSH
38564: LD_VAR 0 12
38568: PUSH
38569: LD_VAR 0 7
38573: ARRAY
38574: PUSH
38575: LD_INT 2
38577: ARRAY
38578: PPUSH
38579: CALL_OW 351
38583: OR
38584: IFFALSE 38590
// exit ;
38586: POP
38587: POP
38588: GO 38882
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38590: LD_ADDR_VAR 0 8
38594: PUSH
38595: LD_VAR 0 12
38599: PUSH
38600: LD_VAR 0 7
38604: ARRAY
38605: PUSH
38606: LD_INT 1
38608: ARRAY
38609: PPUSH
38610: LD_VAR 0 12
38614: PUSH
38615: LD_VAR 0 7
38619: ARRAY
38620: PUSH
38621: LD_INT 2
38623: ARRAY
38624: PPUSH
38625: CALL_OW 546
38629: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38630: LD_VAR 0 8
38634: PUSH
38635: LD_INT 1
38637: ARRAY
38638: PUSH
38639: LD_VAR 0 8
38643: PUSH
38644: LD_INT 2
38646: ARRAY
38647: PUSH
38648: LD_VAR 0 13
38652: PUSH
38653: LD_INT 2
38655: PLUS
38656: GREATER
38657: OR
38658: PUSH
38659: LD_VAR 0 8
38663: PUSH
38664: LD_INT 2
38666: ARRAY
38667: PUSH
38668: LD_VAR 0 13
38672: PUSH
38673: LD_INT 2
38675: MINUS
38676: LESS
38677: OR
38678: PUSH
38679: LD_VAR 0 8
38683: PUSH
38684: LD_INT 3
38686: ARRAY
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 8
38693: PUSH
38694: LD_INT 9
38696: PUSH
38697: LD_INT 10
38699: PUSH
38700: LD_INT 11
38702: PUSH
38703: LD_INT 12
38705: PUSH
38706: LD_INT 13
38708: PUSH
38709: LD_INT 16
38711: PUSH
38712: LD_INT 17
38714: PUSH
38715: LD_INT 18
38717: PUSH
38718: LD_INT 19
38720: PUSH
38721: LD_INT 20
38723: PUSH
38724: LD_INT 21
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: IN
38742: NOT
38743: OR
38744: PUSH
38745: LD_VAR 0 8
38749: PUSH
38750: LD_INT 5
38752: ARRAY
38753: NOT
38754: OR
38755: PUSH
38756: LD_VAR 0 8
38760: PUSH
38761: LD_INT 6
38763: ARRAY
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 7
38773: PUSH
38774: LD_INT 9
38776: PUSH
38777: LD_INT 10
38779: PUSH
38780: LD_INT 11
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: IN
38791: NOT
38792: OR
38793: IFFALSE 38799
// exit ;
38795: POP
38796: POP
38797: GO 38882
// end ;
38799: GO 38470
38801: POP
38802: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38803: LD_VAR 0 9
38807: PPUSH
38808: LD_VAR 0 3
38812: PPUSH
38813: LD_VAR 0 4
38817: PPUSH
38818: LD_INT 20
38820: PPUSH
38821: CALL 30834 0 4
38825: PUSH
38826: LD_INT 4
38828: ARRAY
38829: IFFALSE 38833
// exit ;
38831: GO 38882
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38833: LD_VAR 0 2
38837: PUSH
38838: LD_INT 29
38840: PUSH
38841: LD_INT 30
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: IN
38848: PUSH
38849: LD_VAR 0 3
38853: PPUSH
38854: LD_VAR 0 4
38858: PPUSH
38859: LD_VAR 0 9
38863: PPUSH
38864: CALL_OW 440
38868: NOT
38869: AND
38870: IFFALSE 38874
// exit ;
38872: GO 38882
// result := true ;
38874: LD_ADDR_VAR 0 6
38878: PUSH
38879: LD_INT 1
38881: ST_TO_ADDR
// end ;
38882: LD_VAR 0 6
38886: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38887: LD_INT 0
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
// result = [ ] ;
38947: LD_ADDR_VAR 0 7
38951: PUSH
38952: EMPTY
38953: ST_TO_ADDR
// temp_list = [ ] ;
38954: LD_ADDR_VAR 0 9
38958: PUSH
38959: EMPTY
38960: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38961: LD_VAR 0 4
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 4
38980: PUSH
38981: LD_INT 5
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: IN
38992: NOT
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: IN
39009: PUSH
39010: LD_VAR 0 5
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: IN
39029: NOT
39030: AND
39031: OR
39032: IFFALSE 39036
// exit ;
39034: GO 57427
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39036: LD_VAR 0 1
39040: PUSH
39041: LD_INT 6
39043: PUSH
39044: LD_INT 7
39046: PUSH
39047: LD_INT 8
39049: PUSH
39050: LD_INT 13
39052: PUSH
39053: LD_INT 12
39055: PUSH
39056: LD_INT 15
39058: PUSH
39059: LD_INT 11
39061: PUSH
39062: LD_INT 14
39064: PUSH
39065: LD_INT 10
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: IN
39079: IFFALSE 39089
// btype = b_lab ;
39081: LD_ADDR_VAR 0 1
39085: PUSH
39086: LD_INT 6
39088: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39089: LD_VAR 0 6
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: IN
39108: NOT
39109: PUSH
39110: LD_VAR 0 1
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 2
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: LD_INT 6
39129: PUSH
39130: LD_INT 36
39132: PUSH
39133: LD_INT 4
39135: PUSH
39136: LD_INT 5
39138: PUSH
39139: LD_INT 31
39141: PUSH
39142: LD_INT 32
39144: PUSH
39145: LD_INT 33
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: IN
39161: NOT
39162: PUSH
39163: LD_VAR 0 6
39167: PUSH
39168: LD_INT 1
39170: EQUAL
39171: AND
39172: OR
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 3
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: IN
39189: NOT
39190: PUSH
39191: LD_VAR 0 6
39195: PUSH
39196: LD_INT 2
39198: EQUAL
39199: AND
39200: OR
39201: IFFALSE 39211
// mode = 0 ;
39203: LD_ADDR_VAR 0 6
39207: PUSH
39208: LD_INT 0
39210: ST_TO_ADDR
// case mode of 0 :
39211: LD_VAR 0 6
39215: PUSH
39216: LD_INT 0
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 50677
39224: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39225: LD_ADDR_VAR 0 11
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39418: LD_ADDR_VAR 0 12
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 3
39575: NEG
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39614: LD_ADDR_VAR 0 13
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 3
39773: NEG
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: NEG
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39813: LD_ADDR_VAR 0 14
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: NEG
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 3
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 3
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 2
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40009: LD_ADDR_VAR 0 15
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40202: LD_ADDR_VAR 0 16
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 3
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40395: LD_ADDR_VAR 0 17
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: NEG
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40625: LD_ADDR_VAR 0 18
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40855: LD_ADDR_VAR 0 19
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 2
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41085: LD_ADDR_VAR 0 20
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 1
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41315: LD_ADDR_VAR 0 21
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41545: LD_ADDR_VAR 0 22
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41775: LD_ADDR_VAR 0 23
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 3
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42055: LD_ADDR_VAR 0 24
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42331: LD_ADDR_VAR 0 25
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42605: LD_ADDR_VAR 0 26
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 3
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 27
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: LD_INT 2
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43161: LD_ADDR_VAR 0 28
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 3
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 3
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43443: LD_ADDR_VAR 0 29
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 3
43687: NEG
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43722: LD_ADDR_VAR 0 30
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 2
43888: NEG
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 3
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44000: LD_ADDR_VAR 0 31
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 3
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 3
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 3
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44278: LD_ADDR_VAR 0 32
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44556: LD_ADDR_VAR 0 33
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44835: LD_ADDR_VAR 0 34
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 3
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45115: LD_ADDR_VAR 0 35
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45227: LD_ADDR_VAR 0 36
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45339: LD_ADDR_VAR 0 37
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45451: LD_ADDR_VAR 0 38
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45563: LD_ADDR_VAR 0 39
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45675: LD_ADDR_VAR 0 40
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45787: LD_ADDR_VAR 0 41
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: LD_INT 3
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 3
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 3
46096: NEG
46097: PUSH
46098: LD_INT 3
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46137: LD_ADDR_VAR 0 42
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 3
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: NEG
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46487: LD_ADDR_VAR 0 43
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 3
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 3
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 3
46783: NEG
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46835: LD_ADDR_VAR 0 44
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 3
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 3
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47185: LD_ADDR_VAR 0 45
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 3
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47535: LD_ADDR_VAR 0 46
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 3
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47883: LD_ADDR_VAR 0 47
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48034: LD_ADDR_VAR 0 48
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 1
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48181: LD_ADDR_VAR 0 49
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48325: LD_ADDR_VAR 0 50
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 2
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48469: LD_ADDR_VAR 0 51
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48616: LD_ADDR_VAR 0 52
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48767: LD_ADDR_VAR 0 53
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48997: LD_ADDR_VAR 0 54
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 2
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49227: LD_ADDR_VAR 0 55
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49457: LD_ADDR_VAR 0 56
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: LD_INT 2
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49687: LD_ADDR_VAR 0 57
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49917: LD_ADDR_VAR 0 58
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: LD_INT 2
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50147: LD_ADDR_VAR 0 59
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50235: LD_ADDR_VAR 0 60
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50323: LD_ADDR_VAR 0 61
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50411: LD_ADDR_VAR 0 62
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50499: LD_ADDR_VAR 0 63
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50587: LD_ADDR_VAR 0 64
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// end ; 1 :
50675: GO 56572
50677: LD_INT 1
50679: DOUBLE
50680: EQUAL
50681: IFTRUE 50685
50683: GO 53308
50685: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50686: LD_ADDR_VAR 0 11
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 3
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 3
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50730: LD_ADDR_VAR 0 12
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50771: LD_ADDR_VAR 0 13
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50811: LD_ADDR_VAR 0 14
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 3
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50852: LD_ADDR_VAR 0 15
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 3
50870: NEG
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50896: LD_ADDR_VAR 0 16
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50942: LD_ADDR_VAR 0 17
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 3
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50986: LD_ADDR_VAR 0 18
50990: PUSH
50991: LD_INT 2
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51027: LD_ADDR_VAR 0 19
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 3
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51067: LD_ADDR_VAR 0 20
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51108: LD_ADDR_VAR 0 21
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51152: LD_ADDR_VAR 0 22
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: NEG
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51198: LD_ADDR_VAR 0 23
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 3
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 4
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51242: LD_ADDR_VAR 0 24
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51283: LD_ADDR_VAR 0 25
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51323: LD_ADDR_VAR 0 26
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 3
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 4
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51364: LD_ADDR_VAR 0 27
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: LIST
51407: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51408: LD_ADDR_VAR 0 28
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 4
51439: NEG
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51454: LD_ADDR_VAR 0 29
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 4
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 4
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 5
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 5
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 4
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 6
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 6
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51609: LD_ADDR_VAR 0 30
51613: PUSH
51614: LD_INT 2
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 4
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 5
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 5
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 5
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 6
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 6
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51752: LD_ADDR_VAR 0 31
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: LD_INT 4
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 5
51829: PUSH
51830: LD_INT 5
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 4
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 6
51849: PUSH
51850: LD_INT 5
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 6
51859: PUSH
51860: LD_INT 6
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 5
51869: PUSH
51870: LD_INT 6
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51891: LD_ADDR_VAR 0 32
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 5
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 4
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 6
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 6
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52034: LD_ADDR_VAR 0 33
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 1
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: NEG
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 4
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 5
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 5
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 5
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 6
52154: NEG
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 6
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52189: LD_ADDR_VAR 0 34
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 3
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 4
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 4
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 4
52256: NEG
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 4
52268: NEG
52269: PUSH
52270: LD_INT 5
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 5
52280: NEG
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 5
52292: NEG
52293: PUSH
52294: LD_INT 5
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 5
52304: NEG
52305: PUSH
52306: LD_INT 6
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 6
52316: NEG
52317: PUSH
52318: LD_INT 5
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 6
52328: NEG
52329: PUSH
52330: LD_INT 6
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52352: LD_ADDR_VAR 0 41
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52396: LD_ADDR_VAR 0 42
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52437: LD_ADDR_VAR 0 43
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52477: LD_ADDR_VAR 0 44
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52518: LD_ADDR_VAR 0 45
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52562: LD_ADDR_VAR 0 46
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52608: LD_ADDR_VAR 0 47
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52641: LD_ADDR_VAR 0 48
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52672: LD_ADDR_VAR 0 49
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52701: LD_ADDR_VAR 0 50
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52730: LD_ADDR_VAR 0 51
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52761: LD_ADDR_VAR 0 52
52765: PUSH
52766: LD_INT 3
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52794: LD_ADDR_VAR 0 53
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52838: LD_ADDR_VAR 0 54
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52879: LD_ADDR_VAR 0 55
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52919: LD_ADDR_VAR 0 56
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: LIST
52959: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52960: LD_ADDR_VAR 0 57
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 3
52978: NEG
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53004: LD_ADDR_VAR 0 58
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53050: LD_ADDR_VAR 0 59
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53094: LD_ADDR_VAR 0 60
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53135: LD_ADDR_VAR 0 61
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: LIST
53174: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53175: LD_ADDR_VAR 0 62
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53216: LD_ADDR_VAR 0 63
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53260: LD_ADDR_VAR 0 64
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// end ; 2 :
53306: GO 56572
53308: LD_INT 2
53310: DOUBLE
53311: EQUAL
53312: IFTRUE 53316
53314: GO 56571
53316: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53317: LD_ADDR_VAR 0 29
53321: PUSH
53322: LD_INT 4
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 4
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 5
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 5
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 4
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 3
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 4
53447: PUSH
53448: LD_INT 4
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 4
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 4
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 4
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 5
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 5
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 4
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 5
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 3
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 4
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 4
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: LD_INT 4
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: LD_INT 5
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: LD_INT 3
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 4
53750: NEG
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 5
53762: NEG
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: LD_INT 5
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: LD_INT 5
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 5
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53855: LD_ADDR_VAR 0 30
53859: PUSH
53860: LD_INT 4
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 5
53882: PUSH
53883: LD_INT 4
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 5
53892: PUSH
53893: LD_INT 5
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 5
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: LD_INT 4
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 4
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 4
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 3
54068: NEG
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 3
54079: NEG
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 4
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 5
54101: NEG
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 5
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 5
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 4
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 4
54207: NEG
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: LD_INT 4
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 4
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 4
54243: NEG
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: LD_INT 4
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 5
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 4
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 5
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 5
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54402: LD_ADDR_VAR 0 31
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 4
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 5
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 5
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 4
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 5
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 3
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 4
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: NEG
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 4
54604: NEG
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 4
54616: NEG
54617: PUSH
54618: LD_INT 5
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: LD_INT 4
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 4
54652: NEG
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 5
54664: NEG
54665: PUSH
54666: LD_INT 4
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 5
54676: NEG
54677: PUSH
54678: LD_INT 5
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: LD_INT 5
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 5
54700: NEG
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 3
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: LD_INT 4
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 4
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 4
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 4
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: LD_INT 2
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54952: LD_ADDR_VAR 0 32
54956: PUSH
54957: LD_INT 4
54959: NEG
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 4
54970: NEG
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 5
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 5
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 5
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 3
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: LD_INT 4
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 4
55121: NEG
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 4
55133: NEG
55134: PUSH
55135: LD_INT 4
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 4
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 5
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 4
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 3
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 4
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 5
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: LD_INT 5
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 4
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 4
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 4
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 5
55384: PUSH
55385: LD_INT 4
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 5
55394: PUSH
55395: LD_INT 5
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 4
55404: PUSH
55405: LD_INT 5
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: LD_INT 4
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 5
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 5
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55499: LD_ADDR_VAR 0 33
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: LD_INT 4
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: LD_INT 5
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: LD_INT 4
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: LD_INT 3
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 4
55554: NEG
55555: PUSH
55556: LD_INT 3
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 5
55566: NEG
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 5
55578: NEG
55579: PUSH
55580: LD_INT 5
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: NEG
55591: PUSH
55592: LD_INT 5
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 5
55602: NEG
55603: PUSH
55604: LD_INT 3
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 4
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 4
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 4
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 4
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 5
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 5
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 4
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 4
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 4
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 5
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: NEG
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56037: LD_ADDR_VAR 0 34
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 4
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 5
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 4
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 5
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 4
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 4
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: LD_INT 4
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 5
56269: PUSH
56270: LD_INT 5
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 4
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: LD_INT 4
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 5
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 4
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 4
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 5
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 5
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 5
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 3
56513: NEG
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// end ; end ;
56569: GO 56572
56571: POP
// case btype of b_depot , b_warehouse :
56572: LD_VAR 0 1
56576: PUSH
56577: LD_INT 0
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56591
56583: LD_INT 1
56585: DOUBLE
56586: EQUAL
56587: IFTRUE 56591
56589: GO 56792
56591: POP
// case nation of nation_american :
56592: LD_VAR 0 5
56596: PUSH
56597: LD_INT 1
56599: DOUBLE
56600: EQUAL
56601: IFTRUE 56605
56603: GO 56661
56605: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56606: LD_ADDR_VAR 0 9
56610: PUSH
56611: LD_VAR 0 11
56615: PUSH
56616: LD_VAR 0 12
56620: PUSH
56621: LD_VAR 0 13
56625: PUSH
56626: LD_VAR 0 14
56630: PUSH
56631: LD_VAR 0 15
56635: PUSH
56636: LD_VAR 0 16
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: PUSH
56649: LD_VAR 0 4
56653: PUSH
56654: LD_INT 1
56656: PLUS
56657: ARRAY
56658: ST_TO_ADDR
56659: GO 56790
56661: LD_INT 2
56663: DOUBLE
56664: EQUAL
56665: IFTRUE 56669
56667: GO 56725
56669: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56670: LD_ADDR_VAR 0 9
56674: PUSH
56675: LD_VAR 0 17
56679: PUSH
56680: LD_VAR 0 18
56684: PUSH
56685: LD_VAR 0 19
56689: PUSH
56690: LD_VAR 0 20
56694: PUSH
56695: LD_VAR 0 21
56699: PUSH
56700: LD_VAR 0 22
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: PUSH
56713: LD_VAR 0 4
56717: PUSH
56718: LD_INT 1
56720: PLUS
56721: ARRAY
56722: ST_TO_ADDR
56723: GO 56790
56725: LD_INT 3
56727: DOUBLE
56728: EQUAL
56729: IFTRUE 56733
56731: GO 56789
56733: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56734: LD_ADDR_VAR 0 9
56738: PUSH
56739: LD_VAR 0 23
56743: PUSH
56744: LD_VAR 0 24
56748: PUSH
56749: LD_VAR 0 25
56753: PUSH
56754: LD_VAR 0 26
56758: PUSH
56759: LD_VAR 0 27
56763: PUSH
56764: LD_VAR 0 28
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: PUSH
56777: LD_VAR 0 4
56781: PUSH
56782: LD_INT 1
56784: PLUS
56785: ARRAY
56786: ST_TO_ADDR
56787: GO 56790
56789: POP
56790: GO 57345
56792: LD_INT 2
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56806
56798: LD_INT 3
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56806
56804: GO 56862
56806: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56807: LD_ADDR_VAR 0 9
56811: PUSH
56812: LD_VAR 0 29
56816: PUSH
56817: LD_VAR 0 30
56821: PUSH
56822: LD_VAR 0 31
56826: PUSH
56827: LD_VAR 0 32
56831: PUSH
56832: LD_VAR 0 33
56836: PUSH
56837: LD_VAR 0 34
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: LD_VAR 0 4
56854: PUSH
56855: LD_INT 1
56857: PLUS
56858: ARRAY
56859: ST_TO_ADDR
56860: GO 57345
56862: LD_INT 16
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56924
56868: LD_INT 17
56870: DOUBLE
56871: EQUAL
56872: IFTRUE 56924
56874: LD_INT 18
56876: DOUBLE
56877: EQUAL
56878: IFTRUE 56924
56880: LD_INT 19
56882: DOUBLE
56883: EQUAL
56884: IFTRUE 56924
56886: LD_INT 22
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56924
56892: LD_INT 20
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56924
56898: LD_INT 21
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56924
56904: LD_INT 23
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56924
56910: LD_INT 24
56912: DOUBLE
56913: EQUAL
56914: IFTRUE 56924
56916: LD_INT 25
56918: DOUBLE
56919: EQUAL
56920: IFTRUE 56924
56922: GO 56980
56924: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56925: LD_ADDR_VAR 0 9
56929: PUSH
56930: LD_VAR 0 35
56934: PUSH
56935: LD_VAR 0 36
56939: PUSH
56940: LD_VAR 0 37
56944: PUSH
56945: LD_VAR 0 38
56949: PUSH
56950: LD_VAR 0 39
56954: PUSH
56955: LD_VAR 0 40
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: PUSH
56968: LD_VAR 0 4
56972: PUSH
56973: LD_INT 1
56975: PLUS
56976: ARRAY
56977: ST_TO_ADDR
56978: GO 57345
56980: LD_INT 6
56982: DOUBLE
56983: EQUAL
56984: IFTRUE 57036
56986: LD_INT 7
56988: DOUBLE
56989: EQUAL
56990: IFTRUE 57036
56992: LD_INT 8
56994: DOUBLE
56995: EQUAL
56996: IFTRUE 57036
56998: LD_INT 13
57000: DOUBLE
57001: EQUAL
57002: IFTRUE 57036
57004: LD_INT 12
57006: DOUBLE
57007: EQUAL
57008: IFTRUE 57036
57010: LD_INT 15
57012: DOUBLE
57013: EQUAL
57014: IFTRUE 57036
57016: LD_INT 11
57018: DOUBLE
57019: EQUAL
57020: IFTRUE 57036
57022: LD_INT 14
57024: DOUBLE
57025: EQUAL
57026: IFTRUE 57036
57028: LD_INT 10
57030: DOUBLE
57031: EQUAL
57032: IFTRUE 57036
57034: GO 57092
57036: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57037: LD_ADDR_VAR 0 9
57041: PUSH
57042: LD_VAR 0 41
57046: PUSH
57047: LD_VAR 0 42
57051: PUSH
57052: LD_VAR 0 43
57056: PUSH
57057: LD_VAR 0 44
57061: PUSH
57062: LD_VAR 0 45
57066: PUSH
57067: LD_VAR 0 46
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: PUSH
57080: LD_VAR 0 4
57084: PUSH
57085: LD_INT 1
57087: PLUS
57088: ARRAY
57089: ST_TO_ADDR
57090: GO 57345
57092: LD_INT 36
57094: DOUBLE
57095: EQUAL
57096: IFTRUE 57100
57098: GO 57156
57100: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57101: LD_ADDR_VAR 0 9
57105: PUSH
57106: LD_VAR 0 47
57110: PUSH
57111: LD_VAR 0 48
57115: PUSH
57116: LD_VAR 0 49
57120: PUSH
57121: LD_VAR 0 50
57125: PUSH
57126: LD_VAR 0 51
57130: PUSH
57131: LD_VAR 0 52
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: PUSH
57144: LD_VAR 0 4
57148: PUSH
57149: LD_INT 1
57151: PLUS
57152: ARRAY
57153: ST_TO_ADDR
57154: GO 57345
57156: LD_INT 4
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57182
57162: LD_INT 5
57164: DOUBLE
57165: EQUAL
57166: IFTRUE 57182
57168: LD_INT 34
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57182
57174: LD_INT 37
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57182
57180: GO 57238
57182: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57183: LD_ADDR_VAR 0 9
57187: PUSH
57188: LD_VAR 0 53
57192: PUSH
57193: LD_VAR 0 54
57197: PUSH
57198: LD_VAR 0 55
57202: PUSH
57203: LD_VAR 0 56
57207: PUSH
57208: LD_VAR 0 57
57212: PUSH
57213: LD_VAR 0 58
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: PUSH
57226: LD_VAR 0 4
57230: PUSH
57231: LD_INT 1
57233: PLUS
57234: ARRAY
57235: ST_TO_ADDR
57236: GO 57345
57238: LD_INT 31
57240: DOUBLE
57241: EQUAL
57242: IFTRUE 57288
57244: LD_INT 32
57246: DOUBLE
57247: EQUAL
57248: IFTRUE 57288
57250: LD_INT 33
57252: DOUBLE
57253: EQUAL
57254: IFTRUE 57288
57256: LD_INT 27
57258: DOUBLE
57259: EQUAL
57260: IFTRUE 57288
57262: LD_INT 26
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57288
57268: LD_INT 28
57270: DOUBLE
57271: EQUAL
57272: IFTRUE 57288
57274: LD_INT 29
57276: DOUBLE
57277: EQUAL
57278: IFTRUE 57288
57280: LD_INT 30
57282: DOUBLE
57283: EQUAL
57284: IFTRUE 57288
57286: GO 57344
57288: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57289: LD_ADDR_VAR 0 9
57293: PUSH
57294: LD_VAR 0 59
57298: PUSH
57299: LD_VAR 0 60
57303: PUSH
57304: LD_VAR 0 61
57308: PUSH
57309: LD_VAR 0 62
57313: PUSH
57314: LD_VAR 0 63
57318: PUSH
57319: LD_VAR 0 64
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: PUSH
57332: LD_VAR 0 4
57336: PUSH
57337: LD_INT 1
57339: PLUS
57340: ARRAY
57341: ST_TO_ADDR
57342: GO 57345
57344: POP
// temp_list2 = [ ] ;
57345: LD_ADDR_VAR 0 10
57349: PUSH
57350: EMPTY
57351: ST_TO_ADDR
// for i in temp_list do
57352: LD_ADDR_VAR 0 8
57356: PUSH
57357: LD_VAR 0 9
57361: PUSH
57362: FOR_IN
57363: IFFALSE 57415
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57365: LD_ADDR_VAR 0 10
57369: PUSH
57370: LD_VAR 0 10
57374: PUSH
57375: LD_VAR 0 8
57379: PUSH
57380: LD_INT 1
57382: ARRAY
57383: PUSH
57384: LD_VAR 0 2
57388: PLUS
57389: PUSH
57390: LD_VAR 0 8
57394: PUSH
57395: LD_INT 2
57397: ARRAY
57398: PUSH
57399: LD_VAR 0 3
57403: PLUS
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: EMPTY
57410: LIST
57411: ADD
57412: ST_TO_ADDR
57413: GO 57362
57415: POP
57416: POP
// result = temp_list2 ;
57417: LD_ADDR_VAR 0 7
57421: PUSH
57422: LD_VAR 0 10
57426: ST_TO_ADDR
// end ;
57427: LD_VAR 0 7
57431: RET
// export function EnemyInRange ( unit , dist ) ; begin
57432: LD_INT 0
57434: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57435: LD_ADDR_VAR 0 3
57439: PUSH
57440: LD_VAR 0 1
57444: PPUSH
57445: CALL_OW 255
57449: PPUSH
57450: LD_VAR 0 1
57454: PPUSH
57455: CALL_OW 250
57459: PPUSH
57460: LD_VAR 0 1
57464: PPUSH
57465: CALL_OW 251
57469: PPUSH
57470: LD_VAR 0 2
57474: PPUSH
57475: CALL 30834 0 4
57479: PUSH
57480: LD_INT 4
57482: ARRAY
57483: ST_TO_ADDR
// end ;
57484: LD_VAR 0 3
57488: RET
// export function PlayerSeeMe ( unit ) ; begin
57489: LD_INT 0
57491: PPUSH
// result := See ( your_side , unit ) ;
57492: LD_ADDR_VAR 0 2
57496: PUSH
57497: LD_OWVAR 2
57501: PPUSH
57502: LD_VAR 0 1
57506: PPUSH
57507: CALL_OW 292
57511: ST_TO_ADDR
// end ;
57512: LD_VAR 0 2
57516: RET
// export function ReverseDir ( unit ) ; begin
57517: LD_INT 0
57519: PPUSH
// if not unit then
57520: LD_VAR 0 1
57524: NOT
57525: IFFALSE 57529
// exit ;
57527: GO 57552
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57529: LD_ADDR_VAR 0 2
57533: PUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL_OW 254
57543: PUSH
57544: LD_INT 3
57546: PLUS
57547: PUSH
57548: LD_INT 6
57550: MOD
57551: ST_TO_ADDR
// end ;
57552: LD_VAR 0 2
57556: RET
// export function ReverseArray ( array ) ; var i ; begin
57557: LD_INT 0
57559: PPUSH
57560: PPUSH
// if not array then
57561: LD_VAR 0 1
57565: NOT
57566: IFFALSE 57570
// exit ;
57568: GO 57625
// result := [ ] ;
57570: LD_ADDR_VAR 0 2
57574: PUSH
57575: EMPTY
57576: ST_TO_ADDR
// for i := array downto 1 do
57577: LD_ADDR_VAR 0 3
57581: PUSH
57582: DOUBLE
57583: LD_VAR 0 1
57587: INC
57588: ST_TO_ADDR
57589: LD_INT 1
57591: PUSH
57592: FOR_DOWNTO
57593: IFFALSE 57623
// result := Join ( result , array [ i ] ) ;
57595: LD_ADDR_VAR 0 2
57599: PUSH
57600: LD_VAR 0 2
57604: PPUSH
57605: LD_VAR 0 1
57609: PUSH
57610: LD_VAR 0 3
57614: ARRAY
57615: PPUSH
57616: CALL 62269 0 2
57620: ST_TO_ADDR
57621: GO 57592
57623: POP
57624: POP
// end ;
57625: LD_VAR 0 2
57629: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57630: LD_INT 0
57632: PPUSH
57633: PPUSH
57634: PPUSH
57635: PPUSH
57636: PPUSH
57637: PPUSH
// if not unit or not hexes then
57638: LD_VAR 0 1
57642: NOT
57643: PUSH
57644: LD_VAR 0 2
57648: NOT
57649: OR
57650: IFFALSE 57654
// exit ;
57652: GO 57777
// dist := 9999 ;
57654: LD_ADDR_VAR 0 5
57658: PUSH
57659: LD_INT 9999
57661: ST_TO_ADDR
// for i = 1 to hexes do
57662: LD_ADDR_VAR 0 4
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_VAR 0 2
57676: PUSH
57677: FOR_TO
57678: IFFALSE 57765
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57680: LD_ADDR_VAR 0 6
57684: PUSH
57685: LD_VAR 0 1
57689: PPUSH
57690: LD_VAR 0 2
57694: PUSH
57695: LD_VAR 0 4
57699: ARRAY
57700: PUSH
57701: LD_INT 1
57703: ARRAY
57704: PPUSH
57705: LD_VAR 0 2
57709: PUSH
57710: LD_VAR 0 4
57714: ARRAY
57715: PUSH
57716: LD_INT 2
57718: ARRAY
57719: PPUSH
57720: CALL_OW 297
57724: ST_TO_ADDR
// if tdist < dist then
57725: LD_VAR 0 6
57729: PUSH
57730: LD_VAR 0 5
57734: LESS
57735: IFFALSE 57763
// begin hex := hexes [ i ] ;
57737: LD_ADDR_VAR 0 8
57741: PUSH
57742: LD_VAR 0 2
57746: PUSH
57747: LD_VAR 0 4
57751: ARRAY
57752: ST_TO_ADDR
// dist := tdist ;
57753: LD_ADDR_VAR 0 5
57757: PUSH
57758: LD_VAR 0 6
57762: ST_TO_ADDR
// end ; end ;
57763: GO 57677
57765: POP
57766: POP
// result := hex ;
57767: LD_ADDR_VAR 0 3
57771: PUSH
57772: LD_VAR 0 8
57776: ST_TO_ADDR
// end ;
57777: LD_VAR 0 3
57781: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57782: LD_INT 0
57784: PPUSH
57785: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57786: LD_VAR 0 1
57790: NOT
57791: PUSH
57792: LD_VAR 0 1
57796: PUSH
57797: LD_INT 21
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 23
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PPUSH
57821: CALL_OW 69
57825: IN
57826: NOT
57827: OR
57828: IFFALSE 57832
// exit ;
57830: GO 57879
// for i = 1 to 3 do
57832: LD_ADDR_VAR 0 3
57836: PUSH
57837: DOUBLE
57838: LD_INT 1
57840: DEC
57841: ST_TO_ADDR
57842: LD_INT 3
57844: PUSH
57845: FOR_TO
57846: IFFALSE 57877
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57848: LD_VAR 0 1
57852: PPUSH
57853: CALL_OW 250
57857: PPUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 251
57867: PPUSH
57868: LD_INT 1
57870: PPUSH
57871: CALL_OW 453
57875: GO 57845
57877: POP
57878: POP
// end ;
57879: LD_VAR 0 2
57883: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57884: LD_INT 0
57886: PPUSH
57887: PPUSH
57888: PPUSH
57889: PPUSH
57890: PPUSH
57891: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57892: LD_VAR 0 1
57896: NOT
57897: PUSH
57898: LD_VAR 0 2
57902: NOT
57903: OR
57904: PUSH
57905: LD_VAR 0 1
57909: PPUSH
57910: CALL_OW 314
57914: OR
57915: IFFALSE 57919
// exit ;
57917: GO 58386
// if GetLives ( i ) < 250 then
57919: LD_VAR 0 4
57923: PPUSH
57924: CALL_OW 256
57928: PUSH
57929: LD_INT 250
57931: LESS
57932: IFFALSE 57945
// begin ComAutodestruct ( i ) ;
57934: LD_VAR 0 4
57938: PPUSH
57939: CALL 57782 0 1
// exit ;
57943: GO 58386
// end ; x := GetX ( enemy_unit ) ;
57945: LD_ADDR_VAR 0 7
57949: PUSH
57950: LD_VAR 0 2
57954: PPUSH
57955: CALL_OW 250
57959: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57960: LD_ADDR_VAR 0 8
57964: PUSH
57965: LD_VAR 0 2
57969: PPUSH
57970: CALL_OW 251
57974: ST_TO_ADDR
// if not x or not y then
57975: LD_VAR 0 7
57979: NOT
57980: PUSH
57981: LD_VAR 0 8
57985: NOT
57986: OR
57987: IFFALSE 57991
// exit ;
57989: GO 58386
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57991: LD_ADDR_VAR 0 6
57995: PUSH
57996: LD_VAR 0 7
58000: PPUSH
58001: LD_INT 0
58003: PPUSH
58004: LD_INT 4
58006: PPUSH
58007: CALL_OW 272
58011: PUSH
58012: LD_VAR 0 8
58016: PPUSH
58017: LD_INT 0
58019: PPUSH
58020: LD_INT 4
58022: PPUSH
58023: CALL_OW 273
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_VAR 0 7
58036: PPUSH
58037: LD_INT 1
58039: PPUSH
58040: LD_INT 4
58042: PPUSH
58043: CALL_OW 272
58047: PUSH
58048: LD_VAR 0 8
58052: PPUSH
58053: LD_INT 1
58055: PPUSH
58056: LD_INT 4
58058: PPUSH
58059: CALL_OW 273
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 7
58072: PPUSH
58073: LD_INT 2
58075: PPUSH
58076: LD_INT 4
58078: PPUSH
58079: CALL_OW 272
58083: PUSH
58084: LD_VAR 0 8
58088: PPUSH
58089: LD_INT 2
58091: PPUSH
58092: LD_INT 4
58094: PPUSH
58095: CALL_OW 273
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_VAR 0 7
58108: PPUSH
58109: LD_INT 3
58111: PPUSH
58112: LD_INT 4
58114: PPUSH
58115: CALL_OW 272
58119: PUSH
58120: LD_VAR 0 8
58124: PPUSH
58125: LD_INT 3
58127: PPUSH
58128: LD_INT 4
58130: PPUSH
58131: CALL_OW 273
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_VAR 0 7
58144: PPUSH
58145: LD_INT 4
58147: PPUSH
58148: LD_INT 4
58150: PPUSH
58151: CALL_OW 272
58155: PUSH
58156: LD_VAR 0 8
58160: PPUSH
58161: LD_INT 4
58163: PPUSH
58164: LD_INT 4
58166: PPUSH
58167: CALL_OW 273
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_VAR 0 7
58180: PPUSH
58181: LD_INT 5
58183: PPUSH
58184: LD_INT 4
58186: PPUSH
58187: CALL_OW 272
58191: PUSH
58192: LD_VAR 0 8
58196: PPUSH
58197: LD_INT 5
58199: PPUSH
58200: LD_INT 4
58202: PPUSH
58203: CALL_OW 273
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// for i = tmp downto 1 do
58220: LD_ADDR_VAR 0 4
58224: PUSH
58225: DOUBLE
58226: LD_VAR 0 6
58230: INC
58231: ST_TO_ADDR
58232: LD_INT 1
58234: PUSH
58235: FOR_DOWNTO
58236: IFFALSE 58337
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58238: LD_VAR 0 6
58242: PUSH
58243: LD_VAR 0 4
58247: ARRAY
58248: PUSH
58249: LD_INT 1
58251: ARRAY
58252: PPUSH
58253: LD_VAR 0 6
58257: PUSH
58258: LD_VAR 0 4
58262: ARRAY
58263: PUSH
58264: LD_INT 2
58266: ARRAY
58267: PPUSH
58268: CALL_OW 488
58272: NOT
58273: PUSH
58274: LD_VAR 0 6
58278: PUSH
58279: LD_VAR 0 4
58283: ARRAY
58284: PUSH
58285: LD_INT 1
58287: ARRAY
58288: PPUSH
58289: LD_VAR 0 6
58293: PUSH
58294: LD_VAR 0 4
58298: ARRAY
58299: PUSH
58300: LD_INT 2
58302: ARRAY
58303: PPUSH
58304: CALL_OW 428
58308: PUSH
58309: LD_INT 0
58311: NONEQUAL
58312: OR
58313: IFFALSE 58335
// tmp := Delete ( tmp , i ) ;
58315: LD_ADDR_VAR 0 6
58319: PUSH
58320: LD_VAR 0 6
58324: PPUSH
58325: LD_VAR 0 4
58329: PPUSH
58330: CALL_OW 3
58334: ST_TO_ADDR
58335: GO 58235
58337: POP
58338: POP
// j := GetClosestHex ( unit , tmp ) ;
58339: LD_ADDR_VAR 0 5
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: LD_VAR 0 6
58353: PPUSH
58354: CALL 57630 0 2
58358: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58359: LD_VAR 0 1
58363: PPUSH
58364: LD_VAR 0 5
58368: PUSH
58369: LD_INT 1
58371: ARRAY
58372: PPUSH
58373: LD_VAR 0 5
58377: PUSH
58378: LD_INT 2
58380: ARRAY
58381: PPUSH
58382: CALL_OW 111
// end ;
58386: LD_VAR 0 3
58390: RET
// export function PrepareApemanSoldier ( ) ; begin
58391: LD_INT 0
58393: PPUSH
// uc_nation := 0 ;
58394: LD_ADDR_OWVAR 21
58398: PUSH
58399: LD_INT 0
58401: ST_TO_ADDR
// hc_sex := sex_male ;
58402: LD_ADDR_OWVAR 27
58406: PUSH
58407: LD_INT 1
58409: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58410: LD_ADDR_OWVAR 28
58414: PUSH
58415: LD_INT 15
58417: ST_TO_ADDR
// hc_gallery :=  ;
58418: LD_ADDR_OWVAR 33
58422: PUSH
58423: LD_STRING 
58425: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58426: LD_ADDR_OWVAR 31
58430: PUSH
58431: LD_INT 0
58433: PPUSH
58434: LD_INT 3
58436: PPUSH
58437: CALL_OW 12
58441: PUSH
58442: LD_INT 0
58444: PPUSH
58445: LD_INT 3
58447: PPUSH
58448: CALL_OW 12
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 1
58469: RET
// export function PrepareApemanEngineer ( ) ; begin
58470: LD_INT 0
58472: PPUSH
// uc_nation := 0 ;
58473: LD_ADDR_OWVAR 21
58477: PUSH
58478: LD_INT 0
58480: ST_TO_ADDR
// hc_sex := sex_male ;
58481: LD_ADDR_OWVAR 27
58485: PUSH
58486: LD_INT 1
58488: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58489: LD_ADDR_OWVAR 28
58493: PUSH
58494: LD_INT 16
58496: ST_TO_ADDR
// hc_gallery :=  ;
58497: LD_ADDR_OWVAR 33
58501: PUSH
58502: LD_STRING 
58504: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58505: LD_ADDR_OWVAR 31
58509: PUSH
58510: LD_INT 0
58512: PPUSH
58513: LD_INT 3
58515: PPUSH
58516: CALL_OW 12
58520: PUSH
58521: LD_INT 0
58523: PPUSH
58524: LD_INT 3
58526: PPUSH
58527: CALL_OW 12
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
// end ;
58544: LD_VAR 0 1
58548: RET
// export function PrepareApeman ( agressivity ) ; begin
58549: LD_INT 0
58551: PPUSH
// uc_side := 0 ;
58552: LD_ADDR_OWVAR 20
58556: PUSH
58557: LD_INT 0
58559: ST_TO_ADDR
// uc_nation := 0 ;
58560: LD_ADDR_OWVAR 21
58564: PUSH
58565: LD_INT 0
58567: ST_TO_ADDR
// hc_sex := sex_male ;
58568: LD_ADDR_OWVAR 27
58572: PUSH
58573: LD_INT 1
58575: ST_TO_ADDR
// hc_class := class_apeman ;
58576: LD_ADDR_OWVAR 28
58580: PUSH
58581: LD_INT 12
58583: ST_TO_ADDR
// hc_gallery :=  ;
58584: LD_ADDR_OWVAR 33
58588: PUSH
58589: LD_STRING 
58591: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58592: LD_ADDR_OWVAR 35
58596: PUSH
58597: LD_VAR 0 1
58601: NEG
58602: PPUSH
58603: LD_VAR 0 1
58607: PPUSH
58608: CALL_OW 12
58612: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58613: LD_ADDR_OWVAR 31
58617: PUSH
58618: LD_INT 0
58620: PPUSH
58621: LD_INT 3
58623: PPUSH
58624: CALL_OW 12
58628: PUSH
58629: LD_INT 0
58631: PPUSH
58632: LD_INT 3
58634: PPUSH
58635: CALL_OW 12
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// end ;
58652: LD_VAR 0 2
58656: RET
// export function PrepareTiger ( agressivity ) ; begin
58657: LD_INT 0
58659: PPUSH
// uc_side := 0 ;
58660: LD_ADDR_OWVAR 20
58664: PUSH
58665: LD_INT 0
58667: ST_TO_ADDR
// uc_nation := 0 ;
58668: LD_ADDR_OWVAR 21
58672: PUSH
58673: LD_INT 0
58675: ST_TO_ADDR
// hc_class := class_tiger ;
58676: LD_ADDR_OWVAR 28
58680: PUSH
58681: LD_INT 14
58683: ST_TO_ADDR
// hc_gallery :=  ;
58684: LD_ADDR_OWVAR 33
58688: PUSH
58689: LD_STRING 
58691: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58692: LD_ADDR_OWVAR 35
58696: PUSH
58697: LD_VAR 0 1
58701: NEG
58702: PPUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL_OW 12
58712: ST_TO_ADDR
// end ;
58713: LD_VAR 0 2
58717: RET
// export function PrepareEnchidna ( ) ; begin
58718: LD_INT 0
58720: PPUSH
// uc_side := 0 ;
58721: LD_ADDR_OWVAR 20
58725: PUSH
58726: LD_INT 0
58728: ST_TO_ADDR
// uc_nation := 0 ;
58729: LD_ADDR_OWVAR 21
58733: PUSH
58734: LD_INT 0
58736: ST_TO_ADDR
// hc_class := class_baggie ;
58737: LD_ADDR_OWVAR 28
58741: PUSH
58742: LD_INT 13
58744: ST_TO_ADDR
// hc_gallery :=  ;
58745: LD_ADDR_OWVAR 33
58749: PUSH
58750: LD_STRING 
58752: ST_TO_ADDR
// end ;
58753: LD_VAR 0 1
58757: RET
// export function PrepareFrog ( ) ; begin
58758: LD_INT 0
58760: PPUSH
// uc_side := 0 ;
58761: LD_ADDR_OWVAR 20
58765: PUSH
58766: LD_INT 0
58768: ST_TO_ADDR
// uc_nation := 0 ;
58769: LD_ADDR_OWVAR 21
58773: PUSH
58774: LD_INT 0
58776: ST_TO_ADDR
// hc_class := class_frog ;
58777: LD_ADDR_OWVAR 28
58781: PUSH
58782: LD_INT 19
58784: ST_TO_ADDR
// hc_gallery :=  ;
58785: LD_ADDR_OWVAR 33
58789: PUSH
58790: LD_STRING 
58792: ST_TO_ADDR
// end ;
58793: LD_VAR 0 1
58797: RET
// export function PrepareFish ( ) ; begin
58798: LD_INT 0
58800: PPUSH
// uc_side := 0 ;
58801: LD_ADDR_OWVAR 20
58805: PUSH
58806: LD_INT 0
58808: ST_TO_ADDR
// uc_nation := 0 ;
58809: LD_ADDR_OWVAR 21
58813: PUSH
58814: LD_INT 0
58816: ST_TO_ADDR
// hc_class := class_fish ;
58817: LD_ADDR_OWVAR 28
58821: PUSH
58822: LD_INT 20
58824: ST_TO_ADDR
// hc_gallery :=  ;
58825: LD_ADDR_OWVAR 33
58829: PUSH
58830: LD_STRING 
58832: ST_TO_ADDR
// end ;
58833: LD_VAR 0 1
58837: RET
// export function PrepareBird ( ) ; begin
58838: LD_INT 0
58840: PPUSH
// uc_side := 0 ;
58841: LD_ADDR_OWVAR 20
58845: PUSH
58846: LD_INT 0
58848: ST_TO_ADDR
// uc_nation := 0 ;
58849: LD_ADDR_OWVAR 21
58853: PUSH
58854: LD_INT 0
58856: ST_TO_ADDR
// hc_class := class_phororhacos ;
58857: LD_ADDR_OWVAR 28
58861: PUSH
58862: LD_INT 18
58864: ST_TO_ADDR
// hc_gallery :=  ;
58865: LD_ADDR_OWVAR 33
58869: PUSH
58870: LD_STRING 
58872: ST_TO_ADDR
// end ;
58873: LD_VAR 0 1
58877: RET
// export function PrepareHorse ( ) ; begin
58878: LD_INT 0
58880: PPUSH
// uc_side := 0 ;
58881: LD_ADDR_OWVAR 20
58885: PUSH
58886: LD_INT 0
58888: ST_TO_ADDR
// uc_nation := 0 ;
58889: LD_ADDR_OWVAR 21
58893: PUSH
58894: LD_INT 0
58896: ST_TO_ADDR
// hc_class := class_horse ;
58897: LD_ADDR_OWVAR 28
58901: PUSH
58902: LD_INT 21
58904: ST_TO_ADDR
// hc_gallery :=  ;
58905: LD_ADDR_OWVAR 33
58909: PUSH
58910: LD_STRING 
58912: ST_TO_ADDR
// end ;
58913: LD_VAR 0 1
58917: RET
// export function PrepareMastodont ( ) ; begin
58918: LD_INT 0
58920: PPUSH
// uc_side := 0 ;
58921: LD_ADDR_OWVAR 20
58925: PUSH
58926: LD_INT 0
58928: ST_TO_ADDR
// uc_nation := 0 ;
58929: LD_ADDR_OWVAR 21
58933: PUSH
58934: LD_INT 0
58936: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58937: LD_ADDR_OWVAR 37
58941: PUSH
58942: LD_INT 31
58944: ST_TO_ADDR
// vc_control := control_rider ;
58945: LD_ADDR_OWVAR 38
58949: PUSH
58950: LD_INT 4
58952: ST_TO_ADDR
// end ;
58953: LD_VAR 0 1
58957: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58958: LD_INT 0
58960: PPUSH
58961: PPUSH
58962: PPUSH
// uc_side = 0 ;
58963: LD_ADDR_OWVAR 20
58967: PUSH
58968: LD_INT 0
58970: ST_TO_ADDR
// uc_nation = 0 ;
58971: LD_ADDR_OWVAR 21
58975: PUSH
58976: LD_INT 0
58978: ST_TO_ADDR
// InitHc_All ( ) ;
58979: CALL_OW 584
// InitVc ;
58983: CALL_OW 20
// if mastodonts then
58987: LD_VAR 0 6
58991: IFFALSE 59058
// for i = 1 to mastodonts do
58993: LD_ADDR_VAR 0 11
58997: PUSH
58998: DOUBLE
58999: LD_INT 1
59001: DEC
59002: ST_TO_ADDR
59003: LD_VAR 0 6
59007: PUSH
59008: FOR_TO
59009: IFFALSE 59056
// begin vc_chassis := 31 ;
59011: LD_ADDR_OWVAR 37
59015: PUSH
59016: LD_INT 31
59018: ST_TO_ADDR
// vc_control := control_rider ;
59019: LD_ADDR_OWVAR 38
59023: PUSH
59024: LD_INT 4
59026: ST_TO_ADDR
// animal := CreateVehicle ;
59027: LD_ADDR_VAR 0 12
59031: PUSH
59032: CALL_OW 45
59036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59037: LD_VAR 0 12
59041: PPUSH
59042: LD_VAR 0 8
59046: PPUSH
59047: LD_INT 0
59049: PPUSH
59050: CALL 61186 0 3
// end ;
59054: GO 59008
59056: POP
59057: POP
// if horses then
59058: LD_VAR 0 5
59062: IFFALSE 59129
// for i = 1 to horses do
59064: LD_ADDR_VAR 0 11
59068: PUSH
59069: DOUBLE
59070: LD_INT 1
59072: DEC
59073: ST_TO_ADDR
59074: LD_VAR 0 5
59078: PUSH
59079: FOR_TO
59080: IFFALSE 59127
// begin hc_class := 21 ;
59082: LD_ADDR_OWVAR 28
59086: PUSH
59087: LD_INT 21
59089: ST_TO_ADDR
// hc_gallery :=  ;
59090: LD_ADDR_OWVAR 33
59094: PUSH
59095: LD_STRING 
59097: ST_TO_ADDR
// animal := CreateHuman ;
59098: LD_ADDR_VAR 0 12
59102: PUSH
59103: CALL_OW 44
59107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59108: LD_VAR 0 12
59112: PPUSH
59113: LD_VAR 0 8
59117: PPUSH
59118: LD_INT 0
59120: PPUSH
59121: CALL 61186 0 3
// end ;
59125: GO 59079
59127: POP
59128: POP
// if birds then
59129: LD_VAR 0 1
59133: IFFALSE 59200
// for i = 1 to birds do
59135: LD_ADDR_VAR 0 11
59139: PUSH
59140: DOUBLE
59141: LD_INT 1
59143: DEC
59144: ST_TO_ADDR
59145: LD_VAR 0 1
59149: PUSH
59150: FOR_TO
59151: IFFALSE 59198
// begin hc_class = 18 ;
59153: LD_ADDR_OWVAR 28
59157: PUSH
59158: LD_INT 18
59160: ST_TO_ADDR
// hc_gallery =  ;
59161: LD_ADDR_OWVAR 33
59165: PUSH
59166: LD_STRING 
59168: ST_TO_ADDR
// animal := CreateHuman ;
59169: LD_ADDR_VAR 0 12
59173: PUSH
59174: CALL_OW 44
59178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59179: LD_VAR 0 12
59183: PPUSH
59184: LD_VAR 0 8
59188: PPUSH
59189: LD_INT 0
59191: PPUSH
59192: CALL 61186 0 3
// end ;
59196: GO 59150
59198: POP
59199: POP
// if tigers then
59200: LD_VAR 0 2
59204: IFFALSE 59288
// for i = 1 to tigers do
59206: LD_ADDR_VAR 0 11
59210: PUSH
59211: DOUBLE
59212: LD_INT 1
59214: DEC
59215: ST_TO_ADDR
59216: LD_VAR 0 2
59220: PUSH
59221: FOR_TO
59222: IFFALSE 59286
// begin hc_class = class_tiger ;
59224: LD_ADDR_OWVAR 28
59228: PUSH
59229: LD_INT 14
59231: ST_TO_ADDR
// hc_gallery =  ;
59232: LD_ADDR_OWVAR 33
59236: PUSH
59237: LD_STRING 
59239: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59240: LD_ADDR_OWVAR 35
59244: PUSH
59245: LD_INT 7
59247: NEG
59248: PPUSH
59249: LD_INT 7
59251: PPUSH
59252: CALL_OW 12
59256: ST_TO_ADDR
// animal := CreateHuman ;
59257: LD_ADDR_VAR 0 12
59261: PUSH
59262: CALL_OW 44
59266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59267: LD_VAR 0 12
59271: PPUSH
59272: LD_VAR 0 8
59276: PPUSH
59277: LD_INT 0
59279: PPUSH
59280: CALL 61186 0 3
// end ;
59284: GO 59221
59286: POP
59287: POP
// if apemans then
59288: LD_VAR 0 3
59292: IFFALSE 59415
// for i = 1 to apemans do
59294: LD_ADDR_VAR 0 11
59298: PUSH
59299: DOUBLE
59300: LD_INT 1
59302: DEC
59303: ST_TO_ADDR
59304: LD_VAR 0 3
59308: PUSH
59309: FOR_TO
59310: IFFALSE 59413
// begin hc_class = class_apeman ;
59312: LD_ADDR_OWVAR 28
59316: PUSH
59317: LD_INT 12
59319: ST_TO_ADDR
// hc_gallery =  ;
59320: LD_ADDR_OWVAR 33
59324: PUSH
59325: LD_STRING 
59327: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59328: LD_ADDR_OWVAR 35
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PPUSH
59337: LD_INT 2
59339: PPUSH
59340: CALL_OW 12
59344: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59345: LD_ADDR_OWVAR 31
59349: PUSH
59350: LD_INT 1
59352: PPUSH
59353: LD_INT 3
59355: PPUSH
59356: CALL_OW 12
59360: PUSH
59361: LD_INT 1
59363: PPUSH
59364: LD_INT 3
59366: PPUSH
59367: CALL_OW 12
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// animal := CreateHuman ;
59384: LD_ADDR_VAR 0 12
59388: PUSH
59389: CALL_OW 44
59393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59394: LD_VAR 0 12
59398: PPUSH
59399: LD_VAR 0 8
59403: PPUSH
59404: LD_INT 0
59406: PPUSH
59407: CALL 61186 0 3
// end ;
59411: GO 59309
59413: POP
59414: POP
// if enchidnas then
59415: LD_VAR 0 4
59419: IFFALSE 59486
// for i = 1 to enchidnas do
59421: LD_ADDR_VAR 0 11
59425: PUSH
59426: DOUBLE
59427: LD_INT 1
59429: DEC
59430: ST_TO_ADDR
59431: LD_VAR 0 4
59435: PUSH
59436: FOR_TO
59437: IFFALSE 59484
// begin hc_class = 13 ;
59439: LD_ADDR_OWVAR 28
59443: PUSH
59444: LD_INT 13
59446: ST_TO_ADDR
// hc_gallery =  ;
59447: LD_ADDR_OWVAR 33
59451: PUSH
59452: LD_STRING 
59454: ST_TO_ADDR
// animal := CreateHuman ;
59455: LD_ADDR_VAR 0 12
59459: PUSH
59460: CALL_OW 44
59464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59465: LD_VAR 0 12
59469: PPUSH
59470: LD_VAR 0 8
59474: PPUSH
59475: LD_INT 0
59477: PPUSH
59478: CALL 61186 0 3
// end ;
59482: GO 59436
59484: POP
59485: POP
// if fishes then
59486: LD_VAR 0 7
59490: IFFALSE 59557
// for i = 1 to fishes do
59492: LD_ADDR_VAR 0 11
59496: PUSH
59497: DOUBLE
59498: LD_INT 1
59500: DEC
59501: ST_TO_ADDR
59502: LD_VAR 0 7
59506: PUSH
59507: FOR_TO
59508: IFFALSE 59555
// begin hc_class = 20 ;
59510: LD_ADDR_OWVAR 28
59514: PUSH
59515: LD_INT 20
59517: ST_TO_ADDR
// hc_gallery =  ;
59518: LD_ADDR_OWVAR 33
59522: PUSH
59523: LD_STRING 
59525: ST_TO_ADDR
// animal := CreateHuman ;
59526: LD_ADDR_VAR 0 12
59530: PUSH
59531: CALL_OW 44
59535: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59536: LD_VAR 0 12
59540: PPUSH
59541: LD_VAR 0 9
59545: PPUSH
59546: LD_INT 0
59548: PPUSH
59549: CALL 61186 0 3
// end ;
59553: GO 59507
59555: POP
59556: POP
// end ;
59557: LD_VAR 0 10
59561: RET
// export function WantHeal ( sci , unit ) ; begin
59562: LD_INT 0
59564: PPUSH
// if GetTaskList ( sci ) > 0 then
59565: LD_VAR 0 1
59569: PPUSH
59570: CALL_OW 437
59574: PUSH
59575: LD_INT 0
59577: GREATER
59578: IFFALSE 59648
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59580: LD_VAR 0 1
59584: PPUSH
59585: CALL_OW 437
59589: PUSH
59590: LD_INT 1
59592: ARRAY
59593: PUSH
59594: LD_INT 1
59596: ARRAY
59597: PUSH
59598: LD_STRING l
59600: EQUAL
59601: PUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 437
59611: PUSH
59612: LD_INT 1
59614: ARRAY
59615: PUSH
59616: LD_INT 4
59618: ARRAY
59619: PUSH
59620: LD_VAR 0 2
59624: EQUAL
59625: AND
59626: IFFALSE 59638
// result := true else
59628: LD_ADDR_VAR 0 3
59632: PUSH
59633: LD_INT 1
59635: ST_TO_ADDR
59636: GO 59646
// result := false ;
59638: LD_ADDR_VAR 0 3
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// end else
59646: GO 59656
// result := false ;
59648: LD_ADDR_VAR 0 3
59652: PUSH
59653: LD_INT 0
59655: ST_TO_ADDR
// end ;
59656: LD_VAR 0 3
59660: RET
// export function HealTarget ( sci ) ; begin
59661: LD_INT 0
59663: PPUSH
// if not sci then
59664: LD_VAR 0 1
59668: NOT
59669: IFFALSE 59673
// exit ;
59671: GO 59738
// result := 0 ;
59673: LD_ADDR_VAR 0 2
59677: PUSH
59678: LD_INT 0
59680: ST_TO_ADDR
// if GetTaskList ( sci ) then
59681: LD_VAR 0 1
59685: PPUSH
59686: CALL_OW 437
59690: IFFALSE 59738
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59692: LD_VAR 0 1
59696: PPUSH
59697: CALL_OW 437
59701: PUSH
59702: LD_INT 1
59704: ARRAY
59705: PUSH
59706: LD_INT 1
59708: ARRAY
59709: PUSH
59710: LD_STRING l
59712: EQUAL
59713: IFFALSE 59738
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59715: LD_ADDR_VAR 0 2
59719: PUSH
59720: LD_VAR 0 1
59724: PPUSH
59725: CALL_OW 437
59729: PUSH
59730: LD_INT 1
59732: ARRAY
59733: PUSH
59734: LD_INT 4
59736: ARRAY
59737: ST_TO_ADDR
// end ;
59738: LD_VAR 0 2
59742: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59743: LD_INT 0
59745: PPUSH
59746: PPUSH
59747: PPUSH
59748: PPUSH
// if not base_units then
59749: LD_VAR 0 1
59753: NOT
59754: IFFALSE 59758
// exit ;
59756: GO 59845
// result := false ;
59758: LD_ADDR_VAR 0 2
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59766: LD_ADDR_VAR 0 5
59770: PUSH
59771: LD_VAR 0 1
59775: PPUSH
59776: LD_INT 21
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PPUSH
59786: CALL_OW 72
59790: ST_TO_ADDR
// if not tmp then
59791: LD_VAR 0 5
59795: NOT
59796: IFFALSE 59800
// exit ;
59798: GO 59845
// for i in tmp do
59800: LD_ADDR_VAR 0 3
59804: PUSH
59805: LD_VAR 0 5
59809: PUSH
59810: FOR_IN
59811: IFFALSE 59843
// begin result := EnemyInRange ( i , 22 ) ;
59813: LD_ADDR_VAR 0 2
59817: PUSH
59818: LD_VAR 0 3
59822: PPUSH
59823: LD_INT 22
59825: PPUSH
59826: CALL 57432 0 2
59830: ST_TO_ADDR
// if result then
59831: LD_VAR 0 2
59835: IFFALSE 59841
// exit ;
59837: POP
59838: POP
59839: GO 59845
// end ;
59841: GO 59810
59843: POP
59844: POP
// end ;
59845: LD_VAR 0 2
59849: RET
// export function FilterByTag ( units , tag ) ; begin
59850: LD_INT 0
59852: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59853: LD_ADDR_VAR 0 3
59857: PUSH
59858: LD_VAR 0 1
59862: PPUSH
59863: LD_INT 120
59865: PUSH
59866: LD_VAR 0 2
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PPUSH
59875: CALL_OW 72
59879: ST_TO_ADDR
// end ;
59880: LD_VAR 0 3
59884: RET
// export function IsDriver ( un ) ; begin
59885: LD_INT 0
59887: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59888: LD_ADDR_VAR 0 2
59892: PUSH
59893: LD_VAR 0 1
59897: PUSH
59898: LD_INT 55
59900: PUSH
59901: EMPTY
59902: LIST
59903: PPUSH
59904: CALL_OW 69
59908: IN
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 2
59914: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59915: LD_INT 0
59917: PPUSH
59918: PPUSH
// list := [ ] ;
59919: LD_ADDR_VAR 0 5
59923: PUSH
59924: EMPTY
59925: ST_TO_ADDR
// case d of 0 :
59926: LD_VAR 0 3
59930: PUSH
59931: LD_INT 0
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59939
59937: GO 60072
59939: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59940: LD_ADDR_VAR 0 5
59944: PUSH
59945: LD_VAR 0 1
59949: PUSH
59950: LD_INT 4
59952: MINUS
59953: PUSH
59954: LD_VAR 0 2
59958: PUSH
59959: LD_INT 4
59961: MINUS
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: PUSH
59971: LD_VAR 0 1
59975: PUSH
59976: LD_INT 3
59978: MINUS
59979: PUSH
59980: LD_VAR 0 2
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: PUSH
59993: LD_VAR 0 1
59997: PUSH
59998: LD_INT 4
60000: PLUS
60001: PUSH
60002: LD_VAR 0 2
60006: PUSH
60007: LD_INT 4
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 1
60019: PUSH
60020: LD_INT 3
60022: PLUS
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_INT 3
60031: PLUS
60032: PUSH
60033: LD_INT 5
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: PUSH
60041: LD_VAR 0 1
60045: PUSH
60046: LD_VAR 0 2
60050: PUSH
60051: LD_INT 4
60053: PLUS
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// end ; 1 :
60070: GO 60770
60072: LD_INT 1
60074: DOUBLE
60075: EQUAL
60076: IFTRUE 60080
60078: GO 60213
60080: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60081: LD_ADDR_VAR 0 5
60085: PUSH
60086: LD_VAR 0 1
60090: PUSH
60091: LD_VAR 0 2
60095: PUSH
60096: LD_INT 4
60098: MINUS
60099: PUSH
60100: LD_INT 3
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: PUSH
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 3
60115: MINUS
60116: PUSH
60117: LD_VAR 0 2
60121: PUSH
60122: LD_INT 3
60124: MINUS
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: LIST
60133: PUSH
60134: LD_VAR 0 1
60138: PUSH
60139: LD_INT 4
60141: MINUS
60142: PUSH
60143: LD_VAR 0 2
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: PUSH
60156: LD_VAR 0 1
60160: PUSH
60161: LD_VAR 0 2
60165: PUSH
60166: LD_INT 3
60168: PLUS
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: PUSH
60178: LD_VAR 0 1
60182: PUSH
60183: LD_INT 4
60185: PLUS
60186: PUSH
60187: LD_VAR 0 2
60191: PUSH
60192: LD_INT 4
60194: PLUS
60195: PUSH
60196: LD_INT 5
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: ST_TO_ADDR
// end ; 2 :
60211: GO 60770
60213: LD_INT 2
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60221
60219: GO 60350
60221: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60222: LD_ADDR_VAR 0 5
60226: PUSH
60227: LD_VAR 0 1
60231: PUSH
60232: LD_VAR 0 2
60236: PUSH
60237: LD_INT 3
60239: MINUS
60240: PUSH
60241: LD_INT 3
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: LD_VAR 0 1
60253: PUSH
60254: LD_INT 4
60256: PLUS
60257: PUSH
60258: LD_VAR 0 2
60262: PUSH
60263: LD_INT 4
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_VAR 0 1
60275: PUSH
60276: LD_VAR 0 2
60280: PUSH
60281: LD_INT 4
60283: PLUS
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: PUSH
60293: LD_VAR 0 1
60297: PUSH
60298: LD_INT 3
60300: MINUS
60301: PUSH
60302: LD_VAR 0 2
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: PUSH
60315: LD_VAR 0 1
60319: PUSH
60320: LD_INT 4
60322: MINUS
60323: PUSH
60324: LD_VAR 0 2
60328: PUSH
60329: LD_INT 4
60331: MINUS
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: ST_TO_ADDR
// end ; 3 :
60348: GO 60770
60350: LD_INT 3
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60358
60356: GO 60491
60358: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60359: LD_ADDR_VAR 0 5
60363: PUSH
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 3
60371: PLUS
60372: PUSH
60373: LD_VAR 0 2
60377: PUSH
60378: LD_INT 4
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: PUSH
60386: LD_VAR 0 1
60390: PUSH
60391: LD_INT 4
60393: PLUS
60394: PUSH
60395: LD_VAR 0 2
60399: PUSH
60400: LD_INT 4
60402: PLUS
60403: PUSH
60404: LD_INT 5
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_INT 4
60419: MINUS
60420: PUSH
60421: LD_VAR 0 2
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: PUSH
60434: LD_VAR 0 1
60438: PUSH
60439: LD_VAR 0 2
60443: PUSH
60444: LD_INT 4
60446: MINUS
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: LIST
60455: PUSH
60456: LD_VAR 0 1
60460: PUSH
60461: LD_INT 3
60463: MINUS
60464: PUSH
60465: LD_VAR 0 2
60469: PUSH
60470: LD_INT 3
60472: MINUS
60473: PUSH
60474: LD_INT 2
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: ST_TO_ADDR
// end ; 4 :
60489: GO 60770
60491: LD_INT 4
60493: DOUBLE
60494: EQUAL
60495: IFTRUE 60499
60497: GO 60632
60499: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60500: LD_ADDR_VAR 0 5
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: LD_VAR 0 2
60514: PUSH
60515: LD_INT 4
60517: PLUS
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: PUSH
60527: LD_VAR 0 1
60531: PUSH
60532: LD_INT 3
60534: PLUS
60535: PUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 3
60543: PLUS
60544: PUSH
60545: LD_INT 5
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: PUSH
60553: LD_VAR 0 1
60557: PUSH
60558: LD_INT 4
60560: PLUS
60561: PUSH
60562: LD_VAR 0 2
60566: PUSH
60567: LD_INT 4
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: PUSH
60575: LD_VAR 0 1
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: LD_INT 3
60587: MINUS
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: LD_VAR 0 1
60601: PUSH
60602: LD_INT 4
60604: MINUS
60605: PUSH
60606: LD_VAR 0 2
60610: PUSH
60611: LD_INT 4
60613: MINUS
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// end ; 5 :
60630: GO 60770
60632: LD_INT 5
60634: DOUBLE
60635: EQUAL
60636: IFTRUE 60640
60638: GO 60769
60640: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60641: LD_ADDR_VAR 0 5
60645: PUSH
60646: LD_VAR 0 1
60650: PUSH
60651: LD_INT 4
60653: MINUS
60654: PUSH
60655: LD_VAR 0 2
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: LIST
60667: PUSH
60668: LD_VAR 0 1
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_INT 4
60680: MINUS
60681: PUSH
60682: LD_INT 3
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: PUSH
60690: LD_VAR 0 1
60694: PUSH
60695: LD_INT 4
60697: PLUS
60698: PUSH
60699: LD_VAR 0 2
60703: PUSH
60704: LD_INT 4
60706: PLUS
60707: PUSH
60708: LD_INT 5
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: LIST
60715: PUSH
60716: LD_VAR 0 1
60720: PUSH
60721: LD_INT 3
60723: PLUS
60724: PUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: PUSH
60738: LD_VAR 0 1
60742: PUSH
60743: LD_VAR 0 2
60747: PUSH
60748: LD_INT 3
60750: PLUS
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: ST_TO_ADDR
// end ; end ;
60767: GO 60770
60769: POP
// result := list ;
60770: LD_ADDR_VAR 0 4
60774: PUSH
60775: LD_VAR 0 5
60779: ST_TO_ADDR
// end ;
60780: LD_VAR 0 4
60784: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60785: LD_INT 0
60787: PPUSH
60788: PPUSH
60789: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60790: LD_VAR 0 1
60794: NOT
60795: PUSH
60796: LD_VAR 0 2
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 4
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: IN
60819: NOT
60820: OR
60821: IFFALSE 60825
// exit ;
60823: GO 60908
// tmp := [ ] ;
60825: LD_ADDR_VAR 0 5
60829: PUSH
60830: EMPTY
60831: ST_TO_ADDR
// for i in units do
60832: LD_ADDR_VAR 0 4
60836: PUSH
60837: LD_VAR 0 1
60841: PUSH
60842: FOR_IN
60843: IFFALSE 60877
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60845: LD_ADDR_VAR 0 5
60849: PUSH
60850: LD_VAR 0 5
60854: PPUSH
60855: LD_VAR 0 4
60859: PPUSH
60860: LD_VAR 0 2
60864: PPUSH
60865: CALL_OW 259
60869: PPUSH
60870: CALL 62269 0 2
60874: ST_TO_ADDR
60875: GO 60842
60877: POP
60878: POP
// if not tmp then
60879: LD_VAR 0 5
60883: NOT
60884: IFFALSE 60888
// exit ;
60886: GO 60908
// result := SortListByListDesc ( units , tmp ) ;
60888: LD_ADDR_VAR 0 3
60892: PUSH
60893: LD_VAR 0 1
60897: PPUSH
60898: LD_VAR 0 5
60902: PPUSH
60903: CALL_OW 77
60907: ST_TO_ADDR
// end ;
60908: LD_VAR 0 3
60912: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60913: LD_INT 0
60915: PPUSH
60916: PPUSH
60917: PPUSH
// result := false ;
60918: LD_ADDR_VAR 0 3
60922: PUSH
60923: LD_INT 0
60925: ST_TO_ADDR
// if not building then
60926: LD_VAR 0 2
60930: NOT
60931: IFFALSE 60935
// exit ;
60933: GO 61073
// x := GetX ( building ) ;
60935: LD_ADDR_VAR 0 4
60939: PUSH
60940: LD_VAR 0 2
60944: PPUSH
60945: CALL_OW 250
60949: ST_TO_ADDR
// y := GetY ( building ) ;
60950: LD_ADDR_VAR 0 5
60954: PUSH
60955: LD_VAR 0 2
60959: PPUSH
60960: CALL_OW 251
60964: ST_TO_ADDR
// if not x or not y then
60965: LD_VAR 0 4
60969: NOT
60970: PUSH
60971: LD_VAR 0 5
60975: NOT
60976: OR
60977: IFFALSE 60981
// exit ;
60979: GO 61073
// if GetTaskList ( unit ) then
60981: LD_VAR 0 1
60985: PPUSH
60986: CALL_OW 437
60990: IFFALSE 61073
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60992: LD_STRING e
60994: PUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL_OW 437
61004: PUSH
61005: LD_INT 1
61007: ARRAY
61008: PUSH
61009: LD_INT 1
61011: ARRAY
61012: EQUAL
61013: PUSH
61014: LD_VAR 0 4
61018: PUSH
61019: LD_VAR 0 1
61023: PPUSH
61024: CALL_OW 437
61028: PUSH
61029: LD_INT 1
61031: ARRAY
61032: PUSH
61033: LD_INT 2
61035: ARRAY
61036: EQUAL
61037: AND
61038: PUSH
61039: LD_VAR 0 5
61043: PUSH
61044: LD_VAR 0 1
61048: PPUSH
61049: CALL_OW 437
61053: PUSH
61054: LD_INT 1
61056: ARRAY
61057: PUSH
61058: LD_INT 3
61060: ARRAY
61061: EQUAL
61062: AND
61063: IFFALSE 61073
// result := true end ;
61065: LD_ADDR_VAR 0 3
61069: PUSH
61070: LD_INT 1
61072: ST_TO_ADDR
// end ;
61073: LD_VAR 0 3
61077: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61078: LD_INT 0
61080: PPUSH
// result := false ;
61081: LD_ADDR_VAR 0 4
61085: PUSH
61086: LD_INT 0
61088: ST_TO_ADDR
// if GetTaskList ( unit ) then
61089: LD_VAR 0 1
61093: PPUSH
61094: CALL_OW 437
61098: IFFALSE 61181
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61100: LD_STRING M
61102: PUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: CALL_OW 437
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PUSH
61117: LD_INT 1
61119: ARRAY
61120: EQUAL
61121: PUSH
61122: LD_VAR 0 2
61126: PUSH
61127: LD_VAR 0 1
61131: PPUSH
61132: CALL_OW 437
61136: PUSH
61137: LD_INT 1
61139: ARRAY
61140: PUSH
61141: LD_INT 2
61143: ARRAY
61144: EQUAL
61145: AND
61146: PUSH
61147: LD_VAR 0 3
61151: PUSH
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 437
61161: PUSH
61162: LD_INT 1
61164: ARRAY
61165: PUSH
61166: LD_INT 3
61168: ARRAY
61169: EQUAL
61170: AND
61171: IFFALSE 61181
// result := true ;
61173: LD_ADDR_VAR 0 4
61177: PUSH
61178: LD_INT 1
61180: ST_TO_ADDR
// end ; end ;
61181: LD_VAR 0 4
61185: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
// if not unit or not area then
61192: LD_VAR 0 1
61196: NOT
61197: PUSH
61198: LD_VAR 0 2
61202: NOT
61203: OR
61204: IFFALSE 61208
// exit ;
61206: GO 61372
// tmp := AreaToList ( area , i ) ;
61208: LD_ADDR_VAR 0 6
61212: PUSH
61213: LD_VAR 0 2
61217: PPUSH
61218: LD_VAR 0 5
61222: PPUSH
61223: CALL_OW 517
61227: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61228: LD_ADDR_VAR 0 5
61232: PUSH
61233: DOUBLE
61234: LD_INT 1
61236: DEC
61237: ST_TO_ADDR
61238: LD_VAR 0 6
61242: PUSH
61243: LD_INT 1
61245: ARRAY
61246: PUSH
61247: FOR_TO
61248: IFFALSE 61370
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61250: LD_ADDR_VAR 0 7
61254: PUSH
61255: LD_VAR 0 6
61259: PUSH
61260: LD_INT 1
61262: ARRAY
61263: PUSH
61264: LD_VAR 0 5
61268: ARRAY
61269: PUSH
61270: LD_VAR 0 6
61274: PUSH
61275: LD_INT 2
61277: ARRAY
61278: PUSH
61279: LD_VAR 0 5
61283: ARRAY
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61289: LD_VAR 0 7
61293: PUSH
61294: LD_INT 1
61296: ARRAY
61297: PPUSH
61298: LD_VAR 0 7
61302: PUSH
61303: LD_INT 2
61305: ARRAY
61306: PPUSH
61307: CALL_OW 428
61311: PUSH
61312: LD_INT 0
61314: EQUAL
61315: IFFALSE 61368
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61317: LD_VAR 0 1
61321: PPUSH
61322: LD_VAR 0 7
61326: PUSH
61327: LD_INT 1
61329: ARRAY
61330: PPUSH
61331: LD_VAR 0 7
61335: PUSH
61336: LD_INT 2
61338: ARRAY
61339: PPUSH
61340: LD_VAR 0 3
61344: PPUSH
61345: CALL_OW 48
// result := IsPlaced ( unit ) ;
61349: LD_ADDR_VAR 0 4
61353: PUSH
61354: LD_VAR 0 1
61358: PPUSH
61359: CALL_OW 305
61363: ST_TO_ADDR
// exit ;
61364: POP
61365: POP
61366: GO 61372
// end ; end ;
61368: GO 61247
61370: POP
61371: POP
// end ;
61372: LD_VAR 0 4
61376: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61377: LD_INT 0
61379: PPUSH
61380: PPUSH
61381: PPUSH
// if not side or side > 8 then
61382: LD_VAR 0 1
61386: NOT
61387: PUSH
61388: LD_VAR 0 1
61392: PUSH
61393: LD_INT 8
61395: GREATER
61396: OR
61397: IFFALSE 61401
// exit ;
61399: GO 61588
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61401: LD_ADDR_VAR 0 4
61405: PUSH
61406: LD_INT 22
61408: PUSH
61409: LD_VAR 0 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 21
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PPUSH
61432: CALL_OW 69
61436: ST_TO_ADDR
// if not tmp then
61437: LD_VAR 0 4
61441: NOT
61442: IFFALSE 61446
// exit ;
61444: GO 61588
// enable_addtolog := true ;
61446: LD_ADDR_OWVAR 81
61450: PUSH
61451: LD_INT 1
61453: ST_TO_ADDR
// AddToLog ( [ ) ;
61454: LD_STRING [
61456: PPUSH
61457: CALL_OW 561
// for i in tmp do
61461: LD_ADDR_VAR 0 3
61465: PUSH
61466: LD_VAR 0 4
61470: PUSH
61471: FOR_IN
61472: IFFALSE 61579
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61474: LD_STRING [
61476: PUSH
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL_OW 266
61486: STR
61487: PUSH
61488: LD_STRING , 
61490: STR
61491: PUSH
61492: LD_VAR 0 3
61496: PPUSH
61497: CALL_OW 250
61501: STR
61502: PUSH
61503: LD_STRING , 
61505: STR
61506: PUSH
61507: LD_VAR 0 3
61511: PPUSH
61512: CALL_OW 251
61516: STR
61517: PUSH
61518: LD_STRING , 
61520: STR
61521: PUSH
61522: LD_VAR 0 3
61526: PPUSH
61527: CALL_OW 254
61531: STR
61532: PUSH
61533: LD_STRING , 
61535: STR
61536: PUSH
61537: LD_VAR 0 3
61541: PPUSH
61542: LD_INT 1
61544: PPUSH
61545: CALL_OW 268
61549: STR
61550: PUSH
61551: LD_STRING , 
61553: STR
61554: PUSH
61555: LD_VAR 0 3
61559: PPUSH
61560: LD_INT 2
61562: PPUSH
61563: CALL_OW 268
61567: STR
61568: PUSH
61569: LD_STRING ],
61571: STR
61572: PPUSH
61573: CALL_OW 561
// end ;
61577: GO 61471
61579: POP
61580: POP
// AddToLog ( ]; ) ;
61581: LD_STRING ];
61583: PPUSH
61584: CALL_OW 561
// end ;
61588: LD_VAR 0 2
61592: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61593: LD_INT 0
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
// if not area or not rate or not max then
61600: LD_VAR 0 1
61604: NOT
61605: PUSH
61606: LD_VAR 0 2
61610: NOT
61611: OR
61612: PUSH
61613: LD_VAR 0 4
61617: NOT
61618: OR
61619: IFFALSE 61623
// exit ;
61621: GO 61812
// while 1 do
61623: LD_INT 1
61625: IFFALSE 61812
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61627: LD_ADDR_VAR 0 9
61631: PUSH
61632: LD_VAR 0 1
61636: PPUSH
61637: LD_INT 1
61639: PPUSH
61640: CALL_OW 287
61644: PUSH
61645: LD_INT 10
61647: MUL
61648: ST_TO_ADDR
// r := rate / 10 ;
61649: LD_ADDR_VAR 0 7
61653: PUSH
61654: LD_VAR 0 2
61658: PUSH
61659: LD_INT 10
61661: DIVREAL
61662: ST_TO_ADDR
// time := 1 1$00 ;
61663: LD_ADDR_VAR 0 8
61667: PUSH
61668: LD_INT 2100
61670: ST_TO_ADDR
// if amount < min then
61671: LD_VAR 0 9
61675: PUSH
61676: LD_VAR 0 3
61680: LESS
61681: IFFALSE 61699
// r := r * 2 else
61683: LD_ADDR_VAR 0 7
61687: PUSH
61688: LD_VAR 0 7
61692: PUSH
61693: LD_INT 2
61695: MUL
61696: ST_TO_ADDR
61697: GO 61725
// if amount > max then
61699: LD_VAR 0 9
61703: PUSH
61704: LD_VAR 0 4
61708: GREATER
61709: IFFALSE 61725
// r := r / 2 ;
61711: LD_ADDR_VAR 0 7
61715: PUSH
61716: LD_VAR 0 7
61720: PUSH
61721: LD_INT 2
61723: DIVREAL
61724: ST_TO_ADDR
// time := time / r ;
61725: LD_ADDR_VAR 0 8
61729: PUSH
61730: LD_VAR 0 8
61734: PUSH
61735: LD_VAR 0 7
61739: DIVREAL
61740: ST_TO_ADDR
// if time < 0 then
61741: LD_VAR 0 8
61745: PUSH
61746: LD_INT 0
61748: LESS
61749: IFFALSE 61766
// time := time * - 1 ;
61751: LD_ADDR_VAR 0 8
61755: PUSH
61756: LD_VAR 0 8
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: MUL
61765: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61766: LD_VAR 0 8
61770: PUSH
61771: LD_INT 35
61773: PPUSH
61774: LD_INT 875
61776: PPUSH
61777: CALL_OW 12
61781: PLUS
61782: PPUSH
61783: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61787: LD_INT 1
61789: PPUSH
61790: LD_INT 5
61792: PPUSH
61793: CALL_OW 12
61797: PPUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: LD_INT 1
61805: PPUSH
61806: CALL_OW 55
// end ;
61810: GO 61623
// end ;
61812: LD_VAR 0 5
61816: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61817: LD_INT 0
61819: PPUSH
61820: PPUSH
61821: PPUSH
61822: PPUSH
61823: PPUSH
61824: PPUSH
61825: PPUSH
61826: PPUSH
// if not turrets or not factories then
61827: LD_VAR 0 1
61831: NOT
61832: PUSH
61833: LD_VAR 0 2
61837: NOT
61838: OR
61839: IFFALSE 61843
// exit ;
61841: GO 62150
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61843: LD_ADDR_VAR 0 10
61847: PUSH
61848: LD_INT 5
61850: PUSH
61851: LD_INT 6
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: LD_INT 5
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 24
61885: PUSH
61886: LD_INT 25
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 23
61895: PUSH
61896: LD_INT 27
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 42
61909: PUSH
61910: LD_INT 43
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 44
61919: PUSH
61920: LD_INT 46
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 45
61929: PUSH
61930: LD_INT 47
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// result := [ ] ;
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: EMPTY
61953: ST_TO_ADDR
// for i in turrets do
61954: LD_ADDR_VAR 0 4
61958: PUSH
61959: LD_VAR 0 1
61963: PUSH
61964: FOR_IN
61965: IFFALSE 62148
// begin nat := GetNation ( i ) ;
61967: LD_ADDR_VAR 0 7
61971: PUSH
61972: LD_VAR 0 4
61976: PPUSH
61977: CALL_OW 248
61981: ST_TO_ADDR
// weapon := 0 ;
61982: LD_ADDR_VAR 0 8
61986: PUSH
61987: LD_INT 0
61989: ST_TO_ADDR
// if not nat then
61990: LD_VAR 0 7
61994: NOT
61995: IFFALSE 61999
// continue ;
61997: GO 61964
// for j in list [ nat ] do
61999: LD_ADDR_VAR 0 5
62003: PUSH
62004: LD_VAR 0 10
62008: PUSH
62009: LD_VAR 0 7
62013: ARRAY
62014: PUSH
62015: FOR_IN
62016: IFFALSE 62057
// if GetBWeapon ( i ) = j [ 1 ] then
62018: LD_VAR 0 4
62022: PPUSH
62023: CALL_OW 269
62027: PUSH
62028: LD_VAR 0 5
62032: PUSH
62033: LD_INT 1
62035: ARRAY
62036: EQUAL
62037: IFFALSE 62055
// begin weapon := j [ 2 ] ;
62039: LD_ADDR_VAR 0 8
62043: PUSH
62044: LD_VAR 0 5
62048: PUSH
62049: LD_INT 2
62051: ARRAY
62052: ST_TO_ADDR
// break ;
62053: GO 62057
// end ;
62055: GO 62015
62057: POP
62058: POP
// if not weapon then
62059: LD_VAR 0 8
62063: NOT
62064: IFFALSE 62068
// continue ;
62066: GO 61964
// for k in factories do
62068: LD_ADDR_VAR 0 6
62072: PUSH
62073: LD_VAR 0 2
62077: PUSH
62078: FOR_IN
62079: IFFALSE 62144
// begin weapons := AvailableWeaponList ( k ) ;
62081: LD_ADDR_VAR 0 9
62085: PUSH
62086: LD_VAR 0 6
62090: PPUSH
62091: CALL_OW 478
62095: ST_TO_ADDR
// if not weapons then
62096: LD_VAR 0 9
62100: NOT
62101: IFFALSE 62105
// continue ;
62103: GO 62078
// if weapon in weapons then
62105: LD_VAR 0 8
62109: PUSH
62110: LD_VAR 0 9
62114: IN
62115: IFFALSE 62142
// begin result := [ i , weapon ] ;
62117: LD_ADDR_VAR 0 3
62121: PUSH
62122: LD_VAR 0 4
62126: PUSH
62127: LD_VAR 0 8
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: ST_TO_ADDR
// exit ;
62136: POP
62137: POP
62138: POP
62139: POP
62140: GO 62150
// end ; end ;
62142: GO 62078
62144: POP
62145: POP
// end ;
62146: GO 61964
62148: POP
62149: POP
// end ;
62150: LD_VAR 0 3
62154: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62155: LD_INT 0
62157: PPUSH
// if not side or side > 8 then
62158: LD_VAR 0 3
62162: NOT
62163: PUSH
62164: LD_VAR 0 3
62168: PUSH
62169: LD_INT 8
62171: GREATER
62172: OR
62173: IFFALSE 62177
// exit ;
62175: GO 62236
// if not range then
62177: LD_VAR 0 4
62181: NOT
62182: IFFALSE 62193
// range := - 12 ;
62184: LD_ADDR_VAR 0 4
62188: PUSH
62189: LD_INT 12
62191: NEG
62192: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62193: LD_VAR 0 1
62197: PPUSH
62198: LD_VAR 0 2
62202: PPUSH
62203: LD_VAR 0 3
62207: PPUSH
62208: LD_VAR 0 4
62212: PPUSH
62213: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62217: LD_VAR 0 1
62221: PPUSH
62222: LD_VAR 0 2
62226: PPUSH
62227: LD_VAR 0 3
62231: PPUSH
62232: CALL_OW 331
// end ;
62236: LD_VAR 0 5
62240: RET
// export function Video ( mode ) ; begin
62241: LD_INT 0
62243: PPUSH
// ingame_video = mode ;
62244: LD_ADDR_OWVAR 52
62248: PUSH
62249: LD_VAR 0 1
62253: ST_TO_ADDR
// interface_hidden = mode ;
62254: LD_ADDR_OWVAR 54
62258: PUSH
62259: LD_VAR 0 1
62263: ST_TO_ADDR
// end ;
62264: LD_VAR 0 2
62268: RET
// export function Join ( array , element ) ; begin
62269: LD_INT 0
62271: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62272: LD_ADDR_VAR 0 3
62276: PUSH
62277: LD_VAR 0 1
62281: PPUSH
62282: LD_VAR 0 1
62286: PUSH
62287: LD_INT 1
62289: PLUS
62290: PPUSH
62291: LD_VAR 0 2
62295: PPUSH
62296: CALL_OW 1
62300: ST_TO_ADDR
// end ;
62301: LD_VAR 0 3
62305: RET
// export function JoinUnion ( array , element ) ; begin
62306: LD_INT 0
62308: PPUSH
// result := array union element ;
62309: LD_ADDR_VAR 0 3
62313: PUSH
62314: LD_VAR 0 1
62318: PUSH
62319: LD_VAR 0 2
62323: UNION
62324: ST_TO_ADDR
// end ;
62325: LD_VAR 0 3
62329: RET
// export function GetBehemoths ( side ) ; begin
62330: LD_INT 0
62332: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62333: LD_ADDR_VAR 0 2
62337: PUSH
62338: LD_INT 22
62340: PUSH
62341: LD_VAR 0 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 31
62352: PUSH
62353: LD_INT 25
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PPUSH
62364: CALL_OW 69
62368: ST_TO_ADDR
// end ;
62369: LD_VAR 0 2
62373: RET
// export function Shuffle ( array ) ; var i , index ; begin
62374: LD_INT 0
62376: PPUSH
62377: PPUSH
62378: PPUSH
// result := [ ] ;
62379: LD_ADDR_VAR 0 2
62383: PUSH
62384: EMPTY
62385: ST_TO_ADDR
// if not array then
62386: LD_VAR 0 1
62390: NOT
62391: IFFALSE 62395
// exit ;
62393: GO 62494
// Randomize ;
62395: CALL_OW 10
// for i = array downto 1 do
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: DOUBLE
62405: LD_VAR 0 1
62409: INC
62410: ST_TO_ADDR
62411: LD_INT 1
62413: PUSH
62414: FOR_DOWNTO
62415: IFFALSE 62492
// begin index := rand ( 1 , array ) ;
62417: LD_ADDR_VAR 0 4
62421: PUSH
62422: LD_INT 1
62424: PPUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: CALL_OW 12
62434: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62435: LD_ADDR_VAR 0 2
62439: PUSH
62440: LD_VAR 0 2
62444: PPUSH
62445: LD_VAR 0 2
62449: PUSH
62450: LD_INT 1
62452: PLUS
62453: PPUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_VAR 0 4
62463: ARRAY
62464: PPUSH
62465: CALL_OW 2
62469: ST_TO_ADDR
// array := Delete ( array , index ) ;
62470: LD_ADDR_VAR 0 1
62474: PUSH
62475: LD_VAR 0 1
62479: PPUSH
62480: LD_VAR 0 4
62484: PPUSH
62485: CALL_OW 3
62489: ST_TO_ADDR
// end ;
62490: GO 62414
62492: POP
62493: POP
// end ;
62494: LD_VAR 0 2
62498: RET
// export function GetBaseMaterials ( base ) ; begin
62499: LD_INT 0
62501: PPUSH
// result := [ 0 , 0 , 0 ] ;
62502: LD_ADDR_VAR 0 2
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: ST_TO_ADDR
// if not base then
62521: LD_VAR 0 1
62525: NOT
62526: IFFALSE 62530
// exit ;
62528: GO 62579
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62530: LD_ADDR_VAR 0 2
62534: PUSH
62535: LD_VAR 0 1
62539: PPUSH
62540: LD_INT 1
62542: PPUSH
62543: CALL_OW 275
62547: PUSH
62548: LD_VAR 0 1
62552: PPUSH
62553: LD_INT 2
62555: PPUSH
62556: CALL_OW 275
62560: PUSH
62561: LD_VAR 0 1
62565: PPUSH
62566: LD_INT 3
62568: PPUSH
62569: CALL_OW 275
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: ST_TO_ADDR
// end ;
62579: LD_VAR 0 2
62583: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62584: LD_INT 0
62586: PPUSH
62587: PPUSH
// result := array ;
62588: LD_ADDR_VAR 0 3
62592: PUSH
62593: LD_VAR 0 1
62597: ST_TO_ADDR
// if size >= result then
62598: LD_VAR 0 2
62602: PUSH
62603: LD_VAR 0 3
62607: GREATEREQUAL
62608: IFFALSE 62612
// exit ;
62610: GO 62662
// if size then
62612: LD_VAR 0 2
62616: IFFALSE 62662
// for i := array downto size do
62618: LD_ADDR_VAR 0 4
62622: PUSH
62623: DOUBLE
62624: LD_VAR 0 1
62628: INC
62629: ST_TO_ADDR
62630: LD_VAR 0 2
62634: PUSH
62635: FOR_DOWNTO
62636: IFFALSE 62660
// result := Delete ( result , result ) ;
62638: LD_ADDR_VAR 0 3
62642: PUSH
62643: LD_VAR 0 3
62647: PPUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: CALL_OW 3
62657: ST_TO_ADDR
62658: GO 62635
62660: POP
62661: POP
// end ;
62662: LD_VAR 0 3
62666: RET
// export function ComExit ( unit ) ; var tmp ; begin
62667: LD_INT 0
62669: PPUSH
62670: PPUSH
// if not IsInUnit ( unit ) then
62671: LD_VAR 0 1
62675: PPUSH
62676: CALL_OW 310
62680: NOT
62681: IFFALSE 62685
// exit ;
62683: GO 62745
// tmp := IsInUnit ( unit ) ;
62685: LD_ADDR_VAR 0 3
62689: PUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: CALL_OW 310
62699: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62700: LD_VAR 0 3
62704: PPUSH
62705: CALL_OW 247
62709: PUSH
62710: LD_INT 2
62712: EQUAL
62713: IFFALSE 62726
// ComExitVehicle ( unit ) else
62715: LD_VAR 0 1
62719: PPUSH
62720: CALL_OW 121
62724: GO 62735
// ComExitBuilding ( unit ) ;
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 122
// result := tmp ;
62735: LD_ADDR_VAR 0 2
62739: PUSH
62740: LD_VAR 0 3
62744: ST_TO_ADDR
// end ;
62745: LD_VAR 0 2
62749: RET
// export function ComExitAll ( units ) ; var i ; begin
62750: LD_INT 0
62752: PPUSH
62753: PPUSH
// if not units then
62754: LD_VAR 0 1
62758: NOT
62759: IFFALSE 62763
// exit ;
62761: GO 62789
// for i in units do
62763: LD_ADDR_VAR 0 3
62767: PUSH
62768: LD_VAR 0 1
62772: PUSH
62773: FOR_IN
62774: IFFALSE 62787
// ComExit ( i ) ;
62776: LD_VAR 0 3
62780: PPUSH
62781: CALL 62667 0 1
62785: GO 62773
62787: POP
62788: POP
// end ;
62789: LD_VAR 0 2
62793: RET
// export function ResetHc ; begin
62794: LD_INT 0
62796: PPUSH
// InitHc ;
62797: CALL_OW 19
// hc_importance := 0 ;
62801: LD_ADDR_OWVAR 32
62805: PUSH
62806: LD_INT 0
62808: ST_TO_ADDR
// end ;
62809: LD_VAR 0 1
62813: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62814: LD_INT 0
62816: PPUSH
62817: PPUSH
62818: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62819: LD_ADDR_VAR 0 6
62823: PUSH
62824: LD_VAR 0 1
62828: PUSH
62829: LD_VAR 0 3
62833: PLUS
62834: PUSH
62835: LD_INT 2
62837: DIV
62838: ST_TO_ADDR
// if _x < 0 then
62839: LD_VAR 0 6
62843: PUSH
62844: LD_INT 0
62846: LESS
62847: IFFALSE 62864
// _x := _x * - 1 ;
62849: LD_ADDR_VAR 0 6
62853: PUSH
62854: LD_VAR 0 6
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: MUL
62863: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62864: LD_ADDR_VAR 0 7
62868: PUSH
62869: LD_VAR 0 2
62873: PUSH
62874: LD_VAR 0 4
62878: PLUS
62879: PUSH
62880: LD_INT 2
62882: DIV
62883: ST_TO_ADDR
// if _y < 0 then
62884: LD_VAR 0 7
62888: PUSH
62889: LD_INT 0
62891: LESS
62892: IFFALSE 62909
// _y := _y * - 1 ;
62894: LD_ADDR_VAR 0 7
62898: PUSH
62899: LD_VAR 0 7
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: MUL
62908: ST_TO_ADDR
// result := [ _x , _y ] ;
62909: LD_ADDR_VAR 0 5
62913: PUSH
62914: LD_VAR 0 6
62918: PUSH
62919: LD_VAR 0 7
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// end ;
62928: LD_VAR 0 5
62932: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62933: LD_INT 0
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
// task := GetTaskList ( unit ) ;
62939: LD_ADDR_VAR 0 7
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 437
62953: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62954: LD_VAR 0 7
62958: NOT
62959: PUSH
62960: LD_VAR 0 1
62964: PPUSH
62965: LD_VAR 0 2
62969: PPUSH
62970: CALL_OW 308
62974: NOT
62975: AND
62976: IFFALSE 62980
// exit ;
62978: GO 63098
// if IsInArea ( unit , area ) then
62980: LD_VAR 0 1
62984: PPUSH
62985: LD_VAR 0 2
62989: PPUSH
62990: CALL_OW 308
62994: IFFALSE 63012
// begin ComMoveToArea ( unit , goAway ) ;
62996: LD_VAR 0 1
63000: PPUSH
63001: LD_VAR 0 3
63005: PPUSH
63006: CALL_OW 113
// exit ;
63010: GO 63098
// end ; if task [ 1 ] [ 1 ] <> M then
63012: LD_VAR 0 7
63016: PUSH
63017: LD_INT 1
63019: ARRAY
63020: PUSH
63021: LD_INT 1
63023: ARRAY
63024: PUSH
63025: LD_STRING M
63027: NONEQUAL
63028: IFFALSE 63032
// exit ;
63030: GO 63098
// x := task [ 1 ] [ 2 ] ;
63032: LD_ADDR_VAR 0 5
63036: PUSH
63037: LD_VAR 0 7
63041: PUSH
63042: LD_INT 1
63044: ARRAY
63045: PUSH
63046: LD_INT 2
63048: ARRAY
63049: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63050: LD_ADDR_VAR 0 6
63054: PUSH
63055: LD_VAR 0 7
63059: PUSH
63060: LD_INT 1
63062: ARRAY
63063: PUSH
63064: LD_INT 3
63066: ARRAY
63067: ST_TO_ADDR
// if InArea ( x , y , area ) then
63068: LD_VAR 0 5
63072: PPUSH
63073: LD_VAR 0 6
63077: PPUSH
63078: LD_VAR 0 2
63082: PPUSH
63083: CALL_OW 309
63087: IFFALSE 63098
// ComStop ( unit ) ;
63089: LD_VAR 0 1
63093: PPUSH
63094: CALL_OW 141
// end ;
63098: LD_VAR 0 4
63102: RET
// export function Abs ( value ) ; begin
63103: LD_INT 0
63105: PPUSH
// result := value ;
63106: LD_ADDR_VAR 0 2
63110: PUSH
63111: LD_VAR 0 1
63115: ST_TO_ADDR
// if value < 0 then
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 0
63123: LESS
63124: IFFALSE 63141
// result := value * - 1 ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 1
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: MUL
63140: ST_TO_ADDR
// end ;
63141: LD_VAR 0 2
63145: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63146: LD_INT 0
63148: PPUSH
63149: PPUSH
63150: PPUSH
63151: PPUSH
63152: PPUSH
63153: PPUSH
63154: PPUSH
63155: PPUSH
// if not unit or not building then
63156: LD_VAR 0 1
63160: NOT
63161: PUSH
63162: LD_VAR 0 2
63166: NOT
63167: OR
63168: IFFALSE 63172
// exit ;
63170: GO 63398
// x := GetX ( building ) ;
63172: LD_ADDR_VAR 0 4
63176: PUSH
63177: LD_VAR 0 2
63181: PPUSH
63182: CALL_OW 250
63186: ST_TO_ADDR
// y := GetY ( building ) ;
63187: LD_ADDR_VAR 0 6
63191: PUSH
63192: LD_VAR 0 2
63196: PPUSH
63197: CALL_OW 251
63201: ST_TO_ADDR
// d := GetDir ( building ) ;
63202: LD_ADDR_VAR 0 8
63206: PUSH
63207: LD_VAR 0 2
63211: PPUSH
63212: CALL_OW 254
63216: ST_TO_ADDR
// r := 4 ;
63217: LD_ADDR_VAR 0 9
63221: PUSH
63222: LD_INT 4
63224: ST_TO_ADDR
// for i := 1 to 5 do
63225: LD_ADDR_VAR 0 10
63229: PUSH
63230: DOUBLE
63231: LD_INT 1
63233: DEC
63234: ST_TO_ADDR
63235: LD_INT 5
63237: PUSH
63238: FOR_TO
63239: IFFALSE 63396
// begin _x := ShiftX ( x , d , r + i ) ;
63241: LD_ADDR_VAR 0 5
63245: PUSH
63246: LD_VAR 0 4
63250: PPUSH
63251: LD_VAR 0 8
63255: PPUSH
63256: LD_VAR 0 9
63260: PUSH
63261: LD_VAR 0 10
63265: PLUS
63266: PPUSH
63267: CALL_OW 272
63271: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63272: LD_ADDR_VAR 0 7
63276: PUSH
63277: LD_VAR 0 6
63281: PPUSH
63282: LD_VAR 0 8
63286: PPUSH
63287: LD_VAR 0 9
63291: PUSH
63292: LD_VAR 0 10
63296: PLUS
63297: PPUSH
63298: CALL_OW 273
63302: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63303: LD_VAR 0 5
63307: PPUSH
63308: LD_VAR 0 7
63312: PPUSH
63313: CALL_OW 488
63317: PUSH
63318: LD_VAR 0 5
63322: PPUSH
63323: LD_VAR 0 7
63327: PPUSH
63328: CALL_OW 428
63332: PPUSH
63333: CALL_OW 247
63337: PUSH
63338: LD_INT 3
63340: PUSH
63341: LD_INT 2
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: IN
63348: NOT
63349: AND
63350: IFFALSE 63394
// begin ComMoveXY ( unit , _x , _y ) ;
63352: LD_VAR 0 1
63356: PPUSH
63357: LD_VAR 0 5
63361: PPUSH
63362: LD_VAR 0 7
63366: PPUSH
63367: CALL_OW 111
// result := [ _x , _y ] ;
63371: LD_ADDR_VAR 0 3
63375: PUSH
63376: LD_VAR 0 5
63380: PUSH
63381: LD_VAR 0 7
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: ST_TO_ADDR
// exit ;
63390: POP
63391: POP
63392: GO 63398
// end ; end ;
63394: GO 63238
63396: POP
63397: POP
// end ;
63398: LD_VAR 0 3
63402: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63403: LD_INT 0
63405: PPUSH
63406: PPUSH
63407: PPUSH
// result := 0 ;
63408: LD_ADDR_VAR 0 3
63412: PUSH
63413: LD_INT 0
63415: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63416: LD_VAR 0 1
63420: PUSH
63421: LD_INT 0
63423: LESS
63424: PUSH
63425: LD_VAR 0 1
63429: PUSH
63430: LD_INT 8
63432: GREATER
63433: OR
63434: PUSH
63435: LD_VAR 0 2
63439: PUSH
63440: LD_INT 0
63442: LESS
63443: OR
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 8
63452: GREATER
63453: OR
63454: IFFALSE 63458
// exit ;
63456: GO 63533
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63458: LD_ADDR_VAR 0 4
63462: PUSH
63463: LD_INT 22
63465: PUSH
63466: LD_VAR 0 2
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PPUSH
63475: CALL_OW 69
63479: PUSH
63480: FOR_IN
63481: IFFALSE 63531
// begin un := UnitShoot ( i ) ;
63483: LD_ADDR_VAR 0 5
63487: PUSH
63488: LD_VAR 0 4
63492: PPUSH
63493: CALL_OW 504
63497: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63498: LD_VAR 0 5
63502: PPUSH
63503: CALL_OW 255
63507: PUSH
63508: LD_VAR 0 1
63512: EQUAL
63513: IFFALSE 63529
// begin result := un ;
63515: LD_ADDR_VAR 0 3
63519: PUSH
63520: LD_VAR 0 5
63524: ST_TO_ADDR
// exit ;
63525: POP
63526: POP
63527: GO 63533
// end ; end ;
63529: GO 63480
63531: POP
63532: POP
// end ;
63533: LD_VAR 0 3
63537: RET
// export function GetCargoBay ( units ) ; begin
63538: LD_INT 0
63540: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63541: LD_ADDR_VAR 0 2
63545: PUSH
63546: LD_VAR 0 1
63550: PPUSH
63551: LD_INT 2
63553: PUSH
63554: LD_INT 34
63556: PUSH
63557: LD_INT 12
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 34
63566: PUSH
63567: LD_INT 51
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 34
63576: PUSH
63577: LD_INT 32
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 34
63586: PUSH
63587: LD_INT 89
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: PPUSH
63601: CALL_OW 72
63605: ST_TO_ADDR
// end ;
63606: LD_VAR 0 2
63610: RET
// export function Negate ( value ) ; begin
63611: LD_INT 0
63613: PPUSH
// result := not value ;
63614: LD_ADDR_VAR 0 2
63618: PUSH
63619: LD_VAR 0 1
63623: NOT
63624: ST_TO_ADDR
// end ;
63625: LD_VAR 0 2
63629: RET
// export function Inc ( value ) ; begin
63630: LD_INT 0
63632: PPUSH
// result := value + 1 ;
63633: LD_ADDR_VAR 0 2
63637: PUSH
63638: LD_VAR 0 1
63642: PUSH
63643: LD_INT 1
63645: PLUS
63646: ST_TO_ADDR
// end ;
63647: LD_VAR 0 2
63651: RET
// export function Dec ( value ) ; begin
63652: LD_INT 0
63654: PPUSH
// result := value - 1 ;
63655: LD_ADDR_VAR 0 2
63659: PUSH
63660: LD_VAR 0 1
63664: PUSH
63665: LD_INT 1
63667: MINUS
63668: ST_TO_ADDR
// end ;
63669: LD_VAR 0 2
63673: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63674: LD_INT 0
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
63681: PPUSH
63682: PPUSH
63683: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63684: LD_VAR 0 1
63688: PPUSH
63689: LD_VAR 0 2
63693: PPUSH
63694: CALL_OW 488
63698: NOT
63699: PUSH
63700: LD_VAR 0 3
63704: PPUSH
63705: LD_VAR 0 4
63709: PPUSH
63710: CALL_OW 488
63714: NOT
63715: OR
63716: IFFALSE 63729
// begin result := - 1 ;
63718: LD_ADDR_VAR 0 5
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: ST_TO_ADDR
// exit ;
63727: GO 63964
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63729: LD_ADDR_VAR 0 12
63733: PUSH
63734: LD_VAR 0 1
63738: PPUSH
63739: LD_VAR 0 2
63743: PPUSH
63744: LD_VAR 0 3
63748: PPUSH
63749: LD_VAR 0 4
63753: PPUSH
63754: CALL 62814 0 4
63758: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63759: LD_ADDR_VAR 0 11
63763: PUSH
63764: LD_VAR 0 1
63768: PPUSH
63769: LD_VAR 0 2
63773: PPUSH
63774: LD_VAR 0 12
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PPUSH
63783: LD_VAR 0 12
63787: PUSH
63788: LD_INT 2
63790: ARRAY
63791: PPUSH
63792: CALL_OW 298
63796: ST_TO_ADDR
// distance := 9999 ;
63797: LD_ADDR_VAR 0 10
63801: PUSH
63802: LD_INT 9999
63804: ST_TO_ADDR
// for i := 0 to 5 do
63805: LD_ADDR_VAR 0 6
63809: PUSH
63810: DOUBLE
63811: LD_INT 0
63813: DEC
63814: ST_TO_ADDR
63815: LD_INT 5
63817: PUSH
63818: FOR_TO
63819: IFFALSE 63962
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63821: LD_ADDR_VAR 0 7
63825: PUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: LD_VAR 0 6
63835: PPUSH
63836: LD_VAR 0 11
63840: PPUSH
63841: CALL_OW 272
63845: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63846: LD_ADDR_VAR 0 8
63850: PUSH
63851: LD_VAR 0 2
63855: PPUSH
63856: LD_VAR 0 6
63860: PPUSH
63861: LD_VAR 0 11
63865: PPUSH
63866: CALL_OW 273
63870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63871: LD_VAR 0 7
63875: PPUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: CALL_OW 488
63885: NOT
63886: IFFALSE 63890
// continue ;
63888: GO 63818
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63890: LD_ADDR_VAR 0 9
63894: PUSH
63895: LD_VAR 0 12
63899: PUSH
63900: LD_INT 1
63902: ARRAY
63903: PPUSH
63904: LD_VAR 0 12
63908: PUSH
63909: LD_INT 2
63911: ARRAY
63912: PPUSH
63913: LD_VAR 0 7
63917: PPUSH
63918: LD_VAR 0 8
63922: PPUSH
63923: CALL_OW 298
63927: ST_TO_ADDR
// if tmp < distance then
63928: LD_VAR 0 9
63932: PUSH
63933: LD_VAR 0 10
63937: LESS
63938: IFFALSE 63960
// begin result := i ;
63940: LD_ADDR_VAR 0 5
63944: PUSH
63945: LD_VAR 0 6
63949: ST_TO_ADDR
// distance := tmp ;
63950: LD_ADDR_VAR 0 10
63954: PUSH
63955: LD_VAR 0 9
63959: ST_TO_ADDR
// end ; end ;
63960: GO 63818
63962: POP
63963: POP
// end ;
63964: LD_VAR 0 5
63968: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63969: LD_INT 0
63971: PPUSH
63972: PPUSH
// if not driver or not IsInUnit ( driver ) then
63973: LD_VAR 0 1
63977: NOT
63978: PUSH
63979: LD_VAR 0 1
63983: PPUSH
63984: CALL_OW 310
63988: NOT
63989: OR
63990: IFFALSE 63994
// exit ;
63992: GO 64084
// vehicle := IsInUnit ( driver ) ;
63994: LD_ADDR_VAR 0 3
63998: PUSH
63999: LD_VAR 0 1
64003: PPUSH
64004: CALL_OW 310
64008: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64009: LD_VAR 0 1
64013: PPUSH
64014: LD_STRING \
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: PUSH
64044: LD_STRING E
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: LD_VAR 0 3
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PPUSH
64080: CALL_OW 446
// end ;
64084: LD_VAR 0 2
64088: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64089: LD_INT 0
64091: PPUSH
64092: PPUSH
// if not driver or not IsInUnit ( driver ) then
64093: LD_VAR 0 1
64097: NOT
64098: PUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 310
64108: NOT
64109: OR
64110: IFFALSE 64114
// exit ;
64112: GO 64204
// vehicle := IsInUnit ( driver ) ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 1
64123: PPUSH
64124: CALL_OW 310
64128: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64129: LD_VAR 0 1
64133: PPUSH
64134: LD_STRING \
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_STRING E
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_VAR 0 3
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PPUSH
64200: CALL_OW 447
// end ;
64204: LD_VAR 0 2
64208: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64209: LD_INT 0
64211: PPUSH
64212: PPUSH
64213: PPUSH
// tmp := [ ] ;
64214: LD_ADDR_VAR 0 5
64218: PUSH
64219: EMPTY
64220: ST_TO_ADDR
// for i in units do
64221: LD_ADDR_VAR 0 4
64225: PUSH
64226: LD_VAR 0 1
64230: PUSH
64231: FOR_IN
64232: IFFALSE 64270
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64234: LD_ADDR_VAR 0 5
64238: PUSH
64239: LD_VAR 0 5
64243: PPUSH
64244: LD_VAR 0 5
64248: PUSH
64249: LD_INT 1
64251: PLUS
64252: PPUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: CALL_OW 256
64262: PPUSH
64263: CALL_OW 2
64267: ST_TO_ADDR
64268: GO 64231
64270: POP
64271: POP
// if not tmp then
64272: LD_VAR 0 5
64276: NOT
64277: IFFALSE 64281
// exit ;
64279: GO 64329
// if asc then
64281: LD_VAR 0 2
64285: IFFALSE 64309
// result := SortListByListAsc ( units , tmp ) else
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_VAR 0 1
64296: PPUSH
64297: LD_VAR 0 5
64301: PPUSH
64302: CALL_OW 76
64306: ST_TO_ADDR
64307: GO 64329
// result := SortListByListDesc ( units , tmp ) ;
64309: LD_ADDR_VAR 0 3
64313: PUSH
64314: LD_VAR 0 1
64318: PPUSH
64319: LD_VAR 0 5
64323: PPUSH
64324: CALL_OW 77
64328: ST_TO_ADDR
// end ;
64329: LD_VAR 0 3
64333: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64334: LD_INT 0
64336: PPUSH
64337: PPUSH
// task := GetTaskList ( mech ) ;
64338: LD_ADDR_VAR 0 4
64342: PUSH
64343: LD_VAR 0 1
64347: PPUSH
64348: CALL_OW 437
64352: ST_TO_ADDR
// if not task then
64353: LD_VAR 0 4
64357: NOT
64358: IFFALSE 64362
// exit ;
64360: GO 64404
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64362: LD_ADDR_VAR 0 3
64366: PUSH
64367: LD_VAR 0 4
64371: PUSH
64372: LD_INT 1
64374: ARRAY
64375: PUSH
64376: LD_INT 1
64378: ARRAY
64379: PUSH
64380: LD_STRING r
64382: EQUAL
64383: PUSH
64384: LD_VAR 0 4
64388: PUSH
64389: LD_INT 1
64391: ARRAY
64392: PUSH
64393: LD_INT 4
64395: ARRAY
64396: PUSH
64397: LD_VAR 0 2
64401: EQUAL
64402: AND
64403: ST_TO_ADDR
// end ;
64404: LD_VAR 0 3
64408: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64409: LD_INT 0
64411: PPUSH
// SetDir ( unit , d ) ;
64412: LD_VAR 0 1
64416: PPUSH
64417: LD_VAR 0 4
64421: PPUSH
64422: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64426: LD_VAR 0 1
64430: PPUSH
64431: LD_VAR 0 2
64435: PPUSH
64436: LD_VAR 0 3
64440: PPUSH
64441: LD_VAR 0 5
64445: PPUSH
64446: CALL_OW 48
// end ;
64450: LD_VAR 0 6
64454: RET
// export function ToNaturalNumber ( number ) ; begin
64455: LD_INT 0
64457: PPUSH
// result := number div 1 ;
64458: LD_ADDR_VAR 0 2
64462: PUSH
64463: LD_VAR 0 1
64467: PUSH
64468: LD_INT 1
64470: DIV
64471: ST_TO_ADDR
// if number < 0 then
64472: LD_VAR 0 1
64476: PUSH
64477: LD_INT 0
64479: LESS
64480: IFFALSE 64490
// result := 0 ;
64482: LD_ADDR_VAR 0 2
64486: PUSH
64487: LD_INT 0
64489: ST_TO_ADDR
// end ;
64490: LD_VAR 0 2
64494: RET
// export function SortByClass ( units , class ) ; var un ; begin
64495: LD_INT 0
64497: PPUSH
64498: PPUSH
// if not units or not class then
64499: LD_VAR 0 1
64503: NOT
64504: PUSH
64505: LD_VAR 0 2
64509: NOT
64510: OR
64511: IFFALSE 64515
// exit ;
64513: GO 64610
// result := [ ] ;
64515: LD_ADDR_VAR 0 3
64519: PUSH
64520: EMPTY
64521: ST_TO_ADDR
// for un in units do
64522: LD_ADDR_VAR 0 4
64526: PUSH
64527: LD_VAR 0 1
64531: PUSH
64532: FOR_IN
64533: IFFALSE 64608
// if GetClass ( un ) = class then
64535: LD_VAR 0 4
64539: PPUSH
64540: CALL_OW 257
64544: PUSH
64545: LD_VAR 0 2
64549: EQUAL
64550: IFFALSE 64577
// result := Insert ( result , 1 , un ) else
64552: LD_ADDR_VAR 0 3
64556: PUSH
64557: LD_VAR 0 3
64561: PPUSH
64562: LD_INT 1
64564: PPUSH
64565: LD_VAR 0 4
64569: PPUSH
64570: CALL_OW 2
64574: ST_TO_ADDR
64575: GO 64606
// result := Replace ( result , result + 1 , un ) ;
64577: LD_ADDR_VAR 0 3
64581: PUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_VAR 0 3
64591: PUSH
64592: LD_INT 1
64594: PLUS
64595: PPUSH
64596: LD_VAR 0 4
64600: PPUSH
64601: CALL_OW 1
64605: ST_TO_ADDR
64606: GO 64532
64608: POP
64609: POP
// end ;
64610: LD_VAR 0 3
64614: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64615: LD_INT 0
64617: PPUSH
64618: PPUSH
64619: PPUSH
64620: PPUSH
64621: PPUSH
64622: PPUSH
64623: PPUSH
// result := [ ] ;
64624: LD_ADDR_VAR 0 4
64628: PUSH
64629: EMPTY
64630: ST_TO_ADDR
// if x - r < 0 then
64631: LD_VAR 0 1
64635: PUSH
64636: LD_VAR 0 3
64640: MINUS
64641: PUSH
64642: LD_INT 0
64644: LESS
64645: IFFALSE 64657
// min_x := 0 else
64647: LD_ADDR_VAR 0 8
64651: PUSH
64652: LD_INT 0
64654: ST_TO_ADDR
64655: GO 64673
// min_x := x - r ;
64657: LD_ADDR_VAR 0 8
64661: PUSH
64662: LD_VAR 0 1
64666: PUSH
64667: LD_VAR 0 3
64671: MINUS
64672: ST_TO_ADDR
// if y - r < 0 then
64673: LD_VAR 0 2
64677: PUSH
64678: LD_VAR 0 3
64682: MINUS
64683: PUSH
64684: LD_INT 0
64686: LESS
64687: IFFALSE 64699
// min_y := 0 else
64689: LD_ADDR_VAR 0 7
64693: PUSH
64694: LD_INT 0
64696: ST_TO_ADDR
64697: GO 64715
// min_y := y - r ;
64699: LD_ADDR_VAR 0 7
64703: PUSH
64704: LD_VAR 0 2
64708: PUSH
64709: LD_VAR 0 3
64713: MINUS
64714: ST_TO_ADDR
// max_x := x + r ;
64715: LD_ADDR_VAR 0 9
64719: PUSH
64720: LD_VAR 0 1
64724: PUSH
64725: LD_VAR 0 3
64729: PLUS
64730: ST_TO_ADDR
// max_y := y + r ;
64731: LD_ADDR_VAR 0 10
64735: PUSH
64736: LD_VAR 0 2
64740: PUSH
64741: LD_VAR 0 3
64745: PLUS
64746: ST_TO_ADDR
// for _x = min_x to max_x do
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: DOUBLE
64753: LD_VAR 0 8
64757: DEC
64758: ST_TO_ADDR
64759: LD_VAR 0 9
64763: PUSH
64764: FOR_TO
64765: IFFALSE 64866
// for _y = min_y to max_y do
64767: LD_ADDR_VAR 0 6
64771: PUSH
64772: DOUBLE
64773: LD_VAR 0 7
64777: DEC
64778: ST_TO_ADDR
64779: LD_VAR 0 10
64783: PUSH
64784: FOR_TO
64785: IFFALSE 64862
// begin if not ValidHex ( _x , _y ) then
64787: LD_VAR 0 5
64791: PPUSH
64792: LD_VAR 0 6
64796: PPUSH
64797: CALL_OW 488
64801: NOT
64802: IFFALSE 64806
// continue ;
64804: GO 64784
// if GetResourceTypeXY ( _x , _y ) then
64806: LD_VAR 0 5
64810: PPUSH
64811: LD_VAR 0 6
64815: PPUSH
64816: CALL_OW 283
64820: IFFALSE 64860
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64822: LD_ADDR_VAR 0 4
64826: PUSH
64827: LD_VAR 0 4
64831: PPUSH
64832: LD_VAR 0 4
64836: PUSH
64837: LD_INT 1
64839: PLUS
64840: PPUSH
64841: LD_VAR 0 5
64845: PUSH
64846: LD_VAR 0 6
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PPUSH
64855: CALL_OW 1
64859: ST_TO_ADDR
// end ;
64860: GO 64784
64862: POP
64863: POP
64864: GO 64764
64866: POP
64867: POP
// end ;
64868: LD_VAR 0 4
64872: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
64877: PPUSH
64878: PPUSH
64879: PPUSH
64880: PPUSH
64881: PPUSH
64882: PPUSH
// if not units then
64883: LD_VAR 0 1
64887: NOT
64888: IFFALSE 64892
// exit ;
64890: GO 65416
// result := UnitFilter ( units , [ f_ok ] ) ;
64892: LD_ADDR_VAR 0 3
64896: PUSH
64897: LD_VAR 0 1
64901: PPUSH
64902: LD_INT 50
64904: PUSH
64905: EMPTY
64906: LIST
64907: PPUSH
64908: CALL_OW 72
64912: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64913: LD_ADDR_VAR 0 8
64917: PUSH
64918: LD_VAR 0 1
64922: PUSH
64923: LD_INT 1
64925: ARRAY
64926: PPUSH
64927: CALL_OW 255
64931: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64932: LD_ADDR_VAR 0 10
64936: PUSH
64937: LD_INT 29
64939: PUSH
64940: LD_INT 91
64942: PUSH
64943: LD_INT 49
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: ST_TO_ADDR
// if not result then
64951: LD_VAR 0 3
64955: NOT
64956: IFFALSE 64960
// exit ;
64958: GO 65416
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64960: LD_ADDR_VAR 0 5
64964: PUSH
64965: LD_INT 81
64967: PUSH
64968: LD_VAR 0 8
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PPUSH
64977: CALL_OW 69
64981: ST_TO_ADDR
// for i in result do
64982: LD_ADDR_VAR 0 4
64986: PUSH
64987: LD_VAR 0 3
64991: PUSH
64992: FOR_IN
64993: IFFALSE 65414
// begin tag := GetTag ( i ) + 1 ;
64995: LD_ADDR_VAR 0 9
64999: PUSH
65000: LD_VAR 0 4
65004: PPUSH
65005: CALL_OW 110
65009: PUSH
65010: LD_INT 1
65012: PLUS
65013: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65014: LD_ADDR_VAR 0 7
65018: PUSH
65019: LD_VAR 0 4
65023: PPUSH
65024: CALL_OW 250
65028: PPUSH
65029: LD_VAR 0 4
65033: PPUSH
65034: CALL_OW 251
65038: PPUSH
65039: LD_INT 6
65041: PPUSH
65042: CALL 64615 0 3
65046: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65047: LD_VAR 0 4
65051: PPUSH
65052: CALL_OW 247
65056: PUSH
65057: LD_INT 2
65059: EQUAL
65060: PUSH
65061: LD_VAR 0 7
65065: AND
65066: PUSH
65067: LD_VAR 0 4
65071: PPUSH
65072: CALL_OW 264
65076: PUSH
65077: LD_VAR 0 10
65081: IN
65082: NOT
65083: AND
65084: IFFALSE 65123
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65086: LD_VAR 0 4
65090: PPUSH
65091: LD_VAR 0 7
65095: PUSH
65096: LD_INT 1
65098: ARRAY
65099: PUSH
65100: LD_INT 1
65102: ARRAY
65103: PPUSH
65104: LD_VAR 0 7
65108: PUSH
65109: LD_INT 1
65111: ARRAY
65112: PUSH
65113: LD_INT 2
65115: ARRAY
65116: PPUSH
65117: CALL_OW 116
65121: GO 65412
// if path > tag then
65123: LD_VAR 0 2
65127: PUSH
65128: LD_VAR 0 9
65132: GREATER
65133: IFFALSE 65341
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65135: LD_ADDR_VAR 0 6
65139: PUSH
65140: LD_VAR 0 5
65144: PPUSH
65145: LD_INT 91
65147: PUSH
65148: LD_VAR 0 4
65152: PUSH
65153: LD_INT 8
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: LIST
65160: PPUSH
65161: CALL_OW 72
65165: ST_TO_ADDR
// if nearEnemy then
65166: LD_VAR 0 6
65170: IFFALSE 65239
// begin if GetWeapon ( i ) = ru_time_lapser then
65172: LD_VAR 0 4
65176: PPUSH
65177: CALL_OW 264
65181: PUSH
65182: LD_INT 49
65184: EQUAL
65185: IFFALSE 65213
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65187: LD_VAR 0 4
65191: PPUSH
65192: LD_VAR 0 6
65196: PPUSH
65197: LD_VAR 0 4
65201: PPUSH
65202: CALL_OW 74
65206: PPUSH
65207: CALL_OW 112
65211: GO 65237
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65213: LD_VAR 0 4
65217: PPUSH
65218: LD_VAR 0 6
65222: PPUSH
65223: LD_VAR 0 4
65227: PPUSH
65228: CALL_OW 74
65232: PPUSH
65233: CALL_OW 115
// end else
65237: GO 65339
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65239: LD_VAR 0 4
65243: PPUSH
65244: LD_VAR 0 2
65248: PUSH
65249: LD_VAR 0 9
65253: ARRAY
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PPUSH
65259: LD_VAR 0 2
65263: PUSH
65264: LD_VAR 0 9
65268: ARRAY
65269: PUSH
65270: LD_INT 2
65272: ARRAY
65273: PPUSH
65274: CALL_OW 297
65278: PUSH
65279: LD_INT 6
65281: GREATER
65282: IFFALSE 65325
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65284: LD_VAR 0 4
65288: PPUSH
65289: LD_VAR 0 2
65293: PUSH
65294: LD_VAR 0 9
65298: ARRAY
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: PPUSH
65304: LD_VAR 0 2
65308: PUSH
65309: LD_VAR 0 9
65313: ARRAY
65314: PUSH
65315: LD_INT 2
65317: ARRAY
65318: PPUSH
65319: CALL_OW 114
65323: GO 65339
// SetTag ( i , tag ) ;
65325: LD_VAR 0 4
65329: PPUSH
65330: LD_VAR 0 9
65334: PPUSH
65335: CALL_OW 109
// end else
65339: GO 65412
// if enemy then
65341: LD_VAR 0 5
65345: IFFALSE 65412
// begin if GetWeapon ( i ) = ru_time_lapser then
65347: LD_VAR 0 4
65351: PPUSH
65352: CALL_OW 264
65356: PUSH
65357: LD_INT 49
65359: EQUAL
65360: IFFALSE 65388
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65362: LD_VAR 0 4
65366: PPUSH
65367: LD_VAR 0 5
65371: PPUSH
65372: LD_VAR 0 4
65376: PPUSH
65377: CALL_OW 74
65381: PPUSH
65382: CALL_OW 112
65386: GO 65412
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65388: LD_VAR 0 4
65392: PPUSH
65393: LD_VAR 0 5
65397: PPUSH
65398: LD_VAR 0 4
65402: PPUSH
65403: CALL_OW 74
65407: PPUSH
65408: CALL_OW 115
// end ; end ;
65412: GO 64992
65414: POP
65415: POP
// end ;
65416: LD_VAR 0 3
65420: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65421: LD_INT 0
65423: PPUSH
65424: PPUSH
65425: PPUSH
// if not unit or IsInUnit ( unit ) then
65426: LD_VAR 0 1
65430: NOT
65431: PUSH
65432: LD_VAR 0 1
65436: PPUSH
65437: CALL_OW 310
65441: OR
65442: IFFALSE 65446
// exit ;
65444: GO 65537
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65446: LD_ADDR_VAR 0 4
65450: PUSH
65451: LD_VAR 0 1
65455: PPUSH
65456: CALL_OW 250
65460: PPUSH
65461: LD_VAR 0 2
65465: PPUSH
65466: LD_INT 1
65468: PPUSH
65469: CALL_OW 272
65473: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65474: LD_ADDR_VAR 0 5
65478: PUSH
65479: LD_VAR 0 1
65483: PPUSH
65484: CALL_OW 251
65488: PPUSH
65489: LD_VAR 0 2
65493: PPUSH
65494: LD_INT 1
65496: PPUSH
65497: CALL_OW 273
65501: ST_TO_ADDR
// if ValidHex ( x , y ) then
65502: LD_VAR 0 4
65506: PPUSH
65507: LD_VAR 0 5
65511: PPUSH
65512: CALL_OW 488
65516: IFFALSE 65537
// ComTurnXY ( unit , x , y ) ;
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 4
65527: PPUSH
65528: LD_VAR 0 5
65532: PPUSH
65533: CALL_OW 118
// end ;
65537: LD_VAR 0 3
65541: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65542: LD_INT 0
65544: PPUSH
65545: PPUSH
// result := false ;
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: LD_INT 0
65553: ST_TO_ADDR
// if not units then
65554: LD_VAR 0 2
65558: NOT
65559: IFFALSE 65563
// exit ;
65561: GO 65608
// for i in units do
65563: LD_ADDR_VAR 0 4
65567: PUSH
65568: LD_VAR 0 2
65572: PUSH
65573: FOR_IN
65574: IFFALSE 65606
// if See ( side , i ) then
65576: LD_VAR 0 1
65580: PPUSH
65581: LD_VAR 0 4
65585: PPUSH
65586: CALL_OW 292
65590: IFFALSE 65604
// begin result := true ;
65592: LD_ADDR_VAR 0 3
65596: PUSH
65597: LD_INT 1
65599: ST_TO_ADDR
// exit ;
65600: POP
65601: POP
65602: GO 65608
// end ;
65604: GO 65573
65606: POP
65607: POP
// end ;
65608: LD_VAR 0 3
65612: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65613: LD_INT 0
65615: PPUSH
65616: PPUSH
65617: PPUSH
65618: PPUSH
// if not unit or not points then
65619: LD_VAR 0 1
65623: NOT
65624: PUSH
65625: LD_VAR 0 2
65629: NOT
65630: OR
65631: IFFALSE 65635
// exit ;
65633: GO 65725
// dist := 99999 ;
65635: LD_ADDR_VAR 0 5
65639: PUSH
65640: LD_INT 99999
65642: ST_TO_ADDR
// for i in points do
65643: LD_ADDR_VAR 0 4
65647: PUSH
65648: LD_VAR 0 2
65652: PUSH
65653: FOR_IN
65654: IFFALSE 65723
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65656: LD_ADDR_VAR 0 6
65660: PUSH
65661: LD_VAR 0 1
65665: PPUSH
65666: LD_VAR 0 4
65670: PUSH
65671: LD_INT 1
65673: ARRAY
65674: PPUSH
65675: LD_VAR 0 4
65679: PUSH
65680: LD_INT 2
65682: ARRAY
65683: PPUSH
65684: CALL_OW 297
65688: ST_TO_ADDR
// if tmpDist < dist then
65689: LD_VAR 0 6
65693: PUSH
65694: LD_VAR 0 5
65698: LESS
65699: IFFALSE 65721
// begin result := i ;
65701: LD_ADDR_VAR 0 3
65705: PUSH
65706: LD_VAR 0 4
65710: ST_TO_ADDR
// dist := tmpDist ;
65711: LD_ADDR_VAR 0 5
65715: PUSH
65716: LD_VAR 0 6
65720: ST_TO_ADDR
// end ; end ;
65721: GO 65653
65723: POP
65724: POP
// end ;
65725: LD_VAR 0 3
65729: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65730: LD_INT 0
65732: PPUSH
// uc_side := side ;
65733: LD_ADDR_OWVAR 20
65737: PUSH
65738: LD_VAR 0 1
65742: ST_TO_ADDR
// uc_nation := 3 ;
65743: LD_ADDR_OWVAR 21
65747: PUSH
65748: LD_INT 3
65750: ST_TO_ADDR
// vc_chassis := 25 ;
65751: LD_ADDR_OWVAR 37
65755: PUSH
65756: LD_INT 25
65758: ST_TO_ADDR
// vc_engine := engine_siberite ;
65759: LD_ADDR_OWVAR 39
65763: PUSH
65764: LD_INT 3
65766: ST_TO_ADDR
// vc_control := control_computer ;
65767: LD_ADDR_OWVAR 38
65771: PUSH
65772: LD_INT 3
65774: ST_TO_ADDR
// vc_weapon := 59 ;
65775: LD_ADDR_OWVAR 40
65779: PUSH
65780: LD_INT 59
65782: ST_TO_ADDR
// result := CreateVehicle ;
65783: LD_ADDR_VAR 0 5
65787: PUSH
65788: CALL_OW 45
65792: ST_TO_ADDR
// SetDir ( result , d ) ;
65793: LD_VAR 0 5
65797: PPUSH
65798: LD_VAR 0 4
65802: PPUSH
65803: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65807: LD_VAR 0 5
65811: PPUSH
65812: LD_VAR 0 2
65816: PPUSH
65817: LD_VAR 0 3
65821: PPUSH
65822: LD_INT 0
65824: PPUSH
65825: CALL_OW 48
// end ;
65829: LD_VAR 0 5
65833: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65834: LD_INT 0
65836: PPUSH
65837: PPUSH
65838: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65839: LD_ADDR_VAR 0 2
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65862: LD_VAR 0 1
65866: NOT
65867: PUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: CALL_OW 264
65877: PUSH
65878: LD_INT 12
65880: PUSH
65881: LD_INT 51
65883: PUSH
65884: LD_INT 32
65886: PUSH
65887: LD_INT 89
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: IN
65896: NOT
65897: OR
65898: IFFALSE 65902
// exit ;
65900: GO 66000
// for i := 1 to 3 do
65902: LD_ADDR_VAR 0 3
65906: PUSH
65907: DOUBLE
65908: LD_INT 1
65910: DEC
65911: ST_TO_ADDR
65912: LD_INT 3
65914: PUSH
65915: FOR_TO
65916: IFFALSE 65998
// begin tmp := GetCargo ( cargo , i ) ;
65918: LD_ADDR_VAR 0 4
65922: PUSH
65923: LD_VAR 0 1
65927: PPUSH
65928: LD_VAR 0 3
65932: PPUSH
65933: CALL_OW 289
65937: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65938: LD_ADDR_VAR 0 2
65942: PUSH
65943: LD_VAR 0 2
65947: PPUSH
65948: LD_VAR 0 3
65952: PPUSH
65953: LD_VAR 0 4
65957: PPUSH
65958: CALL_OW 1
65962: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65963: LD_ADDR_VAR 0 2
65967: PUSH
65968: LD_VAR 0 2
65972: PPUSH
65973: LD_INT 4
65975: PPUSH
65976: LD_VAR 0 2
65980: PUSH
65981: LD_INT 4
65983: ARRAY
65984: PUSH
65985: LD_VAR 0 4
65989: PLUS
65990: PPUSH
65991: CALL_OW 1
65995: ST_TO_ADDR
// end ;
65996: GO 65915
65998: POP
65999: POP
// end ;
66000: LD_VAR 0 2
66004: RET
// export function Length ( array ) ; begin
66005: LD_INT 0
66007: PPUSH
// result := array + 0 ;
66008: LD_ADDR_VAR 0 2
66012: PUSH
66013: LD_VAR 0 1
66017: PUSH
66018: LD_INT 0
66020: PLUS
66021: ST_TO_ADDR
// end ;
66022: LD_VAR 0 2
66026: RET
// export function PrepareArray ( array ) ; begin
66027: LD_INT 0
66029: PPUSH
// result := array diff 0 ;
66030: LD_ADDR_VAR 0 2
66034: PUSH
66035: LD_VAR 0 1
66039: PUSH
66040: LD_INT 0
66042: DIFF
66043: ST_TO_ADDR
// if not result [ 1 ] then
66044: LD_VAR 0 2
66048: PUSH
66049: LD_INT 1
66051: ARRAY
66052: NOT
66053: IFFALSE 66073
// result := Delete ( result , 1 ) ;
66055: LD_ADDR_VAR 0 2
66059: PUSH
66060: LD_VAR 0 2
66064: PPUSH
66065: LD_INT 1
66067: PPUSH
66068: CALL_OW 3
66072: ST_TO_ADDR
// end ;
66073: LD_VAR 0 2
66077: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66078: LD_INT 0
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
// sibRocketRange := 25 ;
66084: LD_ADDR_VAR 0 6
66088: PUSH
66089: LD_INT 25
66091: ST_TO_ADDR
// result := false ;
66092: LD_ADDR_VAR 0 4
66096: PUSH
66097: LD_INT 0
66099: ST_TO_ADDR
// for i := 0 to 5 do
66100: LD_ADDR_VAR 0 5
66104: PUSH
66105: DOUBLE
66106: LD_INT 0
66108: DEC
66109: ST_TO_ADDR
66110: LD_INT 5
66112: PUSH
66113: FOR_TO
66114: IFFALSE 66181
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66116: LD_VAR 0 1
66120: PPUSH
66121: LD_VAR 0 5
66125: PPUSH
66126: LD_VAR 0 6
66130: PPUSH
66131: CALL_OW 272
66135: PPUSH
66136: LD_VAR 0 2
66140: PPUSH
66141: LD_VAR 0 5
66145: PPUSH
66146: LD_VAR 0 6
66150: PPUSH
66151: CALL_OW 273
66155: PPUSH
66156: LD_VAR 0 3
66160: PPUSH
66161: CALL_OW 309
66165: IFFALSE 66179
// begin result := true ;
66167: LD_ADDR_VAR 0 4
66171: PUSH
66172: LD_INT 1
66174: ST_TO_ADDR
// exit ;
66175: POP
66176: POP
66177: GO 66183
// end ;
66179: GO 66113
66181: POP
66182: POP
// end ;
66183: LD_VAR 0 4
66187: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66188: LD_INT 0
66190: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66191: LD_VAR 0 1
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_INT 0
66203: PPUSH
66204: LD_INT 0
66206: PPUSH
66207: LD_INT 1
66209: PPUSH
66210: LD_INT 0
66212: PPUSH
66213: CALL_OW 587
// end ; end_of_file
66217: LD_VAR 0 3
66221: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66222: LD_VAR 0 1
66226: PPUSH
66227: LD_VAR 0 2
66231: PPUSH
66232: LD_VAR 0 3
66236: PPUSH
66237: LD_VAR 0 4
66241: PPUSH
66242: LD_VAR 0 5
66246: PPUSH
66247: LD_VAR 0 6
66251: PPUSH
66252: CALL 4710 0 6
// end ;
66256: PPOPN 6
66258: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66259: LD_INT 0
66261: PPUSH
// begin if not units then
66262: LD_VAR 0 1
66266: NOT
66267: IFFALSE 66271
// exit ;
66269: GO 66271
// end ;
66271: PPOPN 7
66273: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66274: CALL 4614 0 0
// end ;
66278: PPOPN 1
66280: END
