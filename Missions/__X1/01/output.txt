// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 65090 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 65090 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// export globalGameSaveCounter ; every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// every 0 0$1 do
4577: GO 4579
4579: DISABLE
// begin globalGameSaveCounter := 0 ;
4580: LD_ADDR_EXP 23
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4588: LD_STRING setGameSaveCounter(0)
4590: PPUSH
4591: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4595: LD_STRING initStreamRollete();
4597: PPUSH
4598: CALL_OW 559
// InitStreamMode ;
4602: CALL 5928 0 0
// DefineStreamItems ( false ) ;
4606: LD_INT 0
4608: PPUSH
4609: CALL 6392 0 1
// end ;
4613: END
// export function SOS_MapStart ( ) ; begin
4614: LD_INT 0
4616: PPUSH
// if streamModeActive then
4617: LD_EXP 24
4621: IFFALSE 4630
// DefineStreamItems ( true ) ;
4623: LD_INT 1
4625: PPUSH
4626: CALL 6392 0 1
// UpdateLuaVariables ( ) ;
4630: CALL 4647 0 0
// UpdateFactoryWaypoints ( ) ;
4634: CALL 19261 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4638: CALL 19518 0 0
// end ;
4642: LD_VAR 0 1
4646: RET
// function UpdateLuaVariables ( ) ; begin
4647: LD_INT 0
4649: PPUSH
// if globalGameSaveCounter then
4650: LD_EXP 23
4654: IFFALSE 4688
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4656: LD_ADDR_EXP 23
4660: PUSH
4661: LD_EXP 23
4665: PPUSH
4666: CALL 64311 0 1
4670: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4671: LD_STRING setGameSaveCounter(
4673: PUSH
4674: LD_EXP 23
4678: STR
4679: PUSH
4680: LD_STRING )
4682: STR
4683: PPUSH
4684: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4688: LD_STRING setGameDifficulty(
4690: PUSH
4691: LD_OWVAR 67
4695: STR
4696: PUSH
4697: LD_STRING )
4699: STR
4700: PPUSH
4701: CALL_OW 559
// end ;
4705: LD_VAR 0 1
4709: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4710: LD_INT 0
4712: PPUSH
// if p2 = stream_mode then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_INT 100
4720: EQUAL
4721: IFFALSE 5724
// begin if not StreamModeActive then
4723: LD_EXP 24
4727: NOT
4728: IFFALSE 4738
// StreamModeActive := true ;
4730: LD_ADDR_EXP 24
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 0 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 0
4745: EQUAL
4746: IFFALSE 4752
// InitStreamMode ;
4748: CALL 5928 0 0
// if p3 = 1 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 1
4759: EQUAL
4760: IFFALSE 4770
// sRocket := true ;
4762: LD_ADDR_EXP 29
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 2 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 2
4777: EQUAL
4778: IFFALSE 4788
// sSpeed := true ;
4780: LD_ADDR_EXP 28
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 3 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 3
4795: EQUAL
4796: IFFALSE 4806
// sEngine := true ;
4798: LD_ADDR_EXP 30
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 4 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 4
4813: EQUAL
4814: IFFALSE 4824
// sSpec := true ;
4816: LD_ADDR_EXP 27
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 5 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 5
4831: EQUAL
4832: IFFALSE 4842
// sLevel := true ;
4834: LD_ADDR_EXP 31
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 6 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 6
4849: EQUAL
4850: IFFALSE 4860
// sArmoury := true ;
4852: LD_ADDR_EXP 32
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 7 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 7
4867: EQUAL
4868: IFFALSE 4878
// sRadar := true ;
4870: LD_ADDR_EXP 33
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 8 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 8
4885: EQUAL
4886: IFFALSE 4896
// sBunker := true ;
4888: LD_ADDR_EXP 34
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 9 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 9
4903: EQUAL
4904: IFFALSE 4914
// sHack := true ;
4906: LD_ADDR_EXP 35
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 10 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 10
4921: EQUAL
4922: IFFALSE 4932
// sFire := true ;
4924: LD_ADDR_EXP 36
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 11 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 11
4939: EQUAL
4940: IFFALSE 4950
// sRefresh := true ;
4942: LD_ADDR_EXP 37
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 12 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 12
4957: EQUAL
4958: IFFALSE 4968
// sExp := true ;
4960: LD_ADDR_EXP 38
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 13 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 13
4975: EQUAL
4976: IFFALSE 4986
// sDepot := true ;
4978: LD_ADDR_EXP 39
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 14 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 14
4993: EQUAL
4994: IFFALSE 5004
// sFlag := true ;
4996: LD_ADDR_EXP 40
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 15 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 15
5011: EQUAL
5012: IFFALSE 5022
// sKamikadze := true ;
5014: LD_ADDR_EXP 48
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 16 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 16
5029: EQUAL
5030: IFFALSE 5040
// sTroll := true ;
5032: LD_ADDR_EXP 49
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 17 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 17
5047: EQUAL
5048: IFFALSE 5058
// sSlow := true ;
5050: LD_ADDR_EXP 50
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 18 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 18
5065: EQUAL
5066: IFFALSE 5076
// sLack := true ;
5068: LD_ADDR_EXP 51
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 19 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 19
5083: EQUAL
5084: IFFALSE 5094
// sTank := true ;
5086: LD_ADDR_EXP 53
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 20 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 20
5101: EQUAL
5102: IFFALSE 5112
// sRemote := true ;
5104: LD_ADDR_EXP 54
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 21 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 21
5119: EQUAL
5120: IFFALSE 5130
// sPowell := true ;
5122: LD_ADDR_EXP 55
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 22 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 22
5137: EQUAL
5138: IFFALSE 5148
// sTeleport := true ;
5140: LD_ADDR_EXP 58
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 23 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 23
5155: EQUAL
5156: IFFALSE 5166
// sOilTower := true ;
5158: LD_ADDR_EXP 60
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 24 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 24
5173: EQUAL
5174: IFFALSE 5184
// sShovel := true ;
5176: LD_ADDR_EXP 61
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 25 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 25
5191: EQUAL
5192: IFFALSE 5202
// sSheik := true ;
5194: LD_ADDR_EXP 62
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 26 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 26
5209: EQUAL
5210: IFFALSE 5220
// sEarthquake := true ;
5212: LD_ADDR_EXP 64
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 27 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 27
5227: EQUAL
5228: IFFALSE 5238
// sAI := true ;
5230: LD_ADDR_EXP 65
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 28 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 28
5245: EQUAL
5246: IFFALSE 5256
// sCargo := true ;
5248: LD_ADDR_EXP 68
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 29 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 29
5263: EQUAL
5264: IFFALSE 5274
// sDLaser := true ;
5266: LD_ADDR_EXP 69
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 30 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 30
5281: EQUAL
5282: IFFALSE 5292
// sExchange := true ;
5284: LD_ADDR_EXP 70
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 31 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 31
5299: EQUAL
5300: IFFALSE 5310
// sFac := true ;
5302: LD_ADDR_EXP 71
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 32 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 32
5317: EQUAL
5318: IFFALSE 5328
// sPower := true ;
5320: LD_ADDR_EXP 72
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 33 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 33
5335: EQUAL
5336: IFFALSE 5346
// sRandom := true ;
5338: LD_ADDR_EXP 73
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 34 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 34
5353: EQUAL
5354: IFFALSE 5364
// sShield := true ;
5356: LD_ADDR_EXP 74
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 35 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 35
5371: EQUAL
5372: IFFALSE 5382
// sTime := true ;
5374: LD_ADDR_EXP 75
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 36 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 36
5389: EQUAL
5390: IFFALSE 5400
// sTools := true ;
5392: LD_ADDR_EXP 76
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 101 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 101
5407: EQUAL
5408: IFFALSE 5418
// sSold := true ;
5410: LD_ADDR_EXP 41
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 102 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 102
5425: EQUAL
5426: IFFALSE 5436
// sDiff := true ;
5428: LD_ADDR_EXP 42
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 103 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 103
5443: EQUAL
5444: IFFALSE 5454
// sFog := true ;
5446: LD_ADDR_EXP 45
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 104 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 104
5461: EQUAL
5462: IFFALSE 5472
// sReset := true ;
5464: LD_ADDR_EXP 46
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 105 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 105
5479: EQUAL
5480: IFFALSE 5490
// sSun := true ;
5482: LD_ADDR_EXP 47
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 106 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 106
5497: EQUAL
5498: IFFALSE 5508
// sTiger := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 107 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 107
5515: EQUAL
5516: IFFALSE 5526
// sBomb := true ;
5518: LD_ADDR_EXP 44
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 108 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 108
5533: EQUAL
5534: IFFALSE 5544
// sWound := true ;
5536: LD_ADDR_EXP 52
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 109 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 109
5551: EQUAL
5552: IFFALSE 5562
// sBetray := true ;
5554: LD_ADDR_EXP 56
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 110 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 110
5569: EQUAL
5570: IFFALSE 5580
// sContamin := true ;
5572: LD_ADDR_EXP 57
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 111 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 111
5587: EQUAL
5588: IFFALSE 5598
// sOil := true ;
5590: LD_ADDR_EXP 59
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 112 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 112
5605: EQUAL
5606: IFFALSE 5616
// sStu := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 113 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 113
5623: EQUAL
5624: IFFALSE 5634
// sBazooka := true ;
5626: LD_ADDR_EXP 66
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 114 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 114
5641: EQUAL
5642: IFFALSE 5652
// sMortar := true ;
5644: LD_ADDR_EXP 67
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 115 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 115
5659: EQUAL
5660: IFFALSE 5670
// sRanger := true ;
5662: LD_ADDR_EXP 77
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 116 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 116
5677: EQUAL
5678: IFFALSE 5688
// sComputer := true ;
5680: LD_ADDR_EXP 78
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 117 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 117
5695: EQUAL
5696: IFFALSE 5706
// s30 := true ;
5698: LD_ADDR_EXP 79
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 118 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 118
5713: EQUAL
5714: IFFALSE 5724
// s60 := true ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// end ; if p2 = hack_mode then
5724: LD_VAR 0 2
5728: PUSH
5729: LD_INT 101
5731: EQUAL
5732: IFFALSE 5860
// begin case p3 of 1 :
5734: LD_VAR 0 3
5738: PUSH
5739: LD_INT 1
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackUnlimitedResources ; 2 :
5748: CALL 18007 0 0
5752: GO 5860
5754: LD_INT 2
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackSetLevel10 ; 3 :
5763: CALL 18140 0 0
5767: GO 5860
5769: LD_INT 3
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5777
5775: GO 5784
5777: POP
// hHackSetLevel10YourUnits ; 4 :
5778: CALL 18225 0 0
5782: GO 5860
5784: LD_INT 4
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5799
5792: POP
// hHackInvincible ; 5 :
5793: CALL 18673 0 0
5797: GO 5860
5799: LD_INT 5
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5814
5807: POP
// hHackInvisible ; 6 :
5808: CALL 18784 0 0
5812: GO 5860
5814: LD_INT 6
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5822
5820: GO 5829
5822: POP
// hHackChangeYourSide ; 7 :
5823: CALL 18841 0 0
5827: GO 5860
5829: LD_INT 7
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5844
5837: POP
// hHackChangeUnitSide ; 8 :
5838: CALL 18883 0 0
5842: GO 5860
5844: LD_INT 8
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5859
5852: POP
// hHackFog ; end ;
5853: CALL 18984 0 0
5857: GO 5860
5859: POP
// end ; if p2 = game_save_mode then
5860: LD_VAR 0 2
5864: PUSH
5865: LD_INT 102
5867: EQUAL
5868: IFFALSE 5923
// begin if p3 = 1 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 1
5877: EQUAL
5878: IFFALSE 5890
// globalGameSaveCounter := p4 ;
5880: LD_ADDR_EXP 23
5884: PUSH
5885: LD_VAR 0 4
5889: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 2
5897: EQUAL
5898: PUSH
5899: LD_EXP 23
5903: AND
5904: IFFALSE 5923
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5906: LD_STRING setGameSaveCounter(
5908: PUSH
5909: LD_EXP 23
5913: STR
5914: PUSH
5915: LD_STRING )
5917: STR
5918: PPUSH
5919: CALL_OW 559
// end ; end ;
5923: LD_VAR 0 7
5927: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5928: LD_INT 0
5930: PPUSH
// streamModeActive := false ;
5931: LD_ADDR_EXP 24
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// normalCounter := 36 ;
5939: LD_ADDR_EXP 25
5943: PUSH
5944: LD_INT 36
5946: ST_TO_ADDR
// hardcoreCounter := 18 ;
5947: LD_ADDR_EXP 26
5951: PUSH
5952: LD_INT 18
5954: ST_TO_ADDR
// sRocket := false ;
5955: LD_ADDR_EXP 29
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sSpeed := false ;
5963: LD_ADDR_EXP 28
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sEngine := false ;
5971: LD_ADDR_EXP 30
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sSpec := false ;
5979: LD_ADDR_EXP 27
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sLevel := false ;
5987: LD_ADDR_EXP 31
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sArmoury := false ;
5995: LD_ADDR_EXP 32
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sRadar := false ;
6003: LD_ADDR_EXP 33
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sBunker := false ;
6011: LD_ADDR_EXP 34
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sHack := false ;
6019: LD_ADDR_EXP 35
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sFire := false ;
6027: LD_ADDR_EXP 36
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sRefresh := false ;
6035: LD_ADDR_EXP 37
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sExp := false ;
6043: LD_ADDR_EXP 38
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sDepot := false ;
6051: LD_ADDR_EXP 39
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sFlag := false ;
6059: LD_ADDR_EXP 40
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sKamikadze := false ;
6067: LD_ADDR_EXP 48
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sTroll := false ;
6075: LD_ADDR_EXP 49
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sSlow := false ;
6083: LD_ADDR_EXP 50
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sLack := false ;
6091: LD_ADDR_EXP 51
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sTank := false ;
6099: LD_ADDR_EXP 53
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sRemote := false ;
6107: LD_ADDR_EXP 54
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sPowell := false ;
6115: LD_ADDR_EXP 55
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sTeleport := false ;
6123: LD_ADDR_EXP 58
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sOilTower := false ;
6131: LD_ADDR_EXP 60
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sShovel := false ;
6139: LD_ADDR_EXP 61
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sSheik := false ;
6147: LD_ADDR_EXP 62
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sEarthquake := false ;
6155: LD_ADDR_EXP 64
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sAI := false ;
6163: LD_ADDR_EXP 65
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sCargo := false ;
6171: LD_ADDR_EXP 68
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sDLaser := false ;
6179: LD_ADDR_EXP 69
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sExchange := false ;
6187: LD_ADDR_EXP 70
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sFac := false ;
6195: LD_ADDR_EXP 71
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sPower := false ;
6203: LD_ADDR_EXP 72
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sRandom := false ;
6211: LD_ADDR_EXP 73
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sShield := false ;
6219: LD_ADDR_EXP 74
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sTime := false ;
6227: LD_ADDR_EXP 75
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sTools := false ;
6235: LD_ADDR_EXP 76
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sSold := false ;
6243: LD_ADDR_EXP 41
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sDiff := false ;
6251: LD_ADDR_EXP 42
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sFog := false ;
6259: LD_ADDR_EXP 45
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sReset := false ;
6267: LD_ADDR_EXP 46
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sSun := false ;
6275: LD_ADDR_EXP 47
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sTiger := false ;
6283: LD_ADDR_EXP 43
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sBomb := false ;
6291: LD_ADDR_EXP 44
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sWound := false ;
6299: LD_ADDR_EXP 52
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sBetray := false ;
6307: LD_ADDR_EXP 56
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sContamin := false ;
6315: LD_ADDR_EXP 57
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sOil := false ;
6323: LD_ADDR_EXP 59
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sStu := false ;
6331: LD_ADDR_EXP 63
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sBazooka := false ;
6339: LD_ADDR_EXP 66
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sMortar := false ;
6347: LD_ADDR_EXP 67
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sRanger := false ;
6355: LD_ADDR_EXP 77
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sComputer := false ;
6363: LD_ADDR_EXP 78
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// s30 := false ;
6371: LD_ADDR_EXP 79
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// s60 := false ;
6379: LD_ADDR_EXP 80
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// end ;
6387: LD_VAR 0 1
6391: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
// result := [ ] ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: EMPTY
6407: ST_TO_ADDR
// if campaign_id = 1 then
6408: LD_OWVAR 69
6412: PUSH
6413: LD_INT 1
6415: EQUAL
6416: IFFALSE 9582
// begin case mission_number of 1 :
6418: LD_OWVAR 70
6422: PUSH
6423: LD_INT 1
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6507
6431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 12
6448: PUSH
6449: LD_INT 15
6451: PUSH
6452: LD_INT 16
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_INT 23
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 101
6477: PUSH
6478: LD_INT 102
6480: PUSH
6481: LD_INT 106
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: ST_TO_ADDR
6505: GO 9580
6507: LD_INT 2
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6599
6515: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 11
6529: PUSH
6530: LD_INT 12
6532: PUSH
6533: LD_INT 15
6535: PUSH
6536: LD_INT 16
6538: PUSH
6539: LD_INT 22
6541: PUSH
6542: LD_INT 23
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 101
6561: PUSH
6562: LD_INT 102
6564: PUSH
6565: LD_INT 105
6567: PUSH
6568: LD_INT 106
6570: PUSH
6571: LD_INT 108
6573: PUSH
6574: LD_INT 116
6576: PUSH
6577: LD_INT 117
6579: PUSH
6580: LD_INT 118
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: ST_TO_ADDR
6597: GO 9580
6599: LD_INT 3
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6695
6607: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: LD_INT 11
6624: PUSH
6625: LD_INT 12
6627: PUSH
6628: LD_INT 15
6630: PUSH
6631: LD_INT 16
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 26
6639: PUSH
6640: LD_INT 36
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 101
6657: PUSH
6658: LD_INT 102
6660: PUSH
6661: LD_INT 105
6663: PUSH
6664: LD_INT 106
6666: PUSH
6667: LD_INT 108
6669: PUSH
6670: LD_INT 116
6672: PUSH
6673: LD_INT 117
6675: PUSH
6676: LD_INT 118
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 9580
6695: LD_INT 4
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6799
6703: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 4
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: LD_INT 8
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 15
6729: PUSH
6730: LD_INT 16
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_INT 23
6738: PUSH
6739: LD_INT 26
6741: PUSH
6742: LD_INT 36
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 101
6761: PUSH
6762: LD_INT 102
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 108
6773: PUSH
6774: LD_INT 116
6776: PUSH
6777: LD_INT 117
6779: PUSH
6780: LD_INT 118
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 9580
6799: LD_INT 5
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6919
6807: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: LD_INT 6
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: LD_INT 11
6830: PUSH
6831: LD_INT 12
6833: PUSH
6834: LD_INT 15
6836: PUSH
6837: LD_INT 16
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 23
6845: PUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 26
6851: PUSH
6852: LD_INT 36
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 101
6873: PUSH
6874: LD_INT 102
6876: PUSH
6877: LD_INT 105
6879: PUSH
6880: LD_INT 106
6882: PUSH
6883: LD_INT 108
6885: PUSH
6886: LD_INT 109
6888: PUSH
6889: LD_INT 112
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 9580
6919: LD_INT 6
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 7059
6927: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: LD_INT 6
6944: PUSH
6945: LD_INT 8
6947: PUSH
6948: LD_INT 11
6950: PUSH
6951: LD_INT 12
6953: PUSH
6954: LD_INT 15
6956: PUSH
6957: LD_INT 16
6959: PUSH
6960: LD_INT 20
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: LD_INT 30
6980: PUSH
6981: LD_INT 31
6983: PUSH
6984: LD_INT 32
6986: PUSH
6987: LD_INT 36
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 101
7013: PUSH
7014: LD_INT 102
7016: PUSH
7017: LD_INT 105
7019: PUSH
7020: LD_INT 106
7022: PUSH
7023: LD_INT 108
7025: PUSH
7026: LD_INT 109
7028: PUSH
7029: LD_INT 112
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 9580
7059: LD_INT 7
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7179
7067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 4
7078: PUSH
7079: LD_INT 5
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: LD_INT 11
7087: PUSH
7088: LD_INT 12
7090: PUSH
7091: LD_INT 15
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: LD_INT 20
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 26
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 101
7133: PUSH
7134: LD_INT 102
7136: PUSH
7137: LD_INT 103
7139: PUSH
7140: LD_INT 105
7142: PUSH
7143: LD_INT 106
7145: PUSH
7146: LD_INT 108
7148: PUSH
7149: LD_INT 112
7151: PUSH
7152: LD_INT 116
7154: PUSH
7155: LD_INT 117
7157: PUSH
7158: LD_INT 118
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 9580
7179: LD_INT 8
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7327
7187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7188: LD_ADDR_VAR 0 2
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: LD_INT 6
7204: PUSH
7205: LD_INT 7
7207: PUSH
7208: LD_INT 8
7210: PUSH
7211: LD_INT 11
7213: PUSH
7214: LD_INT 12
7216: PUSH
7217: LD_INT 15
7219: PUSH
7220: LD_INT 16
7222: PUSH
7223: LD_INT 20
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 30
7243: PUSH
7244: LD_INT 31
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 101
7277: PUSH
7278: LD_INT 102
7280: PUSH
7281: LD_INT 103
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 109
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 116
7301: PUSH
7302: LD_INT 117
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9580
7327: LD_INT 9
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7483
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 7
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: LD_INT 11
7361: PUSH
7362: LD_INT 12
7364: PUSH
7365: LD_INT 15
7367: PUSH
7368: LD_INT 16
7370: PUSH
7371: LD_INT 20
7373: PUSH
7374: LD_INT 21
7376: PUSH
7377: LD_INT 22
7379: PUSH
7380: LD_INT 23
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 26
7388: PUSH
7389: LD_INT 28
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 31
7397: PUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 36
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 101
7429: PUSH
7430: LD_INT 102
7432: PUSH
7433: LD_INT 103
7435: PUSH
7436: LD_INT 105
7438: PUSH
7439: LD_INT 106
7441: PUSH
7442: LD_INT 108
7444: PUSH
7445: LD_INT 109
7447: PUSH
7448: LD_INT 112
7450: PUSH
7451: LD_INT 114
7453: PUSH
7454: LD_INT 116
7456: PUSH
7457: LD_INT 117
7459: PUSH
7460: LD_INT 118
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 9580
7483: LD_INT 10
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7491
7489: GO 7687
7491: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7492: LD_ADDR_VAR 0 2
7496: PUSH
7497: LD_INT 2
7499: PUSH
7500: LD_INT 4
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 6
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: LD_INT 12
7526: PUSH
7527: LD_INT 13
7529: PUSH
7530: LD_INT 14
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 17
7541: PUSH
7542: LD_INT 18
7544: PUSH
7545: LD_INT 19
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 23
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 26
7568: PUSH
7569: LD_INT 28
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 31
7577: PUSH
7578: LD_INT 32
7580: PUSH
7581: LD_INT 36
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 101
7617: PUSH
7618: LD_INT 102
7620: PUSH
7621: LD_INT 103
7623: PUSH
7624: LD_INT 104
7626: PUSH
7627: LD_INT 105
7629: PUSH
7630: LD_INT 106
7632: PUSH
7633: LD_INT 107
7635: PUSH
7636: LD_INT 108
7638: PUSH
7639: LD_INT 109
7641: PUSH
7642: LD_INT 110
7644: PUSH
7645: LD_INT 111
7647: PUSH
7648: LD_INT 112
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: ST_TO_ADDR
7685: GO 9580
7687: LD_INT 11
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7899
7695: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 4
7709: PUSH
7710: LD_INT 5
7712: PUSH
7713: LD_INT 6
7715: PUSH
7716: LD_INT 7
7718: PUSH
7719: LD_INT 8
7721: PUSH
7722: LD_INT 9
7724: PUSH
7725: LD_INT 10
7727: PUSH
7728: LD_INT 11
7730: PUSH
7731: LD_INT 12
7733: PUSH
7734: LD_INT 13
7736: PUSH
7737: LD_INT 14
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 17
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 28
7778: PUSH
7779: LD_INT 30
7781: PUSH
7782: LD_INT 31
7784: PUSH
7785: LD_INT 32
7787: PUSH
7788: LD_INT 34
7790: PUSH
7791: LD_INT 36
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 101
7829: PUSH
7830: LD_INT 102
7832: PUSH
7833: LD_INT 103
7835: PUSH
7836: LD_INT 104
7838: PUSH
7839: LD_INT 105
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 108
7850: PUSH
7851: LD_INT 109
7853: PUSH
7854: LD_INT 110
7856: PUSH
7857: LD_INT 111
7859: PUSH
7860: LD_INT 112
7862: PUSH
7863: LD_INT 114
7865: PUSH
7866: LD_INT 116
7868: PUSH
7869: LD_INT 117
7871: PUSH
7872: LD_INT 118
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 9580
7899: LD_INT 12
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8127
7907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7908: LD_ADDR_VAR 0 2
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: LD_INT 6
7930: PUSH
7931: LD_INT 7
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: LD_INT 9
7939: PUSH
7940: LD_INT 10
7942: PUSH
7943: LD_INT 11
7945: PUSH
7946: LD_INT 12
7948: PUSH
7949: LD_INT 13
7951: PUSH
7952: LD_INT 14
7954: PUSH
7955: LD_INT 15
7957: PUSH
7958: LD_INT 16
7960: PUSH
7961: LD_INT 17
7963: PUSH
7964: LD_INT 18
7966: PUSH
7967: LD_INT 19
7969: PUSH
7970: LD_INT 20
7972: PUSH
7973: LD_INT 21
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_INT 23
7981: PUSH
7982: LD_INT 24
7984: PUSH
7985: LD_INT 25
7987: PUSH
7988: LD_INT 26
7990: PUSH
7991: LD_INT 27
7993: PUSH
7994: LD_INT 28
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 31
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 33
8008: PUSH
8009: LD_INT 34
8011: PUSH
8012: LD_INT 36
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 101
8053: PUSH
8054: LD_INT 102
8056: PUSH
8057: LD_INT 103
8059: PUSH
8060: LD_INT 104
8062: PUSH
8063: LD_INT 105
8065: PUSH
8066: LD_INT 106
8068: PUSH
8069: LD_INT 107
8071: PUSH
8072: LD_INT 108
8074: PUSH
8075: LD_INT 109
8077: PUSH
8078: LD_INT 110
8080: PUSH
8081: LD_INT 111
8083: PUSH
8084: LD_INT 112
8086: PUSH
8087: LD_INT 113
8089: PUSH
8090: LD_INT 114
8092: PUSH
8093: LD_INT 116
8095: PUSH
8096: LD_INT 117
8098: PUSH
8099: LD_INT 118
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: ST_TO_ADDR
8125: GO 9580
8127: LD_INT 13
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8343
8135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: LD_INT 5
8155: PUSH
8156: LD_INT 8
8158: PUSH
8159: LD_INT 9
8161: PUSH
8162: LD_INT 10
8164: PUSH
8165: LD_INT 11
8167: PUSH
8168: LD_INT 12
8170: PUSH
8171: LD_INT 14
8173: PUSH
8174: LD_INT 15
8176: PUSH
8177: LD_INT 16
8179: PUSH
8180: LD_INT 17
8182: PUSH
8183: LD_INT 18
8185: PUSH
8186: LD_INT 19
8188: PUSH
8189: LD_INT 20
8191: PUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 24
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 26
8209: PUSH
8210: LD_INT 27
8212: PUSH
8213: LD_INT 28
8215: PUSH
8216: LD_INT 30
8218: PUSH
8219: LD_INT 31
8221: PUSH
8222: LD_INT 32
8224: PUSH
8225: LD_INT 33
8227: PUSH
8228: LD_INT 34
8230: PUSH
8231: LD_INT 36
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 101
8269: PUSH
8270: LD_INT 102
8272: PUSH
8273: LD_INT 103
8275: PUSH
8276: LD_INT 104
8278: PUSH
8279: LD_INT 105
8281: PUSH
8282: LD_INT 106
8284: PUSH
8285: LD_INT 107
8287: PUSH
8288: LD_INT 108
8290: PUSH
8291: LD_INT 109
8293: PUSH
8294: LD_INT 110
8296: PUSH
8297: LD_INT 111
8299: PUSH
8300: LD_INT 112
8302: PUSH
8303: LD_INT 113
8305: PUSH
8306: LD_INT 114
8308: PUSH
8309: LD_INT 116
8311: PUSH
8312: LD_INT 117
8314: PUSH
8315: LD_INT 118
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: ST_TO_ADDR
8341: GO 9580
8343: LD_INT 14
8345: DOUBLE
8346: EQUAL
8347: IFTRUE 8351
8349: GO 8575
8351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8352: LD_ADDR_VAR 0 2
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 6
8374: PUSH
8375: LD_INT 7
8377: PUSH
8378: LD_INT 8
8380: PUSH
8381: LD_INT 9
8383: PUSH
8384: LD_INT 10
8386: PUSH
8387: LD_INT 11
8389: PUSH
8390: LD_INT 12
8392: PUSH
8393: LD_INT 13
8395: PUSH
8396: LD_INT 14
8398: PUSH
8399: LD_INT 15
8401: PUSH
8402: LD_INT 16
8404: PUSH
8405: LD_INT 17
8407: PUSH
8408: LD_INT 18
8410: PUSH
8411: LD_INT 19
8413: PUSH
8414: LD_INT 20
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 22
8422: PUSH
8423: LD_INT 23
8425: PUSH
8426: LD_INT 24
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 27
8437: PUSH
8438: LD_INT 28
8440: PUSH
8441: LD_INT 29
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_INT 31
8449: PUSH
8450: LD_INT 32
8452: PUSH
8453: LD_INT 33
8455: PUSH
8456: LD_INT 34
8458: PUSH
8459: LD_INT 36
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 101
8501: PUSH
8502: LD_INT 102
8504: PUSH
8505: LD_INT 103
8507: PUSH
8508: LD_INT 104
8510: PUSH
8511: LD_INT 105
8513: PUSH
8514: LD_INT 106
8516: PUSH
8517: LD_INT 107
8519: PUSH
8520: LD_INT 108
8522: PUSH
8523: LD_INT 109
8525: PUSH
8526: LD_INT 110
8528: PUSH
8529: LD_INT 111
8531: PUSH
8532: LD_INT 112
8534: PUSH
8535: LD_INT 113
8537: PUSH
8538: LD_INT 114
8540: PUSH
8541: LD_INT 116
8543: PUSH
8544: LD_INT 117
8546: PUSH
8547: LD_INT 118
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 9580
8575: LD_INT 15
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8807
8583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8584: LD_ADDR_VAR 0 2
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 4
8600: PUSH
8601: LD_INT 5
8603: PUSH
8604: LD_INT 6
8606: PUSH
8607: LD_INT 7
8609: PUSH
8610: LD_INT 8
8612: PUSH
8613: LD_INT 9
8615: PUSH
8616: LD_INT 10
8618: PUSH
8619: LD_INT 11
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: LD_INT 15
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: LD_INT 17
8639: PUSH
8640: LD_INT 18
8642: PUSH
8643: LD_INT 19
8645: PUSH
8646: LD_INT 20
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_INT 23
8657: PUSH
8658: LD_INT 24
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 26
8666: PUSH
8667: LD_INT 27
8669: PUSH
8670: LD_INT 28
8672: PUSH
8673: LD_INT 29
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 31
8681: PUSH
8682: LD_INT 32
8684: PUSH
8685: LD_INT 33
8687: PUSH
8688: LD_INT 34
8690: PUSH
8691: LD_INT 36
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 101
8733: PUSH
8734: LD_INT 102
8736: PUSH
8737: LD_INT 103
8739: PUSH
8740: LD_INT 104
8742: PUSH
8743: LD_INT 105
8745: PUSH
8746: LD_INT 106
8748: PUSH
8749: LD_INT 107
8751: PUSH
8752: LD_INT 108
8754: PUSH
8755: LD_INT 109
8757: PUSH
8758: LD_INT 110
8760: PUSH
8761: LD_INT 111
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 113
8769: PUSH
8770: LD_INT 114
8772: PUSH
8773: LD_INT 116
8775: PUSH
8776: LD_INT 117
8778: PUSH
8779: LD_INT 118
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 9580
8807: LD_INT 16
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8951
8815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 7
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 12
8838: PUSH
8839: LD_INT 15
8841: PUSH
8842: LD_INT 16
8844: PUSH
8845: LD_INT 20
8847: PUSH
8848: LD_INT 21
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 23
8856: PUSH
8857: LD_INT 25
8859: PUSH
8860: LD_INT 26
8862: PUSH
8863: LD_INT 30
8865: PUSH
8866: LD_INT 31
8868: PUSH
8869: LD_INT 32
8871: PUSH
8872: LD_INT 33
8874: PUSH
8875: LD_INT 34
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 101
8901: PUSH
8902: LD_INT 102
8904: PUSH
8905: LD_INT 103
8907: PUSH
8908: LD_INT 106
8910: PUSH
8911: LD_INT 108
8913: PUSH
8914: LD_INT 112
8916: PUSH
8917: LD_INT 113
8919: PUSH
8920: LD_INT 114
8922: PUSH
8923: LD_INT 116
8925: PUSH
8926: LD_INT 117
8928: PUSH
8929: LD_INT 118
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ST_TO_ADDR
8949: GO 9580
8951: LD_INT 17
8953: DOUBLE
8954: EQUAL
8955: IFTRUE 8959
8957: GO 9183
8959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8960: LD_ADDR_VAR 0 2
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 4
8976: PUSH
8977: LD_INT 5
8979: PUSH
8980: LD_INT 6
8982: PUSH
8983: LD_INT 7
8985: PUSH
8986: LD_INT 8
8988: PUSH
8989: LD_INT 9
8991: PUSH
8992: LD_INT 10
8994: PUSH
8995: LD_INT 11
8997: PUSH
8998: LD_INT 12
9000: PUSH
9001: LD_INT 13
9003: PUSH
9004: LD_INT 14
9006: PUSH
9007: LD_INT 15
9009: PUSH
9010: LD_INT 16
9012: PUSH
9013: LD_INT 17
9015: PUSH
9016: LD_INT 18
9018: PUSH
9019: LD_INT 19
9021: PUSH
9022: LD_INT 20
9024: PUSH
9025: LD_INT 21
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_INT 23
9033: PUSH
9034: LD_INT 24
9036: PUSH
9037: LD_INT 25
9039: PUSH
9040: LD_INT 26
9042: PUSH
9043: LD_INT 27
9045: PUSH
9046: LD_INT 28
9048: PUSH
9049: LD_INT 29
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 34
9066: PUSH
9067: LD_INT 36
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 101
9109: PUSH
9110: LD_INT 102
9112: PUSH
9113: LD_INT 103
9115: PUSH
9116: LD_INT 104
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 107
9127: PUSH
9128: LD_INT 108
9130: PUSH
9131: LD_INT 109
9133: PUSH
9134: LD_INT 110
9136: PUSH
9137: LD_INT 111
9139: PUSH
9140: LD_INT 112
9142: PUSH
9143: LD_INT 113
9145: PUSH
9146: LD_INT 114
9148: PUSH
9149: LD_INT 116
9151: PUSH
9152: LD_INT 117
9154: PUSH
9155: LD_INT 118
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 9580
9183: LD_INT 18
9185: DOUBLE
9186: EQUAL
9187: IFTRUE 9191
9189: GO 9339
9191: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 7
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 15
9217: PUSH
9218: LD_INT 16
9220: PUSH
9221: LD_INT 20
9223: PUSH
9224: LD_INT 21
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 23
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 26
9238: PUSH
9239: LD_INT 30
9241: PUSH
9242: LD_INT 31
9244: PUSH
9245: LD_INT 32
9247: PUSH
9248: LD_INT 33
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 35
9256: PUSH
9257: LD_INT 36
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 101
9285: PUSH
9286: LD_INT 102
9288: PUSH
9289: LD_INT 103
9291: PUSH
9292: LD_INT 106
9294: PUSH
9295: LD_INT 108
9297: PUSH
9298: LD_INT 112
9300: PUSH
9301: LD_INT 113
9303: PUSH
9304: LD_INT 114
9306: PUSH
9307: LD_INT 115
9309: PUSH
9310: LD_INT 116
9312: PUSH
9313: LD_INT 117
9315: PUSH
9316: LD_INT 118
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: ST_TO_ADDR
9337: GO 9580
9339: LD_INT 19
9341: DOUBLE
9342: EQUAL
9343: IFTRUE 9347
9345: GO 9579
9347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: LD_INT 5
9367: PUSH
9368: LD_INT 6
9370: PUSH
9371: LD_INT 7
9373: PUSH
9374: LD_INT 8
9376: PUSH
9377: LD_INT 9
9379: PUSH
9380: LD_INT 10
9382: PUSH
9383: LD_INT 11
9385: PUSH
9386: LD_INT 12
9388: PUSH
9389: LD_INT 13
9391: PUSH
9392: LD_INT 14
9394: PUSH
9395: LD_INT 15
9397: PUSH
9398: LD_INT 16
9400: PUSH
9401: LD_INT 17
9403: PUSH
9404: LD_INT 18
9406: PUSH
9407: LD_INT 19
9409: PUSH
9410: LD_INT 20
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 23
9421: PUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 26
9430: PUSH
9431: LD_INT 27
9433: PUSH
9434: LD_INT 28
9436: PUSH
9437: LD_INT 29
9439: PUSH
9440: LD_INT 30
9442: PUSH
9443: LD_INT 31
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: LD_INT 33
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 35
9457: PUSH
9458: LD_INT 36
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 101
9501: PUSH
9502: LD_INT 102
9504: PUSH
9505: LD_INT 103
9507: PUSH
9508: LD_INT 104
9510: PUSH
9511: LD_INT 105
9513: PUSH
9514: LD_INT 106
9516: PUSH
9517: LD_INT 107
9519: PUSH
9520: LD_INT 108
9522: PUSH
9523: LD_INT 109
9525: PUSH
9526: LD_INT 110
9528: PUSH
9529: LD_INT 111
9531: PUSH
9532: LD_INT 112
9534: PUSH
9535: LD_INT 113
9537: PUSH
9538: LD_INT 114
9540: PUSH
9541: LD_INT 115
9543: PUSH
9544: LD_INT 116
9546: PUSH
9547: LD_INT 117
9549: PUSH
9550: LD_INT 118
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 9580
9579: POP
// end else
9580: GO 9811
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 3
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 7
9607: PUSH
9608: LD_INT 8
9610: PUSH
9611: LD_INT 9
9613: PUSH
9614: LD_INT 10
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 13
9625: PUSH
9626: LD_INT 14
9628: PUSH
9629: LD_INT 15
9631: PUSH
9632: LD_INT 16
9634: PUSH
9635: LD_INT 17
9637: PUSH
9638: LD_INT 18
9640: PUSH
9641: LD_INT 19
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 24
9658: PUSH
9659: LD_INT 25
9661: PUSH
9662: LD_INT 26
9664: PUSH
9665: LD_INT 27
9667: PUSH
9668: LD_INT 28
9670: PUSH
9671: LD_INT 29
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 33
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: LD_INT 35
9691: PUSH
9692: LD_INT 36
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 101
9735: PUSH
9736: LD_INT 102
9738: PUSH
9739: LD_INT 103
9741: PUSH
9742: LD_INT 104
9744: PUSH
9745: LD_INT 105
9747: PUSH
9748: LD_INT 106
9750: PUSH
9751: LD_INT 107
9753: PUSH
9754: LD_INT 108
9756: PUSH
9757: LD_INT 109
9759: PUSH
9760: LD_INT 110
9762: PUSH
9763: LD_INT 111
9765: PUSH
9766: LD_INT 112
9768: PUSH
9769: LD_INT 113
9771: PUSH
9772: LD_INT 114
9774: PUSH
9775: LD_INT 115
9777: PUSH
9778: LD_INT 116
9780: PUSH
9781: LD_INT 117
9783: PUSH
9784: LD_INT 118
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// if result then
9811: LD_VAR 0 2
9815: IFFALSE 10601
// begin normal :=  ;
9817: LD_ADDR_VAR 0 5
9821: PUSH
9822: LD_STRING 
9824: ST_TO_ADDR
// hardcore :=  ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_STRING 
9832: ST_TO_ADDR
// active :=  ;
9833: LD_ADDR_VAR 0 7
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// for i = 1 to normalCounter do
9841: LD_ADDR_VAR 0 8
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_EXP 25
9855: PUSH
9856: FOR_TO
9857: IFFALSE 9958
// begin tmp := 0 ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: LD_STRING 0
9866: ST_TO_ADDR
// if result [ 1 ] then
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: IFFALSE 9940
// if result [ 1 ] [ 1 ] = i then
9877: LD_VAR 0 2
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PUSH
9890: LD_VAR 0 8
9894: EQUAL
9895: IFFALSE 9940
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9897: LD_ADDR_VAR 0 2
9901: PUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 3
9926: PPUSH
9927: CALL_OW 1
9931: ST_TO_ADDR
// tmp := 1 ;
9932: LD_ADDR_VAR 0 3
9936: PUSH
9937: LD_STRING 1
9939: ST_TO_ADDR
// end ; normal := normal & tmp ;
9940: LD_ADDR_VAR 0 5
9944: PUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_VAR 0 3
9954: STR
9955: ST_TO_ADDR
// end ;
9956: GO 9856
9958: POP
9959: POP
// for i = 1 to hardcoreCounter do
9960: LD_ADDR_VAR 0 8
9964: PUSH
9965: DOUBLE
9966: LD_INT 1
9968: DEC
9969: ST_TO_ADDR
9970: LD_EXP 26
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10081
// begin tmp := 0 ;
9978: LD_ADDR_VAR 0 3
9982: PUSH
9983: LD_STRING 0
9985: ST_TO_ADDR
// if result [ 2 ] then
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: IFFALSE 10063
// if result [ 2 ] [ 1 ] = 100 + i then
9996: LD_VAR 0 2
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PUSH
10009: LD_INT 100
10011: PUSH
10012: LD_VAR 0 8
10016: PLUS
10017: EQUAL
10018: IFFALSE 10063
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 2
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 2
10040: ARRAY
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 3
10049: PPUSH
10050: CALL_OW 1
10054: ST_TO_ADDR
// tmp := 1 ;
10055: LD_ADDR_VAR 0 3
10059: PUSH
10060: LD_STRING 1
10062: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10063: LD_ADDR_VAR 0 6
10067: PUSH
10068: LD_VAR 0 6
10072: PUSH
10073: LD_VAR 0 3
10077: STR
10078: ST_TO_ADDR
// end ;
10079: GO 9975
10081: POP
10082: POP
// if isGameLoad then
10083: LD_VAR 0 1
10087: IFFALSE 10562
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10089: LD_ADDR_VAR 0 4
10093: PUSH
10094: LD_EXP 29
10098: PUSH
10099: LD_EXP 28
10103: PUSH
10104: LD_EXP 30
10108: PUSH
10109: LD_EXP 27
10113: PUSH
10114: LD_EXP 31
10118: PUSH
10119: LD_EXP 32
10123: PUSH
10124: LD_EXP 33
10128: PUSH
10129: LD_EXP 34
10133: PUSH
10134: LD_EXP 35
10138: PUSH
10139: LD_EXP 36
10143: PUSH
10144: LD_EXP 37
10148: PUSH
10149: LD_EXP 38
10153: PUSH
10154: LD_EXP 39
10158: PUSH
10159: LD_EXP 40
10163: PUSH
10164: LD_EXP 48
10168: PUSH
10169: LD_EXP 49
10173: PUSH
10174: LD_EXP 50
10178: PUSH
10179: LD_EXP 51
10183: PUSH
10184: LD_EXP 53
10188: PUSH
10189: LD_EXP 54
10193: PUSH
10194: LD_EXP 55
10198: PUSH
10199: LD_EXP 58
10203: PUSH
10204: LD_EXP 60
10208: PUSH
10209: LD_EXP 61
10213: PUSH
10214: LD_EXP 62
10218: PUSH
10219: LD_EXP 64
10223: PUSH
10224: LD_EXP 65
10228: PUSH
10229: LD_EXP 68
10233: PUSH
10234: LD_EXP 69
10238: PUSH
10239: LD_EXP 70
10243: PUSH
10244: LD_EXP 71
10248: PUSH
10249: LD_EXP 72
10253: PUSH
10254: LD_EXP 73
10258: PUSH
10259: LD_EXP 74
10263: PUSH
10264: LD_EXP 75
10268: PUSH
10269: LD_EXP 76
10273: PUSH
10274: LD_EXP 41
10278: PUSH
10279: LD_EXP 42
10283: PUSH
10284: LD_EXP 45
10288: PUSH
10289: LD_EXP 46
10293: PUSH
10294: LD_EXP 47
10298: PUSH
10299: LD_EXP 43
10303: PUSH
10304: LD_EXP 44
10308: PUSH
10309: LD_EXP 52
10313: PUSH
10314: LD_EXP 56
10318: PUSH
10319: LD_EXP 57
10323: PUSH
10324: LD_EXP 59
10328: PUSH
10329: LD_EXP 63
10333: PUSH
10334: LD_EXP 66
10338: PUSH
10339: LD_EXP 67
10343: PUSH
10344: LD_EXP 77
10348: PUSH
10349: LD_EXP 78
10353: PUSH
10354: LD_EXP 79
10358: PUSH
10359: LD_EXP 80
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// tmp :=  ;
10420: LD_ADDR_VAR 0 3
10424: PUSH
10425: LD_STRING 
10427: ST_TO_ADDR
// for i = 1 to normalCounter do
10428: LD_ADDR_VAR 0 8
10432: PUSH
10433: DOUBLE
10434: LD_INT 1
10436: DEC
10437: ST_TO_ADDR
10438: LD_EXP 25
10442: PUSH
10443: FOR_TO
10444: IFFALSE 10480
// begin if flags [ i ] then
10446: LD_VAR 0 4
10450: PUSH
10451: LD_VAR 0 8
10455: ARRAY
10456: IFFALSE 10478
// tmp := tmp & i & ; ;
10458: LD_ADDR_VAR 0 3
10462: PUSH
10463: LD_VAR 0 3
10467: PUSH
10468: LD_VAR 0 8
10472: STR
10473: PUSH
10474: LD_STRING ;
10476: STR
10477: ST_TO_ADDR
// end ;
10478: GO 10443
10480: POP
10481: POP
// for i = 1 to hardcoreCounter do
10482: LD_ADDR_VAR 0 8
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_EXP 26
10496: PUSH
10497: FOR_TO
10498: IFFALSE 10544
// begin if flags [ normalCounter + i ] then
10500: LD_VAR 0 4
10504: PUSH
10505: LD_EXP 25
10509: PUSH
10510: LD_VAR 0 8
10514: PLUS
10515: ARRAY
10516: IFFALSE 10542
// tmp := tmp & ( 100 + i ) & ; ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 100
10530: PUSH
10531: LD_VAR 0 8
10535: PLUS
10536: STR
10537: PUSH
10538: LD_STRING ;
10540: STR
10541: ST_TO_ADDR
// end ;
10542: GO 10497
10544: POP
10545: POP
// if tmp then
10546: LD_VAR 0 3
10550: IFFALSE 10562
// active := tmp ;
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: LD_VAR 0 3
10561: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10562: LD_STRING getStreamItemsFromMission("
10564: PUSH
10565: LD_VAR 0 5
10569: STR
10570: PUSH
10571: LD_STRING ","
10573: STR
10574: PUSH
10575: LD_VAR 0 6
10579: STR
10580: PUSH
10581: LD_STRING ","
10583: STR
10584: PUSH
10585: LD_VAR 0 7
10589: STR
10590: PUSH
10591: LD_STRING ")
10593: STR
10594: PPUSH
10595: CALL_OW 559
// end else
10599: GO 10608
// ToLua ( getStreamItemsFromMission("","","") ) ;
10601: LD_STRING getStreamItemsFromMission("","","")
10603: PPUSH
10604: CALL_OW 559
// end ;
10608: LD_VAR 0 2
10612: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10613: LD_EXP 24
10617: PUSH
10618: LD_EXP 29
10622: AND
10623: IFFALSE 10747
10625: GO 10627
10627: DISABLE
10628: LD_INT 0
10630: PPUSH
10631: PPUSH
// begin enable ;
10632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_OWVAR 2
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: LD_INT 34
10655: PUSH
10656: LD_INT 7
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 34
10665: PUSH
10666: LD_INT 45
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 34
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 34
10685: PUSH
10686: LD_INT 47
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: ST_TO_ADDR
// if not tmp then
10709: LD_VAR 0 2
10713: NOT
10714: IFFALSE 10718
// exit ;
10716: GO 10747
// for i in tmp do
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: LD_VAR 0 2
10727: PUSH
10728: FOR_IN
10729: IFFALSE 10745
// begin SetLives ( i , 0 ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 234
// end ;
10743: GO 10728
10745: POP
10746: POP
// end ;
10747: PPOPN 2
10749: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10750: LD_EXP 24
10754: PUSH
10755: LD_EXP 30
10759: AND
10760: IFFALSE 10844
10762: GO 10764
10764: DISABLE
10765: LD_INT 0
10767: PPUSH
10768: PPUSH
// begin enable ;
10769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_OWVAR 2
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 32
10789: PUSH
10790: LD_INT 3
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: ST_TO_ADDR
// if not tmp then
10806: LD_VAR 0 2
10810: NOT
10811: IFFALSE 10815
// exit ;
10813: GO 10844
// for i in tmp do
10815: LD_ADDR_VAR 0 1
10819: PUSH
10820: LD_VAR 0 2
10824: PUSH
10825: FOR_IN
10826: IFFALSE 10842
// begin SetLives ( i , 0 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 0
10835: PPUSH
10836: CALL_OW 234
// end ;
10840: GO 10825
10842: POP
10843: POP
// end ;
10844: PPOPN 2
10846: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10847: LD_EXP 24
10851: PUSH
10852: LD_EXP 27
10856: AND
10857: IFFALSE 10950
10859: GO 10861
10861: DISABLE
10862: LD_INT 0
10864: PPUSH
// begin enable ;
10865: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_OWVAR 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 9
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 8
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: PUSH
10931: FOR_IN
10932: IFFALSE 10948
// begin SetClass ( i , 1 ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 336
// end ;
10946: GO 10931
10948: POP
10949: POP
// end ;
10950: PPOPN 1
10952: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10953: LD_EXP 24
10957: PUSH
10958: LD_EXP 28
10962: AND
10963: PUSH
10964: LD_OWVAR 65
10968: PUSH
10969: LD_INT 7
10971: LESS
10972: AND
10973: IFFALSE 10987
10975: GO 10977
10977: DISABLE
// begin enable ;
10978: ENABLE
// game_speed := 7 ;
10979: LD_ADDR_OWVAR 65
10983: PUSH
10984: LD_INT 7
10986: ST_TO_ADDR
// end ;
10987: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 31
10997: AND
10998: IFFALSE 11200
11000: GO 11002
11002: DISABLE
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
11007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: LD_INT 81
11015: PUSH
11016: LD_OWVAR 2
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 21
11027: PUSH
11028: LD_INT 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 69
11043: ST_TO_ADDR
// if not tmp then
11044: LD_VAR 0 3
11048: NOT
11049: IFFALSE 11053
// exit ;
11051: GO 11200
// if tmp > 5 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 5
11060: GREATER
11061: IFFALSE 11073
// k := 5 else
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 5
11070: ST_TO_ADDR
11071: GO 11083
// k := tmp ;
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_VAR 0 3
11082: ST_TO_ADDR
// for i := 1 to k do
11083: LD_ADDR_VAR 0 1
11087: PUSH
11088: DOUBLE
11089: LD_INT 1
11091: DEC
11092: ST_TO_ADDR
11093: LD_VAR 0 2
11097: PUSH
11098: FOR_TO
11099: IFFALSE 11198
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_VAR 0 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_INT 4
11119: MOD
11120: PUSH
11121: LD_INT 1
11123: PLUS
11124: PPUSH
11125: CALL_OW 259
11129: PUSH
11130: LD_INT 10
11132: LESS
11133: IFFALSE 11196
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11135: LD_VAR 0 3
11139: PUSH
11140: LD_VAR 0 1
11144: ARRAY
11145: PPUSH
11146: LD_VAR 0 1
11150: PUSH
11151: LD_INT 4
11153: MOD
11154: PUSH
11155: LD_INT 1
11157: PLUS
11158: PPUSH
11159: LD_VAR 0 3
11163: PUSH
11164: LD_VAR 0 1
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 1
11174: PUSH
11175: LD_INT 4
11177: MOD
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: PPUSH
11183: CALL_OW 259
11187: PUSH
11188: LD_INT 1
11190: PLUS
11191: PPUSH
11192: CALL_OW 237
11196: GO 11098
11198: POP
11199: POP
// end ;
11200: PPOPN 3
11202: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11203: LD_EXP 24
11207: PUSH
11208: LD_EXP 32
11212: AND
11213: IFFALSE 11233
11215: GO 11217
11217: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11218: LD_INT 4
11220: PPUSH
11221: LD_OWVAR 2
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 324
11233: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11234: LD_EXP 24
11238: PUSH
11239: LD_EXP 61
11243: AND
11244: IFFALSE 11264
11246: GO 11248
11248: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11249: LD_INT 19
11251: PPUSH
11252: LD_OWVAR 2
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 324
11264: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11265: LD_EXP 24
11269: PUSH
11270: LD_EXP 33
11274: AND
11275: IFFALSE 11377
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
// begin enable ;
11284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_OWVAR 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 34
11307: PUSH
11308: LD_INT 11
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 34
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: ST_TO_ADDR
// if not tmp then
11339: LD_VAR 0 2
11343: NOT
11344: IFFALSE 11348
// exit ;
11346: GO 11377
// for i in tmp do
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: LD_VAR 0 2
11357: PUSH
11358: FOR_IN
11359: IFFALSE 11375
// begin SetLives ( i , 0 ) ;
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_INT 0
11368: PPUSH
11369: CALL_OW 234
// end ;
11373: GO 11358
11375: POP
11376: POP
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11380: LD_EXP 24
11384: PUSH
11385: LD_EXP 34
11389: AND
11390: IFFALSE 11410
11392: GO 11394
11394: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11395: LD_INT 32
11397: PPUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 324
11410: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11411: LD_EXP 24
11415: PUSH
11416: LD_EXP 35
11420: AND
11421: IFFALSE 11602
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 33
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 69
11466: ST_TO_ADDR
// if not tmp then
11467: LD_VAR 0 2
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11602
// side := 0 ;
11476: LD_ADDR_VAR 0 3
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// for i := 1 to 8 do
11484: LD_ADDR_VAR 0 1
11488: PUSH
11489: DOUBLE
11490: LD_INT 1
11492: DEC
11493: ST_TO_ADDR
11494: LD_INT 8
11496: PUSH
11497: FOR_TO
11498: IFFALSE 11546
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11500: LD_OWVAR 2
11504: PUSH
11505: LD_VAR 0 1
11509: NONEQUAL
11510: PUSH
11511: LD_OWVAR 2
11515: PPUSH
11516: LD_VAR 0 1
11520: PPUSH
11521: CALL_OW 81
11525: PUSH
11526: LD_INT 2
11528: EQUAL
11529: AND
11530: IFFALSE 11544
// begin side := i ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: ST_TO_ADDR
// break ;
11542: GO 11546
// end ;
11544: GO 11497
11546: POP
11547: POP
// if not side then
11548: LD_VAR 0 3
11552: NOT
11553: IFFALSE 11557
// exit ;
11555: GO 11602
// for i := 1 to tmp do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_VAR 0 2
11571: PUSH
11572: FOR_TO
11573: IFFALSE 11600
// if Prob ( 60 ) then
11575: LD_INT 60
11577: PPUSH
11578: CALL_OW 13
11582: IFFALSE 11598
// SetSide ( i , side ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: CALL_OW 235
11598: GO 11572
11600: POP
11601: POP
// end ;
11602: PPOPN 3
11604: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11605: LD_EXP 24
11609: PUSH
11610: LD_EXP 37
11614: AND
11615: IFFALSE 11734
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_OWVAR 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 3
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 0
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11732
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 257
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 4
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: IN
11708: IFFALSE 11730
// SetClass ( un , rand ( 1 , 4 ) ) ;
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_INT 4
11720: PPUSH
11721: CALL_OW 12
11725: PPUSH
11726: CALL_OW 336
11730: GO 11677
11732: POP
11733: POP
// end ;
11734: PPOPN 1
11736: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11737: LD_EXP 24
11741: PUSH
11742: LD_EXP 36
11746: AND
11747: IFFALSE 11826
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: ST_TO_ADDR
// if not tmp then
11791: LD_VAR 0 1
11795: NOT
11796: IFFALSE 11800
// exit ;
11798: GO 11826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 1
11807: PPUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: CALL_OW 12
11817: ARRAY
11818: PPUSH
11819: LD_INT 100
11821: PPUSH
11822: CALL_OW 234
// end ;
11826: PPOPN 1
11828: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11829: LD_EXP 24
11833: PUSH
11834: LD_EXP 38
11838: AND
11839: IFFALSE 11937
11841: GO 11843
11843: DISABLE
11844: LD_INT 0
11846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: LD_OWVAR 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: ST_TO_ADDR
// if not tmp then
11883: LD_VAR 0 1
11887: NOT
11888: IFFALSE 11892
// exit ;
11890: GO 11937
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: PPUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 12
11909: ARRAY
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: LD_INT 4
11916: PPUSH
11917: CALL_OW 12
11921: PPUSH
11922: LD_INT 3000
11924: PPUSH
11925: LD_INT 9000
11927: PPUSH
11928: CALL_OW 12
11932: PPUSH
11933: CALL_OW 492
// end ;
11937: PPOPN 1
11939: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11940: LD_EXP 24
11944: PUSH
11945: LD_EXP 39
11949: AND
11950: IFFALSE 11970
11952: GO 11954
11954: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11955: LD_INT 1
11957: PPUSH
11958: LD_OWVAR 2
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 324
11970: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11971: LD_EXP 24
11975: PUSH
11976: LD_EXP 40
11980: AND
11981: IFFALSE 12064
11983: GO 11985
11985: DISABLE
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_OWVAR 2
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 21
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: ST_TO_ADDR
// if not tmp then
12026: LD_VAR 0 2
12030: NOT
12031: IFFALSE 12035
// exit ;
12033: GO 12064
// for i in tmp do
12035: LD_ADDR_VAR 0 1
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12062
// SetBLevel ( i , 10 ) ;
12048: LD_VAR 0 1
12052: PPUSH
12053: LD_INT 10
12055: PPUSH
12056: CALL_OW 241
12060: GO 12045
12062: POP
12063: POP
// end ;
12064: PPOPN 2
12066: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12067: LD_EXP 24
12071: PUSH
12072: LD_EXP 41
12076: AND
12077: IFFALSE 12188
12079: GO 12081
12081: DISABLE
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12087: LD_ADDR_VAR 0 3
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_OWVAR 2
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 25
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 3
12127: NOT
12128: IFFALSE 12132
// exit ;
12130: GO 12188
// un := tmp [ rand ( 1 , tmp ) ] ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: CALL_OW 12
12154: ARRAY
12155: ST_TO_ADDR
// if Crawls ( un ) then
12156: LD_VAR 0 2
12160: PPUSH
12161: CALL_OW 318
12165: IFFALSE 12176
// ComWalk ( un ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12176: LD_VAR 0 2
12180: PPUSH
12181: LD_INT 5
12183: PPUSH
12184: CALL_OW 336
// end ;
12188: PPOPN 3
12190: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12191: LD_EXP 24
12195: PUSH
12196: LD_EXP 42
12200: AND
12201: PUSH
12202: LD_OWVAR 67
12206: PUSH
12207: LD_INT 4
12209: LESS
12210: AND
12211: IFFALSE 12230
12213: GO 12215
12215: DISABLE
// begin Difficulty := Difficulty + 1 ;
12216: LD_ADDR_OWVAR 67
12220: PUSH
12221: LD_OWVAR 67
12225: PUSH
12226: LD_INT 1
12228: PLUS
12229: ST_TO_ADDR
// end ;
12230: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12231: LD_EXP 24
12235: PUSH
12236: LD_EXP 43
12240: AND
12241: IFFALSE 12344
12243: GO 12245
12245: DISABLE
12246: LD_INT 0
12248: PPUSH
// begin for i := 1 to 5 do
12249: LD_ADDR_VAR 0 1
12253: PUSH
12254: DOUBLE
12255: LD_INT 1
12257: DEC
12258: ST_TO_ADDR
12259: LD_INT 5
12261: PUSH
12262: FOR_TO
12263: IFFALSE 12342
// begin uc_nation := nation_nature ;
12265: LD_ADDR_OWVAR 21
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// uc_side := 0 ;
12273: LD_ADDR_OWVAR 20
12277: PUSH
12278: LD_INT 0
12280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12281: LD_ADDR_OWVAR 29
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 12
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: ST_TO_ADDR
// hc_agressivity := 20 ;
12296: LD_ADDR_OWVAR 35
12300: PUSH
12301: LD_INT 20
12303: ST_TO_ADDR
// hc_class := class_tiger ;
12304: LD_ADDR_OWVAR 28
12308: PUSH
12309: LD_INT 14
12311: ST_TO_ADDR
// hc_gallery :=  ;
12312: LD_ADDR_OWVAR 33
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// hc_name :=  ;
12320: LD_ADDR_OWVAR 26
12324: PUSH
12325: LD_STRING 
12327: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12328: CALL_OW 44
12332: PPUSH
12333: LD_INT 0
12335: PPUSH
12336: CALL_OW 51
// end ;
12340: GO 12262
12342: POP
12343: POP
// end ;
12344: PPOPN 1
12346: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12347: LD_EXP 24
12351: PUSH
12352: LD_EXP 44
12356: AND
12357: IFFALSE 12366
12359: GO 12361
12361: DISABLE
// StreamSibBomb ;
12362: CALL 12367 0 0
12366: END
// export function StreamSibBomb ; var i , x , y ; begin
12367: LD_INT 0
12369: PPUSH
12370: PPUSH
12371: PPUSH
12372: PPUSH
// result := false ;
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// for i := 1 to 16 do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_INT 16
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12594
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_INT 10
12404: PUSH
12405: LD_INT 20
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 40
12413: PUSH
12414: LD_INT 50
12416: PUSH
12417: LD_INT 60
12419: PUSH
12420: LD_INT 70
12422: PUSH
12423: LD_INT 80
12425: PUSH
12426: LD_INT 90
12428: PUSH
12429: LD_INT 100
12431: PUSH
12432: LD_INT 110
12434: PUSH
12435: LD_INT 120
12437: PUSH
12438: LD_INT 130
12440: PUSH
12441: LD_INT 140
12443: PUSH
12444: LD_INT 150
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 15
12469: PPUSH
12470: CALL_OW 12
12474: ARRAY
12475: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12476: LD_ADDR_VAR 0 4
12480: PUSH
12481: LD_INT 10
12483: PUSH
12484: LD_INT 20
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 40
12492: PUSH
12493: LD_INT 50
12495: PUSH
12496: LD_INT 60
12498: PUSH
12499: LD_INT 70
12501: PUSH
12502: LD_INT 80
12504: PUSH
12505: LD_INT 90
12507: PUSH
12508: LD_INT 100
12510: PUSH
12511: LD_INT 110
12513: PUSH
12514: LD_INT 120
12516: PUSH
12517: LD_INT 130
12519: PUSH
12520: LD_INT 140
12522: PUSH
12523: LD_INT 150
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 15
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: ST_TO_ADDR
// if ValidHex ( x , y ) then
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_VAR 0 4
12564: PPUSH
12565: CALL_OW 488
12569: IFFALSE 12592
// begin result := [ x , y ] ;
12571: LD_ADDR_VAR 0 1
12575: PUSH
12576: LD_VAR 0 3
12580: PUSH
12581: LD_VAR 0 4
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: ST_TO_ADDR
// break ;
12590: GO 12594
// end ; end ;
12592: GO 12394
12594: POP
12595: POP
// if result then
12596: LD_VAR 0 1
12600: IFFALSE 12660
// begin ToLua ( playSibBomb() ) ;
12602: LD_STRING playSibBomb()
12604: PPUSH
12605: CALL_OW 559
// wait ( 0 0$14 ) ;
12609: LD_INT 490
12611: PPUSH
12612: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PPUSH
12634: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12638: LD_VAR 0 1
12642: PUSH
12643: LD_INT 1
12645: ARRAY
12646: PPUSH
12647: LD_VAR 0 1
12651: PUSH
12652: LD_INT 2
12654: ARRAY
12655: PPUSH
12656: CALL_OW 429
// end ; end ;
12660: LD_VAR 0 1
12664: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12665: LD_EXP 24
12669: PUSH
12670: LD_EXP 46
12674: AND
12675: IFFALSE 12687
12677: GO 12679
12679: DISABLE
// YouLost (  ) ;
12680: LD_STRING 
12682: PPUSH
12683: CALL_OW 104
12687: END
// every 0 0$1 trigger StreamModeActive and sFog do
12688: LD_EXP 24
12692: PUSH
12693: LD_EXP 45
12697: AND
12698: IFFALSE 12712
12700: GO 12702
12702: DISABLE
// FogOff ( your_side ) ;
12703: LD_OWVAR 2
12707: PPUSH
12708: CALL_OW 344
12712: END
// every 0 0$1 trigger StreamModeActive and sSun do
12713: LD_EXP 24
12717: PUSH
12718: LD_EXP 47
12722: AND
12723: IFFALSE 12751
12725: GO 12727
12727: DISABLE
// begin solar_recharge_percent := 0 ;
12728: LD_ADDR_OWVAR 79
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12736: LD_INT 10500
12738: PPUSH
12739: CALL_OW 67
// solar_recharge_percent := 100 ;
12743: LD_ADDR_OWVAR 79
12747: PUSH
12748: LD_INT 100
12750: ST_TO_ADDR
// end ;
12751: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12752: LD_EXP 24
12756: PUSH
12757: LD_EXP 48
12761: AND
12762: IFFALSE 13001
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin tmp := [ ] ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: EMPTY
12778: ST_TO_ADDR
// for i := 1 to 6 do
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: DOUBLE
12785: LD_INT 1
12787: DEC
12788: ST_TO_ADDR
12789: LD_INT 6
12791: PUSH
12792: FOR_TO
12793: IFFALSE 12898
// begin uc_nation := nation_nature ;
12795: LD_ADDR_OWVAR 21
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// uc_side := 0 ;
12803: LD_ADDR_OWVAR 20
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12811: LD_ADDR_OWVAR 29
12815: PUSH
12816: LD_INT 12
12818: PUSH
12819: LD_INT 12
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: ST_TO_ADDR
// hc_agressivity := 20 ;
12826: LD_ADDR_OWVAR 35
12830: PUSH
12831: LD_INT 20
12833: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12834: LD_ADDR_OWVAR 28
12838: PUSH
12839: LD_INT 17
12841: ST_TO_ADDR
// hc_gallery :=  ;
12842: LD_ADDR_OWVAR 33
12846: PUSH
12847: LD_STRING 
12849: ST_TO_ADDR
// hc_name :=  ;
12850: LD_ADDR_OWVAR 26
12854: PUSH
12855: LD_STRING 
12857: ST_TO_ADDR
// un := CreateHuman ;
12858: LD_ADDR_VAR 0 2
12862: PUSH
12863: CALL_OW 44
12867: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12868: LD_VAR 0 2
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 51
// tmp := tmp ^ un ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_VAR 0 3
12889: PUSH
12890: LD_VAR 0 2
12894: ADD
12895: ST_TO_ADDR
// end ;
12896: GO 12792
12898: POP
12899: POP
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// for un in tmp do
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_VAR 0 3
12916: PUSH
12917: FOR_IN
12918: IFFALSE 12992
// begin if IsDead ( un ) then
12920: LD_VAR 0 2
12924: PPUSH
12925: CALL_OW 301
12929: IFFALSE 12949
// begin tmp := tmp diff un ;
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: LD_VAR 0 3
12940: PUSH
12941: LD_VAR 0 2
12945: DIFF
12946: ST_TO_ADDR
// continue ;
12947: GO 12917
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12949: LD_VAR 0 2
12953: PPUSH
12954: LD_INT 3
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_INT 0
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 74
12985: PPUSH
12986: CALL_OW 115
// end ;
12990: GO 12917
12992: POP
12993: POP
// until not tmp ;
12994: LD_VAR 0 3
12998: NOT
12999: IFFALSE 12900
// end ;
13001: PPOPN 3
13003: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13004: LD_EXP 24
13008: PUSH
13009: LD_EXP 49
13013: AND
13014: IFFALSE 13068
13016: GO 13018
13018: DISABLE
// begin ToLua ( displayTroll(); ) ;
13019: LD_STRING displayTroll();
13021: PPUSH
13022: CALL_OW 559
// wait ( 3 3$00 ) ;
13026: LD_INT 6300
13028: PPUSH
13029: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13033: LD_STRING hideTroll();
13035: PPUSH
13036: CALL_OW 559
// wait ( 1 1$00 ) ;
13040: LD_INT 2100
13042: PPUSH
13043: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13047: LD_STRING displayTroll();
13049: PPUSH
13050: CALL_OW 559
// wait ( 1 1$00 ) ;
13054: LD_INT 2100
13056: PPUSH
13057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13061: LD_STRING hideTroll();
13063: PPUSH
13064: CALL_OW 559
// end ;
13068: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13069: LD_EXP 24
13073: PUSH
13074: LD_EXP 50
13078: AND
13079: IFFALSE 13142
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin p := 0 ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// repeat game_speed := 1 ;
13095: LD_ADDR_OWVAR 65
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13103: LD_INT 35
13105: PPUSH
13106: CALL_OW 67
// p := p + 1 ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 1
13122: PLUS
13123: ST_TO_ADDR
// until p >= 60 ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 60
13131: GREATEREQUAL
13132: IFFALSE 13095
// game_speed := 4 ;
13134: LD_ADDR_OWVAR 65
13138: PUSH
13139: LD_INT 4
13141: ST_TO_ADDR
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13145: LD_EXP 24
13149: PUSH
13150: LD_EXP 51
13154: AND
13155: IFFALSE 13301
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
13163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: LD_OWVAR 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: LD_INT 30
13186: PUSH
13187: LD_INT 0
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 30
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not depot then
13218: LD_VAR 0 1
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13301
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_VAR 0 1
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: PPUSH
13251: CALL_OW 274
13255: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13256: LD_VAR 0 2
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: LD_INT 0
13266: PPUSH
13267: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13271: LD_VAR 0 2
13275: PPUSH
13276: LD_INT 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_INT 3
13293: PPUSH
13294: LD_INT 0
13296: PPUSH
13297: CALL_OW 277
// end ;
13301: PPOPN 2
13303: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13304: LD_EXP 24
13308: PUSH
13309: LD_EXP 52
13313: AND
13314: IFFALSE 13411
13316: GO 13318
13318: DISABLE
13319: LD_INT 0
13321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_OWVAR 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: LD_INT 23
13354: PUSH
13355: LD_INT 0
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: ST_TO_ADDR
// if not tmp then
13376: LD_VAR 0 1
13380: NOT
13381: IFFALSE 13385
// exit ;
13383: GO 13411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 1
13392: PPUSH
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 12
13402: ARRAY
13403: PPUSH
13404: LD_INT 200
13406: PPUSH
13407: CALL_OW 234
// end ;
13411: PPOPN 1
13413: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13414: LD_EXP 24
13418: PUSH
13419: LD_EXP 53
13423: AND
13424: IFFALSE 13503
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_OWVAR 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 2
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 1
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13477: LD_VAR 0 1
13481: PUSH
13482: LD_INT 1
13484: PPUSH
13485: LD_VAR 0 1
13489: PPUSH
13490: CALL_OW 12
13494: ARRAY
13495: PPUSH
13496: LD_INT 60
13498: PPUSH
13499: CALL_OW 234
// end ;
13503: PPOPN 1
13505: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13506: LD_EXP 24
13510: PUSH
13511: LD_EXP 54
13515: AND
13516: IFFALSE 13615
13518: GO 13520
13520: DISABLE
13521: LD_INT 0
13523: PPUSH
13524: PPUSH
// begin enable ;
13525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13526: LD_ADDR_VAR 0 1
13530: PUSH
13531: LD_INT 22
13533: PUSH
13534: LD_OWVAR 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 61
13545: PUSH
13546: EMPTY
13547: LIST
13548: PUSH
13549: LD_INT 33
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// if not tmp then
13569: LD_VAR 0 1
13573: NOT
13574: IFFALSE 13578
// exit ;
13576: GO 13615
// for i in tmp do
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_VAR 0 1
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13613
// if IsControledBy ( i ) then
13591: LD_VAR 0 2
13595: PPUSH
13596: CALL_OW 312
13600: IFFALSE 13611
// ComUnlink ( i ) ;
13602: LD_VAR 0 2
13606: PPUSH
13607: CALL_OW 136
13611: GO 13588
13613: POP
13614: POP
// end ;
13615: PPOPN 2
13617: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13618: LD_EXP 24
13622: PUSH
13623: LD_EXP 55
13627: AND
13628: IFFALSE 13768
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
// begin ToLua ( displayPowell(); ) ;
13637: LD_STRING displayPowell();
13639: PPUSH
13640: CALL_OW 559
// uc_side := 0 ;
13644: LD_ADDR_OWVAR 20
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// uc_nation := 2 ;
13652: LD_ADDR_OWVAR 21
13656: PUSH
13657: LD_INT 2
13659: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13660: LD_ADDR_OWVAR 37
13664: PUSH
13665: LD_INT 14
13667: ST_TO_ADDR
// vc_engine := engine_siberite ;
13668: LD_ADDR_OWVAR 39
13672: PUSH
13673: LD_INT 3
13675: ST_TO_ADDR
// vc_control := control_apeman ;
13676: LD_ADDR_OWVAR 38
13680: PUSH
13681: LD_INT 5
13683: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13684: LD_ADDR_OWVAR 40
13688: PUSH
13689: LD_INT 29
13691: ST_TO_ADDR
// un := CreateVehicle ;
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: CALL_OW 45
13701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: LD_INT 1
13709: PPUSH
13710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13714: LD_INT 35
13716: PPUSH
13717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13721: LD_VAR 0 2
13725: PPUSH
13726: LD_INT 22
13728: PUSH
13729: LD_OWVAR 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 69
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 74
13752: PPUSH
13753: CALL_OW 115
// until IsDead ( un ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: CALL_OW 301
13766: IFFALSE 13714
// end ;
13768: PPOPN 2
13770: END
// every 0 0$1 trigger StreamModeActive and sStu do
13771: LD_EXP 24
13775: PUSH
13776: LD_EXP 63
13780: AND
13781: IFFALSE 13797
13783: GO 13785
13785: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13786: LD_STRING displayStucuk();
13788: PPUSH
13789: CALL_OW 559
// ResetFog ;
13793: CALL_OW 335
// end ;
13797: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13798: LD_EXP 24
13802: PUSH
13803: LD_EXP 56
13807: AND
13808: IFFALSE 13949
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
13816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_OWVAR 2
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: ST_TO_ADDR
// if not tmp then
13853: LD_VAR 0 2
13857: NOT
13858: IFFALSE 13862
// exit ;
13860: GO 13949
// un := tmp [ rand ( 1 , tmp ) ] ;
13862: LD_ADDR_VAR 0 1
13866: PUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_INT 1
13874: PPUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: CALL_OW 12
13884: ARRAY
13885: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13886: LD_VAR 0 1
13890: PPUSH
13891: LD_INT 0
13893: PPUSH
13894: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13898: LD_VAR 0 1
13902: PPUSH
13903: LD_OWVAR 3
13907: PUSH
13908: LD_VAR 0 1
13912: DIFF
13913: PPUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 74
13923: PPUSH
13924: CALL_OW 115
// wait ( 0 0$20 ) ;
13928: LD_INT 700
13930: PPUSH
13931: CALL_OW 67
// SetSide ( un , your_side ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: CALL_OW 235
// end ;
13949: PPOPN 2
13951: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13952: LD_EXP 24
13956: PUSH
13957: LD_EXP 57
13961: AND
13962: IFFALSE 14068
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_OWVAR 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 30
13992: PUSH
13993: LD_INT 0
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 69
14023: ST_TO_ADDR
// if not depot then
14024: LD_VAR 0 1
14028: NOT
14029: IFFALSE 14033
// exit ;
14031: GO 14068
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14033: LD_VAR 0 1
14037: PUSH
14038: LD_INT 1
14040: ARRAY
14041: PPUSH
14042: CALL_OW 250
14046: PPUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: CALL_OW 251
14060: PPUSH
14061: LD_INT 70
14063: PPUSH
14064: CALL_OW 495
// end ;
14068: PPOPN 1
14070: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14071: LD_EXP 24
14075: PUSH
14076: LD_EXP 58
14080: AND
14081: IFFALSE 14292
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14093: LD_ADDR_VAR 0 5
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PPUSH
14124: CALL_OW 69
14128: ST_TO_ADDR
// if not tmp then
14129: LD_VAR 0 5
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14292
// for i in tmp do
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: LD_VAR 0 5
14147: PUSH
14148: FOR_IN
14149: IFFALSE 14290
// begin d := rand ( 0 , 5 ) ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_INT 0
14158: PPUSH
14159: LD_INT 5
14161: PPUSH
14162: CALL_OW 12
14166: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: LD_INT 3
14189: PPUSH
14190: LD_INT 12
14192: PPUSH
14193: CALL_OW 12
14197: PPUSH
14198: CALL_OW 272
14202: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_VAR 0 1
14212: PPUSH
14213: CALL_OW 251
14217: PPUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 3
14225: PPUSH
14226: LD_INT 12
14228: PPUSH
14229: CALL_OW 12
14233: PPUSH
14234: CALL_OW 273
14238: ST_TO_ADDR
// if ValidHex ( x , y ) then
14239: LD_VAR 0 2
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 488
14253: IFFALSE 14288
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14255: LD_VAR 0 1
14259: PPUSH
14260: LD_VAR 0 2
14264: PPUSH
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 3
14272: PPUSH
14273: LD_INT 6
14275: PPUSH
14276: CALL_OW 12
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 483
// end ;
14288: GO 14148
14290: POP
14291: POP
// end ;
14292: PPOPN 5
14294: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14295: LD_EXP 24
14299: PUSH
14300: LD_EXP 59
14304: AND
14305: IFFALSE 14399
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14314: LD_ADDR_VAR 0 2
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_OWVAR 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 32
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: ST_TO_ADDR
// if not tmp then
14361: LD_VAR 0 2
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14399
// for i in tmp do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_VAR 0 2
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14397
// SetFuel ( i , 0 ) ;
14383: LD_VAR 0 1
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 240
14395: GO 14380
14397: POP
14398: POP
// end ;
14399: PPOPN 2
14401: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14402: LD_EXP 24
14406: PUSH
14407: LD_EXP 60
14411: AND
14412: IFFALSE 14478
14414: GO 14416
14416: DISABLE
14417: LD_INT 0
14419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_OWVAR 2
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 29
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: ST_TO_ADDR
// if not tmp then
14456: LD_VAR 0 1
14460: NOT
14461: IFFALSE 14465
// exit ;
14463: GO 14478
// DestroyUnit ( tmp [ 1 ] ) ;
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 65
// end ;
14478: PPOPN 1
14480: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14481: LD_EXP 24
14485: PUSH
14486: LD_EXP 62
14490: AND
14491: IFFALSE 14620
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
// begin uc_side := 0 ;
14499: LD_ADDR_OWVAR 20
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// uc_nation := nation_arabian ;
14507: LD_ADDR_OWVAR 21
14511: PUSH
14512: LD_INT 2
14514: ST_TO_ADDR
// hc_gallery :=  ;
14515: LD_ADDR_OWVAR 33
14519: PUSH
14520: LD_STRING 
14522: ST_TO_ADDR
// hc_name :=  ;
14523: LD_ADDR_OWVAR 26
14527: PUSH
14528: LD_STRING 
14530: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 11
14536: PPUSH
14537: LD_INT 10
14539: PPUSH
14540: CALL_OW 380
// un := CreateHuman ;
14544: LD_ADDR_VAR 0 1
14548: PUSH
14549: CALL_OW 44
14553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_INT 1
14561: PPUSH
14562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14566: LD_INT 35
14568: PPUSH
14569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 22
14580: PUSH
14581: LD_OWVAR 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PPUSH
14590: CALL_OW 69
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 74
14604: PPUSH
14605: CALL_OW 115
// until IsDead ( un ) ;
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 301
14618: IFFALSE 14566
// end ;
14620: PPOPN 1
14622: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14623: LD_EXP 24
14627: PUSH
14628: LD_EXP 64
14632: AND
14633: IFFALSE 14645
14635: GO 14637
14637: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14638: LD_STRING earthquake(getX(game), 0, 32)
14640: PPUSH
14641: CALL_OW 559
14645: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14646: LD_EXP 24
14650: PUSH
14651: LD_EXP 65
14655: AND
14656: IFFALSE 14747
14658: GO 14660
14660: DISABLE
14661: LD_INT 0
14663: PPUSH
// begin enable ;
14664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_OWVAR 2
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 33
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: ST_TO_ADDR
// if not tmp then
14712: LD_VAR 0 1
14716: NOT
14717: IFFALSE 14721
// exit ;
14719: GO 14747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14721: LD_VAR 0 1
14725: PUSH
14726: LD_INT 1
14728: PPUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 12
14738: ARRAY
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 234
// end ;
14747: PPOPN 1
14749: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14750: LD_EXP 24
14754: PUSH
14755: LD_EXP 66
14759: AND
14760: IFFALSE 14901
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
14769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_OWVAR 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: ST_TO_ADDR
// if not tmp then
14806: LD_VAR 0 3
14810: NOT
14811: IFFALSE 14815
// exit ;
14813: GO 14901
// un := tmp [ rand ( 1 , tmp ) ] ;
14815: LD_ADDR_VAR 0 2
14819: PUSH
14820: LD_VAR 0 3
14824: PUSH
14825: LD_INT 1
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 12
14837: ARRAY
14838: ST_TO_ADDR
// if Crawls ( un ) then
14839: LD_VAR 0 2
14843: PPUSH
14844: CALL_OW 318
14848: IFFALSE 14859
// ComWalk ( un ) ;
14850: LD_VAR 0 2
14854: PPUSH
14855: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_INT 9
14866: PPUSH
14867: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14871: LD_INT 28
14873: PPUSH
14874: LD_OWVAR 2
14878: PPUSH
14879: LD_INT 2
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14886: LD_INT 29
14888: PPUSH
14889: LD_OWVAR 2
14893: PPUSH
14894: LD_INT 2
14896: PPUSH
14897: CALL_OW 322
// end ;
14901: PPOPN 3
14903: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14904: LD_EXP 24
14908: PUSH
14909: LD_EXP 67
14913: AND
14914: IFFALSE 15025
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 25
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 3
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 15025
// un := tmp [ rand ( 1 , tmp ) ] ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_VAR 0 3
14978: PUSH
14979: LD_INT 1
14981: PPUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: CALL_OW 12
14991: ARRAY
14992: ST_TO_ADDR
// if Crawls ( un ) then
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 318
15002: IFFALSE 15013
// ComWalk ( un ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_INT 8
15020: PPUSH
15021: CALL_OW 336
// end ;
15025: PPOPN 3
15027: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15028: LD_EXP 24
15032: PUSH
15033: LD_EXP 68
15037: AND
15038: IFFALSE 15182
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 34
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 34
15089: PUSH
15090: LD_INT 51
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 34
15099: PUSH
15100: LD_INT 32
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// if not tmp then
15123: LD_VAR 0 2
15127: NOT
15128: IFFALSE 15132
// exit ;
15130: GO 15182
// for i in tmp do
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: FOR_IN
15143: IFFALSE 15180
// if GetCargo ( i , mat_artifact ) = 0 then
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 4
15152: PPUSH
15153: CALL_OW 289
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: IFFALSE 15178
// SetCargo ( i , mat_siberit , 100 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 3
15170: PPUSH
15171: LD_INT 100
15173: PPUSH
15174: CALL_OW 290
15178: GO 15142
15180: POP
15181: POP
// end ;
15182: PPOPN 2
15184: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15185: LD_EXP 24
15189: PUSH
15190: LD_EXP 69
15194: AND
15195: IFFALSE 15378
15197: GO 15199
15199: DISABLE
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_INT 22
15211: PUSH
15212: LD_OWVAR 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 69
15225: ST_TO_ADDR
// if not tmp then
15226: LD_VAR 0 2
15230: NOT
15231: IFFALSE 15235
// exit ;
15233: GO 15378
// for i := 1 to 2 do
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: DOUBLE
15241: LD_INT 1
15243: DEC
15244: ST_TO_ADDR
15245: LD_INT 2
15247: PUSH
15248: FOR_TO
15249: IFFALSE 15376
// begin uc_side := your_side ;
15251: LD_ADDR_OWVAR 20
15255: PUSH
15256: LD_OWVAR 2
15260: ST_TO_ADDR
// uc_nation := nation_american ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// vc_chassis := us_morphling ;
15269: LD_ADDR_OWVAR 37
15273: PUSH
15274: LD_INT 5
15276: ST_TO_ADDR
// vc_engine := engine_siberite ;
15277: LD_ADDR_OWVAR 39
15281: PUSH
15282: LD_INT 3
15284: ST_TO_ADDR
// vc_control := control_computer ;
15285: LD_ADDR_OWVAR 38
15289: PUSH
15290: LD_INT 3
15292: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15293: LD_ADDR_OWVAR 40
15297: PUSH
15298: LD_INT 10
15300: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 310
15314: NOT
15315: IFFALSE 15362
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15317: CALL_OW 45
15321: PPUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 250
15335: PPUSH
15336: LD_VAR 0 2
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: CALL_OW 251
15349: PPUSH
15350: LD_INT 12
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 50
15360: GO 15374
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15362: CALL_OW 45
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 51
// end ;
15374: GO 15248
15376: POP
15377: POP
// end ;
15378: PPOPN 2
15380: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15381: LD_EXP 24
15385: PUSH
15386: LD_EXP 70
15390: AND
15391: IFFALSE 15613
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15404: LD_ADDR_VAR 0 6
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_OWVAR 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 21
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 3
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 6
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15613
// s1 := rand ( 1 , 4 ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: PPUSH
15475: LD_INT 4
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15483: LD_ADDR_VAR 0 4
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 259
15506: ST_TO_ADDR
// if s1 = 1 then
15507: LD_VAR 0 2
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: IFFALSE 15535
// s2 := rand ( 2 , 4 ) else
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_INT 2
15524: PPUSH
15525: LD_INT 4
15527: PPUSH
15528: CALL_OW 12
15532: ST_TO_ADDR
15533: GO 15543
// s2 := 1 ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15543: LD_ADDR_VAR 0 5
15547: PUSH
15548: LD_VAR 0 6
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: CALL_OW 259
15566: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15567: LD_VAR 0 6
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 5
15585: PPUSH
15586: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15590: LD_VAR 0 6
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: CALL_OW 237
// end ;
15613: PPOPN 6
15615: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15616: LD_EXP 24
15620: PUSH
15621: LD_EXP 71
15625: AND
15626: IFFALSE 15705
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_OWVAR 2
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 1
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: PPOPN 1
15707: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15708: LD_EXP 24
15712: PUSH
15713: LD_EXP 72
15717: AND
15718: IFFALSE 15830
15720: GO 15722
15722: DISABLE
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: LD_INT 30
15749: PUSH
15750: LD_INT 27
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 30
15759: PUSH
15760: LD_INT 26
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 28
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 69
15791: ST_TO_ADDR
// if not tmp then
15792: LD_VAR 0 2
15796: NOT
15797: IFFALSE 15801
// exit ;
15799: GO 15830
// for i in tmp do
15801: LD_ADDR_VAR 0 1
15805: PUSH
15806: LD_VAR 0 2
15810: PUSH
15811: FOR_IN
15812: IFFALSE 15828
// SetLives ( i , 1 ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 234
15826: GO 15811
15828: POP
15829: POP
// end ;
15830: PPOPN 2
15832: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15833: LD_EXP 24
15837: PUSH
15838: LD_EXP 73
15842: AND
15843: IFFALSE 16130
15845: GO 15847
15847: DISABLE
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
15852: PPUSH
// begin i := rand ( 1 , 7 ) ;
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 7
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// case i of 1 :
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 1
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 15892
15882: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15883: LD_STRING earthquake(getX(game), 0, 32)
15885: PPUSH
15886: CALL_OW 559
15890: GO 16130
15892: LD_INT 2
15894: DOUBLE
15895: EQUAL
15896: IFTRUE 15900
15898: GO 15914
15900: POP
// begin ToLua ( displayStucuk(); ) ;
15901: LD_STRING displayStucuk();
15903: PPUSH
15904: CALL_OW 559
// ResetFog ;
15908: CALL_OW 335
// end ; 3 :
15912: GO 16130
15914: LD_INT 3
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 16026
15922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 25
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: ST_TO_ADDR
// if not tmp then
15959: LD_VAR 0 2
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16130
// un := tmp [ rand ( 1 , tmp ) ] ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 12
15990: ARRAY
15991: ST_TO_ADDR
// if Crawls ( un ) then
15992: LD_VAR 0 3
15996: PPUSH
15997: CALL_OW 318
16001: IFFALSE 16012
// ComWalk ( un ) ;
16003: LD_VAR 0 3
16007: PPUSH
16008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_INT 8
16019: PPUSH
16020: CALL_OW 336
// end ; 4 :
16024: GO 16130
16026: LD_INT 4
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16108
16034: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_OWVAR 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 30
16054: PUSH
16055: LD_INT 29
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 2
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16130
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16080: LD_VAR 0 2
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: PPUSH
16089: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16093: LD_VAR 0 2
16097: PUSH
16098: LD_INT 1
16100: ARRAY
16101: PPUSH
16102: CALL_OW 65
// end ; 5 .. 7 :
16106: GO 16130
16108: LD_INT 5
16110: DOUBLE
16111: GREATEREQUAL
16112: IFFALSE 16120
16114: LD_INT 7
16116: DOUBLE
16117: LESSEQUAL
16118: IFTRUE 16122
16120: GO 16129
16122: POP
// StreamSibBomb ; end ;
16123: CALL 12367 0 0
16127: GO 16130
16129: POP
// end ;
16130: PPOPN 3
16132: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16133: LD_EXP 24
16137: PUSH
16138: LD_EXP 74
16142: AND
16143: IFFALSE 16299
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 81
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 21
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: ST_TO_ADDR
// if not tmp then
16207: LD_VAR 0 2
16211: NOT
16212: IFFALSE 16216
// exit ;
16214: GO 16299
// p := 0 ;
16216: LD_ADDR_VAR 0 3
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// p := p + 1 ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 1
16243: PLUS
16244: ST_TO_ADDR
// for i in tmp do
16245: LD_ADDR_VAR 0 1
16249: PUSH
16250: LD_VAR 0 2
16254: PUSH
16255: FOR_IN
16256: IFFALSE 16287
// if GetLives ( i ) < 1000 then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 256
16267: PUSH
16268: LD_INT 1000
16270: LESS
16271: IFFALSE 16285
// SetLives ( i , 1000 ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: LD_INT 1000
16280: PPUSH
16281: CALL_OW 234
16285: GO 16255
16287: POP
16288: POP
// until p > 20 ;
16289: LD_VAR 0 3
16293: PUSH
16294: LD_INT 20
16296: GREATER
16297: IFFALSE 16224
// end ;
16299: PPOPN 3
16301: END
// every 0 0$1 trigger StreamModeActive and sTime do
16302: LD_EXP 24
16306: PUSH
16307: LD_EXP 75
16311: AND
16312: IFFALSE 16347
16314: GO 16316
16316: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16317: LD_INT 28
16319: PPUSH
16320: LD_OWVAR 2
16324: PPUSH
16325: LD_INT 2
16327: PPUSH
16328: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16332: LD_INT 30
16334: PPUSH
16335: LD_OWVAR 2
16339: PPUSH
16340: LD_INT 2
16342: PPUSH
16343: CALL_OW 322
// end ;
16347: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16348: LD_EXP 24
16352: PUSH
16353: LD_EXP 76
16357: AND
16358: IFFALSE 16479
16360: GO 16362
16362: DISABLE
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16367: LD_ADDR_VAR 0 2
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 21
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 23
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// if not tmp then
16421: LD_VAR 0 2
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 16479
// for i in tmp do
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_VAR 0 2
16439: PUSH
16440: FOR_IN
16441: IFFALSE 16477
// begin if Crawls ( i ) then
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 318
16452: IFFALSE 16463
// ComWalk ( i ) ;
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 138
// SetClass ( i , 2 ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_INT 2
16470: PPUSH
16471: CALL_OW 336
// end ;
16475: GO 16440
16477: POP
16478: POP
// end ;
16479: PPOPN 2
16481: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16482: LD_EXP 24
16486: PUSH
16487: LD_EXP 77
16491: AND
16492: IFFALSE 16780
16494: GO 16496
16496: DISABLE
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16502: LD_OWVAR 2
16506: PPUSH
16507: LD_INT 9
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16520: LD_INT 9
16522: PPUSH
16523: LD_OWVAR 2
16527: PPUSH
16528: CALL_OW 343
// uc_side := 9 ;
16532: LD_ADDR_OWVAR 20
16536: PUSH
16537: LD_INT 9
16539: ST_TO_ADDR
// uc_nation := 2 ;
16540: LD_ADDR_OWVAR 21
16544: PUSH
16545: LD_INT 2
16547: ST_TO_ADDR
// hc_name := Dark Warrior ;
16548: LD_ADDR_OWVAR 26
16552: PUSH
16553: LD_STRING Dark Warrior
16555: ST_TO_ADDR
// hc_gallery :=  ;
16556: LD_ADDR_OWVAR 33
16560: PUSH
16561: LD_STRING 
16563: ST_TO_ADDR
// hc_noskilllimit := true ;
16564: LD_ADDR_OWVAR 76
16568: PUSH
16569: LD_INT 1
16571: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16572: LD_ADDR_OWVAR 31
16576: PUSH
16577: LD_INT 30
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 30
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: ST_TO_ADDR
// un := CreateHuman ;
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: CALL_OW 44
16604: ST_TO_ADDR
// hc_noskilllimit := false ;
16605: LD_ADDR_OWVAR 76
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16613: LD_VAR 0 3
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 51
// ToLua ( playRanger() ) ;
16625: LD_STRING playRanger()
16627: PPUSH
16628: CALL_OW 559
// p := 0 ;
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16640: LD_INT 35
16642: PPUSH
16643: CALL_OW 67
// p := p + 1 ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: PLUS
16660: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16661: LD_VAR 0 3
16665: PPUSH
16666: CALL_OW 256
16670: PUSH
16671: LD_INT 1000
16673: LESS
16674: IFFALSE 16688
// SetLives ( un , 1000 ) ;
16676: LD_VAR 0 3
16680: PPUSH
16681: LD_INT 1000
16683: PPUSH
16684: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 81
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 91
16707: PUSH
16708: LD_VAR 0 3
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: CALL_OW 74
16739: PPUSH
16740: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 80
16751: GREATER
16752: PUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: CALL_OW 301
16762: OR
16763: IFFALSE 16640
// if un then
16765: LD_VAR 0 3
16769: IFFALSE 16780
// RemoveUnit ( un ) ;
16771: LD_VAR 0 3
16775: PPUSH
16776: CALL_OW 64
// end ;
16780: PPOPN 3
16782: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16783: LD_EXP 78
16787: IFFALSE 16903
16789: GO 16791
16791: DISABLE
16792: LD_INT 0
16794: PPUSH
16795: PPUSH
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 81
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16833: LD_STRING playComputer()
16835: PPUSH
16836: CALL_OW 559
// if not tmp then
16840: LD_VAR 0 2
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16903
// for i in tmp do
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_VAR 0 2
16858: PUSH
16859: FOR_IN
16860: IFFALSE 16901
// for j := 1 to 4 do
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: DOUBLE
16868: LD_INT 1
16870: DEC
16871: ST_TO_ADDR
16872: LD_INT 4
16874: PUSH
16875: FOR_TO
16876: IFFALSE 16897
// SetSkill ( i , j , 10 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 10
16890: PPUSH
16891: CALL_OW 237
16895: GO 16875
16897: POP
16898: POP
16899: GO 16859
16901: POP
16902: POP
// end ;
16903: PPOPN 3
16905: END
// every 0 0$1 trigger s30 do var i , tmp ;
16906: LD_EXP 79
16910: IFFALSE 16979
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// if not tmp then
16941: LD_VAR 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 16979
// for i in tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: FOR_IN
16961: IFFALSE 16977
// SetLives ( i , 300 ) ;
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 300
16970: PPUSH
16971: CALL_OW 234
16975: GO 16960
16977: POP
16978: POP
// end ;
16979: PPOPN 2
16981: END
// every 0 0$1 trigger s60 do var i , tmp ;
16982: LD_EXP 80
16986: IFFALSE 17055
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_OWVAR 2
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: ST_TO_ADDR
// if not tmp then
17017: LD_VAR 0 2
17021: NOT
17022: IFFALSE 17026
// exit ;
17024: GO 17055
// for i in tmp do
17026: LD_ADDR_VAR 0 1
17030: PUSH
17031: LD_VAR 0 2
17035: PUSH
17036: FOR_IN
17037: IFFALSE 17053
// SetLives ( i , 600 ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_INT 600
17046: PPUSH
17047: CALL_OW 234
17051: GO 17036
17053: POP
17054: POP
// end ;
17055: PPOPN 2
17057: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17058: LD_INT 0
17060: PPUSH
// case cmd of 301 :
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 301
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17106
17074: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17075: LD_VAR 0 6
17079: PPUSH
17080: LD_VAR 0 7
17084: PPUSH
17085: LD_VAR 0 8
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 18315 0 5
17104: GO 17227
17106: LD_INT 302
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17151
17114: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17115: LD_VAR 0 6
17119: PPUSH
17120: LD_VAR 0 7
17124: PPUSH
17125: LD_VAR 0 8
17129: PPUSH
17130: LD_VAR 0 9
17134: PPUSH
17135: LD_VAR 0 4
17139: PPUSH
17140: LD_VAR 0 5
17144: PPUSH
17145: CALL 18406 0 6
17149: GO 17227
17151: LD_INT 303
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17196
17159: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17160: LD_VAR 0 6
17164: PPUSH
17165: LD_VAR 0 7
17169: PPUSH
17170: LD_VAR 0 8
17174: PPUSH
17175: LD_VAR 0 9
17179: PPUSH
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_VAR 0 5
17189: PPUSH
17190: CALL 17232 0 6
17194: GO 17227
17196: LD_INT 304
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17226
17204: POP
// hHackTeleport ( unit , x , y ) ; end ;
17205: LD_VAR 0 2
17209: PPUSH
17210: LD_VAR 0 4
17214: PPUSH
17215: LD_VAR 0 5
17219: PPUSH
17220: CALL 18999 0 3
17224: GO 17227
17226: POP
// end ;
17227: LD_VAR 0 12
17231: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17232: LD_INT 0
17234: PPUSH
17235: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17236: LD_VAR 0 1
17240: PUSH
17241: LD_INT 1
17243: LESS
17244: PUSH
17245: LD_VAR 0 1
17249: PUSH
17250: LD_INT 3
17252: GREATER
17253: OR
17254: PUSH
17255: LD_VAR 0 5
17259: PPUSH
17260: LD_VAR 0 6
17264: PPUSH
17265: CALL_OW 428
17269: OR
17270: IFFALSE 17274
// exit ;
17272: GO 18002
// uc_side := your_side ;
17274: LD_ADDR_OWVAR 20
17278: PUSH
17279: LD_OWVAR 2
17283: ST_TO_ADDR
// uc_nation := nation ;
17284: LD_ADDR_OWVAR 21
17288: PUSH
17289: LD_VAR 0 1
17293: ST_TO_ADDR
// bc_level = 1 ;
17294: LD_ADDR_OWVAR 43
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// case btype of 1 :
17302: LD_VAR 0 2
17306: PUSH
17307: LD_INT 1
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17326
17315: POP
// bc_type := b_depot ; 2 :
17316: LD_ADDR_OWVAR 42
17320: PUSH
17321: LD_INT 0
17323: ST_TO_ADDR
17324: GO 17946
17326: LD_INT 2
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17345
17334: POP
// bc_type := b_warehouse ; 3 :
17335: LD_ADDR_OWVAR 42
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
17343: GO 17946
17345: LD_INT 3
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17364
17353: POP
// bc_type := b_lab ; 4 .. 9 :
17354: LD_ADDR_OWVAR 42
17358: PUSH
17359: LD_INT 6
17361: ST_TO_ADDR
17362: GO 17946
17364: LD_INT 4
17366: DOUBLE
17367: GREATEREQUAL
17368: IFFALSE 17376
17370: LD_INT 9
17372: DOUBLE
17373: LESSEQUAL
17374: IFTRUE 17378
17376: GO 17438
17378: POP
// begin bc_type := b_lab_half ;
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 7
17386: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17387: LD_ADDR_OWVAR 44
17391: PUSH
17392: LD_INT 10
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 15
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: LD_INT 13
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: PUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 3
17425: MINUS
17426: ARRAY
17427: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17428: LD_ADDR_OWVAR 45
17432: PUSH
17433: LD_INT 9
17435: ST_TO_ADDR
// end ; 10 .. 13 :
17436: GO 17946
17438: LD_INT 10
17440: DOUBLE
17441: GREATEREQUAL
17442: IFFALSE 17450
17444: LD_INT 13
17446: DOUBLE
17447: LESSEQUAL
17448: IFTRUE 17452
17450: GO 17529
17452: POP
// begin bc_type := b_lab_full ;
17453: LD_ADDR_OWVAR 42
17457: PUSH
17458: LD_INT 8
17460: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17461: LD_ADDR_OWVAR 44
17465: PUSH
17466: LD_INT 10
17468: PUSH
17469: LD_INT 12
17471: PUSH
17472: LD_INT 14
17474: PUSH
17475: LD_INT 13
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: PUSH
17484: LD_VAR 0 2
17488: PUSH
17489: LD_INT 9
17491: MINUS
17492: ARRAY
17493: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17494: LD_ADDR_OWVAR 45
17498: PUSH
17499: LD_INT 11
17501: PUSH
17502: LD_INT 15
17504: PUSH
17505: LD_INT 12
17507: PUSH
17508: LD_INT 15
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: PUSH
17517: LD_VAR 0 2
17521: PUSH
17522: LD_INT 9
17524: MINUS
17525: ARRAY
17526: ST_TO_ADDR
// end ; 14 :
17527: GO 17946
17529: LD_INT 14
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 17548
17537: POP
// bc_type := b_workshop ; 15 :
17538: LD_ADDR_OWVAR 42
17542: PUSH
17543: LD_INT 2
17545: ST_TO_ADDR
17546: GO 17946
17548: LD_INT 15
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// bc_type := b_factory ; 16 :
17557: LD_ADDR_OWVAR 42
17561: PUSH
17562: LD_INT 3
17564: ST_TO_ADDR
17565: GO 17946
17567: LD_INT 16
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17586
17575: POP
// bc_type := b_ext_gun ; 17 :
17576: LD_ADDR_OWVAR 42
17580: PUSH
17581: LD_INT 17
17583: ST_TO_ADDR
17584: GO 17946
17586: LD_INT 17
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17622
17594: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17595: LD_ADDR_OWVAR 42
17599: PUSH
17600: LD_INT 19
17602: PUSH
17603: LD_INT 23
17605: PUSH
17606: LD_INT 19
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: LD_VAR 0 1
17618: ARRAY
17619: ST_TO_ADDR
17620: GO 17946
17622: LD_INT 18
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17641
17630: POP
// bc_type := b_ext_radar ; 19 :
17631: LD_ADDR_OWVAR 42
17635: PUSH
17636: LD_INT 20
17638: ST_TO_ADDR
17639: GO 17946
17641: LD_INT 19
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 17660
17649: POP
// bc_type := b_ext_radio ; 20 :
17650: LD_ADDR_OWVAR 42
17654: PUSH
17655: LD_INT 22
17657: ST_TO_ADDR
17658: GO 17946
17660: LD_INT 20
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 17679
17668: POP
// bc_type := b_ext_siberium ; 21 :
17669: LD_ADDR_OWVAR 42
17673: PUSH
17674: LD_INT 21
17676: ST_TO_ADDR
17677: GO 17946
17679: LD_INT 21
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17698
17687: POP
// bc_type := b_ext_computer ; 22 :
17688: LD_ADDR_OWVAR 42
17692: PUSH
17693: LD_INT 24
17695: ST_TO_ADDR
17696: GO 17946
17698: LD_INT 22
17700: DOUBLE
17701: EQUAL
17702: IFTRUE 17706
17704: GO 17717
17706: POP
// bc_type := b_ext_track ; 23 :
17707: LD_ADDR_OWVAR 42
17711: PUSH
17712: LD_INT 16
17714: ST_TO_ADDR
17715: GO 17946
17717: LD_INT 23
17719: DOUBLE
17720: EQUAL
17721: IFTRUE 17725
17723: GO 17736
17725: POP
// bc_type := b_ext_laser ; 24 :
17726: LD_ADDR_OWVAR 42
17730: PUSH
17731: LD_INT 25
17733: ST_TO_ADDR
17734: GO 17946
17736: LD_INT 24
17738: DOUBLE
17739: EQUAL
17740: IFTRUE 17744
17742: GO 17755
17744: POP
// bc_type := b_control_tower ; 25 :
17745: LD_ADDR_OWVAR 42
17749: PUSH
17750: LD_INT 36
17752: ST_TO_ADDR
17753: GO 17946
17755: LD_INT 25
17757: DOUBLE
17758: EQUAL
17759: IFTRUE 17763
17761: GO 17774
17763: POP
// bc_type := b_breastwork ; 26 :
17764: LD_ADDR_OWVAR 42
17768: PUSH
17769: LD_INT 31
17771: ST_TO_ADDR
17772: GO 17946
17774: LD_INT 26
17776: DOUBLE
17777: EQUAL
17778: IFTRUE 17782
17780: GO 17793
17782: POP
// bc_type := b_bunker ; 27 :
17783: LD_ADDR_OWVAR 42
17787: PUSH
17788: LD_INT 32
17790: ST_TO_ADDR
17791: GO 17946
17793: LD_INT 27
17795: DOUBLE
17796: EQUAL
17797: IFTRUE 17801
17799: GO 17812
17801: POP
// bc_type := b_turret ; 28 :
17802: LD_ADDR_OWVAR 42
17806: PUSH
17807: LD_INT 33
17809: ST_TO_ADDR
17810: GO 17946
17812: LD_INT 28
17814: DOUBLE
17815: EQUAL
17816: IFTRUE 17820
17818: GO 17831
17820: POP
// bc_type := b_armoury ; 29 :
17821: LD_ADDR_OWVAR 42
17825: PUSH
17826: LD_INT 4
17828: ST_TO_ADDR
17829: GO 17946
17831: LD_INT 29
17833: DOUBLE
17834: EQUAL
17835: IFTRUE 17839
17837: GO 17850
17839: POP
// bc_type := b_barracks ; 30 :
17840: LD_ADDR_OWVAR 42
17844: PUSH
17845: LD_INT 5
17847: ST_TO_ADDR
17848: GO 17946
17850: LD_INT 30
17852: DOUBLE
17853: EQUAL
17854: IFTRUE 17858
17856: GO 17869
17858: POP
// bc_type := b_solar_power ; 31 :
17859: LD_ADDR_OWVAR 42
17863: PUSH
17864: LD_INT 27
17866: ST_TO_ADDR
17867: GO 17946
17869: LD_INT 31
17871: DOUBLE
17872: EQUAL
17873: IFTRUE 17877
17875: GO 17888
17877: POP
// bc_type := b_oil_power ; 32 :
17878: LD_ADDR_OWVAR 42
17882: PUSH
17883: LD_INT 26
17885: ST_TO_ADDR
17886: GO 17946
17888: LD_INT 32
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17907
17896: POP
// bc_type := b_siberite_power ; 33 :
17897: LD_ADDR_OWVAR 42
17901: PUSH
17902: LD_INT 28
17904: ST_TO_ADDR
17905: GO 17946
17907: LD_INT 33
17909: DOUBLE
17910: EQUAL
17911: IFTRUE 17915
17913: GO 17926
17915: POP
// bc_type := b_oil_mine ; 34 :
17916: LD_ADDR_OWVAR 42
17920: PUSH
17921: LD_INT 29
17923: ST_TO_ADDR
17924: GO 17946
17926: LD_INT 34
17928: DOUBLE
17929: EQUAL
17930: IFTRUE 17934
17932: GO 17945
17934: POP
// bc_type := b_siberite_mine ; end ;
17935: LD_ADDR_OWVAR 42
17939: PUSH
17940: LD_INT 30
17942: ST_TO_ADDR
17943: GO 17946
17945: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17946: LD_ADDR_VAR 0 8
17950: PUSH
17951: LD_VAR 0 5
17955: PPUSH
17956: LD_VAR 0 6
17960: PPUSH
17961: LD_VAR 0 3
17965: PPUSH
17966: CALL_OW 47
17970: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17971: LD_OWVAR 42
17975: PUSH
17976: LD_INT 32
17978: PUSH
17979: LD_INT 33
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: IN
17986: IFFALSE 18002
// PlaceWeaponTurret ( b , weapon ) ;
17988: LD_VAR 0 8
17992: PPUSH
17993: LD_VAR 0 4
17997: PPUSH
17998: CALL_OW 431
// end ;
18002: LD_VAR 0 7
18006: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18013: LD_ADDR_VAR 0 4
18017: PUSH
18018: LD_INT 22
18020: PUSH
18021: LD_OWVAR 2
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 30
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 30
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: ST_TO_ADDR
// if not tmp then
18067: LD_VAR 0 4
18071: NOT
18072: IFFALSE 18076
// exit ;
18074: GO 18135
// for i in tmp do
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: LD_VAR 0 4
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18133
// for j = 1 to 3 do
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_INT 3
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18129
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: CALL_OW 274
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: LD_INT 99999
18122: PPUSH
18123: CALL_OW 277
18127: GO 18102
18129: POP
18130: POP
18131: GO 18086
18133: POP
18134: POP
// end ;
18135: LD_VAR 0 1
18139: RET
// export function hHackSetLevel10 ; var i , j ; begin
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
18144: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18145: LD_ADDR_VAR 0 2
18149: PUSH
18150: LD_INT 21
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: PUSH
18165: FOR_IN
18166: IFFALSE 18218
// if IsSelected ( i ) then
18168: LD_VAR 0 2
18172: PPUSH
18173: CALL_OW 306
18177: IFFALSE 18216
// begin for j := 1 to 4 do
18179: LD_ADDR_VAR 0 3
18183: PUSH
18184: DOUBLE
18185: LD_INT 1
18187: DEC
18188: ST_TO_ADDR
18189: LD_INT 4
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18214
// SetSkill ( i , j , 10 ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 10
18207: PPUSH
18208: CALL_OW 237
18212: GO 18192
18214: POP
18215: POP
// end ;
18216: GO 18165
18218: POP
18219: POP
// end ;
18220: LD_VAR 0 1
18224: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18225: LD_INT 0
18227: PPUSH
18228: PPUSH
18229: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_OWVAR 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 21
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: PUSH
18266: FOR_IN
18267: IFFALSE 18308
// begin for j := 1 to 4 do
18269: LD_ADDR_VAR 0 3
18273: PUSH
18274: DOUBLE
18275: LD_INT 1
18277: DEC
18278: ST_TO_ADDR
18279: LD_INT 4
18281: PUSH
18282: FOR_TO
18283: IFFALSE 18304
// SetSkill ( i , j , 10 ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_VAR 0 3
18294: PPUSH
18295: LD_INT 10
18297: PPUSH
18298: CALL_OW 237
18302: GO 18282
18304: POP
18305: POP
// end ;
18306: GO 18266
18308: POP
18309: POP
// end ;
18310: LD_VAR 0 1
18314: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18315: LD_INT 0
18317: PPUSH
// uc_side := your_side ;
18318: LD_ADDR_OWVAR 20
18322: PUSH
18323: LD_OWVAR 2
18327: ST_TO_ADDR
// uc_nation := nation ;
18328: LD_ADDR_OWVAR 21
18332: PUSH
18333: LD_VAR 0 1
18337: ST_TO_ADDR
// InitHc ;
18338: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18342: LD_INT 0
18344: PPUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_VAR 0 5
18368: PPUSH
18369: CALL_OW 428
18373: PUSH
18374: LD_INT 0
18376: EQUAL
18377: IFFALSE 18401
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18379: CALL_OW 44
18383: PPUSH
18384: LD_VAR 0 4
18388: PPUSH
18389: LD_VAR 0 5
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 48
// end ;
18401: LD_VAR 0 6
18405: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18406: LD_INT 0
18408: PPUSH
18409: PPUSH
// uc_side := your_side ;
18410: LD_ADDR_OWVAR 20
18414: PUSH
18415: LD_OWVAR 2
18419: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18420: LD_VAR 0 1
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 4
18436: PUSH
18437: LD_INT 5
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: IN
18447: IFFALSE 18459
// uc_nation := nation_american else
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
18457: GO 18502
// if chassis in [ 11 , 12 , 13 , 14 ] then
18459: LD_VAR 0 1
18463: PUSH
18464: LD_INT 11
18466: PUSH
18467: LD_INT 12
18469: PUSH
18470: LD_INT 13
18472: PUSH
18473: LD_INT 14
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: IN
18482: IFFALSE 18494
// uc_nation := nation_arabian else
18484: LD_ADDR_OWVAR 21
18488: PUSH
18489: LD_INT 2
18491: ST_TO_ADDR
18492: GO 18502
// uc_nation := nation_russian ;
18494: LD_ADDR_OWVAR 21
18498: PUSH
18499: LD_INT 3
18501: ST_TO_ADDR
// vc_chassis := chassis ;
18502: LD_ADDR_OWVAR 37
18506: PUSH
18507: LD_VAR 0 1
18511: ST_TO_ADDR
// vc_engine := engine ;
18512: LD_ADDR_OWVAR 39
18516: PUSH
18517: LD_VAR 0 2
18521: ST_TO_ADDR
// vc_control := control ;
18522: LD_ADDR_OWVAR 38
18526: PUSH
18527: LD_VAR 0 3
18531: ST_TO_ADDR
// vc_weapon := weapon ;
18532: LD_ADDR_OWVAR 40
18536: PUSH
18537: LD_VAR 0 4
18541: ST_TO_ADDR
// un := CreateVehicle ;
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: CALL_OW 45
18551: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18552: LD_VAR 0 8
18556: PPUSH
18557: LD_INT 0
18559: PPUSH
18560: LD_INT 5
18562: PPUSH
18563: CALL_OW 12
18567: PPUSH
18568: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18572: LD_VAR 0 8
18576: PPUSH
18577: LD_VAR 0 5
18581: PPUSH
18582: LD_VAR 0 6
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 48
// end ;
18594: LD_VAR 0 7
18598: RET
// export hInvincible ; every 1 do
18599: GO 18601
18601: DISABLE
// hInvincible := [ ] ;
18602: LD_ADDR_EXP 81
18606: PUSH
18607: EMPTY
18608: ST_TO_ADDR
18609: END
// every 10 do var i ;
18610: GO 18612
18612: DISABLE
18613: LD_INT 0
18615: PPUSH
// begin enable ;
18616: ENABLE
// if not hInvincible then
18617: LD_EXP 81
18621: NOT
18622: IFFALSE 18626
// exit ;
18624: GO 18670
// for i in hInvincible do
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: LD_EXP 81
18635: PUSH
18636: FOR_IN
18637: IFFALSE 18668
// if GetLives ( i ) < 1000 then
18639: LD_VAR 0 1
18643: PPUSH
18644: CALL_OW 256
18648: PUSH
18649: LD_INT 1000
18651: LESS
18652: IFFALSE 18666
// SetLives ( i , 1000 ) ;
18654: LD_VAR 0 1
18658: PPUSH
18659: LD_INT 1000
18661: PPUSH
18662: CALL_OW 234
18666: GO 18636
18668: POP
18669: POP
// end ;
18670: PPOPN 1
18672: END
// export function hHackInvincible ; var i ; begin
18673: LD_INT 0
18675: PPUSH
18676: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 21
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 21
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: PPUSH
18710: CALL_OW 69
18714: PUSH
18715: FOR_IN
18716: IFFALSE 18777
// if IsSelected ( i ) then
18718: LD_VAR 0 2
18722: PPUSH
18723: CALL_OW 306
18727: IFFALSE 18775
// begin if i in hInvincible then
18729: LD_VAR 0 2
18733: PUSH
18734: LD_EXP 81
18738: IN
18739: IFFALSE 18759
// hInvincible := hInvincible diff i else
18741: LD_ADDR_EXP 81
18745: PUSH
18746: LD_EXP 81
18750: PUSH
18751: LD_VAR 0 2
18755: DIFF
18756: ST_TO_ADDR
18757: GO 18775
// hInvincible := hInvincible union i ;
18759: LD_ADDR_EXP 81
18763: PUSH
18764: LD_EXP 81
18768: PUSH
18769: LD_VAR 0 2
18773: UNION
18774: ST_TO_ADDR
// end ;
18775: GO 18715
18777: POP
18778: POP
// end ;
18779: LD_VAR 0 1
18783: RET
// export function hHackInvisible ; var i , j ; begin
18784: LD_INT 0
18786: PPUSH
18787: PPUSH
18788: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 21
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18834
// if IsSelected ( i ) then
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 306
18821: IFFALSE 18832
// ComForceInvisible ( i ) ;
18823: LD_VAR 0 2
18827: PPUSH
18828: CALL_OW 496
18832: GO 18809
18834: POP
18835: POP
// end ;
18836: LD_VAR 0 1
18840: RET
// export function hHackChangeYourSide ; begin
18841: LD_INT 0
18843: PPUSH
// if your_side = 8 then
18844: LD_OWVAR 2
18848: PUSH
18849: LD_INT 8
18851: EQUAL
18852: IFFALSE 18864
// your_side := 0 else
18854: LD_ADDR_OWVAR 2
18858: PUSH
18859: LD_INT 0
18861: ST_TO_ADDR
18862: GO 18878
// your_side := your_side + 1 ;
18864: LD_ADDR_OWVAR 2
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: LD_INT 1
18876: PLUS
18877: ST_TO_ADDR
// end ;
18878: LD_VAR 0 1
18882: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
// for i in all_units do
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_OWVAR 3
18897: PUSH
18898: FOR_IN
18899: IFFALSE 18977
// if IsSelected ( i ) then
18901: LD_VAR 0 2
18905: PPUSH
18906: CALL_OW 306
18910: IFFALSE 18975
// begin j := GetSide ( i ) ;
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 255
18926: ST_TO_ADDR
// if j = 8 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 8
18934: EQUAL
18935: IFFALSE 18947
// j := 0 else
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
18945: GO 18961
// j := j + 1 ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_VAR 0 3
18956: PUSH
18957: LD_INT 1
18959: PLUS
18960: ST_TO_ADDR
// SetSide ( i , j ) ;
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_VAR 0 3
18970: PPUSH
18971: CALL_OW 235
// end ;
18975: GO 18898
18977: POP
18978: POP
// end ;
18979: LD_VAR 0 1
18983: RET
// export function hHackFog ; begin
18984: LD_INT 0
18986: PPUSH
// FogOff ( true ) ;
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 344
// end ;
18994: LD_VAR 0 1
18998: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18999: LD_INT 0
19001: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 483
// CenterOnXY ( x , y ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: LD_VAR 0 3
19036: PPUSH
19037: CALL_OW 84
// end ;
19041: LD_VAR 0 4
19045: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19046: LD_INT 0
19048: PPUSH
19049: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19050: LD_VAR 0 1
19054: NOT
19055: PUSH
19056: LD_VAR 0 2
19060: PPUSH
19061: LD_VAR 0 3
19065: PPUSH
19066: CALL_OW 488
19070: NOT
19071: OR
19072: PUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 266
19082: PUSH
19083: LD_INT 3
19085: NONEQUAL
19086: PUSH
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL_OW 247
19096: PUSH
19097: LD_INT 1
19099: EQUAL
19100: NOT
19101: AND
19102: OR
19103: IFFALSE 19107
// exit ;
19105: GO 19256
// if GetType ( factory ) = unit_human then
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 247
19116: PUSH
19117: LD_INT 1
19119: EQUAL
19120: IFFALSE 19137
// factory := IsInUnit ( factory ) ;
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 310
19136: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 266
19146: PUSH
19147: LD_INT 3
19149: NONEQUAL
19150: IFFALSE 19154
// exit ;
19152: GO 19256
// if HexInfo ( x , y ) = factory then
19154: LD_VAR 0 2
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 428
19168: PUSH
19169: LD_VAR 0 1
19173: EQUAL
19174: IFFALSE 19201
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19176: LD_ADDR_EXP 82
19180: PUSH
19181: LD_EXP 82
19185: PPUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 0
19193: PPUSH
19194: CALL_OW 1
19198: ST_TO_ADDR
19199: GO 19252
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19201: LD_ADDR_EXP 82
19205: PUSH
19206: LD_EXP 82
19210: PPUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 255
19225: PUSH
19226: LD_VAR 0 1
19230: PUSH
19231: LD_VAR 0 2
19235: PUSH
19236: LD_VAR 0 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 1
19251: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19252: CALL 19261 0 0
// end ;
19256: LD_VAR 0 4
19260: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
19265: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19266: LD_STRING resetFactoryWaypoint();
19268: PPUSH
19269: CALL_OW 559
// if factoryWaypoints then
19273: LD_EXP 82
19277: IFFALSE 19403
// begin list := PrepareArray ( factoryWaypoints ) ;
19279: LD_ADDR_VAR 0 3
19283: PUSH
19284: LD_EXP 82
19288: PPUSH
19289: CALL 66708 0 1
19293: ST_TO_ADDR
// for i := 1 to list do
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: DOUBLE
19300: LD_INT 1
19302: DEC
19303: ST_TO_ADDR
19304: LD_VAR 0 3
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19401
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19312: LD_STRING setFactoryWaypointXY(
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_VAR 0 2
19324: ARRAY
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: STR
19330: PUSH
19331: LD_STRING ,
19333: STR
19334: PUSH
19335: LD_VAR 0 3
19339: PUSH
19340: LD_VAR 0 2
19344: ARRAY
19345: PUSH
19346: LD_INT 2
19348: ARRAY
19349: STR
19350: PUSH
19351: LD_STRING ,
19353: STR
19354: PUSH
19355: LD_VAR 0 3
19359: PUSH
19360: LD_VAR 0 2
19364: ARRAY
19365: PUSH
19366: LD_INT 3
19368: ARRAY
19369: STR
19370: PUSH
19371: LD_STRING ,
19373: STR
19374: PUSH
19375: LD_VAR 0 3
19379: PUSH
19380: LD_VAR 0 2
19384: ARRAY
19385: PUSH
19386: LD_INT 4
19388: ARRAY
19389: STR
19390: PUSH
19391: LD_STRING )
19393: STR
19394: PPUSH
19395: CALL_OW 559
19399: GO 19309
19401: POP
19402: POP
// end ; end ;
19403: LD_VAR 0 1
19407: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19408: LD_INT 0
19410: PPUSH
// if HexInfo ( x , y ) = warehouse then
19411: LD_VAR 0 2
19415: PPUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: CALL_OW 428
19425: PUSH
19426: LD_VAR 0 1
19430: EQUAL
19431: IFFALSE 19458
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19433: LD_ADDR_EXP 83
19437: PUSH
19438: LD_EXP 83
19442: PPUSH
19443: LD_VAR 0 1
19447: PPUSH
19448: LD_INT 0
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
19456: GO 19509
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19458: LD_ADDR_EXP 83
19462: PUSH
19463: LD_EXP 83
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 255
19482: PUSH
19483: LD_VAR 0 1
19487: PUSH
19488: LD_VAR 0 2
19492: PUSH
19493: LD_VAR 0 3
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 1
19508: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19509: CALL 19518 0 0
// end ;
19513: LD_VAR 0 4
19517: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
19522: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19523: LD_STRING resetWarehouseGatheringPoints();
19525: PPUSH
19526: CALL_OW 559
// if warehouseGatheringPoints then
19530: LD_EXP 83
19534: IFFALSE 19660
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_EXP 83
19545: PPUSH
19546: CALL 66708 0 1
19550: ST_TO_ADDR
// for i := 1 to list do
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_VAR 0 3
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19658
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19569: LD_STRING setWarehouseGatheringPointXY(
19571: PUSH
19572: LD_VAR 0 3
19576: PUSH
19577: LD_VAR 0 2
19581: ARRAY
19582: PUSH
19583: LD_INT 1
19585: ARRAY
19586: STR
19587: PUSH
19588: LD_STRING ,
19590: STR
19591: PUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_VAR 0 2
19601: ARRAY
19602: PUSH
19603: LD_INT 2
19605: ARRAY
19606: STR
19607: PUSH
19608: LD_STRING ,
19610: STR
19611: PUSH
19612: LD_VAR 0 3
19616: PUSH
19617: LD_VAR 0 2
19621: ARRAY
19622: PUSH
19623: LD_INT 3
19625: ARRAY
19626: STR
19627: PUSH
19628: LD_STRING ,
19630: STR
19631: PUSH
19632: LD_VAR 0 3
19636: PUSH
19637: LD_VAR 0 2
19641: ARRAY
19642: PUSH
19643: LD_INT 4
19645: ARRAY
19646: STR
19647: PUSH
19648: LD_STRING )
19650: STR
19651: PPUSH
19652: CALL_OW 559
19656: GO 19566
19658: POP
19659: POP
// end ; end ;
19660: LD_VAR 0 1
19664: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19665: LD_EXP 83
19669: IFFALSE 20354
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
19680: PPUSH
19681: PPUSH
19682: PPUSH
19683: PPUSH
19684: PPUSH
// begin enable ;
19685: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_EXP 83
19695: PPUSH
19696: CALL 66708 0 1
19700: ST_TO_ADDR
// if not list then
19701: LD_VAR 0 3
19705: NOT
19706: IFFALSE 19710
// exit ;
19708: GO 20354
// for i := 1 to list do
19710: LD_ADDR_VAR 0 1
19714: PUSH
19715: DOUBLE
19716: LD_INT 1
19718: DEC
19719: ST_TO_ADDR
19720: LD_VAR 0 3
19724: PUSH
19725: FOR_TO
19726: IFFALSE 20352
// begin depot := list [ i ] [ 2 ] ;
19728: LD_ADDR_VAR 0 8
19732: PUSH
19733: LD_VAR 0 3
19737: PUSH
19738: LD_VAR 0 1
19742: ARRAY
19743: PUSH
19744: LD_INT 2
19746: ARRAY
19747: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19748: LD_ADDR_VAR 0 5
19752: PUSH
19753: LD_VAR 0 3
19757: PUSH
19758: LD_VAR 0 1
19762: ARRAY
19763: PUSH
19764: LD_INT 1
19766: ARRAY
19767: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19768: LD_VAR 0 8
19772: PPUSH
19773: CALL_OW 301
19777: PUSH
19778: LD_VAR 0 5
19782: PUSH
19783: LD_VAR 0 8
19787: PPUSH
19788: CALL_OW 255
19792: NONEQUAL
19793: OR
19794: IFFALSE 19823
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19796: LD_ADDR_EXP 83
19800: PUSH
19801: LD_EXP 83
19805: PPUSH
19806: LD_VAR 0 8
19810: PPUSH
19811: LD_INT 0
19813: PPUSH
19814: CALL_OW 1
19818: ST_TO_ADDR
// exit ;
19819: POP
19820: POP
19821: GO 20354
// end ; x := list [ i ] [ 3 ] ;
19823: LD_ADDR_VAR 0 6
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: LD_VAR 0 1
19837: ARRAY
19838: PUSH
19839: LD_INT 3
19841: ARRAY
19842: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19843: LD_ADDR_VAR 0 7
19847: PUSH
19848: LD_VAR 0 3
19852: PUSH
19853: LD_VAR 0 1
19857: ARRAY
19858: PUSH
19859: LD_INT 4
19861: ARRAY
19862: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19863: LD_ADDR_VAR 0 9
19867: PUSH
19868: LD_VAR 0 6
19872: PPUSH
19873: LD_VAR 0 7
19877: PPUSH
19878: LD_INT 16
19880: PPUSH
19881: CALL 65296 0 3
19885: ST_TO_ADDR
// if not cratesNearbyPoint then
19886: LD_VAR 0 9
19890: NOT
19891: IFFALSE 19897
// exit ;
19893: POP
19894: POP
19895: GO 20354
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19897: LD_ADDR_VAR 0 4
19901: PUSH
19902: LD_INT 22
19904: PUSH
19905: LD_VAR 0 5
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 60
19919: PUSH
19920: EMPTY
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 91
19929: PUSH
19930: LD_VAR 0 8
19934: PUSH
19935: LD_INT 6
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 25
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 25
19958: PUSH
19959: LD_INT 16
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: PPUSH
19977: CALL_OW 69
19981: PUSH
19982: LD_VAR 0 8
19986: PPUSH
19987: CALL_OW 313
19991: PPUSH
19992: LD_INT 3
19994: PUSH
19995: LD_INT 60
19997: PUSH
19998: EMPTY
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 16
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 72
20041: UNION
20042: ST_TO_ADDR
// if tmp then
20043: LD_VAR 0 4
20047: IFFALSE 20127
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20049: LD_ADDR_VAR 0 4
20053: PUSH
20054: LD_VAR 0 4
20058: PPUSH
20059: LD_INT 3
20061: PPUSH
20062: CALL 63265 0 2
20066: ST_TO_ADDR
// for j in tmp do
20067: LD_ADDR_VAR 0 2
20071: PUSH
20072: LD_VAR 0 4
20076: PUSH
20077: FOR_IN
20078: IFFALSE 20121
// begin if IsInUnit ( j ) then
20080: LD_VAR 0 2
20084: PPUSH
20085: CALL_OW 310
20089: IFFALSE 20100
// ComExit ( j ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: CALL 63348 0 1
// AddComCollect ( j , x , y ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_VAR 0 6
20109: PPUSH
20110: LD_VAR 0 7
20114: PPUSH
20115: CALL_OW 177
// end ;
20119: GO 20077
20121: POP
20122: POP
// exit ;
20123: POP
20124: POP
20125: GO 20354
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20127: LD_ADDR_VAR 0 4
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_VAR 0 5
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 91
20146: PUSH
20147: LD_VAR 0 8
20151: PUSH
20152: LD_INT 8
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 34
20165: PUSH
20166: LD_INT 12
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 34
20175: PUSH
20176: LD_INT 51
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 34
20185: PUSH
20186: LD_INT 32
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 34
20195: PUSH
20196: LD_INT 89
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: ST_TO_ADDR
// if tmp then
20220: LD_VAR 0 4
20224: IFFALSE 20350
// begin for j in tmp do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_VAR 0 4
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20348
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 262
20248: PUSH
20249: LD_INT 3
20251: EQUAL
20252: PUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 261
20262: PUSH
20263: LD_INT 20
20265: GREATER
20266: OR
20267: PUSH
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 314
20277: NOT
20278: AND
20279: PUSH
20280: LD_VAR 0 2
20284: PPUSH
20285: CALL_OW 263
20289: PUSH
20290: LD_INT 1
20292: NONEQUAL
20293: PUSH
20294: LD_VAR 0 2
20298: PPUSH
20299: CALL_OW 311
20303: OR
20304: AND
20305: IFFALSE 20346
// begin ComCollect ( j , x , y ) ;
20307: LD_VAR 0 2
20311: PPUSH
20312: LD_VAR 0 6
20316: PPUSH
20317: LD_VAR 0 7
20321: PPUSH
20322: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20326: LD_VAR 0 2
20330: PPUSH
20331: LD_VAR 0 8
20335: PPUSH
20336: CALL_OW 172
// exit ;
20340: POP
20341: POP
20342: POP
20343: POP
20344: GO 20354
// end ;
20346: GO 20236
20348: POP
20349: POP
// end ; end ;
20350: GO 19725
20352: POP
20353: POP
// end ; end_of_file
20354: PPOPN 9
20356: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20357: LD_VAR 0 1
20361: PUSH
20362: LD_INT 200
20364: DOUBLE
20365: GREATEREQUAL
20366: IFFALSE 20374
20368: LD_INT 299
20370: DOUBLE
20371: LESSEQUAL
20372: IFTRUE 20376
20374: GO 20408
20376: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_VAR 0 2
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: LD_VAR 0 4
20396: PPUSH
20397: LD_VAR 0 5
20401: PPUSH
20402: CALL 20896 0 5
20406: GO 20485
20408: LD_INT 300
20410: DOUBLE
20411: GREATEREQUAL
20412: IFFALSE 20420
20414: LD_INT 399
20416: DOUBLE
20417: LESSEQUAL
20418: IFTRUE 20422
20420: GO 20484
20422: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_VAR 0 4
20442: PPUSH
20443: LD_VAR 0 5
20447: PPUSH
20448: LD_VAR 0 6
20452: PPUSH
20453: LD_VAR 0 7
20457: PPUSH
20458: LD_VAR 0 8
20462: PPUSH
20463: LD_VAR 0 9
20467: PPUSH
20468: LD_VAR 0 10
20472: PPUSH
20473: LD_VAR 0 11
20477: PPUSH
20478: CALL 17058 0 11
20482: GO 20485
20484: POP
// end ;
20485: PPOPN 11
20487: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20488: LD_VAR 0 1
20492: PPUSH
20493: LD_VAR 0 2
20497: PPUSH
20498: LD_VAR 0 3
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: LD_VAR 0 5
20512: PPUSH
20513: CALL 20632 0 5
// end ; end_of_file
20517: PPOPN 5
20519: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 264
20535: PUSH
20536: LD_INT 91
20538: EQUAL
20539: IFFALSE 20611
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20541: LD_INT 68
20543: PPUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 255
20553: PPUSH
20554: CALL_OW 321
20558: PUSH
20559: LD_INT 2
20561: EQUAL
20562: IFFALSE 20574
// eff := 70 else
20564: LD_ADDR_VAR 0 4
20568: PUSH
20569: LD_INT 70
20571: ST_TO_ADDR
20572: GO 20582
// eff := 30 ;
20574: LD_ADDR_VAR 0 4
20578: PUSH
20579: LD_INT 30
20581: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 250
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 251
20601: PPUSH
20602: LD_VAR 0 4
20606: PPUSH
20607: CALL_OW 495
// end ; end ;
20611: LD_VAR 0 2
20615: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20616: LD_INT 0
20618: PPUSH
// end ;
20619: LD_VAR 0 4
20623: RET
// export function SOS_Command ( cmd ) ; begin
20624: LD_INT 0
20626: PPUSH
// end ;
20627: LD_VAR 0 2
20631: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20632: LD_INT 0
20634: PPUSH
// end ;
20635: LD_VAR 0 6
20639: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
// if not vehicle or not factory then
20644: LD_VAR 0 1
20648: NOT
20649: PUSH
20650: LD_VAR 0 2
20654: NOT
20655: OR
20656: IFFALSE 20660
// exit ;
20658: GO 20891
// if factoryWaypoints >= factory then
20660: LD_EXP 82
20664: PUSH
20665: LD_VAR 0 2
20669: GREATEREQUAL
20670: IFFALSE 20891
// if factoryWaypoints [ factory ] then
20672: LD_EXP 82
20676: PUSH
20677: LD_VAR 0 2
20681: ARRAY
20682: IFFALSE 20891
// begin if GetControl ( vehicle ) = control_manual then
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 263
20693: PUSH
20694: LD_INT 1
20696: EQUAL
20697: IFFALSE 20778
// begin driver := IsDrivenBy ( vehicle ) ;
20699: LD_ADDR_VAR 0 4
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 311
20713: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20714: LD_VAR 0 4
20718: PPUSH
20719: LD_EXP 82
20723: PUSH
20724: LD_VAR 0 2
20728: ARRAY
20729: PUSH
20730: LD_INT 3
20732: ARRAY
20733: PPUSH
20734: LD_EXP 82
20738: PUSH
20739: LD_VAR 0 2
20743: ARRAY
20744: PUSH
20745: LD_INT 4
20747: ARRAY
20748: PPUSH
20749: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20753: LD_VAR 0 4
20757: PPUSH
20758: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20762: LD_VAR 0 4
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 180
// end else
20776: GO 20891
// if GetControl ( vehicle ) = control_remote then
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 263
20787: PUSH
20788: LD_INT 2
20790: EQUAL
20791: IFFALSE 20852
// begin wait ( 0 0$2 ) ;
20793: LD_INT 70
20795: PPUSH
20796: CALL_OW 67
// if Connect ( vehicle ) then
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL 33556 0 1
20809: IFFALSE 20850
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_EXP 82
20820: PUSH
20821: LD_VAR 0 2
20825: ARRAY
20826: PUSH
20827: LD_INT 3
20829: ARRAY
20830: PPUSH
20831: LD_EXP 82
20835: PUSH
20836: LD_VAR 0 2
20840: ARRAY
20841: PUSH
20842: LD_INT 4
20844: ARRAY
20845: PPUSH
20846: CALL_OW 171
// end else
20850: GO 20891
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20852: LD_VAR 0 1
20856: PPUSH
20857: LD_EXP 82
20861: PUSH
20862: LD_VAR 0 2
20866: ARRAY
20867: PUSH
20868: LD_INT 3
20870: ARRAY
20871: PPUSH
20872: LD_EXP 82
20876: PUSH
20877: LD_VAR 0 2
20881: ARRAY
20882: PUSH
20883: LD_INT 4
20885: ARRAY
20886: PPUSH
20887: CALL_OW 171
// end ; end ;
20891: LD_VAR 0 3
20895: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20896: LD_INT 0
20898: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20899: LD_VAR 0 1
20903: PUSH
20904: LD_INT 250
20906: EQUAL
20907: PUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: CALL_OW 264
20917: PUSH
20918: LD_INT 81
20920: EQUAL
20921: AND
20922: IFFALSE 20943
// MinerPlaceMine ( unit , x , y ) ;
20924: LD_VAR 0 2
20928: PPUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: CALL 23767 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 251
20950: EQUAL
20951: PUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 264
20961: PUSH
20962: LD_INT 81
20964: EQUAL
20965: AND
20966: IFFALSE 20987
// MinerDetonateMine ( unit , x , y ) ;
20968: LD_VAR 0 2
20972: PPUSH
20973: LD_VAR 0 4
20977: PPUSH
20978: LD_VAR 0 5
20982: PPUSH
20983: CALL 24042 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20987: LD_VAR 0 1
20991: PUSH
20992: LD_INT 252
20994: EQUAL
20995: PUSH
20996: LD_VAR 0 2
21000: PPUSH
21001: CALL_OW 264
21005: PUSH
21006: LD_INT 81
21008: EQUAL
21009: AND
21010: IFFALSE 21031
// MinerCreateMinefield ( unit , x , y ) ;
21012: LD_VAR 0 2
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: LD_VAR 0 5
21026: PPUSH
21027: CALL 24459 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21031: LD_VAR 0 1
21035: PUSH
21036: LD_INT 253
21038: EQUAL
21039: PUSH
21040: LD_VAR 0 2
21044: PPUSH
21045: CALL_OW 257
21049: PUSH
21050: LD_INT 5
21052: EQUAL
21053: AND
21054: IFFALSE 21075
// ComBinocular ( unit , x , y ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 5
21070: PPUSH
21071: CALL 24828 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21075: LD_VAR 0 1
21079: PUSH
21080: LD_INT 254
21082: EQUAL
21083: PUSH
21084: LD_VAR 0 2
21088: PPUSH
21089: CALL_OW 264
21093: PUSH
21094: LD_INT 99
21096: EQUAL
21097: AND
21098: PUSH
21099: LD_VAR 0 3
21103: PPUSH
21104: CALL_OW 263
21108: PUSH
21109: LD_INT 3
21111: EQUAL
21112: AND
21113: IFFALSE 21129
// HackDestroyVehicle ( unit , selectedUnit ) ;
21115: LD_VAR 0 2
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: CALL 23131 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21129: LD_VAR 0 1
21133: PUSH
21134: LD_INT 255
21136: EQUAL
21137: PUSH
21138: LD_VAR 0 2
21142: PPUSH
21143: CALL_OW 264
21147: PUSH
21148: LD_INT 14
21150: PUSH
21151: LD_INT 53
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: IN
21158: AND
21159: PUSH
21160: LD_VAR 0 4
21164: PPUSH
21165: LD_VAR 0 5
21169: PPUSH
21170: CALL_OW 488
21174: AND
21175: IFFALSE 21199
// CutTreeXYR ( unit , x , y , 12 ) ;
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_VAR 0 4
21186: PPUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: LD_INT 12
21194: PPUSH
21195: CALL 21294 0 4
// if cmd = 256 then
21199: LD_VAR 0 1
21203: PUSH
21204: LD_INT 256
21206: EQUAL
21207: IFFALSE 21228
// SetFactoryWaypoint ( unit , x , y ) ;
21209: LD_VAR 0 2
21213: PPUSH
21214: LD_VAR 0 4
21218: PPUSH
21219: LD_VAR 0 5
21223: PPUSH
21224: CALL 19046 0 3
// if cmd = 257 then
21228: LD_VAR 0 1
21232: PUSH
21233: LD_INT 257
21235: EQUAL
21236: IFFALSE 21257
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL 19408 0 3
// if cmd = 258 then
21257: LD_VAR 0 1
21261: PUSH
21262: LD_INT 258
21264: EQUAL
21265: IFFALSE 21289
// BurnTreeXYR ( unit , x , y , 8 ) ;
21267: LD_VAR 0 2
21271: PPUSH
21272: LD_VAR 0 4
21276: PPUSH
21277: LD_VAR 0 5
21281: PPUSH
21282: LD_INT 8
21284: PPUSH
21285: CALL 21688 0 4
// end ;
21289: LD_VAR 0 6
21293: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
21299: PPUSH
21300: PPUSH
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 302
21314: NOT
21315: PUSH
21316: LD_VAR 0 2
21320: PPUSH
21321: LD_VAR 0 3
21325: PPUSH
21326: CALL_OW 488
21330: NOT
21331: OR
21332: PUSH
21333: LD_VAR 0 4
21337: NOT
21338: OR
21339: IFFALSE 21343
// exit ;
21341: GO 21683
// list := [ ] ;
21343: LD_ADDR_VAR 0 13
21347: PUSH
21348: EMPTY
21349: ST_TO_ADDR
// if x - r < 0 then
21350: LD_VAR 0 2
21354: PUSH
21355: LD_VAR 0 4
21359: MINUS
21360: PUSH
21361: LD_INT 0
21363: LESS
21364: IFFALSE 21376
// min_x := 0 else
21366: LD_ADDR_VAR 0 7
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
21374: GO 21392
// min_x := x - r ;
21376: LD_ADDR_VAR 0 7
21380: PUSH
21381: LD_VAR 0 2
21385: PUSH
21386: LD_VAR 0 4
21390: MINUS
21391: ST_TO_ADDR
// if y - r < 0 then
21392: LD_VAR 0 3
21396: PUSH
21397: LD_VAR 0 4
21401: MINUS
21402: PUSH
21403: LD_INT 0
21405: LESS
21406: IFFALSE 21418
// min_y := 0 else
21408: LD_ADDR_VAR 0 8
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
21416: GO 21434
// min_y := y - r ;
21418: LD_ADDR_VAR 0 8
21422: PUSH
21423: LD_VAR 0 3
21427: PUSH
21428: LD_VAR 0 4
21432: MINUS
21433: ST_TO_ADDR
// max_x := x + r ;
21434: LD_ADDR_VAR 0 9
21438: PUSH
21439: LD_VAR 0 2
21443: PUSH
21444: LD_VAR 0 4
21448: PLUS
21449: ST_TO_ADDR
// max_y := y + r ;
21450: LD_ADDR_VAR 0 10
21454: PUSH
21455: LD_VAR 0 3
21459: PUSH
21460: LD_VAR 0 4
21464: PLUS
21465: ST_TO_ADDR
// for _x = min_x to max_x do
21466: LD_ADDR_VAR 0 11
21470: PUSH
21471: DOUBLE
21472: LD_VAR 0 7
21476: DEC
21477: ST_TO_ADDR
21478: LD_VAR 0 9
21482: PUSH
21483: FOR_TO
21484: IFFALSE 21601
// for _y = min_y to max_y do
21486: LD_ADDR_VAR 0 12
21490: PUSH
21491: DOUBLE
21492: LD_VAR 0 8
21496: DEC
21497: ST_TO_ADDR
21498: LD_VAR 0 10
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21597
// begin if not ValidHex ( _x , _y ) then
21506: LD_VAR 0 11
21510: PPUSH
21511: LD_VAR 0 12
21515: PPUSH
21516: CALL_OW 488
21520: NOT
21521: IFFALSE 21525
// continue ;
21523: GO 21503
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21525: LD_VAR 0 11
21529: PPUSH
21530: LD_VAR 0 12
21534: PPUSH
21535: CALL_OW 351
21539: PUSH
21540: LD_VAR 0 11
21544: PPUSH
21545: LD_VAR 0 12
21549: PPUSH
21550: CALL_OW 554
21554: AND
21555: IFFALSE 21595
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21557: LD_ADDR_VAR 0 13
21561: PUSH
21562: LD_VAR 0 13
21566: PPUSH
21567: LD_VAR 0 13
21571: PUSH
21572: LD_INT 1
21574: PLUS
21575: PPUSH
21576: LD_VAR 0 11
21580: PUSH
21581: LD_VAR 0 12
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PPUSH
21590: CALL_OW 2
21594: ST_TO_ADDR
// end ;
21595: GO 21503
21597: POP
21598: POP
21599: GO 21483
21601: POP
21602: POP
// if not list then
21603: LD_VAR 0 13
21607: NOT
21608: IFFALSE 21612
// exit ;
21610: GO 21683
// for i in list do
21612: LD_ADDR_VAR 0 6
21616: PUSH
21617: LD_VAR 0 13
21621: PUSH
21622: FOR_IN
21623: IFFALSE 21681
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21625: LD_VAR 0 1
21629: PPUSH
21630: LD_STRING M
21632: PUSH
21633: LD_VAR 0 6
21637: PUSH
21638: LD_INT 1
21640: ARRAY
21641: PUSH
21642: LD_VAR 0 6
21646: PUSH
21647: LD_INT 2
21649: ARRAY
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: PPUSH
21675: CALL_OW 447
21679: GO 21622
21681: POP
21682: POP
// end ;
21683: LD_VAR 0 5
21687: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 302
21708: NOT
21709: PUSH
21710: LD_VAR 0 2
21714: PPUSH
21715: LD_VAR 0 3
21719: PPUSH
21720: CALL_OW 488
21724: NOT
21725: OR
21726: PUSH
21727: LD_VAR 0 4
21731: NOT
21732: OR
21733: IFFALSE 21737
// exit ;
21735: GO 22085
// list := [ ] ;
21737: LD_ADDR_VAR 0 13
21741: PUSH
21742: EMPTY
21743: ST_TO_ADDR
// if x - r < 0 then
21744: LD_VAR 0 2
21748: PUSH
21749: LD_VAR 0 4
21753: MINUS
21754: PUSH
21755: LD_INT 0
21757: LESS
21758: IFFALSE 21770
// min_x := 0 else
21760: LD_ADDR_VAR 0 7
21764: PUSH
21765: LD_INT 0
21767: ST_TO_ADDR
21768: GO 21786
// min_x := x - r ;
21770: LD_ADDR_VAR 0 7
21774: PUSH
21775: LD_VAR 0 2
21779: PUSH
21780: LD_VAR 0 4
21784: MINUS
21785: ST_TO_ADDR
// if y - r < 0 then
21786: LD_VAR 0 3
21790: PUSH
21791: LD_VAR 0 4
21795: MINUS
21796: PUSH
21797: LD_INT 0
21799: LESS
21800: IFFALSE 21812
// min_y := 0 else
21802: LD_ADDR_VAR 0 8
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
21810: GO 21828
// min_y := y - r ;
21812: LD_ADDR_VAR 0 8
21816: PUSH
21817: LD_VAR 0 3
21821: PUSH
21822: LD_VAR 0 4
21826: MINUS
21827: ST_TO_ADDR
// max_x := x + r ;
21828: LD_ADDR_VAR 0 9
21832: PUSH
21833: LD_VAR 0 2
21837: PUSH
21838: LD_VAR 0 4
21842: PLUS
21843: ST_TO_ADDR
// max_y := y + r ;
21844: LD_ADDR_VAR 0 10
21848: PUSH
21849: LD_VAR 0 3
21853: PUSH
21854: LD_VAR 0 4
21858: PLUS
21859: ST_TO_ADDR
// for _x = min_x to max_x do
21860: LD_ADDR_VAR 0 11
21864: PUSH
21865: DOUBLE
21866: LD_VAR 0 7
21870: DEC
21871: ST_TO_ADDR
21872: LD_VAR 0 9
21876: PUSH
21877: FOR_TO
21878: IFFALSE 21995
// for _y = min_y to max_y do
21880: LD_ADDR_VAR 0 12
21884: PUSH
21885: DOUBLE
21886: LD_VAR 0 8
21890: DEC
21891: ST_TO_ADDR
21892: LD_VAR 0 10
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21991
// begin if not ValidHex ( _x , _y ) then
21900: LD_VAR 0 11
21904: PPUSH
21905: LD_VAR 0 12
21909: PPUSH
21910: CALL_OW 488
21914: NOT
21915: IFFALSE 21919
// continue ;
21917: GO 21897
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21919: LD_VAR 0 11
21923: PPUSH
21924: LD_VAR 0 12
21928: PPUSH
21929: CALL_OW 351
21933: PUSH
21934: LD_VAR 0 11
21938: PPUSH
21939: LD_VAR 0 12
21943: PPUSH
21944: CALL_OW 554
21948: AND
21949: IFFALSE 21989
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21951: LD_ADDR_VAR 0 13
21955: PUSH
21956: LD_VAR 0 13
21960: PPUSH
21961: LD_VAR 0 13
21965: PUSH
21966: LD_INT 1
21968: PLUS
21969: PPUSH
21970: LD_VAR 0 11
21974: PUSH
21975: LD_VAR 0 12
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 2
21988: ST_TO_ADDR
// end ;
21989: GO 21897
21991: POP
21992: POP
21993: GO 21877
21995: POP
21996: POP
// if not list then
21997: LD_VAR 0 13
22001: NOT
22002: IFFALSE 22006
// exit ;
22004: GO 22085
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22006: LD_ADDR_VAR 0 13
22010: PUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: LD_VAR 0 13
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: LD_INT 1
22026: PPUSH
22027: CALL 30698 0 4
22031: ST_TO_ADDR
// ComStop ( flame ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 141
// for i in list do
22041: LD_ADDR_VAR 0 6
22045: PUSH
22046: LD_VAR 0 13
22050: PUSH
22051: FOR_IN
22052: IFFALSE 22083
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22054: LD_VAR 0 1
22058: PPUSH
22059: LD_VAR 0 6
22063: PUSH
22064: LD_INT 1
22066: ARRAY
22067: PPUSH
22068: LD_VAR 0 6
22072: PUSH
22073: LD_INT 2
22075: ARRAY
22076: PPUSH
22077: CALL_OW 176
22081: GO 22051
22083: POP
22084: POP
// end ;
22085: LD_VAR 0 5
22089: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22090: LD_EXP 85
22094: NOT
22095: IFFALSE 22145
22097: GO 22099
22099: DISABLE
// begin initHack := true ;
22100: LD_ADDR_EXP 85
22104: PUSH
22105: LD_INT 1
22107: ST_TO_ADDR
// hackTanks := [ ] ;
22108: LD_ADDR_EXP 86
22112: PUSH
22113: EMPTY
22114: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22115: LD_ADDR_EXP 87
22119: PUSH
22120: EMPTY
22121: ST_TO_ADDR
// hackLimit := 3 ;
22122: LD_ADDR_EXP 88
22126: PUSH
22127: LD_INT 3
22129: ST_TO_ADDR
// hackDist := 12 ;
22130: LD_ADDR_EXP 89
22134: PUSH
22135: LD_INT 12
22137: ST_TO_ADDR
// hackCounter := [ ] ;
22138: LD_ADDR_EXP 90
22142: PUSH
22143: EMPTY
22144: ST_TO_ADDR
// end ;
22145: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22146: LD_EXP 85
22150: PUSH
22151: LD_INT 34
22153: PUSH
22154: LD_INT 99
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: AND
22166: IFFALSE 22419
22168: GO 22170
22170: DISABLE
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
// begin enable ;
22175: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22176: LD_ADDR_VAR 0 1
22180: PUSH
22181: LD_INT 34
22183: PUSH
22184: LD_INT 99
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: PUSH
22196: FOR_IN
22197: IFFALSE 22417
// begin if not i in hackTanks then
22199: LD_VAR 0 1
22203: PUSH
22204: LD_EXP 86
22208: IN
22209: NOT
22210: IFFALSE 22293
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22212: LD_ADDR_EXP 86
22216: PUSH
22217: LD_EXP 86
22221: PPUSH
22222: LD_EXP 86
22226: PUSH
22227: LD_INT 1
22229: PLUS
22230: PPUSH
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 1
22240: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22241: LD_ADDR_EXP 87
22245: PUSH
22246: LD_EXP 87
22250: PPUSH
22251: LD_EXP 87
22255: PUSH
22256: LD_INT 1
22258: PLUS
22259: PPUSH
22260: EMPTY
22261: PPUSH
22262: CALL_OW 1
22266: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22267: LD_ADDR_EXP 90
22271: PUSH
22272: LD_EXP 90
22276: PPUSH
22277: LD_EXP 90
22281: PUSH
22282: LD_INT 1
22284: PLUS
22285: PPUSH
22286: EMPTY
22287: PPUSH
22288: CALL_OW 1
22292: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 302
22302: NOT
22303: IFFALSE 22316
// begin HackUnlinkAll ( i ) ;
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL 22422 0 1
// continue ;
22314: GO 22196
// end ; HackCheckCapturedStatus ( i ) ;
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL 22865 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22325: LD_ADDR_VAR 0 2
22329: PUSH
22330: LD_INT 81
22332: PUSH
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 255
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 33
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 91
22359: PUSH
22360: LD_VAR 0 1
22364: PUSH
22365: LD_EXP 89
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 50
22377: PUSH
22378: EMPTY
22379: LIST
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 69
22391: ST_TO_ADDR
// if not tmp then
22392: LD_VAR 0 2
22396: NOT
22397: IFFALSE 22401
// continue ;
22399: GO 22196
// HackLink ( i , tmp ) ;
22401: LD_VAR 0 1
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: CALL 22558 0 2
// end ;
22415: GO 22196
22417: POP
22418: POP
// end ;
22419: PPOPN 2
22421: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22422: LD_INT 0
22424: PPUSH
22425: PPUSH
22426: PPUSH
// if not hack in hackTanks then
22427: LD_VAR 0 1
22431: PUSH
22432: LD_EXP 86
22436: IN
22437: NOT
22438: IFFALSE 22442
// exit ;
22440: GO 22553
// index := GetElementIndex ( hackTanks , hack ) ;
22442: LD_ADDR_VAR 0 4
22446: PUSH
22447: LD_EXP 86
22451: PPUSH
22452: LD_VAR 0 1
22456: PPUSH
22457: CALL 29995 0 2
22461: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22462: LD_EXP 87
22466: PUSH
22467: LD_VAR 0 4
22471: ARRAY
22472: IFFALSE 22553
// begin for i in hackTanksCaptured [ index ] do
22474: LD_ADDR_VAR 0 3
22478: PUSH
22479: LD_EXP 87
22483: PUSH
22484: LD_VAR 0 4
22488: ARRAY
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22517
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22493: LD_VAR 0 3
22497: PUSH
22498: LD_INT 1
22500: ARRAY
22501: PPUSH
22502: LD_VAR 0 3
22506: PUSH
22507: LD_INT 2
22509: ARRAY
22510: PPUSH
22511: CALL_OW 235
22515: GO 22490
22517: POP
22518: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22519: LD_ADDR_EXP 87
22523: PUSH
22524: LD_EXP 87
22528: PPUSH
22529: LD_VAR 0 4
22533: PPUSH
22534: EMPTY
22535: PPUSH
22536: CALL_OW 1
22540: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22541: LD_VAR 0 1
22545: PPUSH
22546: LD_INT 0
22548: PPUSH
22549: CALL_OW 505
// end ; end ;
22553: LD_VAR 0 2
22557: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
// if not hack in hackTanks or not vehicles then
22563: LD_VAR 0 1
22567: PUSH
22568: LD_EXP 86
22572: IN
22573: NOT
22574: PUSH
22575: LD_VAR 0 2
22579: NOT
22580: OR
22581: IFFALSE 22585
// exit ;
22583: GO 22860
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_VAR 0 1
22594: PPUSH
22595: LD_VAR 0 2
22599: PPUSH
22600: LD_INT 1
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: CALL 30645 0 4
22610: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22611: LD_ADDR_VAR 0 5
22615: PUSH
22616: LD_EXP 86
22620: PPUSH
22621: LD_VAR 0 1
22625: PPUSH
22626: CALL 29995 0 2
22630: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22631: LD_EXP 87
22635: PUSH
22636: LD_VAR 0 5
22640: ARRAY
22641: PUSH
22642: LD_EXP 88
22646: LESS
22647: IFFALSE 22836
// begin for i := 1 to vehicles do
22649: LD_ADDR_VAR 0 4
22653: PUSH
22654: DOUBLE
22655: LD_INT 1
22657: DEC
22658: ST_TO_ADDR
22659: LD_VAR 0 2
22663: PUSH
22664: FOR_TO
22665: IFFALSE 22834
// begin if hackTanksCaptured [ index ] = hackLimit then
22667: LD_EXP 87
22671: PUSH
22672: LD_VAR 0 5
22676: ARRAY
22677: PUSH
22678: LD_EXP 88
22682: EQUAL
22683: IFFALSE 22687
// break ;
22685: GO 22834
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22687: LD_ADDR_EXP 90
22691: PUSH
22692: LD_EXP 90
22696: PPUSH
22697: LD_VAR 0 5
22701: PPUSH
22702: LD_EXP 90
22706: PUSH
22707: LD_VAR 0 5
22711: ARRAY
22712: PUSH
22713: LD_INT 1
22715: PLUS
22716: PPUSH
22717: CALL_OW 1
22721: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22722: LD_ADDR_EXP 87
22726: PUSH
22727: LD_EXP 87
22731: PPUSH
22732: LD_VAR 0 5
22736: PUSH
22737: LD_EXP 87
22741: PUSH
22742: LD_VAR 0 5
22746: ARRAY
22747: PUSH
22748: LD_INT 1
22750: PLUS
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PPUSH
22756: LD_VAR 0 2
22760: PUSH
22761: LD_VAR 0 4
22765: ARRAY
22766: PUSH
22767: LD_VAR 0 2
22771: PUSH
22772: LD_VAR 0 4
22776: ARRAY
22777: PPUSH
22778: CALL_OW 255
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PPUSH
22787: CALL 30210 0 3
22791: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22792: LD_VAR 0 2
22796: PUSH
22797: LD_VAR 0 4
22801: ARRAY
22802: PPUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 255
22812: PPUSH
22813: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22817: LD_VAR 0 2
22821: PUSH
22822: LD_VAR 0 4
22826: ARRAY
22827: PPUSH
22828: CALL_OW 141
// end ;
22832: GO 22664
22834: POP
22835: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22836: LD_VAR 0 1
22840: PPUSH
22841: LD_EXP 87
22845: PUSH
22846: LD_VAR 0 5
22850: ARRAY
22851: PUSH
22852: LD_INT 0
22854: PLUS
22855: PPUSH
22856: CALL_OW 505
// end ;
22860: LD_VAR 0 3
22864: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
22869: PPUSH
22870: PPUSH
// if not hack in hackTanks then
22871: LD_VAR 0 1
22875: PUSH
22876: LD_EXP 86
22880: IN
22881: NOT
22882: IFFALSE 22886
// exit ;
22884: GO 23126
// index := GetElementIndex ( hackTanks , hack ) ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_EXP 86
22895: PPUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL 29995 0 2
22905: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22906: LD_ADDR_VAR 0 3
22910: PUSH
22911: DOUBLE
22912: LD_EXP 87
22916: PUSH
22917: LD_VAR 0 4
22921: ARRAY
22922: INC
22923: ST_TO_ADDR
22924: LD_INT 1
22926: PUSH
22927: FOR_DOWNTO
22928: IFFALSE 23100
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22930: LD_ADDR_VAR 0 5
22934: PUSH
22935: LD_EXP 87
22939: PUSH
22940: LD_VAR 0 4
22944: ARRAY
22945: PUSH
22946: LD_VAR 0 3
22950: ARRAY
22951: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22952: LD_VAR 0 5
22956: PUSH
22957: LD_INT 1
22959: ARRAY
22960: PPUSH
22961: CALL_OW 302
22965: NOT
22966: PUSH
22967: LD_VAR 0 5
22971: PUSH
22972: LD_INT 1
22974: ARRAY
22975: PPUSH
22976: CALL_OW 255
22980: PUSH
22981: LD_VAR 0 1
22985: PPUSH
22986: CALL_OW 255
22990: NONEQUAL
22991: OR
22992: IFFALSE 23098
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22994: LD_VAR 0 5
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PPUSH
23003: CALL_OW 305
23007: PUSH
23008: LD_VAR 0 5
23012: PUSH
23013: LD_INT 1
23015: ARRAY
23016: PPUSH
23017: CALL_OW 255
23021: PUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL_OW 255
23031: EQUAL
23032: AND
23033: IFFALSE 23057
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23035: LD_VAR 0 5
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: LD_VAR 0 5
23048: PUSH
23049: LD_INT 2
23051: ARRAY
23052: PPUSH
23053: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23057: LD_ADDR_EXP 87
23061: PUSH
23062: LD_EXP 87
23066: PPUSH
23067: LD_VAR 0 4
23071: PPUSH
23072: LD_EXP 87
23076: PUSH
23077: LD_VAR 0 4
23081: ARRAY
23082: PPUSH
23083: LD_VAR 0 3
23087: PPUSH
23088: CALL_OW 3
23092: PPUSH
23093: CALL_OW 1
23097: ST_TO_ADDR
// end ; end ;
23098: GO 22927
23100: POP
23101: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23102: LD_VAR 0 1
23106: PPUSH
23107: LD_EXP 87
23111: PUSH
23112: LD_VAR 0 4
23116: ARRAY
23117: PUSH
23118: LD_INT 0
23120: PLUS
23121: PPUSH
23122: CALL_OW 505
// end ;
23126: LD_VAR 0 2
23130: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23131: LD_INT 0
23133: PPUSH
23134: PPUSH
23135: PPUSH
23136: PPUSH
// if not hack in hackTanks then
23137: LD_VAR 0 1
23141: PUSH
23142: LD_EXP 86
23146: IN
23147: NOT
23148: IFFALSE 23152
// exit ;
23150: GO 23237
// index := GetElementIndex ( hackTanks , hack ) ;
23152: LD_ADDR_VAR 0 5
23156: PUSH
23157: LD_EXP 86
23161: PPUSH
23162: LD_VAR 0 1
23166: PPUSH
23167: CALL 29995 0 2
23171: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23172: LD_ADDR_VAR 0 4
23176: PUSH
23177: DOUBLE
23178: LD_INT 1
23180: DEC
23181: ST_TO_ADDR
23182: LD_EXP 87
23186: PUSH
23187: LD_VAR 0 5
23191: ARRAY
23192: PUSH
23193: FOR_TO
23194: IFFALSE 23235
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23196: LD_EXP 87
23200: PUSH
23201: LD_VAR 0 5
23205: ARRAY
23206: PUSH
23207: LD_VAR 0 4
23211: ARRAY
23212: PUSH
23213: LD_INT 1
23215: ARRAY
23216: PUSH
23217: LD_VAR 0 2
23221: EQUAL
23222: IFFALSE 23233
// KillUnit ( vehicle ) ;
23224: LD_VAR 0 2
23228: PPUSH
23229: CALL_OW 66
23233: GO 23193
23235: POP
23236: POP
// end ;
23237: LD_VAR 0 3
23241: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23242: LD_EXP 91
23246: NOT
23247: IFFALSE 23282
23249: GO 23251
23251: DISABLE
// begin initMiner := true ;
23252: LD_ADDR_EXP 91
23256: PUSH
23257: LD_INT 1
23259: ST_TO_ADDR
// minersList := [ ] ;
23260: LD_ADDR_EXP 92
23264: PUSH
23265: EMPTY
23266: ST_TO_ADDR
// minerMinesList := [ ] ;
23267: LD_ADDR_EXP 93
23271: PUSH
23272: EMPTY
23273: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23274: LD_ADDR_EXP 94
23278: PUSH
23279: LD_INT 5
23281: ST_TO_ADDR
// end ;
23282: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23283: LD_EXP 91
23287: PUSH
23288: LD_INT 34
23290: PUSH
23291: LD_INT 81
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PPUSH
23298: CALL_OW 69
23302: AND
23303: IFFALSE 23764
23305: GO 23307
23307: DISABLE
23308: LD_INT 0
23310: PPUSH
23311: PPUSH
23312: PPUSH
23313: PPUSH
// begin enable ;
23314: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23315: LD_ADDR_VAR 0 1
23319: PUSH
23320: LD_INT 34
23322: PUSH
23323: LD_INT 81
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PPUSH
23330: CALL_OW 69
23334: PUSH
23335: FOR_IN
23336: IFFALSE 23408
// begin if not i in minersList then
23338: LD_VAR 0 1
23342: PUSH
23343: LD_EXP 92
23347: IN
23348: NOT
23349: IFFALSE 23406
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23351: LD_ADDR_EXP 92
23355: PUSH
23356: LD_EXP 92
23360: PPUSH
23361: LD_EXP 92
23365: PUSH
23366: LD_INT 1
23368: PLUS
23369: PPUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 1
23379: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23380: LD_ADDR_EXP 93
23384: PUSH
23385: LD_EXP 93
23389: PPUSH
23390: LD_EXP 93
23394: PUSH
23395: LD_INT 1
23397: PLUS
23398: PPUSH
23399: EMPTY
23400: PPUSH
23401: CALL_OW 1
23405: ST_TO_ADDR
// end end ;
23406: GO 23335
23408: POP
23409: POP
// for i := minerMinesList downto 1 do
23410: LD_ADDR_VAR 0 1
23414: PUSH
23415: DOUBLE
23416: LD_EXP 93
23420: INC
23421: ST_TO_ADDR
23422: LD_INT 1
23424: PUSH
23425: FOR_DOWNTO
23426: IFFALSE 23762
// begin if IsLive ( minersList [ i ] ) then
23428: LD_EXP 92
23432: PUSH
23433: LD_VAR 0 1
23437: ARRAY
23438: PPUSH
23439: CALL_OW 300
23443: IFFALSE 23471
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23445: LD_EXP 92
23449: PUSH
23450: LD_VAR 0 1
23454: ARRAY
23455: PPUSH
23456: LD_EXP 93
23460: PUSH
23461: LD_VAR 0 1
23465: ARRAY
23466: PPUSH
23467: CALL_OW 505
// if not minerMinesList [ i ] then
23471: LD_EXP 93
23475: PUSH
23476: LD_VAR 0 1
23480: ARRAY
23481: NOT
23482: IFFALSE 23486
// continue ;
23484: GO 23425
// for j := minerMinesList [ i ] downto 1 do
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: DOUBLE
23492: LD_EXP 93
23496: PUSH
23497: LD_VAR 0 1
23501: ARRAY
23502: INC
23503: ST_TO_ADDR
23504: LD_INT 1
23506: PUSH
23507: FOR_DOWNTO
23508: IFFALSE 23758
// begin side := GetSide ( minersList [ i ] ) ;
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: LD_EXP 92
23519: PUSH
23520: LD_VAR 0 1
23524: ARRAY
23525: PPUSH
23526: CALL_OW 255
23530: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23531: LD_ADDR_VAR 0 4
23535: PUSH
23536: LD_EXP 93
23540: PUSH
23541: LD_VAR 0 1
23545: ARRAY
23546: PUSH
23547: LD_VAR 0 2
23551: ARRAY
23552: PUSH
23553: LD_INT 1
23555: ARRAY
23556: PPUSH
23557: LD_EXP 93
23561: PUSH
23562: LD_VAR 0 1
23566: ARRAY
23567: PUSH
23568: LD_VAR 0 2
23572: ARRAY
23573: PUSH
23574: LD_INT 2
23576: ARRAY
23577: PPUSH
23578: CALL_OW 428
23582: ST_TO_ADDR
// if not tmp then
23583: LD_VAR 0 4
23587: NOT
23588: IFFALSE 23592
// continue ;
23590: GO 23507
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23592: LD_VAR 0 4
23596: PUSH
23597: LD_INT 81
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PPUSH
23609: CALL_OW 69
23613: IN
23614: PUSH
23615: LD_EXP 93
23619: PUSH
23620: LD_VAR 0 1
23624: ARRAY
23625: PUSH
23626: LD_VAR 0 2
23630: ARRAY
23631: PUSH
23632: LD_INT 1
23634: ARRAY
23635: PPUSH
23636: LD_EXP 93
23640: PUSH
23641: LD_VAR 0 1
23645: ARRAY
23646: PUSH
23647: LD_VAR 0 2
23651: ARRAY
23652: PUSH
23653: LD_INT 2
23655: ARRAY
23656: PPUSH
23657: CALL_OW 458
23661: AND
23662: IFFALSE 23756
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23664: LD_EXP 93
23668: PUSH
23669: LD_VAR 0 1
23673: ARRAY
23674: PUSH
23675: LD_VAR 0 2
23679: ARRAY
23680: PUSH
23681: LD_INT 1
23683: ARRAY
23684: PPUSH
23685: LD_EXP 93
23689: PUSH
23690: LD_VAR 0 1
23694: ARRAY
23695: PUSH
23696: LD_VAR 0 2
23700: ARRAY
23701: PUSH
23702: LD_INT 2
23704: ARRAY
23705: PPUSH
23706: LD_VAR 0 3
23710: PPUSH
23711: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23715: LD_ADDR_EXP 93
23719: PUSH
23720: LD_EXP 93
23724: PPUSH
23725: LD_VAR 0 1
23729: PPUSH
23730: LD_EXP 93
23734: PUSH
23735: LD_VAR 0 1
23739: ARRAY
23740: PPUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 3
23750: PPUSH
23751: CALL_OW 1
23755: ST_TO_ADDR
// end ; end ;
23756: GO 23507
23758: POP
23759: POP
// end ;
23760: GO 23425
23762: POP
23763: POP
// end ;
23764: PPOPN 4
23766: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
// result := false ;
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: LD_INT 0
23778: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 264
23788: PUSH
23789: LD_INT 81
23791: EQUAL
23792: NOT
23793: IFFALSE 23797
// exit ;
23795: GO 24037
// index := GetElementIndex ( minersList , unit ) ;
23797: LD_ADDR_VAR 0 5
23801: PUSH
23802: LD_EXP 92
23806: PPUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL 29995 0 2
23816: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23817: LD_EXP 93
23821: PUSH
23822: LD_VAR 0 5
23826: ARRAY
23827: PUSH
23828: LD_EXP 94
23832: GREATEREQUAL
23833: IFFALSE 23837
// exit ;
23835: GO 24037
// ComMoveXY ( unit , x , y ) ;
23837: LD_VAR 0 1
23841: PPUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: LD_VAR 0 3
23851: PPUSH
23852: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23856: LD_INT 35
23858: PPUSH
23859: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: CALL 61747 0 3
23882: NOT
23883: PUSH
23884: LD_VAR 0 1
23888: PPUSH
23889: CALL_OW 314
23893: AND
23894: IFFALSE 23898
// exit ;
23896: GO 24037
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23898: LD_VAR 0 2
23902: PPUSH
23903: LD_VAR 0 3
23907: PPUSH
23908: CALL_OW 428
23912: PUSH
23913: LD_VAR 0 1
23917: EQUAL
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 314
23928: NOT
23929: AND
23930: IFFALSE 23856
// PlaySoundXY ( x , y , PlantMine ) ;
23932: LD_VAR 0 2
23936: PPUSH
23937: LD_VAR 0 3
23941: PPUSH
23942: LD_STRING PlantMine
23944: PPUSH
23945: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_VAR 0 3
23958: PPUSH
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 255
23968: PPUSH
23969: LD_INT 0
23971: PPUSH
23972: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23976: LD_ADDR_EXP 93
23980: PUSH
23981: LD_EXP 93
23985: PPUSH
23986: LD_VAR 0 5
23990: PUSH
23991: LD_EXP 93
23995: PUSH
23996: LD_VAR 0 5
24000: ARRAY
24001: PUSH
24002: LD_INT 1
24004: PLUS
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PPUSH
24010: LD_VAR 0 2
24014: PUSH
24015: LD_VAR 0 3
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PPUSH
24024: CALL 30210 0 3
24028: ST_TO_ADDR
// result := true ;
24029: LD_ADDR_VAR 0 4
24033: PUSH
24034: LD_INT 1
24036: ST_TO_ADDR
// end ;
24037: LD_VAR 0 4
24041: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24042: LD_INT 0
24044: PPUSH
24045: PPUSH
24046: PPUSH
// if not unit in minersList then
24047: LD_VAR 0 1
24051: PUSH
24052: LD_EXP 92
24056: IN
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24454
// index := GetElementIndex ( minersList , unit ) ;
24062: LD_ADDR_VAR 0 6
24066: PUSH
24067: LD_EXP 92
24071: PPUSH
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL 29995 0 2
24081: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24082: LD_ADDR_VAR 0 5
24086: PUSH
24087: DOUBLE
24088: LD_EXP 93
24092: PUSH
24093: LD_VAR 0 6
24097: ARRAY
24098: INC
24099: ST_TO_ADDR
24100: LD_INT 1
24102: PUSH
24103: FOR_DOWNTO
24104: IFFALSE 24265
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24106: LD_EXP 93
24110: PUSH
24111: LD_VAR 0 6
24115: ARRAY
24116: PUSH
24117: LD_VAR 0 5
24121: ARRAY
24122: PUSH
24123: LD_INT 1
24125: ARRAY
24126: PUSH
24127: LD_VAR 0 2
24131: EQUAL
24132: PUSH
24133: LD_EXP 93
24137: PUSH
24138: LD_VAR 0 6
24142: ARRAY
24143: PUSH
24144: LD_VAR 0 5
24148: ARRAY
24149: PUSH
24150: LD_INT 2
24152: ARRAY
24153: PUSH
24154: LD_VAR 0 3
24158: EQUAL
24159: AND
24160: IFFALSE 24263
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24162: LD_EXP 93
24166: PUSH
24167: LD_VAR 0 6
24171: ARRAY
24172: PUSH
24173: LD_VAR 0 5
24177: ARRAY
24178: PUSH
24179: LD_INT 1
24181: ARRAY
24182: PPUSH
24183: LD_EXP 93
24187: PUSH
24188: LD_VAR 0 6
24192: ARRAY
24193: PUSH
24194: LD_VAR 0 5
24198: ARRAY
24199: PUSH
24200: LD_INT 2
24202: ARRAY
24203: PPUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 255
24213: PPUSH
24214: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24218: LD_ADDR_EXP 93
24222: PUSH
24223: LD_EXP 93
24227: PPUSH
24228: LD_VAR 0 6
24232: PPUSH
24233: LD_EXP 93
24237: PUSH
24238: LD_VAR 0 6
24242: ARRAY
24243: PPUSH
24244: LD_VAR 0 5
24248: PPUSH
24249: CALL_OW 3
24253: PPUSH
24254: CALL_OW 1
24258: ST_TO_ADDR
// exit ;
24259: POP
24260: POP
24261: GO 24454
// end ; end ;
24263: GO 24103
24265: POP
24266: POP
// for i := minerMinesList [ index ] downto 1 do
24267: LD_ADDR_VAR 0 5
24271: PUSH
24272: DOUBLE
24273: LD_EXP 93
24277: PUSH
24278: LD_VAR 0 6
24282: ARRAY
24283: INC
24284: ST_TO_ADDR
24285: LD_INT 1
24287: PUSH
24288: FOR_DOWNTO
24289: IFFALSE 24452
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24291: LD_EXP 93
24295: PUSH
24296: LD_VAR 0 6
24300: ARRAY
24301: PUSH
24302: LD_VAR 0 5
24306: ARRAY
24307: PUSH
24308: LD_INT 1
24310: ARRAY
24311: PPUSH
24312: LD_EXP 93
24316: PUSH
24317: LD_VAR 0 6
24321: ARRAY
24322: PUSH
24323: LD_VAR 0 5
24327: ARRAY
24328: PUSH
24329: LD_INT 2
24331: ARRAY
24332: PPUSH
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_VAR 0 3
24342: PPUSH
24343: CALL_OW 298
24347: PUSH
24348: LD_INT 6
24350: LESS
24351: IFFALSE 24450
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24353: LD_EXP 93
24357: PUSH
24358: LD_VAR 0 6
24362: ARRAY
24363: PUSH
24364: LD_VAR 0 5
24368: ARRAY
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: PPUSH
24374: LD_EXP 93
24378: PUSH
24379: LD_VAR 0 6
24383: ARRAY
24384: PUSH
24385: LD_VAR 0 5
24389: ARRAY
24390: PUSH
24391: LD_INT 2
24393: ARRAY
24394: PPUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 255
24404: PPUSH
24405: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24409: LD_ADDR_EXP 93
24413: PUSH
24414: LD_EXP 93
24418: PPUSH
24419: LD_VAR 0 6
24423: PPUSH
24424: LD_EXP 93
24428: PUSH
24429: LD_VAR 0 6
24433: ARRAY
24434: PPUSH
24435: LD_VAR 0 5
24439: PPUSH
24440: CALL_OW 3
24444: PPUSH
24445: CALL_OW 1
24449: ST_TO_ADDR
// end ; end ;
24450: GO 24288
24452: POP
24453: POP
// end ;
24454: LD_VAR 0 4
24458: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24459: LD_INT 0
24461: PPUSH
24462: PPUSH
24463: PPUSH
24464: PPUSH
24465: PPUSH
24466: PPUSH
24467: PPUSH
24468: PPUSH
24469: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24470: LD_VAR 0 1
24474: PPUSH
24475: CALL_OW 264
24479: PUSH
24480: LD_INT 81
24482: EQUAL
24483: NOT
24484: PUSH
24485: LD_VAR 0 1
24489: PUSH
24490: LD_EXP 92
24494: IN
24495: NOT
24496: OR
24497: IFFALSE 24501
// exit ;
24499: GO 24823
// index := GetElementIndex ( minersList , unit ) ;
24501: LD_ADDR_VAR 0 6
24505: PUSH
24506: LD_EXP 92
24510: PPUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL 29995 0 2
24520: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24521: LD_ADDR_VAR 0 8
24525: PUSH
24526: LD_EXP 94
24530: PUSH
24531: LD_EXP 93
24535: PUSH
24536: LD_VAR 0 6
24540: ARRAY
24541: MINUS
24542: ST_TO_ADDR
// if not minesFreeAmount then
24543: LD_VAR 0 8
24547: NOT
24548: IFFALSE 24552
// exit ;
24550: GO 24823
// tmp := [ ] ;
24552: LD_ADDR_VAR 0 7
24556: PUSH
24557: EMPTY
24558: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24559: LD_ADDR_VAR 0 5
24563: PUSH
24564: DOUBLE
24565: LD_INT 1
24567: DEC
24568: ST_TO_ADDR
24569: LD_VAR 0 8
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24770
// begin _d := rand ( 0 , 5 ) ;
24577: LD_ADDR_VAR 0 11
24581: PUSH
24582: LD_INT 0
24584: PPUSH
24585: LD_INT 5
24587: PPUSH
24588: CALL_OW 12
24592: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24593: LD_ADDR_VAR 0 12
24597: PUSH
24598: LD_INT 2
24600: PPUSH
24601: LD_INT 6
24603: PPUSH
24604: CALL_OW 12
24608: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24609: LD_ADDR_VAR 0 9
24613: PUSH
24614: LD_VAR 0 2
24618: PPUSH
24619: LD_VAR 0 11
24623: PPUSH
24624: LD_VAR 0 12
24628: PPUSH
24629: CALL_OW 272
24633: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24634: LD_ADDR_VAR 0 10
24638: PUSH
24639: LD_VAR 0 3
24643: PPUSH
24644: LD_VAR 0 11
24648: PPUSH
24649: LD_VAR 0 12
24653: PPUSH
24654: CALL_OW 273
24658: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24659: LD_VAR 0 9
24663: PPUSH
24664: LD_VAR 0 10
24668: PPUSH
24669: CALL_OW 488
24673: PUSH
24674: LD_VAR 0 9
24678: PUSH
24679: LD_VAR 0 10
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_VAR 0 7
24692: IN
24693: NOT
24694: AND
24695: PUSH
24696: LD_VAR 0 9
24700: PPUSH
24701: LD_VAR 0 10
24705: PPUSH
24706: CALL_OW 458
24710: NOT
24711: AND
24712: IFFALSE 24754
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24714: LD_ADDR_VAR 0 7
24718: PUSH
24719: LD_VAR 0 7
24723: PPUSH
24724: LD_VAR 0 7
24728: PUSH
24729: LD_INT 1
24731: PLUS
24732: PPUSH
24733: LD_VAR 0 9
24737: PUSH
24738: LD_VAR 0 10
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 1
24751: ST_TO_ADDR
24752: GO 24768
// i := i - 1 ;
24754: LD_ADDR_VAR 0 5
24758: PUSH
24759: LD_VAR 0 5
24763: PUSH
24764: LD_INT 1
24766: MINUS
24767: ST_TO_ADDR
// end ;
24768: GO 24574
24770: POP
24771: POP
// for i in tmp do
24772: LD_ADDR_VAR 0 5
24776: PUSH
24777: LD_VAR 0 7
24781: PUSH
24782: FOR_IN
24783: IFFALSE 24821
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24785: LD_VAR 0 1
24789: PPUSH
24790: LD_VAR 0 5
24794: PUSH
24795: LD_INT 1
24797: ARRAY
24798: PPUSH
24799: LD_VAR 0 5
24803: PUSH
24804: LD_INT 2
24806: ARRAY
24807: PPUSH
24808: CALL 23767 0 3
24812: NOT
24813: IFFALSE 24819
// exit ;
24815: POP
24816: POP
24817: GO 24823
24819: GO 24782
24821: POP
24822: POP
// end ;
24823: LD_VAR 0 4
24827: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24828: LD_INT 0
24830: PPUSH
24831: PPUSH
24832: PPUSH
24833: PPUSH
24834: PPUSH
24835: PPUSH
24836: PPUSH
// if not GetClass ( unit ) = class_sniper then
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL_OW 257
24846: PUSH
24847: LD_INT 5
24849: EQUAL
24850: NOT
24851: IFFALSE 24855
// exit ;
24853: GO 25243
// dist := 8 ;
24855: LD_ADDR_VAR 0 5
24859: PUSH
24860: LD_INT 8
24862: ST_TO_ADDR
// viewRange := 12 ;
24863: LD_ADDR_VAR 0 7
24867: PUSH
24868: LD_INT 12
24870: ST_TO_ADDR
// side := GetSide ( unit ) ;
24871: LD_ADDR_VAR 0 6
24875: PUSH
24876: LD_VAR 0 1
24880: PPUSH
24881: CALL_OW 255
24885: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24886: LD_INT 61
24888: PPUSH
24889: LD_VAR 0 6
24893: PPUSH
24894: CALL_OW 321
24898: PUSH
24899: LD_INT 2
24901: EQUAL
24902: IFFALSE 24912
// viewRange := 16 ;
24904: LD_ADDR_VAR 0 7
24908: PUSH
24909: LD_INT 16
24911: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24912: LD_VAR 0 1
24916: PPUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: CALL_OW 297
24931: PUSH
24932: LD_VAR 0 5
24936: GREATER
24937: IFFALSE 25016
// begin ComMoveXY ( unit , x , y ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24958: LD_INT 35
24960: PPUSH
24961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_VAR 0 2
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: CALL 61747 0 3
24984: NOT
24985: IFFALSE 24989
// exit ;
24987: GO 25243
// until GetDistUnitXY ( unit , x , y ) < dist ;
24989: LD_VAR 0 1
24993: PPUSH
24994: LD_VAR 0 2
24998: PPUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: CALL_OW 297
25008: PUSH
25009: LD_VAR 0 5
25013: LESS
25014: IFFALSE 24958
// end ; ComTurnXY ( unit , x , y ) ;
25016: LD_VAR 0 1
25020: PPUSH
25021: LD_VAR 0 2
25025: PPUSH
25026: LD_VAR 0 3
25030: PPUSH
25031: CALL_OW 118
// wait ( 5 ) ;
25035: LD_INT 5
25037: PPUSH
25038: CALL_OW 67
// _d := GetDir ( unit ) ;
25042: LD_ADDR_VAR 0 10
25046: PUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL_OW 254
25056: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25057: LD_ADDR_VAR 0 8
25061: PUSH
25062: LD_VAR 0 1
25066: PPUSH
25067: CALL_OW 250
25071: PPUSH
25072: LD_VAR 0 10
25076: PPUSH
25077: LD_VAR 0 5
25081: PPUSH
25082: CALL_OW 272
25086: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25087: LD_ADDR_VAR 0 9
25091: PUSH
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 251
25101: PPUSH
25102: LD_VAR 0 10
25106: PPUSH
25107: LD_VAR 0 5
25111: PPUSH
25112: CALL_OW 273
25116: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25117: LD_VAR 0 8
25121: PPUSH
25122: LD_VAR 0 9
25126: PPUSH
25127: CALL_OW 488
25131: NOT
25132: IFFALSE 25136
// exit ;
25134: GO 25243
// ComAnimCustom ( unit , 1 ) ;
25136: LD_VAR 0 1
25140: PPUSH
25141: LD_INT 1
25143: PPUSH
25144: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25148: LD_VAR 0 8
25152: PPUSH
25153: LD_VAR 0 9
25157: PPUSH
25158: LD_VAR 0 6
25162: PPUSH
25163: LD_VAR 0 7
25167: PPUSH
25168: CALL_OW 330
// repeat wait ( 1 ) ;
25172: LD_INT 1
25174: PPUSH
25175: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25179: LD_VAR 0 1
25183: PPUSH
25184: CALL_OW 316
25188: PUSH
25189: LD_VAR 0 1
25193: PPUSH
25194: CALL_OW 314
25198: OR
25199: PUSH
25200: LD_VAR 0 1
25204: PPUSH
25205: CALL_OW 302
25209: NOT
25210: OR
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 301
25221: OR
25222: IFFALSE 25172
// RemoveSeeing ( _x , _y , side ) ;
25224: LD_VAR 0 8
25228: PPUSH
25229: LD_VAR 0 9
25233: PPUSH
25234: LD_VAR 0 6
25238: PPUSH
25239: CALL_OW 331
// end ; end_of_file end_of_file
25243: LD_VAR 0 4
25247: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
// if exist_mode then
25252: LD_VAR 0 2
25256: IFFALSE 25281
// unit := CreateCharacter ( prefix & ident ) else
25258: LD_ADDR_VAR 0 5
25262: PUSH
25263: LD_VAR 0 3
25267: PUSH
25268: LD_VAR 0 1
25272: STR
25273: PPUSH
25274: CALL_OW 34
25278: ST_TO_ADDR
25279: GO 25296
// unit := NewCharacter ( ident ) ;
25281: LD_ADDR_VAR 0 5
25285: PUSH
25286: LD_VAR 0 1
25290: PPUSH
25291: CALL_OW 25
25295: ST_TO_ADDR
// result := unit ;
25296: LD_ADDR_VAR 0 4
25300: PUSH
25301: LD_VAR 0 5
25305: ST_TO_ADDR
// end ;
25306: LD_VAR 0 4
25310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25311: LD_INT 0
25313: PPUSH
25314: PPUSH
// if not side or not nation then
25315: LD_VAR 0 1
25319: NOT
25320: PUSH
25321: LD_VAR 0 2
25325: NOT
25326: OR
25327: IFFALSE 25331
// exit ;
25329: GO 26099
// case nation of nation_american :
25331: LD_VAR 0 2
25335: PUSH
25336: LD_INT 1
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 25558
25344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: LD_INT 35
25352: PUSH
25353: LD_INT 45
25355: PUSH
25356: LD_INT 46
25358: PUSH
25359: LD_INT 47
25361: PUSH
25362: LD_INT 82
25364: PUSH
25365: LD_INT 83
25367: PUSH
25368: LD_INT 84
25370: PUSH
25371: LD_INT 85
25373: PUSH
25374: LD_INT 86
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 6
25385: PUSH
25386: LD_INT 15
25388: PUSH
25389: LD_INT 16
25391: PUSH
25392: LD_INT 7
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 13
25400: PUSH
25401: LD_INT 10
25403: PUSH
25404: LD_INT 14
25406: PUSH
25407: LD_INT 20
25409: PUSH
25410: LD_INT 21
25412: PUSH
25413: LD_INT 22
25415: PUSH
25416: LD_INT 25
25418: PUSH
25419: LD_INT 32
25421: PUSH
25422: LD_INT 27
25424: PUSH
25425: LD_INT 36
25427: PUSH
25428: LD_INT 69
25430: PUSH
25431: LD_INT 39
25433: PUSH
25434: LD_INT 34
25436: PUSH
25437: LD_INT 40
25439: PUSH
25440: LD_INT 48
25442: PUSH
25443: LD_INT 49
25445: PUSH
25446: LD_INT 50
25448: PUSH
25449: LD_INT 51
25451: PUSH
25452: LD_INT 52
25454: PUSH
25455: LD_INT 53
25457: PUSH
25458: LD_INT 54
25460: PUSH
25461: LD_INT 55
25463: PUSH
25464: LD_INT 56
25466: PUSH
25467: LD_INT 57
25469: PUSH
25470: LD_INT 58
25472: PUSH
25473: LD_INT 59
25475: PUSH
25476: LD_INT 60
25478: PUSH
25479: LD_INT 61
25481: PUSH
25482: LD_INT 62
25484: PUSH
25485: LD_INT 80
25487: PUSH
25488: LD_INT 82
25490: PUSH
25491: LD_INT 83
25493: PUSH
25494: LD_INT 84
25496: PUSH
25497: LD_INT 85
25499: PUSH
25500: LD_INT 86
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: ST_TO_ADDR
25556: GO 26023
25558: LD_INT 2
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25792
25566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25567: LD_ADDR_VAR 0 4
25571: PUSH
25572: LD_INT 35
25574: PUSH
25575: LD_INT 45
25577: PUSH
25578: LD_INT 46
25580: PUSH
25581: LD_INT 47
25583: PUSH
25584: LD_INT 82
25586: PUSH
25587: LD_INT 83
25589: PUSH
25590: LD_INT 84
25592: PUSH
25593: LD_INT 85
25595: PUSH
25596: LD_INT 87
25598: PUSH
25599: LD_INT 70
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 11
25607: PUSH
25608: LD_INT 3
25610: PUSH
25611: LD_INT 4
25613: PUSH
25614: LD_INT 5
25616: PUSH
25617: LD_INT 6
25619: PUSH
25620: LD_INT 15
25622: PUSH
25623: LD_INT 18
25625: PUSH
25626: LD_INT 7
25628: PUSH
25629: LD_INT 17
25631: PUSH
25632: LD_INT 8
25634: PUSH
25635: LD_INT 20
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_INT 72
25646: PUSH
25647: LD_INT 26
25649: PUSH
25650: LD_INT 69
25652: PUSH
25653: LD_INT 39
25655: PUSH
25656: LD_INT 40
25658: PUSH
25659: LD_INT 41
25661: PUSH
25662: LD_INT 42
25664: PUSH
25665: LD_INT 43
25667: PUSH
25668: LD_INT 48
25670: PUSH
25671: LD_INT 49
25673: PUSH
25674: LD_INT 50
25676: PUSH
25677: LD_INT 51
25679: PUSH
25680: LD_INT 52
25682: PUSH
25683: LD_INT 53
25685: PUSH
25686: LD_INT 54
25688: PUSH
25689: LD_INT 55
25691: PUSH
25692: LD_INT 56
25694: PUSH
25695: LD_INT 60
25697: PUSH
25698: LD_INT 61
25700: PUSH
25701: LD_INT 62
25703: PUSH
25704: LD_INT 66
25706: PUSH
25707: LD_INT 67
25709: PUSH
25710: LD_INT 68
25712: PUSH
25713: LD_INT 81
25715: PUSH
25716: LD_INT 82
25718: PUSH
25719: LD_INT 83
25721: PUSH
25722: LD_INT 84
25724: PUSH
25725: LD_INT 85
25727: PUSH
25728: LD_INT 87
25730: PUSH
25731: LD_INT 88
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: ST_TO_ADDR
25790: GO 26023
25792: LD_INT 3
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25800
25798: GO 26022
25800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25801: LD_ADDR_VAR 0 4
25805: PUSH
25806: LD_INT 46
25808: PUSH
25809: LD_INT 47
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 82
25820: PUSH
25821: LD_INT 83
25823: PUSH
25824: LD_INT 84
25826: PUSH
25827: LD_INT 85
25829: PUSH
25830: LD_INT 86
25832: PUSH
25833: LD_INT 11
25835: PUSH
25836: LD_INT 9
25838: PUSH
25839: LD_INT 20
25841: PUSH
25842: LD_INT 19
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 24
25850: PUSH
25851: LD_INT 22
25853: PUSH
25854: LD_INT 25
25856: PUSH
25857: LD_INT 28
25859: PUSH
25860: LD_INT 29
25862: PUSH
25863: LD_INT 30
25865: PUSH
25866: LD_INT 31
25868: PUSH
25869: LD_INT 37
25871: PUSH
25872: LD_INT 38
25874: PUSH
25875: LD_INT 32
25877: PUSH
25878: LD_INT 27
25880: PUSH
25881: LD_INT 33
25883: PUSH
25884: LD_INT 69
25886: PUSH
25887: LD_INT 39
25889: PUSH
25890: LD_INT 34
25892: PUSH
25893: LD_INT 40
25895: PUSH
25896: LD_INT 71
25898: PUSH
25899: LD_INT 23
25901: PUSH
25902: LD_INT 44
25904: PUSH
25905: LD_INT 48
25907: PUSH
25908: LD_INT 49
25910: PUSH
25911: LD_INT 50
25913: PUSH
25914: LD_INT 51
25916: PUSH
25917: LD_INT 52
25919: PUSH
25920: LD_INT 53
25922: PUSH
25923: LD_INT 54
25925: PUSH
25926: LD_INT 55
25928: PUSH
25929: LD_INT 56
25931: PUSH
25932: LD_INT 57
25934: PUSH
25935: LD_INT 58
25937: PUSH
25938: LD_INT 59
25940: PUSH
25941: LD_INT 63
25943: PUSH
25944: LD_INT 64
25946: PUSH
25947: LD_INT 65
25949: PUSH
25950: LD_INT 82
25952: PUSH
25953: LD_INT 83
25955: PUSH
25956: LD_INT 84
25958: PUSH
25959: LD_INT 85
25961: PUSH
25962: LD_INT 86
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
26020: GO 26023
26022: POP
// if state > - 1 and state < 3 then
26023: LD_VAR 0 3
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: GREATER
26032: PUSH
26033: LD_VAR 0 3
26037: PUSH
26038: LD_INT 3
26040: LESS
26041: AND
26042: IFFALSE 26099
// for i in result do
26044: LD_ADDR_VAR 0 5
26048: PUSH
26049: LD_VAR 0 4
26053: PUSH
26054: FOR_IN
26055: IFFALSE 26097
// if GetTech ( i , side ) <> state then
26057: LD_VAR 0 5
26061: PPUSH
26062: LD_VAR 0 1
26066: PPUSH
26067: CALL_OW 321
26071: PUSH
26072: LD_VAR 0 3
26076: NONEQUAL
26077: IFFALSE 26095
// result := result diff i ;
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: LD_VAR 0 4
26088: PUSH
26089: LD_VAR 0 5
26093: DIFF
26094: ST_TO_ADDR
26095: GO 26054
26097: POP
26098: POP
// end ;
26099: LD_VAR 0 4
26103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26104: LD_INT 0
26106: PPUSH
26107: PPUSH
26108: PPUSH
// result := true ;
26109: LD_ADDR_VAR 0 3
26113: PUSH
26114: LD_INT 1
26116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_VAR 0 2
26126: PPUSH
26127: CALL_OW 480
26131: ST_TO_ADDR
// if not tmp then
26132: LD_VAR 0 5
26136: NOT
26137: IFFALSE 26141
// exit ;
26139: GO 26190
// for i in tmp do
26141: LD_ADDR_VAR 0 4
26145: PUSH
26146: LD_VAR 0 5
26150: PUSH
26151: FOR_IN
26152: IFFALSE 26188
// if GetTech ( i , side ) <> state_researched then
26154: LD_VAR 0 4
26158: PPUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 321
26168: PUSH
26169: LD_INT 2
26171: NONEQUAL
26172: IFFALSE 26186
// begin result := false ;
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_INT 0
26181: ST_TO_ADDR
// exit ;
26182: POP
26183: POP
26184: GO 26190
// end ;
26186: GO 26151
26188: POP
26189: POP
// end ;
26190: LD_VAR 0 3
26194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26210: LD_VAR 0 1
26214: NOT
26215: PUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 257
26225: PUSH
26226: LD_INT 9
26228: NONEQUAL
26229: OR
26230: IFFALSE 26234
// exit ;
26232: GO 26807
// side := GetSide ( unit ) ;
26234: LD_ADDR_VAR 0 9
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 255
26248: ST_TO_ADDR
// tech_space := tech_spacanom ;
26249: LD_ADDR_VAR 0 12
26253: PUSH
26254: LD_INT 29
26256: ST_TO_ADDR
// tech_time := tech_taurad ;
26257: LD_ADDR_VAR 0 13
26261: PUSH
26262: LD_INT 28
26264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26265: LD_ADDR_VAR 0 11
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 310
26279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26280: LD_VAR 0 11
26284: PPUSH
26285: CALL_OW 247
26289: PUSH
26290: LD_INT 2
26292: EQUAL
26293: IFFALSE 26297
// exit ;
26295: GO 26807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26297: LD_ADDR_VAR 0 8
26301: PUSH
26302: LD_INT 81
26304: PUSH
26305: LD_VAR 0 9
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 3
26316: PUSH
26317: LD_INT 21
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PPUSH
26335: CALL_OW 69
26339: ST_TO_ADDR
// if not tmp then
26340: LD_VAR 0 8
26344: NOT
26345: IFFALSE 26349
// exit ;
26347: GO 26807
// if in_unit then
26349: LD_VAR 0 11
26353: IFFALSE 26377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26355: LD_ADDR_VAR 0 10
26359: PUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: LD_VAR 0 11
26369: PPUSH
26370: CALL_OW 74
26374: ST_TO_ADDR
26375: GO 26397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26377: LD_ADDR_VAR 0 10
26381: PUSH
26382: LD_VAR 0 8
26386: PPUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL_OW 74
26396: ST_TO_ADDR
// if not enemy then
26397: LD_VAR 0 10
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 26807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26406: LD_VAR 0 11
26410: PUSH
26411: LD_VAR 0 11
26415: PPUSH
26416: LD_VAR 0 10
26420: PPUSH
26421: CALL_OW 296
26425: PUSH
26426: LD_INT 13
26428: GREATER
26429: AND
26430: PUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: LD_VAR 0 10
26440: PPUSH
26441: CALL_OW 296
26445: PUSH
26446: LD_INT 12
26448: GREATER
26449: OR
26450: IFFALSE 26454
// exit ;
26452: GO 26807
// missile := [ 1 ] ;
26454: LD_ADDR_VAR 0 14
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26465: LD_VAR 0 9
26469: PPUSH
26470: LD_VAR 0 12
26474: PPUSH
26475: CALL_OW 325
26479: IFFALSE 26508
// missile := Replace ( missile , missile + 1 , 2 ) ;
26481: LD_ADDR_VAR 0 14
26485: PUSH
26486: LD_VAR 0 14
26490: PPUSH
26491: LD_VAR 0 14
26495: PUSH
26496: LD_INT 1
26498: PLUS
26499: PPUSH
26500: LD_INT 2
26502: PPUSH
26503: CALL_OW 1
26507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26508: LD_VAR 0 9
26512: PPUSH
26513: LD_VAR 0 13
26517: PPUSH
26518: CALL_OW 325
26522: PUSH
26523: LD_VAR 0 10
26527: PPUSH
26528: CALL_OW 255
26532: PPUSH
26533: LD_VAR 0 13
26537: PPUSH
26538: CALL_OW 325
26542: NOT
26543: AND
26544: IFFALSE 26573
// missile := Replace ( missile , missile + 1 , 3 ) ;
26546: LD_ADDR_VAR 0 14
26550: PUSH
26551: LD_VAR 0 14
26555: PPUSH
26556: LD_VAR 0 14
26560: PUSH
26561: LD_INT 1
26563: PLUS
26564: PPUSH
26565: LD_INT 3
26567: PPUSH
26568: CALL_OW 1
26572: ST_TO_ADDR
// if missile < 2 then
26573: LD_VAR 0 14
26577: PUSH
26578: LD_INT 2
26580: LESS
26581: IFFALSE 26585
// exit ;
26583: GO 26807
// x := GetX ( enemy ) ;
26585: LD_ADDR_VAR 0 4
26589: PUSH
26590: LD_VAR 0 10
26594: PPUSH
26595: CALL_OW 250
26599: ST_TO_ADDR
// y := GetY ( enemy ) ;
26600: LD_ADDR_VAR 0 5
26604: PUSH
26605: LD_VAR 0 10
26609: PPUSH
26610: CALL_OW 251
26614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26615: LD_ADDR_VAR 0 6
26619: PUSH
26620: LD_VAR 0 4
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PPUSH
26629: LD_INT 1
26631: PPUSH
26632: CALL_OW 12
26636: PLUS
26637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26638: LD_ADDR_VAR 0 7
26642: PUSH
26643: LD_VAR 0 5
26647: PUSH
26648: LD_INT 1
26650: NEG
26651: PPUSH
26652: LD_INT 1
26654: PPUSH
26655: CALL_OW 12
26659: PLUS
26660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26661: LD_VAR 0 6
26665: PPUSH
26666: LD_VAR 0 7
26670: PPUSH
26671: CALL_OW 488
26675: NOT
26676: IFFALSE 26698
// begin _x := x ;
26678: LD_ADDR_VAR 0 6
26682: PUSH
26683: LD_VAR 0 4
26687: ST_TO_ADDR
// _y := y ;
26688: LD_ADDR_VAR 0 7
26692: PUSH
26693: LD_VAR 0 5
26697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26698: LD_ADDR_VAR 0 3
26702: PUSH
26703: LD_INT 1
26705: PPUSH
26706: LD_VAR 0 14
26710: PPUSH
26711: CALL_OW 12
26715: ST_TO_ADDR
// case i of 1 :
26716: LD_VAR 0 3
26720: PUSH
26721: LD_INT 1
26723: DOUBLE
26724: EQUAL
26725: IFTRUE 26729
26727: GO 26746
26729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26730: LD_VAR 0 1
26734: PPUSH
26735: LD_VAR 0 10
26739: PPUSH
26740: CALL_OW 115
26744: GO 26807
26746: LD_INT 2
26748: DOUBLE
26749: EQUAL
26750: IFTRUE 26754
26752: GO 26776
26754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26755: LD_VAR 0 1
26759: PPUSH
26760: LD_VAR 0 6
26764: PPUSH
26765: LD_VAR 0 7
26769: PPUSH
26770: CALL_OW 153
26774: GO 26807
26776: LD_INT 3
26778: DOUBLE
26779: EQUAL
26780: IFTRUE 26784
26782: GO 26806
26784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26785: LD_VAR 0 1
26789: PPUSH
26790: LD_VAR 0 6
26794: PPUSH
26795: LD_VAR 0 7
26799: PPUSH
26800: CALL_OW 154
26804: GO 26807
26806: POP
// end ;
26807: LD_VAR 0 2
26811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26812: LD_INT 0
26814: PPUSH
26815: PPUSH
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
// if not unit or not building then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: NOT
26831: OR
26832: IFFALSE 26836
// exit ;
26834: GO 26994
// x := GetX ( building ) ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_VAR 0 2
26845: PPUSH
26846: CALL_OW 250
26850: ST_TO_ADDR
// y := GetY ( building ) ;
26851: LD_ADDR_VAR 0 6
26855: PUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 251
26865: ST_TO_ADDR
// for i = 0 to 5 do
26866: LD_ADDR_VAR 0 4
26870: PUSH
26871: DOUBLE
26872: LD_INT 0
26874: DEC
26875: ST_TO_ADDR
26876: LD_INT 5
26878: PUSH
26879: FOR_TO
26880: IFFALSE 26992
// begin _x := ShiftX ( x , i , 3 ) ;
26882: LD_ADDR_VAR 0 7
26886: PUSH
26887: LD_VAR 0 5
26891: PPUSH
26892: LD_VAR 0 4
26896: PPUSH
26897: LD_INT 3
26899: PPUSH
26900: CALL_OW 272
26904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26905: LD_ADDR_VAR 0 8
26909: PUSH
26910: LD_VAR 0 6
26914: PPUSH
26915: LD_VAR 0 4
26919: PPUSH
26920: LD_INT 3
26922: PPUSH
26923: CALL_OW 273
26927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26928: LD_VAR 0 7
26932: PPUSH
26933: LD_VAR 0 8
26937: PPUSH
26938: CALL_OW 488
26942: NOT
26943: IFFALSE 26947
// continue ;
26945: GO 26879
// if HexInfo ( _x , _y ) = 0 then
26947: LD_VAR 0 7
26951: PPUSH
26952: LD_VAR 0 8
26956: PPUSH
26957: CALL_OW 428
26961: PUSH
26962: LD_INT 0
26964: EQUAL
26965: IFFALSE 26990
// begin ComMoveXY ( unit , _x , _y ) ;
26967: LD_VAR 0 1
26971: PPUSH
26972: LD_VAR 0 7
26976: PPUSH
26977: LD_VAR 0 8
26981: PPUSH
26982: CALL_OW 111
// exit ;
26986: POP
26987: POP
26988: GO 26994
// end ; end ;
26990: GO 26879
26992: POP
26993: POP
// end ;
26994: LD_VAR 0 3
26998: RET
// export function ScanBase ( side , base_area ) ; begin
26999: LD_INT 0
27001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: LD_INT 81
27014: PUSH
27015: LD_VAR 0 1
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PPUSH
27024: CALL_OW 70
27028: ST_TO_ADDR
// end ;
27029: LD_VAR 0 3
27033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27034: LD_INT 0
27036: PPUSH
27037: PPUSH
27038: PPUSH
27039: PPUSH
// result := false ;
27040: LD_ADDR_VAR 0 2
27044: PUSH
27045: LD_INT 0
27047: ST_TO_ADDR
// side := GetSide ( unit ) ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 255
27062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: CALL_OW 248
27077: ST_TO_ADDR
// case nat of 1 :
27078: LD_VAR 0 4
27082: PUSH
27083: LD_INT 1
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27102
27091: POP
// tech := tech_lassight ; 2 :
27092: LD_ADDR_VAR 0 5
27096: PUSH
27097: LD_INT 12
27099: ST_TO_ADDR
27100: GO 27141
27102: LD_INT 2
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27121
27110: POP
// tech := tech_mortar ; 3 :
27111: LD_ADDR_VAR 0 5
27115: PUSH
27116: LD_INT 41
27118: ST_TO_ADDR
27119: GO 27141
27121: LD_INT 3
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27140
27129: POP
// tech := tech_bazooka ; end ;
27130: LD_ADDR_VAR 0 5
27134: PUSH
27135: LD_INT 44
27137: ST_TO_ADDR
27138: GO 27141
27140: POP
// if Researched ( side , tech ) then
27141: LD_VAR 0 3
27145: PPUSH
27146: LD_VAR 0 5
27150: PPUSH
27151: CALL_OW 325
27155: IFFALSE 27182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27157: LD_ADDR_VAR 0 2
27161: PUSH
27162: LD_INT 5
27164: PUSH
27165: LD_INT 8
27167: PUSH
27168: LD_INT 9
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: LD_VAR 0 4
27180: ARRAY
27181: ST_TO_ADDR
// end ;
27182: LD_VAR 0 2
27186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27187: LD_INT 0
27189: PPUSH
27190: PPUSH
27191: PPUSH
// if not mines then
27192: LD_VAR 0 2
27196: NOT
27197: IFFALSE 27201
// exit ;
27199: GO 27345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27201: LD_ADDR_VAR 0 5
27205: PUSH
27206: LD_INT 81
27208: PUSH
27209: LD_VAR 0 1
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 3
27220: PUSH
27221: LD_INT 21
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: ST_TO_ADDR
// for i in mines do
27244: LD_ADDR_VAR 0 4
27248: PUSH
27249: LD_VAR 0 2
27253: PUSH
27254: FOR_IN
27255: IFFALSE 27343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27257: LD_VAR 0 4
27261: PUSH
27262: LD_INT 1
27264: ARRAY
27265: PPUSH
27266: LD_VAR 0 4
27270: PUSH
27271: LD_INT 2
27273: ARRAY
27274: PPUSH
27275: CALL_OW 458
27279: NOT
27280: IFFALSE 27284
// continue ;
27282: GO 27254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27284: LD_VAR 0 4
27288: PUSH
27289: LD_INT 1
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 4
27297: PUSH
27298: LD_INT 2
27300: ARRAY
27301: PPUSH
27302: CALL_OW 428
27306: PUSH
27307: LD_VAR 0 5
27311: IN
27312: IFFALSE 27341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27314: LD_VAR 0 4
27318: PUSH
27319: LD_INT 1
27321: ARRAY
27322: PPUSH
27323: LD_VAR 0 4
27327: PUSH
27328: LD_INT 2
27330: ARRAY
27331: PPUSH
27332: LD_VAR 0 1
27336: PPUSH
27337: CALL_OW 456
// end ;
27341: GO 27254
27343: POP
27344: POP
// end ;
27345: LD_VAR 0 3
27349: RET
// export function Count ( array ) ; begin
27350: LD_INT 0
27352: PPUSH
// result := array + 0 ;
27353: LD_ADDR_VAR 0 2
27357: PUSH
27358: LD_VAR 0 1
27362: PUSH
27363: LD_INT 0
27365: PLUS
27366: ST_TO_ADDR
// end ;
27367: LD_VAR 0 2
27371: RET
// export function IsEmpty ( building ) ; begin
27372: LD_INT 0
27374: PPUSH
// if not building then
27375: LD_VAR 0 1
27379: NOT
27380: IFFALSE 27384
// exit ;
27382: GO 27427
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27384: LD_ADDR_VAR 0 2
27388: PUSH
27389: LD_VAR 0 1
27393: PUSH
27394: LD_INT 22
27396: PUSH
27397: LD_VAR 0 1
27401: PPUSH
27402: CALL_OW 255
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 58
27413: PUSH
27414: EMPTY
27415: LIST
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 69
27425: IN
27426: ST_TO_ADDR
// end ;
27427: LD_VAR 0 2
27431: RET
// export function IsNotFull ( building ) ; var places ; begin
27432: LD_INT 0
27434: PPUSH
27435: PPUSH
// if not building then
27436: LD_VAR 0 1
27440: NOT
27441: IFFALSE 27445
// exit ;
27443: GO 27473
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27445: LD_ADDR_VAR 0 2
27449: PUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: LD_INT 3
27457: PUSH
27458: LD_INT 62
27460: PUSH
27461: EMPTY
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PPUSH
27468: CALL_OW 72
27472: ST_TO_ADDR
// end ;
27473: LD_VAR 0 2
27477: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27478: LD_INT 0
27480: PPUSH
27481: PPUSH
27482: PPUSH
27483: PPUSH
// tmp := [ ] ;
27484: LD_ADDR_VAR 0 3
27488: PUSH
27489: EMPTY
27490: ST_TO_ADDR
// list := [ ] ;
27491: LD_ADDR_VAR 0 5
27495: PUSH
27496: EMPTY
27497: ST_TO_ADDR
// for i = 16 to 25 do
27498: LD_ADDR_VAR 0 4
27502: PUSH
27503: DOUBLE
27504: LD_INT 16
27506: DEC
27507: ST_TO_ADDR
27508: LD_INT 25
27510: PUSH
27511: FOR_TO
27512: IFFALSE 27585
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27514: LD_ADDR_VAR 0 3
27518: PUSH
27519: LD_VAR 0 3
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_VAR 0 1
27531: PPUSH
27532: CALL_OW 255
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 91
27543: PUSH
27544: LD_VAR 0 1
27548: PUSH
27549: LD_INT 6
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 30
27559: PUSH
27560: LD_VAR 0 4
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: ADD
27582: ST_TO_ADDR
27583: GO 27511
27585: POP
27586: POP
// for i = 1 to tmp do
27587: LD_ADDR_VAR 0 4
27591: PUSH
27592: DOUBLE
27593: LD_INT 1
27595: DEC
27596: ST_TO_ADDR
27597: LD_VAR 0 3
27601: PUSH
27602: FOR_TO
27603: IFFALSE 27691
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27605: LD_ADDR_VAR 0 5
27609: PUSH
27610: LD_VAR 0 5
27614: PUSH
27615: LD_VAR 0 3
27619: PUSH
27620: LD_VAR 0 4
27624: ARRAY
27625: PPUSH
27626: CALL_OW 266
27630: PUSH
27631: LD_VAR 0 3
27635: PUSH
27636: LD_VAR 0 4
27640: ARRAY
27641: PPUSH
27642: CALL_OW 250
27646: PUSH
27647: LD_VAR 0 3
27651: PUSH
27652: LD_VAR 0 4
27656: ARRAY
27657: PPUSH
27658: CALL_OW 251
27662: PUSH
27663: LD_VAR 0 3
27667: PUSH
27668: LD_VAR 0 4
27672: ARRAY
27673: PPUSH
27674: CALL_OW 254
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: ADD
27688: ST_TO_ADDR
27689: GO 27602
27691: POP
27692: POP
// result := list ;
27693: LD_ADDR_VAR 0 2
27697: PUSH
27698: LD_VAR 0 5
27702: ST_TO_ADDR
// end ;
27703: LD_VAR 0 2
27707: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27708: LD_INT 0
27710: PPUSH
27711: PPUSH
27712: PPUSH
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
// if not factory then
27717: LD_VAR 0 1
27721: NOT
27722: IFFALSE 27726
// exit ;
27724: GO 28319
// if control = control_apeman then
27726: LD_VAR 0 4
27730: PUSH
27731: LD_INT 5
27733: EQUAL
27734: IFFALSE 27843
// begin tmp := UnitsInside ( factory ) ;
27736: LD_ADDR_VAR 0 8
27740: PUSH
27741: LD_VAR 0 1
27745: PPUSH
27746: CALL_OW 313
27750: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27751: LD_VAR 0 8
27755: PPUSH
27756: LD_INT 25
27758: PUSH
27759: LD_INT 12
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL_OW 72
27770: NOT
27771: IFFALSE 27781
// control := control_manual ;
27773: LD_ADDR_VAR 0 4
27777: PUSH
27778: LD_INT 1
27780: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27781: LD_ADDR_VAR 0 8
27785: PUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL 27478 0 1
27795: ST_TO_ADDR
// if tmp then
27796: LD_VAR 0 8
27800: IFFALSE 27843
// begin for i in tmp do
27802: LD_ADDR_VAR 0 7
27806: PUSH
27807: LD_VAR 0 8
27811: PUSH
27812: FOR_IN
27813: IFFALSE 27841
// if i [ 1 ] = b_ext_radio then
27815: LD_VAR 0 7
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: PUSH
27824: LD_INT 22
27826: EQUAL
27827: IFFALSE 27839
// begin control := control_remote ;
27829: LD_ADDR_VAR 0 4
27833: PUSH
27834: LD_INT 2
27836: ST_TO_ADDR
// break ;
27837: GO 27841
// end ;
27839: GO 27812
27841: POP
27842: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27843: LD_VAR 0 1
27847: PPUSH
27848: LD_VAR 0 2
27852: PPUSH
27853: LD_VAR 0 3
27857: PPUSH
27858: LD_VAR 0 4
27862: PPUSH
27863: LD_VAR 0 5
27867: PPUSH
27868: CALL_OW 448
27872: IFFALSE 27907
// begin result := [ chassis , engine , control , weapon ] ;
27874: LD_ADDR_VAR 0 6
27878: PUSH
27879: LD_VAR 0 2
27883: PUSH
27884: LD_VAR 0 3
27888: PUSH
27889: LD_VAR 0 4
27893: PUSH
27894: LD_VAR 0 5
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
// exit ;
27905: GO 28319
// end ; _chassis := AvailableChassisList ( factory ) ;
27907: LD_ADDR_VAR 0 9
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 475
27921: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27922: LD_ADDR_VAR 0 11
27926: PUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 476
27936: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27937: LD_ADDR_VAR 0 12
27941: PUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 477
27951: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27952: LD_ADDR_VAR 0 10
27956: PUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 478
27966: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27967: LD_VAR 0 9
27971: NOT
27972: PUSH
27973: LD_VAR 0 11
27977: NOT
27978: OR
27979: PUSH
27980: LD_VAR 0 12
27984: NOT
27985: OR
27986: PUSH
27987: LD_VAR 0 10
27991: NOT
27992: OR
27993: IFFALSE 28028
// begin result := [ chassis , engine , control , weapon ] ;
27995: LD_ADDR_VAR 0 6
27999: PUSH
28000: LD_VAR 0 2
28004: PUSH
28005: LD_VAR 0 3
28009: PUSH
28010: LD_VAR 0 4
28014: PUSH
28015: LD_VAR 0 5
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: ST_TO_ADDR
// exit ;
28026: GO 28319
// end ; if not chassis in _chassis then
28028: LD_VAR 0 2
28032: PUSH
28033: LD_VAR 0 9
28037: IN
28038: NOT
28039: IFFALSE 28065
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28041: LD_ADDR_VAR 0 2
28045: PUSH
28046: LD_VAR 0 9
28050: PUSH
28051: LD_INT 1
28053: PPUSH
28054: LD_VAR 0 9
28058: PPUSH
28059: CALL_OW 12
28063: ARRAY
28064: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28065: LD_VAR 0 2
28069: PPUSH
28070: LD_VAR 0 3
28074: PPUSH
28075: CALL 28324 0 2
28079: NOT
28080: IFFALSE 28139
// repeat engine := _engine [ 1 ] ;
28082: LD_ADDR_VAR 0 3
28086: PUSH
28087: LD_VAR 0 11
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28096: LD_ADDR_VAR 0 11
28100: PUSH
28101: LD_VAR 0 11
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: CALL_OW 3
28113: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28114: LD_VAR 0 2
28118: PPUSH
28119: LD_VAR 0 3
28123: PPUSH
28124: CALL 28324 0 2
28128: PUSH
28129: LD_VAR 0 11
28133: PUSH
28134: EMPTY
28135: EQUAL
28136: OR
28137: IFFALSE 28082
// if not control in _control then
28139: LD_VAR 0 4
28143: PUSH
28144: LD_VAR 0 12
28148: IN
28149: NOT
28150: IFFALSE 28176
// control := _control [ rand ( 1 , _control ) ] ;
28152: LD_ADDR_VAR 0 4
28156: PUSH
28157: LD_VAR 0 12
28161: PUSH
28162: LD_INT 1
28164: PPUSH
28165: LD_VAR 0 12
28169: PPUSH
28170: CALL_OW 12
28174: ARRAY
28175: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28176: LD_VAR 0 2
28180: PPUSH
28181: LD_VAR 0 5
28185: PPUSH
28186: CALL 28544 0 2
28190: NOT
28191: IFFALSE 28250
// repeat weapon := _weapon [ 1 ] ;
28193: LD_ADDR_VAR 0 5
28197: PUSH
28198: LD_VAR 0 10
28202: PUSH
28203: LD_INT 1
28205: ARRAY
28206: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28207: LD_ADDR_VAR 0 10
28211: PUSH
28212: LD_VAR 0 10
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: CALL_OW 3
28224: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28225: LD_VAR 0 2
28229: PPUSH
28230: LD_VAR 0 5
28234: PPUSH
28235: CALL 28544 0 2
28239: PUSH
28240: LD_VAR 0 10
28244: PUSH
28245: EMPTY
28246: EQUAL
28247: OR
28248: IFFALSE 28193
// result := [ ] ;
28250: LD_ADDR_VAR 0 6
28254: PUSH
28255: EMPTY
28256: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28257: LD_VAR 0 1
28261: PPUSH
28262: LD_VAR 0 2
28266: PPUSH
28267: LD_VAR 0 3
28271: PPUSH
28272: LD_VAR 0 4
28276: PPUSH
28277: LD_VAR 0 5
28281: PPUSH
28282: CALL_OW 448
28286: IFFALSE 28319
// result := [ chassis , engine , control , weapon ] ;
28288: LD_ADDR_VAR 0 6
28292: PUSH
28293: LD_VAR 0 2
28297: PUSH
28298: LD_VAR 0 3
28302: PUSH
28303: LD_VAR 0 4
28307: PUSH
28308: LD_VAR 0 5
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: ST_TO_ADDR
// end ;
28319: LD_VAR 0 6
28323: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28324: LD_INT 0
28326: PPUSH
// if not chassis or not engine then
28327: LD_VAR 0 1
28331: NOT
28332: PUSH
28333: LD_VAR 0 2
28337: NOT
28338: OR
28339: IFFALSE 28343
// exit ;
28341: GO 28539
// case engine of engine_solar :
28343: LD_VAR 0 2
28347: PUSH
28348: LD_INT 2
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28394
28356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28357: LD_ADDR_VAR 0 3
28361: PUSH
28362: LD_INT 11
28364: PUSH
28365: LD_INT 12
28367: PUSH
28368: LD_INT 13
28370: PUSH
28371: LD_INT 14
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: ST_TO_ADDR
28392: GO 28523
28394: LD_INT 1
28396: DOUBLE
28397: EQUAL
28398: IFTRUE 28402
28400: GO 28464
28402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: LD_INT 11
28410: PUSH
28411: LD_INT 12
28413: PUSH
28414: LD_INT 13
28416: PUSH
28417: LD_INT 14
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: LD_INT 3
28428: PUSH
28429: LD_INT 4
28431: PUSH
28432: LD_INT 5
28434: PUSH
28435: LD_INT 21
28437: PUSH
28438: LD_INT 23
28440: PUSH
28441: LD_INT 22
28443: PUSH
28444: LD_INT 24
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
28462: GO 28523
28464: LD_INT 3
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28522
28472: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28473: LD_ADDR_VAR 0 3
28477: PUSH
28478: LD_INT 13
28480: PUSH
28481: LD_INT 14
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 3
28489: PUSH
28490: LD_INT 4
28492: PUSH
28493: LD_INT 5
28495: PUSH
28496: LD_INT 21
28498: PUSH
28499: LD_INT 22
28501: PUSH
28502: LD_INT 23
28504: PUSH
28505: LD_INT 24
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
28520: GO 28523
28522: POP
// result := ( chassis in result ) ;
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_VAR 0 1
28532: PUSH
28533: LD_VAR 0 3
28537: IN
28538: ST_TO_ADDR
// end ;
28539: LD_VAR 0 3
28543: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28544: LD_INT 0
28546: PPUSH
// if not chassis or not weapon then
28547: LD_VAR 0 1
28551: NOT
28552: PUSH
28553: LD_VAR 0 2
28557: NOT
28558: OR
28559: IFFALSE 28563
// exit ;
28561: GO 29623
// case weapon of us_machine_gun :
28563: LD_VAR 0 2
28567: PUSH
28568: LD_INT 2
28570: DOUBLE
28571: EQUAL
28572: IFTRUE 28576
28574: GO 28606
28576: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28577: LD_ADDR_VAR 0 3
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: LD_INT 4
28593: PUSH
28594: LD_INT 5
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
28604: GO 29607
28606: LD_INT 3
28608: DOUBLE
28609: EQUAL
28610: IFTRUE 28614
28612: GO 28644
28614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28615: LD_ADDR_VAR 0 3
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: LD_INT 4
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: ST_TO_ADDR
28642: GO 29607
28644: LD_INT 11
28646: DOUBLE
28647: EQUAL
28648: IFTRUE 28652
28650: GO 28682
28652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 3
28666: PUSH
28667: LD_INT 4
28669: PUSH
28670: LD_INT 5
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: ST_TO_ADDR
28680: GO 29607
28682: LD_INT 4
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28690
28688: GO 28716
28690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 3
28701: PUSH
28702: LD_INT 4
28704: PUSH
28705: LD_INT 5
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
28714: GO 29607
28716: LD_INT 5
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 28750
28724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28725: LD_ADDR_VAR 0 3
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 4
28738: PUSH
28739: LD_INT 5
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
28748: GO 29607
28750: LD_INT 9
28752: DOUBLE
28753: EQUAL
28754: IFTRUE 28758
28756: GO 28784
28758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28759: LD_ADDR_VAR 0 3
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: LD_INT 4
28772: PUSH
28773: LD_INT 5
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
28782: GO 29607
28784: LD_INT 7
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 28818
28792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 4
28806: PUSH
28807: LD_INT 5
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
28816: GO 29607
28818: LD_INT 12
28820: DOUBLE
28821: EQUAL
28822: IFTRUE 28826
28824: GO 28852
28826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28827: LD_ADDR_VAR 0 3
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: LD_INT 3
28837: PUSH
28838: LD_INT 4
28840: PUSH
28841: LD_INT 5
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
28850: GO 29607
28852: LD_INT 13
28854: DOUBLE
28855: EQUAL
28856: IFTRUE 28860
28858: GO 28886
28860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28861: LD_ADDR_VAR 0 3
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: LD_INT 3
28871: PUSH
28872: LD_INT 4
28874: PUSH
28875: LD_INT 5
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
28884: GO 29607
28886: LD_INT 14
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28912
28894: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 4
28902: PUSH
28903: LD_INT 5
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: ST_TO_ADDR
28910: GO 29607
28912: LD_INT 6
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28938
28920: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_INT 4
28928: PUSH
28929: LD_INT 5
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: ST_TO_ADDR
28936: GO 29607
28938: LD_INT 10
28940: DOUBLE
28941: EQUAL
28942: IFTRUE 28946
28944: GO 28964
28946: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28947: LD_ADDR_VAR 0 3
28951: PUSH
28952: LD_INT 4
28954: PUSH
28955: LD_INT 5
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: ST_TO_ADDR
28962: GO 29607
28964: LD_INT 22
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28998
28972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28973: LD_ADDR_VAR 0 3
28977: PUSH
28978: LD_INT 11
28980: PUSH
28981: LD_INT 12
28983: PUSH
28984: LD_INT 13
28986: PUSH
28987: LD_INT 14
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
28996: GO 29607
28998: LD_INT 23
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29006
29004: GO 29032
29006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29007: LD_ADDR_VAR 0 3
29011: PUSH
29012: LD_INT 11
29014: PUSH
29015: LD_INT 12
29017: PUSH
29018: LD_INT 13
29020: PUSH
29021: LD_INT 14
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: ST_TO_ADDR
29030: GO 29607
29032: LD_INT 24
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29066
29040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 11
29048: PUSH
29049: LD_INT 12
29051: PUSH
29052: LD_INT 13
29054: PUSH
29055: LD_INT 14
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
29064: GO 29607
29066: LD_INT 30
29068: DOUBLE
29069: EQUAL
29070: IFTRUE 29074
29072: GO 29100
29074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_INT 11
29082: PUSH
29083: LD_INT 12
29085: PUSH
29086: LD_INT 13
29088: PUSH
29089: LD_INT 14
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
29098: GO 29607
29100: LD_INT 25
29102: DOUBLE
29103: EQUAL
29104: IFTRUE 29108
29106: GO 29126
29108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_INT 13
29116: PUSH
29117: LD_INT 14
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: ST_TO_ADDR
29124: GO 29607
29126: LD_INT 27
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29134
29132: GO 29152
29134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29135: LD_ADDR_VAR 0 3
29139: PUSH
29140: LD_INT 13
29142: PUSH
29143: LD_INT 14
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: ST_TO_ADDR
29150: GO 29607
29152: LD_INT 92
29154: DOUBLE
29155: EQUAL
29156: IFTRUE 29160
29158: GO 29186
29160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 11
29168: PUSH
29169: LD_INT 12
29171: PUSH
29172: LD_INT 13
29174: PUSH
29175: LD_INT 14
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29607
29186: LD_INT 28
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29212
29194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 13
29202: PUSH
29203: LD_INT 14
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: ST_TO_ADDR
29210: GO 29607
29212: LD_INT 29
29214: DOUBLE
29215: EQUAL
29216: IFTRUE 29220
29218: GO 29238
29220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29221: LD_ADDR_VAR 0 3
29225: PUSH
29226: LD_INT 13
29228: PUSH
29229: LD_INT 14
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: ST_TO_ADDR
29236: GO 29607
29238: LD_INT 31
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29264
29246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 13
29254: PUSH
29255: LD_INT 14
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: ST_TO_ADDR
29262: GO 29607
29264: LD_INT 26
29266: DOUBLE
29267: EQUAL
29268: IFTRUE 29272
29270: GO 29290
29272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29273: LD_ADDR_VAR 0 3
29277: PUSH
29278: LD_INT 13
29280: PUSH
29281: LD_INT 14
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: ST_TO_ADDR
29288: GO 29607
29290: LD_INT 42
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29324
29298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_INT 23
29312: PUSH
29313: LD_INT 24
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
29322: GO 29607
29324: LD_INT 43
29326: DOUBLE
29327: EQUAL
29328: IFTRUE 29332
29330: GO 29358
29332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 21
29340: PUSH
29341: LD_INT 22
29343: PUSH
29344: LD_INT 23
29346: PUSH
29347: LD_INT 24
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 29607
29358: LD_INT 44
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29392
29366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 21
29374: PUSH
29375: LD_INT 22
29377: PUSH
29378: LD_INT 23
29380: PUSH
29381: LD_INT 24
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
29390: GO 29607
29392: LD_INT 45
29394: DOUBLE
29395: EQUAL
29396: IFTRUE 29400
29398: GO 29426
29400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29401: LD_ADDR_VAR 0 3
29405: PUSH
29406: LD_INT 21
29408: PUSH
29409: LD_INT 22
29411: PUSH
29412: LD_INT 23
29414: PUSH
29415: LD_INT 24
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: ST_TO_ADDR
29424: GO 29607
29426: LD_INT 49
29428: DOUBLE
29429: EQUAL
29430: IFTRUE 29434
29432: GO 29460
29434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29435: LD_ADDR_VAR 0 3
29439: PUSH
29440: LD_INT 21
29442: PUSH
29443: LD_INT 22
29445: PUSH
29446: LD_INT 23
29448: PUSH
29449: LD_INT 24
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: ST_TO_ADDR
29458: GO 29607
29460: LD_INT 51
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29468
29466: GO 29494
29468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_INT 21
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_INT 23
29482: PUSH
29483: LD_INT 24
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 29607
29494: LD_INT 52
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29528
29502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 21
29510: PUSH
29511: LD_INT 22
29513: PUSH
29514: LD_INT 23
29516: PUSH
29517: LD_INT 24
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
29526: GO 29607
29528: LD_INT 53
29530: DOUBLE
29531: EQUAL
29532: IFTRUE 29536
29534: GO 29554
29536: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 23
29544: PUSH
29545: LD_INT 24
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: ST_TO_ADDR
29552: GO 29607
29554: LD_INT 46
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29580
29562: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_INT 23
29570: PUSH
29571: LD_INT 24
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: ST_TO_ADDR
29578: GO 29607
29580: LD_INT 47
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29606
29588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_INT 23
29596: PUSH
29597: LD_INT 24
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: ST_TO_ADDR
29604: GO 29607
29606: POP
// result := ( chassis in result ) ;
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: LD_VAR 0 1
29616: PUSH
29617: LD_VAR 0 3
29621: IN
29622: ST_TO_ADDR
// end ;
29623: LD_VAR 0 3
29627: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29628: LD_INT 0
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
// result := array ;
29637: LD_ADDR_VAR 0 5
29641: PUSH
29642: LD_VAR 0 1
29646: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29647: LD_VAR 0 1
29651: NOT
29652: PUSH
29653: LD_VAR 0 2
29657: NOT
29658: OR
29659: PUSH
29660: LD_VAR 0 3
29664: NOT
29665: OR
29666: PUSH
29667: LD_VAR 0 2
29671: PUSH
29672: LD_VAR 0 1
29676: GREATER
29677: OR
29678: PUSH
29679: LD_VAR 0 3
29683: PUSH
29684: LD_VAR 0 1
29688: GREATER
29689: OR
29690: IFFALSE 29694
// exit ;
29692: GO 29990
// if direction then
29694: LD_VAR 0 4
29698: IFFALSE 29762
// begin d := 1 ;
29700: LD_ADDR_VAR 0 9
29704: PUSH
29705: LD_INT 1
29707: ST_TO_ADDR
// if i_from > i_to then
29708: LD_VAR 0 2
29712: PUSH
29713: LD_VAR 0 3
29717: GREATER
29718: IFFALSE 29744
// length := ( array - i_from ) + i_to else
29720: LD_ADDR_VAR 0 11
29724: PUSH
29725: LD_VAR 0 1
29729: PUSH
29730: LD_VAR 0 2
29734: MINUS
29735: PUSH
29736: LD_VAR 0 3
29740: PLUS
29741: ST_TO_ADDR
29742: GO 29760
// length := i_to - i_from ;
29744: LD_ADDR_VAR 0 11
29748: PUSH
29749: LD_VAR 0 3
29753: PUSH
29754: LD_VAR 0 2
29758: MINUS
29759: ST_TO_ADDR
// end else
29760: GO 29823
// begin d := - 1 ;
29762: LD_ADDR_VAR 0 9
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: ST_TO_ADDR
// if i_from > i_to then
29771: LD_VAR 0 2
29775: PUSH
29776: LD_VAR 0 3
29780: GREATER
29781: IFFALSE 29801
// length := i_from - i_to else
29783: LD_ADDR_VAR 0 11
29787: PUSH
29788: LD_VAR 0 2
29792: PUSH
29793: LD_VAR 0 3
29797: MINUS
29798: ST_TO_ADDR
29799: GO 29823
// length := ( array - i_to ) + i_from ;
29801: LD_ADDR_VAR 0 11
29805: PUSH
29806: LD_VAR 0 1
29810: PUSH
29811: LD_VAR 0 3
29815: MINUS
29816: PUSH
29817: LD_VAR 0 2
29821: PLUS
29822: ST_TO_ADDR
// end ; if not length then
29823: LD_VAR 0 11
29827: NOT
29828: IFFALSE 29832
// exit ;
29830: GO 29990
// tmp := array ;
29832: LD_ADDR_VAR 0 10
29836: PUSH
29837: LD_VAR 0 1
29841: ST_TO_ADDR
// for i = 1 to length do
29842: LD_ADDR_VAR 0 6
29846: PUSH
29847: DOUBLE
29848: LD_INT 1
29850: DEC
29851: ST_TO_ADDR
29852: LD_VAR 0 11
29856: PUSH
29857: FOR_TO
29858: IFFALSE 29978
// begin for j = 1 to array do
29860: LD_ADDR_VAR 0 7
29864: PUSH
29865: DOUBLE
29866: LD_INT 1
29868: DEC
29869: ST_TO_ADDR
29870: LD_VAR 0 1
29874: PUSH
29875: FOR_TO
29876: IFFALSE 29964
// begin k := j + d ;
29878: LD_ADDR_VAR 0 8
29882: PUSH
29883: LD_VAR 0 7
29887: PUSH
29888: LD_VAR 0 9
29892: PLUS
29893: ST_TO_ADDR
// if k > array then
29894: LD_VAR 0 8
29898: PUSH
29899: LD_VAR 0 1
29903: GREATER
29904: IFFALSE 29914
// k := 1 ;
29906: LD_ADDR_VAR 0 8
29910: PUSH
29911: LD_INT 1
29913: ST_TO_ADDR
// if not k then
29914: LD_VAR 0 8
29918: NOT
29919: IFFALSE 29931
// k := array ;
29921: LD_ADDR_VAR 0 8
29925: PUSH
29926: LD_VAR 0 1
29930: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29931: LD_ADDR_VAR 0 10
29935: PUSH
29936: LD_VAR 0 10
29940: PPUSH
29941: LD_VAR 0 8
29945: PPUSH
29946: LD_VAR 0 1
29950: PUSH
29951: LD_VAR 0 7
29955: ARRAY
29956: PPUSH
29957: CALL_OW 1
29961: ST_TO_ADDR
// end ;
29962: GO 29875
29964: POP
29965: POP
// array := tmp ;
29966: LD_ADDR_VAR 0 1
29970: PUSH
29971: LD_VAR 0 10
29975: ST_TO_ADDR
// end ;
29976: GO 29857
29978: POP
29979: POP
// result := array ;
29980: LD_ADDR_VAR 0 5
29984: PUSH
29985: LD_VAR 0 1
29989: ST_TO_ADDR
// end ;
29990: LD_VAR 0 5
29994: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29995: LD_INT 0
29997: PPUSH
29998: PPUSH
// result := 0 ;
29999: LD_ADDR_VAR 0 3
30003: PUSH
30004: LD_INT 0
30006: ST_TO_ADDR
// if not array or not value in array then
30007: LD_VAR 0 1
30011: NOT
30012: PUSH
30013: LD_VAR 0 2
30017: PUSH
30018: LD_VAR 0 1
30022: IN
30023: NOT
30024: OR
30025: IFFALSE 30029
// exit ;
30027: GO 30083
// for i = 1 to array do
30029: LD_ADDR_VAR 0 4
30033: PUSH
30034: DOUBLE
30035: LD_INT 1
30037: DEC
30038: ST_TO_ADDR
30039: LD_VAR 0 1
30043: PUSH
30044: FOR_TO
30045: IFFALSE 30081
// if value = array [ i ] then
30047: LD_VAR 0 2
30051: PUSH
30052: LD_VAR 0 1
30056: PUSH
30057: LD_VAR 0 4
30061: ARRAY
30062: EQUAL
30063: IFFALSE 30079
// begin result := i ;
30065: LD_ADDR_VAR 0 3
30069: PUSH
30070: LD_VAR 0 4
30074: ST_TO_ADDR
// exit ;
30075: POP
30076: POP
30077: GO 30083
// end ;
30079: GO 30044
30081: POP
30082: POP
// end ;
30083: LD_VAR 0 3
30087: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30088: LD_INT 0
30090: PPUSH
// vc_chassis := chassis ;
30091: LD_ADDR_OWVAR 37
30095: PUSH
30096: LD_VAR 0 1
30100: ST_TO_ADDR
// vc_engine := engine ;
30101: LD_ADDR_OWVAR 39
30105: PUSH
30106: LD_VAR 0 2
30110: ST_TO_ADDR
// vc_control := control ;
30111: LD_ADDR_OWVAR 38
30115: PUSH
30116: LD_VAR 0 3
30120: ST_TO_ADDR
// vc_weapon := weapon ;
30121: LD_ADDR_OWVAR 40
30125: PUSH
30126: LD_VAR 0 4
30130: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30131: LD_ADDR_OWVAR 41
30135: PUSH
30136: LD_VAR 0 5
30140: ST_TO_ADDR
// end ;
30141: LD_VAR 0 6
30145: RET
// export function WantPlant ( unit ) ; var task ; begin
30146: LD_INT 0
30148: PPUSH
30149: PPUSH
// result := false ;
30150: LD_ADDR_VAR 0 2
30154: PUSH
30155: LD_INT 0
30157: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30158: LD_ADDR_VAR 0 3
30162: PUSH
30163: LD_VAR 0 1
30167: PPUSH
30168: CALL_OW 437
30172: ST_TO_ADDR
// if task then
30173: LD_VAR 0 3
30177: IFFALSE 30205
// if task [ 1 ] [ 1 ] = p then
30179: LD_VAR 0 3
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PUSH
30188: LD_INT 1
30190: ARRAY
30191: PUSH
30192: LD_STRING p
30194: EQUAL
30195: IFFALSE 30205
// result := true ;
30197: LD_ADDR_VAR 0 2
30201: PUSH
30202: LD_INT 1
30204: ST_TO_ADDR
// end ;
30205: LD_VAR 0 2
30209: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30210: LD_INT 0
30212: PPUSH
30213: PPUSH
30214: PPUSH
30215: PPUSH
// if pos < 1 then
30216: LD_VAR 0 2
30220: PUSH
30221: LD_INT 1
30223: LESS
30224: IFFALSE 30228
// exit ;
30226: GO 30531
// if pos = 1 then
30228: LD_VAR 0 2
30232: PUSH
30233: LD_INT 1
30235: EQUAL
30236: IFFALSE 30269
// result := Replace ( arr , pos [ 1 ] , value ) else
30238: LD_ADDR_VAR 0 4
30242: PUSH
30243: LD_VAR 0 1
30247: PPUSH
30248: LD_VAR 0 2
30252: PUSH
30253: LD_INT 1
30255: ARRAY
30256: PPUSH
30257: LD_VAR 0 3
30261: PPUSH
30262: CALL_OW 1
30266: ST_TO_ADDR
30267: GO 30531
// begin tmp := arr ;
30269: LD_ADDR_VAR 0 6
30273: PUSH
30274: LD_VAR 0 1
30278: ST_TO_ADDR
// s_arr := [ tmp ] ;
30279: LD_ADDR_VAR 0 7
30283: PUSH
30284: LD_VAR 0 6
30288: PUSH
30289: EMPTY
30290: LIST
30291: ST_TO_ADDR
// for i = 1 to pos - 1 do
30292: LD_ADDR_VAR 0 5
30296: PUSH
30297: DOUBLE
30298: LD_INT 1
30300: DEC
30301: ST_TO_ADDR
30302: LD_VAR 0 2
30306: PUSH
30307: LD_INT 1
30309: MINUS
30310: PUSH
30311: FOR_TO
30312: IFFALSE 30357
// begin tmp := tmp [ pos [ i ] ] ;
30314: LD_ADDR_VAR 0 6
30318: PUSH
30319: LD_VAR 0 6
30323: PUSH
30324: LD_VAR 0 2
30328: PUSH
30329: LD_VAR 0 5
30333: ARRAY
30334: ARRAY
30335: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30336: LD_ADDR_VAR 0 7
30340: PUSH
30341: LD_VAR 0 7
30345: PUSH
30346: LD_VAR 0 6
30350: PUSH
30351: EMPTY
30352: LIST
30353: ADD
30354: ST_TO_ADDR
// end ;
30355: GO 30311
30357: POP
30358: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30359: LD_ADDR_VAR 0 6
30363: PUSH
30364: LD_VAR 0 6
30368: PPUSH
30369: LD_VAR 0 2
30373: PUSH
30374: LD_VAR 0 2
30378: ARRAY
30379: PPUSH
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL_OW 1
30389: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30390: LD_ADDR_VAR 0 7
30394: PUSH
30395: LD_VAR 0 7
30399: PPUSH
30400: LD_VAR 0 7
30404: PPUSH
30405: LD_VAR 0 6
30409: PPUSH
30410: CALL_OW 1
30414: ST_TO_ADDR
// for i = s_arr downto 2 do
30415: LD_ADDR_VAR 0 5
30419: PUSH
30420: DOUBLE
30421: LD_VAR 0 7
30425: INC
30426: ST_TO_ADDR
30427: LD_INT 2
30429: PUSH
30430: FOR_DOWNTO
30431: IFFALSE 30515
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30433: LD_ADDR_VAR 0 6
30437: PUSH
30438: LD_VAR 0 7
30442: PUSH
30443: LD_VAR 0 5
30447: PUSH
30448: LD_INT 1
30450: MINUS
30451: ARRAY
30452: PPUSH
30453: LD_VAR 0 2
30457: PUSH
30458: LD_VAR 0 5
30462: PUSH
30463: LD_INT 1
30465: MINUS
30466: ARRAY
30467: PPUSH
30468: LD_VAR 0 7
30472: PUSH
30473: LD_VAR 0 5
30477: ARRAY
30478: PPUSH
30479: CALL_OW 1
30483: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30484: LD_ADDR_VAR 0 7
30488: PUSH
30489: LD_VAR 0 7
30493: PPUSH
30494: LD_VAR 0 5
30498: PUSH
30499: LD_INT 1
30501: MINUS
30502: PPUSH
30503: LD_VAR 0 6
30507: PPUSH
30508: CALL_OW 1
30512: ST_TO_ADDR
// end ;
30513: GO 30430
30515: POP
30516: POP
// result := s_arr [ 1 ] ;
30517: LD_ADDR_VAR 0 4
30521: PUSH
30522: LD_VAR 0 7
30526: PUSH
30527: LD_INT 1
30529: ARRAY
30530: ST_TO_ADDR
// end ; end ;
30531: LD_VAR 0 4
30535: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30536: LD_INT 0
30538: PPUSH
30539: PPUSH
// if not list then
30540: LD_VAR 0 1
30544: NOT
30545: IFFALSE 30549
// exit ;
30547: GO 30640
// i := list [ pos1 ] ;
30549: LD_ADDR_VAR 0 5
30553: PUSH
30554: LD_VAR 0 1
30558: PUSH
30559: LD_VAR 0 2
30563: ARRAY
30564: ST_TO_ADDR
// if not i then
30565: LD_VAR 0 5
30569: NOT
30570: IFFALSE 30574
// exit ;
30572: GO 30640
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30574: LD_ADDR_VAR 0 1
30578: PUSH
30579: LD_VAR 0 1
30583: PPUSH
30584: LD_VAR 0 2
30588: PPUSH
30589: LD_VAR 0 1
30593: PUSH
30594: LD_VAR 0 3
30598: ARRAY
30599: PPUSH
30600: CALL_OW 1
30604: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30605: LD_ADDR_VAR 0 1
30609: PUSH
30610: LD_VAR 0 1
30614: PPUSH
30615: LD_VAR 0 3
30619: PPUSH
30620: LD_VAR 0 5
30624: PPUSH
30625: CALL_OW 1
30629: ST_TO_ADDR
// result := list ;
30630: LD_ADDR_VAR 0 4
30634: PUSH
30635: LD_VAR 0 1
30639: ST_TO_ADDR
// end ;
30640: LD_VAR 0 4
30644: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30645: LD_INT 0
30647: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30648: LD_ADDR_VAR 0 5
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 250
30662: PPUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 251
30672: PPUSH
30673: LD_VAR 0 2
30677: PPUSH
30678: LD_VAR 0 3
30682: PPUSH
30683: LD_VAR 0 4
30687: PPUSH
30688: CALL 31066 0 5
30692: ST_TO_ADDR
// end ;
30693: LD_VAR 0 5
30697: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
// if not list or not unit then
30704: LD_VAR 0 2
30708: NOT
30709: PUSH
30710: LD_VAR 0 1
30714: NOT
30715: OR
30716: IFFALSE 30720
// exit ;
30718: GO 31061
// result := [ ] ;
30720: LD_ADDR_VAR 0 5
30724: PUSH
30725: EMPTY
30726: ST_TO_ADDR
// for i in list do
30727: LD_ADDR_VAR 0 6
30731: PUSH
30732: LD_VAR 0 2
30736: PUSH
30737: FOR_IN
30738: IFFALSE 30956
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30740: LD_ADDR_VAR 0 8
30744: PUSH
30745: LD_VAR 0 1
30749: PPUSH
30750: LD_VAR 0 6
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 6
30763: PUSH
30764: LD_INT 2
30766: ARRAY
30767: PPUSH
30768: CALL_OW 297
30772: ST_TO_ADDR
// if not Count ( result ) then
30773: LD_VAR 0 5
30777: PPUSH
30778: CALL 27350 0 1
30782: NOT
30783: IFFALSE 30816
// begin result := Join ( result , [ i , tmp ] ) ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_VAR 0 5
30794: PPUSH
30795: LD_VAR 0 6
30799: PUSH
30800: LD_VAR 0 8
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PPUSH
30809: CALL 62950 0 2
30813: ST_TO_ADDR
// continue ;
30814: GO 30737
// end ; if result [ result ] [ 2 ] <= tmp then
30816: LD_VAR 0 5
30820: PUSH
30821: LD_VAR 0 5
30825: ARRAY
30826: PUSH
30827: LD_INT 2
30829: ARRAY
30830: PUSH
30831: LD_VAR 0 8
30835: LESSEQUAL
30836: IFFALSE 30869
// result := Join ( result , [ i , tmp ] ) else
30838: LD_ADDR_VAR 0 5
30842: PUSH
30843: LD_VAR 0 5
30847: PPUSH
30848: LD_VAR 0 6
30852: PUSH
30853: LD_VAR 0 8
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PPUSH
30862: CALL 62950 0 2
30866: ST_TO_ADDR
30867: GO 30954
// begin for j := 1 to Count ( result ) do
30869: LD_ADDR_VAR 0 7
30873: PUSH
30874: DOUBLE
30875: LD_INT 1
30877: DEC
30878: ST_TO_ADDR
30879: LD_VAR 0 5
30883: PPUSH
30884: CALL 27350 0 1
30888: PUSH
30889: FOR_TO
30890: IFFALSE 30952
// begin if tmp < result [ j ] [ 2 ] then
30892: LD_VAR 0 8
30896: PUSH
30897: LD_VAR 0 5
30901: PUSH
30902: LD_VAR 0 7
30906: ARRAY
30907: PUSH
30908: LD_INT 2
30910: ARRAY
30911: LESS
30912: IFFALSE 30950
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30914: LD_ADDR_VAR 0 5
30918: PUSH
30919: LD_VAR 0 5
30923: PPUSH
30924: LD_VAR 0 7
30928: PPUSH
30929: LD_VAR 0 6
30933: PUSH
30934: LD_VAR 0 8
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PPUSH
30943: CALL_OW 2
30947: ST_TO_ADDR
// break ;
30948: GO 30952
// end ; end ;
30950: GO 30889
30952: POP
30953: POP
// end ; end ;
30954: GO 30737
30956: POP
30957: POP
// if result and not asc then
30958: LD_VAR 0 5
30962: PUSH
30963: LD_VAR 0 3
30967: NOT
30968: AND
30969: IFFALSE 30986
// result := ReverseArray ( result ) ;
30971: LD_ADDR_VAR 0 5
30975: PUSH
30976: LD_VAR 0 5
30980: PPUSH
30981: CALL 58226 0 1
30985: ST_TO_ADDR
// tmp := [ ] ;
30986: LD_ADDR_VAR 0 8
30990: PUSH
30991: EMPTY
30992: ST_TO_ADDR
// if mode then
30993: LD_VAR 0 4
30997: IFFALSE 31061
// begin for i := 1 to result do
30999: LD_ADDR_VAR 0 6
31003: PUSH
31004: DOUBLE
31005: LD_INT 1
31007: DEC
31008: ST_TO_ADDR
31009: LD_VAR 0 5
31013: PUSH
31014: FOR_TO
31015: IFFALSE 31049
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31017: LD_ADDR_VAR 0 8
31021: PUSH
31022: LD_VAR 0 8
31026: PPUSH
31027: LD_VAR 0 5
31031: PUSH
31032: LD_VAR 0 6
31036: ARRAY
31037: PUSH
31038: LD_INT 1
31040: ARRAY
31041: PPUSH
31042: CALL 62950 0 2
31046: ST_TO_ADDR
31047: GO 31014
31049: POP
31050: POP
// result := tmp ;
31051: LD_ADDR_VAR 0 5
31055: PUSH
31056: LD_VAR 0 8
31060: ST_TO_ADDR
// end ; end ;
31061: LD_VAR 0 5
31065: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31066: LD_INT 0
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
// if not list then
31072: LD_VAR 0 3
31076: NOT
31077: IFFALSE 31081
// exit ;
31079: GO 31469
// result := [ ] ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: EMPTY
31087: ST_TO_ADDR
// for i in list do
31088: LD_ADDR_VAR 0 7
31092: PUSH
31093: LD_VAR 0 3
31097: PUSH
31098: FOR_IN
31099: IFFALSE 31301
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31101: LD_ADDR_VAR 0 9
31105: PUSH
31106: LD_VAR 0 7
31110: PPUSH
31111: LD_VAR 0 1
31115: PPUSH
31116: LD_VAR 0 2
31120: PPUSH
31121: CALL_OW 297
31125: ST_TO_ADDR
// if not result then
31126: LD_VAR 0 6
31130: NOT
31131: IFFALSE 31157
// result := [ [ i , tmp ] ] else
31133: LD_ADDR_VAR 0 6
31137: PUSH
31138: LD_VAR 0 7
31142: PUSH
31143: LD_VAR 0 9
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: ST_TO_ADDR
31155: GO 31299
// begin if result [ result ] [ 2 ] < tmp then
31157: LD_VAR 0 6
31161: PUSH
31162: LD_VAR 0 6
31166: ARRAY
31167: PUSH
31168: LD_INT 2
31170: ARRAY
31171: PUSH
31172: LD_VAR 0 9
31176: LESS
31177: IFFALSE 31219
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31179: LD_ADDR_VAR 0 6
31183: PUSH
31184: LD_VAR 0 6
31188: PPUSH
31189: LD_VAR 0 6
31193: PUSH
31194: LD_INT 1
31196: PLUS
31197: PPUSH
31198: LD_VAR 0 7
31202: PUSH
31203: LD_VAR 0 9
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PPUSH
31212: CALL_OW 2
31216: ST_TO_ADDR
31217: GO 31299
// for j = 1 to result do
31219: LD_ADDR_VAR 0 8
31223: PUSH
31224: DOUBLE
31225: LD_INT 1
31227: DEC
31228: ST_TO_ADDR
31229: LD_VAR 0 6
31233: PUSH
31234: FOR_TO
31235: IFFALSE 31297
// begin if tmp < result [ j ] [ 2 ] then
31237: LD_VAR 0 9
31241: PUSH
31242: LD_VAR 0 6
31246: PUSH
31247: LD_VAR 0 8
31251: ARRAY
31252: PUSH
31253: LD_INT 2
31255: ARRAY
31256: LESS
31257: IFFALSE 31295
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31259: LD_ADDR_VAR 0 6
31263: PUSH
31264: LD_VAR 0 6
31268: PPUSH
31269: LD_VAR 0 8
31273: PPUSH
31274: LD_VAR 0 7
31278: PUSH
31279: LD_VAR 0 9
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PPUSH
31288: CALL_OW 2
31292: ST_TO_ADDR
// break ;
31293: GO 31297
// end ; end ;
31295: GO 31234
31297: POP
31298: POP
// end ; end ;
31299: GO 31098
31301: POP
31302: POP
// if result and not asc then
31303: LD_VAR 0 6
31307: PUSH
31308: LD_VAR 0 4
31312: NOT
31313: AND
31314: IFFALSE 31389
// begin tmp := result ;
31316: LD_ADDR_VAR 0 9
31320: PUSH
31321: LD_VAR 0 6
31325: ST_TO_ADDR
// for i = tmp downto 1 do
31326: LD_ADDR_VAR 0 7
31330: PUSH
31331: DOUBLE
31332: LD_VAR 0 9
31336: INC
31337: ST_TO_ADDR
31338: LD_INT 1
31340: PUSH
31341: FOR_DOWNTO
31342: IFFALSE 31387
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31344: LD_ADDR_VAR 0 6
31348: PUSH
31349: LD_VAR 0 6
31353: PPUSH
31354: LD_VAR 0 9
31358: PUSH
31359: LD_VAR 0 7
31363: MINUS
31364: PUSH
31365: LD_INT 1
31367: PLUS
31368: PPUSH
31369: LD_VAR 0 9
31373: PUSH
31374: LD_VAR 0 7
31378: ARRAY
31379: PPUSH
31380: CALL_OW 1
31384: ST_TO_ADDR
31385: GO 31341
31387: POP
31388: POP
// end ; tmp := [ ] ;
31389: LD_ADDR_VAR 0 9
31393: PUSH
31394: EMPTY
31395: ST_TO_ADDR
// if mode then
31396: LD_VAR 0 5
31400: IFFALSE 31469
// begin for i = 1 to result do
31402: LD_ADDR_VAR 0 7
31406: PUSH
31407: DOUBLE
31408: LD_INT 1
31410: DEC
31411: ST_TO_ADDR
31412: LD_VAR 0 6
31416: PUSH
31417: FOR_TO
31418: IFFALSE 31457
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_VAR 0 9
31429: PPUSH
31430: LD_VAR 0 7
31434: PPUSH
31435: LD_VAR 0 6
31439: PUSH
31440: LD_VAR 0 7
31444: ARRAY
31445: PUSH
31446: LD_INT 1
31448: ARRAY
31449: PPUSH
31450: CALL_OW 1
31454: ST_TO_ADDR
31455: GO 31417
31457: POP
31458: POP
// result := tmp ;
31459: LD_ADDR_VAR 0 6
31463: PUSH
31464: LD_VAR 0 9
31468: ST_TO_ADDR
// end ; end ;
31469: LD_VAR 0 6
31473: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
31478: PPUSH
31479: PPUSH
31480: PPUSH
31481: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31482: LD_ADDR_VAR 0 5
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: ST_TO_ADDR
// if not x or not y then
31504: LD_VAR 0 2
31508: NOT
31509: PUSH
31510: LD_VAR 0 3
31514: NOT
31515: OR
31516: IFFALSE 31520
// exit ;
31518: GO 33170
// if not range then
31520: LD_VAR 0 4
31524: NOT
31525: IFFALSE 31535
// range := 10 ;
31527: LD_ADDR_VAR 0 4
31531: PUSH
31532: LD_INT 10
31534: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31535: LD_ADDR_VAR 0 8
31539: PUSH
31540: LD_INT 81
31542: PUSH
31543: LD_VAR 0 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 92
31554: PUSH
31555: LD_VAR 0 2
31559: PUSH
31560: LD_VAR 0 3
31564: PUSH
31565: LD_VAR 0 4
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: LD_INT 21
31581: PUSH
31582: LD_INT 3
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL_OW 69
31602: ST_TO_ADDR
// if not tmp then
31603: LD_VAR 0 8
31607: NOT
31608: IFFALSE 31612
// exit ;
31610: GO 33170
// for i in tmp do
31612: LD_ADDR_VAR 0 6
31616: PUSH
31617: LD_VAR 0 8
31621: PUSH
31622: FOR_IN
31623: IFFALSE 33145
// begin points := [ 0 , 0 , 0 ] ;
31625: LD_ADDR_VAR 0 9
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
// bpoints := 1 ;
31644: LD_ADDR_VAR 0 10
31648: PUSH
31649: LD_INT 1
31651: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 247
31661: PUSH
31662: LD_INT 1
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 32248
31670: POP
// begin if GetClass ( i ) = 1 then
31671: LD_VAR 0 6
31675: PPUSH
31676: CALL_OW 257
31680: PUSH
31681: LD_INT 1
31683: EQUAL
31684: IFFALSE 31705
// points := [ 10 , 5 , 3 ] ;
31686: LD_ADDR_VAR 0 9
31690: PUSH
31691: LD_INT 10
31693: PUSH
31694: LD_INT 5
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: LIST
31704: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31705: LD_VAR 0 6
31709: PPUSH
31710: CALL_OW 257
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 4
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: IN
31729: IFFALSE 31750
// points := [ 3 , 2 , 1 ] ;
31731: LD_ADDR_VAR 0 9
31735: PUSH
31736: LD_INT 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31750: LD_VAR 0 6
31754: PPUSH
31755: CALL_OW 257
31759: PUSH
31760: LD_INT 5
31762: EQUAL
31763: IFFALSE 31784
// points := [ 130 , 5 , 2 ] ;
31765: LD_ADDR_VAR 0 9
31769: PUSH
31770: LD_INT 130
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31784: LD_VAR 0 6
31788: PPUSH
31789: CALL_OW 257
31793: PUSH
31794: LD_INT 8
31796: EQUAL
31797: IFFALSE 31818
// points := [ 35 , 35 , 30 ] ;
31799: LD_ADDR_VAR 0 9
31803: PUSH
31804: LD_INT 35
31806: PUSH
31807: LD_INT 35
31809: PUSH
31810: LD_INT 30
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31818: LD_VAR 0 6
31822: PPUSH
31823: CALL_OW 257
31827: PUSH
31828: LD_INT 9
31830: EQUAL
31831: IFFALSE 31852
// points := [ 20 , 55 , 40 ] ;
31833: LD_ADDR_VAR 0 9
31837: PUSH
31838: LD_INT 20
31840: PUSH
31841: LD_INT 55
31843: PUSH
31844: LD_INT 40
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31852: LD_VAR 0 6
31856: PPUSH
31857: CALL_OW 257
31861: PUSH
31862: LD_INT 12
31864: PUSH
31865: LD_INT 16
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: IN
31872: IFFALSE 31893
// points := [ 5 , 3 , 2 ] ;
31874: LD_ADDR_VAR 0 9
31878: PUSH
31879: LD_INT 5
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31893: LD_VAR 0 6
31897: PPUSH
31898: CALL_OW 257
31902: PUSH
31903: LD_INT 17
31905: EQUAL
31906: IFFALSE 31927
// points := [ 100 , 50 , 75 ] ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_INT 100
31915: PUSH
31916: LD_INT 50
31918: PUSH
31919: LD_INT 75
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31927: LD_VAR 0 6
31931: PPUSH
31932: CALL_OW 257
31936: PUSH
31937: LD_INT 15
31939: EQUAL
31940: IFFALSE 31961
// points := [ 10 , 5 , 3 ] ;
31942: LD_ADDR_VAR 0 9
31946: PUSH
31947: LD_INT 10
31949: PUSH
31950: LD_INT 5
31952: PUSH
31953: LD_INT 3
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31961: LD_VAR 0 6
31965: PPUSH
31966: CALL_OW 257
31970: PUSH
31971: LD_INT 14
31973: EQUAL
31974: IFFALSE 31995
// points := [ 10 , 0 , 0 ] ;
31976: LD_ADDR_VAR 0 9
31980: PUSH
31981: LD_INT 10
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31995: LD_VAR 0 6
31999: PPUSH
32000: CALL_OW 257
32004: PUSH
32005: LD_INT 11
32007: EQUAL
32008: IFFALSE 32029
// points := [ 30 , 10 , 5 ] ;
32010: LD_ADDR_VAR 0 9
32014: PUSH
32015: LD_INT 30
32017: PUSH
32018: LD_INT 10
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32029: LD_VAR 0 1
32033: PPUSH
32034: LD_INT 5
32036: PPUSH
32037: CALL_OW 321
32041: PUSH
32042: LD_INT 2
32044: EQUAL
32045: IFFALSE 32062
// bpoints := bpoints * 1.8 ;
32047: LD_ADDR_VAR 0 10
32051: PUSH
32052: LD_VAR 0 10
32056: PUSH
32057: LD_REAL  1.80000000000000E+0000
32060: MUL
32061: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32062: LD_VAR 0 6
32066: PPUSH
32067: CALL_OW 257
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: LD_INT 4
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: IN
32090: PUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_INT 51
32098: PPUSH
32099: CALL_OW 321
32103: PUSH
32104: LD_INT 2
32106: EQUAL
32107: AND
32108: IFFALSE 32125
// bpoints := bpoints * 1.2 ;
32110: LD_ADDR_VAR 0 10
32114: PUSH
32115: LD_VAR 0 10
32119: PUSH
32120: LD_REAL  1.20000000000000E+0000
32123: MUL
32124: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32125: LD_VAR 0 6
32129: PPUSH
32130: CALL_OW 257
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 7
32140: PUSH
32141: LD_INT 9
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: IN
32149: PUSH
32150: LD_VAR 0 1
32154: PPUSH
32155: LD_INT 52
32157: PPUSH
32158: CALL_OW 321
32162: PUSH
32163: LD_INT 2
32165: EQUAL
32166: AND
32167: IFFALSE 32184
// bpoints := bpoints * 1.5 ;
32169: LD_ADDR_VAR 0 10
32173: PUSH
32174: LD_VAR 0 10
32178: PUSH
32179: LD_REAL  1.50000000000000E+0000
32182: MUL
32183: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32184: LD_VAR 0 1
32188: PPUSH
32189: LD_INT 66
32191: PPUSH
32192: CALL_OW 321
32196: PUSH
32197: LD_INT 2
32199: EQUAL
32200: IFFALSE 32217
// bpoints := bpoints * 1.1 ;
32202: LD_ADDR_VAR 0 10
32206: PUSH
32207: LD_VAR 0 10
32211: PUSH
32212: LD_REAL  1.10000000000000E+0000
32215: MUL
32216: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32217: LD_ADDR_VAR 0 10
32221: PUSH
32222: LD_VAR 0 10
32226: PUSH
32227: LD_VAR 0 6
32231: PPUSH
32232: LD_INT 1
32234: PPUSH
32235: CALL_OW 259
32239: PUSH
32240: LD_REAL  1.15000000000000E+0000
32243: MUL
32244: MUL
32245: ST_TO_ADDR
// end ; unit_vehicle :
32246: GO 33074
32248: LD_INT 2
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 33062
32256: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32257: LD_VAR 0 6
32261: PPUSH
32262: CALL_OW 264
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 42
32272: PUSH
32273: LD_INT 24
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: IN
32281: IFFALSE 32302
// points := [ 25 , 5 , 3 ] ;
32283: LD_ADDR_VAR 0 9
32287: PUSH
32288: LD_INT 25
32290: PUSH
32291: LD_INT 5
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32302: LD_VAR 0 6
32306: PPUSH
32307: CALL_OW 264
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: LD_INT 43
32317: PUSH
32318: LD_INT 25
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: LIST
32325: IN
32326: IFFALSE 32347
// points := [ 40 , 15 , 5 ] ;
32328: LD_ADDR_VAR 0 9
32332: PUSH
32333: LD_INT 40
32335: PUSH
32336: LD_INT 15
32338: PUSH
32339: LD_INT 5
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32347: LD_VAR 0 6
32351: PPUSH
32352: CALL_OW 264
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: LD_INT 23
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: IN
32367: IFFALSE 32388
// points := [ 7 , 25 , 8 ] ;
32369: LD_ADDR_VAR 0 9
32373: PUSH
32374: LD_INT 7
32376: PUSH
32377: LD_INT 25
32379: PUSH
32380: LD_INT 8
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32388: LD_VAR 0 6
32392: PPUSH
32393: CALL_OW 264
32397: PUSH
32398: LD_INT 5
32400: PUSH
32401: LD_INT 27
32403: PUSH
32404: LD_INT 44
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: IN
32412: IFFALSE 32433
// points := [ 14 , 50 , 16 ] ;
32414: LD_ADDR_VAR 0 9
32418: PUSH
32419: LD_INT 14
32421: PUSH
32422: LD_INT 50
32424: PUSH
32425: LD_INT 16
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32433: LD_VAR 0 6
32437: PPUSH
32438: CALL_OW 264
32442: PUSH
32443: LD_INT 6
32445: PUSH
32446: LD_INT 46
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: IN
32453: IFFALSE 32474
// points := [ 32 , 120 , 70 ] ;
32455: LD_ADDR_VAR 0 9
32459: PUSH
32460: LD_INT 32
32462: PUSH
32463: LD_INT 120
32465: PUSH
32466: LD_INT 70
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: LIST
32473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32474: LD_VAR 0 6
32478: PPUSH
32479: CALL_OW 264
32483: PUSH
32484: LD_INT 7
32486: PUSH
32487: LD_INT 28
32489: PUSH
32490: LD_INT 45
32492: PUSH
32493: LD_INT 92
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: IN
32502: IFFALSE 32523
// points := [ 35 , 20 , 45 ] ;
32504: LD_ADDR_VAR 0 9
32508: PUSH
32509: LD_INT 35
32511: PUSH
32512: LD_INT 20
32514: PUSH
32515: LD_INT 45
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32523: LD_VAR 0 6
32527: PPUSH
32528: CALL_OW 264
32532: PUSH
32533: LD_INT 47
32535: PUSH
32536: EMPTY
32537: LIST
32538: IN
32539: IFFALSE 32560
// points := [ 67 , 45 , 75 ] ;
32541: LD_ADDR_VAR 0 9
32545: PUSH
32546: LD_INT 67
32548: PUSH
32549: LD_INT 45
32551: PUSH
32552: LD_INT 75
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32560: LD_VAR 0 6
32564: PPUSH
32565: CALL_OW 264
32569: PUSH
32570: LD_INT 26
32572: PUSH
32573: EMPTY
32574: LIST
32575: IN
32576: IFFALSE 32597
// points := [ 120 , 30 , 80 ] ;
32578: LD_ADDR_VAR 0 9
32582: PUSH
32583: LD_INT 120
32585: PUSH
32586: LD_INT 30
32588: PUSH
32589: LD_INT 80
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32597: LD_VAR 0 6
32601: PPUSH
32602: CALL_OW 264
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: EMPTY
32611: LIST
32612: IN
32613: IFFALSE 32634
// points := [ 40 , 1 , 1 ] ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: LD_INT 40
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: LIST
32633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32634: LD_VAR 0 6
32638: PPUSH
32639: CALL_OW 264
32643: PUSH
32644: LD_INT 29
32646: PUSH
32647: EMPTY
32648: LIST
32649: IN
32650: IFFALSE 32671
// points := [ 70 , 200 , 400 ] ;
32652: LD_ADDR_VAR 0 9
32656: PUSH
32657: LD_INT 70
32659: PUSH
32660: LD_INT 200
32662: PUSH
32663: LD_INT 400
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32671: LD_VAR 0 6
32675: PPUSH
32676: CALL_OW 264
32680: PUSH
32681: LD_INT 14
32683: PUSH
32684: LD_INT 53
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: IN
32691: IFFALSE 32712
// points := [ 40 , 10 , 20 ] ;
32693: LD_ADDR_VAR 0 9
32697: PUSH
32698: LD_INT 40
32700: PUSH
32701: LD_INT 10
32703: PUSH
32704: LD_INT 20
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32712: LD_VAR 0 6
32716: PPUSH
32717: CALL_OW 264
32721: PUSH
32722: LD_INT 9
32724: PUSH
32725: EMPTY
32726: LIST
32727: IN
32728: IFFALSE 32749
// points := [ 5 , 70 , 20 ] ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: LD_INT 70
32740: PUSH
32741: LD_INT 20
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32749: LD_VAR 0 6
32753: PPUSH
32754: CALL_OW 264
32758: PUSH
32759: LD_INT 10
32761: PUSH
32762: EMPTY
32763: LIST
32764: IN
32765: IFFALSE 32786
// points := [ 35 , 110 , 70 ] ;
32767: LD_ADDR_VAR 0 9
32771: PUSH
32772: LD_INT 35
32774: PUSH
32775: LD_INT 110
32777: PUSH
32778: LD_INT 70
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32786: LD_VAR 0 6
32790: PPUSH
32791: CALL_OW 265
32795: PUSH
32796: LD_INT 25
32798: EQUAL
32799: IFFALSE 32820
// points := [ 80 , 65 , 100 ] ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_INT 80
32808: PUSH
32809: LD_INT 65
32811: PUSH
32812: LD_INT 100
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 263
32829: PUSH
32830: LD_INT 1
32832: EQUAL
32833: IFFALSE 32868
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32835: LD_ADDR_VAR 0 10
32839: PUSH
32840: LD_VAR 0 10
32844: PUSH
32845: LD_VAR 0 6
32849: PPUSH
32850: CALL_OW 311
32854: PPUSH
32855: LD_INT 3
32857: PPUSH
32858: CALL_OW 259
32862: PUSH
32863: LD_INT 4
32865: MUL
32866: MUL
32867: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32868: LD_VAR 0 6
32872: PPUSH
32873: CALL_OW 263
32877: PUSH
32878: LD_INT 2
32880: EQUAL
32881: IFFALSE 32932
// begin j := IsControledBy ( i ) ;
32883: LD_ADDR_VAR 0 7
32887: PUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 312
32897: ST_TO_ADDR
// if j then
32898: LD_VAR 0 7
32902: IFFALSE 32932
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32904: LD_ADDR_VAR 0 10
32908: PUSH
32909: LD_VAR 0 10
32913: PUSH
32914: LD_VAR 0 7
32918: PPUSH
32919: LD_INT 3
32921: PPUSH
32922: CALL_OW 259
32926: PUSH
32927: LD_INT 3
32929: MUL
32930: MUL
32931: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32932: LD_VAR 0 6
32936: PPUSH
32937: CALL_OW 264
32941: PUSH
32942: LD_INT 5
32944: PUSH
32945: LD_INT 6
32947: PUSH
32948: LD_INT 46
32950: PUSH
32951: LD_INT 44
32953: PUSH
32954: LD_INT 47
32956: PUSH
32957: LD_INT 45
32959: PUSH
32960: LD_INT 28
32962: PUSH
32963: LD_INT 7
32965: PUSH
32966: LD_INT 27
32968: PUSH
32969: LD_INT 29
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: IN
32984: PUSH
32985: LD_VAR 0 1
32989: PPUSH
32990: LD_INT 52
32992: PPUSH
32993: CALL_OW 321
32997: PUSH
32998: LD_INT 2
33000: EQUAL
33001: AND
33002: IFFALSE 33019
// bpoints := bpoints * 1.2 ;
33004: LD_ADDR_VAR 0 10
33008: PUSH
33009: LD_VAR 0 10
33013: PUSH
33014: LD_REAL  1.20000000000000E+0000
33017: MUL
33018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33019: LD_VAR 0 6
33023: PPUSH
33024: CALL_OW 264
33028: PUSH
33029: LD_INT 6
33031: PUSH
33032: LD_INT 46
33034: PUSH
33035: LD_INT 47
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: IN
33043: IFFALSE 33060
// bpoints := bpoints * 1.2 ;
33045: LD_ADDR_VAR 0 10
33049: PUSH
33050: LD_VAR 0 10
33054: PUSH
33055: LD_REAL  1.20000000000000E+0000
33058: MUL
33059: ST_TO_ADDR
// end ; unit_building :
33060: GO 33074
33062: LD_INT 3
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33073
33070: POP
// ; end ;
33071: GO 33074
33073: POP
// for j = 1 to 3 do
33074: LD_ADDR_VAR 0 7
33078: PUSH
33079: DOUBLE
33080: LD_INT 1
33082: DEC
33083: ST_TO_ADDR
33084: LD_INT 3
33086: PUSH
33087: FOR_TO
33088: IFFALSE 33141
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33090: LD_ADDR_VAR 0 5
33094: PUSH
33095: LD_VAR 0 5
33099: PPUSH
33100: LD_VAR 0 7
33104: PPUSH
33105: LD_VAR 0 5
33109: PUSH
33110: LD_VAR 0 7
33114: ARRAY
33115: PUSH
33116: LD_VAR 0 9
33120: PUSH
33121: LD_VAR 0 7
33125: ARRAY
33126: PUSH
33127: LD_VAR 0 10
33131: MUL
33132: PLUS
33133: PPUSH
33134: CALL_OW 1
33138: ST_TO_ADDR
33139: GO 33087
33141: POP
33142: POP
// end ;
33143: GO 31622
33145: POP
33146: POP
// result := Replace ( result , 4 , tmp ) ;
33147: LD_ADDR_VAR 0 5
33151: PUSH
33152: LD_VAR 0 5
33156: PPUSH
33157: LD_INT 4
33159: PPUSH
33160: LD_VAR 0 8
33164: PPUSH
33165: CALL_OW 1
33169: ST_TO_ADDR
// end ;
33170: LD_VAR 0 5
33174: RET
// export function DangerAtRange ( unit , range ) ; begin
33175: LD_INT 0
33177: PPUSH
// if not unit then
33178: LD_VAR 0 1
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 33232
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_VAR 0 1
33196: PPUSH
33197: CALL_OW 255
33201: PPUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 250
33211: PPUSH
33212: LD_VAR 0 1
33216: PPUSH
33217: CALL_OW 251
33221: PPUSH
33222: LD_VAR 0 2
33226: PPUSH
33227: CALL 31474 0 4
33231: ST_TO_ADDR
// end ;
33232: LD_VAR 0 3
33236: RET
// export function DangerInArea ( side , area ) ; begin
33237: LD_INT 0
33239: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33240: LD_ADDR_VAR 0 3
33244: PUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: LD_INT 81
33252: PUSH
33253: LD_VAR 0 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PPUSH
33262: CALL_OW 70
33266: ST_TO_ADDR
// end ;
33267: LD_VAR 0 3
33271: RET
// export function IsExtension ( b ) ; begin
33272: LD_INT 0
33274: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33275: LD_ADDR_VAR 0 2
33279: PUSH
33280: LD_VAR 0 1
33284: PUSH
33285: LD_INT 23
33287: PUSH
33288: LD_INT 20
33290: PUSH
33291: LD_INT 22
33293: PUSH
33294: LD_INT 17
33296: PUSH
33297: LD_INT 24
33299: PUSH
33300: LD_INT 21
33302: PUSH
33303: LD_INT 19
33305: PUSH
33306: LD_INT 16
33308: PUSH
33309: LD_INT 25
33311: PUSH
33312: LD_INT 18
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: IN
33327: ST_TO_ADDR
// end ;
33328: LD_VAR 0 2
33332: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33333: LD_INT 0
33335: PPUSH
33336: PPUSH
33337: PPUSH
// result := [ ] ;
33338: LD_ADDR_VAR 0 4
33342: PUSH
33343: EMPTY
33344: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33345: LD_ADDR_VAR 0 5
33349: PUSH
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_INT 21
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PPUSH
33365: CALL_OW 70
33369: ST_TO_ADDR
// if not tmp then
33370: LD_VAR 0 5
33374: NOT
33375: IFFALSE 33379
// exit ;
33377: GO 33443
// if checkLink then
33379: LD_VAR 0 3
33383: IFFALSE 33433
// begin for i in tmp do
33385: LD_ADDR_VAR 0 6
33389: PUSH
33390: LD_VAR 0 5
33394: PUSH
33395: FOR_IN
33396: IFFALSE 33431
// if GetBase ( i ) <> base then
33398: LD_VAR 0 6
33402: PPUSH
33403: CALL_OW 274
33407: PUSH
33408: LD_VAR 0 1
33412: NONEQUAL
33413: IFFALSE 33429
// ComLinkToBase ( base , i ) ;
33415: LD_VAR 0 1
33419: PPUSH
33420: LD_VAR 0 6
33424: PPUSH
33425: CALL_OW 169
33429: GO 33395
33431: POP
33432: POP
// end ; result := tmp ;
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: LD_VAR 0 5
33442: ST_TO_ADDR
// end ;
33443: LD_VAR 0 4
33447: RET
// export function ComComplete ( units , b ) ; var i ; begin
33448: LD_INT 0
33450: PPUSH
33451: PPUSH
// if not units then
33452: LD_VAR 0 1
33456: NOT
33457: IFFALSE 33461
// exit ;
33459: GO 33551
// for i in units do
33461: LD_ADDR_VAR 0 4
33465: PUSH
33466: LD_VAR 0 1
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33549
// if BuildingStatus ( b ) = bs_build then
33474: LD_VAR 0 2
33478: PPUSH
33479: CALL_OW 461
33483: PUSH
33484: LD_INT 1
33486: EQUAL
33487: IFFALSE 33547
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33489: LD_VAR 0 4
33493: PPUSH
33494: LD_STRING h
33496: PUSH
33497: LD_VAR 0 2
33501: PPUSH
33502: CALL_OW 250
33506: PUSH
33507: LD_VAR 0 2
33511: PPUSH
33512: CALL_OW 251
33516: PUSH
33517: LD_VAR 0 2
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: PUSH
33540: EMPTY
33541: LIST
33542: PPUSH
33543: CALL_OW 446
33547: GO 33471
33549: POP
33550: POP
// end ;
33551: LD_VAR 0 3
33555: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33556: LD_INT 0
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33564: LD_VAR 0 1
33568: NOT
33569: PUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 263
33579: PUSH
33580: LD_INT 2
33582: NONEQUAL
33583: OR
33584: IFFALSE 33588
// exit ;
33586: GO 33904
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33588: LD_ADDR_VAR 0 6
33592: PUSH
33593: LD_INT 22
33595: PUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 255
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 30
33615: PUSH
33616: LD_INT 36
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 34
33625: PUSH
33626: LD_INT 31
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PPUSH
33642: CALL_OW 69
33646: ST_TO_ADDR
// if not tmp then
33647: LD_VAR 0 6
33651: NOT
33652: IFFALSE 33656
// exit ;
33654: GO 33904
// result := [ ] ;
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: EMPTY
33662: ST_TO_ADDR
// for i in tmp do
33663: LD_ADDR_VAR 0 3
33667: PUSH
33668: LD_VAR 0 6
33672: PUSH
33673: FOR_IN
33674: IFFALSE 33745
// begin t := UnitsInside ( i ) ;
33676: LD_ADDR_VAR 0 4
33680: PUSH
33681: LD_VAR 0 3
33685: PPUSH
33686: CALL_OW 313
33690: ST_TO_ADDR
// if t then
33691: LD_VAR 0 4
33695: IFFALSE 33743
// for j in t do
33697: LD_ADDR_VAR 0 7
33701: PUSH
33702: LD_VAR 0 4
33706: PUSH
33707: FOR_IN
33708: IFFALSE 33741
// result := Replace ( result , result + 1 , j ) ;
33710: LD_ADDR_VAR 0 2
33714: PUSH
33715: LD_VAR 0 2
33719: PPUSH
33720: LD_VAR 0 2
33724: PUSH
33725: LD_INT 1
33727: PLUS
33728: PPUSH
33729: LD_VAR 0 7
33733: PPUSH
33734: CALL_OW 1
33738: ST_TO_ADDR
33739: GO 33707
33741: POP
33742: POP
// end ;
33743: GO 33673
33745: POP
33746: POP
// if not result then
33747: LD_VAR 0 2
33751: NOT
33752: IFFALSE 33756
// exit ;
33754: GO 33904
// mech := result [ 1 ] ;
33756: LD_ADDR_VAR 0 5
33760: PUSH
33761: LD_VAR 0 2
33765: PUSH
33766: LD_INT 1
33768: ARRAY
33769: ST_TO_ADDR
// if result > 1 then
33770: LD_VAR 0 2
33774: PUSH
33775: LD_INT 1
33777: GREATER
33778: IFFALSE 33890
// begin for i = 2 to result do
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: DOUBLE
33786: LD_INT 2
33788: DEC
33789: ST_TO_ADDR
33790: LD_VAR 0 2
33794: PUSH
33795: FOR_TO
33796: IFFALSE 33888
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33798: LD_ADDR_VAR 0 4
33802: PUSH
33803: LD_VAR 0 2
33807: PUSH
33808: LD_VAR 0 3
33812: ARRAY
33813: PPUSH
33814: LD_INT 3
33816: PPUSH
33817: CALL_OW 259
33821: PUSH
33822: LD_VAR 0 2
33826: PUSH
33827: LD_VAR 0 3
33831: ARRAY
33832: PPUSH
33833: CALL_OW 432
33837: MINUS
33838: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33839: LD_VAR 0 4
33843: PUSH
33844: LD_VAR 0 5
33848: PPUSH
33849: LD_INT 3
33851: PPUSH
33852: CALL_OW 259
33856: PUSH
33857: LD_VAR 0 5
33861: PPUSH
33862: CALL_OW 432
33866: MINUS
33867: GREATEREQUAL
33868: IFFALSE 33886
// mech := result [ i ] ;
33870: LD_ADDR_VAR 0 5
33874: PUSH
33875: LD_VAR 0 2
33879: PUSH
33880: LD_VAR 0 3
33884: ARRAY
33885: ST_TO_ADDR
// end ;
33886: GO 33795
33888: POP
33889: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: LD_VAR 0 5
33899: PPUSH
33900: CALL_OW 135
// end ;
33904: LD_VAR 0 2
33908: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33909: LD_INT 0
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
// result := [ ] ;
33924: LD_ADDR_VAR 0 7
33928: PUSH
33929: EMPTY
33930: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 266
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: IN
33951: NOT
33952: IFFALSE 33956
// exit ;
33954: GO 35590
// if name then
33956: LD_VAR 0 3
33960: IFFALSE 33976
// SetBName ( base_dep , name ) ;
33962: LD_VAR 0 1
33966: PPUSH
33967: LD_VAR 0 3
33971: PPUSH
33972: CALL_OW 500
// base := GetBase ( base_dep ) ;
33976: LD_ADDR_VAR 0 15
33980: PUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 274
33990: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33991: LD_ADDR_VAR 0 16
33995: PUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL_OW 255
34005: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34006: LD_ADDR_VAR 0 17
34010: PUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 248
34020: ST_TO_ADDR
// if sources then
34021: LD_VAR 0 5
34025: IFFALSE 34072
// for i = 1 to 3 do
34027: LD_ADDR_VAR 0 8
34031: PUSH
34032: DOUBLE
34033: LD_INT 1
34035: DEC
34036: ST_TO_ADDR
34037: LD_INT 3
34039: PUSH
34040: FOR_TO
34041: IFFALSE 34070
// AddResourceType ( base , i , sources [ i ] ) ;
34043: LD_VAR 0 15
34047: PPUSH
34048: LD_VAR 0 8
34052: PPUSH
34053: LD_VAR 0 5
34057: PUSH
34058: LD_VAR 0 8
34062: ARRAY
34063: PPUSH
34064: CALL_OW 276
34068: GO 34040
34070: POP
34071: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34072: LD_ADDR_VAR 0 18
34076: PUSH
34077: LD_VAR 0 15
34081: PPUSH
34082: LD_VAR 0 2
34086: PPUSH
34087: LD_INT 1
34089: PPUSH
34090: CALL 33333 0 3
34094: ST_TO_ADDR
// InitHc ;
34095: CALL_OW 19
// InitUc ;
34099: CALL_OW 18
// uc_side := side ;
34103: LD_ADDR_OWVAR 20
34107: PUSH
34108: LD_VAR 0 16
34112: ST_TO_ADDR
// uc_nation := nation ;
34113: LD_ADDR_OWVAR 21
34117: PUSH
34118: LD_VAR 0 17
34122: ST_TO_ADDR
// if buildings then
34123: LD_VAR 0 18
34127: IFFALSE 35449
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34129: LD_ADDR_VAR 0 19
34133: PUSH
34134: LD_VAR 0 18
34138: PPUSH
34139: LD_INT 2
34141: PUSH
34142: LD_INT 30
34144: PUSH
34145: LD_INT 29
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 30
34154: PUSH
34155: LD_INT 30
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: LIST
34166: PPUSH
34167: CALL_OW 72
34171: ST_TO_ADDR
// if tmp then
34172: LD_VAR 0 19
34176: IFFALSE 34224
// for i in tmp do
34178: LD_ADDR_VAR 0 8
34182: PUSH
34183: LD_VAR 0 19
34187: PUSH
34188: FOR_IN
34189: IFFALSE 34222
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34191: LD_VAR 0 8
34195: PPUSH
34196: CALL_OW 250
34200: PPUSH
34201: LD_VAR 0 8
34205: PPUSH
34206: CALL_OW 251
34210: PPUSH
34211: LD_VAR 0 16
34215: PPUSH
34216: CALL_OW 441
34220: GO 34188
34222: POP
34223: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34224: LD_VAR 0 18
34228: PPUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 30
34234: PUSH
34235: LD_INT 32
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 30
34244: PUSH
34245: LD_INT 33
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: PPUSH
34257: CALL_OW 72
34261: IFFALSE 34349
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34263: LD_ADDR_VAR 0 8
34267: PUSH
34268: LD_VAR 0 18
34272: PPUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 30
34278: PUSH
34279: LD_INT 32
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 30
34288: PUSH
34289: LD_INT 33
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: PPUSH
34301: CALL_OW 72
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34347
// begin if not GetBWeapon ( i ) then
34309: LD_VAR 0 8
34313: PPUSH
34314: CALL_OW 269
34318: NOT
34319: IFFALSE 34345
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34321: LD_VAR 0 8
34325: PPUSH
34326: LD_VAR 0 8
34330: PPUSH
34331: LD_VAR 0 2
34335: PPUSH
34336: CALL 35595 0 2
34340: PPUSH
34341: CALL_OW 431
// end ;
34345: GO 34306
34347: POP
34348: POP
// end ; for i = 1 to personel do
34349: LD_ADDR_VAR 0 8
34353: PUSH
34354: DOUBLE
34355: LD_INT 1
34357: DEC
34358: ST_TO_ADDR
34359: LD_VAR 0 6
34363: PUSH
34364: FOR_TO
34365: IFFALSE 35429
// begin if i > 4 then
34367: LD_VAR 0 8
34371: PUSH
34372: LD_INT 4
34374: GREATER
34375: IFFALSE 34379
// break ;
34377: GO 35429
// case i of 1 :
34379: LD_VAR 0 8
34383: PUSH
34384: LD_INT 1
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34472
34392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34393: LD_ADDR_VAR 0 12
34397: PUSH
34398: LD_VAR 0 18
34402: PPUSH
34403: LD_INT 22
34405: PUSH
34406: LD_VAR 0 16
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 58
34417: PUSH
34418: EMPTY
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 30
34426: PUSH
34427: LD_INT 32
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 30
34436: PUSH
34437: LD_INT 4
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 30
34446: PUSH
34447: LD_INT 5
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: PPUSH
34465: CALL_OW 72
34469: ST_TO_ADDR
34470: GO 34694
34472: LD_INT 2
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34542
34480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34481: LD_ADDR_VAR 0 12
34485: PUSH
34486: LD_VAR 0 18
34490: PPUSH
34491: LD_INT 22
34493: PUSH
34494: LD_VAR 0 16
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 30
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 30
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PPUSH
34535: CALL_OW 72
34539: ST_TO_ADDR
34540: GO 34694
34542: LD_INT 3
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34550
34548: GO 34612
34550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34551: LD_ADDR_VAR 0 12
34555: PUSH
34556: LD_VAR 0 18
34560: PPUSH
34561: LD_INT 22
34563: PUSH
34564: LD_VAR 0 16
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 30
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 30
34588: PUSH
34589: LD_INT 3
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PPUSH
34605: CALL_OW 72
34609: ST_TO_ADDR
34610: GO 34694
34612: LD_INT 4
34614: DOUBLE
34615: EQUAL
34616: IFTRUE 34620
34618: GO 34693
34620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34621: LD_ADDR_VAR 0 12
34625: PUSH
34626: LD_VAR 0 18
34630: PPUSH
34631: LD_INT 22
34633: PUSH
34634: LD_VAR 0 16
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 30
34648: PUSH
34649: LD_INT 6
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 30
34658: PUSH
34659: LD_INT 7
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: LD_INT 8
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 72
34690: ST_TO_ADDR
34691: GO 34694
34693: POP
// if i = 1 then
34694: LD_VAR 0 8
34698: PUSH
34699: LD_INT 1
34701: EQUAL
34702: IFFALSE 34813
// begin tmp := [ ] ;
34704: LD_ADDR_VAR 0 19
34708: PUSH
34709: EMPTY
34710: ST_TO_ADDR
// for j in f do
34711: LD_ADDR_VAR 0 9
34715: PUSH
34716: LD_VAR 0 12
34720: PUSH
34721: FOR_IN
34722: IFFALSE 34795
// if GetBType ( j ) = b_bunker then
34724: LD_VAR 0 9
34728: PPUSH
34729: CALL_OW 266
34733: PUSH
34734: LD_INT 32
34736: EQUAL
34737: IFFALSE 34764
// tmp := Insert ( tmp , 1 , j ) else
34739: LD_ADDR_VAR 0 19
34743: PUSH
34744: LD_VAR 0 19
34748: PPUSH
34749: LD_INT 1
34751: PPUSH
34752: LD_VAR 0 9
34756: PPUSH
34757: CALL_OW 2
34761: ST_TO_ADDR
34762: GO 34793
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34764: LD_ADDR_VAR 0 19
34768: PUSH
34769: LD_VAR 0 19
34773: PPUSH
34774: LD_VAR 0 19
34778: PUSH
34779: LD_INT 1
34781: PLUS
34782: PPUSH
34783: LD_VAR 0 9
34787: PPUSH
34788: CALL_OW 2
34792: ST_TO_ADDR
34793: GO 34721
34795: POP
34796: POP
// if tmp then
34797: LD_VAR 0 19
34801: IFFALSE 34813
// f := tmp ;
34803: LD_ADDR_VAR 0 12
34807: PUSH
34808: LD_VAR 0 19
34812: ST_TO_ADDR
// end ; x := personel [ i ] ;
34813: LD_ADDR_VAR 0 13
34817: PUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 8
34827: ARRAY
34828: ST_TO_ADDR
// if x = - 1 then
34829: LD_VAR 0 13
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: EQUAL
34838: IFFALSE 35047
// begin for j in f do
34840: LD_ADDR_VAR 0 9
34844: PUSH
34845: LD_VAR 0 12
34849: PUSH
34850: FOR_IN
34851: IFFALSE 35043
// repeat InitHc ;
34853: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34857: LD_VAR 0 9
34861: PPUSH
34862: CALL_OW 266
34866: PUSH
34867: LD_INT 5
34869: EQUAL
34870: IFFALSE 34940
// begin if UnitsInside ( j ) < 3 then
34872: LD_VAR 0 9
34876: PPUSH
34877: CALL_OW 313
34881: PUSH
34882: LD_INT 3
34884: LESS
34885: IFFALSE 34921
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34887: LD_INT 0
34889: PPUSH
34890: LD_INT 5
34892: PUSH
34893: LD_INT 8
34895: PUSH
34896: LD_INT 9
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: PUSH
34904: LD_VAR 0 17
34908: ARRAY
34909: PPUSH
34910: LD_VAR 0 4
34914: PPUSH
34915: CALL_OW 380
34919: GO 34938
// PrepareHuman ( false , i , skill ) ;
34921: LD_INT 0
34923: PPUSH
34924: LD_VAR 0 8
34928: PPUSH
34929: LD_VAR 0 4
34933: PPUSH
34934: CALL_OW 380
// end else
34938: GO 34957
// PrepareHuman ( false , i , skill ) ;
34940: LD_INT 0
34942: PPUSH
34943: LD_VAR 0 8
34947: PPUSH
34948: LD_VAR 0 4
34952: PPUSH
34953: CALL_OW 380
// un := CreateHuman ;
34957: LD_ADDR_VAR 0 14
34961: PUSH
34962: CALL_OW 44
34966: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34967: LD_ADDR_VAR 0 7
34971: PUSH
34972: LD_VAR 0 7
34976: PPUSH
34977: LD_INT 1
34979: PPUSH
34980: LD_VAR 0 14
34984: PPUSH
34985: CALL_OW 2
34989: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34990: LD_VAR 0 14
34994: PPUSH
34995: LD_VAR 0 9
34999: PPUSH
35000: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35004: LD_VAR 0 9
35008: PPUSH
35009: CALL_OW 313
35013: PUSH
35014: LD_INT 6
35016: EQUAL
35017: PUSH
35018: LD_VAR 0 9
35022: PPUSH
35023: CALL_OW 266
35027: PUSH
35028: LD_INT 32
35030: PUSH
35031: LD_INT 31
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: IN
35038: OR
35039: IFFALSE 34853
35041: GO 34850
35043: POP
35044: POP
// end else
35045: GO 35427
// for j = 1 to x do
35047: LD_ADDR_VAR 0 9
35051: PUSH
35052: DOUBLE
35053: LD_INT 1
35055: DEC
35056: ST_TO_ADDR
35057: LD_VAR 0 13
35061: PUSH
35062: FOR_TO
35063: IFFALSE 35425
// begin InitHc ;
35065: CALL_OW 19
// if not f then
35069: LD_VAR 0 12
35073: NOT
35074: IFFALSE 35163
// begin PrepareHuman ( false , i , skill ) ;
35076: LD_INT 0
35078: PPUSH
35079: LD_VAR 0 8
35083: PPUSH
35084: LD_VAR 0 4
35088: PPUSH
35089: CALL_OW 380
// un := CreateHuman ;
35093: LD_ADDR_VAR 0 14
35097: PUSH
35098: CALL_OW 44
35102: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35103: LD_ADDR_VAR 0 7
35107: PUSH
35108: LD_VAR 0 7
35112: PPUSH
35113: LD_INT 1
35115: PPUSH
35116: LD_VAR 0 14
35120: PPUSH
35121: CALL_OW 2
35125: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35126: LD_VAR 0 14
35130: PPUSH
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 250
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 251
35150: PPUSH
35151: LD_INT 10
35153: PPUSH
35154: LD_INT 0
35156: PPUSH
35157: CALL_OW 50
// continue ;
35161: GO 35062
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35163: LD_VAR 0 12
35167: PUSH
35168: LD_INT 1
35170: ARRAY
35171: PPUSH
35172: CALL_OW 313
35176: PUSH
35177: LD_VAR 0 12
35181: PUSH
35182: LD_INT 1
35184: ARRAY
35185: PPUSH
35186: CALL_OW 266
35190: PUSH
35191: LD_INT 32
35193: PUSH
35194: LD_INT 31
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: IN
35201: AND
35202: PUSH
35203: LD_VAR 0 12
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: CALL_OW 313
35216: PUSH
35217: LD_INT 6
35219: EQUAL
35220: OR
35221: IFFALSE 35241
// f := Delete ( f , 1 ) ;
35223: LD_ADDR_VAR 0 12
35227: PUSH
35228: LD_VAR 0 12
35232: PPUSH
35233: LD_INT 1
35235: PPUSH
35236: CALL_OW 3
35240: ST_TO_ADDR
// if not f then
35241: LD_VAR 0 12
35245: NOT
35246: IFFALSE 35264
// begin x := x + 2 ;
35248: LD_ADDR_VAR 0 13
35252: PUSH
35253: LD_VAR 0 13
35257: PUSH
35258: LD_INT 2
35260: PLUS
35261: ST_TO_ADDR
// continue ;
35262: GO 35062
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35264: LD_VAR 0 12
35268: PUSH
35269: LD_INT 1
35271: ARRAY
35272: PPUSH
35273: CALL_OW 266
35277: PUSH
35278: LD_INT 5
35280: EQUAL
35281: IFFALSE 35355
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35283: LD_VAR 0 12
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: CALL_OW 313
35296: PUSH
35297: LD_INT 3
35299: LESS
35300: IFFALSE 35336
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35302: LD_INT 0
35304: PPUSH
35305: LD_INT 5
35307: PUSH
35308: LD_INT 8
35310: PUSH
35311: LD_INT 9
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: PUSH
35319: LD_VAR 0 17
35323: ARRAY
35324: PPUSH
35325: LD_VAR 0 4
35329: PPUSH
35330: CALL_OW 380
35334: GO 35353
// PrepareHuman ( false , i , skill ) ;
35336: LD_INT 0
35338: PPUSH
35339: LD_VAR 0 8
35343: PPUSH
35344: LD_VAR 0 4
35348: PPUSH
35349: CALL_OW 380
// end else
35353: GO 35372
// PrepareHuman ( false , i , skill ) ;
35355: LD_INT 0
35357: PPUSH
35358: LD_VAR 0 8
35362: PPUSH
35363: LD_VAR 0 4
35367: PPUSH
35368: CALL_OW 380
// un := CreateHuman ;
35372: LD_ADDR_VAR 0 14
35376: PUSH
35377: CALL_OW 44
35381: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35382: LD_ADDR_VAR 0 7
35386: PUSH
35387: LD_VAR 0 7
35391: PPUSH
35392: LD_INT 1
35394: PPUSH
35395: LD_VAR 0 14
35399: PPUSH
35400: CALL_OW 2
35404: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35405: LD_VAR 0 14
35409: PPUSH
35410: LD_VAR 0 12
35414: PUSH
35415: LD_INT 1
35417: ARRAY
35418: PPUSH
35419: CALL_OW 52
// end ;
35423: GO 35062
35425: POP
35426: POP
// end ;
35427: GO 34364
35429: POP
35430: POP
// result := result ^ buildings ;
35431: LD_ADDR_VAR 0 7
35435: PUSH
35436: LD_VAR 0 7
35440: PUSH
35441: LD_VAR 0 18
35445: ADD
35446: ST_TO_ADDR
// end else
35447: GO 35590
// begin for i = 1 to personel do
35449: LD_ADDR_VAR 0 8
35453: PUSH
35454: DOUBLE
35455: LD_INT 1
35457: DEC
35458: ST_TO_ADDR
35459: LD_VAR 0 6
35463: PUSH
35464: FOR_TO
35465: IFFALSE 35588
// begin if i > 4 then
35467: LD_VAR 0 8
35471: PUSH
35472: LD_INT 4
35474: GREATER
35475: IFFALSE 35479
// break ;
35477: GO 35588
// x := personel [ i ] ;
35479: LD_ADDR_VAR 0 13
35483: PUSH
35484: LD_VAR 0 6
35488: PUSH
35489: LD_VAR 0 8
35493: ARRAY
35494: ST_TO_ADDR
// if x = - 1 then
35495: LD_VAR 0 13
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: EQUAL
35504: IFFALSE 35508
// continue ;
35506: GO 35464
// PrepareHuman ( false , i , skill ) ;
35508: LD_INT 0
35510: PPUSH
35511: LD_VAR 0 8
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: CALL_OW 380
// un := CreateHuman ;
35525: LD_ADDR_VAR 0 14
35529: PUSH
35530: CALL_OW 44
35534: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35535: LD_VAR 0 14
35539: PPUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 250
35549: PPUSH
35550: LD_VAR 0 1
35554: PPUSH
35555: CALL_OW 251
35559: PPUSH
35560: LD_INT 10
35562: PPUSH
35563: LD_INT 0
35565: PPUSH
35566: CALL_OW 50
// result := result ^ un ;
35570: LD_ADDR_VAR 0 7
35574: PUSH
35575: LD_VAR 0 7
35579: PUSH
35580: LD_VAR 0 14
35584: ADD
35585: ST_TO_ADDR
// end ;
35586: GO 35464
35588: POP
35589: POP
// end ; end ;
35590: LD_VAR 0 7
35594: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35595: LD_INT 0
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
// result := false ;
35613: LD_ADDR_VAR 0 3
35617: PUSH
35618: LD_INT 0
35620: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35621: LD_VAR 0 1
35625: NOT
35626: PUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 266
35636: PUSH
35637: LD_INT 32
35639: PUSH
35640: LD_INT 33
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: IN
35647: NOT
35648: OR
35649: IFFALSE 35653
// exit ;
35651: GO 36762
// nat := GetNation ( tower ) ;
35653: LD_ADDR_VAR 0 12
35657: PUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 248
35667: ST_TO_ADDR
// side := GetSide ( tower ) ;
35668: LD_ADDR_VAR 0 16
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 255
35682: ST_TO_ADDR
// x := GetX ( tower ) ;
35683: LD_ADDR_VAR 0 10
35687: PUSH
35688: LD_VAR 0 1
35692: PPUSH
35693: CALL_OW 250
35697: ST_TO_ADDR
// y := GetY ( tower ) ;
35698: LD_ADDR_VAR 0 11
35702: PUSH
35703: LD_VAR 0 1
35707: PPUSH
35708: CALL_OW 251
35712: ST_TO_ADDR
// if not x or not y then
35713: LD_VAR 0 10
35717: NOT
35718: PUSH
35719: LD_VAR 0 11
35723: NOT
35724: OR
35725: IFFALSE 35729
// exit ;
35727: GO 36762
// weapon := 0 ;
35729: LD_ADDR_VAR 0 18
35733: PUSH
35734: LD_INT 0
35736: ST_TO_ADDR
// fac_list := [ ] ;
35737: LD_ADDR_VAR 0 17
35741: PUSH
35742: EMPTY
35743: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35744: LD_ADDR_VAR 0 6
35748: PUSH
35749: LD_VAR 0 1
35753: PPUSH
35754: CALL_OW 274
35758: PPUSH
35759: LD_VAR 0 2
35763: PPUSH
35764: LD_INT 0
35766: PPUSH
35767: CALL 33333 0 3
35771: PPUSH
35772: LD_INT 30
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PPUSH
35782: CALL_OW 72
35786: ST_TO_ADDR
// if not factories then
35787: LD_VAR 0 6
35791: NOT
35792: IFFALSE 35796
// exit ;
35794: GO 36762
// for i in factories do
35796: LD_ADDR_VAR 0 8
35800: PUSH
35801: LD_VAR 0 6
35805: PUSH
35806: FOR_IN
35807: IFFALSE 35832
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35809: LD_ADDR_VAR 0 17
35813: PUSH
35814: LD_VAR 0 17
35818: PUSH
35819: LD_VAR 0 8
35823: PPUSH
35824: CALL_OW 478
35828: UNION
35829: ST_TO_ADDR
35830: GO 35806
35832: POP
35833: POP
// if not fac_list then
35834: LD_VAR 0 17
35838: NOT
35839: IFFALSE 35843
// exit ;
35841: GO 36762
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35843: LD_ADDR_VAR 0 5
35847: PUSH
35848: LD_INT 4
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: LD_INT 9
35856: PUSH
35857: LD_INT 10
35859: PUSH
35860: LD_INT 6
35862: PUSH
35863: LD_INT 7
35865: PUSH
35866: LD_INT 11
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 27
35880: PUSH
35881: LD_INT 28
35883: PUSH
35884: LD_INT 26
35886: PUSH
35887: LD_INT 30
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 43
35898: PUSH
35899: LD_INT 44
35901: PUSH
35902: LD_INT 46
35904: PUSH
35905: LD_INT 45
35907: PUSH
35908: LD_INT 47
35910: PUSH
35911: LD_INT 49
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: PUSH
35927: LD_VAR 0 12
35931: ARRAY
35932: ST_TO_ADDR
// list := list isect fac_list ;
35933: LD_ADDR_VAR 0 5
35937: PUSH
35938: LD_VAR 0 5
35942: PUSH
35943: LD_VAR 0 17
35947: ISECT
35948: ST_TO_ADDR
// if not list then
35949: LD_VAR 0 5
35953: NOT
35954: IFFALSE 35958
// exit ;
35956: GO 36762
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35958: LD_VAR 0 12
35962: PUSH
35963: LD_INT 3
35965: EQUAL
35966: PUSH
35967: LD_INT 49
35969: PUSH
35970: LD_VAR 0 5
35974: IN
35975: AND
35976: PUSH
35977: LD_INT 31
35979: PPUSH
35980: LD_VAR 0 16
35984: PPUSH
35985: CALL_OW 321
35989: PUSH
35990: LD_INT 2
35992: EQUAL
35993: AND
35994: IFFALSE 36054
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35996: LD_INT 22
35998: PUSH
35999: LD_VAR 0 16
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 35
36010: PUSH
36011: LD_INT 49
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 91
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 10
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: PPUSH
36039: CALL_OW 69
36043: NOT
36044: IFFALSE 36054
// weapon := ru_time_lapser ;
36046: LD_ADDR_VAR 0 18
36050: PUSH
36051: LD_INT 49
36053: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36054: LD_VAR 0 12
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: IN
36069: PUSH
36070: LD_INT 11
36072: PUSH
36073: LD_VAR 0 5
36077: IN
36078: PUSH
36079: LD_INT 30
36081: PUSH
36082: LD_VAR 0 5
36086: IN
36087: OR
36088: AND
36089: PUSH
36090: LD_INT 6
36092: PPUSH
36093: LD_VAR 0 16
36097: PPUSH
36098: CALL_OW 321
36102: PUSH
36103: LD_INT 2
36105: EQUAL
36106: AND
36107: IFFALSE 36272
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36109: LD_INT 22
36111: PUSH
36112: LD_VAR 0 16
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 35
36126: PUSH
36127: LD_INT 11
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 35
36136: PUSH
36137: LD_INT 30
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 91
36151: PUSH
36152: LD_VAR 0 1
36156: PUSH
36157: LD_INT 18
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: PPUSH
36170: CALL_OW 69
36174: NOT
36175: PUSH
36176: LD_INT 22
36178: PUSH
36179: LD_VAR 0 16
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 30
36193: PUSH
36194: LD_INT 32
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 30
36203: PUSH
36204: LD_INT 33
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 91
36218: PUSH
36219: LD_VAR 0 1
36223: PUSH
36224: LD_INT 12
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: PPUSH
36240: CALL_OW 69
36244: PUSH
36245: LD_INT 2
36247: GREATER
36248: AND
36249: IFFALSE 36272
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36251: LD_ADDR_VAR 0 18
36255: PUSH
36256: LD_INT 11
36258: PUSH
36259: LD_INT 30
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_VAR 0 12
36270: ARRAY
36271: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36272: LD_VAR 0 18
36276: NOT
36277: PUSH
36278: LD_INT 40
36280: PPUSH
36281: LD_VAR 0 16
36285: PPUSH
36286: CALL_OW 321
36290: PUSH
36291: LD_INT 2
36293: EQUAL
36294: AND
36295: PUSH
36296: LD_INT 7
36298: PUSH
36299: LD_VAR 0 5
36303: IN
36304: PUSH
36305: LD_INT 28
36307: PUSH
36308: LD_VAR 0 5
36312: IN
36313: OR
36314: PUSH
36315: LD_INT 45
36317: PUSH
36318: LD_VAR 0 5
36322: IN
36323: OR
36324: AND
36325: IFFALSE 36579
// begin hex := GetHexInfo ( x , y ) ;
36327: LD_ADDR_VAR 0 4
36331: PUSH
36332: LD_VAR 0 10
36336: PPUSH
36337: LD_VAR 0 11
36341: PPUSH
36342: CALL_OW 546
36346: ST_TO_ADDR
// if hex [ 1 ] then
36347: LD_VAR 0 4
36351: PUSH
36352: LD_INT 1
36354: ARRAY
36355: IFFALSE 36359
// exit ;
36357: GO 36762
// height := hex [ 2 ] ;
36359: LD_ADDR_VAR 0 15
36363: PUSH
36364: LD_VAR 0 4
36368: PUSH
36369: LD_INT 2
36371: ARRAY
36372: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36373: LD_ADDR_VAR 0 14
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 3
36386: PUSH
36387: LD_INT 5
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// for i in tmp do
36396: LD_ADDR_VAR 0 8
36400: PUSH
36401: LD_VAR 0 14
36405: PUSH
36406: FOR_IN
36407: IFFALSE 36577
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_VAR 0 10
36418: PPUSH
36419: LD_VAR 0 8
36423: PPUSH
36424: LD_INT 5
36426: PPUSH
36427: CALL_OW 272
36431: PUSH
36432: LD_VAR 0 11
36436: PPUSH
36437: LD_VAR 0 8
36441: PPUSH
36442: LD_INT 5
36444: PPUSH
36445: CALL_OW 273
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36454: LD_VAR 0 9
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: PPUSH
36463: LD_VAR 0 9
36467: PUSH
36468: LD_INT 2
36470: ARRAY
36471: PPUSH
36472: CALL_OW 488
36476: IFFALSE 36575
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36478: LD_ADDR_VAR 0 4
36482: PUSH
36483: LD_VAR 0 9
36487: PUSH
36488: LD_INT 1
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 9
36496: PUSH
36497: LD_INT 2
36499: ARRAY
36500: PPUSH
36501: CALL_OW 546
36505: ST_TO_ADDR
// if hex [ 1 ] then
36506: LD_VAR 0 4
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: IFFALSE 36518
// continue ;
36516: GO 36406
// h := hex [ 2 ] ;
36518: LD_ADDR_VAR 0 13
36522: PUSH
36523: LD_VAR 0 4
36527: PUSH
36528: LD_INT 2
36530: ARRAY
36531: ST_TO_ADDR
// if h + 7 < height then
36532: LD_VAR 0 13
36536: PUSH
36537: LD_INT 7
36539: PLUS
36540: PUSH
36541: LD_VAR 0 15
36545: LESS
36546: IFFALSE 36575
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36548: LD_ADDR_VAR 0 18
36552: PUSH
36553: LD_INT 7
36555: PUSH
36556: LD_INT 28
36558: PUSH
36559: LD_INT 45
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: PUSH
36567: LD_VAR 0 12
36571: ARRAY
36572: ST_TO_ADDR
// break ;
36573: GO 36577
// end ; end ; end ;
36575: GO 36406
36577: POP
36578: POP
// end ; if not weapon then
36579: LD_VAR 0 18
36583: NOT
36584: IFFALSE 36644
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36586: LD_ADDR_VAR 0 5
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 11
36598: PUSH
36599: LD_INT 30
36601: PUSH
36602: LD_INT 49
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: DIFF
36610: ST_TO_ADDR
// if not list then
36611: LD_VAR 0 5
36615: NOT
36616: IFFALSE 36620
// exit ;
36618: GO 36762
// weapon := list [ rand ( 1 , list ) ] ;
36620: LD_ADDR_VAR 0 18
36624: PUSH
36625: LD_VAR 0 5
36629: PUSH
36630: LD_INT 1
36632: PPUSH
36633: LD_VAR 0 5
36637: PPUSH
36638: CALL_OW 12
36642: ARRAY
36643: ST_TO_ADDR
// end ; if weapon then
36644: LD_VAR 0 18
36648: IFFALSE 36762
// begin tmp := CostOfWeapon ( weapon ) ;
36650: LD_ADDR_VAR 0 14
36654: PUSH
36655: LD_VAR 0 18
36659: PPUSH
36660: CALL_OW 451
36664: ST_TO_ADDR
// j := GetBase ( tower ) ;
36665: LD_ADDR_VAR 0 9
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: CALL_OW 274
36679: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36680: LD_VAR 0 9
36684: PPUSH
36685: LD_INT 1
36687: PPUSH
36688: CALL_OW 275
36692: PUSH
36693: LD_VAR 0 14
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: GREATEREQUAL
36702: PUSH
36703: LD_VAR 0 9
36707: PPUSH
36708: LD_INT 2
36710: PPUSH
36711: CALL_OW 275
36715: PUSH
36716: LD_VAR 0 14
36720: PUSH
36721: LD_INT 2
36723: ARRAY
36724: GREATEREQUAL
36725: AND
36726: PUSH
36727: LD_VAR 0 9
36731: PPUSH
36732: LD_INT 3
36734: PPUSH
36735: CALL_OW 275
36739: PUSH
36740: LD_VAR 0 14
36744: PUSH
36745: LD_INT 3
36747: ARRAY
36748: GREATEREQUAL
36749: AND
36750: IFFALSE 36762
// result := weapon ;
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: LD_VAR 0 18
36761: ST_TO_ADDR
// end ; end ;
36762: LD_VAR 0 3
36766: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36767: LD_INT 0
36769: PPUSH
36770: PPUSH
// result := true ;
36771: LD_ADDR_VAR 0 3
36775: PUSH
36776: LD_INT 1
36778: ST_TO_ADDR
// if array1 = array2 then
36779: LD_VAR 0 1
36783: PUSH
36784: LD_VAR 0 2
36788: EQUAL
36789: IFFALSE 36849
// begin for i = 1 to array1 do
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: DOUBLE
36797: LD_INT 1
36799: DEC
36800: ST_TO_ADDR
36801: LD_VAR 0 1
36805: PUSH
36806: FOR_TO
36807: IFFALSE 36845
// if array1 [ i ] <> array2 [ i ] then
36809: LD_VAR 0 1
36813: PUSH
36814: LD_VAR 0 4
36818: ARRAY
36819: PUSH
36820: LD_VAR 0 2
36824: PUSH
36825: LD_VAR 0 4
36829: ARRAY
36830: NONEQUAL
36831: IFFALSE 36843
// begin result := false ;
36833: LD_ADDR_VAR 0 3
36837: PUSH
36838: LD_INT 0
36840: ST_TO_ADDR
// break ;
36841: GO 36845
// end ;
36843: GO 36806
36845: POP
36846: POP
// end else
36847: GO 36857
// result := false ;
36849: LD_ADDR_VAR 0 3
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// end ;
36857: LD_VAR 0 3
36861: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36862: LD_INT 0
36864: PPUSH
36865: PPUSH
// if not array1 or not array2 then
36866: LD_VAR 0 1
36870: NOT
36871: PUSH
36872: LD_VAR 0 2
36876: NOT
36877: OR
36878: IFFALSE 36882
// exit ;
36880: GO 36946
// result := true ;
36882: LD_ADDR_VAR 0 3
36886: PUSH
36887: LD_INT 1
36889: ST_TO_ADDR
// for i = 1 to array1 do
36890: LD_ADDR_VAR 0 4
36894: PUSH
36895: DOUBLE
36896: LD_INT 1
36898: DEC
36899: ST_TO_ADDR
36900: LD_VAR 0 1
36904: PUSH
36905: FOR_TO
36906: IFFALSE 36944
// if array1 [ i ] <> array2 [ i ] then
36908: LD_VAR 0 1
36912: PUSH
36913: LD_VAR 0 4
36917: ARRAY
36918: PUSH
36919: LD_VAR 0 2
36923: PUSH
36924: LD_VAR 0 4
36928: ARRAY
36929: NONEQUAL
36930: IFFALSE 36942
// begin result := false ;
36932: LD_ADDR_VAR 0 3
36936: PUSH
36937: LD_INT 0
36939: ST_TO_ADDR
// break ;
36940: GO 36944
// end ;
36942: GO 36905
36944: POP
36945: POP
// end ;
36946: LD_VAR 0 3
36950: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36951: LD_INT 0
36953: PPUSH
36954: PPUSH
36955: PPUSH
// pom := GetBase ( fac ) ;
36956: LD_ADDR_VAR 0 5
36960: PUSH
36961: LD_VAR 0 1
36965: PPUSH
36966: CALL_OW 274
36970: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36971: LD_ADDR_VAR 0 4
36975: PUSH
36976: LD_VAR 0 2
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: LD_VAR 0 2
36989: PUSH
36990: LD_INT 2
36992: ARRAY
36993: PPUSH
36994: LD_VAR 0 2
36998: PUSH
36999: LD_INT 3
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 2
37007: PUSH
37008: LD_INT 4
37010: ARRAY
37011: PPUSH
37012: CALL_OW 449
37016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37017: LD_ADDR_VAR 0 3
37021: PUSH
37022: LD_VAR 0 5
37026: PPUSH
37027: LD_INT 1
37029: PPUSH
37030: CALL_OW 275
37034: PUSH
37035: LD_VAR 0 4
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: GREATEREQUAL
37044: PUSH
37045: LD_VAR 0 5
37049: PPUSH
37050: LD_INT 2
37052: PPUSH
37053: CALL_OW 275
37057: PUSH
37058: LD_VAR 0 4
37062: PUSH
37063: LD_INT 2
37065: ARRAY
37066: GREATEREQUAL
37067: AND
37068: PUSH
37069: LD_VAR 0 5
37073: PPUSH
37074: LD_INT 3
37076: PPUSH
37077: CALL_OW 275
37081: PUSH
37082: LD_VAR 0 4
37086: PUSH
37087: LD_INT 3
37089: ARRAY
37090: GREATEREQUAL
37091: AND
37092: ST_TO_ADDR
// end ;
37093: LD_VAR 0 3
37097: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
37102: PPUSH
37103: PPUSH
// pom := GetBase ( building ) ;
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_VAR 0 1
37113: PPUSH
37114: CALL_OW 274
37118: ST_TO_ADDR
// if not pom then
37119: LD_VAR 0 3
37123: NOT
37124: IFFALSE 37128
// exit ;
37126: GO 37298
// btype := GetBType ( building ) ;
37128: LD_ADDR_VAR 0 5
37132: PUSH
37133: LD_VAR 0 1
37137: PPUSH
37138: CALL_OW 266
37142: ST_TO_ADDR
// if btype = b_armoury then
37143: LD_VAR 0 5
37147: PUSH
37148: LD_INT 4
37150: EQUAL
37151: IFFALSE 37161
// btype := b_barracks ;
37153: LD_ADDR_VAR 0 5
37157: PUSH
37158: LD_INT 5
37160: ST_TO_ADDR
// if btype = b_depot then
37161: LD_VAR 0 5
37165: PUSH
37166: LD_INT 0
37168: EQUAL
37169: IFFALSE 37179
// btype := b_warehouse ;
37171: LD_ADDR_VAR 0 5
37175: PUSH
37176: LD_INT 1
37178: ST_TO_ADDR
// if btype = b_workshop then
37179: LD_VAR 0 5
37183: PUSH
37184: LD_INT 2
37186: EQUAL
37187: IFFALSE 37197
// btype := b_factory ;
37189: LD_ADDR_VAR 0 5
37193: PUSH
37194: LD_INT 3
37196: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37197: LD_ADDR_VAR 0 4
37201: PUSH
37202: LD_VAR 0 5
37206: PPUSH
37207: LD_VAR 0 1
37211: PPUSH
37212: CALL_OW 248
37216: PPUSH
37217: CALL_OW 450
37221: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37222: LD_ADDR_VAR 0 2
37226: PUSH
37227: LD_VAR 0 3
37231: PPUSH
37232: LD_INT 1
37234: PPUSH
37235: CALL_OW 275
37239: PUSH
37240: LD_VAR 0 4
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: GREATEREQUAL
37249: PUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: LD_INT 2
37257: PPUSH
37258: CALL_OW 275
37262: PUSH
37263: LD_VAR 0 4
37267: PUSH
37268: LD_INT 2
37270: ARRAY
37271: GREATEREQUAL
37272: AND
37273: PUSH
37274: LD_VAR 0 3
37278: PPUSH
37279: LD_INT 3
37281: PPUSH
37282: CALL_OW 275
37286: PUSH
37287: LD_VAR 0 4
37291: PUSH
37292: LD_INT 3
37294: ARRAY
37295: GREATEREQUAL
37296: AND
37297: ST_TO_ADDR
// end ;
37298: LD_VAR 0 2
37302: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
37307: PPUSH
// pom := GetBase ( building ) ;
37308: LD_ADDR_VAR 0 4
37312: PUSH
37313: LD_VAR 0 1
37317: PPUSH
37318: CALL_OW 274
37322: ST_TO_ADDR
// if not pom then
37323: LD_VAR 0 4
37327: NOT
37328: IFFALSE 37332
// exit ;
37330: GO 37433
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37332: LD_ADDR_VAR 0 5
37336: PUSH
37337: LD_VAR 0 2
37341: PPUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 248
37351: PPUSH
37352: CALL_OW 450
37356: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37357: LD_ADDR_VAR 0 3
37361: PUSH
37362: LD_VAR 0 4
37366: PPUSH
37367: LD_INT 1
37369: PPUSH
37370: CALL_OW 275
37374: PUSH
37375: LD_VAR 0 5
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: GREATEREQUAL
37384: PUSH
37385: LD_VAR 0 4
37389: PPUSH
37390: LD_INT 2
37392: PPUSH
37393: CALL_OW 275
37397: PUSH
37398: LD_VAR 0 5
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: GREATEREQUAL
37407: AND
37408: PUSH
37409: LD_VAR 0 4
37413: PPUSH
37414: LD_INT 3
37416: PPUSH
37417: CALL_OW 275
37421: PUSH
37422: LD_VAR 0 5
37426: PUSH
37427: LD_INT 3
37429: ARRAY
37430: GREATEREQUAL
37431: AND
37432: ST_TO_ADDR
// end ;
37433: LD_VAR 0 3
37437: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
// result := false ;
37451: LD_ADDR_VAR 0 8
37455: PUSH
37456: LD_INT 0
37458: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37459: LD_VAR 0 5
37463: NOT
37464: PUSH
37465: LD_VAR 0 1
37469: NOT
37470: OR
37471: PUSH
37472: LD_VAR 0 2
37476: NOT
37477: OR
37478: PUSH
37479: LD_VAR 0 3
37483: NOT
37484: OR
37485: IFFALSE 37489
// exit ;
37487: GO 38303
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37489: LD_ADDR_VAR 0 14
37493: PUSH
37494: LD_VAR 0 1
37498: PPUSH
37499: LD_VAR 0 2
37503: PPUSH
37504: LD_VAR 0 3
37508: PPUSH
37509: LD_VAR 0 4
37513: PPUSH
37514: LD_VAR 0 5
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PPUSH
37523: CALL_OW 248
37527: PPUSH
37528: LD_INT 0
37530: PPUSH
37531: CALL 39556 0 6
37535: ST_TO_ADDR
// if not hexes then
37536: LD_VAR 0 14
37540: NOT
37541: IFFALSE 37545
// exit ;
37543: GO 38303
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37545: LD_ADDR_VAR 0 17
37549: PUSH
37550: LD_VAR 0 5
37554: PPUSH
37555: LD_INT 22
37557: PUSH
37558: LD_VAR 0 13
37562: PPUSH
37563: CALL_OW 255
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 30
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 30
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PPUSH
37604: CALL_OW 72
37608: ST_TO_ADDR
// for i = 1 to hexes do
37609: LD_ADDR_VAR 0 9
37613: PUSH
37614: DOUBLE
37615: LD_INT 1
37617: DEC
37618: ST_TO_ADDR
37619: LD_VAR 0 14
37623: PUSH
37624: FOR_TO
37625: IFFALSE 38301
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37627: LD_ADDR_VAR 0 13
37631: PUSH
37632: LD_VAR 0 14
37636: PUSH
37637: LD_VAR 0 9
37641: ARRAY
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PPUSH
37647: LD_VAR 0 14
37651: PUSH
37652: LD_VAR 0 9
37656: ARRAY
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: PPUSH
37662: CALL_OW 428
37666: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37667: LD_VAR 0 14
37671: PUSH
37672: LD_VAR 0 9
37676: ARRAY
37677: PUSH
37678: LD_INT 1
37680: ARRAY
37681: PPUSH
37682: LD_VAR 0 14
37686: PUSH
37687: LD_VAR 0 9
37691: ARRAY
37692: PUSH
37693: LD_INT 2
37695: ARRAY
37696: PPUSH
37697: CALL_OW 351
37701: PUSH
37702: LD_VAR 0 14
37706: PUSH
37707: LD_VAR 0 9
37711: ARRAY
37712: PUSH
37713: LD_INT 1
37715: ARRAY
37716: PPUSH
37717: LD_VAR 0 14
37721: PUSH
37722: LD_VAR 0 9
37726: ARRAY
37727: PUSH
37728: LD_INT 2
37730: ARRAY
37731: PPUSH
37732: CALL_OW 488
37736: NOT
37737: OR
37738: PUSH
37739: LD_VAR 0 13
37743: PPUSH
37744: CALL_OW 247
37748: PUSH
37749: LD_INT 3
37751: EQUAL
37752: OR
37753: IFFALSE 37759
// exit ;
37755: POP
37756: POP
37757: GO 38303
// if not tmp then
37759: LD_VAR 0 13
37763: NOT
37764: IFFALSE 37768
// continue ;
37766: GO 37624
// result := true ;
37768: LD_ADDR_VAR 0 8
37772: PUSH
37773: LD_INT 1
37775: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37776: LD_VAR 0 6
37780: PUSH
37781: LD_VAR 0 13
37785: PPUSH
37786: CALL_OW 247
37790: PUSH
37791: LD_INT 2
37793: EQUAL
37794: AND
37795: PUSH
37796: LD_VAR 0 13
37800: PPUSH
37801: CALL_OW 263
37805: PUSH
37806: LD_INT 1
37808: EQUAL
37809: AND
37810: IFFALSE 37974
// begin if IsDrivenBy ( tmp ) then
37812: LD_VAR 0 13
37816: PPUSH
37817: CALL_OW 311
37821: IFFALSE 37825
// continue ;
37823: GO 37624
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37825: LD_VAR 0 6
37829: PPUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 60
37835: PUSH
37836: EMPTY
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: LD_INT 55
37848: PUSH
37849: EMPTY
37850: LIST
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PPUSH
37860: CALL_OW 72
37864: IFFALSE 37972
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37866: LD_ADDR_VAR 0 18
37870: PUSH
37871: LD_VAR 0 6
37875: PPUSH
37876: LD_INT 3
37878: PUSH
37879: LD_INT 60
37881: PUSH
37882: EMPTY
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: LD_INT 55
37894: PUSH
37895: EMPTY
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PPUSH
37906: CALL_OW 72
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: ST_TO_ADDR
// if IsInUnit ( driver ) then
37915: LD_VAR 0 18
37919: PPUSH
37920: CALL_OW 310
37924: IFFALSE 37935
// ComExit ( driver ) ;
37926: LD_VAR 0 18
37930: PPUSH
37931: CALL 63348 0 1
// AddComEnterUnit ( driver , tmp ) ;
37935: LD_VAR 0 18
37939: PPUSH
37940: LD_VAR 0 13
37944: PPUSH
37945: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37949: LD_VAR 0 18
37953: PPUSH
37954: LD_VAR 0 7
37958: PPUSH
37959: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37963: LD_VAR 0 18
37967: PPUSH
37968: CALL_OW 181
// end ; continue ;
37972: GO 37624
// end ; if not cleaners or not tmp in cleaners then
37974: LD_VAR 0 6
37978: NOT
37979: PUSH
37980: LD_VAR 0 13
37984: PUSH
37985: LD_VAR 0 6
37989: IN
37990: NOT
37991: OR
37992: IFFALSE 38299
// begin if dep then
37994: LD_VAR 0 17
37998: IFFALSE 38134
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38000: LD_ADDR_VAR 0 16
38004: PUSH
38005: LD_VAR 0 17
38009: PUSH
38010: LD_INT 1
38012: ARRAY
38013: PPUSH
38014: CALL_OW 250
38018: PPUSH
38019: LD_VAR 0 17
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: CALL_OW 254
38032: PPUSH
38033: LD_INT 5
38035: PPUSH
38036: CALL_OW 272
38040: PUSH
38041: LD_VAR 0 17
38045: PUSH
38046: LD_INT 1
38048: ARRAY
38049: PPUSH
38050: CALL_OW 251
38054: PPUSH
38055: LD_VAR 0 17
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PPUSH
38064: CALL_OW 254
38068: PPUSH
38069: LD_INT 5
38071: PPUSH
38072: CALL_OW 273
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38081: LD_VAR 0 16
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PPUSH
38090: LD_VAR 0 16
38094: PUSH
38095: LD_INT 2
38097: ARRAY
38098: PPUSH
38099: CALL_OW 488
38103: IFFALSE 38134
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38105: LD_VAR 0 13
38109: PPUSH
38110: LD_VAR 0 16
38114: PUSH
38115: LD_INT 1
38117: ARRAY
38118: PPUSH
38119: LD_VAR 0 16
38123: PUSH
38124: LD_INT 2
38126: ARRAY
38127: PPUSH
38128: CALL_OW 111
// continue ;
38132: GO 37624
// end ; end ; r := GetDir ( tmp ) ;
38134: LD_ADDR_VAR 0 15
38138: PUSH
38139: LD_VAR 0 13
38143: PPUSH
38144: CALL_OW 254
38148: ST_TO_ADDR
// if r = 5 then
38149: LD_VAR 0 15
38153: PUSH
38154: LD_INT 5
38156: EQUAL
38157: IFFALSE 38167
// r := 0 ;
38159: LD_ADDR_VAR 0 15
38163: PUSH
38164: LD_INT 0
38166: ST_TO_ADDR
// for j = r to 5 do
38167: LD_ADDR_VAR 0 10
38171: PUSH
38172: DOUBLE
38173: LD_VAR 0 15
38177: DEC
38178: ST_TO_ADDR
38179: LD_INT 5
38181: PUSH
38182: FOR_TO
38183: IFFALSE 38297
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38185: LD_ADDR_VAR 0 11
38189: PUSH
38190: LD_VAR 0 13
38194: PPUSH
38195: CALL_OW 250
38199: PPUSH
38200: LD_VAR 0 10
38204: PPUSH
38205: LD_INT 2
38207: PPUSH
38208: CALL_OW 272
38212: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38213: LD_ADDR_VAR 0 12
38217: PUSH
38218: LD_VAR 0 13
38222: PPUSH
38223: CALL_OW 251
38227: PPUSH
38228: LD_VAR 0 10
38232: PPUSH
38233: LD_INT 2
38235: PPUSH
38236: CALL_OW 273
38240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38241: LD_VAR 0 11
38245: PPUSH
38246: LD_VAR 0 12
38250: PPUSH
38251: CALL_OW 488
38255: PUSH
38256: LD_VAR 0 11
38260: PPUSH
38261: LD_VAR 0 12
38265: PPUSH
38266: CALL_OW 428
38270: NOT
38271: AND
38272: IFFALSE 38295
// begin ComMoveXY ( tmp , _x , _y ) ;
38274: LD_VAR 0 13
38278: PPUSH
38279: LD_VAR 0 11
38283: PPUSH
38284: LD_VAR 0 12
38288: PPUSH
38289: CALL_OW 111
// break ;
38293: GO 38297
// end ; end ;
38295: GO 38182
38297: POP
38298: POP
// end ; end ;
38299: GO 37624
38301: POP
38302: POP
// end ;
38303: LD_VAR 0 8
38307: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38308: LD_INT 0
38310: PPUSH
// result := true ;
38311: LD_ADDR_VAR 0 3
38315: PUSH
38316: LD_INT 1
38318: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38319: LD_VAR 0 2
38323: PUSH
38324: LD_INT 24
38326: DOUBLE
38327: EQUAL
38328: IFTRUE 38338
38330: LD_INT 33
38332: DOUBLE
38333: EQUAL
38334: IFTRUE 38338
38336: GO 38363
38338: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_INT 32
38346: PPUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 321
38356: PUSH
38357: LD_INT 2
38359: EQUAL
38360: ST_TO_ADDR
38361: GO 38679
38363: LD_INT 20
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38396
38371: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_INT 6
38379: PPUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL_OW 321
38389: PUSH
38390: LD_INT 2
38392: EQUAL
38393: ST_TO_ADDR
38394: GO 38679
38396: LD_INT 22
38398: DOUBLE
38399: EQUAL
38400: IFTRUE 38410
38402: LD_INT 36
38404: DOUBLE
38405: EQUAL
38406: IFTRUE 38410
38408: GO 38435
38410: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38411: LD_ADDR_VAR 0 3
38415: PUSH
38416: LD_INT 15
38418: PPUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 321
38428: PUSH
38429: LD_INT 2
38431: EQUAL
38432: ST_TO_ADDR
38433: GO 38679
38435: LD_INT 30
38437: DOUBLE
38438: EQUAL
38439: IFTRUE 38443
38441: GO 38468
38443: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38444: LD_ADDR_VAR 0 3
38448: PUSH
38449: LD_INT 20
38451: PPUSH
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 321
38461: PUSH
38462: LD_INT 2
38464: EQUAL
38465: ST_TO_ADDR
38466: GO 38679
38468: LD_INT 28
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38482
38474: LD_INT 21
38476: DOUBLE
38477: EQUAL
38478: IFTRUE 38482
38480: GO 38507
38482: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_INT 21
38490: PPUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 321
38500: PUSH
38501: LD_INT 2
38503: EQUAL
38504: ST_TO_ADDR
38505: GO 38679
38507: LD_INT 16
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38515
38513: GO 38540
38515: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38516: LD_ADDR_VAR 0 3
38520: PUSH
38521: LD_INT 84
38523: PPUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 321
38533: PUSH
38534: LD_INT 2
38536: EQUAL
38537: ST_TO_ADDR
38538: GO 38679
38540: LD_INT 19
38542: DOUBLE
38543: EQUAL
38544: IFTRUE 38554
38546: LD_INT 23
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38579
38554: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: LD_INT 83
38562: PPUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 321
38572: PUSH
38573: LD_INT 2
38575: EQUAL
38576: ST_TO_ADDR
38577: GO 38679
38579: LD_INT 17
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38587
38585: GO 38612
38587: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_INT 39
38595: PPUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 321
38605: PUSH
38606: LD_INT 2
38608: EQUAL
38609: ST_TO_ADDR
38610: GO 38679
38612: LD_INT 18
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38620
38618: GO 38645
38620: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38621: LD_ADDR_VAR 0 3
38625: PUSH
38626: LD_INT 40
38628: PPUSH
38629: LD_VAR 0 1
38633: PPUSH
38634: CALL_OW 321
38638: PUSH
38639: LD_INT 2
38641: EQUAL
38642: ST_TO_ADDR
38643: GO 38679
38645: LD_INT 27
38647: DOUBLE
38648: EQUAL
38649: IFTRUE 38653
38651: GO 38678
38653: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38654: LD_ADDR_VAR 0 3
38658: PUSH
38659: LD_INT 35
38661: PPUSH
38662: LD_VAR 0 1
38666: PPUSH
38667: CALL_OW 321
38671: PUSH
38672: LD_INT 2
38674: EQUAL
38675: ST_TO_ADDR
38676: GO 38679
38678: POP
// end ;
38679: LD_VAR 0 3
38683: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38684: LD_INT 0
38686: PPUSH
38687: PPUSH
38688: PPUSH
38689: PPUSH
38690: PPUSH
38691: PPUSH
38692: PPUSH
38693: PPUSH
38694: PPUSH
38695: PPUSH
38696: PPUSH
// result := false ;
38697: LD_ADDR_VAR 0 6
38701: PUSH
38702: LD_INT 0
38704: ST_TO_ADDR
// if btype = b_depot then
38705: LD_VAR 0 2
38709: PUSH
38710: LD_INT 0
38712: EQUAL
38713: IFFALSE 38725
// begin result := true ;
38715: LD_ADDR_VAR 0 6
38719: PUSH
38720: LD_INT 1
38722: ST_TO_ADDR
// exit ;
38723: GO 39551
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38725: LD_VAR 0 1
38729: NOT
38730: PUSH
38731: LD_VAR 0 1
38735: PPUSH
38736: CALL_OW 266
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: IN
38751: NOT
38752: OR
38753: PUSH
38754: LD_VAR 0 2
38758: NOT
38759: OR
38760: PUSH
38761: LD_VAR 0 5
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: LD_INT 5
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: IN
38792: NOT
38793: OR
38794: PUSH
38795: LD_VAR 0 3
38799: PPUSH
38800: LD_VAR 0 4
38804: PPUSH
38805: CALL_OW 488
38809: NOT
38810: OR
38811: IFFALSE 38815
// exit ;
38813: GO 39551
// side := GetSide ( depot ) ;
38815: LD_ADDR_VAR 0 9
38819: PUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: CALL_OW 255
38829: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38830: LD_VAR 0 9
38834: PPUSH
38835: LD_VAR 0 2
38839: PPUSH
38840: CALL 38308 0 2
38844: NOT
38845: IFFALSE 38849
// exit ;
38847: GO 39551
// pom := GetBase ( depot ) ;
38849: LD_ADDR_VAR 0 10
38853: PUSH
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL_OW 274
38863: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38864: LD_ADDR_VAR 0 11
38868: PUSH
38869: LD_VAR 0 2
38873: PPUSH
38874: LD_VAR 0 1
38878: PPUSH
38879: CALL_OW 248
38883: PPUSH
38884: CALL_OW 450
38888: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38889: LD_VAR 0 10
38893: PPUSH
38894: LD_INT 1
38896: PPUSH
38897: CALL_OW 275
38901: PUSH
38902: LD_VAR 0 11
38906: PUSH
38907: LD_INT 1
38909: ARRAY
38910: GREATEREQUAL
38911: PUSH
38912: LD_VAR 0 10
38916: PPUSH
38917: LD_INT 2
38919: PPUSH
38920: CALL_OW 275
38924: PUSH
38925: LD_VAR 0 11
38929: PUSH
38930: LD_INT 2
38932: ARRAY
38933: GREATEREQUAL
38934: AND
38935: PUSH
38936: LD_VAR 0 10
38940: PPUSH
38941: LD_INT 3
38943: PPUSH
38944: CALL_OW 275
38948: PUSH
38949: LD_VAR 0 11
38953: PUSH
38954: LD_INT 3
38956: ARRAY
38957: GREATEREQUAL
38958: AND
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 39551
// if GetBType ( depot ) = b_depot then
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 266
38973: PUSH
38974: LD_INT 0
38976: EQUAL
38977: IFFALSE 38989
// dist := 28 else
38979: LD_ADDR_VAR 0 14
38983: PUSH
38984: LD_INT 28
38986: ST_TO_ADDR
38987: GO 38997
// dist := 36 ;
38989: LD_ADDR_VAR 0 14
38993: PUSH
38994: LD_INT 36
38996: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38997: LD_VAR 0 1
39001: PPUSH
39002: LD_VAR 0 3
39006: PPUSH
39007: LD_VAR 0 4
39011: PPUSH
39012: CALL_OW 297
39016: PUSH
39017: LD_VAR 0 14
39021: GREATER
39022: IFFALSE 39026
// exit ;
39024: GO 39551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39026: LD_ADDR_VAR 0 12
39030: PUSH
39031: LD_VAR 0 2
39035: PPUSH
39036: LD_VAR 0 3
39040: PPUSH
39041: LD_VAR 0 4
39045: PPUSH
39046: LD_VAR 0 5
39050: PPUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 248
39060: PPUSH
39061: LD_INT 0
39063: PPUSH
39064: CALL 39556 0 6
39068: ST_TO_ADDR
// if not hexes then
39069: LD_VAR 0 12
39073: NOT
39074: IFFALSE 39078
// exit ;
39076: GO 39551
// hex := GetHexInfo ( x , y ) ;
39078: LD_ADDR_VAR 0 15
39082: PUSH
39083: LD_VAR 0 3
39087: PPUSH
39088: LD_VAR 0 4
39092: PPUSH
39093: CALL_OW 546
39097: ST_TO_ADDR
// if hex [ 1 ] then
39098: LD_VAR 0 15
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: IFFALSE 39110
// exit ;
39108: GO 39551
// height := hex [ 2 ] ;
39110: LD_ADDR_VAR 0 13
39114: PUSH
39115: LD_VAR 0 15
39119: PUSH
39120: LD_INT 2
39122: ARRAY
39123: ST_TO_ADDR
// for i = 1 to hexes do
39124: LD_ADDR_VAR 0 7
39128: PUSH
39129: DOUBLE
39130: LD_INT 1
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 12
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39470
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39142: LD_VAR 0 12
39146: PUSH
39147: LD_VAR 0 7
39151: ARRAY
39152: PUSH
39153: LD_INT 1
39155: ARRAY
39156: PPUSH
39157: LD_VAR 0 12
39161: PUSH
39162: LD_VAR 0 7
39166: ARRAY
39167: PUSH
39168: LD_INT 2
39170: ARRAY
39171: PPUSH
39172: CALL_OW 488
39176: NOT
39177: PUSH
39178: LD_VAR 0 12
39182: PUSH
39183: LD_VAR 0 7
39187: ARRAY
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: PPUSH
39193: LD_VAR 0 12
39197: PUSH
39198: LD_VAR 0 7
39202: ARRAY
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: PPUSH
39208: CALL_OW 428
39212: PUSH
39213: LD_INT 0
39215: GREATER
39216: OR
39217: PUSH
39218: LD_VAR 0 12
39222: PUSH
39223: LD_VAR 0 7
39227: ARRAY
39228: PUSH
39229: LD_INT 1
39231: ARRAY
39232: PPUSH
39233: LD_VAR 0 12
39237: PUSH
39238: LD_VAR 0 7
39242: ARRAY
39243: PUSH
39244: LD_INT 2
39246: ARRAY
39247: PPUSH
39248: CALL_OW 351
39252: OR
39253: IFFALSE 39259
// exit ;
39255: POP
39256: POP
39257: GO 39551
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39259: LD_ADDR_VAR 0 8
39263: PUSH
39264: LD_VAR 0 12
39268: PUSH
39269: LD_VAR 0 7
39273: ARRAY
39274: PUSH
39275: LD_INT 1
39277: ARRAY
39278: PPUSH
39279: LD_VAR 0 12
39283: PUSH
39284: LD_VAR 0 7
39288: ARRAY
39289: PUSH
39290: LD_INT 2
39292: ARRAY
39293: PPUSH
39294: CALL_OW 546
39298: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39299: LD_VAR 0 8
39303: PUSH
39304: LD_INT 1
39306: ARRAY
39307: PUSH
39308: LD_VAR 0 8
39312: PUSH
39313: LD_INT 2
39315: ARRAY
39316: PUSH
39317: LD_VAR 0 13
39321: PUSH
39322: LD_INT 2
39324: PLUS
39325: GREATER
39326: OR
39327: PUSH
39328: LD_VAR 0 8
39332: PUSH
39333: LD_INT 2
39335: ARRAY
39336: PUSH
39337: LD_VAR 0 13
39341: PUSH
39342: LD_INT 2
39344: MINUS
39345: LESS
39346: OR
39347: PUSH
39348: LD_VAR 0 8
39352: PUSH
39353: LD_INT 3
39355: ARRAY
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 8
39362: PUSH
39363: LD_INT 9
39365: PUSH
39366: LD_INT 10
39368: PUSH
39369: LD_INT 11
39371: PUSH
39372: LD_INT 12
39374: PUSH
39375: LD_INT 13
39377: PUSH
39378: LD_INT 16
39380: PUSH
39381: LD_INT 17
39383: PUSH
39384: LD_INT 18
39386: PUSH
39387: LD_INT 19
39389: PUSH
39390: LD_INT 20
39392: PUSH
39393: LD_INT 21
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: IN
39411: NOT
39412: OR
39413: PUSH
39414: LD_VAR 0 8
39418: PUSH
39419: LD_INT 5
39421: ARRAY
39422: NOT
39423: OR
39424: PUSH
39425: LD_VAR 0 8
39429: PUSH
39430: LD_INT 6
39432: ARRAY
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 7
39442: PUSH
39443: LD_INT 9
39445: PUSH
39446: LD_INT 10
39448: PUSH
39449: LD_INT 11
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: IN
39460: NOT
39461: OR
39462: IFFALSE 39468
// exit ;
39464: POP
39465: POP
39466: GO 39551
// end ;
39468: GO 39139
39470: POP
39471: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39472: LD_VAR 0 9
39476: PPUSH
39477: LD_VAR 0 3
39481: PPUSH
39482: LD_VAR 0 4
39486: PPUSH
39487: LD_INT 20
39489: PPUSH
39490: CALL 31474 0 4
39494: PUSH
39495: LD_INT 4
39497: ARRAY
39498: IFFALSE 39502
// exit ;
39500: GO 39551
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39502: LD_VAR 0 2
39506: PUSH
39507: LD_INT 29
39509: PUSH
39510: LD_INT 30
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: IN
39517: PUSH
39518: LD_VAR 0 3
39522: PPUSH
39523: LD_VAR 0 4
39527: PPUSH
39528: LD_VAR 0 9
39532: PPUSH
39533: CALL_OW 440
39537: NOT
39538: AND
39539: IFFALSE 39543
// exit ;
39541: GO 39551
// result := true ;
39543: LD_ADDR_VAR 0 6
39547: PUSH
39548: LD_INT 1
39550: ST_TO_ADDR
// end ;
39551: LD_VAR 0 6
39555: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39556: LD_INT 0
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
39569: PPUSH
39570: PPUSH
39571: PPUSH
39572: PPUSH
39573: PPUSH
39574: PPUSH
39575: PPUSH
39576: PPUSH
39577: PPUSH
39578: PPUSH
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
39587: PPUSH
39588: PPUSH
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
// result = [ ] ;
39616: LD_ADDR_VAR 0 7
39620: PUSH
39621: EMPTY
39622: ST_TO_ADDR
// temp_list = [ ] ;
39623: LD_ADDR_VAR 0 9
39627: PUSH
39628: EMPTY
39629: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39630: LD_VAR 0 4
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: LD_INT 4
39649: PUSH
39650: LD_INT 5
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: IN
39661: NOT
39662: PUSH
39663: LD_VAR 0 1
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: IN
39678: PUSH
39679: LD_VAR 0 5
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: IN
39698: NOT
39699: AND
39700: OR
39701: IFFALSE 39705
// exit ;
39703: GO 58096
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39705: LD_VAR 0 1
39709: PUSH
39710: LD_INT 6
39712: PUSH
39713: LD_INT 7
39715: PUSH
39716: LD_INT 8
39718: PUSH
39719: LD_INT 13
39721: PUSH
39722: LD_INT 12
39724: PUSH
39725: LD_INT 15
39727: PUSH
39728: LD_INT 11
39730: PUSH
39731: LD_INT 14
39733: PUSH
39734: LD_INT 10
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: IN
39748: IFFALSE 39758
// btype = b_lab ;
39750: LD_ADDR_VAR 0 1
39754: PUSH
39755: LD_INT 6
39757: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39758: LD_VAR 0 6
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: IN
39777: NOT
39778: PUSH
39779: LD_VAR 0 1
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: LD_INT 6
39798: PUSH
39799: LD_INT 36
39801: PUSH
39802: LD_INT 4
39804: PUSH
39805: LD_INT 5
39807: PUSH
39808: LD_INT 31
39810: PUSH
39811: LD_INT 32
39813: PUSH
39814: LD_INT 33
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: IN
39830: NOT
39831: PUSH
39832: LD_VAR 0 6
39836: PUSH
39837: LD_INT 1
39839: EQUAL
39840: AND
39841: OR
39842: PUSH
39843: LD_VAR 0 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: IN
39858: NOT
39859: PUSH
39860: LD_VAR 0 6
39864: PUSH
39865: LD_INT 2
39867: EQUAL
39868: AND
39869: OR
39870: IFFALSE 39880
// mode = 0 ;
39872: LD_ADDR_VAR 0 6
39876: PUSH
39877: LD_INT 0
39879: ST_TO_ADDR
// case mode of 0 :
39880: LD_VAR 0 6
39884: PUSH
39885: LD_INT 0
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39893
39891: GO 51346
39893: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39894: LD_ADDR_VAR 0 11
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40087: LD_ADDR_VAR 0 12
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 3
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40283: LD_ADDR_VAR 0 13
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 3
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 3
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40482: LD_ADDR_VAR 0 14
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 3
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40678: LD_ADDR_VAR 0 15
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: LD_INT 1
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40871: LD_ADDR_VAR 0 16
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41064: LD_ADDR_VAR 0 17
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41294: LD_ADDR_VAR 0 18
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41524: LD_ADDR_VAR 0 19
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41754: LD_ADDR_VAR 0 20
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41984: LD_ADDR_VAR 0 21
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42214: LD_ADDR_VAR 0 22
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42444: LD_ADDR_VAR 0 23
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 3
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42724: LD_ADDR_VAR 0 24
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: NEG
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43000: LD_ADDR_VAR 0 25
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 3
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43274: LD_ADDR_VAR 0 26
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43550: LD_ADDR_VAR 0 27
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43830: LD_ADDR_VAR 0 28
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 3
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 3
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44112: LD_ADDR_VAR 0 29
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44391: LD_ADDR_VAR 0 30
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 3
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44669: LD_ADDR_VAR 0 31
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 3
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 3
44912: NEG
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44947: LD_ADDR_VAR 0 32
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45225: LD_ADDR_VAR 0 33
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45504: LD_ADDR_VAR 0 34
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45784: LD_ADDR_VAR 0 35
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45896: LD_ADDR_VAR 0 36
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46008: LD_ADDR_VAR 0 37
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46120: LD_ADDR_VAR 0 38
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46232: LD_ADDR_VAR 0 39
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46344: LD_ADDR_VAR 0 40
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46456: LD_ADDR_VAR 0 41
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: NEG
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 3
46765: NEG
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46806: LD_ADDR_VAR 0 42
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: LD_INT 3
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 3
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 3
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47156: LD_ADDR_VAR 0 43
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47504: LD_ADDR_VAR 0 44
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 3
47778: NEG
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 3
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47854: LD_ADDR_VAR 0 45
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 3
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48204: LD_ADDR_VAR 0 46
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 3
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48552: LD_ADDR_VAR 0 47
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48703: LD_ADDR_VAR 0 48
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48850: LD_ADDR_VAR 0 49
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48994: LD_ADDR_VAR 0 50
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49138: LD_ADDR_VAR 0 51
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49285: LD_ADDR_VAR 0 52
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49436: LD_ADDR_VAR 0 53
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49666: LD_ADDR_VAR 0 54
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49896: LD_ADDR_VAR 0 55
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50126: LD_ADDR_VAR 0 56
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50356: LD_ADDR_VAR 0 57
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 2
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50586: LD_ADDR_VAR 0 58
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 2
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: NEG
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: LD_INT 1
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50816: LD_ADDR_VAR 0 59
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50904: LD_ADDR_VAR 0 60
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50992: LD_ADDR_VAR 0 61
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51080: LD_ADDR_VAR 0 62
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51168: LD_ADDR_VAR 0 63
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51256: LD_ADDR_VAR 0 64
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// end ; 1 :
51344: GO 57241
51346: LD_INT 1
51348: DOUBLE
51349: EQUAL
51350: IFTRUE 51354
51352: GO 53977
51354: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51355: LD_ADDR_VAR 0 11
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51399: LD_ADDR_VAR 0 12
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51440: LD_ADDR_VAR 0 13
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51480: LD_ADDR_VAR 0 14
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51521: LD_ADDR_VAR 0 15
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51565: LD_ADDR_VAR 0 16
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51611: LD_ADDR_VAR 0 17
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 3
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51655: LD_ADDR_VAR 0 18
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51696: LD_ADDR_VAR 0 19
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51736: LD_ADDR_VAR 0 20
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51777: LD_ADDR_VAR 0 21
51781: PUSH
51782: LD_INT 2
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51821: LD_ADDR_VAR 0 22
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51867: LD_ADDR_VAR 0 23
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 4
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51911: LD_ADDR_VAR 0 24
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 4
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51952: LD_ADDR_VAR 0 25
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 4
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 3
51979: PUSH
51980: LD_INT 4
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51992: LD_ADDR_VAR 0 26
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: LIST
52032: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52033: LD_ADDR_VAR 0 27
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52077: LD_ADDR_VAR 0 28
52081: PUSH
52082: LD_INT 3
52084: NEG
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 4
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 4
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52123: LD_ADDR_VAR 0 29
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 4
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 5
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 5
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 4
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 6
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 6
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 5
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52278: LD_ADDR_VAR 0 30
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 4
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 5
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 5
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 6
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 6
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52421: LD_ADDR_VAR 0 31
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 3
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 4
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 4
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: LD_INT 4
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 5
52488: PUSH
52489: LD_INT 4
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: LD_INT 5
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 4
52508: PUSH
52509: LD_INT 5
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 6
52518: PUSH
52519: LD_INT 5
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 6
52528: PUSH
52529: LD_INT 6
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 5
52538: PUSH
52539: LD_INT 6
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52560: LD_ADDR_VAR 0 32
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 4
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 4
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 5
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 4
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 6
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 6
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52703: LD_ADDR_VAR 0 33
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: NEG
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 3
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 4
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 4
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 5
52789: NEG
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 5
52800: NEG
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 5
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 6
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 6
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52858: LD_ADDR_VAR 0 34
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: NEG
52890: PUSH
52891: LD_INT 3
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 4
52913: NEG
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 4
52925: NEG
52926: PUSH
52927: LD_INT 4
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 4
52937: NEG
52938: PUSH
52939: LD_INT 5
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: NEG
52950: PUSH
52951: LD_INT 4
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 5
52961: NEG
52962: PUSH
52963: LD_INT 5
52965: NEG
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 5
52973: NEG
52974: PUSH
52975: LD_INT 6
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 6
52985: NEG
52986: PUSH
52987: LD_INT 5
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 6
52997: NEG
52998: PUSH
52999: LD_INT 6
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53021: LD_ADDR_VAR 0 41
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53065: LD_ADDR_VAR 0 42
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53106: LD_ADDR_VAR 0 43
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53146: LD_ADDR_VAR 0 44
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53187: LD_ADDR_VAR 0 45
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53231: LD_ADDR_VAR 0 46
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53277: LD_ADDR_VAR 0 47
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53310: LD_ADDR_VAR 0 48
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53341: LD_ADDR_VAR 0 49
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53370: LD_ADDR_VAR 0 50
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53399: LD_ADDR_VAR 0 51
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53430: LD_ADDR_VAR 0 52
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 3
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53463: LD_ADDR_VAR 0 53
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53507: LD_ADDR_VAR 0 54
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53548: LD_ADDR_VAR 0 55
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53588: LD_ADDR_VAR 0 56
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53629: LD_ADDR_VAR 0 57
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53673: LD_ADDR_VAR 0 58
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53719: LD_ADDR_VAR 0 59
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 2
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53763: LD_ADDR_VAR 0 60
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53804: LD_ADDR_VAR 0 61
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53844: LD_ADDR_VAR 0 62
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53885: LD_ADDR_VAR 0 63
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53929: LD_ADDR_VAR 0 64
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// end ; 2 :
53975: GO 57241
53977: LD_INT 2
53979: DOUBLE
53980: EQUAL
53981: IFTRUE 53985
53983: GO 57240
53985: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53986: LD_ADDR_VAR 0 29
53990: PUSH
53991: LD_INT 4
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 4
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 5
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 5
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 4
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: LD_INT 2
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 5
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 4
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 4
54116: PUSH
54117: LD_INT 4
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 4
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: LD_INT 3
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 4
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 5
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 5
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 4
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: PUSH
54249: LD_INT 5
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: NEG
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 4
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 4
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 4
54371: NEG
54372: PUSH
54373: LD_INT 4
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 4
54383: NEG
54384: PUSH
54385: LD_INT 5
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 4
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 4
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 5
54431: NEG
54432: PUSH
54433: LD_INT 4
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 5
54443: NEG
54444: PUSH
54445: LD_INT 5
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 5
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 5
54467: NEG
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54524: LD_ADDR_VAR 0 30
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: LD_INT 4
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 5
54551: PUSH
54552: LD_INT 4
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 5
54561: PUSH
54562: LD_INT 5
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: LD_INT 5
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: LD_INT 4
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 5
54601: PUSH
54602: LD_INT 3
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: LD_INT 5
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 4
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 4
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 4
54714: NEG
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 5
54770: NEG
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 5
54781: NEG
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 5
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 4
54876: NEG
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 4
54888: NEG
54889: PUSH
54890: LD_INT 4
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 4
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 4
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 5
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 4
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 5
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 5
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55071: LD_ADDR_VAR 0 31
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 4
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 3
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 4
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 5
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 5
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: LD_INT 5
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: NEG
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 4
55227: NEG
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 4
55273: NEG
55274: PUSH
55275: LD_INT 4
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 4
55285: NEG
55286: PUSH
55287: LD_INT 5
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: LD_INT 4
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 4
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 5
55333: NEG
55334: PUSH
55335: LD_INT 4
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 5
55345: NEG
55346: PUSH
55347: LD_INT 5
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: LD_INT 5
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 5
55369: NEG
55370: PUSH
55371: LD_INT 3
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 3
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 4
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: LD_INT 3
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 4
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: LD_INT 2
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 4
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 4
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 4
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 5
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 5
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55621: LD_ADDR_VAR 0 32
55625: PUSH
55626: LD_INT 4
55628: NEG
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 4
55639: NEG
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: NEG
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 4
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 5
55684: NEG
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 5
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 5
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: NEG
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 3
55742: NEG
55743: PUSH
55744: LD_INT 4
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 3
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: NEG
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 4
55802: NEG
55803: PUSH
55804: LD_INT 4
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 4
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 4
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 4
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 4
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 3
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 4
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 5
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 3
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 4
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: PUSH
56034: LD_INT 4
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 5
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 5
56063: PUSH
56064: LD_INT 5
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: PUSH
56074: LD_INT 5
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 3
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 5
56103: PUSH
56104: LD_INT 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: PUSH
56114: LD_INT 5
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56168: LD_ADDR_VAR 0 33
56172: PUSH
56173: LD_INT 4
56175: NEG
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 4
56187: NEG
56188: PUSH
56189: LD_INT 5
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: LD_INT 4
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: NEG
56224: PUSH
56225: LD_INT 3
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 5
56235: NEG
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 5
56247: NEG
56248: PUSH
56249: LD_INT 5
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 5
56271: NEG
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 2
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 3
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 4
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 2
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 4
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 4
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 5
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 5
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 4
56508: PUSH
56509: LD_INT 4
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 4
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 4
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 4
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 4
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 4
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 5
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 5
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 5
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56706: LD_ADDR_VAR 0 34
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: LD_INT 5
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 4
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 4
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 4
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 4
56918: PUSH
56919: LD_INT 3
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 5
56938: PUSH
56939: LD_INT 5
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: LD_INT 4
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 5
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: LD_INT 5
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: PUSH
57029: LD_INT 4
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: LD_INT 4
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 4
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: NEG
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 4
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: NEG
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 3
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: NEG
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 5
57147: NEG
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 5
57158: NEG
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 5
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// end ; end ;
57238: GO 57241
57240: POP
// case btype of b_depot , b_warehouse :
57241: LD_VAR 0 1
57245: PUSH
57246: LD_INT 0
57248: DOUBLE
57249: EQUAL
57250: IFTRUE 57260
57252: LD_INT 1
57254: DOUBLE
57255: EQUAL
57256: IFTRUE 57260
57258: GO 57461
57260: POP
// case nation of nation_american :
57261: LD_VAR 0 5
57265: PUSH
57266: LD_INT 1
57268: DOUBLE
57269: EQUAL
57270: IFTRUE 57274
57272: GO 57330
57274: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57275: LD_ADDR_VAR 0 9
57279: PUSH
57280: LD_VAR 0 11
57284: PUSH
57285: LD_VAR 0 12
57289: PUSH
57290: LD_VAR 0 13
57294: PUSH
57295: LD_VAR 0 14
57299: PUSH
57300: LD_VAR 0 15
57304: PUSH
57305: LD_VAR 0 16
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: PUSH
57318: LD_VAR 0 4
57322: PUSH
57323: LD_INT 1
57325: PLUS
57326: ARRAY
57327: ST_TO_ADDR
57328: GO 57459
57330: LD_INT 2
57332: DOUBLE
57333: EQUAL
57334: IFTRUE 57338
57336: GO 57394
57338: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57339: LD_ADDR_VAR 0 9
57343: PUSH
57344: LD_VAR 0 17
57348: PUSH
57349: LD_VAR 0 18
57353: PUSH
57354: LD_VAR 0 19
57358: PUSH
57359: LD_VAR 0 20
57363: PUSH
57364: LD_VAR 0 21
57368: PUSH
57369: LD_VAR 0 22
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: PUSH
57382: LD_VAR 0 4
57386: PUSH
57387: LD_INT 1
57389: PLUS
57390: ARRAY
57391: ST_TO_ADDR
57392: GO 57459
57394: LD_INT 3
57396: DOUBLE
57397: EQUAL
57398: IFTRUE 57402
57400: GO 57458
57402: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57403: LD_ADDR_VAR 0 9
57407: PUSH
57408: LD_VAR 0 23
57412: PUSH
57413: LD_VAR 0 24
57417: PUSH
57418: LD_VAR 0 25
57422: PUSH
57423: LD_VAR 0 26
57427: PUSH
57428: LD_VAR 0 27
57432: PUSH
57433: LD_VAR 0 28
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: LD_VAR 0 4
57450: PUSH
57451: LD_INT 1
57453: PLUS
57454: ARRAY
57455: ST_TO_ADDR
57456: GO 57459
57458: POP
57459: GO 58014
57461: LD_INT 2
57463: DOUBLE
57464: EQUAL
57465: IFTRUE 57475
57467: LD_INT 3
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57475
57473: GO 57531
57475: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57476: LD_ADDR_VAR 0 9
57480: PUSH
57481: LD_VAR 0 29
57485: PUSH
57486: LD_VAR 0 30
57490: PUSH
57491: LD_VAR 0 31
57495: PUSH
57496: LD_VAR 0 32
57500: PUSH
57501: LD_VAR 0 33
57505: PUSH
57506: LD_VAR 0 34
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: PUSH
57519: LD_VAR 0 4
57523: PUSH
57524: LD_INT 1
57526: PLUS
57527: ARRAY
57528: ST_TO_ADDR
57529: GO 58014
57531: LD_INT 16
57533: DOUBLE
57534: EQUAL
57535: IFTRUE 57593
57537: LD_INT 17
57539: DOUBLE
57540: EQUAL
57541: IFTRUE 57593
57543: LD_INT 18
57545: DOUBLE
57546: EQUAL
57547: IFTRUE 57593
57549: LD_INT 19
57551: DOUBLE
57552: EQUAL
57553: IFTRUE 57593
57555: LD_INT 22
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57593
57561: LD_INT 20
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57593
57567: LD_INT 21
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57593
57573: LD_INT 23
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57593
57579: LD_INT 24
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57593
57585: LD_INT 25
57587: DOUBLE
57588: EQUAL
57589: IFTRUE 57593
57591: GO 57649
57593: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57594: LD_ADDR_VAR 0 9
57598: PUSH
57599: LD_VAR 0 35
57603: PUSH
57604: LD_VAR 0 36
57608: PUSH
57609: LD_VAR 0 37
57613: PUSH
57614: LD_VAR 0 38
57618: PUSH
57619: LD_VAR 0 39
57623: PUSH
57624: LD_VAR 0 40
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: PUSH
57637: LD_VAR 0 4
57641: PUSH
57642: LD_INT 1
57644: PLUS
57645: ARRAY
57646: ST_TO_ADDR
57647: GO 58014
57649: LD_INT 6
57651: DOUBLE
57652: EQUAL
57653: IFTRUE 57705
57655: LD_INT 7
57657: DOUBLE
57658: EQUAL
57659: IFTRUE 57705
57661: LD_INT 8
57663: DOUBLE
57664: EQUAL
57665: IFTRUE 57705
57667: LD_INT 13
57669: DOUBLE
57670: EQUAL
57671: IFTRUE 57705
57673: LD_INT 12
57675: DOUBLE
57676: EQUAL
57677: IFTRUE 57705
57679: LD_INT 15
57681: DOUBLE
57682: EQUAL
57683: IFTRUE 57705
57685: LD_INT 11
57687: DOUBLE
57688: EQUAL
57689: IFTRUE 57705
57691: LD_INT 14
57693: DOUBLE
57694: EQUAL
57695: IFTRUE 57705
57697: LD_INT 10
57699: DOUBLE
57700: EQUAL
57701: IFTRUE 57705
57703: GO 57761
57705: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57706: LD_ADDR_VAR 0 9
57710: PUSH
57711: LD_VAR 0 41
57715: PUSH
57716: LD_VAR 0 42
57720: PUSH
57721: LD_VAR 0 43
57725: PUSH
57726: LD_VAR 0 44
57730: PUSH
57731: LD_VAR 0 45
57735: PUSH
57736: LD_VAR 0 46
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: PUSH
57749: LD_VAR 0 4
57753: PUSH
57754: LD_INT 1
57756: PLUS
57757: ARRAY
57758: ST_TO_ADDR
57759: GO 58014
57761: LD_INT 36
57763: DOUBLE
57764: EQUAL
57765: IFTRUE 57769
57767: GO 57825
57769: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57770: LD_ADDR_VAR 0 9
57774: PUSH
57775: LD_VAR 0 47
57779: PUSH
57780: LD_VAR 0 48
57784: PUSH
57785: LD_VAR 0 49
57789: PUSH
57790: LD_VAR 0 50
57794: PUSH
57795: LD_VAR 0 51
57799: PUSH
57800: LD_VAR 0 52
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: PUSH
57813: LD_VAR 0 4
57817: PUSH
57818: LD_INT 1
57820: PLUS
57821: ARRAY
57822: ST_TO_ADDR
57823: GO 58014
57825: LD_INT 4
57827: DOUBLE
57828: EQUAL
57829: IFTRUE 57851
57831: LD_INT 5
57833: DOUBLE
57834: EQUAL
57835: IFTRUE 57851
57837: LD_INT 34
57839: DOUBLE
57840: EQUAL
57841: IFTRUE 57851
57843: LD_INT 37
57845: DOUBLE
57846: EQUAL
57847: IFTRUE 57851
57849: GO 57907
57851: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57852: LD_ADDR_VAR 0 9
57856: PUSH
57857: LD_VAR 0 53
57861: PUSH
57862: LD_VAR 0 54
57866: PUSH
57867: LD_VAR 0 55
57871: PUSH
57872: LD_VAR 0 56
57876: PUSH
57877: LD_VAR 0 57
57881: PUSH
57882: LD_VAR 0 58
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: PUSH
57895: LD_VAR 0 4
57899: PUSH
57900: LD_INT 1
57902: PLUS
57903: ARRAY
57904: ST_TO_ADDR
57905: GO 58014
57907: LD_INT 31
57909: DOUBLE
57910: EQUAL
57911: IFTRUE 57957
57913: LD_INT 32
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57957
57919: LD_INT 33
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57957
57925: LD_INT 27
57927: DOUBLE
57928: EQUAL
57929: IFTRUE 57957
57931: LD_INT 26
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57957
57937: LD_INT 28
57939: DOUBLE
57940: EQUAL
57941: IFTRUE 57957
57943: LD_INT 29
57945: DOUBLE
57946: EQUAL
57947: IFTRUE 57957
57949: LD_INT 30
57951: DOUBLE
57952: EQUAL
57953: IFTRUE 57957
57955: GO 58013
57957: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57958: LD_ADDR_VAR 0 9
57962: PUSH
57963: LD_VAR 0 59
57967: PUSH
57968: LD_VAR 0 60
57972: PUSH
57973: LD_VAR 0 61
57977: PUSH
57978: LD_VAR 0 62
57982: PUSH
57983: LD_VAR 0 63
57987: PUSH
57988: LD_VAR 0 64
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: PUSH
58001: LD_VAR 0 4
58005: PUSH
58006: LD_INT 1
58008: PLUS
58009: ARRAY
58010: ST_TO_ADDR
58011: GO 58014
58013: POP
// temp_list2 = [ ] ;
58014: LD_ADDR_VAR 0 10
58018: PUSH
58019: EMPTY
58020: ST_TO_ADDR
// for i in temp_list do
58021: LD_ADDR_VAR 0 8
58025: PUSH
58026: LD_VAR 0 9
58030: PUSH
58031: FOR_IN
58032: IFFALSE 58084
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58034: LD_ADDR_VAR 0 10
58038: PUSH
58039: LD_VAR 0 10
58043: PUSH
58044: LD_VAR 0 8
58048: PUSH
58049: LD_INT 1
58051: ARRAY
58052: PUSH
58053: LD_VAR 0 2
58057: PLUS
58058: PUSH
58059: LD_VAR 0 8
58063: PUSH
58064: LD_INT 2
58066: ARRAY
58067: PUSH
58068: LD_VAR 0 3
58072: PLUS
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: ADD
58081: ST_TO_ADDR
58082: GO 58031
58084: POP
58085: POP
// result = temp_list2 ;
58086: LD_ADDR_VAR 0 7
58090: PUSH
58091: LD_VAR 0 10
58095: ST_TO_ADDR
// end ;
58096: LD_VAR 0 7
58100: RET
// export function EnemyInRange ( unit , dist ) ; begin
58101: LD_INT 0
58103: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58104: LD_ADDR_VAR 0 3
58108: PUSH
58109: LD_VAR 0 1
58113: PPUSH
58114: CALL_OW 255
58118: PPUSH
58119: LD_VAR 0 1
58123: PPUSH
58124: CALL_OW 250
58128: PPUSH
58129: LD_VAR 0 1
58133: PPUSH
58134: CALL_OW 251
58138: PPUSH
58139: LD_VAR 0 2
58143: PPUSH
58144: CALL 31474 0 4
58148: PUSH
58149: LD_INT 4
58151: ARRAY
58152: ST_TO_ADDR
// end ;
58153: LD_VAR 0 3
58157: RET
// export function PlayerSeeMe ( unit ) ; begin
58158: LD_INT 0
58160: PPUSH
// result := See ( your_side , unit ) ;
58161: LD_ADDR_VAR 0 2
58165: PUSH
58166: LD_OWVAR 2
58170: PPUSH
58171: LD_VAR 0 1
58175: PPUSH
58176: CALL_OW 292
58180: ST_TO_ADDR
// end ;
58181: LD_VAR 0 2
58185: RET
// export function ReverseDir ( unit ) ; begin
58186: LD_INT 0
58188: PPUSH
// if not unit then
58189: LD_VAR 0 1
58193: NOT
58194: IFFALSE 58198
// exit ;
58196: GO 58221
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58198: LD_ADDR_VAR 0 2
58202: PUSH
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 254
58212: PUSH
58213: LD_INT 3
58215: PLUS
58216: PUSH
58217: LD_INT 6
58219: MOD
58220: ST_TO_ADDR
// end ;
58221: LD_VAR 0 2
58225: RET
// export function ReverseArray ( array ) ; var i ; begin
58226: LD_INT 0
58228: PPUSH
58229: PPUSH
// if not array then
58230: LD_VAR 0 1
58234: NOT
58235: IFFALSE 58239
// exit ;
58237: GO 58294
// result := [ ] ;
58239: LD_ADDR_VAR 0 2
58243: PUSH
58244: EMPTY
58245: ST_TO_ADDR
// for i := array downto 1 do
58246: LD_ADDR_VAR 0 3
58250: PUSH
58251: DOUBLE
58252: LD_VAR 0 1
58256: INC
58257: ST_TO_ADDR
58258: LD_INT 1
58260: PUSH
58261: FOR_DOWNTO
58262: IFFALSE 58292
// result := Join ( result , array [ i ] ) ;
58264: LD_ADDR_VAR 0 2
58268: PUSH
58269: LD_VAR 0 2
58273: PPUSH
58274: LD_VAR 0 1
58278: PUSH
58279: LD_VAR 0 3
58283: ARRAY
58284: PPUSH
58285: CALL 62950 0 2
58289: ST_TO_ADDR
58290: GO 58261
58292: POP
58293: POP
// end ;
58294: LD_VAR 0 2
58298: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58299: LD_INT 0
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
// if not unit or not hexes then
58307: LD_VAR 0 1
58311: NOT
58312: PUSH
58313: LD_VAR 0 2
58317: NOT
58318: OR
58319: IFFALSE 58323
// exit ;
58321: GO 58446
// dist := 9999 ;
58323: LD_ADDR_VAR 0 5
58327: PUSH
58328: LD_INT 9999
58330: ST_TO_ADDR
// for i = 1 to hexes do
58331: LD_ADDR_VAR 0 4
58335: PUSH
58336: DOUBLE
58337: LD_INT 1
58339: DEC
58340: ST_TO_ADDR
58341: LD_VAR 0 2
58345: PUSH
58346: FOR_TO
58347: IFFALSE 58434
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58349: LD_ADDR_VAR 0 6
58353: PUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_VAR 0 4
58368: ARRAY
58369: PUSH
58370: LD_INT 1
58372: ARRAY
58373: PPUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_VAR 0 4
58383: ARRAY
58384: PUSH
58385: LD_INT 2
58387: ARRAY
58388: PPUSH
58389: CALL_OW 297
58393: ST_TO_ADDR
// if tdist < dist then
58394: LD_VAR 0 6
58398: PUSH
58399: LD_VAR 0 5
58403: LESS
58404: IFFALSE 58432
// begin hex := hexes [ i ] ;
58406: LD_ADDR_VAR 0 8
58410: PUSH
58411: LD_VAR 0 2
58415: PUSH
58416: LD_VAR 0 4
58420: ARRAY
58421: ST_TO_ADDR
// dist := tdist ;
58422: LD_ADDR_VAR 0 5
58426: PUSH
58427: LD_VAR 0 6
58431: ST_TO_ADDR
// end ; end ;
58432: GO 58346
58434: POP
58435: POP
// result := hex ;
58436: LD_ADDR_VAR 0 3
58440: PUSH
58441: LD_VAR 0 8
58445: ST_TO_ADDR
// end ;
58446: LD_VAR 0 3
58450: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58451: LD_INT 0
58453: PPUSH
58454: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58455: LD_VAR 0 1
58459: NOT
58460: PUSH
58461: LD_VAR 0 1
58465: PUSH
58466: LD_INT 21
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 23
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PPUSH
58490: CALL_OW 69
58494: IN
58495: NOT
58496: OR
58497: IFFALSE 58501
// exit ;
58499: GO 58548
// for i = 1 to 3 do
58501: LD_ADDR_VAR 0 3
58505: PUSH
58506: DOUBLE
58507: LD_INT 1
58509: DEC
58510: ST_TO_ADDR
58511: LD_INT 3
58513: PUSH
58514: FOR_TO
58515: IFFALSE 58546
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58517: LD_VAR 0 1
58521: PPUSH
58522: CALL_OW 250
58526: PPUSH
58527: LD_VAR 0 1
58531: PPUSH
58532: CALL_OW 251
58536: PPUSH
58537: LD_INT 1
58539: PPUSH
58540: CALL_OW 453
58544: GO 58514
58546: POP
58547: POP
// end ;
58548: LD_VAR 0 2
58552: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58553: LD_INT 0
58555: PPUSH
58556: PPUSH
58557: PPUSH
58558: PPUSH
58559: PPUSH
58560: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58561: LD_VAR 0 1
58565: NOT
58566: PUSH
58567: LD_VAR 0 2
58571: NOT
58572: OR
58573: PUSH
58574: LD_VAR 0 1
58578: PPUSH
58579: CALL_OW 314
58583: OR
58584: IFFALSE 58588
// exit ;
58586: GO 59055
// if GetLives ( i ) < 250 then
58588: LD_VAR 0 4
58592: PPUSH
58593: CALL_OW 256
58597: PUSH
58598: LD_INT 250
58600: LESS
58601: IFFALSE 58614
// begin ComAutodestruct ( i ) ;
58603: LD_VAR 0 4
58607: PPUSH
58608: CALL 58451 0 1
// exit ;
58612: GO 59055
// end ; x := GetX ( enemy_unit ) ;
58614: LD_ADDR_VAR 0 7
58618: PUSH
58619: LD_VAR 0 2
58623: PPUSH
58624: CALL_OW 250
58628: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58629: LD_ADDR_VAR 0 8
58633: PUSH
58634: LD_VAR 0 2
58638: PPUSH
58639: CALL_OW 251
58643: ST_TO_ADDR
// if not x or not y then
58644: LD_VAR 0 7
58648: NOT
58649: PUSH
58650: LD_VAR 0 8
58654: NOT
58655: OR
58656: IFFALSE 58660
// exit ;
58658: GO 59055
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58660: LD_ADDR_VAR 0 6
58664: PUSH
58665: LD_VAR 0 7
58669: PPUSH
58670: LD_INT 0
58672: PPUSH
58673: LD_INT 4
58675: PPUSH
58676: CALL_OW 272
58680: PUSH
58681: LD_VAR 0 8
58685: PPUSH
58686: LD_INT 0
58688: PPUSH
58689: LD_INT 4
58691: PPUSH
58692: CALL_OW 273
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_VAR 0 7
58705: PPUSH
58706: LD_INT 1
58708: PPUSH
58709: LD_INT 4
58711: PPUSH
58712: CALL_OW 272
58716: PUSH
58717: LD_VAR 0 8
58721: PPUSH
58722: LD_INT 1
58724: PPUSH
58725: LD_INT 4
58727: PPUSH
58728: CALL_OW 273
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_VAR 0 7
58741: PPUSH
58742: LD_INT 2
58744: PPUSH
58745: LD_INT 4
58747: PPUSH
58748: CALL_OW 272
58752: PUSH
58753: LD_VAR 0 8
58757: PPUSH
58758: LD_INT 2
58760: PPUSH
58761: LD_INT 4
58763: PPUSH
58764: CALL_OW 273
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_VAR 0 7
58777: PPUSH
58778: LD_INT 3
58780: PPUSH
58781: LD_INT 4
58783: PPUSH
58784: CALL_OW 272
58788: PUSH
58789: LD_VAR 0 8
58793: PPUSH
58794: LD_INT 3
58796: PPUSH
58797: LD_INT 4
58799: PPUSH
58800: CALL_OW 273
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_VAR 0 7
58813: PPUSH
58814: LD_INT 4
58816: PPUSH
58817: LD_INT 4
58819: PPUSH
58820: CALL_OW 272
58824: PUSH
58825: LD_VAR 0 8
58829: PPUSH
58830: LD_INT 4
58832: PPUSH
58833: LD_INT 4
58835: PPUSH
58836: CALL_OW 273
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_VAR 0 7
58849: PPUSH
58850: LD_INT 5
58852: PPUSH
58853: LD_INT 4
58855: PPUSH
58856: CALL_OW 272
58860: PUSH
58861: LD_VAR 0 8
58865: PPUSH
58866: LD_INT 5
58868: PPUSH
58869: LD_INT 4
58871: PPUSH
58872: CALL_OW 273
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// for i = tmp downto 1 do
58889: LD_ADDR_VAR 0 4
58893: PUSH
58894: DOUBLE
58895: LD_VAR 0 6
58899: INC
58900: ST_TO_ADDR
58901: LD_INT 1
58903: PUSH
58904: FOR_DOWNTO
58905: IFFALSE 59006
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58907: LD_VAR 0 6
58911: PUSH
58912: LD_VAR 0 4
58916: ARRAY
58917: PUSH
58918: LD_INT 1
58920: ARRAY
58921: PPUSH
58922: LD_VAR 0 6
58926: PUSH
58927: LD_VAR 0 4
58931: ARRAY
58932: PUSH
58933: LD_INT 2
58935: ARRAY
58936: PPUSH
58937: CALL_OW 488
58941: NOT
58942: PUSH
58943: LD_VAR 0 6
58947: PUSH
58948: LD_VAR 0 4
58952: ARRAY
58953: PUSH
58954: LD_INT 1
58956: ARRAY
58957: PPUSH
58958: LD_VAR 0 6
58962: PUSH
58963: LD_VAR 0 4
58967: ARRAY
58968: PUSH
58969: LD_INT 2
58971: ARRAY
58972: PPUSH
58973: CALL_OW 428
58977: PUSH
58978: LD_INT 0
58980: NONEQUAL
58981: OR
58982: IFFALSE 59004
// tmp := Delete ( tmp , i ) ;
58984: LD_ADDR_VAR 0 6
58988: PUSH
58989: LD_VAR 0 6
58993: PPUSH
58994: LD_VAR 0 4
58998: PPUSH
58999: CALL_OW 3
59003: ST_TO_ADDR
59004: GO 58904
59006: POP
59007: POP
// j := GetClosestHex ( unit , tmp ) ;
59008: LD_ADDR_VAR 0 5
59012: PUSH
59013: LD_VAR 0 1
59017: PPUSH
59018: LD_VAR 0 6
59022: PPUSH
59023: CALL 58299 0 2
59027: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59028: LD_VAR 0 1
59032: PPUSH
59033: LD_VAR 0 5
59037: PUSH
59038: LD_INT 1
59040: ARRAY
59041: PPUSH
59042: LD_VAR 0 5
59046: PUSH
59047: LD_INT 2
59049: ARRAY
59050: PPUSH
59051: CALL_OW 111
// end ;
59055: LD_VAR 0 3
59059: RET
// export function PrepareApemanSoldier ( ) ; begin
59060: LD_INT 0
59062: PPUSH
// uc_nation := 0 ;
59063: LD_ADDR_OWVAR 21
59067: PUSH
59068: LD_INT 0
59070: ST_TO_ADDR
// hc_sex := sex_male ;
59071: LD_ADDR_OWVAR 27
59075: PUSH
59076: LD_INT 1
59078: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59079: LD_ADDR_OWVAR 28
59083: PUSH
59084: LD_INT 15
59086: ST_TO_ADDR
// hc_gallery :=  ;
59087: LD_ADDR_OWVAR 33
59091: PUSH
59092: LD_STRING 
59094: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59095: LD_ADDR_OWVAR 31
59099: PUSH
59100: LD_INT 0
59102: PPUSH
59103: LD_INT 3
59105: PPUSH
59106: CALL_OW 12
59110: PUSH
59111: LD_INT 0
59113: PPUSH
59114: LD_INT 3
59116: PPUSH
59117: CALL_OW 12
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// end ;
59134: LD_VAR 0 1
59138: RET
// export function PrepareApemanEngineer ( ) ; begin
59139: LD_INT 0
59141: PPUSH
// uc_nation := 0 ;
59142: LD_ADDR_OWVAR 21
59146: PUSH
59147: LD_INT 0
59149: ST_TO_ADDR
// hc_sex := sex_male ;
59150: LD_ADDR_OWVAR 27
59154: PUSH
59155: LD_INT 1
59157: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59158: LD_ADDR_OWVAR 28
59162: PUSH
59163: LD_INT 16
59165: ST_TO_ADDR
// hc_gallery :=  ;
59166: LD_ADDR_OWVAR 33
59170: PUSH
59171: LD_STRING 
59173: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59174: LD_ADDR_OWVAR 31
59178: PUSH
59179: LD_INT 0
59181: PPUSH
59182: LD_INT 3
59184: PPUSH
59185: CALL_OW 12
59189: PUSH
59190: LD_INT 0
59192: PPUSH
59193: LD_INT 3
59195: PPUSH
59196: CALL_OW 12
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// end ;
59213: LD_VAR 0 1
59217: RET
// export function PrepareApeman ( agressivity ) ; begin
59218: LD_INT 0
59220: PPUSH
// uc_side := 0 ;
59221: LD_ADDR_OWVAR 20
59225: PUSH
59226: LD_INT 0
59228: ST_TO_ADDR
// uc_nation := 0 ;
59229: LD_ADDR_OWVAR 21
59233: PUSH
59234: LD_INT 0
59236: ST_TO_ADDR
// hc_sex := sex_male ;
59237: LD_ADDR_OWVAR 27
59241: PUSH
59242: LD_INT 1
59244: ST_TO_ADDR
// hc_class := class_apeman ;
59245: LD_ADDR_OWVAR 28
59249: PUSH
59250: LD_INT 12
59252: ST_TO_ADDR
// hc_gallery :=  ;
59253: LD_ADDR_OWVAR 33
59257: PUSH
59258: LD_STRING 
59260: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59261: LD_ADDR_OWVAR 35
59265: PUSH
59266: LD_VAR 0 1
59270: NEG
59271: PPUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 12
59281: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59282: LD_ADDR_OWVAR 31
59286: PUSH
59287: LD_INT 0
59289: PPUSH
59290: LD_INT 3
59292: PPUSH
59293: CALL_OW 12
59297: PUSH
59298: LD_INT 0
59300: PPUSH
59301: LD_INT 3
59303: PPUSH
59304: CALL_OW 12
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: ST_TO_ADDR
// end ;
59321: LD_VAR 0 2
59325: RET
// export function PrepareTiger ( agressivity ) ; begin
59326: LD_INT 0
59328: PPUSH
// uc_side := 0 ;
59329: LD_ADDR_OWVAR 20
59333: PUSH
59334: LD_INT 0
59336: ST_TO_ADDR
// uc_nation := 0 ;
59337: LD_ADDR_OWVAR 21
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
// hc_class := class_tiger ;
59345: LD_ADDR_OWVAR 28
59349: PUSH
59350: LD_INT 14
59352: ST_TO_ADDR
// hc_gallery :=  ;
59353: LD_ADDR_OWVAR 33
59357: PUSH
59358: LD_STRING 
59360: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59361: LD_ADDR_OWVAR 35
59365: PUSH
59366: LD_VAR 0 1
59370: NEG
59371: PPUSH
59372: LD_VAR 0 1
59376: PPUSH
59377: CALL_OW 12
59381: ST_TO_ADDR
// end ;
59382: LD_VAR 0 2
59386: RET
// export function PrepareEnchidna ( ) ; begin
59387: LD_INT 0
59389: PPUSH
// uc_side := 0 ;
59390: LD_ADDR_OWVAR 20
59394: PUSH
59395: LD_INT 0
59397: ST_TO_ADDR
// uc_nation := 0 ;
59398: LD_ADDR_OWVAR 21
59402: PUSH
59403: LD_INT 0
59405: ST_TO_ADDR
// hc_class := class_baggie ;
59406: LD_ADDR_OWVAR 28
59410: PUSH
59411: LD_INT 13
59413: ST_TO_ADDR
// hc_gallery :=  ;
59414: LD_ADDR_OWVAR 33
59418: PUSH
59419: LD_STRING 
59421: ST_TO_ADDR
// end ;
59422: LD_VAR 0 1
59426: RET
// export function PrepareFrog ( ) ; begin
59427: LD_INT 0
59429: PPUSH
// uc_side := 0 ;
59430: LD_ADDR_OWVAR 20
59434: PUSH
59435: LD_INT 0
59437: ST_TO_ADDR
// uc_nation := 0 ;
59438: LD_ADDR_OWVAR 21
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// hc_class := class_frog ;
59446: LD_ADDR_OWVAR 28
59450: PUSH
59451: LD_INT 19
59453: ST_TO_ADDR
// hc_gallery :=  ;
59454: LD_ADDR_OWVAR 33
59458: PUSH
59459: LD_STRING 
59461: ST_TO_ADDR
// end ;
59462: LD_VAR 0 1
59466: RET
// export function PrepareFish ( ) ; begin
59467: LD_INT 0
59469: PPUSH
// uc_side := 0 ;
59470: LD_ADDR_OWVAR 20
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// uc_nation := 0 ;
59478: LD_ADDR_OWVAR 21
59482: PUSH
59483: LD_INT 0
59485: ST_TO_ADDR
// hc_class := class_fish ;
59486: LD_ADDR_OWVAR 28
59490: PUSH
59491: LD_INT 20
59493: ST_TO_ADDR
// hc_gallery :=  ;
59494: LD_ADDR_OWVAR 33
59498: PUSH
59499: LD_STRING 
59501: ST_TO_ADDR
// end ;
59502: LD_VAR 0 1
59506: RET
// export function PrepareBird ( ) ; begin
59507: LD_INT 0
59509: PPUSH
// uc_side := 0 ;
59510: LD_ADDR_OWVAR 20
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// uc_nation := 0 ;
59518: LD_ADDR_OWVAR 21
59522: PUSH
59523: LD_INT 0
59525: ST_TO_ADDR
// hc_class := class_phororhacos ;
59526: LD_ADDR_OWVAR 28
59530: PUSH
59531: LD_INT 18
59533: ST_TO_ADDR
// hc_gallery :=  ;
59534: LD_ADDR_OWVAR 33
59538: PUSH
59539: LD_STRING 
59541: ST_TO_ADDR
// end ;
59542: LD_VAR 0 1
59546: RET
// export function PrepareHorse ( ) ; begin
59547: LD_INT 0
59549: PPUSH
// uc_side := 0 ;
59550: LD_ADDR_OWVAR 20
59554: PUSH
59555: LD_INT 0
59557: ST_TO_ADDR
// uc_nation := 0 ;
59558: LD_ADDR_OWVAR 21
59562: PUSH
59563: LD_INT 0
59565: ST_TO_ADDR
// hc_class := class_horse ;
59566: LD_ADDR_OWVAR 28
59570: PUSH
59571: LD_INT 21
59573: ST_TO_ADDR
// hc_gallery :=  ;
59574: LD_ADDR_OWVAR 33
59578: PUSH
59579: LD_STRING 
59581: ST_TO_ADDR
// end ;
59582: LD_VAR 0 1
59586: RET
// export function PrepareMastodont ( ) ; begin
59587: LD_INT 0
59589: PPUSH
// uc_side := 0 ;
59590: LD_ADDR_OWVAR 20
59594: PUSH
59595: LD_INT 0
59597: ST_TO_ADDR
// uc_nation := 0 ;
59598: LD_ADDR_OWVAR 21
59602: PUSH
59603: LD_INT 0
59605: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59606: LD_ADDR_OWVAR 37
59610: PUSH
59611: LD_INT 31
59613: ST_TO_ADDR
// vc_control := control_rider ;
59614: LD_ADDR_OWVAR 38
59618: PUSH
59619: LD_INT 4
59621: ST_TO_ADDR
// end ;
59622: LD_VAR 0 1
59626: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59627: LD_INT 0
59629: PPUSH
59630: PPUSH
59631: PPUSH
// uc_side = 0 ;
59632: LD_ADDR_OWVAR 20
59636: PUSH
59637: LD_INT 0
59639: ST_TO_ADDR
// uc_nation = 0 ;
59640: LD_ADDR_OWVAR 21
59644: PUSH
59645: LD_INT 0
59647: ST_TO_ADDR
// InitHc_All ( ) ;
59648: CALL_OW 584
// InitVc ;
59652: CALL_OW 20
// if mastodonts then
59656: LD_VAR 0 6
59660: IFFALSE 59727
// for i = 1 to mastodonts do
59662: LD_ADDR_VAR 0 11
59666: PUSH
59667: DOUBLE
59668: LD_INT 1
59670: DEC
59671: ST_TO_ADDR
59672: LD_VAR 0 6
59676: PUSH
59677: FOR_TO
59678: IFFALSE 59725
// begin vc_chassis := 31 ;
59680: LD_ADDR_OWVAR 37
59684: PUSH
59685: LD_INT 31
59687: ST_TO_ADDR
// vc_control := control_rider ;
59688: LD_ADDR_OWVAR 38
59692: PUSH
59693: LD_INT 4
59695: ST_TO_ADDR
// animal := CreateVehicle ;
59696: LD_ADDR_VAR 0 12
59700: PUSH
59701: CALL_OW 45
59705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59706: LD_VAR 0 12
59710: PPUSH
59711: LD_VAR 0 8
59715: PPUSH
59716: LD_INT 0
59718: PPUSH
59719: CALL 61855 0 3
// end ;
59723: GO 59677
59725: POP
59726: POP
// if horses then
59727: LD_VAR 0 5
59731: IFFALSE 59798
// for i = 1 to horses do
59733: LD_ADDR_VAR 0 11
59737: PUSH
59738: DOUBLE
59739: LD_INT 1
59741: DEC
59742: ST_TO_ADDR
59743: LD_VAR 0 5
59747: PUSH
59748: FOR_TO
59749: IFFALSE 59796
// begin hc_class := 21 ;
59751: LD_ADDR_OWVAR 28
59755: PUSH
59756: LD_INT 21
59758: ST_TO_ADDR
// hc_gallery :=  ;
59759: LD_ADDR_OWVAR 33
59763: PUSH
59764: LD_STRING 
59766: ST_TO_ADDR
// animal := CreateHuman ;
59767: LD_ADDR_VAR 0 12
59771: PUSH
59772: CALL_OW 44
59776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59777: LD_VAR 0 12
59781: PPUSH
59782: LD_VAR 0 8
59786: PPUSH
59787: LD_INT 0
59789: PPUSH
59790: CALL 61855 0 3
// end ;
59794: GO 59748
59796: POP
59797: POP
// if birds then
59798: LD_VAR 0 1
59802: IFFALSE 59869
// for i = 1 to birds do
59804: LD_ADDR_VAR 0 11
59808: PUSH
59809: DOUBLE
59810: LD_INT 1
59812: DEC
59813: ST_TO_ADDR
59814: LD_VAR 0 1
59818: PUSH
59819: FOR_TO
59820: IFFALSE 59867
// begin hc_class := 18 ;
59822: LD_ADDR_OWVAR 28
59826: PUSH
59827: LD_INT 18
59829: ST_TO_ADDR
// hc_gallery =  ;
59830: LD_ADDR_OWVAR 33
59834: PUSH
59835: LD_STRING 
59837: ST_TO_ADDR
// animal := CreateHuman ;
59838: LD_ADDR_VAR 0 12
59842: PUSH
59843: CALL_OW 44
59847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59848: LD_VAR 0 12
59852: PPUSH
59853: LD_VAR 0 8
59857: PPUSH
59858: LD_INT 0
59860: PPUSH
59861: CALL 61855 0 3
// end ;
59865: GO 59819
59867: POP
59868: POP
// if tigers then
59869: LD_VAR 0 2
59873: IFFALSE 59957
// for i = 1 to tigers do
59875: LD_ADDR_VAR 0 11
59879: PUSH
59880: DOUBLE
59881: LD_INT 1
59883: DEC
59884: ST_TO_ADDR
59885: LD_VAR 0 2
59889: PUSH
59890: FOR_TO
59891: IFFALSE 59955
// begin hc_class = class_tiger ;
59893: LD_ADDR_OWVAR 28
59897: PUSH
59898: LD_INT 14
59900: ST_TO_ADDR
// hc_gallery =  ;
59901: LD_ADDR_OWVAR 33
59905: PUSH
59906: LD_STRING 
59908: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59909: LD_ADDR_OWVAR 35
59913: PUSH
59914: LD_INT 7
59916: NEG
59917: PPUSH
59918: LD_INT 7
59920: PPUSH
59921: CALL_OW 12
59925: ST_TO_ADDR
// animal := CreateHuman ;
59926: LD_ADDR_VAR 0 12
59930: PUSH
59931: CALL_OW 44
59935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59936: LD_VAR 0 12
59940: PPUSH
59941: LD_VAR 0 8
59945: PPUSH
59946: LD_INT 0
59948: PPUSH
59949: CALL 61855 0 3
// end ;
59953: GO 59890
59955: POP
59956: POP
// if apemans then
59957: LD_VAR 0 3
59961: IFFALSE 60084
// for i = 1 to apemans do
59963: LD_ADDR_VAR 0 11
59967: PUSH
59968: DOUBLE
59969: LD_INT 1
59971: DEC
59972: ST_TO_ADDR
59973: LD_VAR 0 3
59977: PUSH
59978: FOR_TO
59979: IFFALSE 60082
// begin hc_class = class_apeman ;
59981: LD_ADDR_OWVAR 28
59985: PUSH
59986: LD_INT 12
59988: ST_TO_ADDR
// hc_gallery =  ;
59989: LD_ADDR_OWVAR 33
59993: PUSH
59994: LD_STRING 
59996: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59997: LD_ADDR_OWVAR 35
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PPUSH
60006: LD_INT 2
60008: PPUSH
60009: CALL_OW 12
60013: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60014: LD_ADDR_OWVAR 31
60018: PUSH
60019: LD_INT 1
60021: PPUSH
60022: LD_INT 3
60024: PPUSH
60025: CALL_OW 12
60029: PUSH
60030: LD_INT 1
60032: PPUSH
60033: LD_INT 3
60035: PPUSH
60036: CALL_OW 12
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: ST_TO_ADDR
// animal := CreateHuman ;
60053: LD_ADDR_VAR 0 12
60057: PUSH
60058: CALL_OW 44
60062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60063: LD_VAR 0 12
60067: PPUSH
60068: LD_VAR 0 8
60072: PPUSH
60073: LD_INT 0
60075: PPUSH
60076: CALL 61855 0 3
// end ;
60080: GO 59978
60082: POP
60083: POP
// if enchidnas then
60084: LD_VAR 0 4
60088: IFFALSE 60155
// for i = 1 to enchidnas do
60090: LD_ADDR_VAR 0 11
60094: PUSH
60095: DOUBLE
60096: LD_INT 1
60098: DEC
60099: ST_TO_ADDR
60100: LD_VAR 0 4
60104: PUSH
60105: FOR_TO
60106: IFFALSE 60153
// begin hc_class = 13 ;
60108: LD_ADDR_OWVAR 28
60112: PUSH
60113: LD_INT 13
60115: ST_TO_ADDR
// hc_gallery =  ;
60116: LD_ADDR_OWVAR 33
60120: PUSH
60121: LD_STRING 
60123: ST_TO_ADDR
// animal := CreateHuman ;
60124: LD_ADDR_VAR 0 12
60128: PUSH
60129: CALL_OW 44
60133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60134: LD_VAR 0 12
60138: PPUSH
60139: LD_VAR 0 8
60143: PPUSH
60144: LD_INT 0
60146: PPUSH
60147: CALL 61855 0 3
// end ;
60151: GO 60105
60153: POP
60154: POP
// if fishes then
60155: LD_VAR 0 7
60159: IFFALSE 60226
// for i = 1 to fishes do
60161: LD_ADDR_VAR 0 11
60165: PUSH
60166: DOUBLE
60167: LD_INT 1
60169: DEC
60170: ST_TO_ADDR
60171: LD_VAR 0 7
60175: PUSH
60176: FOR_TO
60177: IFFALSE 60224
// begin hc_class = 20 ;
60179: LD_ADDR_OWVAR 28
60183: PUSH
60184: LD_INT 20
60186: ST_TO_ADDR
// hc_gallery =  ;
60187: LD_ADDR_OWVAR 33
60191: PUSH
60192: LD_STRING 
60194: ST_TO_ADDR
// animal := CreateHuman ;
60195: LD_ADDR_VAR 0 12
60199: PUSH
60200: CALL_OW 44
60204: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60205: LD_VAR 0 12
60209: PPUSH
60210: LD_VAR 0 9
60214: PPUSH
60215: LD_INT 0
60217: PPUSH
60218: CALL 61855 0 3
// end ;
60222: GO 60176
60224: POP
60225: POP
// end ;
60226: LD_VAR 0 10
60230: RET
// export function WantHeal ( sci , unit ) ; begin
60231: LD_INT 0
60233: PPUSH
// if GetTaskList ( sci ) > 0 then
60234: LD_VAR 0 1
60238: PPUSH
60239: CALL_OW 437
60243: PUSH
60244: LD_INT 0
60246: GREATER
60247: IFFALSE 60317
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 437
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PUSH
60263: LD_INT 1
60265: ARRAY
60266: PUSH
60267: LD_STRING l
60269: EQUAL
60270: PUSH
60271: LD_VAR 0 1
60275: PPUSH
60276: CALL_OW 437
60280: PUSH
60281: LD_INT 1
60283: ARRAY
60284: PUSH
60285: LD_INT 4
60287: ARRAY
60288: PUSH
60289: LD_VAR 0 2
60293: EQUAL
60294: AND
60295: IFFALSE 60307
// result := true else
60297: LD_ADDR_VAR 0 3
60301: PUSH
60302: LD_INT 1
60304: ST_TO_ADDR
60305: GO 60315
// result := false ;
60307: LD_ADDR_VAR 0 3
60311: PUSH
60312: LD_INT 0
60314: ST_TO_ADDR
// end else
60315: GO 60325
// result := false ;
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: LD_INT 0
60324: ST_TO_ADDR
// end ;
60325: LD_VAR 0 3
60329: RET
// export function HealTarget ( sci ) ; begin
60330: LD_INT 0
60332: PPUSH
// if not sci then
60333: LD_VAR 0 1
60337: NOT
60338: IFFALSE 60342
// exit ;
60340: GO 60407
// result := 0 ;
60342: LD_ADDR_VAR 0 2
60346: PUSH
60347: LD_INT 0
60349: ST_TO_ADDR
// if GetTaskList ( sci ) then
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL_OW 437
60359: IFFALSE 60407
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60361: LD_VAR 0 1
60365: PPUSH
60366: CALL_OW 437
60370: PUSH
60371: LD_INT 1
60373: ARRAY
60374: PUSH
60375: LD_INT 1
60377: ARRAY
60378: PUSH
60379: LD_STRING l
60381: EQUAL
60382: IFFALSE 60407
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60384: LD_ADDR_VAR 0 2
60388: PUSH
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL_OW 437
60398: PUSH
60399: LD_INT 1
60401: ARRAY
60402: PUSH
60403: LD_INT 4
60405: ARRAY
60406: ST_TO_ADDR
// end ;
60407: LD_VAR 0 2
60411: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60412: LD_INT 0
60414: PPUSH
60415: PPUSH
60416: PPUSH
60417: PPUSH
// if not base_units then
60418: LD_VAR 0 1
60422: NOT
60423: IFFALSE 60427
// exit ;
60425: GO 60514
// result := false ;
60427: LD_ADDR_VAR 0 2
60431: PUSH
60432: LD_INT 0
60434: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60435: LD_ADDR_VAR 0 5
60439: PUSH
60440: LD_VAR 0 1
60444: PPUSH
60445: LD_INT 21
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PPUSH
60455: CALL_OW 72
60459: ST_TO_ADDR
// if not tmp then
60460: LD_VAR 0 5
60464: NOT
60465: IFFALSE 60469
// exit ;
60467: GO 60514
// for i in tmp do
60469: LD_ADDR_VAR 0 3
60473: PUSH
60474: LD_VAR 0 5
60478: PUSH
60479: FOR_IN
60480: IFFALSE 60512
// begin result := EnemyInRange ( i , 22 ) ;
60482: LD_ADDR_VAR 0 2
60486: PUSH
60487: LD_VAR 0 3
60491: PPUSH
60492: LD_INT 22
60494: PPUSH
60495: CALL 58101 0 2
60499: ST_TO_ADDR
// if result then
60500: LD_VAR 0 2
60504: IFFALSE 60510
// exit ;
60506: POP
60507: POP
60508: GO 60514
// end ;
60510: GO 60479
60512: POP
60513: POP
// end ;
60514: LD_VAR 0 2
60518: RET
// export function FilterByTag ( units , tag ) ; begin
60519: LD_INT 0
60521: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60522: LD_ADDR_VAR 0 3
60526: PUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: LD_INT 120
60534: PUSH
60535: LD_VAR 0 2
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PPUSH
60544: CALL_OW 72
60548: ST_TO_ADDR
// end ;
60549: LD_VAR 0 3
60553: RET
// export function IsDriver ( un ) ; begin
60554: LD_INT 0
60556: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60557: LD_ADDR_VAR 0 2
60561: PUSH
60562: LD_VAR 0 1
60566: PUSH
60567: LD_INT 55
60569: PUSH
60570: EMPTY
60571: LIST
60572: PPUSH
60573: CALL_OW 69
60577: IN
60578: ST_TO_ADDR
// end ;
60579: LD_VAR 0 2
60583: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
// list := [ ] ;
60588: LD_ADDR_VAR 0 5
60592: PUSH
60593: EMPTY
60594: ST_TO_ADDR
// case d of 0 :
60595: LD_VAR 0 3
60599: PUSH
60600: LD_INT 0
60602: DOUBLE
60603: EQUAL
60604: IFTRUE 60608
60606: GO 60741
60608: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60609: LD_ADDR_VAR 0 5
60613: PUSH
60614: LD_VAR 0 1
60618: PUSH
60619: LD_INT 4
60621: MINUS
60622: PUSH
60623: LD_VAR 0 2
60627: PUSH
60628: LD_INT 4
60630: MINUS
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_INT 3
60647: MINUS
60648: PUSH
60649: LD_VAR 0 2
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: PUSH
60662: LD_VAR 0 1
60666: PUSH
60667: LD_INT 4
60669: PLUS
60670: PUSH
60671: LD_VAR 0 2
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_INT 3
60691: PLUS
60692: PUSH
60693: LD_VAR 0 2
60697: PUSH
60698: LD_INT 3
60700: PLUS
60701: PUSH
60702: LD_INT 5
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: PUSH
60710: LD_VAR 0 1
60714: PUSH
60715: LD_VAR 0 2
60719: PUSH
60720: LD_INT 4
60722: PLUS
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: LIST
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: ST_TO_ADDR
// end ; 1 :
60739: GO 61439
60741: LD_INT 1
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60749
60747: GO 60882
60749: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60750: LD_ADDR_VAR 0 5
60754: PUSH
60755: LD_VAR 0 1
60759: PUSH
60760: LD_VAR 0 2
60764: PUSH
60765: LD_INT 4
60767: MINUS
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: PUSH
60777: LD_VAR 0 1
60781: PUSH
60782: LD_INT 3
60784: MINUS
60785: PUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 3
60793: MINUS
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: PUSH
60803: LD_VAR 0 1
60807: PUSH
60808: LD_INT 4
60810: MINUS
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: LD_VAR 0 1
60829: PUSH
60830: LD_VAR 0 2
60834: PUSH
60835: LD_INT 3
60837: PLUS
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: LIST
60846: PUSH
60847: LD_VAR 0 1
60851: PUSH
60852: LD_INT 4
60854: PLUS
60855: PUSH
60856: LD_VAR 0 2
60860: PUSH
60861: LD_INT 4
60863: PLUS
60864: PUSH
60865: LD_INT 5
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// end ; 2 :
60880: GO 61439
60882: LD_INT 2
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60890
60888: GO 61019
60890: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 3
60908: MINUS
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_INT 4
60925: PLUS
60926: PUSH
60927: LD_VAR 0 2
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: PUSH
60940: LD_VAR 0 1
60944: PUSH
60945: LD_VAR 0 2
60949: PUSH
60950: LD_INT 4
60952: PLUS
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_VAR 0 1
60966: PUSH
60967: LD_INT 3
60969: MINUS
60970: PUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: PUSH
60984: LD_VAR 0 1
60988: PUSH
60989: LD_INT 4
60991: MINUS
60992: PUSH
60993: LD_VAR 0 2
60997: PUSH
60998: LD_INT 4
61000: MINUS
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: ST_TO_ADDR
// end ; 3 :
61017: GO 61439
61019: LD_INT 3
61021: DOUBLE
61022: EQUAL
61023: IFTRUE 61027
61025: GO 61160
61027: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61028: LD_ADDR_VAR 0 5
61032: PUSH
61033: LD_VAR 0 1
61037: PUSH
61038: LD_INT 3
61040: PLUS
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 4
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: LIST
61054: PUSH
61055: LD_VAR 0 1
61059: PUSH
61060: LD_INT 4
61062: PLUS
61063: PUSH
61064: LD_VAR 0 2
61068: PUSH
61069: LD_INT 4
61071: PLUS
61072: PUSH
61073: LD_INT 5
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_INT 4
61088: MINUS
61089: PUSH
61090: LD_VAR 0 2
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_VAR 0 2
61112: PUSH
61113: LD_INT 4
61115: MINUS
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: LD_VAR 0 1
61129: PUSH
61130: LD_INT 3
61132: MINUS
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 3
61141: MINUS
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// end ; 4 :
61158: GO 61439
61160: LD_INT 4
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61301
61168: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61169: LD_ADDR_VAR 0 5
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_VAR 0 2
61183: PUSH
61184: LD_INT 4
61186: PLUS
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: PUSH
61196: LD_VAR 0 1
61200: PUSH
61201: LD_INT 3
61203: PLUS
61204: PUSH
61205: LD_VAR 0 2
61209: PUSH
61210: LD_INT 3
61212: PLUS
61213: PUSH
61214: LD_INT 5
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_INT 4
61229: PLUS
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_INT 4
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: LD_VAR 0 1
61248: PUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 3
61256: MINUS
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 4
61273: MINUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 4
61282: MINUS
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: ST_TO_ADDR
// end ; 5 :
61299: GO 61439
61301: LD_INT 5
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61309
61307: GO 61438
61309: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: LD_VAR 0 1
61319: PUSH
61320: LD_INT 4
61322: MINUS
61323: PUSH
61324: LD_VAR 0 2
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: LD_VAR 0 1
61341: PUSH
61342: LD_VAR 0 2
61346: PUSH
61347: LD_INT 4
61349: MINUS
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: PUSH
61359: LD_VAR 0 1
61363: PUSH
61364: LD_INT 4
61366: PLUS
61367: PUSH
61368: LD_VAR 0 2
61372: PUSH
61373: LD_INT 4
61375: PLUS
61376: PUSH
61377: LD_INT 5
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: PUSH
61385: LD_VAR 0 1
61389: PUSH
61390: LD_INT 3
61392: PLUS
61393: PUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_VAR 0 2
61416: PUSH
61417: LD_INT 3
61419: PLUS
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: ST_TO_ADDR
// end ; end ;
61436: GO 61439
61438: POP
// result := list ;
61439: LD_ADDR_VAR 0 4
61443: PUSH
61444: LD_VAR 0 5
61448: ST_TO_ADDR
// end ;
61449: LD_VAR 0 4
61453: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61454: LD_INT 0
61456: PPUSH
61457: PPUSH
61458: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61459: LD_VAR 0 1
61463: NOT
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: IN
61488: NOT
61489: OR
61490: IFFALSE 61494
// exit ;
61492: GO 61577
// tmp := [ ] ;
61494: LD_ADDR_VAR 0 5
61498: PUSH
61499: EMPTY
61500: ST_TO_ADDR
// for i in units do
61501: LD_ADDR_VAR 0 4
61505: PUSH
61506: LD_VAR 0 1
61510: PUSH
61511: FOR_IN
61512: IFFALSE 61546
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61514: LD_ADDR_VAR 0 5
61518: PUSH
61519: LD_VAR 0 5
61523: PPUSH
61524: LD_VAR 0 4
61528: PPUSH
61529: LD_VAR 0 2
61533: PPUSH
61534: CALL_OW 259
61538: PPUSH
61539: CALL 62950 0 2
61543: ST_TO_ADDR
61544: GO 61511
61546: POP
61547: POP
// if not tmp then
61548: LD_VAR 0 5
61552: NOT
61553: IFFALSE 61557
// exit ;
61555: GO 61577
// result := SortListByListDesc ( units , tmp ) ;
61557: LD_ADDR_VAR 0 3
61561: PUSH
61562: LD_VAR 0 1
61566: PPUSH
61567: LD_VAR 0 5
61571: PPUSH
61572: CALL_OW 77
61576: ST_TO_ADDR
// end ;
61577: LD_VAR 0 3
61581: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61582: LD_INT 0
61584: PPUSH
61585: PPUSH
61586: PPUSH
// result := false ;
61587: LD_ADDR_VAR 0 3
61591: PUSH
61592: LD_INT 0
61594: ST_TO_ADDR
// if not building then
61595: LD_VAR 0 2
61599: NOT
61600: IFFALSE 61604
// exit ;
61602: GO 61742
// x := GetX ( building ) ;
61604: LD_ADDR_VAR 0 4
61608: PUSH
61609: LD_VAR 0 2
61613: PPUSH
61614: CALL_OW 250
61618: ST_TO_ADDR
// y := GetY ( building ) ;
61619: LD_ADDR_VAR 0 5
61623: PUSH
61624: LD_VAR 0 2
61628: PPUSH
61629: CALL_OW 251
61633: ST_TO_ADDR
// if not x or not y then
61634: LD_VAR 0 4
61638: NOT
61639: PUSH
61640: LD_VAR 0 5
61644: NOT
61645: OR
61646: IFFALSE 61650
// exit ;
61648: GO 61742
// if GetTaskList ( unit ) then
61650: LD_VAR 0 1
61654: PPUSH
61655: CALL_OW 437
61659: IFFALSE 61742
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61661: LD_STRING e
61663: PUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: CALL_OW 437
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: PUSH
61678: LD_INT 1
61680: ARRAY
61681: EQUAL
61682: PUSH
61683: LD_VAR 0 4
61687: PUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 437
61697: PUSH
61698: LD_INT 1
61700: ARRAY
61701: PUSH
61702: LD_INT 2
61704: ARRAY
61705: EQUAL
61706: AND
61707: PUSH
61708: LD_VAR 0 5
61712: PUSH
61713: LD_VAR 0 1
61717: PPUSH
61718: CALL_OW 437
61722: PUSH
61723: LD_INT 1
61725: ARRAY
61726: PUSH
61727: LD_INT 3
61729: ARRAY
61730: EQUAL
61731: AND
61732: IFFALSE 61742
// result := true end ;
61734: LD_ADDR_VAR 0 3
61738: PUSH
61739: LD_INT 1
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 3
61746: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61747: LD_INT 0
61749: PPUSH
// result := false ;
61750: LD_ADDR_VAR 0 4
61754: PUSH
61755: LD_INT 0
61757: ST_TO_ADDR
// if GetTaskList ( unit ) then
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 437
61767: IFFALSE 61850
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61769: LD_STRING M
61771: PUSH
61772: LD_VAR 0 1
61776: PPUSH
61777: CALL_OW 437
61781: PUSH
61782: LD_INT 1
61784: ARRAY
61785: PUSH
61786: LD_INT 1
61788: ARRAY
61789: EQUAL
61790: PUSH
61791: LD_VAR 0 2
61795: PUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 437
61805: PUSH
61806: LD_INT 1
61808: ARRAY
61809: PUSH
61810: LD_INT 2
61812: ARRAY
61813: EQUAL
61814: AND
61815: PUSH
61816: LD_VAR 0 3
61820: PUSH
61821: LD_VAR 0 1
61825: PPUSH
61826: CALL_OW 437
61830: PUSH
61831: LD_INT 1
61833: ARRAY
61834: PUSH
61835: LD_INT 3
61837: ARRAY
61838: EQUAL
61839: AND
61840: IFFALSE 61850
// result := true ;
61842: LD_ADDR_VAR 0 4
61846: PUSH
61847: LD_INT 1
61849: ST_TO_ADDR
// end ; end ;
61850: LD_VAR 0 4
61854: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61855: LD_INT 0
61857: PPUSH
61858: PPUSH
61859: PPUSH
61860: PPUSH
// if not unit or not area then
61861: LD_VAR 0 1
61865: NOT
61866: PUSH
61867: LD_VAR 0 2
61871: NOT
61872: OR
61873: IFFALSE 61877
// exit ;
61875: GO 62053
// tmp := AreaToList ( area , i ) ;
61877: LD_ADDR_VAR 0 6
61881: PUSH
61882: LD_VAR 0 2
61886: PPUSH
61887: LD_VAR 0 5
61891: PPUSH
61892: CALL_OW 517
61896: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61897: LD_ADDR_VAR 0 5
61901: PUSH
61902: DOUBLE
61903: LD_INT 1
61905: DEC
61906: ST_TO_ADDR
61907: LD_VAR 0 6
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PUSH
61916: FOR_TO
61917: IFFALSE 62051
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61919: LD_ADDR_VAR 0 7
61923: PUSH
61924: LD_VAR 0 6
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_VAR 0 5
61937: ARRAY
61938: PUSH
61939: LD_VAR 0 6
61943: PUSH
61944: LD_INT 2
61946: ARRAY
61947: PUSH
61948: LD_VAR 0 5
61952: ARRAY
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61958: LD_INT 92
61960: PUSH
61961: LD_VAR 0 7
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PUSH
61970: LD_VAR 0 7
61974: PUSH
61975: LD_INT 2
61977: ARRAY
61978: PUSH
61979: LD_INT 2
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: PPUSH
61988: CALL_OW 69
61992: PUSH
61993: LD_INT 0
61995: EQUAL
61996: IFFALSE 62049
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_VAR 0 7
62007: PUSH
62008: LD_INT 1
62010: ARRAY
62011: PPUSH
62012: LD_VAR 0 7
62016: PUSH
62017: LD_INT 2
62019: ARRAY
62020: PPUSH
62021: LD_VAR 0 3
62025: PPUSH
62026: CALL_OW 48
// result := IsPlaced ( unit ) ;
62030: LD_ADDR_VAR 0 4
62034: PUSH
62035: LD_VAR 0 1
62039: PPUSH
62040: CALL_OW 305
62044: ST_TO_ADDR
// exit ;
62045: POP
62046: POP
62047: GO 62053
// end ; end ;
62049: GO 61916
62051: POP
62052: POP
// end ;
62053: LD_VAR 0 4
62057: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62058: LD_INT 0
62060: PPUSH
62061: PPUSH
62062: PPUSH
// if not side or side > 8 then
62063: LD_VAR 0 1
62067: NOT
62068: PUSH
62069: LD_VAR 0 1
62073: PUSH
62074: LD_INT 8
62076: GREATER
62077: OR
62078: IFFALSE 62082
// exit ;
62080: GO 62269
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62082: LD_ADDR_VAR 0 4
62086: PUSH
62087: LD_INT 22
62089: PUSH
62090: LD_VAR 0 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 21
62101: PUSH
62102: LD_INT 3
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PPUSH
62113: CALL_OW 69
62117: ST_TO_ADDR
// if not tmp then
62118: LD_VAR 0 4
62122: NOT
62123: IFFALSE 62127
// exit ;
62125: GO 62269
// enable_addtolog := true ;
62127: LD_ADDR_OWVAR 81
62131: PUSH
62132: LD_INT 1
62134: ST_TO_ADDR
// AddToLog ( [ ) ;
62135: LD_STRING [
62137: PPUSH
62138: CALL_OW 561
// for i in tmp do
62142: LD_ADDR_VAR 0 3
62146: PUSH
62147: LD_VAR 0 4
62151: PUSH
62152: FOR_IN
62153: IFFALSE 62260
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62155: LD_STRING [
62157: PUSH
62158: LD_VAR 0 3
62162: PPUSH
62163: CALL_OW 266
62167: STR
62168: PUSH
62169: LD_STRING , 
62171: STR
62172: PUSH
62173: LD_VAR 0 3
62177: PPUSH
62178: CALL_OW 250
62182: STR
62183: PUSH
62184: LD_STRING , 
62186: STR
62187: PUSH
62188: LD_VAR 0 3
62192: PPUSH
62193: CALL_OW 251
62197: STR
62198: PUSH
62199: LD_STRING , 
62201: STR
62202: PUSH
62203: LD_VAR 0 3
62207: PPUSH
62208: CALL_OW 254
62212: STR
62213: PUSH
62214: LD_STRING , 
62216: STR
62217: PUSH
62218: LD_VAR 0 3
62222: PPUSH
62223: LD_INT 1
62225: PPUSH
62226: CALL_OW 268
62230: STR
62231: PUSH
62232: LD_STRING , 
62234: STR
62235: PUSH
62236: LD_VAR 0 3
62240: PPUSH
62241: LD_INT 2
62243: PPUSH
62244: CALL_OW 268
62248: STR
62249: PUSH
62250: LD_STRING ],
62252: STR
62253: PPUSH
62254: CALL_OW 561
// end ;
62258: GO 62152
62260: POP
62261: POP
// AddToLog ( ]; ) ;
62262: LD_STRING ];
62264: PPUSH
62265: CALL_OW 561
// end ;
62269: LD_VAR 0 2
62273: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62274: LD_INT 0
62276: PPUSH
62277: PPUSH
62278: PPUSH
62279: PPUSH
62280: PPUSH
// if not area or not rate or not max then
62281: LD_VAR 0 1
62285: NOT
62286: PUSH
62287: LD_VAR 0 2
62291: NOT
62292: OR
62293: PUSH
62294: LD_VAR 0 4
62298: NOT
62299: OR
62300: IFFALSE 62304
// exit ;
62302: GO 62493
// while 1 do
62304: LD_INT 1
62306: IFFALSE 62493
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62308: LD_ADDR_VAR 0 9
62312: PUSH
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_INT 1
62320: PPUSH
62321: CALL_OW 287
62325: PUSH
62326: LD_INT 10
62328: MUL
62329: ST_TO_ADDR
// r := rate / 10 ;
62330: LD_ADDR_VAR 0 7
62334: PUSH
62335: LD_VAR 0 2
62339: PUSH
62340: LD_INT 10
62342: DIVREAL
62343: ST_TO_ADDR
// time := 1 1$00 ;
62344: LD_ADDR_VAR 0 8
62348: PUSH
62349: LD_INT 2100
62351: ST_TO_ADDR
// if amount < min then
62352: LD_VAR 0 9
62356: PUSH
62357: LD_VAR 0 3
62361: LESS
62362: IFFALSE 62380
// r := r * 2 else
62364: LD_ADDR_VAR 0 7
62368: PUSH
62369: LD_VAR 0 7
62373: PUSH
62374: LD_INT 2
62376: MUL
62377: ST_TO_ADDR
62378: GO 62406
// if amount > max then
62380: LD_VAR 0 9
62384: PUSH
62385: LD_VAR 0 4
62389: GREATER
62390: IFFALSE 62406
// r := r / 2 ;
62392: LD_ADDR_VAR 0 7
62396: PUSH
62397: LD_VAR 0 7
62401: PUSH
62402: LD_INT 2
62404: DIVREAL
62405: ST_TO_ADDR
// time := time / r ;
62406: LD_ADDR_VAR 0 8
62410: PUSH
62411: LD_VAR 0 8
62415: PUSH
62416: LD_VAR 0 7
62420: DIVREAL
62421: ST_TO_ADDR
// if time < 0 then
62422: LD_VAR 0 8
62426: PUSH
62427: LD_INT 0
62429: LESS
62430: IFFALSE 62447
// time := time * - 1 ;
62432: LD_ADDR_VAR 0 8
62436: PUSH
62437: LD_VAR 0 8
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: MUL
62446: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62447: LD_VAR 0 8
62451: PUSH
62452: LD_INT 35
62454: PPUSH
62455: LD_INT 875
62457: PPUSH
62458: CALL_OW 12
62462: PLUS
62463: PPUSH
62464: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62468: LD_INT 1
62470: PPUSH
62471: LD_INT 5
62473: PPUSH
62474: CALL_OW 12
62478: PPUSH
62479: LD_VAR 0 1
62483: PPUSH
62484: LD_INT 1
62486: PPUSH
62487: CALL_OW 55
// end ;
62491: GO 62304
// end ;
62493: LD_VAR 0 5
62497: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62498: LD_INT 0
62500: PPUSH
62501: PPUSH
62502: PPUSH
62503: PPUSH
62504: PPUSH
62505: PPUSH
62506: PPUSH
62507: PPUSH
// if not turrets or not factories then
62508: LD_VAR 0 1
62512: NOT
62513: PUSH
62514: LD_VAR 0 2
62518: NOT
62519: OR
62520: IFFALSE 62524
// exit ;
62522: GO 62831
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62524: LD_ADDR_VAR 0 10
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: LD_INT 6
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: LD_INT 4
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 5
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 24
62566: PUSH
62567: LD_INT 25
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 23
62576: PUSH
62577: LD_INT 27
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 42
62590: PUSH
62591: LD_INT 43
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 44
62600: PUSH
62601: LD_INT 46
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 45
62610: PUSH
62611: LD_INT 47
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: ST_TO_ADDR
// result := [ ] ;
62628: LD_ADDR_VAR 0 3
62632: PUSH
62633: EMPTY
62634: ST_TO_ADDR
// for i in turrets do
62635: LD_ADDR_VAR 0 4
62639: PUSH
62640: LD_VAR 0 1
62644: PUSH
62645: FOR_IN
62646: IFFALSE 62829
// begin nat := GetNation ( i ) ;
62648: LD_ADDR_VAR 0 7
62652: PUSH
62653: LD_VAR 0 4
62657: PPUSH
62658: CALL_OW 248
62662: ST_TO_ADDR
// weapon := 0 ;
62663: LD_ADDR_VAR 0 8
62667: PUSH
62668: LD_INT 0
62670: ST_TO_ADDR
// if not nat then
62671: LD_VAR 0 7
62675: NOT
62676: IFFALSE 62680
// continue ;
62678: GO 62645
// for j in list [ nat ] do
62680: LD_ADDR_VAR 0 5
62684: PUSH
62685: LD_VAR 0 10
62689: PUSH
62690: LD_VAR 0 7
62694: ARRAY
62695: PUSH
62696: FOR_IN
62697: IFFALSE 62738
// if GetBWeapon ( i ) = j [ 1 ] then
62699: LD_VAR 0 4
62703: PPUSH
62704: CALL_OW 269
62708: PUSH
62709: LD_VAR 0 5
62713: PUSH
62714: LD_INT 1
62716: ARRAY
62717: EQUAL
62718: IFFALSE 62736
// begin weapon := j [ 2 ] ;
62720: LD_ADDR_VAR 0 8
62724: PUSH
62725: LD_VAR 0 5
62729: PUSH
62730: LD_INT 2
62732: ARRAY
62733: ST_TO_ADDR
// break ;
62734: GO 62738
// end ;
62736: GO 62696
62738: POP
62739: POP
// if not weapon then
62740: LD_VAR 0 8
62744: NOT
62745: IFFALSE 62749
// continue ;
62747: GO 62645
// for k in factories do
62749: LD_ADDR_VAR 0 6
62753: PUSH
62754: LD_VAR 0 2
62758: PUSH
62759: FOR_IN
62760: IFFALSE 62825
// begin weapons := AvailableWeaponList ( k ) ;
62762: LD_ADDR_VAR 0 9
62766: PUSH
62767: LD_VAR 0 6
62771: PPUSH
62772: CALL_OW 478
62776: ST_TO_ADDR
// if not weapons then
62777: LD_VAR 0 9
62781: NOT
62782: IFFALSE 62786
// continue ;
62784: GO 62759
// if weapon in weapons then
62786: LD_VAR 0 8
62790: PUSH
62791: LD_VAR 0 9
62795: IN
62796: IFFALSE 62823
// begin result := [ i , weapon ] ;
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_VAR 0 4
62807: PUSH
62808: LD_VAR 0 8
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// exit ;
62817: POP
62818: POP
62819: POP
62820: POP
62821: GO 62831
// end ; end ;
62823: GO 62759
62825: POP
62826: POP
// end ;
62827: GO 62645
62829: POP
62830: POP
// end ;
62831: LD_VAR 0 3
62835: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62836: LD_INT 0
62838: PPUSH
// if not side or side > 8 then
62839: LD_VAR 0 3
62843: NOT
62844: PUSH
62845: LD_VAR 0 3
62849: PUSH
62850: LD_INT 8
62852: GREATER
62853: OR
62854: IFFALSE 62858
// exit ;
62856: GO 62917
// if not range then
62858: LD_VAR 0 4
62862: NOT
62863: IFFALSE 62874
// range := - 12 ;
62865: LD_ADDR_VAR 0 4
62869: PUSH
62870: LD_INT 12
62872: NEG
62873: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62874: LD_VAR 0 1
62878: PPUSH
62879: LD_VAR 0 2
62883: PPUSH
62884: LD_VAR 0 3
62888: PPUSH
62889: LD_VAR 0 4
62893: PPUSH
62894: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62898: LD_VAR 0 1
62902: PPUSH
62903: LD_VAR 0 2
62907: PPUSH
62908: LD_VAR 0 3
62912: PPUSH
62913: CALL_OW 331
// end ;
62917: LD_VAR 0 5
62921: RET
// export function Video ( mode ) ; begin
62922: LD_INT 0
62924: PPUSH
// ingame_video = mode ;
62925: LD_ADDR_OWVAR 52
62929: PUSH
62930: LD_VAR 0 1
62934: ST_TO_ADDR
// interface_hidden = mode ;
62935: LD_ADDR_OWVAR 54
62939: PUSH
62940: LD_VAR 0 1
62944: ST_TO_ADDR
// end ;
62945: LD_VAR 0 2
62949: RET
// export function Join ( array , element ) ; begin
62950: LD_INT 0
62952: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62953: LD_ADDR_VAR 0 3
62957: PUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_VAR 0 1
62967: PUSH
62968: LD_INT 1
62970: PLUS
62971: PPUSH
62972: LD_VAR 0 2
62976: PPUSH
62977: CALL_OW 1
62981: ST_TO_ADDR
// end ;
62982: LD_VAR 0 3
62986: RET
// export function JoinUnion ( array , element ) ; begin
62987: LD_INT 0
62989: PPUSH
// result := array union element ;
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_VAR 0 2
63004: UNION
63005: ST_TO_ADDR
// end ;
63006: LD_VAR 0 3
63010: RET
// export function GetBehemoths ( side ) ; begin
63011: LD_INT 0
63013: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63014: LD_ADDR_VAR 0 2
63018: PUSH
63019: LD_INT 22
63021: PUSH
63022: LD_VAR 0 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 31
63033: PUSH
63034: LD_INT 25
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PPUSH
63045: CALL_OW 69
63049: ST_TO_ADDR
// end ;
63050: LD_VAR 0 2
63054: RET
// export function Shuffle ( array ) ; var i , index ; begin
63055: LD_INT 0
63057: PPUSH
63058: PPUSH
63059: PPUSH
// result := [ ] ;
63060: LD_ADDR_VAR 0 2
63064: PUSH
63065: EMPTY
63066: ST_TO_ADDR
// if not array then
63067: LD_VAR 0 1
63071: NOT
63072: IFFALSE 63076
// exit ;
63074: GO 63175
// Randomize ;
63076: CALL_OW 10
// for i = array downto 1 do
63080: LD_ADDR_VAR 0 3
63084: PUSH
63085: DOUBLE
63086: LD_VAR 0 1
63090: INC
63091: ST_TO_ADDR
63092: LD_INT 1
63094: PUSH
63095: FOR_DOWNTO
63096: IFFALSE 63173
// begin index := rand ( 1 , array ) ;
63098: LD_ADDR_VAR 0 4
63102: PUSH
63103: LD_INT 1
63105: PPUSH
63106: LD_VAR 0 1
63110: PPUSH
63111: CALL_OW 12
63115: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63116: LD_ADDR_VAR 0 2
63120: PUSH
63121: LD_VAR 0 2
63125: PPUSH
63126: LD_VAR 0 2
63130: PUSH
63131: LD_INT 1
63133: PLUS
63134: PPUSH
63135: LD_VAR 0 1
63139: PUSH
63140: LD_VAR 0 4
63144: ARRAY
63145: PPUSH
63146: CALL_OW 2
63150: ST_TO_ADDR
// array := Delete ( array , index ) ;
63151: LD_ADDR_VAR 0 1
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: LD_VAR 0 4
63165: PPUSH
63166: CALL_OW 3
63170: ST_TO_ADDR
// end ;
63171: GO 63095
63173: POP
63174: POP
// end ;
63175: LD_VAR 0 2
63179: RET
// export function GetBaseMaterials ( base ) ; begin
63180: LD_INT 0
63182: PPUSH
// result := [ 0 , 0 , 0 ] ;
63183: LD_ADDR_VAR 0 2
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// if not base then
63202: LD_VAR 0 1
63206: NOT
63207: IFFALSE 63211
// exit ;
63209: GO 63260
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63211: LD_ADDR_VAR 0 2
63215: PUSH
63216: LD_VAR 0 1
63220: PPUSH
63221: LD_INT 1
63223: PPUSH
63224: CALL_OW 275
63228: PUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: LD_INT 2
63236: PPUSH
63237: CALL_OW 275
63241: PUSH
63242: LD_VAR 0 1
63246: PPUSH
63247: LD_INT 3
63249: PPUSH
63250: CALL_OW 275
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: ST_TO_ADDR
// end ;
63260: LD_VAR 0 2
63264: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63265: LD_INT 0
63267: PPUSH
63268: PPUSH
// result := array ;
63269: LD_ADDR_VAR 0 3
63273: PUSH
63274: LD_VAR 0 1
63278: ST_TO_ADDR
// if size >= result then
63279: LD_VAR 0 2
63283: PUSH
63284: LD_VAR 0 3
63288: GREATEREQUAL
63289: IFFALSE 63293
// exit ;
63291: GO 63343
// if size then
63293: LD_VAR 0 2
63297: IFFALSE 63343
// for i := array downto size do
63299: LD_ADDR_VAR 0 4
63303: PUSH
63304: DOUBLE
63305: LD_VAR 0 1
63309: INC
63310: ST_TO_ADDR
63311: LD_VAR 0 2
63315: PUSH
63316: FOR_DOWNTO
63317: IFFALSE 63341
// result := Delete ( result , result ) ;
63319: LD_ADDR_VAR 0 3
63323: PUSH
63324: LD_VAR 0 3
63328: PPUSH
63329: LD_VAR 0 3
63333: PPUSH
63334: CALL_OW 3
63338: ST_TO_ADDR
63339: GO 63316
63341: POP
63342: POP
// end ;
63343: LD_VAR 0 3
63347: RET
// export function ComExit ( unit ) ; var tmp ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
// if not IsInUnit ( unit ) then
63352: LD_VAR 0 1
63356: PPUSH
63357: CALL_OW 310
63361: NOT
63362: IFFALSE 63366
// exit ;
63364: GO 63426
// tmp := IsInUnit ( unit ) ;
63366: LD_ADDR_VAR 0 3
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 310
63380: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63381: LD_VAR 0 3
63385: PPUSH
63386: CALL_OW 247
63390: PUSH
63391: LD_INT 2
63393: EQUAL
63394: IFFALSE 63407
// ComExitVehicle ( unit ) else
63396: LD_VAR 0 1
63400: PPUSH
63401: CALL_OW 121
63405: GO 63416
// ComExitBuilding ( unit ) ;
63407: LD_VAR 0 1
63411: PPUSH
63412: CALL_OW 122
// result := tmp ;
63416: LD_ADDR_VAR 0 2
63420: PUSH
63421: LD_VAR 0 3
63425: ST_TO_ADDR
// end ;
63426: LD_VAR 0 2
63430: RET
// export function ComExitAll ( units ) ; var i ; begin
63431: LD_INT 0
63433: PPUSH
63434: PPUSH
// if not units then
63435: LD_VAR 0 1
63439: NOT
63440: IFFALSE 63444
// exit ;
63442: GO 63470
// for i in units do
63444: LD_ADDR_VAR 0 3
63448: PUSH
63449: LD_VAR 0 1
63453: PUSH
63454: FOR_IN
63455: IFFALSE 63468
// ComExit ( i ) ;
63457: LD_VAR 0 3
63461: PPUSH
63462: CALL 63348 0 1
63466: GO 63454
63468: POP
63469: POP
// end ;
63470: LD_VAR 0 2
63474: RET
// export function ResetHc ; begin
63475: LD_INT 0
63477: PPUSH
// InitHc ;
63478: CALL_OW 19
// hc_importance := 0 ;
63482: LD_ADDR_OWVAR 32
63486: PUSH
63487: LD_INT 0
63489: ST_TO_ADDR
// end ;
63490: LD_VAR 0 1
63494: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63495: LD_INT 0
63497: PPUSH
63498: PPUSH
63499: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63500: LD_ADDR_VAR 0 6
63504: PUSH
63505: LD_VAR 0 1
63509: PUSH
63510: LD_VAR 0 3
63514: PLUS
63515: PUSH
63516: LD_INT 2
63518: DIV
63519: ST_TO_ADDR
// if _x < 0 then
63520: LD_VAR 0 6
63524: PUSH
63525: LD_INT 0
63527: LESS
63528: IFFALSE 63545
// _x := _x * - 1 ;
63530: LD_ADDR_VAR 0 6
63534: PUSH
63535: LD_VAR 0 6
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: MUL
63544: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63545: LD_ADDR_VAR 0 7
63549: PUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_VAR 0 4
63559: PLUS
63560: PUSH
63561: LD_INT 2
63563: DIV
63564: ST_TO_ADDR
// if _y < 0 then
63565: LD_VAR 0 7
63569: PUSH
63570: LD_INT 0
63572: LESS
63573: IFFALSE 63590
// _y := _y * - 1 ;
63575: LD_ADDR_VAR 0 7
63579: PUSH
63580: LD_VAR 0 7
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: MUL
63589: ST_TO_ADDR
// result := [ _x , _y ] ;
63590: LD_ADDR_VAR 0 5
63594: PUSH
63595: LD_VAR 0 6
63599: PUSH
63600: LD_VAR 0 7
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// end ;
63609: LD_VAR 0 5
63613: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63614: LD_INT 0
63616: PPUSH
63617: PPUSH
63618: PPUSH
63619: PPUSH
// task := GetTaskList ( unit ) ;
63620: LD_ADDR_VAR 0 7
63624: PUSH
63625: LD_VAR 0 1
63629: PPUSH
63630: CALL_OW 437
63634: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63635: LD_VAR 0 7
63639: NOT
63640: PUSH
63641: LD_VAR 0 1
63645: PPUSH
63646: LD_VAR 0 2
63650: PPUSH
63651: CALL_OW 308
63655: NOT
63656: AND
63657: IFFALSE 63661
// exit ;
63659: GO 63779
// if IsInArea ( unit , area ) then
63661: LD_VAR 0 1
63665: PPUSH
63666: LD_VAR 0 2
63670: PPUSH
63671: CALL_OW 308
63675: IFFALSE 63693
// begin ComMoveToArea ( unit , goAway ) ;
63677: LD_VAR 0 1
63681: PPUSH
63682: LD_VAR 0 3
63686: PPUSH
63687: CALL_OW 113
// exit ;
63691: GO 63779
// end ; if task [ 1 ] [ 1 ] <> M then
63693: LD_VAR 0 7
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: PUSH
63702: LD_INT 1
63704: ARRAY
63705: PUSH
63706: LD_STRING M
63708: NONEQUAL
63709: IFFALSE 63713
// exit ;
63711: GO 63779
// x := task [ 1 ] [ 2 ] ;
63713: LD_ADDR_VAR 0 5
63717: PUSH
63718: LD_VAR 0 7
63722: PUSH
63723: LD_INT 1
63725: ARRAY
63726: PUSH
63727: LD_INT 2
63729: ARRAY
63730: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63731: LD_ADDR_VAR 0 6
63735: PUSH
63736: LD_VAR 0 7
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PUSH
63745: LD_INT 3
63747: ARRAY
63748: ST_TO_ADDR
// if InArea ( x , y , area ) then
63749: LD_VAR 0 5
63753: PPUSH
63754: LD_VAR 0 6
63758: PPUSH
63759: LD_VAR 0 2
63763: PPUSH
63764: CALL_OW 309
63768: IFFALSE 63779
// ComStop ( unit ) ;
63770: LD_VAR 0 1
63774: PPUSH
63775: CALL_OW 141
// end ;
63779: LD_VAR 0 4
63783: RET
// export function Abs ( value ) ; begin
63784: LD_INT 0
63786: PPUSH
// result := value ;
63787: LD_ADDR_VAR 0 2
63791: PUSH
63792: LD_VAR 0 1
63796: ST_TO_ADDR
// if value < 0 then
63797: LD_VAR 0 1
63801: PUSH
63802: LD_INT 0
63804: LESS
63805: IFFALSE 63822
// result := value * - 1 ;
63807: LD_ADDR_VAR 0 2
63811: PUSH
63812: LD_VAR 0 1
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: MUL
63821: ST_TO_ADDR
// end ;
63822: LD_VAR 0 2
63826: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63827: LD_INT 0
63829: PPUSH
63830: PPUSH
63831: PPUSH
63832: PPUSH
63833: PPUSH
63834: PPUSH
63835: PPUSH
63836: PPUSH
// if not unit or not building then
63837: LD_VAR 0 1
63841: NOT
63842: PUSH
63843: LD_VAR 0 2
63847: NOT
63848: OR
63849: IFFALSE 63853
// exit ;
63851: GO 64079
// x := GetX ( building ) ;
63853: LD_ADDR_VAR 0 4
63857: PUSH
63858: LD_VAR 0 2
63862: PPUSH
63863: CALL_OW 250
63867: ST_TO_ADDR
// y := GetY ( building ) ;
63868: LD_ADDR_VAR 0 6
63872: PUSH
63873: LD_VAR 0 2
63877: PPUSH
63878: CALL_OW 251
63882: ST_TO_ADDR
// d := GetDir ( building ) ;
63883: LD_ADDR_VAR 0 8
63887: PUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: CALL_OW 254
63897: ST_TO_ADDR
// r := 4 ;
63898: LD_ADDR_VAR 0 9
63902: PUSH
63903: LD_INT 4
63905: ST_TO_ADDR
// for i := 1 to 5 do
63906: LD_ADDR_VAR 0 10
63910: PUSH
63911: DOUBLE
63912: LD_INT 1
63914: DEC
63915: ST_TO_ADDR
63916: LD_INT 5
63918: PUSH
63919: FOR_TO
63920: IFFALSE 64077
// begin _x := ShiftX ( x , d , r + i ) ;
63922: LD_ADDR_VAR 0 5
63926: PUSH
63927: LD_VAR 0 4
63931: PPUSH
63932: LD_VAR 0 8
63936: PPUSH
63937: LD_VAR 0 9
63941: PUSH
63942: LD_VAR 0 10
63946: PLUS
63947: PPUSH
63948: CALL_OW 272
63952: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63953: LD_ADDR_VAR 0 7
63957: PUSH
63958: LD_VAR 0 6
63962: PPUSH
63963: LD_VAR 0 8
63967: PPUSH
63968: LD_VAR 0 9
63972: PUSH
63973: LD_VAR 0 10
63977: PLUS
63978: PPUSH
63979: CALL_OW 273
63983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63984: LD_VAR 0 5
63988: PPUSH
63989: LD_VAR 0 7
63993: PPUSH
63994: CALL_OW 488
63998: PUSH
63999: LD_VAR 0 5
64003: PPUSH
64004: LD_VAR 0 7
64008: PPUSH
64009: CALL_OW 428
64013: PPUSH
64014: CALL_OW 247
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: IN
64029: NOT
64030: AND
64031: IFFALSE 64075
// begin ComMoveXY ( unit , _x , _y ) ;
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 5
64042: PPUSH
64043: LD_VAR 0 7
64047: PPUSH
64048: CALL_OW 111
// result := [ _x , _y ] ;
64052: LD_ADDR_VAR 0 3
64056: PUSH
64057: LD_VAR 0 5
64061: PUSH
64062: LD_VAR 0 7
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: ST_TO_ADDR
// exit ;
64071: POP
64072: POP
64073: GO 64079
// end ; end ;
64075: GO 63919
64077: POP
64078: POP
// end ;
64079: LD_VAR 0 3
64083: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64084: LD_INT 0
64086: PPUSH
64087: PPUSH
64088: PPUSH
// result := 0 ;
64089: LD_ADDR_VAR 0 3
64093: PUSH
64094: LD_INT 0
64096: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64097: LD_VAR 0 1
64101: PUSH
64102: LD_INT 0
64104: LESS
64105: PUSH
64106: LD_VAR 0 1
64110: PUSH
64111: LD_INT 8
64113: GREATER
64114: OR
64115: PUSH
64116: LD_VAR 0 2
64120: PUSH
64121: LD_INT 0
64123: LESS
64124: OR
64125: PUSH
64126: LD_VAR 0 2
64130: PUSH
64131: LD_INT 8
64133: GREATER
64134: OR
64135: IFFALSE 64139
// exit ;
64137: GO 64214
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64139: LD_ADDR_VAR 0 4
64143: PUSH
64144: LD_INT 22
64146: PUSH
64147: LD_VAR 0 2
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PPUSH
64156: CALL_OW 69
64160: PUSH
64161: FOR_IN
64162: IFFALSE 64212
// begin un := UnitShoot ( i ) ;
64164: LD_ADDR_VAR 0 5
64168: PUSH
64169: LD_VAR 0 4
64173: PPUSH
64174: CALL_OW 504
64178: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64179: LD_VAR 0 5
64183: PPUSH
64184: CALL_OW 255
64188: PUSH
64189: LD_VAR 0 1
64193: EQUAL
64194: IFFALSE 64210
// begin result := un ;
64196: LD_ADDR_VAR 0 3
64200: PUSH
64201: LD_VAR 0 5
64205: ST_TO_ADDR
// exit ;
64206: POP
64207: POP
64208: GO 64214
// end ; end ;
64210: GO 64161
64212: POP
64213: POP
// end ;
64214: LD_VAR 0 3
64218: RET
// export function GetCargoBay ( units ) ; begin
64219: LD_INT 0
64221: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64222: LD_ADDR_VAR 0 2
64226: PUSH
64227: LD_VAR 0 1
64231: PPUSH
64232: LD_INT 2
64234: PUSH
64235: LD_INT 34
64237: PUSH
64238: LD_INT 12
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 34
64247: PUSH
64248: LD_INT 51
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 34
64257: PUSH
64258: LD_INT 32
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 34
64267: PUSH
64268: LD_INT 89
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: PPUSH
64282: CALL_OW 72
64286: ST_TO_ADDR
// end ;
64287: LD_VAR 0 2
64291: RET
// export function Negate ( value ) ; begin
64292: LD_INT 0
64294: PPUSH
// result := not value ;
64295: LD_ADDR_VAR 0 2
64299: PUSH
64300: LD_VAR 0 1
64304: NOT
64305: ST_TO_ADDR
// end ;
64306: LD_VAR 0 2
64310: RET
// export function Inc ( value ) ; begin
64311: LD_INT 0
64313: PPUSH
// result := value + 1 ;
64314: LD_ADDR_VAR 0 2
64318: PUSH
64319: LD_VAR 0 1
64323: PUSH
64324: LD_INT 1
64326: PLUS
64327: ST_TO_ADDR
// end ;
64328: LD_VAR 0 2
64332: RET
// export function Dec ( value ) ; begin
64333: LD_INT 0
64335: PPUSH
// result := value - 1 ;
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_VAR 0 1
64345: PUSH
64346: LD_INT 1
64348: MINUS
64349: ST_TO_ADDR
// end ;
64350: LD_VAR 0 2
64354: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64355: LD_INT 0
64357: PPUSH
64358: PPUSH
64359: PPUSH
64360: PPUSH
64361: PPUSH
64362: PPUSH
64363: PPUSH
64364: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64365: LD_VAR 0 1
64369: PPUSH
64370: LD_VAR 0 2
64374: PPUSH
64375: CALL_OW 488
64379: NOT
64380: PUSH
64381: LD_VAR 0 3
64385: PPUSH
64386: LD_VAR 0 4
64390: PPUSH
64391: CALL_OW 488
64395: NOT
64396: OR
64397: IFFALSE 64410
// begin result := - 1 ;
64399: LD_ADDR_VAR 0 5
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: ST_TO_ADDR
// exit ;
64408: GO 64645
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64410: LD_ADDR_VAR 0 12
64414: PUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: LD_VAR 0 3
64429: PPUSH
64430: LD_VAR 0 4
64434: PPUSH
64435: CALL 63495 0 4
64439: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64440: LD_ADDR_VAR 0 11
64444: PUSH
64445: LD_VAR 0 1
64449: PPUSH
64450: LD_VAR 0 2
64454: PPUSH
64455: LD_VAR 0 12
64459: PUSH
64460: LD_INT 1
64462: ARRAY
64463: PPUSH
64464: LD_VAR 0 12
64468: PUSH
64469: LD_INT 2
64471: ARRAY
64472: PPUSH
64473: CALL_OW 298
64477: ST_TO_ADDR
// distance := 9999 ;
64478: LD_ADDR_VAR 0 10
64482: PUSH
64483: LD_INT 9999
64485: ST_TO_ADDR
// for i := 0 to 5 do
64486: LD_ADDR_VAR 0 6
64490: PUSH
64491: DOUBLE
64492: LD_INT 0
64494: DEC
64495: ST_TO_ADDR
64496: LD_INT 5
64498: PUSH
64499: FOR_TO
64500: IFFALSE 64643
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64502: LD_ADDR_VAR 0 7
64506: PUSH
64507: LD_VAR 0 1
64511: PPUSH
64512: LD_VAR 0 6
64516: PPUSH
64517: LD_VAR 0 11
64521: PPUSH
64522: CALL_OW 272
64526: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64527: LD_ADDR_VAR 0 8
64531: PUSH
64532: LD_VAR 0 2
64536: PPUSH
64537: LD_VAR 0 6
64541: PPUSH
64542: LD_VAR 0 11
64546: PPUSH
64547: CALL_OW 273
64551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64552: LD_VAR 0 7
64556: PPUSH
64557: LD_VAR 0 8
64561: PPUSH
64562: CALL_OW 488
64566: NOT
64567: IFFALSE 64571
// continue ;
64569: GO 64499
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64571: LD_ADDR_VAR 0 9
64575: PUSH
64576: LD_VAR 0 12
64580: PUSH
64581: LD_INT 1
64583: ARRAY
64584: PPUSH
64585: LD_VAR 0 12
64589: PUSH
64590: LD_INT 2
64592: ARRAY
64593: PPUSH
64594: LD_VAR 0 7
64598: PPUSH
64599: LD_VAR 0 8
64603: PPUSH
64604: CALL_OW 298
64608: ST_TO_ADDR
// if tmp < distance then
64609: LD_VAR 0 9
64613: PUSH
64614: LD_VAR 0 10
64618: LESS
64619: IFFALSE 64641
// begin result := i ;
64621: LD_ADDR_VAR 0 5
64625: PUSH
64626: LD_VAR 0 6
64630: ST_TO_ADDR
// distance := tmp ;
64631: LD_ADDR_VAR 0 10
64635: PUSH
64636: LD_VAR 0 9
64640: ST_TO_ADDR
// end ; end ;
64641: GO 64499
64643: POP
64644: POP
// end ;
64645: LD_VAR 0 5
64649: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64650: LD_INT 0
64652: PPUSH
64653: PPUSH
// if not driver or not IsInUnit ( driver ) then
64654: LD_VAR 0 1
64658: NOT
64659: PUSH
64660: LD_VAR 0 1
64664: PPUSH
64665: CALL_OW 310
64669: NOT
64670: OR
64671: IFFALSE 64675
// exit ;
64673: GO 64765
// vehicle := IsInUnit ( driver ) ;
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_VAR 0 1
64684: PPUSH
64685: CALL_OW 310
64689: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64690: LD_VAR 0 1
64694: PPUSH
64695: LD_STRING \
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 0
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: PUSH
64725: LD_STRING E
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 0
64733: PUSH
64734: LD_VAR 0 3
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 0
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PPUSH
64761: CALL_OW 446
// end ;
64765: LD_VAR 0 2
64769: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64770: LD_INT 0
64772: PPUSH
64773: PPUSH
// if not driver or not IsInUnit ( driver ) then
64774: LD_VAR 0 1
64778: NOT
64779: PUSH
64780: LD_VAR 0 1
64784: PPUSH
64785: CALL_OW 310
64789: NOT
64790: OR
64791: IFFALSE 64795
// exit ;
64793: GO 64885
// vehicle := IsInUnit ( driver ) ;
64795: LD_ADDR_VAR 0 3
64799: PUSH
64800: LD_VAR 0 1
64804: PPUSH
64805: CALL_OW 310
64809: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64810: LD_VAR 0 1
64814: PPUSH
64815: LD_STRING \
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: PUSH
64845: LD_STRING E
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: LD_VAR 0 3
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PPUSH
64881: CALL_OW 447
// end ;
64885: LD_VAR 0 2
64889: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64890: LD_INT 0
64892: PPUSH
64893: PPUSH
64894: PPUSH
// tmp := [ ] ;
64895: LD_ADDR_VAR 0 5
64899: PUSH
64900: EMPTY
64901: ST_TO_ADDR
// for i in units do
64902: LD_ADDR_VAR 0 4
64906: PUSH
64907: LD_VAR 0 1
64911: PUSH
64912: FOR_IN
64913: IFFALSE 64951
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64915: LD_ADDR_VAR 0 5
64919: PUSH
64920: LD_VAR 0 5
64924: PPUSH
64925: LD_VAR 0 5
64929: PUSH
64930: LD_INT 1
64932: PLUS
64933: PPUSH
64934: LD_VAR 0 4
64938: PPUSH
64939: CALL_OW 256
64943: PPUSH
64944: CALL_OW 2
64948: ST_TO_ADDR
64949: GO 64912
64951: POP
64952: POP
// if not tmp then
64953: LD_VAR 0 5
64957: NOT
64958: IFFALSE 64962
// exit ;
64960: GO 65010
// if asc then
64962: LD_VAR 0 2
64966: IFFALSE 64990
// result := SortListByListAsc ( units , tmp ) else
64968: LD_ADDR_VAR 0 3
64972: PUSH
64973: LD_VAR 0 1
64977: PPUSH
64978: LD_VAR 0 5
64982: PPUSH
64983: CALL_OW 76
64987: ST_TO_ADDR
64988: GO 65010
// result := SortListByListDesc ( units , tmp ) ;
64990: LD_ADDR_VAR 0 3
64994: PUSH
64995: LD_VAR 0 1
64999: PPUSH
65000: LD_VAR 0 5
65004: PPUSH
65005: CALL_OW 77
65009: ST_TO_ADDR
// end ;
65010: LD_VAR 0 3
65014: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65015: LD_INT 0
65017: PPUSH
65018: PPUSH
// task := GetTaskList ( mech ) ;
65019: LD_ADDR_VAR 0 4
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 437
65033: ST_TO_ADDR
// if not task then
65034: LD_VAR 0 4
65038: NOT
65039: IFFALSE 65043
// exit ;
65041: GO 65085
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65043: LD_ADDR_VAR 0 3
65047: PUSH
65048: LD_VAR 0 4
65052: PUSH
65053: LD_INT 1
65055: ARRAY
65056: PUSH
65057: LD_INT 1
65059: ARRAY
65060: PUSH
65061: LD_STRING r
65063: EQUAL
65064: PUSH
65065: LD_VAR 0 4
65069: PUSH
65070: LD_INT 1
65072: ARRAY
65073: PUSH
65074: LD_INT 4
65076: ARRAY
65077: PUSH
65078: LD_VAR 0 2
65082: EQUAL
65083: AND
65084: ST_TO_ADDR
// end ;
65085: LD_VAR 0 3
65089: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65090: LD_INT 0
65092: PPUSH
// SetDir ( unit , d ) ;
65093: LD_VAR 0 1
65097: PPUSH
65098: LD_VAR 0 4
65102: PPUSH
65103: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65107: LD_VAR 0 1
65111: PPUSH
65112: LD_VAR 0 2
65116: PPUSH
65117: LD_VAR 0 3
65121: PPUSH
65122: LD_VAR 0 5
65126: PPUSH
65127: CALL_OW 48
// end ;
65131: LD_VAR 0 6
65135: RET
// export function ToNaturalNumber ( number ) ; begin
65136: LD_INT 0
65138: PPUSH
// result := number div 1 ;
65139: LD_ADDR_VAR 0 2
65143: PUSH
65144: LD_VAR 0 1
65148: PUSH
65149: LD_INT 1
65151: DIV
65152: ST_TO_ADDR
// if number < 0 then
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 0
65160: LESS
65161: IFFALSE 65171
// result := 0 ;
65163: LD_ADDR_VAR 0 2
65167: PUSH
65168: LD_INT 0
65170: ST_TO_ADDR
// end ;
65171: LD_VAR 0 2
65175: RET
// export function SortByClass ( units , class ) ; var un ; begin
65176: LD_INT 0
65178: PPUSH
65179: PPUSH
// if not units or not class then
65180: LD_VAR 0 1
65184: NOT
65185: PUSH
65186: LD_VAR 0 2
65190: NOT
65191: OR
65192: IFFALSE 65196
// exit ;
65194: GO 65291
// result := [ ] ;
65196: LD_ADDR_VAR 0 3
65200: PUSH
65201: EMPTY
65202: ST_TO_ADDR
// for un in units do
65203: LD_ADDR_VAR 0 4
65207: PUSH
65208: LD_VAR 0 1
65212: PUSH
65213: FOR_IN
65214: IFFALSE 65289
// if GetClass ( un ) = class then
65216: LD_VAR 0 4
65220: PPUSH
65221: CALL_OW 257
65225: PUSH
65226: LD_VAR 0 2
65230: EQUAL
65231: IFFALSE 65258
// result := Insert ( result , 1 , un ) else
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_VAR 0 3
65242: PPUSH
65243: LD_INT 1
65245: PPUSH
65246: LD_VAR 0 4
65250: PPUSH
65251: CALL_OW 2
65255: ST_TO_ADDR
65256: GO 65287
// result := Replace ( result , result + 1 , un ) ;
65258: LD_ADDR_VAR 0 3
65262: PUSH
65263: LD_VAR 0 3
65267: PPUSH
65268: LD_VAR 0 3
65272: PUSH
65273: LD_INT 1
65275: PLUS
65276: PPUSH
65277: LD_VAR 0 4
65281: PPUSH
65282: CALL_OW 1
65286: ST_TO_ADDR
65287: GO 65213
65289: POP
65290: POP
// end ;
65291: LD_VAR 0 3
65295: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65296: LD_INT 0
65298: PPUSH
65299: PPUSH
65300: PPUSH
65301: PPUSH
65302: PPUSH
65303: PPUSH
65304: PPUSH
// result := [ ] ;
65305: LD_ADDR_VAR 0 4
65309: PUSH
65310: EMPTY
65311: ST_TO_ADDR
// if x - r < 0 then
65312: LD_VAR 0 1
65316: PUSH
65317: LD_VAR 0 3
65321: MINUS
65322: PUSH
65323: LD_INT 0
65325: LESS
65326: IFFALSE 65338
// min_x := 0 else
65328: LD_ADDR_VAR 0 8
65332: PUSH
65333: LD_INT 0
65335: ST_TO_ADDR
65336: GO 65354
// min_x := x - r ;
65338: LD_ADDR_VAR 0 8
65342: PUSH
65343: LD_VAR 0 1
65347: PUSH
65348: LD_VAR 0 3
65352: MINUS
65353: ST_TO_ADDR
// if y - r < 0 then
65354: LD_VAR 0 2
65358: PUSH
65359: LD_VAR 0 3
65363: MINUS
65364: PUSH
65365: LD_INT 0
65367: LESS
65368: IFFALSE 65380
// min_y := 0 else
65370: LD_ADDR_VAR 0 7
65374: PUSH
65375: LD_INT 0
65377: ST_TO_ADDR
65378: GO 65396
// min_y := y - r ;
65380: LD_ADDR_VAR 0 7
65384: PUSH
65385: LD_VAR 0 2
65389: PUSH
65390: LD_VAR 0 3
65394: MINUS
65395: ST_TO_ADDR
// max_x := x + r ;
65396: LD_ADDR_VAR 0 9
65400: PUSH
65401: LD_VAR 0 1
65405: PUSH
65406: LD_VAR 0 3
65410: PLUS
65411: ST_TO_ADDR
// max_y := y + r ;
65412: LD_ADDR_VAR 0 10
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_VAR 0 3
65426: PLUS
65427: ST_TO_ADDR
// for _x = min_x to max_x do
65428: LD_ADDR_VAR 0 5
65432: PUSH
65433: DOUBLE
65434: LD_VAR 0 8
65438: DEC
65439: ST_TO_ADDR
65440: LD_VAR 0 9
65444: PUSH
65445: FOR_TO
65446: IFFALSE 65547
// for _y = min_y to max_y do
65448: LD_ADDR_VAR 0 6
65452: PUSH
65453: DOUBLE
65454: LD_VAR 0 7
65458: DEC
65459: ST_TO_ADDR
65460: LD_VAR 0 10
65464: PUSH
65465: FOR_TO
65466: IFFALSE 65543
// begin if not ValidHex ( _x , _y ) then
65468: LD_VAR 0 5
65472: PPUSH
65473: LD_VAR 0 6
65477: PPUSH
65478: CALL_OW 488
65482: NOT
65483: IFFALSE 65487
// continue ;
65485: GO 65465
// if GetResourceTypeXY ( _x , _y ) then
65487: LD_VAR 0 5
65491: PPUSH
65492: LD_VAR 0 6
65496: PPUSH
65497: CALL_OW 283
65501: IFFALSE 65541
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65503: LD_ADDR_VAR 0 4
65507: PUSH
65508: LD_VAR 0 4
65512: PPUSH
65513: LD_VAR 0 4
65517: PUSH
65518: LD_INT 1
65520: PLUS
65521: PPUSH
65522: LD_VAR 0 5
65526: PUSH
65527: LD_VAR 0 6
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PPUSH
65536: CALL_OW 1
65540: ST_TO_ADDR
// end ;
65541: GO 65465
65543: POP
65544: POP
65545: GO 65445
65547: POP
65548: POP
// end ;
65549: LD_VAR 0 4
65553: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65554: LD_INT 0
65556: PPUSH
65557: PPUSH
65558: PPUSH
65559: PPUSH
65560: PPUSH
65561: PPUSH
65562: PPUSH
65563: PPUSH
// if not units then
65564: LD_VAR 0 1
65568: NOT
65569: IFFALSE 65573
// exit ;
65571: GO 66097
// result := UnitFilter ( units , [ f_ok ] ) ;
65573: LD_ADDR_VAR 0 3
65577: PUSH
65578: LD_VAR 0 1
65582: PPUSH
65583: LD_INT 50
65585: PUSH
65586: EMPTY
65587: LIST
65588: PPUSH
65589: CALL_OW 72
65593: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65594: LD_ADDR_VAR 0 8
65598: PUSH
65599: LD_VAR 0 1
65603: PUSH
65604: LD_INT 1
65606: ARRAY
65607: PPUSH
65608: CALL_OW 255
65612: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65613: LD_ADDR_VAR 0 10
65617: PUSH
65618: LD_INT 29
65620: PUSH
65621: LD_INT 91
65623: PUSH
65624: LD_INT 49
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: ST_TO_ADDR
// if not result then
65632: LD_VAR 0 3
65636: NOT
65637: IFFALSE 65641
// exit ;
65639: GO 66097
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65641: LD_ADDR_VAR 0 5
65645: PUSH
65646: LD_INT 81
65648: PUSH
65649: LD_VAR 0 8
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PPUSH
65658: CALL_OW 69
65662: ST_TO_ADDR
// for i in result do
65663: LD_ADDR_VAR 0 4
65667: PUSH
65668: LD_VAR 0 3
65672: PUSH
65673: FOR_IN
65674: IFFALSE 66095
// begin tag := GetTag ( i ) + 1 ;
65676: LD_ADDR_VAR 0 9
65680: PUSH
65681: LD_VAR 0 4
65685: PPUSH
65686: CALL_OW 110
65690: PUSH
65691: LD_INT 1
65693: PLUS
65694: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65695: LD_ADDR_VAR 0 7
65699: PUSH
65700: LD_VAR 0 4
65704: PPUSH
65705: CALL_OW 250
65709: PPUSH
65710: LD_VAR 0 4
65714: PPUSH
65715: CALL_OW 251
65719: PPUSH
65720: LD_INT 6
65722: PPUSH
65723: CALL 65296 0 3
65727: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65728: LD_VAR 0 4
65732: PPUSH
65733: CALL_OW 247
65737: PUSH
65738: LD_INT 2
65740: EQUAL
65741: PUSH
65742: LD_VAR 0 7
65746: AND
65747: PUSH
65748: LD_VAR 0 4
65752: PPUSH
65753: CALL_OW 264
65757: PUSH
65758: LD_VAR 0 10
65762: IN
65763: NOT
65764: AND
65765: IFFALSE 65804
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65767: LD_VAR 0 4
65771: PPUSH
65772: LD_VAR 0 7
65776: PUSH
65777: LD_INT 1
65779: ARRAY
65780: PUSH
65781: LD_INT 1
65783: ARRAY
65784: PPUSH
65785: LD_VAR 0 7
65789: PUSH
65790: LD_INT 1
65792: ARRAY
65793: PUSH
65794: LD_INT 2
65796: ARRAY
65797: PPUSH
65798: CALL_OW 116
65802: GO 66093
// if path > tag then
65804: LD_VAR 0 2
65808: PUSH
65809: LD_VAR 0 9
65813: GREATER
65814: IFFALSE 66022
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65816: LD_ADDR_VAR 0 6
65820: PUSH
65821: LD_VAR 0 5
65825: PPUSH
65826: LD_INT 91
65828: PUSH
65829: LD_VAR 0 4
65833: PUSH
65834: LD_INT 8
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: LIST
65841: PPUSH
65842: CALL_OW 72
65846: ST_TO_ADDR
// if nearEnemy then
65847: LD_VAR 0 6
65851: IFFALSE 65920
// begin if GetWeapon ( i ) = ru_time_lapser then
65853: LD_VAR 0 4
65857: PPUSH
65858: CALL_OW 264
65862: PUSH
65863: LD_INT 49
65865: EQUAL
65866: IFFALSE 65894
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65868: LD_VAR 0 4
65872: PPUSH
65873: LD_VAR 0 6
65877: PPUSH
65878: LD_VAR 0 4
65882: PPUSH
65883: CALL_OW 74
65887: PPUSH
65888: CALL_OW 112
65892: GO 65918
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65894: LD_VAR 0 4
65898: PPUSH
65899: LD_VAR 0 6
65903: PPUSH
65904: LD_VAR 0 4
65908: PPUSH
65909: CALL_OW 74
65913: PPUSH
65914: CALL 67022 0 2
// end else
65918: GO 66020
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65920: LD_VAR 0 4
65924: PPUSH
65925: LD_VAR 0 2
65929: PUSH
65930: LD_VAR 0 9
65934: ARRAY
65935: PUSH
65936: LD_INT 1
65938: ARRAY
65939: PPUSH
65940: LD_VAR 0 2
65944: PUSH
65945: LD_VAR 0 9
65949: ARRAY
65950: PUSH
65951: LD_INT 2
65953: ARRAY
65954: PPUSH
65955: CALL_OW 297
65959: PUSH
65960: LD_INT 6
65962: GREATER
65963: IFFALSE 66006
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65965: LD_VAR 0 4
65969: PPUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_VAR 0 9
65979: ARRAY
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PPUSH
65985: LD_VAR 0 2
65989: PUSH
65990: LD_VAR 0 9
65994: ARRAY
65995: PUSH
65996: LD_INT 2
65998: ARRAY
65999: PPUSH
66000: CALL_OW 114
66004: GO 66020
// SetTag ( i , tag ) ;
66006: LD_VAR 0 4
66010: PPUSH
66011: LD_VAR 0 9
66015: PPUSH
66016: CALL_OW 109
// end else
66020: GO 66093
// if enemy then
66022: LD_VAR 0 5
66026: IFFALSE 66093
// begin if GetWeapon ( i ) = ru_time_lapser then
66028: LD_VAR 0 4
66032: PPUSH
66033: CALL_OW 264
66037: PUSH
66038: LD_INT 49
66040: EQUAL
66041: IFFALSE 66069
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66043: LD_VAR 0 4
66047: PPUSH
66048: LD_VAR 0 5
66052: PPUSH
66053: LD_VAR 0 4
66057: PPUSH
66058: CALL_OW 74
66062: PPUSH
66063: CALL_OW 112
66067: GO 66093
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66069: LD_VAR 0 4
66073: PPUSH
66074: LD_VAR 0 5
66078: PPUSH
66079: LD_VAR 0 4
66083: PPUSH
66084: CALL_OW 74
66088: PPUSH
66089: CALL 67022 0 2
// end ; end ;
66093: GO 65673
66095: POP
66096: POP
// end ;
66097: LD_VAR 0 3
66101: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66102: LD_INT 0
66104: PPUSH
66105: PPUSH
66106: PPUSH
// if not unit or IsInUnit ( unit ) then
66107: LD_VAR 0 1
66111: NOT
66112: PUSH
66113: LD_VAR 0 1
66117: PPUSH
66118: CALL_OW 310
66122: OR
66123: IFFALSE 66127
// exit ;
66125: GO 66218
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66127: LD_ADDR_VAR 0 4
66131: PUSH
66132: LD_VAR 0 1
66136: PPUSH
66137: CALL_OW 250
66141: PPUSH
66142: LD_VAR 0 2
66146: PPUSH
66147: LD_INT 1
66149: PPUSH
66150: CALL_OW 272
66154: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66155: LD_ADDR_VAR 0 5
66159: PUSH
66160: LD_VAR 0 1
66164: PPUSH
66165: CALL_OW 251
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_INT 1
66177: PPUSH
66178: CALL_OW 273
66182: ST_TO_ADDR
// if ValidHex ( x , y ) then
66183: LD_VAR 0 4
66187: PPUSH
66188: LD_VAR 0 5
66192: PPUSH
66193: CALL_OW 488
66197: IFFALSE 66218
// ComTurnXY ( unit , x , y ) ;
66199: LD_VAR 0 1
66203: PPUSH
66204: LD_VAR 0 4
66208: PPUSH
66209: LD_VAR 0 5
66213: PPUSH
66214: CALL_OW 118
// end ;
66218: LD_VAR 0 3
66222: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66223: LD_INT 0
66225: PPUSH
66226: PPUSH
// result := false ;
66227: LD_ADDR_VAR 0 3
66231: PUSH
66232: LD_INT 0
66234: ST_TO_ADDR
// if not units then
66235: LD_VAR 0 2
66239: NOT
66240: IFFALSE 66244
// exit ;
66242: GO 66289
// for i in units do
66244: LD_ADDR_VAR 0 4
66248: PUSH
66249: LD_VAR 0 2
66253: PUSH
66254: FOR_IN
66255: IFFALSE 66287
// if See ( side , i ) then
66257: LD_VAR 0 1
66261: PPUSH
66262: LD_VAR 0 4
66266: PPUSH
66267: CALL_OW 292
66271: IFFALSE 66285
// begin result := true ;
66273: LD_ADDR_VAR 0 3
66277: PUSH
66278: LD_INT 1
66280: ST_TO_ADDR
// exit ;
66281: POP
66282: POP
66283: GO 66289
// end ;
66285: GO 66254
66287: POP
66288: POP
// end ;
66289: LD_VAR 0 3
66293: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66294: LD_INT 0
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
// if not unit or not points then
66300: LD_VAR 0 1
66304: NOT
66305: PUSH
66306: LD_VAR 0 2
66310: NOT
66311: OR
66312: IFFALSE 66316
// exit ;
66314: GO 66406
// dist := 99999 ;
66316: LD_ADDR_VAR 0 5
66320: PUSH
66321: LD_INT 99999
66323: ST_TO_ADDR
// for i in points do
66324: LD_ADDR_VAR 0 4
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: FOR_IN
66335: IFFALSE 66404
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66337: LD_ADDR_VAR 0 6
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_VAR 0 4
66351: PUSH
66352: LD_INT 1
66354: ARRAY
66355: PPUSH
66356: LD_VAR 0 4
66360: PUSH
66361: LD_INT 2
66363: ARRAY
66364: PPUSH
66365: CALL_OW 297
66369: ST_TO_ADDR
// if tmpDist < dist then
66370: LD_VAR 0 6
66374: PUSH
66375: LD_VAR 0 5
66379: LESS
66380: IFFALSE 66402
// begin result := i ;
66382: LD_ADDR_VAR 0 3
66386: PUSH
66387: LD_VAR 0 4
66391: ST_TO_ADDR
// dist := tmpDist ;
66392: LD_ADDR_VAR 0 5
66396: PUSH
66397: LD_VAR 0 6
66401: ST_TO_ADDR
// end ; end ;
66402: GO 66334
66404: POP
66405: POP
// end ;
66406: LD_VAR 0 3
66410: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66411: LD_INT 0
66413: PPUSH
// uc_side := side ;
66414: LD_ADDR_OWVAR 20
66418: PUSH
66419: LD_VAR 0 1
66423: ST_TO_ADDR
// uc_nation := 3 ;
66424: LD_ADDR_OWVAR 21
66428: PUSH
66429: LD_INT 3
66431: ST_TO_ADDR
// vc_chassis := 25 ;
66432: LD_ADDR_OWVAR 37
66436: PUSH
66437: LD_INT 25
66439: ST_TO_ADDR
// vc_engine := engine_siberite ;
66440: LD_ADDR_OWVAR 39
66444: PUSH
66445: LD_INT 3
66447: ST_TO_ADDR
// vc_control := control_computer ;
66448: LD_ADDR_OWVAR 38
66452: PUSH
66453: LD_INT 3
66455: ST_TO_ADDR
// vc_weapon := 59 ;
66456: LD_ADDR_OWVAR 40
66460: PUSH
66461: LD_INT 59
66463: ST_TO_ADDR
// result := CreateVehicle ;
66464: LD_ADDR_VAR 0 5
66468: PUSH
66469: CALL_OW 45
66473: ST_TO_ADDR
// SetDir ( result , d ) ;
66474: LD_VAR 0 5
66478: PPUSH
66479: LD_VAR 0 4
66483: PPUSH
66484: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66488: LD_VAR 0 5
66492: PPUSH
66493: LD_VAR 0 2
66497: PPUSH
66498: LD_VAR 0 3
66502: PPUSH
66503: LD_INT 0
66505: PPUSH
66506: CALL_OW 48
// end ;
66510: LD_VAR 0 5
66514: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66515: LD_INT 0
66517: PPUSH
66518: PPUSH
66519: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66520: LD_ADDR_VAR 0 2
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66543: LD_VAR 0 1
66547: NOT
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: CALL_OW 264
66558: PUSH
66559: LD_INT 12
66561: PUSH
66562: LD_INT 51
66564: PUSH
66565: LD_INT 32
66567: PUSH
66568: LD_INT 89
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: IN
66577: NOT
66578: OR
66579: IFFALSE 66583
// exit ;
66581: GO 66681
// for i := 1 to 3 do
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: DOUBLE
66589: LD_INT 1
66591: DEC
66592: ST_TO_ADDR
66593: LD_INT 3
66595: PUSH
66596: FOR_TO
66597: IFFALSE 66679
// begin tmp := GetCargo ( cargo , i ) ;
66599: LD_ADDR_VAR 0 4
66603: PUSH
66604: LD_VAR 0 1
66608: PPUSH
66609: LD_VAR 0 3
66613: PPUSH
66614: CALL_OW 289
66618: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66619: LD_ADDR_VAR 0 2
66623: PUSH
66624: LD_VAR 0 2
66628: PPUSH
66629: LD_VAR 0 3
66633: PPUSH
66634: LD_VAR 0 4
66638: PPUSH
66639: CALL_OW 1
66643: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66644: LD_ADDR_VAR 0 2
66648: PUSH
66649: LD_VAR 0 2
66653: PPUSH
66654: LD_INT 4
66656: PPUSH
66657: LD_VAR 0 2
66661: PUSH
66662: LD_INT 4
66664: ARRAY
66665: PUSH
66666: LD_VAR 0 4
66670: PLUS
66671: PPUSH
66672: CALL_OW 1
66676: ST_TO_ADDR
// end ;
66677: GO 66596
66679: POP
66680: POP
// end ;
66681: LD_VAR 0 2
66685: RET
// export function Length ( array ) ; begin
66686: LD_INT 0
66688: PPUSH
// result := array + 0 ;
66689: LD_ADDR_VAR 0 2
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_INT 0
66701: PLUS
66702: ST_TO_ADDR
// end ;
66703: LD_VAR 0 2
66707: RET
// export function PrepareArray ( array ) ; begin
66708: LD_INT 0
66710: PPUSH
// result := array diff 0 ;
66711: LD_ADDR_VAR 0 2
66715: PUSH
66716: LD_VAR 0 1
66720: PUSH
66721: LD_INT 0
66723: DIFF
66724: ST_TO_ADDR
// if not result [ 1 ] then
66725: LD_VAR 0 2
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: NOT
66734: IFFALSE 66754
// result := Delete ( result , 1 ) ;
66736: LD_ADDR_VAR 0 2
66740: PUSH
66741: LD_VAR 0 2
66745: PPUSH
66746: LD_INT 1
66748: PPUSH
66749: CALL_OW 3
66753: ST_TO_ADDR
// end ;
66754: LD_VAR 0 2
66758: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
66764: PPUSH
// sibRocketRange := 25 ;
66765: LD_ADDR_VAR 0 6
66769: PUSH
66770: LD_INT 25
66772: ST_TO_ADDR
// result := false ;
66773: LD_ADDR_VAR 0 4
66777: PUSH
66778: LD_INT 0
66780: ST_TO_ADDR
// for i := 0 to 5 do
66781: LD_ADDR_VAR 0 5
66785: PUSH
66786: DOUBLE
66787: LD_INT 0
66789: DEC
66790: ST_TO_ADDR
66791: LD_INT 5
66793: PUSH
66794: FOR_TO
66795: IFFALSE 66862
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66797: LD_VAR 0 1
66801: PPUSH
66802: LD_VAR 0 5
66806: PPUSH
66807: LD_VAR 0 6
66811: PPUSH
66812: CALL_OW 272
66816: PPUSH
66817: LD_VAR 0 2
66821: PPUSH
66822: LD_VAR 0 5
66826: PPUSH
66827: LD_VAR 0 6
66831: PPUSH
66832: CALL_OW 273
66836: PPUSH
66837: LD_VAR 0 3
66841: PPUSH
66842: CALL_OW 309
66846: IFFALSE 66860
// begin result := true ;
66848: LD_ADDR_VAR 0 4
66852: PUSH
66853: LD_INT 1
66855: ST_TO_ADDR
// exit ;
66856: POP
66857: POP
66858: GO 66864
// end ;
66860: GO 66794
66862: POP
66863: POP
// end ;
66864: LD_VAR 0 4
66868: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66869: LD_INT 0
66871: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66872: LD_VAR 0 1
66876: PPUSH
66877: LD_VAR 0 2
66881: PPUSH
66882: LD_INT 0
66884: PPUSH
66885: LD_INT 0
66887: PPUSH
66888: LD_INT 1
66890: PPUSH
66891: LD_INT 0
66893: PPUSH
66894: CALL_OW 587
// end ;
66898: LD_VAR 0 3
66902: RET
// export function CenterOnNow ( unit ) ; begin
66903: LD_INT 0
66905: PPUSH
// result := IsInUnit ( unit ) ;
66906: LD_ADDR_VAR 0 2
66910: PUSH
66911: LD_VAR 0 1
66915: PPUSH
66916: CALL_OW 310
66920: ST_TO_ADDR
// if not result then
66921: LD_VAR 0 2
66925: NOT
66926: IFFALSE 66938
// result := unit ;
66928: LD_ADDR_VAR 0 2
66932: PUSH
66933: LD_VAR 0 1
66937: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66938: LD_VAR 0 1
66942: PPUSH
66943: CALL_OW 87
// end ;
66947: LD_VAR 0 2
66951: RET
// export function ComMoveHex ( unit , hex ) ; begin
66952: LD_INT 0
66954: PPUSH
// if not hex then
66955: LD_VAR 0 2
66959: NOT
66960: IFFALSE 66964
// exit ;
66962: GO 67017
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66964: LD_VAR 0 2
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: PPUSH
66973: LD_VAR 0 2
66977: PUSH
66978: LD_INT 2
66980: ARRAY
66981: PPUSH
66982: CALL_OW 428
66986: IFFALSE 66990
// exit ;
66988: GO 67017
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66990: LD_VAR 0 1
66994: PPUSH
66995: LD_VAR 0 2
66999: PUSH
67000: LD_INT 1
67002: ARRAY
67003: PPUSH
67004: LD_VAR 0 2
67008: PUSH
67009: LD_INT 2
67011: ARRAY
67012: PPUSH
67013: CALL_OW 111
// end ;
67017: LD_VAR 0 3
67021: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67022: LD_INT 0
67024: PPUSH
67025: PPUSH
67026: PPUSH
// if not unit or not enemy then
67027: LD_VAR 0 1
67031: NOT
67032: PUSH
67033: LD_VAR 0 2
67037: NOT
67038: OR
67039: IFFALSE 67043
// exit ;
67041: GO 67167
// x := GetX ( enemy ) ;
67043: LD_ADDR_VAR 0 4
67047: PUSH
67048: LD_VAR 0 2
67052: PPUSH
67053: CALL_OW 250
67057: ST_TO_ADDR
// y := GetY ( enemy ) ;
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: LD_VAR 0 2
67067: PPUSH
67068: CALL_OW 251
67072: ST_TO_ADDR
// if ValidHex ( x , y ) then
67073: LD_VAR 0 4
67077: PPUSH
67078: LD_VAR 0 5
67082: PPUSH
67083: CALL_OW 488
67087: IFFALSE 67167
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
67089: LD_VAR 0 2
67093: PPUSH
67094: CALL_OW 247
67098: PUSH
67099: LD_INT 3
67101: PUSH
67102: LD_INT 2
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: IN
67109: PUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 255
67119: PPUSH
67120: LD_VAR 0 2
67124: PPUSH
67125: CALL_OW 292
67129: AND
67130: IFFALSE 67148
// ComAttackUnit ( unit , enemy ) else
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_VAR 0 2
67141: PPUSH
67142: CALL_OW 115
67146: GO 67167
// ComAgressiveMove ( unit , x , y ) ;
67148: LD_VAR 0 1
67152: PPUSH
67153: LD_VAR 0 4
67157: PPUSH
67158: LD_VAR 0 5
67162: PPUSH
67163: CALL_OW 114
// end ; end_of_file
67167: LD_VAR 0 3
67171: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67172: LD_VAR 0 1
67176: PPUSH
67177: LD_VAR 0 2
67181: PPUSH
67182: LD_VAR 0 3
67186: PPUSH
67187: LD_VAR 0 4
67191: PPUSH
67192: LD_VAR 0 5
67196: PPUSH
67197: LD_VAR 0 6
67201: PPUSH
67202: CALL 4710 0 6
// end ;
67206: PPOPN 6
67208: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67209: LD_INT 0
67211: PPUSH
// begin if not units then
67212: LD_VAR 0 1
67216: NOT
67217: IFFALSE 67221
// exit ;
67219: GO 67221
// end ;
67221: PPOPN 7
67223: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67224: CALL 4614 0 0
// end ;
67228: PPOPN 1
67230: END
