// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// every 0 0$1 do
4304: GO 4306
4306: DISABLE
// begin enable ;
4307: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4308: LD_STRING updateTimer(
4310: PUSH
4311: LD_OWVAR 1
4315: STR
4316: PUSH
4317: LD_STRING );
4319: STR
4320: PPUSH
4321: CALL_OW 559
// end ;
4325: END
// export function SOS_MapStart ( ) ; begin
4326: LD_INT 0
4328: PPUSH
// if streamModeActive then
4329: LD_EXP 23
4333: IFFALSE 4342
// DefineStreamItems ( true ) ;
4335: LD_INT 1
4337: PPUSH
4338: CALL 5996 0 1
// UpdateFactoryWaypoints ( ) ;
4342: CALL 18857 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4346: CALL 19114 0 0
// end ;
4350: LD_VAR 0 1
4354: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4355: LD_INT 0
4357: PPUSH
// if p2 = 100 then
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 100
4365: EQUAL
4366: IFFALSE 5369
// begin if not StreamModeActive then
4368: LD_EXP 23
4372: NOT
4373: IFFALSE 4383
// StreamModeActive := true ;
4375: LD_ADDR_EXP 23
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// if p3 = 0 then
4383: LD_VAR 0 3
4387: PUSH
4388: LD_INT 0
4390: EQUAL
4391: IFFALSE 4397
// InitStreamMode ;
4393: CALL 5532 0 0
// if p3 = 1 then
4397: LD_VAR 0 3
4401: PUSH
4402: LD_INT 1
4404: EQUAL
4405: IFFALSE 4415
// sRocket := true ;
4407: LD_ADDR_EXP 28
4411: PUSH
4412: LD_INT 1
4414: ST_TO_ADDR
// if p3 = 2 then
4415: LD_VAR 0 3
4419: PUSH
4420: LD_INT 2
4422: EQUAL
4423: IFFALSE 4433
// sSpeed := true ;
4425: LD_ADDR_EXP 27
4429: PUSH
4430: LD_INT 1
4432: ST_TO_ADDR
// if p3 = 3 then
4433: LD_VAR 0 3
4437: PUSH
4438: LD_INT 3
4440: EQUAL
4441: IFFALSE 4451
// sEngine := true ;
4443: LD_ADDR_EXP 29
4447: PUSH
4448: LD_INT 1
4450: ST_TO_ADDR
// if p3 = 4 then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 4
4458: EQUAL
4459: IFFALSE 4469
// sSpec := true ;
4461: LD_ADDR_EXP 26
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// if p3 = 5 then
4469: LD_VAR 0 3
4473: PUSH
4474: LD_INT 5
4476: EQUAL
4477: IFFALSE 4487
// sLevel := true ;
4479: LD_ADDR_EXP 30
4483: PUSH
4484: LD_INT 1
4486: ST_TO_ADDR
// if p3 = 6 then
4487: LD_VAR 0 3
4491: PUSH
4492: LD_INT 6
4494: EQUAL
4495: IFFALSE 4505
// sArmoury := true ;
4497: LD_ADDR_EXP 31
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// if p3 = 7 then
4505: LD_VAR 0 3
4509: PUSH
4510: LD_INT 7
4512: EQUAL
4513: IFFALSE 4523
// sRadar := true ;
4515: LD_ADDR_EXP 32
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// if p3 = 8 then
4523: LD_VAR 0 3
4527: PUSH
4528: LD_INT 8
4530: EQUAL
4531: IFFALSE 4541
// sBunker := true ;
4533: LD_ADDR_EXP 33
4537: PUSH
4538: LD_INT 1
4540: ST_TO_ADDR
// if p3 = 9 then
4541: LD_VAR 0 3
4545: PUSH
4546: LD_INT 9
4548: EQUAL
4549: IFFALSE 4559
// sHack := true ;
4551: LD_ADDR_EXP 34
4555: PUSH
4556: LD_INT 1
4558: ST_TO_ADDR
// if p3 = 10 then
4559: LD_VAR 0 3
4563: PUSH
4564: LD_INT 10
4566: EQUAL
4567: IFFALSE 4577
// sFire := true ;
4569: LD_ADDR_EXP 35
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// if p3 = 11 then
4577: LD_VAR 0 3
4581: PUSH
4582: LD_INT 11
4584: EQUAL
4585: IFFALSE 4595
// sRefresh := true ;
4587: LD_ADDR_EXP 36
4591: PUSH
4592: LD_INT 1
4594: ST_TO_ADDR
// if p3 = 12 then
4595: LD_VAR 0 3
4599: PUSH
4600: LD_INT 12
4602: EQUAL
4603: IFFALSE 4613
// sExp := true ;
4605: LD_ADDR_EXP 37
4609: PUSH
4610: LD_INT 1
4612: ST_TO_ADDR
// if p3 = 13 then
4613: LD_VAR 0 3
4617: PUSH
4618: LD_INT 13
4620: EQUAL
4621: IFFALSE 4631
// sDepot := true ;
4623: LD_ADDR_EXP 38
4627: PUSH
4628: LD_INT 1
4630: ST_TO_ADDR
// if p3 = 14 then
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 14
4638: EQUAL
4639: IFFALSE 4649
// sFlag := true ;
4641: LD_ADDR_EXP 39
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// if p3 = 15 then
4649: LD_VAR 0 3
4653: PUSH
4654: LD_INT 15
4656: EQUAL
4657: IFFALSE 4667
// sKamikadze := true ;
4659: LD_ADDR_EXP 47
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// if p3 = 16 then
4667: LD_VAR 0 3
4671: PUSH
4672: LD_INT 16
4674: EQUAL
4675: IFFALSE 4685
// sTroll := true ;
4677: LD_ADDR_EXP 48
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// if p3 = 17 then
4685: LD_VAR 0 3
4689: PUSH
4690: LD_INT 17
4692: EQUAL
4693: IFFALSE 4703
// sSlow := true ;
4695: LD_ADDR_EXP 49
4699: PUSH
4700: LD_INT 1
4702: ST_TO_ADDR
// if p3 = 18 then
4703: LD_VAR 0 3
4707: PUSH
4708: LD_INT 18
4710: EQUAL
4711: IFFALSE 4721
// sLack := true ;
4713: LD_ADDR_EXP 50
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// if p3 = 19 then
4721: LD_VAR 0 3
4725: PUSH
4726: LD_INT 19
4728: EQUAL
4729: IFFALSE 4739
// sTank := true ;
4731: LD_ADDR_EXP 52
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// if p3 = 20 then
4739: LD_VAR 0 3
4743: PUSH
4744: LD_INT 20
4746: EQUAL
4747: IFFALSE 4757
// sRemote := true ;
4749: LD_ADDR_EXP 53
4753: PUSH
4754: LD_INT 1
4756: ST_TO_ADDR
// if p3 = 21 then
4757: LD_VAR 0 3
4761: PUSH
4762: LD_INT 21
4764: EQUAL
4765: IFFALSE 4775
// sPowell := true ;
4767: LD_ADDR_EXP 54
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// if p3 = 22 then
4775: LD_VAR 0 3
4779: PUSH
4780: LD_INT 22
4782: EQUAL
4783: IFFALSE 4793
// sTeleport := true ;
4785: LD_ADDR_EXP 57
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// if p3 = 23 then
4793: LD_VAR 0 3
4797: PUSH
4798: LD_INT 23
4800: EQUAL
4801: IFFALSE 4811
// sOilTower := true ;
4803: LD_ADDR_EXP 59
4807: PUSH
4808: LD_INT 1
4810: ST_TO_ADDR
// if p3 = 24 then
4811: LD_VAR 0 3
4815: PUSH
4816: LD_INT 24
4818: EQUAL
4819: IFFALSE 4829
// sShovel := true ;
4821: LD_ADDR_EXP 60
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// if p3 = 25 then
4829: LD_VAR 0 3
4833: PUSH
4834: LD_INT 25
4836: EQUAL
4837: IFFALSE 4847
// sSheik := true ;
4839: LD_ADDR_EXP 61
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// if p3 = 26 then
4847: LD_VAR 0 3
4851: PUSH
4852: LD_INT 26
4854: EQUAL
4855: IFFALSE 4865
// sEarthquake := true ;
4857: LD_ADDR_EXP 63
4861: PUSH
4862: LD_INT 1
4864: ST_TO_ADDR
// if p3 = 27 then
4865: LD_VAR 0 3
4869: PUSH
4870: LD_INT 27
4872: EQUAL
4873: IFFALSE 4883
// sAI := true ;
4875: LD_ADDR_EXP 64
4879: PUSH
4880: LD_INT 1
4882: ST_TO_ADDR
// if p3 = 28 then
4883: LD_VAR 0 3
4887: PUSH
4888: LD_INT 28
4890: EQUAL
4891: IFFALSE 4901
// sCargo := true ;
4893: LD_ADDR_EXP 67
4897: PUSH
4898: LD_INT 1
4900: ST_TO_ADDR
// if p3 = 29 then
4901: LD_VAR 0 3
4905: PUSH
4906: LD_INT 29
4908: EQUAL
4909: IFFALSE 4919
// sDLaser := true ;
4911: LD_ADDR_EXP 68
4915: PUSH
4916: LD_INT 1
4918: ST_TO_ADDR
// if p3 = 30 then
4919: LD_VAR 0 3
4923: PUSH
4924: LD_INT 30
4926: EQUAL
4927: IFFALSE 4937
// sExchange := true ;
4929: LD_ADDR_EXP 69
4933: PUSH
4934: LD_INT 1
4936: ST_TO_ADDR
// if p3 = 31 then
4937: LD_VAR 0 3
4941: PUSH
4942: LD_INT 31
4944: EQUAL
4945: IFFALSE 4955
// sFac := true ;
4947: LD_ADDR_EXP 70
4951: PUSH
4952: LD_INT 1
4954: ST_TO_ADDR
// if p3 = 32 then
4955: LD_VAR 0 3
4959: PUSH
4960: LD_INT 32
4962: EQUAL
4963: IFFALSE 4973
// sPower := true ;
4965: LD_ADDR_EXP 71
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// if p3 = 33 then
4973: LD_VAR 0 3
4977: PUSH
4978: LD_INT 33
4980: EQUAL
4981: IFFALSE 4991
// sRandom := true ;
4983: LD_ADDR_EXP 72
4987: PUSH
4988: LD_INT 1
4990: ST_TO_ADDR
// if p3 = 34 then
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 34
4998: EQUAL
4999: IFFALSE 5009
// sShield := true ;
5001: LD_ADDR_EXP 73
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// if p3 = 35 then
5009: LD_VAR 0 3
5013: PUSH
5014: LD_INT 35
5016: EQUAL
5017: IFFALSE 5027
// sTime := true ;
5019: LD_ADDR_EXP 74
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// if p3 = 36 then
5027: LD_VAR 0 3
5031: PUSH
5032: LD_INT 36
5034: EQUAL
5035: IFFALSE 5045
// sTools := true ;
5037: LD_ADDR_EXP 75
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// if p3 = 101 then
5045: LD_VAR 0 3
5049: PUSH
5050: LD_INT 101
5052: EQUAL
5053: IFFALSE 5063
// sSold := true ;
5055: LD_ADDR_EXP 40
5059: PUSH
5060: LD_INT 1
5062: ST_TO_ADDR
// if p3 = 102 then
5063: LD_VAR 0 3
5067: PUSH
5068: LD_INT 102
5070: EQUAL
5071: IFFALSE 5081
// sDiff := true ;
5073: LD_ADDR_EXP 41
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// if p3 = 103 then
5081: LD_VAR 0 3
5085: PUSH
5086: LD_INT 103
5088: EQUAL
5089: IFFALSE 5099
// sFog := true ;
5091: LD_ADDR_EXP 44
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// if p3 = 104 then
5099: LD_VAR 0 3
5103: PUSH
5104: LD_INT 104
5106: EQUAL
5107: IFFALSE 5117
// sReset := true ;
5109: LD_ADDR_EXP 45
5113: PUSH
5114: LD_INT 1
5116: ST_TO_ADDR
// if p3 = 105 then
5117: LD_VAR 0 3
5121: PUSH
5122: LD_INT 105
5124: EQUAL
5125: IFFALSE 5135
// sSun := true ;
5127: LD_ADDR_EXP 46
5131: PUSH
5132: LD_INT 1
5134: ST_TO_ADDR
// if p3 = 106 then
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 106
5142: EQUAL
5143: IFFALSE 5153
// sTiger := true ;
5145: LD_ADDR_EXP 42
5149: PUSH
5150: LD_INT 1
5152: ST_TO_ADDR
// if p3 = 107 then
5153: LD_VAR 0 3
5157: PUSH
5158: LD_INT 107
5160: EQUAL
5161: IFFALSE 5171
// sBomb := true ;
5163: LD_ADDR_EXP 43
5167: PUSH
5168: LD_INT 1
5170: ST_TO_ADDR
// if p3 = 108 then
5171: LD_VAR 0 3
5175: PUSH
5176: LD_INT 108
5178: EQUAL
5179: IFFALSE 5189
// sWound := true ;
5181: LD_ADDR_EXP 51
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// if p3 = 109 then
5189: LD_VAR 0 3
5193: PUSH
5194: LD_INT 109
5196: EQUAL
5197: IFFALSE 5207
// sBetray := true ;
5199: LD_ADDR_EXP 55
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// if p3 = 110 then
5207: LD_VAR 0 3
5211: PUSH
5212: LD_INT 110
5214: EQUAL
5215: IFFALSE 5225
// sContamin := true ;
5217: LD_ADDR_EXP 56
5221: PUSH
5222: LD_INT 1
5224: ST_TO_ADDR
// if p3 = 111 then
5225: LD_VAR 0 3
5229: PUSH
5230: LD_INT 111
5232: EQUAL
5233: IFFALSE 5243
// sOil := true ;
5235: LD_ADDR_EXP 58
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// if p3 = 112 then
5243: LD_VAR 0 3
5247: PUSH
5248: LD_INT 112
5250: EQUAL
5251: IFFALSE 5261
// sStu := true ;
5253: LD_ADDR_EXP 62
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// if p3 = 113 then
5261: LD_VAR 0 3
5265: PUSH
5266: LD_INT 113
5268: EQUAL
5269: IFFALSE 5279
// sBazooka := true ;
5271: LD_ADDR_EXP 65
5275: PUSH
5276: LD_INT 1
5278: ST_TO_ADDR
// if p3 = 114 then
5279: LD_VAR 0 3
5283: PUSH
5284: LD_INT 114
5286: EQUAL
5287: IFFALSE 5297
// sMortar := true ;
5289: LD_ADDR_EXP 66
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// if p3 = 115 then
5297: LD_VAR 0 3
5301: PUSH
5302: LD_INT 115
5304: EQUAL
5305: IFFALSE 5315
// sRanger := true ;
5307: LD_ADDR_EXP 76
5311: PUSH
5312: LD_INT 1
5314: ST_TO_ADDR
// if p3 = 116 then
5315: LD_VAR 0 3
5319: PUSH
5320: LD_INT 116
5322: EQUAL
5323: IFFALSE 5333
// sComputer := true ;
5325: LD_ADDR_EXP 77
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// if p3 = 117 then
5333: LD_VAR 0 3
5337: PUSH
5338: LD_INT 117
5340: EQUAL
5341: IFFALSE 5351
// s30 := true ;
5343: LD_ADDR_EXP 78
5347: PUSH
5348: LD_INT 1
5350: ST_TO_ADDR
// if p3 = 118 then
5351: LD_VAR 0 3
5355: PUSH
5356: LD_INT 118
5358: EQUAL
5359: IFFALSE 5369
// s60 := true ;
5361: LD_ADDR_EXP 79
5365: PUSH
5366: LD_INT 1
5368: ST_TO_ADDR
// end ; if p2 = 101 then
5369: LD_VAR 0 2
5373: PUSH
5374: LD_INT 101
5376: EQUAL
5377: IFFALSE 5505
// begin case p3 of 1 :
5379: LD_VAR 0 3
5383: PUSH
5384: LD_INT 1
5386: DOUBLE
5387: EQUAL
5388: IFTRUE 5392
5390: GO 5399
5392: POP
// hHackUnlimitedResources ; 2 :
5393: CALL 17603 0 0
5397: GO 5505
5399: LD_INT 2
5401: DOUBLE
5402: EQUAL
5403: IFTRUE 5407
5405: GO 5414
5407: POP
// hHackSetLevel10 ; 3 :
5408: CALL 17736 0 0
5412: GO 5505
5414: LD_INT 3
5416: DOUBLE
5417: EQUAL
5418: IFTRUE 5422
5420: GO 5429
5422: POP
// hHackSetLevel10YourUnits ; 4 :
5423: CALL 17821 0 0
5427: GO 5505
5429: LD_INT 4
5431: DOUBLE
5432: EQUAL
5433: IFTRUE 5437
5435: GO 5444
5437: POP
// hHackInvincible ; 5 :
5438: CALL 18269 0 0
5442: GO 5505
5444: LD_INT 5
5446: DOUBLE
5447: EQUAL
5448: IFTRUE 5452
5450: GO 5459
5452: POP
// hHackInvisible ; 6 :
5453: CALL 18380 0 0
5457: GO 5505
5459: LD_INT 6
5461: DOUBLE
5462: EQUAL
5463: IFTRUE 5467
5465: GO 5474
5467: POP
// hHackChangeYourSide ; 7 :
5468: CALL 18437 0 0
5472: GO 5505
5474: LD_INT 7
5476: DOUBLE
5477: EQUAL
5478: IFTRUE 5482
5480: GO 5489
5482: POP
// hHackChangeUnitSide ; 8 :
5483: CALL 18479 0 0
5487: GO 5505
5489: LD_INT 8
5491: DOUBLE
5492: EQUAL
5493: IFTRUE 5497
5495: GO 5504
5497: POP
// hHackFog ; end ;
5498: CALL 18580 0 0
5502: GO 5505
5504: POP
// end ; end ;
5505: LD_VAR 0 7
5509: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5510: GO 5512
5512: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5513: LD_STRING initStreamRollete();
5515: PPUSH
5516: CALL_OW 559
// InitStreamMode ;
5520: CALL 5532 0 0
// DefineStreamItems ( false ) ;
5524: LD_INT 0
5526: PPUSH
5527: CALL 5996 0 1
// end ;
5531: END
// function InitStreamMode ; begin
5532: LD_INT 0
5534: PPUSH
// streamModeActive := false ;
5535: LD_ADDR_EXP 23
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// normalCounter := 36 ;
5543: LD_ADDR_EXP 24
5547: PUSH
5548: LD_INT 36
5550: ST_TO_ADDR
// hardcoreCounter := 18 ;
5551: LD_ADDR_EXP 25
5555: PUSH
5556: LD_INT 18
5558: ST_TO_ADDR
// sRocket := false ;
5559: LD_ADDR_EXP 28
5563: PUSH
5564: LD_INT 0
5566: ST_TO_ADDR
// sSpeed := false ;
5567: LD_ADDR_EXP 27
5571: PUSH
5572: LD_INT 0
5574: ST_TO_ADDR
// sEngine := false ;
5575: LD_ADDR_EXP 29
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// sSpec := false ;
5583: LD_ADDR_EXP 26
5587: PUSH
5588: LD_INT 0
5590: ST_TO_ADDR
// sLevel := false ;
5591: LD_ADDR_EXP 30
5595: PUSH
5596: LD_INT 0
5598: ST_TO_ADDR
// sArmoury := false ;
5599: LD_ADDR_EXP 31
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// sRadar := false ;
5607: LD_ADDR_EXP 32
5611: PUSH
5612: LD_INT 0
5614: ST_TO_ADDR
// sBunker := false ;
5615: LD_ADDR_EXP 33
5619: PUSH
5620: LD_INT 0
5622: ST_TO_ADDR
// sHack := false ;
5623: LD_ADDR_EXP 34
5627: PUSH
5628: LD_INT 0
5630: ST_TO_ADDR
// sFire := false ;
5631: LD_ADDR_EXP 35
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// sRefresh := false ;
5639: LD_ADDR_EXP 36
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// sExp := false ;
5647: LD_ADDR_EXP 37
5651: PUSH
5652: LD_INT 0
5654: ST_TO_ADDR
// sDepot := false ;
5655: LD_ADDR_EXP 38
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// sFlag := false ;
5663: LD_ADDR_EXP 39
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// sKamikadze := false ;
5671: LD_ADDR_EXP 47
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// sTroll := false ;
5679: LD_ADDR_EXP 48
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// sSlow := false ;
5687: LD_ADDR_EXP 49
5691: PUSH
5692: LD_INT 0
5694: ST_TO_ADDR
// sLack := false ;
5695: LD_ADDR_EXP 50
5699: PUSH
5700: LD_INT 0
5702: ST_TO_ADDR
// sTank := false ;
5703: LD_ADDR_EXP 52
5707: PUSH
5708: LD_INT 0
5710: ST_TO_ADDR
// sRemote := false ;
5711: LD_ADDR_EXP 53
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// sPowell := false ;
5719: LD_ADDR_EXP 54
5723: PUSH
5724: LD_INT 0
5726: ST_TO_ADDR
// sTeleport := false ;
5727: LD_ADDR_EXP 57
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// sOilTower := false ;
5735: LD_ADDR_EXP 59
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// sShovel := false ;
5743: LD_ADDR_EXP 60
5747: PUSH
5748: LD_INT 0
5750: ST_TO_ADDR
// sSheik := false ;
5751: LD_ADDR_EXP 61
5755: PUSH
5756: LD_INT 0
5758: ST_TO_ADDR
// sEarthquake := false ;
5759: LD_ADDR_EXP 63
5763: PUSH
5764: LD_INT 0
5766: ST_TO_ADDR
// sAI := false ;
5767: LD_ADDR_EXP 64
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// sCargo := false ;
5775: LD_ADDR_EXP 67
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// sDLaser := false ;
5783: LD_ADDR_EXP 68
5787: PUSH
5788: LD_INT 0
5790: ST_TO_ADDR
// sExchange := false ;
5791: LD_ADDR_EXP 69
5795: PUSH
5796: LD_INT 0
5798: ST_TO_ADDR
// sFac := false ;
5799: LD_ADDR_EXP 70
5803: PUSH
5804: LD_INT 0
5806: ST_TO_ADDR
// sPower := false ;
5807: LD_ADDR_EXP 71
5811: PUSH
5812: LD_INT 0
5814: ST_TO_ADDR
// sRandom := false ;
5815: LD_ADDR_EXP 72
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// sShield := false ;
5823: LD_ADDR_EXP 73
5827: PUSH
5828: LD_INT 0
5830: ST_TO_ADDR
// sTime := false ;
5831: LD_ADDR_EXP 74
5835: PUSH
5836: LD_INT 0
5838: ST_TO_ADDR
// sTools := false ;
5839: LD_ADDR_EXP 75
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// sSold := false ;
5847: LD_ADDR_EXP 40
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// sDiff := false ;
5855: LD_ADDR_EXP 41
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// sFog := false ;
5863: LD_ADDR_EXP 44
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// sReset := false ;
5871: LD_ADDR_EXP 45
5875: PUSH
5876: LD_INT 0
5878: ST_TO_ADDR
// sSun := false ;
5879: LD_ADDR_EXP 46
5883: PUSH
5884: LD_INT 0
5886: ST_TO_ADDR
// sTiger := false ;
5887: LD_ADDR_EXP 42
5891: PUSH
5892: LD_INT 0
5894: ST_TO_ADDR
// sBomb := false ;
5895: LD_ADDR_EXP 43
5899: PUSH
5900: LD_INT 0
5902: ST_TO_ADDR
// sWound := false ;
5903: LD_ADDR_EXP 51
5907: PUSH
5908: LD_INT 0
5910: ST_TO_ADDR
// sBetray := false ;
5911: LD_ADDR_EXP 55
5915: PUSH
5916: LD_INT 0
5918: ST_TO_ADDR
// sContamin := false ;
5919: LD_ADDR_EXP 56
5923: PUSH
5924: LD_INT 0
5926: ST_TO_ADDR
// sOil := false ;
5927: LD_ADDR_EXP 58
5931: PUSH
5932: LD_INT 0
5934: ST_TO_ADDR
// sStu := false ;
5935: LD_ADDR_EXP 62
5939: PUSH
5940: LD_INT 0
5942: ST_TO_ADDR
// sBazooka := false ;
5943: LD_ADDR_EXP 65
5947: PUSH
5948: LD_INT 0
5950: ST_TO_ADDR
// sMortar := false ;
5951: LD_ADDR_EXP 66
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
// sRanger := false ;
5959: LD_ADDR_EXP 76
5963: PUSH
5964: LD_INT 0
5966: ST_TO_ADDR
// sComputer := false ;
5967: LD_ADDR_EXP 77
5971: PUSH
5972: LD_INT 0
5974: ST_TO_ADDR
// s30 := false ;
5975: LD_ADDR_EXP 78
5979: PUSH
5980: LD_INT 0
5982: ST_TO_ADDR
// s60 := false ;
5983: LD_ADDR_EXP 79
5987: PUSH
5988: LD_INT 0
5990: ST_TO_ADDR
// end ;
5991: LD_VAR 0 1
5995: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5996: LD_INT 0
5998: PPUSH
5999: PPUSH
6000: PPUSH
6001: PPUSH
6002: PPUSH
6003: PPUSH
6004: PPUSH
// result := [ ] ;
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// if campaign_id = 1 then
6012: LD_OWVAR 69
6016: PUSH
6017: LD_INT 1
6019: EQUAL
6020: IFFALSE 9186
// begin case mission_number of 1 :
6022: LD_OWVAR 70
6026: PUSH
6027: LD_INT 1
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6111
6035: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_INT 2
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: LD_INT 11
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: LD_INT 15
6055: PUSH
6056: LD_INT 16
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 101
6081: PUSH
6082: LD_INT 102
6084: PUSH
6085: LD_INT 106
6087: PUSH
6088: LD_INT 116
6090: PUSH
6091: LD_INT 117
6093: PUSH
6094: LD_INT 118
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: ST_TO_ADDR
6109: GO 9184
6111: LD_INT 2
6113: DOUBLE
6114: EQUAL
6115: IFTRUE 6119
6117: GO 6203
6119: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6120: LD_ADDR_VAR 0 2
6124: PUSH
6125: LD_INT 2
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: LD_INT 11
6133: PUSH
6134: LD_INT 12
6136: PUSH
6137: LD_INT 15
6139: PUSH
6140: LD_INT 16
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_INT 23
6148: PUSH
6149: LD_INT 26
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 101
6165: PUSH
6166: LD_INT 102
6168: PUSH
6169: LD_INT 105
6171: PUSH
6172: LD_INT 106
6174: PUSH
6175: LD_INT 108
6177: PUSH
6178: LD_INT 116
6180: PUSH
6181: LD_INT 117
6183: PUSH
6184: LD_INT 118
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: ST_TO_ADDR
6201: GO 9184
6203: LD_INT 3
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6299
6211: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: LD_INT 11
6228: PUSH
6229: LD_INT 12
6231: PUSH
6232: LD_INT 15
6234: PUSH
6235: LD_INT 16
6237: PUSH
6238: LD_INT 22
6240: PUSH
6241: LD_INT 26
6243: PUSH
6244: LD_INT 36
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 101
6261: PUSH
6262: LD_INT 102
6264: PUSH
6265: LD_INT 105
6267: PUSH
6268: LD_INT 106
6270: PUSH
6271: LD_INT 108
6273: PUSH
6274: LD_INT 116
6276: PUSH
6277: LD_INT 117
6279: PUSH
6280: LD_INT 118
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: ST_TO_ADDR
6297: GO 9184
6299: LD_INT 4
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6403
6307: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6308: LD_ADDR_VAR 0 2
6312: PUSH
6313: LD_INT 2
6315: PUSH
6316: LD_INT 4
6318: PUSH
6319: LD_INT 5
6321: PUSH
6322: LD_INT 8
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: LD_INT 15
6333: PUSH
6334: LD_INT 16
6336: PUSH
6337: LD_INT 22
6339: PUSH
6340: LD_INT 23
6342: PUSH
6343: LD_INT 26
6345: PUSH
6346: LD_INT 36
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 101
6365: PUSH
6366: LD_INT 102
6368: PUSH
6369: LD_INT 105
6371: PUSH
6372: LD_INT 106
6374: PUSH
6375: LD_INT 108
6377: PUSH
6378: LD_INT 116
6380: PUSH
6381: LD_INT 117
6383: PUSH
6384: LD_INT 118
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: ST_TO_ADDR
6401: GO 9184
6403: LD_INT 5
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6523
6411: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6412: LD_ADDR_VAR 0 2
6416: PUSH
6417: LD_INT 2
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 6
6428: PUSH
6429: LD_INT 8
6431: PUSH
6432: LD_INT 11
6434: PUSH
6435: LD_INT 12
6437: PUSH
6438: LD_INT 15
6440: PUSH
6441: LD_INT 16
6443: PUSH
6444: LD_INT 22
6446: PUSH
6447: LD_INT 23
6449: PUSH
6450: LD_INT 25
6452: PUSH
6453: LD_INT 26
6455: PUSH
6456: LD_INT 36
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 101
6477: PUSH
6478: LD_INT 102
6480: PUSH
6481: LD_INT 105
6483: PUSH
6484: LD_INT 106
6486: PUSH
6487: LD_INT 108
6489: PUSH
6490: LD_INT 109
6492: PUSH
6493: LD_INT 112
6495: PUSH
6496: LD_INT 116
6498: PUSH
6499: LD_INT 117
6501: PUSH
6502: LD_INT 118
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: ST_TO_ADDR
6521: GO 9184
6523: LD_INT 6
6525: DOUBLE
6526: EQUAL
6527: IFTRUE 6531
6529: GO 6663
6531: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6532: LD_ADDR_VAR 0 2
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 5
6545: PUSH
6546: LD_INT 6
6548: PUSH
6549: LD_INT 8
6551: PUSH
6552: LD_INT 11
6554: PUSH
6555: LD_INT 12
6557: PUSH
6558: LD_INT 15
6560: PUSH
6561: LD_INT 16
6563: PUSH
6564: LD_INT 20
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_INT 23
6575: PUSH
6576: LD_INT 25
6578: PUSH
6579: LD_INT 26
6581: PUSH
6582: LD_INT 30
6584: PUSH
6585: LD_INT 31
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: LD_INT 36
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 101
6617: PUSH
6618: LD_INT 102
6620: PUSH
6621: LD_INT 105
6623: PUSH
6624: LD_INT 106
6626: PUSH
6627: LD_INT 108
6629: PUSH
6630: LD_INT 109
6632: PUSH
6633: LD_INT 112
6635: PUSH
6636: LD_INT 116
6638: PUSH
6639: LD_INT 117
6641: PUSH
6642: LD_INT 118
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: ST_TO_ADDR
6661: GO 9184
6663: LD_INT 7
6665: DOUBLE
6666: EQUAL
6667: IFTRUE 6671
6669: GO 6783
6671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 11
6691: PUSH
6692: LD_INT 12
6694: PUSH
6695: LD_INT 15
6697: PUSH
6698: LD_INT 16
6700: PUSH
6701: LD_INT 20
6703: PUSH
6704: LD_INT 21
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_INT 23
6712: PUSH
6713: LD_INT 25
6715: PUSH
6716: LD_INT 26
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 101
6737: PUSH
6738: LD_INT 102
6740: PUSH
6741: LD_INT 103
6743: PUSH
6744: LD_INT 105
6746: PUSH
6747: LD_INT 106
6749: PUSH
6750: LD_INT 108
6752: PUSH
6753: LD_INT 112
6755: PUSH
6756: LD_INT 116
6758: PUSH
6759: LD_INT 117
6761: PUSH
6762: LD_INT 118
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 9184
6783: LD_INT 8
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6931
6791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6792: LD_ADDR_VAR 0 2
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 4
6802: PUSH
6803: LD_INT 5
6805: PUSH
6806: LD_INT 6
6808: PUSH
6809: LD_INT 7
6811: PUSH
6812: LD_INT 8
6814: PUSH
6815: LD_INT 11
6817: PUSH
6818: LD_INT 12
6820: PUSH
6821: LD_INT 15
6823: PUSH
6824: LD_INT 16
6826: PUSH
6827: LD_INT 20
6829: PUSH
6830: LD_INT 21
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 23
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 26
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 31
6850: PUSH
6851: LD_INT 32
6853: PUSH
6854: LD_INT 36
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 101
6881: PUSH
6882: LD_INT 102
6884: PUSH
6885: LD_INT 103
6887: PUSH
6888: LD_INT 105
6890: PUSH
6891: LD_INT 106
6893: PUSH
6894: LD_INT 108
6896: PUSH
6897: LD_INT 109
6899: PUSH
6900: LD_INT 112
6902: PUSH
6903: LD_INT 116
6905: PUSH
6906: LD_INT 117
6908: PUSH
6909: LD_INT 118
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
6929: GO 9184
6931: LD_INT 9
6933: DOUBLE
6934: EQUAL
6935: IFTRUE 6939
6937: GO 7087
6939: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: LD_INT 2
6947: PUSH
6948: LD_INT 4
6950: PUSH
6951: LD_INT 5
6953: PUSH
6954: LD_INT 6
6956: PUSH
6957: LD_INT 7
6959: PUSH
6960: LD_INT 8
6962: PUSH
6963: LD_INT 11
6965: PUSH
6966: LD_INT 12
6968: PUSH
6969: LD_INT 15
6971: PUSH
6972: LD_INT 16
6974: PUSH
6975: LD_INT 20
6977: PUSH
6978: LD_INT 21
6980: PUSH
6981: LD_INT 22
6983: PUSH
6984: LD_INT 23
6986: PUSH
6987: LD_INT 25
6989: PUSH
6990: LD_INT 26
6992: PUSH
6993: LD_INT 28
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 31
7001: PUSH
7002: LD_INT 32
7004: PUSH
7005: LD_INT 36
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 101
7033: PUSH
7034: LD_INT 102
7036: PUSH
7037: LD_INT 103
7039: PUSH
7040: LD_INT 105
7042: PUSH
7043: LD_INT 106
7045: PUSH
7046: LD_INT 108
7048: PUSH
7049: LD_INT 109
7051: PUSH
7052: LD_INT 112
7054: PUSH
7055: LD_INT 114
7057: PUSH
7058: LD_INT 116
7060: PUSH
7061: LD_INT 117
7063: PUSH
7064: LD_INT 118
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 9184
7087: LD_INT 10
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7291
7095: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 4
7106: PUSH
7107: LD_INT 5
7109: PUSH
7110: LD_INT 6
7112: PUSH
7113: LD_INT 7
7115: PUSH
7116: LD_INT 8
7118: PUSH
7119: LD_INT 9
7121: PUSH
7122: LD_INT 10
7124: PUSH
7125: LD_INT 11
7127: PUSH
7128: LD_INT 12
7130: PUSH
7131: LD_INT 13
7133: PUSH
7134: LD_INT 14
7136: PUSH
7137: LD_INT 15
7139: PUSH
7140: LD_INT 16
7142: PUSH
7143: LD_INT 17
7145: PUSH
7146: LD_INT 18
7148: PUSH
7149: LD_INT 19
7151: PUSH
7152: LD_INT 20
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_INT 23
7163: PUSH
7164: LD_INT 24
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 26
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 31
7181: PUSH
7182: LD_INT 32
7184: PUSH
7185: LD_INT 36
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 101
7221: PUSH
7222: LD_INT 102
7224: PUSH
7225: LD_INT 103
7227: PUSH
7228: LD_INT 104
7230: PUSH
7231: LD_INT 105
7233: PUSH
7234: LD_INT 106
7236: PUSH
7237: LD_INT 107
7239: PUSH
7240: LD_INT 108
7242: PUSH
7243: LD_INT 109
7245: PUSH
7246: LD_INT 110
7248: PUSH
7249: LD_INT 111
7251: PUSH
7252: LD_INT 112
7254: PUSH
7255: LD_INT 114
7257: PUSH
7258: LD_INT 116
7260: PUSH
7261: LD_INT 117
7263: PUSH
7264: LD_INT 118
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: ST_TO_ADDR
7289: GO 9184
7291: LD_INT 11
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7503
7299: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7300: LD_ADDR_VAR 0 2
7304: PUSH
7305: LD_INT 2
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: LD_INT 4
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: LD_INT 9
7328: PUSH
7329: LD_INT 10
7331: PUSH
7332: LD_INT 11
7334: PUSH
7335: LD_INT 12
7337: PUSH
7338: LD_INT 13
7340: PUSH
7341: LD_INT 14
7343: PUSH
7344: LD_INT 15
7346: PUSH
7347: LD_INT 16
7349: PUSH
7350: LD_INT 17
7352: PUSH
7353: LD_INT 18
7355: PUSH
7356: LD_INT 19
7358: PUSH
7359: LD_INT 20
7361: PUSH
7362: LD_INT 21
7364: PUSH
7365: LD_INT 22
7367: PUSH
7368: LD_INT 23
7370: PUSH
7371: LD_INT 24
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 26
7379: PUSH
7380: LD_INT 28
7382: PUSH
7383: LD_INT 30
7385: PUSH
7386: LD_INT 31
7388: PUSH
7389: LD_INT 32
7391: PUSH
7392: LD_INT 34
7394: PUSH
7395: LD_INT 36
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 101
7433: PUSH
7434: LD_INT 102
7436: PUSH
7437: LD_INT 103
7439: PUSH
7440: LD_INT 104
7442: PUSH
7443: LD_INT 105
7445: PUSH
7446: LD_INT 106
7448: PUSH
7449: LD_INT 107
7451: PUSH
7452: LD_INT 108
7454: PUSH
7455: LD_INT 109
7457: PUSH
7458: LD_INT 110
7460: PUSH
7461: LD_INT 111
7463: PUSH
7464: LD_INT 112
7466: PUSH
7467: LD_INT 114
7469: PUSH
7470: LD_INT 116
7472: PUSH
7473: LD_INT 117
7475: PUSH
7476: LD_INT 118
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ST_TO_ADDR
7501: GO 9184
7503: LD_INT 12
7505: DOUBLE
7506: EQUAL
7507: IFTRUE 7511
7509: GO 7731
7511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7512: LD_ADDR_VAR 0 2
7516: PUSH
7517: LD_INT 1
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: LD_INT 7
7537: PUSH
7538: LD_INT 8
7540: PUSH
7541: LD_INT 9
7543: PUSH
7544: LD_INT 10
7546: PUSH
7547: LD_INT 11
7549: PUSH
7550: LD_INT 12
7552: PUSH
7553: LD_INT 13
7555: PUSH
7556: LD_INT 14
7558: PUSH
7559: LD_INT 15
7561: PUSH
7562: LD_INT 16
7564: PUSH
7565: LD_INT 17
7567: PUSH
7568: LD_INT 18
7570: PUSH
7571: LD_INT 19
7573: PUSH
7574: LD_INT 20
7576: PUSH
7577: LD_INT 21
7579: PUSH
7580: LD_INT 22
7582: PUSH
7583: LD_INT 23
7585: PUSH
7586: LD_INT 24
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 26
7594: PUSH
7595: LD_INT 27
7597: PUSH
7598: LD_INT 28
7600: PUSH
7601: LD_INT 30
7603: PUSH
7604: LD_INT 31
7606: PUSH
7607: LD_INT 32
7609: PUSH
7610: LD_INT 33
7612: PUSH
7613: LD_INT 34
7615: PUSH
7616: LD_INT 36
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 101
7657: PUSH
7658: LD_INT 102
7660: PUSH
7661: LD_INT 103
7663: PUSH
7664: LD_INT 104
7666: PUSH
7667: LD_INT 105
7669: PUSH
7670: LD_INT 106
7672: PUSH
7673: LD_INT 107
7675: PUSH
7676: LD_INT 108
7678: PUSH
7679: LD_INT 109
7681: PUSH
7682: LD_INT 110
7684: PUSH
7685: LD_INT 111
7687: PUSH
7688: LD_INT 112
7690: PUSH
7691: LD_INT 113
7693: PUSH
7694: LD_INT 114
7696: PUSH
7697: LD_INT 116
7699: PUSH
7700: LD_INT 117
7702: PUSH
7703: LD_INT 118
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: ST_TO_ADDR
7729: GO 9184
7731: LD_INT 13
7733: DOUBLE
7734: EQUAL
7735: IFTRUE 7739
7737: GO 7947
7739: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7740: LD_ADDR_VAR 0 2
7744: PUSH
7745: LD_INT 1
7747: PUSH
7748: LD_INT 2
7750: PUSH
7751: LD_INT 3
7753: PUSH
7754: LD_INT 4
7756: PUSH
7757: LD_INT 5
7759: PUSH
7760: LD_INT 8
7762: PUSH
7763: LD_INT 9
7765: PUSH
7766: LD_INT 10
7768: PUSH
7769: LD_INT 11
7771: PUSH
7772: LD_INT 12
7774: PUSH
7775: LD_INT 14
7777: PUSH
7778: LD_INT 15
7780: PUSH
7781: LD_INT 16
7783: PUSH
7784: LD_INT 17
7786: PUSH
7787: LD_INT 18
7789: PUSH
7790: LD_INT 19
7792: PUSH
7793: LD_INT 20
7795: PUSH
7796: LD_INT 21
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 23
7804: PUSH
7805: LD_INT 24
7807: PUSH
7808: LD_INT 25
7810: PUSH
7811: LD_INT 26
7813: PUSH
7814: LD_INT 27
7816: PUSH
7817: LD_INT 28
7819: PUSH
7820: LD_INT 30
7822: PUSH
7823: LD_INT 31
7825: PUSH
7826: LD_INT 32
7828: PUSH
7829: LD_INT 33
7831: PUSH
7832: LD_INT 34
7834: PUSH
7835: LD_INT 36
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 101
7873: PUSH
7874: LD_INT 102
7876: PUSH
7877: LD_INT 103
7879: PUSH
7880: LD_INT 104
7882: PUSH
7883: LD_INT 105
7885: PUSH
7886: LD_INT 106
7888: PUSH
7889: LD_INT 107
7891: PUSH
7892: LD_INT 108
7894: PUSH
7895: LD_INT 109
7897: PUSH
7898: LD_INT 110
7900: PUSH
7901: LD_INT 111
7903: PUSH
7904: LD_INT 112
7906: PUSH
7907: LD_INT 113
7909: PUSH
7910: LD_INT 114
7912: PUSH
7913: LD_INT 116
7915: PUSH
7916: LD_INT 117
7918: PUSH
7919: LD_INT 118
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 9184
7947: LD_INT 14
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 8179
7955: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7956: LD_ADDR_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 3
7969: PUSH
7970: LD_INT 4
7972: PUSH
7973: LD_INT 5
7975: PUSH
7976: LD_INT 6
7978: PUSH
7979: LD_INT 7
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: LD_INT 10
7990: PUSH
7991: LD_INT 11
7993: PUSH
7994: LD_INT 12
7996: PUSH
7997: LD_INT 13
7999: PUSH
8000: LD_INT 14
8002: PUSH
8003: LD_INT 15
8005: PUSH
8006: LD_INT 16
8008: PUSH
8009: LD_INT 17
8011: PUSH
8012: LD_INT 18
8014: PUSH
8015: LD_INT 19
8017: PUSH
8018: LD_INT 20
8020: PUSH
8021: LD_INT 21
8023: PUSH
8024: LD_INT 22
8026: PUSH
8027: LD_INT 23
8029: PUSH
8030: LD_INT 24
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 26
8038: PUSH
8039: LD_INT 27
8041: PUSH
8042: LD_INT 28
8044: PUSH
8045: LD_INT 29
8047: PUSH
8048: LD_INT 30
8050: PUSH
8051: LD_INT 31
8053: PUSH
8054: LD_INT 32
8056: PUSH
8057: LD_INT 33
8059: PUSH
8060: LD_INT 34
8062: PUSH
8063: LD_INT 36
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 101
8105: PUSH
8106: LD_INT 102
8108: PUSH
8109: LD_INT 103
8111: PUSH
8112: LD_INT 104
8114: PUSH
8115: LD_INT 105
8117: PUSH
8118: LD_INT 106
8120: PUSH
8121: LD_INT 107
8123: PUSH
8124: LD_INT 108
8126: PUSH
8127: LD_INT 109
8129: PUSH
8130: LD_INT 110
8132: PUSH
8133: LD_INT 111
8135: PUSH
8136: LD_INT 112
8138: PUSH
8139: LD_INT 113
8141: PUSH
8142: LD_INT 114
8144: PUSH
8145: LD_INT 116
8147: PUSH
8148: LD_INT 117
8150: PUSH
8151: LD_INT 118
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: ST_TO_ADDR
8177: GO 9184
8179: LD_INT 15
8181: DOUBLE
8182: EQUAL
8183: IFTRUE 8187
8185: GO 8411
8187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8188: LD_ADDR_VAR 0 2
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: LD_INT 6
8210: PUSH
8211: LD_INT 7
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: LD_INT 9
8219: PUSH
8220: LD_INT 10
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 13
8231: PUSH
8232: LD_INT 14
8234: PUSH
8235: LD_INT 15
8237: PUSH
8238: LD_INT 16
8240: PUSH
8241: LD_INT 17
8243: PUSH
8244: LD_INT 18
8246: PUSH
8247: LD_INT 19
8249: PUSH
8250: LD_INT 20
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_INT 23
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 26
8270: PUSH
8271: LD_INT 27
8273: PUSH
8274: LD_INT 28
8276: PUSH
8277: LD_INT 29
8279: PUSH
8280: LD_INT 30
8282: PUSH
8283: LD_INT 31
8285: PUSH
8286: LD_INT 32
8288: PUSH
8289: LD_INT 33
8291: PUSH
8292: LD_INT 34
8294: PUSH
8295: LD_INT 36
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 101
8337: PUSH
8338: LD_INT 102
8340: PUSH
8341: LD_INT 103
8343: PUSH
8344: LD_INT 104
8346: PUSH
8347: LD_INT 105
8349: PUSH
8350: LD_INT 106
8352: PUSH
8353: LD_INT 107
8355: PUSH
8356: LD_INT 108
8358: PUSH
8359: LD_INT 109
8361: PUSH
8362: LD_INT 110
8364: PUSH
8365: LD_INT 111
8367: PUSH
8368: LD_INT 112
8370: PUSH
8371: LD_INT 113
8373: PUSH
8374: LD_INT 114
8376: PUSH
8377: LD_INT 116
8379: PUSH
8380: LD_INT 117
8382: PUSH
8383: LD_INT 118
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: ST_TO_ADDR
8409: GO 9184
8411: LD_INT 16
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8555
8419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8420: LD_ADDR_VAR 0 2
8424: PUSH
8425: LD_INT 2
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: LD_INT 7
8436: PUSH
8437: LD_INT 11
8439: PUSH
8440: LD_INT 12
8442: PUSH
8443: LD_INT 15
8445: PUSH
8446: LD_INT 16
8448: PUSH
8449: LD_INT 20
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 23
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 26
8466: PUSH
8467: LD_INT 30
8469: PUSH
8470: LD_INT 31
8472: PUSH
8473: LD_INT 32
8475: PUSH
8476: LD_INT 33
8478: PUSH
8479: LD_INT 34
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 101
8505: PUSH
8506: LD_INT 102
8508: PUSH
8509: LD_INT 103
8511: PUSH
8512: LD_INT 106
8514: PUSH
8515: LD_INT 108
8517: PUSH
8518: LD_INT 112
8520: PUSH
8521: LD_INT 113
8523: PUSH
8524: LD_INT 114
8526: PUSH
8527: LD_INT 116
8529: PUSH
8530: LD_INT 117
8532: PUSH
8533: LD_INT 118
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: ST_TO_ADDR
8553: GO 9184
8555: LD_INT 17
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8787
8563: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_INT 1
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: LD_INT 5
8583: PUSH
8584: LD_INT 6
8586: PUSH
8587: LD_INT 7
8589: PUSH
8590: LD_INT 8
8592: PUSH
8593: LD_INT 9
8595: PUSH
8596: LD_INT 10
8598: PUSH
8599: LD_INT 11
8601: PUSH
8602: LD_INT 12
8604: PUSH
8605: LD_INT 13
8607: PUSH
8608: LD_INT 14
8610: PUSH
8611: LD_INT 15
8613: PUSH
8614: LD_INT 16
8616: PUSH
8617: LD_INT 17
8619: PUSH
8620: LD_INT 18
8622: PUSH
8623: LD_INT 19
8625: PUSH
8626: LD_INT 20
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 23
8637: PUSH
8638: LD_INT 24
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 27
8649: PUSH
8650: LD_INT 28
8652: PUSH
8653: LD_INT 29
8655: PUSH
8656: LD_INT 30
8658: PUSH
8659: LD_INT 31
8661: PUSH
8662: LD_INT 32
8664: PUSH
8665: LD_INT 33
8667: PUSH
8668: LD_INT 34
8670: PUSH
8671: LD_INT 36
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 101
8713: PUSH
8714: LD_INT 102
8716: PUSH
8717: LD_INT 103
8719: PUSH
8720: LD_INT 104
8722: PUSH
8723: LD_INT 105
8725: PUSH
8726: LD_INT 106
8728: PUSH
8729: LD_INT 107
8731: PUSH
8732: LD_INT 108
8734: PUSH
8735: LD_INT 109
8737: PUSH
8738: LD_INT 110
8740: PUSH
8741: LD_INT 111
8743: PUSH
8744: LD_INT 112
8746: PUSH
8747: LD_INT 113
8749: PUSH
8750: LD_INT 114
8752: PUSH
8753: LD_INT 116
8755: PUSH
8756: LD_INT 117
8758: PUSH
8759: LD_INT 118
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: ST_TO_ADDR
8785: GO 9184
8787: LD_INT 18
8789: DOUBLE
8790: EQUAL
8791: IFTRUE 8795
8793: GO 8943
8795: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8796: LD_ADDR_VAR 0 2
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: LD_INT 4
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: LD_INT 7
8812: PUSH
8813: LD_INT 11
8815: PUSH
8816: LD_INT 12
8818: PUSH
8819: LD_INT 15
8821: PUSH
8822: LD_INT 16
8824: PUSH
8825: LD_INT 20
8827: PUSH
8828: LD_INT 21
8830: PUSH
8831: LD_INT 22
8833: PUSH
8834: LD_INT 23
8836: PUSH
8837: LD_INT 25
8839: PUSH
8840: LD_INT 26
8842: PUSH
8843: LD_INT 30
8845: PUSH
8846: LD_INT 31
8848: PUSH
8849: LD_INT 32
8851: PUSH
8852: LD_INT 33
8854: PUSH
8855: LD_INT 34
8857: PUSH
8858: LD_INT 35
8860: PUSH
8861: LD_INT 36
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 101
8889: PUSH
8890: LD_INT 102
8892: PUSH
8893: LD_INT 103
8895: PUSH
8896: LD_INT 106
8898: PUSH
8899: LD_INT 108
8901: PUSH
8902: LD_INT 112
8904: PUSH
8905: LD_INT 113
8907: PUSH
8908: LD_INT 114
8910: PUSH
8911: LD_INT 115
8913: PUSH
8914: LD_INT 116
8916: PUSH
8917: LD_INT 117
8919: PUSH
8920: LD_INT 118
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: ST_TO_ADDR
8941: GO 9184
8943: LD_INT 19
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9183
8951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: LD_INT 1
8959: PUSH
8960: LD_INT 2
8962: PUSH
8963: LD_INT 3
8965: PUSH
8966: LD_INT 4
8968: PUSH
8969: LD_INT 5
8971: PUSH
8972: LD_INT 6
8974: PUSH
8975: LD_INT 7
8977: PUSH
8978: LD_INT 8
8980: PUSH
8981: LD_INT 9
8983: PUSH
8984: LD_INT 10
8986: PUSH
8987: LD_INT 11
8989: PUSH
8990: LD_INT 12
8992: PUSH
8993: LD_INT 13
8995: PUSH
8996: LD_INT 14
8998: PUSH
8999: LD_INT 15
9001: PUSH
9002: LD_INT 16
9004: PUSH
9005: LD_INT 17
9007: PUSH
9008: LD_INT 18
9010: PUSH
9011: LD_INT 19
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 24
9028: PUSH
9029: LD_INT 25
9031: PUSH
9032: LD_INT 26
9034: PUSH
9035: LD_INT 27
9037: PUSH
9038: LD_INT 28
9040: PUSH
9041: LD_INT 29
9043: PUSH
9044: LD_INT 30
9046: PUSH
9047: LD_INT 31
9049: PUSH
9050: LD_INT 32
9052: PUSH
9053: LD_INT 33
9055: PUSH
9056: LD_INT 34
9058: PUSH
9059: LD_INT 35
9061: PUSH
9062: LD_INT 36
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 101
9105: PUSH
9106: LD_INT 102
9108: PUSH
9109: LD_INT 103
9111: PUSH
9112: LD_INT 104
9114: PUSH
9115: LD_INT 105
9117: PUSH
9118: LD_INT 106
9120: PUSH
9121: LD_INT 107
9123: PUSH
9124: LD_INT 108
9126: PUSH
9127: LD_INT 109
9129: PUSH
9130: LD_INT 110
9132: PUSH
9133: LD_INT 111
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 113
9141: PUSH
9142: LD_INT 114
9144: PUSH
9145: LD_INT 115
9147: PUSH
9148: LD_INT 116
9150: PUSH
9151: LD_INT 117
9153: PUSH
9154: LD_INT 118
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 9184
9183: POP
// end else
9184: GO 9415
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 3
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 6
9208: PUSH
9209: LD_INT 7
9211: PUSH
9212: LD_INT 8
9214: PUSH
9215: LD_INT 9
9217: PUSH
9218: LD_INT 10
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 13
9229: PUSH
9230: LD_INT 14
9232: PUSH
9233: LD_INT 15
9235: PUSH
9236: LD_INT 16
9238: PUSH
9239: LD_INT 17
9241: PUSH
9242: LD_INT 18
9244: PUSH
9245: LD_INT 19
9247: PUSH
9248: LD_INT 20
9250: PUSH
9251: LD_INT 21
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_INT 23
9259: PUSH
9260: LD_INT 24
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 26
9268: PUSH
9269: LD_INT 27
9271: PUSH
9272: LD_INT 28
9274: PUSH
9275: LD_INT 29
9277: PUSH
9278: LD_INT 30
9280: PUSH
9281: LD_INT 31
9283: PUSH
9284: LD_INT 32
9286: PUSH
9287: LD_INT 33
9289: PUSH
9290: LD_INT 34
9292: PUSH
9293: LD_INT 35
9295: PUSH
9296: LD_INT 36
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 101
9339: PUSH
9340: LD_INT 102
9342: PUSH
9343: LD_INT 103
9345: PUSH
9346: LD_INT 104
9348: PUSH
9349: LD_INT 105
9351: PUSH
9352: LD_INT 106
9354: PUSH
9355: LD_INT 107
9357: PUSH
9358: LD_INT 108
9360: PUSH
9361: LD_INT 109
9363: PUSH
9364: LD_INT 110
9366: PUSH
9367: LD_INT 111
9369: PUSH
9370: LD_INT 112
9372: PUSH
9373: LD_INT 113
9375: PUSH
9376: LD_INT 114
9378: PUSH
9379: LD_INT 115
9381: PUSH
9382: LD_INT 116
9384: PUSH
9385: LD_INT 117
9387: PUSH
9388: LD_INT 118
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: ST_TO_ADDR
// if result then
9415: LD_VAR 0 2
9419: IFFALSE 10205
// begin normal :=  ;
9421: LD_ADDR_VAR 0 5
9425: PUSH
9426: LD_STRING 
9428: ST_TO_ADDR
// hardcore :=  ;
9429: LD_ADDR_VAR 0 6
9433: PUSH
9434: LD_STRING 
9436: ST_TO_ADDR
// active :=  ;
9437: LD_ADDR_VAR 0 7
9441: PUSH
9442: LD_STRING 
9444: ST_TO_ADDR
// for i = 1 to normalCounter do
9445: LD_ADDR_VAR 0 8
9449: PUSH
9450: DOUBLE
9451: LD_INT 1
9453: DEC
9454: ST_TO_ADDR
9455: LD_EXP 24
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9562
// begin tmp := 0 ;
9463: LD_ADDR_VAR 0 3
9467: PUSH
9468: LD_STRING 0
9470: ST_TO_ADDR
// if result [ 1 ] then
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: IFFALSE 9544
// if result [ 1 ] [ 1 ] = i then
9481: LD_VAR 0 2
9485: PUSH
9486: LD_INT 1
9488: ARRAY
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PUSH
9494: LD_VAR 0 8
9498: EQUAL
9499: IFFALSE 9544
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9501: LD_ADDR_VAR 0 2
9505: PUSH
9506: LD_VAR 0 2
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_VAR 0 2
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 3
9530: PPUSH
9531: CALL_OW 1
9535: ST_TO_ADDR
// tmp := 1 ;
9536: LD_ADDR_VAR 0 3
9540: PUSH
9541: LD_STRING 1
9543: ST_TO_ADDR
// end ; normal := normal & tmp ;
9544: LD_ADDR_VAR 0 5
9548: PUSH
9549: LD_VAR 0 5
9553: PUSH
9554: LD_VAR 0 3
9558: STR
9559: ST_TO_ADDR
// end ;
9560: GO 9460
9562: POP
9563: POP
// for i = 1 to hardcoreCounter do
9564: LD_ADDR_VAR 0 8
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_EXP 25
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9685
// begin tmp := 0 ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_STRING 0
9589: ST_TO_ADDR
// if result [ 2 ] then
9590: LD_VAR 0 2
9594: PUSH
9595: LD_INT 2
9597: ARRAY
9598: IFFALSE 9667
// if result [ 2 ] [ 1 ] = 100 + i then
9600: LD_VAR 0 2
9604: PUSH
9605: LD_INT 2
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PUSH
9613: LD_INT 100
9615: PUSH
9616: LD_VAR 0 8
9620: PLUS
9621: EQUAL
9622: IFFALSE 9667
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9624: LD_ADDR_VAR 0 2
9628: PUSH
9629: LD_VAR 0 2
9633: PPUSH
9634: LD_INT 2
9636: PPUSH
9637: LD_VAR 0 2
9641: PUSH
9642: LD_INT 2
9644: ARRAY
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 3
9653: PPUSH
9654: CALL_OW 1
9658: ST_TO_ADDR
// tmp := 1 ;
9659: LD_ADDR_VAR 0 3
9663: PUSH
9664: LD_STRING 1
9666: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9667: LD_ADDR_VAR 0 6
9671: PUSH
9672: LD_VAR 0 6
9676: PUSH
9677: LD_VAR 0 3
9681: STR
9682: ST_TO_ADDR
// end ;
9683: GO 9579
9685: POP
9686: POP
// if isGameLoad then
9687: LD_VAR 0 1
9691: IFFALSE 10166
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9693: LD_ADDR_VAR 0 4
9697: PUSH
9698: LD_EXP 28
9702: PUSH
9703: LD_EXP 27
9707: PUSH
9708: LD_EXP 29
9712: PUSH
9713: LD_EXP 26
9717: PUSH
9718: LD_EXP 30
9722: PUSH
9723: LD_EXP 31
9727: PUSH
9728: LD_EXP 32
9732: PUSH
9733: LD_EXP 33
9737: PUSH
9738: LD_EXP 34
9742: PUSH
9743: LD_EXP 35
9747: PUSH
9748: LD_EXP 36
9752: PUSH
9753: LD_EXP 37
9757: PUSH
9758: LD_EXP 38
9762: PUSH
9763: LD_EXP 39
9767: PUSH
9768: LD_EXP 47
9772: PUSH
9773: LD_EXP 48
9777: PUSH
9778: LD_EXP 49
9782: PUSH
9783: LD_EXP 50
9787: PUSH
9788: LD_EXP 52
9792: PUSH
9793: LD_EXP 53
9797: PUSH
9798: LD_EXP 54
9802: PUSH
9803: LD_EXP 57
9807: PUSH
9808: LD_EXP 59
9812: PUSH
9813: LD_EXP 60
9817: PUSH
9818: LD_EXP 61
9822: PUSH
9823: LD_EXP 63
9827: PUSH
9828: LD_EXP 64
9832: PUSH
9833: LD_EXP 67
9837: PUSH
9838: LD_EXP 68
9842: PUSH
9843: LD_EXP 69
9847: PUSH
9848: LD_EXP 70
9852: PUSH
9853: LD_EXP 71
9857: PUSH
9858: LD_EXP 72
9862: PUSH
9863: LD_EXP 73
9867: PUSH
9868: LD_EXP 74
9872: PUSH
9873: LD_EXP 75
9877: PUSH
9878: LD_EXP 40
9882: PUSH
9883: LD_EXP 41
9887: PUSH
9888: LD_EXP 44
9892: PUSH
9893: LD_EXP 45
9897: PUSH
9898: LD_EXP 46
9902: PUSH
9903: LD_EXP 42
9907: PUSH
9908: LD_EXP 43
9912: PUSH
9913: LD_EXP 51
9917: PUSH
9918: LD_EXP 55
9922: PUSH
9923: LD_EXP 56
9927: PUSH
9928: LD_EXP 58
9932: PUSH
9933: LD_EXP 62
9937: PUSH
9938: LD_EXP 65
9942: PUSH
9943: LD_EXP 66
9947: PUSH
9948: LD_EXP 76
9952: PUSH
9953: LD_EXP 77
9957: PUSH
9958: LD_EXP 78
9962: PUSH
9963: LD_EXP 79
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: ST_TO_ADDR
// tmp :=  ;
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_STRING 
10031: ST_TO_ADDR
// for i = 1 to normalCounter do
10032: LD_ADDR_VAR 0 8
10036: PUSH
10037: DOUBLE
10038: LD_INT 1
10040: DEC
10041: ST_TO_ADDR
10042: LD_EXP 24
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10084
// begin if flags [ i ] then
10050: LD_VAR 0 4
10054: PUSH
10055: LD_VAR 0 8
10059: ARRAY
10060: IFFALSE 10082
// tmp := tmp & i & ; ;
10062: LD_ADDR_VAR 0 3
10066: PUSH
10067: LD_VAR 0 3
10071: PUSH
10072: LD_VAR 0 8
10076: STR
10077: PUSH
10078: LD_STRING ;
10080: STR
10081: ST_TO_ADDR
// end ;
10082: GO 10047
10084: POP
10085: POP
// for i = 1 to hardcoreCounter do
10086: LD_ADDR_VAR 0 8
10090: PUSH
10091: DOUBLE
10092: LD_INT 1
10094: DEC
10095: ST_TO_ADDR
10096: LD_EXP 25
10100: PUSH
10101: FOR_TO
10102: IFFALSE 10148
// begin if flags [ normalCounter + i ] then
10104: LD_VAR 0 4
10108: PUSH
10109: LD_EXP 24
10113: PUSH
10114: LD_VAR 0 8
10118: PLUS
10119: ARRAY
10120: IFFALSE 10146
// tmp := tmp & ( 100 + i ) & ; ;
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 100
10134: PUSH
10135: LD_VAR 0 8
10139: PLUS
10140: STR
10141: PUSH
10142: LD_STRING ;
10144: STR
10145: ST_TO_ADDR
// end ;
10146: GO 10101
10148: POP
10149: POP
// if tmp then
10150: LD_VAR 0 3
10154: IFFALSE 10166
// active := tmp ;
10156: LD_ADDR_VAR 0 7
10160: PUSH
10161: LD_VAR 0 3
10165: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10166: LD_STRING getStreamItemsFromMission("
10168: PUSH
10169: LD_VAR 0 5
10173: STR
10174: PUSH
10175: LD_STRING ","
10177: STR
10178: PUSH
10179: LD_VAR 0 6
10183: STR
10184: PUSH
10185: LD_STRING ","
10187: STR
10188: PUSH
10189: LD_VAR 0 7
10193: STR
10194: PUSH
10195: LD_STRING ")
10197: STR
10198: PPUSH
10199: CALL_OW 559
// end else
10203: GO 10212
// ToLua ( getStreamItemsFromMission("","","") ) ;
10205: LD_STRING getStreamItemsFromMission("","","")
10207: PPUSH
10208: CALL_OW 559
// end ;
10212: LD_VAR 0 2
10216: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10217: LD_EXP 23
10221: PUSH
10222: LD_EXP 28
10226: AND
10227: IFFALSE 10351
10229: GO 10231
10231: DISABLE
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
// begin enable ;
10236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_OWVAR 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: LD_INT 34
10259: PUSH
10260: LD_INT 7
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 34
10269: PUSH
10270: LD_INT 45
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 34
10279: PUSH
10280: LD_INT 28
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 34
10289: PUSH
10290: LD_INT 47
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PPUSH
10308: CALL_OW 69
10312: ST_TO_ADDR
// if not tmp then
10313: LD_VAR 0 2
10317: NOT
10318: IFFALSE 10322
// exit ;
10320: GO 10351
// for i in tmp do
10322: LD_ADDR_VAR 0 1
10326: PUSH
10327: LD_VAR 0 2
10331: PUSH
10332: FOR_IN
10333: IFFALSE 10349
// begin SetLives ( i , 0 ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_INT 0
10342: PPUSH
10343: CALL_OW 234
// end ;
10347: GO 10332
10349: POP
10350: POP
// end ;
10351: PPOPN 2
10353: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10354: LD_EXP 23
10358: PUSH
10359: LD_EXP 29
10363: AND
10364: IFFALSE 10448
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
// begin enable ;
10373: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_OWVAR 2
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 32
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: ST_TO_ADDR
// if not tmp then
10410: LD_VAR 0 2
10414: NOT
10415: IFFALSE 10419
// exit ;
10417: GO 10448
// for i in tmp do
10419: LD_ADDR_VAR 0 1
10423: PUSH
10424: LD_VAR 0 2
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10446
// begin SetLives ( i , 0 ) ;
10432: LD_VAR 0 1
10436: PPUSH
10437: LD_INT 0
10439: PPUSH
10440: CALL_OW 234
// end ;
10444: GO 10429
10446: POP
10447: POP
// end ;
10448: PPOPN 2
10450: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10451: LD_EXP 23
10455: PUSH
10456: LD_EXP 26
10460: AND
10461: IFFALSE 10554
10463: GO 10465
10465: DISABLE
10466: LD_INT 0
10468: PPUSH
// begin enable ;
10469: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: LD_INT 22
10477: PUSH
10478: LD_OWVAR 2
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: LD_INT 25
10492: PUSH
10493: LD_INT 5
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 25
10502: PUSH
10503: LD_INT 9
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 25
10512: PUSH
10513: LD_INT 8
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PPUSH
10530: CALL_OW 69
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10552
// begin SetClass ( i , 1 ) ;
10538: LD_VAR 0 1
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 336
// end ;
10550: GO 10535
10552: POP
10553: POP
// end ;
10554: PPOPN 1
10556: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10557: LD_EXP 23
10561: PUSH
10562: LD_EXP 27
10566: AND
10567: PUSH
10568: LD_OWVAR 65
10572: PUSH
10573: LD_INT 7
10575: LESS
10576: AND
10577: IFFALSE 10591
10579: GO 10581
10581: DISABLE
// begin enable ;
10582: ENABLE
// game_speed := 7 ;
10583: LD_ADDR_OWVAR 65
10587: PUSH
10588: LD_INT 7
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10592: LD_EXP 23
10596: PUSH
10597: LD_EXP 30
10601: AND
10602: IFFALSE 10804
10604: GO 10606
10606: DISABLE
10607: LD_INT 0
10609: PPUSH
10610: PPUSH
10611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10612: LD_ADDR_VAR 0 3
10616: PUSH
10617: LD_INT 81
10619: PUSH
10620: LD_OWVAR 2
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: ST_TO_ADDR
// if not tmp then
10648: LD_VAR 0 3
10652: NOT
10653: IFFALSE 10657
// exit ;
10655: GO 10804
// if tmp > 5 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 5
10664: GREATER
10665: IFFALSE 10677
// k := 5 else
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 5
10674: ST_TO_ADDR
10675: GO 10687
// k := tmp ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_VAR 0 3
10686: ST_TO_ADDR
// for i := 1 to k do
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: DOUBLE
10693: LD_INT 1
10695: DEC
10696: ST_TO_ADDR
10697: LD_VAR 0 2
10701: PUSH
10702: FOR_TO
10703: IFFALSE 10802
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 1
10714: ARRAY
10715: PPUSH
10716: LD_VAR 0 1
10720: PUSH
10721: LD_INT 4
10723: MOD
10724: PUSH
10725: LD_INT 1
10727: PLUS
10728: PPUSH
10729: CALL_OW 259
10733: PUSH
10734: LD_INT 10
10736: LESS
10737: IFFALSE 10800
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10739: LD_VAR 0 3
10743: PUSH
10744: LD_VAR 0 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 4
10757: MOD
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: PPUSH
10763: LD_VAR 0 3
10767: PUSH
10768: LD_VAR 0 1
10772: ARRAY
10773: PPUSH
10774: LD_VAR 0 1
10778: PUSH
10779: LD_INT 4
10781: MOD
10782: PUSH
10783: LD_INT 1
10785: PLUS
10786: PPUSH
10787: CALL_OW 259
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: PPUSH
10796: CALL_OW 237
10800: GO 10702
10802: POP
10803: POP
// end ;
10804: PPOPN 3
10806: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10807: LD_EXP 23
10811: PUSH
10812: LD_EXP 31
10816: AND
10817: IFFALSE 10837
10819: GO 10821
10821: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10822: LD_INT 4
10824: PPUSH
10825: LD_OWVAR 2
10829: PPUSH
10830: LD_INT 0
10832: PPUSH
10833: CALL_OW 324
10837: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10838: LD_EXP 23
10842: PUSH
10843: LD_EXP 60
10847: AND
10848: IFFALSE 10868
10850: GO 10852
10852: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10853: LD_INT 19
10855: PPUSH
10856: LD_OWVAR 2
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL_OW 324
10868: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10869: LD_EXP 23
10873: PUSH
10874: LD_EXP 32
10878: AND
10879: IFFALSE 10981
10881: GO 10883
10883: DISABLE
10884: LD_INT 0
10886: PPUSH
10887: PPUSH
// begin enable ;
10888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10889: LD_ADDR_VAR 0 2
10893: PUSH
10894: LD_INT 22
10896: PUSH
10897: LD_OWVAR 2
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 34
10911: PUSH
10912: LD_INT 11
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 34
10921: PUSH
10922: LD_INT 30
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: ST_TO_ADDR
// if not tmp then
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10952
// exit ;
10950: GO 10981
// for i in tmp do
10952: LD_ADDR_VAR 0 1
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: FOR_IN
10963: IFFALSE 10979
// begin SetLives ( i , 0 ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_INT 0
10972: PPUSH
10973: CALL_OW 234
// end ;
10977: GO 10962
10979: POP
10980: POP
// end ;
10981: PPOPN 2
10983: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10984: LD_EXP 23
10988: PUSH
10989: LD_EXP 33
10993: AND
10994: IFFALSE 11014
10996: GO 10998
10998: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10999: LD_INT 32
11001: PPUSH
11002: LD_OWVAR 2
11006: PPUSH
11007: LD_INT 0
11009: PPUSH
11010: CALL_OW 324
11014: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11015: LD_EXP 23
11019: PUSH
11020: LD_EXP 34
11024: AND
11025: IFFALSE 11206
11027: GO 11029
11029: DISABLE
11030: LD_INT 0
11032: PPUSH
11033: PPUSH
11034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11035: LD_ADDR_VAR 0 2
11039: PUSH
11040: LD_INT 22
11042: PUSH
11043: LD_OWVAR 2
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 33
11054: PUSH
11055: LD_INT 3
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: ST_TO_ADDR
// if not tmp then
11071: LD_VAR 0 2
11075: NOT
11076: IFFALSE 11080
// exit ;
11078: GO 11206
// side := 0 ;
11080: LD_ADDR_VAR 0 3
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// for i := 1 to 8 do
11088: LD_ADDR_VAR 0 1
11092: PUSH
11093: DOUBLE
11094: LD_INT 1
11096: DEC
11097: ST_TO_ADDR
11098: LD_INT 8
11100: PUSH
11101: FOR_TO
11102: IFFALSE 11150
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11104: LD_OWVAR 2
11108: PUSH
11109: LD_VAR 0 1
11113: NONEQUAL
11114: PUSH
11115: LD_OWVAR 2
11119: PPUSH
11120: LD_VAR 0 1
11124: PPUSH
11125: CALL_OW 81
11129: PUSH
11130: LD_INT 2
11132: EQUAL
11133: AND
11134: IFFALSE 11148
// begin side := i ;
11136: LD_ADDR_VAR 0 3
11140: PUSH
11141: LD_VAR 0 1
11145: ST_TO_ADDR
// break ;
11146: GO 11150
// end ;
11148: GO 11101
11150: POP
11151: POP
// if not side then
11152: LD_VAR 0 3
11156: NOT
11157: IFFALSE 11161
// exit ;
11159: GO 11206
// for i := 1 to tmp do
11161: LD_ADDR_VAR 0 1
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_VAR 0 2
11175: PUSH
11176: FOR_TO
11177: IFFALSE 11204
// if Prob ( 60 ) then
11179: LD_INT 60
11181: PPUSH
11182: CALL_OW 13
11186: IFFALSE 11202
// SetSide ( i , side ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: CALL_OW 235
11202: GO 11176
11204: POP
11205: POP
// end ;
11206: PPOPN 3
11208: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11209: LD_EXP 23
11213: PUSH
11214: LD_EXP 36
11218: AND
11219: IFFALSE 11338
11221: GO 11223
11223: DISABLE
11224: LD_INT 0
11226: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11227: LD_ADDR_VAR 0 1
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_OWVAR 2
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 23
11259: PUSH
11260: LD_INT 0
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11336
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL_OW 257
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 3
11302: PUSH
11303: LD_INT 4
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: IN
11312: IFFALSE 11334
// SetClass ( un , rand ( 1 , 4 ) ) ;
11314: LD_VAR 0 1
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: LD_INT 4
11324: PPUSH
11325: CALL_OW 12
11329: PPUSH
11330: CALL_OW 336
11334: GO 11281
11336: POP
11337: POP
// end ;
11338: PPOPN 1
11340: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11341: LD_EXP 23
11345: PUSH
11346: LD_EXP 35
11350: AND
11351: IFFALSE 11430
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11359: LD_ADDR_VAR 0 1
11363: PUSH
11364: LD_INT 22
11366: PUSH
11367: LD_OWVAR 2
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 21
11378: PUSH
11379: LD_INT 3
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PPUSH
11390: CALL_OW 69
11394: ST_TO_ADDR
// if not tmp then
11395: LD_VAR 0 1
11399: NOT
11400: IFFALSE 11404
// exit ;
11402: GO 11430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11404: LD_VAR 0 1
11408: PUSH
11409: LD_INT 1
11411: PPUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 12
11421: ARRAY
11422: PPUSH
11423: LD_INT 100
11425: PPUSH
11426: CALL_OW 234
// end ;
11430: PPOPN 1
11432: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11433: LD_EXP 23
11437: PUSH
11438: LD_EXP 37
11442: AND
11443: IFFALSE 11541
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11451: LD_ADDR_VAR 0 1
11455: PUSH
11456: LD_INT 22
11458: PUSH
11459: LD_OWVAR 2
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 21
11470: PUSH
11471: LD_INT 1
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PPUSH
11482: CALL_OW 69
11486: ST_TO_ADDR
// if not tmp then
11487: LD_VAR 0 1
11491: NOT
11492: IFFALSE 11496
// exit ;
11494: GO 11541
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11496: LD_VAR 0 1
11500: PUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL_OW 12
11513: ARRAY
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: LD_INT 4
11520: PPUSH
11521: CALL_OW 12
11525: PPUSH
11526: LD_INT 3000
11528: PPUSH
11529: LD_INT 9000
11531: PPUSH
11532: CALL_OW 12
11536: PPUSH
11537: CALL_OW 492
// end ;
11541: PPOPN 1
11543: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11544: LD_EXP 23
11548: PUSH
11549: LD_EXP 38
11553: AND
11554: IFFALSE 11574
11556: GO 11558
11558: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11559: LD_INT 1
11561: PPUSH
11562: LD_OWVAR 2
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 324
11574: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11575: LD_EXP 23
11579: PUSH
11580: LD_EXP 39
11584: AND
11585: IFFALSE 11668
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_OWVAR 2
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: ST_TO_ADDR
// if not tmp then
11630: LD_VAR 0 2
11634: NOT
11635: IFFALSE 11639
// exit ;
11637: GO 11668
// for i in tmp do
11639: LD_ADDR_VAR 0 1
11643: PUSH
11644: LD_VAR 0 2
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11666
// SetBLevel ( i , 10 ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 10
11659: PPUSH
11660: CALL_OW 241
11664: GO 11649
11666: POP
11667: POP
// end ;
11668: PPOPN 2
11670: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11671: LD_EXP 23
11675: PUSH
11676: LD_EXP 40
11680: AND
11681: IFFALSE 11792
11683: GO 11685
11685: DISABLE
11686: LD_INT 0
11688: PPUSH
11689: PPUSH
11690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11691: LD_ADDR_VAR 0 3
11695: PUSH
11696: LD_INT 22
11698: PUSH
11699: LD_OWVAR 2
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: ST_TO_ADDR
// if not tmp then
11727: LD_VAR 0 3
11731: NOT
11732: IFFALSE 11736
// exit ;
11734: GO 11792
// un := tmp [ rand ( 1 , tmp ) ] ;
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 1
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: CALL_OW 12
11758: ARRAY
11759: ST_TO_ADDR
// if Crawls ( un ) then
11760: LD_VAR 0 2
11764: PPUSH
11765: CALL_OW 318
11769: IFFALSE 11780
// ComWalk ( un ) ;
11771: LD_VAR 0 2
11775: PPUSH
11776: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11780: LD_VAR 0 2
11784: PPUSH
11785: LD_INT 5
11787: PPUSH
11788: CALL_OW 336
// end ;
11792: PPOPN 3
11794: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11795: LD_EXP 23
11799: PUSH
11800: LD_EXP 41
11804: AND
11805: PUSH
11806: LD_OWVAR 67
11810: PUSH
11811: LD_INT 4
11813: LESS
11814: AND
11815: IFFALSE 11834
11817: GO 11819
11819: DISABLE
// begin Difficulty := Difficulty + 1 ;
11820: LD_ADDR_OWVAR 67
11824: PUSH
11825: LD_OWVAR 67
11829: PUSH
11830: LD_INT 1
11832: PLUS
11833: ST_TO_ADDR
// end ;
11834: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11835: LD_EXP 23
11839: PUSH
11840: LD_EXP 42
11844: AND
11845: IFFALSE 11948
11847: GO 11849
11849: DISABLE
11850: LD_INT 0
11852: PPUSH
// begin for i := 1 to 5 do
11853: LD_ADDR_VAR 0 1
11857: PUSH
11858: DOUBLE
11859: LD_INT 1
11861: DEC
11862: ST_TO_ADDR
11863: LD_INT 5
11865: PUSH
11866: FOR_TO
11867: IFFALSE 11946
// begin uc_nation := nation_nature ;
11869: LD_ADDR_OWVAR 21
11873: PUSH
11874: LD_INT 0
11876: ST_TO_ADDR
// uc_side := 0 ;
11877: LD_ADDR_OWVAR 20
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11885: LD_ADDR_OWVAR 29
11889: PUSH
11890: LD_INT 12
11892: PUSH
11893: LD_INT 12
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: ST_TO_ADDR
// hc_agressivity := 20 ;
11900: LD_ADDR_OWVAR 35
11904: PUSH
11905: LD_INT 20
11907: ST_TO_ADDR
// hc_class := class_tiger ;
11908: LD_ADDR_OWVAR 28
11912: PUSH
11913: LD_INT 14
11915: ST_TO_ADDR
// hc_gallery :=  ;
11916: LD_ADDR_OWVAR 33
11920: PUSH
11921: LD_STRING 
11923: ST_TO_ADDR
// hc_name :=  ;
11924: LD_ADDR_OWVAR 26
11928: PUSH
11929: LD_STRING 
11931: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11932: CALL_OW 44
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 51
// end ;
11944: GO 11866
11946: POP
11947: POP
// end ;
11948: PPOPN 1
11950: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11951: LD_EXP 23
11955: PUSH
11956: LD_EXP 43
11960: AND
11961: IFFALSE 11970
11963: GO 11965
11965: DISABLE
// StreamSibBomb ;
11966: CALL 11971 0 0
11970: END
// export function StreamSibBomb ; var i , x , y ; begin
11971: LD_INT 0
11973: PPUSH
11974: PPUSH
11975: PPUSH
11976: PPUSH
// result := false ;
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: LD_INT 0
11984: ST_TO_ADDR
// for i := 1 to 16 do
11985: LD_ADDR_VAR 0 2
11989: PUSH
11990: DOUBLE
11991: LD_INT 1
11993: DEC
11994: ST_TO_ADDR
11995: LD_INT 16
11997: PUSH
11998: FOR_TO
11999: IFFALSE 12198
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12001: LD_ADDR_VAR 0 3
12005: PUSH
12006: LD_INT 10
12008: PUSH
12009: LD_INT 20
12011: PUSH
12012: LD_INT 30
12014: PUSH
12015: LD_INT 40
12017: PUSH
12018: LD_INT 50
12020: PUSH
12021: LD_INT 60
12023: PUSH
12024: LD_INT 70
12026: PUSH
12027: LD_INT 80
12029: PUSH
12030: LD_INT 90
12032: PUSH
12033: LD_INT 100
12035: PUSH
12036: LD_INT 110
12038: PUSH
12039: LD_INT 120
12041: PUSH
12042: LD_INT 130
12044: PUSH
12045: LD_INT 140
12047: PUSH
12048: LD_INT 150
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 15
12073: PPUSH
12074: CALL_OW 12
12078: ARRAY
12079: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12080: LD_ADDR_VAR 0 4
12084: PUSH
12085: LD_INT 10
12087: PUSH
12088: LD_INT 20
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 40
12096: PUSH
12097: LD_INT 50
12099: PUSH
12100: LD_INT 60
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 80
12108: PUSH
12109: LD_INT 90
12111: PUSH
12112: LD_INT 100
12114: PUSH
12115: LD_INT 110
12117: PUSH
12118: LD_INT 120
12120: PUSH
12121: LD_INT 130
12123: PUSH
12124: LD_INT 140
12126: PUSH
12127: LD_INT 150
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 1
12149: PPUSH
12150: LD_INT 15
12152: PPUSH
12153: CALL_OW 12
12157: ARRAY
12158: ST_TO_ADDR
// if ValidHex ( x , y ) then
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_VAR 0 4
12168: PPUSH
12169: CALL_OW 488
12173: IFFALSE 12196
// begin result := [ x , y ] ;
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_VAR 0 3
12184: PUSH
12185: LD_VAR 0 4
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: ST_TO_ADDR
// break ;
12194: GO 12198
// end ; end ;
12196: GO 11998
12198: POP
12199: POP
// if result then
12200: LD_VAR 0 1
12204: IFFALSE 12264
// begin ToLua ( playSibBomb() ) ;
12206: LD_STRING playSibBomb()
12208: PPUSH
12209: CALL_OW 559
// wait ( 0 0$14 ) ;
12213: LD_INT 490
12215: PPUSH
12216: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 1
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 1
12233: PUSH
12234: LD_INT 2
12236: ARRAY
12237: PPUSH
12238: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 2
12258: ARRAY
12259: PPUSH
12260: CALL_OW 429
// end ; end ;
12264: LD_VAR 0 1
12268: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12269: LD_EXP 23
12273: PUSH
12274: LD_EXP 45
12278: AND
12279: IFFALSE 12291
12281: GO 12283
12283: DISABLE
// YouLost (  ) ;
12284: LD_STRING 
12286: PPUSH
12287: CALL_OW 104
12291: END
// every 0 0$1 trigger StreamModeActive and sFog do
12292: LD_EXP 23
12296: PUSH
12297: LD_EXP 44
12301: AND
12302: IFFALSE 12316
12304: GO 12306
12306: DISABLE
// FogOff ( your_side ) ;
12307: LD_OWVAR 2
12311: PPUSH
12312: CALL_OW 344
12316: END
// every 0 0$1 trigger StreamModeActive and sSun do
12317: LD_EXP 23
12321: PUSH
12322: LD_EXP 46
12326: AND
12327: IFFALSE 12355
12329: GO 12331
12331: DISABLE
// begin solar_recharge_percent := 0 ;
12332: LD_ADDR_OWVAR 79
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12340: LD_INT 10500
12342: PPUSH
12343: CALL_OW 67
// solar_recharge_percent := 100 ;
12347: LD_ADDR_OWVAR 79
12351: PUSH
12352: LD_INT 100
12354: ST_TO_ADDR
// end ;
12355: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12356: LD_EXP 23
12360: PUSH
12361: LD_EXP 47
12365: AND
12366: IFFALSE 12605
12368: GO 12370
12370: DISABLE
12371: LD_INT 0
12373: PPUSH
12374: PPUSH
12375: PPUSH
// begin tmp := [ ] ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: EMPTY
12382: ST_TO_ADDR
// for i := 1 to 6 do
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_INT 6
12395: PUSH
12396: FOR_TO
12397: IFFALSE 12502
// begin uc_nation := nation_nature ;
12399: LD_ADDR_OWVAR 21
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// uc_side := 0 ;
12407: LD_ADDR_OWVAR 20
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12415: LD_ADDR_OWVAR 29
12419: PUSH
12420: LD_INT 12
12422: PUSH
12423: LD_INT 12
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: ST_TO_ADDR
// hc_agressivity := 20 ;
12430: LD_ADDR_OWVAR 35
12434: PUSH
12435: LD_INT 20
12437: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12438: LD_ADDR_OWVAR 28
12442: PUSH
12443: LD_INT 17
12445: ST_TO_ADDR
// hc_gallery :=  ;
12446: LD_ADDR_OWVAR 33
12450: PUSH
12451: LD_STRING 
12453: ST_TO_ADDR
// hc_name :=  ;
12454: LD_ADDR_OWVAR 26
12458: PUSH
12459: LD_STRING 
12461: ST_TO_ADDR
// un := CreateHuman ;
12462: LD_ADDR_VAR 0 2
12466: PUSH
12467: CALL_OW 44
12471: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12472: LD_VAR 0 2
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 51
// tmp := tmp ^ un ;
12484: LD_ADDR_VAR 0 3
12488: PUSH
12489: LD_VAR 0 3
12493: PUSH
12494: LD_VAR 0 2
12498: ADD
12499: ST_TO_ADDR
// end ;
12500: GO 12396
12502: POP
12503: POP
// repeat wait ( 0 0$1 ) ;
12504: LD_INT 35
12506: PPUSH
12507: CALL_OW 67
// for un in tmp do
12511: LD_ADDR_VAR 0 2
12515: PUSH
12516: LD_VAR 0 3
12520: PUSH
12521: FOR_IN
12522: IFFALSE 12596
// begin if IsDead ( un ) then
12524: LD_VAR 0 2
12528: PPUSH
12529: CALL_OW 301
12533: IFFALSE 12553
// begin tmp := tmp diff un ;
12535: LD_ADDR_VAR 0 3
12539: PUSH
12540: LD_VAR 0 3
12544: PUSH
12545: LD_VAR 0 2
12549: DIFF
12550: ST_TO_ADDR
// continue ;
12551: GO 12521
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12553: LD_VAR 0 2
12557: PPUSH
12558: LD_INT 3
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_INT 0
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 69
12579: PPUSH
12580: LD_VAR 0 2
12584: PPUSH
12585: CALL_OW 74
12589: PPUSH
12590: CALL_OW 115
// end ;
12594: GO 12521
12596: POP
12597: POP
// until not tmp ;
12598: LD_VAR 0 3
12602: NOT
12603: IFFALSE 12504
// end ;
12605: PPOPN 3
12607: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12608: LD_EXP 23
12612: PUSH
12613: LD_EXP 48
12617: AND
12618: IFFALSE 12672
12620: GO 12622
12622: DISABLE
// begin ToLua ( displayTroll(); ) ;
12623: LD_STRING displayTroll();
12625: PPUSH
12626: CALL_OW 559
// wait ( 3 3$00 ) ;
12630: LD_INT 6300
12632: PPUSH
12633: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12637: LD_STRING hideTroll();
12639: PPUSH
12640: CALL_OW 559
// wait ( 1 1$00 ) ;
12644: LD_INT 2100
12646: PPUSH
12647: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12651: LD_STRING displayTroll();
12653: PPUSH
12654: CALL_OW 559
// wait ( 1 1$00 ) ;
12658: LD_INT 2100
12660: PPUSH
12661: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12665: LD_STRING hideTroll();
12667: PPUSH
12668: CALL_OW 559
// end ;
12672: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12673: LD_EXP 23
12677: PUSH
12678: LD_EXP 49
12682: AND
12683: IFFALSE 12746
12685: GO 12687
12687: DISABLE
12688: LD_INT 0
12690: PPUSH
// begin p := 0 ;
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// repeat game_speed := 1 ;
12699: LD_ADDR_OWVAR 65
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12707: LD_INT 35
12709: PPUSH
12710: CALL_OW 67
// p := p + 1 ;
12714: LD_ADDR_VAR 0 1
12718: PUSH
12719: LD_VAR 0 1
12723: PUSH
12724: LD_INT 1
12726: PLUS
12727: ST_TO_ADDR
// until p >= 60 ;
12728: LD_VAR 0 1
12732: PUSH
12733: LD_INT 60
12735: GREATEREQUAL
12736: IFFALSE 12699
// game_speed := 4 ;
12738: LD_ADDR_OWVAR 65
12742: PUSH
12743: LD_INT 4
12745: ST_TO_ADDR
// end ;
12746: PPOPN 1
12748: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12749: LD_EXP 23
12753: PUSH
12754: LD_EXP 50
12758: AND
12759: IFFALSE 12905
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_OWVAR 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 0
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// if not depot then
12822: LD_VAR 0 1
12826: NOT
12827: IFFALSE 12831
// exit ;
12829: GO 12905
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12831: LD_ADDR_VAR 0 2
12835: PUSH
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: PPUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 12
12853: ARRAY
12854: PPUSH
12855: CALL_OW 274
12859: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12860: LD_VAR 0 2
12864: PPUSH
12865: LD_INT 1
12867: PPUSH
12868: LD_INT 0
12870: PPUSH
12871: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12875: LD_VAR 0 2
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: LD_INT 0
12885: PPUSH
12886: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12890: LD_VAR 0 2
12894: PPUSH
12895: LD_INT 3
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 277
// end ;
12905: PPOPN 2
12907: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12908: LD_EXP 23
12912: PUSH
12913: LD_EXP 51
12917: AND
12918: IFFALSE 13015
12920: GO 12922
12922: DISABLE
12923: LD_INT 0
12925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_OWVAR 2
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 21
12945: PUSH
12946: LD_INT 1
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: LD_INT 23
12958: PUSH
12959: LD_INT 0
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: ST_TO_ADDR
// if not tmp then
12980: LD_VAR 0 1
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 1
12996: PPUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 12
13006: ARRAY
13007: PPUSH
13008: LD_INT 200
13010: PPUSH
13011: CALL_OW 234
// end ;
13015: PPOPN 1
13017: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13018: LD_EXP 23
13022: PUSH
13023: LD_EXP 52
13027: AND
13028: IFFALSE 13107
13030: GO 13032
13032: DISABLE
13033: LD_INT 0
13035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13036: LD_ADDR_VAR 0 1
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_OWVAR 2
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 21
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: ST_TO_ADDR
// if not tmp then
13072: LD_VAR 0 1
13076: NOT
13077: IFFALSE 13081
// exit ;
13079: GO 13107
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13081: LD_VAR 0 1
13085: PUSH
13086: LD_INT 1
13088: PPUSH
13089: LD_VAR 0 1
13093: PPUSH
13094: CALL_OW 12
13098: ARRAY
13099: PPUSH
13100: LD_INT 60
13102: PPUSH
13103: CALL_OW 234
// end ;
13107: PPOPN 1
13109: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13110: LD_EXP 23
13114: PUSH
13115: LD_EXP 53
13119: AND
13120: IFFALSE 13219
13122: GO 13124
13124: DISABLE
13125: LD_INT 0
13127: PPUSH
13128: PPUSH
// begin enable ;
13129: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_OWVAR 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 61
13149: PUSH
13150: EMPTY
13151: LIST
13152: PUSH
13153: LD_INT 33
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: ST_TO_ADDR
// if not tmp then
13173: LD_VAR 0 1
13177: NOT
13178: IFFALSE 13182
// exit ;
13180: GO 13219
// for i in tmp do
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: FOR_IN
13193: IFFALSE 13217
// if IsControledBy ( i ) then
13195: LD_VAR 0 2
13199: PPUSH
13200: CALL_OW 312
13204: IFFALSE 13215
// ComUnlink ( i ) ;
13206: LD_VAR 0 2
13210: PPUSH
13211: CALL_OW 136
13215: GO 13192
13217: POP
13218: POP
// end ;
13219: PPOPN 2
13221: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13222: LD_EXP 23
13226: PUSH
13227: LD_EXP 54
13231: AND
13232: IFFALSE 13372
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
13240: PPUSH
// begin ToLua ( displayPowell(); ) ;
13241: LD_STRING displayPowell();
13243: PPUSH
13244: CALL_OW 559
// uc_side := 0 ;
13248: LD_ADDR_OWVAR 20
13252: PUSH
13253: LD_INT 0
13255: ST_TO_ADDR
// uc_nation := 2 ;
13256: LD_ADDR_OWVAR 21
13260: PUSH
13261: LD_INT 2
13263: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13264: LD_ADDR_OWVAR 37
13268: PUSH
13269: LD_INT 14
13271: ST_TO_ADDR
// vc_engine := engine_siberite ;
13272: LD_ADDR_OWVAR 39
13276: PUSH
13277: LD_INT 3
13279: ST_TO_ADDR
// vc_control := control_apeman ;
13280: LD_ADDR_OWVAR 38
13284: PUSH
13285: LD_INT 5
13287: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13288: LD_ADDR_OWVAR 40
13292: PUSH
13293: LD_INT 29
13295: ST_TO_ADDR
// un := CreateVehicle ;
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: CALL_OW 45
13305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13318: LD_INT 35
13320: PPUSH
13321: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13325: LD_VAR 0 2
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_OWVAR 2
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PPUSH
13342: CALL_OW 69
13346: PPUSH
13347: LD_VAR 0 2
13351: PPUSH
13352: CALL_OW 74
13356: PPUSH
13357: CALL_OW 115
// until IsDead ( un ) ;
13361: LD_VAR 0 2
13365: PPUSH
13366: CALL_OW 301
13370: IFFALSE 13318
// end ;
13372: PPOPN 2
13374: END
// every 0 0$1 trigger StreamModeActive and sStu do
13375: LD_EXP 23
13379: PUSH
13380: LD_EXP 62
13384: AND
13385: IFFALSE 13401
13387: GO 13389
13389: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13390: LD_STRING displayStucuk();
13392: PPUSH
13393: CALL_OW 559
// ResetFog ;
13397: CALL_OW 335
// end ;
13401: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13402: LD_EXP 23
13406: PUSH
13407: LD_EXP 55
13411: AND
13412: IFFALSE 13553
13414: GO 13416
13416: DISABLE
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13421: LD_ADDR_VAR 0 2
13425: PUSH
13426: LD_INT 22
13428: PUSH
13429: LD_OWVAR 2
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// if not tmp then
13457: LD_VAR 0 2
13461: NOT
13462: IFFALSE 13466
// exit ;
13464: GO 13553
// un := tmp [ rand ( 1 , tmp ) ] ;
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_VAR 0 2
13475: PUSH
13476: LD_INT 1
13478: PPUSH
13479: LD_VAR 0 2
13483: PPUSH
13484: CALL_OW 12
13488: ARRAY
13489: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13502: LD_VAR 0 1
13506: PPUSH
13507: LD_OWVAR 3
13511: PUSH
13512: LD_VAR 0 1
13516: DIFF
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 74
13527: PPUSH
13528: CALL_OW 115
// wait ( 0 0$20 ) ;
13532: LD_INT 700
13534: PPUSH
13535: CALL_OW 67
// SetSide ( un , your_side ) ;
13539: LD_VAR 0 1
13543: PPUSH
13544: LD_OWVAR 2
13548: PPUSH
13549: CALL_OW 235
// end ;
13553: PPOPN 2
13555: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13556: LD_EXP 23
13560: PUSH
13561: LD_EXP 56
13565: AND
13566: IFFALSE 13672
13568: GO 13570
13570: DISABLE
13571: LD_INT 0
13573: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13574: LD_ADDR_VAR 0 1
13578: PUSH
13579: LD_INT 22
13581: PUSH
13582: LD_OWVAR 2
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 30
13596: PUSH
13597: LD_INT 0
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 30
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 69
13627: ST_TO_ADDR
// if not depot then
13628: LD_VAR 0 1
13632: NOT
13633: IFFALSE 13637
// exit ;
13635: GO 13672
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13637: LD_VAR 0 1
13641: PUSH
13642: LD_INT 1
13644: ARRAY
13645: PPUSH
13646: CALL_OW 250
13650: PPUSH
13651: LD_VAR 0 1
13655: PUSH
13656: LD_INT 1
13658: ARRAY
13659: PPUSH
13660: CALL_OW 251
13664: PPUSH
13665: LD_INT 70
13667: PPUSH
13668: CALL_OW 495
// end ;
13672: PPOPN 1
13674: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13675: LD_EXP 23
13679: PUSH
13680: LD_EXP 57
13684: AND
13685: IFFALSE 13896
13687: GO 13689
13689: DISABLE
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13697: LD_ADDR_VAR 0 5
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_OWVAR 2
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PUSH
13714: LD_INT 21
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 69
13732: ST_TO_ADDR
// if not tmp then
13733: LD_VAR 0 5
13737: NOT
13738: IFFALSE 13742
// exit ;
13740: GO 13896
// for i in tmp do
13742: LD_ADDR_VAR 0 1
13746: PUSH
13747: LD_VAR 0 5
13751: PUSH
13752: FOR_IN
13753: IFFALSE 13894
// begin d := rand ( 0 , 5 ) ;
13755: LD_ADDR_VAR 0 4
13759: PUSH
13760: LD_INT 0
13762: PPUSH
13763: LD_INT 5
13765: PPUSH
13766: CALL_OW 12
13770: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_VAR 0 1
13780: PPUSH
13781: CALL_OW 250
13785: PPUSH
13786: LD_VAR 0 4
13790: PPUSH
13791: LD_INT 3
13793: PPUSH
13794: LD_INT 12
13796: PPUSH
13797: CALL_OW 12
13801: PPUSH
13802: CALL_OW 272
13806: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 251
13821: PPUSH
13822: LD_VAR 0 4
13826: PPUSH
13827: LD_INT 3
13829: PPUSH
13830: LD_INT 12
13832: PPUSH
13833: CALL_OW 12
13837: PPUSH
13838: CALL_OW 273
13842: ST_TO_ADDR
// if ValidHex ( x , y ) then
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_VAR 0 3
13852: PPUSH
13853: CALL_OW 488
13857: IFFALSE 13892
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 3
13876: PPUSH
13877: LD_INT 6
13879: PPUSH
13880: CALL_OW 12
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 483
// end ;
13892: GO 13752
13894: POP
13895: POP
// end ;
13896: PPOPN 5
13898: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13899: LD_EXP 23
13903: PUSH
13904: LD_EXP 58
13908: AND
13909: IFFALSE 14003
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13918: LD_ADDR_VAR 0 2
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_OWVAR 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 32
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 21
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: ST_TO_ADDR
// if not tmp then
13965: LD_VAR 0 2
13969: NOT
13970: IFFALSE 13974
// exit ;
13972: GO 14003
// for i in tmp do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_VAR 0 2
13983: PUSH
13984: FOR_IN
13985: IFFALSE 14001
// SetFuel ( i , 0 ) ;
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 240
13999: GO 13984
14001: POP
14002: POP
// end ;
14003: PPOPN 2
14005: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14006: LD_EXP 23
14010: PUSH
14011: LD_EXP 59
14015: AND
14016: IFFALSE 14082
14018: GO 14020
14020: DISABLE
14021: LD_INT 0
14023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14024: LD_ADDR_VAR 0 1
14028: PUSH
14029: LD_INT 22
14031: PUSH
14032: LD_OWVAR 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 30
14043: PUSH
14044: LD_INT 29
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PPUSH
14055: CALL_OW 69
14059: ST_TO_ADDR
// if not tmp then
14060: LD_VAR 0 1
14064: NOT
14065: IFFALSE 14069
// exit ;
14067: GO 14082
// DestroyUnit ( tmp [ 1 ] ) ;
14069: LD_VAR 0 1
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: CALL_OW 65
// end ;
14082: PPOPN 1
14084: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14085: LD_EXP 23
14089: PUSH
14090: LD_EXP 61
14094: AND
14095: IFFALSE 14224
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
// begin uc_side := 0 ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_INT 0
14110: ST_TO_ADDR
// uc_nation := nation_arabian ;
14111: LD_ADDR_OWVAR 21
14115: PUSH
14116: LD_INT 2
14118: ST_TO_ADDR
// hc_gallery :=  ;
14119: LD_ADDR_OWVAR 33
14123: PUSH
14124: LD_STRING 
14126: ST_TO_ADDR
// hc_name :=  ;
14127: LD_ADDR_OWVAR 26
14131: PUSH
14132: LD_STRING 
14134: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14135: LD_INT 1
14137: PPUSH
14138: LD_INT 11
14140: PPUSH
14141: LD_INT 10
14143: PPUSH
14144: CALL_OW 380
// un := CreateHuman ;
14148: LD_ADDR_VAR 0 1
14152: PUSH
14153: CALL_OW 44
14157: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14170: LD_INT 35
14172: PPUSH
14173: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14177: LD_VAR 0 1
14181: PPUSH
14182: LD_INT 22
14184: PUSH
14185: LD_OWVAR 2
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 69
14198: PPUSH
14199: LD_VAR 0 1
14203: PPUSH
14204: CALL_OW 74
14208: PPUSH
14209: CALL_OW 115
// until IsDead ( un ) ;
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 301
14222: IFFALSE 14170
// end ;
14224: PPOPN 1
14226: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14227: LD_EXP 23
14231: PUSH
14232: LD_EXP 63
14236: AND
14237: IFFALSE 14249
14239: GO 14241
14241: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14242: LD_STRING earthquake(getX(game), 0, 32)
14244: PPUSH
14245: CALL_OW 559
14249: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14250: LD_EXP 23
14254: PUSH
14255: LD_EXP 64
14259: AND
14260: IFFALSE 14351
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
// begin enable ;
14268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14269: LD_ADDR_VAR 0 1
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_OWVAR 2
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 33
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// if not tmp then
14316: LD_VAR 0 1
14320: NOT
14321: IFFALSE 14325
// exit ;
14323: GO 14351
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14325: LD_VAR 0 1
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 12
14342: ARRAY
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 234
// end ;
14351: PPOPN 1
14353: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14354: LD_EXP 23
14358: PUSH
14359: LD_EXP 65
14363: AND
14364: IFFALSE 14505
14366: GO 14368
14368: DISABLE
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_OWVAR 2
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 25
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: ST_TO_ADDR
// if not tmp then
14410: LD_VAR 0 3
14414: NOT
14415: IFFALSE 14419
// exit ;
14417: GO 14505
// un := tmp [ rand ( 1 , tmp ) ] ;
14419: LD_ADDR_VAR 0 2
14423: PUSH
14424: LD_VAR 0 3
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: CALL_OW 12
14441: ARRAY
14442: ST_TO_ADDR
// if Crawls ( un ) then
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 318
14452: IFFALSE 14463
// ComWalk ( un ) ;
14454: LD_VAR 0 2
14458: PPUSH
14459: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14463: LD_VAR 0 2
14467: PPUSH
14468: LD_INT 9
14470: PPUSH
14471: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14475: LD_INT 28
14477: PPUSH
14478: LD_OWVAR 2
14482: PPUSH
14483: LD_INT 2
14485: PPUSH
14486: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14490: LD_INT 29
14492: PPUSH
14493: LD_OWVAR 2
14497: PPUSH
14498: LD_INT 2
14500: PPUSH
14501: CALL_OW 322
// end ;
14505: PPOPN 3
14507: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14508: LD_EXP 23
14512: PUSH
14513: LD_EXP 66
14517: AND
14518: IFFALSE 14629
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14528: LD_ADDR_VAR 0 3
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 3
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14629
// un := tmp [ rand ( 1 , tmp ) ] ;
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: LD_VAR 0 3
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_VAR 0 3
14590: PPUSH
14591: CALL_OW 12
14595: ARRAY
14596: ST_TO_ADDR
// if Crawls ( un ) then
14597: LD_VAR 0 2
14601: PPUSH
14602: CALL_OW 318
14606: IFFALSE 14617
// ComWalk ( un ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14617: LD_VAR 0 2
14621: PPUSH
14622: LD_INT 8
14624: PPUSH
14625: CALL_OW 336
// end ;
14629: PPOPN 3
14631: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14632: LD_EXP 23
14636: PUSH
14637: LD_EXP 67
14641: AND
14642: IFFALSE 14786
14644: GO 14646
14646: DISABLE
14647: LD_INT 0
14649: PPUSH
14650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14651: LD_ADDR_VAR 0 2
14655: PUSH
14656: LD_INT 22
14658: PUSH
14659: LD_OWVAR 2
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 2
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: LD_INT 34
14683: PUSH
14684: LD_INT 12
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 34
14693: PUSH
14694: LD_INT 51
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 34
14703: PUSH
14704: LD_INT 32
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PPUSH
14722: CALL_OW 69
14726: ST_TO_ADDR
// if not tmp then
14727: LD_VAR 0 2
14731: NOT
14732: IFFALSE 14736
// exit ;
14734: GO 14786
// for i in tmp do
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 2
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14784
// if GetCargo ( i , mat_artifact ) = 0 then
14749: LD_VAR 0 1
14753: PPUSH
14754: LD_INT 4
14756: PPUSH
14757: CALL_OW 289
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: IFFALSE 14782
// SetCargo ( i , mat_siberit , 100 ) ;
14767: LD_VAR 0 1
14771: PPUSH
14772: LD_INT 3
14774: PPUSH
14775: LD_INT 100
14777: PPUSH
14778: CALL_OW 290
14782: GO 14746
14784: POP
14785: POP
// end ;
14786: PPOPN 2
14788: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14789: LD_EXP 23
14793: PUSH
14794: LD_EXP 68
14798: AND
14799: IFFALSE 14982
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_OWVAR 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 69
14829: ST_TO_ADDR
// if not tmp then
14830: LD_VAR 0 2
14834: NOT
14835: IFFALSE 14839
// exit ;
14837: GO 14982
// for i := 1 to 2 do
14839: LD_ADDR_VAR 0 1
14843: PUSH
14844: DOUBLE
14845: LD_INT 1
14847: DEC
14848: ST_TO_ADDR
14849: LD_INT 2
14851: PUSH
14852: FOR_TO
14853: IFFALSE 14980
// begin uc_side := your_side ;
14855: LD_ADDR_OWVAR 20
14859: PUSH
14860: LD_OWVAR 2
14864: ST_TO_ADDR
// uc_nation := nation_american ;
14865: LD_ADDR_OWVAR 21
14869: PUSH
14870: LD_INT 1
14872: ST_TO_ADDR
// vc_chassis := us_morphling ;
14873: LD_ADDR_OWVAR 37
14877: PUSH
14878: LD_INT 5
14880: ST_TO_ADDR
// vc_engine := engine_siberite ;
14881: LD_ADDR_OWVAR 39
14885: PUSH
14886: LD_INT 3
14888: ST_TO_ADDR
// vc_control := control_computer ;
14889: LD_ADDR_OWVAR 38
14893: PUSH
14894: LD_INT 3
14896: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14897: LD_ADDR_OWVAR 40
14901: PUSH
14902: LD_INT 10
14904: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14905: LD_VAR 0 2
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: CALL_OW 310
14918: NOT
14919: IFFALSE 14966
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14921: CALL_OW 45
14925: PPUSH
14926: LD_VAR 0 2
14930: PUSH
14931: LD_INT 1
14933: ARRAY
14934: PPUSH
14935: CALL_OW 250
14939: PPUSH
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: CALL_OW 251
14953: PPUSH
14954: LD_INT 12
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: CALL_OW 50
14964: GO 14978
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14966: CALL_OW 45
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 51
// end ;
14978: GO 14852
14980: POP
14981: POP
// end ;
14982: PPOPN 2
14984: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14985: LD_EXP 23
14989: PUSH
14990: LD_EXP 69
14994: AND
14995: IFFALSE 15217
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
15004: PPUSH
15005: PPUSH
15006: PPUSH
15007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15008: LD_ADDR_VAR 0 6
15012: PUSH
15013: LD_INT 22
15015: PUSH
15016: LD_OWVAR 2
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 21
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 3
15037: PUSH
15038: LD_INT 23
15040: PUSH
15041: LD_INT 0
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: ST_TO_ADDR
// if not tmp then
15062: LD_VAR 0 6
15066: NOT
15067: IFFALSE 15071
// exit ;
15069: GO 15217
// s1 := rand ( 1 , 4 ) ;
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: LD_INT 1
15078: PPUSH
15079: LD_INT 4
15081: PPUSH
15082: CALL_OW 12
15086: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15087: LD_ADDR_VAR 0 4
15091: PUSH
15092: LD_VAR 0 6
15096: PUSH
15097: LD_INT 1
15099: ARRAY
15100: PPUSH
15101: LD_VAR 0 2
15105: PPUSH
15106: CALL_OW 259
15110: ST_TO_ADDR
// if s1 = 1 then
15111: LD_VAR 0 2
15115: PUSH
15116: LD_INT 1
15118: EQUAL
15119: IFFALSE 15139
// s2 := rand ( 2 , 4 ) else
15121: LD_ADDR_VAR 0 3
15125: PUSH
15126: LD_INT 2
15128: PPUSH
15129: LD_INT 4
15131: PPUSH
15132: CALL_OW 12
15136: ST_TO_ADDR
15137: GO 15147
// s2 := 1 ;
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15147: LD_ADDR_VAR 0 5
15151: PUSH
15152: LD_VAR 0 6
15156: PUSH
15157: LD_INT 1
15159: ARRAY
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: CALL_OW 259
15170: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15171: LD_VAR 0 6
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: LD_VAR 0 2
15184: PPUSH
15185: LD_VAR 0 5
15189: PPUSH
15190: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15194: LD_VAR 0 6
15198: PUSH
15199: LD_INT 1
15201: ARRAY
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: CALL_OW 237
// end ;
15217: PPOPN 6
15219: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15220: LD_EXP 23
15224: PUSH
15225: LD_EXP 70
15229: AND
15230: IFFALSE 15309
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: LD_INT 22
15245: PUSH
15246: LD_OWVAR 2
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 3
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PPUSH
15269: CALL_OW 69
15273: ST_TO_ADDR
// if not tmp then
15274: LD_VAR 0 1
15278: NOT
15279: IFFALSE 15283
// exit ;
15281: GO 15309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15283: LD_VAR 0 1
15287: PUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 12
15300: ARRAY
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 234
// end ;
15309: PPOPN 1
15311: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15312: LD_EXP 23
15316: PUSH
15317: LD_EXP 71
15321: AND
15322: IFFALSE 15434
15324: GO 15326
15326: DISABLE
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_OWVAR 2
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 2
15350: PUSH
15351: LD_INT 30
15353: PUSH
15354: LD_INT 27
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 30
15363: PUSH
15364: LD_INT 26
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 28
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PPUSH
15391: CALL_OW 69
15395: ST_TO_ADDR
// if not tmp then
15396: LD_VAR 0 2
15400: NOT
15401: IFFALSE 15405
// exit ;
15403: GO 15434
// for i in tmp do
15405: LD_ADDR_VAR 0 1
15409: PUSH
15410: LD_VAR 0 2
15414: PUSH
15415: FOR_IN
15416: IFFALSE 15432
// SetLives ( i , 1 ) ;
15418: LD_VAR 0 1
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 234
15430: GO 15415
15432: POP
15433: POP
// end ;
15434: PPOPN 2
15436: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15437: LD_EXP 23
15441: PUSH
15442: LD_EXP 72
15446: AND
15447: IFFALSE 15734
15449: GO 15451
15451: DISABLE
15452: LD_INT 0
15454: PPUSH
15455: PPUSH
15456: PPUSH
// begin i := rand ( 1 , 7 ) ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 7
15467: PPUSH
15468: CALL_OW 12
15472: ST_TO_ADDR
// case i of 1 :
15473: LD_VAR 0 1
15477: PUSH
15478: LD_INT 1
15480: DOUBLE
15481: EQUAL
15482: IFTRUE 15486
15484: GO 15496
15486: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15487: LD_STRING earthquake(getX(game), 0, 32)
15489: PPUSH
15490: CALL_OW 559
15494: GO 15734
15496: LD_INT 2
15498: DOUBLE
15499: EQUAL
15500: IFTRUE 15504
15502: GO 15518
15504: POP
// begin ToLua ( displayStucuk(); ) ;
15505: LD_STRING displayStucuk();
15507: PPUSH
15508: CALL_OW 559
// ResetFog ;
15512: CALL_OW 335
// end ; 3 :
15516: GO 15734
15518: LD_INT 3
15520: DOUBLE
15521: EQUAL
15522: IFTRUE 15526
15524: GO 15630
15526: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15527: LD_ADDR_VAR 0 2
15531: PUSH
15532: LD_INT 22
15534: PUSH
15535: LD_OWVAR 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 25
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// if not tmp then
15563: LD_VAR 0 2
15567: NOT
15568: IFFALSE 15572
// exit ;
15570: GO 15734
// un := tmp [ rand ( 1 , tmp ) ] ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 1
15584: PPUSH
15585: LD_VAR 0 2
15589: PPUSH
15590: CALL_OW 12
15594: ARRAY
15595: ST_TO_ADDR
// if Crawls ( un ) then
15596: LD_VAR 0 3
15600: PPUSH
15601: CALL_OW 318
15605: IFFALSE 15616
// ComWalk ( un ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_INT 8
15623: PPUSH
15624: CALL_OW 336
// end ; 4 :
15628: GO 15734
15630: LD_INT 4
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15712
15638: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15639: LD_ADDR_VAR 0 2
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_OWVAR 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: LD_INT 29
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PPUSH
15670: CALL_OW 69
15674: ST_TO_ADDR
// if not tmp then
15675: LD_VAR 0 2
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 15734
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15684: LD_VAR 0 2
15688: PUSH
15689: LD_INT 1
15691: ARRAY
15692: PPUSH
15693: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15697: LD_VAR 0 2
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 65
// end ; 5 .. 7 :
15710: GO 15734
15712: LD_INT 5
15714: DOUBLE
15715: GREATEREQUAL
15716: IFFALSE 15724
15718: LD_INT 7
15720: DOUBLE
15721: LESSEQUAL
15722: IFTRUE 15726
15724: GO 15733
15726: POP
// StreamSibBomb ; end ;
15727: CALL 11971 0 0
15731: GO 15734
15733: POP
// end ;
15734: PPOPN 3
15736: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15737: LD_EXP 23
15741: PUSH
15742: LD_EXP 73
15746: AND
15747: IFFALSE 15903
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
15756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15757: LD_ADDR_VAR 0 2
15761: PUSH
15762: LD_INT 81
15764: PUSH
15765: LD_OWVAR 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 21
15779: PUSH
15780: LD_INT 1
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 21
15789: PUSH
15790: LD_INT 2
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not tmp then
15811: LD_VAR 0 2
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15903
// p := 0 ;
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 0
15827: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15828: LD_INT 35
15830: PPUSH
15831: CALL_OW 67
// p := p + 1 ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 1
15847: PLUS
15848: ST_TO_ADDR
// for i in tmp do
15849: LD_ADDR_VAR 0 1
15853: PUSH
15854: LD_VAR 0 2
15858: PUSH
15859: FOR_IN
15860: IFFALSE 15891
// if GetLives ( i ) < 1000 then
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 256
15871: PUSH
15872: LD_INT 1000
15874: LESS
15875: IFFALSE 15889
// SetLives ( i , 1000 ) ;
15877: LD_VAR 0 1
15881: PPUSH
15882: LD_INT 1000
15884: PPUSH
15885: CALL_OW 234
15889: GO 15859
15891: POP
15892: POP
// until p > 20 ;
15893: LD_VAR 0 3
15897: PUSH
15898: LD_INT 20
15900: GREATER
15901: IFFALSE 15828
// end ;
15903: PPOPN 3
15905: END
// every 0 0$1 trigger StreamModeActive and sTime do
15906: LD_EXP 23
15910: PUSH
15911: LD_EXP 74
15915: AND
15916: IFFALSE 15951
15918: GO 15920
15920: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15921: LD_INT 28
15923: PPUSH
15924: LD_OWVAR 2
15928: PPUSH
15929: LD_INT 2
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15936: LD_INT 30
15938: PPUSH
15939: LD_OWVAR 2
15943: PPUSH
15944: LD_INT 2
15946: PPUSH
15947: CALL_OW 322
// end ;
15951: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15952: LD_EXP 23
15956: PUSH
15957: LD_EXP 75
15961: AND
15962: IFFALSE 16083
15964: GO 15966
15966: DISABLE
15967: LD_INT 0
15969: PPUSH
15970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: LD_INT 22
15978: PUSH
15979: LD_OWVAR 2
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: LD_INT 21
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 3
16000: PUSH
16001: LD_INT 23
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: PPUSH
16020: CALL_OW 69
16024: ST_TO_ADDR
// if not tmp then
16025: LD_VAR 0 2
16029: NOT
16030: IFFALSE 16034
// exit ;
16032: GO 16083
// for i in tmp do
16034: LD_ADDR_VAR 0 1
16038: PUSH
16039: LD_VAR 0 2
16043: PUSH
16044: FOR_IN
16045: IFFALSE 16081
// begin if Crawls ( i ) then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 318
16056: IFFALSE 16067
// ComWalk ( i ) ;
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 138
// SetClass ( i , 2 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 2
16074: PPUSH
16075: CALL_OW 336
// end ;
16079: GO 16044
16081: POP
16082: POP
// end ;
16083: PPOPN 2
16085: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16086: LD_EXP 23
16090: PUSH
16091: LD_EXP 76
16095: AND
16096: IFFALSE 16384
16098: GO 16100
16100: DISABLE
16101: LD_INT 0
16103: PPUSH
16104: PPUSH
16105: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16106: LD_OWVAR 2
16110: PPUSH
16111: LD_INT 9
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16124: LD_INT 9
16126: PPUSH
16127: LD_OWVAR 2
16131: PPUSH
16132: CALL_OW 343
// uc_side := 9 ;
16136: LD_ADDR_OWVAR 20
16140: PUSH
16141: LD_INT 9
16143: ST_TO_ADDR
// uc_nation := 2 ;
16144: LD_ADDR_OWVAR 21
16148: PUSH
16149: LD_INT 2
16151: ST_TO_ADDR
// hc_name := Dark Warrior ;
16152: LD_ADDR_OWVAR 26
16156: PUSH
16157: LD_STRING Dark Warrior
16159: ST_TO_ADDR
// hc_gallery :=  ;
16160: LD_ADDR_OWVAR 33
16164: PUSH
16165: LD_STRING 
16167: ST_TO_ADDR
// hc_noskilllimit := true ;
16168: LD_ADDR_OWVAR 76
16172: PUSH
16173: LD_INT 1
16175: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16176: LD_ADDR_OWVAR 31
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: LD_INT 30
16186: PUSH
16187: LD_INT 30
16189: PUSH
16190: LD_INT 30
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: ST_TO_ADDR
// un := CreateHuman ;
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: CALL_OW 44
16208: ST_TO_ADDR
// hc_noskilllimit := false ;
16209: LD_ADDR_OWVAR 76
16213: PUSH
16214: LD_INT 0
16216: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 51
// ToLua ( playRanger() ) ;
16229: LD_STRING playRanger()
16231: PPUSH
16232: CALL_OW 559
// p := 0 ;
16236: LD_ADDR_VAR 0 2
16240: PUSH
16241: LD_INT 0
16243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16244: LD_INT 35
16246: PPUSH
16247: CALL_OW 67
// p := p + 1 ;
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: LD_VAR 0 2
16260: PUSH
16261: LD_INT 1
16263: PLUS
16264: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16265: LD_VAR 0 3
16269: PPUSH
16270: CALL_OW 256
16274: PUSH
16275: LD_INT 1000
16277: LESS
16278: IFFALSE 16292
// SetLives ( un , 1000 ) ;
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1000
16287: PPUSH
16288: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_INT 81
16299: PUSH
16300: LD_OWVAR 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 91
16311: PUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_INT 30
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: CALL_OW 74
16343: PPUSH
16344: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16348: LD_VAR 0 2
16352: PUSH
16353: LD_INT 80
16355: GREATER
16356: PUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: CALL_OW 301
16366: OR
16367: IFFALSE 16244
// if un then
16369: LD_VAR 0 3
16373: IFFALSE 16384
// RemoveUnit ( un ) ;
16375: LD_VAR 0 3
16379: PPUSH
16380: CALL_OW 64
// end ;
16384: PPOPN 3
16386: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16387: LD_EXP 77
16391: IFFALSE 16507
16393: GO 16395
16395: DISABLE
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16401: LD_ADDR_VAR 0 2
16405: PUSH
16406: LD_INT 81
16408: PUSH
16409: LD_OWVAR 2
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 21
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16437: LD_STRING playComputer()
16439: PPUSH
16440: CALL_OW 559
// if not tmp then
16444: LD_VAR 0 2
16448: NOT
16449: IFFALSE 16453
// exit ;
16451: GO 16507
// for i in tmp do
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_VAR 0 2
16462: PUSH
16463: FOR_IN
16464: IFFALSE 16505
// for j := 1 to 4 do
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: DOUBLE
16472: LD_INT 1
16474: DEC
16475: ST_TO_ADDR
16476: LD_INT 4
16478: PUSH
16479: FOR_TO
16480: IFFALSE 16501
// SetSkill ( i , j , 10 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 10
16494: PPUSH
16495: CALL_OW 237
16499: GO 16479
16501: POP
16502: POP
16503: GO 16463
16505: POP
16506: POP
// end ;
16507: PPOPN 3
16509: END
// every 0 0$1 trigger s30 do var i , tmp ;
16510: LD_EXP 78
16514: IFFALSE 16583
16516: GO 16518
16518: DISABLE
16519: LD_INT 0
16521: PPUSH
16522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16523: LD_ADDR_VAR 0 2
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_OWVAR 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PPUSH
16540: CALL_OW 69
16544: ST_TO_ADDR
// if not tmp then
16545: LD_VAR 0 2
16549: NOT
16550: IFFALSE 16554
// exit ;
16552: GO 16583
// for i in tmp do
16554: LD_ADDR_VAR 0 1
16558: PUSH
16559: LD_VAR 0 2
16563: PUSH
16564: FOR_IN
16565: IFFALSE 16581
// SetLives ( i , 300 ) ;
16567: LD_VAR 0 1
16571: PPUSH
16572: LD_INT 300
16574: PPUSH
16575: CALL_OW 234
16579: GO 16564
16581: POP
16582: POP
// end ;
16583: PPOPN 2
16585: END
// every 0 0$1 trigger s60 do var i , tmp ;
16586: LD_EXP 79
16590: IFFALSE 16659
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16599: LD_ADDR_VAR 0 2
16603: PUSH
16604: LD_INT 22
16606: PUSH
16607: LD_OWVAR 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: ST_TO_ADDR
// if not tmp then
16621: LD_VAR 0 2
16625: NOT
16626: IFFALSE 16630
// exit ;
16628: GO 16659
// for i in tmp do
16630: LD_ADDR_VAR 0 1
16634: PUSH
16635: LD_VAR 0 2
16639: PUSH
16640: FOR_IN
16641: IFFALSE 16657
// SetLives ( i , 600 ) ;
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_INT 600
16650: PPUSH
16651: CALL_OW 234
16655: GO 16640
16657: POP
16658: POP
// end ;
16659: PPOPN 2
16661: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16662: LD_INT 0
16664: PPUSH
// case cmd of 301 :
16665: LD_VAR 0 1
16669: PUSH
16670: LD_INT 301
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16710
16678: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16679: LD_VAR 0 6
16683: PPUSH
16684: LD_VAR 0 7
16688: PPUSH
16689: LD_VAR 0 8
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: CALL 17911 0 5
16708: GO 16831
16710: LD_INT 302
16712: DOUBLE
16713: EQUAL
16714: IFTRUE 16718
16716: GO 16755
16718: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16719: LD_VAR 0 6
16723: PPUSH
16724: LD_VAR 0 7
16728: PPUSH
16729: LD_VAR 0 8
16733: PPUSH
16734: LD_VAR 0 9
16738: PPUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: LD_VAR 0 5
16748: PPUSH
16749: CALL 18002 0 6
16753: GO 16831
16755: LD_INT 303
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16800
16763: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16764: LD_VAR 0 6
16768: PPUSH
16769: LD_VAR 0 7
16773: PPUSH
16774: LD_VAR 0 8
16778: PPUSH
16779: LD_VAR 0 9
16783: PPUSH
16784: LD_VAR 0 4
16788: PPUSH
16789: LD_VAR 0 5
16793: PPUSH
16794: CALL 16836 0 6
16798: GO 16831
16800: LD_INT 304
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16830
16808: POP
// hHackTeleport ( unit , x , y ) ; end ;
16809: LD_VAR 0 2
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 5
16823: PPUSH
16824: CALL 18595 0 3
16828: GO 16831
16830: POP
// end ;
16831: LD_VAR 0 12
16835: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16840: LD_VAR 0 1
16844: PUSH
16845: LD_INT 1
16847: LESS
16848: PUSH
16849: LD_VAR 0 1
16853: PUSH
16854: LD_INT 3
16856: GREATER
16857: OR
16858: PUSH
16859: LD_VAR 0 5
16863: PPUSH
16864: LD_VAR 0 6
16868: PPUSH
16869: CALL_OW 428
16873: OR
16874: IFFALSE 16878
// exit ;
16876: GO 17598
// uc_side := your_side ;
16878: LD_ADDR_OWVAR 20
16882: PUSH
16883: LD_OWVAR 2
16887: ST_TO_ADDR
// uc_nation := nation ;
16888: LD_ADDR_OWVAR 21
16892: PUSH
16893: LD_VAR 0 1
16897: ST_TO_ADDR
// bc_level = 1 ;
16898: LD_ADDR_OWVAR 43
16902: PUSH
16903: LD_INT 1
16905: ST_TO_ADDR
// case btype of 1 :
16906: LD_VAR 0 2
16910: PUSH
16911: LD_INT 1
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16930
16919: POP
// bc_type := b_depot ; 2 :
16920: LD_ADDR_OWVAR 42
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
16928: GO 17542
16930: LD_INT 2
16932: DOUBLE
16933: EQUAL
16934: IFTRUE 16938
16936: GO 16949
16938: POP
// bc_type := b_warehouse ; 3 :
16939: LD_ADDR_OWVAR 42
16943: PUSH
16944: LD_INT 1
16946: ST_TO_ADDR
16947: GO 17542
16949: LD_INT 3
16951: DOUBLE
16952: EQUAL
16953: IFTRUE 16957
16955: GO 16968
16957: POP
// bc_type := b_lab ; 4 .. 9 :
16958: LD_ADDR_OWVAR 42
16962: PUSH
16963: LD_INT 6
16965: ST_TO_ADDR
16966: GO 17542
16968: LD_INT 4
16970: DOUBLE
16971: GREATEREQUAL
16972: IFFALSE 16980
16974: LD_INT 9
16976: DOUBLE
16977: LESSEQUAL
16978: IFTRUE 16982
16980: GO 17034
16982: POP
// begin bc_type := b_lab_half ;
16983: LD_ADDR_OWVAR 42
16987: PUSH
16988: LD_INT 7
16990: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16991: LD_ADDR_OWVAR 44
16995: PUSH
16996: LD_INT 10
16998: PUSH
16999: LD_INT 11
17001: PUSH
17002: LD_INT 12
17004: PUSH
17005: LD_INT 15
17007: PUSH
17008: LD_INT 14
17010: PUSH
17011: LD_INT 13
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: LD_INT 3
17029: MINUS
17030: ARRAY
17031: ST_TO_ADDR
// end ; 10 .. 13 :
17032: GO 17542
17034: LD_INT 10
17036: DOUBLE
17037: GREATEREQUAL
17038: IFFALSE 17046
17040: LD_INT 13
17042: DOUBLE
17043: LESSEQUAL
17044: IFTRUE 17048
17046: GO 17125
17048: POP
// begin bc_type := b_lab_full ;
17049: LD_ADDR_OWVAR 42
17053: PUSH
17054: LD_INT 8
17056: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17057: LD_ADDR_OWVAR 44
17061: PUSH
17062: LD_INT 10
17064: PUSH
17065: LD_INT 12
17067: PUSH
17068: LD_INT 14
17070: PUSH
17071: LD_INT 13
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_VAR 0 2
17084: PUSH
17085: LD_INT 9
17087: MINUS
17088: ARRAY
17089: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17090: LD_ADDR_OWVAR 45
17094: PUSH
17095: LD_INT 11
17097: PUSH
17098: LD_INT 15
17100: PUSH
17101: LD_INT 12
17103: PUSH
17104: LD_INT 15
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: PUSH
17113: LD_VAR 0 2
17117: PUSH
17118: LD_INT 9
17120: MINUS
17121: ARRAY
17122: ST_TO_ADDR
// end ; 14 :
17123: GO 17542
17125: LD_INT 14
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17144
17133: POP
// bc_type := b_workshop ; 15 :
17134: LD_ADDR_OWVAR 42
17138: PUSH
17139: LD_INT 2
17141: ST_TO_ADDR
17142: GO 17542
17144: LD_INT 15
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17163
17152: POP
// bc_type := b_factory ; 16 :
17153: LD_ADDR_OWVAR 42
17157: PUSH
17158: LD_INT 3
17160: ST_TO_ADDR
17161: GO 17542
17163: LD_INT 16
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17182
17171: POP
// bc_type := b_ext_gun ; 17 :
17172: LD_ADDR_OWVAR 42
17176: PUSH
17177: LD_INT 17
17179: ST_TO_ADDR
17180: GO 17542
17182: LD_INT 17
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17218
17190: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17191: LD_ADDR_OWVAR 42
17195: PUSH
17196: LD_INT 19
17198: PUSH
17199: LD_INT 23
17201: PUSH
17202: LD_INT 19
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: ST_TO_ADDR
17216: GO 17542
17218: LD_INT 18
17220: DOUBLE
17221: EQUAL
17222: IFTRUE 17226
17224: GO 17237
17226: POP
// bc_type := b_ext_radar ; 19 :
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 20
17234: ST_TO_ADDR
17235: GO 17542
17237: LD_INT 19
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17256
17245: POP
// bc_type := b_ext_radio ; 20 :
17246: LD_ADDR_OWVAR 42
17250: PUSH
17251: LD_INT 22
17253: ST_TO_ADDR
17254: GO 17542
17256: LD_INT 20
17258: DOUBLE
17259: EQUAL
17260: IFTRUE 17264
17262: GO 17275
17264: POP
// bc_type := b_ext_siberium ; 21 :
17265: LD_ADDR_OWVAR 42
17269: PUSH
17270: LD_INT 21
17272: ST_TO_ADDR
17273: GO 17542
17275: LD_INT 21
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17294
17283: POP
// bc_type := b_ext_computer ; 22 :
17284: LD_ADDR_OWVAR 42
17288: PUSH
17289: LD_INT 24
17291: ST_TO_ADDR
17292: GO 17542
17294: LD_INT 22
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17313
17302: POP
// bc_type := b_ext_track ; 23 :
17303: LD_ADDR_OWVAR 42
17307: PUSH
17308: LD_INT 16
17310: ST_TO_ADDR
17311: GO 17542
17313: LD_INT 23
17315: DOUBLE
17316: EQUAL
17317: IFTRUE 17321
17319: GO 17332
17321: POP
// bc_type := b_ext_laser ; 24 :
17322: LD_ADDR_OWVAR 42
17326: PUSH
17327: LD_INT 25
17329: ST_TO_ADDR
17330: GO 17542
17332: LD_INT 24
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17351
17340: POP
// bc_type := b_control_tower ; 25 :
17341: LD_ADDR_OWVAR 42
17345: PUSH
17346: LD_INT 36
17348: ST_TO_ADDR
17349: GO 17542
17351: LD_INT 25
17353: DOUBLE
17354: EQUAL
17355: IFTRUE 17359
17357: GO 17370
17359: POP
// bc_type := b_breastwork ; 26 :
17360: LD_ADDR_OWVAR 42
17364: PUSH
17365: LD_INT 31
17367: ST_TO_ADDR
17368: GO 17542
17370: LD_INT 26
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17389
17378: POP
// bc_type := b_bunker ; 27 :
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 32
17386: ST_TO_ADDR
17387: GO 17542
17389: LD_INT 27
17391: DOUBLE
17392: EQUAL
17393: IFTRUE 17397
17395: GO 17408
17397: POP
// bc_type := b_turret ; 28 :
17398: LD_ADDR_OWVAR 42
17402: PUSH
17403: LD_INT 33
17405: ST_TO_ADDR
17406: GO 17542
17408: LD_INT 28
17410: DOUBLE
17411: EQUAL
17412: IFTRUE 17416
17414: GO 17427
17416: POP
// bc_type := b_armoury ; 29 :
17417: LD_ADDR_OWVAR 42
17421: PUSH
17422: LD_INT 4
17424: ST_TO_ADDR
17425: GO 17542
17427: LD_INT 29
17429: DOUBLE
17430: EQUAL
17431: IFTRUE 17435
17433: GO 17446
17435: POP
// bc_type := b_barracks ; 30 :
17436: LD_ADDR_OWVAR 42
17440: PUSH
17441: LD_INT 5
17443: ST_TO_ADDR
17444: GO 17542
17446: LD_INT 30
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17465
17454: POP
// bc_type := b_solar_power ; 31 :
17455: LD_ADDR_OWVAR 42
17459: PUSH
17460: LD_INT 27
17462: ST_TO_ADDR
17463: GO 17542
17465: LD_INT 31
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17473
17471: GO 17484
17473: POP
// bc_type := b_oil_power ; 32 :
17474: LD_ADDR_OWVAR 42
17478: PUSH
17479: LD_INT 26
17481: ST_TO_ADDR
17482: GO 17542
17484: LD_INT 32
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 17503
17492: POP
// bc_type := b_siberite_power ; 33 :
17493: LD_ADDR_OWVAR 42
17497: PUSH
17498: LD_INT 28
17500: ST_TO_ADDR
17501: GO 17542
17503: LD_INT 33
17505: DOUBLE
17506: EQUAL
17507: IFTRUE 17511
17509: GO 17522
17511: POP
// bc_type := b_oil_mine ; 34 :
17512: LD_ADDR_OWVAR 42
17516: PUSH
17517: LD_INT 29
17519: ST_TO_ADDR
17520: GO 17542
17522: LD_INT 34
17524: DOUBLE
17525: EQUAL
17526: IFTRUE 17530
17528: GO 17541
17530: POP
// bc_type := b_siberite_mine ; end ;
17531: LD_ADDR_OWVAR 42
17535: PUSH
17536: LD_INT 30
17538: ST_TO_ADDR
17539: GO 17542
17541: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17542: LD_ADDR_VAR 0 8
17546: PUSH
17547: LD_VAR 0 5
17551: PPUSH
17552: LD_VAR 0 6
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: CALL_OW 47
17566: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17567: LD_OWVAR 42
17571: PUSH
17572: LD_INT 32
17574: PUSH
17575: LD_INT 33
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: IN
17582: IFFALSE 17598
// PlaceWeaponTurret ( b , weapon ) ;
17584: LD_VAR 0 8
17588: PPUSH
17589: LD_VAR 0 4
17593: PPUSH
17594: CALL_OW 431
// end ;
17598: LD_VAR 0 7
17602: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17603: LD_INT 0
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17609: LD_ADDR_VAR 0 4
17613: PUSH
17614: LD_INT 22
17616: PUSH
17617: LD_OWVAR 2
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: LD_INT 30
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 30
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: ST_TO_ADDR
// if not tmp then
17663: LD_VAR 0 4
17667: NOT
17668: IFFALSE 17672
// exit ;
17670: GO 17731
// for i in tmp do
17672: LD_ADDR_VAR 0 2
17676: PUSH
17677: LD_VAR 0 4
17681: PUSH
17682: FOR_IN
17683: IFFALSE 17729
// for j = 1 to 3 do
17685: LD_ADDR_VAR 0 3
17689: PUSH
17690: DOUBLE
17691: LD_INT 1
17693: DEC
17694: ST_TO_ADDR
17695: LD_INT 3
17697: PUSH
17698: FOR_TO
17699: IFFALSE 17725
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17701: LD_VAR 0 2
17705: PPUSH
17706: CALL_OW 274
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 99999
17718: PPUSH
17719: CALL_OW 277
17723: GO 17698
17725: POP
17726: POP
17727: GO 17682
17729: POP
17730: POP
// end ;
17731: LD_VAR 0 1
17735: RET
// export function hHackSetLevel10 ; var i , j ; begin
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 21
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: PUSH
17761: FOR_IN
17762: IFFALSE 17814
// if IsSelected ( i ) then
17764: LD_VAR 0 2
17768: PPUSH
17769: CALL_OW 306
17773: IFFALSE 17812
// begin for j := 1 to 4 do
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: DOUBLE
17781: LD_INT 1
17783: DEC
17784: ST_TO_ADDR
17785: LD_INT 4
17787: PUSH
17788: FOR_TO
17789: IFFALSE 17810
// SetSkill ( i , j , 10 ) ;
17791: LD_VAR 0 2
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 10
17803: PPUSH
17804: CALL_OW 237
17808: GO 17788
17810: POP
17811: POP
// end ;
17812: GO 17761
17814: POP
17815: POP
// end ;
17816: LD_VAR 0 1
17820: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17821: LD_INT 0
17823: PPUSH
17824: PPUSH
17825: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_OWVAR 2
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: PUSH
17862: FOR_IN
17863: IFFALSE 17904
// begin for j := 1 to 4 do
17865: LD_ADDR_VAR 0 3
17869: PUSH
17870: DOUBLE
17871: LD_INT 1
17873: DEC
17874: ST_TO_ADDR
17875: LD_INT 4
17877: PUSH
17878: FOR_TO
17879: IFFALSE 17900
// SetSkill ( i , j , 10 ) ;
17881: LD_VAR 0 2
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 10
17893: PPUSH
17894: CALL_OW 237
17898: GO 17878
17900: POP
17901: POP
// end ;
17902: GO 17862
17904: POP
17905: POP
// end ;
17906: LD_VAR 0 1
17910: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17911: LD_INT 0
17913: PPUSH
// uc_side := your_side ;
17914: LD_ADDR_OWVAR 20
17918: PUSH
17919: LD_OWVAR 2
17923: ST_TO_ADDR
// uc_nation := nation ;
17924: LD_ADDR_OWVAR 21
17928: PUSH
17929: LD_VAR 0 1
17933: ST_TO_ADDR
// InitHc ;
17934: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17938: LD_INT 0
17940: PPUSH
17941: LD_VAR 0 2
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17955: LD_VAR 0 4
17959: PPUSH
17960: LD_VAR 0 5
17964: PPUSH
17965: CALL_OW 428
17969: PUSH
17970: LD_INT 0
17972: EQUAL
17973: IFFALSE 17997
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17975: CALL_OW 44
17979: PPUSH
17980: LD_VAR 0 4
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: CALL_OW 48
// end ;
17997: LD_VAR 0 6
18001: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18002: LD_INT 0
18004: PPUSH
18005: PPUSH
// uc_side := your_side ;
18006: LD_ADDR_OWVAR 20
18010: PUSH
18011: LD_OWVAR 2
18015: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18016: LD_VAR 0 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 4
18032: PUSH
18033: LD_INT 5
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: IN
18043: IFFALSE 18055
// uc_nation := nation_american else
18045: LD_ADDR_OWVAR 21
18049: PUSH
18050: LD_INT 1
18052: ST_TO_ADDR
18053: GO 18098
// if chassis in [ 11 , 12 , 13 , 14 ] then
18055: LD_VAR 0 1
18059: PUSH
18060: LD_INT 11
18062: PUSH
18063: LD_INT 12
18065: PUSH
18066: LD_INT 13
18068: PUSH
18069: LD_INT 14
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: IN
18078: IFFALSE 18090
// uc_nation := nation_arabian else
18080: LD_ADDR_OWVAR 21
18084: PUSH
18085: LD_INT 2
18087: ST_TO_ADDR
18088: GO 18098
// uc_nation := nation_russian ;
18090: LD_ADDR_OWVAR 21
18094: PUSH
18095: LD_INT 3
18097: ST_TO_ADDR
// vc_chassis := chassis ;
18098: LD_ADDR_OWVAR 37
18102: PUSH
18103: LD_VAR 0 1
18107: ST_TO_ADDR
// vc_engine := engine ;
18108: LD_ADDR_OWVAR 39
18112: PUSH
18113: LD_VAR 0 2
18117: ST_TO_ADDR
// vc_control := control ;
18118: LD_ADDR_OWVAR 38
18122: PUSH
18123: LD_VAR 0 3
18127: ST_TO_ADDR
// vc_weapon := weapon ;
18128: LD_ADDR_OWVAR 40
18132: PUSH
18133: LD_VAR 0 4
18137: ST_TO_ADDR
// un := CreateVehicle ;
18138: LD_ADDR_VAR 0 8
18142: PUSH
18143: CALL_OW 45
18147: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18148: LD_VAR 0 8
18152: PPUSH
18153: LD_INT 0
18155: PPUSH
18156: LD_INT 5
18158: PPUSH
18159: CALL_OW 12
18163: PPUSH
18164: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18168: LD_VAR 0 8
18172: PPUSH
18173: LD_VAR 0 5
18177: PPUSH
18178: LD_VAR 0 6
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 48
// end ;
18190: LD_VAR 0 7
18194: RET
// export hInvincible ; every 1 do
18195: GO 18197
18197: DISABLE
// hInvincible := [ ] ;
18198: LD_ADDR_EXP 80
18202: PUSH
18203: EMPTY
18204: ST_TO_ADDR
18205: END
// every 10 do var i ;
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
// begin enable ;
18212: ENABLE
// if not hInvincible then
18213: LD_EXP 80
18217: NOT
18218: IFFALSE 18222
// exit ;
18220: GO 18266
// for i in hInvincible do
18222: LD_ADDR_VAR 0 1
18226: PUSH
18227: LD_EXP 80
18231: PUSH
18232: FOR_IN
18233: IFFALSE 18264
// if GetLives ( i ) < 1000 then
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 256
18244: PUSH
18245: LD_INT 1000
18247: LESS
18248: IFFALSE 18262
// SetLives ( i , 1000 ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: LD_INT 1000
18257: PPUSH
18258: CALL_OW 234
18262: GO 18232
18264: POP
18265: POP
// end ;
18266: PPOPN 1
18268: END
// export function hHackInvincible ; var i ; begin
18269: LD_INT 0
18271: PPUSH
18272: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18273: LD_ADDR_VAR 0 2
18277: PUSH
18278: LD_INT 2
18280: PUSH
18281: LD_INT 21
18283: PUSH
18284: LD_INT 1
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 21
18293: PUSH
18294: LD_INT 2
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: PPUSH
18306: CALL_OW 69
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18373
// if IsSelected ( i ) then
18314: LD_VAR 0 2
18318: PPUSH
18319: CALL_OW 306
18323: IFFALSE 18371
// begin if i in hInvincible then
18325: LD_VAR 0 2
18329: PUSH
18330: LD_EXP 80
18334: IN
18335: IFFALSE 18355
// hInvincible := hInvincible diff i else
18337: LD_ADDR_EXP 80
18341: PUSH
18342: LD_EXP 80
18346: PUSH
18347: LD_VAR 0 2
18351: DIFF
18352: ST_TO_ADDR
18353: GO 18371
// hInvincible := hInvincible union i ;
18355: LD_ADDR_EXP 80
18359: PUSH
18360: LD_EXP 80
18364: PUSH
18365: LD_VAR 0 2
18369: UNION
18370: ST_TO_ADDR
// end ;
18371: GO 18311
18373: POP
18374: POP
// end ;
18375: LD_VAR 0 1
18379: RET
// export function hHackInvisible ; var i , j ; begin
18380: LD_INT 0
18382: PPUSH
18383: PPUSH
18384: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_INT 21
18392: PUSH
18393: LD_INT 1
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PUSH
18405: FOR_IN
18406: IFFALSE 18430
// if IsSelected ( i ) then
18408: LD_VAR 0 2
18412: PPUSH
18413: CALL_OW 306
18417: IFFALSE 18428
// ComForceInvisible ( i ) ;
18419: LD_VAR 0 2
18423: PPUSH
18424: CALL_OW 496
18428: GO 18405
18430: POP
18431: POP
// end ;
18432: LD_VAR 0 1
18436: RET
// export function hHackChangeYourSide ; begin
18437: LD_INT 0
18439: PPUSH
// if your_side = 8 then
18440: LD_OWVAR 2
18444: PUSH
18445: LD_INT 8
18447: EQUAL
18448: IFFALSE 18460
// your_side := 0 else
18450: LD_ADDR_OWVAR 2
18454: PUSH
18455: LD_INT 0
18457: ST_TO_ADDR
18458: GO 18474
// your_side := your_side + 1 ;
18460: LD_ADDR_OWVAR 2
18464: PUSH
18465: LD_OWVAR 2
18469: PUSH
18470: LD_INT 1
18472: PLUS
18473: ST_TO_ADDR
// end ;
18474: LD_VAR 0 1
18478: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// for i in all_units do
18484: LD_ADDR_VAR 0 2
18488: PUSH
18489: LD_OWVAR 3
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18573
// if IsSelected ( i ) then
18497: LD_VAR 0 2
18501: PPUSH
18502: CALL_OW 306
18506: IFFALSE 18571
// begin j := GetSide ( i ) ;
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 255
18522: ST_TO_ADDR
// if j = 8 then
18523: LD_VAR 0 3
18527: PUSH
18528: LD_INT 8
18530: EQUAL
18531: IFFALSE 18543
// j := 0 else
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
18541: GO 18557
// j := j + 1 ;
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: LD_VAR 0 3
18552: PUSH
18553: LD_INT 1
18555: PLUS
18556: ST_TO_ADDR
// SetSide ( i , j ) ;
18557: LD_VAR 0 2
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: CALL_OW 235
// end ;
18571: GO 18494
18573: POP
18574: POP
// end ;
18575: LD_VAR 0 1
18579: RET
// export function hHackFog ; begin
18580: LD_INT 0
18582: PPUSH
// FogOff ( true ) ;
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 344
// end ;
18590: LD_VAR 0 1
18594: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18595: LD_INT 0
18597: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 483
// CenterOnXY ( x , y ) ;
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: CALL_OW 84
// end ;
18637: LD_VAR 0 4
18641: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18646: LD_VAR 0 1
18650: NOT
18651: PUSH
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: CALL_OW 488
18666: NOT
18667: OR
18668: PUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 266
18678: PUSH
18679: LD_INT 3
18681: NONEQUAL
18682: PUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 247
18692: PUSH
18693: LD_INT 1
18695: EQUAL
18696: NOT
18697: AND
18698: OR
18699: IFFALSE 18703
// exit ;
18701: GO 18852
// if GetType ( factory ) = unit_human then
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 247
18712: PUSH
18713: LD_INT 1
18715: EQUAL
18716: IFFALSE 18733
// factory := IsInUnit ( factory ) ;
18718: LD_ADDR_VAR 0 1
18722: PUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL_OW 310
18732: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL_OW 266
18742: PUSH
18743: LD_INT 3
18745: NONEQUAL
18746: IFFALSE 18750
// exit ;
18748: GO 18852
// if HexInfo ( x , y ) = factory then
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: CALL_OW 428
18764: PUSH
18765: LD_VAR 0 1
18769: EQUAL
18770: IFFALSE 18797
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18772: LD_ADDR_EXP 81
18776: PUSH
18777: LD_EXP 81
18781: PPUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: LD_INT 0
18789: PPUSH
18790: CALL_OW 1
18794: ST_TO_ADDR
18795: GO 18848
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18797: LD_ADDR_EXP 81
18801: PUSH
18802: LD_EXP 81
18806: PPUSH
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 255
18821: PUSH
18822: LD_VAR 0 1
18826: PUSH
18827: LD_VAR 0 2
18831: PUSH
18832: LD_VAR 0 3
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 1
18847: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18848: CALL 18857 0 0
// end ;
18852: LD_VAR 0 4
18856: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18857: LD_INT 0
18859: PPUSH
18860: PPUSH
18861: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18862: LD_STRING resetFactoryWaypoint();
18864: PPUSH
18865: CALL_OW 559
// if factoryWaypoints then
18869: LD_EXP 81
18873: IFFALSE 18999
// begin list := PrepareArray ( factoryWaypoints ) ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_EXP 81
18884: PPUSH
18885: CALL 65539 0 1
18889: ST_TO_ADDR
// for i := 1 to list do
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: DOUBLE
18896: LD_INT 1
18898: DEC
18899: ST_TO_ADDR
18900: LD_VAR 0 3
18904: PUSH
18905: FOR_TO
18906: IFFALSE 18997
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18908: LD_STRING setFactoryWaypointXY(
18910: PUSH
18911: LD_VAR 0 3
18915: PUSH
18916: LD_VAR 0 2
18920: ARRAY
18921: PUSH
18922: LD_INT 1
18924: ARRAY
18925: STR
18926: PUSH
18927: LD_STRING ,
18929: STR
18930: PUSH
18931: LD_VAR 0 3
18935: PUSH
18936: LD_VAR 0 2
18940: ARRAY
18941: PUSH
18942: LD_INT 2
18944: ARRAY
18945: STR
18946: PUSH
18947: LD_STRING ,
18949: STR
18950: PUSH
18951: LD_VAR 0 3
18955: PUSH
18956: LD_VAR 0 2
18960: ARRAY
18961: PUSH
18962: LD_INT 3
18964: ARRAY
18965: STR
18966: PUSH
18967: LD_STRING ,
18969: STR
18970: PUSH
18971: LD_VAR 0 3
18975: PUSH
18976: LD_VAR 0 2
18980: ARRAY
18981: PUSH
18982: LD_INT 4
18984: ARRAY
18985: STR
18986: PUSH
18987: LD_STRING )
18989: STR
18990: PPUSH
18991: CALL_OW 559
18995: GO 18905
18997: POP
18998: POP
// end ; end ;
18999: LD_VAR 0 1
19003: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19004: LD_INT 0
19006: PPUSH
// if HexInfo ( x , y ) = warehouse then
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL_OW 428
19021: PUSH
19022: LD_VAR 0 1
19026: EQUAL
19027: IFFALSE 19054
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19029: LD_ADDR_EXP 82
19033: PUSH
19034: LD_EXP 82
19038: PPUSH
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_INT 0
19046: PPUSH
19047: CALL_OW 1
19051: ST_TO_ADDR
19052: GO 19105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19054: LD_ADDR_EXP 82
19058: PUSH
19059: LD_EXP 82
19063: PPUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: LD_VAR 0 1
19073: PPUSH
19074: CALL_OW 255
19078: PUSH
19079: LD_VAR 0 1
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_VAR 0 3
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 1
19104: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19105: CALL 19114 0 0
// end ;
19109: LD_VAR 0 4
19113: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19114: LD_INT 0
19116: PPUSH
19117: PPUSH
19118: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19119: LD_STRING resetWarehouseGatheringPoints();
19121: PPUSH
19122: CALL_OW 559
// if warehouseGatheringPoints then
19126: LD_EXP 82
19130: IFFALSE 19256
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19132: LD_ADDR_VAR 0 3
19136: PUSH
19137: LD_EXP 82
19141: PPUSH
19142: CALL 65539 0 1
19146: ST_TO_ADDR
// for i := 1 to list do
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: DOUBLE
19153: LD_INT 1
19155: DEC
19156: ST_TO_ADDR
19157: LD_VAR 0 3
19161: PUSH
19162: FOR_TO
19163: IFFALSE 19254
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19165: LD_STRING setWarehouseGatheringPointXY(
19167: PUSH
19168: LD_VAR 0 3
19172: PUSH
19173: LD_VAR 0 2
19177: ARRAY
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: STR
19183: PUSH
19184: LD_STRING ,
19186: STR
19187: PUSH
19188: LD_VAR 0 3
19192: PUSH
19193: LD_VAR 0 2
19197: ARRAY
19198: PUSH
19199: LD_INT 2
19201: ARRAY
19202: STR
19203: PUSH
19204: LD_STRING ,
19206: STR
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_VAR 0 2
19217: ARRAY
19218: PUSH
19219: LD_INT 3
19221: ARRAY
19222: STR
19223: PUSH
19224: LD_STRING ,
19226: STR
19227: PUSH
19228: LD_VAR 0 3
19232: PUSH
19233: LD_VAR 0 2
19237: ARRAY
19238: PUSH
19239: LD_INT 4
19241: ARRAY
19242: STR
19243: PUSH
19244: LD_STRING )
19246: STR
19247: PPUSH
19248: CALL_OW 559
19252: GO 19162
19254: POP
19255: POP
// end ; end ;
19256: LD_VAR 0 1
19260: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19261: LD_EXP 82
19265: IFFALSE 19950
19267: GO 19269
19269: DISABLE
19270: LD_INT 0
19272: PPUSH
19273: PPUSH
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
19280: PPUSH
// begin enable ;
19281: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19282: LD_ADDR_VAR 0 3
19286: PUSH
19287: LD_EXP 82
19291: PPUSH
19292: CALL 65539 0 1
19296: ST_TO_ADDR
// if not list then
19297: LD_VAR 0 3
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19950
// for i := 1 to list do
19306: LD_ADDR_VAR 0 1
19310: PUSH
19311: DOUBLE
19312: LD_INT 1
19314: DEC
19315: ST_TO_ADDR
19316: LD_VAR 0 3
19320: PUSH
19321: FOR_TO
19322: IFFALSE 19948
// begin depot := list [ i ] [ 2 ] ;
19324: LD_ADDR_VAR 0 8
19328: PUSH
19329: LD_VAR 0 3
19333: PUSH
19334: LD_VAR 0 1
19338: ARRAY
19339: PUSH
19340: LD_INT 2
19342: ARRAY
19343: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19344: LD_ADDR_VAR 0 5
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_VAR 0 1
19358: ARRAY
19359: PUSH
19360: LD_INT 1
19362: ARRAY
19363: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19364: LD_VAR 0 8
19368: PPUSH
19369: CALL_OW 301
19373: PUSH
19374: LD_VAR 0 5
19378: PUSH
19379: LD_VAR 0 8
19383: PPUSH
19384: CALL_OW 255
19388: NONEQUAL
19389: OR
19390: IFFALSE 19419
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19392: LD_ADDR_EXP 82
19396: PUSH
19397: LD_EXP 82
19401: PPUSH
19402: LD_VAR 0 8
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: CALL_OW 1
19414: ST_TO_ADDR
// exit ;
19415: POP
19416: POP
19417: GO 19950
// end ; x := list [ i ] [ 3 ] ;
19419: LD_ADDR_VAR 0 6
19423: PUSH
19424: LD_VAR 0 3
19428: PUSH
19429: LD_VAR 0 1
19433: ARRAY
19434: PUSH
19435: LD_INT 3
19437: ARRAY
19438: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19439: LD_ADDR_VAR 0 7
19443: PUSH
19444: LD_VAR 0 3
19448: PUSH
19449: LD_VAR 0 1
19453: ARRAY
19454: PUSH
19455: LD_INT 4
19457: ARRAY
19458: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19459: LD_ADDR_VAR 0 9
19463: PUSH
19464: LD_VAR 0 6
19468: PPUSH
19469: LD_VAR 0 7
19473: PPUSH
19474: LD_INT 16
19476: PPUSH
19477: CALL 64127 0 3
19481: ST_TO_ADDR
// if not cratesNearbyPoint then
19482: LD_VAR 0 9
19486: NOT
19487: IFFALSE 19493
// exit ;
19489: POP
19490: POP
19491: GO 19950
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_INT 22
19500: PUSH
19501: LD_VAR 0 5
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: LD_INT 60
19515: PUSH
19516: EMPTY
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 91
19525: PUSH
19526: LD_VAR 0 8
19530: PUSH
19531: LD_INT 6
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 16
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: PPUSH
19573: CALL_OW 69
19577: PUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: CALL_OW 313
19587: PPUSH
19588: LD_INT 3
19590: PUSH
19591: LD_INT 60
19593: PUSH
19594: EMPTY
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: LD_INT 25
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 25
19616: PUSH
19617: LD_INT 16
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PPUSH
19633: CALL_OW 72
19637: UNION
19638: ST_TO_ADDR
// if tmp then
19639: LD_VAR 0 4
19643: IFFALSE 19723
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19645: LD_ADDR_VAR 0 4
19649: PUSH
19650: LD_VAR 0 4
19654: PPUSH
19655: LD_INT 3
19657: PPUSH
19658: CALL 62096 0 2
19662: ST_TO_ADDR
// for j in tmp do
19663: LD_ADDR_VAR 0 2
19667: PUSH
19668: LD_VAR 0 4
19672: PUSH
19673: FOR_IN
19674: IFFALSE 19717
// begin if IsInUnit ( j ) then
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL_OW 310
19685: IFFALSE 19696
// ComExit ( j ) ;
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL 62179 0 1
// AddComCollect ( j , x , y ) ;
19696: LD_VAR 0 2
19700: PPUSH
19701: LD_VAR 0 6
19705: PPUSH
19706: LD_VAR 0 7
19710: PPUSH
19711: CALL_OW 177
// end ;
19715: GO 19673
19717: POP
19718: POP
// exit ;
19719: POP
19720: POP
19721: GO 19950
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19723: LD_ADDR_VAR 0 4
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_VAR 0 5
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 91
19742: PUSH
19743: LD_VAR 0 8
19747: PUSH
19748: LD_INT 8
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: LD_INT 34
19761: PUSH
19762: LD_INT 12
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 34
19771: PUSH
19772: LD_INT 51
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 34
19781: PUSH
19782: LD_INT 32
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 34
19791: PUSH
19792: LD_INT 89
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 69
19815: ST_TO_ADDR
// if tmp then
19816: LD_VAR 0 4
19820: IFFALSE 19946
// begin for j in tmp do
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: LD_VAR 0 4
19831: PUSH
19832: FOR_IN
19833: IFFALSE 19944
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19835: LD_VAR 0 2
19839: PPUSH
19840: CALL_OW 262
19844: PUSH
19845: LD_INT 3
19847: EQUAL
19848: PUSH
19849: LD_VAR 0 2
19853: PPUSH
19854: CALL_OW 261
19858: PUSH
19859: LD_INT 20
19861: GREATER
19862: OR
19863: PUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: CALL_OW 314
19873: NOT
19874: AND
19875: PUSH
19876: LD_VAR 0 2
19880: PPUSH
19881: CALL_OW 263
19885: PUSH
19886: LD_INT 1
19888: NONEQUAL
19889: PUSH
19890: LD_VAR 0 2
19894: PPUSH
19895: CALL_OW 311
19899: OR
19900: AND
19901: IFFALSE 19942
// begin ComCollect ( j , x , y ) ;
19903: LD_VAR 0 2
19907: PPUSH
19908: LD_VAR 0 6
19912: PPUSH
19913: LD_VAR 0 7
19917: PPUSH
19918: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19922: LD_VAR 0 2
19926: PPUSH
19927: LD_VAR 0 8
19931: PPUSH
19932: CALL_OW 172
// exit ;
19936: POP
19937: POP
19938: POP
19939: POP
19940: GO 19950
// end ;
19942: GO 19832
19944: POP
19945: POP
// end ; end ;
19946: GO 19321
19948: POP
19949: POP
// end ; end_of_file
19950: PPOPN 9
19952: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19953: LD_VAR 0 1
19957: PUSH
19958: LD_INT 200
19960: DOUBLE
19961: GREATEREQUAL
19962: IFFALSE 19970
19964: LD_INT 299
19966: DOUBLE
19967: LESSEQUAL
19968: IFTRUE 19972
19970: GO 20004
19972: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19973: LD_VAR 0 1
19977: PPUSH
19978: LD_VAR 0 2
19982: PPUSH
19983: LD_VAR 0 3
19987: PPUSH
19988: LD_VAR 0 4
19992: PPUSH
19993: LD_VAR 0 5
19997: PPUSH
19998: CALL 20492 0 5
20002: GO 20081
20004: LD_INT 300
20006: DOUBLE
20007: GREATEREQUAL
20008: IFFALSE 20016
20010: LD_INT 399
20012: DOUBLE
20013: LESSEQUAL
20014: IFTRUE 20018
20016: GO 20080
20018: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_VAR 0 2
20028: PPUSH
20029: LD_VAR 0 3
20033: PPUSH
20034: LD_VAR 0 4
20038: PPUSH
20039: LD_VAR 0 5
20043: PPUSH
20044: LD_VAR 0 6
20048: PPUSH
20049: LD_VAR 0 7
20053: PPUSH
20054: LD_VAR 0 8
20058: PPUSH
20059: LD_VAR 0 9
20063: PPUSH
20064: LD_VAR 0 10
20068: PPUSH
20069: LD_VAR 0 11
20073: PPUSH
20074: CALL 16662 0 11
20078: GO 20081
20080: POP
// end ;
20081: PPOPN 11
20083: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_VAR 0 2
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: LD_VAR 0 4
20103: PPUSH
20104: LD_VAR 0 5
20108: PPUSH
20109: CALL 20228 0 5
// end ; end_of_file
20113: PPOPN 5
20115: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 264
20131: PUSH
20132: LD_INT 91
20134: EQUAL
20135: IFFALSE 20207
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20137: LD_INT 68
20139: PPUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 255
20149: PPUSH
20150: CALL_OW 321
20154: PUSH
20155: LD_INT 2
20157: EQUAL
20158: IFFALSE 20170
// eff := 70 else
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: LD_INT 70
20167: ST_TO_ADDR
20168: GO 20178
// eff := 30 ;
20170: LD_ADDR_VAR 0 4
20174: PUSH
20175: LD_INT 30
20177: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: CALL_OW 250
20187: PPUSH
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 251
20197: PPUSH
20198: LD_VAR 0 4
20202: PPUSH
20203: CALL_OW 495
// end ; end ;
20207: LD_VAR 0 2
20211: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20212: LD_INT 0
20214: PPUSH
// end ;
20215: LD_VAR 0 4
20219: RET
// export function SOS_Command ( cmd ) ; begin
20220: LD_INT 0
20222: PPUSH
// end ;
20223: LD_VAR 0 2
20227: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20228: LD_INT 0
20230: PPUSH
// end ;
20231: LD_VAR 0 6
20235: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
// if not vehicle or not factory then
20240: LD_VAR 0 1
20244: NOT
20245: PUSH
20246: LD_VAR 0 2
20250: NOT
20251: OR
20252: IFFALSE 20256
// exit ;
20254: GO 20487
// if factoryWaypoints >= factory then
20256: LD_EXP 81
20260: PUSH
20261: LD_VAR 0 2
20265: GREATEREQUAL
20266: IFFALSE 20487
// if factoryWaypoints [ factory ] then
20268: LD_EXP 81
20272: PUSH
20273: LD_VAR 0 2
20277: ARRAY
20278: IFFALSE 20487
// begin if GetControl ( vehicle ) = control_manual then
20280: LD_VAR 0 1
20284: PPUSH
20285: CALL_OW 263
20289: PUSH
20290: LD_INT 1
20292: EQUAL
20293: IFFALSE 20374
// begin driver := IsDrivenBy ( vehicle ) ;
20295: LD_ADDR_VAR 0 4
20299: PUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 311
20309: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20310: LD_VAR 0 4
20314: PPUSH
20315: LD_EXP 81
20319: PUSH
20320: LD_VAR 0 2
20324: ARRAY
20325: PUSH
20326: LD_INT 3
20328: ARRAY
20329: PPUSH
20330: LD_EXP 81
20334: PUSH
20335: LD_VAR 0 2
20339: ARRAY
20340: PUSH
20341: LD_INT 4
20343: ARRAY
20344: PPUSH
20345: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20349: LD_VAR 0 4
20353: PPUSH
20354: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20358: LD_VAR 0 4
20362: PPUSH
20363: LD_VAR 0 2
20367: PPUSH
20368: CALL_OW 180
// end else
20372: GO 20487
// if GetControl ( vehicle ) = control_remote then
20374: LD_VAR 0 1
20378: PPUSH
20379: CALL_OW 263
20383: PUSH
20384: LD_INT 2
20386: EQUAL
20387: IFFALSE 20448
// begin wait ( 0 0$2 ) ;
20389: LD_INT 70
20391: PPUSH
20392: CALL_OW 67
// if Connect ( vehicle ) then
20396: LD_VAR 0 1
20400: PPUSH
20401: CALL 32511 0 1
20405: IFFALSE 20446
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20407: LD_VAR 0 1
20411: PPUSH
20412: LD_EXP 81
20416: PUSH
20417: LD_VAR 0 2
20421: ARRAY
20422: PUSH
20423: LD_INT 3
20425: ARRAY
20426: PPUSH
20427: LD_EXP 81
20431: PUSH
20432: LD_VAR 0 2
20436: ARRAY
20437: PUSH
20438: LD_INT 4
20440: ARRAY
20441: PPUSH
20442: CALL_OW 171
// end else
20446: GO 20487
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20448: LD_VAR 0 1
20452: PPUSH
20453: LD_EXP 81
20457: PUSH
20458: LD_VAR 0 2
20462: ARRAY
20463: PUSH
20464: LD_INT 3
20466: ARRAY
20467: PPUSH
20468: LD_EXP 81
20472: PUSH
20473: LD_VAR 0 2
20477: ARRAY
20478: PUSH
20479: LD_INT 4
20481: ARRAY
20482: PPUSH
20483: CALL_OW 171
// end ; end ;
20487: LD_VAR 0 3
20491: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20492: LD_INT 0
20494: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20495: LD_VAR 0 1
20499: PUSH
20500: LD_INT 250
20502: EQUAL
20503: PUSH
20504: LD_VAR 0 2
20508: PPUSH
20509: CALL_OW 264
20513: PUSH
20514: LD_INT 81
20516: EQUAL
20517: AND
20518: IFFALSE 20539
// MinerPlaceMine ( unit , x , y ) ;
20520: LD_VAR 0 2
20524: PPUSH
20525: LD_VAR 0 4
20529: PPUSH
20530: LD_VAR 0 5
20534: PPUSH
20535: CALL 22924 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20539: LD_VAR 0 1
20543: PUSH
20544: LD_INT 251
20546: EQUAL
20547: PUSH
20548: LD_VAR 0 2
20552: PPUSH
20553: CALL_OW 264
20557: PUSH
20558: LD_INT 81
20560: EQUAL
20561: AND
20562: IFFALSE 20583
// MinerDetonateMine ( unit , x , y ) ;
20564: LD_VAR 0 2
20568: PPUSH
20569: LD_VAR 0 4
20573: PPUSH
20574: LD_VAR 0 5
20578: PPUSH
20579: CALL 23199 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20583: LD_VAR 0 1
20587: PUSH
20588: LD_INT 252
20590: EQUAL
20591: PUSH
20592: LD_VAR 0 2
20596: PPUSH
20597: CALL_OW 264
20601: PUSH
20602: LD_INT 81
20604: EQUAL
20605: AND
20606: IFFALSE 20627
// MinerCreateMinefield ( unit , x , y ) ;
20608: LD_VAR 0 2
20612: PPUSH
20613: LD_VAR 0 4
20617: PPUSH
20618: LD_VAR 0 5
20622: PPUSH
20623: CALL 23616 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_INT 253
20634: EQUAL
20635: PUSH
20636: LD_VAR 0 2
20640: PPUSH
20641: CALL_OW 257
20645: PUSH
20646: LD_INT 5
20648: EQUAL
20649: AND
20650: IFFALSE 20671
// ComBinocular ( unit , x , y ) ;
20652: LD_VAR 0 2
20656: PPUSH
20657: LD_VAR 0 4
20661: PPUSH
20662: LD_VAR 0 5
20666: PPUSH
20667: CALL 23985 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20671: LD_VAR 0 1
20675: PUSH
20676: LD_INT 254
20678: EQUAL
20679: PUSH
20680: LD_VAR 0 2
20684: PPUSH
20685: CALL_OW 264
20689: PUSH
20690: LD_INT 99
20692: EQUAL
20693: AND
20694: PUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: CALL_OW 263
20704: PUSH
20705: LD_INT 3
20707: EQUAL
20708: AND
20709: IFFALSE 20725
// HackDestroyVehicle ( unit , selectedUnit ) ;
20711: LD_VAR 0 2
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: CALL 22288 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20725: LD_VAR 0 1
20729: PUSH
20730: LD_INT 255
20732: EQUAL
20733: PUSH
20734: LD_VAR 0 2
20738: PPUSH
20739: CALL_OW 264
20743: PUSH
20744: LD_INT 14
20746: PUSH
20747: LD_INT 53
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: IN
20754: AND
20755: PUSH
20756: LD_VAR 0 4
20760: PPUSH
20761: LD_VAR 0 5
20765: PPUSH
20766: CALL_OW 488
20770: AND
20771: IFFALSE 20795
// CutTreeXYR ( unit , x , y , 12 ) ;
20773: LD_VAR 0 2
20777: PPUSH
20778: LD_VAR 0 4
20782: PPUSH
20783: LD_VAR 0 5
20787: PPUSH
20788: LD_INT 12
20790: PPUSH
20791: CALL 20858 0 4
// if cmd = 256 then
20795: LD_VAR 0 1
20799: PUSH
20800: LD_INT 256
20802: EQUAL
20803: IFFALSE 20824
// SetFactoryWaypoint ( unit , x , y ) ;
20805: LD_VAR 0 2
20809: PPUSH
20810: LD_VAR 0 4
20814: PPUSH
20815: LD_VAR 0 5
20819: PPUSH
20820: CALL 18642 0 3
// if cmd = 257 then
20824: LD_VAR 0 1
20828: PUSH
20829: LD_INT 257
20831: EQUAL
20832: IFFALSE 20853
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20834: LD_VAR 0 2
20838: PPUSH
20839: LD_VAR 0 4
20843: PPUSH
20844: LD_VAR 0 5
20848: PPUSH
20849: CALL 19004 0 3
// end ;
20853: LD_VAR 0 6
20857: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20869: LD_VAR 0 1
20873: NOT
20874: PUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: CALL_OW 488
20889: NOT
20890: OR
20891: PUSH
20892: LD_VAR 0 4
20896: NOT
20897: OR
20898: IFFALSE 20902
// exit ;
20900: GO 21242
// list := [ ] ;
20902: LD_ADDR_VAR 0 13
20906: PUSH
20907: EMPTY
20908: ST_TO_ADDR
// if x - r < 0 then
20909: LD_VAR 0 2
20913: PUSH
20914: LD_VAR 0 4
20918: MINUS
20919: PUSH
20920: LD_INT 0
20922: LESS
20923: IFFALSE 20935
// min_x := 0 else
20925: LD_ADDR_VAR 0 7
20929: PUSH
20930: LD_INT 0
20932: ST_TO_ADDR
20933: GO 20951
// min_x := x - r ;
20935: LD_ADDR_VAR 0 7
20939: PUSH
20940: LD_VAR 0 2
20944: PUSH
20945: LD_VAR 0 4
20949: MINUS
20950: ST_TO_ADDR
// if y - r < 0 then
20951: LD_VAR 0 3
20955: PUSH
20956: LD_VAR 0 4
20960: MINUS
20961: PUSH
20962: LD_INT 0
20964: LESS
20965: IFFALSE 20977
// min_y := 0 else
20967: LD_ADDR_VAR 0 8
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
20975: GO 20993
// min_y := y - r ;
20977: LD_ADDR_VAR 0 8
20981: PUSH
20982: LD_VAR 0 3
20986: PUSH
20987: LD_VAR 0 4
20991: MINUS
20992: ST_TO_ADDR
// max_x := x + r ;
20993: LD_ADDR_VAR 0 9
20997: PUSH
20998: LD_VAR 0 2
21002: PUSH
21003: LD_VAR 0 4
21007: PLUS
21008: ST_TO_ADDR
// max_y := y + r ;
21009: LD_ADDR_VAR 0 10
21013: PUSH
21014: LD_VAR 0 3
21018: PUSH
21019: LD_VAR 0 4
21023: PLUS
21024: ST_TO_ADDR
// for _x = min_x to max_x do
21025: LD_ADDR_VAR 0 11
21029: PUSH
21030: DOUBLE
21031: LD_VAR 0 7
21035: DEC
21036: ST_TO_ADDR
21037: LD_VAR 0 9
21041: PUSH
21042: FOR_TO
21043: IFFALSE 21160
// for _y = min_y to max_y do
21045: LD_ADDR_VAR 0 12
21049: PUSH
21050: DOUBLE
21051: LD_VAR 0 8
21055: DEC
21056: ST_TO_ADDR
21057: LD_VAR 0 10
21061: PUSH
21062: FOR_TO
21063: IFFALSE 21156
// begin if not ValidHex ( _x , _y ) then
21065: LD_VAR 0 11
21069: PPUSH
21070: LD_VAR 0 12
21074: PPUSH
21075: CALL_OW 488
21079: NOT
21080: IFFALSE 21084
// continue ;
21082: GO 21062
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21084: LD_VAR 0 11
21088: PPUSH
21089: LD_VAR 0 12
21093: PPUSH
21094: CALL_OW 351
21098: PUSH
21099: LD_VAR 0 11
21103: PPUSH
21104: LD_VAR 0 12
21108: PPUSH
21109: CALL_OW 554
21113: AND
21114: IFFALSE 21154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21116: LD_ADDR_VAR 0 13
21120: PUSH
21121: LD_VAR 0 13
21125: PPUSH
21126: LD_VAR 0 13
21130: PUSH
21131: LD_INT 1
21133: PLUS
21134: PPUSH
21135: LD_VAR 0 11
21139: PUSH
21140: LD_VAR 0 12
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 2
21153: ST_TO_ADDR
// end ;
21154: GO 21062
21156: POP
21157: POP
21158: GO 21042
21160: POP
21161: POP
// if not list then
21162: LD_VAR 0 13
21166: NOT
21167: IFFALSE 21171
// exit ;
21169: GO 21242
// for i in list do
21171: LD_ADDR_VAR 0 6
21175: PUSH
21176: LD_VAR 0 13
21180: PUSH
21181: FOR_IN
21182: IFFALSE 21240
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21184: LD_VAR 0 1
21188: PPUSH
21189: LD_STRING M
21191: PUSH
21192: LD_VAR 0 6
21196: PUSH
21197: LD_INT 1
21199: ARRAY
21200: PUSH
21201: LD_VAR 0 6
21205: PUSH
21206: LD_INT 2
21208: ARRAY
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 0
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: PPUSH
21234: CALL_OW 447
21238: GO 21181
21240: POP
21241: POP
// end ;
21242: LD_VAR 0 5
21246: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21247: LD_EXP 84
21251: NOT
21252: IFFALSE 21302
21254: GO 21256
21256: DISABLE
// begin initHack := true ;
21257: LD_ADDR_EXP 84
21261: PUSH
21262: LD_INT 1
21264: ST_TO_ADDR
// hackTanks := [ ] ;
21265: LD_ADDR_EXP 85
21269: PUSH
21270: EMPTY
21271: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21272: LD_ADDR_EXP 86
21276: PUSH
21277: EMPTY
21278: ST_TO_ADDR
// hackLimit := 3 ;
21279: LD_ADDR_EXP 87
21283: PUSH
21284: LD_INT 3
21286: ST_TO_ADDR
// hackDist := 12 ;
21287: LD_ADDR_EXP 88
21291: PUSH
21292: LD_INT 12
21294: ST_TO_ADDR
// hackCounter := [ ] ;
21295: LD_ADDR_EXP 89
21299: PUSH
21300: EMPTY
21301: ST_TO_ADDR
// end ;
21302: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21303: LD_EXP 84
21307: PUSH
21308: LD_INT 34
21310: PUSH
21311: LD_INT 99
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PPUSH
21318: CALL_OW 69
21322: AND
21323: IFFALSE 21576
21325: GO 21327
21327: DISABLE
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
// begin enable ;
21332: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21333: LD_ADDR_VAR 0 1
21337: PUSH
21338: LD_INT 34
21340: PUSH
21341: LD_INT 99
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: PUSH
21353: FOR_IN
21354: IFFALSE 21574
// begin if not i in hackTanks then
21356: LD_VAR 0 1
21360: PUSH
21361: LD_EXP 85
21365: IN
21366: NOT
21367: IFFALSE 21450
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21369: LD_ADDR_EXP 85
21373: PUSH
21374: LD_EXP 85
21378: PPUSH
21379: LD_EXP 85
21383: PUSH
21384: LD_INT 1
21386: PLUS
21387: PPUSH
21388: LD_VAR 0 1
21392: PPUSH
21393: CALL_OW 1
21397: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21398: LD_ADDR_EXP 86
21402: PUSH
21403: LD_EXP 86
21407: PPUSH
21408: LD_EXP 86
21412: PUSH
21413: LD_INT 1
21415: PLUS
21416: PPUSH
21417: EMPTY
21418: PPUSH
21419: CALL_OW 1
21423: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21424: LD_ADDR_EXP 89
21428: PUSH
21429: LD_EXP 89
21433: PPUSH
21434: LD_EXP 89
21438: PUSH
21439: LD_INT 1
21441: PLUS
21442: PPUSH
21443: EMPTY
21444: PPUSH
21445: CALL_OW 1
21449: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 302
21459: NOT
21460: IFFALSE 21473
// begin HackUnlinkAll ( i ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: CALL 21579 0 1
// continue ;
21471: GO 21353
// end ; HackCheckCapturedStatus ( i ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL 22022 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21482: LD_ADDR_VAR 0 2
21486: PUSH
21487: LD_INT 81
21489: PUSH
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 255
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 33
21506: PUSH
21507: LD_INT 3
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 91
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_EXP 88
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 50
21534: PUSH
21535: EMPTY
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: PPUSH
21544: CALL_OW 69
21548: ST_TO_ADDR
// if not tmp then
21549: LD_VAR 0 2
21553: NOT
21554: IFFALSE 21558
// continue ;
21556: GO 21353
// HackLink ( i , tmp ) ;
21558: LD_VAR 0 1
21562: PPUSH
21563: LD_VAR 0 2
21567: PPUSH
21568: CALL 21715 0 2
// end ;
21572: GO 21353
21574: POP
21575: POP
// end ;
21576: PPOPN 2
21578: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
21583: PPUSH
// if not hack in hackTanks then
21584: LD_VAR 0 1
21588: PUSH
21589: LD_EXP 85
21593: IN
21594: NOT
21595: IFFALSE 21599
// exit ;
21597: GO 21710
// index := GetElementIndex ( hackTanks , hack ) ;
21599: LD_ADDR_VAR 0 4
21603: PUSH
21604: LD_EXP 85
21608: PPUSH
21609: LD_VAR 0 1
21613: PPUSH
21614: CALL 29327 0 2
21618: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21619: LD_EXP 86
21623: PUSH
21624: LD_VAR 0 4
21628: ARRAY
21629: IFFALSE 21710
// begin for i in hackTanksCaptured [ index ] do
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: LD_EXP 86
21640: PUSH
21641: LD_VAR 0 4
21645: ARRAY
21646: PUSH
21647: FOR_IN
21648: IFFALSE 21674
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21650: LD_VAR 0 3
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PPUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 2
21666: ARRAY
21667: PPUSH
21668: CALL_OW 235
21672: GO 21647
21674: POP
21675: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21676: LD_ADDR_EXP 86
21680: PUSH
21681: LD_EXP 86
21685: PPUSH
21686: LD_VAR 0 4
21690: PPUSH
21691: EMPTY
21692: PPUSH
21693: CALL_OW 1
21697: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21698: LD_VAR 0 1
21702: PPUSH
21703: LD_INT 0
21705: PPUSH
21706: CALL_OW 505
// end ; end ;
21710: LD_VAR 0 2
21714: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21715: LD_INT 0
21717: PPUSH
21718: PPUSH
21719: PPUSH
// if not hack in hackTanks or not vehicles then
21720: LD_VAR 0 1
21724: PUSH
21725: LD_EXP 85
21729: IN
21730: NOT
21731: PUSH
21732: LD_VAR 0 2
21736: NOT
21737: OR
21738: IFFALSE 21742
// exit ;
21740: GO 22017
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_VAR 0 1
21751: PPUSH
21752: LD_VAR 0 2
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: LD_INT 1
21762: PPUSH
21763: CALL 29977 0 4
21767: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21768: LD_ADDR_VAR 0 5
21772: PUSH
21773: LD_EXP 85
21777: PPUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL 29327 0 2
21787: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21788: LD_EXP 86
21792: PUSH
21793: LD_VAR 0 5
21797: ARRAY
21798: PUSH
21799: LD_EXP 87
21803: LESS
21804: IFFALSE 21993
// begin for i := 1 to vehicles do
21806: LD_ADDR_VAR 0 4
21810: PUSH
21811: DOUBLE
21812: LD_INT 1
21814: DEC
21815: ST_TO_ADDR
21816: LD_VAR 0 2
21820: PUSH
21821: FOR_TO
21822: IFFALSE 21991
// begin if hackTanksCaptured [ index ] = hackLimit then
21824: LD_EXP 86
21828: PUSH
21829: LD_VAR 0 5
21833: ARRAY
21834: PUSH
21835: LD_EXP 87
21839: EQUAL
21840: IFFALSE 21844
// break ;
21842: GO 21991
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21844: LD_ADDR_EXP 89
21848: PUSH
21849: LD_EXP 89
21853: PPUSH
21854: LD_VAR 0 5
21858: PPUSH
21859: LD_EXP 89
21863: PUSH
21864: LD_VAR 0 5
21868: ARRAY
21869: PUSH
21870: LD_INT 1
21872: PLUS
21873: PPUSH
21874: CALL_OW 1
21878: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21879: LD_ADDR_EXP 86
21883: PUSH
21884: LD_EXP 86
21888: PPUSH
21889: LD_VAR 0 5
21893: PUSH
21894: LD_EXP 86
21898: PUSH
21899: LD_VAR 0 5
21903: ARRAY
21904: PUSH
21905: LD_INT 1
21907: PLUS
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PPUSH
21913: LD_VAR 0 2
21917: PUSH
21918: LD_VAR 0 4
21922: ARRAY
21923: PUSH
21924: LD_VAR 0 2
21928: PUSH
21929: LD_VAR 0 4
21933: ARRAY
21934: PPUSH
21935: CALL_OW 255
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PPUSH
21944: CALL 29542 0 3
21948: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21949: LD_VAR 0 2
21953: PUSH
21954: LD_VAR 0 4
21958: ARRAY
21959: PPUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 255
21969: PPUSH
21970: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21974: LD_VAR 0 2
21978: PUSH
21979: LD_VAR 0 4
21983: ARRAY
21984: PPUSH
21985: CALL_OW 141
// end ;
21989: GO 21821
21991: POP
21992: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21993: LD_VAR 0 1
21997: PPUSH
21998: LD_EXP 86
22002: PUSH
22003: LD_VAR 0 5
22007: ARRAY
22008: PUSH
22009: LD_INT 0
22011: PLUS
22012: PPUSH
22013: CALL_OW 505
// end ;
22017: LD_VAR 0 3
22021: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22022: LD_INT 0
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
// if not hack in hackTanks then
22028: LD_VAR 0 1
22032: PUSH
22033: LD_EXP 85
22037: IN
22038: NOT
22039: IFFALSE 22043
// exit ;
22041: GO 22283
// index := GetElementIndex ( hackTanks , hack ) ;
22043: LD_ADDR_VAR 0 4
22047: PUSH
22048: LD_EXP 85
22052: PPUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL 29327 0 2
22062: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22063: LD_ADDR_VAR 0 3
22067: PUSH
22068: DOUBLE
22069: LD_EXP 86
22073: PUSH
22074: LD_VAR 0 4
22078: ARRAY
22079: INC
22080: ST_TO_ADDR
22081: LD_INT 1
22083: PUSH
22084: FOR_DOWNTO
22085: IFFALSE 22257
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22087: LD_ADDR_VAR 0 5
22091: PUSH
22092: LD_EXP 86
22096: PUSH
22097: LD_VAR 0 4
22101: ARRAY
22102: PUSH
22103: LD_VAR 0 3
22107: ARRAY
22108: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22109: LD_VAR 0 5
22113: PUSH
22114: LD_INT 1
22116: ARRAY
22117: PPUSH
22118: CALL_OW 302
22122: NOT
22123: PUSH
22124: LD_VAR 0 5
22128: PUSH
22129: LD_INT 1
22131: ARRAY
22132: PPUSH
22133: CALL_OW 255
22137: PUSH
22138: LD_VAR 0 1
22142: PPUSH
22143: CALL_OW 255
22147: NONEQUAL
22148: OR
22149: IFFALSE 22255
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22151: LD_VAR 0 5
22155: PUSH
22156: LD_INT 1
22158: ARRAY
22159: PPUSH
22160: CALL_OW 305
22164: PUSH
22165: LD_VAR 0 5
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 255
22178: PUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 255
22188: EQUAL
22189: AND
22190: IFFALSE 22214
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22192: LD_VAR 0 5
22196: PUSH
22197: LD_INT 1
22199: ARRAY
22200: PPUSH
22201: LD_VAR 0 5
22205: PUSH
22206: LD_INT 2
22208: ARRAY
22209: PPUSH
22210: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22214: LD_ADDR_EXP 86
22218: PUSH
22219: LD_EXP 86
22223: PPUSH
22224: LD_VAR 0 4
22228: PPUSH
22229: LD_EXP 86
22233: PUSH
22234: LD_VAR 0 4
22238: ARRAY
22239: PPUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: CALL_OW 3
22249: PPUSH
22250: CALL_OW 1
22254: ST_TO_ADDR
// end ; end ;
22255: GO 22084
22257: POP
22258: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_EXP 86
22268: PUSH
22269: LD_VAR 0 4
22273: ARRAY
22274: PUSH
22275: LD_INT 0
22277: PLUS
22278: PPUSH
22279: CALL_OW 505
// end ;
22283: LD_VAR 0 2
22287: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
// if not hack in hackTanks then
22294: LD_VAR 0 1
22298: PUSH
22299: LD_EXP 85
22303: IN
22304: NOT
22305: IFFALSE 22309
// exit ;
22307: GO 22394
// index := GetElementIndex ( hackTanks , hack ) ;
22309: LD_ADDR_VAR 0 5
22313: PUSH
22314: LD_EXP 85
22318: PPUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: CALL 29327 0 2
22328: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22329: LD_ADDR_VAR 0 4
22333: PUSH
22334: DOUBLE
22335: LD_INT 1
22337: DEC
22338: ST_TO_ADDR
22339: LD_EXP 86
22343: PUSH
22344: LD_VAR 0 5
22348: ARRAY
22349: PUSH
22350: FOR_TO
22351: IFFALSE 22392
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22353: LD_EXP 86
22357: PUSH
22358: LD_VAR 0 5
22362: ARRAY
22363: PUSH
22364: LD_VAR 0 4
22368: ARRAY
22369: PUSH
22370: LD_INT 1
22372: ARRAY
22373: PUSH
22374: LD_VAR 0 2
22378: EQUAL
22379: IFFALSE 22390
// KillUnit ( vehicle ) ;
22381: LD_VAR 0 2
22385: PPUSH
22386: CALL_OW 66
22390: GO 22350
22392: POP
22393: POP
// end ;
22394: LD_VAR 0 3
22398: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22399: LD_EXP 90
22403: NOT
22404: IFFALSE 22439
22406: GO 22408
22408: DISABLE
// begin initMiner := true ;
22409: LD_ADDR_EXP 90
22413: PUSH
22414: LD_INT 1
22416: ST_TO_ADDR
// minersList := [ ] ;
22417: LD_ADDR_EXP 91
22421: PUSH
22422: EMPTY
22423: ST_TO_ADDR
// minerMinesList := [ ] ;
22424: LD_ADDR_EXP 92
22428: PUSH
22429: EMPTY
22430: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22431: LD_ADDR_EXP 93
22435: PUSH
22436: LD_INT 5
22438: ST_TO_ADDR
// end ;
22439: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22440: LD_EXP 90
22444: PUSH
22445: LD_INT 34
22447: PUSH
22448: LD_INT 81
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 69
22459: AND
22460: IFFALSE 22921
22462: GO 22464
22464: DISABLE
22465: LD_INT 0
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
// begin enable ;
22471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22472: LD_ADDR_VAR 0 1
22476: PUSH
22477: LD_INT 34
22479: PUSH
22480: LD_INT 81
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PPUSH
22487: CALL_OW 69
22491: PUSH
22492: FOR_IN
22493: IFFALSE 22565
// begin if not i in minersList then
22495: LD_VAR 0 1
22499: PUSH
22500: LD_EXP 91
22504: IN
22505: NOT
22506: IFFALSE 22563
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22508: LD_ADDR_EXP 91
22512: PUSH
22513: LD_EXP 91
22517: PPUSH
22518: LD_EXP 91
22522: PUSH
22523: LD_INT 1
22525: PLUS
22526: PPUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: CALL_OW 1
22536: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22537: LD_ADDR_EXP 92
22541: PUSH
22542: LD_EXP 92
22546: PPUSH
22547: LD_EXP 92
22551: PUSH
22552: LD_INT 1
22554: PLUS
22555: PPUSH
22556: EMPTY
22557: PPUSH
22558: CALL_OW 1
22562: ST_TO_ADDR
// end end ;
22563: GO 22492
22565: POP
22566: POP
// for i := minerMinesList downto 1 do
22567: LD_ADDR_VAR 0 1
22571: PUSH
22572: DOUBLE
22573: LD_EXP 92
22577: INC
22578: ST_TO_ADDR
22579: LD_INT 1
22581: PUSH
22582: FOR_DOWNTO
22583: IFFALSE 22919
// begin if IsLive ( minersList [ i ] ) then
22585: LD_EXP 91
22589: PUSH
22590: LD_VAR 0 1
22594: ARRAY
22595: PPUSH
22596: CALL_OW 300
22600: IFFALSE 22628
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22602: LD_EXP 91
22606: PUSH
22607: LD_VAR 0 1
22611: ARRAY
22612: PPUSH
22613: LD_EXP 92
22617: PUSH
22618: LD_VAR 0 1
22622: ARRAY
22623: PPUSH
22624: CALL_OW 505
// if not minerMinesList [ i ] then
22628: LD_EXP 92
22632: PUSH
22633: LD_VAR 0 1
22637: ARRAY
22638: NOT
22639: IFFALSE 22643
// continue ;
22641: GO 22582
// for j := minerMinesList [ i ] downto 1 do
22643: LD_ADDR_VAR 0 2
22647: PUSH
22648: DOUBLE
22649: LD_EXP 92
22653: PUSH
22654: LD_VAR 0 1
22658: ARRAY
22659: INC
22660: ST_TO_ADDR
22661: LD_INT 1
22663: PUSH
22664: FOR_DOWNTO
22665: IFFALSE 22915
// begin side := GetSide ( minersList [ i ] ) ;
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_EXP 91
22676: PUSH
22677: LD_VAR 0 1
22681: ARRAY
22682: PPUSH
22683: CALL_OW 255
22687: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22688: LD_ADDR_VAR 0 4
22692: PUSH
22693: LD_EXP 92
22697: PUSH
22698: LD_VAR 0 1
22702: ARRAY
22703: PUSH
22704: LD_VAR 0 2
22708: ARRAY
22709: PUSH
22710: LD_INT 1
22712: ARRAY
22713: PPUSH
22714: LD_EXP 92
22718: PUSH
22719: LD_VAR 0 1
22723: ARRAY
22724: PUSH
22725: LD_VAR 0 2
22729: ARRAY
22730: PUSH
22731: LD_INT 2
22733: ARRAY
22734: PPUSH
22735: CALL_OW 428
22739: ST_TO_ADDR
// if not tmp then
22740: LD_VAR 0 4
22744: NOT
22745: IFFALSE 22749
// continue ;
22747: GO 22664
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22749: LD_VAR 0 4
22753: PUSH
22754: LD_INT 81
22756: PUSH
22757: LD_VAR 0 3
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 69
22770: IN
22771: PUSH
22772: LD_EXP 92
22776: PUSH
22777: LD_VAR 0 1
22781: ARRAY
22782: PUSH
22783: LD_VAR 0 2
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: LD_EXP 92
22797: PUSH
22798: LD_VAR 0 1
22802: ARRAY
22803: PUSH
22804: LD_VAR 0 2
22808: ARRAY
22809: PUSH
22810: LD_INT 2
22812: ARRAY
22813: PPUSH
22814: CALL_OW 458
22818: AND
22819: IFFALSE 22913
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22821: LD_EXP 92
22825: PUSH
22826: LD_VAR 0 1
22830: ARRAY
22831: PUSH
22832: LD_VAR 0 2
22836: ARRAY
22837: PUSH
22838: LD_INT 1
22840: ARRAY
22841: PPUSH
22842: LD_EXP 92
22846: PUSH
22847: LD_VAR 0 1
22851: ARRAY
22852: PUSH
22853: LD_VAR 0 2
22857: ARRAY
22858: PUSH
22859: LD_INT 2
22861: ARRAY
22862: PPUSH
22863: LD_VAR 0 3
22867: PPUSH
22868: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22872: LD_ADDR_EXP 92
22876: PUSH
22877: LD_EXP 92
22881: PPUSH
22882: LD_VAR 0 1
22886: PPUSH
22887: LD_EXP 92
22891: PUSH
22892: LD_VAR 0 1
22896: ARRAY
22897: PPUSH
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 3
22907: PPUSH
22908: CALL_OW 1
22912: ST_TO_ADDR
// end ; end ;
22913: GO 22664
22915: POP
22916: POP
// end ;
22917: GO 22582
22919: POP
22920: POP
// end ;
22921: PPOPN 4
22923: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22924: LD_INT 0
22926: PPUSH
22927: PPUSH
// result := false ;
22928: LD_ADDR_VAR 0 4
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 264
22945: PUSH
22946: LD_INT 81
22948: EQUAL
22949: NOT
22950: IFFALSE 22954
// exit ;
22952: GO 23194
// index := GetElementIndex ( minersList , unit ) ;
22954: LD_ADDR_VAR 0 5
22958: PUSH
22959: LD_EXP 91
22963: PPUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL 29327 0 2
22973: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22974: LD_EXP 92
22978: PUSH
22979: LD_VAR 0 5
22983: ARRAY
22984: PUSH
22985: LD_EXP 93
22989: GREATEREQUAL
22990: IFFALSE 22994
// exit ;
22992: GO 23194
// ComMoveXY ( unit , x , y ) ;
22994: LD_VAR 0 1
22998: PPUSH
22999: LD_VAR 0 2
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23013: LD_INT 35
23015: PPUSH
23016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23020: LD_VAR 0 1
23024: PPUSH
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: CALL 60590 0 3
23039: NOT
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 314
23050: AND
23051: IFFALSE 23055
// exit ;
23053: GO 23194
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 3
23064: PPUSH
23065: CALL_OW 428
23069: PUSH
23070: LD_VAR 0 1
23074: EQUAL
23075: PUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 314
23085: NOT
23086: AND
23087: IFFALSE 23013
// PlaySoundXY ( x , y , PlantMine ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_STRING PlantMine
23101: PPUSH
23102: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 255
23125: PPUSH
23126: LD_INT 0
23128: PPUSH
23129: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23133: LD_ADDR_EXP 92
23137: PUSH
23138: LD_EXP 92
23142: PPUSH
23143: LD_VAR 0 5
23147: PUSH
23148: LD_EXP 92
23152: PUSH
23153: LD_VAR 0 5
23157: ARRAY
23158: PUSH
23159: LD_INT 1
23161: PLUS
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: LD_VAR 0 2
23171: PUSH
23172: LD_VAR 0 3
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PPUSH
23181: CALL 29542 0 3
23185: ST_TO_ADDR
// result := true ;
23186: LD_ADDR_VAR 0 4
23190: PUSH
23191: LD_INT 1
23193: ST_TO_ADDR
// end ;
23194: LD_VAR 0 4
23198: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
// if not unit in minersList then
23204: LD_VAR 0 1
23208: PUSH
23209: LD_EXP 91
23213: IN
23214: NOT
23215: IFFALSE 23219
// exit ;
23217: GO 23611
// index := GetElementIndex ( minersList , unit ) ;
23219: LD_ADDR_VAR 0 6
23223: PUSH
23224: LD_EXP 91
23228: PPUSH
23229: LD_VAR 0 1
23233: PPUSH
23234: CALL 29327 0 2
23238: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23239: LD_ADDR_VAR 0 5
23243: PUSH
23244: DOUBLE
23245: LD_EXP 92
23249: PUSH
23250: LD_VAR 0 6
23254: ARRAY
23255: INC
23256: ST_TO_ADDR
23257: LD_INT 1
23259: PUSH
23260: FOR_DOWNTO
23261: IFFALSE 23422
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23263: LD_EXP 92
23267: PUSH
23268: LD_VAR 0 6
23272: ARRAY
23273: PUSH
23274: LD_VAR 0 5
23278: ARRAY
23279: PUSH
23280: LD_INT 1
23282: ARRAY
23283: PUSH
23284: LD_VAR 0 2
23288: EQUAL
23289: PUSH
23290: LD_EXP 92
23294: PUSH
23295: LD_VAR 0 6
23299: ARRAY
23300: PUSH
23301: LD_VAR 0 5
23305: ARRAY
23306: PUSH
23307: LD_INT 2
23309: ARRAY
23310: PUSH
23311: LD_VAR 0 3
23315: EQUAL
23316: AND
23317: IFFALSE 23420
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23319: LD_EXP 92
23323: PUSH
23324: LD_VAR 0 6
23328: ARRAY
23329: PUSH
23330: LD_VAR 0 5
23334: ARRAY
23335: PUSH
23336: LD_INT 1
23338: ARRAY
23339: PPUSH
23340: LD_EXP 92
23344: PUSH
23345: LD_VAR 0 6
23349: ARRAY
23350: PUSH
23351: LD_VAR 0 5
23355: ARRAY
23356: PUSH
23357: LD_INT 2
23359: ARRAY
23360: PPUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL_OW 255
23370: PPUSH
23371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23375: LD_ADDR_EXP 92
23379: PUSH
23380: LD_EXP 92
23384: PPUSH
23385: LD_VAR 0 6
23389: PPUSH
23390: LD_EXP 92
23394: PUSH
23395: LD_VAR 0 6
23399: ARRAY
23400: PPUSH
23401: LD_VAR 0 5
23405: PPUSH
23406: CALL_OW 3
23410: PPUSH
23411: CALL_OW 1
23415: ST_TO_ADDR
// exit ;
23416: POP
23417: POP
23418: GO 23611
// end ; end ;
23420: GO 23260
23422: POP
23423: POP
// for i := minerMinesList [ index ] downto 1 do
23424: LD_ADDR_VAR 0 5
23428: PUSH
23429: DOUBLE
23430: LD_EXP 92
23434: PUSH
23435: LD_VAR 0 6
23439: ARRAY
23440: INC
23441: ST_TO_ADDR
23442: LD_INT 1
23444: PUSH
23445: FOR_DOWNTO
23446: IFFALSE 23609
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23448: LD_EXP 92
23452: PUSH
23453: LD_VAR 0 6
23457: ARRAY
23458: PUSH
23459: LD_VAR 0 5
23463: ARRAY
23464: PUSH
23465: LD_INT 1
23467: ARRAY
23468: PPUSH
23469: LD_EXP 92
23473: PUSH
23474: LD_VAR 0 6
23478: ARRAY
23479: PUSH
23480: LD_VAR 0 5
23484: ARRAY
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: PPUSH
23490: LD_VAR 0 2
23494: PPUSH
23495: LD_VAR 0 3
23499: PPUSH
23500: CALL_OW 298
23504: PUSH
23505: LD_INT 6
23507: LESS
23508: IFFALSE 23607
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23510: LD_EXP 92
23514: PUSH
23515: LD_VAR 0 6
23519: ARRAY
23520: PUSH
23521: LD_VAR 0 5
23525: ARRAY
23526: PUSH
23527: LD_INT 1
23529: ARRAY
23530: PPUSH
23531: LD_EXP 92
23535: PUSH
23536: LD_VAR 0 6
23540: ARRAY
23541: PUSH
23542: LD_VAR 0 5
23546: ARRAY
23547: PUSH
23548: LD_INT 2
23550: ARRAY
23551: PPUSH
23552: LD_VAR 0 1
23556: PPUSH
23557: CALL_OW 255
23561: PPUSH
23562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23566: LD_ADDR_EXP 92
23570: PUSH
23571: LD_EXP 92
23575: PPUSH
23576: LD_VAR 0 6
23580: PPUSH
23581: LD_EXP 92
23585: PUSH
23586: LD_VAR 0 6
23590: ARRAY
23591: PPUSH
23592: LD_VAR 0 5
23596: PPUSH
23597: CALL_OW 3
23601: PPUSH
23602: CALL_OW 1
23606: ST_TO_ADDR
// end ; end ;
23607: GO 23445
23609: POP
23610: POP
// end ;
23611: LD_VAR 0 4
23615: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
23621: PPUSH
23622: PPUSH
23623: PPUSH
23624: PPUSH
23625: PPUSH
23626: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23627: LD_VAR 0 1
23631: PPUSH
23632: CALL_OW 264
23636: PUSH
23637: LD_INT 81
23639: EQUAL
23640: NOT
23641: PUSH
23642: LD_VAR 0 1
23646: PUSH
23647: LD_EXP 91
23651: IN
23652: NOT
23653: OR
23654: IFFALSE 23658
// exit ;
23656: GO 23980
// index := GetElementIndex ( minersList , unit ) ;
23658: LD_ADDR_VAR 0 6
23662: PUSH
23663: LD_EXP 91
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: CALL 29327 0 2
23677: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23678: LD_ADDR_VAR 0 8
23682: PUSH
23683: LD_EXP 93
23687: PUSH
23688: LD_EXP 92
23692: PUSH
23693: LD_VAR 0 6
23697: ARRAY
23698: MINUS
23699: ST_TO_ADDR
// if not minesFreeAmount then
23700: LD_VAR 0 8
23704: NOT
23705: IFFALSE 23709
// exit ;
23707: GO 23980
// tmp := [ ] ;
23709: LD_ADDR_VAR 0 7
23713: PUSH
23714: EMPTY
23715: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23716: LD_ADDR_VAR 0 5
23720: PUSH
23721: DOUBLE
23722: LD_INT 1
23724: DEC
23725: ST_TO_ADDR
23726: LD_VAR 0 8
23730: PUSH
23731: FOR_TO
23732: IFFALSE 23927
// begin _d := rand ( 0 , 5 ) ;
23734: LD_ADDR_VAR 0 11
23738: PUSH
23739: LD_INT 0
23741: PPUSH
23742: LD_INT 5
23744: PPUSH
23745: CALL_OW 12
23749: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23750: LD_ADDR_VAR 0 12
23754: PUSH
23755: LD_INT 2
23757: PPUSH
23758: LD_INT 6
23760: PPUSH
23761: CALL_OW 12
23765: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23766: LD_ADDR_VAR 0 9
23770: PUSH
23771: LD_VAR 0 2
23775: PPUSH
23776: LD_VAR 0 11
23780: PPUSH
23781: LD_VAR 0 12
23785: PPUSH
23786: CALL_OW 272
23790: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23791: LD_ADDR_VAR 0 10
23795: PUSH
23796: LD_VAR 0 3
23800: PPUSH
23801: LD_VAR 0 11
23805: PPUSH
23806: LD_VAR 0 12
23810: PPUSH
23811: CALL_OW 273
23815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23816: LD_VAR 0 9
23820: PPUSH
23821: LD_VAR 0 10
23825: PPUSH
23826: CALL_OW 488
23830: PUSH
23831: LD_VAR 0 9
23835: PUSH
23836: LD_VAR 0 10
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_VAR 0 7
23849: IN
23850: NOT
23851: AND
23852: PUSH
23853: LD_VAR 0 9
23857: PPUSH
23858: LD_VAR 0 10
23862: PPUSH
23863: CALL_OW 458
23867: NOT
23868: AND
23869: IFFALSE 23911
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23871: LD_ADDR_VAR 0 7
23875: PUSH
23876: LD_VAR 0 7
23880: PPUSH
23881: LD_VAR 0 7
23885: PUSH
23886: LD_INT 1
23888: PLUS
23889: PPUSH
23890: LD_VAR 0 9
23894: PUSH
23895: LD_VAR 0 10
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 1
23908: ST_TO_ADDR
23909: GO 23925
// i := i - 1 ;
23911: LD_ADDR_VAR 0 5
23915: PUSH
23916: LD_VAR 0 5
23920: PUSH
23921: LD_INT 1
23923: MINUS
23924: ST_TO_ADDR
// end ;
23925: GO 23731
23927: POP
23928: POP
// for i in tmp do
23929: LD_ADDR_VAR 0 5
23933: PUSH
23934: LD_VAR 0 7
23938: PUSH
23939: FOR_IN
23940: IFFALSE 23978
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23942: LD_VAR 0 1
23946: PPUSH
23947: LD_VAR 0 5
23951: PUSH
23952: LD_INT 1
23954: ARRAY
23955: PPUSH
23956: LD_VAR 0 5
23960: PUSH
23961: LD_INT 2
23963: ARRAY
23964: PPUSH
23965: CALL 22924 0 3
23969: NOT
23970: IFFALSE 23976
// exit ;
23972: POP
23973: POP
23974: GO 23980
23976: GO 23939
23978: POP
23979: POP
// end ;
23980: LD_VAR 0 4
23984: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23985: LD_INT 0
23987: PPUSH
23988: PPUSH
23989: PPUSH
23990: PPUSH
23991: PPUSH
23992: PPUSH
23993: PPUSH
// if not GetClass ( unit ) = class_sniper then
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 257
24003: PUSH
24004: LD_INT 5
24006: EQUAL
24007: NOT
24008: IFFALSE 24012
// exit ;
24010: GO 24400
// dist := 8 ;
24012: LD_ADDR_VAR 0 5
24016: PUSH
24017: LD_INT 8
24019: ST_TO_ADDR
// viewRange := 12 ;
24020: LD_ADDR_VAR 0 7
24024: PUSH
24025: LD_INT 12
24027: ST_TO_ADDR
// side := GetSide ( unit ) ;
24028: LD_ADDR_VAR 0 6
24032: PUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 255
24042: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24043: LD_INT 61
24045: PPUSH
24046: LD_VAR 0 6
24050: PPUSH
24051: CALL_OW 321
24055: PUSH
24056: LD_INT 2
24058: EQUAL
24059: IFFALSE 24069
// viewRange := 16 ;
24061: LD_ADDR_VAR 0 7
24065: PUSH
24066: LD_INT 16
24068: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24069: LD_VAR 0 1
24073: PPUSH
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_VAR 0 3
24083: PPUSH
24084: CALL_OW 297
24088: PUSH
24089: LD_VAR 0 5
24093: GREATER
24094: IFFALSE 24173
// begin ComMoveXY ( unit , x , y ) ;
24096: LD_VAR 0 1
24100: PPUSH
24101: LD_VAR 0 2
24105: PPUSH
24106: LD_VAR 0 3
24110: PPUSH
24111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24115: LD_INT 35
24117: PPUSH
24118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24122: LD_VAR 0 1
24126: PPUSH
24127: LD_VAR 0 2
24131: PPUSH
24132: LD_VAR 0 3
24136: PPUSH
24137: CALL 60590 0 3
24141: NOT
24142: IFFALSE 24146
// exit ;
24144: GO 24400
// until GetDistUnitXY ( unit , x , y ) < dist ;
24146: LD_VAR 0 1
24150: PPUSH
24151: LD_VAR 0 2
24155: PPUSH
24156: LD_VAR 0 3
24160: PPUSH
24161: CALL_OW 297
24165: PUSH
24166: LD_VAR 0 5
24170: LESS
24171: IFFALSE 24115
// end ; ComTurnXY ( unit , x , y ) ;
24173: LD_VAR 0 1
24177: PPUSH
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_VAR 0 3
24187: PPUSH
24188: CALL_OW 118
// wait ( 5 ) ;
24192: LD_INT 5
24194: PPUSH
24195: CALL_OW 67
// _d := GetDir ( unit ) ;
24199: LD_ADDR_VAR 0 10
24203: PUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 254
24213: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24214: LD_ADDR_VAR 0 8
24218: PUSH
24219: LD_VAR 0 1
24223: PPUSH
24224: CALL_OW 250
24228: PPUSH
24229: LD_VAR 0 10
24233: PPUSH
24234: LD_VAR 0 5
24238: PPUSH
24239: CALL_OW 272
24243: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24244: LD_ADDR_VAR 0 9
24248: PUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 251
24258: PPUSH
24259: LD_VAR 0 10
24263: PPUSH
24264: LD_VAR 0 5
24268: PPUSH
24269: CALL_OW 273
24273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24274: LD_VAR 0 8
24278: PPUSH
24279: LD_VAR 0 9
24283: PPUSH
24284: CALL_OW 488
24288: NOT
24289: IFFALSE 24293
// exit ;
24291: GO 24400
// ComAnimCustom ( unit , 1 ) ;
24293: LD_VAR 0 1
24297: PPUSH
24298: LD_INT 1
24300: PPUSH
24301: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24305: LD_VAR 0 8
24309: PPUSH
24310: LD_VAR 0 9
24314: PPUSH
24315: LD_VAR 0 6
24319: PPUSH
24320: LD_VAR 0 7
24324: PPUSH
24325: CALL_OW 330
// repeat wait ( 1 ) ;
24329: LD_INT 1
24331: PPUSH
24332: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24336: LD_VAR 0 1
24340: PPUSH
24341: CALL_OW 316
24345: PUSH
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 314
24355: OR
24356: PUSH
24357: LD_VAR 0 1
24361: PPUSH
24362: CALL_OW 302
24366: NOT
24367: OR
24368: PUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 301
24378: OR
24379: IFFALSE 24329
// RemoveSeeing ( _x , _y , side ) ;
24381: LD_VAR 0 8
24385: PPUSH
24386: LD_VAR 0 9
24390: PPUSH
24391: LD_VAR 0 6
24395: PPUSH
24396: CALL_OW 331
// end ; end_of_file end_of_file
24400: LD_VAR 0 4
24404: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
// if exist_mode then
24409: LD_VAR 0 2
24413: IFFALSE 24438
// unit := CreateCharacter ( prefix & ident ) else
24415: LD_ADDR_VAR 0 5
24419: PUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_VAR 0 1
24429: STR
24430: PPUSH
24431: CALL_OW 34
24435: ST_TO_ADDR
24436: GO 24453
// unit := NewCharacter ( ident ) ;
24438: LD_ADDR_VAR 0 5
24442: PUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 25
24452: ST_TO_ADDR
// result := unit ;
24453: LD_ADDR_VAR 0 4
24457: PUSH
24458: LD_VAR 0 5
24462: ST_TO_ADDR
// end ;
24463: LD_VAR 0 4
24467: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24468: LD_INT 0
24470: PPUSH
24471: PPUSH
// if not side or not nation then
24472: LD_VAR 0 1
24476: NOT
24477: PUSH
24478: LD_VAR 0 2
24482: NOT
24483: OR
24484: IFFALSE 24488
// exit ;
24486: GO 25256
// case nation of nation_american :
24488: LD_VAR 0 2
24492: PUSH
24493: LD_INT 1
24495: DOUBLE
24496: EQUAL
24497: IFTRUE 24501
24499: GO 24715
24501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24502: LD_ADDR_VAR 0 4
24506: PUSH
24507: LD_INT 35
24509: PUSH
24510: LD_INT 45
24512: PUSH
24513: LD_INT 46
24515: PUSH
24516: LD_INT 47
24518: PUSH
24519: LD_INT 82
24521: PUSH
24522: LD_INT 83
24524: PUSH
24525: LD_INT 84
24527: PUSH
24528: LD_INT 85
24530: PUSH
24531: LD_INT 86
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: LD_INT 6
24542: PUSH
24543: LD_INT 15
24545: PUSH
24546: LD_INT 16
24548: PUSH
24549: LD_INT 7
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 10
24560: PUSH
24561: LD_INT 14
24563: PUSH
24564: LD_INT 20
24566: PUSH
24567: LD_INT 21
24569: PUSH
24570: LD_INT 22
24572: PUSH
24573: LD_INT 25
24575: PUSH
24576: LD_INT 32
24578: PUSH
24579: LD_INT 27
24581: PUSH
24582: LD_INT 36
24584: PUSH
24585: LD_INT 69
24587: PUSH
24588: LD_INT 39
24590: PUSH
24591: LD_INT 34
24593: PUSH
24594: LD_INT 40
24596: PUSH
24597: LD_INT 48
24599: PUSH
24600: LD_INT 49
24602: PUSH
24603: LD_INT 50
24605: PUSH
24606: LD_INT 51
24608: PUSH
24609: LD_INT 52
24611: PUSH
24612: LD_INT 53
24614: PUSH
24615: LD_INT 54
24617: PUSH
24618: LD_INT 55
24620: PUSH
24621: LD_INT 56
24623: PUSH
24624: LD_INT 57
24626: PUSH
24627: LD_INT 58
24629: PUSH
24630: LD_INT 59
24632: PUSH
24633: LD_INT 60
24635: PUSH
24636: LD_INT 61
24638: PUSH
24639: LD_INT 62
24641: PUSH
24642: LD_INT 80
24644: PUSH
24645: LD_INT 82
24647: PUSH
24648: LD_INT 83
24650: PUSH
24651: LD_INT 84
24653: PUSH
24654: LD_INT 85
24656: PUSH
24657: LD_INT 86
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 25180
24715: LD_INT 2
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24949
24723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24724: LD_ADDR_VAR 0 4
24728: PUSH
24729: LD_INT 35
24731: PUSH
24732: LD_INT 45
24734: PUSH
24735: LD_INT 46
24737: PUSH
24738: LD_INT 47
24740: PUSH
24741: LD_INT 82
24743: PUSH
24744: LD_INT 83
24746: PUSH
24747: LD_INT 84
24749: PUSH
24750: LD_INT 85
24752: PUSH
24753: LD_INT 87
24755: PUSH
24756: LD_INT 70
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: LD_INT 11
24764: PUSH
24765: LD_INT 3
24767: PUSH
24768: LD_INT 4
24770: PUSH
24771: LD_INT 5
24773: PUSH
24774: LD_INT 6
24776: PUSH
24777: LD_INT 15
24779: PUSH
24780: LD_INT 18
24782: PUSH
24783: LD_INT 7
24785: PUSH
24786: LD_INT 17
24788: PUSH
24789: LD_INT 8
24791: PUSH
24792: LD_INT 20
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_INT 72
24803: PUSH
24804: LD_INT 26
24806: PUSH
24807: LD_INT 69
24809: PUSH
24810: LD_INT 39
24812: PUSH
24813: LD_INT 40
24815: PUSH
24816: LD_INT 41
24818: PUSH
24819: LD_INT 42
24821: PUSH
24822: LD_INT 43
24824: PUSH
24825: LD_INT 48
24827: PUSH
24828: LD_INT 49
24830: PUSH
24831: LD_INT 50
24833: PUSH
24834: LD_INT 51
24836: PUSH
24837: LD_INT 52
24839: PUSH
24840: LD_INT 53
24842: PUSH
24843: LD_INT 54
24845: PUSH
24846: LD_INT 55
24848: PUSH
24849: LD_INT 56
24851: PUSH
24852: LD_INT 60
24854: PUSH
24855: LD_INT 61
24857: PUSH
24858: LD_INT 62
24860: PUSH
24861: LD_INT 66
24863: PUSH
24864: LD_INT 67
24866: PUSH
24867: LD_INT 68
24869: PUSH
24870: LD_INT 81
24872: PUSH
24873: LD_INT 82
24875: PUSH
24876: LD_INT 83
24878: PUSH
24879: LD_INT 84
24881: PUSH
24882: LD_INT 85
24884: PUSH
24885: LD_INT 87
24887: PUSH
24888: LD_INT 88
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25180
24949: LD_INT 3
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 25179
24957: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24958: LD_ADDR_VAR 0 4
24962: PUSH
24963: LD_INT 46
24965: PUSH
24966: LD_INT 47
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: LD_INT 82
24977: PUSH
24978: LD_INT 83
24980: PUSH
24981: LD_INT 84
24983: PUSH
24984: LD_INT 85
24986: PUSH
24987: LD_INT 86
24989: PUSH
24990: LD_INT 11
24992: PUSH
24993: LD_INT 9
24995: PUSH
24996: LD_INT 20
24998: PUSH
24999: LD_INT 19
25001: PUSH
25002: LD_INT 21
25004: PUSH
25005: LD_INT 24
25007: PUSH
25008: LD_INT 22
25010: PUSH
25011: LD_INT 25
25013: PUSH
25014: LD_INT 28
25016: PUSH
25017: LD_INT 29
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 31
25025: PUSH
25026: LD_INT 37
25028: PUSH
25029: LD_INT 38
25031: PUSH
25032: LD_INT 32
25034: PUSH
25035: LD_INT 27
25037: PUSH
25038: LD_INT 33
25040: PUSH
25041: LD_INT 69
25043: PUSH
25044: LD_INT 39
25046: PUSH
25047: LD_INT 34
25049: PUSH
25050: LD_INT 40
25052: PUSH
25053: LD_INT 71
25055: PUSH
25056: LD_INT 23
25058: PUSH
25059: LD_INT 44
25061: PUSH
25062: LD_INT 48
25064: PUSH
25065: LD_INT 49
25067: PUSH
25068: LD_INT 50
25070: PUSH
25071: LD_INT 51
25073: PUSH
25074: LD_INT 52
25076: PUSH
25077: LD_INT 53
25079: PUSH
25080: LD_INT 54
25082: PUSH
25083: LD_INT 55
25085: PUSH
25086: LD_INT 56
25088: PUSH
25089: LD_INT 57
25091: PUSH
25092: LD_INT 58
25094: PUSH
25095: LD_INT 59
25097: PUSH
25098: LD_INT 63
25100: PUSH
25101: LD_INT 64
25103: PUSH
25104: LD_INT 65
25106: PUSH
25107: LD_INT 82
25109: PUSH
25110: LD_INT 83
25112: PUSH
25113: LD_INT 84
25115: PUSH
25116: LD_INT 85
25118: PUSH
25119: LD_INT 86
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: ST_TO_ADDR
25177: GO 25180
25179: POP
// if state > - 1 and state < 3 then
25180: LD_VAR 0 3
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: GREATER
25189: PUSH
25190: LD_VAR 0 3
25194: PUSH
25195: LD_INT 3
25197: LESS
25198: AND
25199: IFFALSE 25256
// for i in result do
25201: LD_ADDR_VAR 0 5
25205: PUSH
25206: LD_VAR 0 4
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25254
// if GetTech ( i , side ) <> state then
25214: LD_VAR 0 5
25218: PPUSH
25219: LD_VAR 0 1
25223: PPUSH
25224: CALL_OW 321
25228: PUSH
25229: LD_VAR 0 3
25233: NONEQUAL
25234: IFFALSE 25252
// result := result diff i ;
25236: LD_ADDR_VAR 0 4
25240: PUSH
25241: LD_VAR 0 4
25245: PUSH
25246: LD_VAR 0 5
25250: DIFF
25251: ST_TO_ADDR
25252: GO 25211
25254: POP
25255: POP
// end ;
25256: LD_VAR 0 4
25260: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25261: LD_INT 0
25263: PPUSH
25264: PPUSH
25265: PPUSH
// result := true ;
25266: LD_ADDR_VAR 0 3
25270: PUSH
25271: LD_INT 1
25273: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25274: LD_ADDR_VAR 0 5
25278: PUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 480
25288: ST_TO_ADDR
// if not tmp then
25289: LD_VAR 0 5
25293: NOT
25294: IFFALSE 25298
// exit ;
25296: GO 25347
// for i in tmp do
25298: LD_ADDR_VAR 0 4
25302: PUSH
25303: LD_VAR 0 5
25307: PUSH
25308: FOR_IN
25309: IFFALSE 25345
// if GetTech ( i , side ) <> state_researched then
25311: LD_VAR 0 4
25315: PPUSH
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 321
25325: PUSH
25326: LD_INT 2
25328: NONEQUAL
25329: IFFALSE 25343
// begin result := false ;
25331: LD_ADDR_VAR 0 3
25335: PUSH
25336: LD_INT 0
25338: ST_TO_ADDR
// exit ;
25339: POP
25340: POP
25341: GO 25347
// end ;
25343: GO 25308
25345: POP
25346: POP
// end ;
25347: LD_VAR 0 3
25351: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25367: LD_VAR 0 1
25371: NOT
25372: PUSH
25373: LD_VAR 0 1
25377: PPUSH
25378: CALL_OW 257
25382: PUSH
25383: LD_INT 9
25385: NONEQUAL
25386: OR
25387: IFFALSE 25391
// exit ;
25389: GO 25964
// side := GetSide ( unit ) ;
25391: LD_ADDR_VAR 0 9
25395: PUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 255
25405: ST_TO_ADDR
// tech_space := tech_spacanom ;
25406: LD_ADDR_VAR 0 12
25410: PUSH
25411: LD_INT 29
25413: ST_TO_ADDR
// tech_time := tech_taurad ;
25414: LD_ADDR_VAR 0 13
25418: PUSH
25419: LD_INT 28
25421: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25422: LD_ADDR_VAR 0 11
25426: PUSH
25427: LD_VAR 0 1
25431: PPUSH
25432: CALL_OW 310
25436: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25437: LD_VAR 0 11
25441: PPUSH
25442: CALL_OW 247
25446: PUSH
25447: LD_INT 2
25449: EQUAL
25450: IFFALSE 25454
// exit ;
25452: GO 25964
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25454: LD_ADDR_VAR 0 8
25458: PUSH
25459: LD_INT 81
25461: PUSH
25462: LD_VAR 0 9
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: LD_INT 21
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PPUSH
25492: CALL_OW 69
25496: ST_TO_ADDR
// if not tmp then
25497: LD_VAR 0 8
25501: NOT
25502: IFFALSE 25506
// exit ;
25504: GO 25964
// if in_unit then
25506: LD_VAR 0 11
25510: IFFALSE 25534
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25512: LD_ADDR_VAR 0 10
25516: PUSH
25517: LD_VAR 0 8
25521: PPUSH
25522: LD_VAR 0 11
25526: PPUSH
25527: CALL_OW 74
25531: ST_TO_ADDR
25532: GO 25554
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25534: LD_ADDR_VAR 0 10
25538: PUSH
25539: LD_VAR 0 8
25543: PPUSH
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 74
25553: ST_TO_ADDR
// if not enemy then
25554: LD_VAR 0 10
25558: NOT
25559: IFFALSE 25563
// exit ;
25561: GO 25964
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25563: LD_VAR 0 11
25567: PUSH
25568: LD_VAR 0 11
25572: PPUSH
25573: LD_VAR 0 10
25577: PPUSH
25578: CALL_OW 296
25582: PUSH
25583: LD_INT 13
25585: GREATER
25586: AND
25587: PUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_VAR 0 10
25597: PPUSH
25598: CALL_OW 296
25602: PUSH
25603: LD_INT 12
25605: GREATER
25606: OR
25607: IFFALSE 25611
// exit ;
25609: GO 25964
// missile := [ 1 ] ;
25611: LD_ADDR_VAR 0 14
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25622: LD_VAR 0 9
25626: PPUSH
25627: LD_VAR 0 12
25631: PPUSH
25632: CALL_OW 325
25636: IFFALSE 25665
// missile := Replace ( missile , missile + 1 , 2 ) ;
25638: LD_ADDR_VAR 0 14
25642: PUSH
25643: LD_VAR 0 14
25647: PPUSH
25648: LD_VAR 0 14
25652: PUSH
25653: LD_INT 1
25655: PLUS
25656: PPUSH
25657: LD_INT 2
25659: PPUSH
25660: CALL_OW 1
25664: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25665: LD_VAR 0 9
25669: PPUSH
25670: LD_VAR 0 13
25674: PPUSH
25675: CALL_OW 325
25679: PUSH
25680: LD_VAR 0 10
25684: PPUSH
25685: CALL_OW 255
25689: PPUSH
25690: LD_VAR 0 13
25694: PPUSH
25695: CALL_OW 325
25699: NOT
25700: AND
25701: IFFALSE 25730
// missile := Replace ( missile , missile + 1 , 3 ) ;
25703: LD_ADDR_VAR 0 14
25707: PUSH
25708: LD_VAR 0 14
25712: PPUSH
25713: LD_VAR 0 14
25717: PUSH
25718: LD_INT 1
25720: PLUS
25721: PPUSH
25722: LD_INT 3
25724: PPUSH
25725: CALL_OW 1
25729: ST_TO_ADDR
// if missile < 2 then
25730: LD_VAR 0 14
25734: PUSH
25735: LD_INT 2
25737: LESS
25738: IFFALSE 25742
// exit ;
25740: GO 25964
// x := GetX ( enemy ) ;
25742: LD_ADDR_VAR 0 4
25746: PUSH
25747: LD_VAR 0 10
25751: PPUSH
25752: CALL_OW 250
25756: ST_TO_ADDR
// y := GetY ( enemy ) ;
25757: LD_ADDR_VAR 0 5
25761: PUSH
25762: LD_VAR 0 10
25766: PPUSH
25767: CALL_OW 251
25771: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25772: LD_ADDR_VAR 0 6
25776: PUSH
25777: LD_VAR 0 4
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 12
25793: PLUS
25794: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25795: LD_ADDR_VAR 0 7
25799: PUSH
25800: LD_VAR 0 5
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PPUSH
25809: LD_INT 1
25811: PPUSH
25812: CALL_OW 12
25816: PLUS
25817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25818: LD_VAR 0 6
25822: PPUSH
25823: LD_VAR 0 7
25827: PPUSH
25828: CALL_OW 488
25832: NOT
25833: IFFALSE 25855
// begin _x := x ;
25835: LD_ADDR_VAR 0 6
25839: PUSH
25840: LD_VAR 0 4
25844: ST_TO_ADDR
// _y := y ;
25845: LD_ADDR_VAR 0 7
25849: PUSH
25850: LD_VAR 0 5
25854: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25855: LD_ADDR_VAR 0 3
25859: PUSH
25860: LD_INT 1
25862: PPUSH
25863: LD_VAR 0 14
25867: PPUSH
25868: CALL_OW 12
25872: ST_TO_ADDR
// case i of 1 :
25873: LD_VAR 0 3
25877: PUSH
25878: LD_INT 1
25880: DOUBLE
25881: EQUAL
25882: IFTRUE 25886
25884: GO 25903
25886: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_VAR 0 10
25896: PPUSH
25897: CALL_OW 115
25901: GO 25964
25903: LD_INT 2
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 25933
25911: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_VAR 0 6
25921: PPUSH
25922: LD_VAR 0 7
25926: PPUSH
25927: CALL_OW 153
25931: GO 25964
25933: LD_INT 3
25935: DOUBLE
25936: EQUAL
25937: IFTRUE 25941
25939: GO 25963
25941: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25942: LD_VAR 0 1
25946: PPUSH
25947: LD_VAR 0 6
25951: PPUSH
25952: LD_VAR 0 7
25956: PPUSH
25957: CALL_OW 154
25961: GO 25964
25963: POP
// end ;
25964: LD_VAR 0 2
25968: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25969: LD_INT 0
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
// if not unit or not building then
25977: LD_VAR 0 1
25981: NOT
25982: PUSH
25983: LD_VAR 0 2
25987: NOT
25988: OR
25989: IFFALSE 25993
// exit ;
25991: GO 26151
// x := GetX ( building ) ;
25993: LD_ADDR_VAR 0 5
25997: PUSH
25998: LD_VAR 0 2
26002: PPUSH
26003: CALL_OW 250
26007: ST_TO_ADDR
// y := GetY ( building ) ;
26008: LD_ADDR_VAR 0 6
26012: PUSH
26013: LD_VAR 0 2
26017: PPUSH
26018: CALL_OW 251
26022: ST_TO_ADDR
// for i = 0 to 5 do
26023: LD_ADDR_VAR 0 4
26027: PUSH
26028: DOUBLE
26029: LD_INT 0
26031: DEC
26032: ST_TO_ADDR
26033: LD_INT 5
26035: PUSH
26036: FOR_TO
26037: IFFALSE 26149
// begin _x := ShiftX ( x , i , 3 ) ;
26039: LD_ADDR_VAR 0 7
26043: PUSH
26044: LD_VAR 0 5
26048: PPUSH
26049: LD_VAR 0 4
26053: PPUSH
26054: LD_INT 3
26056: PPUSH
26057: CALL_OW 272
26061: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26062: LD_ADDR_VAR 0 8
26066: PUSH
26067: LD_VAR 0 6
26071: PPUSH
26072: LD_VAR 0 4
26076: PPUSH
26077: LD_INT 3
26079: PPUSH
26080: CALL_OW 273
26084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26085: LD_VAR 0 7
26089: PPUSH
26090: LD_VAR 0 8
26094: PPUSH
26095: CALL_OW 488
26099: NOT
26100: IFFALSE 26104
// continue ;
26102: GO 26036
// if HexInfo ( _x , _y ) = 0 then
26104: LD_VAR 0 7
26108: PPUSH
26109: LD_VAR 0 8
26113: PPUSH
26114: CALL_OW 428
26118: PUSH
26119: LD_INT 0
26121: EQUAL
26122: IFFALSE 26147
// begin ComMoveXY ( unit , _x , _y ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_VAR 0 7
26133: PPUSH
26134: LD_VAR 0 8
26138: PPUSH
26139: CALL_OW 111
// exit ;
26143: POP
26144: POP
26145: GO 26151
// end ; end ;
26147: GO 26036
26149: POP
26150: POP
// end ;
26151: LD_VAR 0 3
26155: RET
// export function ScanBase ( side , base_area ) ; begin
26156: LD_INT 0
26158: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26159: LD_ADDR_VAR 0 3
26163: PUSH
26164: LD_VAR 0 2
26168: PPUSH
26169: LD_INT 81
26171: PUSH
26172: LD_VAR 0 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL_OW 70
26185: ST_TO_ADDR
// end ;
26186: LD_VAR 0 3
26190: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26191: LD_INT 0
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
// result := false ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 0
26204: ST_TO_ADDR
// side := GetSide ( unit ) ;
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_VAR 0 1
26214: PPUSH
26215: CALL_OW 255
26219: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26220: LD_ADDR_VAR 0 4
26224: PUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 248
26234: ST_TO_ADDR
// case nat of 1 :
26235: LD_VAR 0 4
26239: PUSH
26240: LD_INT 1
26242: DOUBLE
26243: EQUAL
26244: IFTRUE 26248
26246: GO 26259
26248: POP
// tech := tech_lassight ; 2 :
26249: LD_ADDR_VAR 0 5
26253: PUSH
26254: LD_INT 12
26256: ST_TO_ADDR
26257: GO 26298
26259: LD_INT 2
26261: DOUBLE
26262: EQUAL
26263: IFTRUE 26267
26265: GO 26278
26267: POP
// tech := tech_mortar ; 3 :
26268: LD_ADDR_VAR 0 5
26272: PUSH
26273: LD_INT 41
26275: ST_TO_ADDR
26276: GO 26298
26278: LD_INT 3
26280: DOUBLE
26281: EQUAL
26282: IFTRUE 26286
26284: GO 26297
26286: POP
// tech := tech_bazooka ; end ;
26287: LD_ADDR_VAR 0 5
26291: PUSH
26292: LD_INT 44
26294: ST_TO_ADDR
26295: GO 26298
26297: POP
// if Researched ( side , tech ) then
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_VAR 0 5
26307: PPUSH
26308: CALL_OW 325
26312: IFFALSE 26339
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26314: LD_ADDR_VAR 0 2
26318: PUSH
26319: LD_INT 5
26321: PUSH
26322: LD_INT 8
26324: PUSH
26325: LD_INT 9
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: LIST
26332: PUSH
26333: LD_VAR 0 4
26337: ARRAY
26338: ST_TO_ADDR
// end ;
26339: LD_VAR 0 2
26343: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26344: LD_INT 0
26346: PPUSH
26347: PPUSH
26348: PPUSH
// if not mines then
26349: LD_VAR 0 2
26353: NOT
26354: IFFALSE 26358
// exit ;
26356: GO 26502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26358: LD_ADDR_VAR 0 5
26362: PUSH
26363: LD_INT 81
26365: PUSH
26366: LD_VAR 0 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: LD_INT 21
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PPUSH
26396: CALL_OW 69
26400: ST_TO_ADDR
// for i in mines do
26401: LD_ADDR_VAR 0 4
26405: PUSH
26406: LD_VAR 0 2
26410: PUSH
26411: FOR_IN
26412: IFFALSE 26500
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26414: LD_VAR 0 4
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: LD_VAR 0 4
26427: PUSH
26428: LD_INT 2
26430: ARRAY
26431: PPUSH
26432: CALL_OW 458
26436: NOT
26437: IFFALSE 26441
// continue ;
26439: GO 26411
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26441: LD_VAR 0 4
26445: PUSH
26446: LD_INT 1
26448: ARRAY
26449: PPUSH
26450: LD_VAR 0 4
26454: PUSH
26455: LD_INT 2
26457: ARRAY
26458: PPUSH
26459: CALL_OW 428
26463: PUSH
26464: LD_VAR 0 5
26468: IN
26469: IFFALSE 26498
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26471: LD_VAR 0 4
26475: PUSH
26476: LD_INT 1
26478: ARRAY
26479: PPUSH
26480: LD_VAR 0 4
26484: PUSH
26485: LD_INT 2
26487: ARRAY
26488: PPUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL_OW 456
// end ;
26498: GO 26411
26500: POP
26501: POP
// end ;
26502: LD_VAR 0 3
26506: RET
// export function Count ( array ) ; var i ; begin
26507: LD_INT 0
26509: PPUSH
26510: PPUSH
// result := 0 ;
26511: LD_ADDR_VAR 0 2
26515: PUSH
26516: LD_INT 0
26518: ST_TO_ADDR
// for i in array do
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_VAR 0 1
26528: PUSH
26529: FOR_IN
26530: IFFALSE 26554
// if i then
26532: LD_VAR 0 3
26536: IFFALSE 26552
// result := result + 1 ;
26538: LD_ADDR_VAR 0 2
26542: PUSH
26543: LD_VAR 0 2
26547: PUSH
26548: LD_INT 1
26550: PLUS
26551: ST_TO_ADDR
26552: GO 26529
26554: POP
26555: POP
// end ;
26556: LD_VAR 0 2
26560: RET
// export function IsEmpty ( building ) ; begin
26561: LD_INT 0
26563: PPUSH
// if not building then
26564: LD_VAR 0 1
26568: NOT
26569: IFFALSE 26573
// exit ;
26571: GO 26616
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26573: LD_ADDR_VAR 0 2
26577: PUSH
26578: LD_VAR 0 1
26582: PUSH
26583: LD_INT 22
26585: PUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL_OW 255
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 58
26602: PUSH
26603: EMPTY
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: IN
26615: ST_TO_ADDR
// end ;
26616: LD_VAR 0 2
26620: RET
// export function IsNotFull ( building ) ; var places ; begin
26621: LD_INT 0
26623: PPUSH
26624: PPUSH
// if not building then
26625: LD_VAR 0 1
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26805
// result := false ;
26634: LD_ADDR_VAR 0 2
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// places := 0 ;
26642: LD_ADDR_VAR 0 3
26646: PUSH
26647: LD_INT 0
26649: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL_OW 266
26659: PUSH
26660: LD_INT 0
26662: DOUBLE
26663: EQUAL
26664: IFTRUE 26722
26666: LD_INT 1
26668: DOUBLE
26669: EQUAL
26670: IFTRUE 26722
26672: LD_INT 6
26674: DOUBLE
26675: EQUAL
26676: IFTRUE 26722
26678: LD_INT 7
26680: DOUBLE
26681: EQUAL
26682: IFTRUE 26722
26684: LD_INT 8
26686: DOUBLE
26687: EQUAL
26688: IFTRUE 26722
26690: LD_INT 4
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26722
26696: LD_INT 5
26698: DOUBLE
26699: EQUAL
26700: IFTRUE 26722
26702: LD_INT 2
26704: DOUBLE
26705: EQUAL
26706: IFTRUE 26722
26708: LD_INT 3
26710: DOUBLE
26711: EQUAL
26712: IFTRUE 26722
26714: LD_INT 35
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26733
26722: POP
// places := 6 ; b_bunker , b_breastwork :
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_INT 6
26730: ST_TO_ADDR
26731: GO 26778
26733: LD_INT 32
26735: DOUBLE
26736: EQUAL
26737: IFTRUE 26747
26739: LD_INT 31
26741: DOUBLE
26742: EQUAL
26743: IFTRUE 26747
26745: GO 26758
26747: POP
// places := 1 ; b_control_tower :
26748: LD_ADDR_VAR 0 3
26752: PUSH
26753: LD_INT 1
26755: ST_TO_ADDR
26756: GO 26778
26758: LD_INT 36
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26777
26766: POP
// places := 3 ; end ;
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_INT 3
26774: ST_TO_ADDR
26775: GO 26778
26777: POP
// if places then
26778: LD_VAR 0 3
26782: IFFALSE 26805
// result := UnitsInside ( building ) < places ;
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL_OW 313
26798: PUSH
26799: LD_VAR 0 3
26803: LESS
26804: ST_TO_ADDR
// end ;
26805: LD_VAR 0 2
26809: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26810: LD_INT 0
26812: PPUSH
26813: PPUSH
26814: PPUSH
26815: PPUSH
// tmp := [ ] ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: EMPTY
26822: ST_TO_ADDR
// list := [ ] ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: EMPTY
26829: ST_TO_ADDR
// for i = 16 to 25 do
26830: LD_ADDR_VAR 0 4
26834: PUSH
26835: DOUBLE
26836: LD_INT 16
26838: DEC
26839: ST_TO_ADDR
26840: LD_INT 25
26842: PUSH
26843: FOR_TO
26844: IFFALSE 26917
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26846: LD_ADDR_VAR 0 3
26850: PUSH
26851: LD_VAR 0 3
26855: PUSH
26856: LD_INT 22
26858: PUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 255
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 91
26875: PUSH
26876: LD_VAR 0 1
26880: PUSH
26881: LD_INT 6
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 30
26891: PUSH
26892: LD_VAR 0 4
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ADD
26914: ST_TO_ADDR
26915: GO 26843
26917: POP
26918: POP
// for i = 1 to tmp do
26919: LD_ADDR_VAR 0 4
26923: PUSH
26924: DOUBLE
26925: LD_INT 1
26927: DEC
26928: ST_TO_ADDR
26929: LD_VAR 0 3
26933: PUSH
26934: FOR_TO
26935: IFFALSE 27023
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26937: LD_ADDR_VAR 0 5
26941: PUSH
26942: LD_VAR 0 5
26946: PUSH
26947: LD_VAR 0 3
26951: PUSH
26952: LD_VAR 0 4
26956: ARRAY
26957: PPUSH
26958: CALL_OW 266
26962: PUSH
26963: LD_VAR 0 3
26967: PUSH
26968: LD_VAR 0 4
26972: ARRAY
26973: PPUSH
26974: CALL_OW 250
26978: PUSH
26979: LD_VAR 0 3
26983: PUSH
26984: LD_VAR 0 4
26988: ARRAY
26989: PPUSH
26990: CALL_OW 251
26994: PUSH
26995: LD_VAR 0 3
26999: PUSH
27000: LD_VAR 0 4
27004: ARRAY
27005: PPUSH
27006: CALL_OW 254
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: PUSH
27017: EMPTY
27018: LIST
27019: ADD
27020: ST_TO_ADDR
27021: GO 26934
27023: POP
27024: POP
// result := list ;
27025: LD_ADDR_VAR 0 2
27029: PUSH
27030: LD_VAR 0 5
27034: ST_TO_ADDR
// end ;
27035: LD_VAR 0 2
27039: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27040: LD_INT 0
27042: PPUSH
27043: PPUSH
27044: PPUSH
27045: PPUSH
27046: PPUSH
27047: PPUSH
27048: PPUSH
// if not factory then
27049: LD_VAR 0 1
27053: NOT
27054: IFFALSE 27058
// exit ;
27056: GO 27651
// if control = control_apeman then
27058: LD_VAR 0 4
27062: PUSH
27063: LD_INT 5
27065: EQUAL
27066: IFFALSE 27175
// begin tmp := UnitsInside ( factory ) ;
27068: LD_ADDR_VAR 0 8
27072: PUSH
27073: LD_VAR 0 1
27077: PPUSH
27078: CALL_OW 313
27082: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27083: LD_VAR 0 8
27087: PPUSH
27088: LD_INT 25
27090: PUSH
27091: LD_INT 12
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 72
27102: NOT
27103: IFFALSE 27113
// control := control_manual ;
27105: LD_ADDR_VAR 0 4
27109: PUSH
27110: LD_INT 1
27112: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27113: LD_ADDR_VAR 0 8
27117: PUSH
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL 26810 0 1
27127: ST_TO_ADDR
// if tmp then
27128: LD_VAR 0 8
27132: IFFALSE 27175
// begin for i in tmp do
27134: LD_ADDR_VAR 0 7
27138: PUSH
27139: LD_VAR 0 8
27143: PUSH
27144: FOR_IN
27145: IFFALSE 27173
// if i [ 1 ] = b_ext_radio then
27147: LD_VAR 0 7
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: PUSH
27156: LD_INT 22
27158: EQUAL
27159: IFFALSE 27171
// begin control := control_remote ;
27161: LD_ADDR_VAR 0 4
27165: PUSH
27166: LD_INT 2
27168: ST_TO_ADDR
// break ;
27169: GO 27173
// end ;
27171: GO 27144
27173: POP
27174: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27175: LD_VAR 0 1
27179: PPUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: LD_VAR 0 3
27189: PPUSH
27190: LD_VAR 0 4
27194: PPUSH
27195: LD_VAR 0 5
27199: PPUSH
27200: CALL_OW 448
27204: IFFALSE 27239
// begin result := [ chassis , engine , control , weapon ] ;
27206: LD_ADDR_VAR 0 6
27210: PUSH
27211: LD_VAR 0 2
27215: PUSH
27216: LD_VAR 0 3
27220: PUSH
27221: LD_VAR 0 4
27225: PUSH
27226: LD_VAR 0 5
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// exit ;
27237: GO 27651
// end ; _chassis := AvailableChassisList ( factory ) ;
27239: LD_ADDR_VAR 0 9
27243: PUSH
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 475
27253: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27254: LD_ADDR_VAR 0 11
27258: PUSH
27259: LD_VAR 0 1
27263: PPUSH
27264: CALL_OW 476
27268: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27269: LD_ADDR_VAR 0 12
27273: PUSH
27274: LD_VAR 0 1
27278: PPUSH
27279: CALL_OW 477
27283: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27284: LD_ADDR_VAR 0 10
27288: PUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 478
27298: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27299: LD_VAR 0 9
27303: NOT
27304: PUSH
27305: LD_VAR 0 11
27309: NOT
27310: OR
27311: PUSH
27312: LD_VAR 0 12
27316: NOT
27317: OR
27318: PUSH
27319: LD_VAR 0 10
27323: NOT
27324: OR
27325: IFFALSE 27360
// begin result := [ chassis , engine , control , weapon ] ;
27327: LD_ADDR_VAR 0 6
27331: PUSH
27332: LD_VAR 0 2
27336: PUSH
27337: LD_VAR 0 3
27341: PUSH
27342: LD_VAR 0 4
27346: PUSH
27347: LD_VAR 0 5
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: ST_TO_ADDR
// exit ;
27358: GO 27651
// end ; if not chassis in _chassis then
27360: LD_VAR 0 2
27364: PUSH
27365: LD_VAR 0 9
27369: IN
27370: NOT
27371: IFFALSE 27397
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27373: LD_ADDR_VAR 0 2
27377: PUSH
27378: LD_VAR 0 9
27382: PUSH
27383: LD_INT 1
27385: PPUSH
27386: LD_VAR 0 9
27390: PPUSH
27391: CALL_OW 12
27395: ARRAY
27396: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27397: LD_VAR 0 2
27401: PPUSH
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL 27656 0 2
27411: NOT
27412: IFFALSE 27471
// repeat engine := _engine [ 1 ] ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_VAR 0 11
27423: PUSH
27424: LD_INT 1
27426: ARRAY
27427: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27428: LD_ADDR_VAR 0 11
27432: PUSH
27433: LD_VAR 0 11
27437: PPUSH
27438: LD_INT 1
27440: PPUSH
27441: CALL_OW 3
27445: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_VAR 0 3
27455: PPUSH
27456: CALL 27656 0 2
27460: PUSH
27461: LD_VAR 0 11
27465: PUSH
27466: EMPTY
27467: EQUAL
27468: OR
27469: IFFALSE 27414
// if not control in _control then
27471: LD_VAR 0 4
27475: PUSH
27476: LD_VAR 0 12
27480: IN
27481: NOT
27482: IFFALSE 27508
// control := _control [ rand ( 1 , _control ) ] ;
27484: LD_ADDR_VAR 0 4
27488: PUSH
27489: LD_VAR 0 12
27493: PUSH
27494: LD_INT 1
27496: PPUSH
27497: LD_VAR 0 12
27501: PPUSH
27502: CALL_OW 12
27506: ARRAY
27507: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27508: LD_VAR 0 2
27512: PPUSH
27513: LD_VAR 0 5
27517: PPUSH
27518: CALL 27876 0 2
27522: NOT
27523: IFFALSE 27582
// repeat weapon := _weapon [ 1 ] ;
27525: LD_ADDR_VAR 0 5
27529: PUSH
27530: LD_VAR 0 10
27534: PUSH
27535: LD_INT 1
27537: ARRAY
27538: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27539: LD_ADDR_VAR 0 10
27543: PUSH
27544: LD_VAR 0 10
27548: PPUSH
27549: LD_INT 1
27551: PPUSH
27552: CALL_OW 3
27556: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27557: LD_VAR 0 2
27561: PPUSH
27562: LD_VAR 0 5
27566: PPUSH
27567: CALL 27876 0 2
27571: PUSH
27572: LD_VAR 0 10
27576: PUSH
27577: EMPTY
27578: EQUAL
27579: OR
27580: IFFALSE 27525
// result := [ ] ;
27582: LD_ADDR_VAR 0 6
27586: PUSH
27587: EMPTY
27588: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27589: LD_VAR 0 1
27593: PPUSH
27594: LD_VAR 0 2
27598: PPUSH
27599: LD_VAR 0 3
27603: PPUSH
27604: LD_VAR 0 4
27608: PPUSH
27609: LD_VAR 0 5
27613: PPUSH
27614: CALL_OW 448
27618: IFFALSE 27651
// result := [ chassis , engine , control , weapon ] ;
27620: LD_ADDR_VAR 0 6
27624: PUSH
27625: LD_VAR 0 2
27629: PUSH
27630: LD_VAR 0 3
27634: PUSH
27635: LD_VAR 0 4
27639: PUSH
27640: LD_VAR 0 5
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
// end ;
27651: LD_VAR 0 6
27655: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27656: LD_INT 0
27658: PPUSH
// if not chassis or not engine then
27659: LD_VAR 0 1
27663: NOT
27664: PUSH
27665: LD_VAR 0 2
27669: NOT
27670: OR
27671: IFFALSE 27675
// exit ;
27673: GO 27871
// case engine of engine_solar :
27675: LD_VAR 0 2
27679: PUSH
27680: LD_INT 2
27682: DOUBLE
27683: EQUAL
27684: IFTRUE 27688
27686: GO 27726
27688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27689: LD_ADDR_VAR 0 3
27693: PUSH
27694: LD_INT 11
27696: PUSH
27697: LD_INT 12
27699: PUSH
27700: LD_INT 13
27702: PUSH
27703: LD_INT 14
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: ST_TO_ADDR
27724: GO 27855
27726: LD_INT 1
27728: DOUBLE
27729: EQUAL
27730: IFTRUE 27734
27732: GO 27796
27734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27735: LD_ADDR_VAR 0 3
27739: PUSH
27740: LD_INT 11
27742: PUSH
27743: LD_INT 12
27745: PUSH
27746: LD_INT 13
27748: PUSH
27749: LD_INT 14
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 3
27760: PUSH
27761: LD_INT 4
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 21
27769: PUSH
27770: LD_INT 23
27772: PUSH
27773: LD_INT 22
27775: PUSH
27776: LD_INT 24
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: ST_TO_ADDR
27794: GO 27855
27796: LD_INT 3
27798: DOUBLE
27799: EQUAL
27800: IFTRUE 27804
27802: GO 27854
27804: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27805: LD_ADDR_VAR 0 3
27809: PUSH
27810: LD_INT 13
27812: PUSH
27813: LD_INT 14
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: LD_INT 4
27824: PUSH
27825: LD_INT 5
27827: PUSH
27828: LD_INT 21
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_INT 23
27836: PUSH
27837: LD_INT 24
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
27852: GO 27855
27854: POP
// result := ( chassis in result ) ;
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_VAR 0 1
27864: PUSH
27865: LD_VAR 0 3
27869: IN
27870: ST_TO_ADDR
// end ;
27871: LD_VAR 0 3
27875: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27876: LD_INT 0
27878: PPUSH
// if not chassis or not weapon then
27879: LD_VAR 0 1
27883: NOT
27884: PUSH
27885: LD_VAR 0 2
27889: NOT
27890: OR
27891: IFFALSE 27895
// exit ;
27893: GO 28955
// case weapon of us_machine_gun :
27895: LD_VAR 0 2
27899: PUSH
27900: LD_INT 2
27902: DOUBLE
27903: EQUAL
27904: IFTRUE 27908
27906: GO 27938
27908: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27909: LD_ADDR_VAR 0 3
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 3
27922: PUSH
27923: LD_INT 4
27925: PUSH
27926: LD_INT 5
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
27936: GO 28939
27938: LD_INT 3
27940: DOUBLE
27941: EQUAL
27942: IFTRUE 27946
27944: GO 27976
27946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27947: LD_ADDR_VAR 0 3
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: LD_INT 5
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
27974: GO 28939
27976: LD_INT 11
27978: DOUBLE
27979: EQUAL
27980: IFTRUE 27984
27982: GO 28014
27984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: LD_INT 4
28001: PUSH
28002: LD_INT 5
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28939
28014: LD_INT 4
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28048
28022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 4
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28939
28048: LD_INT 5
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28082
28056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: LD_INT 4
28070: PUSH
28071: LD_INT 5
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28939
28082: LD_INT 9
28084: DOUBLE
28085: EQUAL
28086: IFTRUE 28090
28088: GO 28116
28090: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 3
28101: PUSH
28102: LD_INT 4
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
28114: GO 28939
28116: LD_INT 7
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28150
28124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 3
28135: PUSH
28136: LD_INT 4
28138: PUSH
28139: LD_INT 5
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
28148: GO 28939
28150: LD_INT 12
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28184
28158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 2
28166: PUSH
28167: LD_INT 3
28169: PUSH
28170: LD_INT 4
28172: PUSH
28173: LD_INT 5
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
28182: GO 28939
28184: LD_INT 13
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28218
28192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 2
28200: PUSH
28201: LD_INT 3
28203: PUSH
28204: LD_INT 4
28206: PUSH
28207: LD_INT 5
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: ST_TO_ADDR
28216: GO 28939
28218: LD_INT 14
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28244
28226: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28227: LD_ADDR_VAR 0 3
28231: PUSH
28232: LD_INT 4
28234: PUSH
28235: LD_INT 5
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: ST_TO_ADDR
28242: GO 28939
28244: LD_INT 6
28246: DOUBLE
28247: EQUAL
28248: IFTRUE 28252
28250: GO 28270
28252: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28253: LD_ADDR_VAR 0 3
28257: PUSH
28258: LD_INT 4
28260: PUSH
28261: LD_INT 5
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: ST_TO_ADDR
28268: GO 28939
28270: LD_INT 10
28272: DOUBLE
28273: EQUAL
28274: IFTRUE 28278
28276: GO 28296
28278: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28279: LD_ADDR_VAR 0 3
28283: PUSH
28284: LD_INT 4
28286: PUSH
28287: LD_INT 5
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: ST_TO_ADDR
28294: GO 28939
28296: LD_INT 22
28298: DOUBLE
28299: EQUAL
28300: IFTRUE 28304
28302: GO 28330
28304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28305: LD_ADDR_VAR 0 3
28309: PUSH
28310: LD_INT 11
28312: PUSH
28313: LD_INT 12
28315: PUSH
28316: LD_INT 13
28318: PUSH
28319: LD_INT 14
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: ST_TO_ADDR
28328: GO 28939
28330: LD_INT 23
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28338
28336: GO 28364
28338: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28339: LD_ADDR_VAR 0 3
28343: PUSH
28344: LD_INT 11
28346: PUSH
28347: LD_INT 12
28349: PUSH
28350: LD_INT 13
28352: PUSH
28353: LD_INT 14
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: ST_TO_ADDR
28362: GO 28939
28364: LD_INT 24
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28372
28370: GO 28398
28372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_INT 11
28380: PUSH
28381: LD_INT 12
28383: PUSH
28384: LD_INT 13
28386: PUSH
28387: LD_INT 14
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: ST_TO_ADDR
28396: GO 28939
28398: LD_INT 30
28400: DOUBLE
28401: EQUAL
28402: IFTRUE 28406
28404: GO 28432
28406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28407: LD_ADDR_VAR 0 3
28411: PUSH
28412: LD_INT 11
28414: PUSH
28415: LD_INT 12
28417: PUSH
28418: LD_INT 13
28420: PUSH
28421: LD_INT 14
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: ST_TO_ADDR
28430: GO 28939
28432: LD_INT 25
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28458
28440: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28441: LD_ADDR_VAR 0 3
28445: PUSH
28446: LD_INT 13
28448: PUSH
28449: LD_INT 14
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: ST_TO_ADDR
28456: GO 28939
28458: LD_INT 27
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 28484
28466: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_INT 13
28474: PUSH
28475: LD_INT 14
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: ST_TO_ADDR
28482: GO 28939
28484: LD_INT 92
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28518
28492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: LD_INT 11
28500: PUSH
28501: LD_INT 12
28503: PUSH
28504: LD_INT 13
28506: PUSH
28507: LD_INT 14
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
28516: GO 28939
28518: LD_INT 28
28520: DOUBLE
28521: EQUAL
28522: IFTRUE 28526
28524: GO 28544
28526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28527: LD_ADDR_VAR 0 3
28531: PUSH
28532: LD_INT 13
28534: PUSH
28535: LD_INT 14
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: ST_TO_ADDR
28542: GO 28939
28544: LD_INT 29
28546: DOUBLE
28547: EQUAL
28548: IFTRUE 28552
28550: GO 28570
28552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28553: LD_ADDR_VAR 0 3
28557: PUSH
28558: LD_INT 13
28560: PUSH
28561: LD_INT 14
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: ST_TO_ADDR
28568: GO 28939
28570: LD_INT 31
28572: DOUBLE
28573: EQUAL
28574: IFTRUE 28578
28576: GO 28596
28578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: LD_INT 13
28586: PUSH
28587: LD_INT 14
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 28939
28596: LD_INT 26
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28622
28604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 13
28612: PUSH
28613: LD_INT 14
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 28939
28622: LD_INT 42
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28656
28630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 21
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_INT 23
28644: PUSH
28645: LD_INT 24
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
28654: GO 28939
28656: LD_INT 43
28658: DOUBLE
28659: EQUAL
28660: IFTRUE 28664
28662: GO 28690
28664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_INT 21
28672: PUSH
28673: LD_INT 22
28675: PUSH
28676: LD_INT 23
28678: PUSH
28679: LD_INT 24
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: ST_TO_ADDR
28688: GO 28939
28690: LD_INT 44
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28724
28698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_INT 21
28706: PUSH
28707: LD_INT 22
28709: PUSH
28710: LD_INT 23
28712: PUSH
28713: LD_INT 24
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
28722: GO 28939
28724: LD_INT 45
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28758
28732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28733: LD_ADDR_VAR 0 3
28737: PUSH
28738: LD_INT 21
28740: PUSH
28741: LD_INT 22
28743: PUSH
28744: LD_INT 23
28746: PUSH
28747: LD_INT 24
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: ST_TO_ADDR
28756: GO 28939
28758: LD_INT 49
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28792
28766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 21
28774: PUSH
28775: LD_INT 22
28777: PUSH
28778: LD_INT 23
28780: PUSH
28781: LD_INT 24
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: ST_TO_ADDR
28790: GO 28939
28792: LD_INT 51
28794: DOUBLE
28795: EQUAL
28796: IFTRUE 28800
28798: GO 28826
28800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28801: LD_ADDR_VAR 0 3
28805: PUSH
28806: LD_INT 21
28808: PUSH
28809: LD_INT 22
28811: PUSH
28812: LD_INT 23
28814: PUSH
28815: LD_INT 24
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
28824: GO 28939
28826: LD_INT 52
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28860
28834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28835: LD_ADDR_VAR 0 3
28839: PUSH
28840: LD_INT 21
28842: PUSH
28843: LD_INT 22
28845: PUSH
28846: LD_INT 23
28848: PUSH
28849: LD_INT 24
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: ST_TO_ADDR
28858: GO 28939
28860: LD_INT 53
28862: DOUBLE
28863: EQUAL
28864: IFTRUE 28868
28866: GO 28886
28868: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: LD_INT 23
28876: PUSH
28877: LD_INT 24
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: ST_TO_ADDR
28884: GO 28939
28886: LD_INT 46
28888: DOUBLE
28889: EQUAL
28890: IFTRUE 28894
28892: GO 28912
28894: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 23
28902: PUSH
28903: LD_INT 24
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: ST_TO_ADDR
28910: GO 28939
28912: LD_INT 47
28914: DOUBLE
28915: EQUAL
28916: IFTRUE 28920
28918: GO 28938
28920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28921: LD_ADDR_VAR 0 3
28925: PUSH
28926: LD_INT 23
28928: PUSH
28929: LD_INT 24
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: ST_TO_ADDR
28936: GO 28939
28938: POP
// result := ( chassis in result ) ;
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: LD_VAR 0 1
28948: PUSH
28949: LD_VAR 0 3
28953: IN
28954: ST_TO_ADDR
// end ;
28955: LD_VAR 0 3
28959: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
// result := array ;
28969: LD_ADDR_VAR 0 5
28973: PUSH
28974: LD_VAR 0 1
28978: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28979: LD_VAR 0 1
28983: NOT
28984: PUSH
28985: LD_VAR 0 2
28989: NOT
28990: OR
28991: PUSH
28992: LD_VAR 0 3
28996: NOT
28997: OR
28998: PUSH
28999: LD_VAR 0 2
29003: PUSH
29004: LD_VAR 0 1
29008: GREATER
29009: OR
29010: PUSH
29011: LD_VAR 0 3
29015: PUSH
29016: LD_VAR 0 1
29020: GREATER
29021: OR
29022: IFFALSE 29026
// exit ;
29024: GO 29322
// if direction then
29026: LD_VAR 0 4
29030: IFFALSE 29094
// begin d := 1 ;
29032: LD_ADDR_VAR 0 9
29036: PUSH
29037: LD_INT 1
29039: ST_TO_ADDR
// if i_from > i_to then
29040: LD_VAR 0 2
29044: PUSH
29045: LD_VAR 0 3
29049: GREATER
29050: IFFALSE 29076
// length := ( array - i_from ) + i_to else
29052: LD_ADDR_VAR 0 11
29056: PUSH
29057: LD_VAR 0 1
29061: PUSH
29062: LD_VAR 0 2
29066: MINUS
29067: PUSH
29068: LD_VAR 0 3
29072: PLUS
29073: ST_TO_ADDR
29074: GO 29092
// length := i_to - i_from ;
29076: LD_ADDR_VAR 0 11
29080: PUSH
29081: LD_VAR 0 3
29085: PUSH
29086: LD_VAR 0 2
29090: MINUS
29091: ST_TO_ADDR
// end else
29092: GO 29155
// begin d := - 1 ;
29094: LD_ADDR_VAR 0 9
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: ST_TO_ADDR
// if i_from > i_to then
29103: LD_VAR 0 2
29107: PUSH
29108: LD_VAR 0 3
29112: GREATER
29113: IFFALSE 29133
// length := i_from - i_to else
29115: LD_ADDR_VAR 0 11
29119: PUSH
29120: LD_VAR 0 2
29124: PUSH
29125: LD_VAR 0 3
29129: MINUS
29130: ST_TO_ADDR
29131: GO 29155
// length := ( array - i_to ) + i_from ;
29133: LD_ADDR_VAR 0 11
29137: PUSH
29138: LD_VAR 0 1
29142: PUSH
29143: LD_VAR 0 3
29147: MINUS
29148: PUSH
29149: LD_VAR 0 2
29153: PLUS
29154: ST_TO_ADDR
// end ; if not length then
29155: LD_VAR 0 11
29159: NOT
29160: IFFALSE 29164
// exit ;
29162: GO 29322
// tmp := array ;
29164: LD_ADDR_VAR 0 10
29168: PUSH
29169: LD_VAR 0 1
29173: ST_TO_ADDR
// for i = 1 to length do
29174: LD_ADDR_VAR 0 6
29178: PUSH
29179: DOUBLE
29180: LD_INT 1
29182: DEC
29183: ST_TO_ADDR
29184: LD_VAR 0 11
29188: PUSH
29189: FOR_TO
29190: IFFALSE 29310
// begin for j = 1 to array do
29192: LD_ADDR_VAR 0 7
29196: PUSH
29197: DOUBLE
29198: LD_INT 1
29200: DEC
29201: ST_TO_ADDR
29202: LD_VAR 0 1
29206: PUSH
29207: FOR_TO
29208: IFFALSE 29296
// begin k := j + d ;
29210: LD_ADDR_VAR 0 8
29214: PUSH
29215: LD_VAR 0 7
29219: PUSH
29220: LD_VAR 0 9
29224: PLUS
29225: ST_TO_ADDR
// if k > array then
29226: LD_VAR 0 8
29230: PUSH
29231: LD_VAR 0 1
29235: GREATER
29236: IFFALSE 29246
// k := 1 ;
29238: LD_ADDR_VAR 0 8
29242: PUSH
29243: LD_INT 1
29245: ST_TO_ADDR
// if not k then
29246: LD_VAR 0 8
29250: NOT
29251: IFFALSE 29263
// k := array ;
29253: LD_ADDR_VAR 0 8
29257: PUSH
29258: LD_VAR 0 1
29262: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29263: LD_ADDR_VAR 0 10
29267: PUSH
29268: LD_VAR 0 10
29272: PPUSH
29273: LD_VAR 0 8
29277: PPUSH
29278: LD_VAR 0 1
29282: PUSH
29283: LD_VAR 0 7
29287: ARRAY
29288: PPUSH
29289: CALL_OW 1
29293: ST_TO_ADDR
// end ;
29294: GO 29207
29296: POP
29297: POP
// array := tmp ;
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_VAR 0 10
29307: ST_TO_ADDR
// end ;
29308: GO 29189
29310: POP
29311: POP
// result := array ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_VAR 0 1
29321: ST_TO_ADDR
// end ;
29322: LD_VAR 0 5
29326: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29327: LD_INT 0
29329: PPUSH
29330: PPUSH
// result := 0 ;
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 0
29338: ST_TO_ADDR
// if not array or not value in array then
29339: LD_VAR 0 1
29343: NOT
29344: PUSH
29345: LD_VAR 0 2
29349: PUSH
29350: LD_VAR 0 1
29354: IN
29355: NOT
29356: OR
29357: IFFALSE 29361
// exit ;
29359: GO 29415
// for i = 1 to array do
29361: LD_ADDR_VAR 0 4
29365: PUSH
29366: DOUBLE
29367: LD_INT 1
29369: DEC
29370: ST_TO_ADDR
29371: LD_VAR 0 1
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29413
// if value = array [ i ] then
29379: LD_VAR 0 2
29383: PUSH
29384: LD_VAR 0 1
29388: PUSH
29389: LD_VAR 0 4
29393: ARRAY
29394: EQUAL
29395: IFFALSE 29411
// begin result := i ;
29397: LD_ADDR_VAR 0 3
29401: PUSH
29402: LD_VAR 0 4
29406: ST_TO_ADDR
// exit ;
29407: POP
29408: POP
29409: GO 29415
// end ;
29411: GO 29376
29413: POP
29414: POP
// end ;
29415: LD_VAR 0 3
29419: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29420: LD_INT 0
29422: PPUSH
// vc_chassis := chassis ;
29423: LD_ADDR_OWVAR 37
29427: PUSH
29428: LD_VAR 0 1
29432: ST_TO_ADDR
// vc_engine := engine ;
29433: LD_ADDR_OWVAR 39
29437: PUSH
29438: LD_VAR 0 2
29442: ST_TO_ADDR
// vc_control := control ;
29443: LD_ADDR_OWVAR 38
29447: PUSH
29448: LD_VAR 0 3
29452: ST_TO_ADDR
// vc_weapon := weapon ;
29453: LD_ADDR_OWVAR 40
29457: PUSH
29458: LD_VAR 0 4
29462: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29463: LD_ADDR_OWVAR 41
29467: PUSH
29468: LD_VAR 0 5
29472: ST_TO_ADDR
// end ;
29473: LD_VAR 0 6
29477: RET
// export function WantPlant ( unit ) ; var task ; begin
29478: LD_INT 0
29480: PPUSH
29481: PPUSH
// result := false ;
29482: LD_ADDR_VAR 0 2
29486: PUSH
29487: LD_INT 0
29489: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_VAR 0 1
29499: PPUSH
29500: CALL_OW 437
29504: ST_TO_ADDR
// if task then
29505: LD_VAR 0 3
29509: IFFALSE 29537
// if task [ 1 ] [ 1 ] = p then
29511: LD_VAR 0 3
29515: PUSH
29516: LD_INT 1
29518: ARRAY
29519: PUSH
29520: LD_INT 1
29522: ARRAY
29523: PUSH
29524: LD_STRING p
29526: EQUAL
29527: IFFALSE 29537
// result := true ;
29529: LD_ADDR_VAR 0 2
29533: PUSH
29534: LD_INT 1
29536: ST_TO_ADDR
// end ;
29537: LD_VAR 0 2
29541: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
// if pos < 1 then
29548: LD_VAR 0 2
29552: PUSH
29553: LD_INT 1
29555: LESS
29556: IFFALSE 29560
// exit ;
29558: GO 29863
// if pos = 1 then
29560: LD_VAR 0 2
29564: PUSH
29565: LD_INT 1
29567: EQUAL
29568: IFFALSE 29601
// result := Replace ( arr , pos [ 1 ] , value ) else
29570: LD_ADDR_VAR 0 4
29574: PUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: LD_VAR 0 2
29584: PUSH
29585: LD_INT 1
29587: ARRAY
29588: PPUSH
29589: LD_VAR 0 3
29593: PPUSH
29594: CALL_OW 1
29598: ST_TO_ADDR
29599: GO 29863
// begin tmp := arr ;
29601: LD_ADDR_VAR 0 6
29605: PUSH
29606: LD_VAR 0 1
29610: ST_TO_ADDR
// s_arr := [ tmp ] ;
29611: LD_ADDR_VAR 0 7
29615: PUSH
29616: LD_VAR 0 6
29620: PUSH
29621: EMPTY
29622: LIST
29623: ST_TO_ADDR
// for i = 1 to pos - 1 do
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: DOUBLE
29630: LD_INT 1
29632: DEC
29633: ST_TO_ADDR
29634: LD_VAR 0 2
29638: PUSH
29639: LD_INT 1
29641: MINUS
29642: PUSH
29643: FOR_TO
29644: IFFALSE 29689
// begin tmp := tmp [ pos [ i ] ] ;
29646: LD_ADDR_VAR 0 6
29650: PUSH
29651: LD_VAR 0 6
29655: PUSH
29656: LD_VAR 0 2
29660: PUSH
29661: LD_VAR 0 5
29665: ARRAY
29666: ARRAY
29667: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29668: LD_ADDR_VAR 0 7
29672: PUSH
29673: LD_VAR 0 7
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: EMPTY
29684: LIST
29685: ADD
29686: ST_TO_ADDR
// end ;
29687: GO 29643
29689: POP
29690: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29691: LD_ADDR_VAR 0 6
29695: PUSH
29696: LD_VAR 0 6
29700: PPUSH
29701: LD_VAR 0 2
29705: PUSH
29706: LD_VAR 0 2
29710: ARRAY
29711: PPUSH
29712: LD_VAR 0 3
29716: PPUSH
29717: CALL_OW 1
29721: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29722: LD_ADDR_VAR 0 7
29726: PUSH
29727: LD_VAR 0 7
29731: PPUSH
29732: LD_VAR 0 7
29736: PPUSH
29737: LD_VAR 0 6
29741: PPUSH
29742: CALL_OW 1
29746: ST_TO_ADDR
// for i = s_arr downto 2 do
29747: LD_ADDR_VAR 0 5
29751: PUSH
29752: DOUBLE
29753: LD_VAR 0 7
29757: INC
29758: ST_TO_ADDR
29759: LD_INT 2
29761: PUSH
29762: FOR_DOWNTO
29763: IFFALSE 29847
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29765: LD_ADDR_VAR 0 6
29769: PUSH
29770: LD_VAR 0 7
29774: PUSH
29775: LD_VAR 0 5
29779: PUSH
29780: LD_INT 1
29782: MINUS
29783: ARRAY
29784: PPUSH
29785: LD_VAR 0 2
29789: PUSH
29790: LD_VAR 0 5
29794: PUSH
29795: LD_INT 1
29797: MINUS
29798: ARRAY
29799: PPUSH
29800: LD_VAR 0 7
29804: PUSH
29805: LD_VAR 0 5
29809: ARRAY
29810: PPUSH
29811: CALL_OW 1
29815: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29816: LD_ADDR_VAR 0 7
29820: PUSH
29821: LD_VAR 0 7
29825: PPUSH
29826: LD_VAR 0 5
29830: PUSH
29831: LD_INT 1
29833: MINUS
29834: PPUSH
29835: LD_VAR 0 6
29839: PPUSH
29840: CALL_OW 1
29844: ST_TO_ADDR
// end ;
29845: GO 29762
29847: POP
29848: POP
// result := s_arr [ 1 ] ;
29849: LD_ADDR_VAR 0 4
29853: PUSH
29854: LD_VAR 0 7
29858: PUSH
29859: LD_INT 1
29861: ARRAY
29862: ST_TO_ADDR
// end ; end ;
29863: LD_VAR 0 4
29867: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29868: LD_INT 0
29870: PPUSH
29871: PPUSH
// if not list then
29872: LD_VAR 0 1
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 29972
// i := list [ pos1 ] ;
29881: LD_ADDR_VAR 0 5
29885: PUSH
29886: LD_VAR 0 1
29890: PUSH
29891: LD_VAR 0 2
29895: ARRAY
29896: ST_TO_ADDR
// if not i then
29897: LD_VAR 0 5
29901: NOT
29902: IFFALSE 29906
// exit ;
29904: GO 29972
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29906: LD_ADDR_VAR 0 1
29910: PUSH
29911: LD_VAR 0 1
29915: PPUSH
29916: LD_VAR 0 2
29920: PPUSH
29921: LD_VAR 0 1
29925: PUSH
29926: LD_VAR 0 3
29930: ARRAY
29931: PPUSH
29932: CALL_OW 1
29936: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29937: LD_ADDR_VAR 0 1
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: LD_VAR 0 3
29951: PPUSH
29952: LD_VAR 0 5
29956: PPUSH
29957: CALL_OW 1
29961: ST_TO_ADDR
// result := list ;
29962: LD_ADDR_VAR 0 4
29966: PUSH
29967: LD_VAR 0 1
29971: ST_TO_ADDR
// end ;
29972: LD_VAR 0 4
29976: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29977: LD_INT 0
29979: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29980: LD_ADDR_VAR 0 5
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 250
29994: PPUSH
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 251
30004: PPUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 4
30019: PPUSH
30020: CALL 30030 0 5
30024: ST_TO_ADDR
// end ;
30025: LD_VAR 0 5
30029: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30030: LD_INT 0
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
// if not list then
30036: LD_VAR 0 3
30040: NOT
30041: IFFALSE 30045
// exit ;
30043: GO 30433
// result := [ ] ;
30045: LD_ADDR_VAR 0 6
30049: PUSH
30050: EMPTY
30051: ST_TO_ADDR
// for i in list do
30052: LD_ADDR_VAR 0 7
30056: PUSH
30057: LD_VAR 0 3
30061: PUSH
30062: FOR_IN
30063: IFFALSE 30265
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30065: LD_ADDR_VAR 0 9
30069: PUSH
30070: LD_VAR 0 7
30074: PPUSH
30075: LD_VAR 0 1
30079: PPUSH
30080: LD_VAR 0 2
30084: PPUSH
30085: CALL_OW 297
30089: ST_TO_ADDR
// if not result then
30090: LD_VAR 0 6
30094: NOT
30095: IFFALSE 30121
// result := [ [ i , tmp ] ] else
30097: LD_ADDR_VAR 0 6
30101: PUSH
30102: LD_VAR 0 7
30106: PUSH
30107: LD_VAR 0 9
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: ST_TO_ADDR
30119: GO 30263
// begin if result [ result ] [ 2 ] < tmp then
30121: LD_VAR 0 6
30125: PUSH
30126: LD_VAR 0 6
30130: ARRAY
30131: PUSH
30132: LD_INT 2
30134: ARRAY
30135: PUSH
30136: LD_VAR 0 9
30140: LESS
30141: IFFALSE 30183
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30143: LD_ADDR_VAR 0 6
30147: PUSH
30148: LD_VAR 0 6
30152: PPUSH
30153: LD_VAR 0 6
30157: PUSH
30158: LD_INT 1
30160: PLUS
30161: PPUSH
30162: LD_VAR 0 7
30166: PUSH
30167: LD_VAR 0 9
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PPUSH
30176: CALL_OW 2
30180: ST_TO_ADDR
30181: GO 30263
// for j = 1 to result do
30183: LD_ADDR_VAR 0 8
30187: PUSH
30188: DOUBLE
30189: LD_INT 1
30191: DEC
30192: ST_TO_ADDR
30193: LD_VAR 0 6
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30261
// begin if tmp < result [ j ] [ 2 ] then
30201: LD_VAR 0 9
30205: PUSH
30206: LD_VAR 0 6
30210: PUSH
30211: LD_VAR 0 8
30215: ARRAY
30216: PUSH
30217: LD_INT 2
30219: ARRAY
30220: LESS
30221: IFFALSE 30259
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30223: LD_ADDR_VAR 0 6
30227: PUSH
30228: LD_VAR 0 6
30232: PPUSH
30233: LD_VAR 0 8
30237: PPUSH
30238: LD_VAR 0 7
30242: PUSH
30243: LD_VAR 0 9
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PPUSH
30252: CALL_OW 2
30256: ST_TO_ADDR
// break ;
30257: GO 30261
// end ; end ;
30259: GO 30198
30261: POP
30262: POP
// end ; end ;
30263: GO 30062
30265: POP
30266: POP
// if result and not asc then
30267: LD_VAR 0 6
30271: PUSH
30272: LD_VAR 0 4
30276: NOT
30277: AND
30278: IFFALSE 30353
// begin tmp := result ;
30280: LD_ADDR_VAR 0 9
30284: PUSH
30285: LD_VAR 0 6
30289: ST_TO_ADDR
// for i = tmp downto 1 do
30290: LD_ADDR_VAR 0 7
30294: PUSH
30295: DOUBLE
30296: LD_VAR 0 9
30300: INC
30301: ST_TO_ADDR
30302: LD_INT 1
30304: PUSH
30305: FOR_DOWNTO
30306: IFFALSE 30351
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 6
30317: PPUSH
30318: LD_VAR 0 9
30322: PUSH
30323: LD_VAR 0 7
30327: MINUS
30328: PUSH
30329: LD_INT 1
30331: PLUS
30332: PPUSH
30333: LD_VAR 0 9
30337: PUSH
30338: LD_VAR 0 7
30342: ARRAY
30343: PPUSH
30344: CALL_OW 1
30348: ST_TO_ADDR
30349: GO 30305
30351: POP
30352: POP
// end ; tmp := [ ] ;
30353: LD_ADDR_VAR 0 9
30357: PUSH
30358: EMPTY
30359: ST_TO_ADDR
// if mode then
30360: LD_VAR 0 5
30364: IFFALSE 30433
// begin for i = 1 to result do
30366: LD_ADDR_VAR 0 7
30370: PUSH
30371: DOUBLE
30372: LD_INT 1
30374: DEC
30375: ST_TO_ADDR
30376: LD_VAR 0 6
30380: PUSH
30381: FOR_TO
30382: IFFALSE 30421
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30384: LD_ADDR_VAR 0 9
30388: PUSH
30389: LD_VAR 0 9
30393: PPUSH
30394: LD_VAR 0 7
30398: PPUSH
30399: LD_VAR 0 6
30403: PUSH
30404: LD_VAR 0 7
30408: ARRAY
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 1
30418: ST_TO_ADDR
30419: GO 30381
30421: POP
30422: POP
// result := tmp ;
30423: LD_ADDR_VAR 0 6
30427: PUSH
30428: LD_VAR 0 9
30432: ST_TO_ADDR
// end ; end ;
30433: LD_VAR 0 6
30437: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30438: LD_INT 0
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30446: LD_ADDR_VAR 0 5
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 0
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: EMPTY
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
// if not x or not y then
30468: LD_VAR 0 2
30472: NOT
30473: PUSH
30474: LD_VAR 0 3
30478: NOT
30479: OR
30480: IFFALSE 30484
// exit ;
30482: GO 32134
// if not range then
30484: LD_VAR 0 4
30488: NOT
30489: IFFALSE 30499
// range := 10 ;
30491: LD_ADDR_VAR 0 4
30495: PUSH
30496: LD_INT 10
30498: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30499: LD_ADDR_VAR 0 8
30503: PUSH
30504: LD_INT 81
30506: PUSH
30507: LD_VAR 0 1
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 92
30518: PUSH
30519: LD_VAR 0 2
30523: PUSH
30524: LD_VAR 0 3
30528: PUSH
30529: LD_VAR 0 4
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 21
30545: PUSH
30546: LD_INT 3
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: PPUSH
30562: CALL_OW 69
30566: ST_TO_ADDR
// if not tmp then
30567: LD_VAR 0 8
30571: NOT
30572: IFFALSE 30576
// exit ;
30574: GO 32134
// for i in tmp do
30576: LD_ADDR_VAR 0 6
30580: PUSH
30581: LD_VAR 0 8
30585: PUSH
30586: FOR_IN
30587: IFFALSE 32109
// begin points := [ 0 , 0 , 0 ] ;
30589: LD_ADDR_VAR 0 9
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: ST_TO_ADDR
// bpoints := 1 ;
30608: LD_ADDR_VAR 0 10
30612: PUSH
30613: LD_INT 1
30615: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30616: LD_VAR 0 6
30620: PPUSH
30621: CALL_OW 247
30625: PUSH
30626: LD_INT 1
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 31212
30634: POP
// begin if GetClass ( i ) = 1 then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 257
30644: PUSH
30645: LD_INT 1
30647: EQUAL
30648: IFFALSE 30669
// points := [ 10 , 5 , 3 ] ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_INT 10
30657: PUSH
30658: LD_INT 5
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30669: LD_VAR 0 6
30673: PPUSH
30674: CALL_OW 257
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 3
30684: PUSH
30685: LD_INT 4
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: IN
30693: IFFALSE 30714
// points := [ 3 , 2 , 1 ] ;
30695: LD_ADDR_VAR 0 9
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30714: LD_VAR 0 6
30718: PPUSH
30719: CALL_OW 257
30723: PUSH
30724: LD_INT 5
30726: EQUAL
30727: IFFALSE 30748
// points := [ 130 , 5 , 2 ] ;
30729: LD_ADDR_VAR 0 9
30733: PUSH
30734: LD_INT 130
30736: PUSH
30737: LD_INT 5
30739: PUSH
30740: LD_INT 2
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30748: LD_VAR 0 6
30752: PPUSH
30753: CALL_OW 257
30757: PUSH
30758: LD_INT 8
30760: EQUAL
30761: IFFALSE 30782
// points := [ 35 , 35 , 30 ] ;
30763: LD_ADDR_VAR 0 9
30767: PUSH
30768: LD_INT 35
30770: PUSH
30771: LD_INT 35
30773: PUSH
30774: LD_INT 30
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: LIST
30781: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30782: LD_VAR 0 6
30786: PPUSH
30787: CALL_OW 257
30791: PUSH
30792: LD_INT 9
30794: EQUAL
30795: IFFALSE 30816
// points := [ 20 , 55 , 40 ] ;
30797: LD_ADDR_VAR 0 9
30801: PUSH
30802: LD_INT 20
30804: PUSH
30805: LD_INT 55
30807: PUSH
30808: LD_INT 40
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30816: LD_VAR 0 6
30820: PPUSH
30821: CALL_OW 257
30825: PUSH
30826: LD_INT 12
30828: PUSH
30829: LD_INT 16
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: IN
30836: IFFALSE 30857
// points := [ 5 , 3 , 2 ] ;
30838: LD_ADDR_VAR 0 9
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30857: LD_VAR 0 6
30861: PPUSH
30862: CALL_OW 257
30866: PUSH
30867: LD_INT 17
30869: EQUAL
30870: IFFALSE 30891
// points := [ 100 , 50 , 75 ] ;
30872: LD_ADDR_VAR 0 9
30876: PUSH
30877: LD_INT 100
30879: PUSH
30880: LD_INT 50
30882: PUSH
30883: LD_INT 75
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30891: LD_VAR 0 6
30895: PPUSH
30896: CALL_OW 257
30900: PUSH
30901: LD_INT 15
30903: EQUAL
30904: IFFALSE 30925
// points := [ 10 , 5 , 3 ] ;
30906: LD_ADDR_VAR 0 9
30910: PUSH
30911: LD_INT 10
30913: PUSH
30914: LD_INT 5
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30925: LD_VAR 0 6
30929: PPUSH
30930: CALL_OW 257
30934: PUSH
30935: LD_INT 14
30937: EQUAL
30938: IFFALSE 30959
// points := [ 10 , 0 , 0 ] ;
30940: LD_ADDR_VAR 0 9
30944: PUSH
30945: LD_INT 10
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30959: LD_VAR 0 6
30963: PPUSH
30964: CALL_OW 257
30968: PUSH
30969: LD_INT 11
30971: EQUAL
30972: IFFALSE 30993
// points := [ 30 , 10 , 5 ] ;
30974: LD_ADDR_VAR 0 9
30978: PUSH
30979: LD_INT 30
30981: PUSH
30982: LD_INT 10
30984: PUSH
30985: LD_INT 5
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30993: LD_VAR 0 1
30997: PPUSH
30998: LD_INT 5
31000: PPUSH
31001: CALL_OW 321
31005: PUSH
31006: LD_INT 2
31008: EQUAL
31009: IFFALSE 31026
// bpoints := bpoints * 1.8 ;
31011: LD_ADDR_VAR 0 10
31015: PUSH
31016: LD_VAR 0 10
31020: PUSH
31021: LD_REAL  1.80000000000000E+0000
31024: MUL
31025: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31026: LD_VAR 0 6
31030: PPUSH
31031: CALL_OW 257
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: IN
31054: PUSH
31055: LD_VAR 0 1
31059: PPUSH
31060: LD_INT 51
31062: PPUSH
31063: CALL_OW 321
31067: PUSH
31068: LD_INT 2
31070: EQUAL
31071: AND
31072: IFFALSE 31089
// bpoints := bpoints * 1.2 ;
31074: LD_ADDR_VAR 0 10
31078: PUSH
31079: LD_VAR 0 10
31083: PUSH
31084: LD_REAL  1.20000000000000E+0000
31087: MUL
31088: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31089: LD_VAR 0 6
31093: PPUSH
31094: CALL_OW 257
31098: PUSH
31099: LD_INT 5
31101: PUSH
31102: LD_INT 7
31104: PUSH
31105: LD_INT 9
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: IN
31113: PUSH
31114: LD_VAR 0 1
31118: PPUSH
31119: LD_INT 52
31121: PPUSH
31122: CALL_OW 321
31126: PUSH
31127: LD_INT 2
31129: EQUAL
31130: AND
31131: IFFALSE 31148
// bpoints := bpoints * 1.5 ;
31133: LD_ADDR_VAR 0 10
31137: PUSH
31138: LD_VAR 0 10
31142: PUSH
31143: LD_REAL  1.50000000000000E+0000
31146: MUL
31147: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31148: LD_VAR 0 1
31152: PPUSH
31153: LD_INT 66
31155: PPUSH
31156: CALL_OW 321
31160: PUSH
31161: LD_INT 2
31163: EQUAL
31164: IFFALSE 31181
// bpoints := bpoints * 1.1 ;
31166: LD_ADDR_VAR 0 10
31170: PUSH
31171: LD_VAR 0 10
31175: PUSH
31176: LD_REAL  1.10000000000000E+0000
31179: MUL
31180: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31181: LD_ADDR_VAR 0 10
31185: PUSH
31186: LD_VAR 0 10
31190: PUSH
31191: LD_VAR 0 6
31195: PPUSH
31196: LD_INT 1
31198: PPUSH
31199: CALL_OW 259
31203: PUSH
31204: LD_REAL  1.15000000000000E+0000
31207: MUL
31208: MUL
31209: ST_TO_ADDR
// end ; unit_vehicle :
31210: GO 32038
31212: LD_INT 2
31214: DOUBLE
31215: EQUAL
31216: IFTRUE 31220
31218: GO 32026
31220: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31221: LD_VAR 0 6
31225: PPUSH
31226: CALL_OW 264
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 42
31236: PUSH
31237: LD_INT 24
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: IN
31245: IFFALSE 31266
// points := [ 25 , 5 , 3 ] ;
31247: LD_ADDR_VAR 0 9
31251: PUSH
31252: LD_INT 25
31254: PUSH
31255: LD_INT 5
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31266: LD_VAR 0 6
31270: PPUSH
31271: CALL_OW 264
31275: PUSH
31276: LD_INT 4
31278: PUSH
31279: LD_INT 43
31281: PUSH
31282: LD_INT 25
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: IN
31290: IFFALSE 31311
// points := [ 40 , 15 , 5 ] ;
31292: LD_ADDR_VAR 0 9
31296: PUSH
31297: LD_INT 40
31299: PUSH
31300: LD_INT 15
31302: PUSH
31303: LD_INT 5
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31311: LD_VAR 0 6
31315: PPUSH
31316: CALL_OW 264
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 23
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: IN
31331: IFFALSE 31352
// points := [ 7 , 25 , 8 ] ;
31333: LD_ADDR_VAR 0 9
31337: PUSH
31338: LD_INT 7
31340: PUSH
31341: LD_INT 25
31343: PUSH
31344: LD_INT 8
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31352: LD_VAR 0 6
31356: PPUSH
31357: CALL_OW 264
31361: PUSH
31362: LD_INT 5
31364: PUSH
31365: LD_INT 27
31367: PUSH
31368: LD_INT 44
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: IN
31376: IFFALSE 31397
// points := [ 14 , 50 , 16 ] ;
31378: LD_ADDR_VAR 0 9
31382: PUSH
31383: LD_INT 14
31385: PUSH
31386: LD_INT 50
31388: PUSH
31389: LD_INT 16
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31397: LD_VAR 0 6
31401: PPUSH
31402: CALL_OW 264
31406: PUSH
31407: LD_INT 6
31409: PUSH
31410: LD_INT 46
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: IN
31417: IFFALSE 31438
// points := [ 32 , 120 , 70 ] ;
31419: LD_ADDR_VAR 0 9
31423: PUSH
31424: LD_INT 32
31426: PUSH
31427: LD_INT 120
31429: PUSH
31430: LD_INT 70
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31438: LD_VAR 0 6
31442: PPUSH
31443: CALL_OW 264
31447: PUSH
31448: LD_INT 7
31450: PUSH
31451: LD_INT 28
31453: PUSH
31454: LD_INT 45
31456: PUSH
31457: LD_INT 92
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: IN
31466: IFFALSE 31487
// points := [ 35 , 20 , 45 ] ;
31468: LD_ADDR_VAR 0 9
31472: PUSH
31473: LD_INT 35
31475: PUSH
31476: LD_INT 20
31478: PUSH
31479: LD_INT 45
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31487: LD_VAR 0 6
31491: PPUSH
31492: CALL_OW 264
31496: PUSH
31497: LD_INT 47
31499: PUSH
31500: EMPTY
31501: LIST
31502: IN
31503: IFFALSE 31524
// points := [ 67 , 45 , 75 ] ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_INT 67
31512: PUSH
31513: LD_INT 45
31515: PUSH
31516: LD_INT 75
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31524: LD_VAR 0 6
31528: PPUSH
31529: CALL_OW 264
31533: PUSH
31534: LD_INT 26
31536: PUSH
31537: EMPTY
31538: LIST
31539: IN
31540: IFFALSE 31561
// points := [ 120 , 30 , 80 ] ;
31542: LD_ADDR_VAR 0 9
31546: PUSH
31547: LD_INT 120
31549: PUSH
31550: LD_INT 30
31552: PUSH
31553: LD_INT 80
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31561: LD_VAR 0 6
31565: PPUSH
31566: CALL_OW 264
31570: PUSH
31571: LD_INT 22
31573: PUSH
31574: EMPTY
31575: LIST
31576: IN
31577: IFFALSE 31598
// points := [ 40 , 1 , 1 ] ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_INT 40
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31598: LD_VAR 0 6
31602: PPUSH
31603: CALL_OW 264
31607: PUSH
31608: LD_INT 29
31610: PUSH
31611: EMPTY
31612: LIST
31613: IN
31614: IFFALSE 31635
// points := [ 70 , 200 , 400 ] ;
31616: LD_ADDR_VAR 0 9
31620: PUSH
31621: LD_INT 70
31623: PUSH
31624: LD_INT 200
31626: PUSH
31627: LD_INT 400
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31635: LD_VAR 0 6
31639: PPUSH
31640: CALL_OW 264
31644: PUSH
31645: LD_INT 14
31647: PUSH
31648: LD_INT 53
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: IN
31655: IFFALSE 31676
// points := [ 40 , 10 , 20 ] ;
31657: LD_ADDR_VAR 0 9
31661: PUSH
31662: LD_INT 40
31664: PUSH
31665: LD_INT 10
31667: PUSH
31668: LD_INT 20
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31676: LD_VAR 0 6
31680: PPUSH
31681: CALL_OW 264
31685: PUSH
31686: LD_INT 9
31688: PUSH
31689: EMPTY
31690: LIST
31691: IN
31692: IFFALSE 31713
// points := [ 5 , 70 , 20 ] ;
31694: LD_ADDR_VAR 0 9
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: LD_INT 70
31704: PUSH
31705: LD_INT 20
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31713: LD_VAR 0 6
31717: PPUSH
31718: CALL_OW 264
31722: PUSH
31723: LD_INT 10
31725: PUSH
31726: EMPTY
31727: LIST
31728: IN
31729: IFFALSE 31750
// points := [ 35 , 110 , 70 ] ;
31731: LD_ADDR_VAR 0 9
31735: PUSH
31736: LD_INT 35
31738: PUSH
31739: LD_INT 110
31741: PUSH
31742: LD_INT 70
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31750: LD_VAR 0 6
31754: PPUSH
31755: CALL_OW 265
31759: PUSH
31760: LD_INT 25
31762: EQUAL
31763: IFFALSE 31784
// points := [ 80 , 65 , 100 ] ;
31765: LD_ADDR_VAR 0 9
31769: PUSH
31770: LD_INT 80
31772: PUSH
31773: LD_INT 65
31775: PUSH
31776: LD_INT 100
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31784: LD_VAR 0 6
31788: PPUSH
31789: CALL_OW 263
31793: PUSH
31794: LD_INT 1
31796: EQUAL
31797: IFFALSE 31832
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31799: LD_ADDR_VAR 0 10
31803: PUSH
31804: LD_VAR 0 10
31808: PUSH
31809: LD_VAR 0 6
31813: PPUSH
31814: CALL_OW 311
31818: PPUSH
31819: LD_INT 3
31821: PPUSH
31822: CALL_OW 259
31826: PUSH
31827: LD_INT 4
31829: MUL
31830: MUL
31831: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31832: LD_VAR 0 6
31836: PPUSH
31837: CALL_OW 263
31841: PUSH
31842: LD_INT 2
31844: EQUAL
31845: IFFALSE 31896
// begin j := IsControledBy ( i ) ;
31847: LD_ADDR_VAR 0 7
31851: PUSH
31852: LD_VAR 0 6
31856: PPUSH
31857: CALL_OW 312
31861: ST_TO_ADDR
// if j then
31862: LD_VAR 0 7
31866: IFFALSE 31896
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31868: LD_ADDR_VAR 0 10
31872: PUSH
31873: LD_VAR 0 10
31877: PUSH
31878: LD_VAR 0 7
31882: PPUSH
31883: LD_INT 3
31885: PPUSH
31886: CALL_OW 259
31890: PUSH
31891: LD_INT 3
31893: MUL
31894: MUL
31895: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31896: LD_VAR 0 6
31900: PPUSH
31901: CALL_OW 264
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: LD_INT 6
31911: PUSH
31912: LD_INT 46
31914: PUSH
31915: LD_INT 44
31917: PUSH
31918: LD_INT 47
31920: PUSH
31921: LD_INT 45
31923: PUSH
31924: LD_INT 28
31926: PUSH
31927: LD_INT 7
31929: PUSH
31930: LD_INT 27
31932: PUSH
31933: LD_INT 29
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: IN
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_INT 52
31956: PPUSH
31957: CALL_OW 321
31961: PUSH
31962: LD_INT 2
31964: EQUAL
31965: AND
31966: IFFALSE 31983
// bpoints := bpoints * 1.2 ;
31968: LD_ADDR_VAR 0 10
31972: PUSH
31973: LD_VAR 0 10
31977: PUSH
31978: LD_REAL  1.20000000000000E+0000
31981: MUL
31982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31983: LD_VAR 0 6
31987: PPUSH
31988: CALL_OW 264
31992: PUSH
31993: LD_INT 6
31995: PUSH
31996: LD_INT 46
31998: PUSH
31999: LD_INT 47
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: IN
32007: IFFALSE 32024
// bpoints := bpoints * 1.2 ;
32009: LD_ADDR_VAR 0 10
32013: PUSH
32014: LD_VAR 0 10
32018: PUSH
32019: LD_REAL  1.20000000000000E+0000
32022: MUL
32023: ST_TO_ADDR
// end ; unit_building :
32024: GO 32038
32026: LD_INT 3
32028: DOUBLE
32029: EQUAL
32030: IFTRUE 32034
32032: GO 32037
32034: POP
// ; end ;
32035: GO 32038
32037: POP
// for j = 1 to 3 do
32038: LD_ADDR_VAR 0 7
32042: PUSH
32043: DOUBLE
32044: LD_INT 1
32046: DEC
32047: ST_TO_ADDR
32048: LD_INT 3
32050: PUSH
32051: FOR_TO
32052: IFFALSE 32105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32054: LD_ADDR_VAR 0 5
32058: PUSH
32059: LD_VAR 0 5
32063: PPUSH
32064: LD_VAR 0 7
32068: PPUSH
32069: LD_VAR 0 5
32073: PUSH
32074: LD_VAR 0 7
32078: ARRAY
32079: PUSH
32080: LD_VAR 0 9
32084: PUSH
32085: LD_VAR 0 7
32089: ARRAY
32090: PUSH
32091: LD_VAR 0 10
32095: MUL
32096: PLUS
32097: PPUSH
32098: CALL_OW 1
32102: ST_TO_ADDR
32103: GO 32051
32105: POP
32106: POP
// end ;
32107: GO 30586
32109: POP
32110: POP
// result := Replace ( result , 4 , tmp ) ;
32111: LD_ADDR_VAR 0 5
32115: PUSH
32116: LD_VAR 0 5
32120: PPUSH
32121: LD_INT 4
32123: PPUSH
32124: LD_VAR 0 8
32128: PPUSH
32129: CALL_OW 1
32133: ST_TO_ADDR
// end ;
32134: LD_VAR 0 5
32138: RET
// export function DangerAtRange ( unit , range ) ; begin
32139: LD_INT 0
32141: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: CALL_OW 255
32156: PPUSH
32157: LD_VAR 0 1
32161: PPUSH
32162: CALL_OW 250
32166: PPUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 251
32176: PPUSH
32177: LD_VAR 0 2
32181: PPUSH
32182: CALL 30438 0 4
32186: ST_TO_ADDR
// end ;
32187: LD_VAR 0 3
32191: RET
// export function DangerInArea ( side , area ) ; begin
32192: LD_INT 0
32194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_VAR 0 2
32204: PPUSH
32205: LD_INT 81
32207: PUSH
32208: LD_VAR 0 1
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PPUSH
32217: CALL_OW 70
32221: ST_TO_ADDR
// end ;
32222: LD_VAR 0 3
32226: RET
// export function IsExtension ( b ) ; begin
32227: LD_INT 0
32229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32230: LD_ADDR_VAR 0 2
32234: PUSH
32235: LD_VAR 0 1
32239: PUSH
32240: LD_INT 23
32242: PUSH
32243: LD_INT 20
32245: PUSH
32246: LD_INT 22
32248: PUSH
32249: LD_INT 17
32251: PUSH
32252: LD_INT 24
32254: PUSH
32255: LD_INT 21
32257: PUSH
32258: LD_INT 19
32260: PUSH
32261: LD_INT 16
32263: PUSH
32264: LD_INT 25
32266: PUSH
32267: LD_INT 18
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: IN
32282: ST_TO_ADDR
// end ;
32283: LD_VAR 0 2
32287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32288: LD_INT 0
32290: PPUSH
32291: PPUSH
32292: PPUSH
// result := [ ] ;
32293: LD_ADDR_VAR 0 4
32297: PUSH
32298: EMPTY
32299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32300: LD_ADDR_VAR 0 5
32304: PUSH
32305: LD_VAR 0 2
32309: PPUSH
32310: LD_INT 21
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 70
32324: ST_TO_ADDR
// if not tmp then
32325: LD_VAR 0 5
32329: NOT
32330: IFFALSE 32334
// exit ;
32332: GO 32398
// if checkLink then
32334: LD_VAR 0 3
32338: IFFALSE 32388
// begin for i in tmp do
32340: LD_ADDR_VAR 0 6
32344: PUSH
32345: LD_VAR 0 5
32349: PUSH
32350: FOR_IN
32351: IFFALSE 32386
// if GetBase ( i ) <> base then
32353: LD_VAR 0 6
32357: PPUSH
32358: CALL_OW 274
32362: PUSH
32363: LD_VAR 0 1
32367: NONEQUAL
32368: IFFALSE 32384
// ComLinkToBase ( base , i ) ;
32370: LD_VAR 0 1
32374: PPUSH
32375: LD_VAR 0 6
32379: PPUSH
32380: CALL_OW 169
32384: GO 32350
32386: POP
32387: POP
// end ; result := tmp ;
32388: LD_ADDR_VAR 0 4
32392: PUSH
32393: LD_VAR 0 5
32397: ST_TO_ADDR
// end ;
32398: LD_VAR 0 4
32402: RET
// export function ComComplete ( units , b ) ; var i ; begin
32403: LD_INT 0
32405: PPUSH
32406: PPUSH
// if not units then
32407: LD_VAR 0 1
32411: NOT
32412: IFFALSE 32416
// exit ;
32414: GO 32506
// for i in units do
32416: LD_ADDR_VAR 0 4
32420: PUSH
32421: LD_VAR 0 1
32425: PUSH
32426: FOR_IN
32427: IFFALSE 32504
// if BuildingStatus ( b ) = bs_build then
32429: LD_VAR 0 2
32433: PPUSH
32434: CALL_OW 461
32438: PUSH
32439: LD_INT 1
32441: EQUAL
32442: IFFALSE 32502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32444: LD_VAR 0 4
32448: PPUSH
32449: LD_STRING h
32451: PUSH
32452: LD_VAR 0 2
32456: PPUSH
32457: CALL_OW 250
32461: PUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: CALL_OW 251
32471: PUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: PPUSH
32498: CALL_OW 446
32502: GO 32426
32504: POP
32505: POP
// end ;
32506: LD_VAR 0 3
32510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32511: LD_INT 0
32513: PPUSH
32514: PPUSH
32515: PPUSH
32516: PPUSH
32517: PPUSH
32518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32519: LD_VAR 0 1
32523: NOT
32524: PUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 263
32534: PUSH
32535: LD_INT 2
32537: NONEQUAL
32538: OR
32539: IFFALSE 32543
// exit ;
32541: GO 32859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32543: LD_ADDR_VAR 0 6
32547: PUSH
32548: LD_INT 22
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 255
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 30
32570: PUSH
32571: LD_INT 36
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 34
32580: PUSH
32581: LD_INT 31
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PPUSH
32597: CALL_OW 69
32601: ST_TO_ADDR
// if not tmp then
32602: LD_VAR 0 6
32606: NOT
32607: IFFALSE 32611
// exit ;
32609: GO 32859
// result := [ ] ;
32611: LD_ADDR_VAR 0 2
32615: PUSH
32616: EMPTY
32617: ST_TO_ADDR
// for i in tmp do
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_VAR 0 6
32627: PUSH
32628: FOR_IN
32629: IFFALSE 32700
// begin t := UnitsInside ( i ) ;
32631: LD_ADDR_VAR 0 4
32635: PUSH
32636: LD_VAR 0 3
32640: PPUSH
32641: CALL_OW 313
32645: ST_TO_ADDR
// if t then
32646: LD_VAR 0 4
32650: IFFALSE 32698
// for j in t do
32652: LD_ADDR_VAR 0 7
32656: PUSH
32657: LD_VAR 0 4
32661: PUSH
32662: FOR_IN
32663: IFFALSE 32696
// result := Replace ( result , result + 1 , j ) ;
32665: LD_ADDR_VAR 0 2
32669: PUSH
32670: LD_VAR 0 2
32674: PPUSH
32675: LD_VAR 0 2
32679: PUSH
32680: LD_INT 1
32682: PLUS
32683: PPUSH
32684: LD_VAR 0 7
32688: PPUSH
32689: CALL_OW 1
32693: ST_TO_ADDR
32694: GO 32662
32696: POP
32697: POP
// end ;
32698: GO 32628
32700: POP
32701: POP
// if not result then
32702: LD_VAR 0 2
32706: NOT
32707: IFFALSE 32711
// exit ;
32709: GO 32859
// mech := result [ 1 ] ;
32711: LD_ADDR_VAR 0 5
32715: PUSH
32716: LD_VAR 0 2
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: ST_TO_ADDR
// if result > 1 then
32725: LD_VAR 0 2
32729: PUSH
32730: LD_INT 1
32732: GREATER
32733: IFFALSE 32845
// begin for i = 2 to result do
32735: LD_ADDR_VAR 0 3
32739: PUSH
32740: DOUBLE
32741: LD_INT 2
32743: DEC
32744: ST_TO_ADDR
32745: LD_VAR 0 2
32749: PUSH
32750: FOR_TO
32751: IFFALSE 32843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_VAR 0 2
32762: PUSH
32763: LD_VAR 0 3
32767: ARRAY
32768: PPUSH
32769: LD_INT 3
32771: PPUSH
32772: CALL_OW 259
32776: PUSH
32777: LD_VAR 0 2
32781: PUSH
32782: LD_VAR 0 3
32786: ARRAY
32787: PPUSH
32788: CALL_OW 432
32792: MINUS
32793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32794: LD_VAR 0 4
32798: PUSH
32799: LD_VAR 0 5
32803: PPUSH
32804: LD_INT 3
32806: PPUSH
32807: CALL_OW 259
32811: PUSH
32812: LD_VAR 0 5
32816: PPUSH
32817: CALL_OW 432
32821: MINUS
32822: GREATEREQUAL
32823: IFFALSE 32841
// mech := result [ i ] ;
32825: LD_ADDR_VAR 0 5
32829: PUSH
32830: LD_VAR 0 2
32834: PUSH
32835: LD_VAR 0 3
32839: ARRAY
32840: ST_TO_ADDR
// end ;
32841: GO 32750
32843: POP
32844: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32845: LD_VAR 0 1
32849: PPUSH
32850: LD_VAR 0 5
32854: PPUSH
32855: CALL_OW 135
// end ;
32859: LD_VAR 0 2
32863: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32864: LD_INT 0
32866: PPUSH
32867: PPUSH
32868: PPUSH
32869: PPUSH
32870: PPUSH
32871: PPUSH
32872: PPUSH
32873: PPUSH
32874: PPUSH
32875: PPUSH
32876: PPUSH
32877: PPUSH
32878: PPUSH
// result := [ ] ;
32879: LD_ADDR_VAR 0 7
32883: PUSH
32884: EMPTY
32885: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 266
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: IN
32906: NOT
32907: IFFALSE 32911
// exit ;
32909: GO 34545
// if name then
32911: LD_VAR 0 3
32915: IFFALSE 32931
// SetBName ( base_dep , name ) ;
32917: LD_VAR 0 1
32921: PPUSH
32922: LD_VAR 0 3
32926: PPUSH
32927: CALL_OW 500
// base := GetBase ( base_dep ) ;
32931: LD_ADDR_VAR 0 15
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 274
32945: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32946: LD_ADDR_VAR 0 16
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 255
32960: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32961: LD_ADDR_VAR 0 17
32965: PUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 248
32975: ST_TO_ADDR
// if sources then
32976: LD_VAR 0 5
32980: IFFALSE 33027
// for i = 1 to 3 do
32982: LD_ADDR_VAR 0 8
32986: PUSH
32987: DOUBLE
32988: LD_INT 1
32990: DEC
32991: ST_TO_ADDR
32992: LD_INT 3
32994: PUSH
32995: FOR_TO
32996: IFFALSE 33025
// AddResourceType ( base , i , sources [ i ] ) ;
32998: LD_VAR 0 15
33002: PPUSH
33003: LD_VAR 0 8
33007: PPUSH
33008: LD_VAR 0 5
33012: PUSH
33013: LD_VAR 0 8
33017: ARRAY
33018: PPUSH
33019: CALL_OW 276
33023: GO 32995
33025: POP
33026: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33027: LD_ADDR_VAR 0 18
33031: PUSH
33032: LD_VAR 0 15
33036: PPUSH
33037: LD_VAR 0 2
33041: PPUSH
33042: LD_INT 1
33044: PPUSH
33045: CALL 32288 0 3
33049: ST_TO_ADDR
// InitHc ;
33050: CALL_OW 19
// InitUc ;
33054: CALL_OW 18
// uc_side := side ;
33058: LD_ADDR_OWVAR 20
33062: PUSH
33063: LD_VAR 0 16
33067: ST_TO_ADDR
// uc_nation := nation ;
33068: LD_ADDR_OWVAR 21
33072: PUSH
33073: LD_VAR 0 17
33077: ST_TO_ADDR
// if buildings then
33078: LD_VAR 0 18
33082: IFFALSE 34404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33084: LD_ADDR_VAR 0 19
33088: PUSH
33089: LD_VAR 0 18
33093: PPUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 30
33099: PUSH
33100: LD_INT 29
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 30
33109: PUSH
33110: LD_INT 30
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: LIST
33121: PPUSH
33122: CALL_OW 72
33126: ST_TO_ADDR
// if tmp then
33127: LD_VAR 0 19
33131: IFFALSE 33179
// for i in tmp do
33133: LD_ADDR_VAR 0 8
33137: PUSH
33138: LD_VAR 0 19
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33146: LD_VAR 0 8
33150: PPUSH
33151: CALL_OW 250
33155: PPUSH
33156: LD_VAR 0 8
33160: PPUSH
33161: CALL_OW 251
33165: PPUSH
33166: LD_VAR 0 16
33170: PPUSH
33171: CALL_OW 441
33175: GO 33143
33177: POP
33178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33179: LD_VAR 0 18
33183: PPUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 30
33189: PUSH
33190: LD_INT 32
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 30
33199: PUSH
33200: LD_INT 33
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: PPUSH
33212: CALL_OW 72
33216: IFFALSE 33304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33218: LD_ADDR_VAR 0 8
33222: PUSH
33223: LD_VAR 0 18
33227: PPUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 30
33233: PUSH
33234: LD_INT 32
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 30
33243: PUSH
33244: LD_INT 33
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: PPUSH
33256: CALL_OW 72
33260: PUSH
33261: FOR_IN
33262: IFFALSE 33302
// begin if not GetBWeapon ( i ) then
33264: LD_VAR 0 8
33268: PPUSH
33269: CALL_OW 269
33273: NOT
33274: IFFALSE 33300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33276: LD_VAR 0 8
33280: PPUSH
33281: LD_VAR 0 8
33285: PPUSH
33286: LD_VAR 0 2
33290: PPUSH
33291: CALL 34550 0 2
33295: PPUSH
33296: CALL_OW 431
// end ;
33300: GO 33261
33302: POP
33303: POP
// end ; for i = 1 to personel do
33304: LD_ADDR_VAR 0 8
33308: PUSH
33309: DOUBLE
33310: LD_INT 1
33312: DEC
33313: ST_TO_ADDR
33314: LD_VAR 0 6
33318: PUSH
33319: FOR_TO
33320: IFFALSE 34384
// begin if i > 4 then
33322: LD_VAR 0 8
33326: PUSH
33327: LD_INT 4
33329: GREATER
33330: IFFALSE 33334
// break ;
33332: GO 34384
// case i of 1 :
33334: LD_VAR 0 8
33338: PUSH
33339: LD_INT 1
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33427
33347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33348: LD_ADDR_VAR 0 12
33352: PUSH
33353: LD_VAR 0 18
33357: PPUSH
33358: LD_INT 22
33360: PUSH
33361: LD_VAR 0 16
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 58
33372: PUSH
33373: EMPTY
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 30
33381: PUSH
33382: LD_INT 32
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 30
33391: PUSH
33392: LD_INT 4
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 30
33401: PUSH
33402: LD_INT 5
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: PPUSH
33420: CALL_OW 72
33424: ST_TO_ADDR
33425: GO 33649
33427: LD_INT 2
33429: DOUBLE
33430: EQUAL
33431: IFTRUE 33435
33433: GO 33497
33435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33436: LD_ADDR_VAR 0 12
33440: PUSH
33441: LD_VAR 0 18
33445: PPUSH
33446: LD_INT 22
33448: PUSH
33449: LD_VAR 0 16
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 30
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 30
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PPUSH
33490: CALL_OW 72
33494: ST_TO_ADDR
33495: GO 33649
33497: LD_INT 3
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33567
33505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33506: LD_ADDR_VAR 0 12
33510: PUSH
33511: LD_VAR 0 18
33515: PPUSH
33516: LD_INT 22
33518: PUSH
33519: LD_VAR 0 16
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 30
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 30
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PPUSH
33560: CALL_OW 72
33564: ST_TO_ADDR
33565: GO 33649
33567: LD_INT 4
33569: DOUBLE
33570: EQUAL
33571: IFTRUE 33575
33573: GO 33648
33575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33576: LD_ADDR_VAR 0 12
33580: PUSH
33581: LD_VAR 0 18
33585: PPUSH
33586: LD_INT 22
33588: PUSH
33589: LD_VAR 0 16
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 30
33603: PUSH
33604: LD_INT 6
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 30
33613: PUSH
33614: LD_INT 7
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 30
33623: PUSH
33624: LD_INT 8
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 72
33645: ST_TO_ADDR
33646: GO 33649
33648: POP
// if i = 1 then
33649: LD_VAR 0 8
33653: PUSH
33654: LD_INT 1
33656: EQUAL
33657: IFFALSE 33768
// begin tmp := [ ] ;
33659: LD_ADDR_VAR 0 19
33663: PUSH
33664: EMPTY
33665: ST_TO_ADDR
// for j in f do
33666: LD_ADDR_VAR 0 9
33670: PUSH
33671: LD_VAR 0 12
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33750
// if GetBType ( j ) = b_bunker then
33679: LD_VAR 0 9
33683: PPUSH
33684: CALL_OW 266
33688: PUSH
33689: LD_INT 32
33691: EQUAL
33692: IFFALSE 33719
// tmp := Insert ( tmp , 1 , j ) else
33694: LD_ADDR_VAR 0 19
33698: PUSH
33699: LD_VAR 0 19
33703: PPUSH
33704: LD_INT 1
33706: PPUSH
33707: LD_VAR 0 9
33711: PPUSH
33712: CALL_OW 2
33716: ST_TO_ADDR
33717: GO 33748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33719: LD_ADDR_VAR 0 19
33723: PUSH
33724: LD_VAR 0 19
33728: PPUSH
33729: LD_VAR 0 19
33733: PUSH
33734: LD_INT 1
33736: PLUS
33737: PPUSH
33738: LD_VAR 0 9
33742: PPUSH
33743: CALL_OW 2
33747: ST_TO_ADDR
33748: GO 33676
33750: POP
33751: POP
// if tmp then
33752: LD_VAR 0 19
33756: IFFALSE 33768
// f := tmp ;
33758: LD_ADDR_VAR 0 12
33762: PUSH
33763: LD_VAR 0 19
33767: ST_TO_ADDR
// end ; x := personel [ i ] ;
33768: LD_ADDR_VAR 0 13
33772: PUSH
33773: LD_VAR 0 6
33777: PUSH
33778: LD_VAR 0 8
33782: ARRAY
33783: ST_TO_ADDR
// if x = - 1 then
33784: LD_VAR 0 13
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: EQUAL
33793: IFFALSE 34002
// begin for j in f do
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_VAR 0 12
33804: PUSH
33805: FOR_IN
33806: IFFALSE 33998
// repeat InitHc ;
33808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33812: LD_VAR 0 9
33816: PPUSH
33817: CALL_OW 266
33821: PUSH
33822: LD_INT 5
33824: EQUAL
33825: IFFALSE 33895
// begin if UnitsInside ( j ) < 3 then
33827: LD_VAR 0 9
33831: PPUSH
33832: CALL_OW 313
33836: PUSH
33837: LD_INT 3
33839: LESS
33840: IFFALSE 33876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33842: LD_INT 0
33844: PPUSH
33845: LD_INT 5
33847: PUSH
33848: LD_INT 8
33850: PUSH
33851: LD_INT 9
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: LIST
33858: PUSH
33859: LD_VAR 0 17
33863: ARRAY
33864: PPUSH
33865: LD_VAR 0 4
33869: PPUSH
33870: CALL_OW 380
33874: GO 33893
// PrepareHuman ( false , i , skill ) ;
33876: LD_INT 0
33878: PPUSH
33879: LD_VAR 0 8
33883: PPUSH
33884: LD_VAR 0 4
33888: PPUSH
33889: CALL_OW 380
// end else
33893: GO 33912
// PrepareHuman ( false , i , skill ) ;
33895: LD_INT 0
33897: PPUSH
33898: LD_VAR 0 8
33902: PPUSH
33903: LD_VAR 0 4
33907: PPUSH
33908: CALL_OW 380
// un := CreateHuman ;
33912: LD_ADDR_VAR 0 14
33916: PUSH
33917: CALL_OW 44
33921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33922: LD_ADDR_VAR 0 7
33926: PUSH
33927: LD_VAR 0 7
33931: PPUSH
33932: LD_INT 1
33934: PPUSH
33935: LD_VAR 0 14
33939: PPUSH
33940: CALL_OW 2
33944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33945: LD_VAR 0 14
33949: PPUSH
33950: LD_VAR 0 9
33954: PPUSH
33955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33959: LD_VAR 0 9
33963: PPUSH
33964: CALL_OW 313
33968: PUSH
33969: LD_INT 6
33971: EQUAL
33972: PUSH
33973: LD_VAR 0 9
33977: PPUSH
33978: CALL_OW 266
33982: PUSH
33983: LD_INT 32
33985: PUSH
33986: LD_INT 31
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: IN
33993: OR
33994: IFFALSE 33808
33996: GO 33805
33998: POP
33999: POP
// end else
34000: GO 34382
// for j = 1 to x do
34002: LD_ADDR_VAR 0 9
34006: PUSH
34007: DOUBLE
34008: LD_INT 1
34010: DEC
34011: ST_TO_ADDR
34012: LD_VAR 0 13
34016: PUSH
34017: FOR_TO
34018: IFFALSE 34380
// begin InitHc ;
34020: CALL_OW 19
// if not f then
34024: LD_VAR 0 12
34028: NOT
34029: IFFALSE 34118
// begin PrepareHuman ( false , i , skill ) ;
34031: LD_INT 0
34033: PPUSH
34034: LD_VAR 0 8
34038: PPUSH
34039: LD_VAR 0 4
34043: PPUSH
34044: CALL_OW 380
// un := CreateHuman ;
34048: LD_ADDR_VAR 0 14
34052: PUSH
34053: CALL_OW 44
34057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34058: LD_ADDR_VAR 0 7
34062: PUSH
34063: LD_VAR 0 7
34067: PPUSH
34068: LD_INT 1
34070: PPUSH
34071: LD_VAR 0 14
34075: PPUSH
34076: CALL_OW 2
34080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34081: LD_VAR 0 14
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 250
34095: PPUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 251
34105: PPUSH
34106: LD_INT 10
34108: PPUSH
34109: LD_INT 0
34111: PPUSH
34112: CALL_OW 50
// continue ;
34116: GO 34017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34118: LD_VAR 0 12
34122: PUSH
34123: LD_INT 1
34125: ARRAY
34126: PPUSH
34127: CALL_OW 313
34131: PUSH
34132: LD_VAR 0 12
34136: PUSH
34137: LD_INT 1
34139: ARRAY
34140: PPUSH
34141: CALL_OW 266
34145: PUSH
34146: LD_INT 32
34148: PUSH
34149: LD_INT 31
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: IN
34156: AND
34157: PUSH
34158: LD_VAR 0 12
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: PPUSH
34167: CALL_OW 313
34171: PUSH
34172: LD_INT 6
34174: EQUAL
34175: OR
34176: IFFALSE 34196
// f := Delete ( f , 1 ) ;
34178: LD_ADDR_VAR 0 12
34182: PUSH
34183: LD_VAR 0 12
34187: PPUSH
34188: LD_INT 1
34190: PPUSH
34191: CALL_OW 3
34195: ST_TO_ADDR
// if not f then
34196: LD_VAR 0 12
34200: NOT
34201: IFFALSE 34219
// begin x := x + 2 ;
34203: LD_ADDR_VAR 0 13
34207: PUSH
34208: LD_VAR 0 13
34212: PUSH
34213: LD_INT 2
34215: PLUS
34216: ST_TO_ADDR
// continue ;
34217: GO 34017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34219: LD_VAR 0 12
34223: PUSH
34224: LD_INT 1
34226: ARRAY
34227: PPUSH
34228: CALL_OW 266
34232: PUSH
34233: LD_INT 5
34235: EQUAL
34236: IFFALSE 34310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34238: LD_VAR 0 12
34242: PUSH
34243: LD_INT 1
34245: ARRAY
34246: PPUSH
34247: CALL_OW 313
34251: PUSH
34252: LD_INT 3
34254: LESS
34255: IFFALSE 34291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34257: LD_INT 0
34259: PPUSH
34260: LD_INT 5
34262: PUSH
34263: LD_INT 8
34265: PUSH
34266: LD_INT 9
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: PUSH
34274: LD_VAR 0 17
34278: ARRAY
34279: PPUSH
34280: LD_VAR 0 4
34284: PPUSH
34285: CALL_OW 380
34289: GO 34308
// PrepareHuman ( false , i , skill ) ;
34291: LD_INT 0
34293: PPUSH
34294: LD_VAR 0 8
34298: PPUSH
34299: LD_VAR 0 4
34303: PPUSH
34304: CALL_OW 380
// end else
34308: GO 34327
// PrepareHuman ( false , i , skill ) ;
34310: LD_INT 0
34312: PPUSH
34313: LD_VAR 0 8
34317: PPUSH
34318: LD_VAR 0 4
34322: PPUSH
34323: CALL_OW 380
// un := CreateHuman ;
34327: LD_ADDR_VAR 0 14
34331: PUSH
34332: CALL_OW 44
34336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34337: LD_ADDR_VAR 0 7
34341: PUSH
34342: LD_VAR 0 7
34346: PPUSH
34347: LD_INT 1
34349: PPUSH
34350: LD_VAR 0 14
34354: PPUSH
34355: CALL_OW 2
34359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34360: LD_VAR 0 14
34364: PPUSH
34365: LD_VAR 0 12
34369: PUSH
34370: LD_INT 1
34372: ARRAY
34373: PPUSH
34374: CALL_OW 52
// end ;
34378: GO 34017
34380: POP
34381: POP
// end ;
34382: GO 33319
34384: POP
34385: POP
// result := result ^ buildings ;
34386: LD_ADDR_VAR 0 7
34390: PUSH
34391: LD_VAR 0 7
34395: PUSH
34396: LD_VAR 0 18
34400: ADD
34401: ST_TO_ADDR
// end else
34402: GO 34545
// begin for i = 1 to personel do
34404: LD_ADDR_VAR 0 8
34408: PUSH
34409: DOUBLE
34410: LD_INT 1
34412: DEC
34413: ST_TO_ADDR
34414: LD_VAR 0 6
34418: PUSH
34419: FOR_TO
34420: IFFALSE 34543
// begin if i > 4 then
34422: LD_VAR 0 8
34426: PUSH
34427: LD_INT 4
34429: GREATER
34430: IFFALSE 34434
// break ;
34432: GO 34543
// x := personel [ i ] ;
34434: LD_ADDR_VAR 0 13
34438: PUSH
34439: LD_VAR 0 6
34443: PUSH
34444: LD_VAR 0 8
34448: ARRAY
34449: ST_TO_ADDR
// if x = - 1 then
34450: LD_VAR 0 13
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: EQUAL
34459: IFFALSE 34463
// continue ;
34461: GO 34419
// PrepareHuman ( false , i , skill ) ;
34463: LD_INT 0
34465: PPUSH
34466: LD_VAR 0 8
34470: PPUSH
34471: LD_VAR 0 4
34475: PPUSH
34476: CALL_OW 380
// un := CreateHuman ;
34480: LD_ADDR_VAR 0 14
34484: PUSH
34485: CALL_OW 44
34489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34490: LD_VAR 0 14
34494: PPUSH
34495: LD_VAR 0 1
34499: PPUSH
34500: CALL_OW 250
34504: PPUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 251
34514: PPUSH
34515: LD_INT 10
34517: PPUSH
34518: LD_INT 0
34520: PPUSH
34521: CALL_OW 50
// result := result ^ un ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 7
34534: PUSH
34535: LD_VAR 0 14
34539: ADD
34540: ST_TO_ADDR
// end ;
34541: GO 34419
34543: POP
34544: POP
// end ; end ;
34545: LD_VAR 0 7
34549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34550: LD_INT 0
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
34560: PPUSH
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
// result := false ;
34568: LD_ADDR_VAR 0 3
34572: PUSH
34573: LD_INT 0
34575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34576: LD_VAR 0 1
34580: NOT
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 266
34591: PUSH
34592: LD_INT 32
34594: PUSH
34595: LD_INT 33
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: IN
34602: NOT
34603: OR
34604: IFFALSE 34608
// exit ;
34606: GO 35717
// nat := GetNation ( tower ) ;
34608: LD_ADDR_VAR 0 12
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 248
34622: ST_TO_ADDR
// side := GetSide ( tower ) ;
34623: LD_ADDR_VAR 0 16
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 255
34637: ST_TO_ADDR
// x := GetX ( tower ) ;
34638: LD_ADDR_VAR 0 10
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 250
34652: ST_TO_ADDR
// y := GetY ( tower ) ;
34653: LD_ADDR_VAR 0 11
34657: PUSH
34658: LD_VAR 0 1
34662: PPUSH
34663: CALL_OW 251
34667: ST_TO_ADDR
// if not x or not y then
34668: LD_VAR 0 10
34672: NOT
34673: PUSH
34674: LD_VAR 0 11
34678: NOT
34679: OR
34680: IFFALSE 34684
// exit ;
34682: GO 35717
// weapon := 0 ;
34684: LD_ADDR_VAR 0 18
34688: PUSH
34689: LD_INT 0
34691: ST_TO_ADDR
// fac_list := [ ] ;
34692: LD_ADDR_VAR 0 17
34696: PUSH
34697: EMPTY
34698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34699: LD_ADDR_VAR 0 6
34703: PUSH
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 274
34713: PPUSH
34714: LD_VAR 0 2
34718: PPUSH
34719: LD_INT 0
34721: PPUSH
34722: CALL 32288 0 3
34726: PPUSH
34727: LD_INT 30
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PPUSH
34737: CALL_OW 72
34741: ST_TO_ADDR
// if not factories then
34742: LD_VAR 0 6
34746: NOT
34747: IFFALSE 34751
// exit ;
34749: GO 35717
// for i in factories do
34751: LD_ADDR_VAR 0 8
34755: PUSH
34756: LD_VAR 0 6
34760: PUSH
34761: FOR_IN
34762: IFFALSE 34787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34764: LD_ADDR_VAR 0 17
34768: PUSH
34769: LD_VAR 0 17
34773: PUSH
34774: LD_VAR 0 8
34778: PPUSH
34779: CALL_OW 478
34783: UNION
34784: ST_TO_ADDR
34785: GO 34761
34787: POP
34788: POP
// if not fac_list then
34789: LD_VAR 0 17
34793: NOT
34794: IFFALSE 34798
// exit ;
34796: GO 35717
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_INT 4
34805: PUSH
34806: LD_INT 5
34808: PUSH
34809: LD_INT 9
34811: PUSH
34812: LD_INT 10
34814: PUSH
34815: LD_INT 6
34817: PUSH
34818: LD_INT 7
34820: PUSH
34821: LD_INT 11
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 27
34835: PUSH
34836: LD_INT 28
34838: PUSH
34839: LD_INT 26
34841: PUSH
34842: LD_INT 30
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 43
34853: PUSH
34854: LD_INT 44
34856: PUSH
34857: LD_INT 46
34859: PUSH
34860: LD_INT 45
34862: PUSH
34863: LD_INT 47
34865: PUSH
34866: LD_INT 49
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: PUSH
34882: LD_VAR 0 12
34886: ARRAY
34887: ST_TO_ADDR
// list := list isect fac_list ;
34888: LD_ADDR_VAR 0 5
34892: PUSH
34893: LD_VAR 0 5
34897: PUSH
34898: LD_VAR 0 17
34902: ISECT
34903: ST_TO_ADDR
// if not list then
34904: LD_VAR 0 5
34908: NOT
34909: IFFALSE 34913
// exit ;
34911: GO 35717
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34913: LD_VAR 0 12
34917: PUSH
34918: LD_INT 3
34920: EQUAL
34921: PUSH
34922: LD_INT 49
34924: PUSH
34925: LD_VAR 0 5
34929: IN
34930: AND
34931: PUSH
34932: LD_INT 31
34934: PPUSH
34935: LD_VAR 0 16
34939: PPUSH
34940: CALL_OW 321
34944: PUSH
34945: LD_INT 2
34947: EQUAL
34948: AND
34949: IFFALSE 35009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34951: LD_INT 22
34953: PUSH
34954: LD_VAR 0 16
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 35
34965: PUSH
34966: LD_INT 49
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 91
34975: PUSH
34976: LD_VAR 0 1
34980: PUSH
34981: LD_INT 10
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: PPUSH
34994: CALL_OW 69
34998: NOT
34999: IFFALSE 35009
// weapon := ru_time_lapser ;
35001: LD_ADDR_VAR 0 18
35005: PUSH
35006: LD_INT 49
35008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35009: LD_VAR 0 12
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: IN
35024: PUSH
35025: LD_INT 11
35027: PUSH
35028: LD_VAR 0 5
35032: IN
35033: PUSH
35034: LD_INT 30
35036: PUSH
35037: LD_VAR 0 5
35041: IN
35042: OR
35043: AND
35044: PUSH
35045: LD_INT 6
35047: PPUSH
35048: LD_VAR 0 16
35052: PPUSH
35053: CALL_OW 321
35057: PUSH
35058: LD_INT 2
35060: EQUAL
35061: AND
35062: IFFALSE 35227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35064: LD_INT 22
35066: PUSH
35067: LD_VAR 0 16
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: LD_INT 35
35081: PUSH
35082: LD_INT 11
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 35
35091: PUSH
35092: LD_INT 30
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 91
35106: PUSH
35107: LD_VAR 0 1
35111: PUSH
35112: LD_INT 18
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: PPUSH
35125: CALL_OW 69
35129: NOT
35130: PUSH
35131: LD_INT 22
35133: PUSH
35134: LD_VAR 0 16
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 30
35148: PUSH
35149: LD_INT 32
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 30
35158: PUSH
35159: LD_INT 33
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 91
35173: PUSH
35174: LD_VAR 0 1
35178: PUSH
35179: LD_INT 12
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: LIST
35191: PUSH
35192: EMPTY
35193: LIST
35194: PPUSH
35195: CALL_OW 69
35199: PUSH
35200: LD_INT 2
35202: GREATER
35203: AND
35204: IFFALSE 35227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35206: LD_ADDR_VAR 0 18
35210: PUSH
35211: LD_INT 11
35213: PUSH
35214: LD_INT 30
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_VAR 0 12
35225: ARRAY
35226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35227: LD_VAR 0 18
35231: NOT
35232: PUSH
35233: LD_INT 40
35235: PPUSH
35236: LD_VAR 0 16
35240: PPUSH
35241: CALL_OW 321
35245: PUSH
35246: LD_INT 2
35248: EQUAL
35249: AND
35250: PUSH
35251: LD_INT 7
35253: PUSH
35254: LD_VAR 0 5
35258: IN
35259: PUSH
35260: LD_INT 28
35262: PUSH
35263: LD_VAR 0 5
35267: IN
35268: OR
35269: PUSH
35270: LD_INT 45
35272: PUSH
35273: LD_VAR 0 5
35277: IN
35278: OR
35279: AND
35280: IFFALSE 35534
// begin hex := GetHexInfo ( x , y ) ;
35282: LD_ADDR_VAR 0 4
35286: PUSH
35287: LD_VAR 0 10
35291: PPUSH
35292: LD_VAR 0 11
35296: PPUSH
35297: CALL_OW 546
35301: ST_TO_ADDR
// if hex [ 1 ] then
35302: LD_VAR 0 4
35306: PUSH
35307: LD_INT 1
35309: ARRAY
35310: IFFALSE 35314
// exit ;
35312: GO 35717
// height := hex [ 2 ] ;
35314: LD_ADDR_VAR 0 15
35318: PUSH
35319: LD_VAR 0 4
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35328: LD_ADDR_VAR 0 14
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 3
35341: PUSH
35342: LD_INT 5
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// for i in tmp do
35351: LD_ADDR_VAR 0 8
35355: PUSH
35356: LD_VAR 0 14
35360: PUSH
35361: FOR_IN
35362: IFFALSE 35532
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_VAR 0 10
35373: PPUSH
35374: LD_VAR 0 8
35378: PPUSH
35379: LD_INT 5
35381: PPUSH
35382: CALL_OW 272
35386: PUSH
35387: LD_VAR 0 11
35391: PPUSH
35392: LD_VAR 0 8
35396: PPUSH
35397: LD_INT 5
35399: PPUSH
35400: CALL_OW 273
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35409: LD_VAR 0 9
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PPUSH
35418: LD_VAR 0 9
35422: PUSH
35423: LD_INT 2
35425: ARRAY
35426: PPUSH
35427: CALL_OW 488
35431: IFFALSE 35530
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35433: LD_ADDR_VAR 0 4
35437: PUSH
35438: LD_VAR 0 9
35442: PUSH
35443: LD_INT 1
35445: ARRAY
35446: PPUSH
35447: LD_VAR 0 9
35451: PUSH
35452: LD_INT 2
35454: ARRAY
35455: PPUSH
35456: CALL_OW 546
35460: ST_TO_ADDR
// if hex [ 1 ] then
35461: LD_VAR 0 4
35465: PUSH
35466: LD_INT 1
35468: ARRAY
35469: IFFALSE 35473
// continue ;
35471: GO 35361
// h := hex [ 2 ] ;
35473: LD_ADDR_VAR 0 13
35477: PUSH
35478: LD_VAR 0 4
35482: PUSH
35483: LD_INT 2
35485: ARRAY
35486: ST_TO_ADDR
// if h + 7 < height then
35487: LD_VAR 0 13
35491: PUSH
35492: LD_INT 7
35494: PLUS
35495: PUSH
35496: LD_VAR 0 15
35500: LESS
35501: IFFALSE 35530
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35503: LD_ADDR_VAR 0 18
35507: PUSH
35508: LD_INT 7
35510: PUSH
35511: LD_INT 28
35513: PUSH
35514: LD_INT 45
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: PUSH
35522: LD_VAR 0 12
35526: ARRAY
35527: ST_TO_ADDR
// break ;
35528: GO 35532
// end ; end ; end ;
35530: GO 35361
35532: POP
35533: POP
// end ; if not weapon then
35534: LD_VAR 0 18
35538: NOT
35539: IFFALSE 35599
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35541: LD_ADDR_VAR 0 5
35545: PUSH
35546: LD_VAR 0 5
35550: PUSH
35551: LD_INT 11
35553: PUSH
35554: LD_INT 30
35556: PUSH
35557: LD_INT 49
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: DIFF
35565: ST_TO_ADDR
// if not list then
35566: LD_VAR 0 5
35570: NOT
35571: IFFALSE 35575
// exit ;
35573: GO 35717
// weapon := list [ rand ( 1 , list ) ] ;
35575: LD_ADDR_VAR 0 18
35579: PUSH
35580: LD_VAR 0 5
35584: PUSH
35585: LD_INT 1
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL_OW 12
35597: ARRAY
35598: ST_TO_ADDR
// end ; if weapon then
35599: LD_VAR 0 18
35603: IFFALSE 35717
// begin tmp := CostOfWeapon ( weapon ) ;
35605: LD_ADDR_VAR 0 14
35609: PUSH
35610: LD_VAR 0 18
35614: PPUSH
35615: CALL_OW 451
35619: ST_TO_ADDR
// j := GetBase ( tower ) ;
35620: LD_ADDR_VAR 0 9
35624: PUSH
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 274
35634: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35635: LD_VAR 0 9
35639: PPUSH
35640: LD_INT 1
35642: PPUSH
35643: CALL_OW 275
35647: PUSH
35648: LD_VAR 0 14
35652: PUSH
35653: LD_INT 1
35655: ARRAY
35656: GREATEREQUAL
35657: PUSH
35658: LD_VAR 0 9
35662: PPUSH
35663: LD_INT 2
35665: PPUSH
35666: CALL_OW 275
35670: PUSH
35671: LD_VAR 0 14
35675: PUSH
35676: LD_INT 2
35678: ARRAY
35679: GREATEREQUAL
35680: AND
35681: PUSH
35682: LD_VAR 0 9
35686: PPUSH
35687: LD_INT 3
35689: PPUSH
35690: CALL_OW 275
35694: PUSH
35695: LD_VAR 0 14
35699: PUSH
35700: LD_INT 3
35702: ARRAY
35703: GREATEREQUAL
35704: AND
35705: IFFALSE 35717
// result := weapon ;
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_VAR 0 18
35716: ST_TO_ADDR
// end ; end ;
35717: LD_VAR 0 3
35721: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35722: LD_INT 0
35724: PPUSH
35725: PPUSH
// result := true ;
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_INT 1
35733: ST_TO_ADDR
// if array1 = array2 then
35734: LD_VAR 0 1
35738: PUSH
35739: LD_VAR 0 2
35743: EQUAL
35744: IFFALSE 35804
// begin for i = 1 to array1 do
35746: LD_ADDR_VAR 0 4
35750: PUSH
35751: DOUBLE
35752: LD_INT 1
35754: DEC
35755: ST_TO_ADDR
35756: LD_VAR 0 1
35760: PUSH
35761: FOR_TO
35762: IFFALSE 35800
// if array1 [ i ] <> array2 [ i ] then
35764: LD_VAR 0 1
35768: PUSH
35769: LD_VAR 0 4
35773: ARRAY
35774: PUSH
35775: LD_VAR 0 2
35779: PUSH
35780: LD_VAR 0 4
35784: ARRAY
35785: NONEQUAL
35786: IFFALSE 35798
// begin result := false ;
35788: LD_ADDR_VAR 0 3
35792: PUSH
35793: LD_INT 0
35795: ST_TO_ADDR
// break ;
35796: GO 35800
// end ;
35798: GO 35761
35800: POP
35801: POP
// end else
35802: GO 35812
// result := false ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 0
35811: ST_TO_ADDR
// end ;
35812: LD_VAR 0 3
35816: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35817: LD_INT 0
35819: PPUSH
35820: PPUSH
// if not array1 or not array2 then
35821: LD_VAR 0 1
35825: NOT
35826: PUSH
35827: LD_VAR 0 2
35831: NOT
35832: OR
35833: IFFALSE 35837
// exit ;
35835: GO 35901
// result := true ;
35837: LD_ADDR_VAR 0 3
35841: PUSH
35842: LD_INT 1
35844: ST_TO_ADDR
// for i = 1 to array1 do
35845: LD_ADDR_VAR 0 4
35849: PUSH
35850: DOUBLE
35851: LD_INT 1
35853: DEC
35854: ST_TO_ADDR
35855: LD_VAR 0 1
35859: PUSH
35860: FOR_TO
35861: IFFALSE 35899
// if array1 [ i ] <> array2 [ i ] then
35863: LD_VAR 0 1
35867: PUSH
35868: LD_VAR 0 4
35872: ARRAY
35873: PUSH
35874: LD_VAR 0 2
35878: PUSH
35879: LD_VAR 0 4
35883: ARRAY
35884: NONEQUAL
35885: IFFALSE 35897
// begin result := false ;
35887: LD_ADDR_VAR 0 3
35891: PUSH
35892: LD_INT 0
35894: ST_TO_ADDR
// break ;
35895: GO 35899
// end ;
35897: GO 35860
35899: POP
35900: POP
// end ;
35901: LD_VAR 0 3
35905: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35906: LD_INT 0
35908: PPUSH
35909: PPUSH
35910: PPUSH
// pom := GetBase ( fac ) ;
35911: LD_ADDR_VAR 0 5
35915: PUSH
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL_OW 274
35925: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35926: LD_ADDR_VAR 0 4
35930: PUSH
35931: LD_VAR 0 2
35935: PUSH
35936: LD_INT 1
35938: ARRAY
35939: PPUSH
35940: LD_VAR 0 2
35944: PUSH
35945: LD_INT 2
35947: ARRAY
35948: PPUSH
35949: LD_VAR 0 2
35953: PUSH
35954: LD_INT 3
35956: ARRAY
35957: PPUSH
35958: LD_VAR 0 2
35962: PUSH
35963: LD_INT 4
35965: ARRAY
35966: PPUSH
35967: CALL_OW 449
35971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35972: LD_ADDR_VAR 0 3
35976: PUSH
35977: LD_VAR 0 5
35981: PPUSH
35982: LD_INT 1
35984: PPUSH
35985: CALL_OW 275
35989: PUSH
35990: LD_VAR 0 4
35994: PUSH
35995: LD_INT 1
35997: ARRAY
35998: GREATEREQUAL
35999: PUSH
36000: LD_VAR 0 5
36004: PPUSH
36005: LD_INT 2
36007: PPUSH
36008: CALL_OW 275
36012: PUSH
36013: LD_VAR 0 4
36017: PUSH
36018: LD_INT 2
36020: ARRAY
36021: GREATEREQUAL
36022: AND
36023: PUSH
36024: LD_VAR 0 5
36028: PPUSH
36029: LD_INT 3
36031: PPUSH
36032: CALL_OW 275
36036: PUSH
36037: LD_VAR 0 4
36041: PUSH
36042: LD_INT 3
36044: ARRAY
36045: GREATEREQUAL
36046: AND
36047: ST_TO_ADDR
// end ;
36048: LD_VAR 0 3
36052: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36053: LD_INT 0
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
// pom := GetBase ( building ) ;
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_VAR 0 1
36068: PPUSH
36069: CALL_OW 274
36073: ST_TO_ADDR
// if not pom then
36074: LD_VAR 0 3
36078: NOT
36079: IFFALSE 36083
// exit ;
36081: GO 36253
// btype := GetBType ( building ) ;
36083: LD_ADDR_VAR 0 5
36087: PUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL_OW 266
36097: ST_TO_ADDR
// if btype = b_armoury then
36098: LD_VAR 0 5
36102: PUSH
36103: LD_INT 4
36105: EQUAL
36106: IFFALSE 36116
// btype := b_barracks ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_INT 5
36115: ST_TO_ADDR
// if btype = b_depot then
36116: LD_VAR 0 5
36120: PUSH
36121: LD_INT 0
36123: EQUAL
36124: IFFALSE 36134
// btype := b_warehouse ;
36126: LD_ADDR_VAR 0 5
36130: PUSH
36131: LD_INT 1
36133: ST_TO_ADDR
// if btype = b_workshop then
36134: LD_VAR 0 5
36138: PUSH
36139: LD_INT 2
36141: EQUAL
36142: IFFALSE 36152
// btype := b_factory ;
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: LD_INT 3
36151: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36152: LD_ADDR_VAR 0 4
36156: PUSH
36157: LD_VAR 0 5
36161: PPUSH
36162: LD_VAR 0 1
36166: PPUSH
36167: CALL_OW 248
36171: PPUSH
36172: CALL_OW 450
36176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36177: LD_ADDR_VAR 0 2
36181: PUSH
36182: LD_VAR 0 3
36186: PPUSH
36187: LD_INT 1
36189: PPUSH
36190: CALL_OW 275
36194: PUSH
36195: LD_VAR 0 4
36199: PUSH
36200: LD_INT 1
36202: ARRAY
36203: GREATEREQUAL
36204: PUSH
36205: LD_VAR 0 3
36209: PPUSH
36210: LD_INT 2
36212: PPUSH
36213: CALL_OW 275
36217: PUSH
36218: LD_VAR 0 4
36222: PUSH
36223: LD_INT 2
36225: ARRAY
36226: GREATEREQUAL
36227: AND
36228: PUSH
36229: LD_VAR 0 3
36233: PPUSH
36234: LD_INT 3
36236: PPUSH
36237: CALL_OW 275
36241: PUSH
36242: LD_VAR 0 4
36246: PUSH
36247: LD_INT 3
36249: ARRAY
36250: GREATEREQUAL
36251: AND
36252: ST_TO_ADDR
// end ;
36253: LD_VAR 0 2
36257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36258: LD_INT 0
36260: PPUSH
36261: PPUSH
36262: PPUSH
// pom := GetBase ( building ) ;
36263: LD_ADDR_VAR 0 4
36267: PUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 274
36277: ST_TO_ADDR
// if not pom then
36278: LD_VAR 0 4
36282: NOT
36283: IFFALSE 36287
// exit ;
36285: GO 36388
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36287: LD_ADDR_VAR 0 5
36291: PUSH
36292: LD_VAR 0 2
36296: PPUSH
36297: LD_VAR 0 1
36301: PPUSH
36302: CALL_OW 248
36306: PPUSH
36307: CALL_OW 450
36311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36312: LD_ADDR_VAR 0 3
36316: PUSH
36317: LD_VAR 0 4
36321: PPUSH
36322: LD_INT 1
36324: PPUSH
36325: CALL_OW 275
36329: PUSH
36330: LD_VAR 0 5
36334: PUSH
36335: LD_INT 1
36337: ARRAY
36338: GREATEREQUAL
36339: PUSH
36340: LD_VAR 0 4
36344: PPUSH
36345: LD_INT 2
36347: PPUSH
36348: CALL_OW 275
36352: PUSH
36353: LD_VAR 0 5
36357: PUSH
36358: LD_INT 2
36360: ARRAY
36361: GREATEREQUAL
36362: AND
36363: PUSH
36364: LD_VAR 0 4
36368: PPUSH
36369: LD_INT 3
36371: PPUSH
36372: CALL_OW 275
36376: PUSH
36377: LD_VAR 0 5
36381: PUSH
36382: LD_INT 3
36384: ARRAY
36385: GREATEREQUAL
36386: AND
36387: ST_TO_ADDR
// end ;
36388: LD_VAR 0 3
36392: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36393: LD_INT 0
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
// result := false ;
36406: LD_ADDR_VAR 0 8
36410: PUSH
36411: LD_INT 0
36413: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36414: LD_VAR 0 5
36418: NOT
36419: PUSH
36420: LD_VAR 0 1
36424: NOT
36425: OR
36426: PUSH
36427: LD_VAR 0 2
36431: NOT
36432: OR
36433: PUSH
36434: LD_VAR 0 3
36438: NOT
36439: OR
36440: IFFALSE 36444
// exit ;
36442: GO 37258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36444: LD_ADDR_VAR 0 14
36448: PUSH
36449: LD_VAR 0 1
36453: PPUSH
36454: LD_VAR 0 2
36458: PPUSH
36459: LD_VAR 0 3
36463: PPUSH
36464: LD_VAR 0 4
36468: PPUSH
36469: LD_VAR 0 5
36473: PUSH
36474: LD_INT 1
36476: ARRAY
36477: PPUSH
36478: CALL_OW 248
36482: PPUSH
36483: LD_INT 0
36485: PPUSH
36486: CALL 38491 0 6
36490: ST_TO_ADDR
// if not hexes then
36491: LD_VAR 0 14
36495: NOT
36496: IFFALSE 36500
// exit ;
36498: GO 37258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36500: LD_ADDR_VAR 0 17
36504: PUSH
36505: LD_VAR 0 5
36509: PPUSH
36510: LD_INT 22
36512: PUSH
36513: LD_VAR 0 13
36517: PPUSH
36518: CALL_OW 255
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: LD_INT 30
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 30
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PPUSH
36559: CALL_OW 72
36563: ST_TO_ADDR
// for i = 1 to hexes do
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: DOUBLE
36570: LD_INT 1
36572: DEC
36573: ST_TO_ADDR
36574: LD_VAR 0 14
36578: PUSH
36579: FOR_TO
36580: IFFALSE 37256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36582: LD_ADDR_VAR 0 13
36586: PUSH
36587: LD_VAR 0 14
36591: PUSH
36592: LD_VAR 0 9
36596: ARRAY
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: LD_VAR 0 14
36606: PUSH
36607: LD_VAR 0 9
36611: ARRAY
36612: PUSH
36613: LD_INT 2
36615: ARRAY
36616: PPUSH
36617: CALL_OW 428
36621: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36622: LD_VAR 0 14
36626: PUSH
36627: LD_VAR 0 9
36631: ARRAY
36632: PUSH
36633: LD_INT 1
36635: ARRAY
36636: PPUSH
36637: LD_VAR 0 14
36641: PUSH
36642: LD_VAR 0 9
36646: ARRAY
36647: PUSH
36648: LD_INT 2
36650: ARRAY
36651: PPUSH
36652: CALL_OW 351
36656: PUSH
36657: LD_VAR 0 14
36661: PUSH
36662: LD_VAR 0 9
36666: ARRAY
36667: PUSH
36668: LD_INT 1
36670: ARRAY
36671: PPUSH
36672: LD_VAR 0 14
36676: PUSH
36677: LD_VAR 0 9
36681: ARRAY
36682: PUSH
36683: LD_INT 2
36685: ARRAY
36686: PPUSH
36687: CALL_OW 488
36691: NOT
36692: OR
36693: PUSH
36694: LD_VAR 0 13
36698: PPUSH
36699: CALL_OW 247
36703: PUSH
36704: LD_INT 3
36706: EQUAL
36707: OR
36708: IFFALSE 36714
// exit ;
36710: POP
36711: POP
36712: GO 37258
// if not tmp then
36714: LD_VAR 0 13
36718: NOT
36719: IFFALSE 36723
// continue ;
36721: GO 36579
// result := true ;
36723: LD_ADDR_VAR 0 8
36727: PUSH
36728: LD_INT 1
36730: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36731: LD_VAR 0 6
36735: PUSH
36736: LD_VAR 0 13
36740: PPUSH
36741: CALL_OW 247
36745: PUSH
36746: LD_INT 2
36748: EQUAL
36749: AND
36750: PUSH
36751: LD_VAR 0 13
36755: PPUSH
36756: CALL_OW 263
36760: PUSH
36761: LD_INT 1
36763: EQUAL
36764: AND
36765: IFFALSE 36929
// begin if IsDrivenBy ( tmp ) then
36767: LD_VAR 0 13
36771: PPUSH
36772: CALL_OW 311
36776: IFFALSE 36780
// continue ;
36778: GO 36579
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36780: LD_VAR 0 6
36784: PPUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 60
36790: PUSH
36791: EMPTY
36792: LIST
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 55
36803: PUSH
36804: EMPTY
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PPUSH
36815: CALL_OW 72
36819: IFFALSE 36927
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36821: LD_ADDR_VAR 0 18
36825: PUSH
36826: LD_VAR 0 6
36830: PPUSH
36831: LD_INT 3
36833: PUSH
36834: LD_INT 60
36836: PUSH
36837: EMPTY
36838: LIST
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 3
36846: PUSH
36847: LD_INT 55
36849: PUSH
36850: EMPTY
36851: LIST
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PPUSH
36861: CALL_OW 72
36865: PUSH
36866: LD_INT 1
36868: ARRAY
36869: ST_TO_ADDR
// if IsInUnit ( driver ) then
36870: LD_VAR 0 18
36874: PPUSH
36875: CALL_OW 310
36879: IFFALSE 36890
// ComExit ( driver ) ;
36881: LD_VAR 0 18
36885: PPUSH
36886: CALL 62179 0 1
// AddComEnterUnit ( driver , tmp ) ;
36890: LD_VAR 0 18
36894: PPUSH
36895: LD_VAR 0 13
36899: PPUSH
36900: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36904: LD_VAR 0 18
36908: PPUSH
36909: LD_VAR 0 7
36913: PPUSH
36914: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36918: LD_VAR 0 18
36922: PPUSH
36923: CALL_OW 181
// end ; continue ;
36927: GO 36579
// end ; if not cleaners or not tmp in cleaners then
36929: LD_VAR 0 6
36933: NOT
36934: PUSH
36935: LD_VAR 0 13
36939: PUSH
36940: LD_VAR 0 6
36944: IN
36945: NOT
36946: OR
36947: IFFALSE 37254
// begin if dep then
36949: LD_VAR 0 17
36953: IFFALSE 37089
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36955: LD_ADDR_VAR 0 16
36959: PUSH
36960: LD_VAR 0 17
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: PPUSH
36969: CALL_OW 250
36973: PPUSH
36974: LD_VAR 0 17
36978: PUSH
36979: LD_INT 1
36981: ARRAY
36982: PPUSH
36983: CALL_OW 254
36987: PPUSH
36988: LD_INT 5
36990: PPUSH
36991: CALL_OW 272
36995: PUSH
36996: LD_VAR 0 17
37000: PUSH
37001: LD_INT 1
37003: ARRAY
37004: PPUSH
37005: CALL_OW 251
37009: PPUSH
37010: LD_VAR 0 17
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: CALL_OW 254
37023: PPUSH
37024: LD_INT 5
37026: PPUSH
37027: CALL_OW 273
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37036: LD_VAR 0 16
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: LD_VAR 0 16
37049: PUSH
37050: LD_INT 2
37052: ARRAY
37053: PPUSH
37054: CALL_OW 488
37058: IFFALSE 37089
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37060: LD_VAR 0 13
37064: PPUSH
37065: LD_VAR 0 16
37069: PUSH
37070: LD_INT 1
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 16
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: PPUSH
37083: CALL_OW 111
// continue ;
37087: GO 36579
// end ; end ; r := GetDir ( tmp ) ;
37089: LD_ADDR_VAR 0 15
37093: PUSH
37094: LD_VAR 0 13
37098: PPUSH
37099: CALL_OW 254
37103: ST_TO_ADDR
// if r = 5 then
37104: LD_VAR 0 15
37108: PUSH
37109: LD_INT 5
37111: EQUAL
37112: IFFALSE 37122
// r := 0 ;
37114: LD_ADDR_VAR 0 15
37118: PUSH
37119: LD_INT 0
37121: ST_TO_ADDR
// for j = r to 5 do
37122: LD_ADDR_VAR 0 10
37126: PUSH
37127: DOUBLE
37128: LD_VAR 0 15
37132: DEC
37133: ST_TO_ADDR
37134: LD_INT 5
37136: PUSH
37137: FOR_TO
37138: IFFALSE 37252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37140: LD_ADDR_VAR 0 11
37144: PUSH
37145: LD_VAR 0 13
37149: PPUSH
37150: CALL_OW 250
37154: PPUSH
37155: LD_VAR 0 10
37159: PPUSH
37160: LD_INT 2
37162: PPUSH
37163: CALL_OW 272
37167: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37168: LD_ADDR_VAR 0 12
37172: PUSH
37173: LD_VAR 0 13
37177: PPUSH
37178: CALL_OW 251
37182: PPUSH
37183: LD_VAR 0 10
37187: PPUSH
37188: LD_INT 2
37190: PPUSH
37191: CALL_OW 273
37195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37196: LD_VAR 0 11
37200: PPUSH
37201: LD_VAR 0 12
37205: PPUSH
37206: CALL_OW 488
37210: PUSH
37211: LD_VAR 0 11
37215: PPUSH
37216: LD_VAR 0 12
37220: PPUSH
37221: CALL_OW 428
37225: NOT
37226: AND
37227: IFFALSE 37250
// begin ComMoveXY ( tmp , _x , _y ) ;
37229: LD_VAR 0 13
37233: PPUSH
37234: LD_VAR 0 11
37238: PPUSH
37239: LD_VAR 0 12
37243: PPUSH
37244: CALL_OW 111
// break ;
37248: GO 37252
// end ; end ;
37250: GO 37137
37252: POP
37253: POP
// end ; end ;
37254: GO 36579
37256: POP
37257: POP
// end ;
37258: LD_VAR 0 8
37262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37263: LD_INT 0
37265: PPUSH
// result := true ;
37266: LD_ADDR_VAR 0 3
37270: PUSH
37271: LD_INT 1
37273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37274: LD_VAR 0 2
37278: PUSH
37279: LD_INT 24
37281: DOUBLE
37282: EQUAL
37283: IFTRUE 37293
37285: LD_INT 33
37287: DOUBLE
37288: EQUAL
37289: IFTRUE 37293
37291: GO 37318
37293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37294: LD_ADDR_VAR 0 3
37298: PUSH
37299: LD_INT 32
37301: PPUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 321
37311: PUSH
37312: LD_INT 2
37314: EQUAL
37315: ST_TO_ADDR
37316: GO 37634
37318: LD_INT 20
37320: DOUBLE
37321: EQUAL
37322: IFTRUE 37326
37324: GO 37351
37326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37327: LD_ADDR_VAR 0 3
37331: PUSH
37332: LD_INT 6
37334: PPUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 321
37344: PUSH
37345: LD_INT 2
37347: EQUAL
37348: ST_TO_ADDR
37349: GO 37634
37351: LD_INT 22
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37365
37357: LD_INT 36
37359: DOUBLE
37360: EQUAL
37361: IFTRUE 37365
37363: GO 37390
37365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37366: LD_ADDR_VAR 0 3
37370: PUSH
37371: LD_INT 15
37373: PPUSH
37374: LD_VAR 0 1
37378: PPUSH
37379: CALL_OW 321
37383: PUSH
37384: LD_INT 2
37386: EQUAL
37387: ST_TO_ADDR
37388: GO 37634
37390: LD_INT 30
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37398
37396: GO 37423
37398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37399: LD_ADDR_VAR 0 3
37403: PUSH
37404: LD_INT 20
37406: PPUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 321
37416: PUSH
37417: LD_INT 2
37419: EQUAL
37420: ST_TO_ADDR
37421: GO 37634
37423: LD_INT 28
37425: DOUBLE
37426: EQUAL
37427: IFTRUE 37437
37429: LD_INT 21
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37462
37437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37438: LD_ADDR_VAR 0 3
37442: PUSH
37443: LD_INT 21
37445: PPUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: CALL_OW 321
37455: PUSH
37456: LD_INT 2
37458: EQUAL
37459: ST_TO_ADDR
37460: GO 37634
37462: LD_INT 16
37464: DOUBLE
37465: EQUAL
37466: IFTRUE 37470
37468: GO 37495
37470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37471: LD_ADDR_VAR 0 3
37475: PUSH
37476: LD_INT 84
37478: PPUSH
37479: LD_VAR 0 1
37483: PPUSH
37484: CALL_OW 321
37488: PUSH
37489: LD_INT 2
37491: EQUAL
37492: ST_TO_ADDR
37493: GO 37634
37495: LD_INT 19
37497: DOUBLE
37498: EQUAL
37499: IFTRUE 37509
37501: LD_INT 23
37503: DOUBLE
37504: EQUAL
37505: IFTRUE 37509
37507: GO 37534
37509: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: LD_INT 83
37517: PPUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 321
37527: PUSH
37528: LD_INT 2
37530: EQUAL
37531: ST_TO_ADDR
37532: GO 37634
37534: LD_INT 17
37536: DOUBLE
37537: EQUAL
37538: IFTRUE 37542
37540: GO 37567
37542: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37543: LD_ADDR_VAR 0 3
37547: PUSH
37548: LD_INT 39
37550: PPUSH
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 321
37560: PUSH
37561: LD_INT 2
37563: EQUAL
37564: ST_TO_ADDR
37565: GO 37634
37567: LD_INT 18
37569: DOUBLE
37570: EQUAL
37571: IFTRUE 37575
37573: GO 37600
37575: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37576: LD_ADDR_VAR 0 3
37580: PUSH
37581: LD_INT 40
37583: PPUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 321
37593: PUSH
37594: LD_INT 2
37596: EQUAL
37597: ST_TO_ADDR
37598: GO 37634
37600: LD_INT 27
37602: DOUBLE
37603: EQUAL
37604: IFTRUE 37608
37606: GO 37633
37608: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37609: LD_ADDR_VAR 0 3
37613: PUSH
37614: LD_INT 35
37616: PPUSH
37617: LD_VAR 0 1
37621: PPUSH
37622: CALL_OW 321
37626: PUSH
37627: LD_INT 2
37629: EQUAL
37630: ST_TO_ADDR
37631: GO 37634
37633: POP
// end ;
37634: LD_VAR 0 3
37638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37639: LD_INT 0
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
37651: PPUSH
// result := false ;
37652: LD_ADDR_VAR 0 6
37656: PUSH
37657: LD_INT 0
37659: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37660: LD_VAR 0 1
37664: NOT
37665: PUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: CALL_OW 266
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: IN
37686: NOT
37687: OR
37688: PUSH
37689: LD_VAR 0 2
37693: NOT
37694: OR
37695: PUSH
37696: LD_VAR 0 5
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 2
37709: PUSH
37710: LD_INT 3
37712: PUSH
37713: LD_INT 4
37715: PUSH
37716: LD_INT 5
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: IN
37727: NOT
37728: OR
37729: PUSH
37730: LD_VAR 0 3
37734: PPUSH
37735: LD_VAR 0 4
37739: PPUSH
37740: CALL_OW 488
37744: NOT
37745: OR
37746: IFFALSE 37750
// exit ;
37748: GO 38486
// side := GetSide ( depot ) ;
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 255
37764: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37765: LD_VAR 0 9
37769: PPUSH
37770: LD_VAR 0 2
37774: PPUSH
37775: CALL 37263 0 2
37779: NOT
37780: IFFALSE 37784
// exit ;
37782: GO 38486
// pom := GetBase ( depot ) ;
37784: LD_ADDR_VAR 0 10
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 274
37798: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37799: LD_ADDR_VAR 0 11
37803: PUSH
37804: LD_VAR 0 2
37808: PPUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 248
37818: PPUSH
37819: CALL_OW 450
37823: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37824: LD_VAR 0 10
37828: PPUSH
37829: LD_INT 1
37831: PPUSH
37832: CALL_OW 275
37836: PUSH
37837: LD_VAR 0 11
37841: PUSH
37842: LD_INT 1
37844: ARRAY
37845: GREATEREQUAL
37846: PUSH
37847: LD_VAR 0 10
37851: PPUSH
37852: LD_INT 2
37854: PPUSH
37855: CALL_OW 275
37859: PUSH
37860: LD_VAR 0 11
37864: PUSH
37865: LD_INT 2
37867: ARRAY
37868: GREATEREQUAL
37869: AND
37870: PUSH
37871: LD_VAR 0 10
37875: PPUSH
37876: LD_INT 3
37878: PPUSH
37879: CALL_OW 275
37883: PUSH
37884: LD_VAR 0 11
37888: PUSH
37889: LD_INT 3
37891: ARRAY
37892: GREATEREQUAL
37893: AND
37894: NOT
37895: IFFALSE 37899
// exit ;
37897: GO 38486
// if GetBType ( depot ) = b_depot then
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 266
37908: PUSH
37909: LD_INT 0
37911: EQUAL
37912: IFFALSE 37924
// dist := 28 else
37914: LD_ADDR_VAR 0 14
37918: PUSH
37919: LD_INT 28
37921: ST_TO_ADDR
37922: GO 37932
// dist := 36 ;
37924: LD_ADDR_VAR 0 14
37928: PUSH
37929: LD_INT 36
37931: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37932: LD_VAR 0 1
37936: PPUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: LD_VAR 0 4
37946: PPUSH
37947: CALL_OW 297
37951: PUSH
37952: LD_VAR 0 14
37956: GREATER
37957: IFFALSE 37961
// exit ;
37959: GO 38486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37961: LD_ADDR_VAR 0 12
37965: PUSH
37966: LD_VAR 0 2
37970: PPUSH
37971: LD_VAR 0 3
37975: PPUSH
37976: LD_VAR 0 4
37980: PPUSH
37981: LD_VAR 0 5
37985: PPUSH
37986: LD_VAR 0 1
37990: PPUSH
37991: CALL_OW 248
37995: PPUSH
37996: LD_INT 0
37998: PPUSH
37999: CALL 38491 0 6
38003: ST_TO_ADDR
// if not hexes then
38004: LD_VAR 0 12
38008: NOT
38009: IFFALSE 38013
// exit ;
38011: GO 38486
// hex := GetHexInfo ( x , y ) ;
38013: LD_ADDR_VAR 0 15
38017: PUSH
38018: LD_VAR 0 3
38022: PPUSH
38023: LD_VAR 0 4
38027: PPUSH
38028: CALL_OW 546
38032: ST_TO_ADDR
// if hex [ 1 ] then
38033: LD_VAR 0 15
38037: PUSH
38038: LD_INT 1
38040: ARRAY
38041: IFFALSE 38045
// exit ;
38043: GO 38486
// height := hex [ 2 ] ;
38045: LD_ADDR_VAR 0 13
38049: PUSH
38050: LD_VAR 0 15
38054: PUSH
38055: LD_INT 2
38057: ARRAY
38058: ST_TO_ADDR
// for i = 1 to hexes do
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: DOUBLE
38065: LD_INT 1
38067: DEC
38068: ST_TO_ADDR
38069: LD_VAR 0 12
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38405
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38077: LD_VAR 0 12
38081: PUSH
38082: LD_VAR 0 7
38086: ARRAY
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PPUSH
38092: LD_VAR 0 12
38096: PUSH
38097: LD_VAR 0 7
38101: ARRAY
38102: PUSH
38103: LD_INT 2
38105: ARRAY
38106: PPUSH
38107: CALL_OW 488
38111: NOT
38112: PUSH
38113: LD_VAR 0 12
38117: PUSH
38118: LD_VAR 0 7
38122: ARRAY
38123: PUSH
38124: LD_INT 1
38126: ARRAY
38127: PPUSH
38128: LD_VAR 0 12
38132: PUSH
38133: LD_VAR 0 7
38137: ARRAY
38138: PUSH
38139: LD_INT 2
38141: ARRAY
38142: PPUSH
38143: CALL_OW 428
38147: PUSH
38148: LD_INT 0
38150: GREATER
38151: OR
38152: PUSH
38153: LD_VAR 0 12
38157: PUSH
38158: LD_VAR 0 7
38162: ARRAY
38163: PUSH
38164: LD_INT 1
38166: ARRAY
38167: PPUSH
38168: LD_VAR 0 12
38172: PUSH
38173: LD_VAR 0 7
38177: ARRAY
38178: PUSH
38179: LD_INT 2
38181: ARRAY
38182: PPUSH
38183: CALL_OW 351
38187: OR
38188: IFFALSE 38194
// exit ;
38190: POP
38191: POP
38192: GO 38486
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38194: LD_ADDR_VAR 0 8
38198: PUSH
38199: LD_VAR 0 12
38203: PUSH
38204: LD_VAR 0 7
38208: ARRAY
38209: PUSH
38210: LD_INT 1
38212: ARRAY
38213: PPUSH
38214: LD_VAR 0 12
38218: PUSH
38219: LD_VAR 0 7
38223: ARRAY
38224: PUSH
38225: LD_INT 2
38227: ARRAY
38228: PPUSH
38229: CALL_OW 546
38233: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38234: LD_VAR 0 8
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PUSH
38243: LD_VAR 0 8
38247: PUSH
38248: LD_INT 2
38250: ARRAY
38251: PUSH
38252: LD_VAR 0 13
38256: PUSH
38257: LD_INT 2
38259: PLUS
38260: GREATER
38261: OR
38262: PUSH
38263: LD_VAR 0 8
38267: PUSH
38268: LD_INT 2
38270: ARRAY
38271: PUSH
38272: LD_VAR 0 13
38276: PUSH
38277: LD_INT 2
38279: MINUS
38280: LESS
38281: OR
38282: PUSH
38283: LD_VAR 0 8
38287: PUSH
38288: LD_INT 3
38290: ARRAY
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 8
38297: PUSH
38298: LD_INT 9
38300: PUSH
38301: LD_INT 10
38303: PUSH
38304: LD_INT 11
38306: PUSH
38307: LD_INT 12
38309: PUSH
38310: LD_INT 13
38312: PUSH
38313: LD_INT 16
38315: PUSH
38316: LD_INT 17
38318: PUSH
38319: LD_INT 18
38321: PUSH
38322: LD_INT 19
38324: PUSH
38325: LD_INT 20
38327: PUSH
38328: LD_INT 21
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: IN
38346: NOT
38347: OR
38348: PUSH
38349: LD_VAR 0 8
38353: PUSH
38354: LD_INT 5
38356: ARRAY
38357: NOT
38358: OR
38359: PUSH
38360: LD_VAR 0 8
38364: PUSH
38365: LD_INT 6
38367: ARRAY
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: LD_INT 7
38377: PUSH
38378: LD_INT 9
38380: PUSH
38381: LD_INT 10
38383: PUSH
38384: LD_INT 11
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: IN
38395: NOT
38396: OR
38397: IFFALSE 38403
// exit ;
38399: POP
38400: POP
38401: GO 38486
// end ;
38403: GO 38074
38405: POP
38406: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38407: LD_VAR 0 9
38411: PPUSH
38412: LD_VAR 0 3
38416: PPUSH
38417: LD_VAR 0 4
38421: PPUSH
38422: LD_INT 20
38424: PPUSH
38425: CALL 30438 0 4
38429: PUSH
38430: LD_INT 4
38432: ARRAY
38433: IFFALSE 38437
// exit ;
38435: GO 38486
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38437: LD_VAR 0 2
38441: PUSH
38442: LD_INT 29
38444: PUSH
38445: LD_INT 30
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: IN
38452: PUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: LD_VAR 0 4
38462: PPUSH
38463: LD_VAR 0 9
38467: PPUSH
38468: CALL_OW 440
38472: NOT
38473: AND
38474: IFFALSE 38478
// exit ;
38476: GO 38486
// result := true ;
38478: LD_ADDR_VAR 0 6
38482: PUSH
38483: LD_INT 1
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 6
38490: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38491: LD_INT 0
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
// result = [ ] ;
38551: LD_ADDR_VAR 0 7
38555: PUSH
38556: EMPTY
38557: ST_TO_ADDR
// temp_list = [ ] ;
38558: LD_ADDR_VAR 0 9
38562: PUSH
38563: EMPTY
38564: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38565: LD_VAR 0 4
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 4
38584: PUSH
38585: LD_INT 5
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: IN
38596: NOT
38597: PUSH
38598: LD_VAR 0 1
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: IN
38613: PUSH
38614: LD_VAR 0 5
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: IN
38633: NOT
38634: AND
38635: OR
38636: IFFALSE 38640
// exit ;
38638: GO 57031
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38640: LD_VAR 0 1
38644: PUSH
38645: LD_INT 6
38647: PUSH
38648: LD_INT 7
38650: PUSH
38651: LD_INT 8
38653: PUSH
38654: LD_INT 13
38656: PUSH
38657: LD_INT 12
38659: PUSH
38660: LD_INT 15
38662: PUSH
38663: LD_INT 11
38665: PUSH
38666: LD_INT 14
38668: PUSH
38669: LD_INT 10
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: IN
38683: IFFALSE 38693
// btype = b_lab ;
38685: LD_ADDR_VAR 0 1
38689: PUSH
38690: LD_INT 6
38692: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38693: LD_VAR 0 6
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: IN
38712: NOT
38713: PUSH
38714: LD_VAR 0 1
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: LD_INT 6
38733: PUSH
38734: LD_INT 36
38736: PUSH
38737: LD_INT 4
38739: PUSH
38740: LD_INT 5
38742: PUSH
38743: LD_INT 31
38745: PUSH
38746: LD_INT 32
38748: PUSH
38749: LD_INT 33
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: IN
38765: NOT
38766: PUSH
38767: LD_VAR 0 6
38771: PUSH
38772: LD_INT 1
38774: EQUAL
38775: AND
38776: OR
38777: PUSH
38778: LD_VAR 0 1
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: IN
38793: NOT
38794: PUSH
38795: LD_VAR 0 6
38799: PUSH
38800: LD_INT 2
38802: EQUAL
38803: AND
38804: OR
38805: IFFALSE 38815
// mode = 0 ;
38807: LD_ADDR_VAR 0 6
38811: PUSH
38812: LD_INT 0
38814: ST_TO_ADDR
// case mode of 0 :
38815: LD_VAR 0 6
38819: PUSH
38820: LD_INT 0
38822: DOUBLE
38823: EQUAL
38824: IFTRUE 38828
38826: GO 50281
38828: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38829: LD_ADDR_VAR 0 11
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 3
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 2
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39022: LD_ADDR_VAR 0 12
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 1
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39218: LD_ADDR_VAR 0 13
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 3
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 3
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 3
39389: NEG
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39417: LD_ADDR_VAR 0 14
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39613: LD_ADDR_VAR 0 15
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39806: LD_ADDR_VAR 0 16
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 3
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39999: LD_ADDR_VAR 0 17
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40229: LD_ADDR_VAR 0 18
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40459: LD_ADDR_VAR 0 19
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40689: LD_ADDR_VAR 0 20
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40919: LD_ADDR_VAR 0 21
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41149: LD_ADDR_VAR 0 22
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: LD_INT 2
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41379: LD_ADDR_VAR 0 23
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41659: LD_ADDR_VAR 0 24
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 3
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41935: LD_ADDR_VAR 0 25
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 3
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42209: LD_ADDR_VAR 0 26
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42485: LD_ADDR_VAR 0 27
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42765: LD_ADDR_VAR 0 28
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43047: LD_ADDR_VAR 0 29
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43326: LD_ADDR_VAR 0 30
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: NEG
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 3
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43604: LD_ADDR_VAR 0 31
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 3
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43882: LD_ADDR_VAR 0 32
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 3
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44160: LD_ADDR_VAR 0 33
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 3
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44439: LD_ADDR_VAR 0 34
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: NEG
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 3
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44719: LD_ADDR_VAR 0 35
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44831: LD_ADDR_VAR 0 36
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44943: LD_ADDR_VAR 0 37
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45055: LD_ADDR_VAR 0 38
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45167: LD_ADDR_VAR 0 39
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45279: LD_ADDR_VAR 0 40
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45391: LD_ADDR_VAR 0 41
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 3
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: LD_INT 3
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45741: LD_ADDR_VAR 0 42
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 3
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 3
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46091: LD_ADDR_VAR 0 43
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46439: LD_ADDR_VAR 0 44
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46789: LD_ADDR_VAR 0 45
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 3
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 3
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47139: LD_ADDR_VAR 0 46
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 3
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47487: LD_ADDR_VAR 0 47
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 2
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47638: LD_ADDR_VAR 0 48
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 2
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47785: LD_ADDR_VAR 0 49
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47929: LD_ADDR_VAR 0 50
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48073: LD_ADDR_VAR 0 51
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48220: LD_ADDR_VAR 0 52
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48371: LD_ADDR_VAR 0 53
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48601: LD_ADDR_VAR 0 54
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48831: LD_ADDR_VAR 0 55
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49061: LD_ADDR_VAR 0 56
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49291: LD_ADDR_VAR 0 57
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49521: LD_ADDR_VAR 0 58
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 2
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49751: LD_ADDR_VAR 0 59
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 1
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49839: LD_ADDR_VAR 0 60
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49927: LD_ADDR_VAR 0 61
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50015: LD_ADDR_VAR 0 62
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50103: LD_ADDR_VAR 0 63
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50191: LD_ADDR_VAR 0 64
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// end ; 1 :
50279: GO 56176
50281: LD_INT 1
50283: DOUBLE
50284: EQUAL
50285: IFTRUE 50289
50287: GO 52912
50289: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50290: LD_ADDR_VAR 0 11
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 3
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50334: LD_ADDR_VAR 0 12
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 3
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 3
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50375: LD_ADDR_VAR 0 13
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50415: LD_ADDR_VAR 0 14
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50456: LD_ADDR_VAR 0 15
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 3
50474: NEG
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 3
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50500: LD_ADDR_VAR 0 16
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50546: LD_ADDR_VAR 0 17
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50590: LD_ADDR_VAR 0 18
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50631: LD_ADDR_VAR 0 19
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50671: LD_ADDR_VAR 0 20
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50712: LD_ADDR_VAR 0 21
50716: PUSH
50717: LD_INT 2
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 3
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50756: LD_ADDR_VAR 0 22
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 3
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: LD_INT 3
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50802: LD_ADDR_VAR 0 23
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50846: LD_ADDR_VAR 0 24
50850: PUSH
50851: LD_INT 3
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: LIST
50886: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50887: LD_ADDR_VAR 0 25
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 4
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50927: LD_ADDR_VAR 0 26
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50968: LD_ADDR_VAR 0 27
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 4
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: LIST
51011: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51012: LD_ADDR_VAR 0 28
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51058: LD_ADDR_VAR 0 29
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 3
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 3
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 4
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 5
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 4
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 6
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 6
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 5
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51213: LD_ADDR_VAR 0 30
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 4
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 5
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 5
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 6
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 6
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51356: LD_ADDR_VAR 0 31
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: PUSH
51404: LD_INT 4
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 5
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 5
51433: PUSH
51434: LD_INT 5
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 4
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 6
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 6
51463: PUSH
51464: LD_INT 6
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 5
51473: PUSH
51474: LD_INT 6
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51495: LD_ADDR_VAR 0 32
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 4
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 4
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 5
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 6
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 6
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51638: LD_ADDR_VAR 0 33
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: NEG
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 5
51724: NEG
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 5
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 5
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 6
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 6
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51793: LD_ADDR_VAR 0 34
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 3
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 4
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 4
51848: NEG
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: LD_INT 4
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: LD_INT 5
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 5
51884: NEG
51885: PUSH
51886: LD_INT 4
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: LD_INT 5
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 5
51908: NEG
51909: PUSH
51910: LD_INT 6
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 6
51920: NEG
51921: PUSH
51922: LD_INT 5
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 6
51932: NEG
51933: PUSH
51934: LD_INT 6
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51956: LD_ADDR_VAR 0 41
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52000: LD_ADDR_VAR 0 42
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52041: LD_ADDR_VAR 0 43
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52081: LD_ADDR_VAR 0 44
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52122: LD_ADDR_VAR 0 45
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52166: LD_ADDR_VAR 0 46
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52212: LD_ADDR_VAR 0 47
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52245: LD_ADDR_VAR 0 48
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52276: LD_ADDR_VAR 0 49
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52305: LD_ADDR_VAR 0 50
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52334: LD_ADDR_VAR 0 51
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52365: LD_ADDR_VAR 0 52
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52398: LD_ADDR_VAR 0 53
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52442: LD_ADDR_VAR 0 54
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52483: LD_ADDR_VAR 0 55
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52523: LD_ADDR_VAR 0 56
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: LIST
52563: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52564: LD_ADDR_VAR 0 57
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52608: LD_ADDR_VAR 0 58
52612: PUSH
52613: LD_INT 2
52615: NEG
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52654: LD_ADDR_VAR 0 59
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52698: LD_ADDR_VAR 0 60
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52739: LD_ADDR_VAR 0 61
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52779: LD_ADDR_VAR 0 62
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52820: LD_ADDR_VAR 0 63
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52864: LD_ADDR_VAR 0 64
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// end ; 2 :
52910: GO 56176
52912: LD_INT 2
52914: DOUBLE
52915: EQUAL
52916: IFTRUE 52920
52918: GO 56175
52920: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52921: LD_ADDR_VAR 0 29
52925: PUSH
52926: LD_INT 4
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 5
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 0
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 5
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 3
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 4
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 4
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 4
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 4
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 3
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 4
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 5
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: LD_INT 5
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 3
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 4
53260: NEG
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 4
53271: NEG
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 4
53283: NEG
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 4
53306: NEG
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 4
53318: NEG
53319: PUSH
53320: LD_INT 5
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: LD_INT 4
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 5
53366: NEG
53367: PUSH
53368: LD_INT 4
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 5
53378: NEG
53379: PUSH
53380: LD_INT 5
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: LD_INT 5
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 5
53402: NEG
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53459: LD_ADDR_VAR 0 30
53463: PUSH
53464: LD_INT 4
53466: PUSH
53467: LD_INT 4
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 4
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 5
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 5
53496: PUSH
53497: LD_INT 5
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: LD_INT 5
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: LD_INT 4
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 5
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 5
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 4
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 3
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 4
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 4
53694: NEG
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 5
53705: NEG
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 5
53716: NEG
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 5
53728: NEG
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 3
53763: NEG
53764: PUSH
53765: LD_INT 4
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 4
53811: NEG
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: LD_INT 4
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 4
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 4
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 4
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 5
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 4
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 3
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 3
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 5
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: LD_INT 5
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54006: LD_ADDR_VAR 0 31
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 4
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 4
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 5
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 5
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 4
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 5
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 2
54129: NEG
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 4
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 4
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 4
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 4
54208: NEG
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 4
54220: NEG
54221: PUSH
54222: LD_INT 5
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 4
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 5
54268: NEG
54269: PUSH
54270: LD_INT 4
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 5
54280: NEG
54281: PUSH
54282: LD_INT 5
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: NEG
54293: PUSH
54294: LD_INT 5
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 5
54304: NEG
54305: PUSH
54306: LD_INT 3
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 4
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 4
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 4
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 4
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 5
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 5
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 4
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 5
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54556: LD_ADDR_VAR 0 32
54560: PUSH
54561: LD_INT 4
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 4
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 5
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 5
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 5
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: LD_INT 3
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: LD_INT 2
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 4
54737: NEG
54738: PUSH
54739: LD_INT 4
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 4
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 5
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 4
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 5
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 5
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 4
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 4
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 4
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 4
54968: PUSH
54969: LD_INT 4
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: LD_INT 5
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: LD_INT 5
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 4
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 5
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 5
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55103: LD_ADDR_VAR 0 33
55107: PUSH
55108: LD_INT 4
55110: NEG
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 4
55122: NEG
55123: PUSH
55124: LD_INT 5
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: NEG
55135: PUSH
55136: LD_INT 4
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 3
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 4
55158: NEG
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 5
55170: NEG
55171: PUSH
55172: LD_INT 4
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: LD_INT 5
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: NEG
55195: PUSH
55196: LD_INT 5
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 5
55206: NEG
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 3
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 2
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 4
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 4
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 4
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 5
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 5
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 5
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: LD_INT 3
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: LD_INT 4
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: LD_INT 4
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 4
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 4
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 4
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: LD_INT 5
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 5
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 5
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55641: LD_ADDR_VAR 0 34
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 4
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 5
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 4
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 4
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 5
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 5
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 4
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 5
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 5
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 4
55883: PUSH
55884: LD_INT 5
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: PUSH
55894: LD_INT 4
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 3
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 5
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 5
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 3
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: LD_INT 4
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 4
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: LD_INT 4
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 4
56026: NEG
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 4
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 3
56060: NEG
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 4
56071: NEG
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 5
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 5
56105: NEG
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: ST_TO_ADDR
// end ; end ;
56173: GO 56176
56175: POP
// case btype of b_depot , b_warehouse :
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 0
56183: DOUBLE
56184: EQUAL
56185: IFTRUE 56195
56187: LD_INT 1
56189: DOUBLE
56190: EQUAL
56191: IFTRUE 56195
56193: GO 56396
56195: POP
// case nation of nation_american :
56196: LD_VAR 0 5
56200: PUSH
56201: LD_INT 1
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56209
56207: GO 56265
56209: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56210: LD_ADDR_VAR 0 9
56214: PUSH
56215: LD_VAR 0 11
56219: PUSH
56220: LD_VAR 0 12
56224: PUSH
56225: LD_VAR 0 13
56229: PUSH
56230: LD_VAR 0 14
56234: PUSH
56235: LD_VAR 0 15
56239: PUSH
56240: LD_VAR 0 16
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: PUSH
56253: LD_VAR 0 4
56257: PUSH
56258: LD_INT 1
56260: PLUS
56261: ARRAY
56262: ST_TO_ADDR
56263: GO 56394
56265: LD_INT 2
56267: DOUBLE
56268: EQUAL
56269: IFTRUE 56273
56271: GO 56329
56273: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56274: LD_ADDR_VAR 0 9
56278: PUSH
56279: LD_VAR 0 17
56283: PUSH
56284: LD_VAR 0 18
56288: PUSH
56289: LD_VAR 0 19
56293: PUSH
56294: LD_VAR 0 20
56298: PUSH
56299: LD_VAR 0 21
56303: PUSH
56304: LD_VAR 0 22
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: PUSH
56317: LD_VAR 0 4
56321: PUSH
56322: LD_INT 1
56324: PLUS
56325: ARRAY
56326: ST_TO_ADDR
56327: GO 56394
56329: LD_INT 3
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56337
56335: GO 56393
56337: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56338: LD_ADDR_VAR 0 9
56342: PUSH
56343: LD_VAR 0 23
56347: PUSH
56348: LD_VAR 0 24
56352: PUSH
56353: LD_VAR 0 25
56357: PUSH
56358: LD_VAR 0 26
56362: PUSH
56363: LD_VAR 0 27
56367: PUSH
56368: LD_VAR 0 28
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: PUSH
56381: LD_VAR 0 4
56385: PUSH
56386: LD_INT 1
56388: PLUS
56389: ARRAY
56390: ST_TO_ADDR
56391: GO 56394
56393: POP
56394: GO 56949
56396: LD_INT 2
56398: DOUBLE
56399: EQUAL
56400: IFTRUE 56410
56402: LD_INT 3
56404: DOUBLE
56405: EQUAL
56406: IFTRUE 56410
56408: GO 56466
56410: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56411: LD_ADDR_VAR 0 9
56415: PUSH
56416: LD_VAR 0 29
56420: PUSH
56421: LD_VAR 0 30
56425: PUSH
56426: LD_VAR 0 31
56430: PUSH
56431: LD_VAR 0 32
56435: PUSH
56436: LD_VAR 0 33
56440: PUSH
56441: LD_VAR 0 34
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: PUSH
56454: LD_VAR 0 4
56458: PUSH
56459: LD_INT 1
56461: PLUS
56462: ARRAY
56463: ST_TO_ADDR
56464: GO 56949
56466: LD_INT 16
56468: DOUBLE
56469: EQUAL
56470: IFTRUE 56528
56472: LD_INT 17
56474: DOUBLE
56475: EQUAL
56476: IFTRUE 56528
56478: LD_INT 18
56480: DOUBLE
56481: EQUAL
56482: IFTRUE 56528
56484: LD_INT 19
56486: DOUBLE
56487: EQUAL
56488: IFTRUE 56528
56490: LD_INT 22
56492: DOUBLE
56493: EQUAL
56494: IFTRUE 56528
56496: LD_INT 20
56498: DOUBLE
56499: EQUAL
56500: IFTRUE 56528
56502: LD_INT 21
56504: DOUBLE
56505: EQUAL
56506: IFTRUE 56528
56508: LD_INT 23
56510: DOUBLE
56511: EQUAL
56512: IFTRUE 56528
56514: LD_INT 24
56516: DOUBLE
56517: EQUAL
56518: IFTRUE 56528
56520: LD_INT 25
56522: DOUBLE
56523: EQUAL
56524: IFTRUE 56528
56526: GO 56584
56528: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56529: LD_ADDR_VAR 0 9
56533: PUSH
56534: LD_VAR 0 35
56538: PUSH
56539: LD_VAR 0 36
56543: PUSH
56544: LD_VAR 0 37
56548: PUSH
56549: LD_VAR 0 38
56553: PUSH
56554: LD_VAR 0 39
56558: PUSH
56559: LD_VAR 0 40
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: PUSH
56572: LD_VAR 0 4
56576: PUSH
56577: LD_INT 1
56579: PLUS
56580: ARRAY
56581: ST_TO_ADDR
56582: GO 56949
56584: LD_INT 6
56586: DOUBLE
56587: EQUAL
56588: IFTRUE 56640
56590: LD_INT 7
56592: DOUBLE
56593: EQUAL
56594: IFTRUE 56640
56596: LD_INT 8
56598: DOUBLE
56599: EQUAL
56600: IFTRUE 56640
56602: LD_INT 13
56604: DOUBLE
56605: EQUAL
56606: IFTRUE 56640
56608: LD_INT 12
56610: DOUBLE
56611: EQUAL
56612: IFTRUE 56640
56614: LD_INT 15
56616: DOUBLE
56617: EQUAL
56618: IFTRUE 56640
56620: LD_INT 11
56622: DOUBLE
56623: EQUAL
56624: IFTRUE 56640
56626: LD_INT 14
56628: DOUBLE
56629: EQUAL
56630: IFTRUE 56640
56632: LD_INT 10
56634: DOUBLE
56635: EQUAL
56636: IFTRUE 56640
56638: GO 56696
56640: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56641: LD_ADDR_VAR 0 9
56645: PUSH
56646: LD_VAR 0 41
56650: PUSH
56651: LD_VAR 0 42
56655: PUSH
56656: LD_VAR 0 43
56660: PUSH
56661: LD_VAR 0 44
56665: PUSH
56666: LD_VAR 0 45
56670: PUSH
56671: LD_VAR 0 46
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: PUSH
56684: LD_VAR 0 4
56688: PUSH
56689: LD_INT 1
56691: PLUS
56692: ARRAY
56693: ST_TO_ADDR
56694: GO 56949
56696: LD_INT 36
56698: DOUBLE
56699: EQUAL
56700: IFTRUE 56704
56702: GO 56760
56704: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56705: LD_ADDR_VAR 0 9
56709: PUSH
56710: LD_VAR 0 47
56714: PUSH
56715: LD_VAR 0 48
56719: PUSH
56720: LD_VAR 0 49
56724: PUSH
56725: LD_VAR 0 50
56729: PUSH
56730: LD_VAR 0 51
56734: PUSH
56735: LD_VAR 0 52
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: PUSH
56748: LD_VAR 0 4
56752: PUSH
56753: LD_INT 1
56755: PLUS
56756: ARRAY
56757: ST_TO_ADDR
56758: GO 56949
56760: LD_INT 4
56762: DOUBLE
56763: EQUAL
56764: IFTRUE 56786
56766: LD_INT 5
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56786
56772: LD_INT 34
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56786
56778: LD_INT 37
56780: DOUBLE
56781: EQUAL
56782: IFTRUE 56786
56784: GO 56842
56786: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56787: LD_ADDR_VAR 0 9
56791: PUSH
56792: LD_VAR 0 53
56796: PUSH
56797: LD_VAR 0 54
56801: PUSH
56802: LD_VAR 0 55
56806: PUSH
56807: LD_VAR 0 56
56811: PUSH
56812: LD_VAR 0 57
56816: PUSH
56817: LD_VAR 0 58
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 4
56834: PUSH
56835: LD_INT 1
56837: PLUS
56838: ARRAY
56839: ST_TO_ADDR
56840: GO 56949
56842: LD_INT 31
56844: DOUBLE
56845: EQUAL
56846: IFTRUE 56892
56848: LD_INT 32
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56892
56854: LD_INT 33
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56892
56860: LD_INT 27
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56892
56866: LD_INT 26
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56892
56872: LD_INT 28
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56892
56878: LD_INT 29
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56892
56884: LD_INT 30
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56892
56890: GO 56948
56892: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56893: LD_ADDR_VAR 0 9
56897: PUSH
56898: LD_VAR 0 59
56902: PUSH
56903: LD_VAR 0 60
56907: PUSH
56908: LD_VAR 0 61
56912: PUSH
56913: LD_VAR 0 62
56917: PUSH
56918: LD_VAR 0 63
56922: PUSH
56923: LD_VAR 0 64
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: PUSH
56936: LD_VAR 0 4
56940: PUSH
56941: LD_INT 1
56943: PLUS
56944: ARRAY
56945: ST_TO_ADDR
56946: GO 56949
56948: POP
// temp_list2 = [ ] ;
56949: LD_ADDR_VAR 0 10
56953: PUSH
56954: EMPTY
56955: ST_TO_ADDR
// for i in temp_list do
56956: LD_ADDR_VAR 0 8
56960: PUSH
56961: LD_VAR 0 9
56965: PUSH
56966: FOR_IN
56967: IFFALSE 57019
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56969: LD_ADDR_VAR 0 10
56973: PUSH
56974: LD_VAR 0 10
56978: PUSH
56979: LD_VAR 0 8
56983: PUSH
56984: LD_INT 1
56986: ARRAY
56987: PUSH
56988: LD_VAR 0 2
56992: PLUS
56993: PUSH
56994: LD_VAR 0 8
56998: PUSH
56999: LD_INT 2
57001: ARRAY
57002: PUSH
57003: LD_VAR 0 3
57007: PLUS
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: EMPTY
57014: LIST
57015: ADD
57016: ST_TO_ADDR
57017: GO 56966
57019: POP
57020: POP
// result = temp_list2 ;
57021: LD_ADDR_VAR 0 7
57025: PUSH
57026: LD_VAR 0 10
57030: ST_TO_ADDR
// end ;
57031: LD_VAR 0 7
57035: RET
// export function EnemyInRange ( unit , dist ) ; begin
57036: LD_INT 0
57038: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57039: LD_ADDR_VAR 0 3
57043: PUSH
57044: LD_VAR 0 1
57048: PPUSH
57049: CALL_OW 255
57053: PPUSH
57054: LD_VAR 0 1
57058: PPUSH
57059: CALL_OW 250
57063: PPUSH
57064: LD_VAR 0 1
57068: PPUSH
57069: CALL_OW 251
57073: PPUSH
57074: LD_VAR 0 2
57078: PPUSH
57079: CALL 30438 0 4
57083: PUSH
57084: LD_INT 4
57086: ARRAY
57087: ST_TO_ADDR
// end ;
57088: LD_VAR 0 3
57092: RET
// export function PlayerSeeMe ( unit ) ; begin
57093: LD_INT 0
57095: PPUSH
// result := See ( your_side , unit ) ;
57096: LD_ADDR_VAR 0 2
57100: PUSH
57101: LD_OWVAR 2
57105: PPUSH
57106: LD_VAR 0 1
57110: PPUSH
57111: CALL_OW 292
57115: ST_TO_ADDR
// end ;
57116: LD_VAR 0 2
57120: RET
// export function ReverseDir ( unit ) ; begin
57121: LD_INT 0
57123: PPUSH
// if not unit then
57124: LD_VAR 0 1
57128: NOT
57129: IFFALSE 57133
// exit ;
57131: GO 57156
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57133: LD_ADDR_VAR 0 2
57137: PUSH
57138: LD_VAR 0 1
57142: PPUSH
57143: CALL_OW 254
57147: PUSH
57148: LD_INT 3
57150: PLUS
57151: PUSH
57152: LD_INT 6
57154: MOD
57155: ST_TO_ADDR
// end ;
57156: LD_VAR 0 2
57160: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57161: LD_INT 0
57163: PPUSH
57164: PPUSH
57165: PPUSH
57166: PPUSH
57167: PPUSH
57168: PPUSH
// if not unit or not hexes then
57169: LD_VAR 0 1
57173: NOT
57174: PUSH
57175: LD_VAR 0 2
57179: NOT
57180: OR
57181: IFFALSE 57185
// exit ;
57183: GO 57308
// dist := 9999 ;
57185: LD_ADDR_VAR 0 5
57189: PUSH
57190: LD_INT 9999
57192: ST_TO_ADDR
// for i = 1 to hexes do
57193: LD_ADDR_VAR 0 4
57197: PUSH
57198: DOUBLE
57199: LD_INT 1
57201: DEC
57202: ST_TO_ADDR
57203: LD_VAR 0 2
57207: PUSH
57208: FOR_TO
57209: IFFALSE 57296
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57211: LD_ADDR_VAR 0 6
57215: PUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_VAR 0 4
57230: ARRAY
57231: PUSH
57232: LD_INT 1
57234: ARRAY
57235: PPUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_VAR 0 4
57245: ARRAY
57246: PUSH
57247: LD_INT 2
57249: ARRAY
57250: PPUSH
57251: CALL_OW 297
57255: ST_TO_ADDR
// if tdist < dist then
57256: LD_VAR 0 6
57260: PUSH
57261: LD_VAR 0 5
57265: LESS
57266: IFFALSE 57294
// begin hex := hexes [ i ] ;
57268: LD_ADDR_VAR 0 8
57272: PUSH
57273: LD_VAR 0 2
57277: PUSH
57278: LD_VAR 0 4
57282: ARRAY
57283: ST_TO_ADDR
// dist := tdist ;
57284: LD_ADDR_VAR 0 5
57288: PUSH
57289: LD_VAR 0 6
57293: ST_TO_ADDR
// end ; end ;
57294: GO 57208
57296: POP
57297: POP
// result := hex ;
57298: LD_ADDR_VAR 0 3
57302: PUSH
57303: LD_VAR 0 8
57307: ST_TO_ADDR
// end ;
57308: LD_VAR 0 3
57312: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57317: LD_VAR 0 1
57321: NOT
57322: PUSH
57323: LD_VAR 0 1
57327: PUSH
57328: LD_INT 21
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 23
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PPUSH
57352: CALL_OW 69
57356: IN
57357: NOT
57358: OR
57359: IFFALSE 57363
// exit ;
57361: GO 57410
// for i = 1 to 3 do
57363: LD_ADDR_VAR 0 3
57367: PUSH
57368: DOUBLE
57369: LD_INT 1
57371: DEC
57372: ST_TO_ADDR
57373: LD_INT 3
57375: PUSH
57376: FOR_TO
57377: IFFALSE 57408
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57379: LD_VAR 0 1
57383: PPUSH
57384: CALL_OW 250
57388: PPUSH
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL_OW 251
57398: PPUSH
57399: LD_INT 1
57401: PPUSH
57402: CALL_OW 453
57406: GO 57376
57408: POP
57409: POP
// end ;
57410: LD_VAR 0 2
57414: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57415: LD_INT 0
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
57421: PPUSH
57422: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57423: LD_VAR 0 1
57427: NOT
57428: PUSH
57429: LD_VAR 0 2
57433: NOT
57434: OR
57435: PUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 314
57445: OR
57446: IFFALSE 57450
// exit ;
57448: GO 57891
// x := GetX ( enemy_unit ) ;
57450: LD_ADDR_VAR 0 7
57454: PUSH
57455: LD_VAR 0 2
57459: PPUSH
57460: CALL_OW 250
57464: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57465: LD_ADDR_VAR 0 8
57469: PUSH
57470: LD_VAR 0 2
57474: PPUSH
57475: CALL_OW 251
57479: ST_TO_ADDR
// if not x or not y then
57480: LD_VAR 0 7
57484: NOT
57485: PUSH
57486: LD_VAR 0 8
57490: NOT
57491: OR
57492: IFFALSE 57496
// exit ;
57494: GO 57891
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57496: LD_ADDR_VAR 0 6
57500: PUSH
57501: LD_VAR 0 7
57505: PPUSH
57506: LD_INT 0
57508: PPUSH
57509: LD_INT 4
57511: PPUSH
57512: CALL_OW 272
57516: PUSH
57517: LD_VAR 0 8
57521: PPUSH
57522: LD_INT 0
57524: PPUSH
57525: LD_INT 4
57527: PPUSH
57528: CALL_OW 273
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_VAR 0 7
57541: PPUSH
57542: LD_INT 1
57544: PPUSH
57545: LD_INT 4
57547: PPUSH
57548: CALL_OW 272
57552: PUSH
57553: LD_VAR 0 8
57557: PPUSH
57558: LD_INT 1
57560: PPUSH
57561: LD_INT 4
57563: PPUSH
57564: CALL_OW 273
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_VAR 0 7
57577: PPUSH
57578: LD_INT 2
57580: PPUSH
57581: LD_INT 4
57583: PPUSH
57584: CALL_OW 272
57588: PUSH
57589: LD_VAR 0 8
57593: PPUSH
57594: LD_INT 2
57596: PPUSH
57597: LD_INT 4
57599: PPUSH
57600: CALL_OW 273
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_VAR 0 7
57613: PPUSH
57614: LD_INT 3
57616: PPUSH
57617: LD_INT 4
57619: PPUSH
57620: CALL_OW 272
57624: PUSH
57625: LD_VAR 0 8
57629: PPUSH
57630: LD_INT 3
57632: PPUSH
57633: LD_INT 4
57635: PPUSH
57636: CALL_OW 273
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_VAR 0 7
57649: PPUSH
57650: LD_INT 4
57652: PPUSH
57653: LD_INT 4
57655: PPUSH
57656: CALL_OW 272
57660: PUSH
57661: LD_VAR 0 8
57665: PPUSH
57666: LD_INT 4
57668: PPUSH
57669: LD_INT 4
57671: PPUSH
57672: CALL_OW 273
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 7
57685: PPUSH
57686: LD_INT 5
57688: PPUSH
57689: LD_INT 4
57691: PPUSH
57692: CALL_OW 272
57696: PUSH
57697: LD_VAR 0 8
57701: PPUSH
57702: LD_INT 5
57704: PPUSH
57705: LD_INT 4
57707: PPUSH
57708: CALL_OW 273
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: ST_TO_ADDR
// for i = tmp downto 1 do
57725: LD_ADDR_VAR 0 4
57729: PUSH
57730: DOUBLE
57731: LD_VAR 0 6
57735: INC
57736: ST_TO_ADDR
57737: LD_INT 1
57739: PUSH
57740: FOR_DOWNTO
57741: IFFALSE 57842
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57743: LD_VAR 0 6
57747: PUSH
57748: LD_VAR 0 4
57752: ARRAY
57753: PUSH
57754: LD_INT 1
57756: ARRAY
57757: PPUSH
57758: LD_VAR 0 6
57762: PUSH
57763: LD_VAR 0 4
57767: ARRAY
57768: PUSH
57769: LD_INT 2
57771: ARRAY
57772: PPUSH
57773: CALL_OW 488
57777: NOT
57778: PUSH
57779: LD_VAR 0 6
57783: PUSH
57784: LD_VAR 0 4
57788: ARRAY
57789: PUSH
57790: LD_INT 1
57792: ARRAY
57793: PPUSH
57794: LD_VAR 0 6
57798: PUSH
57799: LD_VAR 0 4
57803: ARRAY
57804: PUSH
57805: LD_INT 2
57807: ARRAY
57808: PPUSH
57809: CALL_OW 428
57813: PUSH
57814: LD_INT 0
57816: NONEQUAL
57817: OR
57818: IFFALSE 57840
// tmp := Delete ( tmp , i ) ;
57820: LD_ADDR_VAR 0 6
57824: PUSH
57825: LD_VAR 0 6
57829: PPUSH
57830: LD_VAR 0 4
57834: PPUSH
57835: CALL_OW 3
57839: ST_TO_ADDR
57840: GO 57740
57842: POP
57843: POP
// j := GetClosestHex ( unit , tmp ) ;
57844: LD_ADDR_VAR 0 5
57848: PUSH
57849: LD_VAR 0 1
57853: PPUSH
57854: LD_VAR 0 6
57858: PPUSH
57859: CALL 57161 0 2
57863: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57864: LD_VAR 0 1
57868: PPUSH
57869: LD_VAR 0 5
57873: PUSH
57874: LD_INT 1
57876: ARRAY
57877: PPUSH
57878: LD_VAR 0 5
57882: PUSH
57883: LD_INT 2
57885: ARRAY
57886: PPUSH
57887: CALL_OW 111
// end ;
57891: LD_VAR 0 3
57895: RET
// export function PrepareApemanSoldier ( ) ; begin
57896: LD_INT 0
57898: PPUSH
// uc_nation := 0 ;
57899: LD_ADDR_OWVAR 21
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// hc_sex := sex_male ;
57907: LD_ADDR_OWVAR 27
57911: PUSH
57912: LD_INT 1
57914: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57915: LD_ADDR_OWVAR 28
57919: PUSH
57920: LD_INT 15
57922: ST_TO_ADDR
// hc_gallery :=  ;
57923: LD_ADDR_OWVAR 33
57927: PUSH
57928: LD_STRING 
57930: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57931: LD_ADDR_OWVAR 31
57935: PUSH
57936: LD_INT 0
57938: PPUSH
57939: LD_INT 3
57941: PPUSH
57942: CALL_OW 12
57946: PUSH
57947: LD_INT 0
57949: PPUSH
57950: LD_INT 3
57952: PPUSH
57953: CALL_OW 12
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
// end ;
57970: LD_VAR 0 1
57974: RET
// export function PrepareApemanEngineer ( ) ; begin
57975: LD_INT 0
57977: PPUSH
// uc_nation := 0 ;
57978: LD_ADDR_OWVAR 21
57982: PUSH
57983: LD_INT 0
57985: ST_TO_ADDR
// hc_sex := sex_male ;
57986: LD_ADDR_OWVAR 27
57990: PUSH
57991: LD_INT 1
57993: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57994: LD_ADDR_OWVAR 28
57998: PUSH
57999: LD_INT 16
58001: ST_TO_ADDR
// hc_gallery :=  ;
58002: LD_ADDR_OWVAR 33
58006: PUSH
58007: LD_STRING 
58009: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58010: LD_ADDR_OWVAR 31
58014: PUSH
58015: LD_INT 0
58017: PPUSH
58018: LD_INT 3
58020: PPUSH
58021: CALL_OW 12
58025: PUSH
58026: LD_INT 0
58028: PPUSH
58029: LD_INT 3
58031: PPUSH
58032: CALL_OW 12
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: ST_TO_ADDR
// end ;
58049: LD_VAR 0 1
58053: RET
// export function PrepareApeman ( agressivity ) ; begin
58054: LD_INT 0
58056: PPUSH
// uc_side := 0 ;
58057: LD_ADDR_OWVAR 20
58061: PUSH
58062: LD_INT 0
58064: ST_TO_ADDR
// uc_nation := 0 ;
58065: LD_ADDR_OWVAR 21
58069: PUSH
58070: LD_INT 0
58072: ST_TO_ADDR
// hc_sex := sex_male ;
58073: LD_ADDR_OWVAR 27
58077: PUSH
58078: LD_INT 1
58080: ST_TO_ADDR
// hc_class := class_apeman ;
58081: LD_ADDR_OWVAR 28
58085: PUSH
58086: LD_INT 12
58088: ST_TO_ADDR
// hc_gallery :=  ;
58089: LD_ADDR_OWVAR 33
58093: PUSH
58094: LD_STRING 
58096: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58097: LD_ADDR_OWVAR 35
58101: PUSH
58102: LD_VAR 0 1
58106: NEG
58107: PPUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: CALL_OW 12
58117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58118: LD_ADDR_OWVAR 31
58122: PUSH
58123: LD_INT 0
58125: PPUSH
58126: LD_INT 3
58128: PPUSH
58129: CALL_OW 12
58133: PUSH
58134: LD_INT 0
58136: PPUSH
58137: LD_INT 3
58139: PPUSH
58140: CALL_OW 12
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: ST_TO_ADDR
// end ;
58157: LD_VAR 0 2
58161: RET
// export function PrepareTiger ( agressivity ) ; begin
58162: LD_INT 0
58164: PPUSH
// uc_side := 0 ;
58165: LD_ADDR_OWVAR 20
58169: PUSH
58170: LD_INT 0
58172: ST_TO_ADDR
// uc_nation := 0 ;
58173: LD_ADDR_OWVAR 21
58177: PUSH
58178: LD_INT 0
58180: ST_TO_ADDR
// hc_class := class_tiger ;
58181: LD_ADDR_OWVAR 28
58185: PUSH
58186: LD_INT 14
58188: ST_TO_ADDR
// hc_gallery :=  ;
58189: LD_ADDR_OWVAR 33
58193: PUSH
58194: LD_STRING 
58196: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58197: LD_ADDR_OWVAR 35
58201: PUSH
58202: LD_VAR 0 1
58206: NEG
58207: PPUSH
58208: LD_VAR 0 1
58212: PPUSH
58213: CALL_OW 12
58217: ST_TO_ADDR
// end ;
58218: LD_VAR 0 2
58222: RET
// export function PrepareEnchidna ( ) ; begin
58223: LD_INT 0
58225: PPUSH
// uc_side := 0 ;
58226: LD_ADDR_OWVAR 20
58230: PUSH
58231: LD_INT 0
58233: ST_TO_ADDR
// uc_nation := 0 ;
58234: LD_ADDR_OWVAR 21
58238: PUSH
58239: LD_INT 0
58241: ST_TO_ADDR
// hc_class := class_baggie ;
58242: LD_ADDR_OWVAR 28
58246: PUSH
58247: LD_INT 13
58249: ST_TO_ADDR
// hc_gallery :=  ;
58250: LD_ADDR_OWVAR 33
58254: PUSH
58255: LD_STRING 
58257: ST_TO_ADDR
// end ;
58258: LD_VAR 0 1
58262: RET
// export function PrepareFrog ( ) ; begin
58263: LD_INT 0
58265: PPUSH
// uc_side := 0 ;
58266: LD_ADDR_OWVAR 20
58270: PUSH
58271: LD_INT 0
58273: ST_TO_ADDR
// uc_nation := 0 ;
58274: LD_ADDR_OWVAR 21
58278: PUSH
58279: LD_INT 0
58281: ST_TO_ADDR
// hc_class := class_frog ;
58282: LD_ADDR_OWVAR 28
58286: PUSH
58287: LD_INT 19
58289: ST_TO_ADDR
// hc_gallery :=  ;
58290: LD_ADDR_OWVAR 33
58294: PUSH
58295: LD_STRING 
58297: ST_TO_ADDR
// end ;
58298: LD_VAR 0 1
58302: RET
// export function PrepareFish ( ) ; begin
58303: LD_INT 0
58305: PPUSH
// uc_side := 0 ;
58306: LD_ADDR_OWVAR 20
58310: PUSH
58311: LD_INT 0
58313: ST_TO_ADDR
// uc_nation := 0 ;
58314: LD_ADDR_OWVAR 21
58318: PUSH
58319: LD_INT 0
58321: ST_TO_ADDR
// hc_class := class_fish ;
58322: LD_ADDR_OWVAR 28
58326: PUSH
58327: LD_INT 20
58329: ST_TO_ADDR
// hc_gallery :=  ;
58330: LD_ADDR_OWVAR 33
58334: PUSH
58335: LD_STRING 
58337: ST_TO_ADDR
// end ;
58338: LD_VAR 0 1
58342: RET
// export function PrepareBird ( ) ; begin
58343: LD_INT 0
58345: PPUSH
// uc_side := 0 ;
58346: LD_ADDR_OWVAR 20
58350: PUSH
58351: LD_INT 0
58353: ST_TO_ADDR
// uc_nation := 0 ;
58354: LD_ADDR_OWVAR 21
58358: PUSH
58359: LD_INT 0
58361: ST_TO_ADDR
// hc_class := class_phororhacos ;
58362: LD_ADDR_OWVAR 28
58366: PUSH
58367: LD_INT 18
58369: ST_TO_ADDR
// hc_gallery :=  ;
58370: LD_ADDR_OWVAR 33
58374: PUSH
58375: LD_STRING 
58377: ST_TO_ADDR
// end ;
58378: LD_VAR 0 1
58382: RET
// export function PrepareHorse ( ) ; begin
58383: LD_INT 0
58385: PPUSH
// uc_side := 0 ;
58386: LD_ADDR_OWVAR 20
58390: PUSH
58391: LD_INT 0
58393: ST_TO_ADDR
// uc_nation := 0 ;
58394: LD_ADDR_OWVAR 21
58398: PUSH
58399: LD_INT 0
58401: ST_TO_ADDR
// hc_class := class_horse ;
58402: LD_ADDR_OWVAR 28
58406: PUSH
58407: LD_INT 21
58409: ST_TO_ADDR
// hc_gallery :=  ;
58410: LD_ADDR_OWVAR 33
58414: PUSH
58415: LD_STRING 
58417: ST_TO_ADDR
// end ;
58418: LD_VAR 0 1
58422: RET
// export function PrepareMastodont ( ) ; begin
58423: LD_INT 0
58425: PPUSH
// uc_side := 0 ;
58426: LD_ADDR_OWVAR 20
58430: PUSH
58431: LD_INT 0
58433: ST_TO_ADDR
// uc_nation := 0 ;
58434: LD_ADDR_OWVAR 21
58438: PUSH
58439: LD_INT 0
58441: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58442: LD_ADDR_OWVAR 37
58446: PUSH
58447: LD_INT 31
58449: ST_TO_ADDR
// vc_control := control_rider ;
58450: LD_ADDR_OWVAR 38
58454: PUSH
58455: LD_INT 4
58457: ST_TO_ADDR
// end ;
58458: LD_VAR 0 1
58462: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58463: LD_INT 0
58465: PPUSH
58466: PPUSH
58467: PPUSH
// uc_side = 0 ;
58468: LD_ADDR_OWVAR 20
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// uc_nation = 0 ;
58476: LD_ADDR_OWVAR 21
58480: PUSH
58481: LD_INT 0
58483: ST_TO_ADDR
// InitHc_All ( ) ;
58484: CALL_OW 584
// InitVc ;
58488: CALL_OW 20
// if mastodonts then
58492: LD_VAR 0 6
58496: IFFALSE 58563
// for i = 1 to mastodonts do
58498: LD_ADDR_VAR 0 11
58502: PUSH
58503: DOUBLE
58504: LD_INT 1
58506: DEC
58507: ST_TO_ADDR
58508: LD_VAR 0 6
58512: PUSH
58513: FOR_TO
58514: IFFALSE 58561
// begin vc_chassis := 31 ;
58516: LD_ADDR_OWVAR 37
58520: PUSH
58521: LD_INT 31
58523: ST_TO_ADDR
// vc_control := control_rider ;
58524: LD_ADDR_OWVAR 38
58528: PUSH
58529: LD_INT 4
58531: ST_TO_ADDR
// animal := CreateVehicle ;
58532: LD_ADDR_VAR 0 12
58536: PUSH
58537: CALL_OW 45
58541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58542: LD_VAR 0 12
58546: PPUSH
58547: LD_VAR 0 8
58551: PPUSH
58552: LD_INT 0
58554: PPUSH
58555: CALL 60698 0 3
// end ;
58559: GO 58513
58561: POP
58562: POP
// if horses then
58563: LD_VAR 0 5
58567: IFFALSE 58634
// for i = 1 to horses do
58569: LD_ADDR_VAR 0 11
58573: PUSH
58574: DOUBLE
58575: LD_INT 1
58577: DEC
58578: ST_TO_ADDR
58579: LD_VAR 0 5
58583: PUSH
58584: FOR_TO
58585: IFFALSE 58632
// begin hc_class := 21 ;
58587: LD_ADDR_OWVAR 28
58591: PUSH
58592: LD_INT 21
58594: ST_TO_ADDR
// hc_gallery :=  ;
58595: LD_ADDR_OWVAR 33
58599: PUSH
58600: LD_STRING 
58602: ST_TO_ADDR
// animal := CreateHuman ;
58603: LD_ADDR_VAR 0 12
58607: PUSH
58608: CALL_OW 44
58612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58613: LD_VAR 0 12
58617: PPUSH
58618: LD_VAR 0 8
58622: PPUSH
58623: LD_INT 0
58625: PPUSH
58626: CALL 60698 0 3
// end ;
58630: GO 58584
58632: POP
58633: POP
// if birds then
58634: LD_VAR 0 1
58638: IFFALSE 58705
// for i = 1 to birds do
58640: LD_ADDR_VAR 0 11
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 1
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58703
// begin hc_class = 18 ;
58658: LD_ADDR_OWVAR 28
58662: PUSH
58663: LD_INT 18
58665: ST_TO_ADDR
// hc_gallery =  ;
58666: LD_ADDR_OWVAR 33
58670: PUSH
58671: LD_STRING 
58673: ST_TO_ADDR
// animal := CreateHuman ;
58674: LD_ADDR_VAR 0 12
58678: PUSH
58679: CALL_OW 44
58683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58684: LD_VAR 0 12
58688: PPUSH
58689: LD_VAR 0 8
58693: PPUSH
58694: LD_INT 0
58696: PPUSH
58697: CALL 60698 0 3
// end ;
58701: GO 58655
58703: POP
58704: POP
// if tigers then
58705: LD_VAR 0 2
58709: IFFALSE 58793
// for i = 1 to tigers do
58711: LD_ADDR_VAR 0 11
58715: PUSH
58716: DOUBLE
58717: LD_INT 1
58719: DEC
58720: ST_TO_ADDR
58721: LD_VAR 0 2
58725: PUSH
58726: FOR_TO
58727: IFFALSE 58791
// begin hc_class = class_tiger ;
58729: LD_ADDR_OWVAR 28
58733: PUSH
58734: LD_INT 14
58736: ST_TO_ADDR
// hc_gallery =  ;
58737: LD_ADDR_OWVAR 33
58741: PUSH
58742: LD_STRING 
58744: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58745: LD_ADDR_OWVAR 35
58749: PUSH
58750: LD_INT 7
58752: NEG
58753: PPUSH
58754: LD_INT 7
58756: PPUSH
58757: CALL_OW 12
58761: ST_TO_ADDR
// animal := CreateHuman ;
58762: LD_ADDR_VAR 0 12
58766: PUSH
58767: CALL_OW 44
58771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58772: LD_VAR 0 12
58776: PPUSH
58777: LD_VAR 0 8
58781: PPUSH
58782: LD_INT 0
58784: PPUSH
58785: CALL 60698 0 3
// end ;
58789: GO 58726
58791: POP
58792: POP
// if apemans then
58793: LD_VAR 0 3
58797: IFFALSE 58920
// for i = 1 to apemans do
58799: LD_ADDR_VAR 0 11
58803: PUSH
58804: DOUBLE
58805: LD_INT 1
58807: DEC
58808: ST_TO_ADDR
58809: LD_VAR 0 3
58813: PUSH
58814: FOR_TO
58815: IFFALSE 58918
// begin hc_class = class_apeman ;
58817: LD_ADDR_OWVAR 28
58821: PUSH
58822: LD_INT 12
58824: ST_TO_ADDR
// hc_gallery =  ;
58825: LD_ADDR_OWVAR 33
58829: PUSH
58830: LD_STRING 
58832: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58833: LD_ADDR_OWVAR 35
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PPUSH
58842: LD_INT 2
58844: PPUSH
58845: CALL_OW 12
58849: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58850: LD_ADDR_OWVAR 31
58854: PUSH
58855: LD_INT 1
58857: PPUSH
58858: LD_INT 3
58860: PPUSH
58861: CALL_OW 12
58865: PUSH
58866: LD_INT 1
58868: PPUSH
58869: LD_INT 3
58871: PPUSH
58872: CALL_OW 12
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// animal := CreateHuman ;
58889: LD_ADDR_VAR 0 12
58893: PUSH
58894: CALL_OW 44
58898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58899: LD_VAR 0 12
58903: PPUSH
58904: LD_VAR 0 8
58908: PPUSH
58909: LD_INT 0
58911: PPUSH
58912: CALL 60698 0 3
// end ;
58916: GO 58814
58918: POP
58919: POP
// if enchidnas then
58920: LD_VAR 0 4
58924: IFFALSE 58991
// for i = 1 to enchidnas do
58926: LD_ADDR_VAR 0 11
58930: PUSH
58931: DOUBLE
58932: LD_INT 1
58934: DEC
58935: ST_TO_ADDR
58936: LD_VAR 0 4
58940: PUSH
58941: FOR_TO
58942: IFFALSE 58989
// begin hc_class = 13 ;
58944: LD_ADDR_OWVAR 28
58948: PUSH
58949: LD_INT 13
58951: ST_TO_ADDR
// hc_gallery =  ;
58952: LD_ADDR_OWVAR 33
58956: PUSH
58957: LD_STRING 
58959: ST_TO_ADDR
// animal := CreateHuman ;
58960: LD_ADDR_VAR 0 12
58964: PUSH
58965: CALL_OW 44
58969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58970: LD_VAR 0 12
58974: PPUSH
58975: LD_VAR 0 8
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: CALL 60698 0 3
// end ;
58987: GO 58941
58989: POP
58990: POP
// if fishes then
58991: LD_VAR 0 7
58995: IFFALSE 59062
// for i = 1 to fishes do
58997: LD_ADDR_VAR 0 11
59001: PUSH
59002: DOUBLE
59003: LD_INT 1
59005: DEC
59006: ST_TO_ADDR
59007: LD_VAR 0 7
59011: PUSH
59012: FOR_TO
59013: IFFALSE 59060
// begin hc_class = 20 ;
59015: LD_ADDR_OWVAR 28
59019: PUSH
59020: LD_INT 20
59022: ST_TO_ADDR
// hc_gallery =  ;
59023: LD_ADDR_OWVAR 33
59027: PUSH
59028: LD_STRING 
59030: ST_TO_ADDR
// animal := CreateHuman ;
59031: LD_ADDR_VAR 0 12
59035: PUSH
59036: CALL_OW 44
59040: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59041: LD_VAR 0 12
59045: PPUSH
59046: LD_VAR 0 9
59050: PPUSH
59051: LD_INT 0
59053: PPUSH
59054: CALL 60698 0 3
// end ;
59058: GO 59012
59060: POP
59061: POP
// end ;
59062: LD_VAR 0 10
59066: RET
// export function WantHeal ( sci , unit ) ; begin
59067: LD_INT 0
59069: PPUSH
// if GetTaskList ( sci ) > 0 then
59070: LD_VAR 0 1
59074: PPUSH
59075: CALL_OW 437
59079: PUSH
59080: LD_INT 0
59082: GREATER
59083: IFFALSE 59153
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59085: LD_VAR 0 1
59089: PPUSH
59090: CALL_OW 437
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PUSH
59099: LD_INT 1
59101: ARRAY
59102: PUSH
59103: LD_STRING l
59105: EQUAL
59106: PUSH
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 437
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: PUSH
59121: LD_INT 4
59123: ARRAY
59124: PUSH
59125: LD_VAR 0 2
59129: EQUAL
59130: AND
59131: IFFALSE 59143
// result := true else
59133: LD_ADDR_VAR 0 3
59137: PUSH
59138: LD_INT 1
59140: ST_TO_ADDR
59141: GO 59151
// result := false ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_INT 0
59150: ST_TO_ADDR
// end else
59151: GO 59161
// result := false ;
59153: LD_ADDR_VAR 0 3
59157: PUSH
59158: LD_INT 0
59160: ST_TO_ADDR
// end ;
59161: LD_VAR 0 3
59165: RET
// export function HealTarget ( sci ) ; begin
59166: LD_INT 0
59168: PPUSH
// if not sci then
59169: LD_VAR 0 1
59173: NOT
59174: IFFALSE 59178
// exit ;
59176: GO 59243
// result := 0 ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: LD_INT 0
59185: ST_TO_ADDR
// if GetTaskList ( sci ) then
59186: LD_VAR 0 1
59190: PPUSH
59191: CALL_OW 437
59195: IFFALSE 59243
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59197: LD_VAR 0 1
59201: PPUSH
59202: CALL_OW 437
59206: PUSH
59207: LD_INT 1
59209: ARRAY
59210: PUSH
59211: LD_INT 1
59213: ARRAY
59214: PUSH
59215: LD_STRING l
59217: EQUAL
59218: IFFALSE 59243
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59220: LD_ADDR_VAR 0 2
59224: PUSH
59225: LD_VAR 0 1
59229: PPUSH
59230: CALL_OW 437
59234: PUSH
59235: LD_INT 1
59237: ARRAY
59238: PUSH
59239: LD_INT 4
59241: ARRAY
59242: ST_TO_ADDR
// end ;
59243: LD_VAR 0 2
59247: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59248: LD_INT 0
59250: PPUSH
59251: PPUSH
59252: PPUSH
59253: PPUSH
// if not base_units then
59254: LD_VAR 0 1
59258: NOT
59259: IFFALSE 59263
// exit ;
59261: GO 59350
// result := false ;
59263: LD_ADDR_VAR 0 2
59267: PUSH
59268: LD_INT 0
59270: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59271: LD_ADDR_VAR 0 5
59275: PUSH
59276: LD_VAR 0 1
59280: PPUSH
59281: LD_INT 21
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PPUSH
59291: CALL_OW 72
59295: ST_TO_ADDR
// if not tmp then
59296: LD_VAR 0 5
59300: NOT
59301: IFFALSE 59305
// exit ;
59303: GO 59350
// for i in tmp do
59305: LD_ADDR_VAR 0 3
59309: PUSH
59310: LD_VAR 0 5
59314: PUSH
59315: FOR_IN
59316: IFFALSE 59348
// begin result := EnemyInRange ( i , 22 ) ;
59318: LD_ADDR_VAR 0 2
59322: PUSH
59323: LD_VAR 0 3
59327: PPUSH
59328: LD_INT 22
59330: PPUSH
59331: CALL 57036 0 2
59335: ST_TO_ADDR
// if result then
59336: LD_VAR 0 2
59340: IFFALSE 59346
// exit ;
59342: POP
59343: POP
59344: GO 59350
// end ;
59346: GO 59315
59348: POP
59349: POP
// end ;
59350: LD_VAR 0 2
59354: RET
// export function FilterByTag ( units , tag ) ; begin
59355: LD_INT 0
59357: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59358: LD_ADDR_VAR 0 3
59362: PUSH
59363: LD_VAR 0 1
59367: PPUSH
59368: LD_INT 120
59370: PUSH
59371: LD_VAR 0 2
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PPUSH
59380: CALL_OW 72
59384: ST_TO_ADDR
// end ;
59385: LD_VAR 0 3
59389: RET
// export function IsDriver ( un ) ; begin
59390: LD_INT 0
59392: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59393: LD_ADDR_VAR 0 2
59397: PUSH
59398: LD_VAR 0 1
59402: PUSH
59403: LD_INT 55
59405: PUSH
59406: EMPTY
59407: LIST
59408: PPUSH
59409: CALL_OW 69
59413: IN
59414: ST_TO_ADDR
// end ;
59415: LD_VAR 0 2
59419: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59420: LD_INT 0
59422: PPUSH
59423: PPUSH
// list := [ ] ;
59424: LD_ADDR_VAR 0 5
59428: PUSH
59429: EMPTY
59430: ST_TO_ADDR
// case d of 0 :
59431: LD_VAR 0 3
59435: PUSH
59436: LD_INT 0
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59444
59442: GO 59577
59444: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59445: LD_ADDR_VAR 0 5
59449: PUSH
59450: LD_VAR 0 1
59454: PUSH
59455: LD_INT 4
59457: MINUS
59458: PUSH
59459: LD_VAR 0 2
59463: PUSH
59464: LD_INT 4
59466: MINUS
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: PUSH
59476: LD_VAR 0 1
59480: PUSH
59481: LD_INT 3
59483: MINUS
59484: PUSH
59485: LD_VAR 0 2
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: LIST
59497: PUSH
59498: LD_VAR 0 1
59502: PUSH
59503: LD_INT 4
59505: PLUS
59506: PUSH
59507: LD_VAR 0 2
59511: PUSH
59512: LD_INT 4
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: PUSH
59520: LD_VAR 0 1
59524: PUSH
59525: LD_INT 3
59527: PLUS
59528: PUSH
59529: LD_VAR 0 2
59533: PUSH
59534: LD_INT 3
59536: PLUS
59537: PUSH
59538: LD_INT 5
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: LIST
59545: PUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_VAR 0 2
59555: PUSH
59556: LD_INT 4
59558: PLUS
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
// end ; 1 :
59575: GO 60275
59577: LD_INT 1
59579: DOUBLE
59580: EQUAL
59581: IFTRUE 59585
59583: GO 59718
59585: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59586: LD_ADDR_VAR 0 5
59590: PUSH
59591: LD_VAR 0 1
59595: PUSH
59596: LD_VAR 0 2
59600: PUSH
59601: LD_INT 4
59603: MINUS
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: PUSH
59613: LD_VAR 0 1
59617: PUSH
59618: LD_INT 3
59620: MINUS
59621: PUSH
59622: LD_VAR 0 2
59626: PUSH
59627: LD_INT 3
59629: MINUS
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: PUSH
59639: LD_VAR 0 1
59643: PUSH
59644: LD_INT 4
59646: MINUS
59647: PUSH
59648: LD_VAR 0 2
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: PUSH
59661: LD_VAR 0 1
59665: PUSH
59666: LD_VAR 0 2
59670: PUSH
59671: LD_INT 3
59673: PLUS
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: LIST
59682: PUSH
59683: LD_VAR 0 1
59687: PUSH
59688: LD_INT 4
59690: PLUS
59691: PUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_INT 4
59699: PLUS
59700: PUSH
59701: LD_INT 5
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: ST_TO_ADDR
// end ; 2 :
59716: GO 60275
59718: LD_INT 2
59720: DOUBLE
59721: EQUAL
59722: IFTRUE 59726
59724: GO 59855
59726: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59727: LD_ADDR_VAR 0 5
59731: PUSH
59732: LD_VAR 0 1
59736: PUSH
59737: LD_VAR 0 2
59741: PUSH
59742: LD_INT 3
59744: MINUS
59745: PUSH
59746: LD_INT 3
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: LIST
59753: PUSH
59754: LD_VAR 0 1
59758: PUSH
59759: LD_INT 4
59761: PLUS
59762: PUSH
59763: LD_VAR 0 2
59767: PUSH
59768: LD_INT 4
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: PUSH
59776: LD_VAR 0 1
59780: PUSH
59781: LD_VAR 0 2
59785: PUSH
59786: LD_INT 4
59788: PLUS
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: PUSH
59798: LD_VAR 0 1
59802: PUSH
59803: LD_INT 3
59805: MINUS
59806: PUSH
59807: LD_VAR 0 2
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: PUSH
59820: LD_VAR 0 1
59824: PUSH
59825: LD_INT 4
59827: MINUS
59828: PUSH
59829: LD_VAR 0 2
59833: PUSH
59834: LD_INT 4
59836: MINUS
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: ST_TO_ADDR
// end ; 3 :
59853: GO 60275
59855: LD_INT 3
59857: DOUBLE
59858: EQUAL
59859: IFTRUE 59863
59861: GO 59996
59863: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59864: LD_ADDR_VAR 0 5
59868: PUSH
59869: LD_VAR 0 1
59873: PUSH
59874: LD_INT 3
59876: PLUS
59877: PUSH
59878: LD_VAR 0 2
59882: PUSH
59883: LD_INT 4
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: LD_VAR 0 1
59895: PUSH
59896: LD_INT 4
59898: PLUS
59899: PUSH
59900: LD_VAR 0 2
59904: PUSH
59905: LD_INT 4
59907: PLUS
59908: PUSH
59909: LD_INT 5
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: PUSH
59917: LD_VAR 0 1
59921: PUSH
59922: LD_INT 4
59924: MINUS
59925: PUSH
59926: LD_VAR 0 2
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: LIST
59938: PUSH
59939: LD_VAR 0 1
59943: PUSH
59944: LD_VAR 0 2
59948: PUSH
59949: LD_INT 4
59951: MINUS
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: PUSH
59961: LD_VAR 0 1
59965: PUSH
59966: LD_INT 3
59968: MINUS
59969: PUSH
59970: LD_VAR 0 2
59974: PUSH
59975: LD_INT 3
59977: MINUS
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: ST_TO_ADDR
// end ; 4 :
59994: GO 60275
59996: LD_INT 4
59998: DOUBLE
59999: EQUAL
60000: IFTRUE 60004
60002: GO 60137
60004: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60005: LD_ADDR_VAR 0 5
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: LD_VAR 0 2
60019: PUSH
60020: LD_INT 4
60022: PLUS
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: PUSH
60032: LD_VAR 0 1
60036: PUSH
60037: LD_INT 3
60039: PLUS
60040: PUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_INT 3
60048: PLUS
60049: PUSH
60050: LD_INT 5
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: PUSH
60058: LD_VAR 0 1
60062: PUSH
60063: LD_INT 4
60065: PLUS
60066: PUSH
60067: LD_VAR 0 2
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: PUSH
60080: LD_VAR 0 1
60084: PUSH
60085: LD_VAR 0 2
60089: PUSH
60090: LD_INT 3
60092: MINUS
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: PUSH
60102: LD_VAR 0 1
60106: PUSH
60107: LD_INT 4
60109: MINUS
60110: PUSH
60111: LD_VAR 0 2
60115: PUSH
60116: LD_INT 4
60118: MINUS
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// end ; 5 :
60135: GO 60275
60137: LD_INT 5
60139: DOUBLE
60140: EQUAL
60141: IFTRUE 60145
60143: GO 60274
60145: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60146: LD_ADDR_VAR 0 5
60150: PUSH
60151: LD_VAR 0 1
60155: PUSH
60156: LD_INT 4
60158: MINUS
60159: PUSH
60160: LD_VAR 0 2
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: LD_VAR 0 1
60177: PUSH
60178: LD_VAR 0 2
60182: PUSH
60183: LD_INT 4
60185: MINUS
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: LIST
60194: PUSH
60195: LD_VAR 0 1
60199: PUSH
60200: LD_INT 4
60202: PLUS
60203: PUSH
60204: LD_VAR 0 2
60208: PUSH
60209: LD_INT 4
60211: PLUS
60212: PUSH
60213: LD_INT 5
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: LIST
60220: PUSH
60221: LD_VAR 0 1
60225: PUSH
60226: LD_INT 3
60228: PLUS
60229: PUSH
60230: LD_VAR 0 2
60234: PUSH
60235: LD_INT 4
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: LIST
60242: PUSH
60243: LD_VAR 0 1
60247: PUSH
60248: LD_VAR 0 2
60252: PUSH
60253: LD_INT 3
60255: PLUS
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: ST_TO_ADDR
// end ; end ;
60272: GO 60275
60274: POP
// result := list ;
60275: LD_ADDR_VAR 0 4
60279: PUSH
60280: LD_VAR 0 5
60284: ST_TO_ADDR
// end ;
60285: LD_VAR 0 4
60289: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60290: LD_INT 0
60292: PPUSH
60293: PPUSH
60294: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60295: LD_VAR 0 1
60299: NOT
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: IN
60324: NOT
60325: OR
60326: IFFALSE 60330
// exit ;
60328: GO 60422
// tmp := [ ] ;
60330: LD_ADDR_VAR 0 5
60334: PUSH
60335: EMPTY
60336: ST_TO_ADDR
// for i in units do
60337: LD_ADDR_VAR 0 4
60341: PUSH
60342: LD_VAR 0 1
60346: PUSH
60347: FOR_IN
60348: IFFALSE 60391
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60350: LD_ADDR_VAR 0 5
60354: PUSH
60355: LD_VAR 0 5
60359: PPUSH
60360: LD_VAR 0 5
60364: PUSH
60365: LD_INT 1
60367: PLUS
60368: PPUSH
60369: LD_VAR 0 4
60373: PPUSH
60374: LD_VAR 0 2
60378: PPUSH
60379: CALL_OW 259
60383: PPUSH
60384: CALL_OW 2
60388: ST_TO_ADDR
60389: GO 60347
60391: POP
60392: POP
// if not tmp then
60393: LD_VAR 0 5
60397: NOT
60398: IFFALSE 60402
// exit ;
60400: GO 60422
// result := SortListByListDesc ( units , tmp ) ;
60402: LD_ADDR_VAR 0 3
60406: PUSH
60407: LD_VAR 0 1
60411: PPUSH
60412: LD_VAR 0 5
60416: PPUSH
60417: CALL_OW 77
60421: ST_TO_ADDR
// end ;
60422: LD_VAR 0 3
60426: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60427: LD_INT 0
60429: PPUSH
60430: PPUSH
60431: PPUSH
// result := false ;
60432: LD_ADDR_VAR 0 3
60436: PUSH
60437: LD_INT 0
60439: ST_TO_ADDR
// x := GetX ( building ) ;
60440: LD_ADDR_VAR 0 4
60444: PUSH
60445: LD_VAR 0 2
60449: PPUSH
60450: CALL_OW 250
60454: ST_TO_ADDR
// y := GetY ( building ) ;
60455: LD_ADDR_VAR 0 5
60459: PUSH
60460: LD_VAR 0 2
60464: PPUSH
60465: CALL_OW 251
60469: ST_TO_ADDR
// if not building or not x or not y then
60470: LD_VAR 0 2
60474: NOT
60475: PUSH
60476: LD_VAR 0 4
60480: NOT
60481: OR
60482: PUSH
60483: LD_VAR 0 5
60487: NOT
60488: OR
60489: IFFALSE 60493
// exit ;
60491: GO 60585
// if GetTaskList ( unit ) then
60493: LD_VAR 0 1
60497: PPUSH
60498: CALL_OW 437
60502: IFFALSE 60585
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60504: LD_STRING e
60506: PUSH
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 437
60516: PUSH
60517: LD_INT 1
60519: ARRAY
60520: PUSH
60521: LD_INT 1
60523: ARRAY
60524: EQUAL
60525: PUSH
60526: LD_VAR 0 4
60530: PUSH
60531: LD_VAR 0 1
60535: PPUSH
60536: CALL_OW 437
60540: PUSH
60541: LD_INT 1
60543: ARRAY
60544: PUSH
60545: LD_INT 2
60547: ARRAY
60548: EQUAL
60549: AND
60550: PUSH
60551: LD_VAR 0 5
60555: PUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 437
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: PUSH
60570: LD_INT 3
60572: ARRAY
60573: EQUAL
60574: AND
60575: IFFALSE 60585
// result := true end ;
60577: LD_ADDR_VAR 0 3
60581: PUSH
60582: LD_INT 1
60584: ST_TO_ADDR
// end ;
60585: LD_VAR 0 3
60589: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60590: LD_INT 0
60592: PPUSH
// result := false ;
60593: LD_ADDR_VAR 0 4
60597: PUSH
60598: LD_INT 0
60600: ST_TO_ADDR
// if GetTaskList ( unit ) then
60601: LD_VAR 0 1
60605: PPUSH
60606: CALL_OW 437
60610: IFFALSE 60693
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60612: LD_STRING M
60614: PUSH
60615: LD_VAR 0 1
60619: PPUSH
60620: CALL_OW 437
60624: PUSH
60625: LD_INT 1
60627: ARRAY
60628: PUSH
60629: LD_INT 1
60631: ARRAY
60632: EQUAL
60633: PUSH
60634: LD_VAR 0 2
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 437
60648: PUSH
60649: LD_INT 1
60651: ARRAY
60652: PUSH
60653: LD_INT 2
60655: ARRAY
60656: EQUAL
60657: AND
60658: PUSH
60659: LD_VAR 0 3
60663: PUSH
60664: LD_VAR 0 1
60668: PPUSH
60669: CALL_OW 437
60673: PUSH
60674: LD_INT 1
60676: ARRAY
60677: PUSH
60678: LD_INT 3
60680: ARRAY
60681: EQUAL
60682: AND
60683: IFFALSE 60693
// result := true ;
60685: LD_ADDR_VAR 0 4
60689: PUSH
60690: LD_INT 1
60692: ST_TO_ADDR
// end ; end ;
60693: LD_VAR 0 4
60697: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60698: LD_INT 0
60700: PPUSH
60701: PPUSH
60702: PPUSH
60703: PPUSH
// if not unit or not area then
60704: LD_VAR 0 1
60708: NOT
60709: PUSH
60710: LD_VAR 0 2
60714: NOT
60715: OR
60716: IFFALSE 60720
// exit ;
60718: GO 60884
// tmp := AreaToList ( area , i ) ;
60720: LD_ADDR_VAR 0 6
60724: PUSH
60725: LD_VAR 0 2
60729: PPUSH
60730: LD_VAR 0 5
60734: PPUSH
60735: CALL_OW 517
60739: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60740: LD_ADDR_VAR 0 5
60744: PUSH
60745: DOUBLE
60746: LD_INT 1
60748: DEC
60749: ST_TO_ADDR
60750: LD_VAR 0 6
60754: PUSH
60755: LD_INT 1
60757: ARRAY
60758: PUSH
60759: FOR_TO
60760: IFFALSE 60882
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60762: LD_ADDR_VAR 0 7
60766: PUSH
60767: LD_VAR 0 6
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PUSH
60776: LD_VAR 0 5
60780: ARRAY
60781: PUSH
60782: LD_VAR 0 6
60786: PUSH
60787: LD_INT 2
60789: ARRAY
60790: PUSH
60791: LD_VAR 0 5
60795: ARRAY
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60801: LD_VAR 0 7
60805: PUSH
60806: LD_INT 1
60808: ARRAY
60809: PPUSH
60810: LD_VAR 0 7
60814: PUSH
60815: LD_INT 2
60817: ARRAY
60818: PPUSH
60819: CALL_OW 428
60823: PUSH
60824: LD_INT 0
60826: EQUAL
60827: IFFALSE 60880
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60829: LD_VAR 0 1
60833: PPUSH
60834: LD_VAR 0 7
60838: PUSH
60839: LD_INT 1
60841: ARRAY
60842: PPUSH
60843: LD_VAR 0 7
60847: PUSH
60848: LD_INT 2
60850: ARRAY
60851: PPUSH
60852: LD_VAR 0 3
60856: PPUSH
60857: CALL_OW 48
// result := IsPlaced ( unit ) ;
60861: LD_ADDR_VAR 0 4
60865: PUSH
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 305
60875: ST_TO_ADDR
// exit ;
60876: POP
60877: POP
60878: GO 60884
// end ; end ;
60880: GO 60759
60882: POP
60883: POP
// end ;
60884: LD_VAR 0 4
60888: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60889: LD_INT 0
60891: PPUSH
60892: PPUSH
60893: PPUSH
// if not side or side > 8 then
60894: LD_VAR 0 1
60898: NOT
60899: PUSH
60900: LD_VAR 0 1
60904: PUSH
60905: LD_INT 8
60907: GREATER
60908: OR
60909: IFFALSE 60913
// exit ;
60911: GO 61100
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60913: LD_ADDR_VAR 0 4
60917: PUSH
60918: LD_INT 22
60920: PUSH
60921: LD_VAR 0 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 21
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PPUSH
60944: CALL_OW 69
60948: ST_TO_ADDR
// if not tmp then
60949: LD_VAR 0 4
60953: NOT
60954: IFFALSE 60958
// exit ;
60956: GO 61100
// enable_addtolog := true ;
60958: LD_ADDR_OWVAR 81
60962: PUSH
60963: LD_INT 1
60965: ST_TO_ADDR
// AddToLog ( [ ) ;
60966: LD_STRING [
60968: PPUSH
60969: CALL_OW 561
// for i in tmp do
60973: LD_ADDR_VAR 0 3
60977: PUSH
60978: LD_VAR 0 4
60982: PUSH
60983: FOR_IN
60984: IFFALSE 61091
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60986: LD_STRING [
60988: PUSH
60989: LD_VAR 0 3
60993: PPUSH
60994: CALL_OW 266
60998: STR
60999: PUSH
61000: LD_STRING , 
61002: STR
61003: PUSH
61004: LD_VAR 0 3
61008: PPUSH
61009: CALL_OW 250
61013: STR
61014: PUSH
61015: LD_STRING , 
61017: STR
61018: PUSH
61019: LD_VAR 0 3
61023: PPUSH
61024: CALL_OW 251
61028: STR
61029: PUSH
61030: LD_STRING , 
61032: STR
61033: PUSH
61034: LD_VAR 0 3
61038: PPUSH
61039: CALL_OW 254
61043: STR
61044: PUSH
61045: LD_STRING , 
61047: STR
61048: PUSH
61049: LD_VAR 0 3
61053: PPUSH
61054: LD_INT 1
61056: PPUSH
61057: CALL_OW 268
61061: STR
61062: PUSH
61063: LD_STRING , 
61065: STR
61066: PUSH
61067: LD_VAR 0 3
61071: PPUSH
61072: LD_INT 2
61074: PPUSH
61075: CALL_OW 268
61079: STR
61080: PUSH
61081: LD_STRING ],
61083: STR
61084: PPUSH
61085: CALL_OW 561
// end ;
61089: GO 60983
61091: POP
61092: POP
// AddToLog ( ]; ) ;
61093: LD_STRING ];
61095: PPUSH
61096: CALL_OW 561
// end ;
61100: LD_VAR 0 2
61104: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
61110: PPUSH
61111: PPUSH
// if not area or not rate or not max then
61112: LD_VAR 0 1
61116: NOT
61117: PUSH
61118: LD_VAR 0 2
61122: NOT
61123: OR
61124: PUSH
61125: LD_VAR 0 4
61129: NOT
61130: OR
61131: IFFALSE 61135
// exit ;
61133: GO 61324
// while 1 do
61135: LD_INT 1
61137: IFFALSE 61324
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61139: LD_ADDR_VAR 0 9
61143: PUSH
61144: LD_VAR 0 1
61148: PPUSH
61149: LD_INT 1
61151: PPUSH
61152: CALL_OW 287
61156: PUSH
61157: LD_INT 10
61159: MUL
61160: ST_TO_ADDR
// r := rate / 10 ;
61161: LD_ADDR_VAR 0 7
61165: PUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_INT 10
61173: DIVREAL
61174: ST_TO_ADDR
// time := 1 1$00 ;
61175: LD_ADDR_VAR 0 8
61179: PUSH
61180: LD_INT 2100
61182: ST_TO_ADDR
// if amount < min then
61183: LD_VAR 0 9
61187: PUSH
61188: LD_VAR 0 3
61192: LESS
61193: IFFALSE 61211
// r := r * 2 else
61195: LD_ADDR_VAR 0 7
61199: PUSH
61200: LD_VAR 0 7
61204: PUSH
61205: LD_INT 2
61207: MUL
61208: ST_TO_ADDR
61209: GO 61237
// if amount > max then
61211: LD_VAR 0 9
61215: PUSH
61216: LD_VAR 0 4
61220: GREATER
61221: IFFALSE 61237
// r := r / 2 ;
61223: LD_ADDR_VAR 0 7
61227: PUSH
61228: LD_VAR 0 7
61232: PUSH
61233: LD_INT 2
61235: DIVREAL
61236: ST_TO_ADDR
// time := time / r ;
61237: LD_ADDR_VAR 0 8
61241: PUSH
61242: LD_VAR 0 8
61246: PUSH
61247: LD_VAR 0 7
61251: DIVREAL
61252: ST_TO_ADDR
// if time < 0 then
61253: LD_VAR 0 8
61257: PUSH
61258: LD_INT 0
61260: LESS
61261: IFFALSE 61278
// time := time * - 1 ;
61263: LD_ADDR_VAR 0 8
61267: PUSH
61268: LD_VAR 0 8
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: MUL
61277: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61278: LD_VAR 0 8
61282: PUSH
61283: LD_INT 35
61285: PPUSH
61286: LD_INT 875
61288: PPUSH
61289: CALL_OW 12
61293: PLUS
61294: PPUSH
61295: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61299: LD_INT 1
61301: PPUSH
61302: LD_INT 5
61304: PPUSH
61305: CALL_OW 12
61309: PPUSH
61310: LD_VAR 0 1
61314: PPUSH
61315: LD_INT 1
61317: PPUSH
61318: CALL_OW 55
// end ;
61322: GO 61135
// end ;
61324: LD_VAR 0 5
61328: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61329: LD_INT 0
61331: PPUSH
61332: PPUSH
61333: PPUSH
61334: PPUSH
61335: PPUSH
61336: PPUSH
61337: PPUSH
61338: PPUSH
// if not turrets or not factories then
61339: LD_VAR 0 1
61343: NOT
61344: PUSH
61345: LD_VAR 0 2
61349: NOT
61350: OR
61351: IFFALSE 61355
// exit ;
61353: GO 61662
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61355: LD_ADDR_VAR 0 10
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 6
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 2
61372: PUSH
61373: LD_INT 4
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: PUSH
61383: LD_INT 5
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 24
61397: PUSH
61398: LD_INT 25
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 23
61407: PUSH
61408: LD_INT 27
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 42
61421: PUSH
61422: LD_INT 43
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 44
61431: PUSH
61432: LD_INT 46
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 45
61441: PUSH
61442: LD_INT 47
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: ST_TO_ADDR
// result := [ ] ;
61459: LD_ADDR_VAR 0 3
61463: PUSH
61464: EMPTY
61465: ST_TO_ADDR
// for i in turrets do
61466: LD_ADDR_VAR 0 4
61470: PUSH
61471: LD_VAR 0 1
61475: PUSH
61476: FOR_IN
61477: IFFALSE 61660
// begin nat := GetNation ( i ) ;
61479: LD_ADDR_VAR 0 7
61483: PUSH
61484: LD_VAR 0 4
61488: PPUSH
61489: CALL_OW 248
61493: ST_TO_ADDR
// weapon := 0 ;
61494: LD_ADDR_VAR 0 8
61498: PUSH
61499: LD_INT 0
61501: ST_TO_ADDR
// if not nat then
61502: LD_VAR 0 7
61506: NOT
61507: IFFALSE 61511
// continue ;
61509: GO 61476
// for j in list [ nat ] do
61511: LD_ADDR_VAR 0 5
61515: PUSH
61516: LD_VAR 0 10
61520: PUSH
61521: LD_VAR 0 7
61525: ARRAY
61526: PUSH
61527: FOR_IN
61528: IFFALSE 61569
// if GetBWeapon ( i ) = j [ 1 ] then
61530: LD_VAR 0 4
61534: PPUSH
61535: CALL_OW 269
61539: PUSH
61540: LD_VAR 0 5
61544: PUSH
61545: LD_INT 1
61547: ARRAY
61548: EQUAL
61549: IFFALSE 61567
// begin weapon := j [ 2 ] ;
61551: LD_ADDR_VAR 0 8
61555: PUSH
61556: LD_VAR 0 5
61560: PUSH
61561: LD_INT 2
61563: ARRAY
61564: ST_TO_ADDR
// break ;
61565: GO 61569
// end ;
61567: GO 61527
61569: POP
61570: POP
// if not weapon then
61571: LD_VAR 0 8
61575: NOT
61576: IFFALSE 61580
// continue ;
61578: GO 61476
// for k in factories do
61580: LD_ADDR_VAR 0 6
61584: PUSH
61585: LD_VAR 0 2
61589: PUSH
61590: FOR_IN
61591: IFFALSE 61656
// begin weapons := AvailableWeaponList ( k ) ;
61593: LD_ADDR_VAR 0 9
61597: PUSH
61598: LD_VAR 0 6
61602: PPUSH
61603: CALL_OW 478
61607: ST_TO_ADDR
// if not weapons then
61608: LD_VAR 0 9
61612: NOT
61613: IFFALSE 61617
// continue ;
61615: GO 61590
// if weapon in weapons then
61617: LD_VAR 0 8
61621: PUSH
61622: LD_VAR 0 9
61626: IN
61627: IFFALSE 61654
// begin result := [ i , weapon ] ;
61629: LD_ADDR_VAR 0 3
61633: PUSH
61634: LD_VAR 0 4
61638: PUSH
61639: LD_VAR 0 8
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: ST_TO_ADDR
// exit ;
61648: POP
61649: POP
61650: POP
61651: POP
61652: GO 61662
// end ; end ;
61654: GO 61590
61656: POP
61657: POP
// end ;
61658: GO 61476
61660: POP
61661: POP
// end ;
61662: LD_VAR 0 3
61666: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61667: LD_INT 0
61669: PPUSH
// if not side or side > 8 then
61670: LD_VAR 0 3
61674: NOT
61675: PUSH
61676: LD_VAR 0 3
61680: PUSH
61681: LD_INT 8
61683: GREATER
61684: OR
61685: IFFALSE 61689
// exit ;
61687: GO 61748
// if not range then
61689: LD_VAR 0 4
61693: NOT
61694: IFFALSE 61705
// range := - 12 ;
61696: LD_ADDR_VAR 0 4
61700: PUSH
61701: LD_INT 12
61703: NEG
61704: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61705: LD_VAR 0 1
61709: PPUSH
61710: LD_VAR 0 2
61714: PPUSH
61715: LD_VAR 0 3
61719: PPUSH
61720: LD_VAR 0 4
61724: PPUSH
61725: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61729: LD_VAR 0 1
61733: PPUSH
61734: LD_VAR 0 2
61738: PPUSH
61739: LD_VAR 0 3
61743: PPUSH
61744: CALL_OW 331
// end ;
61748: LD_VAR 0 5
61752: RET
// export function Video ( mode ) ; begin
61753: LD_INT 0
61755: PPUSH
// ingame_video = mode ;
61756: LD_ADDR_OWVAR 52
61760: PUSH
61761: LD_VAR 0 1
61765: ST_TO_ADDR
// interface_hidden = mode ;
61766: LD_ADDR_OWVAR 54
61770: PUSH
61771: LD_VAR 0 1
61775: ST_TO_ADDR
// end ;
61776: LD_VAR 0 2
61780: RET
// export function Join ( array , element ) ; begin
61781: LD_INT 0
61783: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61784: LD_ADDR_VAR 0 3
61788: PUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: LD_VAR 0 1
61798: PUSH
61799: LD_INT 1
61801: PLUS
61802: PPUSH
61803: LD_VAR 0 2
61807: PPUSH
61808: CALL_OW 1
61812: ST_TO_ADDR
// end ;
61813: LD_VAR 0 3
61817: RET
// export function JoinUnion ( array , element ) ; begin
61818: LD_INT 0
61820: PPUSH
// result := array union element ;
61821: LD_ADDR_VAR 0 3
61825: PUSH
61826: LD_VAR 0 1
61830: PUSH
61831: LD_VAR 0 2
61835: UNION
61836: ST_TO_ADDR
// end ;
61837: LD_VAR 0 3
61841: RET
// export function GetBehemoths ( side ) ; begin
61842: LD_INT 0
61844: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61845: LD_ADDR_VAR 0 2
61849: PUSH
61850: LD_INT 22
61852: PUSH
61853: LD_VAR 0 1
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 31
61864: PUSH
61865: LD_INT 25
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PPUSH
61876: CALL_OW 69
61880: ST_TO_ADDR
// end ;
61881: LD_VAR 0 2
61885: RET
// export function Shuffle ( array ) ; var i , index ; begin
61886: LD_INT 0
61888: PPUSH
61889: PPUSH
61890: PPUSH
// result := [ ] ;
61891: LD_ADDR_VAR 0 2
61895: PUSH
61896: EMPTY
61897: ST_TO_ADDR
// if not array then
61898: LD_VAR 0 1
61902: NOT
61903: IFFALSE 61907
// exit ;
61905: GO 62006
// Randomize ;
61907: CALL_OW 10
// for i = array downto 1 do
61911: LD_ADDR_VAR 0 3
61915: PUSH
61916: DOUBLE
61917: LD_VAR 0 1
61921: INC
61922: ST_TO_ADDR
61923: LD_INT 1
61925: PUSH
61926: FOR_DOWNTO
61927: IFFALSE 62004
// begin index := rand ( 1 , array ) ;
61929: LD_ADDR_VAR 0 4
61933: PUSH
61934: LD_INT 1
61936: PPUSH
61937: LD_VAR 0 1
61941: PPUSH
61942: CALL_OW 12
61946: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61947: LD_ADDR_VAR 0 2
61951: PUSH
61952: LD_VAR 0 2
61956: PPUSH
61957: LD_VAR 0 2
61961: PUSH
61962: LD_INT 1
61964: PLUS
61965: PPUSH
61966: LD_VAR 0 1
61970: PUSH
61971: LD_VAR 0 4
61975: ARRAY
61976: PPUSH
61977: CALL_OW 2
61981: ST_TO_ADDR
// array := Delete ( array , index ) ;
61982: LD_ADDR_VAR 0 1
61986: PUSH
61987: LD_VAR 0 1
61991: PPUSH
61992: LD_VAR 0 4
61996: PPUSH
61997: CALL_OW 3
62001: ST_TO_ADDR
// end ;
62002: GO 61926
62004: POP
62005: POP
// end ;
62006: LD_VAR 0 2
62010: RET
// export function GetBaseMaterials ( base ) ; begin
62011: LD_INT 0
62013: PPUSH
// result := [ 0 , 0 , 0 ] ;
62014: LD_ADDR_VAR 0 2
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// if not base then
62033: LD_VAR 0 1
62037: NOT
62038: IFFALSE 62042
// exit ;
62040: GO 62091
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: LD_INT 1
62054: PPUSH
62055: CALL_OW 275
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: LD_INT 2
62067: PPUSH
62068: CALL_OW 275
62072: PUSH
62073: LD_VAR 0 1
62077: PPUSH
62078: LD_INT 3
62080: PPUSH
62081: CALL_OW 275
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: LIST
62090: ST_TO_ADDR
// end ;
62091: LD_VAR 0 2
62095: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62096: LD_INT 0
62098: PPUSH
62099: PPUSH
// result := array ;
62100: LD_ADDR_VAR 0 3
62104: PUSH
62105: LD_VAR 0 1
62109: ST_TO_ADDR
// if size >= result then
62110: LD_VAR 0 2
62114: PUSH
62115: LD_VAR 0 3
62119: GREATEREQUAL
62120: IFFALSE 62124
// exit ;
62122: GO 62174
// if size then
62124: LD_VAR 0 2
62128: IFFALSE 62174
// for i := array downto size do
62130: LD_ADDR_VAR 0 4
62134: PUSH
62135: DOUBLE
62136: LD_VAR 0 1
62140: INC
62141: ST_TO_ADDR
62142: LD_VAR 0 2
62146: PUSH
62147: FOR_DOWNTO
62148: IFFALSE 62172
// result := Delete ( result , result ) ;
62150: LD_ADDR_VAR 0 3
62154: PUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: CALL_OW 3
62169: ST_TO_ADDR
62170: GO 62147
62172: POP
62173: POP
// end ;
62174: LD_VAR 0 3
62178: RET
// export function ComExit ( unit ) ; var tmp ; begin
62179: LD_INT 0
62181: PPUSH
62182: PPUSH
// if not IsInUnit ( unit ) then
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL_OW 310
62192: NOT
62193: IFFALSE 62197
// exit ;
62195: GO 62257
// tmp := IsInUnit ( unit ) ;
62197: LD_ADDR_VAR 0 3
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 310
62211: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62212: LD_VAR 0 3
62216: PPUSH
62217: CALL_OW 247
62221: PUSH
62222: LD_INT 2
62224: EQUAL
62225: IFFALSE 62238
// ComExitVehicle ( unit ) else
62227: LD_VAR 0 1
62231: PPUSH
62232: CALL_OW 121
62236: GO 62247
// ComExitBuilding ( unit ) ;
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 122
// result := tmp ;
62247: LD_ADDR_VAR 0 2
62251: PUSH
62252: LD_VAR 0 3
62256: ST_TO_ADDR
// end ;
62257: LD_VAR 0 2
62261: RET
// export function ComExitAll ( units ) ; var i ; begin
62262: LD_INT 0
62264: PPUSH
62265: PPUSH
// if not units then
62266: LD_VAR 0 1
62270: NOT
62271: IFFALSE 62275
// exit ;
62273: GO 62301
// for i in units do
62275: LD_ADDR_VAR 0 3
62279: PUSH
62280: LD_VAR 0 1
62284: PUSH
62285: FOR_IN
62286: IFFALSE 62299
// ComExit ( i ) ;
62288: LD_VAR 0 3
62292: PPUSH
62293: CALL 62179 0 1
62297: GO 62285
62299: POP
62300: POP
// end ;
62301: LD_VAR 0 2
62305: RET
// export function ResetHc ; begin
62306: LD_INT 0
62308: PPUSH
// InitHc ;
62309: CALL_OW 19
// hc_importance := 0 ;
62313: LD_ADDR_OWVAR 32
62317: PUSH
62318: LD_INT 0
62320: ST_TO_ADDR
// end ;
62321: LD_VAR 0 1
62325: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62326: LD_INT 0
62328: PPUSH
62329: PPUSH
62330: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62331: LD_ADDR_VAR 0 6
62335: PUSH
62336: LD_VAR 0 1
62340: PUSH
62341: LD_VAR 0 3
62345: PLUS
62346: PUSH
62347: LD_INT 2
62349: DIV
62350: ST_TO_ADDR
// if _x < 0 then
62351: LD_VAR 0 6
62355: PUSH
62356: LD_INT 0
62358: LESS
62359: IFFALSE 62376
// _x := _x * - 1 ;
62361: LD_ADDR_VAR 0 6
62365: PUSH
62366: LD_VAR 0 6
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: MUL
62375: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62376: LD_ADDR_VAR 0 7
62380: PUSH
62381: LD_VAR 0 2
62385: PUSH
62386: LD_VAR 0 4
62390: PLUS
62391: PUSH
62392: LD_INT 2
62394: DIV
62395: ST_TO_ADDR
// if _y < 0 then
62396: LD_VAR 0 7
62400: PUSH
62401: LD_INT 0
62403: LESS
62404: IFFALSE 62421
// _y := _y * - 1 ;
62406: LD_ADDR_VAR 0 7
62410: PUSH
62411: LD_VAR 0 7
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: MUL
62420: ST_TO_ADDR
// result := [ _x , _y ] ;
62421: LD_ADDR_VAR 0 5
62425: PUSH
62426: LD_VAR 0 6
62430: PUSH
62431: LD_VAR 0 7
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// end ;
62440: LD_VAR 0 5
62444: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
62449: PPUSH
62450: PPUSH
// task := GetTaskList ( unit ) ;
62451: LD_ADDR_VAR 0 7
62455: PUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: CALL_OW 437
62465: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62466: LD_VAR 0 7
62470: NOT
62471: PUSH
62472: LD_VAR 0 1
62476: PPUSH
62477: LD_VAR 0 2
62481: PPUSH
62482: CALL_OW 308
62486: NOT
62487: AND
62488: IFFALSE 62492
// exit ;
62490: GO 62610
// if IsInArea ( unit , area ) then
62492: LD_VAR 0 1
62496: PPUSH
62497: LD_VAR 0 2
62501: PPUSH
62502: CALL_OW 308
62506: IFFALSE 62524
// begin ComMoveToArea ( unit , goAway ) ;
62508: LD_VAR 0 1
62512: PPUSH
62513: LD_VAR 0 3
62517: PPUSH
62518: CALL_OW 113
// exit ;
62522: GO 62610
// end ; if task [ 1 ] [ 1 ] <> M then
62524: LD_VAR 0 7
62528: PUSH
62529: LD_INT 1
62531: ARRAY
62532: PUSH
62533: LD_INT 1
62535: ARRAY
62536: PUSH
62537: LD_STRING M
62539: NONEQUAL
62540: IFFALSE 62544
// exit ;
62542: GO 62610
// x := task [ 1 ] [ 2 ] ;
62544: LD_ADDR_VAR 0 5
62548: PUSH
62549: LD_VAR 0 7
62553: PUSH
62554: LD_INT 1
62556: ARRAY
62557: PUSH
62558: LD_INT 2
62560: ARRAY
62561: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62562: LD_ADDR_VAR 0 6
62566: PUSH
62567: LD_VAR 0 7
62571: PUSH
62572: LD_INT 1
62574: ARRAY
62575: PUSH
62576: LD_INT 3
62578: ARRAY
62579: ST_TO_ADDR
// if InArea ( x , y , area ) then
62580: LD_VAR 0 5
62584: PPUSH
62585: LD_VAR 0 6
62589: PPUSH
62590: LD_VAR 0 2
62594: PPUSH
62595: CALL_OW 309
62599: IFFALSE 62610
// ComStop ( unit ) ;
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 141
// end ;
62610: LD_VAR 0 4
62614: RET
// export function Abs ( value ) ; begin
62615: LD_INT 0
62617: PPUSH
// result := value ;
62618: LD_ADDR_VAR 0 2
62622: PUSH
62623: LD_VAR 0 1
62627: ST_TO_ADDR
// if value < 0 then
62628: LD_VAR 0 1
62632: PUSH
62633: LD_INT 0
62635: LESS
62636: IFFALSE 62653
// result := value * - 1 ;
62638: LD_ADDR_VAR 0 2
62642: PUSH
62643: LD_VAR 0 1
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: MUL
62652: ST_TO_ADDR
// end ;
62653: LD_VAR 0 2
62657: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62658: LD_INT 0
62660: PPUSH
62661: PPUSH
62662: PPUSH
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
62667: PPUSH
// if not unit or not building then
62668: LD_VAR 0 1
62672: NOT
62673: PUSH
62674: LD_VAR 0 2
62678: NOT
62679: OR
62680: IFFALSE 62684
// exit ;
62682: GO 62910
// x := GetX ( building ) ;
62684: LD_ADDR_VAR 0 4
62688: PUSH
62689: LD_VAR 0 2
62693: PPUSH
62694: CALL_OW 250
62698: ST_TO_ADDR
// y := GetY ( building ) ;
62699: LD_ADDR_VAR 0 6
62703: PUSH
62704: LD_VAR 0 2
62708: PPUSH
62709: CALL_OW 251
62713: ST_TO_ADDR
// d := GetDir ( building ) ;
62714: LD_ADDR_VAR 0 8
62718: PUSH
62719: LD_VAR 0 2
62723: PPUSH
62724: CALL_OW 254
62728: ST_TO_ADDR
// r := 4 ;
62729: LD_ADDR_VAR 0 9
62733: PUSH
62734: LD_INT 4
62736: ST_TO_ADDR
// for i := 1 to 5 do
62737: LD_ADDR_VAR 0 10
62741: PUSH
62742: DOUBLE
62743: LD_INT 1
62745: DEC
62746: ST_TO_ADDR
62747: LD_INT 5
62749: PUSH
62750: FOR_TO
62751: IFFALSE 62908
// begin _x := ShiftX ( x , d , r + i ) ;
62753: LD_ADDR_VAR 0 5
62757: PUSH
62758: LD_VAR 0 4
62762: PPUSH
62763: LD_VAR 0 8
62767: PPUSH
62768: LD_VAR 0 9
62772: PUSH
62773: LD_VAR 0 10
62777: PLUS
62778: PPUSH
62779: CALL_OW 272
62783: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62784: LD_ADDR_VAR 0 7
62788: PUSH
62789: LD_VAR 0 6
62793: PPUSH
62794: LD_VAR 0 8
62798: PPUSH
62799: LD_VAR 0 9
62803: PUSH
62804: LD_VAR 0 10
62808: PLUS
62809: PPUSH
62810: CALL_OW 273
62814: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62815: LD_VAR 0 5
62819: PPUSH
62820: LD_VAR 0 7
62824: PPUSH
62825: CALL_OW 488
62829: PUSH
62830: LD_VAR 0 5
62834: PPUSH
62835: LD_VAR 0 7
62839: PPUSH
62840: CALL_OW 428
62844: PPUSH
62845: CALL_OW 247
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: IN
62860: NOT
62861: AND
62862: IFFALSE 62906
// begin ComMoveXY ( unit , _x , _y ) ;
62864: LD_VAR 0 1
62868: PPUSH
62869: LD_VAR 0 5
62873: PPUSH
62874: LD_VAR 0 7
62878: PPUSH
62879: CALL_OW 111
// result := [ _x , _y ] ;
62883: LD_ADDR_VAR 0 3
62887: PUSH
62888: LD_VAR 0 5
62892: PUSH
62893: LD_VAR 0 7
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// exit ;
62902: POP
62903: POP
62904: GO 62910
// end ; end ;
62906: GO 62750
62908: POP
62909: POP
// end ;
62910: LD_VAR 0 3
62914: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62915: LD_INT 0
62917: PPUSH
62918: PPUSH
62919: PPUSH
// result := 0 ;
62920: LD_ADDR_VAR 0 3
62924: PUSH
62925: LD_INT 0
62927: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62928: LD_VAR 0 1
62932: PUSH
62933: LD_INT 0
62935: LESS
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_INT 8
62944: GREATER
62945: OR
62946: PUSH
62947: LD_VAR 0 2
62951: PUSH
62952: LD_INT 0
62954: LESS
62955: OR
62956: PUSH
62957: LD_VAR 0 2
62961: PUSH
62962: LD_INT 8
62964: GREATER
62965: OR
62966: IFFALSE 62970
// exit ;
62968: GO 63045
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62970: LD_ADDR_VAR 0 4
62974: PUSH
62975: LD_INT 22
62977: PUSH
62978: LD_VAR 0 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PPUSH
62987: CALL_OW 69
62991: PUSH
62992: FOR_IN
62993: IFFALSE 63043
// begin un := UnitShoot ( i ) ;
62995: LD_ADDR_VAR 0 5
62999: PUSH
63000: LD_VAR 0 4
63004: PPUSH
63005: CALL_OW 504
63009: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63010: LD_VAR 0 5
63014: PPUSH
63015: CALL_OW 255
63019: PUSH
63020: LD_VAR 0 1
63024: EQUAL
63025: IFFALSE 63041
// begin result := un ;
63027: LD_ADDR_VAR 0 3
63031: PUSH
63032: LD_VAR 0 5
63036: ST_TO_ADDR
// exit ;
63037: POP
63038: POP
63039: GO 63045
// end ; end ;
63041: GO 62992
63043: POP
63044: POP
// end ;
63045: LD_VAR 0 3
63049: RET
// export function GetCargoBay ( units ) ; begin
63050: LD_INT 0
63052: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63053: LD_ADDR_VAR 0 2
63057: PUSH
63058: LD_VAR 0 1
63062: PPUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 34
63068: PUSH
63069: LD_INT 12
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 34
63078: PUSH
63079: LD_INT 51
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 34
63088: PUSH
63089: LD_INT 32
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 34
63098: PUSH
63099: LD_INT 89
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: PPUSH
63113: CALL_OW 72
63117: ST_TO_ADDR
// end ;
63118: LD_VAR 0 2
63122: RET
// export function Negate ( value ) ; begin
63123: LD_INT 0
63125: PPUSH
// result := not value ;
63126: LD_ADDR_VAR 0 2
63130: PUSH
63131: LD_VAR 0 1
63135: NOT
63136: ST_TO_ADDR
// end ;
63137: LD_VAR 0 2
63141: RET
// export function Inc ( value ) ; begin
63142: LD_INT 0
63144: PPUSH
// result := value + 1 ;
63145: LD_ADDR_VAR 0 2
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 1
63157: PLUS
63158: ST_TO_ADDR
// end ;
63159: LD_VAR 0 2
63163: RET
// export function Dec ( value ) ; begin
63164: LD_INT 0
63166: PPUSH
// result := value - 1 ;
63167: LD_ADDR_VAR 0 2
63171: PUSH
63172: LD_VAR 0 1
63176: PUSH
63177: LD_INT 1
63179: MINUS
63180: ST_TO_ADDR
// end ;
63181: LD_VAR 0 2
63185: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63186: LD_INT 0
63188: PPUSH
63189: PPUSH
63190: PPUSH
63191: PPUSH
63192: PPUSH
63193: PPUSH
63194: PPUSH
63195: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63196: LD_VAR 0 1
63200: PPUSH
63201: LD_VAR 0 2
63205: PPUSH
63206: CALL_OW 488
63210: NOT
63211: PUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: LD_VAR 0 4
63221: PPUSH
63222: CALL_OW 488
63226: NOT
63227: OR
63228: IFFALSE 63241
// begin result := - 1 ;
63230: LD_ADDR_VAR 0 5
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: ST_TO_ADDR
// exit ;
63239: GO 63476
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63241: LD_ADDR_VAR 0 12
63245: PUSH
63246: LD_VAR 0 1
63250: PPUSH
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 4
63265: PPUSH
63266: CALL 62326 0 4
63270: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63271: LD_ADDR_VAR 0 11
63275: PUSH
63276: LD_VAR 0 1
63280: PPUSH
63281: LD_VAR 0 2
63285: PPUSH
63286: LD_VAR 0 12
63290: PUSH
63291: LD_INT 1
63293: ARRAY
63294: PPUSH
63295: LD_VAR 0 12
63299: PUSH
63300: LD_INT 2
63302: ARRAY
63303: PPUSH
63304: CALL_OW 298
63308: ST_TO_ADDR
// distance := 9999 ;
63309: LD_ADDR_VAR 0 10
63313: PUSH
63314: LD_INT 9999
63316: ST_TO_ADDR
// for i := 0 to 5 do
63317: LD_ADDR_VAR 0 6
63321: PUSH
63322: DOUBLE
63323: LD_INT 0
63325: DEC
63326: ST_TO_ADDR
63327: LD_INT 5
63329: PUSH
63330: FOR_TO
63331: IFFALSE 63474
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63333: LD_ADDR_VAR 0 7
63337: PUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: LD_VAR 0 6
63347: PPUSH
63348: LD_VAR 0 11
63352: PPUSH
63353: CALL_OW 272
63357: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63358: LD_ADDR_VAR 0 8
63362: PUSH
63363: LD_VAR 0 2
63367: PPUSH
63368: LD_VAR 0 6
63372: PPUSH
63373: LD_VAR 0 11
63377: PPUSH
63378: CALL_OW 273
63382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63383: LD_VAR 0 7
63387: PPUSH
63388: LD_VAR 0 8
63392: PPUSH
63393: CALL_OW 488
63397: NOT
63398: IFFALSE 63402
// continue ;
63400: GO 63330
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63402: LD_ADDR_VAR 0 9
63406: PUSH
63407: LD_VAR 0 12
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PPUSH
63416: LD_VAR 0 12
63420: PUSH
63421: LD_INT 2
63423: ARRAY
63424: PPUSH
63425: LD_VAR 0 7
63429: PPUSH
63430: LD_VAR 0 8
63434: PPUSH
63435: CALL_OW 298
63439: ST_TO_ADDR
// if tmp < distance then
63440: LD_VAR 0 9
63444: PUSH
63445: LD_VAR 0 10
63449: LESS
63450: IFFALSE 63472
// begin result := i ;
63452: LD_ADDR_VAR 0 5
63456: PUSH
63457: LD_VAR 0 6
63461: ST_TO_ADDR
// distance := tmp ;
63462: LD_ADDR_VAR 0 10
63466: PUSH
63467: LD_VAR 0 9
63471: ST_TO_ADDR
// end ; end ;
63472: GO 63330
63474: POP
63475: POP
// end ;
63476: LD_VAR 0 5
63480: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63481: LD_INT 0
63483: PPUSH
63484: PPUSH
// if not driver or not IsInUnit ( driver ) then
63485: LD_VAR 0 1
63489: NOT
63490: PUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL_OW 310
63500: NOT
63501: OR
63502: IFFALSE 63506
// exit ;
63504: GO 63596
// vehicle := IsInUnit ( driver ) ;
63506: LD_ADDR_VAR 0 3
63510: PUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL_OW 310
63520: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63521: LD_VAR 0 1
63525: PPUSH
63526: LD_STRING \
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: PUSH
63556: LD_STRING E
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_VAR 0 3
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PPUSH
63592: CALL_OW 446
// end ;
63596: LD_VAR 0 2
63600: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63601: LD_INT 0
63603: PPUSH
63604: PPUSH
// if not driver or not IsInUnit ( driver ) then
63605: LD_VAR 0 1
63609: NOT
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 310
63620: NOT
63621: OR
63622: IFFALSE 63626
// exit ;
63624: GO 63716
// vehicle := IsInUnit ( driver ) ;
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 310
63640: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63641: LD_VAR 0 1
63645: PPUSH
63646: LD_STRING \
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: PUSH
63676: LD_STRING E
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: LD_VAR 0 3
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PPUSH
63712: CALL_OW 447
// end ;
63716: LD_VAR 0 2
63720: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63721: LD_INT 0
63723: PPUSH
63724: PPUSH
63725: PPUSH
// tmp := [ ] ;
63726: LD_ADDR_VAR 0 5
63730: PUSH
63731: EMPTY
63732: ST_TO_ADDR
// for i in units do
63733: LD_ADDR_VAR 0 4
63737: PUSH
63738: LD_VAR 0 1
63742: PUSH
63743: FOR_IN
63744: IFFALSE 63782
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63746: LD_ADDR_VAR 0 5
63750: PUSH
63751: LD_VAR 0 5
63755: PPUSH
63756: LD_VAR 0 5
63760: PUSH
63761: LD_INT 1
63763: PLUS
63764: PPUSH
63765: LD_VAR 0 4
63769: PPUSH
63770: CALL_OW 256
63774: PPUSH
63775: CALL_OW 2
63779: ST_TO_ADDR
63780: GO 63743
63782: POP
63783: POP
// if not tmp then
63784: LD_VAR 0 5
63788: NOT
63789: IFFALSE 63793
// exit ;
63791: GO 63841
// if asc then
63793: LD_VAR 0 2
63797: IFFALSE 63821
// result := SortListByListAsc ( units , tmp ) else
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_VAR 0 1
63808: PPUSH
63809: LD_VAR 0 5
63813: PPUSH
63814: CALL_OW 76
63818: ST_TO_ADDR
63819: GO 63841
// result := SortListByListDesc ( units , tmp ) ;
63821: LD_ADDR_VAR 0 3
63825: PUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: LD_VAR 0 5
63835: PPUSH
63836: CALL_OW 77
63840: ST_TO_ADDR
// end ;
63841: LD_VAR 0 3
63845: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63846: LD_INT 0
63848: PPUSH
63849: PPUSH
// task := GetTaskList ( mech ) ;
63850: LD_ADDR_VAR 0 4
63854: PUSH
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 437
63864: ST_TO_ADDR
// if not task then
63865: LD_VAR 0 4
63869: NOT
63870: IFFALSE 63874
// exit ;
63872: GO 63916
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63874: LD_ADDR_VAR 0 3
63878: PUSH
63879: LD_VAR 0 4
63883: PUSH
63884: LD_INT 1
63886: ARRAY
63887: PUSH
63888: LD_INT 1
63890: ARRAY
63891: PUSH
63892: LD_STRING r
63894: EQUAL
63895: PUSH
63896: LD_VAR 0 4
63900: PUSH
63901: LD_INT 1
63903: ARRAY
63904: PUSH
63905: LD_INT 4
63907: ARRAY
63908: PUSH
63909: LD_VAR 0 2
63913: EQUAL
63914: AND
63915: ST_TO_ADDR
// end ;
63916: LD_VAR 0 3
63920: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63921: LD_INT 0
63923: PPUSH
// SetDir ( unit , d ) ;
63924: LD_VAR 0 1
63928: PPUSH
63929: LD_VAR 0 4
63933: PPUSH
63934: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63938: LD_VAR 0 1
63942: PPUSH
63943: LD_VAR 0 2
63947: PPUSH
63948: LD_VAR 0 3
63952: PPUSH
63953: LD_VAR 0 5
63957: PPUSH
63958: CALL_OW 48
// end ;
63962: LD_VAR 0 6
63966: RET
// export function ToNaturalNumber ( number ) ; begin
63967: LD_INT 0
63969: PPUSH
// result := number div 1 ;
63970: LD_ADDR_VAR 0 2
63974: PUSH
63975: LD_VAR 0 1
63979: PUSH
63980: LD_INT 1
63982: DIV
63983: ST_TO_ADDR
// if number < 0 then
63984: LD_VAR 0 1
63988: PUSH
63989: LD_INT 0
63991: LESS
63992: IFFALSE 64002
// result := 0 ;
63994: LD_ADDR_VAR 0 2
63998: PUSH
63999: LD_INT 0
64001: ST_TO_ADDR
// end ;
64002: LD_VAR 0 2
64006: RET
// export function SortByClass ( units , class ) ; var un ; begin
64007: LD_INT 0
64009: PPUSH
64010: PPUSH
// if not units or not class then
64011: LD_VAR 0 1
64015: NOT
64016: PUSH
64017: LD_VAR 0 2
64021: NOT
64022: OR
64023: IFFALSE 64027
// exit ;
64025: GO 64122
// result := [ ] ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: EMPTY
64033: ST_TO_ADDR
// for un in units do
64034: LD_ADDR_VAR 0 4
64038: PUSH
64039: LD_VAR 0 1
64043: PUSH
64044: FOR_IN
64045: IFFALSE 64120
// if GetClass ( un ) = class then
64047: LD_VAR 0 4
64051: PPUSH
64052: CALL_OW 257
64056: PUSH
64057: LD_VAR 0 2
64061: EQUAL
64062: IFFALSE 64089
// result := Insert ( result , 1 , un ) else
64064: LD_ADDR_VAR 0 3
64068: PUSH
64069: LD_VAR 0 3
64073: PPUSH
64074: LD_INT 1
64076: PPUSH
64077: LD_VAR 0 4
64081: PPUSH
64082: CALL_OW 2
64086: ST_TO_ADDR
64087: GO 64118
// result := Replace ( result , result + 1 , un ) ;
64089: LD_ADDR_VAR 0 3
64093: PUSH
64094: LD_VAR 0 3
64098: PPUSH
64099: LD_VAR 0 3
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: PPUSH
64108: LD_VAR 0 4
64112: PPUSH
64113: CALL_OW 1
64117: ST_TO_ADDR
64118: GO 64044
64120: POP
64121: POP
// end ;
64122: LD_VAR 0 3
64126: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64127: LD_INT 0
64129: PPUSH
64130: PPUSH
64131: PPUSH
64132: PPUSH
64133: PPUSH
64134: PPUSH
64135: PPUSH
// result := [ ] ;
64136: LD_ADDR_VAR 0 4
64140: PUSH
64141: EMPTY
64142: ST_TO_ADDR
// if x - r < 0 then
64143: LD_VAR 0 1
64147: PUSH
64148: LD_VAR 0 3
64152: MINUS
64153: PUSH
64154: LD_INT 0
64156: LESS
64157: IFFALSE 64169
// min_x := 0 else
64159: LD_ADDR_VAR 0 8
64163: PUSH
64164: LD_INT 0
64166: ST_TO_ADDR
64167: GO 64185
// min_x := x - r ;
64169: LD_ADDR_VAR 0 8
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_VAR 0 3
64183: MINUS
64184: ST_TO_ADDR
// if y - r < 0 then
64185: LD_VAR 0 2
64189: PUSH
64190: LD_VAR 0 3
64194: MINUS
64195: PUSH
64196: LD_INT 0
64198: LESS
64199: IFFALSE 64211
// min_y := 0 else
64201: LD_ADDR_VAR 0 7
64205: PUSH
64206: LD_INT 0
64208: ST_TO_ADDR
64209: GO 64227
// min_y := y - r ;
64211: LD_ADDR_VAR 0 7
64215: PUSH
64216: LD_VAR 0 2
64220: PUSH
64221: LD_VAR 0 3
64225: MINUS
64226: ST_TO_ADDR
// max_x := x + r ;
64227: LD_ADDR_VAR 0 9
64231: PUSH
64232: LD_VAR 0 1
64236: PUSH
64237: LD_VAR 0 3
64241: PLUS
64242: ST_TO_ADDR
// max_y := y + r ;
64243: LD_ADDR_VAR 0 10
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: LD_VAR 0 3
64257: PLUS
64258: ST_TO_ADDR
// for _x = min_x to max_x do
64259: LD_ADDR_VAR 0 5
64263: PUSH
64264: DOUBLE
64265: LD_VAR 0 8
64269: DEC
64270: ST_TO_ADDR
64271: LD_VAR 0 9
64275: PUSH
64276: FOR_TO
64277: IFFALSE 64378
// for _y = min_y to max_y do
64279: LD_ADDR_VAR 0 6
64283: PUSH
64284: DOUBLE
64285: LD_VAR 0 7
64289: DEC
64290: ST_TO_ADDR
64291: LD_VAR 0 10
64295: PUSH
64296: FOR_TO
64297: IFFALSE 64374
// begin if not ValidHex ( _x , _y ) then
64299: LD_VAR 0 5
64303: PPUSH
64304: LD_VAR 0 6
64308: PPUSH
64309: CALL_OW 488
64313: NOT
64314: IFFALSE 64318
// continue ;
64316: GO 64296
// if GetResourceTypeXY ( _x , _y ) then
64318: LD_VAR 0 5
64322: PPUSH
64323: LD_VAR 0 6
64327: PPUSH
64328: CALL_OW 283
64332: IFFALSE 64372
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64334: LD_ADDR_VAR 0 4
64338: PUSH
64339: LD_VAR 0 4
64343: PPUSH
64344: LD_VAR 0 4
64348: PUSH
64349: LD_INT 1
64351: PLUS
64352: PPUSH
64353: LD_VAR 0 5
64357: PUSH
64358: LD_VAR 0 6
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PPUSH
64367: CALL_OW 1
64371: ST_TO_ADDR
// end ;
64372: GO 64296
64374: POP
64375: POP
64376: GO 64276
64378: POP
64379: POP
// end ;
64380: LD_VAR 0 4
64384: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64385: LD_INT 0
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
64391: PPUSH
64392: PPUSH
64393: PPUSH
64394: PPUSH
// if not units then
64395: LD_VAR 0 1
64399: NOT
64400: IFFALSE 64404
// exit ;
64402: GO 64928
// result := UnitFilter ( units , [ f_ok ] ) ;
64404: LD_ADDR_VAR 0 3
64408: PUSH
64409: LD_VAR 0 1
64413: PPUSH
64414: LD_INT 50
64416: PUSH
64417: EMPTY
64418: LIST
64419: PPUSH
64420: CALL_OW 72
64424: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64425: LD_ADDR_VAR 0 8
64429: PUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 1
64437: ARRAY
64438: PPUSH
64439: CALL_OW 255
64443: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64444: LD_ADDR_VAR 0 10
64448: PUSH
64449: LD_INT 29
64451: PUSH
64452: LD_INT 91
64454: PUSH
64455: LD_INT 49
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// if not result then
64463: LD_VAR 0 3
64467: NOT
64468: IFFALSE 64472
// exit ;
64470: GO 64928
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64472: LD_ADDR_VAR 0 5
64476: PUSH
64477: LD_INT 81
64479: PUSH
64480: LD_VAR 0 8
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PPUSH
64489: CALL_OW 69
64493: ST_TO_ADDR
// for i in result do
64494: LD_ADDR_VAR 0 4
64498: PUSH
64499: LD_VAR 0 3
64503: PUSH
64504: FOR_IN
64505: IFFALSE 64926
// begin tag := GetTag ( i ) + 1 ;
64507: LD_ADDR_VAR 0 9
64511: PUSH
64512: LD_VAR 0 4
64516: PPUSH
64517: CALL_OW 110
64521: PUSH
64522: LD_INT 1
64524: PLUS
64525: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64526: LD_ADDR_VAR 0 7
64530: PUSH
64531: LD_VAR 0 4
64535: PPUSH
64536: CALL_OW 250
64540: PPUSH
64541: LD_VAR 0 4
64545: PPUSH
64546: CALL_OW 251
64550: PPUSH
64551: LD_INT 6
64553: PPUSH
64554: CALL 64127 0 3
64558: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL_OW 247
64568: PUSH
64569: LD_INT 2
64571: EQUAL
64572: PUSH
64573: LD_VAR 0 7
64577: AND
64578: PUSH
64579: LD_VAR 0 4
64583: PPUSH
64584: CALL_OW 264
64588: PUSH
64589: LD_VAR 0 10
64593: IN
64594: NOT
64595: AND
64596: IFFALSE 64635
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64598: LD_VAR 0 4
64602: PPUSH
64603: LD_VAR 0 7
64607: PUSH
64608: LD_INT 1
64610: ARRAY
64611: PUSH
64612: LD_INT 1
64614: ARRAY
64615: PPUSH
64616: LD_VAR 0 7
64620: PUSH
64621: LD_INT 1
64623: ARRAY
64624: PUSH
64625: LD_INT 2
64627: ARRAY
64628: PPUSH
64629: CALL_OW 116
64633: GO 64924
// if path > tag then
64635: LD_VAR 0 2
64639: PUSH
64640: LD_VAR 0 9
64644: GREATER
64645: IFFALSE 64853
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64647: LD_ADDR_VAR 0 6
64651: PUSH
64652: LD_VAR 0 5
64656: PPUSH
64657: LD_INT 91
64659: PUSH
64660: LD_VAR 0 4
64664: PUSH
64665: LD_INT 8
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: PPUSH
64673: CALL_OW 72
64677: ST_TO_ADDR
// if nearEnemy then
64678: LD_VAR 0 6
64682: IFFALSE 64751
// begin if GetWeapon ( i ) = ru_time_lapser then
64684: LD_VAR 0 4
64688: PPUSH
64689: CALL_OW 264
64693: PUSH
64694: LD_INT 49
64696: EQUAL
64697: IFFALSE 64725
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64699: LD_VAR 0 4
64703: PPUSH
64704: LD_VAR 0 6
64708: PPUSH
64709: LD_VAR 0 4
64713: PPUSH
64714: CALL_OW 74
64718: PPUSH
64719: CALL_OW 112
64723: GO 64749
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64725: LD_VAR 0 4
64729: PPUSH
64730: LD_VAR 0 6
64734: PPUSH
64735: LD_VAR 0 4
64739: PPUSH
64740: CALL_OW 74
64744: PPUSH
64745: CALL_OW 115
// end else
64749: GO 64851
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64751: LD_VAR 0 4
64755: PPUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_VAR 0 9
64765: ARRAY
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 2
64775: PUSH
64776: LD_VAR 0 9
64780: ARRAY
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: PPUSH
64786: CALL_OW 297
64790: PUSH
64791: LD_INT 6
64793: GREATER
64794: IFFALSE 64837
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64796: LD_VAR 0 4
64800: PPUSH
64801: LD_VAR 0 2
64805: PUSH
64806: LD_VAR 0 9
64810: ARRAY
64811: PUSH
64812: LD_INT 1
64814: ARRAY
64815: PPUSH
64816: LD_VAR 0 2
64820: PUSH
64821: LD_VAR 0 9
64825: ARRAY
64826: PUSH
64827: LD_INT 2
64829: ARRAY
64830: PPUSH
64831: CALL_OW 114
64835: GO 64851
// SetTag ( i , tag ) ;
64837: LD_VAR 0 4
64841: PPUSH
64842: LD_VAR 0 9
64846: PPUSH
64847: CALL_OW 109
// end else
64851: GO 64924
// if enemy then
64853: LD_VAR 0 5
64857: IFFALSE 64924
// begin if GetWeapon ( i ) = ru_time_lapser then
64859: LD_VAR 0 4
64863: PPUSH
64864: CALL_OW 264
64868: PUSH
64869: LD_INT 49
64871: EQUAL
64872: IFFALSE 64900
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64874: LD_VAR 0 4
64878: PPUSH
64879: LD_VAR 0 5
64883: PPUSH
64884: LD_VAR 0 4
64888: PPUSH
64889: CALL_OW 74
64893: PPUSH
64894: CALL_OW 112
64898: GO 64924
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64900: LD_VAR 0 4
64904: PPUSH
64905: LD_VAR 0 5
64909: PPUSH
64910: LD_VAR 0 4
64914: PPUSH
64915: CALL_OW 74
64919: PPUSH
64920: CALL_OW 115
// end ; end ;
64924: GO 64504
64926: POP
64927: POP
// end ;
64928: LD_VAR 0 3
64932: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64933: LD_INT 0
64935: PPUSH
64936: PPUSH
64937: PPUSH
// if not unit or IsInUnit ( unit ) then
64938: LD_VAR 0 1
64942: NOT
64943: PUSH
64944: LD_VAR 0 1
64948: PPUSH
64949: CALL_OW 310
64953: OR
64954: IFFALSE 64958
// exit ;
64956: GO 65049
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64958: LD_ADDR_VAR 0 4
64962: PUSH
64963: LD_VAR 0 1
64967: PPUSH
64968: CALL_OW 250
64972: PPUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: LD_INT 1
64980: PPUSH
64981: CALL_OW 272
64985: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64986: LD_ADDR_VAR 0 5
64990: PUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: CALL_OW 251
65000: PPUSH
65001: LD_VAR 0 2
65005: PPUSH
65006: LD_INT 1
65008: PPUSH
65009: CALL_OW 273
65013: ST_TO_ADDR
// if ValidHex ( x , y ) then
65014: LD_VAR 0 4
65018: PPUSH
65019: LD_VAR 0 5
65023: PPUSH
65024: CALL_OW 488
65028: IFFALSE 65049
// ComTurnXY ( unit , x , y ) ;
65030: LD_VAR 0 1
65034: PPUSH
65035: LD_VAR 0 4
65039: PPUSH
65040: LD_VAR 0 5
65044: PPUSH
65045: CALL_OW 118
// end ;
65049: LD_VAR 0 3
65053: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65054: LD_INT 0
65056: PPUSH
65057: PPUSH
// result := false ;
65058: LD_ADDR_VAR 0 3
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
// if not units then
65066: LD_VAR 0 2
65070: NOT
65071: IFFALSE 65075
// exit ;
65073: GO 65120
// for i in units do
65075: LD_ADDR_VAR 0 4
65079: PUSH
65080: LD_VAR 0 2
65084: PUSH
65085: FOR_IN
65086: IFFALSE 65118
// if See ( side , i ) then
65088: LD_VAR 0 1
65092: PPUSH
65093: LD_VAR 0 4
65097: PPUSH
65098: CALL_OW 292
65102: IFFALSE 65116
// begin result := true ;
65104: LD_ADDR_VAR 0 3
65108: PUSH
65109: LD_INT 1
65111: ST_TO_ADDR
// exit ;
65112: POP
65113: POP
65114: GO 65120
// end ;
65116: GO 65085
65118: POP
65119: POP
// end ;
65120: LD_VAR 0 3
65124: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65125: LD_INT 0
65127: PPUSH
65128: PPUSH
65129: PPUSH
65130: PPUSH
// if not unit or not points then
65131: LD_VAR 0 1
65135: NOT
65136: PUSH
65137: LD_VAR 0 2
65141: NOT
65142: OR
65143: IFFALSE 65147
// exit ;
65145: GO 65237
// dist := 99999 ;
65147: LD_ADDR_VAR 0 5
65151: PUSH
65152: LD_INT 99999
65154: ST_TO_ADDR
// for i in points do
65155: LD_ADDR_VAR 0 4
65159: PUSH
65160: LD_VAR 0 2
65164: PUSH
65165: FOR_IN
65166: IFFALSE 65235
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65168: LD_ADDR_VAR 0 6
65172: PUSH
65173: LD_VAR 0 1
65177: PPUSH
65178: LD_VAR 0 4
65182: PUSH
65183: LD_INT 1
65185: ARRAY
65186: PPUSH
65187: LD_VAR 0 4
65191: PUSH
65192: LD_INT 2
65194: ARRAY
65195: PPUSH
65196: CALL_OW 297
65200: ST_TO_ADDR
// if tmpDist < dist then
65201: LD_VAR 0 6
65205: PUSH
65206: LD_VAR 0 5
65210: LESS
65211: IFFALSE 65233
// begin result := i ;
65213: LD_ADDR_VAR 0 3
65217: PUSH
65218: LD_VAR 0 4
65222: ST_TO_ADDR
// dist := tmpDist ;
65223: LD_ADDR_VAR 0 5
65227: PUSH
65228: LD_VAR 0 6
65232: ST_TO_ADDR
// end ; end ;
65233: GO 65165
65235: POP
65236: POP
// end ;
65237: LD_VAR 0 3
65241: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65242: LD_INT 0
65244: PPUSH
// uc_side := side ;
65245: LD_ADDR_OWVAR 20
65249: PUSH
65250: LD_VAR 0 1
65254: ST_TO_ADDR
// uc_nation := 3 ;
65255: LD_ADDR_OWVAR 21
65259: PUSH
65260: LD_INT 3
65262: ST_TO_ADDR
// vc_chassis := 25 ;
65263: LD_ADDR_OWVAR 37
65267: PUSH
65268: LD_INT 25
65270: ST_TO_ADDR
// vc_engine := engine_siberite ;
65271: LD_ADDR_OWVAR 39
65275: PUSH
65276: LD_INT 3
65278: ST_TO_ADDR
// vc_control := control_computer ;
65279: LD_ADDR_OWVAR 38
65283: PUSH
65284: LD_INT 3
65286: ST_TO_ADDR
// vc_weapon := 59 ;
65287: LD_ADDR_OWVAR 40
65291: PUSH
65292: LD_INT 59
65294: ST_TO_ADDR
// result := CreateVehicle ;
65295: LD_ADDR_VAR 0 5
65299: PUSH
65300: CALL_OW 45
65304: ST_TO_ADDR
// SetDir ( result , d ) ;
65305: LD_VAR 0 5
65309: PPUSH
65310: LD_VAR 0 4
65314: PPUSH
65315: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65319: LD_VAR 0 5
65323: PPUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: LD_INT 0
65336: PPUSH
65337: CALL_OW 48
// end ;
65341: LD_VAR 0 5
65345: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65346: LD_INT 0
65348: PPUSH
65349: PPUSH
65350: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65351: LD_ADDR_VAR 0 2
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65374: LD_VAR 0 1
65378: NOT
65379: PUSH
65380: LD_VAR 0 1
65384: PPUSH
65385: CALL_OW 264
65389: PUSH
65390: LD_INT 12
65392: PUSH
65393: LD_INT 51
65395: PUSH
65396: LD_INT 32
65398: PUSH
65399: LD_INT 89
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: IN
65408: NOT
65409: OR
65410: IFFALSE 65414
// exit ;
65412: GO 65512
// for i := 1 to 3 do
65414: LD_ADDR_VAR 0 3
65418: PUSH
65419: DOUBLE
65420: LD_INT 1
65422: DEC
65423: ST_TO_ADDR
65424: LD_INT 3
65426: PUSH
65427: FOR_TO
65428: IFFALSE 65510
// begin tmp := GetCargo ( cargo , i ) ;
65430: LD_ADDR_VAR 0 4
65434: PUSH
65435: LD_VAR 0 1
65439: PPUSH
65440: LD_VAR 0 3
65444: PPUSH
65445: CALL_OW 289
65449: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65450: LD_ADDR_VAR 0 2
65454: PUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: LD_VAR 0 3
65464: PPUSH
65465: LD_VAR 0 4
65469: PPUSH
65470: CALL_OW 1
65474: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65475: LD_ADDR_VAR 0 2
65479: PUSH
65480: LD_VAR 0 2
65484: PPUSH
65485: LD_INT 4
65487: PPUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 4
65495: ARRAY
65496: PUSH
65497: LD_VAR 0 4
65501: PLUS
65502: PPUSH
65503: CALL_OW 1
65507: ST_TO_ADDR
// end ;
65508: GO 65427
65510: POP
65511: POP
// end ;
65512: LD_VAR 0 2
65516: RET
// export function Length ( array ) ; begin
65517: LD_INT 0
65519: PPUSH
// result := array + 0 ;
65520: LD_ADDR_VAR 0 2
65524: PUSH
65525: LD_VAR 0 1
65529: PUSH
65530: LD_INT 0
65532: PLUS
65533: ST_TO_ADDR
// end ;
65534: LD_VAR 0 2
65538: RET
// export function PrepareArray ( array ) ; begin
65539: LD_INT 0
65541: PPUSH
// result := array diff 0 ;
65542: LD_ADDR_VAR 0 2
65546: PUSH
65547: LD_VAR 0 1
65551: PUSH
65552: LD_INT 0
65554: DIFF
65555: ST_TO_ADDR
// if not result [ 1 ] then
65556: LD_VAR 0 2
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: NOT
65565: IFFALSE 65585
// result := Delete ( result , 1 ) ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_VAR 0 2
65576: PPUSH
65577: LD_INT 1
65579: PPUSH
65580: CALL_OW 3
65584: ST_TO_ADDR
// end ; end_of_file
65585: LD_VAR 0 2
65589: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65590: LD_VAR 0 1
65594: PPUSH
65595: LD_VAR 0 2
65599: PPUSH
65600: LD_VAR 0 3
65604: PPUSH
65605: LD_VAR 0 4
65609: PPUSH
65610: LD_VAR 0 5
65614: PPUSH
65615: LD_VAR 0 6
65619: PPUSH
65620: CALL 4355 0 6
// end ;
65624: PPOPN 6
65626: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65627: LD_INT 0
65629: PPUSH
// begin if not units then
65630: LD_VAR 0 1
65634: NOT
65635: IFFALSE 65639
// exit ;
65637: GO 65639
// end ;
65639: PPOPN 7
65641: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65642: CALL 4326 0 0
// end ;
65646: PPOPN 1
65648: END
