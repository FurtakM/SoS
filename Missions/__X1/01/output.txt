// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 65821 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 65821 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// export globalGameSaveCounter ; every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// every 0 0$1 do
4577: GO 4579
4579: DISABLE
// begin globalGameSaveCounter := 0 ;
4580: LD_ADDR_EXP 23
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4588: LD_STRING setGameSaveCounter(0)
4590: PPUSH
4591: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4595: LD_STRING initStreamRollete();
4597: PPUSH
4598: CALL_OW 559
// InitStreamMode ;
4602: CALL 5945 0 0
// DefineStreamItems ( false ) ;
4606: LD_INT 0
4608: PPUSH
4609: CALL 6409 0 1
// end ;
4613: END
// export function SOS_MapStart ( ) ; begin
4614: LD_INT 0
4616: PPUSH
// if streamModeActive then
4617: LD_EXP 24
4621: IFFALSE 4630
// DefineStreamItems ( true ) ;
4623: LD_INT 1
4625: PPUSH
4626: CALL 6409 0 1
// UpdateLuaVariables ( ) ;
4630: CALL 4647 0 0
// UpdateFactoryWaypoints ( ) ;
4634: CALL 19411 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4638: CALL 19663 0 0
// end ;
4642: LD_VAR 0 1
4646: RET
// function UpdateLuaVariables ( ) ; begin
4647: LD_INT 0
4649: PPUSH
// if globalGameSaveCounter then
4650: LD_EXP 23
4654: IFFALSE 4688
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4656: LD_ADDR_EXP 23
4660: PUSH
4661: LD_EXP 23
4665: PPUSH
4666: CALL 65042 0 1
4670: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4671: LD_STRING setGameSaveCounter(
4673: PUSH
4674: LD_EXP 23
4678: STR
4679: PUSH
4680: LD_STRING )
4682: STR
4683: PPUSH
4684: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4688: LD_STRING setGameDifficulty(
4690: PUSH
4691: LD_OWVAR 67
4695: STR
4696: PUSH
4697: LD_STRING )
4699: STR
4700: PPUSH
4701: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4705: LD_STRING displayDifficulty(
4707: PUSH
4708: LD_OWVAR 67
4712: STR
4713: PUSH
4714: LD_STRING )
4716: STR
4717: PPUSH
4718: CALL_OW 559
// end ;
4722: LD_VAR 0 1
4726: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4727: LD_INT 0
4729: PPUSH
// if p2 = stream_mode then
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 100
4737: EQUAL
4738: IFFALSE 5741
// begin if not StreamModeActive then
4740: LD_EXP 24
4744: NOT
4745: IFFALSE 4755
// StreamModeActive := true ;
4747: LD_ADDR_EXP 24
4751: PUSH
4752: LD_INT 1
4754: ST_TO_ADDR
// if p3 = 0 then
4755: LD_VAR 0 3
4759: PUSH
4760: LD_INT 0
4762: EQUAL
4763: IFFALSE 4769
// InitStreamMode ;
4765: CALL 5945 0 0
// if p3 = 1 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 1
4776: EQUAL
4777: IFFALSE 4787
// sRocket := true ;
4779: LD_ADDR_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 2 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 2
4794: EQUAL
4795: IFFALSE 4805
// sSpeed := true ;
4797: LD_ADDR_EXP 28
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 3 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 3
4812: EQUAL
4813: IFFALSE 4823
// sEngine := true ;
4815: LD_ADDR_EXP 30
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 4 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 4
4830: EQUAL
4831: IFFALSE 4841
// sSpec := true ;
4833: LD_ADDR_EXP 27
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 5 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 5
4848: EQUAL
4849: IFFALSE 4859
// sLevel := true ;
4851: LD_ADDR_EXP 31
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 6 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 6
4866: EQUAL
4867: IFFALSE 4877
// sArmoury := true ;
4869: LD_ADDR_EXP 32
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 7 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 7
4884: EQUAL
4885: IFFALSE 4895
// sRadar := true ;
4887: LD_ADDR_EXP 33
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 8 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 8
4902: EQUAL
4903: IFFALSE 4913
// sBunker := true ;
4905: LD_ADDR_EXP 34
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 9 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 9
4920: EQUAL
4921: IFFALSE 4931
// sHack := true ;
4923: LD_ADDR_EXP 35
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 10 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 10
4938: EQUAL
4939: IFFALSE 4949
// sFire := true ;
4941: LD_ADDR_EXP 36
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 11 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 11
4956: EQUAL
4957: IFFALSE 4967
// sRefresh := true ;
4959: LD_ADDR_EXP 37
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 12 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 12
4974: EQUAL
4975: IFFALSE 4985
// sExp := true ;
4977: LD_ADDR_EXP 38
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 13 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 13
4992: EQUAL
4993: IFFALSE 5003
// sDepot := true ;
4995: LD_ADDR_EXP 39
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 14 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 14
5010: EQUAL
5011: IFFALSE 5021
// sFlag := true ;
5013: LD_ADDR_EXP 40
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 15 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 15
5028: EQUAL
5029: IFFALSE 5039
// sKamikadze := true ;
5031: LD_ADDR_EXP 48
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 16 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 16
5046: EQUAL
5047: IFFALSE 5057
// sTroll := true ;
5049: LD_ADDR_EXP 49
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 17 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 17
5064: EQUAL
5065: IFFALSE 5075
// sSlow := true ;
5067: LD_ADDR_EXP 50
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 18 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 18
5082: EQUAL
5083: IFFALSE 5093
// sLack := true ;
5085: LD_ADDR_EXP 51
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 19 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 19
5100: EQUAL
5101: IFFALSE 5111
// sTank := true ;
5103: LD_ADDR_EXP 53
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 20 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 20
5118: EQUAL
5119: IFFALSE 5129
// sRemote := true ;
5121: LD_ADDR_EXP 54
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 21 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 21
5136: EQUAL
5137: IFFALSE 5147
// sPowell := true ;
5139: LD_ADDR_EXP 55
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 22 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 22
5154: EQUAL
5155: IFFALSE 5165
// sTeleport := true ;
5157: LD_ADDR_EXP 58
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 23 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 23
5172: EQUAL
5173: IFFALSE 5183
// sOilTower := true ;
5175: LD_ADDR_EXP 60
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 24 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 24
5190: EQUAL
5191: IFFALSE 5201
// sShovel := true ;
5193: LD_ADDR_EXP 61
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 25 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 25
5208: EQUAL
5209: IFFALSE 5219
// sSheik := true ;
5211: LD_ADDR_EXP 62
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 26 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 26
5226: EQUAL
5227: IFFALSE 5237
// sEarthquake := true ;
5229: LD_ADDR_EXP 64
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 27 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 27
5244: EQUAL
5245: IFFALSE 5255
// sAI := true ;
5247: LD_ADDR_EXP 65
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 28 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 28
5262: EQUAL
5263: IFFALSE 5273
// sCargo := true ;
5265: LD_ADDR_EXP 68
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 29 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 29
5280: EQUAL
5281: IFFALSE 5291
// sDLaser := true ;
5283: LD_ADDR_EXP 69
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 30 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 30
5298: EQUAL
5299: IFFALSE 5309
// sExchange := true ;
5301: LD_ADDR_EXP 70
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 31 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 31
5316: EQUAL
5317: IFFALSE 5327
// sFac := true ;
5319: LD_ADDR_EXP 71
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 32 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 32
5334: EQUAL
5335: IFFALSE 5345
// sPower := true ;
5337: LD_ADDR_EXP 72
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// if p3 = 33 then
5345: LD_VAR 0 3
5349: PUSH
5350: LD_INT 33
5352: EQUAL
5353: IFFALSE 5363
// sRandom := true ;
5355: LD_ADDR_EXP 73
5359: PUSH
5360: LD_INT 1
5362: ST_TO_ADDR
// if p3 = 34 then
5363: LD_VAR 0 3
5367: PUSH
5368: LD_INT 34
5370: EQUAL
5371: IFFALSE 5381
// sShield := true ;
5373: LD_ADDR_EXP 74
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if p3 = 35 then
5381: LD_VAR 0 3
5385: PUSH
5386: LD_INT 35
5388: EQUAL
5389: IFFALSE 5399
// sTime := true ;
5391: LD_ADDR_EXP 75
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// if p3 = 36 then
5399: LD_VAR 0 3
5403: PUSH
5404: LD_INT 36
5406: EQUAL
5407: IFFALSE 5417
// sTools := true ;
5409: LD_ADDR_EXP 76
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// if p3 = 101 then
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 101
5424: EQUAL
5425: IFFALSE 5435
// sSold := true ;
5427: LD_ADDR_EXP 41
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// if p3 = 102 then
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 102
5442: EQUAL
5443: IFFALSE 5453
// sDiff := true ;
5445: LD_ADDR_EXP 42
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// if p3 = 103 then
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 103
5460: EQUAL
5461: IFFALSE 5471
// sFog := true ;
5463: LD_ADDR_EXP 45
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// if p3 = 104 then
5471: LD_VAR 0 3
5475: PUSH
5476: LD_INT 104
5478: EQUAL
5479: IFFALSE 5489
// sReset := true ;
5481: LD_ADDR_EXP 46
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// if p3 = 105 then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 105
5496: EQUAL
5497: IFFALSE 5507
// sSun := true ;
5499: LD_ADDR_EXP 47
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// if p3 = 106 then
5507: LD_VAR 0 3
5511: PUSH
5512: LD_INT 106
5514: EQUAL
5515: IFFALSE 5525
// sTiger := true ;
5517: LD_ADDR_EXP 43
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// if p3 = 107 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 107
5532: EQUAL
5533: IFFALSE 5543
// sBomb := true ;
5535: LD_ADDR_EXP 44
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// if p3 = 108 then
5543: LD_VAR 0 3
5547: PUSH
5548: LD_INT 108
5550: EQUAL
5551: IFFALSE 5561
// sWound := true ;
5553: LD_ADDR_EXP 52
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// if p3 = 109 then
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 109
5568: EQUAL
5569: IFFALSE 5579
// sBetray := true ;
5571: LD_ADDR_EXP 56
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// if p3 = 110 then
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 110
5586: EQUAL
5587: IFFALSE 5597
// sContamin := true ;
5589: LD_ADDR_EXP 57
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// if p3 = 111 then
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 111
5604: EQUAL
5605: IFFALSE 5615
// sOil := true ;
5607: LD_ADDR_EXP 59
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if p3 = 112 then
5615: LD_VAR 0 3
5619: PUSH
5620: LD_INT 112
5622: EQUAL
5623: IFFALSE 5633
// sStu := true ;
5625: LD_ADDR_EXP 63
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// if p3 = 113 then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 113
5640: EQUAL
5641: IFFALSE 5651
// sBazooka := true ;
5643: LD_ADDR_EXP 66
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// if p3 = 114 then
5651: LD_VAR 0 3
5655: PUSH
5656: LD_INT 114
5658: EQUAL
5659: IFFALSE 5669
// sMortar := true ;
5661: LD_ADDR_EXP 67
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// if p3 = 115 then
5669: LD_VAR 0 3
5673: PUSH
5674: LD_INT 115
5676: EQUAL
5677: IFFALSE 5687
// sRanger := true ;
5679: LD_ADDR_EXP 77
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// if p3 = 116 then
5687: LD_VAR 0 3
5691: PUSH
5692: LD_INT 116
5694: EQUAL
5695: IFFALSE 5705
// sComputer := true ;
5697: LD_ADDR_EXP 78
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
// if p3 = 117 then
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 117
5712: EQUAL
5713: IFFALSE 5723
// s30 := true ;
5715: LD_ADDR_EXP 79
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// if p3 = 118 then
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 118
5730: EQUAL
5731: IFFALSE 5741
// s60 := true ;
5733: LD_ADDR_EXP 80
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// end ; if p2 = hack_mode then
5741: LD_VAR 0 2
5745: PUSH
5746: LD_INT 101
5748: EQUAL
5749: IFFALSE 5877
// begin case p3 of 1 :
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 1
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5771
5764: POP
// hHackUnlimitedResources ; 2 :
5765: CALL 18024 0 0
5769: GO 5877
5771: LD_INT 2
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5786
5779: POP
// hHackSetLevel10 ; 3 :
5780: CALL 18157 0 0
5784: GO 5877
5786: LD_INT 3
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5801
5794: POP
// hHackSetLevel10YourUnits ; 4 :
5795: CALL 18242 0 0
5799: GO 5877
5801: LD_INT 4
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5816
5809: POP
// hHackInvincible ; 5 :
5810: CALL 18690 0 0
5814: GO 5877
5816: LD_INT 5
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5831
5824: POP
// hHackInvisible ; 6 :
5825: CALL 18801 0 0
5829: GO 5877
5831: LD_INT 6
5833: DOUBLE
5834: EQUAL
5835: IFTRUE 5839
5837: GO 5846
5839: POP
// hHackChangeYourSide ; 7 :
5840: CALL 18858 0 0
5844: GO 5877
5846: LD_INT 7
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5854
5852: GO 5861
5854: POP
// hHackChangeUnitSide ; 8 :
5855: CALL 18900 0 0
5859: GO 5877
5861: LD_INT 8
5863: DOUBLE
5864: EQUAL
5865: IFTRUE 5869
5867: GO 5876
5869: POP
// hHackFog ; end ;
5870: CALL 19001 0 0
5874: GO 5877
5876: POP
// end ; if p2 = game_save_mode then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_INT 102
5884: EQUAL
5885: IFFALSE 5940
// begin if p3 = 1 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: EQUAL
5895: IFFALSE 5907
// globalGameSaveCounter := p4 ;
5897: LD_ADDR_EXP 23
5901: PUSH
5902: LD_VAR 0 4
5906: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 2
5914: EQUAL
5915: PUSH
5916: LD_EXP 23
5920: AND
5921: IFFALSE 5940
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5923: LD_STRING setGameSaveCounter(
5925: PUSH
5926: LD_EXP 23
5930: STR
5931: PUSH
5932: LD_STRING )
5934: STR
5935: PPUSH
5936: CALL_OW 559
// end ; end ;
5940: LD_VAR 0 7
5944: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5945: LD_INT 0
5947: PPUSH
// streamModeActive := false ;
5948: LD_ADDR_EXP 24
5952: PUSH
5953: LD_INT 0
5955: ST_TO_ADDR
// normalCounter := 36 ;
5956: LD_ADDR_EXP 25
5960: PUSH
5961: LD_INT 36
5963: ST_TO_ADDR
// hardcoreCounter := 18 ;
5964: LD_ADDR_EXP 26
5968: PUSH
5969: LD_INT 18
5971: ST_TO_ADDR
// sRocket := false ;
5972: LD_ADDR_EXP 29
5976: PUSH
5977: LD_INT 0
5979: ST_TO_ADDR
// sSpeed := false ;
5980: LD_ADDR_EXP 28
5984: PUSH
5985: LD_INT 0
5987: ST_TO_ADDR
// sEngine := false ;
5988: LD_ADDR_EXP 30
5992: PUSH
5993: LD_INT 0
5995: ST_TO_ADDR
// sSpec := false ;
5996: LD_ADDR_EXP 27
6000: PUSH
6001: LD_INT 0
6003: ST_TO_ADDR
// sLevel := false ;
6004: LD_ADDR_EXP 31
6008: PUSH
6009: LD_INT 0
6011: ST_TO_ADDR
// sArmoury := false ;
6012: LD_ADDR_EXP 32
6016: PUSH
6017: LD_INT 0
6019: ST_TO_ADDR
// sRadar := false ;
6020: LD_ADDR_EXP 33
6024: PUSH
6025: LD_INT 0
6027: ST_TO_ADDR
// sBunker := false ;
6028: LD_ADDR_EXP 34
6032: PUSH
6033: LD_INT 0
6035: ST_TO_ADDR
// sHack := false ;
6036: LD_ADDR_EXP 35
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// sFire := false ;
6044: LD_ADDR_EXP 36
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// sRefresh := false ;
6052: LD_ADDR_EXP 37
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// sExp := false ;
6060: LD_ADDR_EXP 38
6064: PUSH
6065: LD_INT 0
6067: ST_TO_ADDR
// sDepot := false ;
6068: LD_ADDR_EXP 39
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// sFlag := false ;
6076: LD_ADDR_EXP 40
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// sKamikadze := false ;
6084: LD_ADDR_EXP 48
6088: PUSH
6089: LD_INT 0
6091: ST_TO_ADDR
// sTroll := false ;
6092: LD_ADDR_EXP 49
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// sSlow := false ;
6100: LD_ADDR_EXP 50
6104: PUSH
6105: LD_INT 0
6107: ST_TO_ADDR
// sLack := false ;
6108: LD_ADDR_EXP 51
6112: PUSH
6113: LD_INT 0
6115: ST_TO_ADDR
// sTank := false ;
6116: LD_ADDR_EXP 53
6120: PUSH
6121: LD_INT 0
6123: ST_TO_ADDR
// sRemote := false ;
6124: LD_ADDR_EXP 54
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// sPowell := false ;
6132: LD_ADDR_EXP 55
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// sTeleport := false ;
6140: LD_ADDR_EXP 58
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// sOilTower := false ;
6148: LD_ADDR_EXP 60
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// sShovel := false ;
6156: LD_ADDR_EXP 61
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// sSheik := false ;
6164: LD_ADDR_EXP 62
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sEarthquake := false ;
6172: LD_ADDR_EXP 64
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sAI := false ;
6180: LD_ADDR_EXP 65
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sCargo := false ;
6188: LD_ADDR_EXP 68
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sDLaser := false ;
6196: LD_ADDR_EXP 69
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sExchange := false ;
6204: LD_ADDR_EXP 70
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sFac := false ;
6212: LD_ADDR_EXP 71
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sPower := false ;
6220: LD_ADDR_EXP 72
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sRandom := false ;
6228: LD_ADDR_EXP 73
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sShield := false ;
6236: LD_ADDR_EXP 74
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sTime := false ;
6244: LD_ADDR_EXP 75
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sTools := false ;
6252: LD_ADDR_EXP 76
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sSold := false ;
6260: LD_ADDR_EXP 41
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sDiff := false ;
6268: LD_ADDR_EXP 42
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sFog := false ;
6276: LD_ADDR_EXP 45
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sReset := false ;
6284: LD_ADDR_EXP 46
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sSun := false ;
6292: LD_ADDR_EXP 47
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sTiger := false ;
6300: LD_ADDR_EXP 43
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sBomb := false ;
6308: LD_ADDR_EXP 44
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sWound := false ;
6316: LD_ADDR_EXP 52
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sBetray := false ;
6324: LD_ADDR_EXP 56
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sContamin := false ;
6332: LD_ADDR_EXP 57
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sOil := false ;
6340: LD_ADDR_EXP 59
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sStu := false ;
6348: LD_ADDR_EXP 63
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sBazooka := false ;
6356: LD_ADDR_EXP 66
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sMortar := false ;
6364: LD_ADDR_EXP 67
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sRanger := false ;
6372: LD_ADDR_EXP 77
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sComputer := false ;
6380: LD_ADDR_EXP 78
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// s30 := false ;
6388: LD_ADDR_EXP 79
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// s60 := false ;
6396: LD_ADDR_EXP 80
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// end ;
6404: LD_VAR 0 1
6408: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
6417: PPUSH
// result := [ ] ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: EMPTY
6424: ST_TO_ADDR
// if campaign_id = 1 then
6425: LD_OWVAR 69
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: IFFALSE 9599
// begin case mission_number of 1 :
6435: LD_OWVAR 70
6439: PUSH
6440: LD_INT 1
6442: DOUBLE
6443: EQUAL
6444: IFTRUE 6448
6446: GO 6524
6448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 2
6456: PUSH
6457: LD_INT 4
6459: PUSH
6460: LD_INT 11
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 15
6468: PUSH
6469: LD_INT 16
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 26
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 101
6494: PUSH
6495: LD_INT 102
6497: PUSH
6498: LD_INT 106
6500: PUSH
6501: LD_INT 116
6503: PUSH
6504: LD_INT 117
6506: PUSH
6507: LD_INT 118
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 9597
6524: LD_INT 2
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6616
6532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 11
6546: PUSH
6547: LD_INT 12
6549: PUSH
6550: LD_INT 15
6552: PUSH
6553: LD_INT 16
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 23
6561: PUSH
6562: LD_INT 26
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 101
6578: PUSH
6579: LD_INT 102
6581: PUSH
6582: LD_INT 105
6584: PUSH
6585: LD_INT 106
6587: PUSH
6588: LD_INT 108
6590: PUSH
6591: LD_INT 116
6593: PUSH
6594: LD_INT 117
6596: PUSH
6597: LD_INT 118
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: ST_TO_ADDR
6614: GO 9597
6616: LD_INT 3
6618: DOUBLE
6619: EQUAL
6620: IFTRUE 6624
6622: GO 6712
6624: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6625: LD_ADDR_VAR 0 2
6629: PUSH
6630: LD_INT 2
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 26
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 101
6674: PUSH
6675: LD_INT 102
6677: PUSH
6678: LD_INT 105
6680: PUSH
6681: LD_INT 106
6683: PUSH
6684: LD_INT 108
6686: PUSH
6687: LD_INT 116
6689: PUSH
6690: LD_INT 117
6692: PUSH
6693: LD_INT 118
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 9597
6712: LD_INT 4
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6816
6720: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6721: LD_ADDR_VAR 0 2
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: LD_INT 4
6731: PUSH
6732: LD_INT 5
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: LD_INT 16
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 23
6755: PUSH
6756: LD_INT 26
6758: PUSH
6759: LD_INT 36
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 101
6778: PUSH
6779: LD_INT 102
6781: PUSH
6782: LD_INT 105
6784: PUSH
6785: LD_INT 106
6787: PUSH
6788: LD_INT 108
6790: PUSH
6791: LD_INT 116
6793: PUSH
6794: LD_INT 117
6796: PUSH
6797: LD_INT 118
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 9597
6816: LD_INT 5
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6936
6824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6825: LD_ADDR_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: PUSH
6833: LD_INT 4
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: LD_INT 6
6841: PUSH
6842: LD_INT 8
6844: PUSH
6845: LD_INT 11
6847: PUSH
6848: LD_INT 12
6850: PUSH
6851: LD_INT 15
6853: PUSH
6854: LD_INT 16
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 23
6862: PUSH
6863: LD_INT 25
6865: PUSH
6866: LD_INT 26
6868: PUSH
6869: LD_INT 36
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 101
6890: PUSH
6891: LD_INT 102
6893: PUSH
6894: LD_INT 105
6896: PUSH
6897: LD_INT 106
6899: PUSH
6900: LD_INT 108
6902: PUSH
6903: LD_INT 109
6905: PUSH
6906: LD_INT 112
6908: PUSH
6909: LD_INT 116
6911: PUSH
6912: LD_INT 117
6914: PUSH
6915: LD_INT 118
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 9597
6936: LD_INT 6
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7076
6944: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 4
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: LD_INT 6
6961: PUSH
6962: LD_INT 8
6964: PUSH
6965: LD_INT 11
6967: PUSH
6968: LD_INT 12
6970: PUSH
6971: LD_INT 15
6973: PUSH
6974: LD_INT 16
6976: PUSH
6977: LD_INT 20
6979: PUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 23
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 26
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 31
7000: PUSH
7001: LD_INT 32
7003: PUSH
7004: LD_INT 36
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 101
7030: PUSH
7031: LD_INT 102
7033: PUSH
7034: LD_INT 105
7036: PUSH
7037: LD_INT 106
7039: PUSH
7040: LD_INT 108
7042: PUSH
7043: LD_INT 109
7045: PUSH
7046: LD_INT 112
7048: PUSH
7049: LD_INT 116
7051: PUSH
7052: LD_INT 117
7054: PUSH
7055: LD_INT 118
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 9597
7076: LD_INT 7
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7196
7084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7085: LD_ADDR_VAR 0 2
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: LD_INT 4
7095: PUSH
7096: LD_INT 5
7098: PUSH
7099: LD_INT 7
7101: PUSH
7102: LD_INT 11
7104: PUSH
7105: LD_INT 12
7107: PUSH
7108: LD_INT 15
7110: PUSH
7111: LD_INT 16
7113: PUSH
7114: LD_INT 20
7116: PUSH
7117: LD_INT 21
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 25
7128: PUSH
7129: LD_INT 26
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 101
7150: PUSH
7151: LD_INT 102
7153: PUSH
7154: LD_INT 103
7156: PUSH
7157: LD_INT 105
7159: PUSH
7160: LD_INT 106
7162: PUSH
7163: LD_INT 108
7165: PUSH
7166: LD_INT 112
7168: PUSH
7169: LD_INT 116
7171: PUSH
7172: LD_INT 117
7174: PUSH
7175: LD_INT 118
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: ST_TO_ADDR
7194: GO 9597
7196: LD_INT 8
7198: DOUBLE
7199: EQUAL
7200: IFTRUE 7204
7202: GO 7344
7204: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7205: LD_ADDR_VAR 0 2
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 4
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: LD_INT 6
7221: PUSH
7222: LD_INT 7
7224: PUSH
7225: LD_INT 8
7227: PUSH
7228: LD_INT 11
7230: PUSH
7231: LD_INT 12
7233: PUSH
7234: LD_INT 15
7236: PUSH
7237: LD_INT 16
7239: PUSH
7240: LD_INT 20
7242: PUSH
7243: LD_INT 21
7245: PUSH
7246: LD_INT 22
7248: PUSH
7249: LD_INT 23
7251: PUSH
7252: LD_INT 25
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 30
7260: PUSH
7261: LD_INT 31
7263: PUSH
7264: LD_INT 32
7266: PUSH
7267: LD_INT 36
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 101
7294: PUSH
7295: LD_INT 102
7297: PUSH
7298: LD_INT 103
7300: PUSH
7301: LD_INT 105
7303: PUSH
7304: LD_INT 106
7306: PUSH
7307: LD_INT 108
7309: PUSH
7310: LD_INT 109
7312: PUSH
7313: LD_INT 112
7315: PUSH
7316: LD_INT 116
7318: PUSH
7319: LD_INT 117
7321: PUSH
7322: LD_INT 118
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 9597
7344: LD_INT 9
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7500
7352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 4
7363: PUSH
7364: LD_INT 5
7366: PUSH
7367: LD_INT 6
7369: PUSH
7370: LD_INT 7
7372: PUSH
7373: LD_INT 8
7375: PUSH
7376: LD_INT 11
7378: PUSH
7379: LD_INT 12
7381: PUSH
7382: LD_INT 15
7384: PUSH
7385: LD_INT 16
7387: PUSH
7388: LD_INT 20
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 23
7399: PUSH
7400: LD_INT 25
7402: PUSH
7403: LD_INT 26
7405: PUSH
7406: LD_INT 28
7408: PUSH
7409: LD_INT 30
7411: PUSH
7412: LD_INT 31
7414: PUSH
7415: LD_INT 32
7417: PUSH
7418: LD_INT 36
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 101
7446: PUSH
7447: LD_INT 102
7449: PUSH
7450: LD_INT 103
7452: PUSH
7453: LD_INT 105
7455: PUSH
7456: LD_INT 106
7458: PUSH
7459: LD_INT 108
7461: PUSH
7462: LD_INT 109
7464: PUSH
7465: LD_INT 112
7467: PUSH
7468: LD_INT 114
7470: PUSH
7471: LD_INT 116
7473: PUSH
7474: LD_INT 117
7476: PUSH
7477: LD_INT 118
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: ST_TO_ADDR
7498: GO 9597
7500: LD_INT 10
7502: DOUBLE
7503: EQUAL
7504: IFTRUE 7508
7506: GO 7704
7508: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 4
7519: PUSH
7520: LD_INT 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_INT 7
7528: PUSH
7529: LD_INT 8
7531: PUSH
7532: LD_INT 9
7534: PUSH
7535: LD_INT 10
7537: PUSH
7538: LD_INT 11
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: LD_INT 13
7546: PUSH
7547: LD_INT 14
7549: PUSH
7550: LD_INT 15
7552: PUSH
7553: LD_INT 16
7555: PUSH
7556: LD_INT 17
7558: PUSH
7559: LD_INT 18
7561: PUSH
7562: LD_INT 19
7564: PUSH
7565: LD_INT 20
7567: PUSH
7568: LD_INT 21
7570: PUSH
7571: LD_INT 22
7573: PUSH
7574: LD_INT 23
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: LD_INT 28
7588: PUSH
7589: LD_INT 30
7591: PUSH
7592: LD_INT 31
7594: PUSH
7595: LD_INT 32
7597: PUSH
7598: LD_INT 36
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 101
7634: PUSH
7635: LD_INT 102
7637: PUSH
7638: LD_INT 103
7640: PUSH
7641: LD_INT 104
7643: PUSH
7644: LD_INT 105
7646: PUSH
7647: LD_INT 106
7649: PUSH
7650: LD_INT 107
7652: PUSH
7653: LD_INT 108
7655: PUSH
7656: LD_INT 109
7658: PUSH
7659: LD_INT 110
7661: PUSH
7662: LD_INT 111
7664: PUSH
7665: LD_INT 112
7667: PUSH
7668: LD_INT 114
7670: PUSH
7671: LD_INT 116
7673: PUSH
7674: LD_INT 117
7676: PUSH
7677: LD_INT 118
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: ST_TO_ADDR
7702: GO 9597
7704: LD_INT 11
7706: DOUBLE
7707: EQUAL
7708: IFTRUE 7712
7710: GO 7916
7712: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 4
7726: PUSH
7727: LD_INT 5
7729: PUSH
7730: LD_INT 6
7732: PUSH
7733: LD_INT 7
7735: PUSH
7736: LD_INT 8
7738: PUSH
7739: LD_INT 9
7741: PUSH
7742: LD_INT 10
7744: PUSH
7745: LD_INT 11
7747: PUSH
7748: LD_INT 12
7750: PUSH
7751: LD_INT 13
7753: PUSH
7754: LD_INT 14
7756: PUSH
7757: LD_INT 15
7759: PUSH
7760: LD_INT 16
7762: PUSH
7763: LD_INT 17
7765: PUSH
7766: LD_INT 18
7768: PUSH
7769: LD_INT 19
7771: PUSH
7772: LD_INT 20
7774: PUSH
7775: LD_INT 21
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 23
7783: PUSH
7784: LD_INT 24
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 26
7792: PUSH
7793: LD_INT 28
7795: PUSH
7796: LD_INT 30
7798: PUSH
7799: LD_INT 31
7801: PUSH
7802: LD_INT 32
7804: PUSH
7805: LD_INT 34
7807: PUSH
7808: LD_INT 36
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 101
7846: PUSH
7847: LD_INT 102
7849: PUSH
7850: LD_INT 103
7852: PUSH
7853: LD_INT 104
7855: PUSH
7856: LD_INT 105
7858: PUSH
7859: LD_INT 106
7861: PUSH
7862: LD_INT 107
7864: PUSH
7865: LD_INT 108
7867: PUSH
7868: LD_INT 109
7870: PUSH
7871: LD_INT 110
7873: PUSH
7874: LD_INT 111
7876: PUSH
7877: LD_INT 112
7879: PUSH
7880: LD_INT 114
7882: PUSH
7883: LD_INT 116
7885: PUSH
7886: LD_INT 117
7888: PUSH
7889: LD_INT 118
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: ST_TO_ADDR
7914: GO 9597
7916: LD_INT 12
7918: DOUBLE
7919: EQUAL
7920: IFTRUE 7924
7922: GO 8144
7924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 2
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: LD_INT 4
7941: PUSH
7942: LD_INT 5
7944: PUSH
7945: LD_INT 6
7947: PUSH
7948: LD_INT 7
7950: PUSH
7951: LD_INT 8
7953: PUSH
7954: LD_INT 9
7956: PUSH
7957: LD_INT 10
7959: PUSH
7960: LD_INT 11
7962: PUSH
7963: LD_INT 12
7965: PUSH
7966: LD_INT 13
7968: PUSH
7969: LD_INT 14
7971: PUSH
7972: LD_INT 15
7974: PUSH
7975: LD_INT 16
7977: PUSH
7978: LD_INT 17
7980: PUSH
7981: LD_INT 18
7983: PUSH
7984: LD_INT 19
7986: PUSH
7987: LD_INT 20
7989: PUSH
7990: LD_INT 21
7992: PUSH
7993: LD_INT 22
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 26
8007: PUSH
8008: LD_INT 27
8010: PUSH
8011: LD_INT 28
8013: PUSH
8014: LD_INT 30
8016: PUSH
8017: LD_INT 31
8019: PUSH
8020: LD_INT 32
8022: PUSH
8023: LD_INT 33
8025: PUSH
8026: LD_INT 34
8028: PUSH
8029: LD_INT 36
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 101
8070: PUSH
8071: LD_INT 102
8073: PUSH
8074: LD_INT 103
8076: PUSH
8077: LD_INT 104
8079: PUSH
8080: LD_INT 105
8082: PUSH
8083: LD_INT 106
8085: PUSH
8086: LD_INT 107
8088: PUSH
8089: LD_INT 108
8091: PUSH
8092: LD_INT 109
8094: PUSH
8095: LD_INT 110
8097: PUSH
8098: LD_INT 111
8100: PUSH
8101: LD_INT 112
8103: PUSH
8104: LD_INT 113
8106: PUSH
8107: LD_INT 114
8109: PUSH
8110: LD_INT 116
8112: PUSH
8113: LD_INT 117
8115: PUSH
8116: LD_INT 118
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: ST_TO_ADDR
8142: GO 9597
8144: LD_INT 13
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8360
8152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: LD_INT 8
8175: PUSH
8176: LD_INT 9
8178: PUSH
8179: LD_INT 10
8181: PUSH
8182: LD_INT 11
8184: PUSH
8185: LD_INT 12
8187: PUSH
8188: LD_INT 14
8190: PUSH
8191: LD_INT 15
8193: PUSH
8194: LD_INT 16
8196: PUSH
8197: LD_INT 17
8199: PUSH
8200: LD_INT 18
8202: PUSH
8203: LD_INT 19
8205: PUSH
8206: LD_INT 20
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 23
8217: PUSH
8218: LD_INT 24
8220: PUSH
8221: LD_INT 25
8223: PUSH
8224: LD_INT 26
8226: PUSH
8227: LD_INT 27
8229: PUSH
8230: LD_INT 28
8232: PUSH
8233: LD_INT 30
8235: PUSH
8236: LD_INT 31
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: LD_INT 33
8244: PUSH
8245: LD_INT 34
8247: PUSH
8248: LD_INT 36
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 101
8286: PUSH
8287: LD_INT 102
8289: PUSH
8290: LD_INT 103
8292: PUSH
8293: LD_INT 104
8295: PUSH
8296: LD_INT 105
8298: PUSH
8299: LD_INT 106
8301: PUSH
8302: LD_INT 107
8304: PUSH
8305: LD_INT 108
8307: PUSH
8308: LD_INT 109
8310: PUSH
8311: LD_INT 110
8313: PUSH
8314: LD_INT 111
8316: PUSH
8317: LD_INT 112
8319: PUSH
8320: LD_INT 113
8322: PUSH
8323: LD_INT 114
8325: PUSH
8326: LD_INT 116
8328: PUSH
8329: LD_INT 117
8331: PUSH
8332: LD_INT 118
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: ST_TO_ADDR
8358: GO 9597
8360: LD_INT 14
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8592
8368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: LD_INT 2
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: LD_INT 6
8391: PUSH
8392: LD_INT 7
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: LD_INT 10
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 13
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: LD_INT 15
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: LD_INT 17
8424: PUSH
8425: LD_INT 18
8427: PUSH
8428: LD_INT 19
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 23
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 26
8451: PUSH
8452: LD_INT 27
8454: PUSH
8455: LD_INT 28
8457: PUSH
8458: LD_INT 29
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 33
8472: PUSH
8473: LD_INT 34
8475: PUSH
8476: LD_INT 36
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 101
8518: PUSH
8519: LD_INT 102
8521: PUSH
8522: LD_INT 103
8524: PUSH
8525: LD_INT 104
8527: PUSH
8528: LD_INT 105
8530: PUSH
8531: LD_INT 106
8533: PUSH
8534: LD_INT 107
8536: PUSH
8537: LD_INT 108
8539: PUSH
8540: LD_INT 109
8542: PUSH
8543: LD_INT 110
8545: PUSH
8546: LD_INT 111
8548: PUSH
8549: LD_INT 112
8551: PUSH
8552: LD_INT 113
8554: PUSH
8555: LD_INT 114
8557: PUSH
8558: LD_INT 116
8560: PUSH
8561: LD_INT 117
8563: PUSH
8564: LD_INT 118
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: ST_TO_ADDR
8590: GO 9597
8592: LD_INT 15
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8824
8600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: LD_INT 4
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 6
8623: PUSH
8624: LD_INT 7
8626: PUSH
8627: LD_INT 8
8629: PUSH
8630: LD_INT 9
8632: PUSH
8633: LD_INT 10
8635: PUSH
8636: LD_INT 11
8638: PUSH
8639: LD_INT 12
8641: PUSH
8642: LD_INT 13
8644: PUSH
8645: LD_INT 14
8647: PUSH
8648: LD_INT 15
8650: PUSH
8651: LD_INT 16
8653: PUSH
8654: LD_INT 17
8656: PUSH
8657: LD_INT 18
8659: PUSH
8660: LD_INT 19
8662: PUSH
8663: LD_INT 20
8665: PUSH
8666: LD_INT 21
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_INT 23
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 27
8686: PUSH
8687: LD_INT 28
8689: PUSH
8690: LD_INT 29
8692: PUSH
8693: LD_INT 30
8695: PUSH
8696: LD_INT 31
8698: PUSH
8699: LD_INT 32
8701: PUSH
8702: LD_INT 33
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 36
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 103
8756: PUSH
8757: LD_INT 104
8759: PUSH
8760: LD_INT 105
8762: PUSH
8763: LD_INT 106
8765: PUSH
8766: LD_INT 107
8768: PUSH
8769: LD_INT 108
8771: PUSH
8772: LD_INT 109
8774: PUSH
8775: LD_INT 110
8777: PUSH
8778: LD_INT 111
8780: PUSH
8781: LD_INT 112
8783: PUSH
8784: LD_INT 113
8786: PUSH
8787: LD_INT 114
8789: PUSH
8790: LD_INT 116
8792: PUSH
8793: LD_INT 117
8795: PUSH
8796: LD_INT 118
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: ST_TO_ADDR
8822: GO 9597
8824: LD_INT 16
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 8968
8832: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8833: LD_ADDR_VAR 0 2
8837: PUSH
8838: LD_INT 2
8840: PUSH
8841: LD_INT 4
8843: PUSH
8844: LD_INT 5
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 11
8852: PUSH
8853: LD_INT 12
8855: PUSH
8856: LD_INT 15
8858: PUSH
8859: LD_INT 16
8861: PUSH
8862: LD_INT 20
8864: PUSH
8865: LD_INT 21
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_INT 23
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 31
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 34
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 101
8918: PUSH
8919: LD_INT 102
8921: PUSH
8922: LD_INT 103
8924: PUSH
8925: LD_INT 106
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 112
8933: PUSH
8934: LD_INT 113
8936: PUSH
8937: LD_INT 114
8939: PUSH
8940: LD_INT 116
8942: PUSH
8943: LD_INT 117
8945: PUSH
8946: LD_INT 118
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 9597
8968: LD_INT 17
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9200
8976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_INT 1
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_INT 3
8990: PUSH
8991: LD_INT 4
8993: PUSH
8994: LD_INT 5
8996: PUSH
8997: LD_INT 6
8999: PUSH
9000: LD_INT 7
9002: PUSH
9003: LD_INT 8
9005: PUSH
9006: LD_INT 9
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 11
9014: PUSH
9015: LD_INT 12
9017: PUSH
9018: LD_INT 13
9020: PUSH
9021: LD_INT 14
9023: PUSH
9024: LD_INT 15
9026: PUSH
9027: LD_INT 16
9029: PUSH
9030: LD_INT 17
9032: PUSH
9033: LD_INT 18
9035: PUSH
9036: LD_INT 19
9038: PUSH
9039: LD_INT 20
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_INT 23
9050: PUSH
9051: LD_INT 24
9053: PUSH
9054: LD_INT 25
9056: PUSH
9057: LD_INT 26
9059: PUSH
9060: LD_INT 27
9062: PUSH
9063: LD_INT 28
9065: PUSH
9066: LD_INT 29
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 31
9074: PUSH
9075: LD_INT 32
9077: PUSH
9078: LD_INT 33
9080: PUSH
9081: LD_INT 34
9083: PUSH
9084: LD_INT 36
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 101
9126: PUSH
9127: LD_INT 102
9129: PUSH
9130: LD_INT 103
9132: PUSH
9133: LD_INT 104
9135: PUSH
9136: LD_INT 105
9138: PUSH
9139: LD_INT 106
9141: PUSH
9142: LD_INT 107
9144: PUSH
9145: LD_INT 108
9147: PUSH
9148: LD_INT 109
9150: PUSH
9151: LD_INT 110
9153: PUSH
9154: LD_INT 111
9156: PUSH
9157: LD_INT 112
9159: PUSH
9160: LD_INT 113
9162: PUSH
9163: LD_INT 114
9165: PUSH
9166: LD_INT 116
9168: PUSH
9169: LD_INT 117
9171: PUSH
9172: LD_INT 118
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: ST_TO_ADDR
9198: GO 9597
9200: LD_INT 18
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9356
9208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9209: LD_ADDR_VAR 0 2
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: LD_INT 7
9225: PUSH
9226: LD_INT 11
9228: PUSH
9229: LD_INT 12
9231: PUSH
9232: LD_INT 15
9234: PUSH
9235: LD_INT 16
9237: PUSH
9238: LD_INT 20
9240: PUSH
9241: LD_INT 21
9243: PUSH
9244: LD_INT 22
9246: PUSH
9247: LD_INT 23
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 26
9255: PUSH
9256: LD_INT 30
9258: PUSH
9259: LD_INT 31
9261: PUSH
9262: LD_INT 32
9264: PUSH
9265: LD_INT 33
9267: PUSH
9268: LD_INT 34
9270: PUSH
9271: LD_INT 35
9273: PUSH
9274: LD_INT 36
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 101
9302: PUSH
9303: LD_INT 102
9305: PUSH
9306: LD_INT 103
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 108
9314: PUSH
9315: LD_INT 112
9317: PUSH
9318: LD_INT 113
9320: PUSH
9321: LD_INT 114
9323: PUSH
9324: LD_INT 115
9326: PUSH
9327: LD_INT 116
9329: PUSH
9330: LD_INT 117
9332: PUSH
9333: LD_INT 118
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
9354: GO 9597
9356: LD_INT 19
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9596
9364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: LD_INT 6
9387: PUSH
9388: LD_INT 7
9390: PUSH
9391: LD_INT 8
9393: PUSH
9394: LD_INT 9
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: LD_INT 11
9402: PUSH
9403: LD_INT 12
9405: PUSH
9406: LD_INT 13
9408: PUSH
9409: LD_INT 14
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 17
9420: PUSH
9421: LD_INT 18
9423: PUSH
9424: LD_INT 19
9426: PUSH
9427: LD_INT 20
9429: PUSH
9430: LD_INT 21
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_INT 23
9438: PUSH
9439: LD_INT 24
9441: PUSH
9442: LD_INT 25
9444: PUSH
9445: LD_INT 26
9447: PUSH
9448: LD_INT 27
9450: PUSH
9451: LD_INT 28
9453: PUSH
9454: LD_INT 29
9456: PUSH
9457: LD_INT 30
9459: PUSH
9460: LD_INT 31
9462: PUSH
9463: LD_INT 32
9465: PUSH
9466: LD_INT 33
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 35
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 101
9518: PUSH
9519: LD_INT 102
9521: PUSH
9522: LD_INT 103
9524: PUSH
9525: LD_INT 104
9527: PUSH
9528: LD_INT 105
9530: PUSH
9531: LD_INT 106
9533: PUSH
9534: LD_INT 107
9536: PUSH
9537: LD_INT 108
9539: PUSH
9540: LD_INT 109
9542: PUSH
9543: LD_INT 110
9545: PUSH
9546: LD_INT 111
9548: PUSH
9549: LD_INT 112
9551: PUSH
9552: LD_INT 113
9554: PUSH
9555: LD_INT 114
9557: PUSH
9558: LD_INT 115
9560: PUSH
9561: LD_INT 116
9563: PUSH
9564: LD_INT 117
9566: PUSH
9567: LD_INT 118
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: ST_TO_ADDR
9594: GO 9597
9596: POP
// end else
9597: GO 9828
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: LD_INT 1
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 4
9615: PUSH
9616: LD_INT 5
9618: PUSH
9619: LD_INT 6
9621: PUSH
9622: LD_INT 7
9624: PUSH
9625: LD_INT 8
9627: PUSH
9628: LD_INT 9
9630: PUSH
9631: LD_INT 10
9633: PUSH
9634: LD_INT 11
9636: PUSH
9637: LD_INT 12
9639: PUSH
9640: LD_INT 13
9642: PUSH
9643: LD_INT 14
9645: PUSH
9646: LD_INT 15
9648: PUSH
9649: LD_INT 16
9651: PUSH
9652: LD_INT 17
9654: PUSH
9655: LD_INT 18
9657: PUSH
9658: LD_INT 19
9660: PUSH
9661: LD_INT 20
9663: PUSH
9664: LD_INT 21
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_INT 23
9672: PUSH
9673: LD_INT 24
9675: PUSH
9676: LD_INT 25
9678: PUSH
9679: LD_INT 26
9681: PUSH
9682: LD_INT 27
9684: PUSH
9685: LD_INT 28
9687: PUSH
9688: LD_INT 29
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 31
9696: PUSH
9697: LD_INT 32
9699: PUSH
9700: LD_INT 33
9702: PUSH
9703: LD_INT 34
9705: PUSH
9706: LD_INT 35
9708: PUSH
9709: LD_INT 36
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 101
9752: PUSH
9753: LD_INT 102
9755: PUSH
9756: LD_INT 103
9758: PUSH
9759: LD_INT 104
9761: PUSH
9762: LD_INT 105
9764: PUSH
9765: LD_INT 106
9767: PUSH
9768: LD_INT 107
9770: PUSH
9771: LD_INT 108
9773: PUSH
9774: LD_INT 109
9776: PUSH
9777: LD_INT 110
9779: PUSH
9780: LD_INT 111
9782: PUSH
9783: LD_INT 112
9785: PUSH
9786: LD_INT 113
9788: PUSH
9789: LD_INT 114
9791: PUSH
9792: LD_INT 115
9794: PUSH
9795: LD_INT 116
9797: PUSH
9798: LD_INT 117
9800: PUSH
9801: LD_INT 118
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: ST_TO_ADDR
// if result then
9828: LD_VAR 0 2
9832: IFFALSE 10618
// begin normal :=  ;
9834: LD_ADDR_VAR 0 5
9838: PUSH
9839: LD_STRING 
9841: ST_TO_ADDR
// hardcore :=  ;
9842: LD_ADDR_VAR 0 6
9846: PUSH
9847: LD_STRING 
9849: ST_TO_ADDR
// active :=  ;
9850: LD_ADDR_VAR 0 7
9854: PUSH
9855: LD_STRING 
9857: ST_TO_ADDR
// for i = 1 to normalCounter do
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: DOUBLE
9864: LD_INT 1
9866: DEC
9867: ST_TO_ADDR
9868: LD_EXP 25
9872: PUSH
9873: FOR_TO
9874: IFFALSE 9975
// begin tmp := 0 ;
9876: LD_ADDR_VAR 0 3
9880: PUSH
9881: LD_STRING 0
9883: ST_TO_ADDR
// if result [ 1 ] then
9884: LD_VAR 0 2
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: IFFALSE 9957
// if result [ 1 ] [ 1 ] = i then
9894: LD_VAR 0 2
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PUSH
9907: LD_VAR 0 8
9911: EQUAL
9912: IFFALSE 9957
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_VAR 0 2
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: LD_VAR 0 2
9931: PUSH
9932: LD_INT 1
9934: ARRAY
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 3
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
// tmp := 1 ;
9949: LD_ADDR_VAR 0 3
9953: PUSH
9954: LD_STRING 1
9956: ST_TO_ADDR
// end ; normal := normal & tmp ;
9957: LD_ADDR_VAR 0 5
9961: PUSH
9962: LD_VAR 0 5
9966: PUSH
9967: LD_VAR 0 3
9971: STR
9972: ST_TO_ADDR
// end ;
9973: GO 9873
9975: POP
9976: POP
// for i = 1 to hardcoreCounter do
9977: LD_ADDR_VAR 0 8
9981: PUSH
9982: DOUBLE
9983: LD_INT 1
9985: DEC
9986: ST_TO_ADDR
9987: LD_EXP 26
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10098
// begin tmp := 0 ;
9995: LD_ADDR_VAR 0 3
9999: PUSH
10000: LD_STRING 0
10002: ST_TO_ADDR
// if result [ 2 ] then
10003: LD_VAR 0 2
10007: PUSH
10008: LD_INT 2
10010: ARRAY
10011: IFFALSE 10080
// if result [ 2 ] [ 1 ] = 100 + i then
10013: LD_VAR 0 2
10017: PUSH
10018: LD_INT 2
10020: ARRAY
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: PUSH
10026: LD_INT 100
10028: PUSH
10029: LD_VAR 0 8
10033: PLUS
10034: EQUAL
10035: IFFALSE 10080
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: LD_VAR 0 2
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: LD_VAR 0 2
10054: PUSH
10055: LD_INT 2
10057: ARRAY
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 3
10066: PPUSH
10067: CALL_OW 1
10071: ST_TO_ADDR
// tmp := 1 ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_STRING 1
10079: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10080: LD_ADDR_VAR 0 6
10084: PUSH
10085: LD_VAR 0 6
10089: PUSH
10090: LD_VAR 0 3
10094: STR
10095: ST_TO_ADDR
// end ;
10096: GO 9992
10098: POP
10099: POP
// if isGameLoad then
10100: LD_VAR 0 1
10104: IFFALSE 10579
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_EXP 29
10115: PUSH
10116: LD_EXP 28
10120: PUSH
10121: LD_EXP 30
10125: PUSH
10126: LD_EXP 27
10130: PUSH
10131: LD_EXP 31
10135: PUSH
10136: LD_EXP 32
10140: PUSH
10141: LD_EXP 33
10145: PUSH
10146: LD_EXP 34
10150: PUSH
10151: LD_EXP 35
10155: PUSH
10156: LD_EXP 36
10160: PUSH
10161: LD_EXP 37
10165: PUSH
10166: LD_EXP 38
10170: PUSH
10171: LD_EXP 39
10175: PUSH
10176: LD_EXP 40
10180: PUSH
10181: LD_EXP 48
10185: PUSH
10186: LD_EXP 49
10190: PUSH
10191: LD_EXP 50
10195: PUSH
10196: LD_EXP 51
10200: PUSH
10201: LD_EXP 53
10205: PUSH
10206: LD_EXP 54
10210: PUSH
10211: LD_EXP 55
10215: PUSH
10216: LD_EXP 58
10220: PUSH
10221: LD_EXP 60
10225: PUSH
10226: LD_EXP 61
10230: PUSH
10231: LD_EXP 62
10235: PUSH
10236: LD_EXP 64
10240: PUSH
10241: LD_EXP 65
10245: PUSH
10246: LD_EXP 68
10250: PUSH
10251: LD_EXP 69
10255: PUSH
10256: LD_EXP 70
10260: PUSH
10261: LD_EXP 71
10265: PUSH
10266: LD_EXP 72
10270: PUSH
10271: LD_EXP 73
10275: PUSH
10276: LD_EXP 74
10280: PUSH
10281: LD_EXP 75
10285: PUSH
10286: LD_EXP 76
10290: PUSH
10291: LD_EXP 41
10295: PUSH
10296: LD_EXP 42
10300: PUSH
10301: LD_EXP 45
10305: PUSH
10306: LD_EXP 46
10310: PUSH
10311: LD_EXP 47
10315: PUSH
10316: LD_EXP 43
10320: PUSH
10321: LD_EXP 44
10325: PUSH
10326: LD_EXP 52
10330: PUSH
10331: LD_EXP 56
10335: PUSH
10336: LD_EXP 57
10340: PUSH
10341: LD_EXP 59
10345: PUSH
10346: LD_EXP 63
10350: PUSH
10351: LD_EXP 66
10355: PUSH
10356: LD_EXP 67
10360: PUSH
10361: LD_EXP 77
10365: PUSH
10366: LD_EXP 78
10370: PUSH
10371: LD_EXP 79
10375: PUSH
10376: LD_EXP 80
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: ST_TO_ADDR
// tmp :=  ;
10437: LD_ADDR_VAR 0 3
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// for i = 1 to normalCounter do
10445: LD_ADDR_VAR 0 8
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_EXP 25
10459: PUSH
10460: FOR_TO
10461: IFFALSE 10497
// begin if flags [ i ] then
10463: LD_VAR 0 4
10467: PUSH
10468: LD_VAR 0 8
10472: ARRAY
10473: IFFALSE 10495
// tmp := tmp & i & ; ;
10475: LD_ADDR_VAR 0 3
10479: PUSH
10480: LD_VAR 0 3
10484: PUSH
10485: LD_VAR 0 8
10489: STR
10490: PUSH
10491: LD_STRING ;
10493: STR
10494: ST_TO_ADDR
// end ;
10495: GO 10460
10497: POP
10498: POP
// for i = 1 to hardcoreCounter do
10499: LD_ADDR_VAR 0 8
10503: PUSH
10504: DOUBLE
10505: LD_INT 1
10507: DEC
10508: ST_TO_ADDR
10509: LD_EXP 26
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10561
// begin if flags [ normalCounter + i ] then
10517: LD_VAR 0 4
10521: PUSH
10522: LD_EXP 25
10526: PUSH
10527: LD_VAR 0 8
10531: PLUS
10532: ARRAY
10533: IFFALSE 10559
// tmp := tmp & ( 100 + i ) & ; ;
10535: LD_ADDR_VAR 0 3
10539: PUSH
10540: LD_VAR 0 3
10544: PUSH
10545: LD_INT 100
10547: PUSH
10548: LD_VAR 0 8
10552: PLUS
10553: STR
10554: PUSH
10555: LD_STRING ;
10557: STR
10558: ST_TO_ADDR
// end ;
10559: GO 10514
10561: POP
10562: POP
// if tmp then
10563: LD_VAR 0 3
10567: IFFALSE 10579
// active := tmp ;
10569: LD_ADDR_VAR 0 7
10573: PUSH
10574: LD_VAR 0 3
10578: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10579: LD_STRING getStreamItemsFromMission("
10581: PUSH
10582: LD_VAR 0 5
10586: STR
10587: PUSH
10588: LD_STRING ","
10590: STR
10591: PUSH
10592: LD_VAR 0 6
10596: STR
10597: PUSH
10598: LD_STRING ","
10600: STR
10601: PUSH
10602: LD_VAR 0 7
10606: STR
10607: PUSH
10608: LD_STRING ")
10610: STR
10611: PPUSH
10612: CALL_OW 559
// end else
10616: GO 10625
// ToLua ( getStreamItemsFromMission("","","") ) ;
10618: LD_STRING getStreamItemsFromMission("","","")
10620: PPUSH
10621: CALL_OW 559
// end ;
10625: LD_VAR 0 2
10629: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10630: LD_EXP 24
10634: PUSH
10635: LD_EXP 29
10639: AND
10640: IFFALSE 10764
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
// begin enable ;
10649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10650: LD_ADDR_VAR 0 2
10654: PUSH
10655: LD_INT 22
10657: PUSH
10658: LD_OWVAR 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 34
10672: PUSH
10673: LD_INT 7
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 34
10682: PUSH
10683: LD_INT 45
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 34
10692: PUSH
10693: LD_INT 28
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 34
10702: PUSH
10703: LD_INT 47
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10767: LD_EXP 24
10771: PUSH
10772: LD_EXP 30
10776: AND
10777: IFFALSE 10861
10779: GO 10781
10781: DISABLE
10782: LD_INT 0
10784: PPUSH
10785: PPUSH
// begin enable ;
10786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_OWVAR 2
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 32
10806: PUSH
10807: LD_INT 3
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 69
10822: ST_TO_ADDR
// if not tmp then
10823: LD_VAR 0 2
10827: NOT
10828: IFFALSE 10832
// exit ;
10830: GO 10861
// for i in tmp do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_VAR 0 2
10841: PUSH
10842: FOR_IN
10843: IFFALSE 10859
// begin SetLives ( i , 0 ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_INT 0
10852: PPUSH
10853: CALL_OW 234
// end ;
10857: GO 10842
10859: POP
10860: POP
// end ;
10861: PPOPN 2
10863: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10864: LD_EXP 24
10868: PUSH
10869: LD_EXP 27
10873: AND
10874: IFFALSE 10967
10876: GO 10878
10878: DISABLE
10879: LD_INT 0
10881: PPUSH
// begin enable ;
10882: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_OWVAR 2
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 5
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 9
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 8
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PPUSH
10943: CALL_OW 69
10947: PUSH
10948: FOR_IN
10949: IFFALSE 10965
// begin SetClass ( i , 1 ) ;
10951: LD_VAR 0 1
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 336
// end ;
10963: GO 10948
10965: POP
10966: POP
// end ;
10967: PPOPN 1
10969: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10970: LD_EXP 24
10974: PUSH
10975: LD_EXP 28
10979: AND
10980: PUSH
10981: LD_OWVAR 65
10985: PUSH
10986: LD_INT 7
10988: LESS
10989: AND
10990: IFFALSE 11004
10992: GO 10994
10994: DISABLE
// begin enable ;
10995: ENABLE
// game_speed := 7 ;
10996: LD_ADDR_OWVAR 65
11000: PUSH
11001: LD_INT 7
11003: ST_TO_ADDR
// end ;
11004: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11005: LD_EXP 24
11009: PUSH
11010: LD_EXP 31
11014: AND
11015: IFFALSE 11217
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
11023: PPUSH
11024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11025: LD_ADDR_VAR 0 3
11029: PUSH
11030: LD_INT 81
11032: PUSH
11033: LD_OWVAR 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 69
11060: ST_TO_ADDR
// if not tmp then
11061: LD_VAR 0 3
11065: NOT
11066: IFFALSE 11070
// exit ;
11068: GO 11217
// if tmp > 5 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 5
11077: GREATER
11078: IFFALSE 11090
// k := 5 else
11080: LD_ADDR_VAR 0 2
11084: PUSH
11085: LD_INT 5
11087: ST_TO_ADDR
11088: GO 11100
// k := tmp ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_VAR 0 3
11099: ST_TO_ADDR
// for i := 1 to k do
11100: LD_ADDR_VAR 0 1
11104: PUSH
11105: DOUBLE
11106: LD_INT 1
11108: DEC
11109: ST_TO_ADDR
11110: LD_VAR 0 2
11114: PUSH
11115: FOR_TO
11116: IFFALSE 11215
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_VAR 0 1
11127: ARRAY
11128: PPUSH
11129: LD_VAR 0 1
11133: PUSH
11134: LD_INT 4
11136: MOD
11137: PUSH
11138: LD_INT 1
11140: PLUS
11141: PPUSH
11142: CALL_OW 259
11146: PUSH
11147: LD_INT 10
11149: LESS
11150: IFFALSE 11213
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11152: LD_VAR 0 3
11156: PUSH
11157: LD_VAR 0 1
11161: ARRAY
11162: PPUSH
11163: LD_VAR 0 1
11167: PUSH
11168: LD_INT 4
11170: MOD
11171: PUSH
11172: LD_INT 1
11174: PLUS
11175: PPUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 1
11185: ARRAY
11186: PPUSH
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 4
11194: MOD
11195: PUSH
11196: LD_INT 1
11198: PLUS
11199: PPUSH
11200: CALL_OW 259
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: PPUSH
11209: CALL_OW 237
11213: GO 11115
11215: POP
11216: POP
// end ;
11217: PPOPN 3
11219: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11220: LD_EXP 24
11224: PUSH
11225: LD_EXP 32
11229: AND
11230: IFFALSE 11250
11232: GO 11234
11234: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11235: LD_INT 4
11237: PPUSH
11238: LD_OWVAR 2
11242: PPUSH
11243: LD_INT 0
11245: PPUSH
11246: CALL_OW 324
11250: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11251: LD_EXP 24
11255: PUSH
11256: LD_EXP 61
11260: AND
11261: IFFALSE 11281
11263: GO 11265
11265: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11266: LD_INT 19
11268: PPUSH
11269: LD_OWVAR 2
11273: PPUSH
11274: LD_INT 0
11276: PPUSH
11277: CALL_OW 324
11281: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11282: LD_EXP 24
11286: PUSH
11287: LD_EXP 33
11291: AND
11292: IFFALSE 11394
11294: GO 11296
11296: DISABLE
11297: LD_INT 0
11299: PPUSH
11300: PPUSH
// begin enable ;
11301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11302: LD_ADDR_VAR 0 2
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_OWVAR 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: LD_INT 34
11324: PUSH
11325: LD_INT 11
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 34
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// if not tmp then
11356: LD_VAR 0 2
11360: NOT
11361: IFFALSE 11365
// exit ;
11363: GO 11394
// for i in tmp do
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_VAR 0 2
11374: PUSH
11375: FOR_IN
11376: IFFALSE 11392
// begin SetLives ( i , 0 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 0
11385: PPUSH
11386: CALL_OW 234
// end ;
11390: GO 11375
11392: POP
11393: POP
// end ;
11394: PPOPN 2
11396: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11397: LD_EXP 24
11401: PUSH
11402: LD_EXP 34
11406: AND
11407: IFFALSE 11427
11409: GO 11411
11411: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11412: LD_INT 32
11414: PPUSH
11415: LD_OWVAR 2
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 324
11427: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11428: LD_EXP 24
11432: PUSH
11433: LD_EXP 35
11437: AND
11438: IFFALSE 11619
11440: GO 11442
11442: DISABLE
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11448: LD_ADDR_VAR 0 2
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_OWVAR 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 33
11467: PUSH
11468: LD_INT 3
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 69
11483: ST_TO_ADDR
// if not tmp then
11484: LD_VAR 0 2
11488: NOT
11489: IFFALSE 11493
// exit ;
11491: GO 11619
// side := 0 ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_INT 0
11500: ST_TO_ADDR
// for i := 1 to 8 do
11501: LD_ADDR_VAR 0 1
11505: PUSH
11506: DOUBLE
11507: LD_INT 1
11509: DEC
11510: ST_TO_ADDR
11511: LD_INT 8
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11563
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11517: LD_OWVAR 2
11521: PUSH
11522: LD_VAR 0 1
11526: NONEQUAL
11527: PUSH
11528: LD_OWVAR 2
11532: PPUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 81
11542: PUSH
11543: LD_INT 2
11545: EQUAL
11546: AND
11547: IFFALSE 11561
// begin side := i ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_VAR 0 1
11558: ST_TO_ADDR
// break ;
11559: GO 11563
// end ;
11561: GO 11514
11563: POP
11564: POP
// if not side then
11565: LD_VAR 0 3
11569: NOT
11570: IFFALSE 11574
// exit ;
11572: GO 11619
// for i := 1 to tmp do
11574: LD_ADDR_VAR 0 1
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 2
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11617
// if Prob ( 60 ) then
11592: LD_INT 60
11594: PPUSH
11595: CALL_OW 13
11599: IFFALSE 11615
// SetSide ( i , side ) ;
11601: LD_VAR 0 1
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: CALL_OW 235
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 3
11621: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11622: LD_EXP 24
11626: PUSH
11627: LD_EXP 37
11631: AND
11632: IFFALSE 11751
11634: GO 11636
11636: DISABLE
11637: LD_INT 0
11639: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11640: LD_ADDR_VAR 0 1
11644: PUSH
11645: LD_INT 22
11647: PUSH
11648: LD_OWVAR 2
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 23
11672: PUSH
11673: LD_INT 0
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 69
11693: PUSH
11694: FOR_IN
11695: IFFALSE 11749
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 257
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: IN
11725: IFFALSE 11747
// SetClass ( un , rand ( 1 , 4 ) ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: LD_INT 4
11737: PPUSH
11738: CALL_OW 12
11742: PPUSH
11743: CALL_OW 336
11747: GO 11694
11749: POP
11750: POP
// end ;
11751: PPOPN 1
11753: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11754: LD_EXP 24
11758: PUSH
11759: LD_EXP 36
11763: AND
11764: IFFALSE 11843
11766: GO 11768
11768: DISABLE
11769: LD_INT 0
11771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 21
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PPUSH
11803: CALL_OW 69
11807: ST_TO_ADDR
// if not tmp then
11808: LD_VAR 0 1
11812: NOT
11813: IFFALSE 11817
// exit ;
11815: GO 11843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11817: LD_VAR 0 1
11821: PUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 12
11834: ARRAY
11835: PPUSH
11836: LD_INT 100
11838: PPUSH
11839: CALL_OW 234
// end ;
11843: PPOPN 1
11845: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11846: LD_EXP 24
11850: PUSH
11851: LD_EXP 38
11855: AND
11856: IFFALSE 11954
11858: GO 11860
11860: DISABLE
11861: LD_INT 0
11863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_INT 22
11871: PUSH
11872: LD_OWVAR 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: ST_TO_ADDR
// if not tmp then
11900: LD_VAR 0 1
11904: NOT
11905: IFFALSE 11909
// exit ;
11907: GO 11954
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 1
11916: PPUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 12
11926: ARRAY
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_INT 4
11933: PPUSH
11934: CALL_OW 12
11938: PPUSH
11939: LD_INT 3000
11941: PPUSH
11942: LD_INT 9000
11944: PPUSH
11945: CALL_OW 12
11949: PPUSH
11950: CALL_OW 492
// end ;
11954: PPOPN 1
11956: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11957: LD_EXP 24
11961: PUSH
11962: LD_EXP 39
11966: AND
11967: IFFALSE 11987
11969: GO 11971
11971: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11972: LD_INT 1
11974: PPUSH
11975: LD_OWVAR 2
11979: PPUSH
11980: LD_INT 0
11982: PPUSH
11983: CALL_OW 324
11987: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11988: LD_EXP 24
11992: PUSH
11993: LD_EXP 40
11997: AND
11998: IFFALSE 12081
12000: GO 12002
12002: DISABLE
12003: LD_INT 0
12005: PPUSH
12006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12007: LD_ADDR_VAR 0 2
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_OWVAR 2
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 21
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 2
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12081
// for i in tmp do
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_VAR 0 2
12061: PUSH
12062: FOR_IN
12063: IFFALSE 12079
// SetBLevel ( i , 10 ) ;
12065: LD_VAR 0 1
12069: PPUSH
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 241
12077: GO 12062
12079: POP
12080: POP
// end ;
12081: PPOPN 2
12083: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12084: LD_EXP 24
12088: PUSH
12089: LD_EXP 41
12093: AND
12094: IFFALSE 12205
12096: GO 12098
12098: DISABLE
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_OWVAR 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 3
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12205
// un := tmp [ rand ( 1 , tmp ) ] ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 1
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: CALL_OW 12
12171: ARRAY
12172: ST_TO_ADDR
// if Crawls ( un ) then
12173: LD_VAR 0 2
12177: PPUSH
12178: CALL_OW 318
12182: IFFALSE 12193
// ComWalk ( un ) ;
12184: LD_VAR 0 2
12188: PPUSH
12189: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12193: LD_VAR 0 2
12197: PPUSH
12198: LD_INT 5
12200: PPUSH
12201: CALL_OW 336
// end ;
12205: PPOPN 3
12207: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12208: LD_EXP 24
12212: PUSH
12213: LD_EXP 42
12217: AND
12218: PUSH
12219: LD_OWVAR 67
12223: PUSH
12224: LD_INT 4
12226: LESS
12227: AND
12228: IFFALSE 12247
12230: GO 12232
12232: DISABLE
// begin Difficulty := Difficulty + 1 ;
12233: LD_ADDR_OWVAR 67
12237: PUSH
12238: LD_OWVAR 67
12242: PUSH
12243: LD_INT 1
12245: PLUS
12246: ST_TO_ADDR
// end ;
12247: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12248: LD_EXP 24
12252: PUSH
12253: LD_EXP 43
12257: AND
12258: IFFALSE 12361
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin for i := 1 to 5 do
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: DOUBLE
12272: LD_INT 1
12274: DEC
12275: ST_TO_ADDR
12276: LD_INT 5
12278: PUSH
12279: FOR_TO
12280: IFFALSE 12359
// begin uc_nation := nation_nature ;
12282: LD_ADDR_OWVAR 21
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// uc_side := 0 ;
12290: LD_ADDR_OWVAR 20
12294: PUSH
12295: LD_INT 0
12297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12298: LD_ADDR_OWVAR 29
12302: PUSH
12303: LD_INT 12
12305: PUSH
12306: LD_INT 12
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: ST_TO_ADDR
// hc_agressivity := 20 ;
12313: LD_ADDR_OWVAR 35
12317: PUSH
12318: LD_INT 20
12320: ST_TO_ADDR
// hc_class := class_tiger ;
12321: LD_ADDR_OWVAR 28
12325: PUSH
12326: LD_INT 14
12328: ST_TO_ADDR
// hc_gallery :=  ;
12329: LD_ADDR_OWVAR 33
12333: PUSH
12334: LD_STRING 
12336: ST_TO_ADDR
// hc_name :=  ;
12337: LD_ADDR_OWVAR 26
12341: PUSH
12342: LD_STRING 
12344: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12345: CALL_OW 44
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 51
// end ;
12357: GO 12279
12359: POP
12360: POP
// end ;
12361: PPOPN 1
12363: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12364: LD_EXP 24
12368: PUSH
12369: LD_EXP 44
12373: AND
12374: IFFALSE 12383
12376: GO 12378
12378: DISABLE
// StreamSibBomb ;
12379: CALL 12384 0 0
12383: END
// export function StreamSibBomb ; var i , x , y ; begin
12384: LD_INT 0
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
// result := false ;
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// for i := 1 to 16 do
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: DOUBLE
12404: LD_INT 1
12406: DEC
12407: ST_TO_ADDR
12408: LD_INT 16
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12611
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_INT 10
12421: PUSH
12422: LD_INT 20
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 40
12430: PUSH
12431: LD_INT 50
12433: PUSH
12434: LD_INT 60
12436: PUSH
12437: LD_INT 70
12439: PUSH
12440: LD_INT 80
12442: PUSH
12443: LD_INT 90
12445: PUSH
12446: LD_INT 100
12448: PUSH
12449: LD_INT 110
12451: PUSH
12452: LD_INT 120
12454: PUSH
12455: LD_INT 130
12457: PUSH
12458: LD_INT 140
12460: PUSH
12461: LD_INT 150
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 15
12486: PPUSH
12487: CALL_OW 12
12491: ARRAY
12492: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: LD_INT 10
12500: PUSH
12501: LD_INT 20
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: LD_INT 40
12509: PUSH
12510: LD_INT 50
12512: PUSH
12513: LD_INT 60
12515: PUSH
12516: LD_INT 70
12518: PUSH
12519: LD_INT 80
12521: PUSH
12522: LD_INT 90
12524: PUSH
12525: LD_INT 100
12527: PUSH
12528: LD_INT 110
12530: PUSH
12531: LD_INT 120
12533: PUSH
12534: LD_INT 130
12536: PUSH
12537: LD_INT 140
12539: PUSH
12540: LD_INT 150
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_INT 15
12565: PPUSH
12566: CALL_OW 12
12570: ARRAY
12571: ST_TO_ADDR
// if ValidHex ( x , y ) then
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_VAR 0 4
12581: PPUSH
12582: CALL_OW 488
12586: IFFALSE 12609
// begin result := [ x , y ] ;
12588: LD_ADDR_VAR 0 1
12592: PUSH
12593: LD_VAR 0 3
12597: PUSH
12598: LD_VAR 0 4
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: ST_TO_ADDR
// break ;
12607: GO 12611
// end ; end ;
12609: GO 12411
12611: POP
12612: POP
// if result then
12613: LD_VAR 0 1
12617: IFFALSE 12677
// begin ToLua ( playSibBomb() ) ;
12619: LD_STRING playSibBomb()
12621: PPUSH
12622: CALL_OW 559
// wait ( 0 0$14 ) ;
12626: LD_INT 490
12628: PPUSH
12629: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 2
12649: ARRAY
12650: PPUSH
12651: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12655: LD_VAR 0 1
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_INT 2
12671: ARRAY
12672: PPUSH
12673: CALL_OW 429
// end ; end ;
12677: LD_VAR 0 1
12681: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12682: LD_EXP 24
12686: PUSH
12687: LD_EXP 46
12691: AND
12692: IFFALSE 12704
12694: GO 12696
12696: DISABLE
// YouLost (  ) ;
12697: LD_STRING 
12699: PPUSH
12700: CALL_OW 104
12704: END
// every 0 0$1 trigger StreamModeActive and sFog do
12705: LD_EXP 24
12709: PUSH
12710: LD_EXP 45
12714: AND
12715: IFFALSE 12729
12717: GO 12719
12719: DISABLE
// FogOff ( your_side ) ;
12720: LD_OWVAR 2
12724: PPUSH
12725: CALL_OW 344
12729: END
// every 0 0$1 trigger StreamModeActive and sSun do
12730: LD_EXP 24
12734: PUSH
12735: LD_EXP 47
12739: AND
12740: IFFALSE 12768
12742: GO 12744
12744: DISABLE
// begin solar_recharge_percent := 0 ;
12745: LD_ADDR_OWVAR 79
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12753: LD_INT 10500
12755: PPUSH
12756: CALL_OW 67
// solar_recharge_percent := 100 ;
12760: LD_ADDR_OWVAR 79
12764: PUSH
12765: LD_INT 100
12767: ST_TO_ADDR
// end ;
12768: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12769: LD_EXP 24
12773: PUSH
12774: LD_EXP 48
12778: AND
12779: IFFALSE 13018
12781: GO 12783
12783: DISABLE
12784: LD_INT 0
12786: PPUSH
12787: PPUSH
12788: PPUSH
// begin tmp := [ ] ;
12789: LD_ADDR_VAR 0 3
12793: PUSH
12794: EMPTY
12795: ST_TO_ADDR
// for i := 1 to 6 do
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: DOUBLE
12802: LD_INT 1
12804: DEC
12805: ST_TO_ADDR
12806: LD_INT 6
12808: PUSH
12809: FOR_TO
12810: IFFALSE 12915
// begin uc_nation := nation_nature ;
12812: LD_ADDR_OWVAR 21
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// uc_side := 0 ;
12820: LD_ADDR_OWVAR 20
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12828: LD_ADDR_OWVAR 29
12832: PUSH
12833: LD_INT 12
12835: PUSH
12836: LD_INT 12
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: ST_TO_ADDR
// hc_agressivity := 20 ;
12843: LD_ADDR_OWVAR 35
12847: PUSH
12848: LD_INT 20
12850: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12851: LD_ADDR_OWVAR 28
12855: PUSH
12856: LD_INT 17
12858: ST_TO_ADDR
// hc_gallery :=  ;
12859: LD_ADDR_OWVAR 33
12863: PUSH
12864: LD_STRING 
12866: ST_TO_ADDR
// hc_name :=  ;
12867: LD_ADDR_OWVAR 26
12871: PUSH
12872: LD_STRING 
12874: ST_TO_ADDR
// un := CreateHuman ;
12875: LD_ADDR_VAR 0 2
12879: PUSH
12880: CALL_OW 44
12884: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12885: LD_VAR 0 2
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 51
// tmp := tmp ^ un ;
12897: LD_ADDR_VAR 0 3
12901: PUSH
12902: LD_VAR 0 3
12906: PUSH
12907: LD_VAR 0 2
12911: ADD
12912: ST_TO_ADDR
// end ;
12913: GO 12809
12915: POP
12916: POP
// repeat wait ( 0 0$1 ) ;
12917: LD_INT 35
12919: PPUSH
12920: CALL_OW 67
// for un in tmp do
12924: LD_ADDR_VAR 0 2
12928: PUSH
12929: LD_VAR 0 3
12933: PUSH
12934: FOR_IN
12935: IFFALSE 13009
// begin if IsDead ( un ) then
12937: LD_VAR 0 2
12941: PPUSH
12942: CALL_OW 301
12946: IFFALSE 12966
// begin tmp := tmp diff un ;
12948: LD_ADDR_VAR 0 3
12952: PUSH
12953: LD_VAR 0 3
12957: PUSH
12958: LD_VAR 0 2
12962: DIFF
12963: ST_TO_ADDR
// continue ;
12964: GO 12934
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12966: LD_VAR 0 2
12970: PPUSH
12971: LD_INT 3
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_INT 0
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: CALL_OW 74
13002: PPUSH
13003: CALL_OW 115
// end ;
13007: GO 12934
13009: POP
13010: POP
// until not tmp ;
13011: LD_VAR 0 3
13015: NOT
13016: IFFALSE 12917
// end ;
13018: PPOPN 3
13020: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 49
13030: AND
13031: IFFALSE 13085
13033: GO 13035
13035: DISABLE
// begin ToLua ( displayTroll(); ) ;
13036: LD_STRING displayTroll();
13038: PPUSH
13039: CALL_OW 559
// wait ( 3 3$00 ) ;
13043: LD_INT 6300
13045: PPUSH
13046: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13050: LD_STRING hideTroll();
13052: PPUSH
13053: CALL_OW 559
// wait ( 1 1$00 ) ;
13057: LD_INT 2100
13059: PPUSH
13060: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13064: LD_STRING displayTroll();
13066: PPUSH
13067: CALL_OW 559
// wait ( 1 1$00 ) ;
13071: LD_INT 2100
13073: PPUSH
13074: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13078: LD_STRING hideTroll();
13080: PPUSH
13081: CALL_OW 559
// end ;
13085: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13086: LD_EXP 24
13090: PUSH
13091: LD_EXP 50
13095: AND
13096: IFFALSE 13159
13098: GO 13100
13100: DISABLE
13101: LD_INT 0
13103: PPUSH
// begin p := 0 ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// repeat game_speed := 1 ;
13112: LD_ADDR_OWVAR 65
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13120: LD_INT 35
13122: PPUSH
13123: CALL_OW 67
// p := p + 1 ;
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_VAR 0 1
13136: PUSH
13137: LD_INT 1
13139: PLUS
13140: ST_TO_ADDR
// until p >= 60 ;
13141: LD_VAR 0 1
13145: PUSH
13146: LD_INT 60
13148: GREATEREQUAL
13149: IFFALSE 13112
// game_speed := 4 ;
13151: LD_ADDR_OWVAR 65
13155: PUSH
13156: LD_INT 4
13158: ST_TO_ADDR
// end ;
13159: PPOPN 1
13161: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13162: LD_EXP 24
13166: PUSH
13167: LD_EXP 51
13171: AND
13172: IFFALSE 13318
13174: GO 13176
13176: DISABLE
13177: LD_INT 0
13179: PPUSH
13180: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_OWVAR 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 2
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 0
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 30
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: ST_TO_ADDR
// if not depot then
13235: LD_VAR 0 1
13239: NOT
13240: IFFALSE 13244
// exit ;
13242: GO 13318
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_VAR 0 1
13253: PUSH
13254: LD_INT 1
13256: PPUSH
13257: LD_VAR 0 1
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: PPUSH
13268: CALL_OW 274
13272: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13273: LD_VAR 0 2
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 2
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13303: LD_VAR 0 2
13307: PPUSH
13308: LD_INT 3
13310: PPUSH
13311: LD_INT 0
13313: PPUSH
13314: CALL_OW 277
// end ;
13318: PPOPN 2
13320: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13321: LD_EXP 24
13325: PUSH
13326: LD_EXP 52
13330: AND
13331: IFFALSE 13428
13333: GO 13335
13335: DISABLE
13336: LD_INT 0
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13339: LD_ADDR_VAR 0 1
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 21
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: LD_INT 23
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: ST_TO_ADDR
// if not tmp then
13393: LD_VAR 0 1
13397: NOT
13398: IFFALSE 13402
// exit ;
13400: GO 13428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: PPUSH
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 12
13419: ARRAY
13420: PPUSH
13421: LD_INT 200
13423: PPUSH
13424: CALL_OW 234
// end ;
13428: PPOPN 1
13430: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13431: LD_EXP 24
13435: PUSH
13436: LD_EXP 53
13440: AND
13441: IFFALSE 13520
13443: GO 13445
13445: DISABLE
13446: LD_INT 0
13448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13449: LD_ADDR_VAR 0 1
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_OWVAR 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 21
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not tmp then
13485: LD_VAR 0 1
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13494: LD_VAR 0 1
13498: PUSH
13499: LD_INT 1
13501: PPUSH
13502: LD_VAR 0 1
13506: PPUSH
13507: CALL_OW 12
13511: ARRAY
13512: PPUSH
13513: LD_INT 60
13515: PPUSH
13516: CALL_OW 234
// end ;
13520: PPOPN 1
13522: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13523: LD_EXP 24
13527: PUSH
13528: LD_EXP 54
13532: AND
13533: IFFALSE 13632
13535: GO 13537
13537: DISABLE
13538: LD_INT 0
13540: PPUSH
13541: PPUSH
// begin enable ;
13542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_INT 22
13550: PUSH
13551: LD_OWVAR 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 61
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: LD_INT 33
13568: PUSH
13569: LD_INT 2
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: ST_TO_ADDR
// if not tmp then
13586: LD_VAR 0 1
13590: NOT
13591: IFFALSE 13595
// exit ;
13593: GO 13632
// for i in tmp do
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: LD_VAR 0 1
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13630
// if IsControledBy ( i ) then
13608: LD_VAR 0 2
13612: PPUSH
13613: CALL_OW 312
13617: IFFALSE 13628
// ComUnlink ( i ) ;
13619: LD_VAR 0 2
13623: PPUSH
13624: CALL_OW 136
13628: GO 13605
13630: POP
13631: POP
// end ;
13632: PPOPN 2
13634: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13635: LD_EXP 24
13639: PUSH
13640: LD_EXP 55
13644: AND
13645: IFFALSE 13785
13647: GO 13649
13649: DISABLE
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
// begin ToLua ( displayPowell(); ) ;
13654: LD_STRING displayPowell();
13656: PPUSH
13657: CALL_OW 559
// uc_side := 0 ;
13661: LD_ADDR_OWVAR 20
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// uc_nation := 2 ;
13669: LD_ADDR_OWVAR 21
13673: PUSH
13674: LD_INT 2
13676: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13677: LD_ADDR_OWVAR 37
13681: PUSH
13682: LD_INT 14
13684: ST_TO_ADDR
// vc_engine := engine_siberite ;
13685: LD_ADDR_OWVAR 39
13689: PUSH
13690: LD_INT 3
13692: ST_TO_ADDR
// vc_control := control_apeman ;
13693: LD_ADDR_OWVAR 38
13697: PUSH
13698: LD_INT 5
13700: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13701: LD_ADDR_OWVAR 40
13705: PUSH
13706: LD_INT 29
13708: ST_TO_ADDR
// un := CreateVehicle ;
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: CALL_OW 45
13718: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13719: LD_VAR 0 2
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13731: LD_INT 35
13733: PPUSH
13734: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13738: LD_VAR 0 2
13742: PPUSH
13743: LD_INT 22
13745: PUSH
13746: LD_OWVAR 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 69
13759: PPUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 74
13769: PPUSH
13770: CALL_OW 115
// until IsDead ( un ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL_OW 301
13783: IFFALSE 13731
// end ;
13785: PPOPN 2
13787: END
// every 0 0$1 trigger StreamModeActive and sStu do
13788: LD_EXP 24
13792: PUSH
13793: LD_EXP 63
13797: AND
13798: IFFALSE 13814
13800: GO 13802
13802: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13803: LD_STRING displayStucuk();
13805: PPUSH
13806: CALL_OW 559
// ResetFog ;
13810: CALL_OW 335
// end ;
13814: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13815: LD_EXP 24
13819: PUSH
13820: LD_EXP 56
13824: AND
13825: IFFALSE 13966
13827: GO 13829
13829: DISABLE
13830: LD_INT 0
13832: PPUSH
13833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13834: LD_ADDR_VAR 0 2
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_OWVAR 2
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 21
13853: PUSH
13854: LD_INT 1
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: ST_TO_ADDR
// if not tmp then
13870: LD_VAR 0 2
13874: NOT
13875: IFFALSE 13879
// exit ;
13877: GO 13966
// un := tmp [ rand ( 1 , tmp ) ] ;
13879: LD_ADDR_VAR 0 1
13883: PUSH
13884: LD_VAR 0 2
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 12
13901: ARRAY
13902: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13903: LD_VAR 0 1
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13915: LD_VAR 0 1
13919: PPUSH
13920: LD_OWVAR 3
13924: PUSH
13925: LD_VAR 0 1
13929: DIFF
13930: PPUSH
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 74
13940: PPUSH
13941: CALL_OW 115
// wait ( 0 0$20 ) ;
13945: LD_INT 700
13947: PPUSH
13948: CALL_OW 67
// SetSide ( un , your_side ) ;
13952: LD_VAR 0 1
13956: PPUSH
13957: LD_OWVAR 2
13961: PPUSH
13962: CALL_OW 235
// end ;
13966: PPOPN 2
13968: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13969: LD_EXP 24
13973: PUSH
13974: LD_EXP 57
13978: AND
13979: IFFALSE 14085
13981: GO 13983
13983: DISABLE
13984: LD_INT 0
13986: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13987: LD_ADDR_VAR 0 1
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_OWVAR 2
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 0
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 69
14040: ST_TO_ADDR
// if not depot then
14041: LD_VAR 0 1
14045: NOT
14046: IFFALSE 14050
// exit ;
14048: GO 14085
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14050: LD_VAR 0 1
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: CALL_OW 250
14063: PPUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: CALL_OW 251
14077: PPUSH
14078: LD_INT 70
14080: PPUSH
14081: CALL_OW 495
// end ;
14085: PPOPN 1
14087: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14088: LD_EXP 24
14092: PUSH
14093: LD_EXP 58
14097: AND
14098: IFFALSE 14309
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
14109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14110: LD_ADDR_VAR 0 5
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_OWVAR 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// if not tmp then
14146: LD_VAR 0 5
14150: NOT
14151: IFFALSE 14155
// exit ;
14153: GO 14309
// for i in tmp do
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_VAR 0 5
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14307
// begin d := rand ( 0 , 5 ) ;
14168: LD_ADDR_VAR 0 4
14172: PUSH
14173: LD_INT 0
14175: PPUSH
14176: LD_INT 5
14178: PPUSH
14179: CALL_OW 12
14183: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14184: LD_ADDR_VAR 0 2
14188: PUSH
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 250
14198: PPUSH
14199: LD_VAR 0 4
14203: PPUSH
14204: LD_INT 3
14206: PPUSH
14207: LD_INT 12
14209: PPUSH
14210: CALL_OW 12
14214: PPUSH
14215: CALL_OW 272
14219: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14220: LD_ADDR_VAR 0 3
14224: PUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 251
14234: PPUSH
14235: LD_VAR 0 4
14239: PPUSH
14240: LD_INT 3
14242: PPUSH
14243: LD_INT 12
14245: PPUSH
14246: CALL_OW 12
14250: PPUSH
14251: CALL_OW 273
14255: ST_TO_ADDR
// if ValidHex ( x , y ) then
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: CALL_OW 488
14270: IFFALSE 14305
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_VAR 0 2
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: LD_INT 6
14292: PPUSH
14293: CALL_OW 12
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 483
// end ;
14305: GO 14165
14307: POP
14308: POP
// end ;
14309: PPOPN 5
14311: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14312: LD_EXP 24
14316: PUSH
14317: LD_EXP 59
14321: AND
14322: IFFALSE 14416
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14331: LD_ADDR_VAR 0 2
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 32
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 69
14377: ST_TO_ADDR
// if not tmp then
14378: LD_VAR 0 2
14382: NOT
14383: IFFALSE 14387
// exit ;
14385: GO 14416
// for i in tmp do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: LD_VAR 0 2
14396: PUSH
14397: FOR_IN
14398: IFFALSE 14414
// SetFuel ( i , 0 ) ;
14400: LD_VAR 0 1
14404: PPUSH
14405: LD_INT 0
14407: PPUSH
14408: CALL_OW 240
14412: GO 14397
14414: POP
14415: POP
// end ;
14416: PPOPN 2
14418: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14419: LD_EXP 24
14423: PUSH
14424: LD_EXP 60
14428: AND
14429: IFFALSE 14495
14431: GO 14433
14433: DISABLE
14434: LD_INT 0
14436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14437: LD_ADDR_VAR 0 1
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_OWVAR 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 29
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: ST_TO_ADDR
// if not tmp then
14473: LD_VAR 0 1
14477: NOT
14478: IFFALSE 14482
// exit ;
14480: GO 14495
// DestroyUnit ( tmp [ 1 ] ) ;
14482: LD_VAR 0 1
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: CALL_OW 65
// end ;
14495: PPOPN 1
14497: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14498: LD_EXP 24
14502: PUSH
14503: LD_EXP 62
14507: AND
14508: IFFALSE 14637
14510: GO 14512
14512: DISABLE
14513: LD_INT 0
14515: PPUSH
// begin uc_side := 0 ;
14516: LD_ADDR_OWVAR 20
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// uc_nation := nation_arabian ;
14524: LD_ADDR_OWVAR 21
14528: PUSH
14529: LD_INT 2
14531: ST_TO_ADDR
// hc_gallery :=  ;
14532: LD_ADDR_OWVAR 33
14536: PUSH
14537: LD_STRING 
14539: ST_TO_ADDR
// hc_name :=  ;
14540: LD_ADDR_OWVAR 26
14544: PUSH
14545: LD_STRING 
14547: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 11
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 380
// un := CreateHuman ;
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: CALL_OW 44
14570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14571: LD_VAR 0 1
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PPUSH
14607: CALL_OW 69
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 74
14621: PPUSH
14622: CALL_OW 115
// until IsDead ( un ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 301
14635: IFFALSE 14583
// end ;
14637: PPOPN 1
14639: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14640: LD_EXP 24
14644: PUSH
14645: LD_EXP 64
14649: AND
14650: IFFALSE 14662
14652: GO 14654
14654: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14655: LD_STRING earthquake(getX(game), 0, 32)
14657: PPUSH
14658: CALL_OW 559
14662: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14663: LD_EXP 24
14667: PUSH
14668: LD_EXP 65
14672: AND
14673: IFFALSE 14764
14675: GO 14677
14677: DISABLE
14678: LD_INT 0
14680: PPUSH
// begin enable ;
14681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14682: LD_ADDR_VAR 0 1
14686: PUSH
14687: LD_INT 22
14689: PUSH
14690: LD_OWVAR 2
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 21
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 33
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 69
14728: ST_TO_ADDR
// if not tmp then
14729: LD_VAR 0 1
14733: NOT
14734: IFFALSE 14738
// exit ;
14736: GO 14764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14738: LD_VAR 0 1
14742: PUSH
14743: LD_INT 1
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 12
14755: ARRAY
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 234
// end ;
14764: PPOPN 1
14766: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14767: LD_EXP 24
14771: PUSH
14772: LD_EXP 66
14776: AND
14777: IFFALSE 14918
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_OWVAR 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 25
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: ST_TO_ADDR
// if not tmp then
14823: LD_VAR 0 3
14827: NOT
14828: IFFALSE 14832
// exit ;
14830: GO 14918
// un := tmp [ rand ( 1 , tmp ) ] ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_VAR 0 3
14841: PUSH
14842: LD_INT 1
14844: PPUSH
14845: LD_VAR 0 3
14849: PPUSH
14850: CALL_OW 12
14854: ARRAY
14855: ST_TO_ADDR
// if Crawls ( un ) then
14856: LD_VAR 0 2
14860: PPUSH
14861: CALL_OW 318
14865: IFFALSE 14876
// ComWalk ( un ) ;
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14876: LD_VAR 0 2
14880: PPUSH
14881: LD_INT 9
14883: PPUSH
14884: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14888: LD_INT 28
14890: PPUSH
14891: LD_OWVAR 2
14895: PPUSH
14896: LD_INT 2
14898: PPUSH
14899: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14903: LD_INT 29
14905: PPUSH
14906: LD_OWVAR 2
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: CALL_OW 322
// end ;
14918: PPOPN 3
14920: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14921: LD_EXP 24
14925: PUSH
14926: LD_EXP 67
14930: AND
14931: IFFALSE 15042
14933: GO 14935
14935: DISABLE
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
14940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14941: LD_ADDR_VAR 0 3
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_OWVAR 2
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: ST_TO_ADDR
// if not tmp then
14977: LD_VAR 0 3
14981: NOT
14982: IFFALSE 14986
// exit ;
14984: GO 15042
// un := tmp [ rand ( 1 , tmp ) ] ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 1
14998: PPUSH
14999: LD_VAR 0 3
15003: PPUSH
15004: CALL_OW 12
15008: ARRAY
15009: ST_TO_ADDR
// if Crawls ( un ) then
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 318
15019: IFFALSE 15030
// ComWalk ( un ) ;
15021: LD_VAR 0 2
15025: PPUSH
15026: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_INT 8
15037: PPUSH
15038: CALL_OW 336
// end ;
15042: PPOPN 3
15044: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15045: LD_EXP 24
15049: PUSH
15050: LD_EXP 68
15054: AND
15055: IFFALSE 15199
15057: GO 15059
15059: DISABLE
15060: LD_INT 0
15062: PPUSH
15063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_OWVAR 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 34
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 34
15106: PUSH
15107: LD_INT 51
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 34
15116: PUSH
15117: LD_INT 32
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if not tmp then
15140: LD_VAR 0 2
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15199
// for i in tmp do
15149: LD_ADDR_VAR 0 1
15153: PUSH
15154: LD_VAR 0 2
15158: PUSH
15159: FOR_IN
15160: IFFALSE 15197
// if GetCargo ( i , mat_artifact ) = 0 then
15162: LD_VAR 0 1
15166: PPUSH
15167: LD_INT 4
15169: PPUSH
15170: CALL_OW 289
15174: PUSH
15175: LD_INT 0
15177: EQUAL
15178: IFFALSE 15195
// SetCargo ( i , mat_siberit , 100 ) ;
15180: LD_VAR 0 1
15184: PPUSH
15185: LD_INT 3
15187: PPUSH
15188: LD_INT 100
15190: PPUSH
15191: CALL_OW 290
15195: GO 15159
15197: POP
15198: POP
// end ;
15199: PPOPN 2
15201: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15202: LD_EXP 24
15206: PUSH
15207: LD_EXP 69
15211: AND
15212: IFFALSE 15395
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15221: LD_ADDR_VAR 0 2
15225: PUSH
15226: LD_INT 22
15228: PUSH
15229: LD_OWVAR 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 69
15242: ST_TO_ADDR
// if not tmp then
15243: LD_VAR 0 2
15247: NOT
15248: IFFALSE 15252
// exit ;
15250: GO 15395
// for i := 1 to 2 do
15252: LD_ADDR_VAR 0 1
15256: PUSH
15257: DOUBLE
15258: LD_INT 1
15260: DEC
15261: ST_TO_ADDR
15262: LD_INT 2
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15393
// begin uc_side := your_side ;
15268: LD_ADDR_OWVAR 20
15272: PUSH
15273: LD_OWVAR 2
15277: ST_TO_ADDR
// uc_nation := nation_american ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// vc_chassis := us_morphling ;
15286: LD_ADDR_OWVAR 37
15290: PUSH
15291: LD_INT 5
15293: ST_TO_ADDR
// vc_engine := engine_siberite ;
15294: LD_ADDR_OWVAR 39
15298: PUSH
15299: LD_INT 3
15301: ST_TO_ADDR
// vc_control := control_computer ;
15302: LD_ADDR_OWVAR 38
15306: PUSH
15307: LD_INT 3
15309: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15310: LD_ADDR_OWVAR 40
15314: PUSH
15315: LD_INT 10
15317: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15318: LD_VAR 0 2
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: CALL_OW 310
15331: NOT
15332: IFFALSE 15379
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15334: CALL_OW 45
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 250
15352: PPUSH
15353: LD_VAR 0 2
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PPUSH
15362: CALL_OW 251
15366: PPUSH
15367: LD_INT 12
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 50
15377: GO 15391
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15379: CALL_OW 45
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 51
// end ;
15391: GO 15265
15393: POP
15394: POP
// end ;
15395: PPOPN 2
15397: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15398: LD_EXP 24
15402: PUSH
15403: LD_EXP 70
15407: AND
15408: IFFALSE 15630
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15421: LD_ADDR_VAR 0 6
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_OWVAR 2
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 21
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 3
15450: PUSH
15451: LD_INT 23
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PPUSH
15470: CALL_OW 69
15474: ST_TO_ADDR
// if not tmp then
15475: LD_VAR 0 6
15479: NOT
15480: IFFALSE 15484
// exit ;
15482: GO 15630
// s1 := rand ( 1 , 4 ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 1
15491: PPUSH
15492: LD_INT 4
15494: PPUSH
15495: CALL_OW 12
15499: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15500: LD_ADDR_VAR 0 4
15504: PUSH
15505: LD_VAR 0 6
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 259
15523: ST_TO_ADDR
// if s1 = 1 then
15524: LD_VAR 0 2
15528: PUSH
15529: LD_INT 1
15531: EQUAL
15532: IFFALSE 15552
// s2 := rand ( 2 , 4 ) else
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: LD_INT 2
15541: PPUSH
15542: LD_INT 4
15544: PPUSH
15545: CALL_OW 12
15549: ST_TO_ADDR
15550: GO 15560
// s2 := 1 ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_INT 1
15559: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15560: LD_ADDR_VAR 0 5
15564: PUSH
15565: LD_VAR 0 6
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: LD_VAR 0 3
15578: PPUSH
15579: CALL_OW 259
15583: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15584: LD_VAR 0 6
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: LD_VAR 0 5
15602: PPUSH
15603: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15607: LD_VAR 0 6
15611: PUSH
15612: LD_INT 1
15614: ARRAY
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_VAR 0 4
15625: PPUSH
15626: CALL_OW 237
// end ;
15630: PPOPN 6
15632: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 71
15642: AND
15643: IFFALSE 15722
15645: GO 15647
15647: DISABLE
15648: LD_INT 0
15650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15651: LD_ADDR_VAR 0 1
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_OWVAR 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 30
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: ST_TO_ADDR
// if not tmp then
15687: LD_VAR 0 1
15691: NOT
15692: IFFALSE 15696
// exit ;
15694: GO 15722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15696: LD_VAR 0 1
15700: PUSH
15701: LD_INT 1
15703: PPUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 234
// end ;
15722: PPOPN 1
15724: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15725: LD_EXP 24
15729: PUSH
15730: LD_EXP 72
15734: AND
15735: IFFALSE 15847
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
15743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_INT 22
15751: PUSH
15752: LD_OWVAR 2
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 30
15766: PUSH
15767: LD_INT 27
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 30
15776: PUSH
15777: LD_INT 26
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 28
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: ST_TO_ADDR
// if not tmp then
15809: LD_VAR 0 2
15813: NOT
15814: IFFALSE 15818
// exit ;
15816: GO 15847
// for i in tmp do
15818: LD_ADDR_VAR 0 1
15822: PUSH
15823: LD_VAR 0 2
15827: PUSH
15828: FOR_IN
15829: IFFALSE 15845
// SetLives ( i , 1 ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 234
15843: GO 15828
15845: POP
15846: POP
// end ;
15847: PPOPN 2
15849: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15850: LD_EXP 24
15854: PUSH
15855: LD_EXP 73
15859: AND
15860: IFFALSE 16147
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
// begin i := rand ( 1 , 7 ) ;
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_INT 1
15877: PPUSH
15878: LD_INT 7
15880: PPUSH
15881: CALL_OW 12
15885: ST_TO_ADDR
// case i of 1 :
15886: LD_VAR 0 1
15890: PUSH
15891: LD_INT 1
15893: DOUBLE
15894: EQUAL
15895: IFTRUE 15899
15897: GO 15909
15899: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15900: LD_STRING earthquake(getX(game), 0, 32)
15902: PPUSH
15903: CALL_OW 559
15907: GO 16147
15909: LD_INT 2
15911: DOUBLE
15912: EQUAL
15913: IFTRUE 15917
15915: GO 15931
15917: POP
// begin ToLua ( displayStucuk(); ) ;
15918: LD_STRING displayStucuk();
15920: PPUSH
15921: CALL_OW 559
// ResetFog ;
15925: CALL_OW 335
// end ; 3 :
15929: GO 16147
15931: LD_INT 3
15933: DOUBLE
15934: EQUAL
15935: IFTRUE 15939
15937: GO 16043
15939: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15940: LD_ADDR_VAR 0 2
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_OWVAR 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 25
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: ST_TO_ADDR
// if not tmp then
15976: LD_VAR 0 2
15980: NOT
15981: IFFALSE 15985
// exit ;
15983: GO 16147
// un := tmp [ rand ( 1 , tmp ) ] ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: LD_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: PPUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 12
16007: ARRAY
16008: ST_TO_ADDR
// if Crawls ( un ) then
16009: LD_VAR 0 3
16013: PPUSH
16014: CALL_OW 318
16018: IFFALSE 16029
// ComWalk ( un ) ;
16020: LD_VAR 0 3
16024: PPUSH
16025: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 8
16036: PPUSH
16037: CALL_OW 336
// end ; 4 :
16041: GO 16147
16043: LD_INT 4
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16125
16051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16052: LD_ADDR_VAR 0 2
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_OWVAR 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 30
16071: PUSH
16072: LD_INT 29
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 69
16087: ST_TO_ADDR
// if not tmp then
16088: LD_VAR 0 2
16092: NOT
16093: IFFALSE 16097
// exit ;
16095: GO 16147
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16097: LD_VAR 0 2
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PPUSH
16106: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16110: LD_VAR 0 2
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: CALL_OW 65
// end ; 5 .. 7 :
16123: GO 16147
16125: LD_INT 5
16127: DOUBLE
16128: GREATEREQUAL
16129: IFFALSE 16137
16131: LD_INT 7
16133: DOUBLE
16134: LESSEQUAL
16135: IFTRUE 16139
16137: GO 16146
16139: POP
// StreamSibBomb ; end ;
16140: CALL 12384 0 0
16144: GO 16147
16146: POP
// end ;
16147: PPOPN 3
16149: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16150: LD_EXP 24
16154: PUSH
16155: LD_EXP 74
16159: AND
16160: IFFALSE 16316
16162: GO 16164
16164: DISABLE
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
16169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_INT 81
16177: PUSH
16178: LD_OWVAR 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 21
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: ST_TO_ADDR
// if not tmp then
16224: LD_VAR 0 2
16228: NOT
16229: IFFALSE 16233
// exit ;
16231: GO 16316
// p := 0 ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16241: LD_INT 35
16243: PPUSH
16244: CALL_OW 67
// p := p + 1 ;
16248: LD_ADDR_VAR 0 3
16252: PUSH
16253: LD_VAR 0 3
16257: PUSH
16258: LD_INT 1
16260: PLUS
16261: ST_TO_ADDR
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16304
// if GetLives ( i ) < 1000 then
16275: LD_VAR 0 1
16279: PPUSH
16280: CALL_OW 256
16284: PUSH
16285: LD_INT 1000
16287: LESS
16288: IFFALSE 16302
// SetLives ( i , 1000 ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 1000
16297: PPUSH
16298: CALL_OW 234
16302: GO 16272
16304: POP
16305: POP
// until p > 20 ;
16306: LD_VAR 0 3
16310: PUSH
16311: LD_INT 20
16313: GREATER
16314: IFFALSE 16241
// end ;
16316: PPOPN 3
16318: END
// every 0 0$1 trigger StreamModeActive and sTime do
16319: LD_EXP 24
16323: PUSH
16324: LD_EXP 75
16328: AND
16329: IFFALSE 16364
16331: GO 16333
16333: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16334: LD_INT 28
16336: PPUSH
16337: LD_OWVAR 2
16341: PPUSH
16342: LD_INT 2
16344: PPUSH
16345: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16349: LD_INT 30
16351: PPUSH
16352: LD_OWVAR 2
16356: PPUSH
16357: LD_INT 2
16359: PPUSH
16360: CALL_OW 322
// end ;
16364: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16365: LD_EXP 24
16369: PUSH
16370: LD_EXP 76
16374: AND
16375: IFFALSE 16496
16377: GO 16379
16379: DISABLE
16380: LD_INT 0
16382: PPUSH
16383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16384: LD_ADDR_VAR 0 2
16388: PUSH
16389: LD_INT 22
16391: PUSH
16392: LD_OWVAR 2
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 21
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 3
16413: PUSH
16414: LD_INT 23
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 69
16437: ST_TO_ADDR
// if not tmp then
16438: LD_VAR 0 2
16442: NOT
16443: IFFALSE 16447
// exit ;
16445: GO 16496
// for i in tmp do
16447: LD_ADDR_VAR 0 1
16451: PUSH
16452: LD_VAR 0 2
16456: PUSH
16457: FOR_IN
16458: IFFALSE 16494
// begin if Crawls ( i ) then
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 318
16469: IFFALSE 16480
// ComWalk ( i ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 138
// SetClass ( i , 2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_INT 2
16487: PPUSH
16488: CALL_OW 336
// end ;
16492: GO 16457
16494: POP
16495: POP
// end ;
16496: PPOPN 2
16498: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16499: LD_EXP 24
16503: PUSH
16504: LD_EXP 77
16508: AND
16509: IFFALSE 16797
16511: GO 16513
16513: DISABLE
16514: LD_INT 0
16516: PPUSH
16517: PPUSH
16518: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16519: LD_OWVAR 2
16523: PPUSH
16524: LD_INT 9
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16537: LD_INT 9
16539: PPUSH
16540: LD_OWVAR 2
16544: PPUSH
16545: CALL_OW 343
// uc_side := 9 ;
16549: LD_ADDR_OWVAR 20
16553: PUSH
16554: LD_INT 9
16556: ST_TO_ADDR
// uc_nation := 2 ;
16557: LD_ADDR_OWVAR 21
16561: PUSH
16562: LD_INT 2
16564: ST_TO_ADDR
// hc_name := Dark Warrior ;
16565: LD_ADDR_OWVAR 26
16569: PUSH
16570: LD_STRING Dark Warrior
16572: ST_TO_ADDR
// hc_gallery :=  ;
16573: LD_ADDR_OWVAR 33
16577: PUSH
16578: LD_STRING 
16580: ST_TO_ADDR
// hc_noskilllimit := true ;
16581: LD_ADDR_OWVAR 76
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16589: LD_ADDR_OWVAR 31
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 30
16599: PUSH
16600: LD_INT 30
16602: PUSH
16603: LD_INT 30
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: ST_TO_ADDR
// un := CreateHuman ;
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: CALL_OW 44
16621: ST_TO_ADDR
// hc_noskilllimit := false ;
16622: LD_ADDR_OWVAR 76
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 51
// ToLua ( playRanger() ) ;
16642: LD_STRING playRanger()
16644: PPUSH
16645: CALL_OW 559
// p := 0 ;
16649: LD_ADDR_VAR 0 2
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16657: LD_INT 35
16659: PPUSH
16660: CALL_OW 67
// p := p + 1 ;
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: LD_INT 1
16676: PLUS
16677: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16678: LD_VAR 0 3
16682: PPUSH
16683: CALL_OW 256
16687: PUSH
16688: LD_INT 1000
16690: LESS
16691: IFFALSE 16705
// SetLives ( un , 1000 ) ;
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 1000
16700: PPUSH
16701: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 81
16712: PUSH
16713: LD_OWVAR 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 91
16724: PUSH
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 30
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PPUSH
16742: CALL_OW 69
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: CALL_OW 74
16756: PPUSH
16757: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16761: LD_VAR 0 2
16765: PUSH
16766: LD_INT 80
16768: GREATER
16769: PUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: CALL_OW 301
16779: OR
16780: IFFALSE 16657
// if un then
16782: LD_VAR 0 3
16786: IFFALSE 16797
// RemoveUnit ( un ) ;
16788: LD_VAR 0 3
16792: PPUSH
16793: CALL_OW 64
// end ;
16797: PPOPN 3
16799: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16800: LD_EXP 78
16804: IFFALSE 16920
16806: GO 16808
16808: DISABLE
16809: LD_INT 0
16811: PPUSH
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16814: LD_ADDR_VAR 0 2
16818: PUSH
16819: LD_INT 81
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 21
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16850: LD_STRING playComputer()
16852: PPUSH
16853: CALL_OW 559
// if not tmp then
16857: LD_VAR 0 2
16861: NOT
16862: IFFALSE 16866
// exit ;
16864: GO 16920
// for i in tmp do
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_VAR 0 2
16875: PUSH
16876: FOR_IN
16877: IFFALSE 16918
// for j := 1 to 4 do
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: DOUBLE
16885: LD_INT 1
16887: DEC
16888: ST_TO_ADDR
16889: LD_INT 4
16891: PUSH
16892: FOR_TO
16893: IFFALSE 16914
// SetSkill ( i , j , 10 ) ;
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 10
16907: PPUSH
16908: CALL_OW 237
16912: GO 16892
16914: POP
16915: POP
16916: GO 16876
16918: POP
16919: POP
// end ;
16920: PPOPN 3
16922: END
// every 0 0$1 trigger s30 do var i , tmp ;
16923: LD_EXP 79
16927: IFFALSE 16996
16929: GO 16931
16931: DISABLE
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_OWVAR 2
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 69
16957: ST_TO_ADDR
// if not tmp then
16958: LD_VAR 0 2
16962: NOT
16963: IFFALSE 16967
// exit ;
16965: GO 16996
// for i in tmp do
16967: LD_ADDR_VAR 0 1
16971: PUSH
16972: LD_VAR 0 2
16976: PUSH
16977: FOR_IN
16978: IFFALSE 16994
// SetLives ( i , 300 ) ;
16980: LD_VAR 0 1
16984: PPUSH
16985: LD_INT 300
16987: PPUSH
16988: CALL_OW 234
16992: GO 16977
16994: POP
16995: POP
// end ;
16996: PPOPN 2
16998: END
// every 0 0$1 trigger s60 do var i , tmp ;
16999: LD_EXP 80
17003: IFFALSE 17072
17005: GO 17007
17007: DISABLE
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17012: LD_ADDR_VAR 0 2
17016: PUSH
17017: LD_INT 22
17019: PUSH
17020: LD_OWVAR 2
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 69
17033: ST_TO_ADDR
// if not tmp then
17034: LD_VAR 0 2
17038: NOT
17039: IFFALSE 17043
// exit ;
17041: GO 17072
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 2
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17070
// SetLives ( i , 600 ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 600
17063: PPUSH
17064: CALL_OW 234
17068: GO 17053
17070: POP
17071: POP
// end ;
17072: PPOPN 2
17074: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17075: LD_INT 0
17077: PPUSH
// case cmd of 301 :
17078: LD_VAR 0 1
17082: PUSH
17083: LD_INT 301
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17123
17091: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17092: LD_VAR 0 6
17096: PPUSH
17097: LD_VAR 0 7
17101: PPUSH
17102: LD_VAR 0 8
17106: PPUSH
17107: LD_VAR 0 4
17111: PPUSH
17112: LD_VAR 0 5
17116: PPUSH
17117: CALL 18332 0 5
17121: GO 17244
17123: LD_INT 302
17125: DOUBLE
17126: EQUAL
17127: IFTRUE 17131
17129: GO 17168
17131: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17132: LD_VAR 0 6
17136: PPUSH
17137: LD_VAR 0 7
17141: PPUSH
17142: LD_VAR 0 8
17146: PPUSH
17147: LD_VAR 0 9
17151: PPUSH
17152: LD_VAR 0 4
17156: PPUSH
17157: LD_VAR 0 5
17161: PPUSH
17162: CALL 18423 0 6
17166: GO 17244
17168: LD_INT 303
17170: DOUBLE
17171: EQUAL
17172: IFTRUE 17176
17174: GO 17213
17176: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17177: LD_VAR 0 6
17181: PPUSH
17182: LD_VAR 0 7
17186: PPUSH
17187: LD_VAR 0 8
17191: PPUSH
17192: LD_VAR 0 9
17196: PPUSH
17197: LD_VAR 0 4
17201: PPUSH
17202: LD_VAR 0 5
17206: PPUSH
17207: CALL 17249 0 6
17211: GO 17244
17213: LD_INT 304
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17243
17221: POP
// hHackTeleport ( unit , x , y ) ; end ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_VAR 0 4
17231: PPUSH
17232: LD_VAR 0 5
17236: PPUSH
17237: CALL 19016 0 3
17241: GO 17244
17243: POP
// end ;
17244: LD_VAR 0 12
17248: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 1
17260: LESS
17261: PUSH
17262: LD_VAR 0 1
17266: PUSH
17267: LD_INT 3
17269: GREATER
17270: OR
17271: PUSH
17272: LD_VAR 0 5
17276: PPUSH
17277: LD_VAR 0 6
17281: PPUSH
17282: CALL_OW 428
17286: OR
17287: IFFALSE 17291
// exit ;
17289: GO 18019
// uc_side := your_side ;
17291: LD_ADDR_OWVAR 20
17295: PUSH
17296: LD_OWVAR 2
17300: ST_TO_ADDR
// uc_nation := nation ;
17301: LD_ADDR_OWVAR 21
17305: PUSH
17306: LD_VAR 0 1
17310: ST_TO_ADDR
// bc_level = 1 ;
17311: LD_ADDR_OWVAR 43
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// case btype of 1 :
17319: LD_VAR 0 2
17323: PUSH
17324: LD_INT 1
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17343
17332: POP
// bc_type := b_depot ; 2 :
17333: LD_ADDR_OWVAR 42
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
17341: GO 17963
17343: LD_INT 2
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17362
17351: POP
// bc_type := b_warehouse ; 3 :
17352: LD_ADDR_OWVAR 42
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
17360: GO 17963
17362: LD_INT 3
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17381
17370: POP
// bc_type := b_lab ; 4 .. 9 :
17371: LD_ADDR_OWVAR 42
17375: PUSH
17376: LD_INT 6
17378: ST_TO_ADDR
17379: GO 17963
17381: LD_INT 4
17383: DOUBLE
17384: GREATEREQUAL
17385: IFFALSE 17393
17387: LD_INT 9
17389: DOUBLE
17390: LESSEQUAL
17391: IFTRUE 17395
17393: GO 17455
17395: POP
// begin bc_type := b_lab_half ;
17396: LD_ADDR_OWVAR 42
17400: PUSH
17401: LD_INT 7
17403: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17404: LD_ADDR_OWVAR 44
17408: PUSH
17409: LD_INT 10
17411: PUSH
17412: LD_INT 11
17414: PUSH
17415: LD_INT 12
17417: PUSH
17418: LD_INT 15
17420: PUSH
17421: LD_INT 14
17423: PUSH
17424: LD_INT 13
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 3
17442: MINUS
17443: ARRAY
17444: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17445: LD_ADDR_OWVAR 45
17449: PUSH
17450: LD_INT 9
17452: ST_TO_ADDR
// end ; 10 .. 13 :
17453: GO 17963
17455: LD_INT 10
17457: DOUBLE
17458: GREATEREQUAL
17459: IFFALSE 17467
17461: LD_INT 13
17463: DOUBLE
17464: LESSEQUAL
17465: IFTRUE 17469
17467: GO 17546
17469: POP
// begin bc_type := b_lab_full ;
17470: LD_ADDR_OWVAR 42
17474: PUSH
17475: LD_INT 8
17477: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17478: LD_ADDR_OWVAR 44
17482: PUSH
17483: LD_INT 10
17485: PUSH
17486: LD_INT 12
17488: PUSH
17489: LD_INT 14
17491: PUSH
17492: LD_INT 13
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_INT 9
17508: MINUS
17509: ARRAY
17510: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17511: LD_ADDR_OWVAR 45
17515: PUSH
17516: LD_INT 11
17518: PUSH
17519: LD_INT 15
17521: PUSH
17522: LD_INT 12
17524: PUSH
17525: LD_INT 15
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_VAR 0 2
17538: PUSH
17539: LD_INT 9
17541: MINUS
17542: ARRAY
17543: ST_TO_ADDR
// end ; 14 :
17544: GO 17963
17546: LD_INT 14
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17565
17554: POP
// bc_type := b_workshop ; 15 :
17555: LD_ADDR_OWVAR 42
17559: PUSH
17560: LD_INT 2
17562: ST_TO_ADDR
17563: GO 17963
17565: LD_INT 15
17567: DOUBLE
17568: EQUAL
17569: IFTRUE 17573
17571: GO 17584
17573: POP
// bc_type := b_factory ; 16 :
17574: LD_ADDR_OWVAR 42
17578: PUSH
17579: LD_INT 3
17581: ST_TO_ADDR
17582: GO 17963
17584: LD_INT 16
17586: DOUBLE
17587: EQUAL
17588: IFTRUE 17592
17590: GO 17603
17592: POP
// bc_type := b_ext_gun ; 17 :
17593: LD_ADDR_OWVAR 42
17597: PUSH
17598: LD_INT 17
17600: ST_TO_ADDR
17601: GO 17963
17603: LD_INT 17
17605: DOUBLE
17606: EQUAL
17607: IFTRUE 17611
17609: GO 17639
17611: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17612: LD_ADDR_OWVAR 42
17616: PUSH
17617: LD_INT 19
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 19
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: LD_VAR 0 1
17635: ARRAY
17636: ST_TO_ADDR
17637: GO 17963
17639: LD_INT 18
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17658
17647: POP
// bc_type := b_ext_radar ; 19 :
17648: LD_ADDR_OWVAR 42
17652: PUSH
17653: LD_INT 20
17655: ST_TO_ADDR
17656: GO 17963
17658: LD_INT 19
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17677
17666: POP
// bc_type := b_ext_radio ; 20 :
17667: LD_ADDR_OWVAR 42
17671: PUSH
17672: LD_INT 22
17674: ST_TO_ADDR
17675: GO 17963
17677: LD_INT 20
17679: DOUBLE
17680: EQUAL
17681: IFTRUE 17685
17683: GO 17696
17685: POP
// bc_type := b_ext_siberium ; 21 :
17686: LD_ADDR_OWVAR 42
17690: PUSH
17691: LD_INT 21
17693: ST_TO_ADDR
17694: GO 17963
17696: LD_INT 21
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17715
17704: POP
// bc_type := b_ext_computer ; 22 :
17705: LD_ADDR_OWVAR 42
17709: PUSH
17710: LD_INT 24
17712: ST_TO_ADDR
17713: GO 17963
17715: LD_INT 22
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// bc_type := b_ext_track ; 23 :
17724: LD_ADDR_OWVAR 42
17728: PUSH
17729: LD_INT 16
17731: ST_TO_ADDR
17732: GO 17963
17734: LD_INT 23
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17753
17742: POP
// bc_type := b_ext_laser ; 24 :
17743: LD_ADDR_OWVAR 42
17747: PUSH
17748: LD_INT 25
17750: ST_TO_ADDR
17751: GO 17963
17753: LD_INT 24
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17772
17761: POP
// bc_type := b_control_tower ; 25 :
17762: LD_ADDR_OWVAR 42
17766: PUSH
17767: LD_INT 36
17769: ST_TO_ADDR
17770: GO 17963
17772: LD_INT 25
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17791
17780: POP
// bc_type := b_breastwork ; 26 :
17781: LD_ADDR_OWVAR 42
17785: PUSH
17786: LD_INT 31
17788: ST_TO_ADDR
17789: GO 17963
17791: LD_INT 26
17793: DOUBLE
17794: EQUAL
17795: IFTRUE 17799
17797: GO 17810
17799: POP
// bc_type := b_bunker ; 27 :
17800: LD_ADDR_OWVAR 42
17804: PUSH
17805: LD_INT 32
17807: ST_TO_ADDR
17808: GO 17963
17810: LD_INT 27
17812: DOUBLE
17813: EQUAL
17814: IFTRUE 17818
17816: GO 17829
17818: POP
// bc_type := b_turret ; 28 :
17819: LD_ADDR_OWVAR 42
17823: PUSH
17824: LD_INT 33
17826: ST_TO_ADDR
17827: GO 17963
17829: LD_INT 28
17831: DOUBLE
17832: EQUAL
17833: IFTRUE 17837
17835: GO 17848
17837: POP
// bc_type := b_armoury ; 29 :
17838: LD_ADDR_OWVAR 42
17842: PUSH
17843: LD_INT 4
17845: ST_TO_ADDR
17846: GO 17963
17848: LD_INT 29
17850: DOUBLE
17851: EQUAL
17852: IFTRUE 17856
17854: GO 17867
17856: POP
// bc_type := b_barracks ; 30 :
17857: LD_ADDR_OWVAR 42
17861: PUSH
17862: LD_INT 5
17864: ST_TO_ADDR
17865: GO 17963
17867: LD_INT 30
17869: DOUBLE
17870: EQUAL
17871: IFTRUE 17875
17873: GO 17886
17875: POP
// bc_type := b_solar_power ; 31 :
17876: LD_ADDR_OWVAR 42
17880: PUSH
17881: LD_INT 27
17883: ST_TO_ADDR
17884: GO 17963
17886: LD_INT 31
17888: DOUBLE
17889: EQUAL
17890: IFTRUE 17894
17892: GO 17905
17894: POP
// bc_type := b_oil_power ; 32 :
17895: LD_ADDR_OWVAR 42
17899: PUSH
17900: LD_INT 26
17902: ST_TO_ADDR
17903: GO 17963
17905: LD_INT 32
17907: DOUBLE
17908: EQUAL
17909: IFTRUE 17913
17911: GO 17924
17913: POP
// bc_type := b_siberite_power ; 33 :
17914: LD_ADDR_OWVAR 42
17918: PUSH
17919: LD_INT 28
17921: ST_TO_ADDR
17922: GO 17963
17924: LD_INT 33
17926: DOUBLE
17927: EQUAL
17928: IFTRUE 17932
17930: GO 17943
17932: POP
// bc_type := b_oil_mine ; 34 :
17933: LD_ADDR_OWVAR 42
17937: PUSH
17938: LD_INT 29
17940: ST_TO_ADDR
17941: GO 17963
17943: LD_INT 34
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17962
17951: POP
// bc_type := b_siberite_mine ; end ;
17952: LD_ADDR_OWVAR 42
17956: PUSH
17957: LD_INT 30
17959: ST_TO_ADDR
17960: GO 17963
17962: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17963: LD_ADDR_VAR 0 8
17967: PUSH
17968: LD_VAR 0 5
17972: PPUSH
17973: LD_VAR 0 6
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: CALL_OW 47
17987: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17988: LD_OWVAR 42
17992: PUSH
17993: LD_INT 32
17995: PUSH
17996: LD_INT 33
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: IN
18003: IFFALSE 18019
// PlaceWeaponTurret ( b , weapon ) ;
18005: LD_VAR 0 8
18009: PPUSH
18010: LD_VAR 0 4
18014: PPUSH
18015: CALL_OW 431
// end ;
18019: LD_VAR 0 7
18023: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18024: LD_INT 0
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18030: LD_ADDR_VAR 0 4
18034: PUSH
18035: LD_INT 22
18037: PUSH
18038: LD_OWVAR 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PPUSH
18079: CALL_OW 69
18083: ST_TO_ADDR
// if not tmp then
18084: LD_VAR 0 4
18088: NOT
18089: IFFALSE 18093
// exit ;
18091: GO 18152
// for i in tmp do
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: LD_VAR 0 4
18102: PUSH
18103: FOR_IN
18104: IFFALSE 18150
// for j = 1 to 3 do
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: DOUBLE
18112: LD_INT 1
18114: DEC
18115: ST_TO_ADDR
18116: LD_INT 3
18118: PUSH
18119: FOR_TO
18120: IFFALSE 18146
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18122: LD_VAR 0 2
18126: PPUSH
18127: CALL_OW 274
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 99999
18139: PPUSH
18140: CALL_OW 277
18144: GO 18119
18146: POP
18147: POP
18148: GO 18103
18150: POP
18151: POP
// end ;
18152: LD_VAR 0 1
18156: RET
// export function hHackSetLevel10 ; var i , j ; begin
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
18161: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PUSH
18182: FOR_IN
18183: IFFALSE 18235
// if IsSelected ( i ) then
18185: LD_VAR 0 2
18189: PPUSH
18190: CALL_OW 306
18194: IFFALSE 18233
// begin for j := 1 to 4 do
18196: LD_ADDR_VAR 0 3
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_INT 4
18208: PUSH
18209: FOR_TO
18210: IFFALSE 18231
// SetSkill ( i , j , 10 ) ;
18212: LD_VAR 0 2
18216: PPUSH
18217: LD_VAR 0 3
18221: PPUSH
18222: LD_INT 10
18224: PPUSH
18225: CALL_OW 237
18229: GO 18209
18231: POP
18232: POP
// end ;
18233: GO 18182
18235: POP
18236: POP
// end ;
18237: LD_VAR 0 1
18241: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18242: LD_INT 0
18244: PPUSH
18245: PPUSH
18246: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_OWVAR 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 21
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 69
18282: PUSH
18283: FOR_IN
18284: IFFALSE 18325
// begin for j := 1 to 4 do
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: DOUBLE
18292: LD_INT 1
18294: DEC
18295: ST_TO_ADDR
18296: LD_INT 4
18298: PUSH
18299: FOR_TO
18300: IFFALSE 18321
// SetSkill ( i , j , 10 ) ;
18302: LD_VAR 0 2
18306: PPUSH
18307: LD_VAR 0 3
18311: PPUSH
18312: LD_INT 10
18314: PPUSH
18315: CALL_OW 237
18319: GO 18299
18321: POP
18322: POP
// end ;
18323: GO 18283
18325: POP
18326: POP
// end ;
18327: LD_VAR 0 1
18331: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18332: LD_INT 0
18334: PPUSH
// uc_side := your_side ;
18335: LD_ADDR_OWVAR 20
18339: PUSH
18340: LD_OWVAR 2
18344: ST_TO_ADDR
// uc_nation := nation ;
18345: LD_ADDR_OWVAR 21
18349: PUSH
18350: LD_VAR 0 1
18354: ST_TO_ADDR
// InitHc ;
18355: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18359: LD_INT 0
18361: PPUSH
18362: LD_VAR 0 2
18366: PPUSH
18367: LD_VAR 0 3
18371: PPUSH
18372: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18376: LD_VAR 0 4
18380: PPUSH
18381: LD_VAR 0 5
18385: PPUSH
18386: CALL_OW 428
18390: PUSH
18391: LD_INT 0
18393: EQUAL
18394: IFFALSE 18418
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18396: CALL_OW 44
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: LD_VAR 0 5
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 48
// end ;
18418: LD_VAR 0 6
18422: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18423: LD_INT 0
18425: PPUSH
18426: PPUSH
// uc_side := your_side ;
18427: LD_ADDR_OWVAR 20
18431: PUSH
18432: LD_OWVAR 2
18436: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18437: LD_VAR 0 1
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: LD_INT 4
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: IN
18464: IFFALSE 18476
// uc_nation := nation_american else
18466: LD_ADDR_OWVAR 21
18470: PUSH
18471: LD_INT 1
18473: ST_TO_ADDR
18474: GO 18519
// if chassis in [ 11 , 12 , 13 , 14 ] then
18476: LD_VAR 0 1
18480: PUSH
18481: LD_INT 11
18483: PUSH
18484: LD_INT 12
18486: PUSH
18487: LD_INT 13
18489: PUSH
18490: LD_INT 14
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: IN
18499: IFFALSE 18511
// uc_nation := nation_arabian else
18501: LD_ADDR_OWVAR 21
18505: PUSH
18506: LD_INT 2
18508: ST_TO_ADDR
18509: GO 18519
// uc_nation := nation_russian ;
18511: LD_ADDR_OWVAR 21
18515: PUSH
18516: LD_INT 3
18518: ST_TO_ADDR
// vc_chassis := chassis ;
18519: LD_ADDR_OWVAR 37
18523: PUSH
18524: LD_VAR 0 1
18528: ST_TO_ADDR
// vc_engine := engine ;
18529: LD_ADDR_OWVAR 39
18533: PUSH
18534: LD_VAR 0 2
18538: ST_TO_ADDR
// vc_control := control ;
18539: LD_ADDR_OWVAR 38
18543: PUSH
18544: LD_VAR 0 3
18548: ST_TO_ADDR
// vc_weapon := weapon ;
18549: LD_ADDR_OWVAR 40
18553: PUSH
18554: LD_VAR 0 4
18558: ST_TO_ADDR
// un := CreateVehicle ;
18559: LD_ADDR_VAR 0 8
18563: PUSH
18564: CALL_OW 45
18568: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18569: LD_VAR 0 8
18573: PPUSH
18574: LD_INT 0
18576: PPUSH
18577: LD_INT 5
18579: PPUSH
18580: CALL_OW 12
18584: PPUSH
18585: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18589: LD_VAR 0 8
18593: PPUSH
18594: LD_VAR 0 5
18598: PPUSH
18599: LD_VAR 0 6
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 48
// end ;
18611: LD_VAR 0 7
18615: RET
// export hInvincible ; every 1 do
18616: GO 18618
18618: DISABLE
// hInvincible := [ ] ;
18619: LD_ADDR_EXP 81
18623: PUSH
18624: EMPTY
18625: ST_TO_ADDR
18626: END
// every 10 do var i ;
18627: GO 18629
18629: DISABLE
18630: LD_INT 0
18632: PPUSH
// begin enable ;
18633: ENABLE
// if not hInvincible then
18634: LD_EXP 81
18638: NOT
18639: IFFALSE 18643
// exit ;
18641: GO 18687
// for i in hInvincible do
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_EXP 81
18652: PUSH
18653: FOR_IN
18654: IFFALSE 18685
// if GetLives ( i ) < 1000 then
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 256
18665: PUSH
18666: LD_INT 1000
18668: LESS
18669: IFFALSE 18683
// SetLives ( i , 1000 ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_INT 1000
18678: PPUSH
18679: CALL_OW 234
18683: GO 18653
18685: POP
18686: POP
// end ;
18687: PPOPN 1
18689: END
// export function hHackInvincible ; var i ; begin
18690: LD_INT 0
18692: PPUSH
18693: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18694: LD_ADDR_VAR 0 2
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 21
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 21
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18794
// if IsSelected ( i ) then
18735: LD_VAR 0 2
18739: PPUSH
18740: CALL_OW 306
18744: IFFALSE 18792
// begin if i in hInvincible then
18746: LD_VAR 0 2
18750: PUSH
18751: LD_EXP 81
18755: IN
18756: IFFALSE 18776
// hInvincible := hInvincible diff i else
18758: LD_ADDR_EXP 81
18762: PUSH
18763: LD_EXP 81
18767: PUSH
18768: LD_VAR 0 2
18772: DIFF
18773: ST_TO_ADDR
18774: GO 18792
// hInvincible := hInvincible union i ;
18776: LD_ADDR_EXP 81
18780: PUSH
18781: LD_EXP 81
18785: PUSH
18786: LD_VAR 0 2
18790: UNION
18791: ST_TO_ADDR
// end ;
18792: GO 18732
18794: POP
18795: POP
// end ;
18796: LD_VAR 0 1
18800: RET
// export function hHackInvisible ; var i , j ; begin
18801: LD_INT 0
18803: PPUSH
18804: PPUSH
18805: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18806: LD_ADDR_VAR 0 2
18810: PUSH
18811: LD_INT 21
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18851
// if IsSelected ( i ) then
18829: LD_VAR 0 2
18833: PPUSH
18834: CALL_OW 306
18838: IFFALSE 18849
// ComForceInvisible ( i ) ;
18840: LD_VAR 0 2
18844: PPUSH
18845: CALL_OW 496
18849: GO 18826
18851: POP
18852: POP
// end ;
18853: LD_VAR 0 1
18857: RET
// export function hHackChangeYourSide ; begin
18858: LD_INT 0
18860: PPUSH
// if your_side = 8 then
18861: LD_OWVAR 2
18865: PUSH
18866: LD_INT 8
18868: EQUAL
18869: IFFALSE 18881
// your_side := 0 else
18871: LD_ADDR_OWVAR 2
18875: PUSH
18876: LD_INT 0
18878: ST_TO_ADDR
18879: GO 18895
// your_side := your_side + 1 ;
18881: LD_ADDR_OWVAR 2
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: ST_TO_ADDR
// end ;
18895: LD_VAR 0 1
18899: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
18904: PPUSH
// for i in all_units do
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_OWVAR 3
18914: PUSH
18915: FOR_IN
18916: IFFALSE 18994
// if IsSelected ( i ) then
18918: LD_VAR 0 2
18922: PPUSH
18923: CALL_OW 306
18927: IFFALSE 18992
// begin j := GetSide ( i ) ;
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_VAR 0 2
18938: PPUSH
18939: CALL_OW 255
18943: ST_TO_ADDR
// if j = 8 then
18944: LD_VAR 0 3
18948: PUSH
18949: LD_INT 8
18951: EQUAL
18952: IFFALSE 18964
// j := 0 else
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 0
18961: ST_TO_ADDR
18962: GO 18978
// j := j + 1 ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 1
18976: PLUS
18977: ST_TO_ADDR
// SetSide ( i , j ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 235
// end ;
18992: GO 18915
18994: POP
18995: POP
// end ;
18996: LD_VAR 0 1
19000: RET
// export function hHackFog ; begin
19001: LD_INT 0
19003: PPUSH
// FogOff ( true ) ;
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 344
// end ;
19011: LD_VAR 0 1
19015: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19016: LD_INT 0
19018: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 483
// CenterOnXY ( x , y ) ;
19044: LD_VAR 0 2
19048: PPUSH
19049: LD_VAR 0 3
19053: PPUSH
19054: CALL_OW 84
// end ;
19058: LD_VAR 0 4
19062: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19067: LD_VAR 0 1
19071: NOT
19072: PUSH
19073: LD_VAR 0 2
19077: PPUSH
19078: LD_VAR 0 3
19082: PPUSH
19083: CALL_OW 488
19087: NOT
19088: OR
19089: PUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 266
19099: PUSH
19100: LD_INT 3
19102: NONEQUAL
19103: PUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 247
19113: PUSH
19114: LD_INT 1
19116: EQUAL
19117: NOT
19118: AND
19119: OR
19120: IFFALSE 19124
// exit ;
19122: GO 19406
// if GetType ( factory ) = unit_human then
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 247
19133: PUSH
19134: LD_INT 1
19136: EQUAL
19137: IFFALSE 19154
// factory := IsInUnit ( factory ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 310
19153: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 266
19163: PUSH
19164: LD_INT 3
19166: NONEQUAL
19167: IFFALSE 19171
// exit ;
19169: GO 19406
// for i := 1 to Count ( factoryWaypoints ) do
19171: LD_ADDR_VAR 0 5
19175: PUSH
19176: DOUBLE
19177: LD_INT 1
19179: DEC
19180: ST_TO_ADDR
19181: LD_EXP 82
19185: PPUSH
19186: CALL 28072 0 1
19190: PUSH
19191: FOR_TO
19192: IFFALSE 19354
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19194: LD_VAR 0 2
19198: PPUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: CALL_OW 428
19208: PUSH
19209: LD_EXP 82
19213: PUSH
19214: LD_VAR 0 5
19218: ARRAY
19219: PUSH
19220: LD_INT 2
19222: ARRAY
19223: EQUAL
19224: IFFALSE 19256
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19226: LD_ADDR_EXP 82
19230: PUSH
19231: LD_EXP 82
19235: PPUSH
19236: LD_VAR 0 5
19240: PPUSH
19241: CALL_OW 3
19245: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19246: CALL 19411 0 0
// exit ;
19250: POP
19251: POP
19252: GO 19406
// end else
19254: GO 19352
// if factory = factoryWaypoints [ i ] [ 2 ] then
19256: LD_VAR 0 1
19260: PUSH
19261: LD_EXP 82
19265: PUSH
19266: LD_VAR 0 5
19270: ARRAY
19271: PUSH
19272: LD_INT 2
19274: ARRAY
19275: EQUAL
19276: IFFALSE 19352
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19278: LD_ADDR_EXP 82
19282: PUSH
19283: LD_EXP 82
19287: PPUSH
19288: LD_VAR 0 5
19292: PPUSH
19293: CALL_OW 3
19297: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19298: LD_ADDR_EXP 82
19302: PUSH
19303: LD_EXP 82
19307: PPUSH
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 255
19317: PUSH
19318: LD_VAR 0 1
19322: PUSH
19323: LD_VAR 0 2
19327: PUSH
19328: LD_VAR 0 3
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL 63681 0 2
19343: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19344: CALL 19411 0 0
// exit ;
19348: POP
19349: POP
19350: GO 19406
// end ; end ;
19352: GO 19191
19354: POP
19355: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19356: LD_ADDR_EXP 82
19360: PUSH
19361: LD_EXP 82
19365: PPUSH
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 255
19375: PUSH
19376: LD_VAR 0 1
19380: PUSH
19381: LD_VAR 0 2
19385: PUSH
19386: LD_VAR 0 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL 63681 0 2
19401: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19402: CALL 19411 0 0
// end ;
19406: LD_VAR 0 4
19410: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
19415: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19416: LD_STRING resetFactoryWaypoint();
19418: PPUSH
19419: CALL_OW 559
// if factoryWaypoints then
19423: LD_EXP 82
19427: IFFALSE 19548
// begin list := factoryWaypoints ;
19429: LD_ADDR_VAR 0 3
19433: PUSH
19434: LD_EXP 82
19438: ST_TO_ADDR
// for i := 1 to list do
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: DOUBLE
19445: LD_INT 1
19447: DEC
19448: ST_TO_ADDR
19449: LD_VAR 0 3
19453: PUSH
19454: FOR_TO
19455: IFFALSE 19546
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19457: LD_STRING setFactoryWaypointXY(
19459: PUSH
19460: LD_VAR 0 3
19464: PUSH
19465: LD_VAR 0 2
19469: ARRAY
19470: PUSH
19471: LD_INT 1
19473: ARRAY
19474: STR
19475: PUSH
19476: LD_STRING ,
19478: STR
19479: PUSH
19480: LD_VAR 0 3
19484: PUSH
19485: LD_VAR 0 2
19489: ARRAY
19490: PUSH
19491: LD_INT 2
19493: ARRAY
19494: STR
19495: PUSH
19496: LD_STRING ,
19498: STR
19499: PUSH
19500: LD_VAR 0 3
19504: PUSH
19505: LD_VAR 0 2
19509: ARRAY
19510: PUSH
19511: LD_INT 3
19513: ARRAY
19514: STR
19515: PUSH
19516: LD_STRING ,
19518: STR
19519: PUSH
19520: LD_VAR 0 3
19524: PUSH
19525: LD_VAR 0 2
19529: ARRAY
19530: PUSH
19531: LD_INT 4
19533: ARRAY
19534: STR
19535: PUSH
19536: LD_STRING )
19538: STR
19539: PPUSH
19540: CALL_OW 559
19544: GO 19454
19546: POP
19547: POP
// end ; end ;
19548: LD_VAR 0 1
19552: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19553: LD_INT 0
19555: PPUSH
// if HexInfo ( x , y ) = warehouse then
19556: LD_VAR 0 2
19560: PPUSH
19561: LD_VAR 0 3
19565: PPUSH
19566: CALL_OW 428
19570: PUSH
19571: LD_VAR 0 1
19575: EQUAL
19576: IFFALSE 19603
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19578: LD_ADDR_EXP 83
19582: PUSH
19583: LD_EXP 83
19587: PPUSH
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_INT 0
19595: PPUSH
19596: CALL_OW 1
19600: ST_TO_ADDR
19601: GO 19654
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19603: LD_ADDR_EXP 83
19607: PUSH
19608: LD_EXP 83
19612: PPUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_VAR 0 1
19622: PPUSH
19623: CALL_OW 255
19627: PUSH
19628: LD_VAR 0 1
19632: PUSH
19633: LD_VAR 0 2
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 1
19653: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19654: CALL 19663 0 0
// end ;
19658: LD_VAR 0 4
19662: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
19667: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19668: LD_STRING resetWarehouseGatheringPoints();
19670: PPUSH
19671: CALL_OW 559
// if warehouseGatheringPoints then
19675: LD_EXP 83
19679: IFFALSE 19805
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19681: LD_ADDR_VAR 0 3
19685: PUSH
19686: LD_EXP 83
19690: PPUSH
19691: CALL 67443 0 1
19695: ST_TO_ADDR
// for i := 1 to list do
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: DOUBLE
19702: LD_INT 1
19704: DEC
19705: ST_TO_ADDR
19706: LD_VAR 0 3
19710: PUSH
19711: FOR_TO
19712: IFFALSE 19803
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19714: LD_STRING setWarehouseGatheringPointXY(
19716: PUSH
19717: LD_VAR 0 3
19721: PUSH
19722: LD_VAR 0 2
19726: ARRAY
19727: PUSH
19728: LD_INT 1
19730: ARRAY
19731: STR
19732: PUSH
19733: LD_STRING ,
19735: STR
19736: PUSH
19737: LD_VAR 0 3
19741: PUSH
19742: LD_VAR 0 2
19746: ARRAY
19747: PUSH
19748: LD_INT 2
19750: ARRAY
19751: STR
19752: PUSH
19753: LD_STRING ,
19755: STR
19756: PUSH
19757: LD_VAR 0 3
19761: PUSH
19762: LD_VAR 0 2
19766: ARRAY
19767: PUSH
19768: LD_INT 3
19770: ARRAY
19771: STR
19772: PUSH
19773: LD_STRING ,
19775: STR
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 2
19786: ARRAY
19787: PUSH
19788: LD_INT 4
19790: ARRAY
19791: STR
19792: PUSH
19793: LD_STRING )
19795: STR
19796: PPUSH
19797: CALL_OW 559
19801: GO 19711
19803: POP
19804: POP
// end ; end ;
19805: LD_VAR 0 1
19809: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19810: LD_EXP 83
19814: IFFALSE 20499
19816: GO 19818
19818: DISABLE
19819: LD_INT 0
19821: PPUSH
19822: PPUSH
19823: PPUSH
19824: PPUSH
19825: PPUSH
19826: PPUSH
19827: PPUSH
19828: PPUSH
19829: PPUSH
// begin enable ;
19830: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_EXP 83
19840: PPUSH
19841: CALL 67443 0 1
19845: ST_TO_ADDR
// if not list then
19846: LD_VAR 0 3
19850: NOT
19851: IFFALSE 19855
// exit ;
19853: GO 20499
// for i := 1 to list do
19855: LD_ADDR_VAR 0 1
19859: PUSH
19860: DOUBLE
19861: LD_INT 1
19863: DEC
19864: ST_TO_ADDR
19865: LD_VAR 0 3
19869: PUSH
19870: FOR_TO
19871: IFFALSE 20497
// begin depot := list [ i ] [ 2 ] ;
19873: LD_ADDR_VAR 0 8
19877: PUSH
19878: LD_VAR 0 3
19882: PUSH
19883: LD_VAR 0 1
19887: ARRAY
19888: PUSH
19889: LD_INT 2
19891: ARRAY
19892: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19893: LD_ADDR_VAR 0 5
19897: PUSH
19898: LD_VAR 0 3
19902: PUSH
19903: LD_VAR 0 1
19907: ARRAY
19908: PUSH
19909: LD_INT 1
19911: ARRAY
19912: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19913: LD_VAR 0 8
19917: PPUSH
19918: CALL_OW 301
19922: PUSH
19923: LD_VAR 0 5
19927: PUSH
19928: LD_VAR 0 8
19932: PPUSH
19933: CALL_OW 255
19937: NONEQUAL
19938: OR
19939: IFFALSE 19968
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19941: LD_ADDR_EXP 83
19945: PUSH
19946: LD_EXP 83
19950: PPUSH
19951: LD_VAR 0 8
19955: PPUSH
19956: LD_INT 0
19958: PPUSH
19959: CALL_OW 1
19963: ST_TO_ADDR
// exit ;
19964: POP
19965: POP
19966: GO 20499
// end ; x := list [ i ] [ 3 ] ;
19968: LD_ADDR_VAR 0 6
19972: PUSH
19973: LD_VAR 0 3
19977: PUSH
19978: LD_VAR 0 1
19982: ARRAY
19983: PUSH
19984: LD_INT 3
19986: ARRAY
19987: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19988: LD_ADDR_VAR 0 7
19992: PUSH
19993: LD_VAR 0 3
19997: PUSH
19998: LD_VAR 0 1
20002: ARRAY
20003: PUSH
20004: LD_INT 4
20006: ARRAY
20007: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20008: LD_ADDR_VAR 0 9
20012: PUSH
20013: LD_VAR 0 6
20017: PPUSH
20018: LD_VAR 0 7
20022: PPUSH
20023: LD_INT 16
20025: PPUSH
20026: CALL 66027 0 3
20030: ST_TO_ADDR
// if not cratesNearbyPoint then
20031: LD_VAR 0 9
20035: NOT
20036: IFFALSE 20042
// exit ;
20038: POP
20039: POP
20040: GO 20499
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20042: LD_ADDR_VAR 0 4
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_VAR 0 5
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: LD_INT 60
20064: PUSH
20065: EMPTY
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 91
20074: PUSH
20075: LD_VAR 0 8
20079: PUSH
20080: LD_INT 6
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 25
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 25
20103: PUSH
20104: LD_INT 16
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 69
20126: PUSH
20127: LD_VAR 0 8
20131: PPUSH
20132: CALL_OW 313
20136: PPUSH
20137: LD_INT 3
20139: PUSH
20140: LD_INT 60
20142: PUSH
20143: EMPTY
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: LD_INT 25
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 16
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PPUSH
20182: CALL_OW 72
20186: UNION
20187: ST_TO_ADDR
// if tmp then
20188: LD_VAR 0 4
20192: IFFALSE 20272
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20194: LD_ADDR_VAR 0 4
20198: PUSH
20199: LD_VAR 0 4
20203: PPUSH
20204: LD_INT 3
20206: PPUSH
20207: CALL 63996 0 2
20211: ST_TO_ADDR
// for j in tmp do
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_VAR 0 4
20221: PUSH
20222: FOR_IN
20223: IFFALSE 20266
// begin if IsInUnit ( j ) then
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 310
20234: IFFALSE 20245
// ComExit ( j ) ;
20236: LD_VAR 0 2
20240: PPUSH
20241: CALL 64079 0 1
// AddComCollect ( j , x , y ) ;
20245: LD_VAR 0 2
20249: PPUSH
20250: LD_VAR 0 6
20254: PPUSH
20255: LD_VAR 0 7
20259: PPUSH
20260: CALL_OW 177
// end ;
20264: GO 20222
20266: POP
20267: POP
// exit ;
20268: POP
20269: POP
20270: GO 20499
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20272: LD_ADDR_VAR 0 4
20276: PUSH
20277: LD_INT 22
20279: PUSH
20280: LD_VAR 0 5
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 91
20291: PUSH
20292: LD_VAR 0 8
20296: PUSH
20297: LD_INT 8
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: LD_INT 34
20310: PUSH
20311: LD_INT 12
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 34
20320: PUSH
20321: LD_INT 51
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 34
20330: PUSH
20331: LD_INT 32
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 34
20340: PUSH
20341: LD_INT 89
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: PPUSH
20360: CALL_OW 69
20364: ST_TO_ADDR
// if tmp then
20365: LD_VAR 0 4
20369: IFFALSE 20495
// begin for j in tmp do
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: LD_VAR 0 4
20380: PUSH
20381: FOR_IN
20382: IFFALSE 20493
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20384: LD_VAR 0 2
20388: PPUSH
20389: CALL_OW 262
20393: PUSH
20394: LD_INT 3
20396: EQUAL
20397: PUSH
20398: LD_VAR 0 2
20402: PPUSH
20403: CALL_OW 261
20407: PUSH
20408: LD_INT 20
20410: GREATER
20411: OR
20412: PUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: CALL_OW 314
20422: NOT
20423: AND
20424: PUSH
20425: LD_VAR 0 2
20429: PPUSH
20430: CALL_OW 263
20434: PUSH
20435: LD_INT 1
20437: NONEQUAL
20438: PUSH
20439: LD_VAR 0 2
20443: PPUSH
20444: CALL_OW 311
20448: OR
20449: AND
20450: IFFALSE 20491
// begin ComCollect ( j , x , y ) ;
20452: LD_VAR 0 2
20456: PPUSH
20457: LD_VAR 0 6
20461: PPUSH
20462: LD_VAR 0 7
20466: PPUSH
20467: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_VAR 0 8
20480: PPUSH
20481: CALL_OW 172
// exit ;
20485: POP
20486: POP
20487: POP
20488: POP
20489: GO 20499
// end ;
20491: GO 20381
20493: POP
20494: POP
// end ; end ;
20495: GO 19870
20497: POP
20498: POP
// end ; end_of_file
20499: PPOPN 9
20501: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20502: LD_VAR 0 1
20506: PUSH
20507: LD_INT 200
20509: DOUBLE
20510: GREATEREQUAL
20511: IFFALSE 20519
20513: LD_INT 299
20515: DOUBLE
20516: LESSEQUAL
20517: IFTRUE 20521
20519: GO 20553
20521: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20522: LD_VAR 0 1
20526: PPUSH
20527: LD_VAR 0 2
20531: PPUSH
20532: LD_VAR 0 3
20536: PPUSH
20537: LD_VAR 0 4
20541: PPUSH
20542: LD_VAR 0 5
20546: PPUSH
20547: CALL 21250 0 5
20551: GO 20630
20553: LD_INT 300
20555: DOUBLE
20556: GREATEREQUAL
20557: IFFALSE 20565
20559: LD_INT 399
20561: DOUBLE
20562: LESSEQUAL
20563: IFTRUE 20567
20565: GO 20629
20567: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20568: LD_VAR 0 1
20572: PPUSH
20573: LD_VAR 0 2
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: LD_VAR 0 4
20587: PPUSH
20588: LD_VAR 0 5
20592: PPUSH
20593: LD_VAR 0 6
20597: PPUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: LD_VAR 0 8
20607: PPUSH
20608: LD_VAR 0 9
20612: PPUSH
20613: LD_VAR 0 10
20617: PPUSH
20618: LD_VAR 0 11
20622: PPUSH
20623: CALL 17075 0 11
20627: GO 20630
20629: POP
// end ;
20630: PPOPN 11
20632: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20633: LD_VAR 0 1
20637: PPUSH
20638: LD_VAR 0 2
20642: PPUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: LD_VAR 0 4
20652: PPUSH
20653: LD_VAR 0 5
20657: PPUSH
20658: CALL 20715 0 5
// end ; end_of_file
20662: PPOPN 5
20664: END
// export function SOS_UnitDestroyed ( un ) ; begin
20665: LD_INT 0
20667: PPUSH
// ComRadiation ( un ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: CALL 21654 0 1
// end ;
20677: LD_VAR 0 2
20681: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20682: LD_INT 0
20684: PPUSH
// ComRadiation ( un ) ;
20685: LD_VAR 0 1
20689: PPUSH
20690: CALL 21654 0 1
// end ;
20694: LD_VAR 0 2
20698: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20699: LD_INT 0
20701: PPUSH
// end ;
20702: LD_VAR 0 4
20706: RET
// export function SOS_Command ( cmd ) ; begin
20707: LD_INT 0
20709: PPUSH
// end ;
20710: LD_VAR 0 2
20714: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20715: LD_INT 0
20717: PPUSH
// end ;
20718: LD_VAR 0 6
20722: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
20723: LD_INT 0
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
20729: PPUSH
// if not vehicle or not factory then
20730: LD_VAR 0 1
20734: NOT
20735: PUSH
20736: LD_VAR 0 2
20740: NOT
20741: OR
20742: IFFALSE 20746
// exit ;
20744: GO 21245
// if not factoryWaypoints then
20746: LD_EXP 82
20750: NOT
20751: IFFALSE 20755
// exit ;
20753: GO 21245
// for i := 1 to Count ( factoryWaypoints ) do
20755: LD_ADDR_VAR 0 4
20759: PUSH
20760: DOUBLE
20761: LD_INT 1
20763: DEC
20764: ST_TO_ADDR
20765: LD_EXP 82
20769: PPUSH
20770: CALL 28072 0 1
20774: PUSH
20775: FOR_TO
20776: IFFALSE 21243
// if factoryWaypoints [ i ] [ 2 ] = factory then
20778: LD_EXP 82
20782: PUSH
20783: LD_VAR 0 4
20787: ARRAY
20788: PUSH
20789: LD_INT 2
20791: ARRAY
20792: PUSH
20793: LD_VAR 0 2
20797: EQUAL
20798: IFFALSE 21241
// begin if GetControl ( vehicle ) = control_manual then
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL_OW 263
20809: PUSH
20810: LD_INT 1
20812: EQUAL
20813: IFFALSE 21124
// begin driver := IsDrivenBy ( vehicle ) ;
20815: LD_ADDR_VAR 0 6
20819: PUSH
20820: LD_VAR 0 1
20824: PPUSH
20825: CALL_OW 311
20829: ST_TO_ADDR
// tag := GetTag ( driver ) ;
20830: LD_ADDR_VAR 0 5
20834: PUSH
20835: LD_VAR 0 6
20839: PPUSH
20840: CALL_OW 110
20844: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
20845: LD_VAR 0 5
20849: PUSH
20850: LD_INT 501
20852: EQUAL
20853: PUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 110
20863: PUSH
20864: LD_INT 501
20866: EQUAL
20867: OR
20868: IFFALSE 20874
// exit ;
20870: POP
20871: POP
20872: GO 21245
// if not HasTask ( driver ) then
20874: LD_VAR 0 6
20878: PPUSH
20879: CALL_OW 314
20883: NOT
20884: IFFALSE 21122
// begin SetTag ( driver , tDriver ) ;
20886: LD_VAR 0 6
20890: PPUSH
20891: LD_INT 501
20893: PPUSH
20894: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
20898: LD_VAR 0 1
20902: PPUSH
20903: LD_INT 501
20905: PPUSH
20906: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20910: LD_ADDR_VAR 0 7
20914: PUSH
20915: LD_EXP 82
20919: PUSH
20920: LD_VAR 0 4
20924: ARRAY
20925: PUSH
20926: LD_INT 3
20928: ARRAY
20929: PPUSH
20930: LD_EXP 82
20934: PUSH
20935: LD_VAR 0 4
20939: ARRAY
20940: PUSH
20941: LD_INT 4
20943: ARRAY
20944: PPUSH
20945: CALL_OW 428
20949: ST_TO_ADDR
// if hex then
20950: LD_VAR 0 7
20954: IFFALSE 20972
// ComMoveUnit ( driver , hex ) else
20956: LD_VAR 0 6
20960: PPUSH
20961: LD_VAR 0 7
20965: PPUSH
20966: CALL_OW 112
20970: GO 21011
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20972: LD_VAR 0 6
20976: PPUSH
20977: LD_EXP 82
20981: PUSH
20982: LD_VAR 0 4
20986: ARRAY
20987: PUSH
20988: LD_INT 3
20990: ARRAY
20991: PPUSH
20992: LD_EXP 82
20996: PUSH
20997: LD_VAR 0 4
21001: ARRAY
21002: PUSH
21003: LD_INT 4
21005: ARRAY
21006: PPUSH
21007: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21011: LD_VAR 0 6
21015: PPUSH
21016: CALL_OW 181
// if Multiplayer then
21020: LD_OWVAR 4
21024: IFFALSE 21073
// begin repeat wait ( 10 ) ;
21026: LD_INT 10
21028: PPUSH
21029: CALL_OW 67
// until not IsInUnit ( driver ) ;
21033: LD_VAR 0 6
21037: PPUSH
21038: CALL_OW 310
21042: NOT
21043: IFFALSE 21026
// if not HasTask ( driver ) then
21045: LD_VAR 0 6
21049: PPUSH
21050: CALL_OW 314
21054: NOT
21055: IFFALSE 21071
// ComEnterUnit ( driver , factory ) ;
21057: LD_VAR 0 6
21061: PPUSH
21062: LD_VAR 0 2
21066: PPUSH
21067: CALL_OW 120
// end else
21071: GO 21087
// AddComEnterUnit ( driver , factory ) ;
21073: LD_VAR 0 6
21077: PPUSH
21078: LD_VAR 0 2
21082: PPUSH
21083: CALL_OW 180
// wait ( 0 0$1 ) ;
21087: LD_INT 35
21089: PPUSH
21090: CALL_OW 67
// SetTag ( driver , tag ) ;
21094: LD_VAR 0 6
21098: PPUSH
21099: LD_VAR 0 5
21103: PPUSH
21104: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_INT 0
21115: PPUSH
21116: CALL_OW 109
// break ;
21120: GO 21243
// end ; end else
21122: GO 21241
// if GetControl ( vehicle ) = control_remote then
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 263
21133: PUSH
21134: LD_INT 2
21136: EQUAL
21137: IFFALSE 21200
// begin wait ( 0 0$2 ) ;
21139: LD_INT 70
21141: PPUSH
21142: CALL_OW 67
// if Connect ( vehicle ) then
21146: LD_VAR 0 1
21150: PPUSH
21151: CALL 34278 0 1
21155: IFFALSE 21196
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21157: LD_VAR 0 1
21161: PPUSH
21162: LD_EXP 82
21166: PUSH
21167: LD_VAR 0 4
21171: ARRAY
21172: PUSH
21173: LD_INT 3
21175: ARRAY
21176: PPUSH
21177: LD_EXP 82
21181: PUSH
21182: LD_VAR 0 4
21186: ARRAY
21187: PUSH
21188: LD_INT 4
21190: ARRAY
21191: PPUSH
21192: CALL_OW 171
// break ;
21196: GO 21243
// end else
21198: GO 21241
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21200: LD_VAR 0 1
21204: PPUSH
21205: LD_EXP 82
21209: PUSH
21210: LD_VAR 0 4
21214: ARRAY
21215: PUSH
21216: LD_INT 3
21218: ARRAY
21219: PPUSH
21220: LD_EXP 82
21224: PUSH
21225: LD_VAR 0 4
21229: ARRAY
21230: PUSH
21231: LD_INT 4
21233: ARRAY
21234: PPUSH
21235: CALL_OW 171
// break ;
21239: GO 21243
// end ; end ;
21241: GO 20775
21243: POP
21244: POP
// end ;
21245: LD_VAR 0 3
21249: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21250: LD_INT 0
21252: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21253: LD_VAR 0 1
21257: PUSH
21258: LD_INT 250
21260: EQUAL
21261: PUSH
21262: LD_VAR 0 2
21266: PPUSH
21267: CALL_OW 264
21271: PUSH
21272: LD_INT 81
21274: EQUAL
21275: AND
21276: IFFALSE 21297
// MinerPlaceMine ( unit , x , y ) ;
21278: LD_VAR 0 2
21282: PPUSH
21283: LD_VAR 0 4
21287: PPUSH
21288: LD_VAR 0 5
21292: PPUSH
21293: CALL 24389 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21297: LD_VAR 0 1
21301: PUSH
21302: LD_INT 251
21304: EQUAL
21305: PUSH
21306: LD_VAR 0 2
21310: PPUSH
21311: CALL_OW 264
21315: PUSH
21316: LD_INT 81
21318: EQUAL
21319: AND
21320: IFFALSE 21341
// MinerDetonateMine ( unit , x , y ) ;
21322: LD_VAR 0 2
21326: PPUSH
21327: LD_VAR 0 4
21331: PPUSH
21332: LD_VAR 0 5
21336: PPUSH
21337: CALL 24664 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21341: LD_VAR 0 1
21345: PUSH
21346: LD_INT 252
21348: EQUAL
21349: PUSH
21350: LD_VAR 0 2
21354: PPUSH
21355: CALL_OW 264
21359: PUSH
21360: LD_INT 81
21362: EQUAL
21363: AND
21364: IFFALSE 21385
// MinerCreateMinefield ( unit , x , y ) ;
21366: LD_VAR 0 2
21370: PPUSH
21371: LD_VAR 0 4
21375: PPUSH
21376: LD_VAR 0 5
21380: PPUSH
21381: CALL 25081 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21385: LD_VAR 0 1
21389: PUSH
21390: LD_INT 253
21392: EQUAL
21393: PUSH
21394: LD_VAR 0 2
21398: PPUSH
21399: CALL_OW 257
21403: PUSH
21404: LD_INT 5
21406: EQUAL
21407: AND
21408: IFFALSE 21429
// ComBinocular ( unit , x , y ) ;
21410: LD_VAR 0 2
21414: PPUSH
21415: LD_VAR 0 4
21419: PPUSH
21420: LD_VAR 0 5
21424: PPUSH
21425: CALL 25450 0 3
// if selectedUnit then
21429: LD_VAR 0 3
21433: IFFALSE 21489
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21435: LD_VAR 0 1
21439: PUSH
21440: LD_INT 254
21442: EQUAL
21443: PUSH
21444: LD_VAR 0 2
21448: PPUSH
21449: CALL_OW 264
21453: PUSH
21454: LD_INT 99
21456: EQUAL
21457: AND
21458: PUSH
21459: LD_VAR 0 3
21463: PPUSH
21464: CALL_OW 263
21468: PUSH
21469: LD_INT 3
21471: EQUAL
21472: AND
21473: IFFALSE 21489
// HackDestroyVehicle ( unit , selectedUnit ) ;
21475: LD_VAR 0 2
21479: PPUSH
21480: LD_VAR 0 3
21484: PPUSH
21485: CALL 23753 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21489: LD_VAR 0 1
21493: PUSH
21494: LD_INT 255
21496: EQUAL
21497: PUSH
21498: LD_VAR 0 2
21502: PPUSH
21503: CALL_OW 264
21507: PUSH
21508: LD_INT 14
21510: PUSH
21511: LD_INT 53
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: IN
21518: AND
21519: PUSH
21520: LD_VAR 0 4
21524: PPUSH
21525: LD_VAR 0 5
21529: PPUSH
21530: CALL_OW 488
21534: AND
21535: IFFALSE 21559
// CutTreeXYR ( unit , x , y , 12 ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: LD_VAR 0 5
21551: PPUSH
21552: LD_INT 12
21554: PPUSH
21555: CALL 21750 0 4
// if cmd = 256 then
21559: LD_VAR 0 1
21563: PUSH
21564: LD_INT 256
21566: EQUAL
21567: IFFALSE 21588
// SetFactoryWaypoint ( unit , x , y ) ;
21569: LD_VAR 0 2
21573: PPUSH
21574: LD_VAR 0 4
21578: PPUSH
21579: LD_VAR 0 5
21583: PPUSH
21584: CALL 19063 0 3
// if cmd = 257 then
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 257
21595: EQUAL
21596: IFFALSE 21617
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21598: LD_VAR 0 2
21602: PPUSH
21603: LD_VAR 0 4
21607: PPUSH
21608: LD_VAR 0 5
21612: PPUSH
21613: CALL 19553 0 3
// if cmd = 258 then
21617: LD_VAR 0 1
21621: PUSH
21622: LD_INT 258
21624: EQUAL
21625: IFFALSE 21649
// BurnTreeXYR ( unit , x , y , 8 ) ;
21627: LD_VAR 0 2
21631: PPUSH
21632: LD_VAR 0 4
21636: PPUSH
21637: LD_VAR 0 5
21641: PPUSH
21642: LD_INT 8
21644: PPUSH
21645: CALL 22144 0 4
// end ;
21649: LD_VAR 0 6
21653: RET
// export function ComRadiation ( un ) ; var eff ; begin
21654: LD_INT 0
21656: PPUSH
21657: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 264
21667: PUSH
21668: LD_INT 91
21670: NONEQUAL
21671: IFFALSE 21675
// exit ;
21673: GO 21745
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21675: LD_INT 68
21677: PPUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: CALL_OW 255
21687: PPUSH
21688: CALL_OW 321
21692: PUSH
21693: LD_INT 2
21695: EQUAL
21696: IFFALSE 21708
// eff := 70 else
21698: LD_ADDR_VAR 0 3
21702: PUSH
21703: LD_INT 70
21705: ST_TO_ADDR
21706: GO 21716
// eff := 30 ;
21708: LD_ADDR_VAR 0 3
21712: PUSH
21713: LD_INT 30
21715: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 250
21725: PPUSH
21726: LD_VAR 0 1
21730: PPUSH
21731: CALL_OW 251
21735: PPUSH
21736: LD_VAR 0 3
21740: PPUSH
21741: CALL_OW 495
// end ;
21745: LD_VAR 0 2
21749: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
21754: PPUSH
21755: PPUSH
21756: PPUSH
21757: PPUSH
21758: PPUSH
21759: PPUSH
21760: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 302
21770: NOT
21771: PUSH
21772: LD_VAR 0 2
21776: PPUSH
21777: LD_VAR 0 3
21781: PPUSH
21782: CALL_OW 488
21786: NOT
21787: OR
21788: PUSH
21789: LD_VAR 0 4
21793: NOT
21794: OR
21795: IFFALSE 21799
// exit ;
21797: GO 22139
// list := [ ] ;
21799: LD_ADDR_VAR 0 13
21803: PUSH
21804: EMPTY
21805: ST_TO_ADDR
// if x - r < 0 then
21806: LD_VAR 0 2
21810: PUSH
21811: LD_VAR 0 4
21815: MINUS
21816: PUSH
21817: LD_INT 0
21819: LESS
21820: IFFALSE 21832
// min_x := 0 else
21822: LD_ADDR_VAR 0 7
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
21830: GO 21848
// min_x := x - r ;
21832: LD_ADDR_VAR 0 7
21836: PUSH
21837: LD_VAR 0 2
21841: PUSH
21842: LD_VAR 0 4
21846: MINUS
21847: ST_TO_ADDR
// if y - r < 0 then
21848: LD_VAR 0 3
21852: PUSH
21853: LD_VAR 0 4
21857: MINUS
21858: PUSH
21859: LD_INT 0
21861: LESS
21862: IFFALSE 21874
// min_y := 0 else
21864: LD_ADDR_VAR 0 8
21868: PUSH
21869: LD_INT 0
21871: ST_TO_ADDR
21872: GO 21890
// min_y := y - r ;
21874: LD_ADDR_VAR 0 8
21878: PUSH
21879: LD_VAR 0 3
21883: PUSH
21884: LD_VAR 0 4
21888: MINUS
21889: ST_TO_ADDR
// max_x := x + r ;
21890: LD_ADDR_VAR 0 9
21894: PUSH
21895: LD_VAR 0 2
21899: PUSH
21900: LD_VAR 0 4
21904: PLUS
21905: ST_TO_ADDR
// max_y := y + r ;
21906: LD_ADDR_VAR 0 10
21910: PUSH
21911: LD_VAR 0 3
21915: PUSH
21916: LD_VAR 0 4
21920: PLUS
21921: ST_TO_ADDR
// for _x = min_x to max_x do
21922: LD_ADDR_VAR 0 11
21926: PUSH
21927: DOUBLE
21928: LD_VAR 0 7
21932: DEC
21933: ST_TO_ADDR
21934: LD_VAR 0 9
21938: PUSH
21939: FOR_TO
21940: IFFALSE 22057
// for _y = min_y to max_y do
21942: LD_ADDR_VAR 0 12
21946: PUSH
21947: DOUBLE
21948: LD_VAR 0 8
21952: DEC
21953: ST_TO_ADDR
21954: LD_VAR 0 10
21958: PUSH
21959: FOR_TO
21960: IFFALSE 22053
// begin if not ValidHex ( _x , _y ) then
21962: LD_VAR 0 11
21966: PPUSH
21967: LD_VAR 0 12
21971: PPUSH
21972: CALL_OW 488
21976: NOT
21977: IFFALSE 21981
// continue ;
21979: GO 21959
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21981: LD_VAR 0 11
21985: PPUSH
21986: LD_VAR 0 12
21990: PPUSH
21991: CALL_OW 351
21995: PUSH
21996: LD_VAR 0 11
22000: PPUSH
22001: LD_VAR 0 12
22005: PPUSH
22006: CALL_OW 554
22010: AND
22011: IFFALSE 22051
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22013: LD_ADDR_VAR 0 13
22017: PUSH
22018: LD_VAR 0 13
22022: PPUSH
22023: LD_VAR 0 13
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: PPUSH
22032: LD_VAR 0 11
22036: PUSH
22037: LD_VAR 0 12
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PPUSH
22046: CALL_OW 2
22050: ST_TO_ADDR
// end ;
22051: GO 21959
22053: POP
22054: POP
22055: GO 21939
22057: POP
22058: POP
// if not list then
22059: LD_VAR 0 13
22063: NOT
22064: IFFALSE 22068
// exit ;
22066: GO 22139
// for i in list do
22068: LD_ADDR_VAR 0 6
22072: PUSH
22073: LD_VAR 0 13
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22137
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22081: LD_VAR 0 1
22085: PPUSH
22086: LD_STRING M
22088: PUSH
22089: LD_VAR 0 6
22093: PUSH
22094: LD_INT 1
22096: ARRAY
22097: PUSH
22098: LD_VAR 0 6
22102: PUSH
22103: LD_INT 2
22105: ARRAY
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: LD_INT 0
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: PPUSH
22131: CALL_OW 447
22135: GO 22078
22137: POP
22138: POP
// end ;
22139: LD_VAR 0 5
22143: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22144: LD_INT 0
22146: PPUSH
22147: PPUSH
22148: PPUSH
22149: PPUSH
22150: PPUSH
22151: PPUSH
22152: PPUSH
22153: PPUSH
22154: PPUSH
22155: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22156: LD_VAR 0 1
22160: PPUSH
22161: CALL_OW 302
22165: NOT
22166: PUSH
22167: LD_VAR 0 2
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: CALL_OW 488
22181: NOT
22182: OR
22183: PUSH
22184: LD_VAR 0 4
22188: NOT
22189: OR
22190: IFFALSE 22194
// exit ;
22192: GO 22707
// list := [ ] ;
22194: LD_ADDR_VAR 0 13
22198: PUSH
22199: EMPTY
22200: ST_TO_ADDR
// if x - r < 0 then
22201: LD_VAR 0 2
22205: PUSH
22206: LD_VAR 0 4
22210: MINUS
22211: PUSH
22212: LD_INT 0
22214: LESS
22215: IFFALSE 22227
// min_x := 0 else
22217: LD_ADDR_VAR 0 7
22221: PUSH
22222: LD_INT 0
22224: ST_TO_ADDR
22225: GO 22243
// min_x := x - r ;
22227: LD_ADDR_VAR 0 7
22231: PUSH
22232: LD_VAR 0 2
22236: PUSH
22237: LD_VAR 0 4
22241: MINUS
22242: ST_TO_ADDR
// if y - r < 0 then
22243: LD_VAR 0 3
22247: PUSH
22248: LD_VAR 0 4
22252: MINUS
22253: PUSH
22254: LD_INT 0
22256: LESS
22257: IFFALSE 22269
// min_y := 0 else
22259: LD_ADDR_VAR 0 8
22263: PUSH
22264: LD_INT 0
22266: ST_TO_ADDR
22267: GO 22285
// min_y := y - r ;
22269: LD_ADDR_VAR 0 8
22273: PUSH
22274: LD_VAR 0 3
22278: PUSH
22279: LD_VAR 0 4
22283: MINUS
22284: ST_TO_ADDR
// max_x := x + r ;
22285: LD_ADDR_VAR 0 9
22289: PUSH
22290: LD_VAR 0 2
22294: PUSH
22295: LD_VAR 0 4
22299: PLUS
22300: ST_TO_ADDR
// max_y := y + r ;
22301: LD_ADDR_VAR 0 10
22305: PUSH
22306: LD_VAR 0 3
22310: PUSH
22311: LD_VAR 0 4
22315: PLUS
22316: ST_TO_ADDR
// for _x = min_x to max_x do
22317: LD_ADDR_VAR 0 11
22321: PUSH
22322: DOUBLE
22323: LD_VAR 0 7
22327: DEC
22328: ST_TO_ADDR
22329: LD_VAR 0 9
22333: PUSH
22334: FOR_TO
22335: IFFALSE 22452
// for _y = min_y to max_y do
22337: LD_ADDR_VAR 0 12
22341: PUSH
22342: DOUBLE
22343: LD_VAR 0 8
22347: DEC
22348: ST_TO_ADDR
22349: LD_VAR 0 10
22353: PUSH
22354: FOR_TO
22355: IFFALSE 22448
// begin if not ValidHex ( _x , _y ) then
22357: LD_VAR 0 11
22361: PPUSH
22362: LD_VAR 0 12
22366: PPUSH
22367: CALL_OW 488
22371: NOT
22372: IFFALSE 22376
// continue ;
22374: GO 22354
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22376: LD_VAR 0 11
22380: PPUSH
22381: LD_VAR 0 12
22385: PPUSH
22386: CALL_OW 351
22390: PUSH
22391: LD_VAR 0 11
22395: PPUSH
22396: LD_VAR 0 12
22400: PPUSH
22401: CALL_OW 554
22405: AND
22406: IFFALSE 22446
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22408: LD_ADDR_VAR 0 13
22412: PUSH
22413: LD_VAR 0 13
22417: PPUSH
22418: LD_VAR 0 13
22422: PUSH
22423: LD_INT 1
22425: PLUS
22426: PPUSH
22427: LD_VAR 0 11
22431: PUSH
22432: LD_VAR 0 12
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 2
22445: ST_TO_ADDR
// end ;
22446: GO 22354
22448: POP
22449: POP
22450: GO 22334
22452: POP
22453: POP
// if not list then
22454: LD_VAR 0 13
22458: NOT
22459: IFFALSE 22463
// exit ;
22461: GO 22707
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22463: LD_ADDR_VAR 0 13
22467: PUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: LD_VAR 0 13
22477: PPUSH
22478: LD_INT 1
22480: PPUSH
22481: LD_INT 1
22483: PPUSH
22484: CALL 31420 0 4
22488: ST_TO_ADDR
// ComStop ( flame ) ;
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 141
// for i in list do
22498: LD_ADDR_VAR 0 6
22502: PUSH
22503: LD_VAR 0 13
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22540
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22511: LD_VAR 0 1
22515: PPUSH
22516: LD_VAR 0 6
22520: PUSH
22521: LD_INT 1
22523: ARRAY
22524: PPUSH
22525: LD_VAR 0 6
22529: PUSH
22530: LD_INT 2
22532: ARRAY
22533: PPUSH
22534: CALL_OW 176
22538: GO 22508
22540: POP
22541: POP
// repeat wait ( 0 0$1 ) ;
22542: LD_INT 35
22544: PPUSH
22545: CALL_OW 67
// task := GetTaskList ( flame ) ;
22549: LD_ADDR_VAR 0 14
22553: PUSH
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 437
22563: ST_TO_ADDR
// if not task then
22564: LD_VAR 0 14
22568: NOT
22569: IFFALSE 22573
// exit ;
22571: GO 22707
// if task [ 1 ] [ 1 ] <> | then
22573: LD_VAR 0 14
22577: PUSH
22578: LD_INT 1
22580: ARRAY
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_STRING |
22588: NONEQUAL
22589: IFFALSE 22593
// exit ;
22591: GO 22707
// _x := task [ 1 ] [ 2 ] ;
22593: LD_ADDR_VAR 0 11
22597: PUSH
22598: LD_VAR 0 14
22602: PUSH
22603: LD_INT 1
22605: ARRAY
22606: PUSH
22607: LD_INT 2
22609: ARRAY
22610: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22611: LD_ADDR_VAR 0 12
22615: PUSH
22616: LD_VAR 0 14
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PUSH
22625: LD_INT 3
22627: ARRAY
22628: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22629: LD_VAR 0 11
22633: PPUSH
22634: LD_VAR 0 12
22638: PPUSH
22639: CALL_OW 351
22643: NOT
22644: PUSH
22645: LD_VAR 0 11
22649: PPUSH
22650: LD_VAR 0 12
22654: PPUSH
22655: CALL_OW 554
22659: NOT
22660: OR
22661: IFFALSE 22695
// begin task := Delete ( task , 1 ) ;
22663: LD_ADDR_VAR 0 14
22667: PUSH
22668: LD_VAR 0 14
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 3
22680: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22681: LD_VAR 0 1
22685: PPUSH
22686: LD_VAR 0 14
22690: PPUSH
22691: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 314
22704: NOT
22705: IFFALSE 22542
// end ;
22707: LD_VAR 0 5
22711: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22712: LD_EXP 85
22716: NOT
22717: IFFALSE 22767
22719: GO 22721
22721: DISABLE
// begin initHack := true ;
22722: LD_ADDR_EXP 85
22726: PUSH
22727: LD_INT 1
22729: ST_TO_ADDR
// hackTanks := [ ] ;
22730: LD_ADDR_EXP 86
22734: PUSH
22735: EMPTY
22736: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22737: LD_ADDR_EXP 87
22741: PUSH
22742: EMPTY
22743: ST_TO_ADDR
// hackLimit := 3 ;
22744: LD_ADDR_EXP 88
22748: PUSH
22749: LD_INT 3
22751: ST_TO_ADDR
// hackDist := 12 ;
22752: LD_ADDR_EXP 89
22756: PUSH
22757: LD_INT 12
22759: ST_TO_ADDR
// hackCounter := [ ] ;
22760: LD_ADDR_EXP 90
22764: PUSH
22765: EMPTY
22766: ST_TO_ADDR
// end ;
22767: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22768: LD_EXP 85
22772: PUSH
22773: LD_INT 34
22775: PUSH
22776: LD_INT 99
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 69
22787: AND
22788: IFFALSE 23041
22790: GO 22792
22792: DISABLE
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
// begin enable ;
22797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22798: LD_ADDR_VAR 0 1
22802: PUSH
22803: LD_INT 34
22805: PUSH
22806: LD_INT 99
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PPUSH
22813: CALL_OW 69
22817: PUSH
22818: FOR_IN
22819: IFFALSE 23039
// begin if not i in hackTanks then
22821: LD_VAR 0 1
22825: PUSH
22826: LD_EXP 86
22830: IN
22831: NOT
22832: IFFALSE 22915
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22834: LD_ADDR_EXP 86
22838: PUSH
22839: LD_EXP 86
22843: PPUSH
22844: LD_EXP 86
22848: PUSH
22849: LD_INT 1
22851: PLUS
22852: PPUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 1
22862: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22863: LD_ADDR_EXP 87
22867: PUSH
22868: LD_EXP 87
22872: PPUSH
22873: LD_EXP 87
22877: PUSH
22878: LD_INT 1
22880: PLUS
22881: PPUSH
22882: EMPTY
22883: PPUSH
22884: CALL_OW 1
22888: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22889: LD_ADDR_EXP 90
22893: PUSH
22894: LD_EXP 90
22898: PPUSH
22899: LD_EXP 90
22903: PUSH
22904: LD_INT 1
22906: PLUS
22907: PPUSH
22908: EMPTY
22909: PPUSH
22910: CALL_OW 1
22914: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 302
22924: NOT
22925: IFFALSE 22938
// begin HackUnlinkAll ( i ) ;
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL 23044 0 1
// continue ;
22936: GO 22818
// end ; HackCheckCapturedStatus ( i ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL 23487 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22947: LD_ADDR_VAR 0 2
22951: PUSH
22952: LD_INT 81
22954: PUSH
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL_OW 255
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 33
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 91
22981: PUSH
22982: LD_VAR 0 1
22986: PUSH
22987: LD_EXP 89
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 50
22999: PUSH
23000: EMPTY
23001: LIST
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: PPUSH
23009: CALL_OW 69
23013: ST_TO_ADDR
// if not tmp then
23014: LD_VAR 0 2
23018: NOT
23019: IFFALSE 23023
// continue ;
23021: GO 22818
// HackLink ( i , tmp ) ;
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: CALL 23180 0 2
// end ;
23037: GO 22818
23039: POP
23040: POP
// end ;
23041: PPOPN 2
23043: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
// if not hack in hackTanks then
23049: LD_VAR 0 1
23053: PUSH
23054: LD_EXP 86
23058: IN
23059: NOT
23060: IFFALSE 23064
// exit ;
23062: GO 23175
// index := GetElementIndex ( hackTanks , hack ) ;
23064: LD_ADDR_VAR 0 4
23068: PUSH
23069: LD_EXP 86
23073: PPUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL 30717 0 2
23083: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23084: LD_EXP 87
23088: PUSH
23089: LD_VAR 0 4
23093: ARRAY
23094: IFFALSE 23175
// begin for i in hackTanksCaptured [ index ] do
23096: LD_ADDR_VAR 0 3
23100: PUSH
23101: LD_EXP 87
23105: PUSH
23106: LD_VAR 0 4
23110: ARRAY
23111: PUSH
23112: FOR_IN
23113: IFFALSE 23139
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23115: LD_VAR 0 3
23119: PUSH
23120: LD_INT 1
23122: ARRAY
23123: PPUSH
23124: LD_VAR 0 3
23128: PUSH
23129: LD_INT 2
23131: ARRAY
23132: PPUSH
23133: CALL_OW 235
23137: GO 23112
23139: POP
23140: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23141: LD_ADDR_EXP 87
23145: PUSH
23146: LD_EXP 87
23150: PPUSH
23151: LD_VAR 0 4
23155: PPUSH
23156: EMPTY
23157: PPUSH
23158: CALL_OW 1
23162: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_INT 0
23170: PPUSH
23171: CALL_OW 505
// end ; end ;
23175: LD_VAR 0 2
23179: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23180: LD_INT 0
23182: PPUSH
23183: PPUSH
23184: PPUSH
// if not hack in hackTanks or not vehicles then
23185: LD_VAR 0 1
23189: PUSH
23190: LD_EXP 86
23194: IN
23195: NOT
23196: PUSH
23197: LD_VAR 0 2
23201: NOT
23202: OR
23203: IFFALSE 23207
// exit ;
23205: GO 23482
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23207: LD_ADDR_VAR 0 2
23211: PUSH
23212: LD_VAR 0 1
23216: PPUSH
23217: LD_VAR 0 2
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: LD_INT 1
23227: PPUSH
23228: CALL 31367 0 4
23232: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23233: LD_ADDR_VAR 0 5
23237: PUSH
23238: LD_EXP 86
23242: PPUSH
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL 30717 0 2
23252: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23253: LD_EXP 87
23257: PUSH
23258: LD_VAR 0 5
23262: ARRAY
23263: PUSH
23264: LD_EXP 88
23268: LESS
23269: IFFALSE 23458
// begin for i := 1 to vehicles do
23271: LD_ADDR_VAR 0 4
23275: PUSH
23276: DOUBLE
23277: LD_INT 1
23279: DEC
23280: ST_TO_ADDR
23281: LD_VAR 0 2
23285: PUSH
23286: FOR_TO
23287: IFFALSE 23456
// begin if hackTanksCaptured [ index ] = hackLimit then
23289: LD_EXP 87
23293: PUSH
23294: LD_VAR 0 5
23298: ARRAY
23299: PUSH
23300: LD_EXP 88
23304: EQUAL
23305: IFFALSE 23309
// break ;
23307: GO 23456
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23309: LD_ADDR_EXP 90
23313: PUSH
23314: LD_EXP 90
23318: PPUSH
23319: LD_VAR 0 5
23323: PPUSH
23324: LD_EXP 90
23328: PUSH
23329: LD_VAR 0 5
23333: ARRAY
23334: PUSH
23335: LD_INT 1
23337: PLUS
23338: PPUSH
23339: CALL_OW 1
23343: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23344: LD_ADDR_EXP 87
23348: PUSH
23349: LD_EXP 87
23353: PPUSH
23354: LD_VAR 0 5
23358: PUSH
23359: LD_EXP 87
23363: PUSH
23364: LD_VAR 0 5
23368: ARRAY
23369: PUSH
23370: LD_INT 1
23372: PLUS
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PPUSH
23378: LD_VAR 0 2
23382: PUSH
23383: LD_VAR 0 4
23387: ARRAY
23388: PUSH
23389: LD_VAR 0 2
23393: PUSH
23394: LD_VAR 0 4
23398: ARRAY
23399: PPUSH
23400: CALL_OW 255
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PPUSH
23409: CALL 30932 0 3
23413: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23414: LD_VAR 0 2
23418: PUSH
23419: LD_VAR 0 4
23423: ARRAY
23424: PPUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 255
23434: PPUSH
23435: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23439: LD_VAR 0 2
23443: PUSH
23444: LD_VAR 0 4
23448: ARRAY
23449: PPUSH
23450: CALL_OW 141
// end ;
23454: GO 23286
23456: POP
23457: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23458: LD_VAR 0 1
23462: PPUSH
23463: LD_EXP 87
23467: PUSH
23468: LD_VAR 0 5
23472: ARRAY
23473: PUSH
23474: LD_INT 0
23476: PLUS
23477: PPUSH
23478: CALL_OW 505
// end ;
23482: LD_VAR 0 3
23486: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23487: LD_INT 0
23489: PPUSH
23490: PPUSH
23491: PPUSH
23492: PPUSH
// if not hack in hackTanks then
23493: LD_VAR 0 1
23497: PUSH
23498: LD_EXP 86
23502: IN
23503: NOT
23504: IFFALSE 23508
// exit ;
23506: GO 23748
// index := GetElementIndex ( hackTanks , hack ) ;
23508: LD_ADDR_VAR 0 4
23512: PUSH
23513: LD_EXP 86
23517: PPUSH
23518: LD_VAR 0 1
23522: PPUSH
23523: CALL 30717 0 2
23527: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23528: LD_ADDR_VAR 0 3
23532: PUSH
23533: DOUBLE
23534: LD_EXP 87
23538: PUSH
23539: LD_VAR 0 4
23543: ARRAY
23544: INC
23545: ST_TO_ADDR
23546: LD_INT 1
23548: PUSH
23549: FOR_DOWNTO
23550: IFFALSE 23722
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23552: LD_ADDR_VAR 0 5
23556: PUSH
23557: LD_EXP 87
23561: PUSH
23562: LD_VAR 0 4
23566: ARRAY
23567: PUSH
23568: LD_VAR 0 3
23572: ARRAY
23573: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23574: LD_VAR 0 5
23578: PUSH
23579: LD_INT 1
23581: ARRAY
23582: PPUSH
23583: CALL_OW 302
23587: NOT
23588: PUSH
23589: LD_VAR 0 5
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: CALL_OW 255
23602: PUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL_OW 255
23612: NONEQUAL
23613: OR
23614: IFFALSE 23720
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23616: LD_VAR 0 5
23620: PUSH
23621: LD_INT 1
23623: ARRAY
23624: PPUSH
23625: CALL_OW 305
23629: PUSH
23630: LD_VAR 0 5
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PPUSH
23639: CALL_OW 255
23643: PUSH
23644: LD_VAR 0 1
23648: PPUSH
23649: CALL_OW 255
23653: EQUAL
23654: AND
23655: IFFALSE 23679
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23657: LD_VAR 0 5
23661: PUSH
23662: LD_INT 1
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 5
23670: PUSH
23671: LD_INT 2
23673: ARRAY
23674: PPUSH
23675: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23679: LD_ADDR_EXP 87
23683: PUSH
23684: LD_EXP 87
23688: PPUSH
23689: LD_VAR 0 4
23693: PPUSH
23694: LD_EXP 87
23698: PUSH
23699: LD_VAR 0 4
23703: ARRAY
23704: PPUSH
23705: LD_VAR 0 3
23709: PPUSH
23710: CALL_OW 3
23714: PPUSH
23715: CALL_OW 1
23719: ST_TO_ADDR
// end ; end ;
23720: GO 23549
23722: POP
23723: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23724: LD_VAR 0 1
23728: PPUSH
23729: LD_EXP 87
23733: PUSH
23734: LD_VAR 0 4
23738: ARRAY
23739: PUSH
23740: LD_INT 0
23742: PLUS
23743: PPUSH
23744: CALL_OW 505
// end ;
23748: LD_VAR 0 2
23752: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23753: LD_INT 0
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
// if not hack in hackTanks then
23759: LD_VAR 0 1
23763: PUSH
23764: LD_EXP 86
23768: IN
23769: NOT
23770: IFFALSE 23774
// exit ;
23772: GO 23859
// index := GetElementIndex ( hackTanks , hack ) ;
23774: LD_ADDR_VAR 0 5
23778: PUSH
23779: LD_EXP 86
23783: PPUSH
23784: LD_VAR 0 1
23788: PPUSH
23789: CALL 30717 0 2
23793: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23794: LD_ADDR_VAR 0 4
23798: PUSH
23799: DOUBLE
23800: LD_INT 1
23802: DEC
23803: ST_TO_ADDR
23804: LD_EXP 87
23808: PUSH
23809: LD_VAR 0 5
23813: ARRAY
23814: PUSH
23815: FOR_TO
23816: IFFALSE 23857
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23818: LD_EXP 87
23822: PUSH
23823: LD_VAR 0 5
23827: ARRAY
23828: PUSH
23829: LD_VAR 0 4
23833: ARRAY
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_VAR 0 2
23843: EQUAL
23844: IFFALSE 23855
// KillUnit ( vehicle ) ;
23846: LD_VAR 0 2
23850: PPUSH
23851: CALL_OW 66
23855: GO 23815
23857: POP
23858: POP
// end ;
23859: LD_VAR 0 3
23863: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23864: LD_EXP 91
23868: NOT
23869: IFFALSE 23904
23871: GO 23873
23873: DISABLE
// begin initMiner := true ;
23874: LD_ADDR_EXP 91
23878: PUSH
23879: LD_INT 1
23881: ST_TO_ADDR
// minersList := [ ] ;
23882: LD_ADDR_EXP 92
23886: PUSH
23887: EMPTY
23888: ST_TO_ADDR
// minerMinesList := [ ] ;
23889: LD_ADDR_EXP 93
23893: PUSH
23894: EMPTY
23895: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23896: LD_ADDR_EXP 94
23900: PUSH
23901: LD_INT 5
23903: ST_TO_ADDR
// end ;
23904: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23905: LD_EXP 91
23909: PUSH
23910: LD_INT 34
23912: PUSH
23913: LD_INT 81
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PPUSH
23920: CALL_OW 69
23924: AND
23925: IFFALSE 24386
23927: GO 23929
23929: DISABLE
23930: LD_INT 0
23932: PPUSH
23933: PPUSH
23934: PPUSH
23935: PPUSH
// begin enable ;
23936: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23937: LD_ADDR_VAR 0 1
23941: PUSH
23942: LD_INT 34
23944: PUSH
23945: LD_INT 81
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PPUSH
23952: CALL_OW 69
23956: PUSH
23957: FOR_IN
23958: IFFALSE 24030
// begin if not i in minersList then
23960: LD_VAR 0 1
23964: PUSH
23965: LD_EXP 92
23969: IN
23970: NOT
23971: IFFALSE 24028
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23973: LD_ADDR_EXP 92
23977: PUSH
23978: LD_EXP 92
23982: PPUSH
23983: LD_EXP 92
23987: PUSH
23988: LD_INT 1
23990: PLUS
23991: PPUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 1
24001: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24002: LD_ADDR_EXP 93
24006: PUSH
24007: LD_EXP 93
24011: PPUSH
24012: LD_EXP 93
24016: PUSH
24017: LD_INT 1
24019: PLUS
24020: PPUSH
24021: EMPTY
24022: PPUSH
24023: CALL_OW 1
24027: ST_TO_ADDR
// end end ;
24028: GO 23957
24030: POP
24031: POP
// for i := minerMinesList downto 1 do
24032: LD_ADDR_VAR 0 1
24036: PUSH
24037: DOUBLE
24038: LD_EXP 93
24042: INC
24043: ST_TO_ADDR
24044: LD_INT 1
24046: PUSH
24047: FOR_DOWNTO
24048: IFFALSE 24384
// begin if IsLive ( minersList [ i ] ) then
24050: LD_EXP 92
24054: PUSH
24055: LD_VAR 0 1
24059: ARRAY
24060: PPUSH
24061: CALL_OW 300
24065: IFFALSE 24093
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24067: LD_EXP 92
24071: PUSH
24072: LD_VAR 0 1
24076: ARRAY
24077: PPUSH
24078: LD_EXP 93
24082: PUSH
24083: LD_VAR 0 1
24087: ARRAY
24088: PPUSH
24089: CALL_OW 505
// if not minerMinesList [ i ] then
24093: LD_EXP 93
24097: PUSH
24098: LD_VAR 0 1
24102: ARRAY
24103: NOT
24104: IFFALSE 24108
// continue ;
24106: GO 24047
// for j := minerMinesList [ i ] downto 1 do
24108: LD_ADDR_VAR 0 2
24112: PUSH
24113: DOUBLE
24114: LD_EXP 93
24118: PUSH
24119: LD_VAR 0 1
24123: ARRAY
24124: INC
24125: ST_TO_ADDR
24126: LD_INT 1
24128: PUSH
24129: FOR_DOWNTO
24130: IFFALSE 24380
// begin side := GetSide ( minersList [ i ] ) ;
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_EXP 92
24141: PUSH
24142: LD_VAR 0 1
24146: ARRAY
24147: PPUSH
24148: CALL_OW 255
24152: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 93
24162: PUSH
24163: LD_VAR 0 1
24167: ARRAY
24168: PUSH
24169: LD_VAR 0 2
24173: ARRAY
24174: PUSH
24175: LD_INT 1
24177: ARRAY
24178: PPUSH
24179: LD_EXP 93
24183: PUSH
24184: LD_VAR 0 1
24188: ARRAY
24189: PUSH
24190: LD_VAR 0 2
24194: ARRAY
24195: PUSH
24196: LD_INT 2
24198: ARRAY
24199: PPUSH
24200: CALL_OW 428
24204: ST_TO_ADDR
// if not tmp then
24205: LD_VAR 0 4
24209: NOT
24210: IFFALSE 24214
// continue ;
24212: GO 24129
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24214: LD_VAR 0 4
24218: PUSH
24219: LD_INT 81
24221: PUSH
24222: LD_VAR 0 3
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PPUSH
24231: CALL_OW 69
24235: IN
24236: PUSH
24237: LD_EXP 93
24241: PUSH
24242: LD_VAR 0 1
24246: ARRAY
24247: PUSH
24248: LD_VAR 0 2
24252: ARRAY
24253: PUSH
24254: LD_INT 1
24256: ARRAY
24257: PPUSH
24258: LD_EXP 93
24262: PUSH
24263: LD_VAR 0 1
24267: ARRAY
24268: PUSH
24269: LD_VAR 0 2
24273: ARRAY
24274: PUSH
24275: LD_INT 2
24277: ARRAY
24278: PPUSH
24279: CALL_OW 458
24283: AND
24284: IFFALSE 24378
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24286: LD_EXP 93
24290: PUSH
24291: LD_VAR 0 1
24295: ARRAY
24296: PUSH
24297: LD_VAR 0 2
24301: ARRAY
24302: PUSH
24303: LD_INT 1
24305: ARRAY
24306: PPUSH
24307: LD_EXP 93
24311: PUSH
24312: LD_VAR 0 1
24316: ARRAY
24317: PUSH
24318: LD_VAR 0 2
24322: ARRAY
24323: PUSH
24324: LD_INT 2
24326: ARRAY
24327: PPUSH
24328: LD_VAR 0 3
24332: PPUSH
24333: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24337: LD_ADDR_EXP 93
24341: PUSH
24342: LD_EXP 93
24346: PPUSH
24347: LD_VAR 0 1
24351: PPUSH
24352: LD_EXP 93
24356: PUSH
24357: LD_VAR 0 1
24361: ARRAY
24362: PPUSH
24363: LD_VAR 0 2
24367: PPUSH
24368: CALL_OW 3
24372: PPUSH
24373: CALL_OW 1
24377: ST_TO_ADDR
// end ; end ;
24378: GO 24129
24380: POP
24381: POP
// end ;
24382: GO 24047
24384: POP
24385: POP
// end ;
24386: PPOPN 4
24388: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24389: LD_INT 0
24391: PPUSH
24392: PPUSH
// result := false ;
24393: LD_ADDR_VAR 0 4
24397: PUSH
24398: LD_INT 0
24400: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 264
24410: PUSH
24411: LD_INT 81
24413: EQUAL
24414: NOT
24415: IFFALSE 24419
// exit ;
24417: GO 24659
// index := GetElementIndex ( minersList , unit ) ;
24419: LD_ADDR_VAR 0 5
24423: PUSH
24424: LD_EXP 92
24428: PPUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL 30717 0 2
24438: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24439: LD_EXP 93
24443: PUSH
24444: LD_VAR 0 5
24448: ARRAY
24449: PUSH
24450: LD_EXP 94
24454: GREATEREQUAL
24455: IFFALSE 24459
// exit ;
24457: GO 24659
// ComMoveXY ( unit , x , y ) ;
24459: LD_VAR 0 1
24463: PPUSH
24464: LD_VAR 0 2
24468: PPUSH
24469: LD_VAR 0 3
24473: PPUSH
24474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24478: LD_INT 35
24480: PPUSH
24481: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24485: LD_VAR 0 1
24489: PPUSH
24490: LD_VAR 0 2
24494: PPUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: CALL 62478 0 3
24504: NOT
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 314
24515: AND
24516: IFFALSE 24520
// exit ;
24518: GO 24659
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24520: LD_VAR 0 2
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: CALL_OW 428
24534: PUSH
24535: LD_VAR 0 1
24539: EQUAL
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 314
24550: NOT
24551: AND
24552: IFFALSE 24478
// PlaySoundXY ( x , y , PlantMine ) ;
24554: LD_VAR 0 2
24558: PPUSH
24559: LD_VAR 0 3
24563: PPUSH
24564: LD_STRING PlantMine
24566: PPUSH
24567: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24571: LD_VAR 0 2
24575: PPUSH
24576: LD_VAR 0 3
24580: PPUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL_OW 255
24590: PPUSH
24591: LD_INT 0
24593: PPUSH
24594: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24598: LD_ADDR_EXP 93
24602: PUSH
24603: LD_EXP 93
24607: PPUSH
24608: LD_VAR 0 5
24612: PUSH
24613: LD_EXP 93
24617: PUSH
24618: LD_VAR 0 5
24622: ARRAY
24623: PUSH
24624: LD_INT 1
24626: PLUS
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PPUSH
24632: LD_VAR 0 2
24636: PUSH
24637: LD_VAR 0 3
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL 30932 0 3
24650: ST_TO_ADDR
// result := true ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_INT 1
24658: ST_TO_ADDR
// end ;
24659: LD_VAR 0 4
24663: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24664: LD_INT 0
24666: PPUSH
24667: PPUSH
24668: PPUSH
// if not unit in minersList then
24669: LD_VAR 0 1
24673: PUSH
24674: LD_EXP 92
24678: IN
24679: NOT
24680: IFFALSE 24684
// exit ;
24682: GO 25076
// index := GetElementIndex ( minersList , unit ) ;
24684: LD_ADDR_VAR 0 6
24688: PUSH
24689: LD_EXP 92
24693: PPUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL 30717 0 2
24703: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24704: LD_ADDR_VAR 0 5
24708: PUSH
24709: DOUBLE
24710: LD_EXP 93
24714: PUSH
24715: LD_VAR 0 6
24719: ARRAY
24720: INC
24721: ST_TO_ADDR
24722: LD_INT 1
24724: PUSH
24725: FOR_DOWNTO
24726: IFFALSE 24887
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24728: LD_EXP 93
24732: PUSH
24733: LD_VAR 0 6
24737: ARRAY
24738: PUSH
24739: LD_VAR 0 5
24743: ARRAY
24744: PUSH
24745: LD_INT 1
24747: ARRAY
24748: PUSH
24749: LD_VAR 0 2
24753: EQUAL
24754: PUSH
24755: LD_EXP 93
24759: PUSH
24760: LD_VAR 0 6
24764: ARRAY
24765: PUSH
24766: LD_VAR 0 5
24770: ARRAY
24771: PUSH
24772: LD_INT 2
24774: ARRAY
24775: PUSH
24776: LD_VAR 0 3
24780: EQUAL
24781: AND
24782: IFFALSE 24885
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24784: LD_EXP 93
24788: PUSH
24789: LD_VAR 0 6
24793: ARRAY
24794: PUSH
24795: LD_VAR 0 5
24799: ARRAY
24800: PUSH
24801: LD_INT 1
24803: ARRAY
24804: PPUSH
24805: LD_EXP 93
24809: PUSH
24810: LD_VAR 0 6
24814: ARRAY
24815: PUSH
24816: LD_VAR 0 5
24820: ARRAY
24821: PUSH
24822: LD_INT 2
24824: ARRAY
24825: PPUSH
24826: LD_VAR 0 1
24830: PPUSH
24831: CALL_OW 255
24835: PPUSH
24836: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24840: LD_ADDR_EXP 93
24844: PUSH
24845: LD_EXP 93
24849: PPUSH
24850: LD_VAR 0 6
24854: PPUSH
24855: LD_EXP 93
24859: PUSH
24860: LD_VAR 0 6
24864: ARRAY
24865: PPUSH
24866: LD_VAR 0 5
24870: PPUSH
24871: CALL_OW 3
24875: PPUSH
24876: CALL_OW 1
24880: ST_TO_ADDR
// exit ;
24881: POP
24882: POP
24883: GO 25076
// end ; end ;
24885: GO 24725
24887: POP
24888: POP
// for i := minerMinesList [ index ] downto 1 do
24889: LD_ADDR_VAR 0 5
24893: PUSH
24894: DOUBLE
24895: LD_EXP 93
24899: PUSH
24900: LD_VAR 0 6
24904: ARRAY
24905: INC
24906: ST_TO_ADDR
24907: LD_INT 1
24909: PUSH
24910: FOR_DOWNTO
24911: IFFALSE 25074
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24913: LD_EXP 93
24917: PUSH
24918: LD_VAR 0 6
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_INT 1
24932: ARRAY
24933: PPUSH
24934: LD_EXP 93
24938: PUSH
24939: LD_VAR 0 6
24943: ARRAY
24944: PUSH
24945: LD_VAR 0 5
24949: ARRAY
24950: PUSH
24951: LD_INT 2
24953: ARRAY
24954: PPUSH
24955: LD_VAR 0 2
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 298
24969: PUSH
24970: LD_INT 6
24972: LESS
24973: IFFALSE 25072
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24975: LD_EXP 93
24979: PUSH
24980: LD_VAR 0 6
24984: ARRAY
24985: PUSH
24986: LD_VAR 0 5
24990: ARRAY
24991: PUSH
24992: LD_INT 1
24994: ARRAY
24995: PPUSH
24996: LD_EXP 93
25000: PUSH
25001: LD_VAR 0 6
25005: ARRAY
25006: PUSH
25007: LD_VAR 0 5
25011: ARRAY
25012: PUSH
25013: LD_INT 2
25015: ARRAY
25016: PPUSH
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL_OW 255
25026: PPUSH
25027: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25031: LD_ADDR_EXP 93
25035: PUSH
25036: LD_EXP 93
25040: PPUSH
25041: LD_VAR 0 6
25045: PPUSH
25046: LD_EXP 93
25050: PUSH
25051: LD_VAR 0 6
25055: ARRAY
25056: PPUSH
25057: LD_VAR 0 5
25061: PPUSH
25062: CALL_OW 3
25066: PPUSH
25067: CALL_OW 1
25071: ST_TO_ADDR
// end ; end ;
25072: GO 24910
25074: POP
25075: POP
// end ;
25076: LD_VAR 0 4
25080: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25092: LD_VAR 0 1
25096: PPUSH
25097: CALL_OW 264
25101: PUSH
25102: LD_INT 81
25104: EQUAL
25105: NOT
25106: PUSH
25107: LD_VAR 0 1
25111: PUSH
25112: LD_EXP 92
25116: IN
25117: NOT
25118: OR
25119: IFFALSE 25123
// exit ;
25121: GO 25445
// index := GetElementIndex ( minersList , unit ) ;
25123: LD_ADDR_VAR 0 6
25127: PUSH
25128: LD_EXP 92
25132: PPUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL 30717 0 2
25142: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25143: LD_ADDR_VAR 0 8
25147: PUSH
25148: LD_EXP 94
25152: PUSH
25153: LD_EXP 93
25157: PUSH
25158: LD_VAR 0 6
25162: ARRAY
25163: MINUS
25164: ST_TO_ADDR
// if not minesFreeAmount then
25165: LD_VAR 0 8
25169: NOT
25170: IFFALSE 25174
// exit ;
25172: GO 25445
// tmp := [ ] ;
25174: LD_ADDR_VAR 0 7
25178: PUSH
25179: EMPTY
25180: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25181: LD_ADDR_VAR 0 5
25185: PUSH
25186: DOUBLE
25187: LD_INT 1
25189: DEC
25190: ST_TO_ADDR
25191: LD_VAR 0 8
25195: PUSH
25196: FOR_TO
25197: IFFALSE 25392
// begin _d := rand ( 0 , 5 ) ;
25199: LD_ADDR_VAR 0 11
25203: PUSH
25204: LD_INT 0
25206: PPUSH
25207: LD_INT 5
25209: PPUSH
25210: CALL_OW 12
25214: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25215: LD_ADDR_VAR 0 12
25219: PUSH
25220: LD_INT 2
25222: PPUSH
25223: LD_INT 6
25225: PPUSH
25226: CALL_OW 12
25230: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25231: LD_ADDR_VAR 0 9
25235: PUSH
25236: LD_VAR 0 2
25240: PPUSH
25241: LD_VAR 0 11
25245: PPUSH
25246: LD_VAR 0 12
25250: PPUSH
25251: CALL_OW 272
25255: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25256: LD_ADDR_VAR 0 10
25260: PUSH
25261: LD_VAR 0 3
25265: PPUSH
25266: LD_VAR 0 11
25270: PPUSH
25271: LD_VAR 0 12
25275: PPUSH
25276: CALL_OW 273
25280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25281: LD_VAR 0 9
25285: PPUSH
25286: LD_VAR 0 10
25290: PPUSH
25291: CALL_OW 488
25295: PUSH
25296: LD_VAR 0 9
25300: PUSH
25301: LD_VAR 0 10
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_VAR 0 7
25314: IN
25315: NOT
25316: AND
25317: PUSH
25318: LD_VAR 0 9
25322: PPUSH
25323: LD_VAR 0 10
25327: PPUSH
25328: CALL_OW 458
25332: NOT
25333: AND
25334: IFFALSE 25376
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25336: LD_ADDR_VAR 0 7
25340: PUSH
25341: LD_VAR 0 7
25345: PPUSH
25346: LD_VAR 0 7
25350: PUSH
25351: LD_INT 1
25353: PLUS
25354: PPUSH
25355: LD_VAR 0 9
25359: PUSH
25360: LD_VAR 0 10
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PPUSH
25369: CALL_OW 1
25373: ST_TO_ADDR
25374: GO 25390
// i := i - 1 ;
25376: LD_ADDR_VAR 0 5
25380: PUSH
25381: LD_VAR 0 5
25385: PUSH
25386: LD_INT 1
25388: MINUS
25389: ST_TO_ADDR
// end ;
25390: GO 25196
25392: POP
25393: POP
// for i in tmp do
25394: LD_ADDR_VAR 0 5
25398: PUSH
25399: LD_VAR 0 7
25403: PUSH
25404: FOR_IN
25405: IFFALSE 25443
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25407: LD_VAR 0 1
25411: PPUSH
25412: LD_VAR 0 5
25416: PUSH
25417: LD_INT 1
25419: ARRAY
25420: PPUSH
25421: LD_VAR 0 5
25425: PUSH
25426: LD_INT 2
25428: ARRAY
25429: PPUSH
25430: CALL 24389 0 3
25434: NOT
25435: IFFALSE 25441
// exit ;
25437: POP
25438: POP
25439: GO 25445
25441: GO 25404
25443: POP
25444: POP
// end ;
25445: LD_VAR 0 4
25449: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25450: LD_INT 0
25452: PPUSH
25453: PPUSH
25454: PPUSH
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
25459: PPUSH
25460: PPUSH
// if GetClass ( unit ) <> class_sniper then
25461: LD_VAR 0 1
25465: PPUSH
25466: CALL_OW 257
25470: PUSH
25471: LD_INT 5
25473: NONEQUAL
25474: IFFALSE 25478
// exit ;
25476: GO 25944
// dist := 8 ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_INT 8
25485: ST_TO_ADDR
// viewRange := 12 ;
25486: LD_ADDR_VAR 0 8
25490: PUSH
25491: LD_INT 12
25493: ST_TO_ADDR
// side := GetSide ( unit ) ;
25494: LD_ADDR_VAR 0 6
25498: PUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL_OW 255
25508: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25509: LD_INT 61
25511: PPUSH
25512: LD_VAR 0 6
25516: PPUSH
25517: CALL_OW 321
25521: PUSH
25522: LD_INT 2
25524: EQUAL
25525: IFFALSE 25535
// viewRange := 16 ;
25527: LD_ADDR_VAR 0 8
25531: PUSH
25532: LD_INT 16
25534: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25535: LD_VAR 0 1
25539: PPUSH
25540: LD_VAR 0 2
25544: PPUSH
25545: LD_VAR 0 3
25549: PPUSH
25550: CALL_OW 297
25554: PUSH
25555: LD_VAR 0 5
25559: GREATER
25560: IFFALSE 25639
// begin ComMoveXY ( unit , x , y ) ;
25562: LD_VAR 0 1
25566: PPUSH
25567: LD_VAR 0 2
25571: PPUSH
25572: LD_VAR 0 3
25576: PPUSH
25577: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25581: LD_INT 35
25583: PPUSH
25584: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: CALL 62478 0 3
25607: NOT
25608: IFFALSE 25612
// exit ;
25610: GO 25944
// until GetDistUnitXY ( unit , x , y ) < dist ;
25612: LD_VAR 0 1
25616: PPUSH
25617: LD_VAR 0 2
25621: PPUSH
25622: LD_VAR 0 3
25626: PPUSH
25627: CALL_OW 297
25631: PUSH
25632: LD_VAR 0 5
25636: LESS
25637: IFFALSE 25581
// end ; ComTurnXY ( unit , x , y ) ;
25639: LD_VAR 0 1
25643: PPUSH
25644: LD_VAR 0 2
25648: PPUSH
25649: LD_VAR 0 3
25653: PPUSH
25654: CALL_OW 118
// repeat if Multiplayer then
25658: LD_OWVAR 4
25662: IFFALSE 25673
// wait ( 35 ) else
25664: LD_INT 35
25666: PPUSH
25667: CALL_OW 67
25671: GO 25680
// wait ( 5 ) ;
25673: LD_INT 5
25675: PPUSH
25676: CALL_OW 67
// _d := GetDir ( unit ) ;
25680: LD_ADDR_VAR 0 11
25684: PUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 254
25694: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25695: LD_ADDR_VAR 0 7
25699: PUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: CALL_OW 250
25709: PPUSH
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 251
25719: PPUSH
25720: LD_VAR 0 2
25724: PPUSH
25725: LD_VAR 0 3
25729: PPUSH
25730: CALL 65086 0 4
25734: ST_TO_ADDR
// until dir = _d ;
25735: LD_VAR 0 7
25739: PUSH
25740: LD_VAR 0 11
25744: EQUAL
25745: IFFALSE 25658
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25747: LD_ADDR_VAR 0 9
25751: PUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 250
25761: PPUSH
25762: LD_VAR 0 7
25766: PPUSH
25767: LD_VAR 0 5
25771: PPUSH
25772: CALL_OW 272
25776: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
25777: LD_ADDR_VAR 0 10
25781: PUSH
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 251
25791: PPUSH
25792: LD_VAR 0 7
25796: PPUSH
25797: LD_VAR 0 5
25801: PPUSH
25802: CALL_OW 273
25806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25807: LD_VAR 0 9
25811: PPUSH
25812: LD_VAR 0 10
25816: PPUSH
25817: CALL_OW 488
25821: NOT
25822: IFFALSE 25826
// exit ;
25824: GO 25944
// ComAnimCustom ( unit , 1 ) ;
25826: LD_VAR 0 1
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 592
// p := 0 ;
25838: LD_ADDR_VAR 0 12
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25846: LD_VAR 0 9
25850: PPUSH
25851: LD_VAR 0 10
25855: PPUSH
25856: LD_VAR 0 6
25860: PPUSH
25861: LD_VAR 0 8
25865: PPUSH
25866: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
25870: LD_INT 35
25872: PPUSH
25873: CALL_OW 67
// p := Inc ( p ) ;
25877: LD_ADDR_VAR 0 12
25881: PUSH
25882: LD_VAR 0 12
25886: PPUSH
25887: CALL 65042 0 1
25891: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
25892: LD_VAR 0 12
25896: PUSH
25897: LD_INT 3
25899: EQUAL
25900: PUSH
25901: LD_VAR 0 1
25905: PPUSH
25906: CALL_OW 302
25910: NOT
25911: OR
25912: PUSH
25913: LD_VAR 0 1
25917: PPUSH
25918: CALL_OW 301
25922: OR
25923: IFFALSE 25870
// RemoveSeeing ( _x , _y , side ) ;
25925: LD_VAR 0 9
25929: PPUSH
25930: LD_VAR 0 10
25934: PPUSH
25935: LD_VAR 0 6
25939: PPUSH
25940: CALL_OW 331
// end ; end_of_file end_of_file
25944: LD_VAR 0 4
25948: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25949: LD_INT 0
25951: PPUSH
25952: PPUSH
// if exist_mode then
25953: LD_VAR 0 2
25957: IFFALSE 26003
// begin unit := CreateCharacter ( prefix & ident ) ;
25959: LD_ADDR_VAR 0 5
25963: PUSH
25964: LD_VAR 0 3
25968: PUSH
25969: LD_VAR 0 1
25973: STR
25974: PPUSH
25975: CALL_OW 34
25979: ST_TO_ADDR
// if unit then
25980: LD_VAR 0 5
25984: IFFALSE 26001
// DeleteCharacters ( prefix & ident ) ;
25986: LD_VAR 0 3
25990: PUSH
25991: LD_VAR 0 1
25995: STR
25996: PPUSH
25997: CALL_OW 40
// end else
26001: GO 26018
// unit := NewCharacter ( ident ) ;
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 25
26017: ST_TO_ADDR
// result := unit ;
26018: LD_ADDR_VAR 0 4
26022: PUSH
26023: LD_VAR 0 5
26027: ST_TO_ADDR
// end ;
26028: LD_VAR 0 4
26032: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
// if not side or not nation then
26037: LD_VAR 0 1
26041: NOT
26042: PUSH
26043: LD_VAR 0 2
26047: NOT
26048: OR
26049: IFFALSE 26053
// exit ;
26051: GO 26821
// case nation of nation_american :
26053: LD_VAR 0 2
26057: PUSH
26058: LD_INT 1
26060: DOUBLE
26061: EQUAL
26062: IFTRUE 26066
26064: GO 26280
26066: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26067: LD_ADDR_VAR 0 4
26071: PUSH
26072: LD_INT 35
26074: PUSH
26075: LD_INT 45
26077: PUSH
26078: LD_INT 46
26080: PUSH
26081: LD_INT 47
26083: PUSH
26084: LD_INT 82
26086: PUSH
26087: LD_INT 83
26089: PUSH
26090: LD_INT 84
26092: PUSH
26093: LD_INT 85
26095: PUSH
26096: LD_INT 86
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 6
26107: PUSH
26108: LD_INT 15
26110: PUSH
26111: LD_INT 16
26113: PUSH
26114: LD_INT 7
26116: PUSH
26117: LD_INT 12
26119: PUSH
26120: LD_INT 13
26122: PUSH
26123: LD_INT 10
26125: PUSH
26126: LD_INT 14
26128: PUSH
26129: LD_INT 20
26131: PUSH
26132: LD_INT 21
26134: PUSH
26135: LD_INT 22
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 32
26143: PUSH
26144: LD_INT 27
26146: PUSH
26147: LD_INT 36
26149: PUSH
26150: LD_INT 69
26152: PUSH
26153: LD_INT 39
26155: PUSH
26156: LD_INT 34
26158: PUSH
26159: LD_INT 40
26161: PUSH
26162: LD_INT 48
26164: PUSH
26165: LD_INT 49
26167: PUSH
26168: LD_INT 50
26170: PUSH
26171: LD_INT 51
26173: PUSH
26174: LD_INT 52
26176: PUSH
26177: LD_INT 53
26179: PUSH
26180: LD_INT 54
26182: PUSH
26183: LD_INT 55
26185: PUSH
26186: LD_INT 56
26188: PUSH
26189: LD_INT 57
26191: PUSH
26192: LD_INT 58
26194: PUSH
26195: LD_INT 59
26197: PUSH
26198: LD_INT 60
26200: PUSH
26201: LD_INT 61
26203: PUSH
26204: LD_INT 62
26206: PUSH
26207: LD_INT 80
26209: PUSH
26210: LD_INT 82
26212: PUSH
26213: LD_INT 83
26215: PUSH
26216: LD_INT 84
26218: PUSH
26219: LD_INT 85
26221: PUSH
26222: LD_INT 86
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: ST_TO_ADDR
26278: GO 26745
26280: LD_INT 2
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26514
26288: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26289: LD_ADDR_VAR 0 4
26293: PUSH
26294: LD_INT 35
26296: PUSH
26297: LD_INT 45
26299: PUSH
26300: LD_INT 46
26302: PUSH
26303: LD_INT 47
26305: PUSH
26306: LD_INT 82
26308: PUSH
26309: LD_INT 83
26311: PUSH
26312: LD_INT 84
26314: PUSH
26315: LD_INT 85
26317: PUSH
26318: LD_INT 87
26320: PUSH
26321: LD_INT 70
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: LD_INT 11
26329: PUSH
26330: LD_INT 3
26332: PUSH
26333: LD_INT 4
26335: PUSH
26336: LD_INT 5
26338: PUSH
26339: LD_INT 6
26341: PUSH
26342: LD_INT 15
26344: PUSH
26345: LD_INT 18
26347: PUSH
26348: LD_INT 7
26350: PUSH
26351: LD_INT 17
26353: PUSH
26354: LD_INT 8
26356: PUSH
26357: LD_INT 20
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 22
26365: PUSH
26366: LD_INT 72
26368: PUSH
26369: LD_INT 26
26371: PUSH
26372: LD_INT 69
26374: PUSH
26375: LD_INT 39
26377: PUSH
26378: LD_INT 40
26380: PUSH
26381: LD_INT 41
26383: PUSH
26384: LD_INT 42
26386: PUSH
26387: LD_INT 43
26389: PUSH
26390: LD_INT 48
26392: PUSH
26393: LD_INT 49
26395: PUSH
26396: LD_INT 50
26398: PUSH
26399: LD_INT 51
26401: PUSH
26402: LD_INT 52
26404: PUSH
26405: LD_INT 53
26407: PUSH
26408: LD_INT 54
26410: PUSH
26411: LD_INT 55
26413: PUSH
26414: LD_INT 56
26416: PUSH
26417: LD_INT 60
26419: PUSH
26420: LD_INT 61
26422: PUSH
26423: LD_INT 62
26425: PUSH
26426: LD_INT 66
26428: PUSH
26429: LD_INT 67
26431: PUSH
26432: LD_INT 68
26434: PUSH
26435: LD_INT 81
26437: PUSH
26438: LD_INT 82
26440: PUSH
26441: LD_INT 83
26443: PUSH
26444: LD_INT 84
26446: PUSH
26447: LD_INT 85
26449: PUSH
26450: LD_INT 87
26452: PUSH
26453: LD_INT 88
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: ST_TO_ADDR
26512: GO 26745
26514: LD_INT 3
26516: DOUBLE
26517: EQUAL
26518: IFTRUE 26522
26520: GO 26744
26522: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26523: LD_ADDR_VAR 0 4
26527: PUSH
26528: LD_INT 46
26530: PUSH
26531: LD_INT 47
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: LD_INT 82
26542: PUSH
26543: LD_INT 83
26545: PUSH
26546: LD_INT 84
26548: PUSH
26549: LD_INT 85
26551: PUSH
26552: LD_INT 86
26554: PUSH
26555: LD_INT 11
26557: PUSH
26558: LD_INT 9
26560: PUSH
26561: LD_INT 20
26563: PUSH
26564: LD_INT 19
26566: PUSH
26567: LD_INT 21
26569: PUSH
26570: LD_INT 24
26572: PUSH
26573: LD_INT 22
26575: PUSH
26576: LD_INT 25
26578: PUSH
26579: LD_INT 28
26581: PUSH
26582: LD_INT 29
26584: PUSH
26585: LD_INT 30
26587: PUSH
26588: LD_INT 31
26590: PUSH
26591: LD_INT 37
26593: PUSH
26594: LD_INT 38
26596: PUSH
26597: LD_INT 32
26599: PUSH
26600: LD_INT 27
26602: PUSH
26603: LD_INT 33
26605: PUSH
26606: LD_INT 69
26608: PUSH
26609: LD_INT 39
26611: PUSH
26612: LD_INT 34
26614: PUSH
26615: LD_INT 40
26617: PUSH
26618: LD_INT 71
26620: PUSH
26621: LD_INT 23
26623: PUSH
26624: LD_INT 44
26626: PUSH
26627: LD_INT 48
26629: PUSH
26630: LD_INT 49
26632: PUSH
26633: LD_INT 50
26635: PUSH
26636: LD_INT 51
26638: PUSH
26639: LD_INT 52
26641: PUSH
26642: LD_INT 53
26644: PUSH
26645: LD_INT 54
26647: PUSH
26648: LD_INT 55
26650: PUSH
26651: LD_INT 56
26653: PUSH
26654: LD_INT 57
26656: PUSH
26657: LD_INT 58
26659: PUSH
26660: LD_INT 59
26662: PUSH
26663: LD_INT 63
26665: PUSH
26666: LD_INT 64
26668: PUSH
26669: LD_INT 65
26671: PUSH
26672: LD_INT 82
26674: PUSH
26675: LD_INT 83
26677: PUSH
26678: LD_INT 84
26680: PUSH
26681: LD_INT 85
26683: PUSH
26684: LD_INT 86
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
26742: GO 26745
26744: POP
// if state > - 1 and state < 3 then
26745: LD_VAR 0 3
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: GREATER
26754: PUSH
26755: LD_VAR 0 3
26759: PUSH
26760: LD_INT 3
26762: LESS
26763: AND
26764: IFFALSE 26821
// for i in result do
26766: LD_ADDR_VAR 0 5
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: FOR_IN
26777: IFFALSE 26819
// if GetTech ( i , side ) <> state then
26779: LD_VAR 0 5
26783: PPUSH
26784: LD_VAR 0 1
26788: PPUSH
26789: CALL_OW 321
26793: PUSH
26794: LD_VAR 0 3
26798: NONEQUAL
26799: IFFALSE 26817
// result := result diff i ;
26801: LD_ADDR_VAR 0 4
26805: PUSH
26806: LD_VAR 0 4
26810: PUSH
26811: LD_VAR 0 5
26815: DIFF
26816: ST_TO_ADDR
26817: GO 26776
26819: POP
26820: POP
// end ;
26821: LD_VAR 0 4
26825: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26826: LD_INT 0
26828: PPUSH
26829: PPUSH
26830: PPUSH
// result := true ;
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_INT 1
26838: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26839: LD_ADDR_VAR 0 5
26843: PUSH
26844: LD_VAR 0 2
26848: PPUSH
26849: CALL_OW 480
26853: ST_TO_ADDR
// if not tmp then
26854: LD_VAR 0 5
26858: NOT
26859: IFFALSE 26863
// exit ;
26861: GO 26912
// for i in tmp do
26863: LD_ADDR_VAR 0 4
26867: PUSH
26868: LD_VAR 0 5
26872: PUSH
26873: FOR_IN
26874: IFFALSE 26910
// if GetTech ( i , side ) <> state_researched then
26876: LD_VAR 0 4
26880: PPUSH
26881: LD_VAR 0 1
26885: PPUSH
26886: CALL_OW 321
26890: PUSH
26891: LD_INT 2
26893: NONEQUAL
26894: IFFALSE 26908
// begin result := false ;
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// exit ;
26904: POP
26905: POP
26906: GO 26912
// end ;
26908: GO 26873
26910: POP
26911: POP
// end ;
26912: LD_VAR 0 3
26916: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26917: LD_INT 0
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26932: LD_VAR 0 1
26936: NOT
26937: PUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 257
26947: PUSH
26948: LD_INT 9
26950: NONEQUAL
26951: OR
26952: IFFALSE 26956
// exit ;
26954: GO 27529
// side := GetSide ( unit ) ;
26956: LD_ADDR_VAR 0 9
26960: PUSH
26961: LD_VAR 0 1
26965: PPUSH
26966: CALL_OW 255
26970: ST_TO_ADDR
// tech_space := tech_spacanom ;
26971: LD_ADDR_VAR 0 12
26975: PUSH
26976: LD_INT 29
26978: ST_TO_ADDR
// tech_time := tech_taurad ;
26979: LD_ADDR_VAR 0 13
26983: PUSH
26984: LD_INT 28
26986: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26987: LD_ADDR_VAR 0 11
26991: PUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: CALL_OW 310
27001: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27002: LD_VAR 0 11
27006: PPUSH
27007: CALL_OW 247
27011: PUSH
27012: LD_INT 2
27014: EQUAL
27015: IFFALSE 27019
// exit ;
27017: GO 27529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27019: LD_ADDR_VAR 0 8
27023: PUSH
27024: LD_INT 81
27026: PUSH
27027: LD_VAR 0 9
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 21
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PPUSH
27057: CALL_OW 69
27061: ST_TO_ADDR
// if not tmp then
27062: LD_VAR 0 8
27066: NOT
27067: IFFALSE 27071
// exit ;
27069: GO 27529
// if in_unit then
27071: LD_VAR 0 11
27075: IFFALSE 27099
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27077: LD_ADDR_VAR 0 10
27081: PUSH
27082: LD_VAR 0 8
27086: PPUSH
27087: LD_VAR 0 11
27091: PPUSH
27092: CALL_OW 74
27096: ST_TO_ADDR
27097: GO 27119
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27099: LD_ADDR_VAR 0 10
27103: PUSH
27104: LD_VAR 0 8
27108: PPUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL_OW 74
27118: ST_TO_ADDR
// if not enemy then
27119: LD_VAR 0 10
27123: NOT
27124: IFFALSE 27128
// exit ;
27126: GO 27529
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27128: LD_VAR 0 11
27132: PUSH
27133: LD_VAR 0 11
27137: PPUSH
27138: LD_VAR 0 10
27142: PPUSH
27143: CALL_OW 296
27147: PUSH
27148: LD_INT 13
27150: GREATER
27151: AND
27152: PUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: LD_VAR 0 10
27162: PPUSH
27163: CALL_OW 296
27167: PUSH
27168: LD_INT 12
27170: GREATER
27171: OR
27172: IFFALSE 27176
// exit ;
27174: GO 27529
// missile := [ 1 ] ;
27176: LD_ADDR_VAR 0 14
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27187: LD_VAR 0 9
27191: PPUSH
27192: LD_VAR 0 12
27196: PPUSH
27197: CALL_OW 325
27201: IFFALSE 27230
// missile := Replace ( missile , missile + 1 , 2 ) ;
27203: LD_ADDR_VAR 0 14
27207: PUSH
27208: LD_VAR 0 14
27212: PPUSH
27213: LD_VAR 0 14
27217: PUSH
27218: LD_INT 1
27220: PLUS
27221: PPUSH
27222: LD_INT 2
27224: PPUSH
27225: CALL_OW 1
27229: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27230: LD_VAR 0 9
27234: PPUSH
27235: LD_VAR 0 13
27239: PPUSH
27240: CALL_OW 325
27244: PUSH
27245: LD_VAR 0 10
27249: PPUSH
27250: CALL_OW 255
27254: PPUSH
27255: LD_VAR 0 13
27259: PPUSH
27260: CALL_OW 325
27264: NOT
27265: AND
27266: IFFALSE 27295
// missile := Replace ( missile , missile + 1 , 3 ) ;
27268: LD_ADDR_VAR 0 14
27272: PUSH
27273: LD_VAR 0 14
27277: PPUSH
27278: LD_VAR 0 14
27282: PUSH
27283: LD_INT 1
27285: PLUS
27286: PPUSH
27287: LD_INT 3
27289: PPUSH
27290: CALL_OW 1
27294: ST_TO_ADDR
// if missile < 2 then
27295: LD_VAR 0 14
27299: PUSH
27300: LD_INT 2
27302: LESS
27303: IFFALSE 27307
// exit ;
27305: GO 27529
// x := GetX ( enemy ) ;
27307: LD_ADDR_VAR 0 4
27311: PUSH
27312: LD_VAR 0 10
27316: PPUSH
27317: CALL_OW 250
27321: ST_TO_ADDR
// y := GetY ( enemy ) ;
27322: LD_ADDR_VAR 0 5
27326: PUSH
27327: LD_VAR 0 10
27331: PPUSH
27332: CALL_OW 251
27336: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27337: LD_ADDR_VAR 0 6
27341: PUSH
27342: LD_VAR 0 4
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PPUSH
27351: LD_INT 1
27353: PPUSH
27354: CALL_OW 12
27358: PLUS
27359: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27360: LD_ADDR_VAR 0 7
27364: PUSH
27365: LD_VAR 0 5
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PPUSH
27374: LD_INT 1
27376: PPUSH
27377: CALL_OW 12
27381: PLUS
27382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27383: LD_VAR 0 6
27387: PPUSH
27388: LD_VAR 0 7
27392: PPUSH
27393: CALL_OW 488
27397: NOT
27398: IFFALSE 27420
// begin _x := x ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 4
27409: ST_TO_ADDR
// _y := y ;
27410: LD_ADDR_VAR 0 7
27414: PUSH
27415: LD_VAR 0 5
27419: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27420: LD_ADDR_VAR 0 3
27424: PUSH
27425: LD_INT 1
27427: PPUSH
27428: LD_VAR 0 14
27432: PPUSH
27433: CALL_OW 12
27437: ST_TO_ADDR
// case i of 1 :
27438: LD_VAR 0 3
27442: PUSH
27443: LD_INT 1
27445: DOUBLE
27446: EQUAL
27447: IFTRUE 27451
27449: GO 27468
27451: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_VAR 0 10
27461: PPUSH
27462: CALL_OW 115
27466: GO 27529
27468: LD_INT 2
27470: DOUBLE
27471: EQUAL
27472: IFTRUE 27476
27474: GO 27498
27476: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_VAR 0 6
27486: PPUSH
27487: LD_VAR 0 7
27491: PPUSH
27492: CALL_OW 153
27496: GO 27529
27498: LD_INT 3
27500: DOUBLE
27501: EQUAL
27502: IFTRUE 27506
27504: GO 27528
27506: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27507: LD_VAR 0 1
27511: PPUSH
27512: LD_VAR 0 6
27516: PPUSH
27517: LD_VAR 0 7
27521: PPUSH
27522: CALL_OW 154
27526: GO 27529
27528: POP
// end ;
27529: LD_VAR 0 2
27533: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27534: LD_INT 0
27536: PPUSH
27537: PPUSH
27538: PPUSH
27539: PPUSH
27540: PPUSH
27541: PPUSH
// if not unit or not building then
27542: LD_VAR 0 1
27546: NOT
27547: PUSH
27548: LD_VAR 0 2
27552: NOT
27553: OR
27554: IFFALSE 27558
// exit ;
27556: GO 27716
// x := GetX ( building ) ;
27558: LD_ADDR_VAR 0 5
27562: PUSH
27563: LD_VAR 0 2
27567: PPUSH
27568: CALL_OW 250
27572: ST_TO_ADDR
// y := GetY ( building ) ;
27573: LD_ADDR_VAR 0 6
27577: PUSH
27578: LD_VAR 0 2
27582: PPUSH
27583: CALL_OW 251
27587: ST_TO_ADDR
// for i = 0 to 5 do
27588: LD_ADDR_VAR 0 4
27592: PUSH
27593: DOUBLE
27594: LD_INT 0
27596: DEC
27597: ST_TO_ADDR
27598: LD_INT 5
27600: PUSH
27601: FOR_TO
27602: IFFALSE 27714
// begin _x := ShiftX ( x , i , 3 ) ;
27604: LD_ADDR_VAR 0 7
27608: PUSH
27609: LD_VAR 0 5
27613: PPUSH
27614: LD_VAR 0 4
27618: PPUSH
27619: LD_INT 3
27621: PPUSH
27622: CALL_OW 272
27626: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27627: LD_ADDR_VAR 0 8
27631: PUSH
27632: LD_VAR 0 6
27636: PPUSH
27637: LD_VAR 0 4
27641: PPUSH
27642: LD_INT 3
27644: PPUSH
27645: CALL_OW 273
27649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27650: LD_VAR 0 7
27654: PPUSH
27655: LD_VAR 0 8
27659: PPUSH
27660: CALL_OW 488
27664: NOT
27665: IFFALSE 27669
// continue ;
27667: GO 27601
// if HexInfo ( _x , _y ) = 0 then
27669: LD_VAR 0 7
27673: PPUSH
27674: LD_VAR 0 8
27678: PPUSH
27679: CALL_OW 428
27683: PUSH
27684: LD_INT 0
27686: EQUAL
27687: IFFALSE 27712
// begin ComMoveXY ( unit , _x , _y ) ;
27689: LD_VAR 0 1
27693: PPUSH
27694: LD_VAR 0 7
27698: PPUSH
27699: LD_VAR 0 8
27703: PPUSH
27704: CALL_OW 111
// exit ;
27708: POP
27709: POP
27710: GO 27716
// end ; end ;
27712: GO 27601
27714: POP
27715: POP
// end ;
27716: LD_VAR 0 3
27720: RET
// export function ScanBase ( side , base_area ) ; begin
27721: LD_INT 0
27723: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27724: LD_ADDR_VAR 0 3
27728: PUSH
27729: LD_VAR 0 2
27733: PPUSH
27734: LD_INT 81
27736: PUSH
27737: LD_VAR 0 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 70
27750: ST_TO_ADDR
// end ;
27751: LD_VAR 0 3
27755: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
27760: PPUSH
27761: PPUSH
// result := false ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_INT 0
27769: ST_TO_ADDR
// side := GetSide ( unit ) ;
27770: LD_ADDR_VAR 0 3
27774: PUSH
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 255
27784: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27785: LD_ADDR_VAR 0 4
27789: PUSH
27790: LD_VAR 0 1
27794: PPUSH
27795: CALL_OW 248
27799: ST_TO_ADDR
// case nat of 1 :
27800: LD_VAR 0 4
27804: PUSH
27805: LD_INT 1
27807: DOUBLE
27808: EQUAL
27809: IFTRUE 27813
27811: GO 27824
27813: POP
// tech := tech_lassight ; 2 :
27814: LD_ADDR_VAR 0 5
27818: PUSH
27819: LD_INT 12
27821: ST_TO_ADDR
27822: GO 27863
27824: LD_INT 2
27826: DOUBLE
27827: EQUAL
27828: IFTRUE 27832
27830: GO 27843
27832: POP
// tech := tech_mortar ; 3 :
27833: LD_ADDR_VAR 0 5
27837: PUSH
27838: LD_INT 41
27840: ST_TO_ADDR
27841: GO 27863
27843: LD_INT 3
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 27862
27851: POP
// tech := tech_bazooka ; end ;
27852: LD_ADDR_VAR 0 5
27856: PUSH
27857: LD_INT 44
27859: ST_TO_ADDR
27860: GO 27863
27862: POP
// if Researched ( side , tech ) then
27863: LD_VAR 0 3
27867: PPUSH
27868: LD_VAR 0 5
27872: PPUSH
27873: CALL_OW 325
27877: IFFALSE 27904
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27879: LD_ADDR_VAR 0 2
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 8
27889: PUSH
27890: LD_INT 9
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: PUSH
27898: LD_VAR 0 4
27902: ARRAY
27903: ST_TO_ADDR
// end ;
27904: LD_VAR 0 2
27908: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27909: LD_INT 0
27911: PPUSH
27912: PPUSH
27913: PPUSH
// if not mines then
27914: LD_VAR 0 2
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 28067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27923: LD_ADDR_VAR 0 5
27927: PUSH
27928: LD_INT 81
27930: PUSH
27931: LD_VAR 0 1
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: LD_INT 21
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PPUSH
27961: CALL_OW 69
27965: ST_TO_ADDR
// for i in mines do
27966: LD_ADDR_VAR 0 4
27970: PUSH
27971: LD_VAR 0 2
27975: PUSH
27976: FOR_IN
27977: IFFALSE 28065
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27979: LD_VAR 0 4
27983: PUSH
27984: LD_INT 1
27986: ARRAY
27987: PPUSH
27988: LD_VAR 0 4
27992: PUSH
27993: LD_INT 2
27995: ARRAY
27996: PPUSH
27997: CALL_OW 458
28001: NOT
28002: IFFALSE 28006
// continue ;
28004: GO 27976
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28006: LD_VAR 0 4
28010: PUSH
28011: LD_INT 1
28013: ARRAY
28014: PPUSH
28015: LD_VAR 0 4
28019: PUSH
28020: LD_INT 2
28022: ARRAY
28023: PPUSH
28024: CALL_OW 428
28028: PUSH
28029: LD_VAR 0 5
28033: IN
28034: IFFALSE 28063
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28036: LD_VAR 0 4
28040: PUSH
28041: LD_INT 1
28043: ARRAY
28044: PPUSH
28045: LD_VAR 0 4
28049: PUSH
28050: LD_INT 2
28052: ARRAY
28053: PPUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 456
// end ;
28063: GO 27976
28065: POP
28066: POP
// end ;
28067: LD_VAR 0 3
28071: RET
// export function Count ( array ) ; begin
28072: LD_INT 0
28074: PPUSH
// result := array + 0 ;
28075: LD_ADDR_VAR 0 2
28079: PUSH
28080: LD_VAR 0 1
28084: PUSH
28085: LD_INT 0
28087: PLUS
28088: ST_TO_ADDR
// end ;
28089: LD_VAR 0 2
28093: RET
// export function IsEmpty ( building ) ; begin
28094: LD_INT 0
28096: PPUSH
// if not building then
28097: LD_VAR 0 1
28101: NOT
28102: IFFALSE 28106
// exit ;
28104: GO 28149
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28106: LD_ADDR_VAR 0 2
28110: PUSH
28111: LD_VAR 0 1
28115: PUSH
28116: LD_INT 22
28118: PUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 255
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 58
28135: PUSH
28136: EMPTY
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PPUSH
28143: CALL_OW 69
28147: IN
28148: ST_TO_ADDR
// end ;
28149: LD_VAR 0 2
28153: RET
// export function IsNotFull ( building ) ; var places ; begin
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
// if not building then
28158: LD_VAR 0 1
28162: NOT
28163: IFFALSE 28167
// exit ;
28165: GO 28195
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28167: LD_ADDR_VAR 0 2
28171: PUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_INT 3
28179: PUSH
28180: LD_INT 62
28182: PUSH
28183: EMPTY
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 72
28194: ST_TO_ADDR
// end ;
28195: LD_VAR 0 2
28199: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
// tmp := [ ] ;
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: EMPTY
28212: ST_TO_ADDR
// list := [ ] ;
28213: LD_ADDR_VAR 0 5
28217: PUSH
28218: EMPTY
28219: ST_TO_ADDR
// for i = 16 to 25 do
28220: LD_ADDR_VAR 0 4
28224: PUSH
28225: DOUBLE
28226: LD_INT 16
28228: DEC
28229: ST_TO_ADDR
28230: LD_INT 25
28232: PUSH
28233: FOR_TO
28234: IFFALSE 28307
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_VAR 0 3
28245: PUSH
28246: LD_INT 22
28248: PUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 255
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 91
28265: PUSH
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 6
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 30
28281: PUSH
28282: LD_VAR 0 4
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: PUSH
28296: EMPTY
28297: LIST
28298: PPUSH
28299: CALL_OW 69
28303: ADD
28304: ST_TO_ADDR
28305: GO 28233
28307: POP
28308: POP
// for i = 1 to tmp do
28309: LD_ADDR_VAR 0 4
28313: PUSH
28314: DOUBLE
28315: LD_INT 1
28317: DEC
28318: ST_TO_ADDR
28319: LD_VAR 0 3
28323: PUSH
28324: FOR_TO
28325: IFFALSE 28413
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28327: LD_ADDR_VAR 0 5
28331: PUSH
28332: LD_VAR 0 5
28336: PUSH
28337: LD_VAR 0 3
28341: PUSH
28342: LD_VAR 0 4
28346: ARRAY
28347: PPUSH
28348: CALL_OW 266
28352: PUSH
28353: LD_VAR 0 3
28357: PUSH
28358: LD_VAR 0 4
28362: ARRAY
28363: PPUSH
28364: CALL_OW 250
28368: PUSH
28369: LD_VAR 0 3
28373: PUSH
28374: LD_VAR 0 4
28378: ARRAY
28379: PPUSH
28380: CALL_OW 251
28384: PUSH
28385: LD_VAR 0 3
28389: PUSH
28390: LD_VAR 0 4
28394: ARRAY
28395: PPUSH
28396: CALL_OW 254
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: ADD
28410: ST_TO_ADDR
28411: GO 28324
28413: POP
28414: POP
// result := list ;
28415: LD_ADDR_VAR 0 2
28419: PUSH
28420: LD_VAR 0 5
28424: ST_TO_ADDR
// end ;
28425: LD_VAR 0 2
28429: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28430: LD_INT 0
28432: PPUSH
28433: PPUSH
28434: PPUSH
28435: PPUSH
28436: PPUSH
28437: PPUSH
28438: PPUSH
// if not factory then
28439: LD_VAR 0 1
28443: NOT
28444: IFFALSE 28448
// exit ;
28446: GO 29041
// if control = control_apeman then
28448: LD_VAR 0 4
28452: PUSH
28453: LD_INT 5
28455: EQUAL
28456: IFFALSE 28565
// begin tmp := UnitsInside ( factory ) ;
28458: LD_ADDR_VAR 0 8
28462: PUSH
28463: LD_VAR 0 1
28467: PPUSH
28468: CALL_OW 313
28472: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28473: LD_VAR 0 8
28477: PPUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 12
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 72
28492: NOT
28493: IFFALSE 28503
// control := control_manual ;
28495: LD_ADDR_VAR 0 4
28499: PUSH
28500: LD_INT 1
28502: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28503: LD_ADDR_VAR 0 8
28507: PUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL 28200 0 1
28517: ST_TO_ADDR
// if tmp then
28518: LD_VAR 0 8
28522: IFFALSE 28565
// begin for i in tmp do
28524: LD_ADDR_VAR 0 7
28528: PUSH
28529: LD_VAR 0 8
28533: PUSH
28534: FOR_IN
28535: IFFALSE 28563
// if i [ 1 ] = b_ext_radio then
28537: LD_VAR 0 7
28541: PUSH
28542: LD_INT 1
28544: ARRAY
28545: PUSH
28546: LD_INT 22
28548: EQUAL
28549: IFFALSE 28561
// begin control := control_remote ;
28551: LD_ADDR_VAR 0 4
28555: PUSH
28556: LD_INT 2
28558: ST_TO_ADDR
// break ;
28559: GO 28563
// end ;
28561: GO 28534
28563: POP
28564: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28565: LD_VAR 0 1
28569: PPUSH
28570: LD_VAR 0 2
28574: PPUSH
28575: LD_VAR 0 3
28579: PPUSH
28580: LD_VAR 0 4
28584: PPUSH
28585: LD_VAR 0 5
28589: PPUSH
28590: CALL_OW 448
28594: IFFALSE 28629
// begin result := [ chassis , engine , control , weapon ] ;
28596: LD_ADDR_VAR 0 6
28600: PUSH
28601: LD_VAR 0 2
28605: PUSH
28606: LD_VAR 0 3
28610: PUSH
28611: LD_VAR 0 4
28615: PUSH
28616: LD_VAR 0 5
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// exit ;
28627: GO 29041
// end ; _chassis := AvailableChassisList ( factory ) ;
28629: LD_ADDR_VAR 0 9
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 475
28643: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28644: LD_ADDR_VAR 0 11
28648: PUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 476
28658: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28659: LD_ADDR_VAR 0 12
28663: PUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 477
28673: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 1
28683: PPUSH
28684: CALL_OW 478
28688: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28689: LD_VAR 0 9
28693: NOT
28694: PUSH
28695: LD_VAR 0 11
28699: NOT
28700: OR
28701: PUSH
28702: LD_VAR 0 12
28706: NOT
28707: OR
28708: PUSH
28709: LD_VAR 0 10
28713: NOT
28714: OR
28715: IFFALSE 28750
// begin result := [ chassis , engine , control , weapon ] ;
28717: LD_ADDR_VAR 0 6
28721: PUSH
28722: LD_VAR 0 2
28726: PUSH
28727: LD_VAR 0 3
28731: PUSH
28732: LD_VAR 0 4
28736: PUSH
28737: LD_VAR 0 5
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// exit ;
28748: GO 29041
// end ; if not chassis in _chassis then
28750: LD_VAR 0 2
28754: PUSH
28755: LD_VAR 0 9
28759: IN
28760: NOT
28761: IFFALSE 28787
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28763: LD_ADDR_VAR 0 2
28767: PUSH
28768: LD_VAR 0 9
28772: PUSH
28773: LD_INT 1
28775: PPUSH
28776: LD_VAR 0 9
28780: PPUSH
28781: CALL_OW 12
28785: ARRAY
28786: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_VAR 0 3
28796: PPUSH
28797: CALL 29046 0 2
28801: NOT
28802: IFFALSE 28861
// repeat engine := _engine [ 1 ] ;
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_VAR 0 11
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28818: LD_ADDR_VAR 0 11
28822: PUSH
28823: LD_VAR 0 11
28827: PPUSH
28828: LD_INT 1
28830: PPUSH
28831: CALL_OW 3
28835: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28836: LD_VAR 0 2
28840: PPUSH
28841: LD_VAR 0 3
28845: PPUSH
28846: CALL 29046 0 2
28850: PUSH
28851: LD_VAR 0 11
28855: PUSH
28856: EMPTY
28857: EQUAL
28858: OR
28859: IFFALSE 28804
// if not control in _control then
28861: LD_VAR 0 4
28865: PUSH
28866: LD_VAR 0 12
28870: IN
28871: NOT
28872: IFFALSE 28898
// control := _control [ rand ( 1 , _control ) ] ;
28874: LD_ADDR_VAR 0 4
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: PPUSH
28887: LD_VAR 0 12
28891: PPUSH
28892: CALL_OW 12
28896: ARRAY
28897: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28898: LD_VAR 0 2
28902: PPUSH
28903: LD_VAR 0 5
28907: PPUSH
28908: CALL 29266 0 2
28912: NOT
28913: IFFALSE 28972
// repeat weapon := _weapon [ 1 ] ;
28915: LD_ADDR_VAR 0 5
28919: PUSH
28920: LD_VAR 0 10
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28929: LD_ADDR_VAR 0 10
28933: PUSH
28934: LD_VAR 0 10
28938: PPUSH
28939: LD_INT 1
28941: PPUSH
28942: CALL_OW 3
28946: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28947: LD_VAR 0 2
28951: PPUSH
28952: LD_VAR 0 5
28956: PPUSH
28957: CALL 29266 0 2
28961: PUSH
28962: LD_VAR 0 10
28966: PUSH
28967: EMPTY
28968: EQUAL
28969: OR
28970: IFFALSE 28915
// result := [ ] ;
28972: LD_ADDR_VAR 0 6
28976: PUSH
28977: EMPTY
28978: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 2
28988: PPUSH
28989: LD_VAR 0 3
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: LD_VAR 0 5
29003: PPUSH
29004: CALL_OW 448
29008: IFFALSE 29041
// result := [ chassis , engine , control , weapon ] ;
29010: LD_ADDR_VAR 0 6
29014: PUSH
29015: LD_VAR 0 2
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_VAR 0 4
29029: PUSH
29030: LD_VAR 0 5
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// end ;
29041: LD_VAR 0 6
29045: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29046: LD_INT 0
29048: PPUSH
// if not chassis or not engine then
29049: LD_VAR 0 1
29053: NOT
29054: PUSH
29055: LD_VAR 0 2
29059: NOT
29060: OR
29061: IFFALSE 29065
// exit ;
29063: GO 29261
// case engine of engine_solar :
29065: LD_VAR 0 2
29069: PUSH
29070: LD_INT 2
29072: DOUBLE
29073: EQUAL
29074: IFTRUE 29078
29076: GO 29116
29078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29079: LD_ADDR_VAR 0 3
29083: PUSH
29084: LD_INT 11
29086: PUSH
29087: LD_INT 12
29089: PUSH
29090: LD_INT 13
29092: PUSH
29093: LD_INT 14
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
29114: GO 29245
29116: LD_INT 1
29118: DOUBLE
29119: EQUAL
29120: IFTRUE 29124
29122: GO 29186
29124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29125: LD_ADDR_VAR 0 3
29129: PUSH
29130: LD_INT 11
29132: PUSH
29133: LD_INT 12
29135: PUSH
29136: LD_INT 13
29138: PUSH
29139: LD_INT 14
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 3
29150: PUSH
29151: LD_INT 4
29153: PUSH
29154: LD_INT 5
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: LD_INT 23
29162: PUSH
29163: LD_INT 22
29165: PUSH
29166: LD_INT 24
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: ST_TO_ADDR
29184: GO 29245
29186: LD_INT 3
29188: DOUBLE
29189: EQUAL
29190: IFTRUE 29194
29192: GO 29244
29194: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29195: LD_ADDR_VAR 0 3
29199: PUSH
29200: LD_INT 13
29202: PUSH
29203: LD_INT 14
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_INT 23
29226: PUSH
29227: LD_INT 24
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: ST_TO_ADDR
29242: GO 29245
29244: POP
// result := ( chassis in result ) ;
29245: LD_ADDR_VAR 0 3
29249: PUSH
29250: LD_VAR 0 1
29254: PUSH
29255: LD_VAR 0 3
29259: IN
29260: ST_TO_ADDR
// end ;
29261: LD_VAR 0 3
29265: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29266: LD_INT 0
29268: PPUSH
// if not chassis or not weapon then
29269: LD_VAR 0 1
29273: NOT
29274: PUSH
29275: LD_VAR 0 2
29279: NOT
29280: OR
29281: IFFALSE 29285
// exit ;
29283: GO 30345
// case weapon of us_machine_gun :
29285: LD_VAR 0 2
29289: PUSH
29290: LD_INT 2
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29328
29298: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: LD_INT 5
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
29326: GO 30329
29328: LD_INT 3
29330: DOUBLE
29331: EQUAL
29332: IFTRUE 29336
29334: GO 29366
29336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29337: LD_ADDR_VAR 0 3
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: LD_INT 4
29353: PUSH
29354: LD_INT 5
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: ST_TO_ADDR
29364: GO 30329
29366: LD_INT 11
29368: DOUBLE
29369: EQUAL
29370: IFTRUE 29374
29372: GO 29404
29374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 3
29388: PUSH
29389: LD_INT 4
29391: PUSH
29392: LD_INT 5
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
29402: GO 30329
29404: LD_INT 4
29406: DOUBLE
29407: EQUAL
29408: IFTRUE 29412
29410: GO 29438
29412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29413: LD_ADDR_VAR 0 3
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: LD_INT 3
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: LD_INT 5
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: ST_TO_ADDR
29436: GO 30329
29438: LD_INT 5
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29472
29446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29447: LD_ADDR_VAR 0 3
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: LD_INT 4
29460: PUSH
29461: LD_INT 5
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
29470: GO 30329
29472: LD_INT 9
29474: DOUBLE
29475: EQUAL
29476: IFTRUE 29480
29478: GO 29506
29480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29481: LD_ADDR_VAR 0 3
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 4
29494: PUSH
29495: LD_INT 5
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: ST_TO_ADDR
29504: GO 30329
29506: LD_INT 7
29508: DOUBLE
29509: EQUAL
29510: IFTRUE 29514
29512: GO 29540
29514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29515: LD_ADDR_VAR 0 3
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: LD_INT 4
29528: PUSH
29529: LD_INT 5
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
29538: GO 30329
29540: LD_INT 12
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29574
29548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 4
29562: PUSH
29563: LD_INT 5
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
29572: GO 30329
29574: LD_INT 13
29576: DOUBLE
29577: EQUAL
29578: IFTRUE 29582
29580: GO 29608
29582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: LD_INT 5
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 30329
29608: LD_INT 14
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29634
29616: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 5
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: ST_TO_ADDR
29632: GO 30329
29634: LD_INT 6
29636: DOUBLE
29637: EQUAL
29638: IFTRUE 29642
29640: GO 29660
29642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29643: LD_ADDR_VAR 0 3
29647: PUSH
29648: LD_INT 4
29650: PUSH
29651: LD_INT 5
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: ST_TO_ADDR
29658: GO 30329
29660: LD_INT 10
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29686
29668: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29669: LD_ADDR_VAR 0 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: LD_INT 5
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: ST_TO_ADDR
29684: GO 30329
29686: LD_INT 22
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29720
29694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 11
29702: PUSH
29703: LD_INT 12
29705: PUSH
29706: LD_INT 13
29708: PUSH
29709: LD_INT 14
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
29718: GO 30329
29720: LD_INT 23
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29754
29728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: LD_INT 11
29736: PUSH
29737: LD_INT 12
29739: PUSH
29740: LD_INT 13
29742: PUSH
29743: LD_INT 14
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
29752: GO 30329
29754: LD_INT 24
29756: DOUBLE
29757: EQUAL
29758: IFTRUE 29762
29760: GO 29788
29762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29763: LD_ADDR_VAR 0 3
29767: PUSH
29768: LD_INT 11
29770: PUSH
29771: LD_INT 12
29773: PUSH
29774: LD_INT 13
29776: PUSH
29777: LD_INT 14
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: ST_TO_ADDR
29786: GO 30329
29788: LD_INT 30
29790: DOUBLE
29791: EQUAL
29792: IFTRUE 29796
29794: GO 29822
29796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29797: LD_ADDR_VAR 0 3
29801: PUSH
29802: LD_INT 11
29804: PUSH
29805: LD_INT 12
29807: PUSH
29808: LD_INT 13
29810: PUSH
29811: LD_INT 14
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
29820: GO 30329
29822: LD_INT 25
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29848
29830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_INT 13
29838: PUSH
29839: LD_INT 14
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: ST_TO_ADDR
29846: GO 30329
29848: LD_INT 27
29850: DOUBLE
29851: EQUAL
29852: IFTRUE 29856
29854: GO 29874
29856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29857: LD_ADDR_VAR 0 3
29861: PUSH
29862: LD_INT 13
29864: PUSH
29865: LD_INT 14
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: ST_TO_ADDR
29872: GO 30329
29874: LD_INT 92
29876: DOUBLE
29877: EQUAL
29878: IFTRUE 29882
29880: GO 29908
29882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29883: LD_ADDR_VAR 0 3
29887: PUSH
29888: LD_INT 11
29890: PUSH
29891: LD_INT 12
29893: PUSH
29894: LD_INT 13
29896: PUSH
29897: LD_INT 14
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
29906: GO 30329
29908: LD_INT 28
29910: DOUBLE
29911: EQUAL
29912: IFTRUE 29916
29914: GO 29934
29916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29917: LD_ADDR_VAR 0 3
29921: PUSH
29922: LD_INT 13
29924: PUSH
29925: LD_INT 14
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: ST_TO_ADDR
29932: GO 30329
29934: LD_INT 29
29936: DOUBLE
29937: EQUAL
29938: IFTRUE 29942
29940: GO 29960
29942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_INT 13
29950: PUSH
29951: LD_INT 14
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: ST_TO_ADDR
29958: GO 30329
29960: LD_INT 31
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29986
29968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29969: LD_ADDR_VAR 0 3
29973: PUSH
29974: LD_INT 13
29976: PUSH
29977: LD_INT 14
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: ST_TO_ADDR
29984: GO 30329
29986: LD_INT 26
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30012
29994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 13
30002: PUSH
30003: LD_INT 14
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: ST_TO_ADDR
30010: GO 30329
30012: LD_INT 42
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30046
30020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30021: LD_ADDR_VAR 0 3
30025: PUSH
30026: LD_INT 21
30028: PUSH
30029: LD_INT 22
30031: PUSH
30032: LD_INT 23
30034: PUSH
30035: LD_INT 24
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
30044: GO 30329
30046: LD_INT 43
30048: DOUBLE
30049: EQUAL
30050: IFTRUE 30054
30052: GO 30080
30054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_INT 21
30062: PUSH
30063: LD_INT 22
30065: PUSH
30066: LD_INT 23
30068: PUSH
30069: LD_INT 24
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
30078: GO 30329
30080: LD_INT 44
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30114
30088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_INT 21
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_INT 23
30102: PUSH
30103: LD_INT 24
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
30112: GO 30329
30114: LD_INT 45
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30148
30122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 21
30130: PUSH
30131: LD_INT 22
30133: PUSH
30134: LD_INT 23
30136: PUSH
30137: LD_INT 24
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: ST_TO_ADDR
30146: GO 30329
30148: LD_INT 49
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30182
30156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 21
30164: PUSH
30165: LD_INT 22
30167: PUSH
30168: LD_INT 23
30170: PUSH
30171: LD_INT 24
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
30180: GO 30329
30182: LD_INT 51
30184: DOUBLE
30185: EQUAL
30186: IFTRUE 30190
30188: GO 30216
30190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_INT 21
30198: PUSH
30199: LD_INT 22
30201: PUSH
30202: LD_INT 23
30204: PUSH
30205: LD_INT 24
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
30214: GO 30329
30216: LD_INT 52
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30250
30224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30225: LD_ADDR_VAR 0 3
30229: PUSH
30230: LD_INT 21
30232: PUSH
30233: LD_INT 22
30235: PUSH
30236: LD_INT 23
30238: PUSH
30239: LD_INT 24
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
30248: GO 30329
30250: LD_INT 53
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30276
30258: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30259: LD_ADDR_VAR 0 3
30263: PUSH
30264: LD_INT 23
30266: PUSH
30267: LD_INT 24
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: ST_TO_ADDR
30274: GO 30329
30276: LD_INT 46
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30302
30284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_INT 23
30292: PUSH
30293: LD_INT 24
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: ST_TO_ADDR
30300: GO 30329
30302: LD_INT 47
30304: DOUBLE
30305: EQUAL
30306: IFTRUE 30310
30308: GO 30328
30310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30311: LD_ADDR_VAR 0 3
30315: PUSH
30316: LD_INT 23
30318: PUSH
30319: LD_INT 24
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: ST_TO_ADDR
30326: GO 30329
30328: POP
// result := ( chassis in result ) ;
30329: LD_ADDR_VAR 0 3
30333: PUSH
30334: LD_VAR 0 1
30338: PUSH
30339: LD_VAR 0 3
30343: IN
30344: ST_TO_ADDR
// end ;
30345: LD_VAR 0 3
30349: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30350: LD_INT 0
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
// result := array ;
30359: LD_ADDR_VAR 0 5
30363: PUSH
30364: LD_VAR 0 1
30368: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30369: LD_VAR 0 1
30373: NOT
30374: PUSH
30375: LD_VAR 0 2
30379: NOT
30380: OR
30381: PUSH
30382: LD_VAR 0 3
30386: NOT
30387: OR
30388: PUSH
30389: LD_VAR 0 2
30393: PUSH
30394: LD_VAR 0 1
30398: GREATER
30399: OR
30400: PUSH
30401: LD_VAR 0 3
30405: PUSH
30406: LD_VAR 0 1
30410: GREATER
30411: OR
30412: IFFALSE 30416
// exit ;
30414: GO 30712
// if direction then
30416: LD_VAR 0 4
30420: IFFALSE 30484
// begin d := 1 ;
30422: LD_ADDR_VAR 0 9
30426: PUSH
30427: LD_INT 1
30429: ST_TO_ADDR
// if i_from > i_to then
30430: LD_VAR 0 2
30434: PUSH
30435: LD_VAR 0 3
30439: GREATER
30440: IFFALSE 30466
// length := ( array - i_from ) + i_to else
30442: LD_ADDR_VAR 0 11
30446: PUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_VAR 0 2
30456: MINUS
30457: PUSH
30458: LD_VAR 0 3
30462: PLUS
30463: ST_TO_ADDR
30464: GO 30482
// length := i_to - i_from ;
30466: LD_ADDR_VAR 0 11
30470: PUSH
30471: LD_VAR 0 3
30475: PUSH
30476: LD_VAR 0 2
30480: MINUS
30481: ST_TO_ADDR
// end else
30482: GO 30545
// begin d := - 1 ;
30484: LD_ADDR_VAR 0 9
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: ST_TO_ADDR
// if i_from > i_to then
30493: LD_VAR 0 2
30497: PUSH
30498: LD_VAR 0 3
30502: GREATER
30503: IFFALSE 30523
// length := i_from - i_to else
30505: LD_ADDR_VAR 0 11
30509: PUSH
30510: LD_VAR 0 2
30514: PUSH
30515: LD_VAR 0 3
30519: MINUS
30520: ST_TO_ADDR
30521: GO 30545
// length := ( array - i_to ) + i_from ;
30523: LD_ADDR_VAR 0 11
30527: PUSH
30528: LD_VAR 0 1
30532: PUSH
30533: LD_VAR 0 3
30537: MINUS
30538: PUSH
30539: LD_VAR 0 2
30543: PLUS
30544: ST_TO_ADDR
// end ; if not length then
30545: LD_VAR 0 11
30549: NOT
30550: IFFALSE 30554
// exit ;
30552: GO 30712
// tmp := array ;
30554: LD_ADDR_VAR 0 10
30558: PUSH
30559: LD_VAR 0 1
30563: ST_TO_ADDR
// for i = 1 to length do
30564: LD_ADDR_VAR 0 6
30568: PUSH
30569: DOUBLE
30570: LD_INT 1
30572: DEC
30573: ST_TO_ADDR
30574: LD_VAR 0 11
30578: PUSH
30579: FOR_TO
30580: IFFALSE 30700
// begin for j = 1 to array do
30582: LD_ADDR_VAR 0 7
30586: PUSH
30587: DOUBLE
30588: LD_INT 1
30590: DEC
30591: ST_TO_ADDR
30592: LD_VAR 0 1
30596: PUSH
30597: FOR_TO
30598: IFFALSE 30686
// begin k := j + d ;
30600: LD_ADDR_VAR 0 8
30604: PUSH
30605: LD_VAR 0 7
30609: PUSH
30610: LD_VAR 0 9
30614: PLUS
30615: ST_TO_ADDR
// if k > array then
30616: LD_VAR 0 8
30620: PUSH
30621: LD_VAR 0 1
30625: GREATER
30626: IFFALSE 30636
// k := 1 ;
30628: LD_ADDR_VAR 0 8
30632: PUSH
30633: LD_INT 1
30635: ST_TO_ADDR
// if not k then
30636: LD_VAR 0 8
30640: NOT
30641: IFFALSE 30653
// k := array ;
30643: LD_ADDR_VAR 0 8
30647: PUSH
30648: LD_VAR 0 1
30652: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30653: LD_ADDR_VAR 0 10
30657: PUSH
30658: LD_VAR 0 10
30662: PPUSH
30663: LD_VAR 0 8
30667: PPUSH
30668: LD_VAR 0 1
30672: PUSH
30673: LD_VAR 0 7
30677: ARRAY
30678: PPUSH
30679: CALL_OW 1
30683: ST_TO_ADDR
// end ;
30684: GO 30597
30686: POP
30687: POP
// array := tmp ;
30688: LD_ADDR_VAR 0 1
30692: PUSH
30693: LD_VAR 0 10
30697: ST_TO_ADDR
// end ;
30698: GO 30579
30700: POP
30701: POP
// result := array ;
30702: LD_ADDR_VAR 0 5
30706: PUSH
30707: LD_VAR 0 1
30711: ST_TO_ADDR
// end ;
30712: LD_VAR 0 5
30716: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30717: LD_INT 0
30719: PPUSH
30720: PPUSH
// result := 0 ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 0
30728: ST_TO_ADDR
// if not array or not value in array then
30729: LD_VAR 0 1
30733: NOT
30734: PUSH
30735: LD_VAR 0 2
30739: PUSH
30740: LD_VAR 0 1
30744: IN
30745: NOT
30746: OR
30747: IFFALSE 30751
// exit ;
30749: GO 30805
// for i = 1 to array do
30751: LD_ADDR_VAR 0 4
30755: PUSH
30756: DOUBLE
30757: LD_INT 1
30759: DEC
30760: ST_TO_ADDR
30761: LD_VAR 0 1
30765: PUSH
30766: FOR_TO
30767: IFFALSE 30803
// if value = array [ i ] then
30769: LD_VAR 0 2
30773: PUSH
30774: LD_VAR 0 1
30778: PUSH
30779: LD_VAR 0 4
30783: ARRAY
30784: EQUAL
30785: IFFALSE 30801
// begin result := i ;
30787: LD_ADDR_VAR 0 3
30791: PUSH
30792: LD_VAR 0 4
30796: ST_TO_ADDR
// exit ;
30797: POP
30798: POP
30799: GO 30805
// end ;
30801: GO 30766
30803: POP
30804: POP
// end ;
30805: LD_VAR 0 3
30809: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30810: LD_INT 0
30812: PPUSH
// vc_chassis := chassis ;
30813: LD_ADDR_OWVAR 37
30817: PUSH
30818: LD_VAR 0 1
30822: ST_TO_ADDR
// vc_engine := engine ;
30823: LD_ADDR_OWVAR 39
30827: PUSH
30828: LD_VAR 0 2
30832: ST_TO_ADDR
// vc_control := control ;
30833: LD_ADDR_OWVAR 38
30837: PUSH
30838: LD_VAR 0 3
30842: ST_TO_ADDR
// vc_weapon := weapon ;
30843: LD_ADDR_OWVAR 40
30847: PUSH
30848: LD_VAR 0 4
30852: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30853: LD_ADDR_OWVAR 41
30857: PUSH
30858: LD_VAR 0 5
30862: ST_TO_ADDR
// end ;
30863: LD_VAR 0 6
30867: RET
// export function WantPlant ( unit ) ; var task ; begin
30868: LD_INT 0
30870: PPUSH
30871: PPUSH
// result := false ;
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_INT 0
30879: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 437
30894: ST_TO_ADDR
// if task then
30895: LD_VAR 0 3
30899: IFFALSE 30927
// if task [ 1 ] [ 1 ] = p then
30901: LD_VAR 0 3
30905: PUSH
30906: LD_INT 1
30908: ARRAY
30909: PUSH
30910: LD_INT 1
30912: ARRAY
30913: PUSH
30914: LD_STRING p
30916: EQUAL
30917: IFFALSE 30927
// result := true ;
30919: LD_ADDR_VAR 0 2
30923: PUSH
30924: LD_INT 1
30926: ST_TO_ADDR
// end ;
30927: LD_VAR 0 2
30931: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30932: LD_INT 0
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
// if pos < 1 then
30938: LD_VAR 0 2
30942: PUSH
30943: LD_INT 1
30945: LESS
30946: IFFALSE 30950
// exit ;
30948: GO 31253
// if pos = 1 then
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: EQUAL
30958: IFFALSE 30991
// result := Replace ( arr , pos [ 1 ] , value ) else
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_VAR 0 1
30969: PPUSH
30970: LD_VAR 0 2
30974: PUSH
30975: LD_INT 1
30977: ARRAY
30978: PPUSH
30979: LD_VAR 0 3
30983: PPUSH
30984: CALL_OW 1
30988: ST_TO_ADDR
30989: GO 31253
// begin tmp := arr ;
30991: LD_ADDR_VAR 0 6
30995: PUSH
30996: LD_VAR 0 1
31000: ST_TO_ADDR
// s_arr := [ tmp ] ;
31001: LD_ADDR_VAR 0 7
31005: PUSH
31006: LD_VAR 0 6
31010: PUSH
31011: EMPTY
31012: LIST
31013: ST_TO_ADDR
// for i = 1 to pos - 1 do
31014: LD_ADDR_VAR 0 5
31018: PUSH
31019: DOUBLE
31020: LD_INT 1
31022: DEC
31023: ST_TO_ADDR
31024: LD_VAR 0 2
31028: PUSH
31029: LD_INT 1
31031: MINUS
31032: PUSH
31033: FOR_TO
31034: IFFALSE 31079
// begin tmp := tmp [ pos [ i ] ] ;
31036: LD_ADDR_VAR 0 6
31040: PUSH
31041: LD_VAR 0 6
31045: PUSH
31046: LD_VAR 0 2
31050: PUSH
31051: LD_VAR 0 5
31055: ARRAY
31056: ARRAY
31057: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31058: LD_ADDR_VAR 0 7
31062: PUSH
31063: LD_VAR 0 7
31067: PUSH
31068: LD_VAR 0 6
31072: PUSH
31073: EMPTY
31074: LIST
31075: ADD
31076: ST_TO_ADDR
// end ;
31077: GO 31033
31079: POP
31080: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31081: LD_ADDR_VAR 0 6
31085: PUSH
31086: LD_VAR 0 6
31090: PPUSH
31091: LD_VAR 0 2
31095: PUSH
31096: LD_VAR 0 2
31100: ARRAY
31101: PPUSH
31102: LD_VAR 0 3
31106: PPUSH
31107: CALL_OW 1
31111: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31112: LD_ADDR_VAR 0 7
31116: PUSH
31117: LD_VAR 0 7
31121: PPUSH
31122: LD_VAR 0 7
31126: PPUSH
31127: LD_VAR 0 6
31131: PPUSH
31132: CALL_OW 1
31136: ST_TO_ADDR
// for i = s_arr downto 2 do
31137: LD_ADDR_VAR 0 5
31141: PUSH
31142: DOUBLE
31143: LD_VAR 0 7
31147: INC
31148: ST_TO_ADDR
31149: LD_INT 2
31151: PUSH
31152: FOR_DOWNTO
31153: IFFALSE 31237
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31155: LD_ADDR_VAR 0 6
31159: PUSH
31160: LD_VAR 0 7
31164: PUSH
31165: LD_VAR 0 5
31169: PUSH
31170: LD_INT 1
31172: MINUS
31173: ARRAY
31174: PPUSH
31175: LD_VAR 0 2
31179: PUSH
31180: LD_VAR 0 5
31184: PUSH
31185: LD_INT 1
31187: MINUS
31188: ARRAY
31189: PPUSH
31190: LD_VAR 0 7
31194: PUSH
31195: LD_VAR 0 5
31199: ARRAY
31200: PPUSH
31201: CALL_OW 1
31205: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31206: LD_ADDR_VAR 0 7
31210: PUSH
31211: LD_VAR 0 7
31215: PPUSH
31216: LD_VAR 0 5
31220: PUSH
31221: LD_INT 1
31223: MINUS
31224: PPUSH
31225: LD_VAR 0 6
31229: PPUSH
31230: CALL_OW 1
31234: ST_TO_ADDR
// end ;
31235: GO 31152
31237: POP
31238: POP
// result := s_arr [ 1 ] ;
31239: LD_ADDR_VAR 0 4
31243: PUSH
31244: LD_VAR 0 7
31248: PUSH
31249: LD_INT 1
31251: ARRAY
31252: ST_TO_ADDR
// end ; end ;
31253: LD_VAR 0 4
31257: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31258: LD_INT 0
31260: PPUSH
31261: PPUSH
// if not list then
31262: LD_VAR 0 1
31266: NOT
31267: IFFALSE 31271
// exit ;
31269: GO 31362
// i := list [ pos1 ] ;
31271: LD_ADDR_VAR 0 5
31275: PUSH
31276: LD_VAR 0 1
31280: PUSH
31281: LD_VAR 0 2
31285: ARRAY
31286: ST_TO_ADDR
// if not i then
31287: LD_VAR 0 5
31291: NOT
31292: IFFALSE 31296
// exit ;
31294: GO 31362
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31296: LD_ADDR_VAR 0 1
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_VAR 0 2
31310: PPUSH
31311: LD_VAR 0 1
31315: PUSH
31316: LD_VAR 0 3
31320: ARRAY
31321: PPUSH
31322: CALL_OW 1
31326: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31327: LD_ADDR_VAR 0 1
31331: PUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: LD_VAR 0 5
31346: PPUSH
31347: CALL_OW 1
31351: ST_TO_ADDR
// result := list ;
31352: LD_ADDR_VAR 0 4
31356: PUSH
31357: LD_VAR 0 1
31361: ST_TO_ADDR
// end ;
31362: LD_VAR 0 4
31366: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31367: LD_INT 0
31369: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31370: LD_ADDR_VAR 0 5
31374: PUSH
31375: LD_VAR 0 1
31379: PPUSH
31380: CALL_OW 250
31384: PPUSH
31385: LD_VAR 0 1
31389: PPUSH
31390: CALL_OW 251
31394: PPUSH
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 3
31404: PPUSH
31405: LD_VAR 0 4
31409: PPUSH
31410: CALL 31788 0 5
31414: ST_TO_ADDR
// end ;
31415: LD_VAR 0 5
31419: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
// if not list or not unit then
31426: LD_VAR 0 2
31430: NOT
31431: PUSH
31432: LD_VAR 0 1
31436: NOT
31437: OR
31438: IFFALSE 31442
// exit ;
31440: GO 31783
// result := [ ] ;
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: EMPTY
31448: ST_TO_ADDR
// for i in list do
31449: LD_ADDR_VAR 0 6
31453: PUSH
31454: LD_VAR 0 2
31458: PUSH
31459: FOR_IN
31460: IFFALSE 31678
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31462: LD_ADDR_VAR 0 8
31466: PUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: LD_VAR 0 6
31476: PUSH
31477: LD_INT 1
31479: ARRAY
31480: PPUSH
31481: LD_VAR 0 6
31485: PUSH
31486: LD_INT 2
31488: ARRAY
31489: PPUSH
31490: CALL_OW 297
31494: ST_TO_ADDR
// if not Count ( result ) then
31495: LD_VAR 0 5
31499: PPUSH
31500: CALL 28072 0 1
31504: NOT
31505: IFFALSE 31538
// begin result := Join ( result , [ i , tmp ] ) ;
31507: LD_ADDR_VAR 0 5
31511: PUSH
31512: LD_VAR 0 5
31516: PPUSH
31517: LD_VAR 0 6
31521: PUSH
31522: LD_VAR 0 8
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PPUSH
31531: CALL 63681 0 2
31535: ST_TO_ADDR
// continue ;
31536: GO 31459
// end ; if result [ result ] [ 2 ] <= tmp then
31538: LD_VAR 0 5
31542: PUSH
31543: LD_VAR 0 5
31547: ARRAY
31548: PUSH
31549: LD_INT 2
31551: ARRAY
31552: PUSH
31553: LD_VAR 0 8
31557: LESSEQUAL
31558: IFFALSE 31591
// result := Join ( result , [ i , tmp ] ) else
31560: LD_ADDR_VAR 0 5
31564: PUSH
31565: LD_VAR 0 5
31569: PPUSH
31570: LD_VAR 0 6
31574: PUSH
31575: LD_VAR 0 8
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PPUSH
31584: CALL 63681 0 2
31588: ST_TO_ADDR
31589: GO 31676
// begin for j := 1 to Count ( result ) do
31591: LD_ADDR_VAR 0 7
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_VAR 0 5
31605: PPUSH
31606: CALL 28072 0 1
31610: PUSH
31611: FOR_TO
31612: IFFALSE 31674
// begin if tmp < result [ j ] [ 2 ] then
31614: LD_VAR 0 8
31618: PUSH
31619: LD_VAR 0 5
31623: PUSH
31624: LD_VAR 0 7
31628: ARRAY
31629: PUSH
31630: LD_INT 2
31632: ARRAY
31633: LESS
31634: IFFALSE 31672
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31636: LD_ADDR_VAR 0 5
31640: PUSH
31641: LD_VAR 0 5
31645: PPUSH
31646: LD_VAR 0 7
31650: PPUSH
31651: LD_VAR 0 6
31655: PUSH
31656: LD_VAR 0 8
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PPUSH
31665: CALL_OW 2
31669: ST_TO_ADDR
// break ;
31670: GO 31674
// end ; end ;
31672: GO 31611
31674: POP
31675: POP
// end ; end ;
31676: GO 31459
31678: POP
31679: POP
// if result and not asc then
31680: LD_VAR 0 5
31684: PUSH
31685: LD_VAR 0 3
31689: NOT
31690: AND
31691: IFFALSE 31708
// result := ReverseArray ( result ) ;
31693: LD_ADDR_VAR 0 5
31697: PUSH
31698: LD_VAR 0 5
31702: PPUSH
31703: CALL 58948 0 1
31707: ST_TO_ADDR
// tmp := [ ] ;
31708: LD_ADDR_VAR 0 8
31712: PUSH
31713: EMPTY
31714: ST_TO_ADDR
// if mode then
31715: LD_VAR 0 4
31719: IFFALSE 31783
// begin for i := 1 to result do
31721: LD_ADDR_VAR 0 6
31725: PUSH
31726: DOUBLE
31727: LD_INT 1
31729: DEC
31730: ST_TO_ADDR
31731: LD_VAR 0 5
31735: PUSH
31736: FOR_TO
31737: IFFALSE 31771
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31739: LD_ADDR_VAR 0 8
31743: PUSH
31744: LD_VAR 0 8
31748: PPUSH
31749: LD_VAR 0 5
31753: PUSH
31754: LD_VAR 0 6
31758: ARRAY
31759: PUSH
31760: LD_INT 1
31762: ARRAY
31763: PPUSH
31764: CALL 63681 0 2
31768: ST_TO_ADDR
31769: GO 31736
31771: POP
31772: POP
// result := tmp ;
31773: LD_ADDR_VAR 0 5
31777: PUSH
31778: LD_VAR 0 8
31782: ST_TO_ADDR
// end ; end ;
31783: LD_VAR 0 5
31787: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31788: LD_INT 0
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
// if not list then
31794: LD_VAR 0 3
31798: NOT
31799: IFFALSE 31803
// exit ;
31801: GO 32191
// result := [ ] ;
31803: LD_ADDR_VAR 0 6
31807: PUSH
31808: EMPTY
31809: ST_TO_ADDR
// for i in list do
31810: LD_ADDR_VAR 0 7
31814: PUSH
31815: LD_VAR 0 3
31819: PUSH
31820: FOR_IN
31821: IFFALSE 32023
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31823: LD_ADDR_VAR 0 9
31827: PUSH
31828: LD_VAR 0 7
31832: PPUSH
31833: LD_VAR 0 1
31837: PPUSH
31838: LD_VAR 0 2
31842: PPUSH
31843: CALL_OW 297
31847: ST_TO_ADDR
// if not result then
31848: LD_VAR 0 6
31852: NOT
31853: IFFALSE 31879
// result := [ [ i , tmp ] ] else
31855: LD_ADDR_VAR 0 6
31859: PUSH
31860: LD_VAR 0 7
31864: PUSH
31865: LD_VAR 0 9
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: EMPTY
31875: LIST
31876: ST_TO_ADDR
31877: GO 32021
// begin if result [ result ] [ 2 ] <= tmp then
31879: LD_VAR 0 6
31883: PUSH
31884: LD_VAR 0 6
31888: ARRAY
31889: PUSH
31890: LD_INT 2
31892: ARRAY
31893: PUSH
31894: LD_VAR 0 9
31898: LESSEQUAL
31899: IFFALSE 31941
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31901: LD_ADDR_VAR 0 6
31905: PUSH
31906: LD_VAR 0 6
31910: PPUSH
31911: LD_VAR 0 6
31915: PUSH
31916: LD_INT 1
31918: PLUS
31919: PPUSH
31920: LD_VAR 0 7
31924: PUSH
31925: LD_VAR 0 9
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PPUSH
31934: CALL_OW 2
31938: ST_TO_ADDR
31939: GO 32021
// for j := 1 to result do
31941: LD_ADDR_VAR 0 8
31945: PUSH
31946: DOUBLE
31947: LD_INT 1
31949: DEC
31950: ST_TO_ADDR
31951: LD_VAR 0 6
31955: PUSH
31956: FOR_TO
31957: IFFALSE 32019
// begin if tmp < result [ j ] [ 2 ] then
31959: LD_VAR 0 9
31963: PUSH
31964: LD_VAR 0 6
31968: PUSH
31969: LD_VAR 0 8
31973: ARRAY
31974: PUSH
31975: LD_INT 2
31977: ARRAY
31978: LESS
31979: IFFALSE 32017
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31981: LD_ADDR_VAR 0 6
31985: PUSH
31986: LD_VAR 0 6
31990: PPUSH
31991: LD_VAR 0 8
31995: PPUSH
31996: LD_VAR 0 7
32000: PUSH
32001: LD_VAR 0 9
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PPUSH
32010: CALL_OW 2
32014: ST_TO_ADDR
// break ;
32015: GO 32019
// end ; end ;
32017: GO 31956
32019: POP
32020: POP
// end ; end ;
32021: GO 31820
32023: POP
32024: POP
// if result and not asc then
32025: LD_VAR 0 6
32029: PUSH
32030: LD_VAR 0 4
32034: NOT
32035: AND
32036: IFFALSE 32111
// begin tmp := result ;
32038: LD_ADDR_VAR 0 9
32042: PUSH
32043: LD_VAR 0 6
32047: ST_TO_ADDR
// for i = tmp downto 1 do
32048: LD_ADDR_VAR 0 7
32052: PUSH
32053: DOUBLE
32054: LD_VAR 0 9
32058: INC
32059: ST_TO_ADDR
32060: LD_INT 1
32062: PUSH
32063: FOR_DOWNTO
32064: IFFALSE 32109
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32066: LD_ADDR_VAR 0 6
32070: PUSH
32071: LD_VAR 0 6
32075: PPUSH
32076: LD_VAR 0 9
32080: PUSH
32081: LD_VAR 0 7
32085: MINUS
32086: PUSH
32087: LD_INT 1
32089: PLUS
32090: PPUSH
32091: LD_VAR 0 9
32095: PUSH
32096: LD_VAR 0 7
32100: ARRAY
32101: PPUSH
32102: CALL_OW 1
32106: ST_TO_ADDR
32107: GO 32063
32109: POP
32110: POP
// end ; tmp := [ ] ;
32111: LD_ADDR_VAR 0 9
32115: PUSH
32116: EMPTY
32117: ST_TO_ADDR
// if mode then
32118: LD_VAR 0 5
32122: IFFALSE 32191
// begin for i = 1 to result do
32124: LD_ADDR_VAR 0 7
32128: PUSH
32129: DOUBLE
32130: LD_INT 1
32132: DEC
32133: ST_TO_ADDR
32134: LD_VAR 0 6
32138: PUSH
32139: FOR_TO
32140: IFFALSE 32179
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32142: LD_ADDR_VAR 0 9
32146: PUSH
32147: LD_VAR 0 9
32151: PPUSH
32152: LD_VAR 0 7
32156: PPUSH
32157: LD_VAR 0 6
32161: PUSH
32162: LD_VAR 0 7
32166: ARRAY
32167: PUSH
32168: LD_INT 1
32170: ARRAY
32171: PPUSH
32172: CALL_OW 1
32176: ST_TO_ADDR
32177: GO 32139
32179: POP
32180: POP
// result := tmp ;
32181: LD_ADDR_VAR 0 6
32185: PUSH
32186: LD_VAR 0 9
32190: ST_TO_ADDR
// end ; end ;
32191: LD_VAR 0 6
32195: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32196: LD_INT 0
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
32203: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32204: LD_ADDR_VAR 0 5
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// if not x or not y then
32226: LD_VAR 0 2
32230: NOT
32231: PUSH
32232: LD_VAR 0 3
32236: NOT
32237: OR
32238: IFFALSE 32242
// exit ;
32240: GO 33892
// if not range then
32242: LD_VAR 0 4
32246: NOT
32247: IFFALSE 32257
// range := 10 ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_INT 10
32256: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32257: LD_ADDR_VAR 0 8
32261: PUSH
32262: LD_INT 81
32264: PUSH
32265: LD_VAR 0 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 92
32276: PUSH
32277: LD_VAR 0 2
32281: PUSH
32282: LD_VAR 0 3
32286: PUSH
32287: LD_VAR 0 4
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 21
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 69
32324: ST_TO_ADDR
// if not tmp then
32325: LD_VAR 0 8
32329: NOT
32330: IFFALSE 32334
// exit ;
32332: GO 33892
// for i in tmp do
32334: LD_ADDR_VAR 0 6
32338: PUSH
32339: LD_VAR 0 8
32343: PUSH
32344: FOR_IN
32345: IFFALSE 33867
// begin points := [ 0 , 0 , 0 ] ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
// bpoints := 1 ;
32366: LD_ADDR_VAR 0 10
32370: PUSH
32371: LD_INT 1
32373: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32374: LD_VAR 0 6
32378: PPUSH
32379: CALL_OW 247
32383: PUSH
32384: LD_INT 1
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32970
32392: POP
// begin if GetClass ( i ) = 1 then
32393: LD_VAR 0 6
32397: PPUSH
32398: CALL_OW 257
32402: PUSH
32403: LD_INT 1
32405: EQUAL
32406: IFFALSE 32427
// points := [ 10 , 5 , 3 ] ;
32408: LD_ADDR_VAR 0 9
32412: PUSH
32413: LD_INT 10
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32427: LD_VAR 0 6
32431: PPUSH
32432: CALL_OW 257
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 4
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: LIST
32450: IN
32451: IFFALSE 32472
// points := [ 3 , 2 , 1 ] ;
32453: LD_ADDR_VAR 0 9
32457: PUSH
32458: LD_INT 3
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32472: LD_VAR 0 6
32476: PPUSH
32477: CALL_OW 257
32481: PUSH
32482: LD_INT 5
32484: EQUAL
32485: IFFALSE 32506
// points := [ 130 , 5 , 2 ] ;
32487: LD_ADDR_VAR 0 9
32491: PUSH
32492: LD_INT 130
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32506: LD_VAR 0 6
32510: PPUSH
32511: CALL_OW 257
32515: PUSH
32516: LD_INT 8
32518: EQUAL
32519: IFFALSE 32540
// points := [ 35 , 35 , 30 ] ;
32521: LD_ADDR_VAR 0 9
32525: PUSH
32526: LD_INT 35
32528: PUSH
32529: LD_INT 35
32531: PUSH
32532: LD_INT 30
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32540: LD_VAR 0 6
32544: PPUSH
32545: CALL_OW 257
32549: PUSH
32550: LD_INT 9
32552: EQUAL
32553: IFFALSE 32574
// points := [ 20 , 55 , 40 ] ;
32555: LD_ADDR_VAR 0 9
32559: PUSH
32560: LD_INT 20
32562: PUSH
32563: LD_INT 55
32565: PUSH
32566: LD_INT 40
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32574: LD_VAR 0 6
32578: PPUSH
32579: CALL_OW 257
32583: PUSH
32584: LD_INT 12
32586: PUSH
32587: LD_INT 16
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: IN
32594: IFFALSE 32615
// points := [ 5 , 3 , 2 ] ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32615: LD_VAR 0 6
32619: PPUSH
32620: CALL_OW 257
32624: PUSH
32625: LD_INT 17
32627: EQUAL
32628: IFFALSE 32649
// points := [ 100 , 50 , 75 ] ;
32630: LD_ADDR_VAR 0 9
32634: PUSH
32635: LD_INT 100
32637: PUSH
32638: LD_INT 50
32640: PUSH
32641: LD_INT 75
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32649: LD_VAR 0 6
32653: PPUSH
32654: CALL_OW 257
32658: PUSH
32659: LD_INT 15
32661: EQUAL
32662: IFFALSE 32683
// points := [ 10 , 5 , 3 ] ;
32664: LD_ADDR_VAR 0 9
32668: PUSH
32669: LD_INT 10
32671: PUSH
32672: LD_INT 5
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32683: LD_VAR 0 6
32687: PPUSH
32688: CALL_OW 257
32692: PUSH
32693: LD_INT 14
32695: EQUAL
32696: IFFALSE 32717
// points := [ 10 , 0 , 0 ] ;
32698: LD_ADDR_VAR 0 9
32702: PUSH
32703: LD_INT 10
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32717: LD_VAR 0 6
32721: PPUSH
32722: CALL_OW 257
32726: PUSH
32727: LD_INT 11
32729: EQUAL
32730: IFFALSE 32751
// points := [ 30 , 10 , 5 ] ;
32732: LD_ADDR_VAR 0 9
32736: PUSH
32737: LD_INT 30
32739: PUSH
32740: LD_INT 10
32742: PUSH
32743: LD_INT 5
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32751: LD_VAR 0 1
32755: PPUSH
32756: LD_INT 5
32758: PPUSH
32759: CALL_OW 321
32763: PUSH
32764: LD_INT 2
32766: EQUAL
32767: IFFALSE 32784
// bpoints := bpoints * 1.8 ;
32769: LD_ADDR_VAR 0 10
32773: PUSH
32774: LD_VAR 0 10
32778: PUSH
32779: LD_REAL  1.80000000000000E+0000
32782: MUL
32783: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 257
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: IN
32812: PUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_INT 51
32820: PPUSH
32821: CALL_OW 321
32825: PUSH
32826: LD_INT 2
32828: EQUAL
32829: AND
32830: IFFALSE 32847
// bpoints := bpoints * 1.2 ;
32832: LD_ADDR_VAR 0 10
32836: PUSH
32837: LD_VAR 0 10
32841: PUSH
32842: LD_REAL  1.20000000000000E+0000
32845: MUL
32846: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32847: LD_VAR 0 6
32851: PPUSH
32852: CALL_OW 257
32856: PUSH
32857: LD_INT 5
32859: PUSH
32860: LD_INT 7
32862: PUSH
32863: LD_INT 9
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: IN
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: LD_INT 52
32879: PPUSH
32880: CALL_OW 321
32884: PUSH
32885: LD_INT 2
32887: EQUAL
32888: AND
32889: IFFALSE 32906
// bpoints := bpoints * 1.5 ;
32891: LD_ADDR_VAR 0 10
32895: PUSH
32896: LD_VAR 0 10
32900: PUSH
32901: LD_REAL  1.50000000000000E+0000
32904: MUL
32905: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32906: LD_VAR 0 1
32910: PPUSH
32911: LD_INT 66
32913: PPUSH
32914: CALL_OW 321
32918: PUSH
32919: LD_INT 2
32921: EQUAL
32922: IFFALSE 32939
// bpoints := bpoints * 1.1 ;
32924: LD_ADDR_VAR 0 10
32928: PUSH
32929: LD_VAR 0 10
32933: PUSH
32934: LD_REAL  1.10000000000000E+0000
32937: MUL
32938: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32939: LD_ADDR_VAR 0 10
32943: PUSH
32944: LD_VAR 0 10
32948: PUSH
32949: LD_VAR 0 6
32953: PPUSH
32954: LD_INT 1
32956: PPUSH
32957: CALL_OW 259
32961: PUSH
32962: LD_REAL  1.15000000000000E+0000
32965: MUL
32966: MUL
32967: ST_TO_ADDR
// end ; unit_vehicle :
32968: GO 33796
32970: LD_INT 2
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 33784
32978: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32979: LD_VAR 0 6
32983: PPUSH
32984: CALL_OW 264
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: LD_INT 42
32994: PUSH
32995: LD_INT 24
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: IN
33003: IFFALSE 33024
// points := [ 25 , 5 , 3 ] ;
33005: LD_ADDR_VAR 0 9
33009: PUSH
33010: LD_INT 25
33012: PUSH
33013: LD_INT 5
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33024: LD_VAR 0 6
33028: PPUSH
33029: CALL_OW 264
33033: PUSH
33034: LD_INT 4
33036: PUSH
33037: LD_INT 43
33039: PUSH
33040: LD_INT 25
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: IN
33048: IFFALSE 33069
// points := [ 40 , 15 , 5 ] ;
33050: LD_ADDR_VAR 0 9
33054: PUSH
33055: LD_INT 40
33057: PUSH
33058: LD_INT 15
33060: PUSH
33061: LD_INT 5
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33069: LD_VAR 0 6
33073: PPUSH
33074: CALL_OW 264
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 23
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: IN
33089: IFFALSE 33110
// points := [ 7 , 25 , 8 ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: LD_INT 7
33098: PUSH
33099: LD_INT 25
33101: PUSH
33102: LD_INT 8
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33110: LD_VAR 0 6
33114: PPUSH
33115: CALL_OW 264
33119: PUSH
33120: LD_INT 5
33122: PUSH
33123: LD_INT 27
33125: PUSH
33126: LD_INT 44
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: IN
33134: IFFALSE 33155
// points := [ 14 , 50 , 16 ] ;
33136: LD_ADDR_VAR 0 9
33140: PUSH
33141: LD_INT 14
33143: PUSH
33144: LD_INT 50
33146: PUSH
33147: LD_INT 16
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33155: LD_VAR 0 6
33159: PPUSH
33160: CALL_OW 264
33164: PUSH
33165: LD_INT 6
33167: PUSH
33168: LD_INT 46
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: IN
33175: IFFALSE 33196
// points := [ 32 , 120 , 70 ] ;
33177: LD_ADDR_VAR 0 9
33181: PUSH
33182: LD_INT 32
33184: PUSH
33185: LD_INT 120
33187: PUSH
33188: LD_INT 70
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33196: LD_VAR 0 6
33200: PPUSH
33201: CALL_OW 264
33205: PUSH
33206: LD_INT 7
33208: PUSH
33209: LD_INT 28
33211: PUSH
33212: LD_INT 45
33214: PUSH
33215: LD_INT 92
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: IN
33224: IFFALSE 33245
// points := [ 35 , 20 , 45 ] ;
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_INT 35
33233: PUSH
33234: LD_INT 20
33236: PUSH
33237: LD_INT 45
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33245: LD_VAR 0 6
33249: PPUSH
33250: CALL_OW 264
33254: PUSH
33255: LD_INT 47
33257: PUSH
33258: EMPTY
33259: LIST
33260: IN
33261: IFFALSE 33282
// points := [ 67 , 45 , 75 ] ;
33263: LD_ADDR_VAR 0 9
33267: PUSH
33268: LD_INT 67
33270: PUSH
33271: LD_INT 45
33273: PUSH
33274: LD_INT 75
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: LIST
33281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33282: LD_VAR 0 6
33286: PPUSH
33287: CALL_OW 264
33291: PUSH
33292: LD_INT 26
33294: PUSH
33295: EMPTY
33296: LIST
33297: IN
33298: IFFALSE 33319
// points := [ 120 , 30 , 80 ] ;
33300: LD_ADDR_VAR 0 9
33304: PUSH
33305: LD_INT 120
33307: PUSH
33308: LD_INT 30
33310: PUSH
33311: LD_INT 80
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33319: LD_VAR 0 6
33323: PPUSH
33324: CALL_OW 264
33328: PUSH
33329: LD_INT 22
33331: PUSH
33332: EMPTY
33333: LIST
33334: IN
33335: IFFALSE 33356
// points := [ 40 , 1 , 1 ] ;
33337: LD_ADDR_VAR 0 9
33341: PUSH
33342: LD_INT 40
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33356: LD_VAR 0 6
33360: PPUSH
33361: CALL_OW 264
33365: PUSH
33366: LD_INT 29
33368: PUSH
33369: EMPTY
33370: LIST
33371: IN
33372: IFFALSE 33393
// points := [ 70 , 200 , 400 ] ;
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: LD_INT 70
33381: PUSH
33382: LD_INT 200
33384: PUSH
33385: LD_INT 400
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33393: LD_VAR 0 6
33397: PPUSH
33398: CALL_OW 264
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: LD_INT 53
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: IN
33413: IFFALSE 33434
// points := [ 40 , 10 , 20 ] ;
33415: LD_ADDR_VAR 0 9
33419: PUSH
33420: LD_INT 40
33422: PUSH
33423: LD_INT 10
33425: PUSH
33426: LD_INT 20
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33434: LD_VAR 0 6
33438: PPUSH
33439: CALL_OW 264
33443: PUSH
33444: LD_INT 9
33446: PUSH
33447: EMPTY
33448: LIST
33449: IN
33450: IFFALSE 33471
// points := [ 5 , 70 , 20 ] ;
33452: LD_ADDR_VAR 0 9
33456: PUSH
33457: LD_INT 5
33459: PUSH
33460: LD_INT 70
33462: PUSH
33463: LD_INT 20
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33471: LD_VAR 0 6
33475: PPUSH
33476: CALL_OW 264
33480: PUSH
33481: LD_INT 10
33483: PUSH
33484: EMPTY
33485: LIST
33486: IN
33487: IFFALSE 33508
// points := [ 35 , 110 , 70 ] ;
33489: LD_ADDR_VAR 0 9
33493: PUSH
33494: LD_INT 35
33496: PUSH
33497: LD_INT 110
33499: PUSH
33500: LD_INT 70
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33508: LD_VAR 0 6
33512: PPUSH
33513: CALL_OW 265
33517: PUSH
33518: LD_INT 25
33520: EQUAL
33521: IFFALSE 33542
// points := [ 80 , 65 , 100 ] ;
33523: LD_ADDR_VAR 0 9
33527: PUSH
33528: LD_INT 80
33530: PUSH
33531: LD_INT 65
33533: PUSH
33534: LD_INT 100
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33542: LD_VAR 0 6
33546: PPUSH
33547: CALL_OW 263
33551: PUSH
33552: LD_INT 1
33554: EQUAL
33555: IFFALSE 33590
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33557: LD_ADDR_VAR 0 10
33561: PUSH
33562: LD_VAR 0 10
33566: PUSH
33567: LD_VAR 0 6
33571: PPUSH
33572: CALL_OW 311
33576: PPUSH
33577: LD_INT 3
33579: PPUSH
33580: CALL_OW 259
33584: PUSH
33585: LD_INT 4
33587: MUL
33588: MUL
33589: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33590: LD_VAR 0 6
33594: PPUSH
33595: CALL_OW 263
33599: PUSH
33600: LD_INT 2
33602: EQUAL
33603: IFFALSE 33654
// begin j := IsControledBy ( i ) ;
33605: LD_ADDR_VAR 0 7
33609: PUSH
33610: LD_VAR 0 6
33614: PPUSH
33615: CALL_OW 312
33619: ST_TO_ADDR
// if j then
33620: LD_VAR 0 7
33624: IFFALSE 33654
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33626: LD_ADDR_VAR 0 10
33630: PUSH
33631: LD_VAR 0 10
33635: PUSH
33636: LD_VAR 0 7
33640: PPUSH
33641: LD_INT 3
33643: PPUSH
33644: CALL_OW 259
33648: PUSH
33649: LD_INT 3
33651: MUL
33652: MUL
33653: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33654: LD_VAR 0 6
33658: PPUSH
33659: CALL_OW 264
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 6
33669: PUSH
33670: LD_INT 46
33672: PUSH
33673: LD_INT 44
33675: PUSH
33676: LD_INT 47
33678: PUSH
33679: LD_INT 45
33681: PUSH
33682: LD_INT 28
33684: PUSH
33685: LD_INT 7
33687: PUSH
33688: LD_INT 27
33690: PUSH
33691: LD_INT 29
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: IN
33706: PUSH
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_INT 52
33714: PPUSH
33715: CALL_OW 321
33719: PUSH
33720: LD_INT 2
33722: EQUAL
33723: AND
33724: IFFALSE 33741
// bpoints := bpoints * 1.2 ;
33726: LD_ADDR_VAR 0 10
33730: PUSH
33731: LD_VAR 0 10
33735: PUSH
33736: LD_REAL  1.20000000000000E+0000
33739: MUL
33740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33741: LD_VAR 0 6
33745: PPUSH
33746: CALL_OW 264
33750: PUSH
33751: LD_INT 6
33753: PUSH
33754: LD_INT 46
33756: PUSH
33757: LD_INT 47
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: IN
33765: IFFALSE 33782
// bpoints := bpoints * 1.2 ;
33767: LD_ADDR_VAR 0 10
33771: PUSH
33772: LD_VAR 0 10
33776: PUSH
33777: LD_REAL  1.20000000000000E+0000
33780: MUL
33781: ST_TO_ADDR
// end ; unit_building :
33782: GO 33796
33784: LD_INT 3
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33792
33790: GO 33795
33792: POP
// ; end ;
33793: GO 33796
33795: POP
// for j = 1 to 3 do
33796: LD_ADDR_VAR 0 7
33800: PUSH
33801: DOUBLE
33802: LD_INT 1
33804: DEC
33805: ST_TO_ADDR
33806: LD_INT 3
33808: PUSH
33809: FOR_TO
33810: IFFALSE 33863
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33812: LD_ADDR_VAR 0 5
33816: PUSH
33817: LD_VAR 0 5
33821: PPUSH
33822: LD_VAR 0 7
33826: PPUSH
33827: LD_VAR 0 5
33831: PUSH
33832: LD_VAR 0 7
33836: ARRAY
33837: PUSH
33838: LD_VAR 0 9
33842: PUSH
33843: LD_VAR 0 7
33847: ARRAY
33848: PUSH
33849: LD_VAR 0 10
33853: MUL
33854: PLUS
33855: PPUSH
33856: CALL_OW 1
33860: ST_TO_ADDR
33861: GO 33809
33863: POP
33864: POP
// end ;
33865: GO 32344
33867: POP
33868: POP
// result := Replace ( result , 4 , tmp ) ;
33869: LD_ADDR_VAR 0 5
33873: PUSH
33874: LD_VAR 0 5
33878: PPUSH
33879: LD_INT 4
33881: PPUSH
33882: LD_VAR 0 8
33886: PPUSH
33887: CALL_OW 1
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 5
33896: RET
// export function DangerAtRange ( unit , range ) ; begin
33897: LD_INT 0
33899: PPUSH
// if not unit then
33900: LD_VAR 0 1
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 33954
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 255
33923: PPUSH
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL_OW 250
33933: PPUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 251
33943: PPUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: CALL 32196 0 4
33953: ST_TO_ADDR
// end ;
33954: LD_VAR 0 3
33958: RET
// export function DangerInArea ( side , area ) ; begin
33959: LD_INT 0
33961: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33962: LD_ADDR_VAR 0 3
33966: PUSH
33967: LD_VAR 0 2
33971: PPUSH
33972: LD_INT 81
33974: PUSH
33975: LD_VAR 0 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PPUSH
33984: CALL_OW 70
33988: ST_TO_ADDR
// end ;
33989: LD_VAR 0 3
33993: RET
// export function IsExtension ( b ) ; begin
33994: LD_INT 0
33996: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33997: LD_ADDR_VAR 0 2
34001: PUSH
34002: LD_VAR 0 1
34006: PUSH
34007: LD_INT 23
34009: PUSH
34010: LD_INT 20
34012: PUSH
34013: LD_INT 22
34015: PUSH
34016: LD_INT 17
34018: PUSH
34019: LD_INT 24
34021: PUSH
34022: LD_INT 21
34024: PUSH
34025: LD_INT 19
34027: PUSH
34028: LD_INT 16
34030: PUSH
34031: LD_INT 25
34033: PUSH
34034: LD_INT 18
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: IN
34049: ST_TO_ADDR
// end ;
34050: LD_VAR 0 2
34054: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34055: LD_INT 0
34057: PPUSH
34058: PPUSH
34059: PPUSH
// result := [ ] ;
34060: LD_ADDR_VAR 0 4
34064: PUSH
34065: EMPTY
34066: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34067: LD_ADDR_VAR 0 5
34071: PUSH
34072: LD_VAR 0 2
34076: PPUSH
34077: LD_INT 21
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PPUSH
34087: CALL_OW 70
34091: ST_TO_ADDR
// if not tmp then
34092: LD_VAR 0 5
34096: NOT
34097: IFFALSE 34101
// exit ;
34099: GO 34165
// if checkLink then
34101: LD_VAR 0 3
34105: IFFALSE 34155
// begin for i in tmp do
34107: LD_ADDR_VAR 0 6
34111: PUSH
34112: LD_VAR 0 5
34116: PUSH
34117: FOR_IN
34118: IFFALSE 34153
// if GetBase ( i ) <> base then
34120: LD_VAR 0 6
34124: PPUSH
34125: CALL_OW 274
34129: PUSH
34130: LD_VAR 0 1
34134: NONEQUAL
34135: IFFALSE 34151
// ComLinkToBase ( base , i ) ;
34137: LD_VAR 0 1
34141: PPUSH
34142: LD_VAR 0 6
34146: PPUSH
34147: CALL_OW 169
34151: GO 34117
34153: POP
34154: POP
// end ; result := tmp ;
34155: LD_ADDR_VAR 0 4
34159: PUSH
34160: LD_VAR 0 5
34164: ST_TO_ADDR
// end ;
34165: LD_VAR 0 4
34169: RET
// export function ComComplete ( units , b ) ; var i ; begin
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
// if not units then
34174: LD_VAR 0 1
34178: NOT
34179: IFFALSE 34183
// exit ;
34181: GO 34273
// for i in units do
34183: LD_ADDR_VAR 0 4
34187: PUSH
34188: LD_VAR 0 1
34192: PUSH
34193: FOR_IN
34194: IFFALSE 34271
// if BuildingStatus ( b ) = bs_build then
34196: LD_VAR 0 2
34200: PPUSH
34201: CALL_OW 461
34205: PUSH
34206: LD_INT 1
34208: EQUAL
34209: IFFALSE 34269
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34211: LD_VAR 0 4
34215: PPUSH
34216: LD_STRING h
34218: PUSH
34219: LD_VAR 0 2
34223: PPUSH
34224: CALL_OW 250
34228: PUSH
34229: LD_VAR 0 2
34233: PPUSH
34234: CALL_OW 251
34238: PUSH
34239: LD_VAR 0 2
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: PPUSH
34265: CALL_OW 446
34269: GO 34193
34271: POP
34272: POP
// end ;
34273: LD_VAR 0 3
34277: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34278: LD_INT 0
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34286: LD_VAR 0 1
34290: NOT
34291: PUSH
34292: LD_VAR 0 1
34296: PPUSH
34297: CALL_OW 263
34301: PUSH
34302: LD_INT 2
34304: NONEQUAL
34305: OR
34306: IFFALSE 34310
// exit ;
34308: GO 34626
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34310: LD_ADDR_VAR 0 6
34314: PUSH
34315: LD_INT 22
34317: PUSH
34318: LD_VAR 0 1
34322: PPUSH
34323: CALL_OW 255
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 30
34337: PUSH
34338: LD_INT 36
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 34
34347: PUSH
34348: LD_INT 31
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PPUSH
34364: CALL_OW 69
34368: ST_TO_ADDR
// if not tmp then
34369: LD_VAR 0 6
34373: NOT
34374: IFFALSE 34378
// exit ;
34376: GO 34626
// result := [ ] ;
34378: LD_ADDR_VAR 0 2
34382: PUSH
34383: EMPTY
34384: ST_TO_ADDR
// for i in tmp do
34385: LD_ADDR_VAR 0 3
34389: PUSH
34390: LD_VAR 0 6
34394: PUSH
34395: FOR_IN
34396: IFFALSE 34467
// begin t := UnitsInside ( i ) ;
34398: LD_ADDR_VAR 0 4
34402: PUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: CALL_OW 313
34412: ST_TO_ADDR
// if t then
34413: LD_VAR 0 4
34417: IFFALSE 34465
// for j in t do
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: LD_VAR 0 4
34428: PUSH
34429: FOR_IN
34430: IFFALSE 34463
// result := Replace ( result , result + 1 , j ) ;
34432: LD_ADDR_VAR 0 2
34436: PUSH
34437: LD_VAR 0 2
34441: PPUSH
34442: LD_VAR 0 2
34446: PUSH
34447: LD_INT 1
34449: PLUS
34450: PPUSH
34451: LD_VAR 0 7
34455: PPUSH
34456: CALL_OW 1
34460: ST_TO_ADDR
34461: GO 34429
34463: POP
34464: POP
// end ;
34465: GO 34395
34467: POP
34468: POP
// if not result then
34469: LD_VAR 0 2
34473: NOT
34474: IFFALSE 34478
// exit ;
34476: GO 34626
// mech := result [ 1 ] ;
34478: LD_ADDR_VAR 0 5
34482: PUSH
34483: LD_VAR 0 2
34487: PUSH
34488: LD_INT 1
34490: ARRAY
34491: ST_TO_ADDR
// if result > 1 then
34492: LD_VAR 0 2
34496: PUSH
34497: LD_INT 1
34499: GREATER
34500: IFFALSE 34612
// begin for i = 2 to result do
34502: LD_ADDR_VAR 0 3
34506: PUSH
34507: DOUBLE
34508: LD_INT 2
34510: DEC
34511: ST_TO_ADDR
34512: LD_VAR 0 2
34516: PUSH
34517: FOR_TO
34518: IFFALSE 34610
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_VAR 0 2
34529: PUSH
34530: LD_VAR 0 3
34534: ARRAY
34535: PPUSH
34536: LD_INT 3
34538: PPUSH
34539: CALL_OW 259
34543: PUSH
34544: LD_VAR 0 2
34548: PUSH
34549: LD_VAR 0 3
34553: ARRAY
34554: PPUSH
34555: CALL_OW 432
34559: MINUS
34560: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34561: LD_VAR 0 4
34565: PUSH
34566: LD_VAR 0 5
34570: PPUSH
34571: LD_INT 3
34573: PPUSH
34574: CALL_OW 259
34578: PUSH
34579: LD_VAR 0 5
34583: PPUSH
34584: CALL_OW 432
34588: MINUS
34589: GREATEREQUAL
34590: IFFALSE 34608
// mech := result [ i ] ;
34592: LD_ADDR_VAR 0 5
34596: PUSH
34597: LD_VAR 0 2
34601: PUSH
34602: LD_VAR 0 3
34606: ARRAY
34607: ST_TO_ADDR
// end ;
34608: GO 34517
34610: POP
34611: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34612: LD_VAR 0 1
34616: PPUSH
34617: LD_VAR 0 5
34621: PPUSH
34622: CALL_OW 135
// end ;
34626: LD_VAR 0 2
34630: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34631: LD_INT 0
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
// result := [ ] ;
34646: LD_ADDR_VAR 0 7
34650: PUSH
34651: EMPTY
34652: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 266
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: IN
34673: NOT
34674: IFFALSE 34678
// exit ;
34676: GO 36312
// if name then
34678: LD_VAR 0 3
34682: IFFALSE 34698
// SetBName ( base_dep , name ) ;
34684: LD_VAR 0 1
34688: PPUSH
34689: LD_VAR 0 3
34693: PPUSH
34694: CALL_OW 500
// base := GetBase ( base_dep ) ;
34698: LD_ADDR_VAR 0 15
34702: PUSH
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 274
34712: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34713: LD_ADDR_VAR 0 16
34717: PUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 255
34727: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34728: LD_ADDR_VAR 0 17
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 248
34742: ST_TO_ADDR
// if sources then
34743: LD_VAR 0 5
34747: IFFALSE 34794
// for i = 1 to 3 do
34749: LD_ADDR_VAR 0 8
34753: PUSH
34754: DOUBLE
34755: LD_INT 1
34757: DEC
34758: ST_TO_ADDR
34759: LD_INT 3
34761: PUSH
34762: FOR_TO
34763: IFFALSE 34792
// AddResourceType ( base , i , sources [ i ] ) ;
34765: LD_VAR 0 15
34769: PPUSH
34770: LD_VAR 0 8
34774: PPUSH
34775: LD_VAR 0 5
34779: PUSH
34780: LD_VAR 0 8
34784: ARRAY
34785: PPUSH
34786: CALL_OW 276
34790: GO 34762
34792: POP
34793: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34794: LD_ADDR_VAR 0 18
34798: PUSH
34799: LD_VAR 0 15
34803: PPUSH
34804: LD_VAR 0 2
34808: PPUSH
34809: LD_INT 1
34811: PPUSH
34812: CALL 34055 0 3
34816: ST_TO_ADDR
// InitHc ;
34817: CALL_OW 19
// InitUc ;
34821: CALL_OW 18
// uc_side := side ;
34825: LD_ADDR_OWVAR 20
34829: PUSH
34830: LD_VAR 0 16
34834: ST_TO_ADDR
// uc_nation := nation ;
34835: LD_ADDR_OWVAR 21
34839: PUSH
34840: LD_VAR 0 17
34844: ST_TO_ADDR
// if buildings then
34845: LD_VAR 0 18
34849: IFFALSE 36171
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34851: LD_ADDR_VAR 0 19
34855: PUSH
34856: LD_VAR 0 18
34860: PPUSH
34861: LD_INT 2
34863: PUSH
34864: LD_INT 30
34866: PUSH
34867: LD_INT 29
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 30
34876: PUSH
34877: LD_INT 30
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: PPUSH
34889: CALL_OW 72
34893: ST_TO_ADDR
// if tmp then
34894: LD_VAR 0 19
34898: IFFALSE 34946
// for i in tmp do
34900: LD_ADDR_VAR 0 8
34904: PUSH
34905: LD_VAR 0 19
34909: PUSH
34910: FOR_IN
34911: IFFALSE 34944
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34913: LD_VAR 0 8
34917: PPUSH
34918: CALL_OW 250
34922: PPUSH
34923: LD_VAR 0 8
34927: PPUSH
34928: CALL_OW 251
34932: PPUSH
34933: LD_VAR 0 16
34937: PPUSH
34938: CALL_OW 441
34942: GO 34910
34944: POP
34945: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34946: LD_VAR 0 18
34950: PPUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 30
34956: PUSH
34957: LD_INT 32
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 30
34966: PUSH
34967: LD_INT 33
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: PPUSH
34979: CALL_OW 72
34983: IFFALSE 35071
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34985: LD_ADDR_VAR 0 8
34989: PUSH
34990: LD_VAR 0 18
34994: PPUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 30
35000: PUSH
35001: LD_INT 32
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 30
35010: PUSH
35011: LD_INT 33
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: PPUSH
35023: CALL_OW 72
35027: PUSH
35028: FOR_IN
35029: IFFALSE 35069
// begin if not GetBWeapon ( i ) then
35031: LD_VAR 0 8
35035: PPUSH
35036: CALL_OW 269
35040: NOT
35041: IFFALSE 35067
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35043: LD_VAR 0 8
35047: PPUSH
35048: LD_VAR 0 8
35052: PPUSH
35053: LD_VAR 0 2
35057: PPUSH
35058: CALL 36317 0 2
35062: PPUSH
35063: CALL_OW 431
// end ;
35067: GO 35028
35069: POP
35070: POP
// end ; for i = 1 to personel do
35071: LD_ADDR_VAR 0 8
35075: PUSH
35076: DOUBLE
35077: LD_INT 1
35079: DEC
35080: ST_TO_ADDR
35081: LD_VAR 0 6
35085: PUSH
35086: FOR_TO
35087: IFFALSE 36151
// begin if i > 4 then
35089: LD_VAR 0 8
35093: PUSH
35094: LD_INT 4
35096: GREATER
35097: IFFALSE 35101
// break ;
35099: GO 36151
// case i of 1 :
35101: LD_VAR 0 8
35105: PUSH
35106: LD_INT 1
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35194
35114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35115: LD_ADDR_VAR 0 12
35119: PUSH
35120: LD_VAR 0 18
35124: PPUSH
35125: LD_INT 22
35127: PUSH
35128: LD_VAR 0 16
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 58
35139: PUSH
35140: EMPTY
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 30
35148: PUSH
35149: LD_INT 32
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 30
35158: PUSH
35159: LD_INT 4
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 30
35168: PUSH
35169: LD_INT 5
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 72
35191: ST_TO_ADDR
35192: GO 35416
35194: LD_INT 2
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35264
35202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35203: LD_ADDR_VAR 0 12
35207: PUSH
35208: LD_VAR 0 18
35212: PPUSH
35213: LD_INT 22
35215: PUSH
35216: LD_VAR 0 16
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 30
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PPUSH
35257: CALL_OW 72
35261: ST_TO_ADDR
35262: GO 35416
35264: LD_INT 3
35266: DOUBLE
35267: EQUAL
35268: IFTRUE 35272
35270: GO 35334
35272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35273: LD_ADDR_VAR 0 12
35277: PUSH
35278: LD_VAR 0 18
35282: PPUSH
35283: LD_INT 22
35285: PUSH
35286: LD_VAR 0 16
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 30
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 30
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PPUSH
35327: CALL_OW 72
35331: ST_TO_ADDR
35332: GO 35416
35334: LD_INT 4
35336: DOUBLE
35337: EQUAL
35338: IFTRUE 35342
35340: GO 35415
35342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35343: LD_ADDR_VAR 0 12
35347: PUSH
35348: LD_VAR 0 18
35352: PPUSH
35353: LD_INT 22
35355: PUSH
35356: LD_VAR 0 16
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: LD_INT 30
35370: PUSH
35371: LD_INT 6
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 30
35380: PUSH
35381: LD_INT 7
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 30
35390: PUSH
35391: LD_INT 8
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PPUSH
35408: CALL_OW 72
35412: ST_TO_ADDR
35413: GO 35416
35415: POP
// if i = 1 then
35416: LD_VAR 0 8
35420: PUSH
35421: LD_INT 1
35423: EQUAL
35424: IFFALSE 35535
// begin tmp := [ ] ;
35426: LD_ADDR_VAR 0 19
35430: PUSH
35431: EMPTY
35432: ST_TO_ADDR
// for j in f do
35433: LD_ADDR_VAR 0 9
35437: PUSH
35438: LD_VAR 0 12
35442: PUSH
35443: FOR_IN
35444: IFFALSE 35517
// if GetBType ( j ) = b_bunker then
35446: LD_VAR 0 9
35450: PPUSH
35451: CALL_OW 266
35455: PUSH
35456: LD_INT 32
35458: EQUAL
35459: IFFALSE 35486
// tmp := Insert ( tmp , 1 , j ) else
35461: LD_ADDR_VAR 0 19
35465: PUSH
35466: LD_VAR 0 19
35470: PPUSH
35471: LD_INT 1
35473: PPUSH
35474: LD_VAR 0 9
35478: PPUSH
35479: CALL_OW 2
35483: ST_TO_ADDR
35484: GO 35515
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35486: LD_ADDR_VAR 0 19
35490: PUSH
35491: LD_VAR 0 19
35495: PPUSH
35496: LD_VAR 0 19
35500: PUSH
35501: LD_INT 1
35503: PLUS
35504: PPUSH
35505: LD_VAR 0 9
35509: PPUSH
35510: CALL_OW 2
35514: ST_TO_ADDR
35515: GO 35443
35517: POP
35518: POP
// if tmp then
35519: LD_VAR 0 19
35523: IFFALSE 35535
// f := tmp ;
35525: LD_ADDR_VAR 0 12
35529: PUSH
35530: LD_VAR 0 19
35534: ST_TO_ADDR
// end ; x := personel [ i ] ;
35535: LD_ADDR_VAR 0 13
35539: PUSH
35540: LD_VAR 0 6
35544: PUSH
35545: LD_VAR 0 8
35549: ARRAY
35550: ST_TO_ADDR
// if x = - 1 then
35551: LD_VAR 0 13
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: EQUAL
35560: IFFALSE 35769
// begin for j in f do
35562: LD_ADDR_VAR 0 9
35566: PUSH
35567: LD_VAR 0 12
35571: PUSH
35572: FOR_IN
35573: IFFALSE 35765
// repeat InitHc ;
35575: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35579: LD_VAR 0 9
35583: PPUSH
35584: CALL_OW 266
35588: PUSH
35589: LD_INT 5
35591: EQUAL
35592: IFFALSE 35662
// begin if UnitsInside ( j ) < 3 then
35594: LD_VAR 0 9
35598: PPUSH
35599: CALL_OW 313
35603: PUSH
35604: LD_INT 3
35606: LESS
35607: IFFALSE 35643
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35609: LD_INT 0
35611: PPUSH
35612: LD_INT 5
35614: PUSH
35615: LD_INT 8
35617: PUSH
35618: LD_INT 9
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: PUSH
35626: LD_VAR 0 17
35630: ARRAY
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: CALL_OW 380
35641: GO 35660
// PrepareHuman ( false , i , skill ) ;
35643: LD_INT 0
35645: PPUSH
35646: LD_VAR 0 8
35650: PPUSH
35651: LD_VAR 0 4
35655: PPUSH
35656: CALL_OW 380
// end else
35660: GO 35679
// PrepareHuman ( false , i , skill ) ;
35662: LD_INT 0
35664: PPUSH
35665: LD_VAR 0 8
35669: PPUSH
35670: LD_VAR 0 4
35674: PPUSH
35675: CALL_OW 380
// un := CreateHuman ;
35679: LD_ADDR_VAR 0 14
35683: PUSH
35684: CALL_OW 44
35688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35689: LD_ADDR_VAR 0 7
35693: PUSH
35694: LD_VAR 0 7
35698: PPUSH
35699: LD_INT 1
35701: PPUSH
35702: LD_VAR 0 14
35706: PPUSH
35707: CALL_OW 2
35711: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35712: LD_VAR 0 14
35716: PPUSH
35717: LD_VAR 0 9
35721: PPUSH
35722: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35726: LD_VAR 0 9
35730: PPUSH
35731: CALL_OW 313
35735: PUSH
35736: LD_INT 6
35738: EQUAL
35739: PUSH
35740: LD_VAR 0 9
35744: PPUSH
35745: CALL_OW 266
35749: PUSH
35750: LD_INT 32
35752: PUSH
35753: LD_INT 31
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: IN
35760: OR
35761: IFFALSE 35575
35763: GO 35572
35765: POP
35766: POP
// end else
35767: GO 36149
// for j = 1 to x do
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: DOUBLE
35775: LD_INT 1
35777: DEC
35778: ST_TO_ADDR
35779: LD_VAR 0 13
35783: PUSH
35784: FOR_TO
35785: IFFALSE 36147
// begin InitHc ;
35787: CALL_OW 19
// if not f then
35791: LD_VAR 0 12
35795: NOT
35796: IFFALSE 35885
// begin PrepareHuman ( false , i , skill ) ;
35798: LD_INT 0
35800: PPUSH
35801: LD_VAR 0 8
35805: PPUSH
35806: LD_VAR 0 4
35810: PPUSH
35811: CALL_OW 380
// un := CreateHuman ;
35815: LD_ADDR_VAR 0 14
35819: PUSH
35820: CALL_OW 44
35824: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35825: LD_ADDR_VAR 0 7
35829: PUSH
35830: LD_VAR 0 7
35834: PPUSH
35835: LD_INT 1
35837: PPUSH
35838: LD_VAR 0 14
35842: PPUSH
35843: CALL_OW 2
35847: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35848: LD_VAR 0 14
35852: PPUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 250
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 251
35872: PPUSH
35873: LD_INT 10
35875: PPUSH
35876: LD_INT 0
35878: PPUSH
35879: CALL_OW 50
// continue ;
35883: GO 35784
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35885: LD_VAR 0 12
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PPUSH
35894: CALL_OW 313
35898: PUSH
35899: LD_VAR 0 12
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: CALL_OW 266
35912: PUSH
35913: LD_INT 32
35915: PUSH
35916: LD_INT 31
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: IN
35923: AND
35924: PUSH
35925: LD_VAR 0 12
35929: PUSH
35930: LD_INT 1
35932: ARRAY
35933: PPUSH
35934: CALL_OW 313
35938: PUSH
35939: LD_INT 6
35941: EQUAL
35942: OR
35943: IFFALSE 35963
// f := Delete ( f , 1 ) ;
35945: LD_ADDR_VAR 0 12
35949: PUSH
35950: LD_VAR 0 12
35954: PPUSH
35955: LD_INT 1
35957: PPUSH
35958: CALL_OW 3
35962: ST_TO_ADDR
// if not f then
35963: LD_VAR 0 12
35967: NOT
35968: IFFALSE 35986
// begin x := x + 2 ;
35970: LD_ADDR_VAR 0 13
35974: PUSH
35975: LD_VAR 0 13
35979: PUSH
35980: LD_INT 2
35982: PLUS
35983: ST_TO_ADDR
// continue ;
35984: GO 35784
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35986: LD_VAR 0 12
35990: PUSH
35991: LD_INT 1
35993: ARRAY
35994: PPUSH
35995: CALL_OW 266
35999: PUSH
36000: LD_INT 5
36002: EQUAL
36003: IFFALSE 36077
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36005: LD_VAR 0 12
36009: PUSH
36010: LD_INT 1
36012: ARRAY
36013: PPUSH
36014: CALL_OW 313
36018: PUSH
36019: LD_INT 3
36021: LESS
36022: IFFALSE 36058
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36024: LD_INT 0
36026: PPUSH
36027: LD_INT 5
36029: PUSH
36030: LD_INT 8
36032: PUSH
36033: LD_INT 9
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: PUSH
36041: LD_VAR 0 17
36045: ARRAY
36046: PPUSH
36047: LD_VAR 0 4
36051: PPUSH
36052: CALL_OW 380
36056: GO 36075
// PrepareHuman ( false , i , skill ) ;
36058: LD_INT 0
36060: PPUSH
36061: LD_VAR 0 8
36065: PPUSH
36066: LD_VAR 0 4
36070: PPUSH
36071: CALL_OW 380
// end else
36075: GO 36094
// PrepareHuman ( false , i , skill ) ;
36077: LD_INT 0
36079: PPUSH
36080: LD_VAR 0 8
36084: PPUSH
36085: LD_VAR 0 4
36089: PPUSH
36090: CALL_OW 380
// un := CreateHuman ;
36094: LD_ADDR_VAR 0 14
36098: PUSH
36099: CALL_OW 44
36103: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36104: LD_ADDR_VAR 0 7
36108: PUSH
36109: LD_VAR 0 7
36113: PPUSH
36114: LD_INT 1
36116: PPUSH
36117: LD_VAR 0 14
36121: PPUSH
36122: CALL_OW 2
36126: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36127: LD_VAR 0 14
36131: PPUSH
36132: LD_VAR 0 12
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PPUSH
36141: CALL_OW 52
// end ;
36145: GO 35784
36147: POP
36148: POP
// end ;
36149: GO 35086
36151: POP
36152: POP
// result := result ^ buildings ;
36153: LD_ADDR_VAR 0 7
36157: PUSH
36158: LD_VAR 0 7
36162: PUSH
36163: LD_VAR 0 18
36167: ADD
36168: ST_TO_ADDR
// end else
36169: GO 36312
// begin for i = 1 to personel do
36171: LD_ADDR_VAR 0 8
36175: PUSH
36176: DOUBLE
36177: LD_INT 1
36179: DEC
36180: ST_TO_ADDR
36181: LD_VAR 0 6
36185: PUSH
36186: FOR_TO
36187: IFFALSE 36310
// begin if i > 4 then
36189: LD_VAR 0 8
36193: PUSH
36194: LD_INT 4
36196: GREATER
36197: IFFALSE 36201
// break ;
36199: GO 36310
// x := personel [ i ] ;
36201: LD_ADDR_VAR 0 13
36205: PUSH
36206: LD_VAR 0 6
36210: PUSH
36211: LD_VAR 0 8
36215: ARRAY
36216: ST_TO_ADDR
// if x = - 1 then
36217: LD_VAR 0 13
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: EQUAL
36226: IFFALSE 36230
// continue ;
36228: GO 36186
// PrepareHuman ( false , i , skill ) ;
36230: LD_INT 0
36232: PPUSH
36233: LD_VAR 0 8
36237: PPUSH
36238: LD_VAR 0 4
36242: PPUSH
36243: CALL_OW 380
// un := CreateHuman ;
36247: LD_ADDR_VAR 0 14
36251: PUSH
36252: CALL_OW 44
36256: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36257: LD_VAR 0 14
36261: PPUSH
36262: LD_VAR 0 1
36266: PPUSH
36267: CALL_OW 250
36271: PPUSH
36272: LD_VAR 0 1
36276: PPUSH
36277: CALL_OW 251
36281: PPUSH
36282: LD_INT 10
36284: PPUSH
36285: LD_INT 0
36287: PPUSH
36288: CALL_OW 50
// result := result ^ un ;
36292: LD_ADDR_VAR 0 7
36296: PUSH
36297: LD_VAR 0 7
36301: PUSH
36302: LD_VAR 0 14
36306: ADD
36307: ST_TO_ADDR
// end ;
36308: GO 36186
36310: POP
36311: POP
// end ; end ;
36312: LD_VAR 0 7
36316: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
36328: PPUSH
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
// result := false ;
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 0
36342: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36343: LD_VAR 0 1
36347: NOT
36348: PUSH
36349: LD_VAR 0 1
36353: PPUSH
36354: CALL_OW 266
36358: PUSH
36359: LD_INT 32
36361: PUSH
36362: LD_INT 33
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: IN
36369: NOT
36370: OR
36371: IFFALSE 36375
// exit ;
36373: GO 37484
// nat := GetNation ( tower ) ;
36375: LD_ADDR_VAR 0 12
36379: PUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 248
36389: ST_TO_ADDR
// side := GetSide ( tower ) ;
36390: LD_ADDR_VAR 0 16
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 255
36404: ST_TO_ADDR
// x := GetX ( tower ) ;
36405: LD_ADDR_VAR 0 10
36409: PUSH
36410: LD_VAR 0 1
36414: PPUSH
36415: CALL_OW 250
36419: ST_TO_ADDR
// y := GetY ( tower ) ;
36420: LD_ADDR_VAR 0 11
36424: PUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 251
36434: ST_TO_ADDR
// if not x or not y then
36435: LD_VAR 0 10
36439: NOT
36440: PUSH
36441: LD_VAR 0 11
36445: NOT
36446: OR
36447: IFFALSE 36451
// exit ;
36449: GO 37484
// weapon := 0 ;
36451: LD_ADDR_VAR 0 18
36455: PUSH
36456: LD_INT 0
36458: ST_TO_ADDR
// fac_list := [ ] ;
36459: LD_ADDR_VAR 0 17
36463: PUSH
36464: EMPTY
36465: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36466: LD_ADDR_VAR 0 6
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: CALL_OW 274
36480: PPUSH
36481: LD_VAR 0 2
36485: PPUSH
36486: LD_INT 0
36488: PPUSH
36489: CALL 34055 0 3
36493: PPUSH
36494: LD_INT 30
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PPUSH
36504: CALL_OW 72
36508: ST_TO_ADDR
// if not factories then
36509: LD_VAR 0 6
36513: NOT
36514: IFFALSE 36518
// exit ;
36516: GO 37484
// for i in factories do
36518: LD_ADDR_VAR 0 8
36522: PUSH
36523: LD_VAR 0 6
36527: PUSH
36528: FOR_IN
36529: IFFALSE 36554
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36531: LD_ADDR_VAR 0 17
36535: PUSH
36536: LD_VAR 0 17
36540: PUSH
36541: LD_VAR 0 8
36545: PPUSH
36546: CALL_OW 478
36550: UNION
36551: ST_TO_ADDR
36552: GO 36528
36554: POP
36555: POP
// if not fac_list then
36556: LD_VAR 0 17
36560: NOT
36561: IFFALSE 36565
// exit ;
36563: GO 37484
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_INT 4
36572: PUSH
36573: LD_INT 5
36575: PUSH
36576: LD_INT 9
36578: PUSH
36579: LD_INT 10
36581: PUSH
36582: LD_INT 6
36584: PUSH
36585: LD_INT 7
36587: PUSH
36588: LD_INT 11
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 27
36602: PUSH
36603: LD_INT 28
36605: PUSH
36606: LD_INT 26
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 43
36620: PUSH
36621: LD_INT 44
36623: PUSH
36624: LD_INT 46
36626: PUSH
36627: LD_INT 45
36629: PUSH
36630: LD_INT 47
36632: PUSH
36633: LD_INT 49
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: PUSH
36649: LD_VAR 0 12
36653: ARRAY
36654: ST_TO_ADDR
// list := list isect fac_list ;
36655: LD_ADDR_VAR 0 5
36659: PUSH
36660: LD_VAR 0 5
36664: PUSH
36665: LD_VAR 0 17
36669: ISECT
36670: ST_TO_ADDR
// if not list then
36671: LD_VAR 0 5
36675: NOT
36676: IFFALSE 36680
// exit ;
36678: GO 37484
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36680: LD_VAR 0 12
36684: PUSH
36685: LD_INT 3
36687: EQUAL
36688: PUSH
36689: LD_INT 49
36691: PUSH
36692: LD_VAR 0 5
36696: IN
36697: AND
36698: PUSH
36699: LD_INT 31
36701: PPUSH
36702: LD_VAR 0 16
36706: PPUSH
36707: CALL_OW 321
36711: PUSH
36712: LD_INT 2
36714: EQUAL
36715: AND
36716: IFFALSE 36776
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36718: LD_INT 22
36720: PUSH
36721: LD_VAR 0 16
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 35
36732: PUSH
36733: LD_INT 49
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 91
36742: PUSH
36743: LD_VAR 0 1
36747: PUSH
36748: LD_INT 10
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: PPUSH
36761: CALL_OW 69
36765: NOT
36766: IFFALSE 36776
// weapon := ru_time_lapser ;
36768: LD_ADDR_VAR 0 18
36772: PUSH
36773: LD_INT 49
36775: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36776: LD_VAR 0 12
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: IN
36791: PUSH
36792: LD_INT 11
36794: PUSH
36795: LD_VAR 0 5
36799: IN
36800: PUSH
36801: LD_INT 30
36803: PUSH
36804: LD_VAR 0 5
36808: IN
36809: OR
36810: AND
36811: PUSH
36812: LD_INT 6
36814: PPUSH
36815: LD_VAR 0 16
36819: PPUSH
36820: CALL_OW 321
36824: PUSH
36825: LD_INT 2
36827: EQUAL
36828: AND
36829: IFFALSE 36994
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36831: LD_INT 22
36833: PUSH
36834: LD_VAR 0 16
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: LD_INT 35
36848: PUSH
36849: LD_INT 11
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 35
36858: PUSH
36859: LD_INT 30
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 91
36873: PUSH
36874: LD_VAR 0 1
36878: PUSH
36879: LD_INT 18
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: PPUSH
36892: CALL_OW 69
36896: NOT
36897: PUSH
36898: LD_INT 22
36900: PUSH
36901: LD_VAR 0 16
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 30
36915: PUSH
36916: LD_INT 32
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 33
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 91
36940: PUSH
36941: LD_VAR 0 1
36945: PUSH
36946: LD_INT 12
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PUSH
36959: EMPTY
36960: LIST
36961: PPUSH
36962: CALL_OW 69
36966: PUSH
36967: LD_INT 2
36969: GREATER
36970: AND
36971: IFFALSE 36994
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36973: LD_ADDR_VAR 0 18
36977: PUSH
36978: LD_INT 11
36980: PUSH
36981: LD_INT 30
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 12
36992: ARRAY
36993: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36994: LD_VAR 0 18
36998: NOT
36999: PUSH
37000: LD_INT 40
37002: PPUSH
37003: LD_VAR 0 16
37007: PPUSH
37008: CALL_OW 321
37012: PUSH
37013: LD_INT 2
37015: EQUAL
37016: AND
37017: PUSH
37018: LD_INT 7
37020: PUSH
37021: LD_VAR 0 5
37025: IN
37026: PUSH
37027: LD_INT 28
37029: PUSH
37030: LD_VAR 0 5
37034: IN
37035: OR
37036: PUSH
37037: LD_INT 45
37039: PUSH
37040: LD_VAR 0 5
37044: IN
37045: OR
37046: AND
37047: IFFALSE 37301
// begin hex := GetHexInfo ( x , y ) ;
37049: LD_ADDR_VAR 0 4
37053: PUSH
37054: LD_VAR 0 10
37058: PPUSH
37059: LD_VAR 0 11
37063: PPUSH
37064: CALL_OW 546
37068: ST_TO_ADDR
// if hex [ 1 ] then
37069: LD_VAR 0 4
37073: PUSH
37074: LD_INT 1
37076: ARRAY
37077: IFFALSE 37081
// exit ;
37079: GO 37484
// height := hex [ 2 ] ;
37081: LD_ADDR_VAR 0 15
37085: PUSH
37086: LD_VAR 0 4
37090: PUSH
37091: LD_INT 2
37093: ARRAY
37094: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37095: LD_ADDR_VAR 0 14
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 3
37108: PUSH
37109: LD_INT 5
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// for i in tmp do
37118: LD_ADDR_VAR 0 8
37122: PUSH
37123: LD_VAR 0 14
37127: PUSH
37128: FOR_IN
37129: IFFALSE 37299
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37131: LD_ADDR_VAR 0 9
37135: PUSH
37136: LD_VAR 0 10
37140: PPUSH
37141: LD_VAR 0 8
37145: PPUSH
37146: LD_INT 5
37148: PPUSH
37149: CALL_OW 272
37153: PUSH
37154: LD_VAR 0 11
37158: PPUSH
37159: LD_VAR 0 8
37163: PPUSH
37164: LD_INT 5
37166: PPUSH
37167: CALL_OW 273
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37176: LD_VAR 0 9
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PPUSH
37185: LD_VAR 0 9
37189: PUSH
37190: LD_INT 2
37192: ARRAY
37193: PPUSH
37194: CALL_OW 488
37198: IFFALSE 37297
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37200: LD_ADDR_VAR 0 4
37204: PUSH
37205: LD_VAR 0 9
37209: PUSH
37210: LD_INT 1
37212: ARRAY
37213: PPUSH
37214: LD_VAR 0 9
37218: PUSH
37219: LD_INT 2
37221: ARRAY
37222: PPUSH
37223: CALL_OW 546
37227: ST_TO_ADDR
// if hex [ 1 ] then
37228: LD_VAR 0 4
37232: PUSH
37233: LD_INT 1
37235: ARRAY
37236: IFFALSE 37240
// continue ;
37238: GO 37128
// h := hex [ 2 ] ;
37240: LD_ADDR_VAR 0 13
37244: PUSH
37245: LD_VAR 0 4
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: ST_TO_ADDR
// if h + 7 < height then
37254: LD_VAR 0 13
37258: PUSH
37259: LD_INT 7
37261: PLUS
37262: PUSH
37263: LD_VAR 0 15
37267: LESS
37268: IFFALSE 37297
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37270: LD_ADDR_VAR 0 18
37274: PUSH
37275: LD_INT 7
37277: PUSH
37278: LD_INT 28
37280: PUSH
37281: LD_INT 45
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: PUSH
37289: LD_VAR 0 12
37293: ARRAY
37294: ST_TO_ADDR
// break ;
37295: GO 37299
// end ; end ; end ;
37297: GO 37128
37299: POP
37300: POP
// end ; if not weapon then
37301: LD_VAR 0 18
37305: NOT
37306: IFFALSE 37366
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37308: LD_ADDR_VAR 0 5
37312: PUSH
37313: LD_VAR 0 5
37317: PUSH
37318: LD_INT 11
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_INT 49
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: DIFF
37332: ST_TO_ADDR
// if not list then
37333: LD_VAR 0 5
37337: NOT
37338: IFFALSE 37342
// exit ;
37340: GO 37484
// weapon := list [ rand ( 1 , list ) ] ;
37342: LD_ADDR_VAR 0 18
37346: PUSH
37347: LD_VAR 0 5
37351: PUSH
37352: LD_INT 1
37354: PPUSH
37355: LD_VAR 0 5
37359: PPUSH
37360: CALL_OW 12
37364: ARRAY
37365: ST_TO_ADDR
// end ; if weapon then
37366: LD_VAR 0 18
37370: IFFALSE 37484
// begin tmp := CostOfWeapon ( weapon ) ;
37372: LD_ADDR_VAR 0 14
37376: PUSH
37377: LD_VAR 0 18
37381: PPUSH
37382: CALL_OW 451
37386: ST_TO_ADDR
// j := GetBase ( tower ) ;
37387: LD_ADDR_VAR 0 9
37391: PUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 274
37401: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37402: LD_VAR 0 9
37406: PPUSH
37407: LD_INT 1
37409: PPUSH
37410: CALL_OW 275
37414: PUSH
37415: LD_VAR 0 14
37419: PUSH
37420: LD_INT 1
37422: ARRAY
37423: GREATEREQUAL
37424: PUSH
37425: LD_VAR 0 9
37429: PPUSH
37430: LD_INT 2
37432: PPUSH
37433: CALL_OW 275
37437: PUSH
37438: LD_VAR 0 14
37442: PUSH
37443: LD_INT 2
37445: ARRAY
37446: GREATEREQUAL
37447: AND
37448: PUSH
37449: LD_VAR 0 9
37453: PPUSH
37454: LD_INT 3
37456: PPUSH
37457: CALL_OW 275
37461: PUSH
37462: LD_VAR 0 14
37466: PUSH
37467: LD_INT 3
37469: ARRAY
37470: GREATEREQUAL
37471: AND
37472: IFFALSE 37484
// result := weapon ;
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_VAR 0 18
37483: ST_TO_ADDR
// end ; end ;
37484: LD_VAR 0 3
37488: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37489: LD_INT 0
37491: PPUSH
37492: PPUSH
// result := true ;
37493: LD_ADDR_VAR 0 3
37497: PUSH
37498: LD_INT 1
37500: ST_TO_ADDR
// if array1 = array2 then
37501: LD_VAR 0 1
37505: PUSH
37506: LD_VAR 0 2
37510: EQUAL
37511: IFFALSE 37571
// begin for i = 1 to array1 do
37513: LD_ADDR_VAR 0 4
37517: PUSH
37518: DOUBLE
37519: LD_INT 1
37521: DEC
37522: ST_TO_ADDR
37523: LD_VAR 0 1
37527: PUSH
37528: FOR_TO
37529: IFFALSE 37567
// if array1 [ i ] <> array2 [ i ] then
37531: LD_VAR 0 1
37535: PUSH
37536: LD_VAR 0 4
37540: ARRAY
37541: PUSH
37542: LD_VAR 0 2
37546: PUSH
37547: LD_VAR 0 4
37551: ARRAY
37552: NONEQUAL
37553: IFFALSE 37565
// begin result := false ;
37555: LD_ADDR_VAR 0 3
37559: PUSH
37560: LD_INT 0
37562: ST_TO_ADDR
// break ;
37563: GO 37567
// end ;
37565: GO 37528
37567: POP
37568: POP
// end else
37569: GO 37579
// result := false ;
37571: LD_ADDR_VAR 0 3
37575: PUSH
37576: LD_INT 0
37578: ST_TO_ADDR
// end ;
37579: LD_VAR 0 3
37583: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37584: LD_INT 0
37586: PPUSH
37587: PPUSH
// if not array1 or not array2 then
37588: LD_VAR 0 1
37592: NOT
37593: PUSH
37594: LD_VAR 0 2
37598: NOT
37599: OR
37600: IFFALSE 37604
// exit ;
37602: GO 37668
// result := true ;
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_INT 1
37611: ST_TO_ADDR
// for i = 1 to array1 do
37612: LD_ADDR_VAR 0 4
37616: PUSH
37617: DOUBLE
37618: LD_INT 1
37620: DEC
37621: ST_TO_ADDR
37622: LD_VAR 0 1
37626: PUSH
37627: FOR_TO
37628: IFFALSE 37666
// if array1 [ i ] <> array2 [ i ] then
37630: LD_VAR 0 1
37634: PUSH
37635: LD_VAR 0 4
37639: ARRAY
37640: PUSH
37641: LD_VAR 0 2
37645: PUSH
37646: LD_VAR 0 4
37650: ARRAY
37651: NONEQUAL
37652: IFFALSE 37664
// begin result := false ;
37654: LD_ADDR_VAR 0 3
37658: PUSH
37659: LD_INT 0
37661: ST_TO_ADDR
// break ;
37662: GO 37666
// end ;
37664: GO 37627
37666: POP
37667: POP
// end ;
37668: LD_VAR 0 3
37672: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37673: LD_INT 0
37675: PPUSH
37676: PPUSH
37677: PPUSH
// pom := GetBase ( fac ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_VAR 0 1
37687: PPUSH
37688: CALL_OW 274
37692: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37693: LD_ADDR_VAR 0 4
37697: PUSH
37698: LD_VAR 0 2
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PPUSH
37707: LD_VAR 0 2
37711: PUSH
37712: LD_INT 2
37714: ARRAY
37715: PPUSH
37716: LD_VAR 0 2
37720: PUSH
37721: LD_INT 3
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 2
37729: PUSH
37730: LD_INT 4
37732: ARRAY
37733: PPUSH
37734: CALL_OW 449
37738: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37739: LD_ADDR_VAR 0 3
37743: PUSH
37744: LD_VAR 0 5
37748: PPUSH
37749: LD_INT 1
37751: PPUSH
37752: CALL_OW 275
37756: PUSH
37757: LD_VAR 0 4
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: GREATEREQUAL
37766: PUSH
37767: LD_VAR 0 5
37771: PPUSH
37772: LD_INT 2
37774: PPUSH
37775: CALL_OW 275
37779: PUSH
37780: LD_VAR 0 4
37784: PUSH
37785: LD_INT 2
37787: ARRAY
37788: GREATEREQUAL
37789: AND
37790: PUSH
37791: LD_VAR 0 5
37795: PPUSH
37796: LD_INT 3
37798: PPUSH
37799: CALL_OW 275
37803: PUSH
37804: LD_VAR 0 4
37808: PUSH
37809: LD_INT 3
37811: ARRAY
37812: GREATEREQUAL
37813: AND
37814: ST_TO_ADDR
// end ;
37815: LD_VAR 0 3
37819: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37820: LD_INT 0
37822: PPUSH
37823: PPUSH
37824: PPUSH
37825: PPUSH
// pom := GetBase ( building ) ;
37826: LD_ADDR_VAR 0 3
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 274
37840: ST_TO_ADDR
// if not pom then
37841: LD_VAR 0 3
37845: NOT
37846: IFFALSE 37850
// exit ;
37848: GO 38020
// btype := GetBType ( building ) ;
37850: LD_ADDR_VAR 0 5
37854: PUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 266
37864: ST_TO_ADDR
// if btype = b_armoury then
37865: LD_VAR 0 5
37869: PUSH
37870: LD_INT 4
37872: EQUAL
37873: IFFALSE 37883
// btype := b_barracks ;
37875: LD_ADDR_VAR 0 5
37879: PUSH
37880: LD_INT 5
37882: ST_TO_ADDR
// if btype = b_depot then
37883: LD_VAR 0 5
37887: PUSH
37888: LD_INT 0
37890: EQUAL
37891: IFFALSE 37901
// btype := b_warehouse ;
37893: LD_ADDR_VAR 0 5
37897: PUSH
37898: LD_INT 1
37900: ST_TO_ADDR
// if btype = b_workshop then
37901: LD_VAR 0 5
37905: PUSH
37906: LD_INT 2
37908: EQUAL
37909: IFFALSE 37919
// btype := b_factory ;
37911: LD_ADDR_VAR 0 5
37915: PUSH
37916: LD_INT 3
37918: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: LD_VAR 0 5
37928: PPUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 248
37938: PPUSH
37939: CALL_OW 450
37943: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37944: LD_ADDR_VAR 0 2
37948: PUSH
37949: LD_VAR 0 3
37953: PPUSH
37954: LD_INT 1
37956: PPUSH
37957: CALL_OW 275
37961: PUSH
37962: LD_VAR 0 4
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: GREATEREQUAL
37971: PUSH
37972: LD_VAR 0 3
37976: PPUSH
37977: LD_INT 2
37979: PPUSH
37980: CALL_OW 275
37984: PUSH
37985: LD_VAR 0 4
37989: PUSH
37990: LD_INT 2
37992: ARRAY
37993: GREATEREQUAL
37994: AND
37995: PUSH
37996: LD_VAR 0 3
38000: PPUSH
38001: LD_INT 3
38003: PPUSH
38004: CALL_OW 275
38008: PUSH
38009: LD_VAR 0 4
38013: PUSH
38014: LD_INT 3
38016: ARRAY
38017: GREATEREQUAL
38018: AND
38019: ST_TO_ADDR
// end ;
38020: LD_VAR 0 2
38024: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
// pom := GetBase ( building ) ;
38030: LD_ADDR_VAR 0 4
38034: PUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: CALL_OW 274
38044: ST_TO_ADDR
// if not pom then
38045: LD_VAR 0 4
38049: NOT
38050: IFFALSE 38054
// exit ;
38052: GO 38155
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38054: LD_ADDR_VAR 0 5
38058: PUSH
38059: LD_VAR 0 2
38063: PPUSH
38064: LD_VAR 0 1
38068: PPUSH
38069: CALL_OW 248
38073: PPUSH
38074: CALL_OW 450
38078: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_VAR 0 4
38088: PPUSH
38089: LD_INT 1
38091: PPUSH
38092: CALL_OW 275
38096: PUSH
38097: LD_VAR 0 5
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: GREATEREQUAL
38106: PUSH
38107: LD_VAR 0 4
38111: PPUSH
38112: LD_INT 2
38114: PPUSH
38115: CALL_OW 275
38119: PUSH
38120: LD_VAR 0 5
38124: PUSH
38125: LD_INT 2
38127: ARRAY
38128: GREATEREQUAL
38129: AND
38130: PUSH
38131: LD_VAR 0 4
38135: PPUSH
38136: LD_INT 3
38138: PPUSH
38139: CALL_OW 275
38143: PUSH
38144: LD_VAR 0 5
38148: PUSH
38149: LD_INT 3
38151: ARRAY
38152: GREATEREQUAL
38153: AND
38154: ST_TO_ADDR
// end ;
38155: LD_VAR 0 3
38159: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38160: LD_INT 0
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
// result := false ;
38173: LD_ADDR_VAR 0 8
38177: PUSH
38178: LD_INT 0
38180: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38181: LD_VAR 0 5
38185: NOT
38186: PUSH
38187: LD_VAR 0 1
38191: NOT
38192: OR
38193: PUSH
38194: LD_VAR 0 2
38198: NOT
38199: OR
38200: PUSH
38201: LD_VAR 0 3
38205: NOT
38206: OR
38207: IFFALSE 38211
// exit ;
38209: GO 39025
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38211: LD_ADDR_VAR 0 14
38215: PUSH
38216: LD_VAR 0 1
38220: PPUSH
38221: LD_VAR 0 2
38225: PPUSH
38226: LD_VAR 0 3
38230: PPUSH
38231: LD_VAR 0 4
38235: PPUSH
38236: LD_VAR 0 5
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: PPUSH
38245: CALL_OW 248
38249: PPUSH
38250: LD_INT 0
38252: PPUSH
38253: CALL 40278 0 6
38257: ST_TO_ADDR
// if not hexes then
38258: LD_VAR 0 14
38262: NOT
38263: IFFALSE 38267
// exit ;
38265: GO 39025
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38267: LD_ADDR_VAR 0 17
38271: PUSH
38272: LD_VAR 0 5
38276: PPUSH
38277: LD_INT 22
38279: PUSH
38280: LD_VAR 0 13
38284: PPUSH
38285: CALL_OW 255
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 30
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 30
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PPUSH
38326: CALL_OW 72
38330: ST_TO_ADDR
// for i = 1 to hexes do
38331: LD_ADDR_VAR 0 9
38335: PUSH
38336: DOUBLE
38337: LD_INT 1
38339: DEC
38340: ST_TO_ADDR
38341: LD_VAR 0 14
38345: PUSH
38346: FOR_TO
38347: IFFALSE 39023
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38349: LD_ADDR_VAR 0 13
38353: PUSH
38354: LD_VAR 0 14
38358: PUSH
38359: LD_VAR 0 9
38363: ARRAY
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PPUSH
38369: LD_VAR 0 14
38373: PUSH
38374: LD_VAR 0 9
38378: ARRAY
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: PPUSH
38384: CALL_OW 428
38388: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38389: LD_VAR 0 14
38393: PUSH
38394: LD_VAR 0 9
38398: ARRAY
38399: PUSH
38400: LD_INT 1
38402: ARRAY
38403: PPUSH
38404: LD_VAR 0 14
38408: PUSH
38409: LD_VAR 0 9
38413: ARRAY
38414: PUSH
38415: LD_INT 2
38417: ARRAY
38418: PPUSH
38419: CALL_OW 351
38423: PUSH
38424: LD_VAR 0 14
38428: PUSH
38429: LD_VAR 0 9
38433: ARRAY
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PPUSH
38439: LD_VAR 0 14
38443: PUSH
38444: LD_VAR 0 9
38448: ARRAY
38449: PUSH
38450: LD_INT 2
38452: ARRAY
38453: PPUSH
38454: CALL_OW 488
38458: NOT
38459: OR
38460: PUSH
38461: LD_VAR 0 13
38465: PPUSH
38466: CALL_OW 247
38470: PUSH
38471: LD_INT 3
38473: EQUAL
38474: OR
38475: IFFALSE 38481
// exit ;
38477: POP
38478: POP
38479: GO 39025
// if not tmp then
38481: LD_VAR 0 13
38485: NOT
38486: IFFALSE 38490
// continue ;
38488: GO 38346
// result := true ;
38490: LD_ADDR_VAR 0 8
38494: PUSH
38495: LD_INT 1
38497: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38498: LD_VAR 0 6
38502: PUSH
38503: LD_VAR 0 13
38507: PPUSH
38508: CALL_OW 247
38512: PUSH
38513: LD_INT 2
38515: EQUAL
38516: AND
38517: PUSH
38518: LD_VAR 0 13
38522: PPUSH
38523: CALL_OW 263
38527: PUSH
38528: LD_INT 1
38530: EQUAL
38531: AND
38532: IFFALSE 38696
// begin if IsDrivenBy ( tmp ) then
38534: LD_VAR 0 13
38538: PPUSH
38539: CALL_OW 311
38543: IFFALSE 38547
// continue ;
38545: GO 38346
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38547: LD_VAR 0 6
38551: PPUSH
38552: LD_INT 3
38554: PUSH
38555: LD_INT 60
38557: PUSH
38558: EMPTY
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 3
38567: PUSH
38568: LD_INT 55
38570: PUSH
38571: EMPTY
38572: LIST
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PPUSH
38582: CALL_OW 72
38586: IFFALSE 38694
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38588: LD_ADDR_VAR 0 18
38592: PUSH
38593: LD_VAR 0 6
38597: PPUSH
38598: LD_INT 3
38600: PUSH
38601: LD_INT 60
38603: PUSH
38604: EMPTY
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: PUSH
38614: LD_INT 55
38616: PUSH
38617: EMPTY
38618: LIST
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: PUSH
38633: LD_INT 1
38635: ARRAY
38636: ST_TO_ADDR
// if IsInUnit ( driver ) then
38637: LD_VAR 0 18
38641: PPUSH
38642: CALL_OW 310
38646: IFFALSE 38657
// ComExit ( driver ) ;
38648: LD_VAR 0 18
38652: PPUSH
38653: CALL 64079 0 1
// AddComEnterUnit ( driver , tmp ) ;
38657: LD_VAR 0 18
38661: PPUSH
38662: LD_VAR 0 13
38666: PPUSH
38667: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38671: LD_VAR 0 18
38675: PPUSH
38676: LD_VAR 0 7
38680: PPUSH
38681: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38685: LD_VAR 0 18
38689: PPUSH
38690: CALL_OW 181
// end ; continue ;
38694: GO 38346
// end ; if not cleaners or not tmp in cleaners then
38696: LD_VAR 0 6
38700: NOT
38701: PUSH
38702: LD_VAR 0 13
38706: PUSH
38707: LD_VAR 0 6
38711: IN
38712: NOT
38713: OR
38714: IFFALSE 39021
// begin if dep then
38716: LD_VAR 0 17
38720: IFFALSE 38856
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38722: LD_ADDR_VAR 0 16
38726: PUSH
38727: LD_VAR 0 17
38731: PUSH
38732: LD_INT 1
38734: ARRAY
38735: PPUSH
38736: CALL_OW 250
38740: PPUSH
38741: LD_VAR 0 17
38745: PUSH
38746: LD_INT 1
38748: ARRAY
38749: PPUSH
38750: CALL_OW 254
38754: PPUSH
38755: LD_INT 5
38757: PPUSH
38758: CALL_OW 272
38762: PUSH
38763: LD_VAR 0 17
38767: PUSH
38768: LD_INT 1
38770: ARRAY
38771: PPUSH
38772: CALL_OW 251
38776: PPUSH
38777: LD_VAR 0 17
38781: PUSH
38782: LD_INT 1
38784: ARRAY
38785: PPUSH
38786: CALL_OW 254
38790: PPUSH
38791: LD_INT 5
38793: PPUSH
38794: CALL_OW 273
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38803: LD_VAR 0 16
38807: PUSH
38808: LD_INT 1
38810: ARRAY
38811: PPUSH
38812: LD_VAR 0 16
38816: PUSH
38817: LD_INT 2
38819: ARRAY
38820: PPUSH
38821: CALL_OW 488
38825: IFFALSE 38856
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38827: LD_VAR 0 13
38831: PPUSH
38832: LD_VAR 0 16
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: PPUSH
38841: LD_VAR 0 16
38845: PUSH
38846: LD_INT 2
38848: ARRAY
38849: PPUSH
38850: CALL_OW 111
// continue ;
38854: GO 38346
// end ; end ; r := GetDir ( tmp ) ;
38856: LD_ADDR_VAR 0 15
38860: PUSH
38861: LD_VAR 0 13
38865: PPUSH
38866: CALL_OW 254
38870: ST_TO_ADDR
// if r = 5 then
38871: LD_VAR 0 15
38875: PUSH
38876: LD_INT 5
38878: EQUAL
38879: IFFALSE 38889
// r := 0 ;
38881: LD_ADDR_VAR 0 15
38885: PUSH
38886: LD_INT 0
38888: ST_TO_ADDR
// for j = r to 5 do
38889: LD_ADDR_VAR 0 10
38893: PUSH
38894: DOUBLE
38895: LD_VAR 0 15
38899: DEC
38900: ST_TO_ADDR
38901: LD_INT 5
38903: PUSH
38904: FOR_TO
38905: IFFALSE 39019
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38907: LD_ADDR_VAR 0 11
38911: PUSH
38912: LD_VAR 0 13
38916: PPUSH
38917: CALL_OW 250
38921: PPUSH
38922: LD_VAR 0 10
38926: PPUSH
38927: LD_INT 2
38929: PPUSH
38930: CALL_OW 272
38934: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38935: LD_ADDR_VAR 0 12
38939: PUSH
38940: LD_VAR 0 13
38944: PPUSH
38945: CALL_OW 251
38949: PPUSH
38950: LD_VAR 0 10
38954: PPUSH
38955: LD_INT 2
38957: PPUSH
38958: CALL_OW 273
38962: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38963: LD_VAR 0 11
38967: PPUSH
38968: LD_VAR 0 12
38972: PPUSH
38973: CALL_OW 488
38977: PUSH
38978: LD_VAR 0 11
38982: PPUSH
38983: LD_VAR 0 12
38987: PPUSH
38988: CALL_OW 428
38992: NOT
38993: AND
38994: IFFALSE 39017
// begin ComMoveXY ( tmp , _x , _y ) ;
38996: LD_VAR 0 13
39000: PPUSH
39001: LD_VAR 0 11
39005: PPUSH
39006: LD_VAR 0 12
39010: PPUSH
39011: CALL_OW 111
// break ;
39015: GO 39019
// end ; end ;
39017: GO 38904
39019: POP
39020: POP
// end ; end ;
39021: GO 38346
39023: POP
39024: POP
// end ;
39025: LD_VAR 0 8
39029: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39030: LD_INT 0
39032: PPUSH
// result := true ;
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_INT 1
39040: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39041: LD_VAR 0 2
39045: PUSH
39046: LD_INT 24
39048: DOUBLE
39049: EQUAL
39050: IFTRUE 39060
39052: LD_INT 33
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39085
39060: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39061: LD_ADDR_VAR 0 3
39065: PUSH
39066: LD_INT 32
39068: PPUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 321
39078: PUSH
39079: LD_INT 2
39081: EQUAL
39082: ST_TO_ADDR
39083: GO 39401
39085: LD_INT 20
39087: DOUBLE
39088: EQUAL
39089: IFTRUE 39093
39091: GO 39118
39093: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: LD_INT 6
39101: PPUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 321
39111: PUSH
39112: LD_INT 2
39114: EQUAL
39115: ST_TO_ADDR
39116: GO 39401
39118: LD_INT 22
39120: DOUBLE
39121: EQUAL
39122: IFTRUE 39132
39124: LD_INT 36
39126: DOUBLE
39127: EQUAL
39128: IFTRUE 39132
39130: GO 39157
39132: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39133: LD_ADDR_VAR 0 3
39137: PUSH
39138: LD_INT 15
39140: PPUSH
39141: LD_VAR 0 1
39145: PPUSH
39146: CALL_OW 321
39150: PUSH
39151: LD_INT 2
39153: EQUAL
39154: ST_TO_ADDR
39155: GO 39401
39157: LD_INT 30
39159: DOUBLE
39160: EQUAL
39161: IFTRUE 39165
39163: GO 39190
39165: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39166: LD_ADDR_VAR 0 3
39170: PUSH
39171: LD_INT 20
39173: PPUSH
39174: LD_VAR 0 1
39178: PPUSH
39179: CALL_OW 321
39183: PUSH
39184: LD_INT 2
39186: EQUAL
39187: ST_TO_ADDR
39188: GO 39401
39190: LD_INT 28
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39204
39196: LD_INT 21
39198: DOUBLE
39199: EQUAL
39200: IFTRUE 39204
39202: GO 39229
39204: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_INT 21
39212: PPUSH
39213: LD_VAR 0 1
39217: PPUSH
39218: CALL_OW 321
39222: PUSH
39223: LD_INT 2
39225: EQUAL
39226: ST_TO_ADDR
39227: GO 39401
39229: LD_INT 16
39231: DOUBLE
39232: EQUAL
39233: IFTRUE 39237
39235: GO 39262
39237: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: LD_INT 84
39245: PPUSH
39246: LD_VAR 0 1
39250: PPUSH
39251: CALL_OW 321
39255: PUSH
39256: LD_INT 2
39258: EQUAL
39259: ST_TO_ADDR
39260: GO 39401
39262: LD_INT 19
39264: DOUBLE
39265: EQUAL
39266: IFTRUE 39276
39268: LD_INT 23
39270: DOUBLE
39271: EQUAL
39272: IFTRUE 39276
39274: GO 39301
39276: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_INT 83
39284: PPUSH
39285: LD_VAR 0 1
39289: PPUSH
39290: CALL_OW 321
39294: PUSH
39295: LD_INT 2
39297: EQUAL
39298: ST_TO_ADDR
39299: GO 39401
39301: LD_INT 17
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39334
39309: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39310: LD_ADDR_VAR 0 3
39314: PUSH
39315: LD_INT 39
39317: PPUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 321
39327: PUSH
39328: LD_INT 2
39330: EQUAL
39331: ST_TO_ADDR
39332: GO 39401
39334: LD_INT 18
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39367
39342: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_INT 40
39350: PPUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 321
39360: PUSH
39361: LD_INT 2
39363: EQUAL
39364: ST_TO_ADDR
39365: GO 39401
39367: LD_INT 27
39369: DOUBLE
39370: EQUAL
39371: IFTRUE 39375
39373: GO 39400
39375: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39376: LD_ADDR_VAR 0 3
39380: PUSH
39381: LD_INT 35
39383: PPUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 321
39393: PUSH
39394: LD_INT 2
39396: EQUAL
39397: ST_TO_ADDR
39398: GO 39401
39400: POP
// end ;
39401: LD_VAR 0 3
39405: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39406: LD_INT 0
39408: PPUSH
39409: PPUSH
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
// result := false ;
39419: LD_ADDR_VAR 0 6
39423: PUSH
39424: LD_INT 0
39426: ST_TO_ADDR
// if btype = b_depot then
39427: LD_VAR 0 2
39431: PUSH
39432: LD_INT 0
39434: EQUAL
39435: IFFALSE 39447
// begin result := true ;
39437: LD_ADDR_VAR 0 6
39441: PUSH
39442: LD_INT 1
39444: ST_TO_ADDR
// exit ;
39445: GO 40273
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39447: LD_VAR 0 1
39451: NOT
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 266
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: IN
39473: NOT
39474: OR
39475: PUSH
39476: LD_VAR 0 2
39480: NOT
39481: OR
39482: PUSH
39483: LD_VAR 0 5
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: LD_INT 4
39502: PUSH
39503: LD_INT 5
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: IN
39514: NOT
39515: OR
39516: PUSH
39517: LD_VAR 0 3
39521: PPUSH
39522: LD_VAR 0 4
39526: PPUSH
39527: CALL_OW 488
39531: NOT
39532: OR
39533: IFFALSE 39537
// exit ;
39535: GO 40273
// side := GetSide ( depot ) ;
39537: LD_ADDR_VAR 0 9
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 255
39551: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39552: LD_VAR 0 9
39556: PPUSH
39557: LD_VAR 0 2
39561: PPUSH
39562: CALL 39030 0 2
39566: NOT
39567: IFFALSE 39571
// exit ;
39569: GO 40273
// pom := GetBase ( depot ) ;
39571: LD_ADDR_VAR 0 10
39575: PUSH
39576: LD_VAR 0 1
39580: PPUSH
39581: CALL_OW 274
39585: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39586: LD_ADDR_VAR 0 11
39590: PUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: LD_VAR 0 1
39600: PPUSH
39601: CALL_OW 248
39605: PPUSH
39606: CALL_OW 450
39610: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39611: LD_VAR 0 10
39615: PPUSH
39616: LD_INT 1
39618: PPUSH
39619: CALL_OW 275
39623: PUSH
39624: LD_VAR 0 11
39628: PUSH
39629: LD_INT 1
39631: ARRAY
39632: GREATEREQUAL
39633: PUSH
39634: LD_VAR 0 10
39638: PPUSH
39639: LD_INT 2
39641: PPUSH
39642: CALL_OW 275
39646: PUSH
39647: LD_VAR 0 11
39651: PUSH
39652: LD_INT 2
39654: ARRAY
39655: GREATEREQUAL
39656: AND
39657: PUSH
39658: LD_VAR 0 10
39662: PPUSH
39663: LD_INT 3
39665: PPUSH
39666: CALL_OW 275
39670: PUSH
39671: LD_VAR 0 11
39675: PUSH
39676: LD_INT 3
39678: ARRAY
39679: GREATEREQUAL
39680: AND
39681: NOT
39682: IFFALSE 39686
// exit ;
39684: GO 40273
// if GetBType ( depot ) = b_depot then
39686: LD_VAR 0 1
39690: PPUSH
39691: CALL_OW 266
39695: PUSH
39696: LD_INT 0
39698: EQUAL
39699: IFFALSE 39711
// dist := 28 else
39701: LD_ADDR_VAR 0 14
39705: PUSH
39706: LD_INT 28
39708: ST_TO_ADDR
39709: GO 39719
// dist := 36 ;
39711: LD_ADDR_VAR 0 14
39715: PUSH
39716: LD_INT 36
39718: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39719: LD_VAR 0 1
39723: PPUSH
39724: LD_VAR 0 3
39728: PPUSH
39729: LD_VAR 0 4
39733: PPUSH
39734: CALL_OW 297
39738: PUSH
39739: LD_VAR 0 14
39743: GREATER
39744: IFFALSE 39748
// exit ;
39746: GO 40273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39748: LD_ADDR_VAR 0 12
39752: PUSH
39753: LD_VAR 0 2
39757: PPUSH
39758: LD_VAR 0 3
39762: PPUSH
39763: LD_VAR 0 4
39767: PPUSH
39768: LD_VAR 0 5
39772: PPUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 248
39782: PPUSH
39783: LD_INT 0
39785: PPUSH
39786: CALL 40278 0 6
39790: ST_TO_ADDR
// if not hexes then
39791: LD_VAR 0 12
39795: NOT
39796: IFFALSE 39800
// exit ;
39798: GO 40273
// hex := GetHexInfo ( x , y ) ;
39800: LD_ADDR_VAR 0 15
39804: PUSH
39805: LD_VAR 0 3
39809: PPUSH
39810: LD_VAR 0 4
39814: PPUSH
39815: CALL_OW 546
39819: ST_TO_ADDR
// if hex [ 1 ] then
39820: LD_VAR 0 15
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: IFFALSE 39832
// exit ;
39830: GO 40273
// height := hex [ 2 ] ;
39832: LD_ADDR_VAR 0 13
39836: PUSH
39837: LD_VAR 0 15
39841: PUSH
39842: LD_INT 2
39844: ARRAY
39845: ST_TO_ADDR
// for i = 1 to hexes do
39846: LD_ADDR_VAR 0 7
39850: PUSH
39851: DOUBLE
39852: LD_INT 1
39854: DEC
39855: ST_TO_ADDR
39856: LD_VAR 0 12
39860: PUSH
39861: FOR_TO
39862: IFFALSE 40192
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39864: LD_VAR 0 12
39868: PUSH
39869: LD_VAR 0 7
39873: ARRAY
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: PPUSH
39879: LD_VAR 0 12
39883: PUSH
39884: LD_VAR 0 7
39888: ARRAY
39889: PUSH
39890: LD_INT 2
39892: ARRAY
39893: PPUSH
39894: CALL_OW 488
39898: NOT
39899: PUSH
39900: LD_VAR 0 12
39904: PUSH
39905: LD_VAR 0 7
39909: ARRAY
39910: PUSH
39911: LD_INT 1
39913: ARRAY
39914: PPUSH
39915: LD_VAR 0 12
39919: PUSH
39920: LD_VAR 0 7
39924: ARRAY
39925: PUSH
39926: LD_INT 2
39928: ARRAY
39929: PPUSH
39930: CALL_OW 428
39934: PUSH
39935: LD_INT 0
39937: GREATER
39938: OR
39939: PUSH
39940: LD_VAR 0 12
39944: PUSH
39945: LD_VAR 0 7
39949: ARRAY
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PPUSH
39955: LD_VAR 0 12
39959: PUSH
39960: LD_VAR 0 7
39964: ARRAY
39965: PUSH
39966: LD_INT 2
39968: ARRAY
39969: PPUSH
39970: CALL_OW 351
39974: OR
39975: IFFALSE 39981
// exit ;
39977: POP
39978: POP
39979: GO 40273
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39981: LD_ADDR_VAR 0 8
39985: PUSH
39986: LD_VAR 0 12
39990: PUSH
39991: LD_VAR 0 7
39995: ARRAY
39996: PUSH
39997: LD_INT 1
39999: ARRAY
40000: PPUSH
40001: LD_VAR 0 12
40005: PUSH
40006: LD_VAR 0 7
40010: ARRAY
40011: PUSH
40012: LD_INT 2
40014: ARRAY
40015: PPUSH
40016: CALL_OW 546
40020: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40021: LD_VAR 0 8
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: PUSH
40030: LD_VAR 0 8
40034: PUSH
40035: LD_INT 2
40037: ARRAY
40038: PUSH
40039: LD_VAR 0 13
40043: PUSH
40044: LD_INT 2
40046: PLUS
40047: GREATER
40048: OR
40049: PUSH
40050: LD_VAR 0 8
40054: PUSH
40055: LD_INT 2
40057: ARRAY
40058: PUSH
40059: LD_VAR 0 13
40063: PUSH
40064: LD_INT 2
40066: MINUS
40067: LESS
40068: OR
40069: PUSH
40070: LD_VAR 0 8
40074: PUSH
40075: LD_INT 3
40077: ARRAY
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 8
40084: PUSH
40085: LD_INT 9
40087: PUSH
40088: LD_INT 10
40090: PUSH
40091: LD_INT 11
40093: PUSH
40094: LD_INT 12
40096: PUSH
40097: LD_INT 13
40099: PUSH
40100: LD_INT 16
40102: PUSH
40103: LD_INT 17
40105: PUSH
40106: LD_INT 18
40108: PUSH
40109: LD_INT 19
40111: PUSH
40112: LD_INT 20
40114: PUSH
40115: LD_INT 21
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: IN
40133: NOT
40134: OR
40135: PUSH
40136: LD_VAR 0 8
40140: PUSH
40141: LD_INT 5
40143: ARRAY
40144: NOT
40145: OR
40146: PUSH
40147: LD_VAR 0 8
40151: PUSH
40152: LD_INT 6
40154: ARRAY
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 7
40164: PUSH
40165: LD_INT 9
40167: PUSH
40168: LD_INT 10
40170: PUSH
40171: LD_INT 11
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: IN
40182: NOT
40183: OR
40184: IFFALSE 40190
// exit ;
40186: POP
40187: POP
40188: GO 40273
// end ;
40190: GO 39861
40192: POP
40193: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40194: LD_VAR 0 9
40198: PPUSH
40199: LD_VAR 0 3
40203: PPUSH
40204: LD_VAR 0 4
40208: PPUSH
40209: LD_INT 20
40211: PPUSH
40212: CALL 32196 0 4
40216: PUSH
40217: LD_INT 4
40219: ARRAY
40220: IFFALSE 40224
// exit ;
40222: GO 40273
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40224: LD_VAR 0 2
40228: PUSH
40229: LD_INT 29
40231: PUSH
40232: LD_INT 30
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: IN
40239: PUSH
40240: LD_VAR 0 3
40244: PPUSH
40245: LD_VAR 0 4
40249: PPUSH
40250: LD_VAR 0 9
40254: PPUSH
40255: CALL_OW 440
40259: NOT
40260: AND
40261: IFFALSE 40265
// exit ;
40263: GO 40273
// result := true ;
40265: LD_ADDR_VAR 0 6
40269: PUSH
40270: LD_INT 1
40272: ST_TO_ADDR
// end ;
40273: LD_VAR 0 6
40277: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40278: LD_INT 0
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
// result = [ ] ;
40338: LD_ADDR_VAR 0 7
40342: PUSH
40343: EMPTY
40344: ST_TO_ADDR
// temp_list = [ ] ;
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: EMPTY
40351: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40352: LD_VAR 0 4
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: LD_INT 4
40371: PUSH
40372: LD_INT 5
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: IN
40383: NOT
40384: PUSH
40385: LD_VAR 0 1
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: IN
40400: PUSH
40401: LD_VAR 0 5
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 3
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: IN
40420: NOT
40421: AND
40422: OR
40423: IFFALSE 40427
// exit ;
40425: GO 58818
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40427: LD_VAR 0 1
40431: PUSH
40432: LD_INT 6
40434: PUSH
40435: LD_INT 7
40437: PUSH
40438: LD_INT 8
40440: PUSH
40441: LD_INT 13
40443: PUSH
40444: LD_INT 12
40446: PUSH
40447: LD_INT 15
40449: PUSH
40450: LD_INT 11
40452: PUSH
40453: LD_INT 14
40455: PUSH
40456: LD_INT 10
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: IN
40470: IFFALSE 40480
// btype = b_lab ;
40472: LD_ADDR_VAR 0 1
40476: PUSH
40477: LD_INT 6
40479: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40480: LD_VAR 0 6
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: IN
40499: NOT
40500: PUSH
40501: LD_VAR 0 1
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: LD_INT 3
40517: PUSH
40518: LD_INT 6
40520: PUSH
40521: LD_INT 36
40523: PUSH
40524: LD_INT 4
40526: PUSH
40527: LD_INT 5
40529: PUSH
40530: LD_INT 31
40532: PUSH
40533: LD_INT 32
40535: PUSH
40536: LD_INT 33
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: IN
40552: NOT
40553: PUSH
40554: LD_VAR 0 6
40558: PUSH
40559: LD_INT 1
40561: EQUAL
40562: AND
40563: OR
40564: PUSH
40565: LD_VAR 0 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: IN
40580: NOT
40581: PUSH
40582: LD_VAR 0 6
40586: PUSH
40587: LD_INT 2
40589: EQUAL
40590: AND
40591: OR
40592: IFFALSE 40602
// mode = 0 ;
40594: LD_ADDR_VAR 0 6
40598: PUSH
40599: LD_INT 0
40601: ST_TO_ADDR
// case mode of 0 :
40602: LD_VAR 0 6
40606: PUSH
40607: LD_INT 0
40609: DOUBLE
40610: EQUAL
40611: IFTRUE 40615
40613: GO 52068
40615: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40616: LD_ADDR_VAR 0 11
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40809: LD_ADDR_VAR 0 12
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 3
40966: NEG
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41005: LD_ADDR_VAR 0 13
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 3
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: LD_INT 3
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41204: LD_ADDR_VAR 0 14
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41400: LD_ADDR_VAR 0 15
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 3
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41593: LD_ADDR_VAR 0 16
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41786: LD_ADDR_VAR 0 17
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42016: LD_ADDR_VAR 0 18
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 2
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42246: LD_ADDR_VAR 0 19
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: LD_INT 1
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42476: LD_ADDR_VAR 0 20
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42706: LD_ADDR_VAR 0 21
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42936: LD_ADDR_VAR 0 22
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43166: LD_ADDR_VAR 0 23
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 3
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43446: LD_ADDR_VAR 0 24
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: NEG
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43722: LD_ADDR_VAR 0 25
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 3
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43996: LD_ADDR_VAR 0 26
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44272: LD_ADDR_VAR 0 27
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 3
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44552: LD_ADDR_VAR 0 28
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 3
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44834: LD_ADDR_VAR 0 29
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45113: LD_ADDR_VAR 0 30
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45391: LD_ADDR_VAR 0 31
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45669: LD_ADDR_VAR 0 32
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45947: LD_ADDR_VAR 0 33
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 3
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 3
46191: NEG
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46226: LD_ADDR_VAR 0 34
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 2
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46506: LD_ADDR_VAR 0 35
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46618: LD_ADDR_VAR 0 36
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46730: LD_ADDR_VAR 0 37
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46842: LD_ADDR_VAR 0 38
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46954: LD_ADDR_VAR 0 39
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47066: LD_ADDR_VAR 0 40
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47178: LD_ADDR_VAR 0 41
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47528: LD_ADDR_VAR 0 42
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47878: LD_ADDR_VAR 0 43
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48226: LD_ADDR_VAR 0 44
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48576: LD_ADDR_VAR 0 45
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 2
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: NEG
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48926: LD_ADDR_VAR 0 46
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 3
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 3
49222: NEG
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49274: LD_ADDR_VAR 0 47
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49425: LD_ADDR_VAR 0 48
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49572: LD_ADDR_VAR 0 49
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49716: LD_ADDR_VAR 0 50
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49860: LD_ADDR_VAR 0 51
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50007: LD_ADDR_VAR 0 52
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50158: LD_ADDR_VAR 0 53
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50388: LD_ADDR_VAR 0 54
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50618: LD_ADDR_VAR 0 55
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50848: LD_ADDR_VAR 0 56
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51078: LD_ADDR_VAR 0 57
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51308: LD_ADDR_VAR 0 58
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51538: LD_ADDR_VAR 0 59
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51626: LD_ADDR_VAR 0 60
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51714: LD_ADDR_VAR 0 61
51718: PUSH
51719: LD_INT 0
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51802: LD_ADDR_VAR 0 62
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51890: LD_ADDR_VAR 0 63
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51978: LD_ADDR_VAR 0 64
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: ST_TO_ADDR
// end ; 1 :
52066: GO 57963
52068: LD_INT 1
52070: DOUBLE
52071: EQUAL
52072: IFTRUE 52076
52074: GO 54699
52076: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52077: LD_ADDR_VAR 0 11
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52121: LD_ADDR_VAR 0 12
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52162: LD_ADDR_VAR 0 13
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 3
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52202: LD_ADDR_VAR 0 14
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52243: LD_ADDR_VAR 0 15
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52287: LD_ADDR_VAR 0 16
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 2
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52333: LD_ADDR_VAR 0 17
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 3
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: LIST
52376: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52377: LD_ADDR_VAR 0 18
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52418: LD_ADDR_VAR 0 19
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52458: LD_ADDR_VAR 0 20
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52499: LD_ADDR_VAR 0 21
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52543: LD_ADDR_VAR 0 22
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52589: LD_ADDR_VAR 0 23
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 4
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52633: LD_ADDR_VAR 0 24
52637: PUSH
52638: LD_INT 3
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 4
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52674: LD_ADDR_VAR 0 25
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 4
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52714: LD_ADDR_VAR 0 26
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 4
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52755: LD_ADDR_VAR 0 27
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 4
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52799: LD_ADDR_VAR 0 28
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 4
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52845: LD_ADDR_VAR 0 29
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 4
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 4
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 3
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 5
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 5
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 4
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: LD_INT 6
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 6
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 5
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53000: LD_ADDR_VAR 0 30
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 5
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 5
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 6
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 6
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53143: LD_ADDR_VAR 0 31
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 4
53180: PUSH
53181: LD_INT 3
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: LD_INT 4
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 5
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: LD_INT 5
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 6
53240: PUSH
53241: LD_INT 5
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 6
53250: PUSH
53251: LD_INT 6
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: PUSH
53261: LD_INT 6
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53282: LD_ADDR_VAR 0 32
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 4
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 5
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 4
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 6
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 6
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 5
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53425: LD_ADDR_VAR 0 33
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: NEG
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: NEG
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 4
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 5
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 5
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 5
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 6
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 6
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53580: LD_ADDR_VAR 0 34
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: NEG
53624: PUSH
53625: LD_INT 4
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 4
53635: NEG
53636: PUSH
53637: LD_INT 3
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: NEG
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 4
53659: NEG
53660: PUSH
53661: LD_INT 5
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 5
53671: NEG
53672: PUSH
53673: LD_INT 4
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 5
53683: NEG
53684: PUSH
53685: LD_INT 5
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 5
53695: NEG
53696: PUSH
53697: LD_INT 6
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 6
53707: NEG
53708: PUSH
53709: LD_INT 5
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 6
53719: NEG
53720: PUSH
53721: LD_INT 6
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53743: LD_ADDR_VAR 0 41
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53787: LD_ADDR_VAR 0 42
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53828: LD_ADDR_VAR 0 43
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 2
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53868: LD_ADDR_VAR 0 44
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53909: LD_ADDR_VAR 0 45
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53953: LD_ADDR_VAR 0 46
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53999: LD_ADDR_VAR 0 47
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54032: LD_ADDR_VAR 0 48
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54063: LD_ADDR_VAR 0 49
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54092: LD_ADDR_VAR 0 50
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54121: LD_ADDR_VAR 0 51
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54152: LD_ADDR_VAR 0 52
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54185: LD_ADDR_VAR 0 53
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54229: LD_ADDR_VAR 0 54
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54270: LD_ADDR_VAR 0 55
54274: PUSH
54275: LD_INT 3
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54310: LD_ADDR_VAR 0 56
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54351: LD_ADDR_VAR 0 57
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54395: LD_ADDR_VAR 0 58
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 3
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54441: LD_ADDR_VAR 0 59
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 2
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54485: LD_ADDR_VAR 0 60
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54526: LD_ADDR_VAR 0 61
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54566: LD_ADDR_VAR 0 62
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54607: LD_ADDR_VAR 0 63
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54651: LD_ADDR_VAR 0 64
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// end ; 2 :
54697: GO 57963
54699: LD_INT 2
54701: DOUBLE
54702: EQUAL
54703: IFTRUE 54707
54705: GO 57962
54707: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54708: LD_ADDR_VAR 0 29
54712: PUSH
54713: LD_INT 4
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 4
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 5
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 5
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 5
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 4
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: LD_INT 4
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 4
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: LD_INT 5
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 5
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 5
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 3
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 4
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 4
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 4
55093: NEG
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 4
55105: NEG
55106: PUSH
55107: LD_INT 5
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 4
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 4
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 5
55153: NEG
55154: PUSH
55155: LD_INT 4
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 5
55165: NEG
55166: PUSH
55167: LD_INT 5
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: NEG
55178: PUSH
55179: LD_INT 5
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 5
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55246: LD_ADDR_VAR 0 30
55250: PUSH
55251: LD_INT 4
55253: PUSH
55254: LD_INT 4
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 5
55283: PUSH
55284: LD_INT 5
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 4
55293: PUSH
55294: LD_INT 5
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 5
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: LD_INT 5
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 4
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 4
55436: NEG
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 4
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 4
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 5
55492: NEG
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 5
55503: NEG
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 5
55515: NEG
55516: PUSH
55517: LD_INT 2
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: LD_INT 4
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: LD_INT 4
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 4
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 4
55634: NEG
55635: PUSH
55636: LD_INT 2
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 5
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 4
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: LD_INT 5
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: LD_INT 3
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55793: LD_ADDR_VAR 0 31
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 3
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 5
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 5
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 4
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 5
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 3
55893: NEG
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: NEG
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 4
55972: NEG
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 4
55995: NEG
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 4
56007: NEG
56008: PUSH
56009: LD_INT 5
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: LD_INT 4
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: LD_INT 4
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 5
56067: NEG
56068: PUSH
56069: LD_INT 5
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: LD_INT 5
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 5
56091: NEG
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 2
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: LD_INT 4
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 4
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 5
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 4
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 2
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56343: LD_ADDR_VAR 0 32
56347: PUSH
56348: LD_INT 4
56350: NEG
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 5
56406: NEG
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 5
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 5
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 3
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 3
56464: NEG
56465: PUSH
56466: LD_INT 4
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: NEG
56525: PUSH
56526: LD_INT 4
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: LD_INT 4
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 4
56548: NEG
56549: PUSH
56550: LD_INT 2
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 5
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 4
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 5
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: LD_INT 5
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 4
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 3
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 4
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 4
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 5
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 5
56785: PUSH
56786: LD_INT 5
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: LD_INT 5
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: LD_INT 5
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56890: LD_ADDR_VAR 0 33
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 4
56909: NEG
56910: PUSH
56911: LD_INT 5
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 4
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: NEG
56958: PUSH
56959: LD_INT 4
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 5
56969: NEG
56970: PUSH
56971: LD_INT 5
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 5
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 5
56993: NEG
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 2
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 4
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 4
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 5
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 5
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 5
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: LD_INT 3
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 4
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 4
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 4
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 5
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 5
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57428: LD_ADDR_VAR 0 34
57432: PUSH
57433: LD_INT 0
57435: PUSH
57436: LD_INT 4
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 5
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: LD_INT 5
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 5
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 4
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 4
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 4
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 4
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 4
57640: PUSH
57641: LD_INT 3
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 5
57650: PUSH
57651: LD_INT 4
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 5
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: LD_INT 5
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 4
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 3
57690: PUSH
57691: LD_INT 3
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: LD_INT 3
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 5
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: PUSH
57751: LD_INT 4
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: LD_INT 4
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: NEG
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 4
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 5
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 5
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: ST_TO_ADDR
// end ; end ;
57960: GO 57963
57962: POP
// case btype of b_depot , b_warehouse :
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 0
57970: DOUBLE
57971: EQUAL
57972: IFTRUE 57982
57974: LD_INT 1
57976: DOUBLE
57977: EQUAL
57978: IFTRUE 57982
57980: GO 58183
57982: POP
// case nation of nation_american :
57983: LD_VAR 0 5
57987: PUSH
57988: LD_INT 1
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 57996
57994: GO 58052
57996: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57997: LD_ADDR_VAR 0 9
58001: PUSH
58002: LD_VAR 0 11
58006: PUSH
58007: LD_VAR 0 12
58011: PUSH
58012: LD_VAR 0 13
58016: PUSH
58017: LD_VAR 0 14
58021: PUSH
58022: LD_VAR 0 15
58026: PUSH
58027: LD_VAR 0 16
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: PUSH
58040: LD_VAR 0 4
58044: PUSH
58045: LD_INT 1
58047: PLUS
58048: ARRAY
58049: ST_TO_ADDR
58050: GO 58181
58052: LD_INT 2
58054: DOUBLE
58055: EQUAL
58056: IFTRUE 58060
58058: GO 58116
58060: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58061: LD_ADDR_VAR 0 9
58065: PUSH
58066: LD_VAR 0 17
58070: PUSH
58071: LD_VAR 0 18
58075: PUSH
58076: LD_VAR 0 19
58080: PUSH
58081: LD_VAR 0 20
58085: PUSH
58086: LD_VAR 0 21
58090: PUSH
58091: LD_VAR 0 22
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: PUSH
58104: LD_VAR 0 4
58108: PUSH
58109: LD_INT 1
58111: PLUS
58112: ARRAY
58113: ST_TO_ADDR
58114: GO 58181
58116: LD_INT 3
58118: DOUBLE
58119: EQUAL
58120: IFTRUE 58124
58122: GO 58180
58124: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58125: LD_ADDR_VAR 0 9
58129: PUSH
58130: LD_VAR 0 23
58134: PUSH
58135: LD_VAR 0 24
58139: PUSH
58140: LD_VAR 0 25
58144: PUSH
58145: LD_VAR 0 26
58149: PUSH
58150: LD_VAR 0 27
58154: PUSH
58155: LD_VAR 0 28
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: PUSH
58168: LD_VAR 0 4
58172: PUSH
58173: LD_INT 1
58175: PLUS
58176: ARRAY
58177: ST_TO_ADDR
58178: GO 58181
58180: POP
58181: GO 58736
58183: LD_INT 2
58185: DOUBLE
58186: EQUAL
58187: IFTRUE 58197
58189: LD_INT 3
58191: DOUBLE
58192: EQUAL
58193: IFTRUE 58197
58195: GO 58253
58197: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58198: LD_ADDR_VAR 0 9
58202: PUSH
58203: LD_VAR 0 29
58207: PUSH
58208: LD_VAR 0 30
58212: PUSH
58213: LD_VAR 0 31
58217: PUSH
58218: LD_VAR 0 32
58222: PUSH
58223: LD_VAR 0 33
58227: PUSH
58228: LD_VAR 0 34
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: PUSH
58241: LD_VAR 0 4
58245: PUSH
58246: LD_INT 1
58248: PLUS
58249: ARRAY
58250: ST_TO_ADDR
58251: GO 58736
58253: LD_INT 16
58255: DOUBLE
58256: EQUAL
58257: IFTRUE 58315
58259: LD_INT 17
58261: DOUBLE
58262: EQUAL
58263: IFTRUE 58315
58265: LD_INT 18
58267: DOUBLE
58268: EQUAL
58269: IFTRUE 58315
58271: LD_INT 19
58273: DOUBLE
58274: EQUAL
58275: IFTRUE 58315
58277: LD_INT 22
58279: DOUBLE
58280: EQUAL
58281: IFTRUE 58315
58283: LD_INT 20
58285: DOUBLE
58286: EQUAL
58287: IFTRUE 58315
58289: LD_INT 21
58291: DOUBLE
58292: EQUAL
58293: IFTRUE 58315
58295: LD_INT 23
58297: DOUBLE
58298: EQUAL
58299: IFTRUE 58315
58301: LD_INT 24
58303: DOUBLE
58304: EQUAL
58305: IFTRUE 58315
58307: LD_INT 25
58309: DOUBLE
58310: EQUAL
58311: IFTRUE 58315
58313: GO 58371
58315: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58316: LD_ADDR_VAR 0 9
58320: PUSH
58321: LD_VAR 0 35
58325: PUSH
58326: LD_VAR 0 36
58330: PUSH
58331: LD_VAR 0 37
58335: PUSH
58336: LD_VAR 0 38
58340: PUSH
58341: LD_VAR 0 39
58345: PUSH
58346: LD_VAR 0 40
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: PUSH
58359: LD_VAR 0 4
58363: PUSH
58364: LD_INT 1
58366: PLUS
58367: ARRAY
58368: ST_TO_ADDR
58369: GO 58736
58371: LD_INT 6
58373: DOUBLE
58374: EQUAL
58375: IFTRUE 58427
58377: LD_INT 7
58379: DOUBLE
58380: EQUAL
58381: IFTRUE 58427
58383: LD_INT 8
58385: DOUBLE
58386: EQUAL
58387: IFTRUE 58427
58389: LD_INT 13
58391: DOUBLE
58392: EQUAL
58393: IFTRUE 58427
58395: LD_INT 12
58397: DOUBLE
58398: EQUAL
58399: IFTRUE 58427
58401: LD_INT 15
58403: DOUBLE
58404: EQUAL
58405: IFTRUE 58427
58407: LD_INT 11
58409: DOUBLE
58410: EQUAL
58411: IFTRUE 58427
58413: LD_INT 14
58415: DOUBLE
58416: EQUAL
58417: IFTRUE 58427
58419: LD_INT 10
58421: DOUBLE
58422: EQUAL
58423: IFTRUE 58427
58425: GO 58483
58427: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58428: LD_ADDR_VAR 0 9
58432: PUSH
58433: LD_VAR 0 41
58437: PUSH
58438: LD_VAR 0 42
58442: PUSH
58443: LD_VAR 0 43
58447: PUSH
58448: LD_VAR 0 44
58452: PUSH
58453: LD_VAR 0 45
58457: PUSH
58458: LD_VAR 0 46
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: PUSH
58471: LD_VAR 0 4
58475: PUSH
58476: LD_INT 1
58478: PLUS
58479: ARRAY
58480: ST_TO_ADDR
58481: GO 58736
58483: LD_INT 36
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58491
58489: GO 58547
58491: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58492: LD_ADDR_VAR 0 9
58496: PUSH
58497: LD_VAR 0 47
58501: PUSH
58502: LD_VAR 0 48
58506: PUSH
58507: LD_VAR 0 49
58511: PUSH
58512: LD_VAR 0 50
58516: PUSH
58517: LD_VAR 0 51
58521: PUSH
58522: LD_VAR 0 52
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: PUSH
58535: LD_VAR 0 4
58539: PUSH
58540: LD_INT 1
58542: PLUS
58543: ARRAY
58544: ST_TO_ADDR
58545: GO 58736
58547: LD_INT 4
58549: DOUBLE
58550: EQUAL
58551: IFTRUE 58573
58553: LD_INT 5
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58573
58559: LD_INT 34
58561: DOUBLE
58562: EQUAL
58563: IFTRUE 58573
58565: LD_INT 37
58567: DOUBLE
58568: EQUAL
58569: IFTRUE 58573
58571: GO 58629
58573: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58574: LD_ADDR_VAR 0 9
58578: PUSH
58579: LD_VAR 0 53
58583: PUSH
58584: LD_VAR 0 54
58588: PUSH
58589: LD_VAR 0 55
58593: PUSH
58594: LD_VAR 0 56
58598: PUSH
58599: LD_VAR 0 57
58603: PUSH
58604: LD_VAR 0 58
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: PUSH
58617: LD_VAR 0 4
58621: PUSH
58622: LD_INT 1
58624: PLUS
58625: ARRAY
58626: ST_TO_ADDR
58627: GO 58736
58629: LD_INT 31
58631: DOUBLE
58632: EQUAL
58633: IFTRUE 58679
58635: LD_INT 32
58637: DOUBLE
58638: EQUAL
58639: IFTRUE 58679
58641: LD_INT 33
58643: DOUBLE
58644: EQUAL
58645: IFTRUE 58679
58647: LD_INT 27
58649: DOUBLE
58650: EQUAL
58651: IFTRUE 58679
58653: LD_INT 26
58655: DOUBLE
58656: EQUAL
58657: IFTRUE 58679
58659: LD_INT 28
58661: DOUBLE
58662: EQUAL
58663: IFTRUE 58679
58665: LD_INT 29
58667: DOUBLE
58668: EQUAL
58669: IFTRUE 58679
58671: LD_INT 30
58673: DOUBLE
58674: EQUAL
58675: IFTRUE 58679
58677: GO 58735
58679: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58680: LD_ADDR_VAR 0 9
58684: PUSH
58685: LD_VAR 0 59
58689: PUSH
58690: LD_VAR 0 60
58694: PUSH
58695: LD_VAR 0 61
58699: PUSH
58700: LD_VAR 0 62
58704: PUSH
58705: LD_VAR 0 63
58709: PUSH
58710: LD_VAR 0 64
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: PUSH
58723: LD_VAR 0 4
58727: PUSH
58728: LD_INT 1
58730: PLUS
58731: ARRAY
58732: ST_TO_ADDR
58733: GO 58736
58735: POP
// temp_list2 = [ ] ;
58736: LD_ADDR_VAR 0 10
58740: PUSH
58741: EMPTY
58742: ST_TO_ADDR
// for i in temp_list do
58743: LD_ADDR_VAR 0 8
58747: PUSH
58748: LD_VAR 0 9
58752: PUSH
58753: FOR_IN
58754: IFFALSE 58806
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58756: LD_ADDR_VAR 0 10
58760: PUSH
58761: LD_VAR 0 10
58765: PUSH
58766: LD_VAR 0 8
58770: PUSH
58771: LD_INT 1
58773: ARRAY
58774: PUSH
58775: LD_VAR 0 2
58779: PLUS
58780: PUSH
58781: LD_VAR 0 8
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: PUSH
58790: LD_VAR 0 3
58794: PLUS
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: ADD
58803: ST_TO_ADDR
58804: GO 58753
58806: POP
58807: POP
// result = temp_list2 ;
58808: LD_ADDR_VAR 0 7
58812: PUSH
58813: LD_VAR 0 10
58817: ST_TO_ADDR
// end ;
58818: LD_VAR 0 7
58822: RET
// export function EnemyInRange ( unit , dist ) ; begin
58823: LD_INT 0
58825: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58826: LD_ADDR_VAR 0 3
58830: PUSH
58831: LD_VAR 0 1
58835: PPUSH
58836: CALL_OW 255
58840: PPUSH
58841: LD_VAR 0 1
58845: PPUSH
58846: CALL_OW 250
58850: PPUSH
58851: LD_VAR 0 1
58855: PPUSH
58856: CALL_OW 251
58860: PPUSH
58861: LD_VAR 0 2
58865: PPUSH
58866: CALL 32196 0 4
58870: PUSH
58871: LD_INT 4
58873: ARRAY
58874: ST_TO_ADDR
// end ;
58875: LD_VAR 0 3
58879: RET
// export function PlayerSeeMe ( unit ) ; begin
58880: LD_INT 0
58882: PPUSH
// result := See ( your_side , unit ) ;
58883: LD_ADDR_VAR 0 2
58887: PUSH
58888: LD_OWVAR 2
58892: PPUSH
58893: LD_VAR 0 1
58897: PPUSH
58898: CALL_OW 292
58902: ST_TO_ADDR
// end ;
58903: LD_VAR 0 2
58907: RET
// export function ReverseDir ( unit ) ; begin
58908: LD_INT 0
58910: PPUSH
// if not unit then
58911: LD_VAR 0 1
58915: NOT
58916: IFFALSE 58920
// exit ;
58918: GO 58943
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58920: LD_ADDR_VAR 0 2
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 254
58934: PUSH
58935: LD_INT 3
58937: PLUS
58938: PUSH
58939: LD_INT 6
58941: MOD
58942: ST_TO_ADDR
// end ;
58943: LD_VAR 0 2
58947: RET
// export function ReverseArray ( array ) ; var i ; begin
58948: LD_INT 0
58950: PPUSH
58951: PPUSH
// if not array then
58952: LD_VAR 0 1
58956: NOT
58957: IFFALSE 58961
// exit ;
58959: GO 59016
// result := [ ] ;
58961: LD_ADDR_VAR 0 2
58965: PUSH
58966: EMPTY
58967: ST_TO_ADDR
// for i := array downto 1 do
58968: LD_ADDR_VAR 0 3
58972: PUSH
58973: DOUBLE
58974: LD_VAR 0 1
58978: INC
58979: ST_TO_ADDR
58980: LD_INT 1
58982: PUSH
58983: FOR_DOWNTO
58984: IFFALSE 59014
// result := Join ( result , array [ i ] ) ;
58986: LD_ADDR_VAR 0 2
58990: PUSH
58991: LD_VAR 0 2
58995: PPUSH
58996: LD_VAR 0 1
59000: PUSH
59001: LD_VAR 0 3
59005: ARRAY
59006: PPUSH
59007: CALL 63681 0 2
59011: ST_TO_ADDR
59012: GO 58983
59014: POP
59015: POP
// end ;
59016: LD_VAR 0 2
59020: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59021: LD_INT 0
59023: PPUSH
59024: PPUSH
59025: PPUSH
59026: PPUSH
59027: PPUSH
59028: PPUSH
// if not unit or not hexes then
59029: LD_VAR 0 1
59033: NOT
59034: PUSH
59035: LD_VAR 0 2
59039: NOT
59040: OR
59041: IFFALSE 59045
// exit ;
59043: GO 59168
// dist := 9999 ;
59045: LD_ADDR_VAR 0 5
59049: PUSH
59050: LD_INT 9999
59052: ST_TO_ADDR
// for i = 1 to hexes do
59053: LD_ADDR_VAR 0 4
59057: PUSH
59058: DOUBLE
59059: LD_INT 1
59061: DEC
59062: ST_TO_ADDR
59063: LD_VAR 0 2
59067: PUSH
59068: FOR_TO
59069: IFFALSE 59156
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59071: LD_ADDR_VAR 0 6
59075: PUSH
59076: LD_VAR 0 1
59080: PPUSH
59081: LD_VAR 0 2
59085: PUSH
59086: LD_VAR 0 4
59090: ARRAY
59091: PUSH
59092: LD_INT 1
59094: ARRAY
59095: PPUSH
59096: LD_VAR 0 2
59100: PUSH
59101: LD_VAR 0 4
59105: ARRAY
59106: PUSH
59107: LD_INT 2
59109: ARRAY
59110: PPUSH
59111: CALL_OW 297
59115: ST_TO_ADDR
// if tdist < dist then
59116: LD_VAR 0 6
59120: PUSH
59121: LD_VAR 0 5
59125: LESS
59126: IFFALSE 59154
// begin hex := hexes [ i ] ;
59128: LD_ADDR_VAR 0 8
59132: PUSH
59133: LD_VAR 0 2
59137: PUSH
59138: LD_VAR 0 4
59142: ARRAY
59143: ST_TO_ADDR
// dist := tdist ;
59144: LD_ADDR_VAR 0 5
59148: PUSH
59149: LD_VAR 0 6
59153: ST_TO_ADDR
// end ; end ;
59154: GO 59068
59156: POP
59157: POP
// result := hex ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_VAR 0 8
59167: ST_TO_ADDR
// end ;
59168: LD_VAR 0 3
59172: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59173: LD_INT 0
59175: PPUSH
59176: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59177: LD_VAR 0 1
59181: NOT
59182: PUSH
59183: LD_VAR 0 1
59187: PUSH
59188: LD_INT 21
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 23
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PPUSH
59212: CALL_OW 69
59216: IN
59217: NOT
59218: OR
59219: IFFALSE 59223
// exit ;
59221: GO 59270
// for i = 1 to 3 do
59223: LD_ADDR_VAR 0 3
59227: PUSH
59228: DOUBLE
59229: LD_INT 1
59231: DEC
59232: ST_TO_ADDR
59233: LD_INT 3
59235: PUSH
59236: FOR_TO
59237: IFFALSE 59268
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 250
59248: PPUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 251
59258: PPUSH
59259: LD_INT 1
59261: PPUSH
59262: CALL_OW 453
59266: GO 59236
59268: POP
59269: POP
// end ;
59270: LD_VAR 0 2
59274: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59275: LD_INT 0
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
// if not unit or not enemy_unit then
59283: LD_VAR 0 1
59287: NOT
59288: PUSH
59289: LD_VAR 0 2
59293: NOT
59294: OR
59295: IFFALSE 59299
// exit ;
59297: GO 59766
// if GetLives ( i ) < 250 then
59299: LD_VAR 0 4
59303: PPUSH
59304: CALL_OW 256
59308: PUSH
59309: LD_INT 250
59311: LESS
59312: IFFALSE 59325
// begin ComAutodestruct ( i ) ;
59314: LD_VAR 0 4
59318: PPUSH
59319: CALL 59173 0 1
// exit ;
59323: GO 59766
// end ; x := GetX ( enemy_unit ) ;
59325: LD_ADDR_VAR 0 7
59329: PUSH
59330: LD_VAR 0 2
59334: PPUSH
59335: CALL_OW 250
59339: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59340: LD_ADDR_VAR 0 8
59344: PUSH
59345: LD_VAR 0 2
59349: PPUSH
59350: CALL_OW 251
59354: ST_TO_ADDR
// if not x or not y then
59355: LD_VAR 0 7
59359: NOT
59360: PUSH
59361: LD_VAR 0 8
59365: NOT
59366: OR
59367: IFFALSE 59371
// exit ;
59369: GO 59766
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59371: LD_ADDR_VAR 0 6
59375: PUSH
59376: LD_VAR 0 7
59380: PPUSH
59381: LD_INT 0
59383: PPUSH
59384: LD_INT 4
59386: PPUSH
59387: CALL_OW 272
59391: PUSH
59392: LD_VAR 0 8
59396: PPUSH
59397: LD_INT 0
59399: PPUSH
59400: LD_INT 4
59402: PPUSH
59403: CALL_OW 273
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_VAR 0 7
59416: PPUSH
59417: LD_INT 1
59419: PPUSH
59420: LD_INT 4
59422: PPUSH
59423: CALL_OW 272
59427: PUSH
59428: LD_VAR 0 8
59432: PPUSH
59433: LD_INT 1
59435: PPUSH
59436: LD_INT 4
59438: PPUSH
59439: CALL_OW 273
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_VAR 0 7
59452: PPUSH
59453: LD_INT 2
59455: PPUSH
59456: LD_INT 4
59458: PPUSH
59459: CALL_OW 272
59463: PUSH
59464: LD_VAR 0 8
59468: PPUSH
59469: LD_INT 2
59471: PPUSH
59472: LD_INT 4
59474: PPUSH
59475: CALL_OW 273
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_VAR 0 7
59488: PPUSH
59489: LD_INT 3
59491: PPUSH
59492: LD_INT 4
59494: PPUSH
59495: CALL_OW 272
59499: PUSH
59500: LD_VAR 0 8
59504: PPUSH
59505: LD_INT 3
59507: PPUSH
59508: LD_INT 4
59510: PPUSH
59511: CALL_OW 273
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_VAR 0 7
59524: PPUSH
59525: LD_INT 4
59527: PPUSH
59528: LD_INT 4
59530: PPUSH
59531: CALL_OW 272
59535: PUSH
59536: LD_VAR 0 8
59540: PPUSH
59541: LD_INT 4
59543: PPUSH
59544: LD_INT 4
59546: PPUSH
59547: CALL_OW 273
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_VAR 0 7
59560: PPUSH
59561: LD_INT 5
59563: PPUSH
59564: LD_INT 4
59566: PPUSH
59567: CALL_OW 272
59571: PUSH
59572: LD_VAR 0 8
59576: PPUSH
59577: LD_INT 5
59579: PPUSH
59580: LD_INT 4
59582: PPUSH
59583: CALL_OW 273
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// for i = tmp downto 1 do
59600: LD_ADDR_VAR 0 4
59604: PUSH
59605: DOUBLE
59606: LD_VAR 0 6
59610: INC
59611: ST_TO_ADDR
59612: LD_INT 1
59614: PUSH
59615: FOR_DOWNTO
59616: IFFALSE 59717
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59618: LD_VAR 0 6
59622: PUSH
59623: LD_VAR 0 4
59627: ARRAY
59628: PUSH
59629: LD_INT 1
59631: ARRAY
59632: PPUSH
59633: LD_VAR 0 6
59637: PUSH
59638: LD_VAR 0 4
59642: ARRAY
59643: PUSH
59644: LD_INT 2
59646: ARRAY
59647: PPUSH
59648: CALL_OW 488
59652: NOT
59653: PUSH
59654: LD_VAR 0 6
59658: PUSH
59659: LD_VAR 0 4
59663: ARRAY
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PPUSH
59669: LD_VAR 0 6
59673: PUSH
59674: LD_VAR 0 4
59678: ARRAY
59679: PUSH
59680: LD_INT 2
59682: ARRAY
59683: PPUSH
59684: CALL_OW 428
59688: PUSH
59689: LD_INT 0
59691: NONEQUAL
59692: OR
59693: IFFALSE 59715
// tmp := Delete ( tmp , i ) ;
59695: LD_ADDR_VAR 0 6
59699: PUSH
59700: LD_VAR 0 6
59704: PPUSH
59705: LD_VAR 0 4
59709: PPUSH
59710: CALL_OW 3
59714: ST_TO_ADDR
59715: GO 59615
59717: POP
59718: POP
// j := GetClosestHex ( unit , tmp ) ;
59719: LD_ADDR_VAR 0 5
59723: PUSH
59724: LD_VAR 0 1
59728: PPUSH
59729: LD_VAR 0 6
59733: PPUSH
59734: CALL 59021 0 2
59738: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59739: LD_VAR 0 1
59743: PPUSH
59744: LD_VAR 0 5
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PPUSH
59753: LD_VAR 0 5
59757: PUSH
59758: LD_INT 2
59760: ARRAY
59761: PPUSH
59762: CALL_OW 111
// end ;
59766: LD_VAR 0 3
59770: RET
// export function PrepareApemanSoldier ( ) ; begin
59771: LD_INT 0
59773: PPUSH
// uc_nation := 0 ;
59774: LD_ADDR_OWVAR 21
59778: PUSH
59779: LD_INT 0
59781: ST_TO_ADDR
// hc_sex := sex_male ;
59782: LD_ADDR_OWVAR 27
59786: PUSH
59787: LD_INT 1
59789: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59790: LD_ADDR_OWVAR 28
59794: PUSH
59795: LD_INT 15
59797: ST_TO_ADDR
// hc_gallery :=  ;
59798: LD_ADDR_OWVAR 33
59802: PUSH
59803: LD_STRING 
59805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59806: LD_ADDR_OWVAR 31
59810: PUSH
59811: LD_INT 0
59813: PPUSH
59814: LD_INT 3
59816: PPUSH
59817: CALL_OW 12
59821: PUSH
59822: LD_INT 0
59824: PPUSH
59825: LD_INT 3
59827: PPUSH
59828: CALL_OW 12
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// end ;
59845: LD_VAR 0 1
59849: RET
// export function PrepareApemanEngineer ( ) ; begin
59850: LD_INT 0
59852: PPUSH
// uc_nation := 0 ;
59853: LD_ADDR_OWVAR 21
59857: PUSH
59858: LD_INT 0
59860: ST_TO_ADDR
// hc_sex := sex_male ;
59861: LD_ADDR_OWVAR 27
59865: PUSH
59866: LD_INT 1
59868: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59869: LD_ADDR_OWVAR 28
59873: PUSH
59874: LD_INT 16
59876: ST_TO_ADDR
// hc_gallery :=  ;
59877: LD_ADDR_OWVAR 33
59881: PUSH
59882: LD_STRING 
59884: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59885: LD_ADDR_OWVAR 31
59889: PUSH
59890: LD_INT 0
59892: PPUSH
59893: LD_INT 3
59895: PPUSH
59896: CALL_OW 12
59900: PUSH
59901: LD_INT 0
59903: PPUSH
59904: LD_INT 3
59906: PPUSH
59907: CALL_OW 12
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// end ;
59924: LD_VAR 0 1
59928: RET
// export function PrepareApeman ( agressivity ) ; begin
59929: LD_INT 0
59931: PPUSH
// uc_side := 0 ;
59932: LD_ADDR_OWVAR 20
59936: PUSH
59937: LD_INT 0
59939: ST_TO_ADDR
// uc_nation := 0 ;
59940: LD_ADDR_OWVAR 21
59944: PUSH
59945: LD_INT 0
59947: ST_TO_ADDR
// hc_sex := sex_male ;
59948: LD_ADDR_OWVAR 27
59952: PUSH
59953: LD_INT 1
59955: ST_TO_ADDR
// hc_class := class_apeman ;
59956: LD_ADDR_OWVAR 28
59960: PUSH
59961: LD_INT 12
59963: ST_TO_ADDR
// hc_gallery :=  ;
59964: LD_ADDR_OWVAR 33
59968: PUSH
59969: LD_STRING 
59971: ST_TO_ADDR
// if agressivity = 0 then
59972: LD_VAR 0 1
59976: PUSH
59977: LD_INT 0
59979: EQUAL
59980: IFFALSE 59992
// hc_agressivity := 0 else
59982: LD_ADDR_OWVAR 35
59986: PUSH
59987: LD_INT 0
59989: ST_TO_ADDR
59990: GO 60013
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59992: LD_ADDR_OWVAR 35
59996: PUSH
59997: LD_VAR 0 1
60001: NEG
60002: PPUSH
60003: LD_VAR 0 1
60007: PPUSH
60008: CALL_OW 12
60012: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60013: LD_ADDR_OWVAR 31
60017: PUSH
60018: LD_INT 0
60020: PPUSH
60021: LD_INT 3
60023: PPUSH
60024: CALL_OW 12
60028: PUSH
60029: LD_INT 0
60031: PPUSH
60032: LD_INT 3
60034: PPUSH
60035: CALL_OW 12
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: ST_TO_ADDR
// end ;
60052: LD_VAR 0 2
60056: RET
// export function PrepareTiger ( agressivity ) ; begin
60057: LD_INT 0
60059: PPUSH
// uc_side := 0 ;
60060: LD_ADDR_OWVAR 20
60064: PUSH
60065: LD_INT 0
60067: ST_TO_ADDR
// uc_nation := 0 ;
60068: LD_ADDR_OWVAR 21
60072: PUSH
60073: LD_INT 0
60075: ST_TO_ADDR
// hc_class := class_tiger ;
60076: LD_ADDR_OWVAR 28
60080: PUSH
60081: LD_INT 14
60083: ST_TO_ADDR
// hc_gallery :=  ;
60084: LD_ADDR_OWVAR 33
60088: PUSH
60089: LD_STRING 
60091: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60092: LD_ADDR_OWVAR 35
60096: PUSH
60097: LD_VAR 0 1
60101: NEG
60102: PPUSH
60103: LD_VAR 0 1
60107: PPUSH
60108: CALL_OW 12
60112: ST_TO_ADDR
// end ;
60113: LD_VAR 0 2
60117: RET
// export function PrepareEnchidna ( ) ; begin
60118: LD_INT 0
60120: PPUSH
// uc_side := 0 ;
60121: LD_ADDR_OWVAR 20
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
// uc_nation := 0 ;
60129: LD_ADDR_OWVAR 21
60133: PUSH
60134: LD_INT 0
60136: ST_TO_ADDR
// hc_class := class_baggie ;
60137: LD_ADDR_OWVAR 28
60141: PUSH
60142: LD_INT 13
60144: ST_TO_ADDR
// hc_gallery :=  ;
60145: LD_ADDR_OWVAR 33
60149: PUSH
60150: LD_STRING 
60152: ST_TO_ADDR
// end ;
60153: LD_VAR 0 1
60157: RET
// export function PrepareFrog ( ) ; begin
60158: LD_INT 0
60160: PPUSH
// uc_side := 0 ;
60161: LD_ADDR_OWVAR 20
60165: PUSH
60166: LD_INT 0
60168: ST_TO_ADDR
// uc_nation := 0 ;
60169: LD_ADDR_OWVAR 21
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// hc_class := class_frog ;
60177: LD_ADDR_OWVAR 28
60181: PUSH
60182: LD_INT 19
60184: ST_TO_ADDR
// hc_gallery :=  ;
60185: LD_ADDR_OWVAR 33
60189: PUSH
60190: LD_STRING 
60192: ST_TO_ADDR
// end ;
60193: LD_VAR 0 1
60197: RET
// export function PrepareFish ( ) ; begin
60198: LD_INT 0
60200: PPUSH
// uc_side := 0 ;
60201: LD_ADDR_OWVAR 20
60205: PUSH
60206: LD_INT 0
60208: ST_TO_ADDR
// uc_nation := 0 ;
60209: LD_ADDR_OWVAR 21
60213: PUSH
60214: LD_INT 0
60216: ST_TO_ADDR
// hc_class := class_fish ;
60217: LD_ADDR_OWVAR 28
60221: PUSH
60222: LD_INT 20
60224: ST_TO_ADDR
// hc_gallery :=  ;
60225: LD_ADDR_OWVAR 33
60229: PUSH
60230: LD_STRING 
60232: ST_TO_ADDR
// end ;
60233: LD_VAR 0 1
60237: RET
// export function PrepareBird ( ) ; begin
60238: LD_INT 0
60240: PPUSH
// uc_side := 0 ;
60241: LD_ADDR_OWVAR 20
60245: PUSH
60246: LD_INT 0
60248: ST_TO_ADDR
// uc_nation := 0 ;
60249: LD_ADDR_OWVAR 21
60253: PUSH
60254: LD_INT 0
60256: ST_TO_ADDR
// hc_class := class_phororhacos ;
60257: LD_ADDR_OWVAR 28
60261: PUSH
60262: LD_INT 18
60264: ST_TO_ADDR
// hc_gallery :=  ;
60265: LD_ADDR_OWVAR 33
60269: PUSH
60270: LD_STRING 
60272: ST_TO_ADDR
// end ;
60273: LD_VAR 0 1
60277: RET
// export function PrepareHorse ( ) ; begin
60278: LD_INT 0
60280: PPUSH
// uc_side := 0 ;
60281: LD_ADDR_OWVAR 20
60285: PUSH
60286: LD_INT 0
60288: ST_TO_ADDR
// uc_nation := 0 ;
60289: LD_ADDR_OWVAR 21
60293: PUSH
60294: LD_INT 0
60296: ST_TO_ADDR
// hc_class := class_horse ;
60297: LD_ADDR_OWVAR 28
60301: PUSH
60302: LD_INT 21
60304: ST_TO_ADDR
// hc_gallery :=  ;
60305: LD_ADDR_OWVAR 33
60309: PUSH
60310: LD_STRING 
60312: ST_TO_ADDR
// end ;
60313: LD_VAR 0 1
60317: RET
// export function PrepareMastodont ( ) ; begin
60318: LD_INT 0
60320: PPUSH
// uc_side := 0 ;
60321: LD_ADDR_OWVAR 20
60325: PUSH
60326: LD_INT 0
60328: ST_TO_ADDR
// uc_nation := 0 ;
60329: LD_ADDR_OWVAR 21
60333: PUSH
60334: LD_INT 0
60336: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60337: LD_ADDR_OWVAR 37
60341: PUSH
60342: LD_INT 31
60344: ST_TO_ADDR
// vc_control := control_rider ;
60345: LD_ADDR_OWVAR 38
60349: PUSH
60350: LD_INT 4
60352: ST_TO_ADDR
// end ;
60353: LD_VAR 0 1
60357: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60358: LD_INT 0
60360: PPUSH
60361: PPUSH
60362: PPUSH
// uc_side = 0 ;
60363: LD_ADDR_OWVAR 20
60367: PUSH
60368: LD_INT 0
60370: ST_TO_ADDR
// uc_nation = 0 ;
60371: LD_ADDR_OWVAR 21
60375: PUSH
60376: LD_INT 0
60378: ST_TO_ADDR
// InitHc_All ( ) ;
60379: CALL_OW 584
// InitVc ;
60383: CALL_OW 20
// if mastodonts then
60387: LD_VAR 0 6
60391: IFFALSE 60458
// for i = 1 to mastodonts do
60393: LD_ADDR_VAR 0 11
60397: PUSH
60398: DOUBLE
60399: LD_INT 1
60401: DEC
60402: ST_TO_ADDR
60403: LD_VAR 0 6
60407: PUSH
60408: FOR_TO
60409: IFFALSE 60456
// begin vc_chassis := 31 ;
60411: LD_ADDR_OWVAR 37
60415: PUSH
60416: LD_INT 31
60418: ST_TO_ADDR
// vc_control := control_rider ;
60419: LD_ADDR_OWVAR 38
60423: PUSH
60424: LD_INT 4
60426: ST_TO_ADDR
// animal := CreateVehicle ;
60427: LD_ADDR_VAR 0 12
60431: PUSH
60432: CALL_OW 45
60436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60437: LD_VAR 0 12
60441: PPUSH
60442: LD_VAR 0 8
60446: PPUSH
60447: LD_INT 0
60449: PPUSH
60450: CALL 62586 0 3
// end ;
60454: GO 60408
60456: POP
60457: POP
// if horses then
60458: LD_VAR 0 5
60462: IFFALSE 60529
// for i = 1 to horses do
60464: LD_ADDR_VAR 0 11
60468: PUSH
60469: DOUBLE
60470: LD_INT 1
60472: DEC
60473: ST_TO_ADDR
60474: LD_VAR 0 5
60478: PUSH
60479: FOR_TO
60480: IFFALSE 60527
// begin hc_class := 21 ;
60482: LD_ADDR_OWVAR 28
60486: PUSH
60487: LD_INT 21
60489: ST_TO_ADDR
// hc_gallery :=  ;
60490: LD_ADDR_OWVAR 33
60494: PUSH
60495: LD_STRING 
60497: ST_TO_ADDR
// animal := CreateHuman ;
60498: LD_ADDR_VAR 0 12
60502: PUSH
60503: CALL_OW 44
60507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60508: LD_VAR 0 12
60512: PPUSH
60513: LD_VAR 0 8
60517: PPUSH
60518: LD_INT 0
60520: PPUSH
60521: CALL 62586 0 3
// end ;
60525: GO 60479
60527: POP
60528: POP
// if birds then
60529: LD_VAR 0 1
60533: IFFALSE 60600
// for i = 1 to birds do
60535: LD_ADDR_VAR 0 11
60539: PUSH
60540: DOUBLE
60541: LD_INT 1
60543: DEC
60544: ST_TO_ADDR
60545: LD_VAR 0 1
60549: PUSH
60550: FOR_TO
60551: IFFALSE 60598
// begin hc_class := 18 ;
60553: LD_ADDR_OWVAR 28
60557: PUSH
60558: LD_INT 18
60560: ST_TO_ADDR
// hc_gallery =  ;
60561: LD_ADDR_OWVAR 33
60565: PUSH
60566: LD_STRING 
60568: ST_TO_ADDR
// animal := CreateHuman ;
60569: LD_ADDR_VAR 0 12
60573: PUSH
60574: CALL_OW 44
60578: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60579: LD_VAR 0 12
60583: PPUSH
60584: LD_VAR 0 8
60588: PPUSH
60589: LD_INT 0
60591: PPUSH
60592: CALL 62586 0 3
// end ;
60596: GO 60550
60598: POP
60599: POP
// if tigers then
60600: LD_VAR 0 2
60604: IFFALSE 60688
// for i = 1 to tigers do
60606: LD_ADDR_VAR 0 11
60610: PUSH
60611: DOUBLE
60612: LD_INT 1
60614: DEC
60615: ST_TO_ADDR
60616: LD_VAR 0 2
60620: PUSH
60621: FOR_TO
60622: IFFALSE 60686
// begin hc_class = class_tiger ;
60624: LD_ADDR_OWVAR 28
60628: PUSH
60629: LD_INT 14
60631: ST_TO_ADDR
// hc_gallery =  ;
60632: LD_ADDR_OWVAR 33
60636: PUSH
60637: LD_STRING 
60639: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60640: LD_ADDR_OWVAR 35
60644: PUSH
60645: LD_INT 7
60647: NEG
60648: PPUSH
60649: LD_INT 7
60651: PPUSH
60652: CALL_OW 12
60656: ST_TO_ADDR
// animal := CreateHuman ;
60657: LD_ADDR_VAR 0 12
60661: PUSH
60662: CALL_OW 44
60666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60667: LD_VAR 0 12
60671: PPUSH
60672: LD_VAR 0 8
60676: PPUSH
60677: LD_INT 0
60679: PPUSH
60680: CALL 62586 0 3
// end ;
60684: GO 60621
60686: POP
60687: POP
// if apemans then
60688: LD_VAR 0 3
60692: IFFALSE 60815
// for i = 1 to apemans do
60694: LD_ADDR_VAR 0 11
60698: PUSH
60699: DOUBLE
60700: LD_INT 1
60702: DEC
60703: ST_TO_ADDR
60704: LD_VAR 0 3
60708: PUSH
60709: FOR_TO
60710: IFFALSE 60813
// begin hc_class = class_apeman ;
60712: LD_ADDR_OWVAR 28
60716: PUSH
60717: LD_INT 12
60719: ST_TO_ADDR
// hc_gallery =  ;
60720: LD_ADDR_OWVAR 33
60724: PUSH
60725: LD_STRING 
60727: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60728: LD_ADDR_OWVAR 35
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PPUSH
60737: LD_INT 2
60739: PPUSH
60740: CALL_OW 12
60744: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60745: LD_ADDR_OWVAR 31
60749: PUSH
60750: LD_INT 1
60752: PPUSH
60753: LD_INT 3
60755: PPUSH
60756: CALL_OW 12
60760: PUSH
60761: LD_INT 1
60763: PPUSH
60764: LD_INT 3
60766: PPUSH
60767: CALL_OW 12
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: ST_TO_ADDR
// animal := CreateHuman ;
60784: LD_ADDR_VAR 0 12
60788: PUSH
60789: CALL_OW 44
60793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60794: LD_VAR 0 12
60798: PPUSH
60799: LD_VAR 0 8
60803: PPUSH
60804: LD_INT 0
60806: PPUSH
60807: CALL 62586 0 3
// end ;
60811: GO 60709
60813: POP
60814: POP
// if enchidnas then
60815: LD_VAR 0 4
60819: IFFALSE 60886
// for i = 1 to enchidnas do
60821: LD_ADDR_VAR 0 11
60825: PUSH
60826: DOUBLE
60827: LD_INT 1
60829: DEC
60830: ST_TO_ADDR
60831: LD_VAR 0 4
60835: PUSH
60836: FOR_TO
60837: IFFALSE 60884
// begin hc_class = 13 ;
60839: LD_ADDR_OWVAR 28
60843: PUSH
60844: LD_INT 13
60846: ST_TO_ADDR
// hc_gallery =  ;
60847: LD_ADDR_OWVAR 33
60851: PUSH
60852: LD_STRING 
60854: ST_TO_ADDR
// animal := CreateHuman ;
60855: LD_ADDR_VAR 0 12
60859: PUSH
60860: CALL_OW 44
60864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60865: LD_VAR 0 12
60869: PPUSH
60870: LD_VAR 0 8
60874: PPUSH
60875: LD_INT 0
60877: PPUSH
60878: CALL 62586 0 3
// end ;
60882: GO 60836
60884: POP
60885: POP
// if fishes then
60886: LD_VAR 0 7
60890: IFFALSE 60957
// for i = 1 to fishes do
60892: LD_ADDR_VAR 0 11
60896: PUSH
60897: DOUBLE
60898: LD_INT 1
60900: DEC
60901: ST_TO_ADDR
60902: LD_VAR 0 7
60906: PUSH
60907: FOR_TO
60908: IFFALSE 60955
// begin hc_class = 20 ;
60910: LD_ADDR_OWVAR 28
60914: PUSH
60915: LD_INT 20
60917: ST_TO_ADDR
// hc_gallery =  ;
60918: LD_ADDR_OWVAR 33
60922: PUSH
60923: LD_STRING 
60925: ST_TO_ADDR
// animal := CreateHuman ;
60926: LD_ADDR_VAR 0 12
60930: PUSH
60931: CALL_OW 44
60935: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60936: LD_VAR 0 12
60940: PPUSH
60941: LD_VAR 0 9
60945: PPUSH
60946: LD_INT 0
60948: PPUSH
60949: CALL 62586 0 3
// end ;
60953: GO 60907
60955: POP
60956: POP
// end ;
60957: LD_VAR 0 10
60961: RET
// export function WantHeal ( sci , unit ) ; begin
60962: LD_INT 0
60964: PPUSH
// if GetTaskList ( sci ) > 0 then
60965: LD_VAR 0 1
60969: PPUSH
60970: CALL_OW 437
60974: PUSH
60975: LD_INT 0
60977: GREATER
60978: IFFALSE 61048
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60980: LD_VAR 0 1
60984: PPUSH
60985: CALL_OW 437
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: PUSH
60994: LD_INT 1
60996: ARRAY
60997: PUSH
60998: LD_STRING l
61000: EQUAL
61001: PUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 437
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PUSH
61016: LD_INT 4
61018: ARRAY
61019: PUSH
61020: LD_VAR 0 2
61024: EQUAL
61025: AND
61026: IFFALSE 61038
// result := true else
61028: LD_ADDR_VAR 0 3
61032: PUSH
61033: LD_INT 1
61035: ST_TO_ADDR
61036: GO 61046
// result := false ;
61038: LD_ADDR_VAR 0 3
61042: PUSH
61043: LD_INT 0
61045: ST_TO_ADDR
// end else
61046: GO 61056
// result := false ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_INT 0
61055: ST_TO_ADDR
// end ;
61056: LD_VAR 0 3
61060: RET
// export function HealTarget ( sci ) ; begin
61061: LD_INT 0
61063: PPUSH
// if not sci then
61064: LD_VAR 0 1
61068: NOT
61069: IFFALSE 61073
// exit ;
61071: GO 61138
// result := 0 ;
61073: LD_ADDR_VAR 0 2
61077: PUSH
61078: LD_INT 0
61080: ST_TO_ADDR
// if GetTaskList ( sci ) then
61081: LD_VAR 0 1
61085: PPUSH
61086: CALL_OW 437
61090: IFFALSE 61138
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61092: LD_VAR 0 1
61096: PPUSH
61097: CALL_OW 437
61101: PUSH
61102: LD_INT 1
61104: ARRAY
61105: PUSH
61106: LD_INT 1
61108: ARRAY
61109: PUSH
61110: LD_STRING l
61112: EQUAL
61113: IFFALSE 61138
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61115: LD_ADDR_VAR 0 2
61119: PUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: CALL_OW 437
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PUSH
61134: LD_INT 4
61136: ARRAY
61137: ST_TO_ADDR
// end ;
61138: LD_VAR 0 2
61142: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61143: LD_INT 0
61145: PPUSH
61146: PPUSH
61147: PPUSH
61148: PPUSH
// if not base_units then
61149: LD_VAR 0 1
61153: NOT
61154: IFFALSE 61158
// exit ;
61156: GO 61245
// result := false ;
61158: LD_ADDR_VAR 0 2
61162: PUSH
61163: LD_INT 0
61165: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61166: LD_ADDR_VAR 0 5
61170: PUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: LD_INT 21
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PPUSH
61186: CALL_OW 72
61190: ST_TO_ADDR
// if not tmp then
61191: LD_VAR 0 5
61195: NOT
61196: IFFALSE 61200
// exit ;
61198: GO 61245
// for i in tmp do
61200: LD_ADDR_VAR 0 3
61204: PUSH
61205: LD_VAR 0 5
61209: PUSH
61210: FOR_IN
61211: IFFALSE 61243
// begin result := EnemyInRange ( i , 22 ) ;
61213: LD_ADDR_VAR 0 2
61217: PUSH
61218: LD_VAR 0 3
61222: PPUSH
61223: LD_INT 22
61225: PPUSH
61226: CALL 58823 0 2
61230: ST_TO_ADDR
// if result then
61231: LD_VAR 0 2
61235: IFFALSE 61241
// exit ;
61237: POP
61238: POP
61239: GO 61245
// end ;
61241: GO 61210
61243: POP
61244: POP
// end ;
61245: LD_VAR 0 2
61249: RET
// export function FilterByTag ( units , tag ) ; begin
61250: LD_INT 0
61252: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61253: LD_ADDR_VAR 0 3
61257: PUSH
61258: LD_VAR 0 1
61262: PPUSH
61263: LD_INT 120
61265: PUSH
61266: LD_VAR 0 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PPUSH
61275: CALL_OW 72
61279: ST_TO_ADDR
// end ;
61280: LD_VAR 0 3
61284: RET
// export function IsDriver ( un ) ; begin
61285: LD_INT 0
61287: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61288: LD_ADDR_VAR 0 2
61292: PUSH
61293: LD_VAR 0 1
61297: PUSH
61298: LD_INT 55
61300: PUSH
61301: EMPTY
61302: LIST
61303: PPUSH
61304: CALL_OW 69
61308: IN
61309: ST_TO_ADDR
// end ;
61310: LD_VAR 0 2
61314: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
// list := [ ] ;
61319: LD_ADDR_VAR 0 5
61323: PUSH
61324: EMPTY
61325: ST_TO_ADDR
// case d of 0 :
61326: LD_VAR 0 3
61330: PUSH
61331: LD_INT 0
61333: DOUBLE
61334: EQUAL
61335: IFTRUE 61339
61337: GO 61472
61339: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61340: LD_ADDR_VAR 0 5
61344: PUSH
61345: LD_VAR 0 1
61349: PUSH
61350: LD_INT 4
61352: MINUS
61353: PUSH
61354: LD_VAR 0 2
61358: PUSH
61359: LD_INT 4
61361: MINUS
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: PUSH
61371: LD_VAR 0 1
61375: PUSH
61376: LD_INT 3
61378: MINUS
61379: PUSH
61380: LD_VAR 0 2
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_INT 4
61400: PLUS
61401: PUSH
61402: LD_VAR 0 2
61406: PUSH
61407: LD_INT 4
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_INT 3
61422: PLUS
61423: PUSH
61424: LD_VAR 0 2
61428: PUSH
61429: LD_INT 3
61431: PLUS
61432: PUSH
61433: LD_INT 5
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: PUSH
61441: LD_VAR 0 1
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_INT 4
61453: PLUS
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: ST_TO_ADDR
// end ; 1 :
61470: GO 62170
61472: LD_INT 1
61474: DOUBLE
61475: EQUAL
61476: IFTRUE 61480
61478: GO 61613
61480: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61481: LD_ADDR_VAR 0 5
61485: PUSH
61486: LD_VAR 0 1
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_INT 4
61498: MINUS
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: LD_VAR 0 1
61512: PUSH
61513: LD_INT 3
61515: MINUS
61516: PUSH
61517: LD_VAR 0 2
61521: PUSH
61522: LD_INT 3
61524: MINUS
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: LD_INT 4
61541: MINUS
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: PUSH
61556: LD_VAR 0 1
61560: PUSH
61561: LD_VAR 0 2
61565: PUSH
61566: LD_INT 3
61568: PLUS
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: PUSH
61578: LD_VAR 0 1
61582: PUSH
61583: LD_INT 4
61585: PLUS
61586: PUSH
61587: LD_VAR 0 2
61591: PUSH
61592: LD_INT 4
61594: PLUS
61595: PUSH
61596: LD_INT 5
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: LIST
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: ST_TO_ADDR
// end ; 2 :
61611: GO 62170
61613: LD_INT 2
61615: DOUBLE
61616: EQUAL
61617: IFTRUE 61621
61619: GO 61750
61621: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61622: LD_ADDR_VAR 0 5
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_VAR 0 2
61636: PUSH
61637: LD_INT 3
61639: MINUS
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: PUSH
61649: LD_VAR 0 1
61653: PUSH
61654: LD_INT 4
61656: PLUS
61657: PUSH
61658: LD_VAR 0 2
61662: PUSH
61663: LD_INT 4
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: PUSH
61671: LD_VAR 0 1
61675: PUSH
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 4
61683: PLUS
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: PUSH
61693: LD_VAR 0 1
61697: PUSH
61698: LD_INT 3
61700: MINUS
61701: PUSH
61702: LD_VAR 0 2
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: LIST
61714: PUSH
61715: LD_VAR 0 1
61719: PUSH
61720: LD_INT 4
61722: MINUS
61723: PUSH
61724: LD_VAR 0 2
61728: PUSH
61729: LD_INT 4
61731: MINUS
61732: PUSH
61733: LD_INT 2
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// end ; 3 :
61748: GO 62170
61750: LD_INT 3
61752: DOUBLE
61753: EQUAL
61754: IFTRUE 61758
61756: GO 61891
61758: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61759: LD_ADDR_VAR 0 5
61763: PUSH
61764: LD_VAR 0 1
61768: PUSH
61769: LD_INT 3
61771: PLUS
61772: PUSH
61773: LD_VAR 0 2
61777: PUSH
61778: LD_INT 4
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: PUSH
61786: LD_VAR 0 1
61790: PUSH
61791: LD_INT 4
61793: PLUS
61794: PUSH
61795: LD_VAR 0 2
61799: PUSH
61800: LD_INT 4
61802: PLUS
61803: PUSH
61804: LD_INT 5
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: PUSH
61812: LD_VAR 0 1
61816: PUSH
61817: LD_INT 4
61819: MINUS
61820: PUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: PUSH
61834: LD_VAR 0 1
61838: PUSH
61839: LD_VAR 0 2
61843: PUSH
61844: LD_INT 4
61846: MINUS
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: PUSH
61856: LD_VAR 0 1
61860: PUSH
61861: LD_INT 3
61863: MINUS
61864: PUSH
61865: LD_VAR 0 2
61869: PUSH
61870: LD_INT 3
61872: MINUS
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: ST_TO_ADDR
// end ; 4 :
61889: GO 62170
61891: LD_INT 4
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61899
61897: GO 62032
61899: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61900: LD_ADDR_VAR 0 5
61904: PUSH
61905: LD_VAR 0 1
61909: PUSH
61910: LD_VAR 0 2
61914: PUSH
61915: LD_INT 4
61917: PLUS
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: PUSH
61927: LD_VAR 0 1
61931: PUSH
61932: LD_INT 3
61934: PLUS
61935: PUSH
61936: LD_VAR 0 2
61940: PUSH
61941: LD_INT 3
61943: PLUS
61944: PUSH
61945: LD_INT 5
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 1
61957: PUSH
61958: LD_INT 4
61960: PLUS
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 4
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: LD_VAR 0 1
61979: PUSH
61980: LD_VAR 0 2
61984: PUSH
61985: LD_INT 3
61987: MINUS
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: PUSH
61997: LD_VAR 0 1
62001: PUSH
62002: LD_INT 4
62004: MINUS
62005: PUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 4
62013: MINUS
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// end ; 5 :
62030: GO 62170
62032: LD_INT 5
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62040
62038: GO 62169
62040: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62041: LD_ADDR_VAR 0 5
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_INT 4
62053: MINUS
62054: PUSH
62055: LD_VAR 0 2
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: PUSH
62068: LD_VAR 0 1
62072: PUSH
62073: LD_VAR 0 2
62077: PUSH
62078: LD_INT 4
62080: MINUS
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: PUSH
62090: LD_VAR 0 1
62094: PUSH
62095: LD_INT 4
62097: PLUS
62098: PUSH
62099: LD_VAR 0 2
62103: PUSH
62104: LD_INT 4
62106: PLUS
62107: PUSH
62108: LD_INT 5
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 1
62120: PUSH
62121: LD_INT 3
62123: PLUS
62124: PUSH
62125: LD_VAR 0 2
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: PUSH
62138: LD_VAR 0 1
62142: PUSH
62143: LD_VAR 0 2
62147: PUSH
62148: LD_INT 3
62150: PLUS
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// end ; end ;
62167: GO 62170
62169: POP
// result := list ;
62170: LD_ADDR_VAR 0 4
62174: PUSH
62175: LD_VAR 0 5
62179: ST_TO_ADDR
// end ;
62180: LD_VAR 0 4
62184: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62185: LD_INT 0
62187: PPUSH
62188: PPUSH
62189: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62190: LD_VAR 0 1
62194: NOT
62195: PUSH
62196: LD_VAR 0 2
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: LD_INT 3
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: IN
62219: NOT
62220: OR
62221: IFFALSE 62225
// exit ;
62223: GO 62308
// tmp := [ ] ;
62225: LD_ADDR_VAR 0 5
62229: PUSH
62230: EMPTY
62231: ST_TO_ADDR
// for i in units do
62232: LD_ADDR_VAR 0 4
62236: PUSH
62237: LD_VAR 0 1
62241: PUSH
62242: FOR_IN
62243: IFFALSE 62277
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62245: LD_ADDR_VAR 0 5
62249: PUSH
62250: LD_VAR 0 5
62254: PPUSH
62255: LD_VAR 0 4
62259: PPUSH
62260: LD_VAR 0 2
62264: PPUSH
62265: CALL_OW 259
62269: PPUSH
62270: CALL 63681 0 2
62274: ST_TO_ADDR
62275: GO 62242
62277: POP
62278: POP
// if not tmp then
62279: LD_VAR 0 5
62283: NOT
62284: IFFALSE 62288
// exit ;
62286: GO 62308
// result := SortListByListDesc ( units , tmp ) ;
62288: LD_ADDR_VAR 0 3
62292: PUSH
62293: LD_VAR 0 1
62297: PPUSH
62298: LD_VAR 0 5
62302: PPUSH
62303: CALL_OW 77
62307: ST_TO_ADDR
// end ;
62308: LD_VAR 0 3
62312: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62313: LD_INT 0
62315: PPUSH
62316: PPUSH
62317: PPUSH
// result := false ;
62318: LD_ADDR_VAR 0 3
62322: PUSH
62323: LD_INT 0
62325: ST_TO_ADDR
// if not building then
62326: LD_VAR 0 2
62330: NOT
62331: IFFALSE 62335
// exit ;
62333: GO 62473
// x := GetX ( building ) ;
62335: LD_ADDR_VAR 0 4
62339: PUSH
62340: LD_VAR 0 2
62344: PPUSH
62345: CALL_OW 250
62349: ST_TO_ADDR
// y := GetY ( building ) ;
62350: LD_ADDR_VAR 0 5
62354: PUSH
62355: LD_VAR 0 2
62359: PPUSH
62360: CALL_OW 251
62364: ST_TO_ADDR
// if not x or not y then
62365: LD_VAR 0 4
62369: NOT
62370: PUSH
62371: LD_VAR 0 5
62375: NOT
62376: OR
62377: IFFALSE 62381
// exit ;
62379: GO 62473
// if GetTaskList ( unit ) then
62381: LD_VAR 0 1
62385: PPUSH
62386: CALL_OW 437
62390: IFFALSE 62473
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62392: LD_STRING e
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: CALL_OW 437
62404: PUSH
62405: LD_INT 1
62407: ARRAY
62408: PUSH
62409: LD_INT 1
62411: ARRAY
62412: EQUAL
62413: PUSH
62414: LD_VAR 0 4
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL_OW 437
62428: PUSH
62429: LD_INT 1
62431: ARRAY
62432: PUSH
62433: LD_INT 2
62435: ARRAY
62436: EQUAL
62437: AND
62438: PUSH
62439: LD_VAR 0 5
62443: PUSH
62444: LD_VAR 0 1
62448: PPUSH
62449: CALL_OW 437
62453: PUSH
62454: LD_INT 1
62456: ARRAY
62457: PUSH
62458: LD_INT 3
62460: ARRAY
62461: EQUAL
62462: AND
62463: IFFALSE 62473
// result := true end ;
62465: LD_ADDR_VAR 0 3
62469: PUSH
62470: LD_INT 1
62472: ST_TO_ADDR
// end ;
62473: LD_VAR 0 3
62477: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62478: LD_INT 0
62480: PPUSH
// result := false ;
62481: LD_ADDR_VAR 0 4
62485: PUSH
62486: LD_INT 0
62488: ST_TO_ADDR
// if GetTaskList ( unit ) then
62489: LD_VAR 0 1
62493: PPUSH
62494: CALL_OW 437
62498: IFFALSE 62581
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62500: LD_STRING M
62502: PUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: CALL_OW 437
62512: PUSH
62513: LD_INT 1
62515: ARRAY
62516: PUSH
62517: LD_INT 1
62519: ARRAY
62520: EQUAL
62521: PUSH
62522: LD_VAR 0 2
62526: PUSH
62527: LD_VAR 0 1
62531: PPUSH
62532: CALL_OW 437
62536: PUSH
62537: LD_INT 1
62539: ARRAY
62540: PUSH
62541: LD_INT 2
62543: ARRAY
62544: EQUAL
62545: AND
62546: PUSH
62547: LD_VAR 0 3
62551: PUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: CALL_OW 437
62561: PUSH
62562: LD_INT 1
62564: ARRAY
62565: PUSH
62566: LD_INT 3
62568: ARRAY
62569: EQUAL
62570: AND
62571: IFFALSE 62581
// result := true ;
62573: LD_ADDR_VAR 0 4
62577: PUSH
62578: LD_INT 1
62580: ST_TO_ADDR
// end ; end ;
62581: LD_VAR 0 4
62585: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
62590: PPUSH
62591: PPUSH
// if not unit or not area then
62592: LD_VAR 0 1
62596: NOT
62597: PUSH
62598: LD_VAR 0 2
62602: NOT
62603: OR
62604: IFFALSE 62608
// exit ;
62606: GO 62784
// tmp := AreaToList ( area , i ) ;
62608: LD_ADDR_VAR 0 6
62612: PUSH
62613: LD_VAR 0 2
62617: PPUSH
62618: LD_VAR 0 5
62622: PPUSH
62623: CALL_OW 517
62627: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62628: LD_ADDR_VAR 0 5
62632: PUSH
62633: DOUBLE
62634: LD_INT 1
62636: DEC
62637: ST_TO_ADDR
62638: LD_VAR 0 6
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PUSH
62647: FOR_TO
62648: IFFALSE 62782
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62650: LD_ADDR_VAR 0 7
62654: PUSH
62655: LD_VAR 0 6
62659: PUSH
62660: LD_INT 1
62662: ARRAY
62663: PUSH
62664: LD_VAR 0 5
62668: ARRAY
62669: PUSH
62670: LD_VAR 0 6
62674: PUSH
62675: LD_INT 2
62677: ARRAY
62678: PUSH
62679: LD_VAR 0 5
62683: ARRAY
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62689: LD_INT 92
62691: PUSH
62692: LD_VAR 0 7
62696: PUSH
62697: LD_INT 1
62699: ARRAY
62700: PUSH
62701: LD_VAR 0 7
62705: PUSH
62706: LD_INT 2
62708: ARRAY
62709: PUSH
62710: LD_INT 2
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: PPUSH
62719: CALL_OW 69
62723: PUSH
62724: LD_INT 0
62726: EQUAL
62727: IFFALSE 62780
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62729: LD_VAR 0 1
62733: PPUSH
62734: LD_VAR 0 7
62738: PUSH
62739: LD_INT 1
62741: ARRAY
62742: PPUSH
62743: LD_VAR 0 7
62747: PUSH
62748: LD_INT 2
62750: ARRAY
62751: PPUSH
62752: LD_VAR 0 3
62756: PPUSH
62757: CALL_OW 48
// result := IsPlaced ( unit ) ;
62761: LD_ADDR_VAR 0 4
62765: PUSH
62766: LD_VAR 0 1
62770: PPUSH
62771: CALL_OW 305
62775: ST_TO_ADDR
// exit ;
62776: POP
62777: POP
62778: GO 62784
// end ; end ;
62780: GO 62647
62782: POP
62783: POP
// end ;
62784: LD_VAR 0 4
62788: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62789: LD_INT 0
62791: PPUSH
62792: PPUSH
62793: PPUSH
// if not side or side > 8 then
62794: LD_VAR 0 1
62798: NOT
62799: PUSH
62800: LD_VAR 0 1
62804: PUSH
62805: LD_INT 8
62807: GREATER
62808: OR
62809: IFFALSE 62813
// exit ;
62811: GO 63000
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62813: LD_ADDR_VAR 0 4
62817: PUSH
62818: LD_INT 22
62820: PUSH
62821: LD_VAR 0 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 21
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PPUSH
62844: CALL_OW 69
62848: ST_TO_ADDR
// if not tmp then
62849: LD_VAR 0 4
62853: NOT
62854: IFFALSE 62858
// exit ;
62856: GO 63000
// enable_addtolog := true ;
62858: LD_ADDR_OWVAR 81
62862: PUSH
62863: LD_INT 1
62865: ST_TO_ADDR
// AddToLog ( [ ) ;
62866: LD_STRING [
62868: PPUSH
62869: CALL_OW 561
// for i in tmp do
62873: LD_ADDR_VAR 0 3
62877: PUSH
62878: LD_VAR 0 4
62882: PUSH
62883: FOR_IN
62884: IFFALSE 62991
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62886: LD_STRING [
62888: PUSH
62889: LD_VAR 0 3
62893: PPUSH
62894: CALL_OW 266
62898: STR
62899: PUSH
62900: LD_STRING , 
62902: STR
62903: PUSH
62904: LD_VAR 0 3
62908: PPUSH
62909: CALL_OW 250
62913: STR
62914: PUSH
62915: LD_STRING , 
62917: STR
62918: PUSH
62919: LD_VAR 0 3
62923: PPUSH
62924: CALL_OW 251
62928: STR
62929: PUSH
62930: LD_STRING , 
62932: STR
62933: PUSH
62934: LD_VAR 0 3
62938: PPUSH
62939: CALL_OW 254
62943: STR
62944: PUSH
62945: LD_STRING , 
62947: STR
62948: PUSH
62949: LD_VAR 0 3
62953: PPUSH
62954: LD_INT 1
62956: PPUSH
62957: CALL_OW 268
62961: STR
62962: PUSH
62963: LD_STRING , 
62965: STR
62966: PUSH
62967: LD_VAR 0 3
62971: PPUSH
62972: LD_INT 2
62974: PPUSH
62975: CALL_OW 268
62979: STR
62980: PUSH
62981: LD_STRING ],
62983: STR
62984: PPUSH
62985: CALL_OW 561
// end ;
62989: GO 62883
62991: POP
62992: POP
// AddToLog ( ]; ) ;
62993: LD_STRING ];
62995: PPUSH
62996: CALL_OW 561
// end ;
63000: LD_VAR 0 2
63004: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63005: LD_INT 0
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
63011: PPUSH
// if not area or not rate or not max then
63012: LD_VAR 0 1
63016: NOT
63017: PUSH
63018: LD_VAR 0 2
63022: NOT
63023: OR
63024: PUSH
63025: LD_VAR 0 4
63029: NOT
63030: OR
63031: IFFALSE 63035
// exit ;
63033: GO 63224
// while 1 do
63035: LD_INT 1
63037: IFFALSE 63224
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63039: LD_ADDR_VAR 0 9
63043: PUSH
63044: LD_VAR 0 1
63048: PPUSH
63049: LD_INT 1
63051: PPUSH
63052: CALL_OW 287
63056: PUSH
63057: LD_INT 10
63059: MUL
63060: ST_TO_ADDR
// r := rate / 10 ;
63061: LD_ADDR_VAR 0 7
63065: PUSH
63066: LD_VAR 0 2
63070: PUSH
63071: LD_INT 10
63073: DIVREAL
63074: ST_TO_ADDR
// time := 1 1$00 ;
63075: LD_ADDR_VAR 0 8
63079: PUSH
63080: LD_INT 2100
63082: ST_TO_ADDR
// if amount < min then
63083: LD_VAR 0 9
63087: PUSH
63088: LD_VAR 0 3
63092: LESS
63093: IFFALSE 63111
// r := r * 2 else
63095: LD_ADDR_VAR 0 7
63099: PUSH
63100: LD_VAR 0 7
63104: PUSH
63105: LD_INT 2
63107: MUL
63108: ST_TO_ADDR
63109: GO 63137
// if amount > max then
63111: LD_VAR 0 9
63115: PUSH
63116: LD_VAR 0 4
63120: GREATER
63121: IFFALSE 63137
// r := r / 2 ;
63123: LD_ADDR_VAR 0 7
63127: PUSH
63128: LD_VAR 0 7
63132: PUSH
63133: LD_INT 2
63135: DIVREAL
63136: ST_TO_ADDR
// time := time / r ;
63137: LD_ADDR_VAR 0 8
63141: PUSH
63142: LD_VAR 0 8
63146: PUSH
63147: LD_VAR 0 7
63151: DIVREAL
63152: ST_TO_ADDR
// if time < 0 then
63153: LD_VAR 0 8
63157: PUSH
63158: LD_INT 0
63160: LESS
63161: IFFALSE 63178
// time := time * - 1 ;
63163: LD_ADDR_VAR 0 8
63167: PUSH
63168: LD_VAR 0 8
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: MUL
63177: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63178: LD_VAR 0 8
63182: PUSH
63183: LD_INT 35
63185: PPUSH
63186: LD_INT 875
63188: PPUSH
63189: CALL_OW 12
63193: PLUS
63194: PPUSH
63195: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63199: LD_INT 1
63201: PPUSH
63202: LD_INT 5
63204: PPUSH
63205: CALL_OW 12
63209: PPUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: LD_INT 1
63217: PPUSH
63218: CALL_OW 55
// end ;
63222: GO 63035
// end ;
63224: LD_VAR 0 5
63228: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63229: LD_INT 0
63231: PPUSH
63232: PPUSH
63233: PPUSH
63234: PPUSH
63235: PPUSH
63236: PPUSH
63237: PPUSH
63238: PPUSH
// if not turrets or not factories then
63239: LD_VAR 0 1
63243: NOT
63244: PUSH
63245: LD_VAR 0 2
63249: NOT
63250: OR
63251: IFFALSE 63255
// exit ;
63253: GO 63562
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63255: LD_ADDR_VAR 0 10
63259: PUSH
63260: LD_INT 5
63262: PUSH
63263: LD_INT 6
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 4
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: LD_INT 5
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 24
63297: PUSH
63298: LD_INT 25
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 23
63307: PUSH
63308: LD_INT 27
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 42
63321: PUSH
63322: LD_INT 43
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 44
63331: PUSH
63332: LD_INT 46
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 45
63341: PUSH
63342: LD_INT 47
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: ST_TO_ADDR
// result := [ ] ;
63359: LD_ADDR_VAR 0 3
63363: PUSH
63364: EMPTY
63365: ST_TO_ADDR
// for i in turrets do
63366: LD_ADDR_VAR 0 4
63370: PUSH
63371: LD_VAR 0 1
63375: PUSH
63376: FOR_IN
63377: IFFALSE 63560
// begin nat := GetNation ( i ) ;
63379: LD_ADDR_VAR 0 7
63383: PUSH
63384: LD_VAR 0 4
63388: PPUSH
63389: CALL_OW 248
63393: ST_TO_ADDR
// weapon := 0 ;
63394: LD_ADDR_VAR 0 8
63398: PUSH
63399: LD_INT 0
63401: ST_TO_ADDR
// if not nat then
63402: LD_VAR 0 7
63406: NOT
63407: IFFALSE 63411
// continue ;
63409: GO 63376
// for j in list [ nat ] do
63411: LD_ADDR_VAR 0 5
63415: PUSH
63416: LD_VAR 0 10
63420: PUSH
63421: LD_VAR 0 7
63425: ARRAY
63426: PUSH
63427: FOR_IN
63428: IFFALSE 63469
// if GetBWeapon ( i ) = j [ 1 ] then
63430: LD_VAR 0 4
63434: PPUSH
63435: CALL_OW 269
63439: PUSH
63440: LD_VAR 0 5
63444: PUSH
63445: LD_INT 1
63447: ARRAY
63448: EQUAL
63449: IFFALSE 63467
// begin weapon := j [ 2 ] ;
63451: LD_ADDR_VAR 0 8
63455: PUSH
63456: LD_VAR 0 5
63460: PUSH
63461: LD_INT 2
63463: ARRAY
63464: ST_TO_ADDR
// break ;
63465: GO 63469
// end ;
63467: GO 63427
63469: POP
63470: POP
// if not weapon then
63471: LD_VAR 0 8
63475: NOT
63476: IFFALSE 63480
// continue ;
63478: GO 63376
// for k in factories do
63480: LD_ADDR_VAR 0 6
63484: PUSH
63485: LD_VAR 0 2
63489: PUSH
63490: FOR_IN
63491: IFFALSE 63556
// begin weapons := AvailableWeaponList ( k ) ;
63493: LD_ADDR_VAR 0 9
63497: PUSH
63498: LD_VAR 0 6
63502: PPUSH
63503: CALL_OW 478
63507: ST_TO_ADDR
// if not weapons then
63508: LD_VAR 0 9
63512: NOT
63513: IFFALSE 63517
// continue ;
63515: GO 63490
// if weapon in weapons then
63517: LD_VAR 0 8
63521: PUSH
63522: LD_VAR 0 9
63526: IN
63527: IFFALSE 63554
// begin result := [ i , weapon ] ;
63529: LD_ADDR_VAR 0 3
63533: PUSH
63534: LD_VAR 0 4
63538: PUSH
63539: LD_VAR 0 8
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// exit ;
63548: POP
63549: POP
63550: POP
63551: POP
63552: GO 63562
// end ; end ;
63554: GO 63490
63556: POP
63557: POP
// end ;
63558: GO 63376
63560: POP
63561: POP
// end ;
63562: LD_VAR 0 3
63566: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63567: LD_INT 0
63569: PPUSH
// if not side or side > 8 then
63570: LD_VAR 0 3
63574: NOT
63575: PUSH
63576: LD_VAR 0 3
63580: PUSH
63581: LD_INT 8
63583: GREATER
63584: OR
63585: IFFALSE 63589
// exit ;
63587: GO 63648
// if not range then
63589: LD_VAR 0 4
63593: NOT
63594: IFFALSE 63605
// range := - 12 ;
63596: LD_ADDR_VAR 0 4
63600: PUSH
63601: LD_INT 12
63603: NEG
63604: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63605: LD_VAR 0 1
63609: PPUSH
63610: LD_VAR 0 2
63614: PPUSH
63615: LD_VAR 0 3
63619: PPUSH
63620: LD_VAR 0 4
63624: PPUSH
63625: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63629: LD_VAR 0 1
63633: PPUSH
63634: LD_VAR 0 2
63638: PPUSH
63639: LD_VAR 0 3
63643: PPUSH
63644: CALL_OW 331
// end ;
63648: LD_VAR 0 5
63652: RET
// export function Video ( mode ) ; begin
63653: LD_INT 0
63655: PPUSH
// ingame_video = mode ;
63656: LD_ADDR_OWVAR 52
63660: PUSH
63661: LD_VAR 0 1
63665: ST_TO_ADDR
// interface_hidden = mode ;
63666: LD_ADDR_OWVAR 54
63670: PUSH
63671: LD_VAR 0 1
63675: ST_TO_ADDR
// end ;
63676: LD_VAR 0 2
63680: RET
// export function Join ( array , element ) ; begin
63681: LD_INT 0
63683: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63684: LD_ADDR_VAR 0 3
63688: PUSH
63689: LD_VAR 0 1
63693: PPUSH
63694: LD_VAR 0 1
63698: PUSH
63699: LD_INT 1
63701: PLUS
63702: PPUSH
63703: LD_VAR 0 2
63707: PPUSH
63708: CALL_OW 1
63712: ST_TO_ADDR
// end ;
63713: LD_VAR 0 3
63717: RET
// export function JoinUnion ( array , element ) ; begin
63718: LD_INT 0
63720: PPUSH
// result := array union element ;
63721: LD_ADDR_VAR 0 3
63725: PUSH
63726: LD_VAR 0 1
63730: PUSH
63731: LD_VAR 0 2
63735: UNION
63736: ST_TO_ADDR
// end ;
63737: LD_VAR 0 3
63741: RET
// export function GetBehemoths ( side ) ; begin
63742: LD_INT 0
63744: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63745: LD_ADDR_VAR 0 2
63749: PUSH
63750: LD_INT 22
63752: PUSH
63753: LD_VAR 0 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 31
63764: PUSH
63765: LD_INT 25
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PPUSH
63776: CALL_OW 69
63780: ST_TO_ADDR
// end ;
63781: LD_VAR 0 2
63785: RET
// export function Shuffle ( array ) ; var i , index ; begin
63786: LD_INT 0
63788: PPUSH
63789: PPUSH
63790: PPUSH
// result := [ ] ;
63791: LD_ADDR_VAR 0 2
63795: PUSH
63796: EMPTY
63797: ST_TO_ADDR
// if not array then
63798: LD_VAR 0 1
63802: NOT
63803: IFFALSE 63807
// exit ;
63805: GO 63906
// Randomize ;
63807: CALL_OW 10
// for i = array downto 1 do
63811: LD_ADDR_VAR 0 3
63815: PUSH
63816: DOUBLE
63817: LD_VAR 0 1
63821: INC
63822: ST_TO_ADDR
63823: LD_INT 1
63825: PUSH
63826: FOR_DOWNTO
63827: IFFALSE 63904
// begin index := rand ( 1 , array ) ;
63829: LD_ADDR_VAR 0 4
63833: PUSH
63834: LD_INT 1
63836: PPUSH
63837: LD_VAR 0 1
63841: PPUSH
63842: CALL_OW 12
63846: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63847: LD_ADDR_VAR 0 2
63851: PUSH
63852: LD_VAR 0 2
63856: PPUSH
63857: LD_VAR 0 2
63861: PUSH
63862: LD_INT 1
63864: PLUS
63865: PPUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_VAR 0 4
63875: ARRAY
63876: PPUSH
63877: CALL_OW 2
63881: ST_TO_ADDR
// array := Delete ( array , index ) ;
63882: LD_ADDR_VAR 0 1
63886: PUSH
63887: LD_VAR 0 1
63891: PPUSH
63892: LD_VAR 0 4
63896: PPUSH
63897: CALL_OW 3
63901: ST_TO_ADDR
// end ;
63902: GO 63826
63904: POP
63905: POP
// end ;
63906: LD_VAR 0 2
63910: RET
// export function GetBaseMaterials ( base ) ; begin
63911: LD_INT 0
63913: PPUSH
// result := [ 0 , 0 , 0 ] ;
63914: LD_ADDR_VAR 0 2
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: ST_TO_ADDR
// if not base then
63933: LD_VAR 0 1
63937: NOT
63938: IFFALSE 63942
// exit ;
63940: GO 63991
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63942: LD_ADDR_VAR 0 2
63946: PUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: LD_INT 1
63954: PPUSH
63955: CALL_OW 275
63959: PUSH
63960: LD_VAR 0 1
63964: PPUSH
63965: LD_INT 2
63967: PPUSH
63968: CALL_OW 275
63972: PUSH
63973: LD_VAR 0 1
63977: PPUSH
63978: LD_INT 3
63980: PPUSH
63981: CALL_OW 275
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: ST_TO_ADDR
// end ;
63991: LD_VAR 0 2
63995: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63996: LD_INT 0
63998: PPUSH
63999: PPUSH
// result := array ;
64000: LD_ADDR_VAR 0 3
64004: PUSH
64005: LD_VAR 0 1
64009: ST_TO_ADDR
// if size >= result then
64010: LD_VAR 0 2
64014: PUSH
64015: LD_VAR 0 3
64019: GREATEREQUAL
64020: IFFALSE 64024
// exit ;
64022: GO 64074
// if size then
64024: LD_VAR 0 2
64028: IFFALSE 64074
// for i := array downto size do
64030: LD_ADDR_VAR 0 4
64034: PUSH
64035: DOUBLE
64036: LD_VAR 0 1
64040: INC
64041: ST_TO_ADDR
64042: LD_VAR 0 2
64046: PUSH
64047: FOR_DOWNTO
64048: IFFALSE 64072
// result := Delete ( result , result ) ;
64050: LD_ADDR_VAR 0 3
64054: PUSH
64055: LD_VAR 0 3
64059: PPUSH
64060: LD_VAR 0 3
64064: PPUSH
64065: CALL_OW 3
64069: ST_TO_ADDR
64070: GO 64047
64072: POP
64073: POP
// end ;
64074: LD_VAR 0 3
64078: RET
// export function ComExit ( unit ) ; var tmp ; begin
64079: LD_INT 0
64081: PPUSH
64082: PPUSH
// if not IsInUnit ( unit ) then
64083: LD_VAR 0 1
64087: PPUSH
64088: CALL_OW 310
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64157
// tmp := IsInUnit ( unit ) ;
64097: LD_ADDR_VAR 0 3
64101: PUSH
64102: LD_VAR 0 1
64106: PPUSH
64107: CALL_OW 310
64111: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64112: LD_VAR 0 3
64116: PPUSH
64117: CALL_OW 247
64121: PUSH
64122: LD_INT 2
64124: EQUAL
64125: IFFALSE 64138
// ComExitVehicle ( unit ) else
64127: LD_VAR 0 1
64131: PPUSH
64132: CALL_OW 121
64136: GO 64147
// ComExitBuilding ( unit ) ;
64138: LD_VAR 0 1
64142: PPUSH
64143: CALL_OW 122
// result := tmp ;
64147: LD_ADDR_VAR 0 2
64151: PUSH
64152: LD_VAR 0 3
64156: ST_TO_ADDR
// end ;
64157: LD_VAR 0 2
64161: RET
// export function ComExitAll ( units ) ; var i ; begin
64162: LD_INT 0
64164: PPUSH
64165: PPUSH
// if not units then
64166: LD_VAR 0 1
64170: NOT
64171: IFFALSE 64175
// exit ;
64173: GO 64201
// for i in units do
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_VAR 0 1
64184: PUSH
64185: FOR_IN
64186: IFFALSE 64199
// ComExit ( i ) ;
64188: LD_VAR 0 3
64192: PPUSH
64193: CALL 64079 0 1
64197: GO 64185
64199: POP
64200: POP
// end ;
64201: LD_VAR 0 2
64205: RET
// export function ResetHc ; begin
64206: LD_INT 0
64208: PPUSH
// InitHc ;
64209: CALL_OW 19
// hc_importance := 0 ;
64213: LD_ADDR_OWVAR 32
64217: PUSH
64218: LD_INT 0
64220: ST_TO_ADDR
// end ;
64221: LD_VAR 0 1
64225: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64226: LD_INT 0
64228: PPUSH
64229: PPUSH
64230: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64231: LD_ADDR_VAR 0 6
64235: PUSH
64236: LD_VAR 0 1
64240: PUSH
64241: LD_VAR 0 3
64245: PLUS
64246: PUSH
64247: LD_INT 2
64249: DIV
64250: ST_TO_ADDR
// if _x < 0 then
64251: LD_VAR 0 6
64255: PUSH
64256: LD_INT 0
64258: LESS
64259: IFFALSE 64276
// _x := _x * - 1 ;
64261: LD_ADDR_VAR 0 6
64265: PUSH
64266: LD_VAR 0 6
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: MUL
64275: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64276: LD_ADDR_VAR 0 7
64280: PUSH
64281: LD_VAR 0 2
64285: PUSH
64286: LD_VAR 0 4
64290: PLUS
64291: PUSH
64292: LD_INT 2
64294: DIV
64295: ST_TO_ADDR
// if _y < 0 then
64296: LD_VAR 0 7
64300: PUSH
64301: LD_INT 0
64303: LESS
64304: IFFALSE 64321
// _y := _y * - 1 ;
64306: LD_ADDR_VAR 0 7
64310: PUSH
64311: LD_VAR 0 7
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: MUL
64320: ST_TO_ADDR
// result := [ _x , _y ] ;
64321: LD_ADDR_VAR 0 5
64325: PUSH
64326: LD_VAR 0 6
64330: PUSH
64331: LD_VAR 0 7
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: ST_TO_ADDR
// end ;
64340: LD_VAR 0 5
64344: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
64349: PPUSH
64350: PPUSH
// task := GetTaskList ( unit ) ;
64351: LD_ADDR_VAR 0 7
64355: PUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: CALL_OW 437
64365: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64366: LD_VAR 0 7
64370: NOT
64371: PUSH
64372: LD_VAR 0 1
64376: PPUSH
64377: LD_VAR 0 2
64381: PPUSH
64382: CALL_OW 308
64386: NOT
64387: AND
64388: IFFALSE 64392
// exit ;
64390: GO 64510
// if IsInArea ( unit , area ) then
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_VAR 0 2
64401: PPUSH
64402: CALL_OW 308
64406: IFFALSE 64424
// begin ComMoveToArea ( unit , goAway ) ;
64408: LD_VAR 0 1
64412: PPUSH
64413: LD_VAR 0 3
64417: PPUSH
64418: CALL_OW 113
// exit ;
64422: GO 64510
// end ; if task [ 1 ] [ 1 ] <> M then
64424: LD_VAR 0 7
64428: PUSH
64429: LD_INT 1
64431: ARRAY
64432: PUSH
64433: LD_INT 1
64435: ARRAY
64436: PUSH
64437: LD_STRING M
64439: NONEQUAL
64440: IFFALSE 64444
// exit ;
64442: GO 64510
// x := task [ 1 ] [ 2 ] ;
64444: LD_ADDR_VAR 0 5
64448: PUSH
64449: LD_VAR 0 7
64453: PUSH
64454: LD_INT 1
64456: ARRAY
64457: PUSH
64458: LD_INT 2
64460: ARRAY
64461: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64462: LD_ADDR_VAR 0 6
64466: PUSH
64467: LD_VAR 0 7
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: PUSH
64476: LD_INT 3
64478: ARRAY
64479: ST_TO_ADDR
// if InArea ( x , y , area ) then
64480: LD_VAR 0 5
64484: PPUSH
64485: LD_VAR 0 6
64489: PPUSH
64490: LD_VAR 0 2
64494: PPUSH
64495: CALL_OW 309
64499: IFFALSE 64510
// ComStop ( unit ) ;
64501: LD_VAR 0 1
64505: PPUSH
64506: CALL_OW 141
// end ;
64510: LD_VAR 0 4
64514: RET
// export function Abs ( value ) ; begin
64515: LD_INT 0
64517: PPUSH
// result := value ;
64518: LD_ADDR_VAR 0 2
64522: PUSH
64523: LD_VAR 0 1
64527: ST_TO_ADDR
// if value < 0 then
64528: LD_VAR 0 1
64532: PUSH
64533: LD_INT 0
64535: LESS
64536: IFFALSE 64553
// result := value * - 1 ;
64538: LD_ADDR_VAR 0 2
64542: PUSH
64543: LD_VAR 0 1
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: MUL
64552: ST_TO_ADDR
// end ;
64553: LD_VAR 0 2
64557: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
64562: PPUSH
64563: PPUSH
64564: PPUSH
64565: PPUSH
64566: PPUSH
64567: PPUSH
// if not unit or not building then
64568: LD_VAR 0 1
64572: NOT
64573: PUSH
64574: LD_VAR 0 2
64578: NOT
64579: OR
64580: IFFALSE 64584
// exit ;
64582: GO 64810
// x := GetX ( building ) ;
64584: LD_ADDR_VAR 0 4
64588: PUSH
64589: LD_VAR 0 2
64593: PPUSH
64594: CALL_OW 250
64598: ST_TO_ADDR
// y := GetY ( building ) ;
64599: LD_ADDR_VAR 0 6
64603: PUSH
64604: LD_VAR 0 2
64608: PPUSH
64609: CALL_OW 251
64613: ST_TO_ADDR
// d := GetDir ( building ) ;
64614: LD_ADDR_VAR 0 8
64618: PUSH
64619: LD_VAR 0 2
64623: PPUSH
64624: CALL_OW 254
64628: ST_TO_ADDR
// r := 4 ;
64629: LD_ADDR_VAR 0 9
64633: PUSH
64634: LD_INT 4
64636: ST_TO_ADDR
// for i := 1 to 5 do
64637: LD_ADDR_VAR 0 10
64641: PUSH
64642: DOUBLE
64643: LD_INT 1
64645: DEC
64646: ST_TO_ADDR
64647: LD_INT 5
64649: PUSH
64650: FOR_TO
64651: IFFALSE 64808
// begin _x := ShiftX ( x , d , r + i ) ;
64653: LD_ADDR_VAR 0 5
64657: PUSH
64658: LD_VAR 0 4
64662: PPUSH
64663: LD_VAR 0 8
64667: PPUSH
64668: LD_VAR 0 9
64672: PUSH
64673: LD_VAR 0 10
64677: PLUS
64678: PPUSH
64679: CALL_OW 272
64683: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64684: LD_ADDR_VAR 0 7
64688: PUSH
64689: LD_VAR 0 6
64693: PPUSH
64694: LD_VAR 0 8
64698: PPUSH
64699: LD_VAR 0 9
64703: PUSH
64704: LD_VAR 0 10
64708: PLUS
64709: PPUSH
64710: CALL_OW 273
64714: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64715: LD_VAR 0 5
64719: PPUSH
64720: LD_VAR 0 7
64724: PPUSH
64725: CALL_OW 488
64729: PUSH
64730: LD_VAR 0 5
64734: PPUSH
64735: LD_VAR 0 7
64739: PPUSH
64740: CALL_OW 428
64744: PPUSH
64745: CALL_OW 247
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: LD_INT 2
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: IN
64760: NOT
64761: AND
64762: IFFALSE 64806
// begin ComMoveXY ( unit , _x , _y ) ;
64764: LD_VAR 0 1
64768: PPUSH
64769: LD_VAR 0 5
64773: PPUSH
64774: LD_VAR 0 7
64778: PPUSH
64779: CALL_OW 111
// result := [ _x , _y ] ;
64783: LD_ADDR_VAR 0 3
64787: PUSH
64788: LD_VAR 0 5
64792: PUSH
64793: LD_VAR 0 7
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: ST_TO_ADDR
// exit ;
64802: POP
64803: POP
64804: GO 64810
// end ; end ;
64806: GO 64650
64808: POP
64809: POP
// end ;
64810: LD_VAR 0 3
64814: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64815: LD_INT 0
64817: PPUSH
64818: PPUSH
64819: PPUSH
// result := 0 ;
64820: LD_ADDR_VAR 0 3
64824: PUSH
64825: LD_INT 0
64827: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 0
64835: LESS
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 8
64844: GREATER
64845: OR
64846: PUSH
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 0
64854: LESS
64855: OR
64856: PUSH
64857: LD_VAR 0 2
64861: PUSH
64862: LD_INT 8
64864: GREATER
64865: OR
64866: IFFALSE 64870
// exit ;
64868: GO 64945
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64870: LD_ADDR_VAR 0 4
64874: PUSH
64875: LD_INT 22
64877: PUSH
64878: LD_VAR 0 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PPUSH
64887: CALL_OW 69
64891: PUSH
64892: FOR_IN
64893: IFFALSE 64943
// begin un := UnitShoot ( i ) ;
64895: LD_ADDR_VAR 0 5
64899: PUSH
64900: LD_VAR 0 4
64904: PPUSH
64905: CALL_OW 504
64909: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64910: LD_VAR 0 5
64914: PPUSH
64915: CALL_OW 255
64919: PUSH
64920: LD_VAR 0 1
64924: EQUAL
64925: IFFALSE 64941
// begin result := un ;
64927: LD_ADDR_VAR 0 3
64931: PUSH
64932: LD_VAR 0 5
64936: ST_TO_ADDR
// exit ;
64937: POP
64938: POP
64939: GO 64945
// end ; end ;
64941: GO 64892
64943: POP
64944: POP
// end ;
64945: LD_VAR 0 3
64949: RET
// export function GetCargoBay ( units ) ; begin
64950: LD_INT 0
64952: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64953: LD_ADDR_VAR 0 2
64957: PUSH
64958: LD_VAR 0 1
64962: PPUSH
64963: LD_INT 2
64965: PUSH
64966: LD_INT 34
64968: PUSH
64969: LD_INT 12
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 34
64978: PUSH
64979: LD_INT 51
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 34
64988: PUSH
64989: LD_INT 32
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 34
64998: PUSH
64999: LD_INT 89
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: PPUSH
65013: CALL_OW 72
65017: ST_TO_ADDR
// end ;
65018: LD_VAR 0 2
65022: RET
// export function Negate ( value ) ; begin
65023: LD_INT 0
65025: PPUSH
// result := not value ;
65026: LD_ADDR_VAR 0 2
65030: PUSH
65031: LD_VAR 0 1
65035: NOT
65036: ST_TO_ADDR
// end ;
65037: LD_VAR 0 2
65041: RET
// export function Inc ( value ) ; begin
65042: LD_INT 0
65044: PPUSH
// result := value + 1 ;
65045: LD_ADDR_VAR 0 2
65049: PUSH
65050: LD_VAR 0 1
65054: PUSH
65055: LD_INT 1
65057: PLUS
65058: ST_TO_ADDR
// end ;
65059: LD_VAR 0 2
65063: RET
// export function Dec ( value ) ; begin
65064: LD_INT 0
65066: PPUSH
// result := value - 1 ;
65067: LD_ADDR_VAR 0 2
65071: PUSH
65072: LD_VAR 0 1
65076: PUSH
65077: LD_INT 1
65079: MINUS
65080: ST_TO_ADDR
// end ;
65081: LD_VAR 0 2
65085: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
65090: PPUSH
65091: PPUSH
65092: PPUSH
65093: PPUSH
65094: PPUSH
65095: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65096: LD_VAR 0 1
65100: PPUSH
65101: LD_VAR 0 2
65105: PPUSH
65106: CALL_OW 488
65110: NOT
65111: PUSH
65112: LD_VAR 0 3
65116: PPUSH
65117: LD_VAR 0 4
65121: PPUSH
65122: CALL_OW 488
65126: NOT
65127: OR
65128: IFFALSE 65141
// begin result := - 1 ;
65130: LD_ADDR_VAR 0 5
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: ST_TO_ADDR
// exit ;
65139: GO 65376
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65141: LD_ADDR_VAR 0 12
65145: PUSH
65146: LD_VAR 0 1
65150: PPUSH
65151: LD_VAR 0 2
65155: PPUSH
65156: LD_VAR 0 3
65160: PPUSH
65161: LD_VAR 0 4
65165: PPUSH
65166: CALL 64226 0 4
65170: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65171: LD_ADDR_VAR 0 11
65175: PUSH
65176: LD_VAR 0 1
65180: PPUSH
65181: LD_VAR 0 2
65185: PPUSH
65186: LD_VAR 0 12
65190: PUSH
65191: LD_INT 1
65193: ARRAY
65194: PPUSH
65195: LD_VAR 0 12
65199: PUSH
65200: LD_INT 2
65202: ARRAY
65203: PPUSH
65204: CALL_OW 298
65208: ST_TO_ADDR
// distance := 9999 ;
65209: LD_ADDR_VAR 0 10
65213: PUSH
65214: LD_INT 9999
65216: ST_TO_ADDR
// for i := 0 to 5 do
65217: LD_ADDR_VAR 0 6
65221: PUSH
65222: DOUBLE
65223: LD_INT 0
65225: DEC
65226: ST_TO_ADDR
65227: LD_INT 5
65229: PUSH
65230: FOR_TO
65231: IFFALSE 65374
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65233: LD_ADDR_VAR 0 7
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_VAR 0 6
65247: PPUSH
65248: LD_VAR 0 11
65252: PPUSH
65253: CALL_OW 272
65257: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65258: LD_ADDR_VAR 0 8
65262: PUSH
65263: LD_VAR 0 2
65267: PPUSH
65268: LD_VAR 0 6
65272: PPUSH
65273: LD_VAR 0 11
65277: PPUSH
65278: CALL_OW 273
65282: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65283: LD_VAR 0 7
65287: PPUSH
65288: LD_VAR 0 8
65292: PPUSH
65293: CALL_OW 488
65297: NOT
65298: IFFALSE 65302
// continue ;
65300: GO 65230
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65302: LD_ADDR_VAR 0 9
65306: PUSH
65307: LD_VAR 0 12
65311: PUSH
65312: LD_INT 1
65314: ARRAY
65315: PPUSH
65316: LD_VAR 0 12
65320: PUSH
65321: LD_INT 2
65323: ARRAY
65324: PPUSH
65325: LD_VAR 0 7
65329: PPUSH
65330: LD_VAR 0 8
65334: PPUSH
65335: CALL_OW 298
65339: ST_TO_ADDR
// if tmp < distance then
65340: LD_VAR 0 9
65344: PUSH
65345: LD_VAR 0 10
65349: LESS
65350: IFFALSE 65372
// begin result := i ;
65352: LD_ADDR_VAR 0 5
65356: PUSH
65357: LD_VAR 0 6
65361: ST_TO_ADDR
// distance := tmp ;
65362: LD_ADDR_VAR 0 10
65366: PUSH
65367: LD_VAR 0 9
65371: ST_TO_ADDR
// end ; end ;
65372: GO 65230
65374: POP
65375: POP
// end ;
65376: LD_VAR 0 5
65380: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65381: LD_INT 0
65383: PPUSH
65384: PPUSH
// if not driver or not IsInUnit ( driver ) then
65385: LD_VAR 0 1
65389: NOT
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 310
65400: NOT
65401: OR
65402: IFFALSE 65406
// exit ;
65404: GO 65496
// vehicle := IsInUnit ( driver ) ;
65406: LD_ADDR_VAR 0 3
65410: PUSH
65411: LD_VAR 0 1
65415: PPUSH
65416: CALL_OW 310
65420: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65421: LD_VAR 0 1
65425: PPUSH
65426: LD_STRING \
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: PUSH
65456: LD_STRING E
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: LD_VAR 0 3
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PPUSH
65492: CALL_OW 446
// end ;
65496: LD_VAR 0 2
65500: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
// if not driver or not IsInUnit ( driver ) then
65505: LD_VAR 0 1
65509: NOT
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: CALL_OW 310
65520: NOT
65521: OR
65522: IFFALSE 65526
// exit ;
65524: GO 65616
// vehicle := IsInUnit ( driver ) ;
65526: LD_ADDR_VAR 0 3
65530: PUSH
65531: LD_VAR 0 1
65535: PPUSH
65536: CALL_OW 310
65540: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65541: LD_VAR 0 1
65545: PPUSH
65546: LD_STRING \
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: PUSH
65576: LD_STRING E
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_VAR 0 3
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PPUSH
65612: CALL_OW 447
// end ;
65616: LD_VAR 0 2
65620: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65621: LD_INT 0
65623: PPUSH
65624: PPUSH
65625: PPUSH
// tmp := [ ] ;
65626: LD_ADDR_VAR 0 5
65630: PUSH
65631: EMPTY
65632: ST_TO_ADDR
// for i in units do
65633: LD_ADDR_VAR 0 4
65637: PUSH
65638: LD_VAR 0 1
65642: PUSH
65643: FOR_IN
65644: IFFALSE 65682
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65646: LD_ADDR_VAR 0 5
65650: PUSH
65651: LD_VAR 0 5
65655: PPUSH
65656: LD_VAR 0 5
65660: PUSH
65661: LD_INT 1
65663: PLUS
65664: PPUSH
65665: LD_VAR 0 4
65669: PPUSH
65670: CALL_OW 256
65674: PPUSH
65675: CALL_OW 2
65679: ST_TO_ADDR
65680: GO 65643
65682: POP
65683: POP
// if not tmp then
65684: LD_VAR 0 5
65688: NOT
65689: IFFALSE 65693
// exit ;
65691: GO 65741
// if asc then
65693: LD_VAR 0 2
65697: IFFALSE 65721
// result := SortListByListAsc ( units , tmp ) else
65699: LD_ADDR_VAR 0 3
65703: PUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: LD_VAR 0 5
65713: PPUSH
65714: CALL_OW 76
65718: ST_TO_ADDR
65719: GO 65741
// result := SortListByListDesc ( units , tmp ) ;
65721: LD_ADDR_VAR 0 3
65725: PUSH
65726: LD_VAR 0 1
65730: PPUSH
65731: LD_VAR 0 5
65735: PPUSH
65736: CALL_OW 77
65740: ST_TO_ADDR
// end ;
65741: LD_VAR 0 3
65745: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65746: LD_INT 0
65748: PPUSH
65749: PPUSH
// task := GetTaskList ( mech ) ;
65750: LD_ADDR_VAR 0 4
65754: PUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 437
65764: ST_TO_ADDR
// if not task then
65765: LD_VAR 0 4
65769: NOT
65770: IFFALSE 65774
// exit ;
65772: GO 65816
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65774: LD_ADDR_VAR 0 3
65778: PUSH
65779: LD_VAR 0 4
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: PUSH
65788: LD_INT 1
65790: ARRAY
65791: PUSH
65792: LD_STRING r
65794: EQUAL
65795: PUSH
65796: LD_VAR 0 4
65800: PUSH
65801: LD_INT 1
65803: ARRAY
65804: PUSH
65805: LD_INT 4
65807: ARRAY
65808: PUSH
65809: LD_VAR 0 2
65813: EQUAL
65814: AND
65815: ST_TO_ADDR
// end ;
65816: LD_VAR 0 3
65820: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65821: LD_INT 0
65823: PPUSH
// SetDir ( unit , d ) ;
65824: LD_VAR 0 1
65828: PPUSH
65829: LD_VAR 0 4
65833: PPUSH
65834: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65838: LD_VAR 0 1
65842: PPUSH
65843: LD_VAR 0 2
65847: PPUSH
65848: LD_VAR 0 3
65852: PPUSH
65853: LD_VAR 0 5
65857: PPUSH
65858: CALL_OW 48
// end ;
65862: LD_VAR 0 6
65866: RET
// export function ToNaturalNumber ( number ) ; begin
65867: LD_INT 0
65869: PPUSH
// result := number div 1 ;
65870: LD_ADDR_VAR 0 2
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 1
65882: DIV
65883: ST_TO_ADDR
// if number < 0 then
65884: LD_VAR 0 1
65888: PUSH
65889: LD_INT 0
65891: LESS
65892: IFFALSE 65902
// result := 0 ;
65894: LD_ADDR_VAR 0 2
65898: PUSH
65899: LD_INT 0
65901: ST_TO_ADDR
// end ;
65902: LD_VAR 0 2
65906: RET
// export function SortByClass ( units , class ) ; var un ; begin
65907: LD_INT 0
65909: PPUSH
65910: PPUSH
// if not units or not class then
65911: LD_VAR 0 1
65915: NOT
65916: PUSH
65917: LD_VAR 0 2
65921: NOT
65922: OR
65923: IFFALSE 65927
// exit ;
65925: GO 66022
// result := [ ] ;
65927: LD_ADDR_VAR 0 3
65931: PUSH
65932: EMPTY
65933: ST_TO_ADDR
// for un in units do
65934: LD_ADDR_VAR 0 4
65938: PUSH
65939: LD_VAR 0 1
65943: PUSH
65944: FOR_IN
65945: IFFALSE 66020
// if GetClass ( un ) = class then
65947: LD_VAR 0 4
65951: PPUSH
65952: CALL_OW 257
65956: PUSH
65957: LD_VAR 0 2
65961: EQUAL
65962: IFFALSE 65989
// result := Insert ( result , 1 , un ) else
65964: LD_ADDR_VAR 0 3
65968: PUSH
65969: LD_VAR 0 3
65973: PPUSH
65974: LD_INT 1
65976: PPUSH
65977: LD_VAR 0 4
65981: PPUSH
65982: CALL_OW 2
65986: ST_TO_ADDR
65987: GO 66018
// result := Replace ( result , result + 1 , un ) ;
65989: LD_ADDR_VAR 0 3
65993: PUSH
65994: LD_VAR 0 3
65998: PPUSH
65999: LD_VAR 0 3
66003: PUSH
66004: LD_INT 1
66006: PLUS
66007: PPUSH
66008: LD_VAR 0 4
66012: PPUSH
66013: CALL_OW 1
66017: ST_TO_ADDR
66018: GO 65944
66020: POP
66021: POP
// end ;
66022: LD_VAR 0 3
66026: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66027: LD_INT 0
66029: PPUSH
66030: PPUSH
66031: PPUSH
66032: PPUSH
66033: PPUSH
66034: PPUSH
66035: PPUSH
// result := [ ] ;
66036: LD_ADDR_VAR 0 4
66040: PUSH
66041: EMPTY
66042: ST_TO_ADDR
// if x - r < 0 then
66043: LD_VAR 0 1
66047: PUSH
66048: LD_VAR 0 3
66052: MINUS
66053: PUSH
66054: LD_INT 0
66056: LESS
66057: IFFALSE 66069
// min_x := 0 else
66059: LD_ADDR_VAR 0 8
66063: PUSH
66064: LD_INT 0
66066: ST_TO_ADDR
66067: GO 66085
// min_x := x - r ;
66069: LD_ADDR_VAR 0 8
66073: PUSH
66074: LD_VAR 0 1
66078: PUSH
66079: LD_VAR 0 3
66083: MINUS
66084: ST_TO_ADDR
// if y - r < 0 then
66085: LD_VAR 0 2
66089: PUSH
66090: LD_VAR 0 3
66094: MINUS
66095: PUSH
66096: LD_INT 0
66098: LESS
66099: IFFALSE 66111
// min_y := 0 else
66101: LD_ADDR_VAR 0 7
66105: PUSH
66106: LD_INT 0
66108: ST_TO_ADDR
66109: GO 66127
// min_y := y - r ;
66111: LD_ADDR_VAR 0 7
66115: PUSH
66116: LD_VAR 0 2
66120: PUSH
66121: LD_VAR 0 3
66125: MINUS
66126: ST_TO_ADDR
// max_x := x + r ;
66127: LD_ADDR_VAR 0 9
66131: PUSH
66132: LD_VAR 0 1
66136: PUSH
66137: LD_VAR 0 3
66141: PLUS
66142: ST_TO_ADDR
// max_y := y + r ;
66143: LD_ADDR_VAR 0 10
66147: PUSH
66148: LD_VAR 0 2
66152: PUSH
66153: LD_VAR 0 3
66157: PLUS
66158: ST_TO_ADDR
// for _x = min_x to max_x do
66159: LD_ADDR_VAR 0 5
66163: PUSH
66164: DOUBLE
66165: LD_VAR 0 8
66169: DEC
66170: ST_TO_ADDR
66171: LD_VAR 0 9
66175: PUSH
66176: FOR_TO
66177: IFFALSE 66278
// for _y = min_y to max_y do
66179: LD_ADDR_VAR 0 6
66183: PUSH
66184: DOUBLE
66185: LD_VAR 0 7
66189: DEC
66190: ST_TO_ADDR
66191: LD_VAR 0 10
66195: PUSH
66196: FOR_TO
66197: IFFALSE 66274
// begin if not ValidHex ( _x , _y ) then
66199: LD_VAR 0 5
66203: PPUSH
66204: LD_VAR 0 6
66208: PPUSH
66209: CALL_OW 488
66213: NOT
66214: IFFALSE 66218
// continue ;
66216: GO 66196
// if GetResourceTypeXY ( _x , _y ) then
66218: LD_VAR 0 5
66222: PPUSH
66223: LD_VAR 0 6
66227: PPUSH
66228: CALL_OW 283
66232: IFFALSE 66272
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66234: LD_ADDR_VAR 0 4
66238: PUSH
66239: LD_VAR 0 4
66243: PPUSH
66244: LD_VAR 0 4
66248: PUSH
66249: LD_INT 1
66251: PLUS
66252: PPUSH
66253: LD_VAR 0 5
66257: PUSH
66258: LD_VAR 0 6
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PPUSH
66267: CALL_OW 1
66271: ST_TO_ADDR
// end ;
66272: GO 66196
66274: POP
66275: POP
66276: GO 66176
66278: POP
66279: POP
// end ;
66280: LD_VAR 0 4
66284: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66285: LD_INT 0
66287: PPUSH
66288: PPUSH
66289: PPUSH
66290: PPUSH
66291: PPUSH
66292: PPUSH
66293: PPUSH
66294: PPUSH
// if not units then
66295: LD_VAR 0 1
66299: NOT
66300: IFFALSE 66304
// exit ;
66302: GO 66832
// result := UnitFilter ( units , [ f_ok ] ) ;
66304: LD_ADDR_VAR 0 3
66308: PUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_INT 50
66316: PUSH
66317: EMPTY
66318: LIST
66319: PPUSH
66320: CALL_OW 72
66324: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66325: LD_ADDR_VAR 0 8
66329: PUSH
66330: LD_VAR 0 1
66334: PUSH
66335: LD_INT 1
66337: ARRAY
66338: PPUSH
66339: CALL_OW 255
66343: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66344: LD_ADDR_VAR 0 10
66348: PUSH
66349: LD_INT 29
66351: PUSH
66352: LD_INT 91
66354: PUSH
66355: LD_INT 49
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: ST_TO_ADDR
// if not result then
66363: LD_VAR 0 3
66367: NOT
66368: IFFALSE 66372
// exit ;
66370: GO 66832
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66372: LD_ADDR_VAR 0 5
66376: PUSH
66377: LD_INT 81
66379: PUSH
66380: LD_VAR 0 8
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PPUSH
66389: CALL_OW 69
66393: ST_TO_ADDR
// for i in result do
66394: LD_ADDR_VAR 0 4
66398: PUSH
66399: LD_VAR 0 3
66403: PUSH
66404: FOR_IN
66405: IFFALSE 66830
// begin tag := GetTag ( i ) + 1 ;
66407: LD_ADDR_VAR 0 9
66411: PUSH
66412: LD_VAR 0 4
66416: PPUSH
66417: CALL_OW 110
66421: PUSH
66422: LD_INT 1
66424: PLUS
66425: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
66426: LD_ADDR_VAR 0 7
66430: PUSH
66431: LD_VAR 0 4
66435: PPUSH
66436: CALL_OW 250
66440: PPUSH
66441: LD_VAR 0 4
66445: PPUSH
66446: CALL_OW 251
66450: PPUSH
66451: LD_INT 4
66453: PPUSH
66454: CALL 66027 0 3
66458: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
66459: LD_VAR 0 4
66463: PPUSH
66464: CALL_OW 247
66468: PUSH
66469: LD_INT 2
66471: EQUAL
66472: PUSH
66473: LD_VAR 0 7
66477: PUSH
66478: LD_INT 2
66480: GREATER
66481: AND
66482: PUSH
66483: LD_VAR 0 4
66487: PPUSH
66488: CALL_OW 264
66492: PUSH
66493: LD_VAR 0 10
66497: IN
66498: NOT
66499: AND
66500: IFFALSE 66539
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66502: LD_VAR 0 4
66506: PPUSH
66507: LD_VAR 0 7
66511: PUSH
66512: LD_INT 1
66514: ARRAY
66515: PUSH
66516: LD_INT 1
66518: ARRAY
66519: PPUSH
66520: LD_VAR 0 7
66524: PUSH
66525: LD_INT 1
66527: ARRAY
66528: PUSH
66529: LD_INT 2
66531: ARRAY
66532: PPUSH
66533: CALL_OW 116
66537: GO 66828
// if path > tag then
66539: LD_VAR 0 2
66543: PUSH
66544: LD_VAR 0 9
66548: GREATER
66549: IFFALSE 66757
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66551: LD_ADDR_VAR 0 6
66555: PUSH
66556: LD_VAR 0 5
66560: PPUSH
66561: LD_INT 91
66563: PUSH
66564: LD_VAR 0 4
66568: PUSH
66569: LD_INT 8
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: LIST
66576: PPUSH
66577: CALL_OW 72
66581: ST_TO_ADDR
// if nearEnemy then
66582: LD_VAR 0 6
66586: IFFALSE 66655
// begin if GetWeapon ( i ) = ru_time_lapser then
66588: LD_VAR 0 4
66592: PPUSH
66593: CALL_OW 264
66597: PUSH
66598: LD_INT 49
66600: EQUAL
66601: IFFALSE 66629
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66603: LD_VAR 0 4
66607: PPUSH
66608: LD_VAR 0 6
66612: PPUSH
66613: LD_VAR 0 4
66617: PPUSH
66618: CALL_OW 74
66622: PPUSH
66623: CALL_OW 112
66627: GO 66653
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66629: LD_VAR 0 4
66633: PPUSH
66634: LD_VAR 0 6
66638: PPUSH
66639: LD_VAR 0 4
66643: PPUSH
66644: CALL_OW 74
66648: PPUSH
66649: CALL 67903 0 2
// end else
66653: GO 66755
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66655: LD_VAR 0 4
66659: PPUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_VAR 0 9
66669: ARRAY
66670: PUSH
66671: LD_INT 1
66673: ARRAY
66674: PPUSH
66675: LD_VAR 0 2
66679: PUSH
66680: LD_VAR 0 9
66684: ARRAY
66685: PUSH
66686: LD_INT 2
66688: ARRAY
66689: PPUSH
66690: CALL_OW 297
66694: PUSH
66695: LD_INT 6
66697: GREATER
66698: IFFALSE 66741
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66700: LD_VAR 0 4
66704: PPUSH
66705: LD_VAR 0 2
66709: PUSH
66710: LD_VAR 0 9
66714: ARRAY
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: PPUSH
66720: LD_VAR 0 2
66724: PUSH
66725: LD_VAR 0 9
66729: ARRAY
66730: PUSH
66731: LD_INT 2
66733: ARRAY
66734: PPUSH
66735: CALL_OW 114
66739: GO 66755
// SetTag ( i , tag ) ;
66741: LD_VAR 0 4
66745: PPUSH
66746: LD_VAR 0 9
66750: PPUSH
66751: CALL_OW 109
// end else
66755: GO 66828
// if enemy then
66757: LD_VAR 0 5
66761: IFFALSE 66828
// begin if GetWeapon ( i ) = ru_time_lapser then
66763: LD_VAR 0 4
66767: PPUSH
66768: CALL_OW 264
66772: PUSH
66773: LD_INT 49
66775: EQUAL
66776: IFFALSE 66804
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66778: LD_VAR 0 4
66782: PPUSH
66783: LD_VAR 0 5
66787: PPUSH
66788: LD_VAR 0 4
66792: PPUSH
66793: CALL_OW 74
66797: PPUSH
66798: CALL_OW 112
66802: GO 66828
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66804: LD_VAR 0 4
66808: PPUSH
66809: LD_VAR 0 5
66813: PPUSH
66814: LD_VAR 0 4
66818: PPUSH
66819: CALL_OW 74
66823: PPUSH
66824: CALL 67903 0 2
// end ; end ;
66828: GO 66404
66830: POP
66831: POP
// end ;
66832: LD_VAR 0 3
66836: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66837: LD_INT 0
66839: PPUSH
66840: PPUSH
66841: PPUSH
// if not unit or IsInUnit ( unit ) then
66842: LD_VAR 0 1
66846: NOT
66847: PUSH
66848: LD_VAR 0 1
66852: PPUSH
66853: CALL_OW 310
66857: OR
66858: IFFALSE 66862
// exit ;
66860: GO 66953
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66862: LD_ADDR_VAR 0 4
66866: PUSH
66867: LD_VAR 0 1
66871: PPUSH
66872: CALL_OW 250
66876: PPUSH
66877: LD_VAR 0 2
66881: PPUSH
66882: LD_INT 1
66884: PPUSH
66885: CALL_OW 272
66889: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66890: LD_ADDR_VAR 0 5
66894: PUSH
66895: LD_VAR 0 1
66899: PPUSH
66900: CALL_OW 251
66904: PPUSH
66905: LD_VAR 0 2
66909: PPUSH
66910: LD_INT 1
66912: PPUSH
66913: CALL_OW 273
66917: ST_TO_ADDR
// if ValidHex ( x , y ) then
66918: LD_VAR 0 4
66922: PPUSH
66923: LD_VAR 0 5
66927: PPUSH
66928: CALL_OW 488
66932: IFFALSE 66953
// ComTurnXY ( unit , x , y ) ;
66934: LD_VAR 0 1
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: LD_VAR 0 5
66948: PPUSH
66949: CALL_OW 118
// end ;
66953: LD_VAR 0 3
66957: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66958: LD_INT 0
66960: PPUSH
66961: PPUSH
// result := false ;
66962: LD_ADDR_VAR 0 3
66966: PUSH
66967: LD_INT 0
66969: ST_TO_ADDR
// if not units then
66970: LD_VAR 0 2
66974: NOT
66975: IFFALSE 66979
// exit ;
66977: GO 67024
// for i in units do
66979: LD_ADDR_VAR 0 4
66983: PUSH
66984: LD_VAR 0 2
66988: PUSH
66989: FOR_IN
66990: IFFALSE 67022
// if See ( side , i ) then
66992: LD_VAR 0 1
66996: PPUSH
66997: LD_VAR 0 4
67001: PPUSH
67002: CALL_OW 292
67006: IFFALSE 67020
// begin result := true ;
67008: LD_ADDR_VAR 0 3
67012: PUSH
67013: LD_INT 1
67015: ST_TO_ADDR
// exit ;
67016: POP
67017: POP
67018: GO 67024
// end ;
67020: GO 66989
67022: POP
67023: POP
// end ;
67024: LD_VAR 0 3
67028: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67029: LD_INT 0
67031: PPUSH
67032: PPUSH
67033: PPUSH
67034: PPUSH
// if not unit or not points then
67035: LD_VAR 0 1
67039: NOT
67040: PUSH
67041: LD_VAR 0 2
67045: NOT
67046: OR
67047: IFFALSE 67051
// exit ;
67049: GO 67141
// dist := 99999 ;
67051: LD_ADDR_VAR 0 5
67055: PUSH
67056: LD_INT 99999
67058: ST_TO_ADDR
// for i in points do
67059: LD_ADDR_VAR 0 4
67063: PUSH
67064: LD_VAR 0 2
67068: PUSH
67069: FOR_IN
67070: IFFALSE 67139
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67072: LD_ADDR_VAR 0 6
67076: PUSH
67077: LD_VAR 0 1
67081: PPUSH
67082: LD_VAR 0 4
67086: PUSH
67087: LD_INT 1
67089: ARRAY
67090: PPUSH
67091: LD_VAR 0 4
67095: PUSH
67096: LD_INT 2
67098: ARRAY
67099: PPUSH
67100: CALL_OW 297
67104: ST_TO_ADDR
// if tmpDist < dist then
67105: LD_VAR 0 6
67109: PUSH
67110: LD_VAR 0 5
67114: LESS
67115: IFFALSE 67137
// begin result := i ;
67117: LD_ADDR_VAR 0 3
67121: PUSH
67122: LD_VAR 0 4
67126: ST_TO_ADDR
// dist := tmpDist ;
67127: LD_ADDR_VAR 0 5
67131: PUSH
67132: LD_VAR 0 6
67136: ST_TO_ADDR
// end ; end ;
67137: GO 67069
67139: POP
67140: POP
// end ;
67141: LD_VAR 0 3
67145: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67146: LD_INT 0
67148: PPUSH
// uc_side := side ;
67149: LD_ADDR_OWVAR 20
67153: PUSH
67154: LD_VAR 0 1
67158: ST_TO_ADDR
// uc_nation := 3 ;
67159: LD_ADDR_OWVAR 21
67163: PUSH
67164: LD_INT 3
67166: ST_TO_ADDR
// vc_chassis := 25 ;
67167: LD_ADDR_OWVAR 37
67171: PUSH
67172: LD_INT 25
67174: ST_TO_ADDR
// vc_engine := engine_siberite ;
67175: LD_ADDR_OWVAR 39
67179: PUSH
67180: LD_INT 3
67182: ST_TO_ADDR
// vc_control := control_computer ;
67183: LD_ADDR_OWVAR 38
67187: PUSH
67188: LD_INT 3
67190: ST_TO_ADDR
// vc_weapon := 59 ;
67191: LD_ADDR_OWVAR 40
67195: PUSH
67196: LD_INT 59
67198: ST_TO_ADDR
// result := CreateVehicle ;
67199: LD_ADDR_VAR 0 5
67203: PUSH
67204: CALL_OW 45
67208: ST_TO_ADDR
// SetDir ( result , d ) ;
67209: LD_VAR 0 5
67213: PPUSH
67214: LD_VAR 0 4
67218: PPUSH
67219: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67223: LD_VAR 0 5
67227: PPUSH
67228: LD_VAR 0 2
67232: PPUSH
67233: LD_VAR 0 3
67237: PPUSH
67238: LD_INT 0
67240: PPUSH
67241: CALL_OW 48
// end ;
67245: LD_VAR 0 5
67249: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
67254: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67255: LD_ADDR_VAR 0 2
67259: PUSH
67260: LD_INT 0
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67278: LD_VAR 0 1
67282: NOT
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: CALL_OW 264
67293: PUSH
67294: LD_INT 12
67296: PUSH
67297: LD_INT 51
67299: PUSH
67300: LD_INT 32
67302: PUSH
67303: LD_INT 89
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: IN
67312: NOT
67313: OR
67314: IFFALSE 67318
// exit ;
67316: GO 67416
// for i := 1 to 3 do
67318: LD_ADDR_VAR 0 3
67322: PUSH
67323: DOUBLE
67324: LD_INT 1
67326: DEC
67327: ST_TO_ADDR
67328: LD_INT 3
67330: PUSH
67331: FOR_TO
67332: IFFALSE 67414
// begin tmp := GetCargo ( cargo , i ) ;
67334: LD_ADDR_VAR 0 4
67338: PUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: LD_VAR 0 3
67348: PPUSH
67349: CALL_OW 289
67353: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67354: LD_ADDR_VAR 0 2
67358: PUSH
67359: LD_VAR 0 2
67363: PPUSH
67364: LD_VAR 0 3
67368: PPUSH
67369: LD_VAR 0 4
67373: PPUSH
67374: CALL_OW 1
67378: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67379: LD_ADDR_VAR 0 2
67383: PUSH
67384: LD_VAR 0 2
67388: PPUSH
67389: LD_INT 4
67391: PPUSH
67392: LD_VAR 0 2
67396: PUSH
67397: LD_INT 4
67399: ARRAY
67400: PUSH
67401: LD_VAR 0 4
67405: PLUS
67406: PPUSH
67407: CALL_OW 1
67411: ST_TO_ADDR
// end ;
67412: GO 67331
67414: POP
67415: POP
// end ;
67416: LD_VAR 0 2
67420: RET
// export function Length ( array ) ; begin
67421: LD_INT 0
67423: PPUSH
// result := array + 0 ;
67424: LD_ADDR_VAR 0 2
67428: PUSH
67429: LD_VAR 0 1
67433: PUSH
67434: LD_INT 0
67436: PLUS
67437: ST_TO_ADDR
// end ;
67438: LD_VAR 0 2
67442: RET
// export function PrepareArray ( array ) ; begin
67443: LD_INT 0
67445: PPUSH
// result := array diff 0 ;
67446: LD_ADDR_VAR 0 2
67450: PUSH
67451: LD_VAR 0 1
67455: PUSH
67456: LD_INT 0
67458: DIFF
67459: ST_TO_ADDR
// if not result [ 1 ] then
67460: LD_VAR 0 2
67464: PUSH
67465: LD_INT 1
67467: ARRAY
67468: NOT
67469: IFFALSE 67489
// result := Delete ( result , 1 ) ;
67471: LD_ADDR_VAR 0 2
67475: PUSH
67476: LD_VAR 0 2
67480: PPUSH
67481: LD_INT 1
67483: PPUSH
67484: CALL_OW 3
67488: ST_TO_ADDR
// end ;
67489: LD_VAR 0 2
67493: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67494: LD_INT 0
67496: PPUSH
67497: PPUSH
67498: PPUSH
67499: PPUSH
// sibRocketRange := 25 ;
67500: LD_ADDR_VAR 0 6
67504: PUSH
67505: LD_INT 25
67507: ST_TO_ADDR
// result := false ;
67508: LD_ADDR_VAR 0 4
67512: PUSH
67513: LD_INT 0
67515: ST_TO_ADDR
// for i := 0 to 5 do
67516: LD_ADDR_VAR 0 5
67520: PUSH
67521: DOUBLE
67522: LD_INT 0
67524: DEC
67525: ST_TO_ADDR
67526: LD_INT 5
67528: PUSH
67529: FOR_TO
67530: IFFALSE 67597
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67532: LD_VAR 0 1
67536: PPUSH
67537: LD_VAR 0 5
67541: PPUSH
67542: LD_VAR 0 6
67546: PPUSH
67547: CALL_OW 272
67551: PPUSH
67552: LD_VAR 0 2
67556: PPUSH
67557: LD_VAR 0 5
67561: PPUSH
67562: LD_VAR 0 6
67566: PPUSH
67567: CALL_OW 273
67571: PPUSH
67572: LD_VAR 0 3
67576: PPUSH
67577: CALL_OW 309
67581: IFFALSE 67595
// begin result := true ;
67583: LD_ADDR_VAR 0 4
67587: PUSH
67588: LD_INT 1
67590: ST_TO_ADDR
// exit ;
67591: POP
67592: POP
67593: GO 67599
// end ;
67595: GO 67529
67597: POP
67598: POP
// end ;
67599: LD_VAR 0 4
67603: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67604: LD_INT 0
67606: PPUSH
67607: PPUSH
67608: PPUSH
// if btype = b_depot then
67609: LD_VAR 0 2
67613: PUSH
67614: LD_INT 0
67616: EQUAL
67617: IFFALSE 67629
// begin result := true ;
67619: LD_ADDR_VAR 0 3
67623: PUSH
67624: LD_INT 1
67626: ST_TO_ADDR
// exit ;
67627: GO 67745
// end ; pom := GetBase ( depot ) ;
67629: LD_ADDR_VAR 0 4
67633: PUSH
67634: LD_VAR 0 1
67638: PPUSH
67639: CALL_OW 274
67643: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67644: LD_ADDR_VAR 0 5
67648: PUSH
67649: LD_VAR 0 2
67653: PPUSH
67654: LD_VAR 0 1
67658: PPUSH
67659: CALL_OW 248
67663: PPUSH
67664: CALL_OW 450
67668: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67669: LD_ADDR_VAR 0 3
67673: PUSH
67674: LD_VAR 0 4
67678: PPUSH
67679: LD_INT 1
67681: PPUSH
67682: CALL_OW 275
67686: PUSH
67687: LD_VAR 0 5
67691: PUSH
67692: LD_INT 1
67694: ARRAY
67695: GREATEREQUAL
67696: PUSH
67697: LD_VAR 0 4
67701: PPUSH
67702: LD_INT 2
67704: PPUSH
67705: CALL_OW 275
67709: PUSH
67710: LD_VAR 0 5
67714: PUSH
67715: LD_INT 2
67717: ARRAY
67718: GREATEREQUAL
67719: AND
67720: PUSH
67721: LD_VAR 0 4
67725: PPUSH
67726: LD_INT 3
67728: PPUSH
67729: CALL_OW 275
67733: PUSH
67734: LD_VAR 0 5
67738: PUSH
67739: LD_INT 3
67741: ARRAY
67742: GREATEREQUAL
67743: AND
67744: ST_TO_ADDR
// end ;
67745: LD_VAR 0 3
67749: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67750: LD_INT 0
67752: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67753: LD_VAR 0 1
67757: PPUSH
67758: LD_VAR 0 2
67762: PPUSH
67763: LD_INT 0
67765: PPUSH
67766: LD_INT 0
67768: PPUSH
67769: LD_INT 1
67771: PPUSH
67772: LD_INT 0
67774: PPUSH
67775: CALL_OW 587
// end ;
67779: LD_VAR 0 3
67783: RET
// export function CenterOnNow ( unit ) ; begin
67784: LD_INT 0
67786: PPUSH
// result := IsInUnit ( unit ) ;
67787: LD_ADDR_VAR 0 2
67791: PUSH
67792: LD_VAR 0 1
67796: PPUSH
67797: CALL_OW 310
67801: ST_TO_ADDR
// if not result then
67802: LD_VAR 0 2
67806: NOT
67807: IFFALSE 67819
// result := unit ;
67809: LD_ADDR_VAR 0 2
67813: PUSH
67814: LD_VAR 0 1
67818: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL_OW 87
// end ;
67828: LD_VAR 0 2
67832: RET
// export function ComMoveHex ( unit , hex ) ; begin
67833: LD_INT 0
67835: PPUSH
// if not hex then
67836: LD_VAR 0 2
67840: NOT
67841: IFFALSE 67845
// exit ;
67843: GO 67898
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67845: LD_VAR 0 2
67849: PUSH
67850: LD_INT 1
67852: ARRAY
67853: PPUSH
67854: LD_VAR 0 2
67858: PUSH
67859: LD_INT 2
67861: ARRAY
67862: PPUSH
67863: CALL_OW 428
67867: IFFALSE 67871
// exit ;
67869: GO 67898
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 2
67880: PUSH
67881: LD_INT 1
67883: ARRAY
67884: PPUSH
67885: LD_VAR 0 2
67889: PUSH
67890: LD_INT 2
67892: ARRAY
67893: PPUSH
67894: CALL_OW 111
// end ;
67898: LD_VAR 0 3
67902: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67903: LD_INT 0
67905: PPUSH
67906: PPUSH
67907: PPUSH
// if not unit or not enemy then
67908: LD_VAR 0 1
67912: NOT
67913: PUSH
67914: LD_VAR 0 2
67918: NOT
67919: OR
67920: IFFALSE 67924
// exit ;
67922: GO 68048
// x := GetX ( enemy ) ;
67924: LD_ADDR_VAR 0 4
67928: PUSH
67929: LD_VAR 0 2
67933: PPUSH
67934: CALL_OW 250
67938: ST_TO_ADDR
// y := GetY ( enemy ) ;
67939: LD_ADDR_VAR 0 5
67943: PUSH
67944: LD_VAR 0 2
67948: PPUSH
67949: CALL_OW 251
67953: ST_TO_ADDR
// if ValidHex ( x , y ) then
67954: LD_VAR 0 4
67958: PPUSH
67959: LD_VAR 0 5
67963: PPUSH
67964: CALL_OW 488
67968: IFFALSE 68048
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67970: LD_VAR 0 2
67974: PPUSH
67975: CALL_OW 247
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 2
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: IN
67990: PUSH
67991: LD_VAR 0 1
67995: PPUSH
67996: CALL_OW 255
68000: PPUSH
68001: LD_VAR 0 2
68005: PPUSH
68006: CALL_OW 292
68010: OR
68011: IFFALSE 68029
// ComAttackUnit ( unit , enemy ) else
68013: LD_VAR 0 1
68017: PPUSH
68018: LD_VAR 0 2
68022: PPUSH
68023: CALL_OW 115
68027: GO 68048
// ComAgressiveMove ( unit , x , y ) ;
68029: LD_VAR 0 1
68033: PPUSH
68034: LD_VAR 0 4
68038: PPUSH
68039: LD_VAR 0 5
68043: PPUSH
68044: CALL_OW 114
// end ;
68048: LD_VAR 0 3
68052: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68053: LD_INT 0
68055: PPUSH
68056: PPUSH
68057: PPUSH
// list := AreaToList ( area , 0 ) ;
68058: LD_ADDR_VAR 0 5
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_INT 0
68070: PPUSH
68071: CALL_OW 517
68075: ST_TO_ADDR
// if not list then
68076: LD_VAR 0 5
68080: NOT
68081: IFFALSE 68085
// exit ;
68083: GO 68215
// if all then
68085: LD_VAR 0 2
68089: IFFALSE 68177
// begin for i := 1 to list [ 1 ] do
68091: LD_ADDR_VAR 0 4
68095: PUSH
68096: DOUBLE
68097: LD_INT 1
68099: DEC
68100: ST_TO_ADDR
68101: LD_VAR 0 5
68105: PUSH
68106: LD_INT 1
68108: ARRAY
68109: PUSH
68110: FOR_TO
68111: IFFALSE 68173
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68113: LD_ADDR_VAR 0 3
68117: PUSH
68118: LD_VAR 0 3
68122: PPUSH
68123: LD_VAR 0 3
68127: PUSH
68128: LD_INT 1
68130: PLUS
68131: PPUSH
68132: LD_VAR 0 5
68136: PUSH
68137: LD_INT 1
68139: ARRAY
68140: PUSH
68141: LD_VAR 0 4
68145: ARRAY
68146: PUSH
68147: LD_VAR 0 5
68151: PUSH
68152: LD_INT 2
68154: ARRAY
68155: PUSH
68156: LD_VAR 0 4
68160: ARRAY
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL_OW 1
68170: ST_TO_ADDR
68171: GO 68110
68173: POP
68174: POP
// exit ;
68175: GO 68215
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68177: LD_ADDR_VAR 0 3
68181: PUSH
68182: LD_VAR 0 5
68186: PUSH
68187: LD_INT 1
68189: ARRAY
68190: PUSH
68191: LD_INT 1
68193: ARRAY
68194: PUSH
68195: LD_VAR 0 5
68199: PUSH
68200: LD_INT 2
68202: ARRAY
68203: PUSH
68204: LD_INT 1
68206: ARRAY
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: EMPTY
68213: LIST
68214: ST_TO_ADDR
// end ;
68215: LD_VAR 0 3
68219: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68220: LD_INT 0
68222: PPUSH
68223: PPUSH
// list := AreaToList ( area , 0 ) ;
68224: LD_ADDR_VAR 0 4
68228: PUSH
68229: LD_VAR 0 1
68233: PPUSH
68234: LD_INT 0
68236: PPUSH
68237: CALL_OW 517
68241: ST_TO_ADDR
// if not list then
68242: LD_VAR 0 4
68246: NOT
68247: IFFALSE 68251
// exit ;
68249: GO 68292
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68251: LD_ADDR_VAR 0 3
68255: PUSH
68256: LD_VAR 0 4
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PUSH
68265: LD_INT 1
68267: ARRAY
68268: PUSH
68269: LD_VAR 0 4
68273: PUSH
68274: LD_INT 2
68276: ARRAY
68277: PUSH
68278: LD_INT 1
68280: ARRAY
68281: PUSH
68282: LD_VAR 0 2
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// end ;
68292: LD_VAR 0 3
68296: RET
// export function First ( array ) ; begin
68297: LD_INT 0
68299: PPUSH
// if not array then
68300: LD_VAR 0 1
68304: NOT
68305: IFFALSE 68309
// exit ;
68307: GO 68323
// result := array [ 1 ] ;
68309: LD_ADDR_VAR 0 2
68313: PUSH
68314: LD_VAR 0 1
68318: PUSH
68319: LD_INT 1
68321: ARRAY
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 2
68327: RET
// export function Last ( array ) ; begin
68328: LD_INT 0
68330: PPUSH
// if not array then
68331: LD_VAR 0 1
68335: NOT
68336: IFFALSE 68340
// exit ;
68338: GO 68356
// result := array [ array ] ;
68340: LD_ADDR_VAR 0 2
68344: PUSH
68345: LD_VAR 0 1
68349: PUSH
68350: LD_VAR 0 1
68354: ARRAY
68355: ST_TO_ADDR
// end ;
68356: LD_VAR 0 2
68360: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68361: LD_INT 0
68363: PPUSH
68364: PPUSH
// result := [ ] ;
68365: LD_ADDR_VAR 0 5
68369: PUSH
68370: EMPTY
68371: ST_TO_ADDR
// if not array then
68372: LD_VAR 0 1
68376: NOT
68377: IFFALSE 68381
// exit ;
68379: GO 68493
// for i := 1 to array do
68381: LD_ADDR_VAR 0 6
68385: PUSH
68386: DOUBLE
68387: LD_INT 1
68389: DEC
68390: ST_TO_ADDR
68391: LD_VAR 0 1
68395: PUSH
68396: FOR_TO
68397: IFFALSE 68491
// if array [ i ] [ index ] = value then
68399: LD_VAR 0 1
68403: PUSH
68404: LD_VAR 0 6
68408: ARRAY
68409: PUSH
68410: LD_VAR 0 2
68414: ARRAY
68415: PUSH
68416: LD_VAR 0 3
68420: EQUAL
68421: IFFALSE 68489
// begin if indexColumn then
68423: LD_VAR 0 4
68427: IFFALSE 68463
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68429: LD_ADDR_VAR 0 5
68433: PUSH
68434: LD_VAR 0 5
68438: PPUSH
68439: LD_VAR 0 1
68443: PUSH
68444: LD_VAR 0 6
68448: ARRAY
68449: PUSH
68450: LD_VAR 0 4
68454: ARRAY
68455: PPUSH
68456: CALL 63681 0 2
68460: ST_TO_ADDR
68461: GO 68489
// result := Join ( result , array [ i ] ) ;
68463: LD_ADDR_VAR 0 5
68467: PUSH
68468: LD_VAR 0 5
68472: PPUSH
68473: LD_VAR 0 1
68477: PUSH
68478: LD_VAR 0 6
68482: ARRAY
68483: PPUSH
68484: CALL 63681 0 2
68488: ST_TO_ADDR
// end ;
68489: GO 68396
68491: POP
68492: POP
// end ;
68493: LD_VAR 0 5
68497: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68498: LD_INT 0
68500: PPUSH
// if not vehicles or not parkingPoint then
68501: LD_VAR 0 1
68505: NOT
68506: PUSH
68507: LD_VAR 0 2
68511: NOT
68512: OR
68513: IFFALSE 68517
// exit ;
68515: GO 68615
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68517: LD_ADDR_VAR 0 1
68521: PUSH
68522: LD_VAR 0 1
68526: PPUSH
68527: LD_INT 50
68529: PUSH
68530: EMPTY
68531: LIST
68532: PUSH
68533: LD_INT 3
68535: PUSH
68536: LD_INT 92
68538: PUSH
68539: LD_VAR 0 2
68543: PUSH
68544: LD_INT 1
68546: ARRAY
68547: PUSH
68548: LD_VAR 0 2
68552: PUSH
68553: LD_INT 2
68555: ARRAY
68556: PUSH
68557: LD_INT 8
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PPUSH
68574: CALL_OW 72
68578: ST_TO_ADDR
// if not vehicles then
68579: LD_VAR 0 1
68583: NOT
68584: IFFALSE 68588
// exit ;
68586: GO 68615
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68588: LD_VAR 0 1
68592: PPUSH
68593: LD_VAR 0 2
68597: PUSH
68598: LD_INT 1
68600: ARRAY
68601: PPUSH
68602: LD_VAR 0 2
68606: PUSH
68607: LD_INT 2
68609: ARRAY
68610: PPUSH
68611: CALL_OW 111
// end ;
68615: LD_VAR 0 3
68619: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68620: LD_INT 0
68622: PPUSH
68623: PPUSH
68624: PPUSH
// if not side or not area then
68625: LD_VAR 0 1
68629: NOT
68630: PUSH
68631: LD_VAR 0 2
68635: NOT
68636: OR
68637: IFFALSE 68641
// exit ;
68639: GO 68760
// tmp := AreaToList ( area , 0 ) ;
68641: LD_ADDR_VAR 0 5
68645: PUSH
68646: LD_VAR 0 2
68650: PPUSH
68651: LD_INT 0
68653: PPUSH
68654: CALL_OW 517
68658: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68659: LD_ADDR_VAR 0 4
68663: PUSH
68664: DOUBLE
68665: LD_INT 1
68667: DEC
68668: ST_TO_ADDR
68669: LD_VAR 0 5
68673: PUSH
68674: LD_INT 1
68676: ARRAY
68677: PUSH
68678: FOR_TO
68679: IFFALSE 68758
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
68681: LD_VAR 0 5
68685: PUSH
68686: LD_INT 1
68688: ARRAY
68689: PUSH
68690: LD_VAR 0 4
68694: ARRAY
68695: PPUSH
68696: LD_VAR 0 5
68700: PUSH
68701: LD_INT 2
68703: ARRAY
68704: PUSH
68705: LD_VAR 0 4
68709: ARRAY
68710: PPUSH
68711: CALL_OW 351
68715: IFFALSE 68756
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68717: LD_VAR 0 5
68721: PUSH
68722: LD_INT 1
68724: ARRAY
68725: PUSH
68726: LD_VAR 0 4
68730: ARRAY
68731: PPUSH
68732: LD_VAR 0 5
68736: PUSH
68737: LD_INT 2
68739: ARRAY
68740: PUSH
68741: LD_VAR 0 4
68745: ARRAY
68746: PPUSH
68747: LD_VAR 0 1
68751: PPUSH
68752: CALL_OW 244
// end ;
68756: GO 68678
68758: POP
68759: POP
// end ; end_of_file
68760: LD_VAR 0 3
68764: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_VAR 0 2
68774: PPUSH
68775: LD_VAR 0 3
68779: PPUSH
68780: LD_VAR 0 4
68784: PPUSH
68785: LD_VAR 0 5
68789: PPUSH
68790: LD_VAR 0 6
68794: PPUSH
68795: CALL 4727 0 6
// end ;
68799: PPOPN 6
68801: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68802: LD_INT 0
68804: PPUSH
// begin if not units then
68805: LD_VAR 0 1
68809: NOT
68810: IFFALSE 68814
// exit ;
68812: GO 68814
// end ;
68814: PPOPN 7
68816: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68817: CALL 4614 0 0
// end ;
68821: PPOPN 1
68823: END
