// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3347 0 0
// Action ;
  28: CALL 102 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// end ; end_of_file
  97: LD_VAR 0 1
 101: RET
// export function Action ; var i , un ; begin
 102: LD_INT 0
 104: PPUSH
 105: PPUSH
 106: PPUSH
// InGameOn ;
 107: CALL_OW 8
// PrepareKurtGroup ;
 111: CALL 3194 0 0
// PrepareSheikGroup ;
 115: CALL 2832 0 0
// specGroup := [ ] ;
 119: LD_ADDR_EXP 16
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// for i := 1 to 3 do
 126: LD_ADDR_VAR 0 2
 130: PUSH
 131: DOUBLE
 132: LD_INT 1
 134: DEC
 135: ST_TO_ADDR
 136: LD_INT 3
 138: PUSH
 139: FOR_TO
 140: IFFALSE 258
// begin uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := 2 ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 158: LD_INT 0
 160: PPUSH
 161: LD_INT 1
 163: PPUSH
 164: LD_INT 3
 166: PPUSH
 167: CALL_OW 380
// un := CreateHuman ;
 171: LD_ADDR_VAR 0 3
 175: PUSH
 176: CALL_OW 44
 180: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 181: LD_VAR 0 3
 185: PPUSH
 186: LD_INT 3
 188: PPUSH
 189: LD_INT 0
 191: PPUSH
 192: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 196: LD_ADDR_EXP 16
 200: PUSH
 201: LD_EXP 16
 205: PPUSH
 206: LD_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PLUS
 214: PPUSH
 215: LD_VAR 0 3
 219: PPUSH
 220: CALL_OW 1
 224: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_INT 92
 232: PPUSH
 233: LD_INT 66
 235: PPUSH
 236: CALL_OW 111
// AddComHold ( un ) ;
 240: LD_VAR 0 3
 244: PPUSH
 245: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 249: LD_INT 18
 251: PPUSH
 252: CALL_OW 67
// end ;
 256: GO 139
 258: POP
 259: POP
// PrepareHeikeGroup ;
 260: CALL 2744 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 264: LD_INT 51
 266: PPUSH
 267: LD_INT 85
 269: PPUSH
 270: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 274: LD_INT 1
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 5
 282: PPUSH
 283: LD_INT 32763
 285: NEG
 286: PPUSH
 287: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 304: LD_EXP 1
 308: PPUSH
 309: LD_INT 50
 311: PPUSH
 312: LD_INT 86
 314: PPUSH
 315: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 319: LD_EXP 5
 323: PPUSH
 324: LD_INT 51
 326: PPUSH
 327: LD_INT 90
 329: PPUSH
 330: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_EXP 5
 343: PPUSH
 344: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 348: LD_EXP 5
 352: PPUSH
 353: LD_EXP 1
 357: PPUSH
 358: CALL_OW 179
// wait ( 0 0$3 ) ;
 362: LD_INT 105
 364: PPUSH
 365: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 369: LD_EXP 5
 373: PPUSH
 374: LD_STRING DK-1
 376: PPUSH
 377: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING DH-1
 388: PPUSH
 389: CALL_OW 88
// wait ( 0 0$2 ) ;
 393: LD_INT 70
 395: PPUSH
 396: CALL_OW 67
// PrepareArabian ;
 400: CALL 3595 0 0
// InGameOff ;
 404: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 408: LD_STRING O1
 410: PPUSH
 411: CALL_OW 337
// goWithHeike := true ;
 415: LD_ADDR_EXP 18
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// SaveForQuickRestart ;
 423: CALL_OW 22
// end ;
 427: LD_VAR 0 1
 431: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 432: LD_INT 2
 434: PPUSH
 435: LD_INT 5
 437: PPUSH
 438: CALL_OW 81
 442: PUSH
 443: LD_INT 2
 445: EQUAL
 446: IFFALSE 592
 448: GO 450
 450: DISABLE
 451: LD_INT 0
 453: PPUSH
// begin goWithHeike := false ;
 454: LD_ADDR_EXP 18
 458: PUSH
 459: LD_INT 0
 461: ST_TO_ADDR
// DialogueOn ;
 462: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 466: LD_EXP 1
 470: PPUSH
 471: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 475: LD_EXP 5
 479: PPUSH
 480: LD_STRING DK-betray-1
 482: PPUSH
 483: CALL_OW 88
// DialogueOff ;
 487: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 491: LD_EXP 5
 495: PPUSH
 496: LD_INT 90
 498: PPUSH
 499: LD_INT 46
 501: PPUSH
 502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 506: LD_INT 35
 508: PPUSH
 509: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 513: LD_ADDR_VAR 0 1
 517: PUSH
 518: LD_INT 22
 520: PUSH
 521: LD_INT 5
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 25
 530: PUSH
 531: LD_INT 1
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PPUSH
 542: CALL_OW 69
 546: PUSH
 547: LD_EXP 5
 551: DIFF
 552: PUSH
 553: FOR_IN
 554: IFFALSE 572
// ComAttackUnit ( i , Heike ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_EXP 1
 565: PPUSH
 566: CALL_OW 115
 570: GO 553
 572: POP
 573: POP
// until IsDead ( Heike ) ;
 574: LD_EXP 1
 578: PPUSH
 579: CALL_OW 301
 583: IFFALSE 506
// YouLost ( Betray ) ;
 585: LD_STRING Betray
 587: PPUSH
 588: CALL_OW 104
// end ;
 592: PPOPN 1
 594: END
// every 0 0$1 trigger goWithHeike do
 595: LD_EXP 18
 599: IFFALSE 654
 601: GO 603
 603: DISABLE
// begin enable ;
 604: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 605: LD_EXP 1
 609: PPUSH
 610: LD_EXP 5
 614: PPUSH
 615: CALL_OW 296
 619: PUSH
 620: LD_INT 3
 622: GREATER
 623: IFFALSE 654
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 625: LD_EXP 5
 629: PPUSH
 630: LD_EXP 1
 634: PPUSH
 635: CALL_OW 250
 639: PPUSH
 640: LD_EXP 1
 644: PPUSH
 645: CALL_OW 251
 649: PPUSH
 650: CALL_OW 111
// end ;
 654: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 655: LD_INT 2
 657: PPUSH
 658: LD_INT 47
 660: PPUSH
 661: LD_INT 68
 663: PPUSH
 664: CALL_OW 293
 668: PUSH
 669: LD_EXP 19
 673: NOT
 674: AND
 675: IFFALSE 736
 677: GO 679
 679: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 680: LD_EXP 1
 684: PPUSH
 685: LD_STRING DH-spot-1
 687: PPUSH
 688: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 692: LD_INT 47
 694: PPUSH
 695: LD_INT 68
 697: PPUSH
 698: CALL_OW 428
 702: PPUSH
 703: CALL_OW 313
 707: PUSH
 708: LD_INT 1
 710: ARRAY
 711: PPUSH
 712: LD_STRING DRa-spot-1
 714: PPUSH
 715: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 719: LD_INT 90
 721: PPUSH
 722: LD_INT 41
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 6
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 93
 742: PPUSH
 743: LD_INT 89
 745: PPUSH
 746: CALL_OW 293
 750: PUSH
 751: LD_EXP 19
 755: NOT
 756: AND
 757: IFFALSE 818
 759: GO 761
 761: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 762: LD_EXP 1
 766: PPUSH
 767: LD_STRING DH-spot-1
 769: PPUSH
 770: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 774: LD_INT 93
 776: PPUSH
 777: LD_INT 89
 779: PPUSH
 780: CALL_OW 428
 784: PPUSH
 785: CALL_OW 313
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PPUSH
 794: LD_STRING DRa-spot-2
 796: PPUSH
 797: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 801: LD_INT 90
 803: PPUSH
 804: LD_INT 41
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 6
 812: NEG
 813: PPUSH
 814: CALL_OW 330
// end ;
 818: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 819: LD_EXP 21
 823: PUSH
 824: LD_EXP 14
 828: PPUSH
 829: LD_INT 101
 831: PUSH
 832: LD_INT 2
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PPUSH
 839: CALL_OW 72
 843: AND
 844: IFFALSE 1168
 846: GO 848
 848: DISABLE
 849: LD_INT 0
 851: PPUSH
 852: PPUSH
 853: PPUSH
 854: PPUSH
 855: PPUSH
// begin enable ;
 856: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 857: LD_ADDR_VAR 0 1
 861: PUSH
 862: LD_EXP 14
 866: PPUSH
 867: LD_INT 101
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 72
 881: ST_TO_ADDR
// if not tmp then
 882: LD_VAR 0 1
 886: NOT
 887: IFFALSE 891
// exit ;
 889: GO 1168
// InGameOn ;
 891: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 895: LD_EXP 1
 899: PUSH
 900: LD_EXP 5
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PPUSH
 909: LD_VAR 0 1
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 922: LD_VAR 0 1
 926: PUSH
 927: LD_INT 1
 929: ARRAY
 930: PPUSH
 931: LD_EXP 1
 935: PPUSH
 936: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 940: LD_VAR 0 1
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: LD_STRING DG-meeting-1
 951: PPUSH
 952: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 956: LD_ADDR_VAR 0 3
 960: PUSH
 961: LD_INT 81
 963: PUSH
 964: LD_INT 10
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 63
 973: PUSH
 974: LD_INT 25
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 108
 983: PUSH
 984: LD_INT 73
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 996: LD_ADDR_VAR 0 4
1000: PUSH
1001: LD_INT 9999
1003: PUSH
1004: EMPTY
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// for i := 1 to 3 do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: DOUBLE
1016: LD_INT 1
1018: DEC
1019: ST_TO_ADDR
1020: LD_INT 3
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1108
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1026: LD_ADDR_VAR 0 5
1030: PUSH
1031: LD_EXP 1
1035: PPUSH
1036: LD_VAR 0 3
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: LD_VAR 0 3
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: PUSH
1062: LD_INT 2
1064: ARRAY
1065: PPUSH
1066: CALL_OW 297
1070: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1071: LD_VAR 0 4
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PUSH
1080: LD_VAR 0 5
1084: GREATER
1085: IFFALSE 1106
// dist := [ tdist , i ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_VAR 0 5
1096: PUSH
1097: LD_VAR 0 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ;
1106: GO 1023
1108: POP
1109: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1110: LD_EXP 1
1114: PPUSH
1115: LD_VAR 0 3
1119: PUSH
1120: LD_VAR 0 4
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: ARRAY
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 2
1146: ARRAY
1147: ARRAY
1148: PUSH
1149: LD_INT 2
1151: ARRAY
1152: PPUSH
1153: CALL_OW 111
// wait ( 0 0$3 ) ;
1157: LD_INT 105
1159: PPUSH
1160: CALL_OW 67
// InGameOff ;
1164: CALL_OW 9
// end ;
1168: PPOPN 5
1170: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1171: LD_EXP 1
1175: PPUSH
1176: LD_INT 14
1178: PPUSH
1179: CALL_OW 296
1183: PUSH
1184: LD_INT 40
1186: GREATER
1187: PUSH
1188: LD_EXP 1
1192: PPUSH
1193: CALL_OW 316
1197: AND
1198: IFFALSE 1215
1200: GO 1202
1202: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_STRING DK-idle-1
1210: PPUSH
1211: CALL_OW 88
// end ;
1215: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1216: LD_INT 2
1218: PPUSH
1219: LD_INT 59
1221: PPUSH
1222: LD_INT 47
1224: PPUSH
1225: CALL_OW 293
1229: IFFALSE 1386
1231: GO 1233
1233: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1234: LD_INT 59
1236: PPUSH
1237: LD_INT 47
1239: PPUSH
1240: LD_INT 2
1242: PPUSH
1243: LD_INT 10
1245: NEG
1246: PPUSH
1247: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1251: LD_INT 59
1253: PPUSH
1254: LD_INT 47
1256: PPUSH
1257: CALL_OW 86
// goWithHeike := false ;
1261: LD_ADDR_EXP 18
1265: PUSH
1266: LD_INT 0
1268: ST_TO_ADDR
// baseSpotted := true ;
1269: LD_ADDR_EXP 19
1273: PUSH
1274: LD_INT 1
1276: ST_TO_ADDR
// InGameOn ;
1277: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1281: LD_EXP 1
1285: PUSH
1286: LD_EXP 5
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PPUSH
1295: LD_INT 54
1297: PPUSH
1298: LD_INT 45
1300: PPUSH
1301: CALL_OW 111
// wait ( 0 0$1 ) ;
1305: LD_INT 35
1307: PPUSH
1308: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1312: LD_EXP 1
1316: PUSH
1317: LD_EXP 5
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PPUSH
1326: LD_INT 59
1328: PPUSH
1329: LD_INT 47
1331: PPUSH
1332: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1336: LD_EXP 1
1340: PPUSH
1341: LD_STRING DH-base-1
1343: PPUSH
1344: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1348: LD_EXP 5
1352: PPUSH
1353: LD_STRING DK-base-1
1355: PPUSH
1356: CALL_OW 88
// InGameOff ;
1360: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1364: LD_ADDR_EXP 17
1368: PUSH
1369: LD_EXP 17
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: ST_TO_ADDR
// goWithHeike := true ;
1378: LD_ADDR_EXP 18
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// end ;
1386: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 , p ;
1387: LD_INT 2
1389: PPUSH
1390: LD_EXP 8
1394: PPUSH
1395: CALL_OW 292
1399: IFFALSE 2741
1401: GO 1403
1403: DISABLE
1404: LD_INT 0
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
// begin meetingActive := false ;
1410: LD_ADDR_EXP 21
1414: PUSH
1415: LD_INT 0
1417: ST_TO_ADDR
// goWithHeike := false ;
1418: LD_ADDR_EXP 18
1422: PUSH
1423: LD_INT 0
1425: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_INT 6
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 517
1441: ST_TO_ADDR
// for i := 1 to 4 do
1442: LD_ADDR_VAR 0 1
1446: PUSH
1447: DOUBLE
1448: LD_INT 1
1450: DEC
1451: ST_TO_ADDR
1452: LD_INT 4
1454: PUSH
1455: FOR_TO
1456: IFFALSE 1523
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1458: LD_EXP 15
1462: PUSH
1463: LD_VAR 0 1
1467: ARRAY
1468: PPUSH
1469: LD_VAR 0 2
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PUSH
1478: LD_VAR 0 1
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 2
1488: PUSH
1489: LD_INT 2
1491: ARRAY
1492: PUSH
1493: LD_VAR 0 1
1497: ARRAY
1498: PPUSH
1499: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1503: LD_EXP 15
1507: PUSH
1508: LD_VAR 0 1
1512: ARRAY
1513: PPUSH
1514: LD_INT 14
1516: PPUSH
1517: CALL_OW 179
// end ;
1521: GO 1455
1523: POP
1524: POP
// InGameOn ;
1525: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1529: LD_EXP 8
1533: PPUSH
1534: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1538: LD_EXP 1
1542: PPUSH
1543: LD_EXP 8
1547: PPUSH
1548: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1552: LD_EXP 5
1556: PPUSH
1557: LD_EXP 1
1561: PPUSH
1562: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1566: LD_INT 10
1568: PPUSH
1569: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1573: LD_EXP 1
1577: PPUSH
1578: LD_EXP 8
1582: PPUSH
1583: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1587: LD_EXP 5
1591: PPUSH
1592: LD_EXP 1
1596: PPUSH
1597: CALL_OW 250
1601: PPUSH
1602: LD_INT 5
1604: PPUSH
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 272
1612: PPUSH
1613: LD_EXP 1
1617: PPUSH
1618: CALL_OW 251
1622: PPUSH
1623: LD_INT 5
1625: PPUSH
1626: LD_INT 1
1628: PPUSH
1629: CALL_OW 273
1633: PPUSH
1634: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1638: LD_EXP 1
1642: PPUSH
1643: LD_EXP 8
1647: PPUSH
1648: CALL_OW 296
1652: PUSH
1653: LD_INT 5
1655: LESS
1656: PUSH
1657: LD_EXP 5
1661: PPUSH
1662: LD_EXP 8
1666: PPUSH
1667: CALL_OW 296
1671: PUSH
1672: LD_INT 6
1674: LESS
1675: AND
1676: IFFALSE 1566
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1678: LD_EXP 1
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: LD_EXP 8
1696: PPUSH
1697: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1701: LD_EXP 8
1705: PUSH
1706: LD_EXP 4
1710: PUSH
1711: LD_EXP 9
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PPUSH
1721: LD_EXP 1
1725: PPUSH
1726: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1730: LD_INT 7
1732: PPUSH
1733: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1737: LD_EXP 8
1741: PPUSH
1742: LD_STRING DKu-Kurt-1
1744: PPUSH
1745: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1749: LD_EXP 5
1753: PPUSH
1754: LD_STRING DK-Kurt-1
1756: PPUSH
1757: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1761: LD_EXP 8
1765: PPUSH
1766: LD_STRING DKu-Kurt-2
1768: PPUSH
1769: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1773: LD_INT 7
1775: PPUSH
1776: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1780: LD_EXP 1
1784: PPUSH
1785: LD_STRING DH-Kurt-1
1787: PPUSH
1788: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1792: LD_EXP 8
1796: PPUSH
1797: LD_STRING DKu-Kurt-3
1799: PPUSH
1800: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING DK-Kurt-3
1811: PPUSH
1812: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1816: LD_EXP 9
1820: PPUSH
1821: LD_STRING DHa-Kurt-3
1823: PPUSH
1824: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1828: LD_EXP 4
1832: PPUSH
1833: LD_STRING DO-Kurt-3
1835: PPUSH
1836: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1840: LD_ADDR_VAR 0 3
1844: PUSH
1845: LD_EXP 8
1849: PUSH
1850: LD_EXP 4
1854: PUSH
1855: LD_EXP 9
1859: PUSH
1860: LD_EXP 5
1864: PUSH
1865: LD_EXP 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_EXP 16
1881: UNION
1882: ST_TO_ADDR
// for i = 1 to tmp2 do
1883: LD_ADDR_VAR 0 1
1887: PUSH
1888: DOUBLE
1889: LD_INT 1
1891: DEC
1892: ST_TO_ADDR
1893: LD_VAR 0 3
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1974
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1901: LD_VAR 0 3
1905: PUSH
1906: LD_VAR 0 1
1910: ARRAY
1911: PPUSH
1912: LD_VAR 0 2
1916: PUSH
1917: LD_INT 1
1919: ARRAY
1920: PUSH
1921: LD_VAR 0 1
1925: PUSH
1926: LD_INT 4
1928: PLUS
1929: ARRAY
1930: PPUSH
1931: LD_VAR 0 2
1935: PUSH
1936: LD_INT 2
1938: ARRAY
1939: PUSH
1940: LD_VAR 0 1
1944: PUSH
1945: LD_INT 4
1947: PLUS
1948: ARRAY
1949: PPUSH
1950: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1954: LD_VAR 0 3
1958: PUSH
1959: LD_VAR 0 1
1963: ARRAY
1964: PPUSH
1965: LD_INT 14
1967: PPUSH
1968: CALL_OW 179
// end ;
1972: GO 1898
1974: POP
1975: POP
// wait ( 0 0$2 ) ;
1976: LD_INT 70
1978: PPUSH
1979: CALL_OW 67
// CenterOnUnits ( eon ) ;
1983: LD_INT 14
1985: PPUSH
1986: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1990: LD_INT 90
1992: PPUSH
1993: LD_INT 43
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 21
2001: NEG
2002: PPUSH
2003: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2007: LD_EXP 2
2011: PPUSH
2012: LD_INT 84
2014: PPUSH
2015: LD_INT 36
2017: PPUSH
2018: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2022: LD_EXP 2
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2034: LD_EXP 11
2038: PPUSH
2039: LD_INT 85
2041: PPUSH
2042: LD_INT 36
2044: PPUSH
2045: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2049: LD_EXP 11
2053: PPUSH
2054: LD_INT 14
2056: PPUSH
2057: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2061: LD_EXP 10
2065: PPUSH
2066: LD_INT 86
2068: PPUSH
2069: LD_INT 36
2071: PPUSH
2072: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2076: LD_EXP 10
2080: PPUSH
2081: LD_INT 14
2083: PPUSH
2084: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2088: LD_EXP 7
2092: PPUSH
2093: LD_INT 87
2095: PPUSH
2096: LD_INT 36
2098: PPUSH
2099: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2103: LD_EXP 7
2107: PPUSH
2108: LD_INT 14
2110: PPUSH
2111: CALL_OW 179
// wait ( 0 0$3 ) ;
2115: LD_INT 105
2117: PPUSH
2118: CALL_OW 67
// p := 0 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 0
2129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2130: LD_INT 35
2132: PPUSH
2133: CALL_OW 67
// p := p + 1 ;
2137: LD_ADDR_VAR 0 4
2141: PUSH
2142: LD_VAR 0 4
2146: PUSH
2147: LD_INT 1
2149: PLUS
2150: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2151: LD_EXP 1
2155: PPUSH
2156: LD_INT 6
2158: PPUSH
2159: CALL_OW 308
2163: PUSH
2164: LD_VAR 0 4
2168: PUSH
2169: LD_INT 10
2171: GREATER
2172: OR
2173: IFFALSE 2130
// heikeNearbyEon := true ;
2175: LD_ADDR_EXP 20
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2183: LD_EXP 6
2187: PPUSH
2188: LD_INT 88
2190: PPUSH
2191: LD_INT 37
2193: PPUSH
2194: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2198: LD_EXP 6
2202: PPUSH
2203: LD_EXP 13
2207: PUSH
2208: LD_INT 1
2210: ARRAY
2211: PPUSH
2212: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2216: LD_EXP 13
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_INT 89
2227: PPUSH
2228: LD_INT 37
2230: PPUSH
2231: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2235: LD_EXP 13
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: PPUSH
2244: LD_INT 91
2246: PPUSH
2247: LD_INT 39
2249: PPUSH
2250: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2254: LD_EXP 13
2258: PPUSH
2259: LD_EXP 11
2263: PPUSH
2264: CALL_OW 179
// wait ( 0 0$1 ) ;
2268: LD_INT 35
2270: PPUSH
2271: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2275: LD_EXP 13
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_STRING DS-eon-1
2286: PPUSH
2287: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2291: LD_EXP 6
2295: PPUSH
2296: LD_STRING DSh-eon-1
2298: PPUSH
2299: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2303: LD_EXP 13
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: LD_STRING DS-eon-2
2314: PPUSH
2315: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2319: LD_EXP 6
2323: PPUSH
2324: LD_STRING DSh-eon-1a
2326: PPUSH
2327: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2331: LD_EXP 13
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_INT 92
2342: PPUSH
2343: LD_INT 43
2345: PPUSH
2346: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2350: LD_EXP 13
2354: PUSH
2355: LD_INT 1
2357: ARRAY
2358: PPUSH
2359: LD_INT 14
2361: PPUSH
2362: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2366: LD_EXP 13
2370: PUSH
2371: LD_INT 2
2373: ARRAY
2374: PPUSH
2375: LD_INT 93
2377: PPUSH
2378: LD_INT 41
2380: PPUSH
2381: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2385: LD_EXP 13
2389: PUSH
2390: LD_INT 2
2392: ARRAY
2393: PPUSH
2394: LD_INT 93
2396: PPUSH
2397: LD_INT 40
2399: PPUSH
2400: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2404: LD_EXP 6
2408: PPUSH
2409: LD_INT 88
2411: PPUSH
2412: LD_INT 41
2414: PPUSH
2415: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2419: LD_EXP 6
2423: PPUSH
2424: LD_INT 87
2426: PPUSH
2427: LD_INT 41
2429: PPUSH
2430: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2434: LD_INT 35
2436: PPUSH
2437: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2441: LD_EXP 6
2445: PPUSH
2446: LD_INT 88
2448: PPUSH
2449: LD_INT 41
2451: PPUSH
2452: CALL_OW 307
2456: IFFALSE 2434
// wait ( 0 0$1 ) ;
2458: LD_INT 35
2460: PPUSH
2461: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2465: LD_EXP 6
2469: PPUSH
2470: LD_STRING DSh-eon-2
2472: PPUSH
2473: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2477: LD_EXP 11
2481: PPUSH
2482: LD_INT 87
2484: PPUSH
2485: LD_INT 40
2487: PPUSH
2488: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2492: LD_EXP 11
2496: PPUSH
2497: LD_INT 86
2499: PPUSH
2500: LD_INT 40
2502: PPUSH
2503: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2507: LD_INT 35
2509: PPUSH
2510: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2514: LD_EXP 11
2518: PPUSH
2519: LD_INT 87
2521: PPUSH
2522: LD_INT 40
2524: PPUSH
2525: CALL_OW 307
2529: IFFALSE 2507
// Say ( Shariff , DShar-eon-3 ) ;
2531: LD_EXP 11
2535: PPUSH
2536: LD_STRING DShar-eon-3
2538: PPUSH
2539: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2543: LD_INT 10
2545: PPUSH
2546: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2550: LD_EXP 5
2554: PPUSH
2555: LD_EXP 1
2559: PPUSH
2560: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_STRING DShar-eon-4
2571: PPUSH
2572: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2576: LD_EXP 5
2580: PPUSH
2581: LD_STRING DK-eon-4
2583: PPUSH
2584: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2588: LD_EXP 5
2592: PPUSH
2593: LD_INT 14
2595: PPUSH
2596: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2600: LD_INT 35
2602: PPUSH
2603: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2607: LD_EXP 5
2611: PPUSH
2612: CALL_OW 305
2616: NOT
2617: IFFALSE 2600
// ComTurnUnit ( Shariff , Heike ) ;
2619: LD_EXP 11
2623: PPUSH
2624: LD_EXP 1
2628: PPUSH
2629: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2633: LD_EXP 11
2637: PPUSH
2638: LD_STRING DShar-eon-5
2640: PPUSH
2641: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2645: LD_EXP 1
2649: PPUSH
2650: LD_INT 91
2652: PPUSH
2653: LD_INT 44
2655: PPUSH
2656: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2660: LD_EXP 1
2664: PPUSH
2665: LD_INT 14
2667: PPUSH
2668: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2672: LD_INT 35
2674: PPUSH
2675: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2679: LD_EXP 1
2683: PPUSH
2684: LD_INT 91
2686: PPUSH
2687: LD_INT 44
2689: PPUSH
2690: CALL_OW 307
2694: IFFALSE 2672
// Say ( Heike , DH-eon-5 ) ;
2696: LD_EXP 1
2700: PPUSH
2701: LD_STRING DH-eon-5
2703: PPUSH
2704: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2708: LD_EXP 1
2712: PPUSH
2713: LD_INT 14
2715: PPUSH
2716: CALL_OW 120
// wait ( 0 0$2 ) ;
2720: LD_INT 70
2722: PPUSH
2723: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2727: LD_INT 1
2729: PPUSH
2730: LD_STRING %_cont
2732: PPUSH
2733: CALL_OW 340
// InGameOff ;
2737: CALL_OW 9
// end ; end_of_file
2741: PPOPN 4
2743: END
// export function PrepareHeikeGroup ; begin
2744: LD_INT 0
2746: PPUSH
// uc_side := 2 ;
2747: LD_ADDR_OWVAR 20
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// uc_nation := 2 ;
2755: LD_ADDR_OWVAR 21
2759: PUSH
2760: LD_INT 2
2762: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2763: LD_ADDR_EXP 1
2767: PUSH
2768: LD_STRING Heike
2770: PPUSH
2771: CALL_OW 25
2775: ST_TO_ADDR
// uc_side := 5 ;
2776: LD_ADDR_OWVAR 20
2780: PUSH
2781: LD_INT 5
2783: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2784: LD_ADDR_EXP 5
2788: PUSH
2789: LD_STRING Kaia
2791: PPUSH
2792: CALL_OW 25
2796: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2797: LD_EXP 1
2801: PPUSH
2802: LD_INT 3
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2812: LD_EXP 5
2816: PPUSH
2817: LD_INT 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL_OW 49
// end ;
2827: LD_VAR 0 1
2831: RET
// export function PrepareSheikGroup ; var un , i ; begin
2832: LD_INT 0
2834: PPUSH
2835: PPUSH
2836: PPUSH
// uc_side := 5 ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_INT 5
2844: ST_TO_ADDR
// uc_nation := 2 ;
2845: LD_ADDR_OWVAR 21
2849: PUSH
2850: LD_INT 2
2852: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2853: LD_ADDR_EXP 10
2857: PUSH
2858: LD_STRING Ali
2860: PPUSH
2861: CALL_OW 25
2865: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2866: LD_ADDR_EXP 11
2870: PUSH
2871: LD_STRING Abdul
2873: PPUSH
2874: CALL_OW 25
2878: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2879: LD_ADDR_EXP 2
2883: PUSH
2884: LD_STRING Omar
2886: PPUSH
2887: CALL_OW 25
2891: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2892: LD_ADDR_EXP 7
2896: PUSH
2897: LD_STRING Mahtab
2899: PPUSH
2900: CALL_OW 25
2904: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2905: LD_ADDR_EXP 6
2909: PUSH
2910: LD_STRING Shahrzad
2912: PPUSH
2913: CALL_OW 25
2917: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2918: LD_EXP 10
2922: PPUSH
2923: LD_INT 85
2925: PPUSH
2926: LD_INT 37
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2936: LD_EXP 11
2940: PPUSH
2941: LD_INT 87
2943: PPUSH
2944: LD_INT 37
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2954: LD_EXP 2
2958: PPUSH
2959: LD_INT 85
2961: PPUSH
2962: LD_INT 35
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2972: LD_EXP 7
2976: PPUSH
2977: LD_INT 86
2979: PPUSH
2980: LD_INT 39
2982: PPUSH
2983: LD_INT 0
2985: PPUSH
2986: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2990: LD_EXP 6
2994: PPUSH
2995: LD_INT 88
2997: PPUSH
2998: LD_INT 39
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3008: LD_EXP 10
3012: PPUSH
3013: LD_EXP 11
3017: PPUSH
3018: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3022: LD_EXP 11
3026: PPUSH
3027: LD_EXP 10
3031: PPUSH
3032: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_EXP 11
3045: PPUSH
3046: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3050: LD_EXP 7
3054: PUSH
3055: LD_EXP 6
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: LD_EXP 11
3068: PPUSH
3069: CALL_OW 119
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3173
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3089: LD_INT 2
3091: PPUSH
3092: LD_INT 4
3094: PPUSH
3095: LD_INT 6
3097: PPUSH
3098: CALL_OW 380
// un := CreateHuman ;
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: CALL_OW 44
3111: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3112: LD_VAR 0 2
3116: PPUSH
3117: LD_INT 90
3119: PPUSH
3120: LD_INT 44
3122: PPUSH
3123: LD_INT 3
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 91
3140: PPUSH
3141: LD_INT 43
3143: PPUSH
3144: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3148: LD_ADDR_EXP 13
3152: PUSH
3153: LD_EXP 13
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_VAR 0 2
3165: PPUSH
3166: CALL_OW 2
3170: ST_TO_ADDR
// end ;
3171: GO 3086
3173: POP
3174: POP
// scientists := scientists diff 0 ;
3175: LD_ADDR_EXP 13
3179: PUSH
3180: LD_EXP 13
3184: PUSH
3185: LD_INT 0
3187: DIFF
3188: ST_TO_ADDR
// end ;
3189: LD_VAR 0 1
3193: RET
// export function PrepareKurtGroup ; var i ; begin
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
// uc_side := 5 ;
3198: LD_ADDR_OWVAR 20
3202: PUSH
3203: LD_INT 5
3205: ST_TO_ADDR
// uc_nation := 2 ;
3206: LD_ADDR_OWVAR 21
3210: PUSH
3211: LD_INT 2
3213: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3214: LD_ADDR_EXP 8
3218: PUSH
3219: LD_STRING Kurt
3221: PPUSH
3222: CALL_OW 25
3226: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3227: LD_ADDR_EXP 4
3231: PUSH
3232: LD_STRING Olaf
3234: PPUSH
3235: CALL_OW 25
3239: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3240: LD_ADDR_EXP 9
3244: PUSH
3245: LD_STRING Hans
3247: PPUSH
3248: CALL_OW 25
3252: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3253: LD_ADDR_VAR 0 2
3257: PUSH
3258: LD_EXP 8
3262: PUSH
3263: LD_EXP 9
3267: PUSH
3268: LD_EXP 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3298
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_INT 10
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
3296: GO 3278
3298: POP
3299: POP
// ComTurnUnit ( Kurt , Hans ) ;
3300: LD_EXP 8
3304: PPUSH
3305: LD_EXP 9
3309: PPUSH
3310: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3314: LD_EXP 4
3318: PPUSH
3319: LD_EXP 9
3323: PPUSH
3324: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3328: LD_EXP 9
3332: PPUSH
3333: LD_EXP 4
3337: PPUSH
3338: CALL_OW 119
// end ;
3342: LD_VAR 0 1
3346: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3347: LD_INT 0
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 3
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 14
3375: DIFF
3376: PUSH
3377: FOR_IN
3378: IFFALSE 3458
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3380: LD_VAR 0 2
3384: PPUSH
3385: CALL_OW 266
3389: PUSH
3390: LD_INT 6
3392: PUSH
3393: LD_INT 31
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: IN
3400: IFFALSE 3424
// SetLives ( i , rand ( 500 , 600 ) ) else
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_INT 500
3409: PPUSH
3410: LD_INT 600
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 234
3422: GO 3444
// SetLives ( i , rand ( 300 , 499 ) ) ;
3424: LD_VAR 0 2
3428: PPUSH
3429: LD_INT 300
3431: PPUSH
3432: LD_INT 499
3434: PPUSH
3435: CALL_OW 12
3439: PPUSH
3440: CALL_OW 234
// SetSide ( i , 5 ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: CALL_OW 235
// end ;
3456: GO 3377
3458: POP
3459: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3460: LD_ADDR_VAR 0 4
3464: PUSH
3465: LD_INT 9
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 517
3475: ST_TO_ADDR
// uc_side := 4 ;
3476: LD_ADDR_OWVAR 20
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// uc_nation := 1 ;
3484: LD_ADDR_OWVAR 21
3488: PUSH
3489: LD_INT 1
3491: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_VAR 0 4
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PUSH
3511: FOR_TO
3512: IFFALSE 3588
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 4
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_VAR 0 2
3535: PUSH
3536: LD_INT 3
3538: MOD
3539: PUSH
3540: LD_INT 1
3542: PLUS
3543: ARRAY
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 380
// un := CreateHuman ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: CALL_OW 44
3561: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3562: LD_VAR 0 3
3566: PPUSH
3567: LD_INT 9
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: CALL_OW 49
// KillUnit ( un ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: CALL_OW 66
// end ;
3586: GO 3511
3588: POP
3589: POP
// end ;
3590: LD_VAR 0 1
3594: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3595: LD_INT 0
3597: PPUSH
3598: PPUSH
3599: PPUSH
3600: PPUSH
3601: PPUSH
3602: PPUSH
3603: PPUSH
// uc_side := 5 ;
3604: LD_ADDR_OWVAR 20
3608: PUSH
3609: LD_INT 5
3611: ST_TO_ADDR
// uc_nation := 2 ;
3612: LD_ADDR_OWVAR 21
3616: PUSH
3617: LD_INT 2
3619: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3620: LD_ADDR_VAR 0 6
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 14
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: ST_TO_ADDR
// InitHc ;
3643: CALL_OW 19
// for i in area do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: LD_VAR 0 6
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3822
// begin tmp := AreaToList ( i , 0 ) ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 2
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL_OW 517
3677: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 5
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3818
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3700: LD_INT 1
3702: PPUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 3
3708: PPUSH
3709: CALL_OW 380
// un := CreateHuman ;
3713: LD_ADDR_VAR 0 7
3717: PUSH
3718: CALL_OW 44
3722: ST_TO_ADDR
// if i = spawnBaseArea3 then
3723: LD_VAR 0 2
3727: PUSH
3728: LD_INT 5
3730: EQUAL
3731: IFFALSE 3749
// eonGuards := eonGuards ^ un ;
3733: LD_ADDR_EXP 14
3737: PUSH
3738: LD_EXP 14
3742: PUSH
3743: LD_VAR 0 7
3747: ADD
3748: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3749: LD_VAR 0 7
3753: PPUSH
3754: LD_VAR 0 2
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// ComHold ( un ) ;
3766: LD_VAR 0 7
3770: PPUSH
3771: CALL_OW 140
// if i = spawnBaseArea4 then
3775: LD_VAR 0 2
3779: PUSH
3780: LD_INT 14
3782: EQUAL
3783: IFFALSE 3816
// begin firstGroup := firstGroup ^ un ;
3785: LD_ADDR_EXP 15
3789: PUSH
3790: LD_EXP 15
3794: PUSH
3795: LD_VAR 0 7
3799: ADD
3800: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3801: LD_VAR 0 7
3805: PPUSH
3806: LD_INT 108
3808: PPUSH
3809: LD_INT 47
3811: PPUSH
3812: CALL_OW 118
// end ; end ;
3816: GO 3697
3818: POP
3819: POP
// end ;
3820: GO 3657
3822: POP
3823: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: DOUBLE
3830: LD_INT 1
3832: DEC
3833: ST_TO_ADDR
3834: LD_INT 30
3836: PUSH
3837: LD_INT 31
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 69
3848: PUSH
3849: FOR_TO
3850: IFFALSE 3944
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3852: LD_ADDR_VAR 0 4
3856: PUSH
3857: LD_INT 30
3859: PUSH
3860: LD_INT 31
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: CALL_OW 69
3871: PUSH
3872: LD_VAR 0 2
3876: ARRAY
3877: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 3
3886: PPUSH
3887: CALL_OW 380
// un := CreateHuman ;
3891: LD_ADDR_VAR 0 7
3895: PUSH
3896: CALL_OW 44
3900: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3901: LD_VAR 0 7
3905: PPUSH
3906: LD_VAR 0 4
3910: PPUSH
3911: CALL_OW 254
3915: PUSH
3916: LD_INT 3
3918: PLUS
3919: PUSH
3920: LD_INT 6
3922: MOD
3923: PPUSH
3924: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3928: LD_VAR 0 7
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: CALL_OW 52
// end ;
3942: GO 3849
3944: POP
3945: POP
// end ; end_of_file
3946: LD_VAR 0 1
3950: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3951: LD_VAR 0 1
3955: PUSH
3956: LD_INT 2
3958: EQUAL
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 5
3967: EQUAL
3968: AND
3969: IFFALSE 3987
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3971: LD_INT 2
3973: PPUSH
3974: LD_INT 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: CALL_OW 80
// end ;
3987: PPOPN 2
3989: END
// every 0 0$1 trigger scientists do var i ;
3990: LD_EXP 13
3994: IFFALSE 4202
3996: GO 3998
3998: DISABLE
3999: LD_INT 0
4001: PPUSH
// begin repeat for i in scientists do
4002: LD_ADDR_VAR 0 1
4006: PUSH
4007: LD_EXP 13
4011: PUSH
4012: FOR_IN
4013: IFFALSE 4187
// begin wait ( 0 0$1 ) ;
4015: LD_INT 35
4017: PPUSH
4018: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4022: LD_VAR 0 1
4026: PPUSH
4027: LD_INT 11
4029: PUSH
4030: LD_INT 13
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_VAR 0 1
4041: PUSH
4042: LD_INT 2
4044: MOD
4045: PUSH
4046: LD_INT 1
4048: PLUS
4049: ARRAY
4050: PPUSH
4051: CALL_OW 308
4055: NOT
4056: IFFALSE 4091
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4058: LD_VAR 0 1
4062: PPUSH
4063: LD_INT 11
4065: PUSH
4066: LD_INT 13
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_VAR 0 1
4077: PUSH
4078: LD_INT 2
4080: MOD
4081: PUSH
4082: LD_INT 1
4084: PLUS
4085: ARRAY
4086: PPUSH
4087: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4091: LD_VAR 0 1
4095: PPUSH
4096: LD_INT 14
4098: PPUSH
4099: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 70
4110: PPUSH
4111: CALL_OW 202
// if rand ( 0 , 1 ) then
4115: LD_INT 0
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL_OW 12
4125: IFFALSE 4139
// AddComAnim ( i , 15 ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_INT 15
4134: PPUSH
4135: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4139: LD_VAR 0 1
4143: PPUSH
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: LD_INT 93
4170: PPUSH
4171: LD_INT 40
4173: PPUSH
4174: CALL_OW 178
// wait ( 0 0$1 ) ;
4178: LD_INT 35
4180: PPUSH
4181: CALL_OW 67
// end ;
4185: GO 4012
4187: POP
4188: POP
// wait ( 0 0$10 ) ;
4189: LD_INT 350
4191: PPUSH
4192: CALL_OW 67
// until heikeNearbyEon ;
4196: LD_EXP 20
4200: IFFALSE 4002
// end ; end_of_file
4202: PPOPN 1
4204: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4205: GO 4207
4207: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4208: LD_STRING initStreamRollete();
4210: PPUSH
4211: CALL_OW 559
// InitStreamMode ;
4215: CALL 4224 0 0
// DefineStreamItems ( ) ;
4219: CALL 4664 0 0
// end ;
4223: END
// function InitStreamMode ; begin
4224: LD_INT 0
4226: PPUSH
// streamModeActive := false ;
4227: LD_ADDR_EXP 22
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// normalCounter := 36 ;
4235: LD_ADDR_EXP 23
4239: PUSH
4240: LD_INT 36
4242: ST_TO_ADDR
// hardcoreCounter := 16 ;
4243: LD_ADDR_EXP 24
4247: PUSH
4248: LD_INT 16
4250: ST_TO_ADDR
// sRocket := false ;
4251: LD_ADDR_EXP 27
4255: PUSH
4256: LD_INT 0
4258: ST_TO_ADDR
// sSpeed := false ;
4259: LD_ADDR_EXP 26
4263: PUSH
4264: LD_INT 0
4266: ST_TO_ADDR
// sEngine := false ;
4267: LD_ADDR_EXP 28
4271: PUSH
4272: LD_INT 0
4274: ST_TO_ADDR
// sSpec := false ;
4275: LD_ADDR_EXP 25
4279: PUSH
4280: LD_INT 0
4282: ST_TO_ADDR
// sLevel := false ;
4283: LD_ADDR_EXP 29
4287: PUSH
4288: LD_INT 0
4290: ST_TO_ADDR
// sArmoury := false ;
4291: LD_ADDR_EXP 30
4295: PUSH
4296: LD_INT 0
4298: ST_TO_ADDR
// sRadar := false ;
4299: LD_ADDR_EXP 31
4303: PUSH
4304: LD_INT 0
4306: ST_TO_ADDR
// sBunker := false ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_INT 0
4314: ST_TO_ADDR
// sHack := false ;
4315: LD_ADDR_EXP 33
4319: PUSH
4320: LD_INT 0
4322: ST_TO_ADDR
// sFire := false ;
4323: LD_ADDR_EXP 34
4327: PUSH
4328: LD_INT 0
4330: ST_TO_ADDR
// sRefresh := false ;
4331: LD_ADDR_EXP 35
4335: PUSH
4336: LD_INT 0
4338: ST_TO_ADDR
// sExp := false ;
4339: LD_ADDR_EXP 36
4343: PUSH
4344: LD_INT 0
4346: ST_TO_ADDR
// sDepot := false ;
4347: LD_ADDR_EXP 37
4351: PUSH
4352: LD_INT 0
4354: ST_TO_ADDR
// sFlag := false ;
4355: LD_ADDR_EXP 38
4359: PUSH
4360: LD_INT 0
4362: ST_TO_ADDR
// sKamikadze := false ;
4363: LD_ADDR_EXP 46
4367: PUSH
4368: LD_INT 0
4370: ST_TO_ADDR
// sTroll := false ;
4371: LD_ADDR_EXP 47
4375: PUSH
4376: LD_INT 0
4378: ST_TO_ADDR
// sSlow := false ;
4379: LD_ADDR_EXP 48
4383: PUSH
4384: LD_INT 0
4386: ST_TO_ADDR
// sLack := false ;
4387: LD_ADDR_EXP 49
4391: PUSH
4392: LD_INT 0
4394: ST_TO_ADDR
// sTank := false ;
4395: LD_ADDR_EXP 51
4399: PUSH
4400: LD_INT 0
4402: ST_TO_ADDR
// sRemote := false ;
4403: LD_ADDR_EXP 52
4407: PUSH
4408: LD_INT 0
4410: ST_TO_ADDR
// sPowell := false ;
4411: LD_ADDR_EXP 53
4415: PUSH
4416: LD_INT 0
4418: ST_TO_ADDR
// sTeleport := false ;
4419: LD_ADDR_EXP 56
4423: PUSH
4424: LD_INT 0
4426: ST_TO_ADDR
// sOilTower := false ;
4427: LD_ADDR_EXP 58
4431: PUSH
4432: LD_INT 0
4434: ST_TO_ADDR
// sShovel := false ;
4435: LD_ADDR_EXP 59
4439: PUSH
4440: LD_INT 0
4442: ST_TO_ADDR
// sSheik := false ;
4443: LD_ADDR_EXP 60
4447: PUSH
4448: LD_INT 0
4450: ST_TO_ADDR
// sEarthquake := false ;
4451: LD_ADDR_EXP 62
4455: PUSH
4456: LD_INT 0
4458: ST_TO_ADDR
// sAI := false ;
4459: LD_ADDR_EXP 63
4463: PUSH
4464: LD_INT 0
4466: ST_TO_ADDR
// sCargo := false ;
4467: LD_ADDR_EXP 66
4471: PUSH
4472: LD_INT 0
4474: ST_TO_ADDR
// sDLaser := false ;
4475: LD_ADDR_EXP 67
4479: PUSH
4480: LD_INT 0
4482: ST_TO_ADDR
// sExchange := false ;
4483: LD_ADDR_EXP 68
4487: PUSH
4488: LD_INT 0
4490: ST_TO_ADDR
// sFac := false ;
4491: LD_ADDR_EXP 69
4495: PUSH
4496: LD_INT 0
4498: ST_TO_ADDR
// sPower := false ;
4499: LD_ADDR_EXP 70
4503: PUSH
4504: LD_INT 0
4506: ST_TO_ADDR
// sRandom := false ;
4507: LD_ADDR_EXP 71
4511: PUSH
4512: LD_INT 0
4514: ST_TO_ADDR
// sShield := false ;
4515: LD_ADDR_EXP 72
4519: PUSH
4520: LD_INT 0
4522: ST_TO_ADDR
// sTime := false ;
4523: LD_ADDR_EXP 73
4527: PUSH
4528: LD_INT 0
4530: ST_TO_ADDR
// sTools := false ;
4531: LD_ADDR_EXP 74
4535: PUSH
4536: LD_INT 0
4538: ST_TO_ADDR
// sSold := false ;
4539: LD_ADDR_EXP 39
4543: PUSH
4544: LD_INT 0
4546: ST_TO_ADDR
// sDiff := false ;
4547: LD_ADDR_EXP 40
4551: PUSH
4552: LD_INT 0
4554: ST_TO_ADDR
// sFog := false ;
4555: LD_ADDR_EXP 43
4559: PUSH
4560: LD_INT 0
4562: ST_TO_ADDR
// sReset := false ;
4563: LD_ADDR_EXP 44
4567: PUSH
4568: LD_INT 0
4570: ST_TO_ADDR
// sSun := false ;
4571: LD_ADDR_EXP 45
4575: PUSH
4576: LD_INT 0
4578: ST_TO_ADDR
// sTiger := false ;
4579: LD_ADDR_EXP 41
4583: PUSH
4584: LD_INT 0
4586: ST_TO_ADDR
// sBomb := false ;
4587: LD_ADDR_EXP 42
4591: PUSH
4592: LD_INT 0
4594: ST_TO_ADDR
// sWound := false ;
4595: LD_ADDR_EXP 50
4599: PUSH
4600: LD_INT 0
4602: ST_TO_ADDR
// sBetray := false ;
4603: LD_ADDR_EXP 54
4607: PUSH
4608: LD_INT 0
4610: ST_TO_ADDR
// sContamin := false ;
4611: LD_ADDR_EXP 55
4615: PUSH
4616: LD_INT 0
4618: ST_TO_ADDR
// sOil := false ;
4619: LD_ADDR_EXP 57
4623: PUSH
4624: LD_INT 0
4626: ST_TO_ADDR
// sStu := false ;
4627: LD_ADDR_EXP 61
4631: PUSH
4632: LD_INT 0
4634: ST_TO_ADDR
// sBazooka := false ;
4635: LD_ADDR_EXP 64
4639: PUSH
4640: LD_INT 0
4642: ST_TO_ADDR
// sMortar := false ;
4643: LD_ADDR_EXP 65
4647: PUSH
4648: LD_INT 0
4650: ST_TO_ADDR
// sRanger := false ;
4651: LD_ADDR_EXP 75
4655: PUSH
4656: LD_INT 0
4658: ST_TO_ADDR
// end ;
4659: LD_VAR 0 1
4663: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
// result := [ ] ;
4671: LD_ADDR_VAR 0 1
4675: PUSH
4676: EMPTY
4677: ST_TO_ADDR
// if campaign_id = 1 then
4678: LD_OWVAR 69
4682: PUSH
4683: LD_INT 1
4685: EQUAL
4686: IFFALSE 7624
// begin case mission_number of 1 :
4688: LD_OWVAR 70
4692: PUSH
4693: LD_INT 1
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 4765
4701: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 2
4709: PUSH
4710: LD_INT 4
4712: PUSH
4713: LD_INT 11
4715: PUSH
4716: LD_INT 12
4718: PUSH
4719: LD_INT 15
4721: PUSH
4722: LD_INT 16
4724: PUSH
4725: LD_INT 22
4727: PUSH
4728: LD_INT 23
4730: PUSH
4731: LD_INT 26
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 101
4747: PUSH
4748: LD_INT 102
4750: PUSH
4751: LD_INT 106
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: ST_TO_ADDR
4763: GO 7622
4765: LD_INT 2
4767: DOUBLE
4768: EQUAL
4769: IFTRUE 4773
4771: GO 4845
4773: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4774: LD_ADDR_VAR 0 1
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: LD_INT 4
4784: PUSH
4785: LD_INT 11
4787: PUSH
4788: LD_INT 12
4790: PUSH
4791: LD_INT 15
4793: PUSH
4794: LD_INT 16
4796: PUSH
4797: LD_INT 22
4799: PUSH
4800: LD_INT 23
4802: PUSH
4803: LD_INT 26
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 101
4819: PUSH
4820: LD_INT 102
4822: PUSH
4823: LD_INT 105
4825: PUSH
4826: LD_INT 106
4828: PUSH
4829: LD_INT 108
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: ST_TO_ADDR
4843: GO 7622
4845: LD_INT 3
4847: DOUBLE
4848: EQUAL
4849: IFTRUE 4853
4851: GO 4929
4853: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4854: LD_ADDR_VAR 0 1
4858: PUSH
4859: LD_INT 2
4861: PUSH
4862: LD_INT 4
4864: PUSH
4865: LD_INT 5
4867: PUSH
4868: LD_INT 11
4870: PUSH
4871: LD_INT 12
4873: PUSH
4874: LD_INT 15
4876: PUSH
4877: LD_INT 16
4879: PUSH
4880: LD_INT 22
4882: PUSH
4883: LD_INT 26
4885: PUSH
4886: LD_INT 36
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 101
4903: PUSH
4904: LD_INT 102
4906: PUSH
4907: LD_INT 105
4909: PUSH
4910: LD_INT 106
4912: PUSH
4913: LD_INT 108
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: ST_TO_ADDR
4927: GO 7622
4929: LD_INT 4
4931: DOUBLE
4932: EQUAL
4933: IFTRUE 4937
4935: GO 5021
4937: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4938: LD_ADDR_VAR 0 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 4
4948: PUSH
4949: LD_INT 5
4951: PUSH
4952: LD_INT 8
4954: PUSH
4955: LD_INT 11
4957: PUSH
4958: LD_INT 12
4960: PUSH
4961: LD_INT 15
4963: PUSH
4964: LD_INT 16
4966: PUSH
4967: LD_INT 22
4969: PUSH
4970: LD_INT 23
4972: PUSH
4973: LD_INT 26
4975: PUSH
4976: LD_INT 36
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: PUSH
4993: LD_INT 101
4995: PUSH
4996: LD_INT 102
4998: PUSH
4999: LD_INT 105
5001: PUSH
5002: LD_INT 106
5004: PUSH
5005: LD_INT 108
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: ST_TO_ADDR
5019: GO 7622
5021: LD_INT 5
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5129
5029: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_INT 2
5037: PUSH
5038: LD_INT 4
5040: PUSH
5041: LD_INT 5
5043: PUSH
5044: LD_INT 6
5046: PUSH
5047: LD_INT 8
5049: PUSH
5050: LD_INT 11
5052: PUSH
5053: LD_INT 12
5055: PUSH
5056: LD_INT 15
5058: PUSH
5059: LD_INT 16
5061: PUSH
5062: LD_INT 22
5064: PUSH
5065: LD_INT 23
5067: PUSH
5068: LD_INT 25
5070: PUSH
5071: LD_INT 26
5073: PUSH
5074: LD_INT 36
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 101
5095: PUSH
5096: LD_INT 102
5098: PUSH
5099: LD_INT 105
5101: PUSH
5102: LD_INT 106
5104: PUSH
5105: LD_INT 108
5107: PUSH
5108: LD_INT 109
5110: PUSH
5111: LD_INT 112
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: ST_TO_ADDR
5127: GO 7622
5129: LD_INT 6
5131: DOUBLE
5132: EQUAL
5133: IFTRUE 5137
5135: GO 5257
5137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5138: LD_ADDR_VAR 0 1
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: LD_INT 4
5148: PUSH
5149: LD_INT 5
5151: PUSH
5152: LD_INT 6
5154: PUSH
5155: LD_INT 8
5157: PUSH
5158: LD_INT 11
5160: PUSH
5161: LD_INT 12
5163: PUSH
5164: LD_INT 15
5166: PUSH
5167: LD_INT 16
5169: PUSH
5170: LD_INT 20
5172: PUSH
5173: LD_INT 21
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 25
5184: PUSH
5185: LD_INT 26
5187: PUSH
5188: LD_INT 30
5190: PUSH
5191: LD_INT 31
5193: PUSH
5194: LD_INT 32
5196: PUSH
5197: LD_INT 36
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 101
5223: PUSH
5224: LD_INT 102
5226: PUSH
5227: LD_INT 105
5229: PUSH
5230: LD_INT 106
5232: PUSH
5233: LD_INT 108
5235: PUSH
5236: LD_INT 109
5238: PUSH
5239: LD_INT 112
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: ST_TO_ADDR
5255: GO 7622
5257: LD_INT 7
5259: DOUBLE
5260: EQUAL
5261: IFTRUE 5265
5263: GO 5365
5265: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5266: LD_ADDR_VAR 0 1
5270: PUSH
5271: LD_INT 2
5273: PUSH
5274: LD_INT 4
5276: PUSH
5277: LD_INT 5
5279: PUSH
5280: LD_INT 7
5282: PUSH
5283: LD_INT 11
5285: PUSH
5286: LD_INT 12
5288: PUSH
5289: LD_INT 15
5291: PUSH
5292: LD_INT 16
5294: PUSH
5295: LD_INT 20
5297: PUSH
5298: LD_INT 21
5300: PUSH
5301: LD_INT 22
5303: PUSH
5304: LD_INT 23
5306: PUSH
5307: LD_INT 25
5309: PUSH
5310: LD_INT 26
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_INT 101
5331: PUSH
5332: LD_INT 102
5334: PUSH
5335: LD_INT 103
5337: PUSH
5338: LD_INT 105
5340: PUSH
5341: LD_INT 106
5343: PUSH
5344: LD_INT 108
5346: PUSH
5347: LD_INT 112
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: ST_TO_ADDR
5363: GO 7622
5365: LD_INT 8
5367: DOUBLE
5368: EQUAL
5369: IFTRUE 5373
5371: GO 5501
5373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5374: LD_ADDR_VAR 0 1
5378: PUSH
5379: LD_INT 2
5381: PUSH
5382: LD_INT 4
5384: PUSH
5385: LD_INT 5
5387: PUSH
5388: LD_INT 6
5390: PUSH
5391: LD_INT 7
5393: PUSH
5394: LD_INT 8
5396: PUSH
5397: LD_INT 11
5399: PUSH
5400: LD_INT 12
5402: PUSH
5403: LD_INT 15
5405: PUSH
5406: LD_INT 16
5408: PUSH
5409: LD_INT 20
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 22
5417: PUSH
5418: LD_INT 23
5420: PUSH
5421: LD_INT 25
5423: PUSH
5424: LD_INT 26
5426: PUSH
5427: LD_INT 30
5429: PUSH
5430: LD_INT 31
5432: PUSH
5433: LD_INT 32
5435: PUSH
5436: LD_INT 36
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 101
5463: PUSH
5464: LD_INT 102
5466: PUSH
5467: LD_INT 103
5469: PUSH
5470: LD_INT 105
5472: PUSH
5473: LD_INT 106
5475: PUSH
5476: LD_INT 108
5478: PUSH
5479: LD_INT 109
5481: PUSH
5482: LD_INT 112
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: ST_TO_ADDR
5499: GO 7622
5501: LD_INT 9
5503: DOUBLE
5504: EQUAL
5505: IFTRUE 5509
5507: GO 5645
5509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5510: LD_ADDR_VAR 0 1
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 5
5523: PUSH
5524: LD_INT 6
5526: PUSH
5527: LD_INT 7
5529: PUSH
5530: LD_INT 8
5532: PUSH
5533: LD_INT 11
5535: PUSH
5536: LD_INT 12
5538: PUSH
5539: LD_INT 15
5541: PUSH
5542: LD_INT 16
5544: PUSH
5545: LD_INT 20
5547: PUSH
5548: LD_INT 21
5550: PUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 23
5556: PUSH
5557: LD_INT 25
5559: PUSH
5560: LD_INT 26
5562: PUSH
5563: LD_INT 28
5565: PUSH
5566: LD_INT 30
5568: PUSH
5569: LD_INT 31
5571: PUSH
5572: LD_INT 32
5574: PUSH
5575: LD_INT 36
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 101
5603: PUSH
5604: LD_INT 102
5606: PUSH
5607: LD_INT 103
5609: PUSH
5610: LD_INT 105
5612: PUSH
5613: LD_INT 106
5615: PUSH
5616: LD_INT 108
5618: PUSH
5619: LD_INT 109
5621: PUSH
5622: LD_INT 112
5624: PUSH
5625: LD_INT 114
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: ST_TO_ADDR
5643: GO 7622
5645: LD_INT 10
5647: DOUBLE
5648: EQUAL
5649: IFTRUE 5653
5651: GO 5837
5653: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 2
5661: PUSH
5662: LD_INT 4
5664: PUSH
5665: LD_INT 5
5667: PUSH
5668: LD_INT 6
5670: PUSH
5671: LD_INT 7
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: LD_INT 9
5679: PUSH
5680: LD_INT 10
5682: PUSH
5683: LD_INT 11
5685: PUSH
5686: LD_INT 12
5688: PUSH
5689: LD_INT 13
5691: PUSH
5692: LD_INT 14
5694: PUSH
5695: LD_INT 15
5697: PUSH
5698: LD_INT 16
5700: PUSH
5701: LD_INT 17
5703: PUSH
5704: LD_INT 18
5706: PUSH
5707: LD_INT 19
5709: PUSH
5710: LD_INT 20
5712: PUSH
5713: LD_INT 21
5715: PUSH
5716: LD_INT 22
5718: PUSH
5719: LD_INT 23
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: LD_INT 25
5727: PUSH
5728: LD_INT 26
5730: PUSH
5731: LD_INT 28
5733: PUSH
5734: LD_INT 30
5736: PUSH
5737: LD_INT 31
5739: PUSH
5740: LD_INT 32
5742: PUSH
5743: LD_INT 36
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 101
5779: PUSH
5780: LD_INT 102
5782: PUSH
5783: LD_INT 103
5785: PUSH
5786: LD_INT 104
5788: PUSH
5789: LD_INT 105
5791: PUSH
5792: LD_INT 106
5794: PUSH
5795: LD_INT 107
5797: PUSH
5798: LD_INT 108
5800: PUSH
5801: LD_INT 109
5803: PUSH
5804: LD_INT 110
5806: PUSH
5807: LD_INT 111
5809: PUSH
5810: LD_INT 112
5812: PUSH
5813: LD_INT 114
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: ST_TO_ADDR
5835: GO 7622
5837: LD_INT 11
5839: DOUBLE
5840: EQUAL
5841: IFTRUE 5845
5843: GO 6037
5845: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5846: LD_ADDR_VAR 0 1
5850: PUSH
5851: LD_INT 2
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: LD_INT 4
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: LD_INT 6
5865: PUSH
5866: LD_INT 7
5868: PUSH
5869: LD_INT 8
5871: PUSH
5872: LD_INT 9
5874: PUSH
5875: LD_INT 10
5877: PUSH
5878: LD_INT 11
5880: PUSH
5881: LD_INT 12
5883: PUSH
5884: LD_INT 13
5886: PUSH
5887: LD_INT 14
5889: PUSH
5890: LD_INT 15
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: LD_INT 17
5898: PUSH
5899: LD_INT 18
5901: PUSH
5902: LD_INT 19
5904: PUSH
5905: LD_INT 20
5907: PUSH
5908: LD_INT 21
5910: PUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 23
5916: PUSH
5917: LD_INT 24
5919: PUSH
5920: LD_INT 25
5922: PUSH
5923: LD_INT 26
5925: PUSH
5926: LD_INT 28
5928: PUSH
5929: LD_INT 30
5931: PUSH
5932: LD_INT 31
5934: PUSH
5935: LD_INT 32
5937: PUSH
5938: LD_INT 34
5940: PUSH
5941: LD_INT 36
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 101
5979: PUSH
5980: LD_INT 102
5982: PUSH
5983: LD_INT 103
5985: PUSH
5986: LD_INT 104
5988: PUSH
5989: LD_INT 105
5991: PUSH
5992: LD_INT 106
5994: PUSH
5995: LD_INT 107
5997: PUSH
5998: LD_INT 108
6000: PUSH
6001: LD_INT 109
6003: PUSH
6004: LD_INT 110
6006: PUSH
6007: LD_INT 111
6009: PUSH
6010: LD_INT 112
6012: PUSH
6013: LD_INT 114
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: ST_TO_ADDR
6035: GO 7622
6037: LD_INT 12
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6253
6045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6046: LD_ADDR_VAR 0 1
6050: PUSH
6051: LD_INT 1
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 5
6065: PUSH
6066: LD_INT 6
6068: PUSH
6069: LD_INT 7
6071: PUSH
6072: LD_INT 8
6074: PUSH
6075: LD_INT 9
6077: PUSH
6078: LD_INT 10
6080: PUSH
6081: LD_INT 11
6083: PUSH
6084: LD_INT 12
6086: PUSH
6087: LD_INT 13
6089: PUSH
6090: LD_INT 14
6092: PUSH
6093: LD_INT 15
6095: PUSH
6096: LD_INT 16
6098: PUSH
6099: LD_INT 17
6101: PUSH
6102: LD_INT 18
6104: PUSH
6105: LD_INT 19
6107: PUSH
6108: LD_INT 20
6110: PUSH
6111: LD_INT 21
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_INT 23
6119: PUSH
6120: LD_INT 24
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 26
6128: PUSH
6129: LD_INT 27
6131: PUSH
6132: LD_INT 28
6134: PUSH
6135: LD_INT 30
6137: PUSH
6138: LD_INT 31
6140: PUSH
6141: LD_INT 32
6143: PUSH
6144: LD_INT 33
6146: PUSH
6147: LD_INT 34
6149: PUSH
6150: LD_INT 36
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 101
6191: PUSH
6192: LD_INT 102
6194: PUSH
6195: LD_INT 103
6197: PUSH
6198: LD_INT 104
6200: PUSH
6201: LD_INT 105
6203: PUSH
6204: LD_INT 106
6206: PUSH
6207: LD_INT 107
6209: PUSH
6210: LD_INT 108
6212: PUSH
6213: LD_INT 109
6215: PUSH
6216: LD_INT 110
6218: PUSH
6219: LD_INT 111
6221: PUSH
6222: LD_INT 112
6224: PUSH
6225: LD_INT 113
6227: PUSH
6228: LD_INT 114
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: ST_TO_ADDR
6251: GO 7622
6253: LD_INT 13
6255: DOUBLE
6256: EQUAL
6257: IFTRUE 6261
6259: GO 6457
6261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6262: LD_ADDR_VAR 0 1
6266: PUSH
6267: LD_INT 1
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 3
6275: PUSH
6276: LD_INT 4
6278: PUSH
6279: LD_INT 5
6281: PUSH
6282: LD_INT 8
6284: PUSH
6285: LD_INT 9
6287: PUSH
6288: LD_INT 10
6290: PUSH
6291: LD_INT 11
6293: PUSH
6294: LD_INT 12
6296: PUSH
6297: LD_INT 14
6299: PUSH
6300: LD_INT 15
6302: PUSH
6303: LD_INT 16
6305: PUSH
6306: LD_INT 17
6308: PUSH
6309: LD_INT 18
6311: PUSH
6312: LD_INT 19
6314: PUSH
6315: LD_INT 20
6317: PUSH
6318: LD_INT 21
6320: PUSH
6321: LD_INT 22
6323: PUSH
6324: LD_INT 23
6326: PUSH
6327: LD_INT 24
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 26
6335: PUSH
6336: LD_INT 27
6338: PUSH
6339: LD_INT 28
6341: PUSH
6342: LD_INT 30
6344: PUSH
6345: LD_INT 31
6347: PUSH
6348: LD_INT 32
6350: PUSH
6351: LD_INT 33
6353: PUSH
6354: LD_INT 34
6356: PUSH
6357: LD_INT 36
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 101
6395: PUSH
6396: LD_INT 102
6398: PUSH
6399: LD_INT 103
6401: PUSH
6402: LD_INT 104
6404: PUSH
6405: LD_INT 105
6407: PUSH
6408: LD_INT 106
6410: PUSH
6411: LD_INT 107
6413: PUSH
6414: LD_INT 108
6416: PUSH
6417: LD_INT 109
6419: PUSH
6420: LD_INT 110
6422: PUSH
6423: LD_INT 111
6425: PUSH
6426: LD_INT 112
6428: PUSH
6429: LD_INT 113
6431: PUSH
6432: LD_INT 114
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: ST_TO_ADDR
6455: GO 7622
6457: LD_INT 14
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6677
6465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 4
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: LD_INT 6
6488: PUSH
6489: LD_INT 7
6491: PUSH
6492: LD_INT 8
6494: PUSH
6495: LD_INT 9
6497: PUSH
6498: LD_INT 10
6500: PUSH
6501: LD_INT 11
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 13
6509: PUSH
6510: LD_INT 14
6512: PUSH
6513: LD_INT 15
6515: PUSH
6516: LD_INT 16
6518: PUSH
6519: LD_INT 17
6521: PUSH
6522: LD_INT 18
6524: PUSH
6525: LD_INT 19
6527: PUSH
6528: LD_INT 20
6530: PUSH
6531: LD_INT 21
6533: PUSH
6534: LD_INT 22
6536: PUSH
6537: LD_INT 23
6539: PUSH
6540: LD_INT 24
6542: PUSH
6543: LD_INT 25
6545: PUSH
6546: LD_INT 26
6548: PUSH
6549: LD_INT 27
6551: PUSH
6552: LD_INT 28
6554: PUSH
6555: LD_INT 29
6557: PUSH
6558: LD_INT 30
6560: PUSH
6561: LD_INT 31
6563: PUSH
6564: LD_INT 32
6566: PUSH
6567: LD_INT 33
6569: PUSH
6570: LD_INT 34
6572: PUSH
6573: LD_INT 36
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 101
6615: PUSH
6616: LD_INT 102
6618: PUSH
6619: LD_INT 103
6621: PUSH
6622: LD_INT 104
6624: PUSH
6625: LD_INT 105
6627: PUSH
6628: LD_INT 106
6630: PUSH
6631: LD_INT 107
6633: PUSH
6634: LD_INT 108
6636: PUSH
6637: LD_INT 109
6639: PUSH
6640: LD_INT 110
6642: PUSH
6643: LD_INT 111
6645: PUSH
6646: LD_INT 112
6648: PUSH
6649: LD_INT 113
6651: PUSH
6652: LD_INT 114
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: ST_TO_ADDR
6675: GO 7622
6677: LD_INT 15
6679: DOUBLE
6680: EQUAL
6681: IFTRUE 6685
6683: GO 6897
6685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6686: LD_ADDR_VAR 0 1
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: LD_INT 2
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 4
6702: PUSH
6703: LD_INT 5
6705: PUSH
6706: LD_INT 6
6708: PUSH
6709: LD_INT 7
6711: PUSH
6712: LD_INT 8
6714: PUSH
6715: LD_INT 9
6717: PUSH
6718: LD_INT 10
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 13
6729: PUSH
6730: LD_INT 14
6732: PUSH
6733: LD_INT 15
6735: PUSH
6736: LD_INT 16
6738: PUSH
6739: LD_INT 17
6741: PUSH
6742: LD_INT 18
6744: PUSH
6745: LD_INT 19
6747: PUSH
6748: LD_INT 20
6750: PUSH
6751: LD_INT 21
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 23
6759: PUSH
6760: LD_INT 24
6762: PUSH
6763: LD_INT 25
6765: PUSH
6766: LD_INT 26
6768: PUSH
6769: LD_INT 27
6771: PUSH
6772: LD_INT 28
6774: PUSH
6775: LD_INT 29
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 31
6783: PUSH
6784: LD_INT 32
6786: PUSH
6787: LD_INT 33
6789: PUSH
6790: LD_INT 34
6792: PUSH
6793: LD_INT 36
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 101
6835: PUSH
6836: LD_INT 102
6838: PUSH
6839: LD_INT 103
6841: PUSH
6842: LD_INT 104
6844: PUSH
6845: LD_INT 105
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 107
6853: PUSH
6854: LD_INT 108
6856: PUSH
6857: LD_INT 109
6859: PUSH
6860: LD_INT 110
6862: PUSH
6863: LD_INT 111
6865: PUSH
6866: LD_INT 112
6868: PUSH
6869: LD_INT 113
6871: PUSH
6872: LD_INT 114
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 7622
6897: LD_INT 16
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 7029
6905: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6906: LD_ADDR_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 7
6922: PUSH
6923: LD_INT 11
6925: PUSH
6926: LD_INT 12
6928: PUSH
6929: LD_INT 15
6931: PUSH
6932: LD_INT 16
6934: PUSH
6935: LD_INT 20
6937: PUSH
6938: LD_INT 21
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_INT 23
6946: PUSH
6947: LD_INT 25
6949: PUSH
6950: LD_INT 26
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 33
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 101
6991: PUSH
6992: LD_INT 102
6994: PUSH
6995: LD_INT 103
6997: PUSH
6998: LD_INT 106
7000: PUSH
7001: LD_INT 108
7003: PUSH
7004: LD_INT 112
7006: PUSH
7007: LD_INT 113
7009: PUSH
7010: LD_INT 114
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: ST_TO_ADDR
7027: GO 7622
7029: LD_INT 17
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7249
7037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: LD_INT 2
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: LD_INT 6
7060: PUSH
7061: LD_INT 7
7063: PUSH
7064: LD_INT 8
7066: PUSH
7067: LD_INT 9
7069: PUSH
7070: LD_INT 10
7072: PUSH
7073: LD_INT 11
7075: PUSH
7076: LD_INT 12
7078: PUSH
7079: LD_INT 13
7081: PUSH
7082: LD_INT 14
7084: PUSH
7085: LD_INT 15
7087: PUSH
7088: LD_INT 16
7090: PUSH
7091: LD_INT 17
7093: PUSH
7094: LD_INT 18
7096: PUSH
7097: LD_INT 19
7099: PUSH
7100: LD_INT 20
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 22
7108: PUSH
7109: LD_INT 23
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: LD_INT 25
7117: PUSH
7118: LD_INT 26
7120: PUSH
7121: LD_INT 27
7123: PUSH
7124: LD_INT 28
7126: PUSH
7127: LD_INT 29
7129: PUSH
7130: LD_INT 30
7132: PUSH
7133: LD_INT 31
7135: PUSH
7136: LD_INT 32
7138: PUSH
7139: LD_INT 33
7141: PUSH
7142: LD_INT 34
7144: PUSH
7145: LD_INT 36
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 101
7187: PUSH
7188: LD_INT 102
7190: PUSH
7191: LD_INT 103
7193: PUSH
7194: LD_INT 104
7196: PUSH
7197: LD_INT 105
7199: PUSH
7200: LD_INT 106
7202: PUSH
7203: LD_INT 107
7205: PUSH
7206: LD_INT 108
7208: PUSH
7209: LD_INT 109
7211: PUSH
7212: LD_INT 110
7214: PUSH
7215: LD_INT 111
7217: PUSH
7218: LD_INT 112
7220: PUSH
7221: LD_INT 113
7223: PUSH
7224: LD_INT 114
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: ST_TO_ADDR
7247: GO 7622
7249: LD_INT 18
7251: DOUBLE
7252: EQUAL
7253: IFTRUE 7257
7255: GO 7393
7257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7258: LD_ADDR_VAR 0 1
7262: PUSH
7263: LD_INT 2
7265: PUSH
7266: LD_INT 4
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: LD_INT 7
7274: PUSH
7275: LD_INT 11
7277: PUSH
7278: LD_INT 12
7280: PUSH
7281: LD_INT 15
7283: PUSH
7284: LD_INT 16
7286: PUSH
7287: LD_INT 20
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 25
7301: PUSH
7302: LD_INT 26
7304: PUSH
7305: LD_INT 30
7307: PUSH
7308: LD_INT 31
7310: PUSH
7311: LD_INT 32
7313: PUSH
7314: LD_INT 33
7316: PUSH
7317: LD_INT 34
7319: PUSH
7320: LD_INT 35
7322: PUSH
7323: LD_INT 36
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 101
7351: PUSH
7352: LD_INT 102
7354: PUSH
7355: LD_INT 103
7357: PUSH
7358: LD_INT 106
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 112
7366: PUSH
7367: LD_INT 113
7369: PUSH
7370: LD_INT 114
7372: PUSH
7373: LD_INT 115
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 7622
7393: LD_INT 19
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7621
7401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7402: LD_ADDR_VAR 0 1
7406: PUSH
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: LD_INT 5
7421: PUSH
7422: LD_INT 6
7424: PUSH
7425: LD_INT 7
7427: PUSH
7428: LD_INT 8
7430: PUSH
7431: LD_INT 9
7433: PUSH
7434: LD_INT 10
7436: PUSH
7437: LD_INT 11
7439: PUSH
7440: LD_INT 12
7442: PUSH
7443: LD_INT 13
7445: PUSH
7446: LD_INT 14
7448: PUSH
7449: LD_INT 15
7451: PUSH
7452: LD_INT 16
7454: PUSH
7455: LD_INT 17
7457: PUSH
7458: LD_INT 18
7460: PUSH
7461: LD_INT 19
7463: PUSH
7464: LD_INT 20
7466: PUSH
7467: LD_INT 21
7469: PUSH
7470: LD_INT 22
7472: PUSH
7473: LD_INT 23
7475: PUSH
7476: LD_INT 24
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 26
7484: PUSH
7485: LD_INT 27
7487: PUSH
7488: LD_INT 28
7490: PUSH
7491: LD_INT 29
7493: PUSH
7494: LD_INT 30
7496: PUSH
7497: LD_INT 31
7499: PUSH
7500: LD_INT 32
7502: PUSH
7503: LD_INT 33
7505: PUSH
7506: LD_INT 34
7508: PUSH
7509: LD_INT 35
7511: PUSH
7512: LD_INT 36
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 101
7555: PUSH
7556: LD_INT 102
7558: PUSH
7559: LD_INT 103
7561: PUSH
7562: LD_INT 104
7564: PUSH
7565: LD_INT 105
7567: PUSH
7568: LD_INT 106
7570: PUSH
7571: LD_INT 107
7573: PUSH
7574: LD_INT 108
7576: PUSH
7577: LD_INT 109
7579: PUSH
7580: LD_INT 110
7582: PUSH
7583: LD_INT 111
7585: PUSH
7586: LD_INT 112
7588: PUSH
7589: LD_INT 113
7591: PUSH
7592: LD_INT 114
7594: PUSH
7595: LD_INT 115
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: ST_TO_ADDR
7619: GO 7622
7621: POP
// end else
7622: GO 7841
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7624: LD_ADDR_VAR 0 1
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: LD_INT 4
7640: PUSH
7641: LD_INT 5
7643: PUSH
7644: LD_INT 6
7646: PUSH
7647: LD_INT 7
7649: PUSH
7650: LD_INT 8
7652: PUSH
7653: LD_INT 9
7655: PUSH
7656: LD_INT 10
7658: PUSH
7659: LD_INT 11
7661: PUSH
7662: LD_INT 12
7664: PUSH
7665: LD_INT 13
7667: PUSH
7668: LD_INT 14
7670: PUSH
7671: LD_INT 15
7673: PUSH
7674: LD_INT 16
7676: PUSH
7677: LD_INT 17
7679: PUSH
7680: LD_INT 18
7682: PUSH
7683: LD_INT 19
7685: PUSH
7686: LD_INT 20
7688: PUSH
7689: LD_INT 21
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_INT 23
7697: PUSH
7698: LD_INT 24
7700: PUSH
7701: LD_INT 25
7703: PUSH
7704: LD_INT 26
7706: PUSH
7707: LD_INT 27
7709: PUSH
7710: LD_INT 28
7712: PUSH
7713: LD_INT 29
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_INT 31
7721: PUSH
7722: LD_INT 32
7724: PUSH
7725: LD_INT 33
7727: PUSH
7728: LD_INT 34
7730: PUSH
7731: LD_INT 35
7733: PUSH
7734: LD_INT 36
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 101
7777: PUSH
7778: LD_INT 102
7780: PUSH
7781: LD_INT 103
7783: PUSH
7784: LD_INT 104
7786: PUSH
7787: LD_INT 105
7789: PUSH
7790: LD_INT 106
7792: PUSH
7793: LD_INT 107
7795: PUSH
7796: LD_INT 108
7798: PUSH
7799: LD_INT 109
7801: PUSH
7802: LD_INT 110
7804: PUSH
7805: LD_INT 111
7807: PUSH
7808: LD_INT 112
7810: PUSH
7811: LD_INT 113
7813: PUSH
7814: LD_INT 114
7816: PUSH
7817: LD_INT 115
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// if result then
7841: LD_VAR 0 1
7845: IFFALSE 8134
// begin normal :=  ;
7847: LD_ADDR_VAR 0 3
7851: PUSH
7852: LD_STRING 
7854: ST_TO_ADDR
// hardcore :=  ;
7855: LD_ADDR_VAR 0 4
7859: PUSH
7860: LD_STRING 
7862: ST_TO_ADDR
// for i = 1 to normalCounter do
7863: LD_ADDR_VAR 0 5
7867: PUSH
7868: DOUBLE
7869: LD_INT 1
7871: DEC
7872: ST_TO_ADDR
7873: LD_EXP 23
7877: PUSH
7878: FOR_TO
7879: IFFALSE 7980
// begin tmp := 0 ;
7881: LD_ADDR_VAR 0 2
7885: PUSH
7886: LD_STRING 0
7888: ST_TO_ADDR
// if result [ 1 ] then
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 1
7896: ARRAY
7897: IFFALSE 7962
// if result [ 1 ] [ 1 ] = i then
7899: LD_VAR 0 1
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PUSH
7912: LD_VAR 0 5
7916: EQUAL
7917: IFFALSE 7962
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7919: LD_ADDR_VAR 0 1
7923: PUSH
7924: LD_VAR 0 1
7928: PPUSH
7929: LD_INT 1
7931: PPUSH
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_INT 1
7943: PPUSH
7944: CALL_OW 3
7948: PPUSH
7949: CALL_OW 1
7953: ST_TO_ADDR
// tmp := 1 ;
7954: LD_ADDR_VAR 0 2
7958: PUSH
7959: LD_STRING 1
7961: ST_TO_ADDR
// end ; normal := normal & tmp ;
7962: LD_ADDR_VAR 0 3
7966: PUSH
7967: LD_VAR 0 3
7971: PUSH
7972: LD_VAR 0 2
7976: STR
7977: ST_TO_ADDR
// end ;
7978: GO 7878
7980: POP
7981: POP
// for i = 1 to hardcoreCounter do
7982: LD_ADDR_VAR 0 5
7986: PUSH
7987: DOUBLE
7988: LD_INT 1
7990: DEC
7991: ST_TO_ADDR
7992: LD_EXP 24
7996: PUSH
7997: FOR_TO
7998: IFFALSE 8103
// begin tmp := 0 ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_STRING 0
8007: ST_TO_ADDR
// if result [ 2 ] then
8008: LD_VAR 0 1
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: IFFALSE 8085
// if result [ 2 ] [ 1 ] = 100 + i then
8018: LD_VAR 0 1
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PUSH
8027: LD_INT 1
8029: ARRAY
8030: PUSH
8031: LD_INT 100
8033: PUSH
8034: LD_VAR 0 5
8038: PLUS
8039: EQUAL
8040: IFFALSE 8085
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8042: LD_ADDR_VAR 0 1
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_INT 2
8054: PPUSH
8055: LD_VAR 0 1
8059: PUSH
8060: LD_INT 2
8062: ARRAY
8063: PPUSH
8064: LD_INT 1
8066: PPUSH
8067: CALL_OW 3
8071: PPUSH
8072: CALL_OW 1
8076: ST_TO_ADDR
// tmp := 1 ;
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_STRING 1
8084: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8085: LD_ADDR_VAR 0 4
8089: PUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_VAR 0 2
8099: STR
8100: ST_TO_ADDR
// end ;
8101: GO 7997
8103: POP
8104: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8105: LD_STRING getStreamItemsFromMission("
8107: PUSH
8108: LD_VAR 0 3
8112: STR
8113: PUSH
8114: LD_STRING ","
8116: STR
8117: PUSH
8118: LD_VAR 0 4
8122: STR
8123: PUSH
8124: LD_STRING ")
8126: STR
8127: PPUSH
8128: CALL_OW 559
// end else
8132: GO 8141
// ToLua ( getStreamItemsFromMission("","") ) ;
8134: LD_STRING getStreamItemsFromMission("","")
8136: PPUSH
8137: CALL_OW 559
// end ;
8141: LD_VAR 0 1
8145: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 100
8153: EQUAL
8154: IFFALSE 9103
// begin if not StreamModeActive then
8156: LD_EXP 22
8160: NOT
8161: IFFALSE 8171
// StreamModeActive := true ;
8163: LD_ADDR_EXP 22
8167: PUSH
8168: LD_INT 1
8170: ST_TO_ADDR
// if p3 = 0 then
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 0
8178: EQUAL
8179: IFFALSE 8185
// InitStreamMode ;
8181: CALL 4224 0 0
// if p3 = 1 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 1
8192: EQUAL
8193: IFFALSE 8203
// sRocket := true ;
8195: LD_ADDR_EXP 27
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 2 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 2
8210: EQUAL
8211: IFFALSE 8221
// sSpeed := true ;
8213: LD_ADDR_EXP 26
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 3 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 3
8228: EQUAL
8229: IFFALSE 8239
// sEngine := true ;
8231: LD_ADDR_EXP 28
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 4 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 4
8246: EQUAL
8247: IFFALSE 8257
// sSpec := true ;
8249: LD_ADDR_EXP 25
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 5 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 5
8264: EQUAL
8265: IFFALSE 8275
// sLevel := true ;
8267: LD_ADDR_EXP 29
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 6 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 6
8282: EQUAL
8283: IFFALSE 8293
// sArmoury := true ;
8285: LD_ADDR_EXP 30
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 7 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 7
8300: EQUAL
8301: IFFALSE 8311
// sRadar := true ;
8303: LD_ADDR_EXP 31
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 8 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 8
8318: EQUAL
8319: IFFALSE 8329
// sBunker := true ;
8321: LD_ADDR_EXP 32
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 9 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 9
8336: EQUAL
8337: IFFALSE 8347
// sHack := true ;
8339: LD_ADDR_EXP 33
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 10 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 10
8354: EQUAL
8355: IFFALSE 8365
// sFire := true ;
8357: LD_ADDR_EXP 34
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 11 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 11
8372: EQUAL
8373: IFFALSE 8383
// sRefresh := true ;
8375: LD_ADDR_EXP 35
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 12 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 12
8390: EQUAL
8391: IFFALSE 8401
// sExp := true ;
8393: LD_ADDR_EXP 36
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 13 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 13
8408: EQUAL
8409: IFFALSE 8419
// sDepot := true ;
8411: LD_ADDR_EXP 37
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 14 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 14
8426: EQUAL
8427: IFFALSE 8437
// sFlag := true ;
8429: LD_ADDR_EXP 38
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 15 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 15
8444: EQUAL
8445: IFFALSE 8455
// sKamikadze := true ;
8447: LD_ADDR_EXP 46
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 16 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 16
8462: EQUAL
8463: IFFALSE 8473
// sTroll := true ;
8465: LD_ADDR_EXP 47
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 17 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 17
8480: EQUAL
8481: IFFALSE 8491
// sSlow := true ;
8483: LD_ADDR_EXP 48
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 18 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 18
8498: EQUAL
8499: IFFALSE 8509
// sLack := true ;
8501: LD_ADDR_EXP 49
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 19 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 19
8516: EQUAL
8517: IFFALSE 8527
// sTank := true ;
8519: LD_ADDR_EXP 51
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 20 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 20
8534: EQUAL
8535: IFFALSE 8545
// sRemote := true ;
8537: LD_ADDR_EXP 52
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 21 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 21
8552: EQUAL
8553: IFFALSE 8563
// sPowell := true ;
8555: LD_ADDR_EXP 53
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 22 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 22
8570: EQUAL
8571: IFFALSE 8581
// sTeleport := true ;
8573: LD_ADDR_EXP 56
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 23 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 23
8588: EQUAL
8589: IFFALSE 8599
// sOilTower := true ;
8591: LD_ADDR_EXP 58
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 24 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 24
8606: EQUAL
8607: IFFALSE 8617
// sShovel := true ;
8609: LD_ADDR_EXP 59
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 25 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 25
8624: EQUAL
8625: IFFALSE 8635
// sSheik := true ;
8627: LD_ADDR_EXP 60
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 26 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 26
8642: EQUAL
8643: IFFALSE 8653
// sEarthquake := true ;
8645: LD_ADDR_EXP 62
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 27 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 27
8660: EQUAL
8661: IFFALSE 8671
// sAI := true ;
8663: LD_ADDR_EXP 63
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 28 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 28
8678: EQUAL
8679: IFFALSE 8689
// sCargo := true ;
8681: LD_ADDR_EXP 66
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 29 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 29
8696: EQUAL
8697: IFFALSE 8707
// sDLaser := true ;
8699: LD_ADDR_EXP 67
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 30 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 30
8714: EQUAL
8715: IFFALSE 8725
// sExchange := true ;
8717: LD_ADDR_EXP 68
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 31 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 31
8732: EQUAL
8733: IFFALSE 8743
// sFac := true ;
8735: LD_ADDR_EXP 69
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 32 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 32
8750: EQUAL
8751: IFFALSE 8761
// sPower := true ;
8753: LD_ADDR_EXP 70
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 33 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 33
8768: EQUAL
8769: IFFALSE 8779
// sRandom := true ;
8771: LD_ADDR_EXP 71
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// if p3 = 34 then
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 34
8786: EQUAL
8787: IFFALSE 8797
// sShield := true ;
8789: LD_ADDR_EXP 72
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// if p3 = 35 then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_INT 35
8804: EQUAL
8805: IFFALSE 8815
// sTime := true ;
8807: LD_ADDR_EXP 73
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// if p3 = 36 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 36
8822: EQUAL
8823: IFFALSE 8833
// sTools := true ;
8825: LD_ADDR_EXP 74
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 101 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 101
8840: EQUAL
8841: IFFALSE 8851
// sSold := true ;
8843: LD_ADDR_EXP 39
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 102 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 102
8858: EQUAL
8859: IFFALSE 8869
// sDiff := true ;
8861: LD_ADDR_EXP 40
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 103 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 103
8876: EQUAL
8877: IFFALSE 8887
// sFog := true ;
8879: LD_ADDR_EXP 43
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 104 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 104
8894: EQUAL
8895: IFFALSE 8905
// sReset := true ;
8897: LD_ADDR_EXP 44
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 105 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 105
8912: EQUAL
8913: IFFALSE 8923
// sSun := true ;
8915: LD_ADDR_EXP 45
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 106 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 106
8930: EQUAL
8931: IFFALSE 8941
// sTiger := true ;
8933: LD_ADDR_EXP 41
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 107 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 107
8948: EQUAL
8949: IFFALSE 8959
// sBomb := true ;
8951: LD_ADDR_EXP 42
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 108 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 108
8966: EQUAL
8967: IFFALSE 8977
// sWound := true ;
8969: LD_ADDR_EXP 50
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 109 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 109
8984: EQUAL
8985: IFFALSE 8995
// sBetray := true ;
8987: LD_ADDR_EXP 54
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 110 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 110
9002: EQUAL
9003: IFFALSE 9013
// sContamin := true ;
9005: LD_ADDR_EXP 55
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 111 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 111
9020: EQUAL
9021: IFFALSE 9031
// sOil := true ;
9023: LD_ADDR_EXP 57
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 112 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 112
9038: EQUAL
9039: IFFALSE 9049
// sStu := true ;
9041: LD_ADDR_EXP 61
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 113 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 113
9056: EQUAL
9057: IFFALSE 9067
// sBazooka := true ;
9059: LD_ADDR_EXP 64
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 114 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 114
9074: EQUAL
9075: IFFALSE 9085
// sMortar := true ;
9077: LD_ADDR_EXP 65
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 115 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 115
9092: EQUAL
9093: IFFALSE 9103
// sRanger := true ;
9095: LD_ADDR_EXP 75
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// end ; end ;
9103: PPOPN 6
9105: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9106: LD_EXP 22
9110: PUSH
9111: LD_EXP 27
9115: AND
9116: IFFALSE 9240
9118: GO 9120
9120: DISABLE
9121: LD_INT 0
9123: PPUSH
9124: PPUSH
// begin enable ;
9125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9126: LD_ADDR_VAR 0 2
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_OWVAR 2
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 2
9145: PUSH
9146: LD_INT 34
9148: PUSH
9149: LD_INT 7
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 34
9158: PUSH
9159: LD_INT 45
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 34
9168: PUSH
9169: LD_INT 28
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 34
9178: PUSH
9179: LD_INT 47
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: CALL_OW 69
9201: ST_TO_ADDR
// if not tmp then
9202: LD_VAR 0 2
9206: NOT
9207: IFFALSE 9211
// exit ;
9209: GO 9240
// for i in tmp do
9211: LD_ADDR_VAR 0 1
9215: PUSH
9216: LD_VAR 0 2
9220: PUSH
9221: FOR_IN
9222: IFFALSE 9238
// begin SetLives ( i , 0 ) ;
9224: LD_VAR 0 1
9228: PPUSH
9229: LD_INT 0
9231: PPUSH
9232: CALL_OW 234
// end ;
9236: GO 9221
9238: POP
9239: POP
// end ;
9240: PPOPN 2
9242: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9243: LD_EXP 22
9247: PUSH
9248: LD_EXP 28
9252: AND
9253: IFFALSE 9337
9255: GO 9257
9257: DISABLE
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
// begin enable ;
9262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_INT 22
9270: PUSH
9271: LD_OWVAR 2
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 32
9282: PUSH
9283: LD_INT 3
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: ST_TO_ADDR
// if not tmp then
9299: LD_VAR 0 2
9303: NOT
9304: IFFALSE 9308
// exit ;
9306: GO 9337
// for i in tmp do
9308: LD_ADDR_VAR 0 1
9312: PUSH
9313: LD_VAR 0 2
9317: PUSH
9318: FOR_IN
9319: IFFALSE 9335
// begin SetLives ( i , 0 ) ;
9321: LD_VAR 0 1
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 234
// end ;
9333: GO 9318
9335: POP
9336: POP
// end ;
9337: PPOPN 2
9339: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9340: LD_EXP 22
9344: PUSH
9345: LD_EXP 25
9349: AND
9350: IFFALSE 9443
9352: GO 9354
9354: DISABLE
9355: LD_INT 0
9357: PPUSH
// begin enable ;
9358: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_OWVAR 2
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 25
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 25
9391: PUSH
9392: LD_INT 9
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 25
9401: PUSH
9402: LD_INT 8
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 69
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9441
// begin SetClass ( i , 1 ) ;
9427: LD_VAR 0 1
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 336
// end ;
9439: GO 9424
9441: POP
9442: POP
// end ;
9443: PPOPN 1
9445: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9446: LD_EXP 22
9450: PUSH
9451: LD_EXP 26
9455: AND
9456: PUSH
9457: LD_OWVAR 65
9461: PUSH
9462: LD_INT 7
9464: LESS
9465: AND
9466: IFFALSE 9480
9468: GO 9470
9470: DISABLE
// begin enable ;
9471: ENABLE
// game_speed := 7 ;
9472: LD_ADDR_OWVAR 65
9476: PUSH
9477: LD_INT 7
9479: ST_TO_ADDR
// end ;
9480: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9481: LD_EXP 22
9485: PUSH
9486: LD_EXP 29
9490: AND
9491: IFFALSE 9693
9493: GO 9495
9495: DISABLE
9496: LD_INT 0
9498: PPUSH
9499: PPUSH
9500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_INT 81
9508: PUSH
9509: LD_OWVAR 2
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 21
9520: PUSH
9521: LD_INT 1
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PPUSH
9532: CALL_OW 69
9536: ST_TO_ADDR
// if not tmp then
9537: LD_VAR 0 3
9541: NOT
9542: IFFALSE 9546
// exit ;
9544: GO 9693
// if tmp > 5 then
9546: LD_VAR 0 3
9550: PUSH
9551: LD_INT 5
9553: GREATER
9554: IFFALSE 9566
// k := 5 else
9556: LD_ADDR_VAR 0 2
9560: PUSH
9561: LD_INT 5
9563: ST_TO_ADDR
9564: GO 9576
// k := tmp ;
9566: LD_ADDR_VAR 0 2
9570: PUSH
9571: LD_VAR 0 3
9575: ST_TO_ADDR
// for i := 1 to k do
9576: LD_ADDR_VAR 0 1
9580: PUSH
9581: DOUBLE
9582: LD_INT 1
9584: DEC
9585: ST_TO_ADDR
9586: LD_VAR 0 2
9590: PUSH
9591: FOR_TO
9592: IFFALSE 9691
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 1
9603: ARRAY
9604: PPUSH
9605: LD_VAR 0 1
9609: PUSH
9610: LD_INT 4
9612: MOD
9613: PUSH
9614: LD_INT 1
9616: PLUS
9617: PPUSH
9618: CALL_OW 259
9622: PUSH
9623: LD_INT 10
9625: LESS
9626: IFFALSE 9689
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9628: LD_VAR 0 3
9632: PUSH
9633: LD_VAR 0 1
9637: ARRAY
9638: PPUSH
9639: LD_VAR 0 1
9643: PUSH
9644: LD_INT 4
9646: MOD
9647: PUSH
9648: LD_INT 1
9650: PLUS
9651: PPUSH
9652: LD_VAR 0 3
9656: PUSH
9657: LD_VAR 0 1
9661: ARRAY
9662: PPUSH
9663: LD_VAR 0 1
9667: PUSH
9668: LD_INT 4
9670: MOD
9671: PUSH
9672: LD_INT 1
9674: PLUS
9675: PPUSH
9676: CALL_OW 259
9680: PUSH
9681: LD_INT 1
9683: PLUS
9684: PPUSH
9685: CALL_OW 237
9689: GO 9591
9691: POP
9692: POP
// end ;
9693: PPOPN 3
9695: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9696: LD_EXP 22
9700: PUSH
9701: LD_EXP 30
9705: AND
9706: IFFALSE 9726
9708: GO 9710
9710: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9711: LD_INT 4
9713: PPUSH
9714: LD_OWVAR 2
9718: PPUSH
9719: LD_INT 0
9721: PPUSH
9722: CALL_OW 324
9726: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9727: LD_EXP 22
9731: PUSH
9732: LD_EXP 59
9736: AND
9737: IFFALSE 9757
9739: GO 9741
9741: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9742: LD_INT 19
9744: PPUSH
9745: LD_OWVAR 2
9749: PPUSH
9750: LD_INT 0
9752: PPUSH
9753: CALL_OW 324
9757: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9758: LD_EXP 22
9762: PUSH
9763: LD_EXP 31
9767: AND
9768: IFFALSE 9870
9770: GO 9772
9772: DISABLE
9773: LD_INT 0
9775: PPUSH
9776: PPUSH
// begin enable ;
9777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_OWVAR 2
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 34
9800: PUSH
9801: LD_INT 11
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: LD_INT 34
9810: PUSH
9811: LD_INT 30
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PPUSH
9827: CALL_OW 69
9831: ST_TO_ADDR
// if not tmp then
9832: LD_VAR 0 2
9836: NOT
9837: IFFALSE 9841
// exit ;
9839: GO 9870
// for i in tmp do
9841: LD_ADDR_VAR 0 1
9845: PUSH
9846: LD_VAR 0 2
9850: PUSH
9851: FOR_IN
9852: IFFALSE 9868
// begin SetLives ( i , 0 ) ;
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 234
// end ;
9866: GO 9851
9868: POP
9869: POP
// end ;
9870: PPOPN 2
9872: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9873: LD_EXP 22
9877: PUSH
9878: LD_EXP 32
9882: AND
9883: IFFALSE 9903
9885: GO 9887
9887: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9888: LD_INT 32
9890: PPUSH
9891: LD_OWVAR 2
9895: PPUSH
9896: LD_INT 0
9898: PPUSH
9899: CALL_OW 324
9903: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9904: LD_EXP 22
9908: PUSH
9909: LD_EXP 33
9913: AND
9914: IFFALSE 10095
9916: GO 9918
9918: DISABLE
9919: LD_INT 0
9921: PPUSH
9922: PPUSH
9923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9924: LD_ADDR_VAR 0 2
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_OWVAR 2
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 33
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: ST_TO_ADDR
// if not tmp then
9960: LD_VAR 0 2
9964: NOT
9965: IFFALSE 9969
// exit ;
9967: GO 10095
// side := 0 ;
9969: LD_ADDR_VAR 0 3
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// for i := 1 to 8 do
9977: LD_ADDR_VAR 0 1
9981: PUSH
9982: DOUBLE
9983: LD_INT 1
9985: DEC
9986: ST_TO_ADDR
9987: LD_INT 8
9989: PUSH
9990: FOR_TO
9991: IFFALSE 10039
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9993: LD_OWVAR 2
9997: PUSH
9998: LD_VAR 0 1
10002: NONEQUAL
10003: PUSH
10004: LD_OWVAR 2
10008: PPUSH
10009: LD_VAR 0 1
10013: PPUSH
10014: CALL_OW 81
10018: PUSH
10019: LD_INT 2
10021: EQUAL
10022: AND
10023: IFFALSE 10037
// begin side := i ;
10025: LD_ADDR_VAR 0 3
10029: PUSH
10030: LD_VAR 0 1
10034: ST_TO_ADDR
// break ;
10035: GO 10039
// end ;
10037: GO 9990
10039: POP
10040: POP
// if not side then
10041: LD_VAR 0 3
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10095
// for i := 1 to tmp do
10050: LD_ADDR_VAR 0 1
10054: PUSH
10055: DOUBLE
10056: LD_INT 1
10058: DEC
10059: ST_TO_ADDR
10060: LD_VAR 0 2
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10093
// if Prob ( 60 ) then
10068: LD_INT 60
10070: PPUSH
10071: CALL_OW 13
10075: IFFALSE 10091
// SetSide ( i , side ) ;
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: CALL_OW 235
10091: GO 10065
10093: POP
10094: POP
// end ;
10095: PPOPN 3
10097: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10098: LD_EXP 22
10102: PUSH
10103: LD_EXP 35
10107: AND
10108: IFFALSE 10227
10110: GO 10112
10112: DISABLE
10113: LD_INT 0
10115: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10116: LD_ADDR_VAR 0 1
10120: PUSH
10121: LD_INT 22
10123: PUSH
10124: LD_OWVAR 2
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 3
10145: PUSH
10146: LD_INT 23
10148: PUSH
10149: LD_INT 0
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: PPUSH
10165: CALL_OW 69
10169: PUSH
10170: FOR_IN
10171: IFFALSE 10225
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 257
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 3
10191: PUSH
10192: LD_INT 4
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: IN
10201: IFFALSE 10223
// SetClass ( un , rand ( 1 , 4 ) ) ;
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: LD_INT 4
10213: PPUSH
10214: CALL_OW 12
10218: PPUSH
10219: CALL_OW 336
10223: GO 10170
10225: POP
10226: POP
// end ;
10227: PPOPN 1
10229: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10230: LD_EXP 22
10234: PUSH
10235: LD_EXP 34
10239: AND
10240: IFFALSE 10319
10242: GO 10244
10244: DISABLE
10245: LD_INT 0
10247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10248: LD_ADDR_VAR 0 1
10252: PUSH
10253: LD_INT 22
10255: PUSH
10256: LD_OWVAR 2
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 21
10267: PUSH
10268: LD_INT 3
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PPUSH
10279: CALL_OW 69
10283: ST_TO_ADDR
// if not tmp then
10284: LD_VAR 0 1
10288: NOT
10289: IFFALSE 10293
// exit ;
10291: GO 10319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10293: LD_VAR 0 1
10297: PUSH
10298: LD_INT 1
10300: PPUSH
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 12
10310: ARRAY
10311: PPUSH
10312: LD_INT 100
10314: PPUSH
10315: CALL_OW 234
// end ;
10319: PPOPN 1
10321: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10322: LD_EXP 22
10326: PUSH
10327: LD_EXP 36
10331: AND
10332: IFFALSE 10430
10334: GO 10336
10336: DISABLE
10337: LD_INT 0
10339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10340: LD_ADDR_VAR 0 1
10344: PUSH
10345: LD_INT 22
10347: PUSH
10348: LD_OWVAR 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 21
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: ST_TO_ADDR
// if not tmp then
10376: LD_VAR 0 1
10380: NOT
10381: IFFALSE 10385
// exit ;
10383: GO 10430
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10385: LD_VAR 0 1
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: CALL_OW 12
10402: ARRAY
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: LD_INT 4
10409: PPUSH
10410: CALL_OW 12
10414: PPUSH
10415: LD_INT 3000
10417: PPUSH
10418: LD_INT 9000
10420: PPUSH
10421: CALL_OW 12
10425: PPUSH
10426: CALL_OW 492
// end ;
10430: PPOPN 1
10432: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10433: LD_EXP 22
10437: PUSH
10438: LD_EXP 37
10442: AND
10443: IFFALSE 10463
10445: GO 10447
10447: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10448: LD_INT 1
10450: PPUSH
10451: LD_OWVAR 2
10455: PPUSH
10456: LD_INT 0
10458: PPUSH
10459: CALL_OW 324
10463: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10464: LD_EXP 22
10468: PUSH
10469: LD_EXP 38
10473: AND
10474: IFFALSE 10557
10476: GO 10478
10478: DISABLE
10479: LD_INT 0
10481: PPUSH
10482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10483: LD_ADDR_VAR 0 2
10487: PUSH
10488: LD_INT 22
10490: PUSH
10491: LD_OWVAR 2
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 21
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PPUSH
10514: CALL_OW 69
10518: ST_TO_ADDR
// if not tmp then
10519: LD_VAR 0 2
10523: NOT
10524: IFFALSE 10528
// exit ;
10526: GO 10557
// for i in tmp do
10528: LD_ADDR_VAR 0 1
10532: PUSH
10533: LD_VAR 0 2
10537: PUSH
10538: FOR_IN
10539: IFFALSE 10555
// SetBLevel ( i , 10 ) ;
10541: LD_VAR 0 1
10545: PPUSH
10546: LD_INT 10
10548: PPUSH
10549: CALL_OW 241
10553: GO 10538
10555: POP
10556: POP
// end ;
10557: PPOPN 2
10559: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10560: LD_EXP 22
10564: PUSH
10565: LD_EXP 39
10569: AND
10570: IFFALSE 10681
10572: GO 10574
10574: DISABLE
10575: LD_INT 0
10577: PPUSH
10578: PPUSH
10579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_OWVAR 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 25
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: ST_TO_ADDR
// if not tmp then
10616: LD_VAR 0 3
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10681
// un := tmp [ rand ( 1 , tmp ) ] ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_VAR 0 3
10634: PUSH
10635: LD_INT 1
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: CALL_OW 12
10647: ARRAY
10648: ST_TO_ADDR
// if Crawls ( un ) then
10649: LD_VAR 0 2
10653: PPUSH
10654: CALL_OW 318
10658: IFFALSE 10669
// ComWalk ( un ) ;
10660: LD_VAR 0 2
10664: PPUSH
10665: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10669: LD_VAR 0 2
10673: PPUSH
10674: LD_INT 5
10676: PPUSH
10677: CALL_OW 336
// end ;
10681: PPOPN 3
10683: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10684: LD_EXP 22
10688: PUSH
10689: LD_EXP 40
10693: AND
10694: PUSH
10695: LD_OWVAR 67
10699: PUSH
10700: LD_INT 3
10702: LESS
10703: AND
10704: IFFALSE 10723
10706: GO 10708
10708: DISABLE
// Difficulty := Difficulty + 1 ;
10709: LD_ADDR_OWVAR 67
10713: PUSH
10714: LD_OWVAR 67
10718: PUSH
10719: LD_INT 1
10721: PLUS
10722: ST_TO_ADDR
10723: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10724: LD_EXP 22
10728: PUSH
10729: LD_EXP 41
10733: AND
10734: IFFALSE 10837
10736: GO 10738
10738: DISABLE
10739: LD_INT 0
10741: PPUSH
// begin for i := 1 to 5 do
10742: LD_ADDR_VAR 0 1
10746: PUSH
10747: DOUBLE
10748: LD_INT 1
10750: DEC
10751: ST_TO_ADDR
10752: LD_INT 5
10754: PUSH
10755: FOR_TO
10756: IFFALSE 10835
// begin uc_nation := nation_nature ;
10758: LD_ADDR_OWVAR 21
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// uc_side := 0 ;
10766: LD_ADDR_OWVAR 20
10770: PUSH
10771: LD_INT 0
10773: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10774: LD_ADDR_OWVAR 29
10778: PUSH
10779: LD_INT 12
10781: PUSH
10782: LD_INT 12
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: ST_TO_ADDR
// hc_agressivity := 20 ;
10789: LD_ADDR_OWVAR 35
10793: PUSH
10794: LD_INT 20
10796: ST_TO_ADDR
// hc_class := class_tiger ;
10797: LD_ADDR_OWVAR 28
10801: PUSH
10802: LD_INT 14
10804: ST_TO_ADDR
// hc_gallery :=  ;
10805: LD_ADDR_OWVAR 33
10809: PUSH
10810: LD_STRING 
10812: ST_TO_ADDR
// hc_name :=  ;
10813: LD_ADDR_OWVAR 26
10817: PUSH
10818: LD_STRING 
10820: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10821: CALL_OW 44
10825: PPUSH
10826: LD_INT 0
10828: PPUSH
10829: CALL_OW 51
// end ;
10833: GO 10755
10835: POP
10836: POP
// end ;
10837: PPOPN 1
10839: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10840: LD_EXP 22
10844: PUSH
10845: LD_EXP 42
10849: AND
10850: IFFALSE 10859
10852: GO 10854
10854: DISABLE
// StreamSibBomb ;
10855: CALL 10860 0 0
10859: END
// export function StreamSibBomb ; var i , x , y ; begin
10860: LD_INT 0
10862: PPUSH
10863: PPUSH
10864: PPUSH
10865: PPUSH
// result := false ;
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: LD_INT 0
10873: ST_TO_ADDR
// for i := 1 to 16 do
10874: LD_ADDR_VAR 0 2
10878: PUSH
10879: DOUBLE
10880: LD_INT 1
10882: DEC
10883: ST_TO_ADDR
10884: LD_INT 16
10886: PUSH
10887: FOR_TO
10888: IFFALSE 11087
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10890: LD_ADDR_VAR 0 3
10894: PUSH
10895: LD_INT 10
10897: PUSH
10898: LD_INT 20
10900: PUSH
10901: LD_INT 30
10903: PUSH
10904: LD_INT 40
10906: PUSH
10907: LD_INT 50
10909: PUSH
10910: LD_INT 60
10912: PUSH
10913: LD_INT 70
10915: PUSH
10916: LD_INT 80
10918: PUSH
10919: LD_INT 90
10921: PUSH
10922: LD_INT 100
10924: PUSH
10925: LD_INT 110
10927: PUSH
10928: LD_INT 120
10930: PUSH
10931: LD_INT 130
10933: PUSH
10934: LD_INT 140
10936: PUSH
10937: LD_INT 150
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: PUSH
10957: LD_INT 1
10959: PPUSH
10960: LD_INT 15
10962: PPUSH
10963: CALL_OW 12
10967: ARRAY
10968: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10969: LD_ADDR_VAR 0 4
10973: PUSH
10974: LD_INT 10
10976: PUSH
10977: LD_INT 20
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 40
10985: PUSH
10986: LD_INT 50
10988: PUSH
10989: LD_INT 60
10991: PUSH
10992: LD_INT 70
10994: PUSH
10995: LD_INT 80
10997: PUSH
10998: LD_INT 90
11000: PUSH
11001: LD_INT 100
11003: PUSH
11004: LD_INT 110
11006: PUSH
11007: LD_INT 120
11009: PUSH
11010: LD_INT 130
11012: PUSH
11013: LD_INT 140
11015: PUSH
11016: LD_INT 150
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 15
11041: PPUSH
11042: CALL_OW 12
11046: ARRAY
11047: ST_TO_ADDR
// if ValidHex ( x , y ) then
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_VAR 0 4
11057: PPUSH
11058: CALL_OW 488
11062: IFFALSE 11085
// begin result := [ x , y ] ;
11064: LD_ADDR_VAR 0 1
11068: PUSH
11069: LD_VAR 0 3
11073: PUSH
11074: LD_VAR 0 4
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: ST_TO_ADDR
// break ;
11083: GO 11087
// end ; end ;
11085: GO 10887
11087: POP
11088: POP
// if result then
11089: LD_VAR 0 1
11093: IFFALSE 11153
// begin ToLua ( playSibBomb() ) ;
11095: LD_STRING playSibBomb()
11097: PPUSH
11098: CALL_OW 559
// wait ( 0 0$14 ) ;
11102: LD_INT 490
11104: PPUSH
11105: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11109: LD_VAR 0 1
11113: PUSH
11114: LD_INT 1
11116: ARRAY
11117: PPUSH
11118: LD_VAR 0 1
11122: PUSH
11123: LD_INT 2
11125: ARRAY
11126: PPUSH
11127: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: CALL_OW 429
// end ; end ;
11153: LD_VAR 0 1
11157: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11158: LD_EXP 22
11162: PUSH
11163: LD_EXP 44
11167: AND
11168: IFFALSE 11180
11170: GO 11172
11172: DISABLE
// YouLost (  ) ;
11173: LD_STRING 
11175: PPUSH
11176: CALL_OW 104
11180: END
// every 0 0$1 trigger StreamModeActive and sFog do
11181: LD_EXP 22
11185: PUSH
11186: LD_EXP 43
11190: AND
11191: IFFALSE 11205
11193: GO 11195
11195: DISABLE
// FogOff ( your_side ) ;
11196: LD_OWVAR 2
11200: PPUSH
11201: CALL_OW 344
11205: END
// every 0 0$1 trigger StreamModeActive and sSun do
11206: LD_EXP 22
11210: PUSH
11211: LD_EXP 45
11215: AND
11216: IFFALSE 11244
11218: GO 11220
11220: DISABLE
// begin solar_recharge_percent := 0 ;
11221: LD_ADDR_OWVAR 79
11225: PUSH
11226: LD_INT 0
11228: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11229: LD_INT 10500
11231: PPUSH
11232: CALL_OW 67
// solar_recharge_percent := 100 ;
11236: LD_ADDR_OWVAR 79
11240: PUSH
11241: LD_INT 100
11243: ST_TO_ADDR
// end ;
11244: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11245: LD_EXP 22
11249: PUSH
11250: LD_EXP 46
11254: AND
11255: IFFALSE 11494
11257: GO 11259
11259: DISABLE
11260: LD_INT 0
11262: PPUSH
11263: PPUSH
11264: PPUSH
// begin tmp := [ ] ;
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: EMPTY
11271: ST_TO_ADDR
// for i := 1 to 6 do
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: DOUBLE
11278: LD_INT 1
11280: DEC
11281: ST_TO_ADDR
11282: LD_INT 6
11284: PUSH
11285: FOR_TO
11286: IFFALSE 11391
// begin uc_nation := nation_nature ;
11288: LD_ADDR_OWVAR 21
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// uc_side := 0 ;
11296: LD_ADDR_OWVAR 20
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11304: LD_ADDR_OWVAR 29
11308: PUSH
11309: LD_INT 12
11311: PUSH
11312: LD_INT 12
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: ST_TO_ADDR
// hc_agressivity := 20 ;
11319: LD_ADDR_OWVAR 35
11323: PUSH
11324: LD_INT 20
11326: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11327: LD_ADDR_OWVAR 28
11331: PUSH
11332: LD_INT 17
11334: ST_TO_ADDR
// hc_gallery :=  ;
11335: LD_ADDR_OWVAR 33
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// hc_name :=  ;
11343: LD_ADDR_OWVAR 26
11347: PUSH
11348: LD_STRING 
11350: ST_TO_ADDR
// un := CreateHuman ;
11351: LD_ADDR_VAR 0 2
11355: PUSH
11356: CALL_OW 44
11360: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11361: LD_VAR 0 2
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 51
// tmp := tmp ^ un ;
11373: LD_ADDR_VAR 0 3
11377: PUSH
11378: LD_VAR 0 3
11382: PUSH
11383: LD_VAR 0 2
11387: ADD
11388: ST_TO_ADDR
// end ;
11389: GO 11285
11391: POP
11392: POP
// repeat wait ( 0 0$1 ) ;
11393: LD_INT 35
11395: PPUSH
11396: CALL_OW 67
// for un in tmp do
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_VAR 0 3
11409: PUSH
11410: FOR_IN
11411: IFFALSE 11485
// begin if IsDead ( un ) then
11413: LD_VAR 0 2
11417: PPUSH
11418: CALL_OW 301
11422: IFFALSE 11442
// begin tmp := tmp diff un ;
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_VAR 0 2
11438: DIFF
11439: ST_TO_ADDR
// continue ;
11440: GO 11410
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11442: LD_VAR 0 2
11446: PPUSH
11447: LD_INT 3
11449: PUSH
11450: LD_INT 22
11452: PUSH
11453: LD_INT 0
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 69
11468: PPUSH
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 74
11478: PPUSH
11479: CALL_OW 115
// end ;
11483: GO 11410
11485: POP
11486: POP
// until not tmp ;
11487: LD_VAR 0 3
11491: NOT
11492: IFFALSE 11393
// end ;
11494: PPOPN 3
11496: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11497: LD_EXP 22
11501: PUSH
11502: LD_EXP 47
11506: AND
11507: IFFALSE 11561
11509: GO 11511
11511: DISABLE
// begin ToLua ( displayTroll(); ) ;
11512: LD_STRING displayTroll();
11514: PPUSH
11515: CALL_OW 559
// wait ( 3 3$00 ) ;
11519: LD_INT 6300
11521: PPUSH
11522: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11526: LD_STRING hideTroll();
11528: PPUSH
11529: CALL_OW 559
// wait ( 1 1$00 ) ;
11533: LD_INT 2100
11535: PPUSH
11536: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11540: LD_STRING displayTroll();
11542: PPUSH
11543: CALL_OW 559
// wait ( 1 1$00 ) ;
11547: LD_INT 2100
11549: PPUSH
11550: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11554: LD_STRING hideTroll();
11556: PPUSH
11557: CALL_OW 559
// end ;
11561: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11562: LD_EXP 22
11566: PUSH
11567: LD_EXP 48
11571: AND
11572: IFFALSE 11635
11574: GO 11576
11576: DISABLE
11577: LD_INT 0
11579: PPUSH
// begin p := 0 ;
11580: LD_ADDR_VAR 0 1
11584: PUSH
11585: LD_INT 0
11587: ST_TO_ADDR
// repeat game_speed := 1 ;
11588: LD_ADDR_OWVAR 65
11592: PUSH
11593: LD_INT 1
11595: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11596: LD_INT 35
11598: PPUSH
11599: CALL_OW 67
// p := p + 1 ;
11603: LD_ADDR_VAR 0 1
11607: PUSH
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 1
11615: PLUS
11616: ST_TO_ADDR
// until p >= 60 ;
11617: LD_VAR 0 1
11621: PUSH
11622: LD_INT 60
11624: GREATEREQUAL
11625: IFFALSE 11588
// game_speed := 4 ;
11627: LD_ADDR_OWVAR 65
11631: PUSH
11632: LD_INT 4
11634: ST_TO_ADDR
// end ;
11635: PPOPN 1
11637: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11638: LD_EXP 22
11642: PUSH
11643: LD_EXP 49
11647: AND
11648: IFFALSE 11794
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11657: LD_ADDR_VAR 0 1
11661: PUSH
11662: LD_INT 22
11664: PUSH
11665: LD_OWVAR 2
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 2
11676: PUSH
11677: LD_INT 30
11679: PUSH
11680: LD_INT 0
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 30
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// if not depot then
11711: LD_VAR 0 1
11715: NOT
11716: IFFALSE 11720
// exit ;
11718: GO 11794
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11720: LD_ADDR_VAR 0 2
11724: PUSH
11725: LD_VAR 0 1
11729: PUSH
11730: LD_INT 1
11732: PPUSH
11733: LD_VAR 0 1
11737: PPUSH
11738: CALL_OW 12
11742: ARRAY
11743: PPUSH
11744: CALL_OW 274
11748: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11749: LD_VAR 0 2
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: LD_INT 0
11759: PPUSH
11760: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11764: LD_VAR 0 2
11768: PPUSH
11769: LD_INT 2
11771: PPUSH
11772: LD_INT 0
11774: PPUSH
11775: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11779: LD_VAR 0 2
11783: PPUSH
11784: LD_INT 3
11786: PPUSH
11787: LD_INT 0
11789: PPUSH
11790: CALL_OW 277
// end ;
11794: PPOPN 2
11796: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11797: LD_EXP 22
11801: PUSH
11802: LD_EXP 50
11806: AND
11807: IFFALSE 11904
11809: GO 11811
11811: DISABLE
11812: LD_INT 0
11814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_OWVAR 2
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 21
11834: PUSH
11835: LD_INT 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 3
11844: PUSH
11845: LD_INT 23
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 69
11868: ST_TO_ADDR
// if not tmp then
11869: LD_VAR 0 1
11873: NOT
11874: IFFALSE 11878
// exit ;
11876: GO 11904
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11878: LD_VAR 0 1
11882: PUSH
11883: LD_INT 1
11885: PPUSH
11886: LD_VAR 0 1
11890: PPUSH
11891: CALL_OW 12
11895: ARRAY
11896: PPUSH
11897: LD_INT 200
11899: PPUSH
11900: CALL_OW 234
// end ;
11904: PPOPN 1
11906: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11907: LD_EXP 22
11911: PUSH
11912: LD_EXP 51
11916: AND
11917: IFFALSE 11996
11919: GO 11921
11921: DISABLE
11922: LD_INT 0
11924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11925: LD_ADDR_VAR 0 1
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_OWVAR 2
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 21
11944: PUSH
11945: LD_INT 2
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: ST_TO_ADDR
// if not tmp then
11961: LD_VAR 0 1
11965: NOT
11966: IFFALSE 11970
// exit ;
11968: GO 11996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11970: LD_VAR 0 1
11974: PUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_VAR 0 1
11982: PPUSH
11983: CALL_OW 12
11987: ARRAY
11988: PPUSH
11989: LD_INT 60
11991: PPUSH
11992: CALL_OW 234
// end ;
11996: PPOPN 1
11998: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11999: LD_EXP 22
12003: PUSH
12004: LD_EXP 52
12008: AND
12009: IFFALSE 12108
12011: GO 12013
12013: DISABLE
12014: LD_INT 0
12016: PPUSH
12017: PPUSH
// begin enable ;
12018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: LD_INT 22
12026: PUSH
12027: LD_OWVAR 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 61
12038: PUSH
12039: EMPTY
12040: LIST
12041: PUSH
12042: LD_INT 33
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: ST_TO_ADDR
// if not tmp then
12062: LD_VAR 0 1
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12108
// for i in tmp do
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_VAR 0 1
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12106
// if IsControledBy ( i ) then
12084: LD_VAR 0 2
12088: PPUSH
12089: CALL_OW 312
12093: IFFALSE 12104
// ComUnlink ( i ) ;
12095: LD_VAR 0 2
12099: PPUSH
12100: CALL_OW 136
12104: GO 12081
12106: POP
12107: POP
// end ;
12108: PPOPN 2
12110: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12111: LD_EXP 22
12115: PUSH
12116: LD_EXP 53
12120: AND
12121: IFFALSE 12261
12123: GO 12125
12125: DISABLE
12126: LD_INT 0
12128: PPUSH
12129: PPUSH
// begin ToLua ( displayPowell(); ) ;
12130: LD_STRING displayPowell();
12132: PPUSH
12133: CALL_OW 559
// uc_side := 0 ;
12137: LD_ADDR_OWVAR 20
12141: PUSH
12142: LD_INT 0
12144: ST_TO_ADDR
// uc_nation := 2 ;
12145: LD_ADDR_OWVAR 21
12149: PUSH
12150: LD_INT 2
12152: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12153: LD_ADDR_OWVAR 37
12157: PUSH
12158: LD_INT 14
12160: ST_TO_ADDR
// vc_engine := engine_siberite ;
12161: LD_ADDR_OWVAR 39
12165: PUSH
12166: LD_INT 3
12168: ST_TO_ADDR
// vc_control := control_apeman ;
12169: LD_ADDR_OWVAR 38
12173: PUSH
12174: LD_INT 5
12176: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12177: LD_ADDR_OWVAR 40
12181: PUSH
12182: LD_INT 29
12184: ST_TO_ADDR
// un := CreateVehicle ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: CALL_OW 45
12194: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12195: LD_VAR 0 2
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12207: LD_INT 35
12209: PPUSH
12210: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12214: LD_VAR 0 2
12218: PPUSH
12219: LD_INT 22
12221: PUSH
12222: LD_OWVAR 2
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 69
12235: PPUSH
12236: LD_VAR 0 2
12240: PPUSH
12241: CALL_OW 74
12245: PPUSH
12246: CALL_OW 115
// until IsDead ( un ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 301
12259: IFFALSE 12207
// end ;
12261: PPOPN 2
12263: END
// every 0 0$1 trigger StreamModeActive and sStu do
12264: LD_EXP 22
12268: PUSH
12269: LD_EXP 61
12273: AND
12274: IFFALSE 12290
12276: GO 12278
12278: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12279: LD_STRING displayStucuk();
12281: PPUSH
12282: CALL_OW 559
// ResetFog ;
12286: CALL_OW 335
// end ;
12290: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12291: LD_EXP 22
12295: PUSH
12296: LD_EXP 54
12300: AND
12301: IFFALSE 12442
12303: GO 12305
12305: DISABLE
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12310: LD_ADDR_VAR 0 2
12314: PUSH
12315: LD_INT 22
12317: PUSH
12318: LD_OWVAR 2
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 21
12329: PUSH
12330: LD_INT 1
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 69
12345: ST_TO_ADDR
// if not tmp then
12346: LD_VAR 0 2
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12442
// un := tmp [ rand ( 1 , tmp ) ] ;
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: LD_VAR 0 2
12364: PUSH
12365: LD_INT 1
12367: PPUSH
12368: LD_VAR 0 2
12372: PPUSH
12373: CALL_OW 12
12377: ARRAY
12378: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12379: LD_VAR 0 1
12383: PPUSH
12384: LD_INT 0
12386: PPUSH
12387: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12391: LD_VAR 0 1
12395: PPUSH
12396: LD_OWVAR 3
12400: PUSH
12401: LD_VAR 0 1
12405: DIFF
12406: PPUSH
12407: LD_VAR 0 1
12411: PPUSH
12412: CALL_OW 74
12416: PPUSH
12417: CALL_OW 115
// wait ( 0 0$20 ) ;
12421: LD_INT 700
12423: PPUSH
12424: CALL_OW 67
// SetSide ( un , your_side ) ;
12428: LD_VAR 0 1
12432: PPUSH
12433: LD_OWVAR 2
12437: PPUSH
12438: CALL_OW 235
// end ;
12442: PPOPN 2
12444: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12445: LD_EXP 22
12449: PUSH
12450: LD_EXP 55
12454: AND
12455: IFFALSE 12561
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: LD_INT 30
12485: PUSH
12486: LD_INT 0
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 1
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: ST_TO_ADDR
// if not depot then
12517: LD_VAR 0 1
12521: NOT
12522: IFFALSE 12526
// exit ;
12524: GO 12561
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: CALL_OW 250
12539: PPUSH
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: CALL_OW 251
12553: PPUSH
12554: LD_INT 70
12556: PPUSH
12557: CALL_OW 495
// end ;
12561: PPOPN 1
12563: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12564: LD_EXP 22
12568: PUSH
12569: LD_EXP 56
12573: AND
12574: IFFALSE 12785
12576: GO 12578
12578: DISABLE
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12586: LD_ADDR_VAR 0 5
12590: PUSH
12591: LD_INT 22
12593: PUSH
12594: LD_OWVAR 2
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 69
12621: ST_TO_ADDR
// if not tmp then
12622: LD_VAR 0 5
12626: NOT
12627: IFFALSE 12631
// exit ;
12629: GO 12785
// for i in tmp do
12631: LD_ADDR_VAR 0 1
12635: PUSH
12636: LD_VAR 0 5
12640: PUSH
12641: FOR_IN
12642: IFFALSE 12783
// begin d := rand ( 0 , 5 ) ;
12644: LD_ADDR_VAR 0 4
12648: PUSH
12649: LD_INT 0
12651: PPUSH
12652: LD_INT 5
12654: PPUSH
12655: CALL_OW 12
12659: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_VAR 0 1
12669: PPUSH
12670: CALL_OW 250
12674: PPUSH
12675: LD_VAR 0 4
12679: PPUSH
12680: LD_INT 3
12682: PPUSH
12683: LD_INT 12
12685: PPUSH
12686: CALL_OW 12
12690: PPUSH
12691: CALL_OW 272
12695: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12696: LD_ADDR_VAR 0 3
12700: PUSH
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 251
12710: PPUSH
12711: LD_VAR 0 4
12715: PPUSH
12716: LD_INT 3
12718: PPUSH
12719: LD_INT 12
12721: PPUSH
12722: CALL_OW 12
12726: PPUSH
12727: CALL_OW 273
12731: ST_TO_ADDR
// if ValidHex ( x , y ) then
12732: LD_VAR 0 2
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: CALL_OW 488
12746: IFFALSE 12781
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12748: LD_VAR 0 1
12752: PPUSH
12753: LD_VAR 0 2
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: LD_INT 3
12765: PPUSH
12766: LD_INT 6
12768: PPUSH
12769: CALL_OW 12
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 483
// end ;
12781: GO 12641
12783: POP
12784: POP
// end ;
12785: PPOPN 5
12787: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12788: LD_EXP 22
12792: PUSH
12793: LD_EXP 57
12797: AND
12798: IFFALSE 12892
12800: GO 12802
12802: DISABLE
12803: LD_INT 0
12805: PPUSH
12806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12807: LD_ADDR_VAR 0 2
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_OWVAR 2
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 32
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 21
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 69
12853: ST_TO_ADDR
// if not tmp then
12854: LD_VAR 0 2
12858: NOT
12859: IFFALSE 12863
// exit ;
12861: GO 12892
// for i in tmp do
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_VAR 0 2
12872: PUSH
12873: FOR_IN
12874: IFFALSE 12890
// SetFuel ( i , 0 ) ;
12876: LD_VAR 0 1
12880: PPUSH
12881: LD_INT 0
12883: PPUSH
12884: CALL_OW 240
12888: GO 12873
12890: POP
12891: POP
// end ;
12892: PPOPN 2
12894: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12895: LD_EXP 22
12899: PUSH
12900: LD_EXP 58
12904: AND
12905: IFFALSE 12971
12907: GO 12909
12909: DISABLE
12910: LD_INT 0
12912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12913: LD_ADDR_VAR 0 1
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_OWVAR 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 29
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if not tmp then
12949: LD_VAR 0 1
12953: NOT
12954: IFFALSE 12958
// exit ;
12956: GO 12971
// DestroyUnit ( tmp [ 1 ] ) ;
12958: LD_VAR 0 1
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 65
// end ;
12971: PPOPN 1
12973: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12974: LD_EXP 22
12978: PUSH
12979: LD_EXP 60
12983: AND
12984: IFFALSE 13113
12986: GO 12988
12988: DISABLE
12989: LD_INT 0
12991: PPUSH
// begin uc_side := 0 ;
12992: LD_ADDR_OWVAR 20
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// uc_nation := nation_arabian ;
13000: LD_ADDR_OWVAR 21
13004: PUSH
13005: LD_INT 2
13007: ST_TO_ADDR
// hc_gallery :=  ;
13008: LD_ADDR_OWVAR 33
13012: PUSH
13013: LD_STRING 
13015: ST_TO_ADDR
// hc_name :=  ;
13016: LD_ADDR_OWVAR 26
13020: PUSH
13021: LD_STRING 
13023: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13024: LD_INT 1
13026: PPUSH
13027: LD_INT 11
13029: PPUSH
13030: LD_INT 10
13032: PPUSH
13033: CALL_OW 380
// un := CreateHuman ;
13037: LD_ADDR_VAR 0 1
13041: PUSH
13042: CALL_OW 44
13046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13059: LD_INT 35
13061: PPUSH
13062: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13066: LD_VAR 0 1
13070: PPUSH
13071: LD_INT 22
13073: PUSH
13074: LD_OWVAR 2
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: PPUSH
13088: LD_VAR 0 1
13092: PPUSH
13093: CALL_OW 74
13097: PPUSH
13098: CALL_OW 115
// until IsDead ( un ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: CALL_OW 301
13111: IFFALSE 13059
// end ;
13113: PPOPN 1
13115: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13116: LD_EXP 22
13120: PUSH
13121: LD_EXP 62
13125: AND
13126: IFFALSE 13138
13128: GO 13130
13130: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13131: LD_STRING earthquake(getX(game), 0, 32)
13133: PPUSH
13134: CALL_OW 559
13138: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13139: LD_EXP 22
13143: PUSH
13144: LD_EXP 63
13148: AND
13149: IFFALSE 13240
13151: GO 13153
13153: DISABLE
13154: LD_INT 0
13156: PPUSH
// begin enable ;
13157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13158: LD_ADDR_VAR 0 1
13162: PUSH
13163: LD_INT 22
13165: PUSH
13166: LD_OWVAR 2
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 21
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 33
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 69
13204: ST_TO_ADDR
// if not tmp then
13205: LD_VAR 0 1
13209: NOT
13210: IFFALSE 13214
// exit ;
13212: GO 13240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13214: LD_VAR 0 1
13218: PUSH
13219: LD_INT 1
13221: PPUSH
13222: LD_VAR 0 1
13226: PPUSH
13227: CALL_OW 12
13231: ARRAY
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 234
// end ;
13240: PPOPN 1
13242: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13243: LD_EXP 22
13247: PUSH
13248: LD_EXP 64
13252: AND
13253: IFFALSE 13394
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
13261: PPUSH
13262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13263: LD_ADDR_VAR 0 3
13267: PUSH
13268: LD_INT 22
13270: PUSH
13271: LD_OWVAR 2
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 25
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// if not tmp then
13299: LD_VAR 0 3
13303: NOT
13304: IFFALSE 13308
// exit ;
13306: GO 13394
// un := tmp [ rand ( 1 , tmp ) ] ;
13308: LD_ADDR_VAR 0 2
13312: PUSH
13313: LD_VAR 0 3
13317: PUSH
13318: LD_INT 1
13320: PPUSH
13321: LD_VAR 0 3
13325: PPUSH
13326: CALL_OW 12
13330: ARRAY
13331: ST_TO_ADDR
// if Crawls ( un ) then
13332: LD_VAR 0 2
13336: PPUSH
13337: CALL_OW 318
13341: IFFALSE 13352
// ComWalk ( un ) ;
13343: LD_VAR 0 2
13347: PPUSH
13348: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13352: LD_VAR 0 2
13356: PPUSH
13357: LD_INT 9
13359: PPUSH
13360: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13364: LD_INT 28
13366: PPUSH
13367: LD_OWVAR 2
13371: PPUSH
13372: LD_INT 2
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13379: LD_INT 29
13381: PPUSH
13382: LD_OWVAR 2
13386: PPUSH
13387: LD_INT 2
13389: PPUSH
13390: CALL_OW 322
// end ;
13394: PPOPN 3
13396: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13397: LD_EXP 22
13401: PUSH
13402: LD_EXP 65
13406: AND
13407: IFFALSE 13518
13409: GO 13411
13411: DISABLE
13412: LD_INT 0
13414: PPUSH
13415: PPUSH
13416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: LD_INT 22
13424: PUSH
13425: LD_OWVAR 2
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: ST_TO_ADDR
// if not tmp then
13453: LD_VAR 0 3
13457: NOT
13458: IFFALSE 13462
// exit ;
13460: GO 13518
// un := tmp [ rand ( 1 , tmp ) ] ;
13462: LD_ADDR_VAR 0 2
13466: PUSH
13467: LD_VAR 0 3
13471: PUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: CALL_OW 12
13484: ARRAY
13485: ST_TO_ADDR
// if Crawls ( un ) then
13486: LD_VAR 0 2
13490: PPUSH
13491: CALL_OW 318
13495: IFFALSE 13506
// ComWalk ( un ) ;
13497: LD_VAR 0 2
13501: PPUSH
13502: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13506: LD_VAR 0 2
13510: PPUSH
13511: LD_INT 8
13513: PPUSH
13514: CALL_OW 336
// end ;
13518: PPOPN 3
13520: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13521: LD_EXP 22
13525: PUSH
13526: LD_EXP 66
13530: AND
13531: IFFALSE 13675
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_OWVAR 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 21
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 34
13572: PUSH
13573: LD_INT 12
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 34
13582: PUSH
13583: LD_INT 51
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 34
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: PPUSH
13611: CALL_OW 69
13615: ST_TO_ADDR
// if not tmp then
13616: LD_VAR 0 2
13620: NOT
13621: IFFALSE 13625
// exit ;
13623: GO 13675
// for i in tmp do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_VAR 0 2
13634: PUSH
13635: FOR_IN
13636: IFFALSE 13673
// if GetCargo ( i , mat_artifact ) = 0 then
13638: LD_VAR 0 1
13642: PPUSH
13643: LD_INT 4
13645: PPUSH
13646: CALL_OW 289
13650: PUSH
13651: LD_INT 0
13653: EQUAL
13654: IFFALSE 13671
// SetCargo ( i , mat_siberit , 100 ) ;
13656: LD_VAR 0 1
13660: PPUSH
13661: LD_INT 3
13663: PPUSH
13664: LD_INT 100
13666: PPUSH
13667: CALL_OW 290
13671: GO 13635
13673: POP
13674: POP
// end ;
13675: PPOPN 2
13677: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13678: LD_EXP 22
13682: PUSH
13683: LD_EXP 67
13687: AND
13688: IFFALSE 13871
13690: GO 13692
13692: DISABLE
13693: LD_INT 0
13695: PPUSH
13696: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_OWVAR 2
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 69
13718: ST_TO_ADDR
// if not tmp then
13719: LD_VAR 0 2
13723: NOT
13724: IFFALSE 13728
// exit ;
13726: GO 13871
// for i := 1 to 2 do
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: DOUBLE
13734: LD_INT 1
13736: DEC
13737: ST_TO_ADDR
13738: LD_INT 2
13740: PUSH
13741: FOR_TO
13742: IFFALSE 13869
// begin uc_side := your_side ;
13744: LD_ADDR_OWVAR 20
13748: PUSH
13749: LD_OWVAR 2
13753: ST_TO_ADDR
// uc_nation := nation_american ;
13754: LD_ADDR_OWVAR 21
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
// vc_chassis := us_morphling ;
13762: LD_ADDR_OWVAR 37
13766: PUSH
13767: LD_INT 5
13769: ST_TO_ADDR
// vc_engine := engine_siberite ;
13770: LD_ADDR_OWVAR 39
13774: PUSH
13775: LD_INT 3
13777: ST_TO_ADDR
// vc_control := control_computer ;
13778: LD_ADDR_OWVAR 38
13782: PUSH
13783: LD_INT 3
13785: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13786: LD_ADDR_OWVAR 40
13790: PUSH
13791: LD_INT 10
13793: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 1
13801: ARRAY
13802: PPUSH
13803: CALL_OW 310
13807: NOT
13808: IFFALSE 13855
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13810: CALL_OW 45
13814: PPUSH
13815: LD_VAR 0 2
13819: PUSH
13820: LD_INT 1
13822: ARRAY
13823: PPUSH
13824: CALL_OW 250
13828: PPUSH
13829: LD_VAR 0 2
13833: PUSH
13834: LD_INT 1
13836: ARRAY
13837: PPUSH
13838: CALL_OW 251
13842: PPUSH
13843: LD_INT 12
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: CALL_OW 50
13853: GO 13867
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13855: CALL_OW 45
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 51
// end ;
13867: GO 13741
13869: POP
13870: POP
// end ;
13871: PPOPN 2
13873: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13874: LD_EXP 22
13878: PUSH
13879: LD_EXP 68
13883: AND
13884: IFFALSE 14106
13886: GO 13888
13888: DISABLE
13889: LD_INT 0
13891: PPUSH
13892: PPUSH
13893: PPUSH
13894: PPUSH
13895: PPUSH
13896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13897: LD_ADDR_VAR 0 6
13901: PUSH
13902: LD_INT 22
13904: PUSH
13905: LD_OWVAR 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 21
13916: PUSH
13917: LD_INT 1
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 3
13926: PUSH
13927: LD_INT 23
13929: PUSH
13930: LD_INT 0
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not tmp then
13951: LD_VAR 0 6
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 14106
// s1 := rand ( 1 , 4 ) ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 1
13967: PPUSH
13968: LD_INT 4
13970: PPUSH
13971: CALL_OW 12
13975: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13976: LD_ADDR_VAR 0 4
13980: PUSH
13981: LD_VAR 0 6
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: CALL_OW 259
13999: ST_TO_ADDR
// if s1 = 1 then
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 1
14007: EQUAL
14008: IFFALSE 14028
// s2 := rand ( 2 , 4 ) else
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_INT 2
14017: PPUSH
14018: LD_INT 4
14020: PPUSH
14021: CALL_OW 12
14025: ST_TO_ADDR
14026: GO 14036
// s2 := 1 ;
14028: LD_ADDR_VAR 0 3
14032: PUSH
14033: LD_INT 1
14035: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14036: LD_ADDR_VAR 0 5
14040: PUSH
14041: LD_VAR 0 6
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: PPUSH
14050: LD_VAR 0 3
14054: PPUSH
14055: CALL_OW 259
14059: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14060: LD_VAR 0 6
14064: PUSH
14065: LD_INT 1
14067: ARRAY
14068: PPUSH
14069: LD_VAR 0 2
14073: PPUSH
14074: LD_VAR 0 5
14078: PPUSH
14079: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14083: LD_VAR 0 6
14087: PUSH
14088: LD_INT 1
14090: ARRAY
14091: PPUSH
14092: LD_VAR 0 3
14096: PPUSH
14097: LD_VAR 0 4
14101: PPUSH
14102: CALL_OW 237
// end ;
14106: PPOPN 6
14108: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14109: LD_EXP 22
14113: PUSH
14114: LD_EXP 69
14118: AND
14119: IFFALSE 14198
14121: GO 14123
14123: DISABLE
14124: LD_INT 0
14126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14127: LD_ADDR_VAR 0 1
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_OWVAR 2
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 3
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PPUSH
14158: CALL_OW 69
14162: ST_TO_ADDR
// if not tmp then
14163: LD_VAR 0 1
14167: NOT
14168: IFFALSE 14172
// exit ;
14170: GO 14198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14172: LD_VAR 0 1
14176: PUSH
14177: LD_INT 1
14179: PPUSH
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 12
14189: ARRAY
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 234
// end ;
14198: PPOPN 1
14200: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14201: LD_EXP 22
14205: PUSH
14206: LD_EXP 70
14210: AND
14211: IFFALSE 14323
14213: GO 14215
14215: DISABLE
14216: LD_INT 0
14218: PPUSH
14219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_OWVAR 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 30
14242: PUSH
14243: LD_INT 27
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 30
14252: PUSH
14253: LD_INT 26
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 30
14262: PUSH
14263: LD_INT 28
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: ST_TO_ADDR
// if not tmp then
14285: LD_VAR 0 2
14289: NOT
14290: IFFALSE 14294
// exit ;
14292: GO 14323
// for i in tmp do
14294: LD_ADDR_VAR 0 1
14298: PUSH
14299: LD_VAR 0 2
14303: PUSH
14304: FOR_IN
14305: IFFALSE 14321
// SetLives ( i , 1 ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_INT 1
14314: PPUSH
14315: CALL_OW 234
14319: GO 14304
14321: POP
14322: POP
// end ;
14323: PPOPN 2
14325: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14326: LD_EXP 22
14330: PUSH
14331: LD_EXP 71
14335: AND
14336: IFFALSE 14610
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
14345: PPUSH
// begin i := rand ( 1 , 7 ) ;
14346: LD_ADDR_VAR 0 1
14350: PUSH
14351: LD_INT 1
14353: PPUSH
14354: LD_INT 7
14356: PPUSH
14357: CALL_OW 12
14361: ST_TO_ADDR
// case i of 1 :
14362: LD_VAR 0 1
14366: PUSH
14367: LD_INT 1
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14375
14373: GO 14385
14375: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14376: LD_STRING earthquake(getX(game), 0, 32)
14378: PPUSH
14379: CALL_OW 559
14383: GO 14610
14385: LD_INT 2
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14407
14393: POP
// begin ToLua ( displayStucuk(); ) ;
14394: LD_STRING displayStucuk();
14396: PPUSH
14397: CALL_OW 559
// ResetFog ;
14401: CALL_OW 335
// end ; 3 :
14405: GO 14610
14407: LD_INT 3
14409: DOUBLE
14410: EQUAL
14411: IFTRUE 14415
14413: GO 14519
14415: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_OWVAR 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 25
14435: PUSH
14436: LD_INT 1
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// if not tmp then
14452: LD_VAR 0 2
14456: NOT
14457: IFFALSE 14461
// exit ;
14459: GO 14610
// un := tmp [ rand ( 1 , tmp ) ] ;
14461: LD_ADDR_VAR 0 3
14465: PUSH
14466: LD_VAR 0 2
14470: PUSH
14471: LD_INT 1
14473: PPUSH
14474: LD_VAR 0 2
14478: PPUSH
14479: CALL_OW 12
14483: ARRAY
14484: ST_TO_ADDR
// if Crawls ( un ) then
14485: LD_VAR 0 3
14489: PPUSH
14490: CALL_OW 318
14494: IFFALSE 14505
// ComWalk ( un ) ;
14496: LD_VAR 0 3
14500: PPUSH
14501: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14505: LD_VAR 0 3
14509: PPUSH
14510: LD_INT 8
14512: PPUSH
14513: CALL_OW 336
// end ; 4 :
14517: GO 14610
14519: LD_INT 4
14521: DOUBLE
14522: EQUAL
14523: IFTRUE 14527
14525: GO 14588
14527: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14528: LD_ADDR_VAR 0 2
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_OWVAR 2
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 30
14547: PUSH
14548: LD_INT 29
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 69
14563: ST_TO_ADDR
// if not tmp then
14564: LD_VAR 0 2
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14610
// DestroyUnit ( tmp [ 1 ] ) ;
14573: LD_VAR 0 2
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: CALL_OW 65
// end ; 5 .. 7 :
14586: GO 14610
14588: LD_INT 5
14590: DOUBLE
14591: GREATEREQUAL
14592: IFFALSE 14600
14594: LD_INT 7
14596: DOUBLE
14597: LESSEQUAL
14598: IFTRUE 14602
14600: GO 14609
14602: POP
// StreamSibBomb ; end ;
14603: CALL 10860 0 0
14607: GO 14610
14609: POP
// end ;
14610: PPOPN 3
14612: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14613: LD_EXP 22
14617: PUSH
14618: LD_EXP 72
14622: AND
14623: IFFALSE 14779
14625: GO 14627
14627: DISABLE
14628: LD_INT 0
14630: PPUSH
14631: PPUSH
14632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14633: LD_ADDR_VAR 0 2
14637: PUSH
14638: LD_INT 81
14640: PUSH
14641: LD_OWVAR 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 2
14652: PUSH
14653: LD_INT 21
14655: PUSH
14656: LD_INT 1
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 21
14665: PUSH
14666: LD_INT 2
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: ST_TO_ADDR
// if not tmp then
14687: LD_VAR 0 2
14691: NOT
14692: IFFALSE 14696
// exit ;
14694: GO 14779
// p := 0 ;
14696: LD_ADDR_VAR 0 3
14700: PUSH
14701: LD_INT 0
14703: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14704: LD_INT 35
14706: PPUSH
14707: CALL_OW 67
// p := p + 1 ;
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 1
14723: PLUS
14724: ST_TO_ADDR
// for i in tmp do
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_VAR 0 2
14734: PUSH
14735: FOR_IN
14736: IFFALSE 14767
// if GetLives ( i ) < 1000 then
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 256
14747: PUSH
14748: LD_INT 1000
14750: LESS
14751: IFFALSE 14765
// SetLives ( i , 1000 ) ;
14753: LD_VAR 0 1
14757: PPUSH
14758: LD_INT 1000
14760: PPUSH
14761: CALL_OW 234
14765: GO 14735
14767: POP
14768: POP
// until p > 20 ;
14769: LD_VAR 0 3
14773: PUSH
14774: LD_INT 20
14776: GREATER
14777: IFFALSE 14704
// end ;
14779: PPOPN 3
14781: END
// every 0 0$1 trigger StreamModeActive and sTime do
14782: LD_EXP 22
14786: PUSH
14787: LD_EXP 73
14791: AND
14792: IFFALSE 14827
14794: GO 14796
14796: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14797: LD_INT 28
14799: PPUSH
14800: LD_OWVAR 2
14804: PPUSH
14805: LD_INT 2
14807: PPUSH
14808: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14812: LD_INT 30
14814: PPUSH
14815: LD_OWVAR 2
14819: PPUSH
14820: LD_INT 2
14822: PPUSH
14823: CALL_OW 322
// end ;
14827: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14828: LD_EXP 22
14832: PUSH
14833: LD_EXP 74
14837: AND
14838: IFFALSE 14959
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_INT 22
14854: PUSH
14855: LD_OWVAR 2
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: LD_INT 23
14879: PUSH
14880: LD_INT 0
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 69
14900: ST_TO_ADDR
// if not tmp then
14901: LD_VAR 0 2
14905: NOT
14906: IFFALSE 14910
// exit ;
14908: GO 14959
// for i in tmp do
14910: LD_ADDR_VAR 0 1
14914: PUSH
14915: LD_VAR 0 2
14919: PUSH
14920: FOR_IN
14921: IFFALSE 14957
// begin if Crawls ( i ) then
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 318
14932: IFFALSE 14943
// ComWalk ( i ) ;
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 138
// SetClass ( i , 2 ) ;
14943: LD_VAR 0 1
14947: PPUSH
14948: LD_INT 2
14950: PPUSH
14951: CALL_OW 336
// end ;
14955: GO 14920
14957: POP
14958: POP
// end ;
14959: PPOPN 2
14961: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14962: LD_EXP 22
14966: PUSH
14967: LD_EXP 75
14971: AND
14972: IFFALSE 15253
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
14981: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14982: LD_OWVAR 2
14986: PPUSH
14987: LD_INT 9
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: LD_INT 1
14995: PPUSH
14996: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15000: LD_INT 9
15002: PPUSH
15003: LD_OWVAR 2
15007: PPUSH
15008: CALL_OW 343
// uc_side := 9 ;
15012: LD_ADDR_OWVAR 20
15016: PUSH
15017: LD_INT 9
15019: ST_TO_ADDR
// uc_nation := 2 ;
15020: LD_ADDR_OWVAR 21
15024: PUSH
15025: LD_INT 2
15027: ST_TO_ADDR
// hc_name := Dark Warrior ;
15028: LD_ADDR_OWVAR 26
15032: PUSH
15033: LD_STRING Dark Warrior
15035: ST_TO_ADDR
// hc_gallery :=  ;
15036: LD_ADDR_OWVAR 33
15040: PUSH
15041: LD_STRING 
15043: ST_TO_ADDR
// hc_noskilllimit := true ;
15044: LD_ADDR_OWVAR 76
15048: PUSH
15049: LD_INT 1
15051: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15052: LD_ADDR_OWVAR 31
15056: PUSH
15057: LD_INT 30
15059: PUSH
15060: LD_INT 30
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 30
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// un := CreateHuman ;
15075: LD_ADDR_VAR 0 3
15079: PUSH
15080: CALL_OW 44
15084: ST_TO_ADDR
// hc_noskilllimit := false ;
15085: LD_ADDR_OWVAR 76
15089: PUSH
15090: LD_INT 0
15092: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: CALL_OW 51
// p := 0 ;
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15113: LD_INT 35
15115: PPUSH
15116: CALL_OW 67
// p := p + 1 ;
15120: LD_ADDR_VAR 0 2
15124: PUSH
15125: LD_VAR 0 2
15129: PUSH
15130: LD_INT 1
15132: PLUS
15133: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15134: LD_VAR 0 3
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: LESS
15147: IFFALSE 15161
// SetLives ( un , 1000 ) ;
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1000
15156: PPUSH
15157: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 81
15168: PUSH
15169: LD_OWVAR 2
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 91
15180: PUSH
15181: LD_VAR 0 3
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: CALL_OW 74
15212: PPUSH
15213: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15217: LD_VAR 0 2
15221: PUSH
15222: LD_INT 60
15224: GREATER
15225: PUSH
15226: LD_VAR 0 3
15230: PPUSH
15231: CALL_OW 301
15235: OR
15236: IFFALSE 15113
// if un then
15238: LD_VAR 0 3
15242: IFFALSE 15253
// RemoveUnit ( un ) ;
15244: LD_VAR 0 3
15248: PPUSH
15249: CALL_OW 64
// end ;
15253: PPOPN 3
15255: END
