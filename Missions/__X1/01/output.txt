// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3424 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3271 0 0
// PrepareSheikGroup ;
 123: CALL 2909 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2821 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3672 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// SaveForQuickRestart ;
 431: CALL_OW 22
// end ;
 435: LD_VAR 0 1
 439: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 440: LD_INT 2
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: CALL_OW 81
 450: PUSH
 451: LD_INT 2
 453: EQUAL
 454: IFFALSE 600
 456: GO 458
 458: DISABLE
 459: LD_INT 0
 461: PPUSH
// begin goWithHeike := false ;
 462: LD_ADDR_EXP 18
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// DialogueOn ;
 470: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 474: LD_EXP 1
 478: PPUSH
 479: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 483: LD_EXP 5
 487: PPUSH
 488: LD_STRING DK-betray-1
 490: PPUSH
 491: CALL_OW 88
// DialogueOff ;
 495: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 499: LD_EXP 5
 503: PPUSH
 504: LD_INT 90
 506: PPUSH
 507: LD_INT 46
 509: PPUSH
 510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 521: LD_ADDR_VAR 0 1
 525: PUSH
 526: LD_INT 22
 528: PUSH
 529: LD_INT 5
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 25
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: LD_EXP 5
 559: DIFF
 560: PUSH
 561: FOR_IN
 562: IFFALSE 580
// ComAttackUnit ( i , Heike ) ;
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_EXP 1
 573: PPUSH
 574: CALL_OW 115
 578: GO 561
 580: POP
 581: POP
// until IsDead ( Heike ) ;
 582: LD_EXP 1
 586: PPUSH
 587: CALL_OW 301
 591: IFFALSE 514
// YouLost ( Betray ) ;
 593: LD_STRING Betray
 595: PPUSH
 596: CALL_OW 104
// end ;
 600: PPOPN 1
 602: END
// every 0 0$1 trigger goWithHeike do
 603: LD_EXP 18
 607: IFFALSE 662
 609: GO 611
 611: DISABLE
// begin enable ;
 612: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 613: LD_EXP 1
 617: PPUSH
 618: LD_EXP 5
 622: PPUSH
 623: CALL_OW 296
 627: PUSH
 628: LD_INT 3
 630: GREATER
 631: IFFALSE 662
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 633: LD_EXP 5
 637: PPUSH
 638: LD_EXP 1
 642: PPUSH
 643: CALL_OW 250
 647: PPUSH
 648: LD_EXP 1
 652: PPUSH
 653: CALL_OW 251
 657: PPUSH
 658: CALL_OW 111
// end ;
 662: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 663: LD_INT 2
 665: PPUSH
 666: LD_INT 47
 668: PPUSH
 669: LD_INT 68
 671: PPUSH
 672: CALL_OW 293
 676: PUSH
 677: LD_EXP 19
 681: NOT
 682: AND
 683: PUSH
 684: LD_EXP 22
 688: NOT
 689: AND
 690: IFFALSE 751
 692: GO 694
 694: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING DH-spot-1
 702: PPUSH
 703: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 707: LD_INT 47
 709: PPUSH
 710: LD_INT 68
 712: PPUSH
 713: CALL_OW 428
 717: PPUSH
 718: CALL_OW 313
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_STRING DRa-spot-1
 729: PPUSH
 730: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 734: LD_INT 90
 736: PPUSH
 737: LD_INT 41
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 6
 745: NEG
 746: PPUSH
 747: CALL_OW 330
// end ;
 751: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 93
 757: PPUSH
 758: LD_INT 89
 760: PPUSH
 761: CALL_OW 293
 765: PUSH
 766: LD_EXP 19
 770: NOT
 771: AND
 772: PUSH
 773: LD_EXP 22
 777: NOT
 778: AND
 779: IFFALSE 840
 781: GO 783
 783: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING DH-spot-1
 791: PPUSH
 792: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 796: LD_INT 93
 798: PPUSH
 799: LD_INT 89
 801: PPUSH
 802: CALL_OW 428
 806: PPUSH
 807: CALL_OW 313
 811: PUSH
 812: LD_INT 1
 814: ARRAY
 815: PPUSH
 816: LD_STRING DRa-spot-2
 818: PPUSH
 819: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 823: LD_INT 90
 825: PPUSH
 826: LD_INT 41
 828: PPUSH
 829: LD_INT 2
 831: PPUSH
 832: LD_INT 6
 834: NEG
 835: PPUSH
 836: CALL_OW 330
// end ;
 840: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 841: LD_EXP 21
 845: PUSH
 846: LD_EXP 14
 850: PPUSH
 851: LD_INT 101
 853: PUSH
 854: LD_INT 2
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 72
 865: AND
 866: PUSH
 867: LD_EXP 22
 871: NOT
 872: AND
 873: IFFALSE 1197
 875: GO 877
 877: DISABLE
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
 883: PPUSH
 884: PPUSH
// begin enable ;
 885: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_EXP 14
 895: PPUSH
 896: LD_INT 101
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 72
 910: ST_TO_ADDR
// if not tmp then
 911: LD_VAR 0 1
 915: NOT
 916: IFFALSE 920
// exit ;
 918: GO 1197
// InGameOn ;
 920: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 924: LD_EXP 1
 928: PUSH
 929: LD_EXP 5
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: LD_EXP 1
 964: PPUSH
 965: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 969: LD_VAR 0 1
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: LD_STRING DG-meeting-1
 980: PPUSH
 981: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 81
 992: PUSH
 993: LD_INT 10
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 63
1002: PUSH
1003: LD_INT 25
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 108
1012: PUSH
1013: LD_INT 73
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_INT 9999
1032: PUSH
1033: EMPTY
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// for i := 1 to 3 do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 3
1051: PUSH
1052: FOR_TO
1053: IFFALSE 1137
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1055: LD_ADDR_VAR 0 5
1059: PUSH
1060: LD_EXP 1
1064: PPUSH
1065: LD_VAR 0 3
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_VAR 0 3
1084: PUSH
1085: LD_VAR 0 2
1089: ARRAY
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 297
1099: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1100: LD_VAR 0 4
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PUSH
1109: LD_VAR 0 5
1113: GREATER
1114: IFFALSE 1135
// dist := [ tdist , i ] ;
1116: LD_ADDR_VAR 0 4
1120: PUSH
1121: LD_VAR 0 5
1125: PUSH
1126: LD_VAR 0 2
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// end ;
1135: GO 1052
1137: POP
1138: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1139: LD_EXP 1
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 2
1156: ARRAY
1157: ARRAY
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: LD_VAR 0 3
1167: PUSH
1168: LD_VAR 0 4
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ARRAY
1177: PUSH
1178: LD_INT 2
1180: ARRAY
1181: PPUSH
1182: CALL_OW 111
// wait ( 0 0$3 ) ;
1186: LD_INT 105
1188: PPUSH
1189: CALL_OW 67
// InGameOff ;
1193: CALL_OW 9
// end ;
1197: PPOPN 5
1199: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1200: LD_EXP 1
1204: PPUSH
1205: LD_INT 14
1207: PPUSH
1208: CALL_OW 296
1212: PUSH
1213: LD_INT 40
1215: GREATER
1216: PUSH
1217: LD_EXP 1
1221: PPUSH
1222: CALL_OW 316
1226: AND
1227: PUSH
1228: LD_EXP 22
1232: NOT
1233: AND
1234: IFFALSE 1251
1236: GO 1238
1238: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1239: LD_EXP 5
1243: PPUSH
1244: LD_STRING DK-idle-1
1246: PPUSH
1247: CALL_OW 88
// end ;
1251: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1252: LD_INT 2
1254: PPUSH
1255: LD_INT 59
1257: PPUSH
1258: LD_INT 47
1260: PPUSH
1261: CALL_OW 293
1265: PUSH
1266: LD_EXP 22
1270: NOT
1271: AND
1272: IFFALSE 1429
1274: GO 1276
1276: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1277: LD_INT 59
1279: PPUSH
1280: LD_INT 47
1282: PPUSH
1283: LD_INT 2
1285: PPUSH
1286: LD_INT 10
1288: NEG
1289: PPUSH
1290: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1294: LD_INT 59
1296: PPUSH
1297: LD_INT 47
1299: PPUSH
1300: CALL_OW 86
// goWithHeike := false ;
1304: LD_ADDR_EXP 18
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// baseSpotted := true ;
1312: LD_ADDR_EXP 19
1316: PUSH
1317: LD_INT 1
1319: ST_TO_ADDR
// InGameOn ;
1320: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1324: LD_EXP 1
1328: PUSH
1329: LD_EXP 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: LD_INT 54
1340: PPUSH
1341: LD_INT 45
1343: PPUSH
1344: CALL_OW 111
// wait ( 0 0$1 ) ;
1348: LD_INT 35
1350: PPUSH
1351: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1355: LD_EXP 1
1359: PUSH
1360: LD_EXP 5
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: LD_INT 59
1371: PPUSH
1372: LD_INT 47
1374: PPUSH
1375: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1379: LD_EXP 1
1383: PPUSH
1384: LD_STRING DH-base-1
1386: PPUSH
1387: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1391: LD_EXP 5
1395: PPUSH
1396: LD_STRING DK-base-1
1398: PPUSH
1399: CALL_OW 88
// InGameOff ;
1403: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1407: LD_ADDR_EXP 17
1411: PUSH
1412: LD_EXP 17
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ST_TO_ADDR
// goWithHeike := true ;
1421: LD_ADDR_EXP 18
1425: PUSH
1426: LD_INT 1
1428: ST_TO_ADDR
// end ;
1429: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1430: LD_INT 2
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 292
1442: PUSH
1443: LD_EXP 22
1447: NOT
1448: AND
1449: IFFALSE 2791
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
// begin meetingActive := false ;
1460: LD_ADDR_EXP 21
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// goWithHeike := false ;
1468: LD_ADDR_EXP 18
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_INT 6
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 517
1491: ST_TO_ADDR
// for i := 1 to 4 do
1492: LD_ADDR_VAR 0 1
1496: PUSH
1497: DOUBLE
1498: LD_INT 1
1500: DEC
1501: ST_TO_ADDR
1502: LD_INT 4
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1573
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1508: LD_EXP 15
1512: PUSH
1513: LD_VAR 0 1
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 1
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 2
1538: PUSH
1539: LD_INT 2
1541: ARRAY
1542: PUSH
1543: LD_VAR 0 1
1547: ARRAY
1548: PPUSH
1549: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1553: LD_EXP 15
1557: PUSH
1558: LD_VAR 0 1
1562: ARRAY
1563: PPUSH
1564: LD_INT 14
1566: PPUSH
1567: CALL_OW 179
// end ;
1571: GO 1505
1573: POP
1574: POP
// InGameOn ;
1575: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1579: LD_EXP 8
1583: PPUSH
1584: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1588: LD_EXP 1
1592: PPUSH
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_EXP 1
1611: PPUSH
1612: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1623: LD_EXP 1
1627: PPUSH
1628: LD_EXP 8
1632: PPUSH
1633: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_EXP 1
1646: PPUSH
1647: CALL_OW 250
1651: PPUSH
1652: LD_INT 5
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: CALL_OW 272
1662: PPUSH
1663: LD_EXP 1
1667: PPUSH
1668: CALL_OW 251
1672: PPUSH
1673: LD_INT 5
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 273
1683: PPUSH
1684: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_EXP 8
1697: PPUSH
1698: CALL_OW 296
1702: PUSH
1703: LD_INT 5
1705: LESS
1706: PUSH
1707: LD_EXP 5
1711: PPUSH
1712: LD_EXP 8
1716: PPUSH
1717: CALL_OW 296
1721: PUSH
1722: LD_INT 6
1724: LESS
1725: AND
1726: IFFALSE 1616
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1728: LD_EXP 1
1732: PUSH
1733: LD_EXP 5
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: LD_EXP 8
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1751: LD_EXP 8
1755: PUSH
1756: LD_EXP 4
1760: PUSH
1761: LD_EXP 9
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: LD_EXP 1
1775: PPUSH
1776: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1780: LD_INT 7
1782: PPUSH
1783: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1787: LD_EXP 8
1791: PPUSH
1792: LD_STRING DKu-Kurt-1
1794: PPUSH
1795: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1799: LD_EXP 5
1803: PPUSH
1804: LD_STRING DK-Kurt-1
1806: PPUSH
1807: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1811: LD_EXP 8
1815: PPUSH
1816: LD_STRING DKu-Kurt-2
1818: PPUSH
1819: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1823: LD_INT 7
1825: PPUSH
1826: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1830: LD_EXP 1
1834: PPUSH
1835: LD_STRING DH-Kurt-1
1837: PPUSH
1838: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1842: LD_EXP 8
1846: PPUSH
1847: LD_STRING DKu-Kurt-3
1849: PPUSH
1850: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1854: LD_EXP 5
1858: PPUSH
1859: LD_STRING DK-Kurt-3
1861: PPUSH
1862: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1866: LD_EXP 9
1870: PPUSH
1871: LD_STRING DHa-Kurt-3
1873: PPUSH
1874: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1878: LD_EXP 4
1882: PPUSH
1883: LD_STRING DO-Kurt-3
1885: PPUSH
1886: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1890: LD_ADDR_VAR 0 3
1894: PUSH
1895: LD_EXP 8
1899: PUSH
1900: LD_EXP 4
1904: PUSH
1905: LD_EXP 9
1909: PUSH
1910: LD_EXP 5
1914: PUSH
1915: LD_EXP 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_EXP 16
1931: UNION
1932: ST_TO_ADDR
// for i = 1 to tmp2 do
1933: LD_ADDR_VAR 0 1
1937: PUSH
1938: DOUBLE
1939: LD_INT 1
1941: DEC
1942: ST_TO_ADDR
1943: LD_VAR 0 3
1947: PUSH
1948: FOR_TO
1949: IFFALSE 2024
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1951: LD_VAR 0 3
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_INT 4
1978: PLUS
1979: ARRAY
1980: PPUSH
1981: LD_VAR 0 2
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PUSH
1990: LD_VAR 0 1
1994: PUSH
1995: LD_INT 4
1997: PLUS
1998: ARRAY
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2004: LD_VAR 0 3
2008: PUSH
2009: LD_VAR 0 1
2013: ARRAY
2014: PPUSH
2015: LD_INT 14
2017: PPUSH
2018: CALL_OW 179
// end ;
2022: GO 1948
2024: POP
2025: POP
// wait ( 0 0$2 ) ;
2026: LD_INT 70
2028: PPUSH
2029: CALL_OW 67
// CenterOnUnits ( eon ) ;
2033: LD_INT 14
2035: PPUSH
2036: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2040: LD_INT 90
2042: PPUSH
2043: LD_INT 43
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 21
2051: NEG
2052: PPUSH
2053: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2057: LD_EXP 2
2061: PPUSH
2062: LD_INT 84
2064: PPUSH
2065: LD_INT 36
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2072: LD_EXP 2
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2084: LD_EXP 11
2088: PPUSH
2089: LD_INT 85
2091: PPUSH
2092: LD_INT 36
2094: PPUSH
2095: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2099: LD_EXP 11
2103: PPUSH
2104: LD_INT 14
2106: PPUSH
2107: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2111: LD_EXP 10
2115: PPUSH
2116: LD_INT 86
2118: PPUSH
2119: LD_INT 36
2121: PPUSH
2122: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2126: LD_EXP 10
2130: PPUSH
2131: LD_INT 14
2133: PPUSH
2134: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2138: LD_EXP 7
2142: PPUSH
2143: LD_INT 87
2145: PPUSH
2146: LD_INT 36
2148: PPUSH
2149: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2153: LD_EXP 7
2157: PPUSH
2158: LD_INT 14
2160: PPUSH
2161: CALL_OW 179
// wait ( 0 0$3 ) ;
2165: LD_INT 105
2167: PPUSH
2168: CALL_OW 67
// p := 0 ;
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_INT 0
2179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// p := p + 1 ;
2187: LD_ADDR_VAR 0 4
2191: PUSH
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: PLUS
2200: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2201: LD_EXP 1
2205: PPUSH
2206: LD_INT 6
2208: PPUSH
2209: CALL_OW 308
2213: PUSH
2214: LD_VAR 0 4
2218: PUSH
2219: LD_INT 10
2221: GREATER
2222: OR
2223: IFFALSE 2180
// heikeNearbyEon := true ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_INT 88
2240: PPUSH
2241: LD_INT 37
2243: PPUSH
2244: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2248: LD_EXP 6
2252: PPUSH
2253: LD_EXP 13
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2266: LD_EXP 13
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: LD_INT 89
2277: PPUSH
2278: LD_INT 37
2280: PPUSH
2281: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2285: LD_EXP 13
2289: PUSH
2290: LD_INT 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 91
2296: PPUSH
2297: LD_INT 39
2299: PPUSH
2300: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2304: LD_EXP 13
2308: PPUSH
2309: LD_EXP 11
2313: PPUSH
2314: CALL_OW 179
// wait ( 0 0$1 ) ;
2318: LD_INT 35
2320: PPUSH
2321: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2325: LD_EXP 13
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: LD_STRING DS-eon-1
2336: PPUSH
2337: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2341: LD_EXP 6
2345: PPUSH
2346: LD_STRING DSh-eon-1
2348: PPUSH
2349: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2353: LD_EXP 13
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_STRING DS-eon-2
2364: PPUSH
2365: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2369: LD_EXP 6
2373: PPUSH
2374: LD_STRING DSh-eon-1a
2376: PPUSH
2377: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2381: LD_EXP 13
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: LD_INT 92
2392: PPUSH
2393: LD_INT 43
2395: PPUSH
2396: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2400: LD_EXP 13
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_INT 14
2411: PPUSH
2412: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2416: LD_EXP 13
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: LD_INT 93
2427: PPUSH
2428: LD_INT 41
2430: PPUSH
2431: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2435: LD_EXP 13
2439: PUSH
2440: LD_INT 2
2442: ARRAY
2443: PPUSH
2444: LD_INT 93
2446: PPUSH
2447: LD_INT 40
2449: PPUSH
2450: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2454: LD_EXP 6
2458: PPUSH
2459: LD_INT 88
2461: PPUSH
2462: LD_INT 41
2464: PPUSH
2465: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2469: LD_EXP 6
2473: PPUSH
2474: LD_INT 87
2476: PPUSH
2477: LD_INT 41
2479: PPUSH
2480: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2491: LD_EXP 6
2495: PPUSH
2496: LD_INT 88
2498: PPUSH
2499: LD_INT 41
2501: PPUSH
2502: CALL_OW 307
2506: IFFALSE 2484
// wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_STRING DSh-eon-2
2522: PPUSH
2523: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2527: LD_EXP 11
2531: PPUSH
2532: LD_INT 87
2534: PPUSH
2535: LD_INT 40
2537: PPUSH
2538: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2542: LD_EXP 11
2546: PPUSH
2547: LD_INT 86
2549: PPUSH
2550: LD_INT 40
2552: PPUSH
2553: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2557: LD_INT 35
2559: PPUSH
2560: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_INT 87
2571: PPUSH
2572: LD_INT 40
2574: PPUSH
2575: CALL_OW 307
2579: IFFALSE 2557
// Say ( Shariff , DShar-eon-3 ) ;
2581: LD_EXP 11
2585: PPUSH
2586: LD_STRING DShar-eon-3
2588: PPUSH
2589: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2600: LD_EXP 5
2604: PPUSH
2605: LD_EXP 1
2609: PPUSH
2610: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2614: LD_EXP 11
2618: PPUSH
2619: LD_STRING DShar-eon-4
2621: PPUSH
2622: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2626: LD_EXP 5
2630: PPUSH
2631: LD_STRING DK-eon-4
2633: PPUSH
2634: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2638: LD_EXP 5
2642: PPUSH
2643: LD_INT 14
2645: PPUSH
2646: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2650: LD_INT 35
2652: PPUSH
2653: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2657: LD_EXP 5
2661: PPUSH
2662: CALL_OW 305
2666: NOT
2667: IFFALSE 2650
// ComTurnUnit ( Shariff , Heike ) ;
2669: LD_EXP 11
2673: PPUSH
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_STRING DShar-eon-5
2690: PPUSH
2691: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2695: LD_EXP 1
2699: PPUSH
2700: LD_INT 91
2702: PPUSH
2703: LD_INT 44
2705: PPUSH
2706: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2710: LD_EXP 1
2714: PPUSH
2715: LD_INT 14
2717: PPUSH
2718: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2722: LD_INT 35
2724: PPUSH
2725: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2729: LD_EXP 1
2733: PPUSH
2734: LD_INT 91
2736: PPUSH
2737: LD_INT 44
2739: PPUSH
2740: CALL_OW 307
2744: IFFALSE 2722
// Say ( Heike , DH-eon-5 ) ;
2746: LD_EXP 1
2750: PPUSH
2751: LD_STRING DH-eon-5
2753: PPUSH
2754: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2758: LD_EXP 1
2762: PPUSH
2763: LD_INT 14
2765: PPUSH
2766: CALL_OW 120
// wait ( 0 0$2 ) ;
2770: LD_INT 70
2772: PPUSH
2773: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2777: LD_INT 1
2779: PPUSH
2780: LD_STRING %_cont
2782: PPUSH
2783: CALL_OW 340
// InGameOff ;
2787: CALL_OW 9
// end ;
2791: PPOPN 4
2793: END
// every 3 trigger IsSelected ( Kaia ) do
2794: LD_EXP 5
2798: PPUSH
2799: CALL_OW 306
2803: IFFALSE 2820
2805: GO 2807
2807: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2808: LD_EXP 5
2812: PPUSH
2813: LD_INT 42
2815: PPUSH
2816: CALL_OW 582
2820: END
// export function PrepareHeikeGroup ; begin
2821: LD_INT 0
2823: PPUSH
// uc_side := 2 ;
2824: LD_ADDR_OWVAR 20
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// uc_nation := 2 ;
2832: LD_ADDR_OWVAR 21
2836: PUSH
2837: LD_INT 2
2839: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2840: LD_ADDR_EXP 1
2844: PUSH
2845: LD_STRING Heike
2847: PPUSH
2848: CALL_OW 25
2852: ST_TO_ADDR
// uc_side := 5 ;
2853: LD_ADDR_OWVAR 20
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2861: LD_ADDR_EXP 5
2865: PUSH
2866: LD_STRING Kaia
2868: PPUSH
2869: CALL_OW 25
2873: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2874: LD_EXP 1
2878: PPUSH
2879: LD_INT 3
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2889: LD_EXP 5
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 49
// end ;
2904: LD_VAR 0 1
2908: RET
// export function PrepareSheikGroup ; var un , i ; begin
2909: LD_INT 0
2911: PPUSH
2912: PPUSH
2913: PPUSH
// uc_side := 5 ;
2914: LD_ADDR_OWVAR 20
2918: PUSH
2919: LD_INT 5
2921: ST_TO_ADDR
// uc_nation := 2 ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 2
2929: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2930: LD_ADDR_EXP 10
2934: PUSH
2935: LD_STRING Ali
2937: PPUSH
2938: CALL_OW 25
2942: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2943: LD_ADDR_EXP 11
2947: PUSH
2948: LD_STRING Abdul
2950: PPUSH
2951: CALL_OW 25
2955: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2956: LD_ADDR_EXP 2
2960: PUSH
2961: LD_STRING Omar
2963: PPUSH
2964: CALL_OW 25
2968: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2969: LD_ADDR_EXP 7
2973: PUSH
2974: LD_STRING Mahtab
2976: PPUSH
2977: CALL_OW 25
2981: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2982: LD_ADDR_EXP 6
2986: PUSH
2987: LD_STRING Shahrzad
2989: PPUSH
2990: CALL_OW 25
2994: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2995: LD_EXP 10
2999: PPUSH
3000: LD_INT 85
3002: PPUSH
3003: LD_INT 37
3005: PPUSH
3006: LD_INT 0
3008: PPUSH
3009: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3013: LD_EXP 11
3017: PPUSH
3018: LD_INT 87
3020: PPUSH
3021: LD_INT 37
3023: PPUSH
3024: LD_INT 0
3026: PPUSH
3027: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3031: LD_EXP 2
3035: PPUSH
3036: LD_INT 85
3038: PPUSH
3039: LD_INT 35
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3049: LD_EXP 7
3053: PPUSH
3054: LD_INT 86
3056: PPUSH
3057: LD_INT 39
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3067: LD_EXP 6
3071: PPUSH
3072: LD_INT 88
3074: PPUSH
3075: LD_INT 39
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3085: LD_EXP 10
3089: PPUSH
3090: LD_EXP 11
3094: PPUSH
3095: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3099: LD_EXP 11
3103: PPUSH
3104: LD_EXP 10
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3113: LD_EXP 2
3117: PPUSH
3118: LD_EXP 11
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3127: LD_EXP 7
3131: PUSH
3132: LD_EXP 6
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PPUSH
3141: LD_EXP 11
3145: PPUSH
3146: CALL_OW 119
// for i := 1 to 2 do
3150: LD_ADDR_VAR 0 3
3154: PUSH
3155: DOUBLE
3156: LD_INT 1
3158: DEC
3159: ST_TO_ADDR
3160: LD_INT 2
3162: PUSH
3163: FOR_TO
3164: IFFALSE 3250
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 6
3174: PPUSH
3175: CALL_OW 380
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: LD_INT 90
3196: PPUSH
3197: LD_INT 44
3199: PPUSH
3200: LD_INT 3
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3210: LD_VAR 0 2
3214: PPUSH
3215: LD_INT 91
3217: PPUSH
3218: LD_INT 43
3220: PPUSH
3221: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3225: LD_ADDR_EXP 13
3229: PUSH
3230: LD_EXP 13
3234: PPUSH
3235: LD_INT 1
3237: PPUSH
3238: LD_VAR 0 2
3242: PPUSH
3243: CALL_OW 2
3247: ST_TO_ADDR
// end ;
3248: GO 3163
3250: POP
3251: POP
// scientists := scientists diff 0 ;
3252: LD_ADDR_EXP 13
3256: PUSH
3257: LD_EXP 13
3261: PUSH
3262: LD_INT 0
3264: DIFF
3265: ST_TO_ADDR
// end ;
3266: LD_VAR 0 1
3270: RET
// export function PrepareKurtGroup ; var i ; begin
3271: LD_INT 0
3273: PPUSH
3274: PPUSH
// uc_side := 5 ;
3275: LD_ADDR_OWVAR 20
3279: PUSH
3280: LD_INT 5
3282: ST_TO_ADDR
// uc_nation := 2 ;
3283: LD_ADDR_OWVAR 21
3287: PUSH
3288: LD_INT 2
3290: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3291: LD_ADDR_EXP 8
3295: PUSH
3296: LD_STRING Kurt
3298: PPUSH
3299: CALL_OW 25
3303: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3304: LD_ADDR_EXP 4
3308: PUSH
3309: LD_STRING Olaf
3311: PPUSH
3312: CALL_OW 25
3316: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3317: LD_ADDR_EXP 9
3321: PUSH
3322: LD_STRING Hans
3324: PPUSH
3325: CALL_OW 25
3329: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_EXP 8
3339: PUSH
3340: LD_EXP 9
3344: PUSH
3345: LD_EXP 4
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: FOR_IN
3356: IFFALSE 3375
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 10
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
3373: GO 3355
3375: POP
3376: POP
// ComTurnUnit ( Kurt , Hans ) ;
3377: LD_EXP 8
3381: PPUSH
3382: LD_EXP 9
3386: PPUSH
3387: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3391: LD_EXP 4
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3405: LD_EXP 9
3409: PPUSH
3410: LD_EXP 4
3414: PPUSH
3415: CALL_OW 119
// end ;
3419: LD_VAR 0 1
3423: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3424: LD_INT 0
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 3
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 14
3452: DIFF
3453: PUSH
3454: FOR_IN
3455: IFFALSE 3535
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3457: LD_VAR 0 2
3461: PPUSH
3462: CALL_OW 266
3466: PUSH
3467: LD_INT 6
3469: PUSH
3470: LD_INT 31
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: IN
3477: IFFALSE 3501
// SetLives ( i , rand ( 500 , 600 ) ) else
3479: LD_VAR 0 2
3483: PPUSH
3484: LD_INT 500
3486: PPUSH
3487: LD_INT 600
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 234
3499: GO 3521
// SetLives ( i , rand ( 300 , 499 ) ) ;
3501: LD_VAR 0 2
3505: PPUSH
3506: LD_INT 300
3508: PPUSH
3509: LD_INT 499
3511: PPUSH
3512: CALL_OW 12
3516: PPUSH
3517: CALL_OW 234
// SetSide ( i , 5 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 5
3528: PPUSH
3529: CALL_OW 235
// end ;
3533: GO 3454
3535: POP
3536: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3537: LD_ADDR_VAR 0 4
3541: PUSH
3542: LD_INT 9
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 517
3552: ST_TO_ADDR
// uc_side := 4 ;
3553: LD_ADDR_OWVAR 20
3557: PUSH
3558: LD_INT 4
3560: ST_TO_ADDR
// uc_nation := 1 ;
3561: LD_ADDR_OWVAR 21
3565: PUSH
3566: LD_INT 1
3568: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: DOUBLE
3575: LD_INT 1
3577: DEC
3578: ST_TO_ADDR
3579: LD_VAR 0 4
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PUSH
3588: FOR_TO
3589: IFFALSE 3665
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3591: LD_INT 0
3593: PPUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: LD_INT 4
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_VAR 0 2
3612: PUSH
3613: LD_INT 3
3615: MOD
3616: PUSH
3617: LD_INT 1
3619: PLUS
3620: ARRAY
3621: PPUSH
3622: LD_INT 0
3624: PPUSH
3625: CALL_OW 380
// un := CreateHuman ;
3629: LD_ADDR_VAR 0 3
3633: PUSH
3634: CALL_OW 44
3638: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_INT 9
3646: PPUSH
3647: LD_INT 0
3649: PPUSH
3650: CALL_OW 49
// KillUnit ( un ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: CALL_OW 66
// end ;
3663: GO 3588
3665: POP
3666: POP
// end ;
3667: LD_VAR 0 1
3671: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
3679: PPUSH
3680: PPUSH
// uc_side := 5 ;
3681: LD_ADDR_OWVAR 20
3685: PUSH
3686: LD_INT 5
3688: ST_TO_ADDR
// uc_nation := 2 ;
3689: LD_ADDR_OWVAR 21
3693: PUSH
3694: LD_INT 2
3696: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3697: LD_ADDR_VAR 0 6
3701: PUSH
3702: LD_INT 2
3704: PUSH
3705: LD_INT 4
3707: PUSH
3708: LD_INT 5
3710: PUSH
3711: LD_INT 14
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: ST_TO_ADDR
// InitHc ;
3720: CALL_OW 19
// for i in area do
3724: LD_ADDR_VAR 0 2
3728: PUSH
3729: LD_VAR 0 6
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3899
// begin tmp := AreaToList ( i , 0 ) ;
3737: LD_ADDR_VAR 0 5
3741: PUSH
3742: LD_VAR 0 2
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 517
3754: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_VAR 0 5
3769: PUSH
3770: LD_INT 1
3772: ARRAY
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3895
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: LD_INT 3
3785: PPUSH
3786: CALL_OW 380
// un := CreateHuman ;
3790: LD_ADDR_VAR 0 7
3794: PUSH
3795: CALL_OW 44
3799: ST_TO_ADDR
// if i = spawnBaseArea3 then
3800: LD_VAR 0 2
3804: PUSH
3805: LD_INT 5
3807: EQUAL
3808: IFFALSE 3826
// eonGuards := eonGuards ^ un ;
3810: LD_ADDR_EXP 14
3814: PUSH
3815: LD_EXP 14
3819: PUSH
3820: LD_VAR 0 7
3824: ADD
3825: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3826: LD_VAR 0 7
3830: PPUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 49
// ComHold ( un ) ;
3843: LD_VAR 0 7
3847: PPUSH
3848: CALL_OW 140
// if i = spawnBaseArea4 then
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 14
3859: EQUAL
3860: IFFALSE 3893
// begin firstGroup := firstGroup ^ un ;
3862: LD_ADDR_EXP 15
3866: PUSH
3867: LD_EXP 15
3871: PUSH
3872: LD_VAR 0 7
3876: ADD
3877: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3878: LD_VAR 0 7
3882: PPUSH
3883: LD_INT 108
3885: PPUSH
3886: LD_INT 47
3888: PPUSH
3889: CALL_OW 118
// end ; end ;
3893: GO 3774
3895: POP
3896: POP
// end ;
3897: GO 3734
3899: POP
3900: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3901: LD_ADDR_VAR 0 2
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 30
3913: PUSH
3914: LD_INT 31
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: PUSH
3926: FOR_TO
3927: IFFALSE 4021
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 31
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: PUSH
3949: LD_VAR 0 2
3953: ARRAY
3954: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: CALL_OW 380
// un := CreateHuman ;
3968: LD_ADDR_VAR 0 7
3972: PUSH
3973: CALL_OW 44
3977: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3978: LD_VAR 0 7
3982: PPUSH
3983: LD_VAR 0 4
3987: PPUSH
3988: CALL_OW 254
3992: PUSH
3993: LD_INT 3
3995: PLUS
3996: PUSH
3997: LD_INT 6
3999: MOD
4000: PPUSH
4001: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4005: LD_VAR 0 7
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: CALL_OW 52
// end ;
4019: GO 3926
4021: POP
4022: POP
// end ; end_of_file
4023: LD_VAR 0 1
4027: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4028: LD_VAR 0 1
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: PUSH
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 5
4044: EQUAL
4045: AND
4046: IFFALSE 4072
// begin kaiaAttacked := true ;
4048: LD_ADDR_EXP 22
4052: PUSH
4053: LD_INT 1
4055: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4056: LD_INT 2
4058: PPUSH
4059: LD_INT 5
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 80
// end ; end ;
4072: PPOPN 2
4074: END
// every 0 0$1 trigger scientists do var i ;
4075: LD_EXP 13
4079: IFFALSE 4287
4081: GO 4083
4083: DISABLE
4084: LD_INT 0
4086: PPUSH
// begin repeat for i in scientists do
4087: LD_ADDR_VAR 0 1
4091: PUSH
4092: LD_EXP 13
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4272
// begin wait ( 0 0$1 ) ;
4100: LD_INT 35
4102: PPUSH
4103: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4107: LD_VAR 0 1
4111: PPUSH
4112: LD_INT 11
4114: PUSH
4115: LD_INT 13
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 1
4126: PUSH
4127: LD_INT 2
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: CALL_OW 308
4140: NOT
4141: IFFALSE 4176
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 13
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: LD_VAR 0 1
4162: PUSH
4163: LD_INT 2
4165: MOD
4166: PUSH
4167: LD_INT 1
4169: PLUS
4170: ARRAY
4171: PPUSH
4172: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4176: LD_VAR 0 1
4180: PPUSH
4181: LD_INT 14
4183: PPUSH
4184: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4188: LD_VAR 0 1
4192: PPUSH
4193: LD_INT 70
4195: PPUSH
4196: CALL_OW 202
// if rand ( 0 , 1 ) then
4200: LD_INT 0
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL_OW 12
4210: IFFALSE 4224
// AddComAnim ( i , 15 ) ;
4212: LD_VAR 0 1
4216: PPUSH
4217: LD_INT 15
4219: PPUSH
4220: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4248: LD_VAR 0 1
4252: PPUSH
4253: LD_INT 93
4255: PPUSH
4256: LD_INT 40
4258: PPUSH
4259: CALL_OW 178
// wait ( 0 0$1 ) ;
4263: LD_INT 35
4265: PPUSH
4266: CALL_OW 67
// end ;
4270: GO 4097
4272: POP
4273: POP
// wait ( 0 0$10 ) ;
4274: LD_INT 350
4276: PPUSH
4277: CALL_OW 67
// until heikeNearbyEon ;
4281: LD_EXP 20
4285: IFFALSE 4087
// end ; end_of_file
4287: PPOPN 1
4289: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4290: LD_INT 0
4292: PPUSH
// if p2 = 100 then
4293: LD_VAR 0 2
4297: PUSH
4298: LD_INT 100
4300: EQUAL
4301: IFFALSE 5250
// begin if not StreamModeActive then
4303: LD_EXP 23
4307: NOT
4308: IFFALSE 4318
// StreamModeActive := true ;
4310: LD_ADDR_EXP 23
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// if p3 = 0 then
4318: LD_VAR 0 3
4322: PUSH
4323: LD_INT 0
4325: EQUAL
4326: IFFALSE 4332
// InitStreamMode ;
4328: CALL 5410 0 0
// if p3 = 1 then
4332: LD_VAR 0 3
4336: PUSH
4337: LD_INT 1
4339: EQUAL
4340: IFFALSE 4350
// sRocket := true ;
4342: LD_ADDR_EXP 28
4346: PUSH
4347: LD_INT 1
4349: ST_TO_ADDR
// if p3 = 2 then
4350: LD_VAR 0 3
4354: PUSH
4355: LD_INT 2
4357: EQUAL
4358: IFFALSE 4368
// sSpeed := true ;
4360: LD_ADDR_EXP 27
4364: PUSH
4365: LD_INT 1
4367: ST_TO_ADDR
// if p3 = 3 then
4368: LD_VAR 0 3
4372: PUSH
4373: LD_INT 3
4375: EQUAL
4376: IFFALSE 4386
// sEngine := true ;
4378: LD_ADDR_EXP 29
4382: PUSH
4383: LD_INT 1
4385: ST_TO_ADDR
// if p3 = 4 then
4386: LD_VAR 0 3
4390: PUSH
4391: LD_INT 4
4393: EQUAL
4394: IFFALSE 4404
// sSpec := true ;
4396: LD_ADDR_EXP 26
4400: PUSH
4401: LD_INT 1
4403: ST_TO_ADDR
// if p3 = 5 then
4404: LD_VAR 0 3
4408: PUSH
4409: LD_INT 5
4411: EQUAL
4412: IFFALSE 4422
// sLevel := true ;
4414: LD_ADDR_EXP 30
4418: PUSH
4419: LD_INT 1
4421: ST_TO_ADDR
// if p3 = 6 then
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 6
4429: EQUAL
4430: IFFALSE 4440
// sArmoury := true ;
4432: LD_ADDR_EXP 31
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// if p3 = 7 then
4440: LD_VAR 0 3
4444: PUSH
4445: LD_INT 7
4447: EQUAL
4448: IFFALSE 4458
// sRadar := true ;
4450: LD_ADDR_EXP 32
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// if p3 = 8 then
4458: LD_VAR 0 3
4462: PUSH
4463: LD_INT 8
4465: EQUAL
4466: IFFALSE 4476
// sBunker := true ;
4468: LD_ADDR_EXP 33
4472: PUSH
4473: LD_INT 1
4475: ST_TO_ADDR
// if p3 = 9 then
4476: LD_VAR 0 3
4480: PUSH
4481: LD_INT 9
4483: EQUAL
4484: IFFALSE 4494
// sHack := true ;
4486: LD_ADDR_EXP 34
4490: PUSH
4491: LD_INT 1
4493: ST_TO_ADDR
// if p3 = 10 then
4494: LD_VAR 0 3
4498: PUSH
4499: LD_INT 10
4501: EQUAL
4502: IFFALSE 4512
// sFire := true ;
4504: LD_ADDR_EXP 35
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// if p3 = 11 then
4512: LD_VAR 0 3
4516: PUSH
4517: LD_INT 11
4519: EQUAL
4520: IFFALSE 4530
// sRefresh := true ;
4522: LD_ADDR_EXP 36
4526: PUSH
4527: LD_INT 1
4529: ST_TO_ADDR
// if p3 = 12 then
4530: LD_VAR 0 3
4534: PUSH
4535: LD_INT 12
4537: EQUAL
4538: IFFALSE 4548
// sExp := true ;
4540: LD_ADDR_EXP 37
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// if p3 = 13 then
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 13
4555: EQUAL
4556: IFFALSE 4566
// sDepot := true ;
4558: LD_ADDR_EXP 38
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// if p3 = 14 then
4566: LD_VAR 0 3
4570: PUSH
4571: LD_INT 14
4573: EQUAL
4574: IFFALSE 4584
// sFlag := true ;
4576: LD_ADDR_EXP 39
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// if p3 = 15 then
4584: LD_VAR 0 3
4588: PUSH
4589: LD_INT 15
4591: EQUAL
4592: IFFALSE 4602
// sKamikadze := true ;
4594: LD_ADDR_EXP 47
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// if p3 = 16 then
4602: LD_VAR 0 3
4606: PUSH
4607: LD_INT 16
4609: EQUAL
4610: IFFALSE 4620
// sTroll := true ;
4612: LD_ADDR_EXP 48
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// if p3 = 17 then
4620: LD_VAR 0 3
4624: PUSH
4625: LD_INT 17
4627: EQUAL
4628: IFFALSE 4638
// sSlow := true ;
4630: LD_ADDR_EXP 49
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// if p3 = 18 then
4638: LD_VAR 0 3
4642: PUSH
4643: LD_INT 18
4645: EQUAL
4646: IFFALSE 4656
// sLack := true ;
4648: LD_ADDR_EXP 50
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// if p3 = 19 then
4656: LD_VAR 0 3
4660: PUSH
4661: LD_INT 19
4663: EQUAL
4664: IFFALSE 4674
// sTank := true ;
4666: LD_ADDR_EXP 52
4670: PUSH
4671: LD_INT 1
4673: ST_TO_ADDR
// if p3 = 20 then
4674: LD_VAR 0 3
4678: PUSH
4679: LD_INT 20
4681: EQUAL
4682: IFFALSE 4692
// sRemote := true ;
4684: LD_ADDR_EXP 53
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// if p3 = 21 then
4692: LD_VAR 0 3
4696: PUSH
4697: LD_INT 21
4699: EQUAL
4700: IFFALSE 4710
// sPowell := true ;
4702: LD_ADDR_EXP 54
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// if p3 = 22 then
4710: LD_VAR 0 3
4714: PUSH
4715: LD_INT 22
4717: EQUAL
4718: IFFALSE 4728
// sTeleport := true ;
4720: LD_ADDR_EXP 57
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// if p3 = 23 then
4728: LD_VAR 0 3
4732: PUSH
4733: LD_INT 23
4735: EQUAL
4736: IFFALSE 4746
// sOilTower := true ;
4738: LD_ADDR_EXP 59
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// if p3 = 24 then
4746: LD_VAR 0 3
4750: PUSH
4751: LD_INT 24
4753: EQUAL
4754: IFFALSE 4764
// sShovel := true ;
4756: LD_ADDR_EXP 60
4760: PUSH
4761: LD_INT 1
4763: ST_TO_ADDR
// if p3 = 25 then
4764: LD_VAR 0 3
4768: PUSH
4769: LD_INT 25
4771: EQUAL
4772: IFFALSE 4782
// sSheik := true ;
4774: LD_ADDR_EXP 61
4778: PUSH
4779: LD_INT 1
4781: ST_TO_ADDR
// if p3 = 26 then
4782: LD_VAR 0 3
4786: PUSH
4787: LD_INT 26
4789: EQUAL
4790: IFFALSE 4800
// sEarthquake := true ;
4792: LD_ADDR_EXP 63
4796: PUSH
4797: LD_INT 1
4799: ST_TO_ADDR
// if p3 = 27 then
4800: LD_VAR 0 3
4804: PUSH
4805: LD_INT 27
4807: EQUAL
4808: IFFALSE 4818
// sAI := true ;
4810: LD_ADDR_EXP 64
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// if p3 = 28 then
4818: LD_VAR 0 3
4822: PUSH
4823: LD_INT 28
4825: EQUAL
4826: IFFALSE 4836
// sCargo := true ;
4828: LD_ADDR_EXP 67
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// if p3 = 29 then
4836: LD_VAR 0 3
4840: PUSH
4841: LD_INT 29
4843: EQUAL
4844: IFFALSE 4854
// sDLaser := true ;
4846: LD_ADDR_EXP 68
4850: PUSH
4851: LD_INT 1
4853: ST_TO_ADDR
// if p3 = 30 then
4854: LD_VAR 0 3
4858: PUSH
4859: LD_INT 30
4861: EQUAL
4862: IFFALSE 4872
// sExchange := true ;
4864: LD_ADDR_EXP 69
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// if p3 = 31 then
4872: LD_VAR 0 3
4876: PUSH
4877: LD_INT 31
4879: EQUAL
4880: IFFALSE 4890
// sFac := true ;
4882: LD_ADDR_EXP 70
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// if p3 = 32 then
4890: LD_VAR 0 3
4894: PUSH
4895: LD_INT 32
4897: EQUAL
4898: IFFALSE 4908
// sPower := true ;
4900: LD_ADDR_EXP 71
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// if p3 = 33 then
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 33
4915: EQUAL
4916: IFFALSE 4926
// sRandom := true ;
4918: LD_ADDR_EXP 72
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// if p3 = 34 then
4926: LD_VAR 0 3
4930: PUSH
4931: LD_INT 34
4933: EQUAL
4934: IFFALSE 4944
// sShield := true ;
4936: LD_ADDR_EXP 73
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// if p3 = 35 then
4944: LD_VAR 0 3
4948: PUSH
4949: LD_INT 35
4951: EQUAL
4952: IFFALSE 4962
// sTime := true ;
4954: LD_ADDR_EXP 74
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// if p3 = 36 then
4962: LD_VAR 0 3
4966: PUSH
4967: LD_INT 36
4969: EQUAL
4970: IFFALSE 4980
// sTools := true ;
4972: LD_ADDR_EXP 75
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// if p3 = 101 then
4980: LD_VAR 0 3
4984: PUSH
4985: LD_INT 101
4987: EQUAL
4988: IFFALSE 4998
// sSold := true ;
4990: LD_ADDR_EXP 40
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// if p3 = 102 then
4998: LD_VAR 0 3
5002: PUSH
5003: LD_INT 102
5005: EQUAL
5006: IFFALSE 5016
// sDiff := true ;
5008: LD_ADDR_EXP 41
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// if p3 = 103 then
5016: LD_VAR 0 3
5020: PUSH
5021: LD_INT 103
5023: EQUAL
5024: IFFALSE 5034
// sFog := true ;
5026: LD_ADDR_EXP 44
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// if p3 = 104 then
5034: LD_VAR 0 3
5038: PUSH
5039: LD_INT 104
5041: EQUAL
5042: IFFALSE 5052
// sReset := true ;
5044: LD_ADDR_EXP 45
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// if p3 = 105 then
5052: LD_VAR 0 3
5056: PUSH
5057: LD_INT 105
5059: EQUAL
5060: IFFALSE 5070
// sSun := true ;
5062: LD_ADDR_EXP 46
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// if p3 = 106 then
5070: LD_VAR 0 3
5074: PUSH
5075: LD_INT 106
5077: EQUAL
5078: IFFALSE 5088
// sTiger := true ;
5080: LD_ADDR_EXP 42
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// if p3 = 107 then
5088: LD_VAR 0 3
5092: PUSH
5093: LD_INT 107
5095: EQUAL
5096: IFFALSE 5106
// sBomb := true ;
5098: LD_ADDR_EXP 43
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// if p3 = 108 then
5106: LD_VAR 0 3
5110: PUSH
5111: LD_INT 108
5113: EQUAL
5114: IFFALSE 5124
// sWound := true ;
5116: LD_ADDR_EXP 51
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if p3 = 109 then
5124: LD_VAR 0 3
5128: PUSH
5129: LD_INT 109
5131: EQUAL
5132: IFFALSE 5142
// sBetray := true ;
5134: LD_ADDR_EXP 55
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// if p3 = 110 then
5142: LD_VAR 0 3
5146: PUSH
5147: LD_INT 110
5149: EQUAL
5150: IFFALSE 5160
// sContamin := true ;
5152: LD_ADDR_EXP 56
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// if p3 = 111 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 111
5167: EQUAL
5168: IFFALSE 5178
// sOil := true ;
5170: LD_ADDR_EXP 58
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 112 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 112
5185: EQUAL
5186: IFFALSE 5196
// sStu := true ;
5188: LD_ADDR_EXP 62
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 113 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 113
5203: EQUAL
5204: IFFALSE 5214
// sBazooka := true ;
5206: LD_ADDR_EXP 65
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 114 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 114
5221: EQUAL
5222: IFFALSE 5232
// sMortar := true ;
5224: LD_ADDR_EXP 66
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 115 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 115
5239: EQUAL
5240: IFFALSE 5250
// sRanger := true ;
5242: LD_ADDR_EXP 76
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// end ; if p2 = 101 then
5250: LD_VAR 0 2
5254: PUSH
5255: LD_INT 101
5257: EQUAL
5258: IFFALSE 5386
// begin case p3 of 1 :
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 1
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5280
5273: POP
// hHackUnlimitedResources ; 2 :
5274: CALL 16423 0 0
5278: GO 5386
5280: LD_INT 2
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5288
5286: GO 5295
5288: POP
// hHackSetLevel10 ; 3 :
5289: CALL 16556 0 0
5293: GO 5386
5295: LD_INT 3
5297: DOUBLE
5298: EQUAL
5299: IFTRUE 5303
5301: GO 5310
5303: POP
// hHackSetLevel10YourUnits ; 4 :
5304: CALL 16641 0 0
5308: GO 5386
5310: LD_INT 4
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5325
5318: POP
// hHackInvincible ; 5 :
5319: CALL 17089 0 0
5323: GO 5386
5325: LD_INT 5
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5340
5333: POP
// hHackInvisible ; 6 :
5334: CALL 17200 0 0
5338: GO 5386
5340: LD_INT 6
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5355
5348: POP
// hHackChangeYourSide ; 7 :
5349: CALL 17257 0 0
5353: GO 5386
5355: LD_INT 7
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5370
5363: POP
// hHackChangeUnitSide ; 8 :
5364: CALL 17299 0 0
5368: GO 5386
5370: LD_INT 8
5372: DOUBLE
5373: EQUAL
5374: IFTRUE 5378
5376: GO 5385
5378: POP
// hHackFog ; end ;
5379: CALL 17400 0 0
5383: GO 5386
5385: POP
// end ; end ;
5386: LD_VAR 0 7
5390: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5391: GO 5393
5393: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5394: LD_STRING initStreamRollete();
5396: PPUSH
5397: CALL_OW 559
// InitStreamMode ;
5401: CALL 5410 0 0
// DefineStreamItems ( ) ;
5405: CALL 5850 0 0
// end ;
5409: END
// function InitStreamMode ; begin
5410: LD_INT 0
5412: PPUSH
// streamModeActive := false ;
5413: LD_ADDR_EXP 23
5417: PUSH
5418: LD_INT 0
5420: ST_TO_ADDR
// normalCounter := 36 ;
5421: LD_ADDR_EXP 24
5425: PUSH
5426: LD_INT 36
5428: ST_TO_ADDR
// hardcoreCounter := 16 ;
5429: LD_ADDR_EXP 25
5433: PUSH
5434: LD_INT 16
5436: ST_TO_ADDR
// sRocket := false ;
5437: LD_ADDR_EXP 28
5441: PUSH
5442: LD_INT 0
5444: ST_TO_ADDR
// sSpeed := false ;
5445: LD_ADDR_EXP 27
5449: PUSH
5450: LD_INT 0
5452: ST_TO_ADDR
// sEngine := false ;
5453: LD_ADDR_EXP 29
5457: PUSH
5458: LD_INT 0
5460: ST_TO_ADDR
// sSpec := false ;
5461: LD_ADDR_EXP 26
5465: PUSH
5466: LD_INT 0
5468: ST_TO_ADDR
// sLevel := false ;
5469: LD_ADDR_EXP 30
5473: PUSH
5474: LD_INT 0
5476: ST_TO_ADDR
// sArmoury := false ;
5477: LD_ADDR_EXP 31
5481: PUSH
5482: LD_INT 0
5484: ST_TO_ADDR
// sRadar := false ;
5485: LD_ADDR_EXP 32
5489: PUSH
5490: LD_INT 0
5492: ST_TO_ADDR
// sBunker := false ;
5493: LD_ADDR_EXP 33
5497: PUSH
5498: LD_INT 0
5500: ST_TO_ADDR
// sHack := false ;
5501: LD_ADDR_EXP 34
5505: PUSH
5506: LD_INT 0
5508: ST_TO_ADDR
// sFire := false ;
5509: LD_ADDR_EXP 35
5513: PUSH
5514: LD_INT 0
5516: ST_TO_ADDR
// sRefresh := false ;
5517: LD_ADDR_EXP 36
5521: PUSH
5522: LD_INT 0
5524: ST_TO_ADDR
// sExp := false ;
5525: LD_ADDR_EXP 37
5529: PUSH
5530: LD_INT 0
5532: ST_TO_ADDR
// sDepot := false ;
5533: LD_ADDR_EXP 38
5537: PUSH
5538: LD_INT 0
5540: ST_TO_ADDR
// sFlag := false ;
5541: LD_ADDR_EXP 39
5545: PUSH
5546: LD_INT 0
5548: ST_TO_ADDR
// sKamikadze := false ;
5549: LD_ADDR_EXP 47
5553: PUSH
5554: LD_INT 0
5556: ST_TO_ADDR
// sTroll := false ;
5557: LD_ADDR_EXP 48
5561: PUSH
5562: LD_INT 0
5564: ST_TO_ADDR
// sSlow := false ;
5565: LD_ADDR_EXP 49
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// sLack := false ;
5573: LD_ADDR_EXP 50
5577: PUSH
5578: LD_INT 0
5580: ST_TO_ADDR
// sTank := false ;
5581: LD_ADDR_EXP 52
5585: PUSH
5586: LD_INT 0
5588: ST_TO_ADDR
// sRemote := false ;
5589: LD_ADDR_EXP 53
5593: PUSH
5594: LD_INT 0
5596: ST_TO_ADDR
// sPowell := false ;
5597: LD_ADDR_EXP 54
5601: PUSH
5602: LD_INT 0
5604: ST_TO_ADDR
// sTeleport := false ;
5605: LD_ADDR_EXP 57
5609: PUSH
5610: LD_INT 0
5612: ST_TO_ADDR
// sOilTower := false ;
5613: LD_ADDR_EXP 59
5617: PUSH
5618: LD_INT 0
5620: ST_TO_ADDR
// sShovel := false ;
5621: LD_ADDR_EXP 60
5625: PUSH
5626: LD_INT 0
5628: ST_TO_ADDR
// sSheik := false ;
5629: LD_ADDR_EXP 61
5633: PUSH
5634: LD_INT 0
5636: ST_TO_ADDR
// sEarthquake := false ;
5637: LD_ADDR_EXP 63
5641: PUSH
5642: LD_INT 0
5644: ST_TO_ADDR
// sAI := false ;
5645: LD_ADDR_EXP 64
5649: PUSH
5650: LD_INT 0
5652: ST_TO_ADDR
// sCargo := false ;
5653: LD_ADDR_EXP 67
5657: PUSH
5658: LD_INT 0
5660: ST_TO_ADDR
// sDLaser := false ;
5661: LD_ADDR_EXP 68
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// sExchange := false ;
5669: LD_ADDR_EXP 69
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// sFac := false ;
5677: LD_ADDR_EXP 70
5681: PUSH
5682: LD_INT 0
5684: ST_TO_ADDR
// sPower := false ;
5685: LD_ADDR_EXP 71
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// sRandom := false ;
5693: LD_ADDR_EXP 72
5697: PUSH
5698: LD_INT 0
5700: ST_TO_ADDR
// sShield := false ;
5701: LD_ADDR_EXP 73
5705: PUSH
5706: LD_INT 0
5708: ST_TO_ADDR
// sTime := false ;
5709: LD_ADDR_EXP 74
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// sTools := false ;
5717: LD_ADDR_EXP 75
5721: PUSH
5722: LD_INT 0
5724: ST_TO_ADDR
// sSold := false ;
5725: LD_ADDR_EXP 40
5729: PUSH
5730: LD_INT 0
5732: ST_TO_ADDR
// sDiff := false ;
5733: LD_ADDR_EXP 41
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// sFog := false ;
5741: LD_ADDR_EXP 44
5745: PUSH
5746: LD_INT 0
5748: ST_TO_ADDR
// sReset := false ;
5749: LD_ADDR_EXP 45
5753: PUSH
5754: LD_INT 0
5756: ST_TO_ADDR
// sSun := false ;
5757: LD_ADDR_EXP 46
5761: PUSH
5762: LD_INT 0
5764: ST_TO_ADDR
// sTiger := false ;
5765: LD_ADDR_EXP 42
5769: PUSH
5770: LD_INT 0
5772: ST_TO_ADDR
// sBomb := false ;
5773: LD_ADDR_EXP 43
5777: PUSH
5778: LD_INT 0
5780: ST_TO_ADDR
// sWound := false ;
5781: LD_ADDR_EXP 51
5785: PUSH
5786: LD_INT 0
5788: ST_TO_ADDR
// sBetray := false ;
5789: LD_ADDR_EXP 55
5793: PUSH
5794: LD_INT 0
5796: ST_TO_ADDR
// sContamin := false ;
5797: LD_ADDR_EXP 56
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// sOil := false ;
5805: LD_ADDR_EXP 58
5809: PUSH
5810: LD_INT 0
5812: ST_TO_ADDR
// sStu := false ;
5813: LD_ADDR_EXP 62
5817: PUSH
5818: LD_INT 0
5820: ST_TO_ADDR
// sBazooka := false ;
5821: LD_ADDR_EXP 65
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// sMortar := false ;
5829: LD_ADDR_EXP 66
5833: PUSH
5834: LD_INT 0
5836: ST_TO_ADDR
// sRanger := false ;
5837: LD_ADDR_EXP 76
5841: PUSH
5842: LD_INT 0
5844: ST_TO_ADDR
// end ;
5845: LD_VAR 0 1
5849: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
// result := [ ] ;
5857: LD_ADDR_VAR 0 1
5861: PUSH
5862: EMPTY
5863: ST_TO_ADDR
// if campaign_id = 1 then
5864: LD_OWVAR 69
5868: PUSH
5869: LD_INT 1
5871: EQUAL
5872: IFFALSE 8810
// begin case mission_number of 1 :
5874: LD_OWVAR 70
5878: PUSH
5879: LD_INT 1
5881: DOUBLE
5882: EQUAL
5883: IFTRUE 5887
5885: GO 5951
5887: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5888: LD_ADDR_VAR 0 1
5892: PUSH
5893: LD_INT 2
5895: PUSH
5896: LD_INT 4
5898: PUSH
5899: LD_INT 11
5901: PUSH
5902: LD_INT 12
5904: PUSH
5905: LD_INT 15
5907: PUSH
5908: LD_INT 16
5910: PUSH
5911: LD_INT 22
5913: PUSH
5914: LD_INT 23
5916: PUSH
5917: LD_INT 26
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: PUSH
5931: LD_INT 101
5933: PUSH
5934: LD_INT 102
5936: PUSH
5937: LD_INT 106
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: ST_TO_ADDR
5949: GO 8808
5951: LD_INT 2
5953: DOUBLE
5954: EQUAL
5955: IFTRUE 5959
5957: GO 6031
5959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5960: LD_ADDR_VAR 0 1
5964: PUSH
5965: LD_INT 2
5967: PUSH
5968: LD_INT 4
5970: PUSH
5971: LD_INT 11
5973: PUSH
5974: LD_INT 12
5976: PUSH
5977: LD_INT 15
5979: PUSH
5980: LD_INT 16
5982: PUSH
5983: LD_INT 22
5985: PUSH
5986: LD_INT 23
5988: PUSH
5989: LD_INT 26
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 101
6005: PUSH
6006: LD_INT 102
6008: PUSH
6009: LD_INT 105
6011: PUSH
6012: LD_INT 106
6014: PUSH
6015: LD_INT 108
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: ST_TO_ADDR
6029: GO 8808
6031: LD_INT 3
6033: DOUBLE
6034: EQUAL
6035: IFTRUE 6039
6037: GO 6115
6039: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_INT 2
6047: PUSH
6048: LD_INT 4
6050: PUSH
6051: LD_INT 5
6053: PUSH
6054: LD_INT 11
6056: PUSH
6057: LD_INT 12
6059: PUSH
6060: LD_INT 15
6062: PUSH
6063: LD_INT 16
6065: PUSH
6066: LD_INT 22
6068: PUSH
6069: LD_INT 26
6071: PUSH
6072: LD_INT 36
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 101
6089: PUSH
6090: LD_INT 102
6092: PUSH
6093: LD_INT 105
6095: PUSH
6096: LD_INT 106
6098: PUSH
6099: LD_INT 108
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: ST_TO_ADDR
6113: GO 8808
6115: LD_INT 4
6117: DOUBLE
6118: EQUAL
6119: IFTRUE 6123
6121: GO 6207
6123: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6124: LD_ADDR_VAR 0 1
6128: PUSH
6129: LD_INT 2
6131: PUSH
6132: LD_INT 4
6134: PUSH
6135: LD_INT 5
6137: PUSH
6138: LD_INT 8
6140: PUSH
6141: LD_INT 11
6143: PUSH
6144: LD_INT 12
6146: PUSH
6147: LD_INT 15
6149: PUSH
6150: LD_INT 16
6152: PUSH
6153: LD_INT 22
6155: PUSH
6156: LD_INT 23
6158: PUSH
6159: LD_INT 26
6161: PUSH
6162: LD_INT 36
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 101
6181: PUSH
6182: LD_INT 102
6184: PUSH
6185: LD_INT 105
6187: PUSH
6188: LD_INT 106
6190: PUSH
6191: LD_INT 108
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: ST_TO_ADDR
6205: GO 8808
6207: LD_INT 5
6209: DOUBLE
6210: EQUAL
6211: IFTRUE 6215
6213: GO 6315
6215: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6216: LD_ADDR_VAR 0 1
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: LD_INT 6
6232: PUSH
6233: LD_INT 8
6235: PUSH
6236: LD_INT 11
6238: PUSH
6239: LD_INT 12
6241: PUSH
6242: LD_INT 15
6244: PUSH
6245: LD_INT 16
6247: PUSH
6248: LD_INT 22
6250: PUSH
6251: LD_INT 23
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 26
6259: PUSH
6260: LD_INT 36
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 101
6281: PUSH
6282: LD_INT 102
6284: PUSH
6285: LD_INT 105
6287: PUSH
6288: LD_INT 106
6290: PUSH
6291: LD_INT 108
6293: PUSH
6294: LD_INT 109
6296: PUSH
6297: LD_INT 112
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: ST_TO_ADDR
6313: GO 8808
6315: LD_INT 6
6317: DOUBLE
6318: EQUAL
6319: IFTRUE 6323
6321: GO 6443
6323: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 2
6331: PUSH
6332: LD_INT 4
6334: PUSH
6335: LD_INT 5
6337: PUSH
6338: LD_INT 6
6340: PUSH
6341: LD_INT 8
6343: PUSH
6344: LD_INT 11
6346: PUSH
6347: LD_INT 12
6349: PUSH
6350: LD_INT 15
6352: PUSH
6353: LD_INT 16
6355: PUSH
6356: LD_INT 20
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 23
6367: PUSH
6368: LD_INT 25
6370: PUSH
6371: LD_INT 26
6373: PUSH
6374: LD_INT 30
6376: PUSH
6377: LD_INT 31
6379: PUSH
6380: LD_INT 32
6382: PUSH
6383: LD_INT 36
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 101
6409: PUSH
6410: LD_INT 102
6412: PUSH
6413: LD_INT 105
6415: PUSH
6416: LD_INT 106
6418: PUSH
6419: LD_INT 108
6421: PUSH
6422: LD_INT 109
6424: PUSH
6425: LD_INT 112
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: ST_TO_ADDR
6441: GO 8808
6443: LD_INT 7
6445: DOUBLE
6446: EQUAL
6447: IFTRUE 6451
6449: GO 6551
6451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6452: LD_ADDR_VAR 0 1
6456: PUSH
6457: LD_INT 2
6459: PUSH
6460: LD_INT 4
6462: PUSH
6463: LD_INT 5
6465: PUSH
6466: LD_INT 7
6468: PUSH
6469: LD_INT 11
6471: PUSH
6472: LD_INT 12
6474: PUSH
6475: LD_INT 15
6477: PUSH
6478: LD_INT 16
6480: PUSH
6481: LD_INT 20
6483: PUSH
6484: LD_INT 21
6486: PUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 23
6492: PUSH
6493: LD_INT 25
6495: PUSH
6496: LD_INT 26
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 101
6517: PUSH
6518: LD_INT 102
6520: PUSH
6521: LD_INT 103
6523: PUSH
6524: LD_INT 105
6526: PUSH
6527: LD_INT 106
6529: PUSH
6530: LD_INT 108
6532: PUSH
6533: LD_INT 112
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: ST_TO_ADDR
6549: GO 8808
6551: LD_INT 8
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6687
6559: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6560: LD_ADDR_VAR 0 1
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 4
6570: PUSH
6571: LD_INT 5
6573: PUSH
6574: LD_INT 6
6576: PUSH
6577: LD_INT 7
6579: PUSH
6580: LD_INT 8
6582: PUSH
6583: LD_INT 11
6585: PUSH
6586: LD_INT 12
6588: PUSH
6589: LD_INT 15
6591: PUSH
6592: LD_INT 16
6594: PUSH
6595: LD_INT 20
6597: PUSH
6598: LD_INT 21
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: LD_INT 23
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 26
6612: PUSH
6613: LD_INT 30
6615: PUSH
6616: LD_INT 31
6618: PUSH
6619: LD_INT 32
6621: PUSH
6622: LD_INT 36
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 101
6649: PUSH
6650: LD_INT 102
6652: PUSH
6653: LD_INT 103
6655: PUSH
6656: LD_INT 105
6658: PUSH
6659: LD_INT 106
6661: PUSH
6662: LD_INT 108
6664: PUSH
6665: LD_INT 109
6667: PUSH
6668: LD_INT 112
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: ST_TO_ADDR
6685: GO 8808
6687: LD_INT 9
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6695
6693: GO 6831
6695: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6696: LD_ADDR_VAR 0 1
6700: PUSH
6701: LD_INT 2
6703: PUSH
6704: LD_INT 4
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: LD_INT 6
6712: PUSH
6713: LD_INT 7
6715: PUSH
6716: LD_INT 8
6718: PUSH
6719: LD_INT 11
6721: PUSH
6722: LD_INT 12
6724: PUSH
6725: LD_INT 15
6727: PUSH
6728: LD_INT 16
6730: PUSH
6731: LD_INT 20
6733: PUSH
6734: LD_INT 21
6736: PUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 23
6742: PUSH
6743: LD_INT 25
6745: PUSH
6746: LD_INT 26
6748: PUSH
6749: LD_INT 28
6751: PUSH
6752: LD_INT 30
6754: PUSH
6755: LD_INT 31
6757: PUSH
6758: LD_INT 32
6760: PUSH
6761: LD_INT 36
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 101
6789: PUSH
6790: LD_INT 102
6792: PUSH
6793: LD_INT 103
6795: PUSH
6796: LD_INT 105
6798: PUSH
6799: LD_INT 106
6801: PUSH
6802: LD_INT 108
6804: PUSH
6805: LD_INT 109
6807: PUSH
6808: LD_INT 112
6810: PUSH
6811: LD_INT 114
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: ST_TO_ADDR
6829: GO 8808
6831: LD_INT 10
6833: DOUBLE
6834: EQUAL
6835: IFTRUE 6839
6837: GO 7023
6839: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6840: LD_ADDR_VAR 0 1
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 4
6850: PUSH
6851: LD_INT 5
6853: PUSH
6854: LD_INT 6
6856: PUSH
6857: LD_INT 7
6859: PUSH
6860: LD_INT 8
6862: PUSH
6863: LD_INT 9
6865: PUSH
6866: LD_INT 10
6868: PUSH
6869: LD_INT 11
6871: PUSH
6872: LD_INT 12
6874: PUSH
6875: LD_INT 13
6877: PUSH
6878: LD_INT 14
6880: PUSH
6881: LD_INT 15
6883: PUSH
6884: LD_INT 16
6886: PUSH
6887: LD_INT 17
6889: PUSH
6890: LD_INT 18
6892: PUSH
6893: LD_INT 19
6895: PUSH
6896: LD_INT 20
6898: PUSH
6899: LD_INT 21
6901: PUSH
6902: LD_INT 22
6904: PUSH
6905: LD_INT 23
6907: PUSH
6908: LD_INT 24
6910: PUSH
6911: LD_INT 25
6913: PUSH
6914: LD_INT 26
6916: PUSH
6917: LD_INT 28
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 31
6925: PUSH
6926: LD_INT 32
6928: PUSH
6929: LD_INT 36
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 101
6965: PUSH
6966: LD_INT 102
6968: PUSH
6969: LD_INT 103
6971: PUSH
6972: LD_INT 104
6974: PUSH
6975: LD_INT 105
6977: PUSH
6978: LD_INT 106
6980: PUSH
6981: LD_INT 107
6983: PUSH
6984: LD_INT 108
6986: PUSH
6987: LD_INT 109
6989: PUSH
6990: LD_INT 110
6992: PUSH
6993: LD_INT 111
6995: PUSH
6996: LD_INT 112
6998: PUSH
6999: LD_INT 114
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 8808
7023: LD_INT 11
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7223
7031: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7032: LD_ADDR_VAR 0 1
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: LD_INT 4
7045: PUSH
7046: LD_INT 5
7048: PUSH
7049: LD_INT 6
7051: PUSH
7052: LD_INT 7
7054: PUSH
7055: LD_INT 8
7057: PUSH
7058: LD_INT 9
7060: PUSH
7061: LD_INT 10
7063: PUSH
7064: LD_INT 11
7066: PUSH
7067: LD_INT 12
7069: PUSH
7070: LD_INT 13
7072: PUSH
7073: LD_INT 14
7075: PUSH
7076: LD_INT 15
7078: PUSH
7079: LD_INT 16
7081: PUSH
7082: LD_INT 17
7084: PUSH
7085: LD_INT 18
7087: PUSH
7088: LD_INT 19
7090: PUSH
7091: LD_INT 20
7093: PUSH
7094: LD_INT 21
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_INT 23
7102: PUSH
7103: LD_INT 24
7105: PUSH
7106: LD_INT 25
7108: PUSH
7109: LD_INT 26
7111: PUSH
7112: LD_INT 28
7114: PUSH
7115: LD_INT 30
7117: PUSH
7118: LD_INT 31
7120: PUSH
7121: LD_INT 32
7123: PUSH
7124: LD_INT 34
7126: PUSH
7127: LD_INT 36
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 101
7165: PUSH
7166: LD_INT 102
7168: PUSH
7169: LD_INT 103
7171: PUSH
7172: LD_INT 104
7174: PUSH
7175: LD_INT 105
7177: PUSH
7178: LD_INT 106
7180: PUSH
7181: LD_INT 107
7183: PUSH
7184: LD_INT 108
7186: PUSH
7187: LD_INT 109
7189: PUSH
7190: LD_INT 110
7192: PUSH
7193: LD_INT 111
7195: PUSH
7196: LD_INT 112
7198: PUSH
7199: LD_INT 114
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 8808
7223: LD_INT 12
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7439
7231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7232: LD_ADDR_VAR 0 1
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 4
7248: PUSH
7249: LD_INT 5
7251: PUSH
7252: LD_INT 6
7254: PUSH
7255: LD_INT 7
7257: PUSH
7258: LD_INT 8
7260: PUSH
7261: LD_INT 9
7263: PUSH
7264: LD_INT 10
7266: PUSH
7267: LD_INT 11
7269: PUSH
7270: LD_INT 12
7272: PUSH
7273: LD_INT 13
7275: PUSH
7276: LD_INT 14
7278: PUSH
7279: LD_INT 15
7281: PUSH
7282: LD_INT 16
7284: PUSH
7285: LD_INT 17
7287: PUSH
7288: LD_INT 18
7290: PUSH
7291: LD_INT 19
7293: PUSH
7294: LD_INT 20
7296: PUSH
7297: LD_INT 21
7299: PUSH
7300: LD_INT 22
7302: PUSH
7303: LD_INT 23
7305: PUSH
7306: LD_INT 24
7308: PUSH
7309: LD_INT 25
7311: PUSH
7312: LD_INT 26
7314: PUSH
7315: LD_INT 27
7317: PUSH
7318: LD_INT 28
7320: PUSH
7321: LD_INT 30
7323: PUSH
7324: LD_INT 31
7326: PUSH
7327: LD_INT 32
7329: PUSH
7330: LD_INT 33
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 36
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 101
7377: PUSH
7378: LD_INT 102
7380: PUSH
7381: LD_INT 103
7383: PUSH
7384: LD_INT 104
7386: PUSH
7387: LD_INT 105
7389: PUSH
7390: LD_INT 106
7392: PUSH
7393: LD_INT 107
7395: PUSH
7396: LD_INT 108
7398: PUSH
7399: LD_INT 109
7401: PUSH
7402: LD_INT 110
7404: PUSH
7405: LD_INT 111
7407: PUSH
7408: LD_INT 112
7410: PUSH
7411: LD_INT 113
7413: PUSH
7414: LD_INT 114
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: ST_TO_ADDR
7437: GO 8808
7439: LD_INT 13
7441: DOUBLE
7442: EQUAL
7443: IFTRUE 7447
7445: GO 7643
7447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7448: LD_ADDR_VAR 0 1
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: LD_INT 2
7458: PUSH
7459: LD_INT 3
7461: PUSH
7462: LD_INT 4
7464: PUSH
7465: LD_INT 5
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: LD_INT 9
7473: PUSH
7474: LD_INT 10
7476: PUSH
7477: LD_INT 11
7479: PUSH
7480: LD_INT 12
7482: PUSH
7483: LD_INT 14
7485: PUSH
7486: LD_INT 15
7488: PUSH
7489: LD_INT 16
7491: PUSH
7492: LD_INT 17
7494: PUSH
7495: LD_INT 18
7497: PUSH
7498: LD_INT 19
7500: PUSH
7501: LD_INT 20
7503: PUSH
7504: LD_INT 21
7506: PUSH
7507: LD_INT 22
7509: PUSH
7510: LD_INT 23
7512: PUSH
7513: LD_INT 24
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 26
7521: PUSH
7522: LD_INT 27
7524: PUSH
7525: LD_INT 28
7527: PUSH
7528: LD_INT 30
7530: PUSH
7531: LD_INT 31
7533: PUSH
7534: LD_INT 32
7536: PUSH
7537: LD_INT 33
7539: PUSH
7540: LD_INT 34
7542: PUSH
7543: LD_INT 36
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 101
7581: PUSH
7582: LD_INT 102
7584: PUSH
7585: LD_INT 103
7587: PUSH
7588: LD_INT 104
7590: PUSH
7591: LD_INT 105
7593: PUSH
7594: LD_INT 106
7596: PUSH
7597: LD_INT 107
7599: PUSH
7600: LD_INT 108
7602: PUSH
7603: LD_INT 109
7605: PUSH
7606: LD_INT 110
7608: PUSH
7609: LD_INT 111
7611: PUSH
7612: LD_INT 112
7614: PUSH
7615: LD_INT 113
7617: PUSH
7618: LD_INT 114
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: ST_TO_ADDR
7641: GO 8808
7643: LD_INT 14
7645: DOUBLE
7646: EQUAL
7647: IFTRUE 7651
7649: GO 7863
7651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7652: LD_ADDR_VAR 0 1
7656: PUSH
7657: LD_INT 1
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: LD_INT 3
7665: PUSH
7666: LD_INT 4
7668: PUSH
7669: LD_INT 5
7671: PUSH
7672: LD_INT 6
7674: PUSH
7675: LD_INT 7
7677: PUSH
7678: LD_INT 8
7680: PUSH
7681: LD_INT 9
7683: PUSH
7684: LD_INT 10
7686: PUSH
7687: LD_INT 11
7689: PUSH
7690: LD_INT 12
7692: PUSH
7693: LD_INT 13
7695: PUSH
7696: LD_INT 14
7698: PUSH
7699: LD_INT 15
7701: PUSH
7702: LD_INT 16
7704: PUSH
7705: LD_INT 17
7707: PUSH
7708: LD_INT 18
7710: PUSH
7711: LD_INT 19
7713: PUSH
7714: LD_INT 20
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 23
7725: PUSH
7726: LD_INT 24
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 26
7734: PUSH
7735: LD_INT 27
7737: PUSH
7738: LD_INT 28
7740: PUSH
7741: LD_INT 29
7743: PUSH
7744: LD_INT 30
7746: PUSH
7747: LD_INT 31
7749: PUSH
7750: LD_INT 32
7752: PUSH
7753: LD_INT 33
7755: PUSH
7756: LD_INT 34
7758: PUSH
7759: LD_INT 36
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 101
7801: PUSH
7802: LD_INT 102
7804: PUSH
7805: LD_INT 103
7807: PUSH
7808: LD_INT 104
7810: PUSH
7811: LD_INT 105
7813: PUSH
7814: LD_INT 106
7816: PUSH
7817: LD_INT 107
7819: PUSH
7820: LD_INT 108
7822: PUSH
7823: LD_INT 109
7825: PUSH
7826: LD_INT 110
7828: PUSH
7829: LD_INT 111
7831: PUSH
7832: LD_INT 112
7834: PUSH
7835: LD_INT 113
7837: PUSH
7838: LD_INT 114
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: ST_TO_ADDR
7861: GO 8808
7863: LD_INT 15
7865: DOUBLE
7866: EQUAL
7867: IFTRUE 7871
7869: GO 8083
7871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7872: LD_ADDR_VAR 0 1
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 2
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: LD_INT 4
7888: PUSH
7889: LD_INT 5
7891: PUSH
7892: LD_INT 6
7894: PUSH
7895: LD_INT 7
7897: PUSH
7898: LD_INT 8
7900: PUSH
7901: LD_INT 9
7903: PUSH
7904: LD_INT 10
7906: PUSH
7907: LD_INT 11
7909: PUSH
7910: LD_INT 12
7912: PUSH
7913: LD_INT 13
7915: PUSH
7916: LD_INT 14
7918: PUSH
7919: LD_INT 15
7921: PUSH
7922: LD_INT 16
7924: PUSH
7925: LD_INT 17
7927: PUSH
7928: LD_INT 18
7930: PUSH
7931: LD_INT 19
7933: PUSH
7934: LD_INT 20
7936: PUSH
7937: LD_INT 21
7939: PUSH
7940: LD_INT 22
7942: PUSH
7943: LD_INT 23
7945: PUSH
7946: LD_INT 24
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 26
7954: PUSH
7955: LD_INT 27
7957: PUSH
7958: LD_INT 28
7960: PUSH
7961: LD_INT 29
7963: PUSH
7964: LD_INT 30
7966: PUSH
7967: LD_INT 31
7969: PUSH
7970: LD_INT 32
7972: PUSH
7973: LD_INT 33
7975: PUSH
7976: LD_INT 34
7978: PUSH
7979: LD_INT 36
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 101
8021: PUSH
8022: LD_INT 102
8024: PUSH
8025: LD_INT 103
8027: PUSH
8028: LD_INT 104
8030: PUSH
8031: LD_INT 105
8033: PUSH
8034: LD_INT 106
8036: PUSH
8037: LD_INT 107
8039: PUSH
8040: LD_INT 108
8042: PUSH
8043: LD_INT 109
8045: PUSH
8046: LD_INT 110
8048: PUSH
8049: LD_INT 111
8051: PUSH
8052: LD_INT 112
8054: PUSH
8055: LD_INT 113
8057: PUSH
8058: LD_INT 114
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: ST_TO_ADDR
8081: GO 8808
8083: LD_INT 16
8085: DOUBLE
8086: EQUAL
8087: IFTRUE 8091
8089: GO 8215
8091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: LD_INT 4
8102: PUSH
8103: LD_INT 5
8105: PUSH
8106: LD_INT 7
8108: PUSH
8109: LD_INT 11
8111: PUSH
8112: LD_INT 12
8114: PUSH
8115: LD_INT 15
8117: PUSH
8118: LD_INT 16
8120: PUSH
8121: LD_INT 20
8123: PUSH
8124: LD_INT 21
8126: PUSH
8127: LD_INT 22
8129: PUSH
8130: LD_INT 23
8132: PUSH
8133: LD_INT 25
8135: PUSH
8136: LD_INT 26
8138: PUSH
8139: LD_INT 30
8141: PUSH
8142: LD_INT 31
8144: PUSH
8145: LD_INT 32
8147: PUSH
8148: LD_INT 33
8150: PUSH
8151: LD_INT 34
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 101
8177: PUSH
8178: LD_INT 102
8180: PUSH
8181: LD_INT 103
8183: PUSH
8184: LD_INT 106
8186: PUSH
8187: LD_INT 108
8189: PUSH
8190: LD_INT 112
8192: PUSH
8193: LD_INT 113
8195: PUSH
8196: LD_INT 114
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: ST_TO_ADDR
8213: GO 8808
8215: LD_INT 17
8217: DOUBLE
8218: EQUAL
8219: IFTRUE 8223
8221: GO 8435
8223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8224: LD_ADDR_VAR 0 1
8228: PUSH
8229: LD_INT 1
8231: PUSH
8232: LD_INT 2
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 4
8240: PUSH
8241: LD_INT 5
8243: PUSH
8244: LD_INT 6
8246: PUSH
8247: LD_INT 7
8249: PUSH
8250: LD_INT 8
8252: PUSH
8253: LD_INT 9
8255: PUSH
8256: LD_INT 10
8258: PUSH
8259: LD_INT 11
8261: PUSH
8262: LD_INT 12
8264: PUSH
8265: LD_INT 13
8267: PUSH
8268: LD_INT 14
8270: PUSH
8271: LD_INT 15
8273: PUSH
8274: LD_INT 16
8276: PUSH
8277: LD_INT 17
8279: PUSH
8280: LD_INT 18
8282: PUSH
8283: LD_INT 19
8285: PUSH
8286: LD_INT 20
8288: PUSH
8289: LD_INT 21
8291: PUSH
8292: LD_INT 22
8294: PUSH
8295: LD_INT 23
8297: PUSH
8298: LD_INT 24
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: LD_INT 26
8306: PUSH
8307: LD_INT 27
8309: PUSH
8310: LD_INT 28
8312: PUSH
8313: LD_INT 29
8315: PUSH
8316: LD_INT 30
8318: PUSH
8319: LD_INT 31
8321: PUSH
8322: LD_INT 32
8324: PUSH
8325: LD_INT 33
8327: PUSH
8328: LD_INT 34
8330: PUSH
8331: LD_INT 36
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 101
8373: PUSH
8374: LD_INT 102
8376: PUSH
8377: LD_INT 103
8379: PUSH
8380: LD_INT 104
8382: PUSH
8383: LD_INT 105
8385: PUSH
8386: LD_INT 106
8388: PUSH
8389: LD_INT 107
8391: PUSH
8392: LD_INT 108
8394: PUSH
8395: LD_INT 109
8397: PUSH
8398: LD_INT 110
8400: PUSH
8401: LD_INT 111
8403: PUSH
8404: LD_INT 112
8406: PUSH
8407: LD_INT 113
8409: PUSH
8410: LD_INT 114
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: ST_TO_ADDR
8433: GO 8808
8435: LD_INT 18
8437: DOUBLE
8438: EQUAL
8439: IFTRUE 8443
8441: GO 8579
8443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8444: LD_ADDR_VAR 0 1
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: LD_INT 4
8454: PUSH
8455: LD_INT 5
8457: PUSH
8458: LD_INT 7
8460: PUSH
8461: LD_INT 11
8463: PUSH
8464: LD_INT 12
8466: PUSH
8467: LD_INT 15
8469: PUSH
8470: LD_INT 16
8472: PUSH
8473: LD_INT 20
8475: PUSH
8476: LD_INT 21
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 26
8490: PUSH
8491: LD_INT 30
8493: PUSH
8494: LD_INT 31
8496: PUSH
8497: LD_INT 32
8499: PUSH
8500: LD_INT 33
8502: PUSH
8503: LD_INT 34
8505: PUSH
8506: LD_INT 35
8508: PUSH
8509: LD_INT 36
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 101
8537: PUSH
8538: LD_INT 102
8540: PUSH
8541: LD_INT 103
8543: PUSH
8544: LD_INT 106
8546: PUSH
8547: LD_INT 108
8549: PUSH
8550: LD_INT 112
8552: PUSH
8553: LD_INT 113
8555: PUSH
8556: LD_INT 114
8558: PUSH
8559: LD_INT 115
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: ST_TO_ADDR
8577: GO 8808
8579: LD_INT 19
8581: DOUBLE
8582: EQUAL
8583: IFTRUE 8587
8585: GO 8807
8587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8588: LD_ADDR_VAR 0 1
8592: PUSH
8593: LD_INT 1
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: LD_INT 3
8601: PUSH
8602: LD_INT 4
8604: PUSH
8605: LD_INT 5
8607: PUSH
8608: LD_INT 6
8610: PUSH
8611: LD_INT 7
8613: PUSH
8614: LD_INT 8
8616: PUSH
8617: LD_INT 9
8619: PUSH
8620: LD_INT 10
8622: PUSH
8623: LD_INT 11
8625: PUSH
8626: LD_INT 12
8628: PUSH
8629: LD_INT 13
8631: PUSH
8632: LD_INT 14
8634: PUSH
8635: LD_INT 15
8637: PUSH
8638: LD_INT 16
8640: PUSH
8641: LD_INT 17
8643: PUSH
8644: LD_INT 18
8646: PUSH
8647: LD_INT 19
8649: PUSH
8650: LD_INT 20
8652: PUSH
8653: LD_INT 21
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: LD_INT 23
8661: PUSH
8662: LD_INT 24
8664: PUSH
8665: LD_INT 25
8667: PUSH
8668: LD_INT 26
8670: PUSH
8671: LD_INT 27
8673: PUSH
8674: LD_INT 28
8676: PUSH
8677: LD_INT 29
8679: PUSH
8680: LD_INT 30
8682: PUSH
8683: LD_INT 31
8685: PUSH
8686: LD_INT 32
8688: PUSH
8689: LD_INT 33
8691: PUSH
8692: LD_INT 34
8694: PUSH
8695: LD_INT 35
8697: PUSH
8698: LD_INT 36
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 101
8741: PUSH
8742: LD_INT 102
8744: PUSH
8745: LD_INT 103
8747: PUSH
8748: LD_INT 104
8750: PUSH
8751: LD_INT 105
8753: PUSH
8754: LD_INT 106
8756: PUSH
8757: LD_INT 107
8759: PUSH
8760: LD_INT 108
8762: PUSH
8763: LD_INT 109
8765: PUSH
8766: LD_INT 110
8768: PUSH
8769: LD_INT 111
8771: PUSH
8772: LD_INT 112
8774: PUSH
8775: LD_INT 113
8777: PUSH
8778: LD_INT 114
8780: PUSH
8781: LD_INT 115
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 8808
8807: POP
// end else
8808: GO 9027
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: LD_INT 2
8820: PUSH
8821: LD_INT 3
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 6
8832: PUSH
8833: LD_INT 7
8835: PUSH
8836: LD_INT 8
8838: PUSH
8839: LD_INT 9
8841: PUSH
8842: LD_INT 10
8844: PUSH
8845: LD_INT 11
8847: PUSH
8848: LD_INT 12
8850: PUSH
8851: LD_INT 13
8853: PUSH
8854: LD_INT 14
8856: PUSH
8857: LD_INT 15
8859: PUSH
8860: LD_INT 16
8862: PUSH
8863: LD_INT 17
8865: PUSH
8866: LD_INT 18
8868: PUSH
8869: LD_INT 19
8871: PUSH
8872: LD_INT 20
8874: PUSH
8875: LD_INT 21
8877: PUSH
8878: LD_INT 22
8880: PUSH
8881: LD_INT 23
8883: PUSH
8884: LD_INT 24
8886: PUSH
8887: LD_INT 25
8889: PUSH
8890: LD_INT 26
8892: PUSH
8893: LD_INT 27
8895: PUSH
8896: LD_INT 28
8898: PUSH
8899: LD_INT 29
8901: PUSH
8902: LD_INT 30
8904: PUSH
8905: LD_INT 31
8907: PUSH
8908: LD_INT 32
8910: PUSH
8911: LD_INT 33
8913: PUSH
8914: LD_INT 34
8916: PUSH
8917: LD_INT 35
8919: PUSH
8920: LD_INT 36
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 101
8963: PUSH
8964: LD_INT 102
8966: PUSH
8967: LD_INT 103
8969: PUSH
8970: LD_INT 104
8972: PUSH
8973: LD_INT 105
8975: PUSH
8976: LD_INT 106
8978: PUSH
8979: LD_INT 107
8981: PUSH
8982: LD_INT 108
8984: PUSH
8985: LD_INT 109
8987: PUSH
8988: LD_INT 110
8990: PUSH
8991: LD_INT 111
8993: PUSH
8994: LD_INT 112
8996: PUSH
8997: LD_INT 113
8999: PUSH
9000: LD_INT 114
9002: PUSH
9003: LD_INT 115
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: ST_TO_ADDR
// if result then
9027: LD_VAR 0 1
9031: IFFALSE 9320
// begin normal :=  ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: LD_STRING 
9040: ST_TO_ADDR
// hardcore :=  ;
9041: LD_ADDR_VAR 0 4
9045: PUSH
9046: LD_STRING 
9048: ST_TO_ADDR
// for i = 1 to normalCounter do
9049: LD_ADDR_VAR 0 5
9053: PUSH
9054: DOUBLE
9055: LD_INT 1
9057: DEC
9058: ST_TO_ADDR
9059: LD_EXP 24
9063: PUSH
9064: FOR_TO
9065: IFFALSE 9166
// begin tmp := 0 ;
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_STRING 0
9074: ST_TO_ADDR
// if result [ 1 ] then
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: IFFALSE 9148
// if result [ 1 ] [ 1 ] = i then
9085: LD_VAR 0 1
9089: PUSH
9090: LD_INT 1
9092: ARRAY
9093: PUSH
9094: LD_INT 1
9096: ARRAY
9097: PUSH
9098: LD_VAR 0 5
9102: EQUAL
9103: IFFALSE 9148
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9105: LD_ADDR_VAR 0 1
9109: PUSH
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_VAR 0 1
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: CALL_OW 3
9134: PPUSH
9135: CALL_OW 1
9139: ST_TO_ADDR
// tmp := 1 ;
9140: LD_ADDR_VAR 0 2
9144: PUSH
9145: LD_STRING 1
9147: ST_TO_ADDR
// end ; normal := normal & tmp ;
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: LD_VAR 0 3
9157: PUSH
9158: LD_VAR 0 2
9162: STR
9163: ST_TO_ADDR
// end ;
9164: GO 9064
9166: POP
9167: POP
// for i = 1 to hardcoreCounter do
9168: LD_ADDR_VAR 0 5
9172: PUSH
9173: DOUBLE
9174: LD_INT 1
9176: DEC
9177: ST_TO_ADDR
9178: LD_EXP 25
9182: PUSH
9183: FOR_TO
9184: IFFALSE 9289
// begin tmp := 0 ;
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_STRING 0
9193: ST_TO_ADDR
// if result [ 2 ] then
9194: LD_VAR 0 1
9198: PUSH
9199: LD_INT 2
9201: ARRAY
9202: IFFALSE 9271
// if result [ 2 ] [ 1 ] = 100 + i then
9204: LD_VAR 0 1
9208: PUSH
9209: LD_INT 2
9211: ARRAY
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PUSH
9217: LD_INT 100
9219: PUSH
9220: LD_VAR 0 5
9224: PLUS
9225: EQUAL
9226: IFFALSE 9271
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9228: LD_ADDR_VAR 0 1
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 2
9240: PPUSH
9241: LD_VAR 0 1
9245: PUSH
9246: LD_INT 2
9248: ARRAY
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: CALL_OW 3
9257: PPUSH
9258: CALL_OW 1
9262: ST_TO_ADDR
// tmp := 1 ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: LD_STRING 1
9270: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9271: LD_ADDR_VAR 0 4
9275: PUSH
9276: LD_VAR 0 4
9280: PUSH
9281: LD_VAR 0 2
9285: STR
9286: ST_TO_ADDR
// end ;
9287: GO 9183
9289: POP
9290: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9291: LD_STRING getStreamItemsFromMission("
9293: PUSH
9294: LD_VAR 0 3
9298: STR
9299: PUSH
9300: LD_STRING ","
9302: STR
9303: PUSH
9304: LD_VAR 0 4
9308: STR
9309: PUSH
9310: LD_STRING ")
9312: STR
9313: PPUSH
9314: CALL_OW 559
// end else
9318: GO 9327
// ToLua ( getStreamItemsFromMission("","") ) ;
9320: LD_STRING getStreamItemsFromMission("","")
9322: PPUSH
9323: CALL_OW 559
// end ;
9327: LD_VAR 0 1
9331: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9332: LD_EXP 23
9336: PUSH
9337: LD_EXP 28
9341: AND
9342: IFFALSE 9466
9344: GO 9346
9346: DISABLE
9347: LD_INT 0
9349: PPUSH
9350: PPUSH
// begin enable ;
9351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9352: LD_ADDR_VAR 0 2
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_OWVAR 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 2
9371: PUSH
9372: LD_INT 34
9374: PUSH
9375: LD_INT 7
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 34
9384: PUSH
9385: LD_INT 45
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 34
9394: PUSH
9395: LD_INT 28
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 34
9404: PUSH
9405: LD_INT 47
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PPUSH
9423: CALL_OW 69
9427: ST_TO_ADDR
// if not tmp then
9428: LD_VAR 0 2
9432: NOT
9433: IFFALSE 9437
// exit ;
9435: GO 9466
// for i in tmp do
9437: LD_ADDR_VAR 0 1
9441: PUSH
9442: LD_VAR 0 2
9446: PUSH
9447: FOR_IN
9448: IFFALSE 9464
// begin SetLives ( i , 0 ) ;
9450: LD_VAR 0 1
9454: PPUSH
9455: LD_INT 0
9457: PPUSH
9458: CALL_OW 234
// end ;
9462: GO 9447
9464: POP
9465: POP
// end ;
9466: PPOPN 2
9468: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9469: LD_EXP 23
9473: PUSH
9474: LD_EXP 29
9478: AND
9479: IFFALSE 9563
9481: GO 9483
9483: DISABLE
9484: LD_INT 0
9486: PPUSH
9487: PPUSH
// begin enable ;
9488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_OWVAR 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 32
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 69
9524: ST_TO_ADDR
// if not tmp then
9525: LD_VAR 0 2
9529: NOT
9530: IFFALSE 9534
// exit ;
9532: GO 9563
// for i in tmp do
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: LD_VAR 0 2
9543: PUSH
9544: FOR_IN
9545: IFFALSE 9561
// begin SetLives ( i , 0 ) ;
9547: LD_VAR 0 1
9551: PPUSH
9552: LD_INT 0
9554: PPUSH
9555: CALL_OW 234
// end ;
9559: GO 9544
9561: POP
9562: POP
// end ;
9563: PPOPN 2
9565: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9566: LD_EXP 23
9570: PUSH
9571: LD_EXP 26
9575: AND
9576: IFFALSE 9669
9578: GO 9580
9580: DISABLE
9581: LD_INT 0
9583: PPUSH
// begin enable ;
9584: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9585: LD_ADDR_VAR 0 1
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_OWVAR 2
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: LD_INT 25
9607: PUSH
9608: LD_INT 5
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 25
9617: PUSH
9618: LD_INT 9
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 25
9627: PUSH
9628: LD_INT 8
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL_OW 69
9649: PUSH
9650: FOR_IN
9651: IFFALSE 9667
// begin SetClass ( i , 1 ) ;
9653: LD_VAR 0 1
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 336
// end ;
9665: GO 9650
9667: POP
9668: POP
// end ;
9669: PPOPN 1
9671: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9672: LD_EXP 23
9676: PUSH
9677: LD_EXP 27
9681: AND
9682: PUSH
9683: LD_OWVAR 65
9687: PUSH
9688: LD_INT 7
9690: LESS
9691: AND
9692: IFFALSE 9706
9694: GO 9696
9696: DISABLE
// begin enable ;
9697: ENABLE
// game_speed := 7 ;
9698: LD_ADDR_OWVAR 65
9702: PUSH
9703: LD_INT 7
9705: ST_TO_ADDR
// end ;
9706: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9707: LD_EXP 23
9711: PUSH
9712: LD_EXP 30
9716: AND
9717: IFFALSE 9919
9719: GO 9721
9721: DISABLE
9722: LD_INT 0
9724: PPUSH
9725: PPUSH
9726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9727: LD_ADDR_VAR 0 3
9731: PUSH
9732: LD_INT 81
9734: PUSH
9735: LD_OWVAR 2
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 21
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 69
9762: ST_TO_ADDR
// if not tmp then
9763: LD_VAR 0 3
9767: NOT
9768: IFFALSE 9772
// exit ;
9770: GO 9919
// if tmp > 5 then
9772: LD_VAR 0 3
9776: PUSH
9777: LD_INT 5
9779: GREATER
9780: IFFALSE 9792
// k := 5 else
9782: LD_ADDR_VAR 0 2
9786: PUSH
9787: LD_INT 5
9789: ST_TO_ADDR
9790: GO 9802
// k := tmp ;
9792: LD_ADDR_VAR 0 2
9796: PUSH
9797: LD_VAR 0 3
9801: ST_TO_ADDR
// for i := 1 to k do
9802: LD_ADDR_VAR 0 1
9806: PUSH
9807: DOUBLE
9808: LD_INT 1
9810: DEC
9811: ST_TO_ADDR
9812: LD_VAR 0 2
9816: PUSH
9817: FOR_TO
9818: IFFALSE 9917
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9820: LD_VAR 0 3
9824: PUSH
9825: LD_VAR 0 1
9829: ARRAY
9830: PPUSH
9831: LD_VAR 0 1
9835: PUSH
9836: LD_INT 4
9838: MOD
9839: PUSH
9840: LD_INT 1
9842: PLUS
9843: PPUSH
9844: CALL_OW 259
9848: PUSH
9849: LD_INT 10
9851: LESS
9852: IFFALSE 9915
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9854: LD_VAR 0 3
9858: PUSH
9859: LD_VAR 0 1
9863: ARRAY
9864: PPUSH
9865: LD_VAR 0 1
9869: PUSH
9870: LD_INT 4
9872: MOD
9873: PUSH
9874: LD_INT 1
9876: PLUS
9877: PPUSH
9878: LD_VAR 0 3
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: PPUSH
9889: LD_VAR 0 1
9893: PUSH
9894: LD_INT 4
9896: MOD
9897: PUSH
9898: LD_INT 1
9900: PLUS
9901: PPUSH
9902: CALL_OW 259
9906: PUSH
9907: LD_INT 1
9909: PLUS
9910: PPUSH
9911: CALL_OW 237
9915: GO 9817
9917: POP
9918: POP
// end ;
9919: PPOPN 3
9921: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9922: LD_EXP 23
9926: PUSH
9927: LD_EXP 31
9931: AND
9932: IFFALSE 9952
9934: GO 9936
9936: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9937: LD_INT 4
9939: PPUSH
9940: LD_OWVAR 2
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: CALL_OW 324
9952: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9953: LD_EXP 23
9957: PUSH
9958: LD_EXP 60
9962: AND
9963: IFFALSE 9983
9965: GO 9967
9967: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9968: LD_INT 19
9970: PPUSH
9971: LD_OWVAR 2
9975: PPUSH
9976: LD_INT 0
9978: PPUSH
9979: CALL_OW 324
9983: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9984: LD_EXP 23
9988: PUSH
9989: LD_EXP 32
9993: AND
9994: IFFALSE 10096
9996: GO 9998
9998: DISABLE
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
// begin enable ;
10003: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10004: LD_ADDR_VAR 0 2
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_OWVAR 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: LD_INT 34
10026: PUSH
10027: LD_INT 11
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 34
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: ST_TO_ADDR
// if not tmp then
10058: LD_VAR 0 2
10062: NOT
10063: IFFALSE 10067
// exit ;
10065: GO 10096
// for i in tmp do
10067: LD_ADDR_VAR 0 1
10071: PUSH
10072: LD_VAR 0 2
10076: PUSH
10077: FOR_IN
10078: IFFALSE 10094
// begin SetLives ( i , 0 ) ;
10080: LD_VAR 0 1
10084: PPUSH
10085: LD_INT 0
10087: PPUSH
10088: CALL_OW 234
// end ;
10092: GO 10077
10094: POP
10095: POP
// end ;
10096: PPOPN 2
10098: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10099: LD_EXP 23
10103: PUSH
10104: LD_EXP 33
10108: AND
10109: IFFALSE 10129
10111: GO 10113
10113: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10114: LD_INT 32
10116: PPUSH
10117: LD_OWVAR 2
10121: PPUSH
10122: LD_INT 0
10124: PPUSH
10125: CALL_OW 324
10129: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10130: LD_EXP 23
10134: PUSH
10135: LD_EXP 34
10139: AND
10140: IFFALSE 10321
10142: GO 10144
10144: DISABLE
10145: LD_INT 0
10147: PPUSH
10148: PPUSH
10149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_INT 22
10157: PUSH
10158: LD_OWVAR 2
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 33
10169: PUSH
10170: LD_INT 3
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if not tmp then
10186: LD_VAR 0 2
10190: NOT
10191: IFFALSE 10195
// exit ;
10193: GO 10321
// side := 0 ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_INT 0
10202: ST_TO_ADDR
// for i := 1 to 8 do
10203: LD_ADDR_VAR 0 1
10207: PUSH
10208: DOUBLE
10209: LD_INT 1
10211: DEC
10212: ST_TO_ADDR
10213: LD_INT 8
10215: PUSH
10216: FOR_TO
10217: IFFALSE 10265
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10219: LD_OWVAR 2
10223: PUSH
10224: LD_VAR 0 1
10228: NONEQUAL
10229: PUSH
10230: LD_OWVAR 2
10234: PPUSH
10235: LD_VAR 0 1
10239: PPUSH
10240: CALL_OW 81
10244: PUSH
10245: LD_INT 2
10247: EQUAL
10248: AND
10249: IFFALSE 10263
// begin side := i ;
10251: LD_ADDR_VAR 0 3
10255: PUSH
10256: LD_VAR 0 1
10260: ST_TO_ADDR
// break ;
10261: GO 10265
// end ;
10263: GO 10216
10265: POP
10266: POP
// if not side then
10267: LD_VAR 0 3
10271: NOT
10272: IFFALSE 10276
// exit ;
10274: GO 10321
// for i := 1 to tmp do
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: DOUBLE
10282: LD_INT 1
10284: DEC
10285: ST_TO_ADDR
10286: LD_VAR 0 2
10290: PUSH
10291: FOR_TO
10292: IFFALSE 10319
// if Prob ( 60 ) then
10294: LD_INT 60
10296: PPUSH
10297: CALL_OW 13
10301: IFFALSE 10317
// SetSide ( i , side ) ;
10303: LD_VAR 0 1
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: CALL_OW 235
10317: GO 10291
10319: POP
10320: POP
// end ;
10321: PPOPN 3
10323: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10324: LD_EXP 23
10328: PUSH
10329: LD_EXP 36
10333: AND
10334: IFFALSE 10453
10336: GO 10338
10338: DISABLE
10339: LD_INT 0
10341: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 22
10349: PUSH
10350: LD_OWVAR 2
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 21
10361: PUSH
10362: LD_INT 1
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 3
10371: PUSH
10372: LD_INT 23
10374: PUSH
10375: LD_INT 0
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: PUSH
10396: FOR_IN
10397: IFFALSE 10451
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 257
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 4
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: IN
10427: IFFALSE 10449
// SetClass ( un , rand ( 1 , 4 ) ) ;
10429: LD_VAR 0 1
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_INT 4
10439: PPUSH
10440: CALL_OW 12
10444: PPUSH
10445: CALL_OW 336
10449: GO 10396
10451: POP
10452: POP
// end ;
10453: PPOPN 1
10455: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10456: LD_EXP 23
10460: PUSH
10461: LD_EXP 35
10465: AND
10466: IFFALSE 10545
10468: GO 10470
10470: DISABLE
10471: LD_INT 0
10473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10474: LD_ADDR_VAR 0 1
10478: PUSH
10479: LD_INT 22
10481: PUSH
10482: LD_OWVAR 2
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 21
10493: PUSH
10494: LD_INT 3
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 69
10509: ST_TO_ADDR
// if not tmp then
10510: LD_VAR 0 1
10514: NOT
10515: IFFALSE 10519
// exit ;
10517: GO 10545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10519: LD_VAR 0 1
10523: PUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_VAR 0 1
10531: PPUSH
10532: CALL_OW 12
10536: ARRAY
10537: PPUSH
10538: LD_INT 100
10540: PPUSH
10541: CALL_OW 234
// end ;
10545: PPOPN 1
10547: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10548: LD_EXP 23
10552: PUSH
10553: LD_EXP 37
10557: AND
10558: IFFALSE 10656
10560: GO 10562
10562: DISABLE
10563: LD_INT 0
10565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10566: LD_ADDR_VAR 0 1
10570: PUSH
10571: LD_INT 22
10573: PUSH
10574: LD_OWVAR 2
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 21
10585: PUSH
10586: LD_INT 1
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: ST_TO_ADDR
// if not tmp then
10602: LD_VAR 0 1
10606: NOT
10607: IFFALSE 10611
// exit ;
10609: GO 10656
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10611: LD_VAR 0 1
10615: PUSH
10616: LD_INT 1
10618: PPUSH
10619: LD_VAR 0 1
10623: PPUSH
10624: CALL_OW 12
10628: ARRAY
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: LD_INT 4
10635: PPUSH
10636: CALL_OW 12
10640: PPUSH
10641: LD_INT 3000
10643: PPUSH
10644: LD_INT 9000
10646: PPUSH
10647: CALL_OW 12
10651: PPUSH
10652: CALL_OW 492
// end ;
10656: PPOPN 1
10658: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10659: LD_EXP 23
10663: PUSH
10664: LD_EXP 38
10668: AND
10669: IFFALSE 10689
10671: GO 10673
10673: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10674: LD_INT 1
10676: PPUSH
10677: LD_OWVAR 2
10681: PPUSH
10682: LD_INT 0
10684: PPUSH
10685: CALL_OW 324
10689: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10690: LD_EXP 23
10694: PUSH
10695: LD_EXP 39
10699: AND
10700: IFFALSE 10783
10702: GO 10704
10704: DISABLE
10705: LD_INT 0
10707: PPUSH
10708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10709: LD_ADDR_VAR 0 2
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_OWVAR 2
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 21
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// if not tmp then
10745: LD_VAR 0 2
10749: NOT
10750: IFFALSE 10754
// exit ;
10752: GO 10783
// for i in tmp do
10754: LD_ADDR_VAR 0 1
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: FOR_IN
10765: IFFALSE 10781
// SetBLevel ( i , 10 ) ;
10767: LD_VAR 0 1
10771: PPUSH
10772: LD_INT 10
10774: PPUSH
10775: CALL_OW 241
10779: GO 10764
10781: POP
10782: POP
// end ;
10783: PPOPN 2
10785: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10786: LD_EXP 23
10790: PUSH
10791: LD_EXP 40
10795: AND
10796: IFFALSE 10907
10798: GO 10800
10800: DISABLE
10801: LD_INT 0
10803: PPUSH
10804: PPUSH
10805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10806: LD_ADDR_VAR 0 3
10810: PUSH
10811: LD_INT 22
10813: PUSH
10814: LD_OWVAR 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 25
10825: PUSH
10826: LD_INT 1
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL_OW 69
10841: ST_TO_ADDR
// if not tmp then
10842: LD_VAR 0 3
10846: NOT
10847: IFFALSE 10851
// exit ;
10849: GO 10907
// un := tmp [ rand ( 1 , tmp ) ] ;
10851: LD_ADDR_VAR 0 2
10855: PUSH
10856: LD_VAR 0 3
10860: PUSH
10861: LD_INT 1
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: CALL_OW 12
10873: ARRAY
10874: ST_TO_ADDR
// if Crawls ( un ) then
10875: LD_VAR 0 2
10879: PPUSH
10880: CALL_OW 318
10884: IFFALSE 10895
// ComWalk ( un ) ;
10886: LD_VAR 0 2
10890: PPUSH
10891: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10895: LD_VAR 0 2
10899: PPUSH
10900: LD_INT 5
10902: PPUSH
10903: CALL_OW 336
// end ;
10907: PPOPN 3
10909: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10910: LD_EXP 23
10914: PUSH
10915: LD_EXP 41
10919: AND
10920: PUSH
10921: LD_OWVAR 67
10925: PUSH
10926: LD_INT 3
10928: LESS
10929: AND
10930: IFFALSE 10949
10932: GO 10934
10934: DISABLE
// Difficulty := Difficulty + 1 ;
10935: LD_ADDR_OWVAR 67
10939: PUSH
10940: LD_OWVAR 67
10944: PUSH
10945: LD_INT 1
10947: PLUS
10948: ST_TO_ADDR
10949: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10950: LD_EXP 23
10954: PUSH
10955: LD_EXP 42
10959: AND
10960: IFFALSE 11063
10962: GO 10964
10964: DISABLE
10965: LD_INT 0
10967: PPUSH
// begin for i := 1 to 5 do
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_INT 5
10980: PUSH
10981: FOR_TO
10982: IFFALSE 11061
// begin uc_nation := nation_nature ;
10984: LD_ADDR_OWVAR 21
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// uc_side := 0 ;
10992: LD_ADDR_OWVAR 20
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11000: LD_ADDR_OWVAR 29
11004: PUSH
11005: LD_INT 12
11007: PUSH
11008: LD_INT 12
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: ST_TO_ADDR
// hc_agressivity := 20 ;
11015: LD_ADDR_OWVAR 35
11019: PUSH
11020: LD_INT 20
11022: ST_TO_ADDR
// hc_class := class_tiger ;
11023: LD_ADDR_OWVAR 28
11027: PUSH
11028: LD_INT 14
11030: ST_TO_ADDR
// hc_gallery :=  ;
11031: LD_ADDR_OWVAR 33
11035: PUSH
11036: LD_STRING 
11038: ST_TO_ADDR
// hc_name :=  ;
11039: LD_ADDR_OWVAR 26
11043: PUSH
11044: LD_STRING 
11046: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11047: CALL_OW 44
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 51
// end ;
11059: GO 10981
11061: POP
11062: POP
// end ;
11063: PPOPN 1
11065: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11066: LD_EXP 23
11070: PUSH
11071: LD_EXP 43
11075: AND
11076: IFFALSE 11085
11078: GO 11080
11080: DISABLE
// StreamSibBomb ;
11081: CALL 11086 0 0
11085: END
// export function StreamSibBomb ; var i , x , y ; begin
11086: LD_INT 0
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
// result := false ;
11092: LD_ADDR_VAR 0 1
11096: PUSH
11097: LD_INT 0
11099: ST_TO_ADDR
// for i := 1 to 16 do
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: DOUBLE
11106: LD_INT 1
11108: DEC
11109: ST_TO_ADDR
11110: LD_INT 16
11112: PUSH
11113: FOR_TO
11114: IFFALSE 11313
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11116: LD_ADDR_VAR 0 3
11120: PUSH
11121: LD_INT 10
11123: PUSH
11124: LD_INT 20
11126: PUSH
11127: LD_INT 30
11129: PUSH
11130: LD_INT 40
11132: PUSH
11133: LD_INT 50
11135: PUSH
11136: LD_INT 60
11138: PUSH
11139: LD_INT 70
11141: PUSH
11142: LD_INT 80
11144: PUSH
11145: LD_INT 90
11147: PUSH
11148: LD_INT 100
11150: PUSH
11151: LD_INT 110
11153: PUSH
11154: LD_INT 120
11156: PUSH
11157: LD_INT 130
11159: PUSH
11160: LD_INT 140
11162: PUSH
11163: LD_INT 150
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 15
11188: PPUSH
11189: CALL_OW 12
11193: ARRAY
11194: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11195: LD_ADDR_VAR 0 4
11199: PUSH
11200: LD_INT 10
11202: PUSH
11203: LD_INT 20
11205: PUSH
11206: LD_INT 30
11208: PUSH
11209: LD_INT 40
11211: PUSH
11212: LD_INT 50
11214: PUSH
11215: LD_INT 60
11217: PUSH
11218: LD_INT 70
11220: PUSH
11221: LD_INT 80
11223: PUSH
11224: LD_INT 90
11226: PUSH
11227: LD_INT 100
11229: PUSH
11230: LD_INT 110
11232: PUSH
11233: LD_INT 120
11235: PUSH
11236: LD_INT 130
11238: PUSH
11239: LD_INT 140
11241: PUSH
11242: LD_INT 150
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_INT 15
11267: PPUSH
11268: CALL_OW 12
11272: ARRAY
11273: ST_TO_ADDR
// if ValidHex ( x , y ) then
11274: LD_VAR 0 3
11278: PPUSH
11279: LD_VAR 0 4
11283: PPUSH
11284: CALL_OW 488
11288: IFFALSE 11311
// begin result := [ x , y ] ;
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_VAR 0 3
11299: PUSH
11300: LD_VAR 0 4
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: ST_TO_ADDR
// break ;
11309: GO 11313
// end ; end ;
11311: GO 11113
11313: POP
11314: POP
// if result then
11315: LD_VAR 0 1
11319: IFFALSE 11379
// begin ToLua ( playSibBomb() ) ;
11321: LD_STRING playSibBomb()
11323: PPUSH
11324: CALL_OW 559
// wait ( 0 0$14 ) ;
11328: LD_INT 490
11330: PPUSH
11331: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11335: LD_VAR 0 1
11339: PUSH
11340: LD_INT 1
11342: ARRAY
11343: PPUSH
11344: LD_VAR 0 1
11348: PUSH
11349: LD_INT 2
11351: ARRAY
11352: PPUSH
11353: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11357: LD_VAR 0 1
11361: PUSH
11362: LD_INT 1
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 1
11370: PUSH
11371: LD_INT 2
11373: ARRAY
11374: PPUSH
11375: CALL_OW 429
// end ; end ;
11379: LD_VAR 0 1
11383: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11384: LD_EXP 23
11388: PUSH
11389: LD_EXP 45
11393: AND
11394: IFFALSE 11406
11396: GO 11398
11398: DISABLE
// YouLost (  ) ;
11399: LD_STRING 
11401: PPUSH
11402: CALL_OW 104
11406: END
// every 0 0$1 trigger StreamModeActive and sFog do
11407: LD_EXP 23
11411: PUSH
11412: LD_EXP 44
11416: AND
11417: IFFALSE 11431
11419: GO 11421
11421: DISABLE
// FogOff ( your_side ) ;
11422: LD_OWVAR 2
11426: PPUSH
11427: CALL_OW 344
11431: END
// every 0 0$1 trigger StreamModeActive and sSun do
11432: LD_EXP 23
11436: PUSH
11437: LD_EXP 46
11441: AND
11442: IFFALSE 11470
11444: GO 11446
11446: DISABLE
// begin solar_recharge_percent := 0 ;
11447: LD_ADDR_OWVAR 79
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11455: LD_INT 10500
11457: PPUSH
11458: CALL_OW 67
// solar_recharge_percent := 100 ;
11462: LD_ADDR_OWVAR 79
11466: PUSH
11467: LD_INT 100
11469: ST_TO_ADDR
// end ;
11470: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11471: LD_EXP 23
11475: PUSH
11476: LD_EXP 47
11480: AND
11481: IFFALSE 11720
11483: GO 11485
11485: DISABLE
11486: LD_INT 0
11488: PPUSH
11489: PPUSH
11490: PPUSH
// begin tmp := [ ] ;
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: EMPTY
11497: ST_TO_ADDR
// for i := 1 to 6 do
11498: LD_ADDR_VAR 0 1
11502: PUSH
11503: DOUBLE
11504: LD_INT 1
11506: DEC
11507: ST_TO_ADDR
11508: LD_INT 6
11510: PUSH
11511: FOR_TO
11512: IFFALSE 11617
// begin uc_nation := nation_nature ;
11514: LD_ADDR_OWVAR 21
11518: PUSH
11519: LD_INT 0
11521: ST_TO_ADDR
// uc_side := 0 ;
11522: LD_ADDR_OWVAR 20
11526: PUSH
11527: LD_INT 0
11529: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11530: LD_ADDR_OWVAR 29
11534: PUSH
11535: LD_INT 12
11537: PUSH
11538: LD_INT 12
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: ST_TO_ADDR
// hc_agressivity := 20 ;
11545: LD_ADDR_OWVAR 35
11549: PUSH
11550: LD_INT 20
11552: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11553: LD_ADDR_OWVAR 28
11557: PUSH
11558: LD_INT 17
11560: ST_TO_ADDR
// hc_gallery :=  ;
11561: LD_ADDR_OWVAR 33
11565: PUSH
11566: LD_STRING 
11568: ST_TO_ADDR
// hc_name :=  ;
11569: LD_ADDR_OWVAR 26
11573: PUSH
11574: LD_STRING 
11576: ST_TO_ADDR
// un := CreateHuman ;
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: CALL_OW 44
11586: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11587: LD_VAR 0 2
11591: PPUSH
11592: LD_INT 1
11594: PPUSH
11595: CALL_OW 51
// tmp := tmp ^ un ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_VAR 0 3
11608: PUSH
11609: LD_VAR 0 2
11613: ADD
11614: ST_TO_ADDR
// end ;
11615: GO 11511
11617: POP
11618: POP
// repeat wait ( 0 0$1 ) ;
11619: LD_INT 35
11621: PPUSH
11622: CALL_OW 67
// for un in tmp do
11626: LD_ADDR_VAR 0 2
11630: PUSH
11631: LD_VAR 0 3
11635: PUSH
11636: FOR_IN
11637: IFFALSE 11711
// begin if IsDead ( un ) then
11639: LD_VAR 0 2
11643: PPUSH
11644: CALL_OW 301
11648: IFFALSE 11668
// begin tmp := tmp diff un ;
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: LD_VAR 0 3
11659: PUSH
11660: LD_VAR 0 2
11664: DIFF
11665: ST_TO_ADDR
// continue ;
11666: GO 11636
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11668: LD_VAR 0 2
11672: PPUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 22
11678: PUSH
11679: LD_INT 0
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PPUSH
11690: CALL_OW 69
11694: PPUSH
11695: LD_VAR 0 2
11699: PPUSH
11700: CALL_OW 74
11704: PPUSH
11705: CALL_OW 115
// end ;
11709: GO 11636
11711: POP
11712: POP
// until not tmp ;
11713: LD_VAR 0 3
11717: NOT
11718: IFFALSE 11619
// end ;
11720: PPOPN 3
11722: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11723: LD_EXP 23
11727: PUSH
11728: LD_EXP 48
11732: AND
11733: IFFALSE 11787
11735: GO 11737
11737: DISABLE
// begin ToLua ( displayTroll(); ) ;
11738: LD_STRING displayTroll();
11740: PPUSH
11741: CALL_OW 559
// wait ( 3 3$00 ) ;
11745: LD_INT 6300
11747: PPUSH
11748: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11752: LD_STRING hideTroll();
11754: PPUSH
11755: CALL_OW 559
// wait ( 1 1$00 ) ;
11759: LD_INT 2100
11761: PPUSH
11762: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11766: LD_STRING displayTroll();
11768: PPUSH
11769: CALL_OW 559
// wait ( 1 1$00 ) ;
11773: LD_INT 2100
11775: PPUSH
11776: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11780: LD_STRING hideTroll();
11782: PPUSH
11783: CALL_OW 559
// end ;
11787: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11788: LD_EXP 23
11792: PUSH
11793: LD_EXP 49
11797: AND
11798: IFFALSE 11861
11800: GO 11802
11802: DISABLE
11803: LD_INT 0
11805: PPUSH
// begin p := 0 ;
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: LD_INT 0
11813: ST_TO_ADDR
// repeat game_speed := 1 ;
11814: LD_ADDR_OWVAR 65
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11822: LD_INT 35
11824: PPUSH
11825: CALL_OW 67
// p := p + 1 ;
11829: LD_ADDR_VAR 0 1
11833: PUSH
11834: LD_VAR 0 1
11838: PUSH
11839: LD_INT 1
11841: PLUS
11842: ST_TO_ADDR
// until p >= 60 ;
11843: LD_VAR 0 1
11847: PUSH
11848: LD_INT 60
11850: GREATEREQUAL
11851: IFFALSE 11814
// game_speed := 4 ;
11853: LD_ADDR_OWVAR 65
11857: PUSH
11858: LD_INT 4
11860: ST_TO_ADDR
// end ;
11861: PPOPN 1
11863: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11864: LD_EXP 23
11868: PUSH
11869: LD_EXP 50
11873: AND
11874: IFFALSE 12020
11876: GO 11878
11878: DISABLE
11879: LD_INT 0
11881: PPUSH
11882: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11883: LD_ADDR_VAR 0 1
11887: PUSH
11888: LD_INT 22
11890: PUSH
11891: LD_OWVAR 2
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 30
11905: PUSH
11906: LD_INT 0
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 30
11915: PUSH
11916: LD_INT 1
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: ST_TO_ADDR
// if not depot then
11937: LD_VAR 0 1
11941: NOT
11942: IFFALSE 11946
// exit ;
11944: GO 12020
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: LD_VAR 0 1
11955: PUSH
11956: LD_INT 1
11958: PPUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 12
11968: ARRAY
11969: PPUSH
11970: CALL_OW 274
11974: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11975: LD_VAR 0 2
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: LD_INT 0
11985: PPUSH
11986: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11990: LD_VAR 0 2
11994: PPUSH
11995: LD_INT 2
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12005: LD_VAR 0 2
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 0
12015: PPUSH
12016: CALL_OW 277
// end ;
12020: PPOPN 2
12022: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12023: LD_EXP 23
12027: PUSH
12028: LD_EXP 51
12032: AND
12033: IFFALSE 12130
12035: GO 12037
12037: DISABLE
12038: LD_INT 0
12040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12041: LD_ADDR_VAR 0 1
12045: PUSH
12046: LD_INT 22
12048: PUSH
12049: LD_OWVAR 2
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 21
12060: PUSH
12061: LD_INT 1
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 3
12070: PUSH
12071: LD_INT 23
12073: PUSH
12074: LD_INT 0
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: ST_TO_ADDR
// if not tmp then
12095: LD_VAR 0 1
12099: NOT
12100: IFFALSE 12104
// exit ;
12102: GO 12130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12104: LD_VAR 0 1
12108: PUSH
12109: LD_INT 1
12111: PPUSH
12112: LD_VAR 0 1
12116: PPUSH
12117: CALL_OW 12
12121: ARRAY
12122: PPUSH
12123: LD_INT 200
12125: PPUSH
12126: CALL_OW 234
// end ;
12130: PPOPN 1
12132: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12133: LD_EXP 23
12137: PUSH
12138: LD_EXP 52
12142: AND
12143: IFFALSE 12222
12145: GO 12147
12147: DISABLE
12148: LD_INT 0
12150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12151: LD_ADDR_VAR 0 1
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_OWVAR 2
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 21
12170: PUSH
12171: LD_INT 2
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 69
12186: ST_TO_ADDR
// if not tmp then
12187: LD_VAR 0 1
12191: NOT
12192: IFFALSE 12196
// exit ;
12194: GO 12222
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12196: LD_VAR 0 1
12200: PUSH
12201: LD_INT 1
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 12
12213: ARRAY
12214: PPUSH
12215: LD_INT 60
12217: PPUSH
12218: CALL_OW 234
// end ;
12222: PPOPN 1
12224: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12225: LD_EXP 23
12229: PUSH
12230: LD_EXP 53
12234: AND
12235: IFFALSE 12334
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
12243: PPUSH
// begin enable ;
12244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12245: LD_ADDR_VAR 0 1
12249: PUSH
12250: LD_INT 22
12252: PUSH
12253: LD_OWVAR 2
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 61
12264: PUSH
12265: EMPTY
12266: LIST
12267: PUSH
12268: LD_INT 33
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 69
12287: ST_TO_ADDR
// if not tmp then
12288: LD_VAR 0 1
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 12334
// for i in tmp do
12297: LD_ADDR_VAR 0 2
12301: PUSH
12302: LD_VAR 0 1
12306: PUSH
12307: FOR_IN
12308: IFFALSE 12332
// if IsControledBy ( i ) then
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 312
12319: IFFALSE 12330
// ComUnlink ( i ) ;
12321: LD_VAR 0 2
12325: PPUSH
12326: CALL_OW 136
12330: GO 12307
12332: POP
12333: POP
// end ;
12334: PPOPN 2
12336: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12337: LD_EXP 23
12341: PUSH
12342: LD_EXP 54
12346: AND
12347: IFFALSE 12487
12349: GO 12351
12351: DISABLE
12352: LD_INT 0
12354: PPUSH
12355: PPUSH
// begin ToLua ( displayPowell(); ) ;
12356: LD_STRING displayPowell();
12358: PPUSH
12359: CALL_OW 559
// uc_side := 0 ;
12363: LD_ADDR_OWVAR 20
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// uc_nation := 2 ;
12371: LD_ADDR_OWVAR 21
12375: PUSH
12376: LD_INT 2
12378: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12379: LD_ADDR_OWVAR 37
12383: PUSH
12384: LD_INT 14
12386: ST_TO_ADDR
// vc_engine := engine_siberite ;
12387: LD_ADDR_OWVAR 39
12391: PUSH
12392: LD_INT 3
12394: ST_TO_ADDR
// vc_control := control_apeman ;
12395: LD_ADDR_OWVAR 38
12399: PUSH
12400: LD_INT 5
12402: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12403: LD_ADDR_OWVAR 40
12407: PUSH
12408: LD_INT 29
12410: ST_TO_ADDR
// un := CreateVehicle ;
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: CALL_OW 45
12420: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12421: LD_VAR 0 2
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12433: LD_INT 35
12435: PPUSH
12436: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12440: LD_VAR 0 2
12444: PPUSH
12445: LD_INT 22
12447: PUSH
12448: LD_OWVAR 2
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: PPUSH
12462: LD_VAR 0 2
12466: PPUSH
12467: CALL_OW 74
12471: PPUSH
12472: CALL_OW 115
// until IsDead ( un ) ;
12476: LD_VAR 0 2
12480: PPUSH
12481: CALL_OW 301
12485: IFFALSE 12433
// end ;
12487: PPOPN 2
12489: END
// every 0 0$1 trigger StreamModeActive and sStu do
12490: LD_EXP 23
12494: PUSH
12495: LD_EXP 62
12499: AND
12500: IFFALSE 12516
12502: GO 12504
12504: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12505: LD_STRING displayStucuk();
12507: PPUSH
12508: CALL_OW 559
// ResetFog ;
12512: CALL_OW 335
// end ;
12516: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12517: LD_EXP 23
12521: PUSH
12522: LD_EXP 55
12526: AND
12527: IFFALSE 12668
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_OWVAR 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: ST_TO_ADDR
// if not tmp then
12572: LD_VAR 0 2
12576: NOT
12577: IFFALSE 12581
// exit ;
12579: GO 12668
// un := tmp [ rand ( 1 , tmp ) ] ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_VAR 0 2
12590: PUSH
12591: LD_INT 1
12593: PPUSH
12594: LD_VAR 0 2
12598: PPUSH
12599: CALL_OW 12
12603: ARRAY
12604: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: LD_INT 0
12612: PPUSH
12613: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12617: LD_VAR 0 1
12621: PPUSH
12622: LD_OWVAR 3
12626: PUSH
12627: LD_VAR 0 1
12631: DIFF
12632: PPUSH
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 74
12642: PPUSH
12643: CALL_OW 115
// wait ( 0 0$20 ) ;
12647: LD_INT 700
12649: PPUSH
12650: CALL_OW 67
// SetSide ( un , your_side ) ;
12654: LD_VAR 0 1
12658: PPUSH
12659: LD_OWVAR 2
12663: PPUSH
12664: CALL_OW 235
// end ;
12668: PPOPN 2
12670: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12671: LD_EXP 23
12675: PUSH
12676: LD_EXP 56
12680: AND
12681: IFFALSE 12787
12683: GO 12685
12685: DISABLE
12686: LD_INT 0
12688: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12689: LD_ADDR_VAR 0 1
12693: PUSH
12694: LD_INT 22
12696: PUSH
12697: LD_OWVAR 2
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 2
12708: PUSH
12709: LD_INT 30
12711: PUSH
12712: LD_INT 0
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: ST_TO_ADDR
// if not depot then
12743: LD_VAR 0 1
12747: NOT
12748: IFFALSE 12752
// exit ;
12750: GO 12787
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12752: LD_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: PPUSH
12761: CALL_OW 250
12765: PPUSH
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PPUSH
12775: CALL_OW 251
12779: PPUSH
12780: LD_INT 70
12782: PPUSH
12783: CALL_OW 495
// end ;
12787: PPOPN 1
12789: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12790: LD_EXP 23
12794: PUSH
12795: LD_EXP 57
12799: AND
12800: IFFALSE 13011
12802: GO 12804
12804: DISABLE
12805: LD_INT 0
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12812: LD_ADDR_VAR 0 5
12816: PUSH
12817: LD_INT 22
12819: PUSH
12820: LD_OWVAR 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PPUSH
12843: CALL_OW 69
12847: ST_TO_ADDR
// if not tmp then
12848: LD_VAR 0 5
12852: NOT
12853: IFFALSE 12857
// exit ;
12855: GO 13011
// for i in tmp do
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_VAR 0 5
12866: PUSH
12867: FOR_IN
12868: IFFALSE 13009
// begin d := rand ( 0 , 5 ) ;
12870: LD_ADDR_VAR 0 4
12874: PUSH
12875: LD_INT 0
12877: PPUSH
12878: LD_INT 5
12880: PPUSH
12881: CALL_OW 12
12885: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_VAR 0 1
12895: PPUSH
12896: CALL_OW 250
12900: PPUSH
12901: LD_VAR 0 4
12905: PPUSH
12906: LD_INT 3
12908: PPUSH
12909: LD_INT 12
12911: PPUSH
12912: CALL_OW 12
12916: PPUSH
12917: CALL_OW 272
12921: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_VAR 0 1
12931: PPUSH
12932: CALL_OW 251
12936: PPUSH
12937: LD_VAR 0 4
12941: PPUSH
12942: LD_INT 3
12944: PPUSH
12945: LD_INT 12
12947: PPUSH
12948: CALL_OW 12
12952: PPUSH
12953: CALL_OW 273
12957: ST_TO_ADDR
// if ValidHex ( x , y ) then
12958: LD_VAR 0 2
12962: PPUSH
12963: LD_VAR 0 3
12967: PPUSH
12968: CALL_OW 488
12972: IFFALSE 13007
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12974: LD_VAR 0 1
12978: PPUSH
12979: LD_VAR 0 2
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 3
12991: PPUSH
12992: LD_INT 6
12994: PPUSH
12995: CALL_OW 12
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: CALL_OW 483
// end ;
13007: GO 12867
13009: POP
13010: POP
// end ;
13011: PPOPN 5
13013: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13014: LD_EXP 23
13018: PUSH
13019: LD_EXP 58
13023: AND
13024: IFFALSE 13118
13026: GO 13028
13028: DISABLE
13029: LD_INT 0
13031: PPUSH
13032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13033: LD_ADDR_VAR 0 2
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: LD_OWVAR 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// if not tmp then
13080: LD_VAR 0 2
13084: NOT
13085: IFFALSE 13089
// exit ;
13087: GO 13118
// for i in tmp do
13089: LD_ADDR_VAR 0 1
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: FOR_IN
13100: IFFALSE 13116
// SetFuel ( i , 0 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 0
13109: PPUSH
13110: CALL_OW 240
13114: GO 13099
13116: POP
13117: POP
// end ;
13118: PPOPN 2
13120: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13121: LD_EXP 23
13125: PUSH
13126: LD_EXP 59
13130: AND
13131: IFFALSE 13197
13133: GO 13135
13135: DISABLE
13136: LD_INT 0
13138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_OWVAR 2
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 29
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: ST_TO_ADDR
// if not tmp then
13175: LD_VAR 0 1
13179: NOT
13180: IFFALSE 13184
// exit ;
13182: GO 13197
// DestroyUnit ( tmp [ 1 ] ) ;
13184: LD_VAR 0 1
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: CALL_OW 65
// end ;
13197: PPOPN 1
13199: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13200: LD_EXP 23
13204: PUSH
13205: LD_EXP 61
13209: AND
13210: IFFALSE 13339
13212: GO 13214
13214: DISABLE
13215: LD_INT 0
13217: PPUSH
// begin uc_side := 0 ;
13218: LD_ADDR_OWVAR 20
13222: PUSH
13223: LD_INT 0
13225: ST_TO_ADDR
// uc_nation := nation_arabian ;
13226: LD_ADDR_OWVAR 21
13230: PUSH
13231: LD_INT 2
13233: ST_TO_ADDR
// hc_gallery :=  ;
13234: LD_ADDR_OWVAR 33
13238: PUSH
13239: LD_STRING 
13241: ST_TO_ADDR
// hc_name :=  ;
13242: LD_ADDR_OWVAR 26
13246: PUSH
13247: LD_STRING 
13249: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13250: LD_INT 1
13252: PPUSH
13253: LD_INT 11
13255: PPUSH
13256: LD_INT 10
13258: PPUSH
13259: CALL_OW 380
// un := CreateHuman ;
13263: LD_ADDR_VAR 0 1
13267: PUSH
13268: CALL_OW 44
13272: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13285: LD_INT 35
13287: PPUSH
13288: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 22
13299: PUSH
13300: LD_OWVAR 2
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PPUSH
13309: CALL_OW 69
13313: PPUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL_OW 74
13323: PPUSH
13324: CALL_OW 115
// until IsDead ( un ) ;
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 301
13337: IFFALSE 13285
// end ;
13339: PPOPN 1
13341: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13342: LD_EXP 23
13346: PUSH
13347: LD_EXP 63
13351: AND
13352: IFFALSE 13364
13354: GO 13356
13356: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13357: LD_STRING earthquake(getX(game), 0, 32)
13359: PPUSH
13360: CALL_OW 559
13364: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13365: LD_EXP 23
13369: PUSH
13370: LD_EXP 64
13374: AND
13375: IFFALSE 13466
13377: GO 13379
13379: DISABLE
13380: LD_INT 0
13382: PPUSH
// begin enable ;
13383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13384: LD_ADDR_VAR 0 1
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_OWVAR 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 21
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 33
13413: PUSH
13414: LD_INT 3
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: ST_TO_ADDR
// if not tmp then
13431: LD_VAR 0 1
13435: NOT
13436: IFFALSE 13440
// exit ;
13438: GO 13466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13440: LD_VAR 0 1
13444: PUSH
13445: LD_INT 1
13447: PPUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 12
13457: ARRAY
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: CALL_OW 234
// end ;
13466: PPOPN 1
13468: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13469: LD_EXP 23
13473: PUSH
13474: LD_EXP 65
13478: AND
13479: IFFALSE 13620
13481: GO 13483
13483: DISABLE
13484: LD_INT 0
13486: PPUSH
13487: PPUSH
13488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13489: LD_ADDR_VAR 0 3
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_OWVAR 2
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 25
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 69
13524: ST_TO_ADDR
// if not tmp then
13525: LD_VAR 0 3
13529: NOT
13530: IFFALSE 13534
// exit ;
13532: GO 13620
// un := tmp [ rand ( 1 , tmp ) ] ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_VAR 0 3
13543: PUSH
13544: LD_INT 1
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: CALL_OW 12
13556: ARRAY
13557: ST_TO_ADDR
// if Crawls ( un ) then
13558: LD_VAR 0 2
13562: PPUSH
13563: CALL_OW 318
13567: IFFALSE 13578
// ComWalk ( un ) ;
13569: LD_VAR 0 2
13573: PPUSH
13574: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13578: LD_VAR 0 2
13582: PPUSH
13583: LD_INT 9
13585: PPUSH
13586: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13590: LD_INT 28
13592: PPUSH
13593: LD_OWVAR 2
13597: PPUSH
13598: LD_INT 2
13600: PPUSH
13601: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13605: LD_INT 29
13607: PPUSH
13608: LD_OWVAR 2
13612: PPUSH
13613: LD_INT 2
13615: PPUSH
13616: CALL_OW 322
// end ;
13620: PPOPN 3
13622: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13623: LD_EXP 23
13627: PUSH
13628: LD_EXP 66
13632: AND
13633: IFFALSE 13744
13635: GO 13637
13637: DISABLE
13638: LD_INT 0
13640: PPUSH
13641: PPUSH
13642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13643: LD_ADDR_VAR 0 3
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_OWVAR 2
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: ST_TO_ADDR
// if not tmp then
13679: LD_VAR 0 3
13683: NOT
13684: IFFALSE 13688
// exit ;
13686: GO 13744
// un := tmp [ rand ( 1 , tmp ) ] ;
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_VAR 0 3
13697: PUSH
13698: LD_INT 1
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: CALL_OW 12
13710: ARRAY
13711: ST_TO_ADDR
// if Crawls ( un ) then
13712: LD_VAR 0 2
13716: PPUSH
13717: CALL_OW 318
13721: IFFALSE 13732
// ComWalk ( un ) ;
13723: LD_VAR 0 2
13727: PPUSH
13728: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13732: LD_VAR 0 2
13736: PPUSH
13737: LD_INT 8
13739: PPUSH
13740: CALL_OW 336
// end ;
13744: PPOPN 3
13746: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13747: LD_EXP 23
13751: PUSH
13752: LD_EXP 67
13756: AND
13757: IFFALSE 13901
13759: GO 13761
13761: DISABLE
13762: LD_INT 0
13764: PPUSH
13765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13766: LD_ADDR_VAR 0 2
13770: PUSH
13771: LD_INT 22
13773: PUSH
13774: LD_OWVAR 2
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: LD_INT 34
13798: PUSH
13799: LD_INT 12
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 34
13808: PUSH
13809: LD_INT 51
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 34
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: ST_TO_ADDR
// if not tmp then
13842: LD_VAR 0 2
13846: NOT
13847: IFFALSE 13851
// exit ;
13849: GO 13901
// for i in tmp do
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_VAR 0 2
13860: PUSH
13861: FOR_IN
13862: IFFALSE 13899
// if GetCargo ( i , mat_artifact ) = 0 then
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 4
13871: PPUSH
13872: CALL_OW 289
13876: PUSH
13877: LD_INT 0
13879: EQUAL
13880: IFFALSE 13897
// SetCargo ( i , mat_siberit , 100 ) ;
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 3
13889: PPUSH
13890: LD_INT 100
13892: PPUSH
13893: CALL_OW 290
13897: GO 13861
13899: POP
13900: POP
// end ;
13901: PPOPN 2
13903: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13904: LD_EXP 23
13908: PUSH
13909: LD_EXP 68
13913: AND
13914: IFFALSE 14097
13916: GO 13918
13918: DISABLE
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13923: LD_ADDR_VAR 0 2
13927: PUSH
13928: LD_INT 22
13930: PUSH
13931: LD_OWVAR 2
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 69
13944: ST_TO_ADDR
// if not tmp then
13945: LD_VAR 0 2
13949: NOT
13950: IFFALSE 13954
// exit ;
13952: GO 14097
// for i := 1 to 2 do
13954: LD_ADDR_VAR 0 1
13958: PUSH
13959: DOUBLE
13960: LD_INT 1
13962: DEC
13963: ST_TO_ADDR
13964: LD_INT 2
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14095
// begin uc_side := your_side ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_OWVAR 2
13979: ST_TO_ADDR
// uc_nation := nation_american ;
13980: LD_ADDR_OWVAR 21
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// vc_chassis := us_morphling ;
13988: LD_ADDR_OWVAR 37
13992: PUSH
13993: LD_INT 5
13995: ST_TO_ADDR
// vc_engine := engine_siberite ;
13996: LD_ADDR_OWVAR 39
14000: PUSH
14001: LD_INT 3
14003: ST_TO_ADDR
// vc_control := control_computer ;
14004: LD_ADDR_OWVAR 38
14008: PUSH
14009: LD_INT 3
14011: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14012: LD_ADDR_OWVAR 40
14016: PUSH
14017: LD_INT 10
14019: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14020: LD_VAR 0 2
14024: PUSH
14025: LD_INT 1
14027: ARRAY
14028: PPUSH
14029: CALL_OW 310
14033: NOT
14034: IFFALSE 14081
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14036: CALL_OW 45
14040: PPUSH
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: PPUSH
14050: CALL_OW 250
14054: PPUSH
14055: LD_VAR 0 2
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: CALL_OW 251
14068: PPUSH
14069: LD_INT 12
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: CALL_OW 50
14079: GO 14093
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14081: CALL_OW 45
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 51
// end ;
14093: GO 13967
14095: POP
14096: POP
// end ;
14097: PPOPN 2
14099: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14100: LD_EXP 23
14104: PUSH
14105: LD_EXP 69
14109: AND
14110: IFFALSE 14332
14112: GO 14114
14114: DISABLE
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14123: LD_ADDR_VAR 0 6
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_OWVAR 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 23
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: ST_TO_ADDR
// if not tmp then
14177: LD_VAR 0 6
14181: NOT
14182: IFFALSE 14186
// exit ;
14184: GO 14332
// s1 := rand ( 1 , 4 ) ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_INT 1
14193: PPUSH
14194: LD_INT 4
14196: PPUSH
14197: CALL_OW 12
14201: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14202: LD_ADDR_VAR 0 4
14206: PUSH
14207: LD_VAR 0 6
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: LD_VAR 0 2
14220: PPUSH
14221: CALL_OW 259
14225: ST_TO_ADDR
// if s1 = 1 then
14226: LD_VAR 0 2
14230: PUSH
14231: LD_INT 1
14233: EQUAL
14234: IFFALSE 14254
// s2 := rand ( 2 , 4 ) else
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: LD_INT 2
14243: PPUSH
14244: LD_INT 4
14246: PPUSH
14247: CALL_OW 12
14251: ST_TO_ADDR
14252: GO 14262
// s2 := 1 ;
14254: LD_ADDR_VAR 0 3
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14262: LD_ADDR_VAR 0 5
14266: PUSH
14267: LD_VAR 0 6
14271: PUSH
14272: LD_INT 1
14274: ARRAY
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: CALL_OW 259
14285: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14286: LD_VAR 0 6
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: PPUSH
14295: LD_VAR 0 2
14299: PPUSH
14300: LD_VAR 0 5
14304: PPUSH
14305: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14309: LD_VAR 0 6
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PPUSH
14318: LD_VAR 0 3
14322: PPUSH
14323: LD_VAR 0 4
14327: PPUSH
14328: CALL_OW 237
// end ;
14332: PPOPN 6
14334: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14335: LD_EXP 23
14339: PUSH
14340: LD_EXP 70
14344: AND
14345: IFFALSE 14424
14347: GO 14349
14349: DISABLE
14350: LD_INT 0
14352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14353: LD_ADDR_VAR 0 1
14357: PUSH
14358: LD_INT 22
14360: PUSH
14361: LD_OWVAR 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 30
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ST_TO_ADDR
// if not tmp then
14389: LD_VAR 0 1
14393: NOT
14394: IFFALSE 14398
// exit ;
14396: GO 14424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 12
14415: ARRAY
14416: PPUSH
14417: LD_INT 1
14419: PPUSH
14420: CALL_OW 234
// end ;
14424: PPOPN 1
14426: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14427: LD_EXP 23
14431: PUSH
14432: LD_EXP 71
14436: AND
14437: IFFALSE 14549
14439: GO 14441
14441: DISABLE
14442: LD_INT 0
14444: PPUSH
14445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14446: LD_ADDR_VAR 0 2
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_OWVAR 2
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 2
14465: PUSH
14466: LD_INT 30
14468: PUSH
14469: LD_INT 27
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 30
14478: PUSH
14479: LD_INT 26
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 30
14488: PUSH
14489: LD_INT 28
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PPUSH
14506: CALL_OW 69
14510: ST_TO_ADDR
// if not tmp then
14511: LD_VAR 0 2
14515: NOT
14516: IFFALSE 14520
// exit ;
14518: GO 14549
// for i in tmp do
14520: LD_ADDR_VAR 0 1
14524: PUSH
14525: LD_VAR 0 2
14529: PUSH
14530: FOR_IN
14531: IFFALSE 14547
// SetLives ( i , 1 ) ;
14533: LD_VAR 0 1
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 234
14545: GO 14530
14547: POP
14548: POP
// end ;
14549: PPOPN 2
14551: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14552: LD_EXP 23
14556: PUSH
14557: LD_EXP 72
14561: AND
14562: IFFALSE 14836
14564: GO 14566
14566: DISABLE
14567: LD_INT 0
14569: PPUSH
14570: PPUSH
14571: PPUSH
// begin i := rand ( 1 , 7 ) ;
14572: LD_ADDR_VAR 0 1
14576: PUSH
14577: LD_INT 1
14579: PPUSH
14580: LD_INT 7
14582: PPUSH
14583: CALL_OW 12
14587: ST_TO_ADDR
// case i of 1 :
14588: LD_VAR 0 1
14592: PUSH
14593: LD_INT 1
14595: DOUBLE
14596: EQUAL
14597: IFTRUE 14601
14599: GO 14611
14601: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14602: LD_STRING earthquake(getX(game), 0, 32)
14604: PPUSH
14605: CALL_OW 559
14609: GO 14836
14611: LD_INT 2
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14633
14619: POP
// begin ToLua ( displayStucuk(); ) ;
14620: LD_STRING displayStucuk();
14622: PPUSH
14623: CALL_OW 559
// ResetFog ;
14627: CALL_OW 335
// end ; 3 :
14631: GO 14836
14633: LD_INT 3
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14745
14641: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 25
14661: PUSH
14662: LD_INT 1
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 69
14677: ST_TO_ADDR
// if not tmp then
14678: LD_VAR 0 2
14682: NOT
14683: IFFALSE 14687
// exit ;
14685: GO 14836
// un := tmp [ rand ( 1 , tmp ) ] ;
14687: LD_ADDR_VAR 0 3
14691: PUSH
14692: LD_VAR 0 2
14696: PUSH
14697: LD_INT 1
14699: PPUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL_OW 12
14709: ARRAY
14710: ST_TO_ADDR
// if Crawls ( un ) then
14711: LD_VAR 0 3
14715: PPUSH
14716: CALL_OW 318
14720: IFFALSE 14731
// ComWalk ( un ) ;
14722: LD_VAR 0 3
14726: PPUSH
14727: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 8
14738: PPUSH
14739: CALL_OW 336
// end ; 4 :
14743: GO 14836
14745: LD_INT 4
14747: DOUBLE
14748: EQUAL
14749: IFTRUE 14753
14751: GO 14814
14753: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14754: LD_ADDR_VAR 0 2
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_OWVAR 2
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 30
14773: PUSH
14774: LD_INT 29
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: ST_TO_ADDR
// if not tmp then
14790: LD_VAR 0 2
14794: NOT
14795: IFFALSE 14799
// exit ;
14797: GO 14836
// DestroyUnit ( tmp [ 1 ] ) ;
14799: LD_VAR 0 2
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: CALL_OW 65
// end ; 5 .. 7 :
14812: GO 14836
14814: LD_INT 5
14816: DOUBLE
14817: GREATEREQUAL
14818: IFFALSE 14826
14820: LD_INT 7
14822: DOUBLE
14823: LESSEQUAL
14824: IFTRUE 14828
14826: GO 14835
14828: POP
// StreamSibBomb ; end ;
14829: CALL 11086 0 0
14833: GO 14836
14835: POP
// end ;
14836: PPOPN 3
14838: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14839: LD_EXP 23
14843: PUSH
14844: LD_EXP 73
14848: AND
14849: IFFALSE 15005
14851: GO 14853
14853: DISABLE
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14859: LD_ADDR_VAR 0 2
14863: PUSH
14864: LD_INT 81
14866: PUSH
14867: LD_OWVAR 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 2
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 21
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if not tmp then
14913: LD_VAR 0 2
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 15005
// p := 0 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_INT 0
14929: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14930: LD_INT 35
14932: PPUSH
14933: CALL_OW 67
// p := p + 1 ;
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: LD_VAR 0 3
14946: PUSH
14947: LD_INT 1
14949: PLUS
14950: ST_TO_ADDR
// for i in tmp do
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: LD_VAR 0 2
14960: PUSH
14961: FOR_IN
14962: IFFALSE 14993
// if GetLives ( i ) < 1000 then
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 256
14973: PUSH
14974: LD_INT 1000
14976: LESS
14977: IFFALSE 14991
// SetLives ( i , 1000 ) ;
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_INT 1000
14986: PPUSH
14987: CALL_OW 234
14991: GO 14961
14993: POP
14994: POP
// until p > 20 ;
14995: LD_VAR 0 3
14999: PUSH
15000: LD_INT 20
15002: GREATER
15003: IFFALSE 14930
// end ;
15005: PPOPN 3
15007: END
// every 0 0$1 trigger StreamModeActive and sTime do
15008: LD_EXP 23
15012: PUSH
15013: LD_EXP 74
15017: AND
15018: IFFALSE 15053
15020: GO 15022
15022: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15023: LD_INT 28
15025: PPUSH
15026: LD_OWVAR 2
15030: PPUSH
15031: LD_INT 2
15033: PPUSH
15034: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15038: LD_INT 30
15040: PPUSH
15041: LD_OWVAR 2
15045: PPUSH
15046: LD_INT 2
15048: PPUSH
15049: CALL_OW 322
// end ;
15053: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15054: LD_EXP 23
15058: PUSH
15059: LD_EXP 75
15063: AND
15064: IFFALSE 15185
15066: GO 15068
15068: DISABLE
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: LD_INT 23
15105: PUSH
15106: LD_INT 0
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: ST_TO_ADDR
// if not tmp then
15127: LD_VAR 0 2
15131: NOT
15132: IFFALSE 15136
// exit ;
15134: GO 15185
// for i in tmp do
15136: LD_ADDR_VAR 0 1
15140: PUSH
15141: LD_VAR 0 2
15145: PUSH
15146: FOR_IN
15147: IFFALSE 15183
// begin if Crawls ( i ) then
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 318
15158: IFFALSE 15169
// ComWalk ( i ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 138
// SetClass ( i , 2 ) ;
15169: LD_VAR 0 1
15173: PPUSH
15174: LD_INT 2
15176: PPUSH
15177: CALL_OW 336
// end ;
15181: GO 15146
15183: POP
15184: POP
// end ;
15185: PPOPN 2
15187: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15188: LD_EXP 23
15192: PUSH
15193: LD_EXP 76
15197: AND
15198: IFFALSE 15479
15200: GO 15202
15202: DISABLE
15203: LD_INT 0
15205: PPUSH
15206: PPUSH
15207: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15208: LD_OWVAR 2
15212: PPUSH
15213: LD_INT 9
15215: PPUSH
15216: LD_INT 1
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15226: LD_INT 9
15228: PPUSH
15229: LD_OWVAR 2
15233: PPUSH
15234: CALL_OW 343
// uc_side := 9 ;
15238: LD_ADDR_OWVAR 20
15242: PUSH
15243: LD_INT 9
15245: ST_TO_ADDR
// uc_nation := 2 ;
15246: LD_ADDR_OWVAR 21
15250: PUSH
15251: LD_INT 2
15253: ST_TO_ADDR
// hc_name := Dark Warrior ;
15254: LD_ADDR_OWVAR 26
15258: PUSH
15259: LD_STRING Dark Warrior
15261: ST_TO_ADDR
// hc_gallery :=  ;
15262: LD_ADDR_OWVAR 33
15266: PUSH
15267: LD_STRING 
15269: ST_TO_ADDR
// hc_noskilllimit := true ;
15270: LD_ADDR_OWVAR 76
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15278: LD_ADDR_OWVAR 31
15282: PUSH
15283: LD_INT 30
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_INT 30
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: ST_TO_ADDR
// un := CreateHuman ;
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: CALL_OW 44
15310: ST_TO_ADDR
// hc_noskilllimit := false ;
15311: LD_ADDR_OWVAR 76
15315: PUSH
15316: LD_INT 0
15318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15319: LD_VAR 0 3
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 51
// p := 0 ;
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: LD_INT 0
15338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15339: LD_INT 35
15341: PPUSH
15342: CALL_OW 67
// p := p + 1 ;
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: LD_VAR 0 2
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15360: LD_VAR 0 3
15364: PPUSH
15365: CALL_OW 256
15369: PUSH
15370: LD_INT 1000
15372: LESS
15373: IFFALSE 15387
// SetLives ( un , 1000 ) ;
15375: LD_VAR 0 3
15379: PPUSH
15380: LD_INT 1000
15382: PPUSH
15383: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_INT 81
15394: PUSH
15395: LD_OWVAR 2
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 91
15406: PUSH
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 30
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 69
15428: PPUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: CALL_OW 74
15438: PPUSH
15439: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15443: LD_VAR 0 2
15447: PUSH
15448: LD_INT 60
15450: GREATER
15451: PUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: CALL_OW 301
15461: OR
15462: IFFALSE 15339
// if un then
15464: LD_VAR 0 3
15468: IFFALSE 15479
// RemoveUnit ( un ) ;
15470: LD_VAR 0 3
15474: PPUSH
15475: CALL_OW 64
// end ;
15479: PPOPN 3
15481: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15482: LD_INT 0
15484: PPUSH
// case cmd of 301 :
15485: LD_VAR 0 1
15489: PUSH
15490: LD_INT 301
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15530
15498: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15499: LD_VAR 0 6
15503: PPUSH
15504: LD_VAR 0 7
15508: PPUSH
15509: LD_VAR 0 8
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: LD_VAR 0 5
15523: PPUSH
15524: CALL 16731 0 5
15528: GO 15651
15530: LD_INT 302
15532: DOUBLE
15533: EQUAL
15534: IFTRUE 15538
15536: GO 15575
15538: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15539: LD_VAR 0 6
15543: PPUSH
15544: LD_VAR 0 7
15548: PPUSH
15549: LD_VAR 0 8
15553: PPUSH
15554: LD_VAR 0 9
15558: PPUSH
15559: LD_VAR 0 4
15563: PPUSH
15564: LD_VAR 0 5
15568: PPUSH
15569: CALL 16822 0 6
15573: GO 15651
15575: LD_INT 303
15577: DOUBLE
15578: EQUAL
15579: IFTRUE 15583
15581: GO 15620
15583: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15584: LD_VAR 0 6
15588: PPUSH
15589: LD_VAR 0 7
15593: PPUSH
15594: LD_VAR 0 8
15598: PPUSH
15599: LD_VAR 0 9
15603: PPUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: LD_VAR 0 5
15613: PPUSH
15614: CALL 15656 0 6
15618: GO 15651
15620: LD_INT 304
15622: DOUBLE
15623: EQUAL
15624: IFTRUE 15628
15626: GO 15650
15628: POP
// hHackTeleport ( unit , x , y ) ; end ;
15629: LD_VAR 0 2
15633: PPUSH
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_VAR 0 5
15643: PPUSH
15644: CALL 17415 0 3
15648: GO 15651
15650: POP
// end ;
15651: LD_VAR 0 12
15655: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15656: LD_INT 0
15658: PPUSH
15659: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: LESS
15668: PUSH
15669: LD_VAR 0 1
15673: PUSH
15674: LD_INT 3
15676: GREATER
15677: OR
15678: PUSH
15679: LD_VAR 0 5
15683: PPUSH
15684: LD_VAR 0 6
15688: PPUSH
15689: CALL_OW 428
15693: OR
15694: IFFALSE 15698
// exit ;
15696: GO 16418
// uc_side := your_side ;
15698: LD_ADDR_OWVAR 20
15702: PUSH
15703: LD_OWVAR 2
15707: ST_TO_ADDR
// uc_nation := nation ;
15708: LD_ADDR_OWVAR 21
15712: PUSH
15713: LD_VAR 0 1
15717: ST_TO_ADDR
// bc_level = 1 ;
15718: LD_ADDR_OWVAR 43
15722: PUSH
15723: LD_INT 1
15725: ST_TO_ADDR
// case btype of 1 :
15726: LD_VAR 0 2
15730: PUSH
15731: LD_INT 1
15733: DOUBLE
15734: EQUAL
15735: IFTRUE 15739
15737: GO 15750
15739: POP
// bc_type := b_depot ; 2 :
15740: LD_ADDR_OWVAR 42
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
15748: GO 16362
15750: LD_INT 2
15752: DOUBLE
15753: EQUAL
15754: IFTRUE 15758
15756: GO 15769
15758: POP
// bc_type := b_warehouse ; 3 :
15759: LD_ADDR_OWVAR 42
15763: PUSH
15764: LD_INT 1
15766: ST_TO_ADDR
15767: GO 16362
15769: LD_INT 3
15771: DOUBLE
15772: EQUAL
15773: IFTRUE 15777
15775: GO 15788
15777: POP
// bc_type := b_lab ; 4 .. 9 :
15778: LD_ADDR_OWVAR 42
15782: PUSH
15783: LD_INT 6
15785: ST_TO_ADDR
15786: GO 16362
15788: LD_INT 4
15790: DOUBLE
15791: GREATEREQUAL
15792: IFFALSE 15800
15794: LD_INT 9
15796: DOUBLE
15797: LESSEQUAL
15798: IFTRUE 15802
15800: GO 15854
15802: POP
// begin bc_type := b_lab_half ;
15803: LD_ADDR_OWVAR 42
15807: PUSH
15808: LD_INT 7
15810: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15811: LD_ADDR_OWVAR 44
15815: PUSH
15816: LD_INT 10
15818: PUSH
15819: LD_INT 11
15821: PUSH
15822: LD_INT 12
15824: PUSH
15825: LD_INT 15
15827: PUSH
15828: LD_INT 14
15830: PUSH
15831: LD_INT 13
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: LD_VAR 0 2
15846: PUSH
15847: LD_INT 3
15849: MINUS
15850: ARRAY
15851: ST_TO_ADDR
// end ; 10 .. 13 :
15852: GO 16362
15854: LD_INT 10
15856: DOUBLE
15857: GREATEREQUAL
15858: IFFALSE 15866
15860: LD_INT 13
15862: DOUBLE
15863: LESSEQUAL
15864: IFTRUE 15868
15866: GO 15945
15868: POP
// begin bc_type := b_lab_full ;
15869: LD_ADDR_OWVAR 42
15873: PUSH
15874: LD_INT 8
15876: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15877: LD_ADDR_OWVAR 44
15881: PUSH
15882: LD_INT 10
15884: PUSH
15885: LD_INT 12
15887: PUSH
15888: LD_INT 14
15890: PUSH
15891: LD_INT 13
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: PUSH
15900: LD_VAR 0 2
15904: PUSH
15905: LD_INT 9
15907: MINUS
15908: ARRAY
15909: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15910: LD_ADDR_OWVAR 45
15914: PUSH
15915: LD_INT 11
15917: PUSH
15918: LD_INT 15
15920: PUSH
15921: LD_INT 12
15923: PUSH
15924: LD_INT 15
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: PUSH
15933: LD_VAR 0 2
15937: PUSH
15938: LD_INT 9
15940: MINUS
15941: ARRAY
15942: ST_TO_ADDR
// end ; 14 :
15943: GO 16362
15945: LD_INT 14
15947: DOUBLE
15948: EQUAL
15949: IFTRUE 15953
15951: GO 15964
15953: POP
// bc_type := b_workshop ; 15 :
15954: LD_ADDR_OWVAR 42
15958: PUSH
15959: LD_INT 2
15961: ST_TO_ADDR
15962: GO 16362
15964: LD_INT 15
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 15983
15972: POP
// bc_type := b_factory ; 16 :
15973: LD_ADDR_OWVAR 42
15977: PUSH
15978: LD_INT 3
15980: ST_TO_ADDR
15981: GO 16362
15983: LD_INT 16
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16002
15991: POP
// bc_type := b_ext_gun ; 17 :
15992: LD_ADDR_OWVAR 42
15996: PUSH
15997: LD_INT 17
15999: ST_TO_ADDR
16000: GO 16362
16002: LD_INT 17
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16038
16010: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16011: LD_ADDR_OWVAR 42
16015: PUSH
16016: LD_INT 19
16018: PUSH
16019: LD_INT 23
16021: PUSH
16022: LD_INT 19
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: LD_VAR 0 1
16034: ARRAY
16035: ST_TO_ADDR
16036: GO 16362
16038: LD_INT 18
16040: DOUBLE
16041: EQUAL
16042: IFTRUE 16046
16044: GO 16057
16046: POP
// bc_type := b_ext_radar ; 19 :
16047: LD_ADDR_OWVAR 42
16051: PUSH
16052: LD_INT 20
16054: ST_TO_ADDR
16055: GO 16362
16057: LD_INT 19
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16076
16065: POP
// bc_type := b_ext_radio ; 20 :
16066: LD_ADDR_OWVAR 42
16070: PUSH
16071: LD_INT 22
16073: ST_TO_ADDR
16074: GO 16362
16076: LD_INT 20
16078: DOUBLE
16079: EQUAL
16080: IFTRUE 16084
16082: GO 16095
16084: POP
// bc_type := b_ext_siberium ; 21 :
16085: LD_ADDR_OWVAR 42
16089: PUSH
16090: LD_INT 21
16092: ST_TO_ADDR
16093: GO 16362
16095: LD_INT 21
16097: DOUBLE
16098: EQUAL
16099: IFTRUE 16103
16101: GO 16114
16103: POP
// bc_type := b_ext_computer ; 22 :
16104: LD_ADDR_OWVAR 42
16108: PUSH
16109: LD_INT 24
16111: ST_TO_ADDR
16112: GO 16362
16114: LD_INT 22
16116: DOUBLE
16117: EQUAL
16118: IFTRUE 16122
16120: GO 16133
16122: POP
// bc_type := b_ext_track ; 23 :
16123: LD_ADDR_OWVAR 42
16127: PUSH
16128: LD_INT 16
16130: ST_TO_ADDR
16131: GO 16362
16133: LD_INT 23
16135: DOUBLE
16136: EQUAL
16137: IFTRUE 16141
16139: GO 16152
16141: POP
// bc_type := b_ext_laser ; 24 :
16142: LD_ADDR_OWVAR 42
16146: PUSH
16147: LD_INT 25
16149: ST_TO_ADDR
16150: GO 16362
16152: LD_INT 24
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16171
16160: POP
// bc_type := b_control_tower ; 25 :
16161: LD_ADDR_OWVAR 42
16165: PUSH
16166: LD_INT 36
16168: ST_TO_ADDR
16169: GO 16362
16171: LD_INT 25
16173: DOUBLE
16174: EQUAL
16175: IFTRUE 16179
16177: GO 16190
16179: POP
// bc_type := b_breastwork ; 26 :
16180: LD_ADDR_OWVAR 42
16184: PUSH
16185: LD_INT 31
16187: ST_TO_ADDR
16188: GO 16362
16190: LD_INT 26
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16209
16198: POP
// bc_type := b_bunker ; 27 :
16199: LD_ADDR_OWVAR 42
16203: PUSH
16204: LD_INT 32
16206: ST_TO_ADDR
16207: GO 16362
16209: LD_INT 27
16211: DOUBLE
16212: EQUAL
16213: IFTRUE 16217
16215: GO 16228
16217: POP
// bc_type := b_turret ; 28 :
16218: LD_ADDR_OWVAR 42
16222: PUSH
16223: LD_INT 33
16225: ST_TO_ADDR
16226: GO 16362
16228: LD_INT 28
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16247
16236: POP
// bc_type := b_armoury ; 29 :
16237: LD_ADDR_OWVAR 42
16241: PUSH
16242: LD_INT 4
16244: ST_TO_ADDR
16245: GO 16362
16247: LD_INT 29
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16266
16255: POP
// bc_type := b_barracks ; 30 :
16256: LD_ADDR_OWVAR 42
16260: PUSH
16261: LD_INT 5
16263: ST_TO_ADDR
16264: GO 16362
16266: LD_INT 30
16268: DOUBLE
16269: EQUAL
16270: IFTRUE 16274
16272: GO 16285
16274: POP
// bc_type := b_solar_power ; 31 :
16275: LD_ADDR_OWVAR 42
16279: PUSH
16280: LD_INT 27
16282: ST_TO_ADDR
16283: GO 16362
16285: LD_INT 31
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16293
16291: GO 16304
16293: POP
// bc_type := b_oil_power ; 32 :
16294: LD_ADDR_OWVAR 42
16298: PUSH
16299: LD_INT 26
16301: ST_TO_ADDR
16302: GO 16362
16304: LD_INT 32
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16323
16312: POP
// bc_type := b_siberite_power ; 33 :
16313: LD_ADDR_OWVAR 42
16317: PUSH
16318: LD_INT 28
16320: ST_TO_ADDR
16321: GO 16362
16323: LD_INT 33
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16342
16331: POP
// bc_type := b_oil_mine ; 34 :
16332: LD_ADDR_OWVAR 42
16336: PUSH
16337: LD_INT 29
16339: ST_TO_ADDR
16340: GO 16362
16342: LD_INT 34
16344: DOUBLE
16345: EQUAL
16346: IFTRUE 16350
16348: GO 16361
16350: POP
// bc_type := b_siberite_mine ; end ;
16351: LD_ADDR_OWVAR 42
16355: PUSH
16356: LD_INT 30
16358: ST_TO_ADDR
16359: GO 16362
16361: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16362: LD_ADDR_VAR 0 8
16366: PUSH
16367: LD_VAR 0 5
16371: PPUSH
16372: LD_VAR 0 6
16376: PPUSH
16377: LD_VAR 0 3
16381: PPUSH
16382: CALL_OW 47
16386: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16387: LD_OWVAR 42
16391: PUSH
16392: LD_INT 32
16394: PUSH
16395: LD_INT 33
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: IN
16402: IFFALSE 16418
// PlaceWeaponTurret ( b , weapon ) ;
16404: LD_VAR 0 8
16408: PPUSH
16409: LD_VAR 0 4
16413: PPUSH
16414: CALL_OW 431
// end ;
16418: LD_VAR 0 7
16422: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16423: LD_INT 0
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16429: LD_ADDR_VAR 0 4
16433: PUSH
16434: LD_INT 22
16436: PUSH
16437: LD_OWVAR 2
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: LD_INT 30
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PPUSH
16478: CALL_OW 69
16482: ST_TO_ADDR
// if not tmp then
16483: LD_VAR 0 4
16487: NOT
16488: IFFALSE 16492
// exit ;
16490: GO 16551
// for i in tmp do
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_VAR 0 4
16501: PUSH
16502: FOR_IN
16503: IFFALSE 16549
// for j = 1 to 3 do
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: DOUBLE
16511: LD_INT 1
16513: DEC
16514: ST_TO_ADDR
16515: LD_INT 3
16517: PUSH
16518: FOR_TO
16519: IFFALSE 16545
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16521: LD_VAR 0 2
16525: PPUSH
16526: CALL_OW 274
16530: PPUSH
16531: LD_VAR 0 3
16535: PPUSH
16536: LD_INT 99999
16538: PPUSH
16539: CALL_OW 277
16543: GO 16518
16545: POP
16546: POP
16547: GO 16502
16549: POP
16550: POP
// end ;
16551: LD_VAR 0 1
16555: RET
// export function hHackSetLevel10 ; var i , j ; begin
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16634
// if IsSelected ( i ) then
16584: LD_VAR 0 2
16588: PPUSH
16589: CALL_OW 306
16593: IFFALSE 16632
// begin for j := 1 to 4 do
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: DOUBLE
16601: LD_INT 1
16603: DEC
16604: ST_TO_ADDR
16605: LD_INT 4
16607: PUSH
16608: FOR_TO
16609: IFFALSE 16630
// SetSkill ( i , j , 10 ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_INT 10
16623: PPUSH
16624: CALL_OW 237
16628: GO 16608
16630: POP
16631: POP
// end ;
16632: GO 16581
16634: POP
16635: POP
// end ;
16636: LD_VAR 0 1
16640: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16641: LD_INT 0
16643: PPUSH
16644: PPUSH
16645: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_OWVAR 2
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 21
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL_OW 69
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16724
// begin for j := 1 to 4 do
16685: LD_ADDR_VAR 0 3
16689: PUSH
16690: DOUBLE
16691: LD_INT 1
16693: DEC
16694: ST_TO_ADDR
16695: LD_INT 4
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16720
// SetSkill ( i , j , 10 ) ;
16701: LD_VAR 0 2
16705: PPUSH
16706: LD_VAR 0 3
16710: PPUSH
16711: LD_INT 10
16713: PPUSH
16714: CALL_OW 237
16718: GO 16698
16720: POP
16721: POP
// end ;
16722: GO 16682
16724: POP
16725: POP
// end ;
16726: LD_VAR 0 1
16730: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16731: LD_INT 0
16733: PPUSH
// uc_side := your_side ;
16734: LD_ADDR_OWVAR 20
16738: PUSH
16739: LD_OWVAR 2
16743: ST_TO_ADDR
// uc_nation := nation ;
16744: LD_ADDR_OWVAR 21
16748: PUSH
16749: LD_VAR 0 1
16753: ST_TO_ADDR
// InitHc ;
16754: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16758: LD_INT 0
16760: PPUSH
16761: LD_VAR 0 2
16765: PPUSH
16766: LD_VAR 0 3
16770: PPUSH
16771: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16775: LD_VAR 0 4
16779: PPUSH
16780: LD_VAR 0 5
16784: PPUSH
16785: CALL_OW 428
16789: PUSH
16790: LD_INT 0
16792: EQUAL
16793: IFFALSE 16817
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16795: CALL_OW 44
16799: PPUSH
16800: LD_VAR 0 4
16804: PPUSH
16805: LD_VAR 0 5
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 48
// end ;
16817: LD_VAR 0 6
16821: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
// uc_side := your_side ;
16826: LD_ADDR_OWVAR 20
16830: PUSH
16831: LD_OWVAR 2
16835: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16836: LD_VAR 0 1
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: LD_INT 5
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: IN
16863: IFFALSE 16875
// uc_nation := nation_american else
16865: LD_ADDR_OWVAR 21
16869: PUSH
16870: LD_INT 1
16872: ST_TO_ADDR
16873: GO 16918
// if chassis in [ 11 , 12 , 13 , 14 ] then
16875: LD_VAR 0 1
16879: PUSH
16880: LD_INT 11
16882: PUSH
16883: LD_INT 12
16885: PUSH
16886: LD_INT 13
16888: PUSH
16889: LD_INT 14
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: IN
16898: IFFALSE 16910
// uc_nation := nation_arabian else
16900: LD_ADDR_OWVAR 21
16904: PUSH
16905: LD_INT 2
16907: ST_TO_ADDR
16908: GO 16918
// uc_nation := nation_russian ;
16910: LD_ADDR_OWVAR 21
16914: PUSH
16915: LD_INT 3
16917: ST_TO_ADDR
// vc_chassis := chassis ;
16918: LD_ADDR_OWVAR 37
16922: PUSH
16923: LD_VAR 0 1
16927: ST_TO_ADDR
// vc_engine := engine ;
16928: LD_ADDR_OWVAR 39
16932: PUSH
16933: LD_VAR 0 2
16937: ST_TO_ADDR
// vc_control := control ;
16938: LD_ADDR_OWVAR 38
16942: PUSH
16943: LD_VAR 0 3
16947: ST_TO_ADDR
// vc_weapon := weapon ;
16948: LD_ADDR_OWVAR 40
16952: PUSH
16953: LD_VAR 0 4
16957: ST_TO_ADDR
// un := CreateVehicle ;
16958: LD_ADDR_VAR 0 8
16962: PUSH
16963: CALL_OW 45
16967: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16968: LD_VAR 0 8
16972: PPUSH
16973: LD_INT 0
16975: PPUSH
16976: LD_INT 5
16978: PPUSH
16979: CALL_OW 12
16983: PPUSH
16984: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16988: LD_VAR 0 8
16992: PPUSH
16993: LD_VAR 0 5
16997: PPUSH
16998: LD_VAR 0 6
17002: PPUSH
17003: LD_INT 1
17005: PPUSH
17006: CALL_OW 48
// end ;
17010: LD_VAR 0 7
17014: RET
// export hInvincible ; every 1 do
17015: GO 17017
17017: DISABLE
// hInvincible := [ ] ;
17018: LD_ADDR_EXP 77
17022: PUSH
17023: EMPTY
17024: ST_TO_ADDR
17025: END
// every 10 do var i ;
17026: GO 17028
17028: DISABLE
17029: LD_INT 0
17031: PPUSH
// begin enable ;
17032: ENABLE
// if not hInvincible then
17033: LD_EXP 77
17037: NOT
17038: IFFALSE 17042
// exit ;
17040: GO 17086
// for i in hInvincible do
17042: LD_ADDR_VAR 0 1
17046: PUSH
17047: LD_EXP 77
17051: PUSH
17052: FOR_IN
17053: IFFALSE 17084
// if GetLives ( i ) < 1000 then
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 256
17064: PUSH
17065: LD_INT 1000
17067: LESS
17068: IFFALSE 17082
// SetLives ( i , 1000 ) ;
17070: LD_VAR 0 1
17074: PPUSH
17075: LD_INT 1000
17077: PPUSH
17078: CALL_OW 234
17082: GO 17052
17084: POP
17085: POP
// end ;
17086: PPOPN 1
17088: END
// export function hHackInvincible ; var i ; begin
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: LD_INT 21
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: PUSH
17131: FOR_IN
17132: IFFALSE 17193
// if IsSelected ( i ) then
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 306
17143: IFFALSE 17191
// begin if i in hInvincible then
17145: LD_VAR 0 2
17149: PUSH
17150: LD_EXP 77
17154: IN
17155: IFFALSE 17175
// hInvincible := hInvincible diff i else
17157: LD_ADDR_EXP 77
17161: PUSH
17162: LD_EXP 77
17166: PUSH
17167: LD_VAR 0 2
17171: DIFF
17172: ST_TO_ADDR
17173: GO 17191
// hInvincible := hInvincible union i ;
17175: LD_ADDR_EXP 77
17179: PUSH
17180: LD_EXP 77
17184: PUSH
17185: LD_VAR 0 2
17189: UNION
17190: ST_TO_ADDR
// end ;
17191: GO 17131
17193: POP
17194: POP
// end ;
17195: LD_VAR 0 1
17199: RET
// export function hHackInvisible ; var i , j ; begin
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17205: LD_ADDR_VAR 0 2
17209: PUSH
17210: LD_INT 21
17212: PUSH
17213: LD_INT 1
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PPUSH
17220: CALL_OW 69
17224: PUSH
17225: FOR_IN
17226: IFFALSE 17250
// if IsSelected ( i ) then
17228: LD_VAR 0 2
17232: PPUSH
17233: CALL_OW 306
17237: IFFALSE 17248
// ComForceInvisible ( i ) ;
17239: LD_VAR 0 2
17243: PPUSH
17244: CALL_OW 496
17248: GO 17225
17250: POP
17251: POP
// end ;
17252: LD_VAR 0 1
17256: RET
// export function hHackChangeYourSide ; begin
17257: LD_INT 0
17259: PPUSH
// if your_side = 8 then
17260: LD_OWVAR 2
17264: PUSH
17265: LD_INT 8
17267: EQUAL
17268: IFFALSE 17280
// your_side := 0 else
17270: LD_ADDR_OWVAR 2
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
17278: GO 17294
// your_side := your_side + 1 ;
17280: LD_ADDR_OWVAR 2
17284: PUSH
17285: LD_OWVAR 2
17289: PUSH
17290: LD_INT 1
17292: PLUS
17293: ST_TO_ADDR
// end ;
17294: LD_VAR 0 1
17298: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17299: LD_INT 0
17301: PPUSH
17302: PPUSH
17303: PPUSH
// for i in all_units do
17304: LD_ADDR_VAR 0 2
17308: PUSH
17309: LD_OWVAR 3
17313: PUSH
17314: FOR_IN
17315: IFFALSE 17393
// if IsSelected ( i ) then
17317: LD_VAR 0 2
17321: PPUSH
17322: CALL_OW 306
17326: IFFALSE 17391
// begin j := GetSide ( i ) ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 255
17342: ST_TO_ADDR
// if j = 8 then
17343: LD_VAR 0 3
17347: PUSH
17348: LD_INT 8
17350: EQUAL
17351: IFFALSE 17363
// j := 0 else
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_INT 0
17360: ST_TO_ADDR
17361: GO 17377
// j := j + 1 ;
17363: LD_ADDR_VAR 0 3
17367: PUSH
17368: LD_VAR 0 3
17372: PUSH
17373: LD_INT 1
17375: PLUS
17376: ST_TO_ADDR
// SetSide ( i , j ) ;
17377: LD_VAR 0 2
17381: PPUSH
17382: LD_VAR 0 3
17386: PPUSH
17387: CALL_OW 235
// end ;
17391: GO 17314
17393: POP
17394: POP
// end ;
17395: LD_VAR 0 1
17399: RET
// export function hHackFog ; begin
17400: LD_INT 0
17402: PPUSH
// FogOff ( true ) ;
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 344
// end ;
17410: LD_VAR 0 1
17414: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17415: LD_INT 0
17417: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_VAR 0 2
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 483
// CenterOnXY ( x , y ) ;
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_VAR 0 3
17452: PPUSH
17453: CALL_OW 84
// end ; end_of_file
17457: LD_VAR 0 4
17461: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17462: LD_VAR 0 1
17466: PUSH
17467: LD_INT 200
17469: DOUBLE
17470: GREATEREQUAL
17471: IFFALSE 17479
17473: LD_INT 299
17475: DOUBLE
17476: LESSEQUAL
17477: IFTRUE 17481
17479: GO 17513
17481: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17482: LD_VAR 0 1
17486: PPUSH
17487: LD_VAR 0 2
17491: PPUSH
17492: LD_VAR 0 3
17496: PPUSH
17497: LD_VAR 0 4
17501: PPUSH
17502: LD_VAR 0 5
17506: PPUSH
17507: CALL 17757 0 5
17511: GO 17590
17513: LD_INT 300
17515: DOUBLE
17516: GREATEREQUAL
17517: IFFALSE 17525
17519: LD_INT 399
17521: DOUBLE
17522: LESSEQUAL
17523: IFTRUE 17527
17525: GO 17589
17527: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17528: LD_VAR 0 1
17532: PPUSH
17533: LD_VAR 0 2
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_VAR 0 4
17547: PPUSH
17548: LD_VAR 0 5
17552: PPUSH
17553: LD_VAR 0 6
17557: PPUSH
17558: LD_VAR 0 7
17562: PPUSH
17563: LD_VAR 0 8
17567: PPUSH
17568: LD_VAR 0 9
17572: PPUSH
17573: LD_VAR 0 10
17577: PPUSH
17578: LD_VAR 0 11
17582: PPUSH
17583: CALL 15482 0 11
17587: GO 17590
17589: POP
// end ;
17590: PPOPN 11
17592: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_VAR 0 2
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_VAR 0 4
17612: PPUSH
17613: LD_VAR 0 5
17617: PPUSH
17618: CALL 17739 0 5
// end ; end_of_file
17622: PPOPN 5
17624: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17625: LD_INT 0
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17631: LD_VAR 0 1
17635: PPUSH
17636: CALL_OW 264
17640: PUSH
17641: LD_EXP 94
17645: EQUAL
17646: IFFALSE 17718
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17648: LD_INT 68
17650: PPUSH
17651: LD_VAR 0 1
17655: PPUSH
17656: CALL_OW 255
17660: PPUSH
17661: CALL_OW 321
17665: PUSH
17666: LD_INT 2
17668: EQUAL
17669: IFFALSE 17681
// eff := 70 else
17671: LD_ADDR_VAR 0 4
17675: PUSH
17676: LD_INT 70
17678: ST_TO_ADDR
17679: GO 17689
// eff := 30 ;
17681: LD_ADDR_VAR 0 4
17685: PUSH
17686: LD_INT 30
17688: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: CALL_OW 250
17698: PPUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 251
17708: PPUSH
17709: LD_VAR 0 4
17713: PPUSH
17714: CALL_OW 495
// end ; end ;
17718: LD_VAR 0 2
17722: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17723: LD_INT 0
17725: PPUSH
// end ;
17726: LD_VAR 0 4
17730: RET
// export function SOS_Command ( cmd ) ; begin
17731: LD_INT 0
17733: PPUSH
// end ;
17734: LD_VAR 0 2
17738: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17739: LD_INT 0
17741: PPUSH
// if cmd = 121 then
17742: LD_VAR 0 1
17746: PUSH
17747: LD_INT 121
17749: EQUAL
17750: IFFALSE 17752
// end ;
17752: LD_VAR 0 6
17756: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17757: LD_INT 0
17759: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 250
17767: EQUAL
17768: PUSH
17769: LD_VAR 0 2
17773: PPUSH
17774: CALL_OW 264
17778: PUSH
17779: LD_EXP 97
17783: EQUAL
17784: AND
17785: IFFALSE 17806
// MinerPlaceMine ( unit , x , y ) ;
17787: LD_VAR 0 2
17791: PPUSH
17792: LD_VAR 0 4
17796: PPUSH
17797: LD_VAR 0 5
17801: PPUSH
17802: CALL 20155 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17806: LD_VAR 0 1
17810: PUSH
17811: LD_INT 251
17813: EQUAL
17814: PUSH
17815: LD_VAR 0 2
17819: PPUSH
17820: CALL_OW 264
17824: PUSH
17825: LD_EXP 97
17829: EQUAL
17830: AND
17831: IFFALSE 17852
// MinerDetonateMine ( unit , x , y ) ;
17833: LD_VAR 0 2
17837: PPUSH
17838: LD_VAR 0 4
17842: PPUSH
17843: LD_VAR 0 5
17847: PPUSH
17848: CALL 20432 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17852: LD_VAR 0 1
17856: PUSH
17857: LD_INT 252
17859: EQUAL
17860: PUSH
17861: LD_VAR 0 2
17865: PPUSH
17866: CALL_OW 264
17870: PUSH
17871: LD_EXP 97
17875: EQUAL
17876: AND
17877: IFFALSE 17898
// MinerCreateMinefield ( unit , x , y ) ;
17879: LD_VAR 0 2
17883: PPUSH
17884: LD_VAR 0 4
17888: PPUSH
17889: LD_VAR 0 5
17893: PPUSH
17894: CALL 20849 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17898: LD_VAR 0 1
17902: PUSH
17903: LD_INT 253
17905: EQUAL
17906: PUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 257
17916: PUSH
17917: LD_INT 5
17919: EQUAL
17920: AND
17921: IFFALSE 17942
// ComBinocular ( unit , x , y ) ;
17923: LD_VAR 0 2
17927: PPUSH
17928: LD_VAR 0 4
17932: PPUSH
17933: LD_VAR 0 5
17937: PPUSH
17938: CALL 21220 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17942: LD_VAR 0 1
17946: PUSH
17947: LD_INT 254
17949: EQUAL
17950: PUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: CALL_OW 264
17960: PUSH
17961: LD_EXP 92
17965: EQUAL
17966: AND
17967: PUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: CALL_OW 263
17977: PUSH
17978: LD_INT 3
17980: EQUAL
17981: AND
17982: IFFALSE 17998
// HackDestroyVehicle ( unit , selectedUnit ) ;
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: CALL 19515 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17998: LD_VAR 0 1
18002: PUSH
18003: LD_INT 255
18005: EQUAL
18006: PUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: CALL_OW 264
18016: PUSH
18017: LD_INT 14
18019: PUSH
18020: LD_INT 53
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: IN
18027: AND
18028: PUSH
18029: LD_VAR 0 4
18033: PPUSH
18034: LD_VAR 0 5
18038: PPUSH
18039: CALL_OW 488
18043: AND
18044: IFFALSE 18068
// CutTreeXYR ( unit , x , y , 12 ) ;
18046: LD_VAR 0 2
18050: PPUSH
18051: LD_VAR 0 4
18055: PPUSH
18056: LD_VAR 0 5
18060: PPUSH
18061: LD_INT 12
18063: PPUSH
18064: CALL 18081 0 4
// end ;
18068: LD_VAR 0 6
18072: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18073: LD_INT 0
18075: PPUSH
// end ;
18076: LD_VAR 0 4
18080: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18081: LD_INT 0
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18092: LD_VAR 0 1
18096: NOT
18097: PUSH
18098: LD_VAR 0 2
18102: PPUSH
18103: LD_VAR 0 3
18107: PPUSH
18108: CALL_OW 488
18112: NOT
18113: OR
18114: PUSH
18115: LD_VAR 0 4
18119: NOT
18120: OR
18121: IFFALSE 18125
// exit ;
18123: GO 18465
// list := [ ] ;
18125: LD_ADDR_VAR 0 13
18129: PUSH
18130: EMPTY
18131: ST_TO_ADDR
// if x - r < 0 then
18132: LD_VAR 0 2
18136: PUSH
18137: LD_VAR 0 4
18141: MINUS
18142: PUSH
18143: LD_INT 0
18145: LESS
18146: IFFALSE 18158
// min_x := 0 else
18148: LD_ADDR_VAR 0 7
18152: PUSH
18153: LD_INT 0
18155: ST_TO_ADDR
18156: GO 18174
// min_x := x - r ;
18158: LD_ADDR_VAR 0 7
18162: PUSH
18163: LD_VAR 0 2
18167: PUSH
18168: LD_VAR 0 4
18172: MINUS
18173: ST_TO_ADDR
// if y - r < 0 then
18174: LD_VAR 0 3
18178: PUSH
18179: LD_VAR 0 4
18183: MINUS
18184: PUSH
18185: LD_INT 0
18187: LESS
18188: IFFALSE 18200
// min_y := 0 else
18190: LD_ADDR_VAR 0 8
18194: PUSH
18195: LD_INT 0
18197: ST_TO_ADDR
18198: GO 18216
// min_y := y - r ;
18200: LD_ADDR_VAR 0 8
18204: PUSH
18205: LD_VAR 0 3
18209: PUSH
18210: LD_VAR 0 4
18214: MINUS
18215: ST_TO_ADDR
// max_x := x + r ;
18216: LD_ADDR_VAR 0 9
18220: PUSH
18221: LD_VAR 0 2
18225: PUSH
18226: LD_VAR 0 4
18230: PLUS
18231: ST_TO_ADDR
// max_y := y + r ;
18232: LD_ADDR_VAR 0 10
18236: PUSH
18237: LD_VAR 0 3
18241: PUSH
18242: LD_VAR 0 4
18246: PLUS
18247: ST_TO_ADDR
// for _x = min_x to max_x do
18248: LD_ADDR_VAR 0 11
18252: PUSH
18253: DOUBLE
18254: LD_VAR 0 7
18258: DEC
18259: ST_TO_ADDR
18260: LD_VAR 0 9
18264: PUSH
18265: FOR_TO
18266: IFFALSE 18383
// for _y = min_y to max_y do
18268: LD_ADDR_VAR 0 12
18272: PUSH
18273: DOUBLE
18274: LD_VAR 0 8
18278: DEC
18279: ST_TO_ADDR
18280: LD_VAR 0 10
18284: PUSH
18285: FOR_TO
18286: IFFALSE 18379
// begin if not ValidHex ( _x , _y ) then
18288: LD_VAR 0 11
18292: PPUSH
18293: LD_VAR 0 12
18297: PPUSH
18298: CALL_OW 488
18302: NOT
18303: IFFALSE 18307
// continue ;
18305: GO 18285
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18307: LD_VAR 0 11
18311: PPUSH
18312: LD_VAR 0 12
18316: PPUSH
18317: CALL_OW 351
18321: PUSH
18322: LD_VAR 0 11
18326: PPUSH
18327: LD_VAR 0 12
18331: PPUSH
18332: CALL_OW 554
18336: AND
18337: IFFALSE 18377
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18339: LD_ADDR_VAR 0 13
18343: PUSH
18344: LD_VAR 0 13
18348: PPUSH
18349: LD_VAR 0 13
18353: PUSH
18354: LD_INT 1
18356: PLUS
18357: PPUSH
18358: LD_VAR 0 11
18362: PUSH
18363: LD_VAR 0 12
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL_OW 2
18376: ST_TO_ADDR
// end ;
18377: GO 18285
18379: POP
18380: POP
18381: GO 18265
18383: POP
18384: POP
// if not list then
18385: LD_VAR 0 13
18389: NOT
18390: IFFALSE 18394
// exit ;
18392: GO 18465
// for i in list do
18394: LD_ADDR_VAR 0 6
18398: PUSH
18399: LD_VAR 0 13
18403: PUSH
18404: FOR_IN
18405: IFFALSE 18463
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18407: LD_VAR 0 1
18411: PPUSH
18412: LD_STRING M
18414: PUSH
18415: LD_VAR 0 6
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: PUSH
18424: LD_VAR 0 6
18428: PUSH
18429: LD_INT 2
18431: ARRAY
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 0
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: PPUSH
18457: CALL_OW 447
18461: GO 18404
18463: POP
18464: POP
// end ;
18465: LD_VAR 0 5
18469: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18470: LD_EXP 80
18474: NOT
18475: IFFALSE 18525
18477: GO 18479
18479: DISABLE
// begin initHack := true ;
18480: LD_ADDR_EXP 80
18484: PUSH
18485: LD_INT 1
18487: ST_TO_ADDR
// hackTanks := [ ] ;
18488: LD_ADDR_EXP 81
18492: PUSH
18493: EMPTY
18494: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18495: LD_ADDR_EXP 82
18499: PUSH
18500: EMPTY
18501: ST_TO_ADDR
// hackLimit := 3 ;
18502: LD_ADDR_EXP 83
18506: PUSH
18507: LD_INT 3
18509: ST_TO_ADDR
// hackDist := 12 ;
18510: LD_ADDR_EXP 84
18514: PUSH
18515: LD_INT 12
18517: ST_TO_ADDR
// hackCounter := [ ] ;
18518: LD_ADDR_EXP 85
18522: PUSH
18523: EMPTY
18524: ST_TO_ADDR
// end ;
18525: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18526: LD_EXP 80
18530: PUSH
18531: LD_INT 34
18533: PUSH
18534: LD_EXP 92
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: AND
18548: IFFALSE 18803
18550: GO 18552
18552: DISABLE
18553: LD_INT 0
18555: PPUSH
18556: PPUSH
// begin enable ;
18557: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: LD_INT 34
18565: PUSH
18566: LD_EXP 92
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PPUSH
18575: CALL_OW 69
18579: PUSH
18580: FOR_IN
18581: IFFALSE 18801
// begin if not i in hackTanks then
18583: LD_VAR 0 1
18587: PUSH
18588: LD_EXP 81
18592: IN
18593: NOT
18594: IFFALSE 18677
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18596: LD_ADDR_EXP 81
18600: PUSH
18601: LD_EXP 81
18605: PPUSH
18606: LD_EXP 81
18610: PUSH
18611: LD_INT 1
18613: PLUS
18614: PPUSH
18615: LD_VAR 0 1
18619: PPUSH
18620: CALL_OW 1
18624: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18625: LD_ADDR_EXP 82
18629: PUSH
18630: LD_EXP 82
18634: PPUSH
18635: LD_EXP 82
18639: PUSH
18640: LD_INT 1
18642: PLUS
18643: PPUSH
18644: EMPTY
18645: PPUSH
18646: CALL_OW 1
18650: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18651: LD_ADDR_EXP 85
18655: PUSH
18656: LD_EXP 85
18660: PPUSH
18661: LD_EXP 85
18665: PUSH
18666: LD_INT 1
18668: PLUS
18669: PPUSH
18670: EMPTY
18671: PPUSH
18672: CALL_OW 1
18676: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 302
18686: NOT
18687: IFFALSE 18700
// begin HackUnlinkAll ( i ) ;
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL 18806 0 1
// continue ;
18698: GO 18580
// end ; HackCheckCapturedStatus ( i ) ;
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL 19249 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_INT 81
18716: PUSH
18717: LD_VAR 0 1
18721: PPUSH
18722: CALL_OW 255
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 33
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 91
18743: PUSH
18744: LD_VAR 0 1
18748: PUSH
18749: LD_EXP 84
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 50
18761: PUSH
18762: EMPTY
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: ST_TO_ADDR
// if not tmp then
18776: LD_VAR 0 2
18780: NOT
18781: IFFALSE 18785
// continue ;
18783: GO 18580
// HackLink ( i , tmp ) ;
18785: LD_VAR 0 1
18789: PPUSH
18790: LD_VAR 0 2
18794: PPUSH
18795: CALL 18942 0 2
// end ;
18799: GO 18580
18801: POP
18802: POP
// end ;
18803: PPOPN 2
18805: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
// if not hack in hackTanks then
18811: LD_VAR 0 1
18815: PUSH
18816: LD_EXP 81
18820: IN
18821: NOT
18822: IFFALSE 18826
// exit ;
18824: GO 18937
// index := GetElementIndex ( hackTanks , hack ) ;
18826: LD_ADDR_VAR 0 4
18830: PUSH
18831: LD_EXP 81
18835: PPUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL 26531 0 2
18845: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18846: LD_EXP 82
18850: PUSH
18851: LD_VAR 0 4
18855: ARRAY
18856: IFFALSE 18937
// begin for i in hackTanksCaptured [ index ] do
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_EXP 82
18867: PUSH
18868: LD_VAR 0 4
18872: ARRAY
18873: PUSH
18874: FOR_IN
18875: IFFALSE 18901
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18877: LD_VAR 0 3
18881: PUSH
18882: LD_INT 1
18884: ARRAY
18885: PPUSH
18886: LD_VAR 0 3
18890: PUSH
18891: LD_INT 2
18893: ARRAY
18894: PPUSH
18895: CALL_OW 235
18899: GO 18874
18901: POP
18902: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18903: LD_ADDR_EXP 82
18907: PUSH
18908: LD_EXP 82
18912: PPUSH
18913: LD_VAR 0 4
18917: PPUSH
18918: EMPTY
18919: PPUSH
18920: CALL_OW 1
18924: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: LD_INT 0
18932: PPUSH
18933: CALL_OW 505
// end ; end ;
18937: LD_VAR 0 2
18941: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// if not hack in hackTanks or not vehicles then
18947: LD_VAR 0 1
18951: PUSH
18952: LD_EXP 81
18956: IN
18957: NOT
18958: PUSH
18959: LD_VAR 0 2
18963: NOT
18964: OR
18965: IFFALSE 18969
// exit ;
18967: GO 19244
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18969: LD_ADDR_VAR 0 2
18973: PUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: LD_VAR 0 2
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL 27181 0 4
18994: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18995: LD_ADDR_VAR 0 5
18999: PUSH
19000: LD_EXP 81
19004: PPUSH
19005: LD_VAR 0 1
19009: PPUSH
19010: CALL 26531 0 2
19014: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19015: LD_EXP 82
19019: PUSH
19020: LD_VAR 0 5
19024: ARRAY
19025: PUSH
19026: LD_EXP 83
19030: LESS
19031: IFFALSE 19220
// begin for i := 1 to vehicles do
19033: LD_ADDR_VAR 0 4
19037: PUSH
19038: DOUBLE
19039: LD_INT 1
19041: DEC
19042: ST_TO_ADDR
19043: LD_VAR 0 2
19047: PUSH
19048: FOR_TO
19049: IFFALSE 19218
// begin if hackTanksCaptured [ index ] = hackLimit then
19051: LD_EXP 82
19055: PUSH
19056: LD_VAR 0 5
19060: ARRAY
19061: PUSH
19062: LD_EXP 83
19066: EQUAL
19067: IFFALSE 19071
// break ;
19069: GO 19218
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19071: LD_ADDR_EXP 85
19075: PUSH
19076: LD_EXP 85
19080: PPUSH
19081: LD_VAR 0 5
19085: PPUSH
19086: LD_EXP 85
19090: PUSH
19091: LD_VAR 0 5
19095: ARRAY
19096: PUSH
19097: LD_INT 1
19099: PLUS
19100: PPUSH
19101: CALL_OW 1
19105: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19106: LD_ADDR_EXP 82
19110: PUSH
19111: LD_EXP 82
19115: PPUSH
19116: LD_VAR 0 5
19120: PUSH
19121: LD_EXP 82
19125: PUSH
19126: LD_VAR 0 5
19130: ARRAY
19131: PUSH
19132: LD_INT 1
19134: PLUS
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: LD_VAR 0 2
19144: PUSH
19145: LD_VAR 0 4
19149: ARRAY
19150: PUSH
19151: LD_VAR 0 2
19155: PUSH
19156: LD_VAR 0 4
19160: ARRAY
19161: PPUSH
19162: CALL_OW 255
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PPUSH
19171: CALL 26746 0 3
19175: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19176: LD_VAR 0 2
19180: PUSH
19181: LD_VAR 0 4
19185: ARRAY
19186: PPUSH
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 255
19196: PPUSH
19197: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19201: LD_VAR 0 2
19205: PUSH
19206: LD_VAR 0 4
19210: ARRAY
19211: PPUSH
19212: CALL_OW 141
// end ;
19216: GO 19048
19218: POP
19219: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_EXP 82
19229: PUSH
19230: LD_VAR 0 5
19234: ARRAY
19235: PUSH
19236: LD_INT 0
19238: PLUS
19239: PPUSH
19240: CALL_OW 505
// end ;
19244: LD_VAR 0 3
19248: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19249: LD_INT 0
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
// if not hack in hackTanks then
19255: LD_VAR 0 1
19259: PUSH
19260: LD_EXP 81
19264: IN
19265: NOT
19266: IFFALSE 19270
// exit ;
19268: GO 19510
// index := GetElementIndex ( hackTanks , hack ) ;
19270: LD_ADDR_VAR 0 4
19274: PUSH
19275: LD_EXP 81
19279: PPUSH
19280: LD_VAR 0 1
19284: PPUSH
19285: CALL 26531 0 2
19289: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19290: LD_ADDR_VAR 0 3
19294: PUSH
19295: DOUBLE
19296: LD_EXP 82
19300: PUSH
19301: LD_VAR 0 4
19305: ARRAY
19306: INC
19307: ST_TO_ADDR
19308: LD_INT 1
19310: PUSH
19311: FOR_DOWNTO
19312: IFFALSE 19484
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19314: LD_ADDR_VAR 0 5
19318: PUSH
19319: LD_EXP 82
19323: PUSH
19324: LD_VAR 0 4
19328: ARRAY
19329: PUSH
19330: LD_VAR 0 3
19334: ARRAY
19335: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19336: LD_VAR 0 5
19340: PUSH
19341: LD_INT 1
19343: ARRAY
19344: PPUSH
19345: CALL_OW 302
19349: NOT
19350: PUSH
19351: LD_VAR 0 5
19355: PUSH
19356: LD_INT 1
19358: ARRAY
19359: PPUSH
19360: CALL_OW 255
19364: PUSH
19365: LD_VAR 0 1
19369: PPUSH
19370: CALL_OW 255
19374: NONEQUAL
19375: OR
19376: IFFALSE 19482
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19378: LD_VAR 0 5
19382: PUSH
19383: LD_INT 1
19385: ARRAY
19386: PPUSH
19387: CALL_OW 305
19391: PUSH
19392: LD_VAR 0 5
19396: PUSH
19397: LD_INT 1
19399: ARRAY
19400: PPUSH
19401: CALL_OW 255
19405: PUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 255
19415: EQUAL
19416: AND
19417: IFFALSE 19441
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19419: LD_VAR 0 5
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: LD_VAR 0 5
19432: PUSH
19433: LD_INT 2
19435: ARRAY
19436: PPUSH
19437: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19441: LD_ADDR_EXP 82
19445: PUSH
19446: LD_EXP 82
19450: PPUSH
19451: LD_VAR 0 4
19455: PPUSH
19456: LD_EXP 82
19460: PUSH
19461: LD_VAR 0 4
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 3
19471: PPUSH
19472: CALL_OW 3
19476: PPUSH
19477: CALL_OW 1
19481: ST_TO_ADDR
// end ; end ;
19482: GO 19311
19484: POP
19485: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19486: LD_VAR 0 1
19490: PPUSH
19491: LD_EXP 82
19495: PUSH
19496: LD_VAR 0 4
19500: ARRAY
19501: PUSH
19502: LD_INT 0
19504: PLUS
19505: PPUSH
19506: CALL_OW 505
// end ;
19510: LD_VAR 0 2
19514: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
// if not hack in hackTanks then
19521: LD_VAR 0 1
19525: PUSH
19526: LD_EXP 81
19530: IN
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19621
// index := GetElementIndex ( hackTanks , hack ) ;
19536: LD_ADDR_VAR 0 5
19540: PUSH
19541: LD_EXP 81
19545: PPUSH
19546: LD_VAR 0 1
19550: PPUSH
19551: CALL 26531 0 2
19555: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19556: LD_ADDR_VAR 0 4
19560: PUSH
19561: DOUBLE
19562: LD_INT 1
19564: DEC
19565: ST_TO_ADDR
19566: LD_EXP 82
19570: PUSH
19571: LD_VAR 0 5
19575: ARRAY
19576: PUSH
19577: FOR_TO
19578: IFFALSE 19619
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19580: LD_EXP 82
19584: PUSH
19585: LD_VAR 0 5
19589: ARRAY
19590: PUSH
19591: LD_VAR 0 4
19595: ARRAY
19596: PUSH
19597: LD_INT 1
19599: ARRAY
19600: PUSH
19601: LD_VAR 0 2
19605: EQUAL
19606: IFFALSE 19617
// KillUnit ( vehicle ) ;
19608: LD_VAR 0 2
19612: PPUSH
19613: CALL_OW 66
19617: GO 19577
19619: POP
19620: POP
// end ;
19621: LD_VAR 0 3
19625: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19626: LD_EXP 86
19630: NOT
19631: IFFALSE 19666
19633: GO 19635
19635: DISABLE
// begin initMiner := true ;
19636: LD_ADDR_EXP 86
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// minersList := [ ] ;
19644: LD_ADDR_EXP 87
19648: PUSH
19649: EMPTY
19650: ST_TO_ADDR
// minerMinesList := [ ] ;
19651: LD_ADDR_EXP 88
19655: PUSH
19656: EMPTY
19657: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19658: LD_ADDR_EXP 89
19662: PUSH
19663: LD_INT 5
19665: ST_TO_ADDR
// end ;
19666: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19667: LD_EXP 86
19671: PUSH
19672: LD_INT 34
19674: PUSH
19675: LD_EXP 97
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PPUSH
19684: CALL_OW 69
19688: AND
19689: IFFALSE 20152
19691: GO 19693
19693: DISABLE
19694: LD_INT 0
19696: PPUSH
19697: PPUSH
19698: PPUSH
19699: PPUSH
// begin enable ;
19700: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19701: LD_ADDR_VAR 0 1
19705: PUSH
19706: LD_INT 34
19708: PUSH
19709: LD_EXP 97
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PPUSH
19718: CALL_OW 69
19722: PUSH
19723: FOR_IN
19724: IFFALSE 19796
// begin if not i in minersList then
19726: LD_VAR 0 1
19730: PUSH
19731: LD_EXP 87
19735: IN
19736: NOT
19737: IFFALSE 19794
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19739: LD_ADDR_EXP 87
19743: PUSH
19744: LD_EXP 87
19748: PPUSH
19749: LD_EXP 87
19753: PUSH
19754: LD_INT 1
19756: PLUS
19757: PPUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 1
19767: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19768: LD_ADDR_EXP 88
19772: PUSH
19773: LD_EXP 88
19777: PPUSH
19778: LD_EXP 88
19782: PUSH
19783: LD_INT 1
19785: PLUS
19786: PPUSH
19787: EMPTY
19788: PPUSH
19789: CALL_OW 1
19793: ST_TO_ADDR
// end end ;
19794: GO 19723
19796: POP
19797: POP
// for i := minerMinesList downto 1 do
19798: LD_ADDR_VAR 0 1
19802: PUSH
19803: DOUBLE
19804: LD_EXP 88
19808: INC
19809: ST_TO_ADDR
19810: LD_INT 1
19812: PUSH
19813: FOR_DOWNTO
19814: IFFALSE 20150
// begin if IsLive ( minersList [ i ] ) then
19816: LD_EXP 87
19820: PUSH
19821: LD_VAR 0 1
19825: ARRAY
19826: PPUSH
19827: CALL_OW 300
19831: IFFALSE 19859
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19833: LD_EXP 87
19837: PUSH
19838: LD_VAR 0 1
19842: ARRAY
19843: PPUSH
19844: LD_EXP 88
19848: PUSH
19849: LD_VAR 0 1
19853: ARRAY
19854: PPUSH
19855: CALL_OW 505
// if not minerMinesList [ i ] then
19859: LD_EXP 88
19863: PUSH
19864: LD_VAR 0 1
19868: ARRAY
19869: NOT
19870: IFFALSE 19874
// continue ;
19872: GO 19813
// for j := minerMinesList [ i ] downto 1 do
19874: LD_ADDR_VAR 0 2
19878: PUSH
19879: DOUBLE
19880: LD_EXP 88
19884: PUSH
19885: LD_VAR 0 1
19889: ARRAY
19890: INC
19891: ST_TO_ADDR
19892: LD_INT 1
19894: PUSH
19895: FOR_DOWNTO
19896: IFFALSE 20146
// begin side := GetSide ( minersList [ i ] ) ;
19898: LD_ADDR_VAR 0 3
19902: PUSH
19903: LD_EXP 87
19907: PUSH
19908: LD_VAR 0 1
19912: ARRAY
19913: PPUSH
19914: CALL_OW 255
19918: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19919: LD_ADDR_VAR 0 4
19923: PUSH
19924: LD_EXP 88
19928: PUSH
19929: LD_VAR 0 1
19933: ARRAY
19934: PUSH
19935: LD_VAR 0 2
19939: ARRAY
19940: PUSH
19941: LD_INT 1
19943: ARRAY
19944: PPUSH
19945: LD_EXP 88
19949: PUSH
19950: LD_VAR 0 1
19954: ARRAY
19955: PUSH
19956: LD_VAR 0 2
19960: ARRAY
19961: PUSH
19962: LD_INT 2
19964: ARRAY
19965: PPUSH
19966: CALL_OW 428
19970: ST_TO_ADDR
// if not tmp then
19971: LD_VAR 0 4
19975: NOT
19976: IFFALSE 19980
// continue ;
19978: GO 19895
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19980: LD_VAR 0 4
19984: PUSH
19985: LD_INT 81
19987: PUSH
19988: LD_VAR 0 3
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: IN
20002: PUSH
20003: LD_EXP 88
20007: PUSH
20008: LD_VAR 0 1
20012: ARRAY
20013: PUSH
20014: LD_VAR 0 2
20018: ARRAY
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: PPUSH
20024: LD_EXP 88
20028: PUSH
20029: LD_VAR 0 1
20033: ARRAY
20034: PUSH
20035: LD_VAR 0 2
20039: ARRAY
20040: PUSH
20041: LD_INT 2
20043: ARRAY
20044: PPUSH
20045: CALL_OW 458
20049: AND
20050: IFFALSE 20144
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20052: LD_EXP 88
20056: PUSH
20057: LD_VAR 0 1
20061: ARRAY
20062: PUSH
20063: LD_VAR 0 2
20067: ARRAY
20068: PUSH
20069: LD_INT 1
20071: ARRAY
20072: PPUSH
20073: LD_EXP 88
20077: PUSH
20078: LD_VAR 0 1
20082: ARRAY
20083: PUSH
20084: LD_VAR 0 2
20088: ARRAY
20089: PUSH
20090: LD_INT 2
20092: ARRAY
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20103: LD_ADDR_EXP 88
20107: PUSH
20108: LD_EXP 88
20112: PPUSH
20113: LD_VAR 0 1
20117: PPUSH
20118: LD_EXP 88
20122: PUSH
20123: LD_VAR 0 1
20127: ARRAY
20128: PPUSH
20129: LD_VAR 0 2
20133: PPUSH
20134: CALL_OW 3
20138: PPUSH
20139: CALL_OW 1
20143: ST_TO_ADDR
// end ; end ;
20144: GO 19895
20146: POP
20147: POP
// end ;
20148: GO 19813
20150: POP
20151: POP
// end ;
20152: PPOPN 4
20154: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20155: LD_INT 0
20157: PPUSH
20158: PPUSH
// result := false ;
20159: LD_ADDR_VAR 0 4
20163: PUSH
20164: LD_INT 0
20166: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 264
20176: PUSH
20177: LD_EXP 97
20181: EQUAL
20182: NOT
20183: IFFALSE 20187
// exit ;
20185: GO 20427
// index := GetElementIndex ( minersList , unit ) ;
20187: LD_ADDR_VAR 0 5
20191: PUSH
20192: LD_EXP 87
20196: PPUSH
20197: LD_VAR 0 1
20201: PPUSH
20202: CALL 26531 0 2
20206: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20207: LD_EXP 88
20211: PUSH
20212: LD_VAR 0 5
20216: ARRAY
20217: PUSH
20218: LD_EXP 89
20222: GREATEREQUAL
20223: IFFALSE 20227
// exit ;
20225: GO 20427
// ComMoveXY ( unit , x , y ) ;
20227: LD_VAR 0 1
20231: PPUSH
20232: LD_VAR 0 2
20236: PPUSH
20237: LD_VAR 0 3
20241: PPUSH
20242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20246: LD_INT 35
20248: PPUSH
20249: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20253: LD_VAR 0 1
20257: PPUSH
20258: LD_VAR 0 2
20262: PPUSH
20263: LD_VAR 0 3
20267: PPUSH
20268: CALL 56928 0 3
20272: NOT
20273: PUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 314
20283: AND
20284: IFFALSE 20288
// exit ;
20286: GO 20427
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20288: LD_VAR 0 2
20292: PPUSH
20293: LD_VAR 0 3
20297: PPUSH
20298: CALL_OW 428
20302: PUSH
20303: LD_VAR 0 1
20307: EQUAL
20308: PUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 314
20318: NOT
20319: AND
20320: IFFALSE 20246
// PlaySoundXY ( x , y , PlantMine ) ;
20322: LD_VAR 0 2
20326: PPUSH
20327: LD_VAR 0 3
20331: PPUSH
20332: LD_STRING PlantMine
20334: PPUSH
20335: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20339: LD_VAR 0 2
20343: PPUSH
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 255
20358: PPUSH
20359: LD_INT 0
20361: PPUSH
20362: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20366: LD_ADDR_EXP 88
20370: PUSH
20371: LD_EXP 88
20375: PPUSH
20376: LD_VAR 0 5
20380: PUSH
20381: LD_EXP 88
20385: PUSH
20386: LD_VAR 0 5
20390: ARRAY
20391: PUSH
20392: LD_INT 1
20394: PLUS
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PPUSH
20400: LD_VAR 0 2
20404: PUSH
20405: LD_VAR 0 3
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: CALL 26746 0 3
20418: ST_TO_ADDR
// result := true ;
20419: LD_ADDR_VAR 0 4
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// end ;
20427: LD_VAR 0 4
20431: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20432: LD_INT 0
20434: PPUSH
20435: PPUSH
20436: PPUSH
// if not unit in minersList then
20437: LD_VAR 0 1
20441: PUSH
20442: LD_EXP 87
20446: IN
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20844
// index := GetElementIndex ( minersList , unit ) ;
20452: LD_ADDR_VAR 0 6
20456: PUSH
20457: LD_EXP 87
20461: PPUSH
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL 26531 0 2
20471: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20472: LD_ADDR_VAR 0 5
20476: PUSH
20477: DOUBLE
20478: LD_EXP 88
20482: PUSH
20483: LD_VAR 0 6
20487: ARRAY
20488: INC
20489: ST_TO_ADDR
20490: LD_INT 1
20492: PUSH
20493: FOR_DOWNTO
20494: IFFALSE 20655
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20496: LD_EXP 88
20500: PUSH
20501: LD_VAR 0 6
20505: ARRAY
20506: PUSH
20507: LD_VAR 0 5
20511: ARRAY
20512: PUSH
20513: LD_INT 1
20515: ARRAY
20516: PUSH
20517: LD_VAR 0 2
20521: EQUAL
20522: PUSH
20523: LD_EXP 88
20527: PUSH
20528: LD_VAR 0 6
20532: ARRAY
20533: PUSH
20534: LD_VAR 0 5
20538: ARRAY
20539: PUSH
20540: LD_INT 2
20542: ARRAY
20543: PUSH
20544: LD_VAR 0 3
20548: EQUAL
20549: AND
20550: IFFALSE 20653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20552: LD_EXP 88
20556: PUSH
20557: LD_VAR 0 6
20561: ARRAY
20562: PUSH
20563: LD_VAR 0 5
20567: ARRAY
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: PPUSH
20573: LD_EXP 88
20577: PUSH
20578: LD_VAR 0 6
20582: ARRAY
20583: PUSH
20584: LD_VAR 0 5
20588: ARRAY
20589: PUSH
20590: LD_INT 2
20592: ARRAY
20593: PPUSH
20594: LD_VAR 0 1
20598: PPUSH
20599: CALL_OW 255
20603: PPUSH
20604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20608: LD_ADDR_EXP 88
20612: PUSH
20613: LD_EXP 88
20617: PPUSH
20618: LD_VAR 0 6
20622: PPUSH
20623: LD_EXP 88
20627: PUSH
20628: LD_VAR 0 6
20632: ARRAY
20633: PPUSH
20634: LD_VAR 0 5
20638: PPUSH
20639: CALL_OW 3
20643: PPUSH
20644: CALL_OW 1
20648: ST_TO_ADDR
// exit ;
20649: POP
20650: POP
20651: GO 20844
// end ; end ;
20653: GO 20493
20655: POP
20656: POP
// for i := minerMinesList [ index ] downto 1 do
20657: LD_ADDR_VAR 0 5
20661: PUSH
20662: DOUBLE
20663: LD_EXP 88
20667: PUSH
20668: LD_VAR 0 6
20672: ARRAY
20673: INC
20674: ST_TO_ADDR
20675: LD_INT 1
20677: PUSH
20678: FOR_DOWNTO
20679: IFFALSE 20842
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20681: LD_EXP 88
20685: PUSH
20686: LD_VAR 0 6
20690: ARRAY
20691: PUSH
20692: LD_VAR 0 5
20696: ARRAY
20697: PUSH
20698: LD_INT 1
20700: ARRAY
20701: PPUSH
20702: LD_EXP 88
20706: PUSH
20707: LD_VAR 0 6
20711: ARRAY
20712: PUSH
20713: LD_VAR 0 5
20717: ARRAY
20718: PUSH
20719: LD_INT 2
20721: ARRAY
20722: PPUSH
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL_OW 298
20737: PUSH
20738: LD_INT 6
20740: LESS
20741: IFFALSE 20840
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20743: LD_EXP 88
20747: PUSH
20748: LD_VAR 0 6
20752: ARRAY
20753: PUSH
20754: LD_VAR 0 5
20758: ARRAY
20759: PUSH
20760: LD_INT 1
20762: ARRAY
20763: PPUSH
20764: LD_EXP 88
20768: PUSH
20769: LD_VAR 0 6
20773: ARRAY
20774: PUSH
20775: LD_VAR 0 5
20779: ARRAY
20780: PUSH
20781: LD_INT 2
20783: ARRAY
20784: PPUSH
20785: LD_VAR 0 1
20789: PPUSH
20790: CALL_OW 255
20794: PPUSH
20795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20799: LD_ADDR_EXP 88
20803: PUSH
20804: LD_EXP 88
20808: PPUSH
20809: LD_VAR 0 6
20813: PPUSH
20814: LD_EXP 88
20818: PUSH
20819: LD_VAR 0 6
20823: ARRAY
20824: PPUSH
20825: LD_VAR 0 5
20829: PPUSH
20830: CALL_OW 3
20834: PPUSH
20835: CALL_OW 1
20839: ST_TO_ADDR
// end ; end ;
20840: GO 20678
20842: POP
20843: POP
// end ;
20844: LD_VAR 0 4
20848: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20849: LD_INT 0
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20860: LD_VAR 0 1
20864: PPUSH
20865: CALL_OW 264
20869: PUSH
20870: LD_EXP 97
20874: EQUAL
20875: NOT
20876: PUSH
20877: LD_VAR 0 1
20881: PUSH
20882: LD_EXP 87
20886: IN
20887: NOT
20888: OR
20889: IFFALSE 20893
// exit ;
20891: GO 21215
// index := GetElementIndex ( minersList , unit ) ;
20893: LD_ADDR_VAR 0 6
20897: PUSH
20898: LD_EXP 87
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL 26531 0 2
20912: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20913: LD_ADDR_VAR 0 8
20917: PUSH
20918: LD_EXP 89
20922: PUSH
20923: LD_EXP 88
20927: PUSH
20928: LD_VAR 0 6
20932: ARRAY
20933: MINUS
20934: ST_TO_ADDR
// if not minesFreeAmount then
20935: LD_VAR 0 8
20939: NOT
20940: IFFALSE 20944
// exit ;
20942: GO 21215
// tmp := [ ] ;
20944: LD_ADDR_VAR 0 7
20948: PUSH
20949: EMPTY
20950: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: DOUBLE
20957: LD_INT 1
20959: DEC
20960: ST_TO_ADDR
20961: LD_VAR 0 8
20965: PUSH
20966: FOR_TO
20967: IFFALSE 21162
// begin _d := rand ( 0 , 5 ) ;
20969: LD_ADDR_VAR 0 11
20973: PUSH
20974: LD_INT 0
20976: PPUSH
20977: LD_INT 5
20979: PPUSH
20980: CALL_OW 12
20984: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20985: LD_ADDR_VAR 0 12
20989: PUSH
20990: LD_INT 2
20992: PPUSH
20993: LD_INT 6
20995: PPUSH
20996: CALL_OW 12
21000: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21001: LD_ADDR_VAR 0 9
21005: PUSH
21006: LD_VAR 0 2
21010: PPUSH
21011: LD_VAR 0 11
21015: PPUSH
21016: LD_VAR 0 12
21020: PPUSH
21021: CALL_OW 272
21025: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21026: LD_ADDR_VAR 0 10
21030: PUSH
21031: LD_VAR 0 3
21035: PPUSH
21036: LD_VAR 0 11
21040: PPUSH
21041: LD_VAR 0 12
21045: PPUSH
21046: CALL_OW 273
21050: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21051: LD_VAR 0 9
21055: PPUSH
21056: LD_VAR 0 10
21060: PPUSH
21061: CALL_OW 488
21065: PUSH
21066: LD_VAR 0 9
21070: PUSH
21071: LD_VAR 0 10
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_VAR 0 7
21084: IN
21085: NOT
21086: AND
21087: PUSH
21088: LD_VAR 0 9
21092: PPUSH
21093: LD_VAR 0 10
21097: PPUSH
21098: CALL_OW 458
21102: NOT
21103: AND
21104: IFFALSE 21146
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21106: LD_ADDR_VAR 0 7
21110: PUSH
21111: LD_VAR 0 7
21115: PPUSH
21116: LD_VAR 0 7
21120: PUSH
21121: LD_INT 1
21123: PLUS
21124: PPUSH
21125: LD_VAR 0 9
21129: PUSH
21130: LD_VAR 0 10
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 1
21143: ST_TO_ADDR
21144: GO 21160
// i := i - 1 ;
21146: LD_ADDR_VAR 0 5
21150: PUSH
21151: LD_VAR 0 5
21155: PUSH
21156: LD_INT 1
21158: MINUS
21159: ST_TO_ADDR
// end ;
21160: GO 20966
21162: POP
21163: POP
// for i in tmp do
21164: LD_ADDR_VAR 0 5
21168: PUSH
21169: LD_VAR 0 7
21173: PUSH
21174: FOR_IN
21175: IFFALSE 21213
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21177: LD_VAR 0 1
21181: PPUSH
21182: LD_VAR 0 5
21186: PUSH
21187: LD_INT 1
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 5
21195: PUSH
21196: LD_INT 2
21198: ARRAY
21199: PPUSH
21200: CALL 20155 0 3
21204: NOT
21205: IFFALSE 21211
// exit ;
21207: POP
21208: POP
21209: GO 21215
21211: GO 21174
21213: POP
21214: POP
// end ;
21215: LD_VAR 0 4
21219: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
21228: PPUSH
// if not GetClass ( unit ) = class_sniper then
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 257
21238: PUSH
21239: LD_INT 5
21241: EQUAL
21242: NOT
21243: IFFALSE 21247
// exit ;
21245: GO 21635
// dist := 8 ;
21247: LD_ADDR_VAR 0 5
21251: PUSH
21252: LD_INT 8
21254: ST_TO_ADDR
// viewRange := 12 ;
21255: LD_ADDR_VAR 0 7
21259: PUSH
21260: LD_INT 12
21262: ST_TO_ADDR
// side := GetSide ( unit ) ;
21263: LD_ADDR_VAR 0 6
21267: PUSH
21268: LD_VAR 0 1
21272: PPUSH
21273: CALL_OW 255
21277: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21278: LD_INT 61
21280: PPUSH
21281: LD_VAR 0 6
21285: PPUSH
21286: CALL_OW 321
21290: PUSH
21291: LD_INT 2
21293: EQUAL
21294: IFFALSE 21304
// viewRange := 16 ;
21296: LD_ADDR_VAR 0 7
21300: PUSH
21301: LD_INT 16
21303: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21304: LD_VAR 0 1
21308: PPUSH
21309: LD_VAR 0 2
21313: PPUSH
21314: LD_VAR 0 3
21318: PPUSH
21319: CALL_OW 297
21323: PUSH
21324: LD_VAR 0 5
21328: GREATER
21329: IFFALSE 21408
// begin ComMoveXY ( unit , x , y ) ;
21331: LD_VAR 0 1
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21350: LD_INT 35
21352: PPUSH
21353: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_VAR 0 2
21366: PPUSH
21367: LD_VAR 0 3
21371: PPUSH
21372: CALL 56928 0 3
21376: NOT
21377: IFFALSE 21381
// exit ;
21379: GO 21635
// until GetDistUnitXY ( unit , x , y ) < dist ;
21381: LD_VAR 0 1
21385: PPUSH
21386: LD_VAR 0 2
21390: PPUSH
21391: LD_VAR 0 3
21395: PPUSH
21396: CALL_OW 297
21400: PUSH
21401: LD_VAR 0 5
21405: LESS
21406: IFFALSE 21350
// end ; ComTurnXY ( unit , x , y ) ;
21408: LD_VAR 0 1
21412: PPUSH
21413: LD_VAR 0 2
21417: PPUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: CALL_OW 118
// wait ( 5 ) ;
21427: LD_INT 5
21429: PPUSH
21430: CALL_OW 67
// _d := GetDir ( unit ) ;
21434: LD_ADDR_VAR 0 10
21438: PUSH
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 254
21448: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21449: LD_ADDR_VAR 0 8
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 250
21463: PPUSH
21464: LD_VAR 0 10
21468: PPUSH
21469: LD_VAR 0 5
21473: PPUSH
21474: CALL_OW 272
21478: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21479: LD_ADDR_VAR 0 9
21483: PUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 251
21493: PPUSH
21494: LD_VAR 0 10
21498: PPUSH
21499: LD_VAR 0 5
21503: PPUSH
21504: CALL_OW 273
21508: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21509: LD_VAR 0 8
21513: PPUSH
21514: LD_VAR 0 9
21518: PPUSH
21519: CALL_OW 488
21523: NOT
21524: IFFALSE 21528
// exit ;
21526: GO 21635
// ComAnimCustom ( unit , 1 ) ;
21528: LD_VAR 0 1
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21540: LD_VAR 0 8
21544: PPUSH
21545: LD_VAR 0 9
21549: PPUSH
21550: LD_VAR 0 6
21554: PPUSH
21555: LD_VAR 0 7
21559: PPUSH
21560: CALL_OW 330
// repeat wait ( 1 ) ;
21564: LD_INT 1
21566: PPUSH
21567: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 316
21580: PUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 314
21590: OR
21591: PUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 302
21601: NOT
21602: OR
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 301
21613: OR
21614: IFFALSE 21564
// RemoveSeeing ( _x , _y , side ) ;
21616: LD_VAR 0 8
21620: PPUSH
21621: LD_VAR 0 9
21625: PPUSH
21626: LD_VAR 0 6
21630: PPUSH
21631: CALL_OW 331
// end ; end_of_file
21635: LD_VAR 0 4
21639: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21640: LD_INT 0
21642: PPUSH
// ar_miner := 81 ;
21643: LD_ADDR_EXP 97
21647: PUSH
21648: LD_INT 81
21650: ST_TO_ADDR
// ar_crane := 88 ;
21651: LD_ADDR_EXP 96
21655: PUSH
21656: LD_INT 88
21658: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21659: LD_ADDR_EXP 91
21663: PUSH
21664: LD_INT 89
21666: ST_TO_ADDR
// us_hack := 99 ;
21667: LD_ADDR_EXP 92
21671: PUSH
21672: LD_INT 99
21674: ST_TO_ADDR
// us_artillery := 97 ;
21675: LD_ADDR_EXP 93
21679: PUSH
21680: LD_INT 97
21682: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21683: LD_ADDR_EXP 94
21687: PUSH
21688: LD_INT 91
21690: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
21691: LD_ADDR_EXP 95
21695: PUSH
21696: LD_INT 92
21698: ST_TO_ADDR
// ru_radar := 98 ;
21699: LD_ADDR_EXP 90
21703: PUSH
21704: LD_INT 98
21706: ST_TO_ADDR
// tech_Artillery := 80 ;
21707: LD_ADDR_EXP 98
21711: PUSH
21712: LD_INT 80
21714: ST_TO_ADDR
// tech_RadMat := 81 ;
21715: LD_ADDR_EXP 99
21719: PUSH
21720: LD_INT 81
21722: ST_TO_ADDR
// tech_BasicTools := 82 ;
21723: LD_ADDR_EXP 100
21727: PUSH
21728: LD_INT 82
21730: ST_TO_ADDR
// tech_Cargo := 83 ;
21731: LD_ADDR_EXP 101
21735: PUSH
21736: LD_INT 83
21738: ST_TO_ADDR
// tech_Track := 84 ;
21739: LD_ADDR_EXP 102
21743: PUSH
21744: LD_INT 84
21746: ST_TO_ADDR
// tech_Crane := 85 ;
21747: LD_ADDR_EXP 103
21751: PUSH
21752: LD_INT 85
21754: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21755: LD_ADDR_EXP 104
21759: PUSH
21760: LD_INT 86
21762: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21763: LD_ADDR_EXP 105
21767: PUSH
21768: LD_INT 87
21770: ST_TO_ADDR
// class_mastodont := 31 ;
21771: LD_ADDR_EXP 106
21775: PUSH
21776: LD_INT 31
21778: ST_TO_ADDR
// class_horse := 21 ;
21779: LD_ADDR_EXP 107
21783: PUSH
21784: LD_INT 21
21786: ST_TO_ADDR
// end ;
21787: LD_VAR 0 1
21791: RET
// every 1 do
21792: GO 21794
21794: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21795: CALL 21640 0 0
21799: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
// if exist_mode then
21804: LD_VAR 0 2
21808: IFFALSE 21833
// unit := CreateCharacter ( prefix & ident ) else
21810: LD_ADDR_VAR 0 5
21814: PUSH
21815: LD_VAR 0 3
21819: PUSH
21820: LD_VAR 0 1
21824: STR
21825: PPUSH
21826: CALL_OW 34
21830: ST_TO_ADDR
21831: GO 21848
// unit := NewCharacter ( ident ) ;
21833: LD_ADDR_VAR 0 5
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 25
21847: ST_TO_ADDR
// result := unit ;
21848: LD_ADDR_VAR 0 4
21852: PUSH
21853: LD_VAR 0 5
21857: ST_TO_ADDR
// end ;
21858: LD_VAR 0 4
21862: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21863: LD_INT 0
21865: PPUSH
21866: PPUSH
// if not side or not nation then
21867: LD_VAR 0 1
21871: NOT
21872: PUSH
21873: LD_VAR 0 2
21877: NOT
21878: OR
21879: IFFALSE 21883
// exit ;
21881: GO 22647
// case nation of nation_american :
21883: LD_VAR 0 2
21887: PUSH
21888: LD_INT 1
21890: DOUBLE
21891: EQUAL
21892: IFTRUE 21896
21894: GO 22110
21896: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21897: LD_ADDR_VAR 0 4
21901: PUSH
21902: LD_INT 35
21904: PUSH
21905: LD_INT 45
21907: PUSH
21908: LD_INT 46
21910: PUSH
21911: LD_INT 47
21913: PUSH
21914: LD_INT 82
21916: PUSH
21917: LD_INT 83
21919: PUSH
21920: LD_INT 84
21922: PUSH
21923: LD_INT 85
21925: PUSH
21926: LD_INT 86
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 15
21940: PUSH
21941: LD_INT 16
21943: PUSH
21944: LD_INT 7
21946: PUSH
21947: LD_INT 12
21949: PUSH
21950: LD_INT 13
21952: PUSH
21953: LD_INT 10
21955: PUSH
21956: LD_INT 14
21958: PUSH
21959: LD_INT 20
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 25
21970: PUSH
21971: LD_INT 32
21973: PUSH
21974: LD_INT 27
21976: PUSH
21977: LD_INT 36
21979: PUSH
21980: LD_INT 69
21982: PUSH
21983: LD_INT 39
21985: PUSH
21986: LD_INT 34
21988: PUSH
21989: LD_INT 40
21991: PUSH
21992: LD_INT 48
21994: PUSH
21995: LD_INT 49
21997: PUSH
21998: LD_INT 50
22000: PUSH
22001: LD_INT 51
22003: PUSH
22004: LD_INT 52
22006: PUSH
22007: LD_INT 53
22009: PUSH
22010: LD_INT 54
22012: PUSH
22013: LD_INT 55
22015: PUSH
22016: LD_INT 56
22018: PUSH
22019: LD_INT 57
22021: PUSH
22022: LD_INT 58
22024: PUSH
22025: LD_INT 59
22027: PUSH
22028: LD_INT 60
22030: PUSH
22031: LD_INT 61
22033: PUSH
22034: LD_INT 62
22036: PUSH
22037: LD_INT 80
22039: PUSH
22040: LD_INT 82
22042: PUSH
22043: LD_INT 83
22045: PUSH
22046: LD_INT 84
22048: PUSH
22049: LD_INT 85
22051: PUSH
22052: LD_INT 86
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: ST_TO_ADDR
22108: GO 22571
22110: LD_INT 2
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22340
22118: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_INT 35
22126: PUSH
22127: LD_INT 45
22129: PUSH
22130: LD_INT 46
22132: PUSH
22133: LD_INT 47
22135: PUSH
22136: LD_INT 82
22138: PUSH
22139: LD_INT 83
22141: PUSH
22142: LD_INT 84
22144: PUSH
22145: LD_INT 85
22147: PUSH
22148: LD_INT 87
22150: PUSH
22151: LD_INT 70
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: LD_INT 11
22159: PUSH
22160: LD_INT 3
22162: PUSH
22163: LD_INT 4
22165: PUSH
22166: LD_INT 5
22168: PUSH
22169: LD_INT 6
22171: PUSH
22172: LD_INT 15
22174: PUSH
22175: LD_INT 18
22177: PUSH
22178: LD_INT 7
22180: PUSH
22181: LD_INT 17
22183: PUSH
22184: LD_INT 8
22186: PUSH
22187: LD_INT 20
22189: PUSH
22190: LD_INT 21
22192: PUSH
22193: LD_INT 22
22195: PUSH
22196: LD_INT 72
22198: PUSH
22199: LD_INT 26
22201: PUSH
22202: LD_INT 69
22204: PUSH
22205: LD_INT 39
22207: PUSH
22208: LD_INT 40
22210: PUSH
22211: LD_INT 41
22213: PUSH
22214: LD_INT 42
22216: PUSH
22217: LD_INT 43
22219: PUSH
22220: LD_INT 48
22222: PUSH
22223: LD_INT 49
22225: PUSH
22226: LD_INT 50
22228: PUSH
22229: LD_INT 51
22231: PUSH
22232: LD_INT 52
22234: PUSH
22235: LD_INT 53
22237: PUSH
22238: LD_INT 54
22240: PUSH
22241: LD_INT 55
22243: PUSH
22244: LD_INT 56
22246: PUSH
22247: LD_INT 60
22249: PUSH
22250: LD_INT 61
22252: PUSH
22253: LD_INT 62
22255: PUSH
22256: LD_INT 66
22258: PUSH
22259: LD_INT 67
22261: PUSH
22262: LD_INT 68
22264: PUSH
22265: LD_INT 81
22267: PUSH
22268: LD_INT 82
22270: PUSH
22271: LD_INT 83
22273: PUSH
22274: LD_INT 84
22276: PUSH
22277: LD_INT 85
22279: PUSH
22280: LD_INT 87
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: ST_TO_ADDR
22338: GO 22571
22340: LD_INT 3
22342: DOUBLE
22343: EQUAL
22344: IFTRUE 22348
22346: GO 22570
22348: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22349: LD_ADDR_VAR 0 4
22353: PUSH
22354: LD_INT 46
22356: PUSH
22357: LD_INT 47
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 82
22368: PUSH
22369: LD_INT 83
22371: PUSH
22372: LD_INT 84
22374: PUSH
22375: LD_INT 85
22377: PUSH
22378: LD_INT 86
22380: PUSH
22381: LD_INT 11
22383: PUSH
22384: LD_INT 9
22386: PUSH
22387: LD_INT 20
22389: PUSH
22390: LD_INT 19
22392: PUSH
22393: LD_INT 21
22395: PUSH
22396: LD_INT 24
22398: PUSH
22399: LD_INT 22
22401: PUSH
22402: LD_INT 25
22404: PUSH
22405: LD_INT 28
22407: PUSH
22408: LD_INT 29
22410: PUSH
22411: LD_INT 30
22413: PUSH
22414: LD_INT 31
22416: PUSH
22417: LD_INT 37
22419: PUSH
22420: LD_INT 38
22422: PUSH
22423: LD_INT 32
22425: PUSH
22426: LD_INT 27
22428: PUSH
22429: LD_INT 33
22431: PUSH
22432: LD_INT 69
22434: PUSH
22435: LD_INT 39
22437: PUSH
22438: LD_INT 34
22440: PUSH
22441: LD_INT 40
22443: PUSH
22444: LD_INT 71
22446: PUSH
22447: LD_INT 23
22449: PUSH
22450: LD_INT 44
22452: PUSH
22453: LD_INT 48
22455: PUSH
22456: LD_INT 49
22458: PUSH
22459: LD_INT 50
22461: PUSH
22462: LD_INT 51
22464: PUSH
22465: LD_INT 52
22467: PUSH
22468: LD_INT 53
22470: PUSH
22471: LD_INT 54
22473: PUSH
22474: LD_INT 55
22476: PUSH
22477: LD_INT 56
22479: PUSH
22480: LD_INT 57
22482: PUSH
22483: LD_INT 58
22485: PUSH
22486: LD_INT 59
22488: PUSH
22489: LD_INT 63
22491: PUSH
22492: LD_INT 64
22494: PUSH
22495: LD_INT 65
22497: PUSH
22498: LD_INT 82
22500: PUSH
22501: LD_INT 83
22503: PUSH
22504: LD_INT 84
22506: PUSH
22507: LD_INT 85
22509: PUSH
22510: LD_INT 86
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: ST_TO_ADDR
22568: GO 22571
22570: POP
// if state > - 1 and state < 3 then
22571: LD_VAR 0 3
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: GREATER
22580: PUSH
22581: LD_VAR 0 3
22585: PUSH
22586: LD_INT 3
22588: LESS
22589: AND
22590: IFFALSE 22647
// for i in result do
22592: LD_ADDR_VAR 0 5
22596: PUSH
22597: LD_VAR 0 4
22601: PUSH
22602: FOR_IN
22603: IFFALSE 22645
// if GetTech ( i , side ) <> state then
22605: LD_VAR 0 5
22609: PPUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 321
22619: PUSH
22620: LD_VAR 0 3
22624: NONEQUAL
22625: IFFALSE 22643
// result := result diff i ;
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: LD_VAR 0 4
22636: PUSH
22637: LD_VAR 0 5
22641: DIFF
22642: ST_TO_ADDR
22643: GO 22602
22645: POP
22646: POP
// end ;
22647: LD_VAR 0 4
22651: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22652: LD_INT 0
22654: PPUSH
22655: PPUSH
22656: PPUSH
// result := true ;
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_INT 1
22664: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22665: LD_ADDR_VAR 0 5
22669: PUSH
22670: LD_VAR 0 2
22674: PPUSH
22675: CALL_OW 480
22679: ST_TO_ADDR
// if not tmp then
22680: LD_VAR 0 5
22684: NOT
22685: IFFALSE 22689
// exit ;
22687: GO 22738
// for i in tmp do
22689: LD_ADDR_VAR 0 4
22693: PUSH
22694: LD_VAR 0 5
22698: PUSH
22699: FOR_IN
22700: IFFALSE 22736
// if GetTech ( i , side ) <> state_researched then
22702: LD_VAR 0 4
22706: PPUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 321
22716: PUSH
22717: LD_INT 2
22719: NONEQUAL
22720: IFFALSE 22734
// begin result := false ;
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_INT 0
22729: ST_TO_ADDR
// exit ;
22730: POP
22731: POP
22732: GO 22738
// end ;
22734: GO 22699
22736: POP
22737: POP
// end ;
22738: LD_VAR 0 3
22742: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22743: LD_INT 0
22745: PPUSH
22746: PPUSH
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
22751: PPUSH
22752: PPUSH
22753: PPUSH
22754: PPUSH
22755: PPUSH
22756: PPUSH
22757: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22758: LD_VAR 0 1
22762: NOT
22763: PUSH
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 257
22773: PUSH
22774: LD_INT 9
22776: NONEQUAL
22777: OR
22778: IFFALSE 22782
// exit ;
22780: GO 23355
// side := GetSide ( unit ) ;
22782: LD_ADDR_VAR 0 9
22786: PUSH
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 255
22796: ST_TO_ADDR
// tech_space := tech_spacanom ;
22797: LD_ADDR_VAR 0 12
22801: PUSH
22802: LD_INT 29
22804: ST_TO_ADDR
// tech_time := tech_taurad ;
22805: LD_ADDR_VAR 0 13
22809: PUSH
22810: LD_INT 28
22812: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22813: LD_ADDR_VAR 0 11
22817: PUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 310
22827: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22828: LD_VAR 0 11
22832: PPUSH
22833: CALL_OW 247
22837: PUSH
22838: LD_INT 2
22840: EQUAL
22841: IFFALSE 22845
// exit ;
22843: GO 23355
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22845: LD_ADDR_VAR 0 8
22849: PUSH
22850: LD_INT 81
22852: PUSH
22853: LD_VAR 0 9
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 21
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: ST_TO_ADDR
// if not tmp then
22888: LD_VAR 0 8
22892: NOT
22893: IFFALSE 22897
// exit ;
22895: GO 23355
// if in_unit then
22897: LD_VAR 0 11
22901: IFFALSE 22925
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22903: LD_ADDR_VAR 0 10
22907: PUSH
22908: LD_VAR 0 8
22912: PPUSH
22913: LD_VAR 0 11
22917: PPUSH
22918: CALL_OW 74
22922: ST_TO_ADDR
22923: GO 22945
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22925: LD_ADDR_VAR 0 10
22929: PUSH
22930: LD_VAR 0 8
22934: PPUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 74
22944: ST_TO_ADDR
// if not enemy then
22945: LD_VAR 0 10
22949: NOT
22950: IFFALSE 22954
// exit ;
22952: GO 23355
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22954: LD_VAR 0 11
22958: PUSH
22959: LD_VAR 0 11
22963: PPUSH
22964: LD_VAR 0 10
22968: PPUSH
22969: CALL_OW 296
22973: PUSH
22974: LD_INT 13
22976: GREATER
22977: AND
22978: PUSH
22979: LD_VAR 0 1
22983: PPUSH
22984: LD_VAR 0 10
22988: PPUSH
22989: CALL_OW 296
22993: PUSH
22994: LD_INT 12
22996: GREATER
22997: OR
22998: IFFALSE 23002
// exit ;
23000: GO 23355
// missile := [ 1 ] ;
23002: LD_ADDR_VAR 0 14
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: EMPTY
23011: LIST
23012: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23013: LD_VAR 0 9
23017: PPUSH
23018: LD_VAR 0 12
23022: PPUSH
23023: CALL_OW 325
23027: IFFALSE 23056
// missile := Insert ( missile , missile + 1 , 2 ) ;
23029: LD_ADDR_VAR 0 14
23033: PUSH
23034: LD_VAR 0 14
23038: PPUSH
23039: LD_VAR 0 14
23043: PUSH
23044: LD_INT 1
23046: PLUS
23047: PPUSH
23048: LD_INT 2
23050: PPUSH
23051: CALL_OW 2
23055: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23056: LD_VAR 0 9
23060: PPUSH
23061: LD_VAR 0 13
23065: PPUSH
23066: CALL_OW 325
23070: PUSH
23071: LD_VAR 0 10
23075: PPUSH
23076: CALL_OW 255
23080: PPUSH
23081: LD_VAR 0 13
23085: PPUSH
23086: CALL_OW 325
23090: NOT
23091: AND
23092: IFFALSE 23121
// missile := Insert ( missile , missile + 1 , 3 ) ;
23094: LD_ADDR_VAR 0 14
23098: PUSH
23099: LD_VAR 0 14
23103: PPUSH
23104: LD_VAR 0 14
23108: PUSH
23109: LD_INT 1
23111: PLUS
23112: PPUSH
23113: LD_INT 3
23115: PPUSH
23116: CALL_OW 2
23120: ST_TO_ADDR
// if missile < 2 then
23121: LD_VAR 0 14
23125: PUSH
23126: LD_INT 2
23128: LESS
23129: IFFALSE 23133
// exit ;
23131: GO 23355
// x := GetX ( enemy ) ;
23133: LD_ADDR_VAR 0 4
23137: PUSH
23138: LD_VAR 0 10
23142: PPUSH
23143: CALL_OW 250
23147: ST_TO_ADDR
// y := GetY ( enemy ) ;
23148: LD_ADDR_VAR 0 5
23152: PUSH
23153: LD_VAR 0 10
23157: PPUSH
23158: CALL_OW 251
23162: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23163: LD_ADDR_VAR 0 6
23167: PUSH
23168: LD_VAR 0 4
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PPUSH
23177: LD_INT 1
23179: PPUSH
23180: CALL_OW 12
23184: PLUS
23185: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23186: LD_ADDR_VAR 0 7
23190: PUSH
23191: LD_VAR 0 5
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PPUSH
23200: LD_INT 1
23202: PPUSH
23203: CALL_OW 12
23207: PLUS
23208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23209: LD_VAR 0 6
23213: PPUSH
23214: LD_VAR 0 7
23218: PPUSH
23219: CALL_OW 488
23223: NOT
23224: IFFALSE 23246
// begin _x := x ;
23226: LD_ADDR_VAR 0 6
23230: PUSH
23231: LD_VAR 0 4
23235: ST_TO_ADDR
// _y := y ;
23236: LD_ADDR_VAR 0 7
23240: PUSH
23241: LD_VAR 0 5
23245: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23246: LD_ADDR_VAR 0 3
23250: PUSH
23251: LD_INT 1
23253: PPUSH
23254: LD_VAR 0 14
23258: PPUSH
23259: CALL_OW 12
23263: ST_TO_ADDR
// case i of 1 :
23264: LD_VAR 0 3
23268: PUSH
23269: LD_INT 1
23271: DOUBLE
23272: EQUAL
23273: IFTRUE 23277
23275: GO 23294
23277: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23278: LD_VAR 0 1
23282: PPUSH
23283: LD_VAR 0 10
23287: PPUSH
23288: CALL_OW 115
23292: GO 23355
23294: LD_INT 2
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23324
23302: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23303: LD_VAR 0 1
23307: PPUSH
23308: LD_VAR 0 6
23312: PPUSH
23313: LD_VAR 0 7
23317: PPUSH
23318: CALL_OW 153
23322: GO 23355
23324: LD_INT 3
23326: DOUBLE
23327: EQUAL
23328: IFTRUE 23332
23330: GO 23354
23332: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23333: LD_VAR 0 1
23337: PPUSH
23338: LD_VAR 0 6
23342: PPUSH
23343: LD_VAR 0 7
23347: PPUSH
23348: CALL_OW 154
23352: GO 23355
23354: POP
// end ;
23355: LD_VAR 0 2
23359: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23360: LD_INT 0
23362: PPUSH
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
// if not unit or not building then
23368: LD_VAR 0 1
23372: NOT
23373: PUSH
23374: LD_VAR 0 2
23378: NOT
23379: OR
23380: IFFALSE 23384
// exit ;
23382: GO 23542
// x := GetX ( building ) ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_VAR 0 2
23393: PPUSH
23394: CALL_OW 250
23398: ST_TO_ADDR
// y := GetY ( building ) ;
23399: LD_ADDR_VAR 0 6
23403: PUSH
23404: LD_VAR 0 2
23408: PPUSH
23409: CALL_OW 251
23413: ST_TO_ADDR
// for i = 0 to 5 do
23414: LD_ADDR_VAR 0 4
23418: PUSH
23419: DOUBLE
23420: LD_INT 0
23422: DEC
23423: ST_TO_ADDR
23424: LD_INT 5
23426: PUSH
23427: FOR_TO
23428: IFFALSE 23540
// begin _x := ShiftX ( x , i , 3 ) ;
23430: LD_ADDR_VAR 0 7
23434: PUSH
23435: LD_VAR 0 5
23439: PPUSH
23440: LD_VAR 0 4
23444: PPUSH
23445: LD_INT 3
23447: PPUSH
23448: CALL_OW 272
23452: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23453: LD_ADDR_VAR 0 8
23457: PUSH
23458: LD_VAR 0 6
23462: PPUSH
23463: LD_VAR 0 4
23467: PPUSH
23468: LD_INT 3
23470: PPUSH
23471: CALL_OW 273
23475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23476: LD_VAR 0 7
23480: PPUSH
23481: LD_VAR 0 8
23485: PPUSH
23486: CALL_OW 488
23490: NOT
23491: IFFALSE 23495
// continue ;
23493: GO 23427
// if HexInfo ( _x , _y ) = 0 then
23495: LD_VAR 0 7
23499: PPUSH
23500: LD_VAR 0 8
23504: PPUSH
23505: CALL_OW 428
23509: PUSH
23510: LD_INT 0
23512: EQUAL
23513: IFFALSE 23538
// begin ComMoveXY ( unit , _x , _y ) ;
23515: LD_VAR 0 1
23519: PPUSH
23520: LD_VAR 0 7
23524: PPUSH
23525: LD_VAR 0 8
23529: PPUSH
23530: CALL_OW 111
// exit ;
23534: POP
23535: POP
23536: GO 23542
// end ; end ;
23538: GO 23427
23540: POP
23541: POP
// end ;
23542: LD_VAR 0 3
23546: RET
// export function ScanBase ( side , base_area ) ; begin
23547: LD_INT 0
23549: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23550: LD_ADDR_VAR 0 3
23554: PUSH
23555: LD_VAR 0 2
23559: PPUSH
23560: LD_INT 81
23562: PUSH
23563: LD_VAR 0 1
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PPUSH
23572: CALL_OW 70
23576: ST_TO_ADDR
// end ;
23577: LD_VAR 0 3
23581: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23582: LD_INT 0
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
// result := false ;
23588: LD_ADDR_VAR 0 2
23592: PUSH
23593: LD_INT 0
23595: ST_TO_ADDR
// side := GetSide ( unit ) ;
23596: LD_ADDR_VAR 0 3
23600: PUSH
23601: LD_VAR 0 1
23605: PPUSH
23606: CALL_OW 255
23610: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23611: LD_ADDR_VAR 0 4
23615: PUSH
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL_OW 248
23625: ST_TO_ADDR
// case nat of 1 :
23626: LD_VAR 0 4
23630: PUSH
23631: LD_INT 1
23633: DOUBLE
23634: EQUAL
23635: IFTRUE 23639
23637: GO 23650
23639: POP
// tech := tech_lassight ; 2 :
23640: LD_ADDR_VAR 0 5
23644: PUSH
23645: LD_INT 12
23647: ST_TO_ADDR
23648: GO 23689
23650: LD_INT 2
23652: DOUBLE
23653: EQUAL
23654: IFTRUE 23658
23656: GO 23669
23658: POP
// tech := tech_mortar ; 3 :
23659: LD_ADDR_VAR 0 5
23663: PUSH
23664: LD_INT 41
23666: ST_TO_ADDR
23667: GO 23689
23669: LD_INT 3
23671: DOUBLE
23672: EQUAL
23673: IFTRUE 23677
23675: GO 23688
23677: POP
// tech := tech_bazooka ; end ;
23678: LD_ADDR_VAR 0 5
23682: PUSH
23683: LD_INT 44
23685: ST_TO_ADDR
23686: GO 23689
23688: POP
// if Researched ( side , tech ) then
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_VAR 0 5
23698: PPUSH
23699: CALL_OW 325
23703: IFFALSE 23730
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_INT 5
23712: PUSH
23713: LD_INT 8
23715: PUSH
23716: LD_INT 9
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: PUSH
23724: LD_VAR 0 4
23728: ARRAY
23729: ST_TO_ADDR
// end ;
23730: LD_VAR 0 2
23734: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23735: LD_INT 0
23737: PPUSH
23738: PPUSH
23739: PPUSH
// if not mines then
23740: LD_VAR 0 2
23744: NOT
23745: IFFALSE 23749
// exit ;
23747: GO 23893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23749: LD_ADDR_VAR 0 5
23753: PUSH
23754: LD_INT 81
23756: PUSH
23757: LD_VAR 0 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 21
23771: PUSH
23772: LD_INT 3
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 69
23791: ST_TO_ADDR
// for i in mines do
23792: LD_ADDR_VAR 0 4
23796: PUSH
23797: LD_VAR 0 2
23801: PUSH
23802: FOR_IN
23803: IFFALSE 23891
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23805: LD_VAR 0 4
23809: PUSH
23810: LD_INT 1
23812: ARRAY
23813: PPUSH
23814: LD_VAR 0 4
23818: PUSH
23819: LD_INT 2
23821: ARRAY
23822: PPUSH
23823: CALL_OW 458
23827: NOT
23828: IFFALSE 23832
// continue ;
23830: GO 23802
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23832: LD_VAR 0 4
23836: PUSH
23837: LD_INT 1
23839: ARRAY
23840: PPUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_INT 2
23848: ARRAY
23849: PPUSH
23850: CALL_OW 428
23854: PUSH
23855: LD_VAR 0 5
23859: IN
23860: IFFALSE 23889
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23862: LD_VAR 0 4
23866: PUSH
23867: LD_INT 1
23869: ARRAY
23870: PPUSH
23871: LD_VAR 0 4
23875: PUSH
23876: LD_INT 2
23878: ARRAY
23879: PPUSH
23880: LD_VAR 0 1
23884: PPUSH
23885: CALL_OW 456
// end ;
23889: GO 23802
23891: POP
23892: POP
// end ;
23893: LD_VAR 0 3
23897: RET
// export function Count ( array ) ; var i ; begin
23898: LD_INT 0
23900: PPUSH
23901: PPUSH
// result := 0 ;
23902: LD_ADDR_VAR 0 2
23906: PUSH
23907: LD_INT 0
23909: ST_TO_ADDR
// for i in array do
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_VAR 0 1
23919: PUSH
23920: FOR_IN
23921: IFFALSE 23945
// if i then
23923: LD_VAR 0 3
23927: IFFALSE 23943
// result := result + 1 ;
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: LD_VAR 0 2
23938: PUSH
23939: LD_INT 1
23941: PLUS
23942: ST_TO_ADDR
23943: GO 23920
23945: POP
23946: POP
// end ;
23947: LD_VAR 0 2
23951: RET
// export function IsEmpty ( building ) ; begin
23952: LD_INT 0
23954: PPUSH
// if not building then
23955: LD_VAR 0 1
23959: NOT
23960: IFFALSE 23964
// exit ;
23962: GO 24007
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23964: LD_ADDR_VAR 0 2
23968: PUSH
23969: LD_VAR 0 1
23973: PUSH
23974: LD_INT 22
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 255
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 58
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PPUSH
24001: CALL_OW 69
24005: IN
24006: ST_TO_ADDR
// end ;
24007: LD_VAR 0 2
24011: RET
// export function IsNotFull ( building ) ; begin
24012: LD_INT 0
24014: PPUSH
// if not building then
24015: LD_VAR 0 1
24019: NOT
24020: IFFALSE 24024
// exit ;
24022: GO 24043
// result := UnitsInside ( building ) < 6 ;
24024: LD_ADDR_VAR 0 2
24028: PUSH
24029: LD_VAR 0 1
24033: PPUSH
24034: CALL_OW 313
24038: PUSH
24039: LD_INT 6
24041: LESS
24042: ST_TO_ADDR
// end ;
24043: LD_VAR 0 2
24047: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24048: LD_INT 0
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
// tmp := [ ] ;
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: EMPTY
24060: ST_TO_ADDR
// list := [ ] ;
24061: LD_ADDR_VAR 0 5
24065: PUSH
24066: EMPTY
24067: ST_TO_ADDR
// for i = 16 to 25 do
24068: LD_ADDR_VAR 0 4
24072: PUSH
24073: DOUBLE
24074: LD_INT 16
24076: DEC
24077: ST_TO_ADDR
24078: LD_INT 25
24080: PUSH
24081: FOR_TO
24082: IFFALSE 24155
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24084: LD_ADDR_VAR 0 3
24088: PUSH
24089: LD_VAR 0 3
24093: PUSH
24094: LD_INT 22
24096: PUSH
24097: LD_VAR 0 1
24101: PPUSH
24102: CALL_OW 255
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 91
24113: PUSH
24114: LD_VAR 0 1
24118: PUSH
24119: LD_INT 6
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_VAR 0 4
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: PPUSH
24147: CALL_OW 69
24151: ADD
24152: ST_TO_ADDR
24153: GO 24081
24155: POP
24156: POP
// for i = 1 to tmp do
24157: LD_ADDR_VAR 0 4
24161: PUSH
24162: DOUBLE
24163: LD_INT 1
24165: DEC
24166: ST_TO_ADDR
24167: LD_VAR 0 3
24171: PUSH
24172: FOR_TO
24173: IFFALSE 24261
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24175: LD_ADDR_VAR 0 5
24179: PUSH
24180: LD_VAR 0 5
24184: PUSH
24185: LD_VAR 0 3
24189: PUSH
24190: LD_VAR 0 4
24194: ARRAY
24195: PPUSH
24196: CALL_OW 266
24200: PUSH
24201: LD_VAR 0 3
24205: PUSH
24206: LD_VAR 0 4
24210: ARRAY
24211: PPUSH
24212: CALL_OW 250
24216: PUSH
24217: LD_VAR 0 3
24221: PUSH
24222: LD_VAR 0 4
24226: ARRAY
24227: PPUSH
24228: CALL_OW 251
24232: PUSH
24233: LD_VAR 0 3
24237: PUSH
24238: LD_VAR 0 4
24242: ARRAY
24243: PPUSH
24244: CALL_OW 254
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: ADD
24258: ST_TO_ADDR
24259: GO 24172
24261: POP
24262: POP
// result := list ;
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_VAR 0 5
24272: ST_TO_ADDR
// end ;
24273: LD_VAR 0 2
24277: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24278: LD_INT 0
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
// if not factory then
24287: LD_VAR 0 1
24291: NOT
24292: IFFALSE 24296
// exit ;
24294: GO 24889
// if control = control_apeman then
24296: LD_VAR 0 4
24300: PUSH
24301: LD_INT 5
24303: EQUAL
24304: IFFALSE 24413
// begin tmp := UnitsInside ( factory ) ;
24306: LD_ADDR_VAR 0 8
24310: PUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: CALL_OW 313
24320: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24321: LD_VAR 0 8
24325: PPUSH
24326: LD_INT 25
24328: PUSH
24329: LD_INT 12
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PPUSH
24336: CALL_OW 72
24340: NOT
24341: IFFALSE 24351
// control := control_manual ;
24343: LD_ADDR_VAR 0 4
24347: PUSH
24348: LD_INT 1
24350: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24351: LD_ADDR_VAR 0 8
24355: PUSH
24356: LD_VAR 0 1
24360: PPUSH
24361: CALL 24048 0 1
24365: ST_TO_ADDR
// if tmp then
24366: LD_VAR 0 8
24370: IFFALSE 24413
// begin for i in tmp do
24372: LD_ADDR_VAR 0 7
24376: PUSH
24377: LD_VAR 0 8
24381: PUSH
24382: FOR_IN
24383: IFFALSE 24411
// if i [ 1 ] = b_ext_radio then
24385: LD_VAR 0 7
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: PUSH
24394: LD_INT 22
24396: EQUAL
24397: IFFALSE 24409
// begin control := control_remote ;
24399: LD_ADDR_VAR 0 4
24403: PUSH
24404: LD_INT 2
24406: ST_TO_ADDR
// break ;
24407: GO 24411
// end ;
24409: GO 24382
24411: POP
24412: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24413: LD_VAR 0 1
24417: PPUSH
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_VAR 0 3
24427: PPUSH
24428: LD_VAR 0 4
24432: PPUSH
24433: LD_VAR 0 5
24437: PPUSH
24438: CALL_OW 448
24442: IFFALSE 24477
// begin result := [ chassis , engine , control , weapon ] ;
24444: LD_ADDR_VAR 0 6
24448: PUSH
24449: LD_VAR 0 2
24453: PUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_VAR 0 4
24463: PUSH
24464: LD_VAR 0 5
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: ST_TO_ADDR
// exit ;
24475: GO 24889
// end ; _chassis := AvailableChassisList ( factory ) ;
24477: LD_ADDR_VAR 0 9
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 475
24491: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24492: LD_ADDR_VAR 0 11
24496: PUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 476
24506: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24507: LD_ADDR_VAR 0 12
24511: PUSH
24512: LD_VAR 0 1
24516: PPUSH
24517: CALL_OW 477
24521: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24522: LD_ADDR_VAR 0 10
24526: PUSH
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 478
24536: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24537: LD_VAR 0 9
24541: NOT
24542: PUSH
24543: LD_VAR 0 11
24547: NOT
24548: OR
24549: PUSH
24550: LD_VAR 0 12
24554: NOT
24555: OR
24556: PUSH
24557: LD_VAR 0 10
24561: NOT
24562: OR
24563: IFFALSE 24598
// begin result := [ chassis , engine , control , weapon ] ;
24565: LD_ADDR_VAR 0 6
24569: PUSH
24570: LD_VAR 0 2
24574: PUSH
24575: LD_VAR 0 3
24579: PUSH
24580: LD_VAR 0 4
24584: PUSH
24585: LD_VAR 0 5
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: ST_TO_ADDR
// exit ;
24596: GO 24889
// end ; if not chassis in _chassis then
24598: LD_VAR 0 2
24602: PUSH
24603: LD_VAR 0 9
24607: IN
24608: NOT
24609: IFFALSE 24635
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24611: LD_ADDR_VAR 0 2
24615: PUSH
24616: LD_VAR 0 9
24620: PUSH
24621: LD_INT 1
24623: PPUSH
24624: LD_VAR 0 9
24628: PPUSH
24629: CALL_OW 12
24633: ARRAY
24634: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24635: LD_VAR 0 2
24639: PPUSH
24640: LD_VAR 0 3
24644: PPUSH
24645: CALL 24894 0 2
24649: NOT
24650: IFFALSE 24709
// repeat engine := _engine [ 1 ] ;
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_VAR 0 11
24661: PUSH
24662: LD_INT 1
24664: ARRAY
24665: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24666: LD_ADDR_VAR 0 11
24670: PUSH
24671: LD_VAR 0 11
24675: PPUSH
24676: LD_INT 1
24678: PPUSH
24679: CALL_OW 3
24683: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24684: LD_VAR 0 2
24688: PPUSH
24689: LD_VAR 0 3
24693: PPUSH
24694: CALL 24894 0 2
24698: PUSH
24699: LD_VAR 0 11
24703: PUSH
24704: EMPTY
24705: EQUAL
24706: OR
24707: IFFALSE 24652
// if not control in _control then
24709: LD_VAR 0 4
24713: PUSH
24714: LD_VAR 0 12
24718: IN
24719: NOT
24720: IFFALSE 24746
// control := _control [ rand ( 1 , _control ) ] ;
24722: LD_ADDR_VAR 0 4
24726: PUSH
24727: LD_VAR 0 12
24731: PUSH
24732: LD_INT 1
24734: PPUSH
24735: LD_VAR 0 12
24739: PPUSH
24740: CALL_OW 12
24744: ARRAY
24745: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24746: LD_VAR 0 2
24750: PPUSH
24751: LD_VAR 0 5
24755: PPUSH
24756: CALL 25114 0 2
24760: NOT
24761: IFFALSE 24820
// repeat weapon := _weapon [ 1 ] ;
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: LD_VAR 0 10
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24777: LD_ADDR_VAR 0 10
24781: PUSH
24782: LD_VAR 0 10
24786: PPUSH
24787: LD_INT 1
24789: PPUSH
24790: CALL_OW 3
24794: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24795: LD_VAR 0 2
24799: PPUSH
24800: LD_VAR 0 5
24804: PPUSH
24805: CALL 25114 0 2
24809: PUSH
24810: LD_VAR 0 10
24814: PUSH
24815: EMPTY
24816: EQUAL
24817: OR
24818: IFFALSE 24763
// result := [ ] ;
24820: LD_ADDR_VAR 0 6
24824: PUSH
24825: EMPTY
24826: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: LD_VAR 0 4
24846: PPUSH
24847: LD_VAR 0 5
24851: PPUSH
24852: CALL_OW 448
24856: IFFALSE 24889
// result := [ chassis , engine , control , weapon ] ;
24858: LD_ADDR_VAR 0 6
24862: PUSH
24863: LD_VAR 0 2
24867: PUSH
24868: LD_VAR 0 3
24872: PUSH
24873: LD_VAR 0 4
24877: PUSH
24878: LD_VAR 0 5
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: ST_TO_ADDR
// end ;
24889: LD_VAR 0 6
24893: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24894: LD_INT 0
24896: PPUSH
// if not chassis or not engine then
24897: LD_VAR 0 1
24901: NOT
24902: PUSH
24903: LD_VAR 0 2
24907: NOT
24908: OR
24909: IFFALSE 24913
// exit ;
24911: GO 25109
// case engine of engine_solar :
24913: LD_VAR 0 2
24917: PUSH
24918: LD_INT 2
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24964
24926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 11
24934: PUSH
24935: LD_INT 12
24937: PUSH
24938: LD_INT 13
24940: PUSH
24941: LD_INT 14
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: ST_TO_ADDR
24962: GO 25093
24964: LD_INT 1
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 25034
24972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 11
24980: PUSH
24981: LD_INT 12
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: LD_INT 14
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 2
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: LD_INT 4
25001: PUSH
25002: LD_INT 5
25004: PUSH
25005: LD_INT 21
25007: PUSH
25008: LD_INT 23
25010: PUSH
25011: LD_INT 22
25013: PUSH
25014: LD_INT 24
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
25032: GO 25093
25034: LD_INT 3
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25092
25042: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_INT 13
25050: PUSH
25051: LD_INT 14
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: LD_INT 3
25059: PUSH
25060: LD_INT 4
25062: PUSH
25063: LD_INT 5
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 23
25074: PUSH
25075: LD_INT 24
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
25090: GO 25093
25092: POP
// result := ( chassis in result ) ;
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_VAR 0 1
25102: PUSH
25103: LD_VAR 0 3
25107: IN
25108: ST_TO_ADDR
// end ;
25109: LD_VAR 0 3
25113: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25114: LD_INT 0
25116: PPUSH
// if not chassis or not weapon then
25117: LD_VAR 0 1
25121: NOT
25122: PUSH
25123: LD_VAR 0 2
25127: NOT
25128: OR
25129: IFFALSE 25133
// exit ;
25131: GO 26159
// case weapon of us_machine_gun :
25133: LD_VAR 0 2
25137: PUSH
25138: LD_INT 2
25140: DOUBLE
25141: EQUAL
25142: IFTRUE 25146
25144: GO 25176
25146: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25147: LD_ADDR_VAR 0 3
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 3
25160: PUSH
25161: LD_INT 4
25163: PUSH
25164: LD_INT 5
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: ST_TO_ADDR
25174: GO 26143
25176: LD_INT 3
25178: DOUBLE
25179: EQUAL
25180: IFTRUE 25184
25182: GO 25214
25184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25185: LD_ADDR_VAR 0 3
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 3
25198: PUSH
25199: LD_INT 4
25201: PUSH
25202: LD_INT 5
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: ST_TO_ADDR
25212: GO 26143
25214: LD_INT 11
25216: DOUBLE
25217: EQUAL
25218: IFTRUE 25222
25220: GO 25252
25222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25223: LD_ADDR_VAR 0 3
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 3
25236: PUSH
25237: LD_INT 4
25239: PUSH
25240: LD_INT 5
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: ST_TO_ADDR
25250: GO 26143
25252: LD_INT 4
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25286
25260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: LD_INT 3
25271: PUSH
25272: LD_INT 4
25274: PUSH
25275: LD_INT 5
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 26143
25286: LD_INT 5
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25320
25294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: LD_INT 4
25308: PUSH
25309: LD_INT 5
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 26143
25320: LD_INT 9
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25354
25328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 4
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
25352: GO 26143
25354: LD_INT 7
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25388
25362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 4
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
25386: GO 26143
25388: LD_INT 12
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25422
25396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 4
25410: PUSH
25411: LD_INT 5
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
25420: GO 26143
25422: LD_INT 13
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25456
25430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 3
25441: PUSH
25442: LD_INT 4
25444: PUSH
25445: LD_INT 5
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: ST_TO_ADDR
25454: GO 26143
25456: LD_INT 14
25458: DOUBLE
25459: EQUAL
25460: IFTRUE 25464
25462: GO 25482
25464: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25465: LD_ADDR_VAR 0 3
25469: PUSH
25470: LD_INT 4
25472: PUSH
25473: LD_INT 5
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: ST_TO_ADDR
25480: GO 26143
25482: LD_INT 6
25484: DOUBLE
25485: EQUAL
25486: IFTRUE 25490
25488: GO 25508
25490: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 4
25498: PUSH
25499: LD_INT 5
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: ST_TO_ADDR
25506: GO 26143
25508: LD_INT 10
25510: DOUBLE
25511: EQUAL
25512: IFTRUE 25516
25514: GO 25534
25516: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25517: LD_ADDR_VAR 0 3
25521: PUSH
25522: LD_INT 4
25524: PUSH
25525: LD_INT 5
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 26143
25534: LD_INT 22
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25568
25542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 11
25550: PUSH
25551: LD_INT 12
25553: PUSH
25554: LD_INT 13
25556: PUSH
25557: LD_INT 14
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
25566: GO 26143
25568: LD_INT 23
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25602
25576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 11
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 13
25590: PUSH
25591: LD_INT 14
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
25600: GO 26143
25602: LD_INT 24
25604: DOUBLE
25605: EQUAL
25606: IFTRUE 25610
25608: GO 25636
25610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_INT 11
25618: PUSH
25619: LD_INT 12
25621: PUSH
25622: LD_INT 13
25624: PUSH
25625: LD_INT 14
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
25634: GO 26143
25636: LD_INT 30
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25644
25642: GO 25670
25644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25645: LD_ADDR_VAR 0 3
25649: PUSH
25650: LD_INT 11
25652: PUSH
25653: LD_INT 12
25655: PUSH
25656: LD_INT 13
25658: PUSH
25659: LD_INT 14
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
25668: GO 26143
25670: LD_INT 25
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25696
25678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_INT 13
25686: PUSH
25687: LD_INT 14
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: ST_TO_ADDR
25694: GO 26143
25696: LD_INT 27
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25722
25704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_INT 13
25712: PUSH
25713: LD_INT 14
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: ST_TO_ADDR
25720: GO 26143
25722: LD_INT 28
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25748
25730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_INT 13
25738: PUSH
25739: LD_INT 14
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: ST_TO_ADDR
25746: GO 26143
25748: LD_INT 29
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25774
25756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25757: LD_ADDR_VAR 0 3
25761: PUSH
25762: LD_INT 13
25764: PUSH
25765: LD_INT 14
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: ST_TO_ADDR
25772: GO 26143
25774: LD_INT 31
25776: DOUBLE
25777: EQUAL
25778: IFTRUE 25782
25780: GO 25800
25782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25783: LD_ADDR_VAR 0 3
25787: PUSH
25788: LD_INT 13
25790: PUSH
25791: LD_INT 14
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: ST_TO_ADDR
25798: GO 26143
25800: LD_INT 26
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25826
25808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25809: LD_ADDR_VAR 0 3
25813: PUSH
25814: LD_INT 13
25816: PUSH
25817: LD_INT 14
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: ST_TO_ADDR
25824: GO 26143
25826: LD_INT 42
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25860
25834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 22
25845: PUSH
25846: LD_INT 23
25848: PUSH
25849: LD_INT 24
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: ST_TO_ADDR
25858: GO 26143
25860: LD_INT 43
25862: DOUBLE
25863: EQUAL
25864: IFTRUE 25868
25866: GO 25894
25868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: LD_INT 21
25876: PUSH
25877: LD_INT 22
25879: PUSH
25880: LD_INT 23
25882: PUSH
25883: LD_INT 24
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: ST_TO_ADDR
25892: GO 26143
25894: LD_INT 44
25896: DOUBLE
25897: EQUAL
25898: IFTRUE 25902
25900: GO 25928
25902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 22
25913: PUSH
25914: LD_INT 23
25916: PUSH
25917: LD_INT 24
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
25926: GO 26143
25928: LD_INT 45
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 25962
25936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_INT 23
25950: PUSH
25951: LD_INT 24
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
25960: GO 26143
25962: LD_INT 49
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25996
25970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_INT 21
25978: PUSH
25979: LD_INT 22
25981: PUSH
25982: LD_INT 23
25984: PUSH
25985: LD_INT 24
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
25994: GO 26143
25996: LD_INT 51
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26030
26004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26005: LD_ADDR_VAR 0 3
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 22
26015: PUSH
26016: LD_INT 23
26018: PUSH
26019: LD_INT 24
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
26028: GO 26143
26030: LD_INT 52
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 26064
26038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_INT 21
26046: PUSH
26047: LD_INT 22
26049: PUSH
26050: LD_INT 23
26052: PUSH
26053: LD_INT 24
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
26062: GO 26143
26064: LD_INT 53
26066: DOUBLE
26067: EQUAL
26068: IFTRUE 26072
26070: GO 26090
26072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26073: LD_ADDR_VAR 0 3
26077: PUSH
26078: LD_INT 23
26080: PUSH
26081: LD_INT 24
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: ST_TO_ADDR
26088: GO 26143
26090: LD_INT 46
26092: DOUBLE
26093: EQUAL
26094: IFTRUE 26098
26096: GO 26116
26098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26099: LD_ADDR_VAR 0 3
26103: PUSH
26104: LD_INT 23
26106: PUSH
26107: LD_INT 24
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: ST_TO_ADDR
26114: GO 26143
26116: LD_INT 47
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26142
26124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26125: LD_ADDR_VAR 0 3
26129: PUSH
26130: LD_INT 23
26132: PUSH
26133: LD_INT 24
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: ST_TO_ADDR
26140: GO 26143
26142: POP
// result := ( chassis in result ) ;
26143: LD_ADDR_VAR 0 3
26147: PUSH
26148: LD_VAR 0 1
26152: PUSH
26153: LD_VAR 0 3
26157: IN
26158: ST_TO_ADDR
// end ;
26159: LD_VAR 0 3
26163: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26164: LD_INT 0
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
26172: PPUSH
// result := array ;
26173: LD_ADDR_VAR 0 5
26177: PUSH
26178: LD_VAR 0 1
26182: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26183: LD_VAR 0 1
26187: NOT
26188: PUSH
26189: LD_VAR 0 2
26193: NOT
26194: OR
26195: PUSH
26196: LD_VAR 0 3
26200: NOT
26201: OR
26202: PUSH
26203: LD_VAR 0 2
26207: PUSH
26208: LD_VAR 0 1
26212: GREATER
26213: OR
26214: PUSH
26215: LD_VAR 0 3
26219: PUSH
26220: LD_VAR 0 1
26224: GREATER
26225: OR
26226: IFFALSE 26230
// exit ;
26228: GO 26526
// if direction then
26230: LD_VAR 0 4
26234: IFFALSE 26298
// begin d := 1 ;
26236: LD_ADDR_VAR 0 9
26240: PUSH
26241: LD_INT 1
26243: ST_TO_ADDR
// if i_from > i_to then
26244: LD_VAR 0 2
26248: PUSH
26249: LD_VAR 0 3
26253: GREATER
26254: IFFALSE 26280
// length := ( array - i_from ) + i_to else
26256: LD_ADDR_VAR 0 11
26260: PUSH
26261: LD_VAR 0 1
26265: PUSH
26266: LD_VAR 0 2
26270: MINUS
26271: PUSH
26272: LD_VAR 0 3
26276: PLUS
26277: ST_TO_ADDR
26278: GO 26296
// length := i_to - i_from ;
26280: LD_ADDR_VAR 0 11
26284: PUSH
26285: LD_VAR 0 3
26289: PUSH
26290: LD_VAR 0 2
26294: MINUS
26295: ST_TO_ADDR
// end else
26296: GO 26359
// begin d := - 1 ;
26298: LD_ADDR_VAR 0 9
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: ST_TO_ADDR
// if i_from > i_to then
26307: LD_VAR 0 2
26311: PUSH
26312: LD_VAR 0 3
26316: GREATER
26317: IFFALSE 26337
// length := i_from - i_to else
26319: LD_ADDR_VAR 0 11
26323: PUSH
26324: LD_VAR 0 2
26328: PUSH
26329: LD_VAR 0 3
26333: MINUS
26334: ST_TO_ADDR
26335: GO 26359
// length := ( array - i_to ) + i_from ;
26337: LD_ADDR_VAR 0 11
26341: PUSH
26342: LD_VAR 0 1
26346: PUSH
26347: LD_VAR 0 3
26351: MINUS
26352: PUSH
26353: LD_VAR 0 2
26357: PLUS
26358: ST_TO_ADDR
// end ; if not length then
26359: LD_VAR 0 11
26363: NOT
26364: IFFALSE 26368
// exit ;
26366: GO 26526
// tmp := array ;
26368: LD_ADDR_VAR 0 10
26372: PUSH
26373: LD_VAR 0 1
26377: ST_TO_ADDR
// for i = 1 to length do
26378: LD_ADDR_VAR 0 6
26382: PUSH
26383: DOUBLE
26384: LD_INT 1
26386: DEC
26387: ST_TO_ADDR
26388: LD_VAR 0 11
26392: PUSH
26393: FOR_TO
26394: IFFALSE 26514
// begin for j = 1 to array do
26396: LD_ADDR_VAR 0 7
26400: PUSH
26401: DOUBLE
26402: LD_INT 1
26404: DEC
26405: ST_TO_ADDR
26406: LD_VAR 0 1
26410: PUSH
26411: FOR_TO
26412: IFFALSE 26500
// begin k := j + d ;
26414: LD_ADDR_VAR 0 8
26418: PUSH
26419: LD_VAR 0 7
26423: PUSH
26424: LD_VAR 0 9
26428: PLUS
26429: ST_TO_ADDR
// if k > array then
26430: LD_VAR 0 8
26434: PUSH
26435: LD_VAR 0 1
26439: GREATER
26440: IFFALSE 26450
// k := 1 ;
26442: LD_ADDR_VAR 0 8
26446: PUSH
26447: LD_INT 1
26449: ST_TO_ADDR
// if not k then
26450: LD_VAR 0 8
26454: NOT
26455: IFFALSE 26467
// k := array ;
26457: LD_ADDR_VAR 0 8
26461: PUSH
26462: LD_VAR 0 1
26466: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26467: LD_ADDR_VAR 0 10
26471: PUSH
26472: LD_VAR 0 10
26476: PPUSH
26477: LD_VAR 0 8
26481: PPUSH
26482: LD_VAR 0 1
26486: PUSH
26487: LD_VAR 0 7
26491: ARRAY
26492: PPUSH
26493: CALL_OW 1
26497: ST_TO_ADDR
// end ;
26498: GO 26411
26500: POP
26501: POP
// array := tmp ;
26502: LD_ADDR_VAR 0 1
26506: PUSH
26507: LD_VAR 0 10
26511: ST_TO_ADDR
// end ;
26512: GO 26393
26514: POP
26515: POP
// result := array ;
26516: LD_ADDR_VAR 0 5
26520: PUSH
26521: LD_VAR 0 1
26525: ST_TO_ADDR
// end ;
26526: LD_VAR 0 5
26530: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26531: LD_INT 0
26533: PPUSH
26534: PPUSH
// result := 0 ;
26535: LD_ADDR_VAR 0 3
26539: PUSH
26540: LD_INT 0
26542: ST_TO_ADDR
// if not array or not value in array then
26543: LD_VAR 0 1
26547: NOT
26548: PUSH
26549: LD_VAR 0 2
26553: PUSH
26554: LD_VAR 0 1
26558: IN
26559: NOT
26560: OR
26561: IFFALSE 26565
// exit ;
26563: GO 26619
// for i = 1 to array do
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: DOUBLE
26571: LD_INT 1
26573: DEC
26574: ST_TO_ADDR
26575: LD_VAR 0 1
26579: PUSH
26580: FOR_TO
26581: IFFALSE 26617
// if value = array [ i ] then
26583: LD_VAR 0 2
26587: PUSH
26588: LD_VAR 0 1
26592: PUSH
26593: LD_VAR 0 4
26597: ARRAY
26598: EQUAL
26599: IFFALSE 26615
// begin result := i ;
26601: LD_ADDR_VAR 0 3
26605: PUSH
26606: LD_VAR 0 4
26610: ST_TO_ADDR
// exit ;
26611: POP
26612: POP
26613: GO 26619
// end ;
26615: GO 26580
26617: POP
26618: POP
// end ;
26619: LD_VAR 0 3
26623: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26624: LD_INT 0
26626: PPUSH
// vc_chassis := chassis ;
26627: LD_ADDR_OWVAR 37
26631: PUSH
26632: LD_VAR 0 1
26636: ST_TO_ADDR
// vc_engine := engine ;
26637: LD_ADDR_OWVAR 39
26641: PUSH
26642: LD_VAR 0 2
26646: ST_TO_ADDR
// vc_control := control ;
26647: LD_ADDR_OWVAR 38
26651: PUSH
26652: LD_VAR 0 3
26656: ST_TO_ADDR
// vc_weapon := weapon ;
26657: LD_ADDR_OWVAR 40
26661: PUSH
26662: LD_VAR 0 4
26666: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26667: LD_ADDR_OWVAR 41
26671: PUSH
26672: LD_VAR 0 5
26676: ST_TO_ADDR
// end ;
26677: LD_VAR 0 6
26681: RET
// export function WantPlant ( unit ) ; var task ; begin
26682: LD_INT 0
26684: PPUSH
26685: PPUSH
// result := false ;
26686: LD_ADDR_VAR 0 2
26690: PUSH
26691: LD_INT 0
26693: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: LD_VAR 0 1
26703: PPUSH
26704: CALL_OW 437
26708: ST_TO_ADDR
// if task then
26709: LD_VAR 0 3
26713: IFFALSE 26741
// if task [ 1 ] [ 1 ] = p then
26715: LD_VAR 0 3
26719: PUSH
26720: LD_INT 1
26722: ARRAY
26723: PUSH
26724: LD_INT 1
26726: ARRAY
26727: PUSH
26728: LD_STRING p
26730: EQUAL
26731: IFFALSE 26741
// result := true ;
26733: LD_ADDR_VAR 0 2
26737: PUSH
26738: LD_INT 1
26740: ST_TO_ADDR
// end ;
26741: LD_VAR 0 2
26745: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26746: LD_INT 0
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
// if pos < 1 then
26752: LD_VAR 0 2
26756: PUSH
26757: LD_INT 1
26759: LESS
26760: IFFALSE 26764
// exit ;
26762: GO 27067
// if pos = 1 then
26764: LD_VAR 0 2
26768: PUSH
26769: LD_INT 1
26771: EQUAL
26772: IFFALSE 26805
// result := Replace ( arr , pos [ 1 ] , value ) else
26774: LD_ADDR_VAR 0 4
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: LD_VAR 0 2
26788: PUSH
26789: LD_INT 1
26791: ARRAY
26792: PPUSH
26793: LD_VAR 0 3
26797: PPUSH
26798: CALL_OW 1
26802: ST_TO_ADDR
26803: GO 27067
// begin tmp := arr ;
26805: LD_ADDR_VAR 0 6
26809: PUSH
26810: LD_VAR 0 1
26814: ST_TO_ADDR
// s_arr := [ tmp ] ;
26815: LD_ADDR_VAR 0 7
26819: PUSH
26820: LD_VAR 0 6
26824: PUSH
26825: EMPTY
26826: LIST
26827: ST_TO_ADDR
// for i = 1 to pos - 1 do
26828: LD_ADDR_VAR 0 5
26832: PUSH
26833: DOUBLE
26834: LD_INT 1
26836: DEC
26837: ST_TO_ADDR
26838: LD_VAR 0 2
26842: PUSH
26843: LD_INT 1
26845: MINUS
26846: PUSH
26847: FOR_TO
26848: IFFALSE 26893
// begin tmp := tmp [ pos [ i ] ] ;
26850: LD_ADDR_VAR 0 6
26854: PUSH
26855: LD_VAR 0 6
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_VAR 0 5
26869: ARRAY
26870: ARRAY
26871: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26872: LD_ADDR_VAR 0 7
26876: PUSH
26877: LD_VAR 0 7
26881: PUSH
26882: LD_VAR 0 6
26886: PUSH
26887: EMPTY
26888: LIST
26889: ADD
26890: ST_TO_ADDR
// end ;
26891: GO 26847
26893: POP
26894: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26895: LD_ADDR_VAR 0 6
26899: PUSH
26900: LD_VAR 0 6
26904: PPUSH
26905: LD_VAR 0 2
26909: PUSH
26910: LD_VAR 0 2
26914: ARRAY
26915: PPUSH
26916: LD_VAR 0 3
26920: PPUSH
26921: CALL_OW 1
26925: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26926: LD_ADDR_VAR 0 7
26930: PUSH
26931: LD_VAR 0 7
26935: PPUSH
26936: LD_VAR 0 7
26940: PPUSH
26941: LD_VAR 0 6
26945: PPUSH
26946: CALL_OW 1
26950: ST_TO_ADDR
// for i = s_arr downto 2 do
26951: LD_ADDR_VAR 0 5
26955: PUSH
26956: DOUBLE
26957: LD_VAR 0 7
26961: INC
26962: ST_TO_ADDR
26963: LD_INT 2
26965: PUSH
26966: FOR_DOWNTO
26967: IFFALSE 27051
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26969: LD_ADDR_VAR 0 6
26973: PUSH
26974: LD_VAR 0 7
26978: PUSH
26979: LD_VAR 0 5
26983: PUSH
26984: LD_INT 1
26986: MINUS
26987: ARRAY
26988: PPUSH
26989: LD_VAR 0 2
26993: PUSH
26994: LD_VAR 0 5
26998: PUSH
26999: LD_INT 1
27001: MINUS
27002: ARRAY
27003: PPUSH
27004: LD_VAR 0 7
27008: PUSH
27009: LD_VAR 0 5
27013: ARRAY
27014: PPUSH
27015: CALL_OW 1
27019: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27020: LD_ADDR_VAR 0 7
27024: PUSH
27025: LD_VAR 0 7
27029: PPUSH
27030: LD_VAR 0 5
27034: PUSH
27035: LD_INT 1
27037: MINUS
27038: PPUSH
27039: LD_VAR 0 6
27043: PPUSH
27044: CALL_OW 1
27048: ST_TO_ADDR
// end ;
27049: GO 26966
27051: POP
27052: POP
// result := s_arr [ 1 ] ;
27053: LD_ADDR_VAR 0 4
27057: PUSH
27058: LD_VAR 0 7
27062: PUSH
27063: LD_INT 1
27065: ARRAY
27066: ST_TO_ADDR
// end ; end ;
27067: LD_VAR 0 4
27071: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27072: LD_INT 0
27074: PPUSH
27075: PPUSH
// if not list then
27076: LD_VAR 0 1
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 27176
// i := list [ pos1 ] ;
27085: LD_ADDR_VAR 0 5
27089: PUSH
27090: LD_VAR 0 1
27094: PUSH
27095: LD_VAR 0 2
27099: ARRAY
27100: ST_TO_ADDR
// if not i then
27101: LD_VAR 0 5
27105: NOT
27106: IFFALSE 27110
// exit ;
27108: GO 27176
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27110: LD_ADDR_VAR 0 1
27114: PUSH
27115: LD_VAR 0 1
27119: PPUSH
27120: LD_VAR 0 2
27124: PPUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_VAR 0 3
27134: ARRAY
27135: PPUSH
27136: CALL_OW 1
27140: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27141: LD_ADDR_VAR 0 1
27145: PUSH
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 3
27155: PPUSH
27156: LD_VAR 0 5
27160: PPUSH
27161: CALL_OW 1
27165: ST_TO_ADDR
// result := list ;
27166: LD_ADDR_VAR 0 4
27170: PUSH
27171: LD_VAR 0 1
27175: ST_TO_ADDR
// end ;
27176: LD_VAR 0 4
27180: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27181: LD_INT 0
27183: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27184: LD_ADDR_VAR 0 5
27188: PUSH
27189: LD_VAR 0 1
27193: PPUSH
27194: CALL_OW 250
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 251
27208: PPUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_VAR 0 3
27218: PPUSH
27219: LD_VAR 0 4
27223: PPUSH
27224: CALL 27234 0 5
27228: ST_TO_ADDR
// end ;
27229: LD_VAR 0 5
27233: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
// if not list then
27240: LD_VAR 0 3
27244: NOT
27245: IFFALSE 27249
// exit ;
27247: GO 27637
// result := [ ] ;
27249: LD_ADDR_VAR 0 6
27253: PUSH
27254: EMPTY
27255: ST_TO_ADDR
// for i in list do
27256: LD_ADDR_VAR 0 7
27260: PUSH
27261: LD_VAR 0 3
27265: PUSH
27266: FOR_IN
27267: IFFALSE 27469
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27269: LD_ADDR_VAR 0 9
27273: PUSH
27274: LD_VAR 0 7
27278: PPUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: LD_VAR 0 2
27288: PPUSH
27289: CALL_OW 297
27293: ST_TO_ADDR
// if not result then
27294: LD_VAR 0 6
27298: NOT
27299: IFFALSE 27325
// result := [ [ i , tmp ] ] else
27301: LD_ADDR_VAR 0 6
27305: PUSH
27306: LD_VAR 0 7
27310: PUSH
27311: LD_VAR 0 9
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: ST_TO_ADDR
27323: GO 27467
// begin if result [ result ] [ 2 ] < tmp then
27325: LD_VAR 0 6
27329: PUSH
27330: LD_VAR 0 6
27334: ARRAY
27335: PUSH
27336: LD_INT 2
27338: ARRAY
27339: PUSH
27340: LD_VAR 0 9
27344: LESS
27345: IFFALSE 27387
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27347: LD_ADDR_VAR 0 6
27351: PUSH
27352: LD_VAR 0 6
27356: PPUSH
27357: LD_VAR 0 6
27361: PUSH
27362: LD_INT 1
27364: PLUS
27365: PPUSH
27366: LD_VAR 0 7
27370: PUSH
27371: LD_VAR 0 9
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PPUSH
27380: CALL_OW 2
27384: ST_TO_ADDR
27385: GO 27467
// for j = 1 to result do
27387: LD_ADDR_VAR 0 8
27391: PUSH
27392: DOUBLE
27393: LD_INT 1
27395: DEC
27396: ST_TO_ADDR
27397: LD_VAR 0 6
27401: PUSH
27402: FOR_TO
27403: IFFALSE 27465
// begin if tmp < result [ j ] [ 2 ] then
27405: LD_VAR 0 9
27409: PUSH
27410: LD_VAR 0 6
27414: PUSH
27415: LD_VAR 0 8
27419: ARRAY
27420: PUSH
27421: LD_INT 2
27423: ARRAY
27424: LESS
27425: IFFALSE 27463
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27427: LD_ADDR_VAR 0 6
27431: PUSH
27432: LD_VAR 0 6
27436: PPUSH
27437: LD_VAR 0 8
27441: PPUSH
27442: LD_VAR 0 7
27446: PUSH
27447: LD_VAR 0 9
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PPUSH
27456: CALL_OW 2
27460: ST_TO_ADDR
// break ;
27461: GO 27465
// end ; end ;
27463: GO 27402
27465: POP
27466: POP
// end ; end ;
27467: GO 27266
27469: POP
27470: POP
// if result and not asc then
27471: LD_VAR 0 6
27475: PUSH
27476: LD_VAR 0 4
27480: NOT
27481: AND
27482: IFFALSE 27557
// begin tmp := result ;
27484: LD_ADDR_VAR 0 9
27488: PUSH
27489: LD_VAR 0 6
27493: ST_TO_ADDR
// for i = tmp downto 1 do
27494: LD_ADDR_VAR 0 7
27498: PUSH
27499: DOUBLE
27500: LD_VAR 0 9
27504: INC
27505: ST_TO_ADDR
27506: LD_INT 1
27508: PUSH
27509: FOR_DOWNTO
27510: IFFALSE 27555
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27512: LD_ADDR_VAR 0 6
27516: PUSH
27517: LD_VAR 0 6
27521: PPUSH
27522: LD_VAR 0 9
27526: PUSH
27527: LD_VAR 0 7
27531: MINUS
27532: PUSH
27533: LD_INT 1
27535: PLUS
27536: PPUSH
27537: LD_VAR 0 9
27541: PUSH
27542: LD_VAR 0 7
27546: ARRAY
27547: PPUSH
27548: CALL_OW 1
27552: ST_TO_ADDR
27553: GO 27509
27555: POP
27556: POP
// end ; tmp := [ ] ;
27557: LD_ADDR_VAR 0 9
27561: PUSH
27562: EMPTY
27563: ST_TO_ADDR
// if mode then
27564: LD_VAR 0 5
27568: IFFALSE 27637
// begin for i = 1 to result do
27570: LD_ADDR_VAR 0 7
27574: PUSH
27575: DOUBLE
27576: LD_INT 1
27578: DEC
27579: ST_TO_ADDR
27580: LD_VAR 0 6
27584: PUSH
27585: FOR_TO
27586: IFFALSE 27625
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27588: LD_ADDR_VAR 0 9
27592: PUSH
27593: LD_VAR 0 9
27597: PPUSH
27598: LD_VAR 0 7
27602: PPUSH
27603: LD_VAR 0 6
27607: PUSH
27608: LD_VAR 0 7
27612: ARRAY
27613: PUSH
27614: LD_INT 1
27616: ARRAY
27617: PPUSH
27618: CALL_OW 1
27622: ST_TO_ADDR
27623: GO 27585
27625: POP
27626: POP
// result := tmp ;
27627: LD_ADDR_VAR 0 6
27631: PUSH
27632: LD_VAR 0 9
27636: ST_TO_ADDR
// end ; end ;
27637: LD_VAR 0 6
27641: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27642: LD_INT 0
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27650: LD_ADDR_VAR 0 5
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// if not x or not y then
27672: LD_VAR 0 2
27676: NOT
27677: PUSH
27678: LD_VAR 0 3
27682: NOT
27683: OR
27684: IFFALSE 27688
// exit ;
27686: GO 29334
// if not range then
27688: LD_VAR 0 4
27692: NOT
27693: IFFALSE 27703
// range := 10 ;
27695: LD_ADDR_VAR 0 4
27699: PUSH
27700: LD_INT 10
27702: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27703: LD_ADDR_VAR 0 8
27707: PUSH
27708: LD_INT 81
27710: PUSH
27711: LD_VAR 0 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 92
27722: PUSH
27723: LD_VAR 0 2
27727: PUSH
27728: LD_VAR 0 3
27732: PUSH
27733: LD_VAR 0 4
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 3
27746: PUSH
27747: LD_INT 21
27749: PUSH
27750: LD_INT 3
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL_OW 69
27770: ST_TO_ADDR
// if not tmp then
27771: LD_VAR 0 8
27775: NOT
27776: IFFALSE 27780
// exit ;
27778: GO 29334
// for i in tmp do
27780: LD_ADDR_VAR 0 6
27784: PUSH
27785: LD_VAR 0 8
27789: PUSH
27790: FOR_IN
27791: IFFALSE 29309
// begin points := [ 0 , 0 , 0 ] ;
27793: LD_ADDR_VAR 0 9
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: ST_TO_ADDR
// bpoints := 1 ;
27812: LD_ADDR_VAR 0 10
27816: PUSH
27817: LD_INT 1
27819: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27820: LD_VAR 0 6
27824: PPUSH
27825: CALL_OW 247
27829: PUSH
27830: LD_INT 1
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 28416
27838: POP
// begin if GetClass ( i ) = 1 then
27839: LD_VAR 0 6
27843: PPUSH
27844: CALL_OW 257
27848: PUSH
27849: LD_INT 1
27851: EQUAL
27852: IFFALSE 27873
// points := [ 10 , 5 , 3 ] ;
27854: LD_ADDR_VAR 0 9
27858: PUSH
27859: LD_INT 10
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27873: LD_VAR 0 6
27877: PPUSH
27878: CALL_OW 257
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 3
27888: PUSH
27889: LD_INT 4
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: IN
27897: IFFALSE 27918
// points := [ 3 , 2 , 1 ] ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_INT 3
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 257
27927: PUSH
27928: LD_INT 5
27930: EQUAL
27931: IFFALSE 27952
// points := [ 130 , 5 , 2 ] ;
27933: LD_ADDR_VAR 0 9
27937: PUSH
27938: LD_INT 130
27940: PUSH
27941: LD_INT 5
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27952: LD_VAR 0 6
27956: PPUSH
27957: CALL_OW 257
27961: PUSH
27962: LD_INT 8
27964: EQUAL
27965: IFFALSE 27986
// points := [ 35 , 35 , 30 ] ;
27967: LD_ADDR_VAR 0 9
27971: PUSH
27972: LD_INT 35
27974: PUSH
27975: LD_INT 35
27977: PUSH
27978: LD_INT 30
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 257
27995: PUSH
27996: LD_INT 9
27998: EQUAL
27999: IFFALSE 28020
// points := [ 20 , 55 , 40 ] ;
28001: LD_ADDR_VAR 0 9
28005: PUSH
28006: LD_INT 20
28008: PUSH
28009: LD_INT 55
28011: PUSH
28012: LD_INT 40
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28020: LD_VAR 0 6
28024: PPUSH
28025: CALL_OW 257
28029: PUSH
28030: LD_INT 12
28032: PUSH
28033: LD_INT 16
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: IN
28040: IFFALSE 28061
// points := [ 5 , 3 , 2 ] ;
28042: LD_ADDR_VAR 0 9
28046: PUSH
28047: LD_INT 5
28049: PUSH
28050: LD_INT 3
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28061: LD_VAR 0 6
28065: PPUSH
28066: CALL_OW 257
28070: PUSH
28071: LD_INT 17
28073: EQUAL
28074: IFFALSE 28095
// points := [ 100 , 50 , 75 ] ;
28076: LD_ADDR_VAR 0 9
28080: PUSH
28081: LD_INT 100
28083: PUSH
28084: LD_INT 50
28086: PUSH
28087: LD_INT 75
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28095: LD_VAR 0 6
28099: PPUSH
28100: CALL_OW 257
28104: PUSH
28105: LD_INT 15
28107: EQUAL
28108: IFFALSE 28129
// points := [ 10 , 5 , 3 ] ;
28110: LD_ADDR_VAR 0 9
28114: PUSH
28115: LD_INT 10
28117: PUSH
28118: LD_INT 5
28120: PUSH
28121: LD_INT 3
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28129: LD_VAR 0 6
28133: PPUSH
28134: CALL_OW 257
28138: PUSH
28139: LD_INT 14
28141: EQUAL
28142: IFFALSE 28163
// points := [ 10 , 0 , 0 ] ;
28144: LD_ADDR_VAR 0 9
28148: PUSH
28149: LD_INT 10
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28163: LD_VAR 0 6
28167: PPUSH
28168: CALL_OW 257
28172: PUSH
28173: LD_INT 11
28175: EQUAL
28176: IFFALSE 28197
// points := [ 30 , 10 , 5 ] ;
28178: LD_ADDR_VAR 0 9
28182: PUSH
28183: LD_INT 30
28185: PUSH
28186: LD_INT 10
28188: PUSH
28189: LD_INT 5
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28197: LD_VAR 0 1
28201: PPUSH
28202: LD_INT 5
28204: PPUSH
28205: CALL_OW 321
28209: PUSH
28210: LD_INT 2
28212: EQUAL
28213: IFFALSE 28230
// bpoints := bpoints * 1.8 ;
28215: LD_ADDR_VAR 0 10
28219: PUSH
28220: LD_VAR 0 10
28224: PUSH
28225: LD_REAL  1.80000000000000E+0000
28228: MUL
28229: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28230: LD_VAR 0 6
28234: PPUSH
28235: CALL_OW 257
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: LD_INT 4
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: IN
28258: PUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_INT 51
28266: PPUSH
28267: CALL_OW 321
28271: PUSH
28272: LD_INT 2
28274: EQUAL
28275: AND
28276: IFFALSE 28293
// bpoints := bpoints * 1.2 ;
28278: LD_ADDR_VAR 0 10
28282: PUSH
28283: LD_VAR 0 10
28287: PUSH
28288: LD_REAL  1.20000000000000E+0000
28291: MUL
28292: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28293: LD_VAR 0 6
28297: PPUSH
28298: CALL_OW 257
28302: PUSH
28303: LD_INT 5
28305: PUSH
28306: LD_INT 7
28308: PUSH
28309: LD_INT 9
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: IN
28317: PUSH
28318: LD_VAR 0 1
28322: PPUSH
28323: LD_INT 52
28325: PPUSH
28326: CALL_OW 321
28330: PUSH
28331: LD_INT 2
28333: EQUAL
28334: AND
28335: IFFALSE 28352
// bpoints := bpoints * 1.5 ;
28337: LD_ADDR_VAR 0 10
28341: PUSH
28342: LD_VAR 0 10
28346: PUSH
28347: LD_REAL  1.50000000000000E+0000
28350: MUL
28351: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_INT 66
28359: PPUSH
28360: CALL_OW 321
28364: PUSH
28365: LD_INT 2
28367: EQUAL
28368: IFFALSE 28385
// bpoints := bpoints * 1.1 ;
28370: LD_ADDR_VAR 0 10
28374: PUSH
28375: LD_VAR 0 10
28379: PUSH
28380: LD_REAL  1.10000000000000E+0000
28383: MUL
28384: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28385: LD_ADDR_VAR 0 10
28389: PUSH
28390: LD_VAR 0 10
28394: PUSH
28395: LD_VAR 0 6
28399: PPUSH
28400: LD_INT 1
28402: PPUSH
28403: CALL_OW 259
28407: PUSH
28408: LD_REAL  1.15000000000000E+0000
28411: MUL
28412: MUL
28413: ST_TO_ADDR
// end ; unit_vehicle :
28414: GO 29238
28416: LD_INT 2
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 29226
28424: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28425: LD_VAR 0 6
28429: PPUSH
28430: CALL_OW 264
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 42
28440: PUSH
28441: LD_INT 24
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: IN
28449: IFFALSE 28470
// points := [ 25 , 5 , 3 ] ;
28451: LD_ADDR_VAR 0 9
28455: PUSH
28456: LD_INT 25
28458: PUSH
28459: LD_INT 5
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28470: LD_VAR 0 6
28474: PPUSH
28475: CALL_OW 264
28479: PUSH
28480: LD_INT 4
28482: PUSH
28483: LD_INT 43
28485: PUSH
28486: LD_INT 25
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: IN
28494: IFFALSE 28515
// points := [ 40 , 15 , 5 ] ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_INT 40
28503: PUSH
28504: LD_INT 15
28506: PUSH
28507: LD_INT 5
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28515: LD_VAR 0 6
28519: PPUSH
28520: CALL_OW 264
28524: PUSH
28525: LD_INT 3
28527: PUSH
28528: LD_INT 23
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: IN
28535: IFFALSE 28556
// points := [ 7 , 25 , 8 ] ;
28537: LD_ADDR_VAR 0 9
28541: PUSH
28542: LD_INT 7
28544: PUSH
28545: LD_INT 25
28547: PUSH
28548: LD_INT 8
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28556: LD_VAR 0 6
28560: PPUSH
28561: CALL_OW 264
28565: PUSH
28566: LD_INT 5
28568: PUSH
28569: LD_INT 27
28571: PUSH
28572: LD_INT 44
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: IN
28580: IFFALSE 28601
// points := [ 14 , 50 , 16 ] ;
28582: LD_ADDR_VAR 0 9
28586: PUSH
28587: LD_INT 14
28589: PUSH
28590: LD_INT 50
28592: PUSH
28593: LD_INT 16
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: LIST
28600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28601: LD_VAR 0 6
28605: PPUSH
28606: CALL_OW 264
28610: PUSH
28611: LD_INT 6
28613: PUSH
28614: LD_INT 46
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: IN
28621: IFFALSE 28642
// points := [ 32 , 120 , 70 ] ;
28623: LD_ADDR_VAR 0 9
28627: PUSH
28628: LD_INT 32
28630: PUSH
28631: LD_INT 120
28633: PUSH
28634: LD_INT 70
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28642: LD_VAR 0 6
28646: PPUSH
28647: CALL_OW 264
28651: PUSH
28652: LD_INT 7
28654: PUSH
28655: LD_INT 28
28657: PUSH
28658: LD_INT 45
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: IN
28666: IFFALSE 28687
// points := [ 35 , 20 , 45 ] ;
28668: LD_ADDR_VAR 0 9
28672: PUSH
28673: LD_INT 35
28675: PUSH
28676: LD_INT 20
28678: PUSH
28679: LD_INT 45
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28687: LD_VAR 0 6
28691: PPUSH
28692: CALL_OW 264
28696: PUSH
28697: LD_INT 47
28699: PUSH
28700: EMPTY
28701: LIST
28702: IN
28703: IFFALSE 28724
// points := [ 67 , 45 , 75 ] ;
28705: LD_ADDR_VAR 0 9
28709: PUSH
28710: LD_INT 67
28712: PUSH
28713: LD_INT 45
28715: PUSH
28716: LD_INT 75
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28724: LD_VAR 0 6
28728: PPUSH
28729: CALL_OW 264
28733: PUSH
28734: LD_INT 26
28736: PUSH
28737: EMPTY
28738: LIST
28739: IN
28740: IFFALSE 28761
// points := [ 120 , 30 , 80 ] ;
28742: LD_ADDR_VAR 0 9
28746: PUSH
28747: LD_INT 120
28749: PUSH
28750: LD_INT 30
28752: PUSH
28753: LD_INT 80
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28761: LD_VAR 0 6
28765: PPUSH
28766: CALL_OW 264
28770: PUSH
28771: LD_INT 22
28773: PUSH
28774: EMPTY
28775: LIST
28776: IN
28777: IFFALSE 28798
// points := [ 40 , 1 , 1 ] ;
28779: LD_ADDR_VAR 0 9
28783: PUSH
28784: LD_INT 40
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28798: LD_VAR 0 6
28802: PPUSH
28803: CALL_OW 264
28807: PUSH
28808: LD_INT 29
28810: PUSH
28811: EMPTY
28812: LIST
28813: IN
28814: IFFALSE 28835
// points := [ 70 , 200 , 400 ] ;
28816: LD_ADDR_VAR 0 9
28820: PUSH
28821: LD_INT 70
28823: PUSH
28824: LD_INT 200
28826: PUSH
28827: LD_INT 400
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28835: LD_VAR 0 6
28839: PPUSH
28840: CALL_OW 264
28844: PUSH
28845: LD_INT 14
28847: PUSH
28848: LD_INT 53
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: IN
28855: IFFALSE 28876
// points := [ 40 , 10 , 20 ] ;
28857: LD_ADDR_VAR 0 9
28861: PUSH
28862: LD_INT 40
28864: PUSH
28865: LD_INT 10
28867: PUSH
28868: LD_INT 20
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28876: LD_VAR 0 6
28880: PPUSH
28881: CALL_OW 264
28885: PUSH
28886: LD_INT 9
28888: PUSH
28889: EMPTY
28890: LIST
28891: IN
28892: IFFALSE 28913
// points := [ 5 , 70 , 20 ] ;
28894: LD_ADDR_VAR 0 9
28898: PUSH
28899: LD_INT 5
28901: PUSH
28902: LD_INT 70
28904: PUSH
28905: LD_INT 20
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28913: LD_VAR 0 6
28917: PPUSH
28918: CALL_OW 264
28922: PUSH
28923: LD_INT 10
28925: PUSH
28926: EMPTY
28927: LIST
28928: IN
28929: IFFALSE 28950
// points := [ 35 , 110 , 70 ] ;
28931: LD_ADDR_VAR 0 9
28935: PUSH
28936: LD_INT 35
28938: PUSH
28939: LD_INT 110
28941: PUSH
28942: LD_INT 70
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28950: LD_VAR 0 6
28954: PPUSH
28955: CALL_OW 265
28959: PUSH
28960: LD_INT 25
28962: EQUAL
28963: IFFALSE 28984
// points := [ 80 , 65 , 100 ] ;
28965: LD_ADDR_VAR 0 9
28969: PUSH
28970: LD_INT 80
28972: PUSH
28973: LD_INT 65
28975: PUSH
28976: LD_INT 100
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28984: LD_VAR 0 6
28988: PPUSH
28989: CALL_OW 263
28993: PUSH
28994: LD_INT 1
28996: EQUAL
28997: IFFALSE 29032
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28999: LD_ADDR_VAR 0 10
29003: PUSH
29004: LD_VAR 0 10
29008: PUSH
29009: LD_VAR 0 6
29013: PPUSH
29014: CALL_OW 311
29018: PPUSH
29019: LD_INT 3
29021: PPUSH
29022: CALL_OW 259
29026: PUSH
29027: LD_INT 4
29029: MUL
29030: MUL
29031: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29032: LD_VAR 0 6
29036: PPUSH
29037: CALL_OW 263
29041: PUSH
29042: LD_INT 2
29044: EQUAL
29045: IFFALSE 29096
// begin j := IsControledBy ( i ) ;
29047: LD_ADDR_VAR 0 7
29051: PUSH
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 312
29061: ST_TO_ADDR
// if j then
29062: LD_VAR 0 7
29066: IFFALSE 29096
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29068: LD_ADDR_VAR 0 10
29072: PUSH
29073: LD_VAR 0 10
29077: PUSH
29078: LD_VAR 0 7
29082: PPUSH
29083: LD_INT 3
29085: PPUSH
29086: CALL_OW 259
29090: PUSH
29091: LD_INT 3
29093: MUL
29094: MUL
29095: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29096: LD_VAR 0 6
29100: PPUSH
29101: CALL_OW 264
29105: PUSH
29106: LD_INT 5
29108: PUSH
29109: LD_INT 6
29111: PUSH
29112: LD_INT 46
29114: PUSH
29115: LD_INT 44
29117: PUSH
29118: LD_INT 47
29120: PUSH
29121: LD_INT 45
29123: PUSH
29124: LD_INT 28
29126: PUSH
29127: LD_INT 7
29129: PUSH
29130: LD_INT 27
29132: PUSH
29133: LD_INT 29
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: IN
29148: PUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: LD_INT 52
29156: PPUSH
29157: CALL_OW 321
29161: PUSH
29162: LD_INT 2
29164: EQUAL
29165: AND
29166: IFFALSE 29183
// bpoints := bpoints * 1.2 ;
29168: LD_ADDR_VAR 0 10
29172: PUSH
29173: LD_VAR 0 10
29177: PUSH
29178: LD_REAL  1.20000000000000E+0000
29181: MUL
29182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29183: LD_VAR 0 6
29187: PPUSH
29188: CALL_OW 264
29192: PUSH
29193: LD_INT 6
29195: PUSH
29196: LD_INT 46
29198: PUSH
29199: LD_INT 47
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: LIST
29206: IN
29207: IFFALSE 29224
// bpoints := bpoints * 1.2 ;
29209: LD_ADDR_VAR 0 10
29213: PUSH
29214: LD_VAR 0 10
29218: PUSH
29219: LD_REAL  1.20000000000000E+0000
29222: MUL
29223: ST_TO_ADDR
// end ; unit_building :
29224: GO 29238
29226: LD_INT 3
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29237
29234: POP
// ; end ;
29235: GO 29238
29237: POP
// for j = 1 to 3 do
29238: LD_ADDR_VAR 0 7
29242: PUSH
29243: DOUBLE
29244: LD_INT 1
29246: DEC
29247: ST_TO_ADDR
29248: LD_INT 3
29250: PUSH
29251: FOR_TO
29252: IFFALSE 29305
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29254: LD_ADDR_VAR 0 5
29258: PUSH
29259: LD_VAR 0 5
29263: PPUSH
29264: LD_VAR 0 7
29268: PPUSH
29269: LD_VAR 0 5
29273: PUSH
29274: LD_VAR 0 7
29278: ARRAY
29279: PUSH
29280: LD_VAR 0 9
29284: PUSH
29285: LD_VAR 0 7
29289: ARRAY
29290: PUSH
29291: LD_VAR 0 10
29295: MUL
29296: PLUS
29297: PPUSH
29298: CALL_OW 1
29302: ST_TO_ADDR
29303: GO 29251
29305: POP
29306: POP
// end ;
29307: GO 27790
29309: POP
29310: POP
// result := Replace ( result , 4 , tmp ) ;
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: LD_VAR 0 5
29320: PPUSH
29321: LD_INT 4
29323: PPUSH
29324: LD_VAR 0 8
29328: PPUSH
29329: CALL_OW 1
29333: ST_TO_ADDR
// end ;
29334: LD_VAR 0 5
29338: RET
// export function DangerAtRange ( unit , range ) ; begin
29339: LD_INT 0
29341: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29342: LD_ADDR_VAR 0 3
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 255
29356: PPUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 250
29366: PPUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 251
29376: PPUSH
29377: LD_VAR 0 2
29381: PPUSH
29382: CALL 27642 0 4
29386: ST_TO_ADDR
// end ;
29387: LD_VAR 0 3
29391: RET
// export function DangerInArea ( side , area ) ; begin
29392: LD_INT 0
29394: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_VAR 0 2
29404: PPUSH
29405: LD_INT 81
29407: PUSH
29408: LD_VAR 0 1
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PPUSH
29417: CALL_OW 70
29421: ST_TO_ADDR
// end ;
29422: LD_VAR 0 3
29426: RET
// export function IsExtension ( b ) ; begin
29427: LD_INT 0
29429: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29430: LD_ADDR_VAR 0 2
29434: PUSH
29435: LD_VAR 0 1
29439: PUSH
29440: LD_INT 23
29442: PUSH
29443: LD_INT 20
29445: PUSH
29446: LD_INT 22
29448: PUSH
29449: LD_INT 17
29451: PUSH
29452: LD_INT 24
29454: PUSH
29455: LD_INT 21
29457: PUSH
29458: LD_INT 19
29460: PUSH
29461: LD_INT 16
29463: PUSH
29464: LD_INT 25
29466: PUSH
29467: LD_INT 18
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: IN
29482: ST_TO_ADDR
// end ;
29483: LD_VAR 0 2
29487: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
29492: PPUSH
// result := [ ] ;
29493: LD_ADDR_VAR 0 4
29497: PUSH
29498: EMPTY
29499: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29500: LD_ADDR_VAR 0 5
29504: PUSH
29505: LD_VAR 0 2
29509: PPUSH
29510: LD_INT 21
29512: PUSH
29513: LD_INT 3
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 70
29524: ST_TO_ADDR
// if not tmp then
29525: LD_VAR 0 5
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 29598
// if checkLink then
29534: LD_VAR 0 3
29538: IFFALSE 29588
// begin for i in tmp do
29540: LD_ADDR_VAR 0 6
29544: PUSH
29545: LD_VAR 0 5
29549: PUSH
29550: FOR_IN
29551: IFFALSE 29586
// if GetBase ( i ) <> base then
29553: LD_VAR 0 6
29557: PPUSH
29558: CALL_OW 274
29562: PUSH
29563: LD_VAR 0 1
29567: NONEQUAL
29568: IFFALSE 29584
// ComLinkToBase ( base , i ) ;
29570: LD_VAR 0 1
29574: PPUSH
29575: LD_VAR 0 6
29579: PPUSH
29580: CALL_OW 169
29584: GO 29550
29586: POP
29587: POP
// end ; result := tmp ;
29588: LD_ADDR_VAR 0 4
29592: PUSH
29593: LD_VAR 0 5
29597: ST_TO_ADDR
// end ;
29598: LD_VAR 0 4
29602: RET
// export function ComComplete ( units , b ) ; var i ; begin
29603: LD_INT 0
29605: PPUSH
29606: PPUSH
// if not units then
29607: LD_VAR 0 1
29611: NOT
29612: IFFALSE 29616
// exit ;
29614: GO 29706
// for i in units do
29616: LD_ADDR_VAR 0 4
29620: PUSH
29621: LD_VAR 0 1
29625: PUSH
29626: FOR_IN
29627: IFFALSE 29704
// if BuildingStatus ( b ) = bs_build then
29629: LD_VAR 0 2
29633: PPUSH
29634: CALL_OW 461
29638: PUSH
29639: LD_INT 1
29641: EQUAL
29642: IFFALSE 29702
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29644: LD_VAR 0 4
29648: PPUSH
29649: LD_STRING h
29651: PUSH
29652: LD_VAR 0 2
29656: PPUSH
29657: CALL_OW 250
29661: PUSH
29662: LD_VAR 0 2
29666: PPUSH
29667: CALL_OW 251
29671: PUSH
29672: LD_VAR 0 2
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: PUSH
29695: EMPTY
29696: LIST
29697: PPUSH
29698: CALL_OW 446
29702: GO 29626
29704: POP
29705: POP
// end ;
29706: LD_VAR 0 3
29710: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29711: LD_INT 0
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29719: LD_VAR 0 1
29723: NOT
29724: PUSH
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 263
29734: PUSH
29735: LD_INT 2
29737: EQUAL
29738: NOT
29739: OR
29740: IFFALSE 29744
// exit ;
29742: GO 30060
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29744: LD_ADDR_VAR 0 6
29748: PUSH
29749: LD_INT 22
29751: PUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: CALL_OW 255
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: LD_INT 30
29771: PUSH
29772: LD_INT 36
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 34
29781: PUSH
29782: LD_INT 31
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PPUSH
29798: CALL_OW 69
29802: ST_TO_ADDR
// if not tmp then
29803: LD_VAR 0 6
29807: NOT
29808: IFFALSE 29812
// exit ;
29810: GO 30060
// result := [ ] ;
29812: LD_ADDR_VAR 0 2
29816: PUSH
29817: EMPTY
29818: ST_TO_ADDR
// for i in tmp do
29819: LD_ADDR_VAR 0 3
29823: PUSH
29824: LD_VAR 0 6
29828: PUSH
29829: FOR_IN
29830: IFFALSE 29901
// begin t := UnitsInside ( i ) ;
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: LD_VAR 0 3
29841: PPUSH
29842: CALL_OW 313
29846: ST_TO_ADDR
// if t then
29847: LD_VAR 0 4
29851: IFFALSE 29899
// for j in t do
29853: LD_ADDR_VAR 0 7
29857: PUSH
29858: LD_VAR 0 4
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29897
// result := Insert ( result , result + 1 , j ) ;
29866: LD_ADDR_VAR 0 2
29870: PUSH
29871: LD_VAR 0 2
29875: PPUSH
29876: LD_VAR 0 2
29880: PUSH
29881: LD_INT 1
29883: PLUS
29884: PPUSH
29885: LD_VAR 0 7
29889: PPUSH
29890: CALL_OW 2
29894: ST_TO_ADDR
29895: GO 29863
29897: POP
29898: POP
// end ;
29899: GO 29829
29901: POP
29902: POP
// if not result then
29903: LD_VAR 0 2
29907: NOT
29908: IFFALSE 29912
// exit ;
29910: GO 30060
// mech := result [ 1 ] ;
29912: LD_ADDR_VAR 0 5
29916: PUSH
29917: LD_VAR 0 2
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: ST_TO_ADDR
// if result > 1 then
29926: LD_VAR 0 2
29930: PUSH
29931: LD_INT 1
29933: GREATER
29934: IFFALSE 30046
// for i = 2 to result do
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: DOUBLE
29942: LD_INT 2
29944: DEC
29945: ST_TO_ADDR
29946: LD_VAR 0 2
29950: PUSH
29951: FOR_TO
29952: IFFALSE 30044
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29954: LD_ADDR_VAR 0 4
29958: PUSH
29959: LD_VAR 0 2
29963: PUSH
29964: LD_VAR 0 3
29968: ARRAY
29969: PPUSH
29970: LD_INT 3
29972: PPUSH
29973: CALL_OW 259
29977: PUSH
29978: LD_VAR 0 2
29982: PUSH
29983: LD_VAR 0 3
29987: ARRAY
29988: PPUSH
29989: CALL_OW 432
29993: MINUS
29994: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29995: LD_VAR 0 4
29999: PUSH
30000: LD_VAR 0 5
30004: PPUSH
30005: LD_INT 3
30007: PPUSH
30008: CALL_OW 259
30012: PUSH
30013: LD_VAR 0 5
30017: PPUSH
30018: CALL_OW 432
30022: MINUS
30023: GREATEREQUAL
30024: IFFALSE 30042
// mech := result [ i ] ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_VAR 0 2
30035: PUSH
30036: LD_VAR 0 3
30040: ARRAY
30041: ST_TO_ADDR
// end ;
30042: GO 29951
30044: POP
30045: POP
// ComLinkTo ( vehicle , mech ) ;
30046: LD_VAR 0 1
30050: PPUSH
30051: LD_VAR 0 5
30055: PPUSH
30056: CALL_OW 135
// end ;
30060: LD_VAR 0 2
30064: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30065: LD_INT 0
30067: PPUSH
30068: PPUSH
30069: PPUSH
30070: PPUSH
30071: PPUSH
30072: PPUSH
30073: PPUSH
30074: PPUSH
30075: PPUSH
30076: PPUSH
30077: PPUSH
30078: PPUSH
30079: PPUSH
// result := [ ] ;
30080: LD_ADDR_VAR 0 7
30084: PUSH
30085: EMPTY
30086: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30087: LD_VAR 0 1
30091: PPUSH
30092: CALL_OW 266
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: IN
30107: NOT
30108: IFFALSE 30112
// exit ;
30110: GO 31746
// if name then
30112: LD_VAR 0 3
30116: IFFALSE 30132
// SetBName ( base_dep , name ) ;
30118: LD_VAR 0 1
30122: PPUSH
30123: LD_VAR 0 3
30127: PPUSH
30128: CALL_OW 500
// base := GetBase ( base_dep ) ;
30132: LD_ADDR_VAR 0 15
30136: PUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 274
30146: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30147: LD_ADDR_VAR 0 16
30151: PUSH
30152: LD_VAR 0 1
30156: PPUSH
30157: CALL_OW 255
30161: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30162: LD_ADDR_VAR 0 17
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 248
30176: ST_TO_ADDR
// if sources then
30177: LD_VAR 0 5
30181: IFFALSE 30228
// for i = 1 to 3 do
30183: LD_ADDR_VAR 0 8
30187: PUSH
30188: DOUBLE
30189: LD_INT 1
30191: DEC
30192: ST_TO_ADDR
30193: LD_INT 3
30195: PUSH
30196: FOR_TO
30197: IFFALSE 30226
// AddResourceType ( base , i , sources [ i ] ) ;
30199: LD_VAR 0 15
30203: PPUSH
30204: LD_VAR 0 8
30208: PPUSH
30209: LD_VAR 0 5
30213: PUSH
30214: LD_VAR 0 8
30218: ARRAY
30219: PPUSH
30220: CALL_OW 276
30224: GO 30196
30226: POP
30227: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30228: LD_ADDR_VAR 0 18
30232: PUSH
30233: LD_VAR 0 15
30237: PPUSH
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: CALL 29488 0 3
30250: ST_TO_ADDR
// InitHc ;
30251: CALL_OW 19
// InitUc ;
30255: CALL_OW 18
// uc_side := side ;
30259: LD_ADDR_OWVAR 20
30263: PUSH
30264: LD_VAR 0 16
30268: ST_TO_ADDR
// uc_nation := nation ;
30269: LD_ADDR_OWVAR 21
30273: PUSH
30274: LD_VAR 0 17
30278: ST_TO_ADDR
// if buildings then
30279: LD_VAR 0 18
30283: IFFALSE 31605
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30285: LD_ADDR_VAR 0 19
30289: PUSH
30290: LD_VAR 0 18
30294: PPUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 29
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 30
30310: PUSH
30311: LD_INT 30
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL_OW 72
30327: ST_TO_ADDR
// if tmp then
30328: LD_VAR 0 19
30332: IFFALSE 30380
// for i in tmp do
30334: LD_ADDR_VAR 0 8
30338: PUSH
30339: LD_VAR 0 19
30343: PUSH
30344: FOR_IN
30345: IFFALSE 30378
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30347: LD_VAR 0 8
30351: PPUSH
30352: CALL_OW 250
30356: PPUSH
30357: LD_VAR 0 8
30361: PPUSH
30362: CALL_OW 251
30366: PPUSH
30367: LD_VAR 0 16
30371: PPUSH
30372: CALL_OW 441
30376: GO 30344
30378: POP
30379: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30380: LD_VAR 0 18
30384: PPUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 30
30390: PUSH
30391: LD_INT 32
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 30
30400: PUSH
30401: LD_INT 33
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: PPUSH
30413: CALL_OW 72
30417: IFFALSE 30505
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30419: LD_ADDR_VAR 0 8
30423: PUSH
30424: LD_VAR 0 18
30428: PPUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 30
30434: PUSH
30435: LD_INT 32
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 30
30444: PUSH
30445: LD_INT 33
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: PPUSH
30457: CALL_OW 72
30461: PUSH
30462: FOR_IN
30463: IFFALSE 30503
// begin if not GetBWeapon ( i ) then
30465: LD_VAR 0 8
30469: PPUSH
30470: CALL_OW 269
30474: NOT
30475: IFFALSE 30501
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30477: LD_VAR 0 8
30481: PPUSH
30482: LD_VAR 0 8
30486: PPUSH
30487: LD_VAR 0 2
30491: PPUSH
30492: CALL 31751 0 2
30496: PPUSH
30497: CALL_OW 431
// end ;
30501: GO 30462
30503: POP
30504: POP
// end ; for i = 1 to personel do
30505: LD_ADDR_VAR 0 8
30509: PUSH
30510: DOUBLE
30511: LD_INT 1
30513: DEC
30514: ST_TO_ADDR
30515: LD_VAR 0 6
30519: PUSH
30520: FOR_TO
30521: IFFALSE 31585
// begin if i > 4 then
30523: LD_VAR 0 8
30527: PUSH
30528: LD_INT 4
30530: GREATER
30531: IFFALSE 30535
// break ;
30533: GO 31585
// case i of 1 :
30535: LD_VAR 0 8
30539: PUSH
30540: LD_INT 1
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30628
30548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30549: LD_ADDR_VAR 0 12
30553: PUSH
30554: LD_VAR 0 18
30558: PPUSH
30559: LD_INT 22
30561: PUSH
30562: LD_VAR 0 16
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 58
30573: PUSH
30574: EMPTY
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: LD_INT 32
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 30
30592: PUSH
30593: LD_INT 4
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 30
30602: PUSH
30603: LD_INT 5
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: PPUSH
30621: CALL_OW 72
30625: ST_TO_ADDR
30626: GO 30850
30628: LD_INT 2
30630: DOUBLE
30631: EQUAL
30632: IFTRUE 30636
30634: GO 30698
30636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30637: LD_ADDR_VAR 0 12
30641: PUSH
30642: LD_VAR 0 18
30646: PPUSH
30647: LD_INT 22
30649: PUSH
30650: LD_VAR 0 16
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 30
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 30
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PPUSH
30691: CALL_OW 72
30695: ST_TO_ADDR
30696: GO 30850
30698: LD_INT 3
30700: DOUBLE
30701: EQUAL
30702: IFTRUE 30706
30704: GO 30768
30706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30707: LD_ADDR_VAR 0 12
30711: PUSH
30712: LD_VAR 0 18
30716: PPUSH
30717: LD_INT 22
30719: PUSH
30720: LD_VAR 0 16
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 30
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 30
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PPUSH
30761: CALL_OW 72
30765: ST_TO_ADDR
30766: GO 30850
30768: LD_INT 4
30770: DOUBLE
30771: EQUAL
30772: IFTRUE 30776
30774: GO 30849
30776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30777: LD_ADDR_VAR 0 12
30781: PUSH
30782: LD_VAR 0 18
30786: PPUSH
30787: LD_INT 22
30789: PUSH
30790: LD_VAR 0 16
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: LD_INT 30
30804: PUSH
30805: LD_INT 6
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 30
30814: PUSH
30815: LD_INT 7
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 30
30824: PUSH
30825: LD_INT 8
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 72
30846: ST_TO_ADDR
30847: GO 30850
30849: POP
// if i = 1 then
30850: LD_VAR 0 8
30854: PUSH
30855: LD_INT 1
30857: EQUAL
30858: IFFALSE 30969
// begin tmp := [ ] ;
30860: LD_ADDR_VAR 0 19
30864: PUSH
30865: EMPTY
30866: ST_TO_ADDR
// for j in f do
30867: LD_ADDR_VAR 0 9
30871: PUSH
30872: LD_VAR 0 12
30876: PUSH
30877: FOR_IN
30878: IFFALSE 30951
// if GetBType ( j ) = b_bunker then
30880: LD_VAR 0 9
30884: PPUSH
30885: CALL_OW 266
30889: PUSH
30890: LD_INT 32
30892: EQUAL
30893: IFFALSE 30920
// tmp := Insert ( tmp , 1 , j ) else
30895: LD_ADDR_VAR 0 19
30899: PUSH
30900: LD_VAR 0 19
30904: PPUSH
30905: LD_INT 1
30907: PPUSH
30908: LD_VAR 0 9
30912: PPUSH
30913: CALL_OW 2
30917: ST_TO_ADDR
30918: GO 30949
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30920: LD_ADDR_VAR 0 19
30924: PUSH
30925: LD_VAR 0 19
30929: PPUSH
30930: LD_VAR 0 19
30934: PUSH
30935: LD_INT 1
30937: PLUS
30938: PPUSH
30939: LD_VAR 0 9
30943: PPUSH
30944: CALL_OW 2
30948: ST_TO_ADDR
30949: GO 30877
30951: POP
30952: POP
// if tmp then
30953: LD_VAR 0 19
30957: IFFALSE 30969
// f := tmp ;
30959: LD_ADDR_VAR 0 12
30963: PUSH
30964: LD_VAR 0 19
30968: ST_TO_ADDR
// end ; x := personel [ i ] ;
30969: LD_ADDR_VAR 0 13
30973: PUSH
30974: LD_VAR 0 6
30978: PUSH
30979: LD_VAR 0 8
30983: ARRAY
30984: ST_TO_ADDR
// if x = - 1 then
30985: LD_VAR 0 13
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: EQUAL
30994: IFFALSE 31203
// begin for j in f do
30996: LD_ADDR_VAR 0 9
31000: PUSH
31001: LD_VAR 0 12
31005: PUSH
31006: FOR_IN
31007: IFFALSE 31199
// repeat InitHc ;
31009: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31013: LD_VAR 0 9
31017: PPUSH
31018: CALL_OW 266
31022: PUSH
31023: LD_INT 5
31025: EQUAL
31026: IFFALSE 31096
// begin if UnitsInside ( j ) < 3 then
31028: LD_VAR 0 9
31032: PPUSH
31033: CALL_OW 313
31037: PUSH
31038: LD_INT 3
31040: LESS
31041: IFFALSE 31077
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31043: LD_INT 0
31045: PPUSH
31046: LD_INT 5
31048: PUSH
31049: LD_INT 8
31051: PUSH
31052: LD_INT 9
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: PUSH
31060: LD_VAR 0 17
31064: ARRAY
31065: PPUSH
31066: LD_VAR 0 4
31070: PPUSH
31071: CALL_OW 380
31075: GO 31094
// PrepareHuman ( false , i , skill ) ;
31077: LD_INT 0
31079: PPUSH
31080: LD_VAR 0 8
31084: PPUSH
31085: LD_VAR 0 4
31089: PPUSH
31090: CALL_OW 380
// end else
31094: GO 31113
// PrepareHuman ( false , i , skill ) ;
31096: LD_INT 0
31098: PPUSH
31099: LD_VAR 0 8
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: CALL_OW 380
// un := CreateHuman ;
31113: LD_ADDR_VAR 0 14
31117: PUSH
31118: CALL_OW 44
31122: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31123: LD_ADDR_VAR 0 7
31127: PUSH
31128: LD_VAR 0 7
31132: PPUSH
31133: LD_INT 1
31135: PPUSH
31136: LD_VAR 0 14
31140: PPUSH
31141: CALL_OW 2
31145: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31146: LD_VAR 0 14
31150: PPUSH
31151: LD_VAR 0 9
31155: PPUSH
31156: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31160: LD_VAR 0 9
31164: PPUSH
31165: CALL_OW 313
31169: PUSH
31170: LD_INT 6
31172: EQUAL
31173: PUSH
31174: LD_VAR 0 9
31178: PPUSH
31179: CALL_OW 266
31183: PUSH
31184: LD_INT 32
31186: PUSH
31187: LD_INT 31
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: IN
31194: OR
31195: IFFALSE 31009
31197: GO 31006
31199: POP
31200: POP
// end else
31201: GO 31583
// for j = 1 to x do
31203: LD_ADDR_VAR 0 9
31207: PUSH
31208: DOUBLE
31209: LD_INT 1
31211: DEC
31212: ST_TO_ADDR
31213: LD_VAR 0 13
31217: PUSH
31218: FOR_TO
31219: IFFALSE 31581
// begin InitHc ;
31221: CALL_OW 19
// if not f then
31225: LD_VAR 0 12
31229: NOT
31230: IFFALSE 31319
// begin PrepareHuman ( false , i , skill ) ;
31232: LD_INT 0
31234: PPUSH
31235: LD_VAR 0 8
31239: PPUSH
31240: LD_VAR 0 4
31244: PPUSH
31245: CALL_OW 380
// un := CreateHuman ;
31249: LD_ADDR_VAR 0 14
31253: PUSH
31254: CALL_OW 44
31258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31259: LD_ADDR_VAR 0 7
31263: PUSH
31264: LD_VAR 0 7
31268: PPUSH
31269: LD_INT 1
31271: PPUSH
31272: LD_VAR 0 14
31276: PPUSH
31277: CALL_OW 2
31281: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31282: LD_VAR 0 14
31286: PPUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 250
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 251
31306: PPUSH
31307: LD_INT 10
31309: PPUSH
31310: LD_INT 0
31312: PPUSH
31313: CALL_OW 50
// continue ;
31317: GO 31218
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31319: LD_VAR 0 12
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 313
31332: PUSH
31333: LD_VAR 0 12
31337: PUSH
31338: LD_INT 1
31340: ARRAY
31341: PPUSH
31342: CALL_OW 266
31346: PUSH
31347: LD_INT 32
31349: PUSH
31350: LD_INT 31
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: IN
31357: AND
31358: PUSH
31359: LD_VAR 0 12
31363: PUSH
31364: LD_INT 1
31366: ARRAY
31367: PPUSH
31368: CALL_OW 313
31372: PUSH
31373: LD_INT 6
31375: EQUAL
31376: OR
31377: IFFALSE 31397
// f := Delete ( f , 1 ) ;
31379: LD_ADDR_VAR 0 12
31383: PUSH
31384: LD_VAR 0 12
31388: PPUSH
31389: LD_INT 1
31391: PPUSH
31392: CALL_OW 3
31396: ST_TO_ADDR
// if not f then
31397: LD_VAR 0 12
31401: NOT
31402: IFFALSE 31420
// begin x := x + 2 ;
31404: LD_ADDR_VAR 0 13
31408: PUSH
31409: LD_VAR 0 13
31413: PUSH
31414: LD_INT 2
31416: PLUS
31417: ST_TO_ADDR
// continue ;
31418: GO 31218
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31420: LD_VAR 0 12
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: PPUSH
31429: CALL_OW 266
31433: PUSH
31434: LD_INT 5
31436: EQUAL
31437: IFFALSE 31511
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31439: LD_VAR 0 12
31443: PUSH
31444: LD_INT 1
31446: ARRAY
31447: PPUSH
31448: CALL_OW 313
31452: PUSH
31453: LD_INT 3
31455: LESS
31456: IFFALSE 31492
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31458: LD_INT 0
31460: PPUSH
31461: LD_INT 5
31463: PUSH
31464: LD_INT 8
31466: PUSH
31467: LD_INT 9
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: PUSH
31475: LD_VAR 0 17
31479: ARRAY
31480: PPUSH
31481: LD_VAR 0 4
31485: PPUSH
31486: CALL_OW 380
31490: GO 31509
// PrepareHuman ( false , i , skill ) ;
31492: LD_INT 0
31494: PPUSH
31495: LD_VAR 0 8
31499: PPUSH
31500: LD_VAR 0 4
31504: PPUSH
31505: CALL_OW 380
// end else
31509: GO 31528
// PrepareHuman ( false , i , skill ) ;
31511: LD_INT 0
31513: PPUSH
31514: LD_VAR 0 8
31518: PPUSH
31519: LD_VAR 0 4
31523: PPUSH
31524: CALL_OW 380
// un := CreateHuman ;
31528: LD_ADDR_VAR 0 14
31532: PUSH
31533: CALL_OW 44
31537: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31538: LD_ADDR_VAR 0 7
31542: PUSH
31543: LD_VAR 0 7
31547: PPUSH
31548: LD_INT 1
31550: PPUSH
31551: LD_VAR 0 14
31555: PPUSH
31556: CALL_OW 2
31560: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31561: LD_VAR 0 14
31565: PPUSH
31566: LD_VAR 0 12
31570: PUSH
31571: LD_INT 1
31573: ARRAY
31574: PPUSH
31575: CALL_OW 52
// end ;
31579: GO 31218
31581: POP
31582: POP
// end ;
31583: GO 30520
31585: POP
31586: POP
// result := result ^ buildings ;
31587: LD_ADDR_VAR 0 7
31591: PUSH
31592: LD_VAR 0 7
31596: PUSH
31597: LD_VAR 0 18
31601: ADD
31602: ST_TO_ADDR
// end else
31603: GO 31746
// begin for i = 1 to personel do
31605: LD_ADDR_VAR 0 8
31609: PUSH
31610: DOUBLE
31611: LD_INT 1
31613: DEC
31614: ST_TO_ADDR
31615: LD_VAR 0 6
31619: PUSH
31620: FOR_TO
31621: IFFALSE 31744
// begin if i > 4 then
31623: LD_VAR 0 8
31627: PUSH
31628: LD_INT 4
31630: GREATER
31631: IFFALSE 31635
// break ;
31633: GO 31744
// x := personel [ i ] ;
31635: LD_ADDR_VAR 0 13
31639: PUSH
31640: LD_VAR 0 6
31644: PUSH
31645: LD_VAR 0 8
31649: ARRAY
31650: ST_TO_ADDR
// if x = - 1 then
31651: LD_VAR 0 13
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: EQUAL
31660: IFFALSE 31664
// continue ;
31662: GO 31620
// PrepareHuman ( false , i , skill ) ;
31664: LD_INT 0
31666: PPUSH
31667: LD_VAR 0 8
31671: PPUSH
31672: LD_VAR 0 4
31676: PPUSH
31677: CALL_OW 380
// un := CreateHuman ;
31681: LD_ADDR_VAR 0 14
31685: PUSH
31686: CALL_OW 44
31690: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31691: LD_VAR 0 14
31695: PPUSH
31696: LD_VAR 0 1
31700: PPUSH
31701: CALL_OW 250
31705: PPUSH
31706: LD_VAR 0 1
31710: PPUSH
31711: CALL_OW 251
31715: PPUSH
31716: LD_INT 10
31718: PPUSH
31719: LD_INT 0
31721: PPUSH
31722: CALL_OW 50
// result := result ^ un ;
31726: LD_ADDR_VAR 0 7
31730: PUSH
31731: LD_VAR 0 7
31735: PUSH
31736: LD_VAR 0 14
31740: ADD
31741: ST_TO_ADDR
// end ;
31742: GO 31620
31744: POP
31745: POP
// end ; end ;
31746: LD_VAR 0 7
31750: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31751: LD_INT 0
31753: PPUSH
31754: PPUSH
31755: PPUSH
31756: PPUSH
31757: PPUSH
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
// result := false ;
31769: LD_ADDR_VAR 0 3
31773: PUSH
31774: LD_INT 0
31776: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31777: LD_VAR 0 1
31781: NOT
31782: PUSH
31783: LD_VAR 0 1
31787: PPUSH
31788: CALL_OW 266
31792: PUSH
31793: LD_INT 32
31795: PUSH
31796: LD_INT 33
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: IN
31803: NOT
31804: OR
31805: IFFALSE 31809
// exit ;
31807: GO 32948
// nat := GetNation ( tower ) ;
31809: LD_ADDR_VAR 0 12
31813: PUSH
31814: LD_VAR 0 1
31818: PPUSH
31819: CALL_OW 248
31823: ST_TO_ADDR
// side := GetSide ( tower ) ;
31824: LD_ADDR_VAR 0 16
31828: PUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: CALL_OW 255
31838: ST_TO_ADDR
// x := GetX ( tower ) ;
31839: LD_ADDR_VAR 0 10
31843: PUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 250
31853: ST_TO_ADDR
// y := GetY ( tower ) ;
31854: LD_ADDR_VAR 0 11
31858: PUSH
31859: LD_VAR 0 1
31863: PPUSH
31864: CALL_OW 251
31868: ST_TO_ADDR
// if not x or not y then
31869: LD_VAR 0 10
31873: NOT
31874: PUSH
31875: LD_VAR 0 11
31879: NOT
31880: OR
31881: IFFALSE 31885
// exit ;
31883: GO 32948
// weapon := 0 ;
31885: LD_ADDR_VAR 0 18
31889: PUSH
31890: LD_INT 0
31892: ST_TO_ADDR
// fac_list := [ ] ;
31893: LD_ADDR_VAR 0 17
31897: PUSH
31898: EMPTY
31899: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31900: LD_ADDR_VAR 0 6
31904: PUSH
31905: LD_VAR 0 1
31909: PPUSH
31910: CALL_OW 274
31914: PPUSH
31915: LD_VAR 0 2
31919: PPUSH
31920: LD_INT 0
31922: PPUSH
31923: CALL 29488 0 3
31927: PPUSH
31928: LD_INT 30
31930: PUSH
31931: LD_INT 3
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PPUSH
31938: CALL_OW 72
31942: ST_TO_ADDR
// if not factories then
31943: LD_VAR 0 6
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32948
// for i in factories do
31952: LD_ADDR_VAR 0 8
31956: PUSH
31957: LD_VAR 0 6
31961: PUSH
31962: FOR_IN
31963: IFFALSE 31988
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31965: LD_ADDR_VAR 0 17
31969: PUSH
31970: LD_VAR 0 17
31974: PUSH
31975: LD_VAR 0 8
31979: PPUSH
31980: CALL_OW 478
31984: UNION
31985: ST_TO_ADDR
31986: GO 31962
31988: POP
31989: POP
// if not fac_list then
31990: LD_VAR 0 17
31994: NOT
31995: IFFALSE 31999
// exit ;
31997: GO 32948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31999: LD_ADDR_VAR 0 5
32003: PUSH
32004: LD_INT 4
32006: PUSH
32007: LD_INT 5
32009: PUSH
32010: LD_INT 9
32012: PUSH
32013: LD_INT 10
32015: PUSH
32016: LD_INT 6
32018: PUSH
32019: LD_INT 7
32021: PUSH
32022: LD_INT 11
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 27
32036: PUSH
32037: LD_INT 28
32039: PUSH
32040: LD_INT 26
32042: PUSH
32043: LD_INT 30
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 43
32054: PUSH
32055: LD_INT 44
32057: PUSH
32058: LD_INT 46
32060: PUSH
32061: LD_INT 45
32063: PUSH
32064: LD_INT 47
32066: PUSH
32067: LD_INT 49
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: PUSH
32083: LD_VAR 0 12
32087: ARRAY
32088: ST_TO_ADDR
// for i in list do
32089: LD_ADDR_VAR 0 8
32093: PUSH
32094: LD_VAR 0 5
32098: PUSH
32099: FOR_IN
32100: IFFALSE 32133
// if not i in fac_list then
32102: LD_VAR 0 8
32106: PUSH
32107: LD_VAR 0 17
32111: IN
32112: NOT
32113: IFFALSE 32131
// list := list diff i ;
32115: LD_ADDR_VAR 0 5
32119: PUSH
32120: LD_VAR 0 5
32124: PUSH
32125: LD_VAR 0 8
32129: DIFF
32130: ST_TO_ADDR
32131: GO 32099
32133: POP
32134: POP
// if not list then
32135: LD_VAR 0 5
32139: NOT
32140: IFFALSE 32144
// exit ;
32142: GO 32948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32144: LD_VAR 0 12
32148: PUSH
32149: LD_INT 3
32151: EQUAL
32152: PUSH
32153: LD_INT 49
32155: PUSH
32156: LD_VAR 0 5
32160: IN
32161: AND
32162: PUSH
32163: LD_INT 31
32165: PPUSH
32166: LD_VAR 0 16
32170: PPUSH
32171: CALL_OW 321
32175: PUSH
32176: LD_INT 2
32178: EQUAL
32179: AND
32180: IFFALSE 32240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32182: LD_INT 22
32184: PUSH
32185: LD_VAR 0 16
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 35
32196: PUSH
32197: LD_INT 49
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 91
32206: PUSH
32207: LD_VAR 0 1
32211: PUSH
32212: LD_INT 10
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: NOT
32230: IFFALSE 32240
// weapon := ru_time_lapser ;
32232: LD_ADDR_VAR 0 18
32236: PUSH
32237: LD_INT 49
32239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32240: LD_VAR 0 12
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: IN
32255: PUSH
32256: LD_INT 11
32258: PUSH
32259: LD_VAR 0 5
32263: IN
32264: PUSH
32265: LD_INT 30
32267: PUSH
32268: LD_VAR 0 5
32272: IN
32273: OR
32274: AND
32275: PUSH
32276: LD_INT 6
32278: PPUSH
32279: LD_VAR 0 16
32283: PPUSH
32284: CALL_OW 321
32288: PUSH
32289: LD_INT 2
32291: EQUAL
32292: AND
32293: IFFALSE 32458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32295: LD_INT 22
32297: PUSH
32298: LD_VAR 0 16
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 35
32312: PUSH
32313: LD_INT 11
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 35
32322: PUSH
32323: LD_INT 30
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 91
32337: PUSH
32338: LD_VAR 0 1
32342: PUSH
32343: LD_INT 18
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: PPUSH
32356: CALL_OW 69
32360: NOT
32361: PUSH
32362: LD_INT 22
32364: PUSH
32365: LD_VAR 0 16
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 30
32379: PUSH
32380: LD_INT 32
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 30
32389: PUSH
32390: LD_INT 33
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 91
32404: PUSH
32405: LD_VAR 0 1
32409: PUSH
32410: LD_INT 12
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: PPUSH
32426: CALL_OW 69
32430: PUSH
32431: LD_INT 2
32433: GREATER
32434: AND
32435: IFFALSE 32458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32437: LD_ADDR_VAR 0 18
32441: PUSH
32442: LD_INT 11
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_VAR 0 12
32456: ARRAY
32457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32458: LD_VAR 0 18
32462: NOT
32463: PUSH
32464: LD_INT 40
32466: PPUSH
32467: LD_VAR 0 16
32471: PPUSH
32472: CALL_OW 321
32476: PUSH
32477: LD_INT 2
32479: EQUAL
32480: AND
32481: PUSH
32482: LD_INT 7
32484: PUSH
32485: LD_VAR 0 5
32489: IN
32490: PUSH
32491: LD_INT 28
32493: PUSH
32494: LD_VAR 0 5
32498: IN
32499: OR
32500: PUSH
32501: LD_INT 45
32503: PUSH
32504: LD_VAR 0 5
32508: IN
32509: OR
32510: AND
32511: IFFALSE 32765
// begin hex := GetHexInfo ( x , y ) ;
32513: LD_ADDR_VAR 0 4
32517: PUSH
32518: LD_VAR 0 10
32522: PPUSH
32523: LD_VAR 0 11
32527: PPUSH
32528: CALL_OW 546
32532: ST_TO_ADDR
// if hex [ 1 ] then
32533: LD_VAR 0 4
32537: PUSH
32538: LD_INT 1
32540: ARRAY
32541: IFFALSE 32545
// exit ;
32543: GO 32948
// height := hex [ 2 ] ;
32545: LD_ADDR_VAR 0 15
32549: PUSH
32550: LD_VAR 0 4
32554: PUSH
32555: LD_INT 2
32557: ARRAY
32558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32559: LD_ADDR_VAR 0 14
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 5
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: ST_TO_ADDR
// for i in tmp do
32582: LD_ADDR_VAR 0 8
32586: PUSH
32587: LD_VAR 0 14
32591: PUSH
32592: FOR_IN
32593: IFFALSE 32763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32595: LD_ADDR_VAR 0 9
32599: PUSH
32600: LD_VAR 0 10
32604: PPUSH
32605: LD_VAR 0 8
32609: PPUSH
32610: LD_INT 5
32612: PPUSH
32613: CALL_OW 272
32617: PUSH
32618: LD_VAR 0 11
32622: PPUSH
32623: LD_VAR 0 8
32627: PPUSH
32628: LD_INT 5
32630: PPUSH
32631: CALL_OW 273
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32640: LD_VAR 0 9
32644: PUSH
32645: LD_INT 1
32647: ARRAY
32648: PPUSH
32649: LD_VAR 0 9
32653: PUSH
32654: LD_INT 2
32656: ARRAY
32657: PPUSH
32658: CALL_OW 488
32662: IFFALSE 32761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32664: LD_ADDR_VAR 0 4
32668: PUSH
32669: LD_VAR 0 9
32673: PUSH
32674: LD_INT 1
32676: ARRAY
32677: PPUSH
32678: LD_VAR 0 9
32682: PUSH
32683: LD_INT 2
32685: ARRAY
32686: PPUSH
32687: CALL_OW 546
32691: ST_TO_ADDR
// if hex [ 1 ] then
32692: LD_VAR 0 4
32696: PUSH
32697: LD_INT 1
32699: ARRAY
32700: IFFALSE 32704
// continue ;
32702: GO 32592
// h := hex [ 2 ] ;
32704: LD_ADDR_VAR 0 13
32708: PUSH
32709: LD_VAR 0 4
32713: PUSH
32714: LD_INT 2
32716: ARRAY
32717: ST_TO_ADDR
// if h + 7 < height then
32718: LD_VAR 0 13
32722: PUSH
32723: LD_INT 7
32725: PLUS
32726: PUSH
32727: LD_VAR 0 15
32731: LESS
32732: IFFALSE 32761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32734: LD_ADDR_VAR 0 18
32738: PUSH
32739: LD_INT 7
32741: PUSH
32742: LD_INT 28
32744: PUSH
32745: LD_INT 45
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 12
32757: ARRAY
32758: ST_TO_ADDR
// break ;
32759: GO 32763
// end ; end ; end ;
32761: GO 32592
32763: POP
32764: POP
// end ; if not weapon then
32765: LD_VAR 0 18
32769: NOT
32770: IFFALSE 32830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_VAR 0 5
32781: PUSH
32782: LD_INT 11
32784: PUSH
32785: LD_INT 30
32787: PUSH
32788: LD_INT 49
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: DIFF
32796: ST_TO_ADDR
// if not list then
32797: LD_VAR 0 5
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 32948
// weapon := list [ rand ( 1 , list ) ] ;
32806: LD_ADDR_VAR 0 18
32810: PUSH
32811: LD_VAR 0 5
32815: PUSH
32816: LD_INT 1
32818: PPUSH
32819: LD_VAR 0 5
32823: PPUSH
32824: CALL_OW 12
32828: ARRAY
32829: ST_TO_ADDR
// end ; if weapon then
32830: LD_VAR 0 18
32834: IFFALSE 32948
// begin tmp := CostOfWeapon ( weapon ) ;
32836: LD_ADDR_VAR 0 14
32840: PUSH
32841: LD_VAR 0 18
32845: PPUSH
32846: CALL_OW 451
32850: ST_TO_ADDR
// j := GetBase ( tower ) ;
32851: LD_ADDR_VAR 0 9
32855: PUSH
32856: LD_VAR 0 1
32860: PPUSH
32861: CALL_OW 274
32865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32866: LD_VAR 0 9
32870: PPUSH
32871: LD_INT 1
32873: PPUSH
32874: CALL_OW 275
32878: PUSH
32879: LD_VAR 0 14
32883: PUSH
32884: LD_INT 1
32886: ARRAY
32887: GREATEREQUAL
32888: PUSH
32889: LD_VAR 0 9
32893: PPUSH
32894: LD_INT 2
32896: PPUSH
32897: CALL_OW 275
32901: PUSH
32902: LD_VAR 0 14
32906: PUSH
32907: LD_INT 2
32909: ARRAY
32910: GREATEREQUAL
32911: AND
32912: PUSH
32913: LD_VAR 0 9
32917: PPUSH
32918: LD_INT 3
32920: PPUSH
32921: CALL_OW 275
32925: PUSH
32926: LD_VAR 0 14
32930: PUSH
32931: LD_INT 3
32933: ARRAY
32934: GREATEREQUAL
32935: AND
32936: IFFALSE 32948
// result := weapon ;
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_VAR 0 18
32947: ST_TO_ADDR
// end ; end ;
32948: LD_VAR 0 3
32952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32953: LD_INT 0
32955: PPUSH
32956: PPUSH
// result := true ;
32957: LD_ADDR_VAR 0 3
32961: PUSH
32962: LD_INT 1
32964: ST_TO_ADDR
// if array1 = array2 then
32965: LD_VAR 0 1
32969: PUSH
32970: LD_VAR 0 2
32974: EQUAL
32975: IFFALSE 33035
// begin for i = 1 to array1 do
32977: LD_ADDR_VAR 0 4
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_VAR 0 1
32991: PUSH
32992: FOR_TO
32993: IFFALSE 33031
// if array1 [ i ] <> array2 [ i ] then
32995: LD_VAR 0 1
32999: PUSH
33000: LD_VAR 0 4
33004: ARRAY
33005: PUSH
33006: LD_VAR 0 2
33010: PUSH
33011: LD_VAR 0 4
33015: ARRAY
33016: NONEQUAL
33017: IFFALSE 33029
// begin result := false ;
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_INT 0
33026: ST_TO_ADDR
// break ;
33027: GO 33031
// end ;
33029: GO 32992
33031: POP
33032: POP
// end else
33033: GO 33043
// result := false ;
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_INT 0
33042: ST_TO_ADDR
// end ;
33043: LD_VAR 0 3
33047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
// if not array1 or not array2 then
33052: LD_VAR 0 1
33056: NOT
33057: PUSH
33058: LD_VAR 0 2
33062: NOT
33063: OR
33064: IFFALSE 33068
// exit ;
33066: GO 33132
// result := true ;
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_INT 1
33075: ST_TO_ADDR
// for i = 1 to array1 do
33076: LD_ADDR_VAR 0 4
33080: PUSH
33081: DOUBLE
33082: LD_INT 1
33084: DEC
33085: ST_TO_ADDR
33086: LD_VAR 0 1
33090: PUSH
33091: FOR_TO
33092: IFFALSE 33130
// if array1 [ i ] <> array2 [ i ] then
33094: LD_VAR 0 1
33098: PUSH
33099: LD_VAR 0 4
33103: ARRAY
33104: PUSH
33105: LD_VAR 0 2
33109: PUSH
33110: LD_VAR 0 4
33114: ARRAY
33115: NONEQUAL
33116: IFFALSE 33128
// begin result := false ;
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 0
33125: ST_TO_ADDR
// break ;
33126: GO 33130
// end ;
33128: GO 33091
33130: POP
33131: POP
// end ;
33132: LD_VAR 0 3
33136: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33137: LD_INT 0
33139: PPUSH
33140: PPUSH
33141: PPUSH
// pom := GetBase ( fac ) ;
33142: LD_ADDR_VAR 0 5
33146: PUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 274
33156: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_VAR 0 2
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: PPUSH
33171: LD_VAR 0 2
33175: PUSH
33176: LD_INT 2
33178: ARRAY
33179: PPUSH
33180: LD_VAR 0 2
33184: PUSH
33185: LD_INT 3
33187: ARRAY
33188: PPUSH
33189: LD_VAR 0 2
33193: PUSH
33194: LD_INT 4
33196: ARRAY
33197: PPUSH
33198: CALL_OW 449
33202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33203: LD_ADDR_VAR 0 3
33207: PUSH
33208: LD_VAR 0 5
33212: PPUSH
33213: LD_INT 1
33215: PPUSH
33216: CALL_OW 275
33220: PUSH
33221: LD_VAR 0 4
33225: PUSH
33226: LD_INT 1
33228: ARRAY
33229: GREATEREQUAL
33230: PUSH
33231: LD_VAR 0 5
33235: PPUSH
33236: LD_INT 2
33238: PPUSH
33239: CALL_OW 275
33243: PUSH
33244: LD_VAR 0 4
33248: PUSH
33249: LD_INT 2
33251: ARRAY
33252: GREATEREQUAL
33253: AND
33254: PUSH
33255: LD_VAR 0 5
33259: PPUSH
33260: LD_INT 3
33262: PPUSH
33263: CALL_OW 275
33267: PUSH
33268: LD_VAR 0 4
33272: PUSH
33273: LD_INT 3
33275: ARRAY
33276: GREATEREQUAL
33277: AND
33278: ST_TO_ADDR
// end ;
33279: LD_VAR 0 3
33283: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
// pom := GetBase ( building ) ;
33290: LD_ADDR_VAR 0 3
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 274
33304: ST_TO_ADDR
// if not pom then
33305: LD_VAR 0 3
33309: NOT
33310: IFFALSE 33314
// exit ;
33312: GO 33484
// btype := GetBType ( building ) ;
33314: LD_ADDR_VAR 0 5
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 266
33328: ST_TO_ADDR
// if btype = b_armoury then
33329: LD_VAR 0 5
33333: PUSH
33334: LD_INT 4
33336: EQUAL
33337: IFFALSE 33347
// btype := b_barracks ;
33339: LD_ADDR_VAR 0 5
33343: PUSH
33344: LD_INT 5
33346: ST_TO_ADDR
// if btype = b_depot then
33347: LD_VAR 0 5
33351: PUSH
33352: LD_INT 0
33354: EQUAL
33355: IFFALSE 33365
// btype := b_warehouse ;
33357: LD_ADDR_VAR 0 5
33361: PUSH
33362: LD_INT 1
33364: ST_TO_ADDR
// if btype = b_workshop then
33365: LD_VAR 0 5
33369: PUSH
33370: LD_INT 2
33372: EQUAL
33373: IFFALSE 33383
// btype := b_factory ;
33375: LD_ADDR_VAR 0 5
33379: PUSH
33380: LD_INT 3
33382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33383: LD_ADDR_VAR 0 4
33387: PUSH
33388: LD_VAR 0 5
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 248
33402: PPUSH
33403: CALL_OW 450
33407: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33408: LD_ADDR_VAR 0 2
33412: PUSH
33413: LD_VAR 0 3
33417: PPUSH
33418: LD_INT 1
33420: PPUSH
33421: CALL_OW 275
33425: PUSH
33426: LD_VAR 0 4
33430: PUSH
33431: LD_INT 1
33433: ARRAY
33434: GREATEREQUAL
33435: PUSH
33436: LD_VAR 0 3
33440: PPUSH
33441: LD_INT 2
33443: PPUSH
33444: CALL_OW 275
33448: PUSH
33449: LD_VAR 0 4
33453: PUSH
33454: LD_INT 2
33456: ARRAY
33457: GREATEREQUAL
33458: AND
33459: PUSH
33460: LD_VAR 0 3
33464: PPUSH
33465: LD_INT 3
33467: PPUSH
33468: CALL_OW 275
33472: PUSH
33473: LD_VAR 0 4
33477: PUSH
33478: LD_INT 3
33480: ARRAY
33481: GREATEREQUAL
33482: AND
33483: ST_TO_ADDR
// end ;
33484: LD_VAR 0 2
33488: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33489: LD_INT 0
33491: PPUSH
33492: PPUSH
33493: PPUSH
// pom := GetBase ( building ) ;
33494: LD_ADDR_VAR 0 4
33498: PUSH
33499: LD_VAR 0 1
33503: PPUSH
33504: CALL_OW 274
33508: ST_TO_ADDR
// if not pom then
33509: LD_VAR 0 4
33513: NOT
33514: IFFALSE 33518
// exit ;
33516: GO 33619
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33518: LD_ADDR_VAR 0 5
33522: PUSH
33523: LD_VAR 0 2
33527: PPUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 248
33537: PPUSH
33538: CALL_OW 450
33542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33543: LD_ADDR_VAR 0 3
33547: PUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: LD_INT 1
33555: PPUSH
33556: CALL_OW 275
33560: PUSH
33561: LD_VAR 0 5
33565: PUSH
33566: LD_INT 1
33568: ARRAY
33569: GREATEREQUAL
33570: PUSH
33571: LD_VAR 0 4
33575: PPUSH
33576: LD_INT 2
33578: PPUSH
33579: CALL_OW 275
33583: PUSH
33584: LD_VAR 0 5
33588: PUSH
33589: LD_INT 2
33591: ARRAY
33592: GREATEREQUAL
33593: AND
33594: PUSH
33595: LD_VAR 0 4
33599: PPUSH
33600: LD_INT 3
33602: PPUSH
33603: CALL_OW 275
33607: PUSH
33608: LD_VAR 0 5
33612: PUSH
33613: LD_INT 3
33615: ARRAY
33616: GREATEREQUAL
33617: AND
33618: ST_TO_ADDR
// end ;
33619: LD_VAR 0 3
33623: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
33636: PPUSH
// result := false ;
33637: LD_ADDR_VAR 0 8
33641: PUSH
33642: LD_INT 0
33644: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33645: LD_VAR 0 5
33649: NOT
33650: PUSH
33651: LD_VAR 0 1
33655: NOT
33656: OR
33657: PUSH
33658: LD_VAR 0 2
33662: NOT
33663: OR
33664: PUSH
33665: LD_VAR 0 3
33669: NOT
33670: OR
33671: IFFALSE 33675
// exit ;
33673: GO 34489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33675: LD_ADDR_VAR 0 14
33679: PUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: LD_VAR 0 2
33689: PPUSH
33690: LD_VAR 0 3
33694: PPUSH
33695: LD_VAR 0 4
33699: PPUSH
33700: LD_VAR 0 5
33704: PUSH
33705: LD_INT 1
33707: ARRAY
33708: PPUSH
33709: CALL_OW 248
33713: PPUSH
33714: LD_INT 0
33716: PPUSH
33717: CALL 35326 0 6
33721: ST_TO_ADDR
// if not hexes then
33722: LD_VAR 0 14
33726: NOT
33727: IFFALSE 33731
// exit ;
33729: GO 34489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33731: LD_ADDR_VAR 0 17
33735: PUSH
33736: LD_VAR 0 5
33740: PPUSH
33741: LD_INT 22
33743: PUSH
33744: LD_VAR 0 13
33748: PPUSH
33749: CALL_OW 255
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: LD_INT 30
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 30
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PPUSH
33790: CALL_OW 72
33794: ST_TO_ADDR
// for i = 1 to hexes do
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: DOUBLE
33801: LD_INT 1
33803: DEC
33804: ST_TO_ADDR
33805: LD_VAR 0 14
33809: PUSH
33810: FOR_TO
33811: IFFALSE 34487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33813: LD_ADDR_VAR 0 13
33817: PUSH
33818: LD_VAR 0 14
33822: PUSH
33823: LD_VAR 0 9
33827: ARRAY
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: LD_VAR 0 14
33837: PUSH
33838: LD_VAR 0 9
33842: ARRAY
33843: PUSH
33844: LD_INT 2
33846: ARRAY
33847: PPUSH
33848: CALL_OW 428
33852: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33853: LD_VAR 0 14
33857: PUSH
33858: LD_VAR 0 9
33862: ARRAY
33863: PUSH
33864: LD_INT 1
33866: ARRAY
33867: PPUSH
33868: LD_VAR 0 14
33872: PUSH
33873: LD_VAR 0 9
33877: ARRAY
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PPUSH
33883: CALL_OW 351
33887: PUSH
33888: LD_VAR 0 14
33892: PUSH
33893: LD_VAR 0 9
33897: ARRAY
33898: PUSH
33899: LD_INT 1
33901: ARRAY
33902: PPUSH
33903: LD_VAR 0 14
33907: PUSH
33908: LD_VAR 0 9
33912: ARRAY
33913: PUSH
33914: LD_INT 2
33916: ARRAY
33917: PPUSH
33918: CALL_OW 488
33922: NOT
33923: OR
33924: PUSH
33925: LD_VAR 0 13
33929: PPUSH
33930: CALL_OW 247
33934: PUSH
33935: LD_INT 3
33937: EQUAL
33938: OR
33939: IFFALSE 33945
// exit ;
33941: POP
33942: POP
33943: GO 34489
// if not tmp then
33945: LD_VAR 0 13
33949: NOT
33950: IFFALSE 33954
// continue ;
33952: GO 33810
// result := true ;
33954: LD_ADDR_VAR 0 8
33958: PUSH
33959: LD_INT 1
33961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33962: LD_VAR 0 6
33966: PUSH
33967: LD_VAR 0 13
33971: PPUSH
33972: CALL_OW 247
33976: PUSH
33977: LD_INT 2
33979: EQUAL
33980: AND
33981: PUSH
33982: LD_VAR 0 13
33986: PPUSH
33987: CALL_OW 263
33991: PUSH
33992: LD_INT 1
33994: EQUAL
33995: AND
33996: IFFALSE 34160
// begin if IsDrivenBy ( tmp ) then
33998: LD_VAR 0 13
34002: PPUSH
34003: CALL_OW 311
34007: IFFALSE 34011
// continue ;
34009: GO 33810
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34011: LD_VAR 0 6
34015: PPUSH
34016: LD_INT 3
34018: PUSH
34019: LD_INT 60
34021: PUSH
34022: EMPTY
34023: LIST
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 55
34034: PUSH
34035: EMPTY
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PPUSH
34046: CALL_OW 72
34050: IFFALSE 34158
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34052: LD_ADDR_VAR 0 18
34056: PUSH
34057: LD_VAR 0 6
34061: PPUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 60
34067: PUSH
34068: EMPTY
34069: LIST
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: PUSH
34078: LD_INT 55
34080: PUSH
34081: EMPTY
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PPUSH
34092: CALL_OW 72
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: ST_TO_ADDR
// if IsInUnit ( driver ) then
34101: LD_VAR 0 18
34105: PPUSH
34106: CALL_OW 310
34110: IFFALSE 34121
// ComExit ( driver ) ;
34112: LD_VAR 0 18
34116: PPUSH
34117: CALL 58510 0 1
// AddComEnterUnit ( driver , tmp ) ;
34121: LD_VAR 0 18
34125: PPUSH
34126: LD_VAR 0 13
34130: PPUSH
34131: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34135: LD_VAR 0 18
34139: PPUSH
34140: LD_VAR 0 7
34144: PPUSH
34145: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34149: LD_VAR 0 18
34153: PPUSH
34154: CALL_OW 181
// end ; continue ;
34158: GO 33810
// end ; if not cleaners or not tmp in cleaners then
34160: LD_VAR 0 6
34164: NOT
34165: PUSH
34166: LD_VAR 0 13
34170: PUSH
34171: LD_VAR 0 6
34175: IN
34176: NOT
34177: OR
34178: IFFALSE 34485
// begin if dep then
34180: LD_VAR 0 17
34184: IFFALSE 34320
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34186: LD_ADDR_VAR 0 16
34190: PUSH
34191: LD_VAR 0 17
34195: PUSH
34196: LD_INT 1
34198: ARRAY
34199: PPUSH
34200: CALL_OW 250
34204: PPUSH
34205: LD_VAR 0 17
34209: PUSH
34210: LD_INT 1
34212: ARRAY
34213: PPUSH
34214: CALL_OW 254
34218: PPUSH
34219: LD_INT 5
34221: PPUSH
34222: CALL_OW 272
34226: PUSH
34227: LD_VAR 0 17
34231: PUSH
34232: LD_INT 1
34234: ARRAY
34235: PPUSH
34236: CALL_OW 251
34240: PPUSH
34241: LD_VAR 0 17
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: PPUSH
34250: CALL_OW 254
34254: PPUSH
34255: LD_INT 5
34257: PPUSH
34258: CALL_OW 273
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34267: LD_VAR 0 16
34271: PUSH
34272: LD_INT 1
34274: ARRAY
34275: PPUSH
34276: LD_VAR 0 16
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PPUSH
34285: CALL_OW 488
34289: IFFALSE 34320
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34291: LD_VAR 0 13
34295: PPUSH
34296: LD_VAR 0 16
34300: PUSH
34301: LD_INT 1
34303: ARRAY
34304: PPUSH
34305: LD_VAR 0 16
34309: PUSH
34310: LD_INT 2
34312: ARRAY
34313: PPUSH
34314: CALL_OW 111
// continue ;
34318: GO 33810
// end ; end ; r := GetDir ( tmp ) ;
34320: LD_ADDR_VAR 0 15
34324: PUSH
34325: LD_VAR 0 13
34329: PPUSH
34330: CALL_OW 254
34334: ST_TO_ADDR
// if r = 5 then
34335: LD_VAR 0 15
34339: PUSH
34340: LD_INT 5
34342: EQUAL
34343: IFFALSE 34353
// r := 0 ;
34345: LD_ADDR_VAR 0 15
34349: PUSH
34350: LD_INT 0
34352: ST_TO_ADDR
// for j = r to 5 do
34353: LD_ADDR_VAR 0 10
34357: PUSH
34358: DOUBLE
34359: LD_VAR 0 15
34363: DEC
34364: ST_TO_ADDR
34365: LD_INT 5
34367: PUSH
34368: FOR_TO
34369: IFFALSE 34483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34371: LD_ADDR_VAR 0 11
34375: PUSH
34376: LD_VAR 0 13
34380: PPUSH
34381: CALL_OW 250
34385: PPUSH
34386: LD_VAR 0 10
34390: PPUSH
34391: LD_INT 2
34393: PPUSH
34394: CALL_OW 272
34398: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34399: LD_ADDR_VAR 0 12
34403: PUSH
34404: LD_VAR 0 13
34408: PPUSH
34409: CALL_OW 251
34413: PPUSH
34414: LD_VAR 0 10
34418: PPUSH
34419: LD_INT 2
34421: PPUSH
34422: CALL_OW 273
34426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34427: LD_VAR 0 11
34431: PPUSH
34432: LD_VAR 0 12
34436: PPUSH
34437: CALL_OW 488
34441: PUSH
34442: LD_VAR 0 11
34446: PPUSH
34447: LD_VAR 0 12
34451: PPUSH
34452: CALL_OW 428
34456: NOT
34457: AND
34458: IFFALSE 34481
// begin ComMoveXY ( tmp , _x , _y ) ;
34460: LD_VAR 0 13
34464: PPUSH
34465: LD_VAR 0 11
34469: PPUSH
34470: LD_VAR 0 12
34474: PPUSH
34475: CALL_OW 111
// break ;
34479: GO 34483
// end ; end ;
34481: GO 34368
34483: POP
34484: POP
// end ; end ;
34485: GO 33810
34487: POP
34488: POP
// end ;
34489: LD_VAR 0 8
34493: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
// result := false ;
34506: LD_ADDR_VAR 0 6
34510: PUSH
34511: LD_INT 0
34513: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34514: LD_VAR 0 1
34518: NOT
34519: PUSH
34520: LD_VAR 0 1
34524: PPUSH
34525: CALL_OW 266
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: IN
34540: NOT
34541: OR
34542: PUSH
34543: LD_VAR 0 2
34547: NOT
34548: OR
34549: PUSH
34550: LD_VAR 0 5
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 3
34566: PUSH
34567: LD_INT 4
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: IN
34581: NOT
34582: OR
34583: PUSH
34584: LD_VAR 0 3
34588: PPUSH
34589: LD_VAR 0 4
34593: PPUSH
34594: CALL_OW 488
34598: NOT
34599: OR
34600: IFFALSE 34604
// exit ;
34602: GO 35321
// pom := GetBase ( depot ) ;
34604: LD_ADDR_VAR 0 10
34608: PUSH
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 274
34618: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34619: LD_ADDR_VAR 0 11
34623: PUSH
34624: LD_VAR 0 2
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 248
34638: PPUSH
34639: CALL_OW 450
34643: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34644: LD_VAR 0 10
34648: PPUSH
34649: LD_INT 1
34651: PPUSH
34652: CALL_OW 275
34656: PUSH
34657: LD_VAR 0 11
34661: PUSH
34662: LD_INT 1
34664: ARRAY
34665: GREATEREQUAL
34666: PUSH
34667: LD_VAR 0 10
34671: PPUSH
34672: LD_INT 2
34674: PPUSH
34675: CALL_OW 275
34679: PUSH
34680: LD_VAR 0 11
34684: PUSH
34685: LD_INT 2
34687: ARRAY
34688: GREATEREQUAL
34689: AND
34690: PUSH
34691: LD_VAR 0 10
34695: PPUSH
34696: LD_INT 3
34698: PPUSH
34699: CALL_OW 275
34703: PUSH
34704: LD_VAR 0 11
34708: PUSH
34709: LD_INT 3
34711: ARRAY
34712: GREATEREQUAL
34713: AND
34714: NOT
34715: IFFALSE 34719
// exit ;
34717: GO 35321
// if GetBType ( depot ) = b_depot then
34719: LD_VAR 0 1
34723: PPUSH
34724: CALL_OW 266
34728: PUSH
34729: LD_INT 0
34731: EQUAL
34732: IFFALSE 34744
// dist := 28 else
34734: LD_ADDR_VAR 0 14
34738: PUSH
34739: LD_INT 28
34741: ST_TO_ADDR
34742: GO 34752
// dist := 36 ;
34744: LD_ADDR_VAR 0 14
34748: PUSH
34749: LD_INT 36
34751: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34752: LD_VAR 0 1
34756: PPUSH
34757: LD_VAR 0 3
34761: PPUSH
34762: LD_VAR 0 4
34766: PPUSH
34767: CALL_OW 297
34771: PUSH
34772: LD_VAR 0 14
34776: GREATER
34777: IFFALSE 34781
// exit ;
34779: GO 35321
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34781: LD_ADDR_VAR 0 12
34785: PUSH
34786: LD_VAR 0 2
34790: PPUSH
34791: LD_VAR 0 3
34795: PPUSH
34796: LD_VAR 0 4
34800: PPUSH
34801: LD_VAR 0 5
34805: PPUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 248
34815: PPUSH
34816: LD_INT 0
34818: PPUSH
34819: CALL 35326 0 6
34823: ST_TO_ADDR
// if not hexes then
34824: LD_VAR 0 12
34828: NOT
34829: IFFALSE 34833
// exit ;
34831: GO 35321
// hex := GetHexInfo ( x , y ) ;
34833: LD_ADDR_VAR 0 15
34837: PUSH
34838: LD_VAR 0 3
34842: PPUSH
34843: LD_VAR 0 4
34847: PPUSH
34848: CALL_OW 546
34852: ST_TO_ADDR
// if hex [ 1 ] then
34853: LD_VAR 0 15
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: IFFALSE 34865
// exit ;
34863: GO 35321
// height := hex [ 2 ] ;
34865: LD_ADDR_VAR 0 13
34869: PUSH
34870: LD_VAR 0 15
34874: PUSH
34875: LD_INT 2
34877: ARRAY
34878: ST_TO_ADDR
// for i = 1 to hexes do
34879: LD_ADDR_VAR 0 7
34883: PUSH
34884: DOUBLE
34885: LD_INT 1
34887: DEC
34888: ST_TO_ADDR
34889: LD_VAR 0 12
34893: PUSH
34894: FOR_TO
34895: IFFALSE 35225
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34897: LD_VAR 0 12
34901: PUSH
34902: LD_VAR 0 7
34906: ARRAY
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PPUSH
34912: LD_VAR 0 12
34916: PUSH
34917: LD_VAR 0 7
34921: ARRAY
34922: PUSH
34923: LD_INT 2
34925: ARRAY
34926: PPUSH
34927: CALL_OW 488
34931: NOT
34932: PUSH
34933: LD_VAR 0 12
34937: PUSH
34938: LD_VAR 0 7
34942: ARRAY
34943: PUSH
34944: LD_INT 1
34946: ARRAY
34947: PPUSH
34948: LD_VAR 0 12
34952: PUSH
34953: LD_VAR 0 7
34957: ARRAY
34958: PUSH
34959: LD_INT 2
34961: ARRAY
34962: PPUSH
34963: CALL_OW 428
34967: PUSH
34968: LD_INT 0
34970: GREATER
34971: OR
34972: PUSH
34973: LD_VAR 0 12
34977: PUSH
34978: LD_VAR 0 7
34982: ARRAY
34983: PUSH
34984: LD_INT 1
34986: ARRAY
34987: PPUSH
34988: LD_VAR 0 12
34992: PUSH
34993: LD_VAR 0 7
34997: ARRAY
34998: PUSH
34999: LD_INT 2
35001: ARRAY
35002: PPUSH
35003: CALL_OW 351
35007: OR
35008: IFFALSE 35014
// exit ;
35010: POP
35011: POP
35012: GO 35321
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35014: LD_ADDR_VAR 0 8
35018: PUSH
35019: LD_VAR 0 12
35023: PUSH
35024: LD_VAR 0 7
35028: ARRAY
35029: PUSH
35030: LD_INT 1
35032: ARRAY
35033: PPUSH
35034: LD_VAR 0 12
35038: PUSH
35039: LD_VAR 0 7
35043: ARRAY
35044: PUSH
35045: LD_INT 2
35047: ARRAY
35048: PPUSH
35049: CALL_OW 546
35053: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35054: LD_VAR 0 8
35058: PUSH
35059: LD_INT 1
35061: ARRAY
35062: PUSH
35063: LD_VAR 0 8
35067: PUSH
35068: LD_INT 2
35070: ARRAY
35071: PUSH
35072: LD_VAR 0 13
35076: PUSH
35077: LD_INT 2
35079: PLUS
35080: GREATER
35081: OR
35082: PUSH
35083: LD_VAR 0 8
35087: PUSH
35088: LD_INT 2
35090: ARRAY
35091: PUSH
35092: LD_VAR 0 13
35096: PUSH
35097: LD_INT 2
35099: MINUS
35100: LESS
35101: OR
35102: PUSH
35103: LD_VAR 0 8
35107: PUSH
35108: LD_INT 3
35110: ARRAY
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 8
35117: PUSH
35118: LD_INT 9
35120: PUSH
35121: LD_INT 10
35123: PUSH
35124: LD_INT 11
35126: PUSH
35127: LD_INT 12
35129: PUSH
35130: LD_INT 13
35132: PUSH
35133: LD_INT 16
35135: PUSH
35136: LD_INT 17
35138: PUSH
35139: LD_INT 18
35141: PUSH
35142: LD_INT 19
35144: PUSH
35145: LD_INT 20
35147: PUSH
35148: LD_INT 21
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: IN
35166: NOT
35167: OR
35168: PUSH
35169: LD_VAR 0 8
35173: PUSH
35174: LD_INT 5
35176: ARRAY
35177: NOT
35178: OR
35179: PUSH
35180: LD_VAR 0 8
35184: PUSH
35185: LD_INT 6
35187: ARRAY
35188: PUSH
35189: LD_INT 1
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 7
35197: PUSH
35198: LD_INT 9
35200: PUSH
35201: LD_INT 10
35203: PUSH
35204: LD_INT 11
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: IN
35215: NOT
35216: OR
35217: IFFALSE 35223
// exit ;
35219: POP
35220: POP
35221: GO 35321
// end ;
35223: GO 34894
35225: POP
35226: POP
// side := GetSide ( depot ) ;
35227: LD_ADDR_VAR 0 9
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 255
35241: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35242: LD_VAR 0 9
35246: PPUSH
35247: LD_VAR 0 3
35251: PPUSH
35252: LD_VAR 0 4
35256: PPUSH
35257: LD_INT 20
35259: PPUSH
35260: CALL 27642 0 4
35264: PUSH
35265: LD_INT 4
35267: ARRAY
35268: IFFALSE 35272
// exit ;
35270: GO 35321
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35272: LD_VAR 0 2
35276: PUSH
35277: LD_INT 29
35279: PUSH
35280: LD_INT 30
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: IN
35287: PUSH
35288: LD_VAR 0 3
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: LD_VAR 0 9
35302: PPUSH
35303: CALL_OW 440
35307: NOT
35308: AND
35309: IFFALSE 35313
// exit ;
35311: GO 35321
// result := true ;
35313: LD_ADDR_VAR 0 6
35317: PUSH
35318: LD_INT 1
35320: ST_TO_ADDR
// end ;
35321: LD_VAR 0 6
35325: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35326: LD_INT 0
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
// result = [ ] ;
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: EMPTY
35392: ST_TO_ADDR
// temp_list = [ ] ;
35393: LD_ADDR_VAR 0 9
35397: PUSH
35398: EMPTY
35399: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35400: LD_VAR 0 4
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: LD_INT 4
35419: PUSH
35420: LD_INT 5
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: IN
35431: NOT
35432: PUSH
35433: LD_VAR 0 1
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: IN
35448: PUSH
35449: LD_VAR 0 5
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: IN
35468: NOT
35469: AND
35470: OR
35471: IFFALSE 35475
// exit ;
35473: GO 53866
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35475: LD_VAR 0 1
35479: PUSH
35480: LD_INT 6
35482: PUSH
35483: LD_INT 7
35485: PUSH
35486: LD_INT 8
35488: PUSH
35489: LD_INT 13
35491: PUSH
35492: LD_INT 12
35494: PUSH
35495: LD_INT 15
35497: PUSH
35498: LD_INT 11
35500: PUSH
35501: LD_INT 14
35503: PUSH
35504: LD_INT 10
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: IN
35518: IFFALSE 35528
// btype = b_lab ;
35520: LD_ADDR_VAR 0 1
35524: PUSH
35525: LD_INT 6
35527: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35528: LD_VAR 0 6
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: IN
35547: NOT
35548: PUSH
35549: LD_VAR 0 1
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: LD_INT 3
35565: PUSH
35566: LD_INT 6
35568: PUSH
35569: LD_INT 36
35571: PUSH
35572: LD_INT 4
35574: PUSH
35575: LD_INT 5
35577: PUSH
35578: LD_INT 31
35580: PUSH
35581: LD_INT 32
35583: PUSH
35584: LD_INT 33
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: IN
35600: NOT
35601: PUSH
35602: LD_VAR 0 6
35606: PUSH
35607: LD_INT 1
35609: EQUAL
35610: AND
35611: OR
35612: PUSH
35613: LD_VAR 0 1
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: IN
35628: NOT
35629: PUSH
35630: LD_VAR 0 6
35634: PUSH
35635: LD_INT 2
35637: EQUAL
35638: AND
35639: OR
35640: IFFALSE 35650
// mode = 0 ;
35642: LD_ADDR_VAR 0 6
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// case mode of 0 :
35650: LD_VAR 0 6
35654: PUSH
35655: LD_INT 0
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 47116
35663: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35664: LD_ADDR_VAR 0 11
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35857: LD_ADDR_VAR 0 12
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 3
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36053: LD_ADDR_VAR 0 13
36057: PUSH
36058: LD_INT 0
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 2
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: LD_INT 3
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: LD_INT 3
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36252: LD_ADDR_VAR 0 14
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 3
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 3
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36448: LD_ADDR_VAR 0 15
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 3
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36641: LD_ADDR_VAR 0 16
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: LD_INT 3
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36834: LD_ADDR_VAR 0 17
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: NEG
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 2
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37064: LD_ADDR_VAR 0 18
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37294: LD_ADDR_VAR 0 19
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37524: LD_ADDR_VAR 0 20
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37754: LD_ADDR_VAR 0 21
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37984: LD_ADDR_VAR 0 22
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 0
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: NEG
38184: PUSH
38185: LD_INT 2
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38214: LD_ADDR_VAR 0 23
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 2
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38494: LD_ADDR_VAR 0 24
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38770: LD_ADDR_VAR 0 25
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 3
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39044: LD_ADDR_VAR 0 26
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39320: LD_ADDR_VAR 0 27
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 3
39553: NEG
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39600: LD_ADDR_VAR 0 28
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39882: LD_ADDR_VAR 0 29
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 3
40126: NEG
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40161: LD_ADDR_VAR 0 30
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 0
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: LD_INT 3
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 2
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 3
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40439: LD_ADDR_VAR 0 31
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: LD_INT 3
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 3
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40717: LD_ADDR_VAR 0 32
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 3
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 3
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40995: LD_ADDR_VAR 0 33
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 3
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 3
41239: NEG
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41274: LD_ADDR_VAR 0 34
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 3
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41554: LD_ADDR_VAR 0 35
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41666: LD_ADDR_VAR 0 36
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41778: LD_ADDR_VAR 0 37
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41890: LD_ADDR_VAR 0 38
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42002: LD_ADDR_VAR 0 39
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42114: LD_ADDR_VAR 0 40
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42226: LD_ADDR_VAR 0 41
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 3
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 3
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 3
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: LD_INT 3
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42576: LD_ADDR_VAR 0 42
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 3
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 2
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 3
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: NEG
42886: PUSH
42887: LD_INT 3
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42926: LD_ADDR_VAR 0 43
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 3
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 3
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43274: LD_ADDR_VAR 0 44
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: NEG
43453: PUSH
43454: LD_INT 2
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 3
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 3
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: NEG
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 3
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: LD_INT 3
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43624: LD_ADDR_VAR 0 45
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: LD_INT 3
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 3
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 3
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 3
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43974: LD_ADDR_VAR 0 46
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: LD_INT 3
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 3
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 3
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44322: LD_ADDR_VAR 0 47
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44473: LD_ADDR_VAR 0 48
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44620: LD_ADDR_VAR 0 49
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44764: LD_ADDR_VAR 0 50
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44908: LD_ADDR_VAR 0 51
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45055: LD_ADDR_VAR 0 52
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 2
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45206: LD_ADDR_VAR 0 53
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45436: LD_ADDR_VAR 0 54
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45666: LD_ADDR_VAR 0 55
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45896: LD_ADDR_VAR 0 56
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46126: LD_ADDR_VAR 0 57
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: NEG
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46356: LD_ADDR_VAR 0 58
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: NEG
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46586: LD_ADDR_VAR 0 59
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46674: LD_ADDR_VAR 0 60
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46762: LD_ADDR_VAR 0 61
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46850: LD_ADDR_VAR 0 62
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46938: LD_ADDR_VAR 0 63
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47026: LD_ADDR_VAR 0 64
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: ST_TO_ADDR
// end ; 1 :
47114: GO 53011
47116: LD_INT 1
47118: DOUBLE
47119: EQUAL
47120: IFTRUE 47124
47122: GO 49747
47124: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47125: LD_ADDR_VAR 0 11
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 2
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47169: LD_ADDR_VAR 0 12
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47210: LD_ADDR_VAR 0 13
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 3
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47250: LD_ADDR_VAR 0 14
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 3
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 3
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47291: LD_ADDR_VAR 0 15
47295: PUSH
47296: LD_INT 2
47298: NEG
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 3
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 3
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47335: LD_ADDR_VAR 0 16
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47381: LD_ADDR_VAR 0 17
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47425: LD_ADDR_VAR 0 18
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47466: LD_ADDR_VAR 0 19
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 3
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47506: LD_ADDR_VAR 0 20
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 3
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 3
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47547: LD_ADDR_VAR 0 21
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47591: LD_ADDR_VAR 0 22
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 3
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 3
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47637: LD_ADDR_VAR 0 23
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 4
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47681: LD_ADDR_VAR 0 24
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 4
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47722: LD_ADDR_VAR 0 25
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 4
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 4
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47762: LD_ADDR_VAR 0 26
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 4
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47803: LD_ADDR_VAR 0 27
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 4
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47847: LD_ADDR_VAR 0 28
47851: PUSH
47852: LD_INT 3
47854: NEG
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 3
47866: NEG
47867: PUSH
47868: LD_INT 4
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 4
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47893: LD_ADDR_VAR 0 29
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 4
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 4
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 3
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: LD_INT 5
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 5
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 4
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 6
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 6
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 5
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48048: LD_ADDR_VAR 0 30
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 4
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 5
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 5
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 6
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 6
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48191: LD_ADDR_VAR 0 31
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 4
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 4
48238: PUSH
48239: LD_INT 4
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 4
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 5
48258: PUSH
48259: LD_INT 4
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 5
48268: PUSH
48269: LD_INT 5
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 4
48278: PUSH
48279: LD_INT 5
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 6
48288: PUSH
48289: LD_INT 5
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 6
48298: PUSH
48299: LD_INT 6
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 5
48308: PUSH
48309: LD_INT 6
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48330: LD_ADDR_VAR 0 32
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 4
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 4
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 5
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 5
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 4
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 6
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: LD_INT 6
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 5
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48473: LD_ADDR_VAR 0 33
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 3
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 4
48525: NEG
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 4
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 4
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 5
48559: NEG
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 5
48570: NEG
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 5
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 6
48593: NEG
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 6
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48628: LD_ADDR_VAR 0 34
48632: PUSH
48633: LD_INT 2
48635: NEG
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: NEG
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: LD_INT 4
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 4
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 4
48695: NEG
48696: PUSH
48697: LD_INT 4
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 4
48707: NEG
48708: PUSH
48709: LD_INT 5
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 5
48719: NEG
48720: PUSH
48721: LD_INT 4
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 5
48731: NEG
48732: PUSH
48733: LD_INT 5
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 5
48743: NEG
48744: PUSH
48745: LD_INT 6
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 6
48755: NEG
48756: PUSH
48757: LD_INT 5
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 6
48767: NEG
48768: PUSH
48769: LD_INT 6
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48791: LD_ADDR_VAR 0 41
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48835: LD_ADDR_VAR 0 42
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48876: LD_ADDR_VAR 0 43
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 3
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48916: LD_ADDR_VAR 0 44
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48957: LD_ADDR_VAR 0 45
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49001: LD_ADDR_VAR 0 46
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: LIST
49046: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49047: LD_ADDR_VAR 0 47
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: LD_INT 3
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49080: LD_ADDR_VAR 0 48
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49111: LD_ADDR_VAR 0 49
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49140: LD_ADDR_VAR 0 50
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49169: LD_ADDR_VAR 0 51
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49200: LD_ADDR_VAR 0 52
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 2
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49233: LD_ADDR_VAR 0 53
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 3
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49277: LD_ADDR_VAR 0 54
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49318: LD_ADDR_VAR 0 55
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49358: LD_ADDR_VAR 0 56
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: LIST
49398: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49399: LD_ADDR_VAR 0 57
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: NEG
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49443: LD_ADDR_VAR 0 58
49447: PUSH
49448: LD_INT 2
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49489: LD_ADDR_VAR 0 59
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49533: LD_ADDR_VAR 0 60
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49574: LD_ADDR_VAR 0 61
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49614: LD_ADDR_VAR 0 62
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49655: LD_ADDR_VAR 0 63
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49699: LD_ADDR_VAR 0 64
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: ST_TO_ADDR
// end ; 2 :
49745: GO 53011
49747: LD_INT 2
49749: DOUBLE
49750: EQUAL
49751: IFTRUE 49755
49753: GO 53010
49755: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49756: LD_ADDR_VAR 0 29
49760: PUSH
49761: LD_INT 4
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 4
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 5
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 5
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 5
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 4
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 4
49886: PUSH
49887: LD_INT 4
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: PUSH
49897: LD_INT 4
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 4
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 4
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 4
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 4
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 5
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 5
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 4
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 5
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 3
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 4
50095: NEG
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 4
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 4
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 4
50153: NEG
50154: PUSH
50155: LD_INT 5
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 4
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 5
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 5
50213: NEG
50214: PUSH
50215: LD_INT 5
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: LD_INT 5
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 5
50237: NEG
50238: PUSH
50239: LD_INT 3
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50294: LD_ADDR_VAR 0 30
50298: PUSH
50299: LD_INT 4
50301: PUSH
50302: LD_INT 4
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 4
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 5
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 5
50331: PUSH
50332: LD_INT 5
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 4
50341: PUSH
50342: LD_INT 5
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: LD_INT 4
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 5
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: LD_INT 5
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 4
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 4
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 4
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 4
50484: NEG
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 5
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 5
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: LD_INT 4
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: LD_INT 4
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 4
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 4
50682: NEG
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 4
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 5
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: LD_INT 4
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 3
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 5
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: LD_INT 5
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50841: LD_ADDR_VAR 0 31
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 4
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 3
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 5
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 5
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: LD_INT 5
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 3
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 4
50997: NEG
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 4
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 4
51020: NEG
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 4
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: LD_INT 5
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 4
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 4
51091: NEG
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 5
51103: NEG
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 5
51115: NEG
51116: PUSH
51117: LD_INT 5
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: LD_INT 5
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 5
51139: NEG
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 4
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: LD_INT 4
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 5
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 5
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 4
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 5
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51391: LD_ADDR_VAR 0 32
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 4
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 4
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 5
51454: NEG
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 5
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 5
51477: NEG
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 4
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: LD_INT 3
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 4
51560: NEG
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 4
51572: NEG
51573: PUSH
51574: LD_INT 4
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 4
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 4
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 5
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 4
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 3
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 4
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 5
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: LD_INT 3
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 5
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 4
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 4
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 4
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 4
51803: PUSH
51804: LD_INT 4
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 5
51823: PUSH
51824: LD_INT 4
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 5
51833: PUSH
51834: LD_INT 5
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 4
51843: PUSH
51844: LD_INT 5
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 3
51853: PUSH
51854: LD_INT 4
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 3
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 3
51883: PUSH
51884: LD_INT 5
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51938: LD_ADDR_VAR 0 33
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: LD_INT 4
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: LD_INT 5
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 4
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 5
52017: NEG
52018: PUSH
52019: LD_INT 5
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: LD_INT 5
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 5
52041: NEG
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 4
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: LD_INT 4
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 4
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 4
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 4
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 4
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 4
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 4
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 4
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 3
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 4
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 5
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 4
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 5
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52476: LD_ADDR_VAR 0 34
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 4
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 5
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: LD_INT 3
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 4
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 5
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: LD_INT 5
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 4
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 4
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 4
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 4
52678: PUSH
52679: LD_INT 4
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 4
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 5
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 5
52708: PUSH
52709: LD_INT 5
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: LD_INT 5
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 4
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 5
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 4
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 4
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 4
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 5
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 5
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 5
52940: NEG
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: ST_TO_ADDR
// end ; end ;
53008: GO 53011
53010: POP
// case btype of b_depot , b_warehouse :
53011: LD_VAR 0 1
53015: PUSH
53016: LD_INT 0
53018: DOUBLE
53019: EQUAL
53020: IFTRUE 53030
53022: LD_INT 1
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53030
53028: GO 53231
53030: POP
// case nation of nation_american :
53031: LD_VAR 0 5
53035: PUSH
53036: LD_INT 1
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53100
53044: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53045: LD_ADDR_VAR 0 9
53049: PUSH
53050: LD_VAR 0 11
53054: PUSH
53055: LD_VAR 0 12
53059: PUSH
53060: LD_VAR 0 13
53064: PUSH
53065: LD_VAR 0 14
53069: PUSH
53070: LD_VAR 0 15
53074: PUSH
53075: LD_VAR 0 16
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: PUSH
53088: LD_VAR 0 4
53092: PUSH
53093: LD_INT 1
53095: PLUS
53096: ARRAY
53097: ST_TO_ADDR
53098: GO 53229
53100: LD_INT 2
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53164
53108: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53109: LD_ADDR_VAR 0 9
53113: PUSH
53114: LD_VAR 0 17
53118: PUSH
53119: LD_VAR 0 18
53123: PUSH
53124: LD_VAR 0 19
53128: PUSH
53129: LD_VAR 0 20
53133: PUSH
53134: LD_VAR 0 21
53138: PUSH
53139: LD_VAR 0 22
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_VAR 0 4
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ARRAY
53161: ST_TO_ADDR
53162: GO 53229
53164: LD_INT 3
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53172
53170: GO 53228
53172: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53173: LD_ADDR_VAR 0 9
53177: PUSH
53178: LD_VAR 0 23
53182: PUSH
53183: LD_VAR 0 24
53187: PUSH
53188: LD_VAR 0 25
53192: PUSH
53193: LD_VAR 0 26
53197: PUSH
53198: LD_VAR 0 27
53202: PUSH
53203: LD_VAR 0 28
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: PUSH
53216: LD_VAR 0 4
53220: PUSH
53221: LD_INT 1
53223: PLUS
53224: ARRAY
53225: ST_TO_ADDR
53226: GO 53229
53228: POP
53229: GO 53784
53231: LD_INT 2
53233: DOUBLE
53234: EQUAL
53235: IFTRUE 53245
53237: LD_INT 3
53239: DOUBLE
53240: EQUAL
53241: IFTRUE 53245
53243: GO 53301
53245: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53246: LD_ADDR_VAR 0 9
53250: PUSH
53251: LD_VAR 0 29
53255: PUSH
53256: LD_VAR 0 30
53260: PUSH
53261: LD_VAR 0 31
53265: PUSH
53266: LD_VAR 0 32
53270: PUSH
53271: LD_VAR 0 33
53275: PUSH
53276: LD_VAR 0 34
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: PUSH
53289: LD_VAR 0 4
53293: PUSH
53294: LD_INT 1
53296: PLUS
53297: ARRAY
53298: ST_TO_ADDR
53299: GO 53784
53301: LD_INT 16
53303: DOUBLE
53304: EQUAL
53305: IFTRUE 53363
53307: LD_INT 17
53309: DOUBLE
53310: EQUAL
53311: IFTRUE 53363
53313: LD_INT 18
53315: DOUBLE
53316: EQUAL
53317: IFTRUE 53363
53319: LD_INT 19
53321: DOUBLE
53322: EQUAL
53323: IFTRUE 53363
53325: LD_INT 22
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53363
53331: LD_INT 20
53333: DOUBLE
53334: EQUAL
53335: IFTRUE 53363
53337: LD_INT 21
53339: DOUBLE
53340: EQUAL
53341: IFTRUE 53363
53343: LD_INT 23
53345: DOUBLE
53346: EQUAL
53347: IFTRUE 53363
53349: LD_INT 24
53351: DOUBLE
53352: EQUAL
53353: IFTRUE 53363
53355: LD_INT 25
53357: DOUBLE
53358: EQUAL
53359: IFTRUE 53363
53361: GO 53419
53363: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53364: LD_ADDR_VAR 0 9
53368: PUSH
53369: LD_VAR 0 35
53373: PUSH
53374: LD_VAR 0 36
53378: PUSH
53379: LD_VAR 0 37
53383: PUSH
53384: LD_VAR 0 38
53388: PUSH
53389: LD_VAR 0 39
53393: PUSH
53394: LD_VAR 0 40
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: PUSH
53407: LD_VAR 0 4
53411: PUSH
53412: LD_INT 1
53414: PLUS
53415: ARRAY
53416: ST_TO_ADDR
53417: GO 53784
53419: LD_INT 6
53421: DOUBLE
53422: EQUAL
53423: IFTRUE 53475
53425: LD_INT 7
53427: DOUBLE
53428: EQUAL
53429: IFTRUE 53475
53431: LD_INT 8
53433: DOUBLE
53434: EQUAL
53435: IFTRUE 53475
53437: LD_INT 13
53439: DOUBLE
53440: EQUAL
53441: IFTRUE 53475
53443: LD_INT 12
53445: DOUBLE
53446: EQUAL
53447: IFTRUE 53475
53449: LD_INT 15
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53475
53455: LD_INT 11
53457: DOUBLE
53458: EQUAL
53459: IFTRUE 53475
53461: LD_INT 14
53463: DOUBLE
53464: EQUAL
53465: IFTRUE 53475
53467: LD_INT 10
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53475
53473: GO 53531
53475: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53476: LD_ADDR_VAR 0 9
53480: PUSH
53481: LD_VAR 0 41
53485: PUSH
53486: LD_VAR 0 42
53490: PUSH
53491: LD_VAR 0 43
53495: PUSH
53496: LD_VAR 0 44
53500: PUSH
53501: LD_VAR 0 45
53505: PUSH
53506: LD_VAR 0 46
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: PUSH
53519: LD_VAR 0 4
53523: PUSH
53524: LD_INT 1
53526: PLUS
53527: ARRAY
53528: ST_TO_ADDR
53529: GO 53784
53531: LD_INT 36
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53539
53537: GO 53595
53539: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53540: LD_ADDR_VAR 0 9
53544: PUSH
53545: LD_VAR 0 47
53549: PUSH
53550: LD_VAR 0 48
53554: PUSH
53555: LD_VAR 0 49
53559: PUSH
53560: LD_VAR 0 50
53564: PUSH
53565: LD_VAR 0 51
53569: PUSH
53570: LD_VAR 0 52
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: PUSH
53583: LD_VAR 0 4
53587: PUSH
53588: LD_INT 1
53590: PLUS
53591: ARRAY
53592: ST_TO_ADDR
53593: GO 53784
53595: LD_INT 4
53597: DOUBLE
53598: EQUAL
53599: IFTRUE 53621
53601: LD_INT 5
53603: DOUBLE
53604: EQUAL
53605: IFTRUE 53621
53607: LD_INT 34
53609: DOUBLE
53610: EQUAL
53611: IFTRUE 53621
53613: LD_INT 37
53615: DOUBLE
53616: EQUAL
53617: IFTRUE 53621
53619: GO 53677
53621: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53622: LD_ADDR_VAR 0 9
53626: PUSH
53627: LD_VAR 0 53
53631: PUSH
53632: LD_VAR 0 54
53636: PUSH
53637: LD_VAR 0 55
53641: PUSH
53642: LD_VAR 0 56
53646: PUSH
53647: LD_VAR 0 57
53651: PUSH
53652: LD_VAR 0 58
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: PUSH
53665: LD_VAR 0 4
53669: PUSH
53670: LD_INT 1
53672: PLUS
53673: ARRAY
53674: ST_TO_ADDR
53675: GO 53784
53677: LD_INT 31
53679: DOUBLE
53680: EQUAL
53681: IFTRUE 53727
53683: LD_INT 32
53685: DOUBLE
53686: EQUAL
53687: IFTRUE 53727
53689: LD_INT 33
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53727
53695: LD_INT 27
53697: DOUBLE
53698: EQUAL
53699: IFTRUE 53727
53701: LD_INT 26
53703: DOUBLE
53704: EQUAL
53705: IFTRUE 53727
53707: LD_INT 28
53709: DOUBLE
53710: EQUAL
53711: IFTRUE 53727
53713: LD_INT 29
53715: DOUBLE
53716: EQUAL
53717: IFTRUE 53727
53719: LD_INT 30
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53727
53725: GO 53783
53727: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53728: LD_ADDR_VAR 0 9
53732: PUSH
53733: LD_VAR 0 59
53737: PUSH
53738: LD_VAR 0 60
53742: PUSH
53743: LD_VAR 0 61
53747: PUSH
53748: LD_VAR 0 62
53752: PUSH
53753: LD_VAR 0 63
53757: PUSH
53758: LD_VAR 0 64
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: PUSH
53771: LD_VAR 0 4
53775: PUSH
53776: LD_INT 1
53778: PLUS
53779: ARRAY
53780: ST_TO_ADDR
53781: GO 53784
53783: POP
// temp_list2 = [ ] ;
53784: LD_ADDR_VAR 0 10
53788: PUSH
53789: EMPTY
53790: ST_TO_ADDR
// for i in temp_list do
53791: LD_ADDR_VAR 0 8
53795: PUSH
53796: LD_VAR 0 9
53800: PUSH
53801: FOR_IN
53802: IFFALSE 53854
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53804: LD_ADDR_VAR 0 10
53808: PUSH
53809: LD_VAR 0 10
53813: PUSH
53814: LD_VAR 0 8
53818: PUSH
53819: LD_INT 1
53821: ARRAY
53822: PUSH
53823: LD_VAR 0 2
53827: PLUS
53828: PUSH
53829: LD_VAR 0 8
53833: PUSH
53834: LD_INT 2
53836: ARRAY
53837: PUSH
53838: LD_VAR 0 3
53842: PLUS
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: ADD
53851: ST_TO_ADDR
53852: GO 53801
53854: POP
53855: POP
// result = temp_list2 ;
53856: LD_ADDR_VAR 0 7
53860: PUSH
53861: LD_VAR 0 10
53865: ST_TO_ADDR
// end ;
53866: LD_VAR 0 7
53870: RET
// export function EnemyInRange ( unit , dist ) ; begin
53871: LD_INT 0
53873: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: LD_VAR 0 1
53883: PPUSH
53884: CALL_OW 255
53888: PPUSH
53889: LD_VAR 0 1
53893: PPUSH
53894: CALL_OW 250
53898: PPUSH
53899: LD_VAR 0 1
53903: PPUSH
53904: CALL_OW 251
53908: PPUSH
53909: LD_VAR 0 2
53913: PPUSH
53914: CALL 27642 0 4
53918: PUSH
53919: LD_INT 4
53921: ARRAY
53922: ST_TO_ADDR
// end ;
53923: LD_VAR 0 3
53927: RET
// export function PlayerSeeMe ( unit ) ; begin
53928: LD_INT 0
53930: PPUSH
// result := See ( your_side , unit ) ;
53931: LD_ADDR_VAR 0 2
53935: PUSH
53936: LD_OWVAR 2
53940: PPUSH
53941: LD_VAR 0 1
53945: PPUSH
53946: CALL_OW 292
53950: ST_TO_ADDR
// end ;
53951: LD_VAR 0 2
53955: RET
// export function ReverseDir ( unit ) ; begin
53956: LD_INT 0
53958: PPUSH
// if not unit then
53959: LD_VAR 0 1
53963: NOT
53964: IFFALSE 53968
// exit ;
53966: GO 53991
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53968: LD_ADDR_VAR 0 2
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: CALL_OW 254
53982: PUSH
53983: LD_INT 3
53985: PLUS
53986: PUSH
53987: LD_INT 6
53989: MOD
53990: ST_TO_ADDR
// end ;
53991: LD_VAR 0 2
53995: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53996: LD_INT 0
53998: PPUSH
53999: PPUSH
54000: PPUSH
54001: PPUSH
54002: PPUSH
// if not hexes then
54003: LD_VAR 0 2
54007: NOT
54008: IFFALSE 54012
// exit ;
54010: GO 54160
// dist := 9999 ;
54012: LD_ADDR_VAR 0 5
54016: PUSH
54017: LD_INT 9999
54019: ST_TO_ADDR
// for i = 1 to hexes do
54020: LD_ADDR_VAR 0 4
54024: PUSH
54025: DOUBLE
54026: LD_INT 1
54028: DEC
54029: ST_TO_ADDR
54030: LD_VAR 0 2
54034: PUSH
54035: FOR_TO
54036: IFFALSE 54148
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54038: LD_VAR 0 1
54042: PPUSH
54043: LD_VAR 0 2
54047: PUSH
54048: LD_VAR 0 4
54052: ARRAY
54053: PUSH
54054: LD_INT 1
54056: ARRAY
54057: PPUSH
54058: LD_VAR 0 2
54062: PUSH
54063: LD_VAR 0 4
54067: ARRAY
54068: PUSH
54069: LD_INT 2
54071: ARRAY
54072: PPUSH
54073: CALL_OW 297
54077: PUSH
54078: LD_VAR 0 5
54082: LESS
54083: IFFALSE 54146
// begin hex := hexes [ i ] ;
54085: LD_ADDR_VAR 0 7
54089: PUSH
54090: LD_VAR 0 2
54094: PUSH
54095: LD_VAR 0 4
54099: ARRAY
54100: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: LD_VAR 0 1
54110: PPUSH
54111: LD_VAR 0 2
54115: PUSH
54116: LD_VAR 0 4
54120: ARRAY
54121: PUSH
54122: LD_INT 1
54124: ARRAY
54125: PPUSH
54126: LD_VAR 0 2
54130: PUSH
54131: LD_VAR 0 4
54135: ARRAY
54136: PUSH
54137: LD_INT 2
54139: ARRAY
54140: PPUSH
54141: CALL_OW 297
54145: ST_TO_ADDR
// end ; end ;
54146: GO 54035
54148: POP
54149: POP
// result := hex ;
54150: LD_ADDR_VAR 0 3
54154: PUSH
54155: LD_VAR 0 7
54159: ST_TO_ADDR
// end ;
54160: LD_VAR 0 3
54164: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54165: LD_INT 0
54167: PPUSH
54168: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54169: LD_VAR 0 1
54173: NOT
54174: PUSH
54175: LD_VAR 0 1
54179: PUSH
54180: LD_INT 21
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 23
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PPUSH
54204: CALL_OW 69
54208: IN
54209: NOT
54210: OR
54211: IFFALSE 54215
// exit ;
54213: GO 54262
// for i = 1 to 3 do
54215: LD_ADDR_VAR 0 3
54219: PUSH
54220: DOUBLE
54221: LD_INT 1
54223: DEC
54224: ST_TO_ADDR
54225: LD_INT 3
54227: PUSH
54228: FOR_TO
54229: IFFALSE 54260
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54231: LD_VAR 0 1
54235: PPUSH
54236: CALL_OW 250
54240: PPUSH
54241: LD_VAR 0 1
54245: PPUSH
54246: CALL_OW 251
54250: PPUSH
54251: LD_INT 1
54253: PPUSH
54254: CALL_OW 453
54258: GO 54228
54260: POP
54261: POP
// end ;
54262: LD_VAR 0 2
54266: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54267: LD_INT 0
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54275: LD_VAR 0 1
54279: NOT
54280: PUSH
54281: LD_VAR 0 2
54285: NOT
54286: OR
54287: PUSH
54288: LD_VAR 0 1
54292: PPUSH
54293: CALL_OW 314
54297: OR
54298: IFFALSE 54302
// exit ;
54300: GO 54743
// x := GetX ( enemy_unit ) ;
54302: LD_ADDR_VAR 0 7
54306: PUSH
54307: LD_VAR 0 2
54311: PPUSH
54312: CALL_OW 250
54316: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54317: LD_ADDR_VAR 0 8
54321: PUSH
54322: LD_VAR 0 2
54326: PPUSH
54327: CALL_OW 251
54331: ST_TO_ADDR
// if not x or not y then
54332: LD_VAR 0 7
54336: NOT
54337: PUSH
54338: LD_VAR 0 8
54342: NOT
54343: OR
54344: IFFALSE 54348
// exit ;
54346: GO 54743
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54348: LD_ADDR_VAR 0 6
54352: PUSH
54353: LD_VAR 0 7
54357: PPUSH
54358: LD_INT 0
54360: PPUSH
54361: LD_INT 4
54363: PPUSH
54364: CALL_OW 272
54368: PUSH
54369: LD_VAR 0 8
54373: PPUSH
54374: LD_INT 0
54376: PPUSH
54377: LD_INT 4
54379: PPUSH
54380: CALL_OW 273
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_VAR 0 7
54393: PPUSH
54394: LD_INT 1
54396: PPUSH
54397: LD_INT 4
54399: PPUSH
54400: CALL_OW 272
54404: PUSH
54405: LD_VAR 0 8
54409: PPUSH
54410: LD_INT 1
54412: PPUSH
54413: LD_INT 4
54415: PPUSH
54416: CALL_OW 273
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_VAR 0 7
54429: PPUSH
54430: LD_INT 2
54432: PPUSH
54433: LD_INT 4
54435: PPUSH
54436: CALL_OW 272
54440: PUSH
54441: LD_VAR 0 8
54445: PPUSH
54446: LD_INT 2
54448: PPUSH
54449: LD_INT 4
54451: PPUSH
54452: CALL_OW 273
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_VAR 0 7
54465: PPUSH
54466: LD_INT 3
54468: PPUSH
54469: LD_INT 4
54471: PPUSH
54472: CALL_OW 272
54476: PUSH
54477: LD_VAR 0 8
54481: PPUSH
54482: LD_INT 3
54484: PPUSH
54485: LD_INT 4
54487: PPUSH
54488: CALL_OW 273
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_VAR 0 7
54501: PPUSH
54502: LD_INT 4
54504: PPUSH
54505: LD_INT 4
54507: PPUSH
54508: CALL_OW 272
54512: PUSH
54513: LD_VAR 0 8
54517: PPUSH
54518: LD_INT 4
54520: PPUSH
54521: LD_INT 4
54523: PPUSH
54524: CALL_OW 273
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_VAR 0 7
54537: PPUSH
54538: LD_INT 5
54540: PPUSH
54541: LD_INT 4
54543: PPUSH
54544: CALL_OW 272
54548: PUSH
54549: LD_VAR 0 8
54553: PPUSH
54554: LD_INT 5
54556: PPUSH
54557: LD_INT 4
54559: PPUSH
54560: CALL_OW 273
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// for i = tmp downto 1 do
54577: LD_ADDR_VAR 0 4
54581: PUSH
54582: DOUBLE
54583: LD_VAR 0 6
54587: INC
54588: ST_TO_ADDR
54589: LD_INT 1
54591: PUSH
54592: FOR_DOWNTO
54593: IFFALSE 54694
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54595: LD_VAR 0 6
54599: PUSH
54600: LD_VAR 0 4
54604: ARRAY
54605: PUSH
54606: LD_INT 1
54608: ARRAY
54609: PPUSH
54610: LD_VAR 0 6
54614: PUSH
54615: LD_VAR 0 4
54619: ARRAY
54620: PUSH
54621: LD_INT 2
54623: ARRAY
54624: PPUSH
54625: CALL_OW 488
54629: NOT
54630: PUSH
54631: LD_VAR 0 6
54635: PUSH
54636: LD_VAR 0 4
54640: ARRAY
54641: PUSH
54642: LD_INT 1
54644: ARRAY
54645: PPUSH
54646: LD_VAR 0 6
54650: PUSH
54651: LD_VAR 0 4
54655: ARRAY
54656: PUSH
54657: LD_INT 2
54659: ARRAY
54660: PPUSH
54661: CALL_OW 428
54665: PUSH
54666: LD_INT 0
54668: NONEQUAL
54669: OR
54670: IFFALSE 54692
// tmp := Delete ( tmp , i ) ;
54672: LD_ADDR_VAR 0 6
54676: PUSH
54677: LD_VAR 0 6
54681: PPUSH
54682: LD_VAR 0 4
54686: PPUSH
54687: CALL_OW 3
54691: ST_TO_ADDR
54692: GO 54592
54694: POP
54695: POP
// j := GetClosestHex ( unit , tmp ) ;
54696: LD_ADDR_VAR 0 5
54700: PUSH
54701: LD_VAR 0 1
54705: PPUSH
54706: LD_VAR 0 6
54710: PPUSH
54711: CALL 53996 0 2
54715: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54716: LD_VAR 0 1
54720: PPUSH
54721: LD_VAR 0 5
54725: PUSH
54726: LD_INT 1
54728: ARRAY
54729: PPUSH
54730: LD_VAR 0 5
54734: PUSH
54735: LD_INT 2
54737: ARRAY
54738: PPUSH
54739: CALL_OW 111
// end ;
54743: LD_VAR 0 3
54747: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54748: LD_INT 0
54750: PPUSH
54751: PPUSH
54752: PPUSH
// uc_side = 0 ;
54753: LD_ADDR_OWVAR 20
54757: PUSH
54758: LD_INT 0
54760: ST_TO_ADDR
// uc_nation = 0 ;
54761: LD_ADDR_OWVAR 21
54765: PUSH
54766: LD_INT 0
54768: ST_TO_ADDR
// InitHc_All ( ) ;
54769: CALL_OW 584
// InitVc ;
54773: CALL_OW 20
// if mastodonts then
54777: LD_VAR 0 6
54781: IFFALSE 54848
// for i = 1 to mastodonts do
54783: LD_ADDR_VAR 0 11
54787: PUSH
54788: DOUBLE
54789: LD_INT 1
54791: DEC
54792: ST_TO_ADDR
54793: LD_VAR 0 6
54797: PUSH
54798: FOR_TO
54799: IFFALSE 54846
// begin vc_chassis := 31 ;
54801: LD_ADDR_OWVAR 37
54805: PUSH
54806: LD_INT 31
54808: ST_TO_ADDR
// vc_control := control_rider ;
54809: LD_ADDR_OWVAR 38
54813: PUSH
54814: LD_INT 4
54816: ST_TO_ADDR
// animal := CreateVehicle ;
54817: LD_ADDR_VAR 0 12
54821: PUSH
54822: CALL_OW 45
54826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54827: LD_VAR 0 12
54831: PPUSH
54832: LD_VAR 0 8
54836: PPUSH
54837: LD_INT 0
54839: PPUSH
54840: CALL 57036 0 3
// end ;
54844: GO 54798
54846: POP
54847: POP
// if horses then
54848: LD_VAR 0 5
54852: IFFALSE 54919
// for i = 1 to horses do
54854: LD_ADDR_VAR 0 11
54858: PUSH
54859: DOUBLE
54860: LD_INT 1
54862: DEC
54863: ST_TO_ADDR
54864: LD_VAR 0 5
54868: PUSH
54869: FOR_TO
54870: IFFALSE 54917
// begin hc_class := 21 ;
54872: LD_ADDR_OWVAR 28
54876: PUSH
54877: LD_INT 21
54879: ST_TO_ADDR
// hc_gallery :=  ;
54880: LD_ADDR_OWVAR 33
54884: PUSH
54885: LD_STRING 
54887: ST_TO_ADDR
// animal := CreateHuman ;
54888: LD_ADDR_VAR 0 12
54892: PUSH
54893: CALL_OW 44
54897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54898: LD_VAR 0 12
54902: PPUSH
54903: LD_VAR 0 8
54907: PPUSH
54908: LD_INT 0
54910: PPUSH
54911: CALL 57036 0 3
// end ;
54915: GO 54869
54917: POP
54918: POP
// if birds then
54919: LD_VAR 0 1
54923: IFFALSE 54990
// for i = 1 to birds do
54925: LD_ADDR_VAR 0 11
54929: PUSH
54930: DOUBLE
54931: LD_INT 1
54933: DEC
54934: ST_TO_ADDR
54935: LD_VAR 0 1
54939: PUSH
54940: FOR_TO
54941: IFFALSE 54988
// begin hc_class = 18 ;
54943: LD_ADDR_OWVAR 28
54947: PUSH
54948: LD_INT 18
54950: ST_TO_ADDR
// hc_gallery =  ;
54951: LD_ADDR_OWVAR 33
54955: PUSH
54956: LD_STRING 
54958: ST_TO_ADDR
// animal := CreateHuman ;
54959: LD_ADDR_VAR 0 12
54963: PUSH
54964: CALL_OW 44
54968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54969: LD_VAR 0 12
54973: PPUSH
54974: LD_VAR 0 8
54978: PPUSH
54979: LD_INT 0
54981: PPUSH
54982: CALL 57036 0 3
// end ;
54986: GO 54940
54988: POP
54989: POP
// if tigers then
54990: LD_VAR 0 2
54994: IFFALSE 55078
// for i = 1 to tigers do
54996: LD_ADDR_VAR 0 11
55000: PUSH
55001: DOUBLE
55002: LD_INT 1
55004: DEC
55005: ST_TO_ADDR
55006: LD_VAR 0 2
55010: PUSH
55011: FOR_TO
55012: IFFALSE 55076
// begin hc_class = class_tiger ;
55014: LD_ADDR_OWVAR 28
55018: PUSH
55019: LD_INT 14
55021: ST_TO_ADDR
// hc_gallery =  ;
55022: LD_ADDR_OWVAR 33
55026: PUSH
55027: LD_STRING 
55029: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55030: LD_ADDR_OWVAR 35
55034: PUSH
55035: LD_INT 7
55037: NEG
55038: PPUSH
55039: LD_INT 7
55041: PPUSH
55042: CALL_OW 12
55046: ST_TO_ADDR
// animal := CreateHuman ;
55047: LD_ADDR_VAR 0 12
55051: PUSH
55052: CALL_OW 44
55056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55057: LD_VAR 0 12
55061: PPUSH
55062: LD_VAR 0 8
55066: PPUSH
55067: LD_INT 0
55069: PPUSH
55070: CALL 57036 0 3
// end ;
55074: GO 55011
55076: POP
55077: POP
// if apemans then
55078: LD_VAR 0 3
55082: IFFALSE 55205
// for i = 1 to apemans do
55084: LD_ADDR_VAR 0 11
55088: PUSH
55089: DOUBLE
55090: LD_INT 1
55092: DEC
55093: ST_TO_ADDR
55094: LD_VAR 0 3
55098: PUSH
55099: FOR_TO
55100: IFFALSE 55203
// begin hc_class = class_apeman ;
55102: LD_ADDR_OWVAR 28
55106: PUSH
55107: LD_INT 12
55109: ST_TO_ADDR
// hc_gallery =  ;
55110: LD_ADDR_OWVAR 33
55114: PUSH
55115: LD_STRING 
55117: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55118: LD_ADDR_OWVAR 35
55122: PUSH
55123: LD_INT 5
55125: NEG
55126: PPUSH
55127: LD_INT 5
55129: PPUSH
55130: CALL_OW 12
55134: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55135: LD_ADDR_OWVAR 31
55139: PUSH
55140: LD_INT 1
55142: PPUSH
55143: LD_INT 3
55145: PPUSH
55146: CALL_OW 12
55150: PUSH
55151: LD_INT 1
55153: PPUSH
55154: LD_INT 3
55156: PPUSH
55157: CALL_OW 12
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// animal := CreateHuman ;
55174: LD_ADDR_VAR 0 12
55178: PUSH
55179: CALL_OW 44
55183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55184: LD_VAR 0 12
55188: PPUSH
55189: LD_VAR 0 8
55193: PPUSH
55194: LD_INT 0
55196: PPUSH
55197: CALL 57036 0 3
// end ;
55201: GO 55099
55203: POP
55204: POP
// if enchidnas then
55205: LD_VAR 0 4
55209: IFFALSE 55276
// for i = 1 to enchidnas do
55211: LD_ADDR_VAR 0 11
55215: PUSH
55216: DOUBLE
55217: LD_INT 1
55219: DEC
55220: ST_TO_ADDR
55221: LD_VAR 0 4
55225: PUSH
55226: FOR_TO
55227: IFFALSE 55274
// begin hc_class = 13 ;
55229: LD_ADDR_OWVAR 28
55233: PUSH
55234: LD_INT 13
55236: ST_TO_ADDR
// hc_gallery =  ;
55237: LD_ADDR_OWVAR 33
55241: PUSH
55242: LD_STRING 
55244: ST_TO_ADDR
// animal := CreateHuman ;
55245: LD_ADDR_VAR 0 12
55249: PUSH
55250: CALL_OW 44
55254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55255: LD_VAR 0 12
55259: PPUSH
55260: LD_VAR 0 8
55264: PPUSH
55265: LD_INT 0
55267: PPUSH
55268: CALL 57036 0 3
// end ;
55272: GO 55226
55274: POP
55275: POP
// if fishes then
55276: LD_VAR 0 7
55280: IFFALSE 55347
// for i = 1 to fishes do
55282: LD_ADDR_VAR 0 11
55286: PUSH
55287: DOUBLE
55288: LD_INT 1
55290: DEC
55291: ST_TO_ADDR
55292: LD_VAR 0 7
55296: PUSH
55297: FOR_TO
55298: IFFALSE 55345
// begin hc_class = 20 ;
55300: LD_ADDR_OWVAR 28
55304: PUSH
55305: LD_INT 20
55307: ST_TO_ADDR
// hc_gallery =  ;
55308: LD_ADDR_OWVAR 33
55312: PUSH
55313: LD_STRING 
55315: ST_TO_ADDR
// animal := CreateHuman ;
55316: LD_ADDR_VAR 0 12
55320: PUSH
55321: CALL_OW 44
55325: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55326: LD_VAR 0 12
55330: PPUSH
55331: LD_VAR 0 9
55335: PPUSH
55336: LD_INT 0
55338: PPUSH
55339: CALL 57036 0 3
// end ;
55343: GO 55297
55345: POP
55346: POP
// end ;
55347: LD_VAR 0 10
55351: RET
// export function WantHeal ( sci , unit ) ; begin
55352: LD_INT 0
55354: PPUSH
// if GetTaskList ( sci ) > 0 then
55355: LD_VAR 0 1
55359: PPUSH
55360: CALL_OW 437
55364: PUSH
55365: LD_INT 0
55367: GREATER
55368: IFFALSE 55438
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55370: LD_VAR 0 1
55374: PPUSH
55375: CALL_OW 437
55379: PUSH
55380: LD_INT 1
55382: ARRAY
55383: PUSH
55384: LD_INT 1
55386: ARRAY
55387: PUSH
55388: LD_STRING l
55390: EQUAL
55391: PUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 437
55401: PUSH
55402: LD_INT 1
55404: ARRAY
55405: PUSH
55406: LD_INT 4
55408: ARRAY
55409: PUSH
55410: LD_VAR 0 2
55414: EQUAL
55415: AND
55416: IFFALSE 55428
// result := true else
55418: LD_ADDR_VAR 0 3
55422: PUSH
55423: LD_INT 1
55425: ST_TO_ADDR
55426: GO 55436
// result := false ;
55428: LD_ADDR_VAR 0 3
55432: PUSH
55433: LD_INT 0
55435: ST_TO_ADDR
// end else
55436: GO 55446
// result := false ;
55438: LD_ADDR_VAR 0 3
55442: PUSH
55443: LD_INT 0
55445: ST_TO_ADDR
// end ;
55446: LD_VAR 0 3
55450: RET
// export function HealTarget ( sci ) ; begin
55451: LD_INT 0
55453: PPUSH
// if not sci then
55454: LD_VAR 0 1
55458: NOT
55459: IFFALSE 55463
// exit ;
55461: GO 55528
// result := 0 ;
55463: LD_ADDR_VAR 0 2
55467: PUSH
55468: LD_INT 0
55470: ST_TO_ADDR
// if GetTaskList ( sci ) then
55471: LD_VAR 0 1
55475: PPUSH
55476: CALL_OW 437
55480: IFFALSE 55528
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55482: LD_VAR 0 1
55486: PPUSH
55487: CALL_OW 437
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: PUSH
55496: LD_INT 1
55498: ARRAY
55499: PUSH
55500: LD_STRING l
55502: EQUAL
55503: IFFALSE 55528
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55505: LD_ADDR_VAR 0 2
55509: PUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 437
55519: PUSH
55520: LD_INT 1
55522: ARRAY
55523: PUSH
55524: LD_INT 4
55526: ARRAY
55527: ST_TO_ADDR
// end ;
55528: LD_VAR 0 2
55532: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55533: LD_INT 0
55535: PPUSH
55536: PPUSH
55537: PPUSH
55538: PPUSH
// if not base_units then
55539: LD_VAR 0 1
55543: NOT
55544: IFFALSE 55548
// exit ;
55546: GO 55635
// result := false ;
55548: LD_ADDR_VAR 0 2
55552: PUSH
55553: LD_INT 0
55555: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55556: LD_ADDR_VAR 0 5
55560: PUSH
55561: LD_VAR 0 1
55565: PPUSH
55566: LD_INT 21
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PPUSH
55576: CALL_OW 72
55580: ST_TO_ADDR
// if not tmp then
55581: LD_VAR 0 5
55585: NOT
55586: IFFALSE 55590
// exit ;
55588: GO 55635
// for i in tmp do
55590: LD_ADDR_VAR 0 3
55594: PUSH
55595: LD_VAR 0 5
55599: PUSH
55600: FOR_IN
55601: IFFALSE 55633
// begin result := EnemyInRange ( i , 22 ) ;
55603: LD_ADDR_VAR 0 2
55607: PUSH
55608: LD_VAR 0 3
55612: PPUSH
55613: LD_INT 22
55615: PPUSH
55616: CALL 53871 0 2
55620: ST_TO_ADDR
// if result then
55621: LD_VAR 0 2
55625: IFFALSE 55631
// exit ;
55627: POP
55628: POP
55629: GO 55635
// end ;
55631: GO 55600
55633: POP
55634: POP
// end ;
55635: LD_VAR 0 2
55639: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55640: LD_INT 0
55642: PPUSH
55643: PPUSH
// if not units then
55644: LD_VAR 0 1
55648: NOT
55649: IFFALSE 55653
// exit ;
55651: GO 55723
// result := [ ] ;
55653: LD_ADDR_VAR 0 3
55657: PUSH
55658: EMPTY
55659: ST_TO_ADDR
// for i in units do
55660: LD_ADDR_VAR 0 4
55664: PUSH
55665: LD_VAR 0 1
55669: PUSH
55670: FOR_IN
55671: IFFALSE 55721
// if GetTag ( i ) = tag then
55673: LD_VAR 0 4
55677: PPUSH
55678: CALL_OW 110
55682: PUSH
55683: LD_VAR 0 2
55687: EQUAL
55688: IFFALSE 55719
// result := Insert ( result , result + 1 , i ) ;
55690: LD_ADDR_VAR 0 3
55694: PUSH
55695: LD_VAR 0 3
55699: PPUSH
55700: LD_VAR 0 3
55704: PUSH
55705: LD_INT 1
55707: PLUS
55708: PPUSH
55709: LD_VAR 0 4
55713: PPUSH
55714: CALL_OW 2
55718: ST_TO_ADDR
55719: GO 55670
55721: POP
55722: POP
// end ;
55723: LD_VAR 0 3
55727: RET
// export function IsDriver ( un ) ; begin
55728: LD_INT 0
55730: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55731: LD_ADDR_VAR 0 2
55735: PUSH
55736: LD_VAR 0 1
55740: PUSH
55741: LD_INT 55
55743: PUSH
55744: EMPTY
55745: LIST
55746: PPUSH
55747: CALL_OW 69
55751: IN
55752: ST_TO_ADDR
// end ;
55753: LD_VAR 0 2
55757: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55758: LD_INT 0
55760: PPUSH
55761: PPUSH
// list := [ ] ;
55762: LD_ADDR_VAR 0 5
55766: PUSH
55767: EMPTY
55768: ST_TO_ADDR
// case d of 0 :
55769: LD_VAR 0 3
55773: PUSH
55774: LD_INT 0
55776: DOUBLE
55777: EQUAL
55778: IFTRUE 55782
55780: GO 55915
55782: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55783: LD_ADDR_VAR 0 5
55787: PUSH
55788: LD_VAR 0 1
55792: PUSH
55793: LD_INT 4
55795: MINUS
55796: PUSH
55797: LD_VAR 0 2
55801: PUSH
55802: LD_INT 4
55804: MINUS
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: PUSH
55814: LD_VAR 0 1
55818: PUSH
55819: LD_INT 3
55821: MINUS
55822: PUSH
55823: LD_VAR 0 2
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: PUSH
55836: LD_VAR 0 1
55840: PUSH
55841: LD_INT 4
55843: PLUS
55844: PUSH
55845: LD_VAR 0 2
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 3
55865: PLUS
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 3
55874: PLUS
55875: PUSH
55876: LD_INT 5
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: PUSH
55884: LD_VAR 0 1
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: LD_INT 4
55896: PLUS
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// end ; 1 :
55913: GO 56613
55915: LD_INT 1
55917: DOUBLE
55918: EQUAL
55919: IFTRUE 55923
55921: GO 56056
55923: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55924: LD_ADDR_VAR 0 5
55928: PUSH
55929: LD_VAR 0 1
55933: PUSH
55934: LD_VAR 0 2
55938: PUSH
55939: LD_INT 4
55941: MINUS
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: PUSH
55951: LD_VAR 0 1
55955: PUSH
55956: LD_INT 3
55958: MINUS
55959: PUSH
55960: LD_VAR 0 2
55964: PUSH
55965: LD_INT 3
55967: MINUS
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: PUSH
55977: LD_VAR 0 1
55981: PUSH
55982: LD_INT 4
55984: MINUS
55985: PUSH
55986: LD_VAR 0 2
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: PUSH
55999: LD_VAR 0 1
56003: PUSH
56004: LD_VAR 0 2
56008: PUSH
56009: LD_INT 3
56011: PLUS
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: PUSH
56021: LD_VAR 0 1
56025: PUSH
56026: LD_INT 4
56028: PLUS
56029: PUSH
56030: LD_VAR 0 2
56034: PUSH
56035: LD_INT 4
56037: PLUS
56038: PUSH
56039: LD_INT 5
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// end ; 2 :
56054: GO 56613
56056: LD_INT 2
56058: DOUBLE
56059: EQUAL
56060: IFTRUE 56064
56062: GO 56193
56064: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56065: LD_ADDR_VAR 0 5
56069: PUSH
56070: LD_VAR 0 1
56074: PUSH
56075: LD_VAR 0 2
56079: PUSH
56080: LD_INT 3
56082: MINUS
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_INT 4
56099: PLUS
56100: PUSH
56101: LD_VAR 0 2
56105: PUSH
56106: LD_INT 4
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: PUSH
56114: LD_VAR 0 1
56118: PUSH
56119: LD_VAR 0 2
56123: PUSH
56124: LD_INT 4
56126: PLUS
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: LD_INT 3
56143: MINUS
56144: PUSH
56145: LD_VAR 0 2
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: LD_VAR 0 1
56162: PUSH
56163: LD_INT 4
56165: MINUS
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: LD_INT 4
56174: MINUS
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: LIST
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// end ; 3 :
56191: GO 56613
56193: LD_INT 3
56195: DOUBLE
56196: EQUAL
56197: IFTRUE 56201
56199: GO 56334
56201: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56202: LD_ADDR_VAR 0 5
56206: PUSH
56207: LD_VAR 0 1
56211: PUSH
56212: LD_INT 3
56214: PLUS
56215: PUSH
56216: LD_VAR 0 2
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: PUSH
56229: LD_VAR 0 1
56233: PUSH
56234: LD_INT 4
56236: PLUS
56237: PUSH
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 4
56245: PLUS
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: PUSH
56255: LD_VAR 0 1
56259: PUSH
56260: LD_INT 4
56262: MINUS
56263: PUSH
56264: LD_VAR 0 2
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_VAR 0 1
56281: PUSH
56282: LD_VAR 0 2
56286: PUSH
56287: LD_INT 4
56289: MINUS
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_INT 3
56306: MINUS
56307: PUSH
56308: LD_VAR 0 2
56312: PUSH
56313: LD_INT 3
56315: MINUS
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// end ; 4 :
56332: GO 56613
56334: LD_INT 4
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56342
56340: GO 56475
56342: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56343: LD_ADDR_VAR 0 5
56347: PUSH
56348: LD_VAR 0 1
56352: PUSH
56353: LD_VAR 0 2
56357: PUSH
56358: LD_INT 4
56360: PLUS
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: LIST
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_INT 3
56377: PLUS
56378: PUSH
56379: LD_VAR 0 2
56383: PUSH
56384: LD_INT 3
56386: PLUS
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: LD_VAR 0 1
56400: PUSH
56401: LD_INT 4
56403: PLUS
56404: PUSH
56405: LD_VAR 0 2
56409: PUSH
56410: LD_INT 4
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_VAR 0 2
56427: PUSH
56428: LD_INT 3
56430: MINUS
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_INT 4
56447: MINUS
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: LD_INT 4
56456: MINUS
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: ST_TO_ADDR
// end ; 5 :
56473: GO 56613
56475: LD_INT 5
56477: DOUBLE
56478: EQUAL
56479: IFTRUE 56483
56481: GO 56612
56483: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56484: LD_ADDR_VAR 0 5
56488: PUSH
56489: LD_VAR 0 1
56493: PUSH
56494: LD_INT 4
56496: MINUS
56497: PUSH
56498: LD_VAR 0 2
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: LD_VAR 0 2
56520: PUSH
56521: LD_INT 4
56523: MINUS
56524: PUSH
56525: LD_INT 3
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_INT 4
56540: PLUS
56541: PUSH
56542: LD_VAR 0 2
56546: PUSH
56547: LD_INT 4
56549: PLUS
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: PUSH
56559: LD_VAR 0 1
56563: PUSH
56564: LD_INT 3
56566: PLUS
56567: PUSH
56568: LD_VAR 0 2
56572: PUSH
56573: LD_INT 4
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_VAR 0 1
56585: PUSH
56586: LD_VAR 0 2
56590: PUSH
56591: LD_INT 3
56593: PLUS
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// end ; end ;
56610: GO 56613
56612: POP
// result := list ;
56613: LD_ADDR_VAR 0 4
56617: PUSH
56618: LD_VAR 0 5
56622: ST_TO_ADDR
// end ;
56623: LD_VAR 0 4
56627: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56628: LD_INT 0
56630: PPUSH
56631: PPUSH
56632: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56633: LD_VAR 0 1
56637: NOT
56638: PUSH
56639: LD_VAR 0 2
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 3
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: IN
56662: NOT
56663: OR
56664: IFFALSE 56668
// exit ;
56666: GO 56760
// tmp := [ ] ;
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: EMPTY
56674: ST_TO_ADDR
// for i in units do
56675: LD_ADDR_VAR 0 4
56679: PUSH
56680: LD_VAR 0 1
56684: PUSH
56685: FOR_IN
56686: IFFALSE 56729
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56688: LD_ADDR_VAR 0 5
56692: PUSH
56693: LD_VAR 0 5
56697: PPUSH
56698: LD_VAR 0 5
56702: PUSH
56703: LD_INT 1
56705: PLUS
56706: PPUSH
56707: LD_VAR 0 4
56711: PPUSH
56712: LD_VAR 0 2
56716: PPUSH
56717: CALL_OW 259
56721: PPUSH
56722: CALL_OW 2
56726: ST_TO_ADDR
56727: GO 56685
56729: POP
56730: POP
// if not tmp then
56731: LD_VAR 0 5
56735: NOT
56736: IFFALSE 56740
// exit ;
56738: GO 56760
// result := SortListByListDesc ( units , tmp ) ;
56740: LD_ADDR_VAR 0 3
56744: PUSH
56745: LD_VAR 0 1
56749: PPUSH
56750: LD_VAR 0 5
56754: PPUSH
56755: CALL_OW 77
56759: ST_TO_ADDR
// end ;
56760: LD_VAR 0 3
56764: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56765: LD_INT 0
56767: PPUSH
56768: PPUSH
56769: PPUSH
// result := false ;
56770: LD_ADDR_VAR 0 3
56774: PUSH
56775: LD_INT 0
56777: ST_TO_ADDR
// x := GetX ( building ) ;
56778: LD_ADDR_VAR 0 4
56782: PUSH
56783: LD_VAR 0 2
56787: PPUSH
56788: CALL_OW 250
56792: ST_TO_ADDR
// y := GetY ( building ) ;
56793: LD_ADDR_VAR 0 5
56797: PUSH
56798: LD_VAR 0 2
56802: PPUSH
56803: CALL_OW 251
56807: ST_TO_ADDR
// if not building or not x or not y then
56808: LD_VAR 0 2
56812: NOT
56813: PUSH
56814: LD_VAR 0 4
56818: NOT
56819: OR
56820: PUSH
56821: LD_VAR 0 5
56825: NOT
56826: OR
56827: IFFALSE 56831
// exit ;
56829: GO 56923
// if GetTaskList ( unit ) then
56831: LD_VAR 0 1
56835: PPUSH
56836: CALL_OW 437
56840: IFFALSE 56923
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56842: LD_STRING e
56844: PUSH
56845: LD_VAR 0 1
56849: PPUSH
56850: CALL_OW 437
56854: PUSH
56855: LD_INT 1
56857: ARRAY
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: EQUAL
56863: PUSH
56864: LD_VAR 0 4
56868: PUSH
56869: LD_VAR 0 1
56873: PPUSH
56874: CALL_OW 437
56878: PUSH
56879: LD_INT 1
56881: ARRAY
56882: PUSH
56883: LD_INT 2
56885: ARRAY
56886: EQUAL
56887: AND
56888: PUSH
56889: LD_VAR 0 5
56893: PUSH
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 437
56903: PUSH
56904: LD_INT 1
56906: ARRAY
56907: PUSH
56908: LD_INT 3
56910: ARRAY
56911: EQUAL
56912: AND
56913: IFFALSE 56923
// result := true end ;
56915: LD_ADDR_VAR 0 3
56919: PUSH
56920: LD_INT 1
56922: ST_TO_ADDR
// end ;
56923: LD_VAR 0 3
56927: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56928: LD_INT 0
56930: PPUSH
// result := false ;
56931: LD_ADDR_VAR 0 4
56935: PUSH
56936: LD_INT 0
56938: ST_TO_ADDR
// if GetTaskList ( unit ) then
56939: LD_VAR 0 1
56943: PPUSH
56944: CALL_OW 437
56948: IFFALSE 57031
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56950: LD_STRING M
56952: PUSH
56953: LD_VAR 0 1
56957: PPUSH
56958: CALL_OW 437
56962: PUSH
56963: LD_INT 1
56965: ARRAY
56966: PUSH
56967: LD_INT 1
56969: ARRAY
56970: EQUAL
56971: PUSH
56972: LD_VAR 0 2
56976: PUSH
56977: LD_VAR 0 1
56981: PPUSH
56982: CALL_OW 437
56986: PUSH
56987: LD_INT 1
56989: ARRAY
56990: PUSH
56991: LD_INT 2
56993: ARRAY
56994: EQUAL
56995: AND
56996: PUSH
56997: LD_VAR 0 3
57001: PUSH
57002: LD_VAR 0 1
57006: PPUSH
57007: CALL_OW 437
57011: PUSH
57012: LD_INT 1
57014: ARRAY
57015: PUSH
57016: LD_INT 3
57018: ARRAY
57019: EQUAL
57020: AND
57021: IFFALSE 57031
// result := true ;
57023: LD_ADDR_VAR 0 4
57027: PUSH
57028: LD_INT 1
57030: ST_TO_ADDR
// end ; end ;
57031: LD_VAR 0 4
57035: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57036: LD_INT 0
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
// if not unit or not area then
57042: LD_VAR 0 1
57046: NOT
57047: PUSH
57048: LD_VAR 0 2
57052: NOT
57053: OR
57054: IFFALSE 57058
// exit ;
57056: GO 57222
// tmp := AreaToList ( area , i ) ;
57058: LD_ADDR_VAR 0 6
57062: PUSH
57063: LD_VAR 0 2
57067: PPUSH
57068: LD_VAR 0 5
57072: PPUSH
57073: CALL_OW 517
57077: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57078: LD_ADDR_VAR 0 5
57082: PUSH
57083: DOUBLE
57084: LD_INT 1
57086: DEC
57087: ST_TO_ADDR
57088: LD_VAR 0 6
57092: PUSH
57093: LD_INT 1
57095: ARRAY
57096: PUSH
57097: FOR_TO
57098: IFFALSE 57220
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57100: LD_ADDR_VAR 0 7
57104: PUSH
57105: LD_VAR 0 6
57109: PUSH
57110: LD_INT 1
57112: ARRAY
57113: PUSH
57114: LD_VAR 0 5
57118: ARRAY
57119: PUSH
57120: LD_VAR 0 6
57124: PUSH
57125: LD_INT 2
57127: ARRAY
57128: PUSH
57129: LD_VAR 0 5
57133: ARRAY
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57139: LD_VAR 0 7
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PPUSH
57148: LD_VAR 0 7
57152: PUSH
57153: LD_INT 2
57155: ARRAY
57156: PPUSH
57157: CALL_OW 428
57161: PUSH
57162: LD_INT 0
57164: EQUAL
57165: IFFALSE 57218
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57167: LD_VAR 0 1
57171: PPUSH
57172: LD_VAR 0 7
57176: PUSH
57177: LD_INT 1
57179: ARRAY
57180: PPUSH
57181: LD_VAR 0 7
57185: PUSH
57186: LD_INT 2
57188: ARRAY
57189: PPUSH
57190: LD_VAR 0 3
57194: PPUSH
57195: CALL_OW 48
// result := IsPlaced ( unit ) ;
57199: LD_ADDR_VAR 0 4
57203: PUSH
57204: LD_VAR 0 1
57208: PPUSH
57209: CALL_OW 305
57213: ST_TO_ADDR
// exit ;
57214: POP
57215: POP
57216: GO 57222
// end ; end ;
57218: GO 57097
57220: POP
57221: POP
// end ;
57222: LD_VAR 0 4
57226: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57227: LD_INT 0
57229: PPUSH
57230: PPUSH
57231: PPUSH
// if not side or side > 8 then
57232: LD_VAR 0 1
57236: NOT
57237: PUSH
57238: LD_VAR 0 1
57242: PUSH
57243: LD_INT 8
57245: GREATER
57246: OR
57247: IFFALSE 57251
// exit ;
57249: GO 57438
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57251: LD_ADDR_VAR 0 4
57255: PUSH
57256: LD_INT 22
57258: PUSH
57259: LD_VAR 0 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 21
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PPUSH
57282: CALL_OW 69
57286: ST_TO_ADDR
// if not tmp then
57287: LD_VAR 0 4
57291: NOT
57292: IFFALSE 57296
// exit ;
57294: GO 57438
// enable_addtolog := true ;
57296: LD_ADDR_OWVAR 81
57300: PUSH
57301: LD_INT 1
57303: ST_TO_ADDR
// AddToLog ( [ ) ;
57304: LD_STRING [
57306: PPUSH
57307: CALL_OW 561
// for i in tmp do
57311: LD_ADDR_VAR 0 3
57315: PUSH
57316: LD_VAR 0 4
57320: PUSH
57321: FOR_IN
57322: IFFALSE 57429
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57324: LD_STRING [
57326: PUSH
57327: LD_VAR 0 3
57331: PPUSH
57332: CALL_OW 266
57336: STR
57337: PUSH
57338: LD_STRING , 
57340: STR
57341: PUSH
57342: LD_VAR 0 3
57346: PPUSH
57347: CALL_OW 250
57351: STR
57352: PUSH
57353: LD_STRING , 
57355: STR
57356: PUSH
57357: LD_VAR 0 3
57361: PPUSH
57362: CALL_OW 251
57366: STR
57367: PUSH
57368: LD_STRING , 
57370: STR
57371: PUSH
57372: LD_VAR 0 3
57376: PPUSH
57377: CALL_OW 254
57381: STR
57382: PUSH
57383: LD_STRING , 
57385: STR
57386: PUSH
57387: LD_VAR 0 3
57391: PPUSH
57392: LD_INT 1
57394: PPUSH
57395: CALL_OW 268
57399: STR
57400: PUSH
57401: LD_STRING , 
57403: STR
57404: PUSH
57405: LD_VAR 0 3
57409: PPUSH
57410: LD_INT 2
57412: PPUSH
57413: CALL_OW 268
57417: STR
57418: PUSH
57419: LD_STRING ],
57421: STR
57422: PPUSH
57423: CALL_OW 561
// end ;
57427: GO 57321
57429: POP
57430: POP
// AddToLog ( ]; ) ;
57431: LD_STRING ];
57433: PPUSH
57434: CALL_OW 561
// end ;
57438: LD_VAR 0 2
57442: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57443: LD_INT 0
57445: PPUSH
57446: PPUSH
57447: PPUSH
57448: PPUSH
57449: PPUSH
// if not area or not rate or not max then
57450: LD_VAR 0 1
57454: NOT
57455: PUSH
57456: LD_VAR 0 2
57460: NOT
57461: OR
57462: PUSH
57463: LD_VAR 0 4
57467: NOT
57468: OR
57469: IFFALSE 57473
// exit ;
57471: GO 57665
// while 1 do
57473: LD_INT 1
57475: IFFALSE 57665
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57477: LD_ADDR_VAR 0 9
57481: PUSH
57482: LD_VAR 0 1
57486: PPUSH
57487: LD_INT 1
57489: PPUSH
57490: CALL_OW 287
57494: PUSH
57495: LD_INT 10
57497: MUL
57498: ST_TO_ADDR
// r := rate / 10 ;
57499: LD_ADDR_VAR 0 7
57503: PUSH
57504: LD_VAR 0 2
57508: PUSH
57509: LD_INT 10
57511: DIVREAL
57512: ST_TO_ADDR
// time := 1 1$00 ;
57513: LD_ADDR_VAR 0 8
57517: PUSH
57518: LD_INT 2100
57520: ST_TO_ADDR
// if amount < min then
57521: LD_VAR 0 9
57525: PUSH
57526: LD_VAR 0 3
57530: LESS
57531: IFFALSE 57549
// r := r * 2 else
57533: LD_ADDR_VAR 0 7
57537: PUSH
57538: LD_VAR 0 7
57542: PUSH
57543: LD_INT 2
57545: MUL
57546: ST_TO_ADDR
57547: GO 57575
// if amount > max then
57549: LD_VAR 0 9
57553: PUSH
57554: LD_VAR 0 4
57558: GREATER
57559: IFFALSE 57575
// r := r / 2 ;
57561: LD_ADDR_VAR 0 7
57565: PUSH
57566: LD_VAR 0 7
57570: PUSH
57571: LD_INT 2
57573: DIVREAL
57574: ST_TO_ADDR
// time := time / r ;
57575: LD_ADDR_VAR 0 8
57579: PUSH
57580: LD_VAR 0 8
57584: PUSH
57585: LD_VAR 0 7
57589: DIVREAL
57590: ST_TO_ADDR
// if time < 0 then
57591: LD_VAR 0 8
57595: PUSH
57596: LD_INT 0
57598: LESS
57599: IFFALSE 57616
// time := time * - 1 ;
57601: LD_ADDR_VAR 0 8
57605: PUSH
57606: LD_VAR 0 8
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: MUL
57615: ST_TO_ADDR
// wait ( time ) ;
57616: LD_VAR 0 8
57620: PPUSH
57621: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57625: LD_INT 35
57627: PPUSH
57628: LD_INT 875
57630: PPUSH
57631: CALL_OW 12
57635: PPUSH
57636: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57640: LD_INT 1
57642: PPUSH
57643: LD_INT 5
57645: PPUSH
57646: CALL_OW 12
57650: PPUSH
57651: LD_VAR 0 1
57655: PPUSH
57656: LD_INT 1
57658: PPUSH
57659: CALL_OW 55
// end ;
57663: GO 57473
// end ;
57665: LD_VAR 0 5
57669: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57670: LD_INT 0
57672: PPUSH
57673: PPUSH
57674: PPUSH
57675: PPUSH
57676: PPUSH
57677: PPUSH
57678: PPUSH
57679: PPUSH
// if not turrets or not factories then
57680: LD_VAR 0 1
57684: NOT
57685: PUSH
57686: LD_VAR 0 2
57690: NOT
57691: OR
57692: IFFALSE 57696
// exit ;
57694: GO 58003
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57696: LD_ADDR_VAR 0 10
57700: PUSH
57701: LD_INT 5
57703: PUSH
57704: LD_INT 6
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 5
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 24
57738: PUSH
57739: LD_INT 25
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 23
57748: PUSH
57749: LD_INT 27
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 42
57762: PUSH
57763: LD_INT 43
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 44
57772: PUSH
57773: LD_INT 46
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 45
57782: PUSH
57783: LD_INT 47
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// result := [ ] ;
57800: LD_ADDR_VAR 0 3
57804: PUSH
57805: EMPTY
57806: ST_TO_ADDR
// for i in turrets do
57807: LD_ADDR_VAR 0 4
57811: PUSH
57812: LD_VAR 0 1
57816: PUSH
57817: FOR_IN
57818: IFFALSE 58001
// begin nat := GetNation ( i ) ;
57820: LD_ADDR_VAR 0 7
57824: PUSH
57825: LD_VAR 0 4
57829: PPUSH
57830: CALL_OW 248
57834: ST_TO_ADDR
// weapon := 0 ;
57835: LD_ADDR_VAR 0 8
57839: PUSH
57840: LD_INT 0
57842: ST_TO_ADDR
// if not nat then
57843: LD_VAR 0 7
57847: NOT
57848: IFFALSE 57852
// continue ;
57850: GO 57817
// for j in list [ nat ] do
57852: LD_ADDR_VAR 0 5
57856: PUSH
57857: LD_VAR 0 10
57861: PUSH
57862: LD_VAR 0 7
57866: ARRAY
57867: PUSH
57868: FOR_IN
57869: IFFALSE 57910
// if GetBWeapon ( i ) = j [ 1 ] then
57871: LD_VAR 0 4
57875: PPUSH
57876: CALL_OW 269
57880: PUSH
57881: LD_VAR 0 5
57885: PUSH
57886: LD_INT 1
57888: ARRAY
57889: EQUAL
57890: IFFALSE 57908
// begin weapon := j [ 2 ] ;
57892: LD_ADDR_VAR 0 8
57896: PUSH
57897: LD_VAR 0 5
57901: PUSH
57902: LD_INT 2
57904: ARRAY
57905: ST_TO_ADDR
// break ;
57906: GO 57910
// end ;
57908: GO 57868
57910: POP
57911: POP
// if not weapon then
57912: LD_VAR 0 8
57916: NOT
57917: IFFALSE 57921
// continue ;
57919: GO 57817
// for k in factories do
57921: LD_ADDR_VAR 0 6
57925: PUSH
57926: LD_VAR 0 2
57930: PUSH
57931: FOR_IN
57932: IFFALSE 57997
// begin weapons := AvailableWeaponList ( k ) ;
57934: LD_ADDR_VAR 0 9
57938: PUSH
57939: LD_VAR 0 6
57943: PPUSH
57944: CALL_OW 478
57948: ST_TO_ADDR
// if not weapons then
57949: LD_VAR 0 9
57953: NOT
57954: IFFALSE 57958
// continue ;
57956: GO 57931
// if weapon in weapons then
57958: LD_VAR 0 8
57962: PUSH
57963: LD_VAR 0 9
57967: IN
57968: IFFALSE 57995
// begin result := [ i , weapon ] ;
57970: LD_ADDR_VAR 0 3
57974: PUSH
57975: LD_VAR 0 4
57979: PUSH
57980: LD_VAR 0 8
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// exit ;
57989: POP
57990: POP
57991: POP
57992: POP
57993: GO 58003
// end ; end ;
57995: GO 57931
57997: POP
57998: POP
// end ;
57999: GO 57817
58001: POP
58002: POP
// end ;
58003: LD_VAR 0 3
58007: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58008: LD_INT 0
58010: PPUSH
// if not side or side > 8 then
58011: LD_VAR 0 3
58015: NOT
58016: PUSH
58017: LD_VAR 0 3
58021: PUSH
58022: LD_INT 8
58024: GREATER
58025: OR
58026: IFFALSE 58030
// exit ;
58028: GO 58089
// if not range then
58030: LD_VAR 0 4
58034: NOT
58035: IFFALSE 58046
// range := - 12 ;
58037: LD_ADDR_VAR 0 4
58041: PUSH
58042: LD_INT 12
58044: NEG
58045: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58046: LD_VAR 0 1
58050: PPUSH
58051: LD_VAR 0 2
58055: PPUSH
58056: LD_VAR 0 3
58060: PPUSH
58061: LD_VAR 0 4
58065: PPUSH
58066: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_VAR 0 3
58084: PPUSH
58085: CALL_OW 331
// end ;
58089: LD_VAR 0 5
58093: RET
// export function Video ( mode ) ; begin
58094: LD_INT 0
58096: PPUSH
// ingame_video = mode ;
58097: LD_ADDR_OWVAR 52
58101: PUSH
58102: LD_VAR 0 1
58106: ST_TO_ADDR
// interface_hidden = mode ;
58107: LD_ADDR_OWVAR 54
58111: PUSH
58112: LD_VAR 0 1
58116: ST_TO_ADDR
// end ;
58117: LD_VAR 0 2
58121: RET
// export function Join ( array , element ) ; begin
58122: LD_INT 0
58124: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58125: LD_ADDR_VAR 0 3
58129: PUSH
58130: LD_VAR 0 1
58134: PPUSH
58135: LD_VAR 0 1
58139: PUSH
58140: LD_INT 1
58142: PLUS
58143: PPUSH
58144: LD_VAR 0 2
58148: PPUSH
58149: CALL_OW 1
58153: ST_TO_ADDR
// end ;
58154: LD_VAR 0 3
58158: RET
// export function JoinUnion ( array , element ) ; begin
58159: LD_INT 0
58161: PPUSH
// result := array union element ;
58162: LD_ADDR_VAR 0 3
58166: PUSH
58167: LD_VAR 0 1
58171: PUSH
58172: LD_VAR 0 2
58176: UNION
58177: ST_TO_ADDR
// end ;
58178: LD_VAR 0 3
58182: RET
// export function GetBehemoths ( side ) ; begin
58183: LD_INT 0
58185: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58186: LD_ADDR_VAR 0 2
58190: PUSH
58191: LD_INT 22
58193: PUSH
58194: LD_VAR 0 1
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 31
58205: PUSH
58206: LD_INT 25
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PPUSH
58217: CALL_OW 69
58221: ST_TO_ADDR
// end ;
58222: LD_VAR 0 2
58226: RET
// export function Shuffle ( array ) ; var i , index ; begin
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
58231: PPUSH
// result := [ ] ;
58232: LD_ADDR_VAR 0 2
58236: PUSH
58237: EMPTY
58238: ST_TO_ADDR
// if not array then
58239: LD_VAR 0 1
58243: NOT
58244: IFFALSE 58248
// exit ;
58246: GO 58347
// Randomize ;
58248: CALL_OW 10
// for i = array downto 1 do
58252: LD_ADDR_VAR 0 3
58256: PUSH
58257: DOUBLE
58258: LD_VAR 0 1
58262: INC
58263: ST_TO_ADDR
58264: LD_INT 1
58266: PUSH
58267: FOR_DOWNTO
58268: IFFALSE 58345
// begin index := rand ( 1 , array ) ;
58270: LD_ADDR_VAR 0 4
58274: PUSH
58275: LD_INT 1
58277: PPUSH
58278: LD_VAR 0 1
58282: PPUSH
58283: CALL_OW 12
58287: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58288: LD_ADDR_VAR 0 2
58292: PUSH
58293: LD_VAR 0 2
58297: PPUSH
58298: LD_VAR 0 2
58302: PUSH
58303: LD_INT 1
58305: PLUS
58306: PPUSH
58307: LD_VAR 0 1
58311: PUSH
58312: LD_VAR 0 4
58316: ARRAY
58317: PPUSH
58318: CALL_OW 2
58322: ST_TO_ADDR
// array := Delete ( array , index ) ;
58323: LD_ADDR_VAR 0 1
58327: PUSH
58328: LD_VAR 0 1
58332: PPUSH
58333: LD_VAR 0 4
58337: PPUSH
58338: CALL_OW 3
58342: ST_TO_ADDR
// end ;
58343: GO 58267
58345: POP
58346: POP
// end ;
58347: LD_VAR 0 2
58351: RET
// export function GetBaseMaterials ( base ) ; begin
58352: LD_INT 0
58354: PPUSH
// result := [ 0 , 0 , 0 ] ;
58355: LD_ADDR_VAR 0 2
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: LIST
58373: ST_TO_ADDR
// if not base then
58374: LD_VAR 0 1
58378: NOT
58379: IFFALSE 58383
// exit ;
58381: GO 58432
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58383: LD_ADDR_VAR 0 2
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: LD_INT 1
58395: PPUSH
58396: CALL_OW 275
58400: PUSH
58401: LD_VAR 0 1
58405: PPUSH
58406: LD_INT 2
58408: PPUSH
58409: CALL_OW 275
58413: PUSH
58414: LD_VAR 0 1
58418: PPUSH
58419: LD_INT 3
58421: PPUSH
58422: CALL_OW 275
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// end ;
58432: LD_VAR 0 2
58436: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58437: LD_INT 0
58439: PPUSH
58440: PPUSH
// result := array ;
58441: LD_ADDR_VAR 0 3
58445: PUSH
58446: LD_VAR 0 1
58450: ST_TO_ADDR
// if size > 0 then
58451: LD_VAR 0 2
58455: PUSH
58456: LD_INT 0
58458: GREATER
58459: IFFALSE 58505
// for i := array downto size do
58461: LD_ADDR_VAR 0 4
58465: PUSH
58466: DOUBLE
58467: LD_VAR 0 1
58471: INC
58472: ST_TO_ADDR
58473: LD_VAR 0 2
58477: PUSH
58478: FOR_DOWNTO
58479: IFFALSE 58503
// result := Delete ( result , result ) ;
58481: LD_ADDR_VAR 0 3
58485: PUSH
58486: LD_VAR 0 3
58490: PPUSH
58491: LD_VAR 0 3
58495: PPUSH
58496: CALL_OW 3
58500: ST_TO_ADDR
58501: GO 58478
58503: POP
58504: POP
// end ;
58505: LD_VAR 0 3
58509: RET
// export function ComExit ( unit ) ; var tmp ; begin
58510: LD_INT 0
58512: PPUSH
58513: PPUSH
// if not IsInUnit ( unit ) then
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 310
58523: NOT
58524: IFFALSE 58528
// exit ;
58526: GO 58588
// tmp := IsInUnit ( unit ) ;
58528: LD_ADDR_VAR 0 3
58532: PUSH
58533: LD_VAR 0 1
58537: PPUSH
58538: CALL_OW 310
58542: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58543: LD_VAR 0 3
58547: PPUSH
58548: CALL_OW 247
58552: PUSH
58553: LD_INT 2
58555: EQUAL
58556: IFFALSE 58569
// ComExitVehicle ( unit ) else
58558: LD_VAR 0 1
58562: PPUSH
58563: CALL_OW 121
58567: GO 58578
// ComExitBuilding ( unit ) ;
58569: LD_VAR 0 1
58573: PPUSH
58574: CALL_OW 122
// result := tmp ;
58578: LD_ADDR_VAR 0 2
58582: PUSH
58583: LD_VAR 0 3
58587: ST_TO_ADDR
// end ;
58588: LD_VAR 0 2
58592: RET
// export function ComExitAll ( units ) ; var i ; begin
58593: LD_INT 0
58595: PPUSH
58596: PPUSH
// if not units then
58597: LD_VAR 0 1
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 58632
// for i in units do
58606: LD_ADDR_VAR 0 3
58610: PUSH
58611: LD_VAR 0 1
58615: PUSH
58616: FOR_IN
58617: IFFALSE 58630
// ComExit ( i ) ;
58619: LD_VAR 0 3
58623: PPUSH
58624: CALL 58510 0 1
58628: GO 58616
58630: POP
58631: POP
// end ;
58632: LD_VAR 0 2
58636: RET
// export function ResetHc ; begin
58637: LD_INT 0
58639: PPUSH
// InitHc ;
58640: CALL_OW 19
// hc_importance := 0 ;
58644: LD_ADDR_OWVAR 32
58648: PUSH
58649: LD_INT 0
58651: ST_TO_ADDR
// end ;
58652: LD_VAR 0 1
58656: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58657: LD_INT 0
58659: PPUSH
58660: PPUSH
58661: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58662: LD_ADDR_VAR 0 6
58666: PUSH
58667: LD_VAR 0 1
58671: PUSH
58672: LD_VAR 0 3
58676: PLUS
58677: PUSH
58678: LD_INT 2
58680: DIV
58681: ST_TO_ADDR
// if _x < 0 then
58682: LD_VAR 0 6
58686: PUSH
58687: LD_INT 0
58689: LESS
58690: IFFALSE 58707
// _x := _x * - 1 ;
58692: LD_ADDR_VAR 0 6
58696: PUSH
58697: LD_VAR 0 6
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: MUL
58706: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58707: LD_ADDR_VAR 0 7
58711: PUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_VAR 0 4
58721: PLUS
58722: PUSH
58723: LD_INT 2
58725: DIV
58726: ST_TO_ADDR
// if _y < 0 then
58727: LD_VAR 0 7
58731: PUSH
58732: LD_INT 0
58734: LESS
58735: IFFALSE 58752
// _y := _y * - 1 ;
58737: LD_ADDR_VAR 0 7
58741: PUSH
58742: LD_VAR 0 7
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: MUL
58751: ST_TO_ADDR
// result := [ _x , _y ] ;
58752: LD_ADDR_VAR 0 5
58756: PUSH
58757: LD_VAR 0 6
58761: PUSH
58762: LD_VAR 0 7
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// end ;
58771: LD_VAR 0 5
58775: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58776: LD_INT 0
58778: PPUSH
58779: PPUSH
58780: PPUSH
58781: PPUSH
// task := GetTaskList ( unit ) ;
58782: LD_ADDR_VAR 0 7
58786: PUSH
58787: LD_VAR 0 1
58791: PPUSH
58792: CALL_OW 437
58796: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58797: LD_VAR 0 7
58801: NOT
58802: PUSH
58803: LD_VAR 0 1
58807: PPUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: CALL_OW 308
58817: NOT
58818: AND
58819: IFFALSE 58823
// exit ;
58821: GO 58941
// if IsInArea ( unit , area ) then
58823: LD_VAR 0 1
58827: PPUSH
58828: LD_VAR 0 2
58832: PPUSH
58833: CALL_OW 308
58837: IFFALSE 58855
// begin ComMoveToArea ( unit , goAway ) ;
58839: LD_VAR 0 1
58843: PPUSH
58844: LD_VAR 0 3
58848: PPUSH
58849: CALL_OW 113
// exit ;
58853: GO 58941
// end ; if task [ 1 ] [ 1 ] <> M then
58855: LD_VAR 0 7
58859: PUSH
58860: LD_INT 1
58862: ARRAY
58863: PUSH
58864: LD_INT 1
58866: ARRAY
58867: PUSH
58868: LD_STRING M
58870: NONEQUAL
58871: IFFALSE 58875
// exit ;
58873: GO 58941
// x := task [ 1 ] [ 2 ] ;
58875: LD_ADDR_VAR 0 5
58879: PUSH
58880: LD_VAR 0 7
58884: PUSH
58885: LD_INT 1
58887: ARRAY
58888: PUSH
58889: LD_INT 2
58891: ARRAY
58892: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58893: LD_ADDR_VAR 0 6
58897: PUSH
58898: LD_VAR 0 7
58902: PUSH
58903: LD_INT 1
58905: ARRAY
58906: PUSH
58907: LD_INT 3
58909: ARRAY
58910: ST_TO_ADDR
// if InArea ( x , y , area ) then
58911: LD_VAR 0 5
58915: PPUSH
58916: LD_VAR 0 6
58920: PPUSH
58921: LD_VAR 0 2
58925: PPUSH
58926: CALL_OW 309
58930: IFFALSE 58941
// ComStop ( unit ) ;
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 141
// end ;
58941: LD_VAR 0 4
58945: RET
// export function Abs ( value ) ; begin
58946: LD_INT 0
58948: PPUSH
// result := value ;
58949: LD_ADDR_VAR 0 2
58953: PUSH
58954: LD_VAR 0 1
58958: ST_TO_ADDR
// if value < 0 then
58959: LD_VAR 0 1
58963: PUSH
58964: LD_INT 0
58966: LESS
58967: IFFALSE 58984
// result := value * - 1 ;
58969: LD_ADDR_VAR 0 2
58973: PUSH
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: MUL
58983: ST_TO_ADDR
// end ;
58984: LD_VAR 0 2
58988: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58989: LD_INT 0
58991: PPUSH
58992: PPUSH
58993: PPUSH
58994: PPUSH
58995: PPUSH
58996: PPUSH
58997: PPUSH
58998: PPUSH
// if not unit or not building then
58999: LD_VAR 0 1
59003: NOT
59004: PUSH
59005: LD_VAR 0 2
59009: NOT
59010: OR
59011: IFFALSE 59015
// exit ;
59013: GO 59241
// x := GetX ( building ) ;
59015: LD_ADDR_VAR 0 4
59019: PUSH
59020: LD_VAR 0 2
59024: PPUSH
59025: CALL_OW 250
59029: ST_TO_ADDR
// y := GetY ( building ) ;
59030: LD_ADDR_VAR 0 6
59034: PUSH
59035: LD_VAR 0 2
59039: PPUSH
59040: CALL_OW 251
59044: ST_TO_ADDR
// d := GetDir ( building ) ;
59045: LD_ADDR_VAR 0 8
59049: PUSH
59050: LD_VAR 0 2
59054: PPUSH
59055: CALL_OW 254
59059: ST_TO_ADDR
// r := 4 ;
59060: LD_ADDR_VAR 0 9
59064: PUSH
59065: LD_INT 4
59067: ST_TO_ADDR
// for i := 1 to 5 do
59068: LD_ADDR_VAR 0 10
59072: PUSH
59073: DOUBLE
59074: LD_INT 1
59076: DEC
59077: ST_TO_ADDR
59078: LD_INT 5
59080: PUSH
59081: FOR_TO
59082: IFFALSE 59239
// begin _x := ShiftX ( x , d , r + i ) ;
59084: LD_ADDR_VAR 0 5
59088: PUSH
59089: LD_VAR 0 4
59093: PPUSH
59094: LD_VAR 0 8
59098: PPUSH
59099: LD_VAR 0 9
59103: PUSH
59104: LD_VAR 0 10
59108: PLUS
59109: PPUSH
59110: CALL_OW 272
59114: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59115: LD_ADDR_VAR 0 7
59119: PUSH
59120: LD_VAR 0 6
59124: PPUSH
59125: LD_VAR 0 8
59129: PPUSH
59130: LD_VAR 0 9
59134: PUSH
59135: LD_VAR 0 10
59139: PLUS
59140: PPUSH
59141: CALL_OW 273
59145: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59146: LD_VAR 0 5
59150: PPUSH
59151: LD_VAR 0 7
59155: PPUSH
59156: CALL_OW 488
59160: PUSH
59161: LD_VAR 0 5
59165: PPUSH
59166: LD_VAR 0 7
59170: PPUSH
59171: CALL_OW 428
59175: PPUSH
59176: CALL_OW 247
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: IN
59191: NOT
59192: AND
59193: IFFALSE 59237
// begin ComMoveXY ( unit , _x , _y ) ;
59195: LD_VAR 0 1
59199: PPUSH
59200: LD_VAR 0 5
59204: PPUSH
59205: LD_VAR 0 7
59209: PPUSH
59210: CALL_OW 111
// result := [ _x , _y ] ;
59214: LD_ADDR_VAR 0 3
59218: PUSH
59219: LD_VAR 0 5
59223: PUSH
59224: LD_VAR 0 7
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: ST_TO_ADDR
// exit ;
59233: POP
59234: POP
59235: GO 59241
// end ; end ;
59237: GO 59081
59239: POP
59240: POP
// end ;
59241: LD_VAR 0 3
59245: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
59250: PPUSH
// result := 0 ;
59251: LD_ADDR_VAR 0 3
59255: PUSH
59256: LD_INT 0
59258: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59259: LD_VAR 0 1
59263: PUSH
59264: LD_INT 0
59266: LESS
59267: PUSH
59268: LD_VAR 0 1
59272: PUSH
59273: LD_INT 8
59275: GREATER
59276: OR
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_INT 0
59285: LESS
59286: OR
59287: PUSH
59288: LD_VAR 0 2
59292: PUSH
59293: LD_INT 8
59295: GREATER
59296: OR
59297: IFFALSE 59301
// exit ;
59299: GO 59376
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59301: LD_ADDR_VAR 0 4
59305: PUSH
59306: LD_INT 22
59308: PUSH
59309: LD_VAR 0 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PPUSH
59318: CALL_OW 69
59322: PUSH
59323: FOR_IN
59324: IFFALSE 59374
// begin un := UnitShoot ( i ) ;
59326: LD_ADDR_VAR 0 5
59330: PUSH
59331: LD_VAR 0 4
59335: PPUSH
59336: CALL_OW 504
59340: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59341: LD_VAR 0 5
59345: PPUSH
59346: CALL_OW 255
59350: PUSH
59351: LD_VAR 0 1
59355: EQUAL
59356: IFFALSE 59372
// begin result := un ;
59358: LD_ADDR_VAR 0 3
59362: PUSH
59363: LD_VAR 0 5
59367: ST_TO_ADDR
// exit ;
59368: POP
59369: POP
59370: GO 59376
// end ; end ;
59372: GO 59323
59374: POP
59375: POP
// end ;
59376: LD_VAR 0 3
59380: RET
// export function GetCargoBay ( units ) ; begin
59381: LD_INT 0
59383: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59384: LD_ADDR_VAR 0 2
59388: PUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: LD_INT 2
59396: PUSH
59397: LD_INT 34
59399: PUSH
59400: LD_INT 12
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 34
59409: PUSH
59410: LD_INT 51
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 34
59419: PUSH
59420: LD_INT 32
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 34
59429: PUSH
59430: LD_EXP 91
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: PPUSH
59446: CALL_OW 72
59450: ST_TO_ADDR
// end ; end_of_file
59451: LD_VAR 0 2
59455: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59456: LD_VAR 0 1
59460: PPUSH
59461: LD_VAR 0 2
59465: PPUSH
59466: LD_VAR 0 3
59470: PPUSH
59471: LD_VAR 0 4
59475: PPUSH
59476: LD_VAR 0 5
59480: PPUSH
59481: LD_VAR 0 6
59485: PPUSH
59486: CALL 4290 0 6
// end ;
59490: PPOPN 6
59492: END
