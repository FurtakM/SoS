// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 51 0 0
// PrepareAmericanBase ;
  31: CALL 1438 0 0
// PrepareHeikeGroup ;
  35: CALL 790 0 0
// FogOff ( 1 ) ;
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 344
// PrepareArabian ;
  46: CALL 1686 0 0
// end ;
  50: END
// export Heike , Omar , Schulz , Abdul , Olaf , Kaia ; export Kurt , Hans , Ali , Shariff , Gensher , Farmer ; export scientists ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon ; function InitVariables ; begin
  51: LD_INT 0
  53: PPUSH
// foundPoints := 0 ;
  54: LD_ADDR_EXP 14
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// goWithHeike := false ;
  62: LD_ADDR_EXP 15
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// baseSpotted := false ;
  70: LD_ADDR_EXP 16
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// heikeNearbyEon := false ;
  78: LD_ADDR_EXP 17
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// scientists := [ ] ;
  86: LD_ADDR_EXP 13
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export function Action ; begin
  98: LD_INT 0
 100: PPUSH
// InGameOn ;
 101: CALL_OW 8
// CenterNowOnXY ( 51 , 85 ) ;
 105: LD_INT 51
 107: PPUSH
 108: LD_INT 85
 110: PPUSH
 111: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 115: LD_INT 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 5
 123: PPUSH
 124: LD_INT 32763
 126: NEG
 127: PPUSH
 128: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 132: LD_INT 1
 134: PPUSH
 135: LD_INT 1
 137: PPUSH
 138: LD_INT 5
 140: PPUSH
 141: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 145: LD_EXP 1
 149: PUSH
 150: LD_EXP 6
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: PPUSH
 159: LD_INT 53
 161: PPUSH
 162: LD_INT 88
 164: PPUSH
 165: CALL_OW 111
// wait ( 0 0$1 ) ;
 169: LD_INT 35
 171: PPUSH
 172: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 176: LD_EXP 6
 180: PPUSH
 181: LD_STRING DK-1
 183: PPUSH
 184: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 188: LD_EXP 1
 192: PPUSH
 193: LD_STRING DH-1
 195: PPUSH
 196: CALL_OW 88
// wait ( 0 0$2 ) ;
 200: LD_INT 70
 202: PPUSH
 203: CALL_OW 67
// PrepareArabian ;
 207: CALL 1686 0 0
// InGameOff ;
 211: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 215: LD_STRING O1
 217: PPUSH
 218: CALL_OW 337
// goWithHeike := true ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 1
 229: ST_TO_ADDR
// SaveForQuickRestart ;
 230: CALL_OW 22
// end ;
 234: LD_VAR 0 1
 238: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 239: LD_INT 2
 241: PPUSH
 242: LD_INT 5
 244: PPUSH
 245: CALL_OW 81
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 399
 255: GO 257
 257: DISABLE
 258: LD_INT 0
 260: PPUSH
// begin goWithHeike := false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// DialogueOn ;
 269: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 273: LD_EXP 1
 277: PPUSH
 278: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 282: LD_EXP 6
 286: PPUSH
 287: LD_STRING DK-betray-1
 289: PPUSH
 290: CALL_OW 88
// DialogueOff ;
 294: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 298: LD_EXP 6
 302: PPUSH
 303: LD_INT 90
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 313: LD_INT 35
 315: PPUSH
 316: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 320: LD_ADDR_VAR 0 1
 324: PUSH
 325: LD_INT 22
 327: PUSH
 328: LD_INT 5
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: LD_INT 25
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: LD_EXP 6
 358: DIFF
 359: PUSH
 360: FOR_IN
 361: IFFALSE 379
// ComAttackUnit ( i , Heike ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_EXP 1
 372: PPUSH
 373: CALL_OW 115
 377: GO 360
 379: POP
 380: POP
// until IsDead ( Heike ) ;
 381: LD_EXP 1
 385: PPUSH
 386: CALL_OW 301
 390: IFFALSE 313
// YouLost ( Betray ) ;
 392: LD_STRING Betray
 394: PPUSH
 395: CALL_OW 104
// end ;
 399: PPOPN 1
 401: END
// every 0 0$1 trigger goWithHeike do
 402: LD_EXP 15
 406: IFFALSE 461
 408: GO 410
 410: DISABLE
// begin enable ;
 411: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 412: LD_EXP 1
 416: PPUSH
 417: LD_EXP 6
 421: PPUSH
 422: CALL_OW 296
 426: PUSH
 427: LD_INT 3
 429: GREATER
 430: IFFALSE 461
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 432: LD_EXP 6
 436: PPUSH
 437: LD_EXP 1
 441: PPUSH
 442: CALL_OW 250
 446: PPUSH
 447: LD_EXP 1
 451: PPUSH
 452: CALL_OW 251
 456: PPUSH
 457: CALL_OW 111
// end ;
 461: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 462: LD_INT 2
 464: PPUSH
 465: LD_INT 47
 467: PPUSH
 468: LD_INT 68
 470: PPUSH
 471: CALL_OW 293
 475: PUSH
 476: LD_EXP 16
 480: NOT
 481: AND
 482: IFFALSE 526
 484: GO 486
 486: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 487: LD_EXP 1
 491: PPUSH
 492: LD_STRING DH-spot-1
 494: PPUSH
 495: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 499: LD_INT 47
 501: PPUSH
 502: LD_INT 68
 504: PPUSH
 505: CALL_OW 428
 509: PPUSH
 510: CALL_OW 313
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: LD_STRING DR-spot-1
 521: PPUSH
 522: CALL_OW 88
// end ;
 526: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 527: LD_INT 2
 529: PPUSH
 530: LD_INT 93
 532: PPUSH
 533: LD_INT 89
 535: PPUSH
 536: CALL_OW 293
 540: PUSH
 541: LD_EXP 16
 545: NOT
 546: AND
 547: IFFALSE 591
 549: GO 551
 551: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_STRING DH-spot-1
 559: PPUSH
 560: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 564: LD_INT 93
 566: PPUSH
 567: LD_INT 89
 569: PPUSH
 570: CALL_OW 428
 574: PPUSH
 575: CALL_OW 313
 579: PUSH
 580: LD_INT 1
 582: ARRAY
 583: PPUSH
 584: LD_STRING DR-spot-2
 586: PPUSH
 587: CALL_OW 88
// end ;
 591: END
// every 0 0$2 trigger GetDistUnits ( Heike , eon ) > 40 do
 592: LD_EXP 1
 596: PPUSH
 597: LD_INT 14
 599: PPUSH
 600: CALL_OW 296
 604: PUSH
 605: LD_INT 40
 607: GREATER
 608: IFFALSE 625
 610: GO 612
 612: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
 613: LD_EXP 6
 617: PPUSH
 618: LD_STRING DK-idle-1
 620: PPUSH
 621: CALL_OW 88
// end ;
 625: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
 626: LD_INT 2
 628: PPUSH
 629: LD_INT 59
 631: PPUSH
 632: LD_INT 47
 634: PPUSH
 635: CALL_OW 293
 639: IFFALSE 789
 641: GO 643
 643: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
 644: LD_INT 59
 646: PPUSH
 647: LD_INT 47
 649: PPUSH
 650: LD_INT 2
 652: PPUSH
 653: LD_INT 10
 655: NEG
 656: PPUSH
 657: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
 661: LD_INT 59
 663: PPUSH
 664: LD_INT 47
 666: PPUSH
 667: CALL_OW 86
// goWithHeike := false ;
 671: LD_ADDR_EXP 15
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// baseSpotted := true ;
 679: LD_ADDR_EXP 16
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// InGameOn ;
 687: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
 691: LD_EXP 1
 695: PUSH
 696: LD_EXP 6
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PPUSH
 705: LD_INT 54
 707: PPUSH
 708: LD_INT 45
 710: PPUSH
 711: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
 715: LD_EXP 1
 719: PUSH
 720: LD_EXP 6
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: LD_INT 59
 731: PPUSH
 732: LD_INT 47
 734: PPUSH
 735: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
 739: LD_EXP 1
 743: PPUSH
 744: LD_STRING DH-base-1
 746: PPUSH
 747: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
 751: LD_EXP 6
 755: PPUSH
 756: LD_STRING DK-base-1
 758: PPUSH
 759: CALL_OW 88
// InGameOff ;
 763: CALL_OW 9
// foundPoints := foundPoints + 1 ;
 767: LD_ADDR_EXP 14
 771: PUSH
 772: LD_EXP 14
 776: PUSH
 777: LD_INT 1
 779: PLUS
 780: ST_TO_ADDR
// goWithHeike := true ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// end ; end_of_file
 789: END
// export function PrepareHeikeGroup ; begin
 790: LD_INT 0
 792: PPUSH
// uc_side := 2 ;
 793: LD_ADDR_OWVAR 20
 797: PUSH
 798: LD_INT 2
 800: ST_TO_ADDR
// uc_nation := 2 ;
 801: LD_ADDR_OWVAR 21
 805: PUSH
 806: LD_INT 2
 808: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 809: LD_ADDR_EXP 1
 813: PUSH
 814: LD_STRING Heike
 816: PPUSH
 817: CALL_OW 25
 821: ST_TO_ADDR
// uc_side := 5 ;
 822: LD_ADDR_OWVAR 20
 826: PUSH
 827: LD_INT 5
 829: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
 830: LD_ADDR_EXP 6
 834: PUSH
 835: LD_STRING Kaia
 837: PPUSH
 838: CALL_OW 25
 842: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 3
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
 858: LD_EXP 6
 862: PPUSH
 863: LD_INT 3
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end ;
 873: LD_VAR 0 1
 877: RET
// export function PrepareSheikGroup ; var un , i ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// uc_side := 5 ;
 883: LD_ADDR_OWVAR 20
 887: PUSH
 888: LD_INT 5
 890: ST_TO_ADDR
// uc_nation := 2 ;
 891: LD_ADDR_OWVAR 21
 895: PUSH
 896: LD_INT 2
 898: ST_TO_ADDR
// Ali := NewCharacter ( Ali ) ;
 899: LD_ADDR_EXP 9
 903: PUSH
 904: LD_STRING Ali
 906: PPUSH
 907: CALL_OW 25
 911: ST_TO_ADDR
// Gensher := NewCharacter ( Dietrich ) ;
 912: LD_ADDR_EXP 11
 916: PUSH
 917: LD_STRING Dietrich
 919: PPUSH
 920: CALL_OW 25
 924: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
 925: LD_ADDR_EXP 10
 929: PUSH
 930: LD_STRING Abdul
 932: PPUSH
 933: CALL_OW 25
 937: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 938: LD_ADDR_EXP 3
 942: PUSH
 943: LD_STRING Schulz
 945: PPUSH
 946: CALL_OW 25
 950: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
 951: LD_ADDR_EXP 12
 955: PUSH
 956: LD_STRING Farmer
 958: PPUSH
 959: CALL_OW 25
 963: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 964: LD_ADDR_EXP 2
 968: PUSH
 969: LD_STRING Omar
 971: PPUSH
 972: CALL_OW 25
 976: ST_TO_ADDR
// PlaceUnitXY ( Schulz , 101 , 53 , false ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 101
 984: PPUSH
 985: LD_INT 53
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: CALL_OW 48
// PlaceUnitXY ( Farmer , 99 , 50 , false ) ;
 995: LD_EXP 12
 999: PPUSH
1000: LD_INT 99
1002: PPUSH
1003: LD_INT 50
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 48
// ComTurnUnit ( Schulz , Farmer ) ;
1013: LD_EXP 3
1017: PPUSH
1018: LD_EXP 12
1022: PPUSH
1023: CALL_OW 119
// ComTurnUnit ( Farmer , Schulz ) ;
1027: LD_EXP 12
1031: PPUSH
1032: LD_EXP 3
1036: PPUSH
1037: CALL_OW 119
// PlaceUnitXY ( Gensher , 80 , 36 , false ) ;
1041: LD_EXP 11
1045: PPUSH
1046: LD_INT 80
1048: PPUSH
1049: LD_INT 36
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 48
// ComHold ( Gensher ) ;
1059: LD_EXP 11
1063: PPUSH
1064: CALL_OW 140
// PlaceUnitXY ( Ali , 85 , 37 , false ) ;
1068: LD_EXP 9
1072: PPUSH
1073: LD_INT 85
1075: PPUSH
1076: LD_INT 37
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
1086: LD_EXP 10
1090: PPUSH
1091: LD_INT 87
1093: PPUSH
1094: LD_INT 37
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
1104: LD_EXP 2
1108: PPUSH
1109: LD_INT 85
1111: PPUSH
1112: LD_INT 35
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 48
// ComTurnUnit ( Ali , Shariff ) ;
1122: LD_EXP 9
1126: PPUSH
1127: LD_EXP 10
1131: PPUSH
1132: CALL_OW 119
// ComTurnUnit ( Shariff , Ali ) ;
1136: LD_EXP 10
1140: PPUSH
1141: LD_EXP 9
1145: PPUSH
1146: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
1150: LD_EXP 2
1154: PPUSH
1155: LD_EXP 10
1159: PPUSH
1160: CALL_OW 119
// for i := 1 to 2 do
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: DOUBLE
1170: LD_INT 1
1172: DEC
1173: ST_TO_ADDR
1174: LD_INT 2
1176: PUSH
1177: FOR_TO
1178: IFFALSE 1264
// begin PrepareHuman ( false , 4 , 6 ) ;
1180: LD_INT 0
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: LD_INT 6
1188: PPUSH
1189: CALL_OW 380
// un := CreateHuman ;
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: CALL_OW 44
1202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
1203: LD_VAR 0 2
1207: PPUSH
1208: LD_INT 90
1210: PPUSH
1211: LD_INT 44
1213: PPUSH
1214: LD_INT 3
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
1224: LD_VAR 0 2
1228: PPUSH
1229: LD_INT 91
1231: PPUSH
1232: LD_INT 43
1234: PPUSH
1235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
1239: LD_ADDR_EXP 13
1243: PUSH
1244: LD_EXP 13
1248: PPUSH
1249: LD_INT 1
1251: PPUSH
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 2
1261: ST_TO_ADDR
// end ;
1262: GO 1177
1264: POP
1265: POP
// scientists := scientists diff 0 ;
1266: LD_ADDR_EXP 13
1270: PUSH
1271: LD_EXP 13
1275: PUSH
1276: LD_INT 0
1278: DIFF
1279: ST_TO_ADDR
// end ;
1280: LD_VAR 0 1
1284: RET
// export function PrepareKurtGroup ; var i ; begin
1285: LD_INT 0
1287: PPUSH
1288: PPUSH
// uc_side := 5 ;
1289: LD_ADDR_OWVAR 20
1293: PUSH
1294: LD_INT 5
1296: ST_TO_ADDR
// uc_nation := 2 ;
1297: LD_ADDR_OWVAR 21
1301: PUSH
1302: LD_INT 2
1304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
1305: LD_ADDR_EXP 7
1309: PUSH
1310: LD_STRING Kurt
1312: PPUSH
1313: CALL_OW 25
1317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1318: LD_ADDR_EXP 5
1322: PUSH
1323: LD_STRING Olaf
1325: PPUSH
1326: CALL_OW 25
1330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
1331: LD_ADDR_EXP 8
1335: PUSH
1336: LD_STRING Hans
1338: PPUSH
1339: CALL_OW 25
1343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
1344: LD_ADDR_VAR 0 2
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_EXP 8
1358: PUSH
1359: LD_EXP 5
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: PUSH
1369: FOR_IN
1370: IFFALSE 1389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
1372: LD_VAR 0 2
1376: PPUSH
1377: LD_INT 10
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 49
1387: GO 1369
1389: POP
1390: POP
// ComTurnUnit ( Kurt , Hans ) ;
1391: LD_EXP 7
1395: PPUSH
1396: LD_EXP 8
1400: PPUSH
1401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_EXP 8
1414: PPUSH
1415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
1419: LD_EXP 8
1423: PPUSH
1424: LD_EXP 5
1428: PPUSH
1429: CALL_OW 119
// end ;
1433: LD_VAR 0 1
1437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
1438: LD_INT 0
1440: PPUSH
1441: PPUSH
1442: PPUSH
1443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PPUSH
1459: CALL_OW 69
1463: PUSH
1464: LD_INT 14
1466: DIFF
1467: PUSH
1468: FOR_IN
1469: IFFALSE 1549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
1471: LD_VAR 0 2
1475: PPUSH
1476: CALL_OW 266
1480: PUSH
1481: LD_INT 6
1483: PUSH
1484: LD_INT 31
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: IN
1491: IFFALSE 1515
// SetLives ( i , rand ( 500 , 600 ) ) else
1493: LD_VAR 0 2
1497: PPUSH
1498: LD_INT 500
1500: PPUSH
1501: LD_INT 600
1503: PPUSH
1504: CALL_OW 12
1508: PPUSH
1509: CALL_OW 234
1513: GO 1535
// SetLives ( i , rand ( 300 , 499 ) ) ;
1515: LD_VAR 0 2
1519: PPUSH
1520: LD_INT 300
1522: PPUSH
1523: LD_INT 499
1525: PPUSH
1526: CALL_OW 12
1530: PPUSH
1531: CALL_OW 234
// SetSide ( i , 5 ) ;
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_INT 5
1542: PPUSH
1543: CALL_OW 235
// end ;
1547: GO 1468
1549: POP
1550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: LD_INT 9
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL_OW 517
1566: ST_TO_ADDR
// uc_side := 4 ;
1567: LD_ADDR_OWVAR 20
1571: PUSH
1572: LD_INT 4
1574: ST_TO_ADDR
// uc_nation := 1 ;
1575: LD_ADDR_OWVAR 21
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_VAR 0 4
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PUSH
1602: FOR_TO
1603: IFFALSE 1679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
1605: LD_INT 0
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: LD_INT 4
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_VAR 0 2
1626: PUSH
1627: LD_INT 3
1629: MOD
1630: PUSH
1631: LD_INT 1
1633: PLUS
1634: ARRAY
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 380
// un := CreateHuman ;
1643: LD_ADDR_VAR 0 3
1647: PUSH
1648: CALL_OW 44
1652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 9
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: CALL_OW 49
// KillUnit ( un ) ;
1668: LD_VAR 0 3
1672: PPUSH
1673: CALL_OW 66
// end ;
1677: GO 1602
1679: POP
1680: POP
// end ;
1681: LD_VAR 0 1
1685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
1686: LD_INT 0
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
// uc_side := 5 ;
1695: LD_ADDR_OWVAR 20
1699: PUSH
1700: LD_INT 5
1702: ST_TO_ADDR
// uc_nation := 2 ;
1703: LD_ADDR_OWVAR 21
1707: PUSH
1708: LD_INT 2
1710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 ] ;
1711: LD_ADDR_VAR 0 6
1715: PUSH
1716: LD_INT 2
1718: PUSH
1719: LD_INT 4
1721: PUSH
1722: LD_INT 5
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: ST_TO_ADDR
// InitHc ;
1730: CALL_OW 19
// for i in area do
1734: LD_ADDR_VAR 0 2
1738: PUSH
1739: LD_VAR 0 6
1743: PUSH
1744: FOR_IN
1745: IFFALSE 1842
// begin tmp := AreaToList ( i , 0 ) ;
1747: LD_ADDR_VAR 0 5
1751: PUSH
1752: LD_VAR 0 2
1756: PPUSH
1757: LD_INT 0
1759: PPUSH
1760: CALL_OW 517
1764: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
1765: LD_ADDR_VAR 0 3
1769: PUSH
1770: DOUBLE
1771: LD_INT 1
1773: DEC
1774: ST_TO_ADDR
1775: LD_VAR 0 5
1779: PUSH
1780: LD_INT 1
1782: ARRAY
1783: PUSH
1784: FOR_TO
1785: IFFALSE 1838
// begin PrepareHuman ( false , 1 , 3 ) ;
1787: LD_INT 0
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL_OW 380
// un := CreateHuman ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: CALL_OW 44
1809: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
1810: LD_VAR 0 7
1814: PPUSH
1815: LD_VAR 0 2
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 49
// ComHold ( un ) ;
1827: LD_VAR 0 7
1831: PPUSH
1832: CALL_OW 140
// end ;
1836: GO 1784
1838: POP
1839: POP
// end ;
1840: GO 1744
1842: POP
1843: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1844: LD_ADDR_VAR 0 2
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: LD_INT 30
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: FOR_TO
1870: IFFALSE 1964
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
1872: LD_ADDR_VAR 0 4
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 31
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PPUSH
1887: CALL_OW 69
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: CALL_OW 380
// un := CreateHuman ;
1911: LD_ADDR_VAR 0 7
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
1921: LD_VAR 0 7
1925: PPUSH
1926: LD_VAR 0 4
1930: PPUSH
1931: CALL_OW 254
1935: PUSH
1936: LD_INT 3
1938: PLUS
1939: PUSH
1940: LD_INT 6
1942: MOD
1943: PPUSH
1944: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1948: LD_VAR 0 7
1952: PPUSH
1953: LD_VAR 0 4
1957: PPUSH
1958: CALL_OW 52
// end ;
1962: GO 1869
1964: POP
1965: POP
// PrepareKurtGroup ;
1966: CALL 1285 0 0
// PrepareSheikGroup ;
1970: CALL 878 0 0
// end ; end_of_file
1974: LD_VAR 0 1
1978: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
1979: LD_VAR 0 1
1983: PUSH
1984: LD_INT 2
1986: EQUAL
1987: PUSH
1988: LD_VAR 0 2
1992: PUSH
1993: LD_INT 5
1995: EQUAL
1996: AND
1997: IFFALSE 2015
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 5
2004: PPUSH
2005: LD_INT 2
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: CALL_OW 80
// end ;
2015: PPOPN 2
2017: END
// every 0 0$1 trigger scientists do var i ;
2018: LD_EXP 13
2022: IFFALSE 2230
2024: GO 2026
2026: DISABLE
2027: LD_INT 0
2029: PPUSH
// begin repeat for i in scientists do
2030: LD_ADDR_VAR 0 1
2034: PUSH
2035: LD_EXP 13
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2215
// begin wait ( 0 0$1 ) ;
2043: LD_INT 35
2045: PPUSH
2046: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
2050: LD_VAR 0 1
2054: PPUSH
2055: LD_INT 11
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_VAR 0 1
2069: PUSH
2070: LD_INT 2
2072: MOD
2073: PUSH
2074: LD_INT 1
2076: PLUS
2077: ARRAY
2078: PPUSH
2079: CALL_OW 308
2083: NOT
2084: IFFALSE 2119
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
2086: LD_VAR 0 1
2090: PPUSH
2091: LD_INT 11
2093: PUSH
2094: LD_INT 13
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_VAR 0 1
2105: PUSH
2106: LD_INT 2
2108: MOD
2109: PUSH
2110: LD_INT 1
2112: PLUS
2113: ARRAY
2114: PPUSH
2115: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
2119: LD_VAR 0 1
2123: PPUSH
2124: LD_INT 14
2126: PPUSH
2127: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
2131: LD_VAR 0 1
2135: PPUSH
2136: LD_INT 70
2138: PPUSH
2139: CALL_OW 202
// if rand ( 0 , 1 ) then
2143: LD_INT 0
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 12
2153: IFFALSE 2167
// AddComAnim ( i , 15 ) ;
2155: LD_VAR 0 1
2159: PPUSH
2160: LD_INT 15
2162: PPUSH
2163: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 35
2174: PPUSH
2175: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
2179: LD_VAR 0 1
2183: PPUSH
2184: LD_INT 12
2186: PPUSH
2187: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 93
2198: PPUSH
2199: LD_INT 40
2201: PPUSH
2202: CALL_OW 178
// wait ( 0 0$1 ) ;
2206: LD_INT 35
2208: PPUSH
2209: CALL_OW 67
// end ;
2213: GO 2040
2215: POP
2216: POP
// wait ( 0 0$10 ) ;
2217: LD_INT 350
2219: PPUSH
2220: CALL_OW 67
// until heikeNearbyEon ;
2224: LD_EXP 17
2228: IFFALSE 2030
// end ; end_of_file
2230: PPOPN 1
2232: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine ; every 0 0$1 do
2233: GO 2235
2235: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2236: LD_STRING initStreamRollete();
2238: PPUSH
2239: CALL_OW 559
// InitStreamMode ;
2243: CALL 2248 0 0
// end ;
2247: END
// function InitStreamMode ; begin
2248: LD_INT 0
2250: PPUSH
// streamModeActive := false ;
2251: LD_ADDR_EXP 18
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// sRocket := false ;
2259: LD_ADDR_EXP 21
2263: PUSH
2264: LD_INT 0
2266: ST_TO_ADDR
// sSpeed := false ;
2267: LD_ADDR_EXP 20
2271: PUSH
2272: LD_INT 0
2274: ST_TO_ADDR
// sEngine := false ;
2275: LD_ADDR_EXP 22
2279: PUSH
2280: LD_INT 0
2282: ST_TO_ADDR
// sSpec := false ;
2283: LD_ADDR_EXP 19
2287: PUSH
2288: LD_INT 0
2290: ST_TO_ADDR
// end ;
2291: LD_VAR 0 1
2295: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
2296: LD_VAR 0 2
2300: PUSH
2301: LD_INT 100
2303: EQUAL
2304: IFFALSE 2407
// begin if not StreamModeActive then
2306: LD_EXP 18
2310: NOT
2311: IFFALSE 2321
// StreamModeActive := true ;
2313: LD_ADDR_EXP 18
2317: PUSH
2318: LD_INT 1
2320: ST_TO_ADDR
// if p3 = 0 then
2321: LD_VAR 0 3
2325: PUSH
2326: LD_INT 0
2328: EQUAL
2329: IFFALSE 2335
// InitStreamMode ;
2331: CALL 2248 0 0
// if p3 = 1 then
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 1
2342: EQUAL
2343: IFFALSE 2353
// sRocket := true ;
2345: LD_ADDR_EXP 21
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// if p3 = 2 then
2353: LD_VAR 0 3
2357: PUSH
2358: LD_INT 2
2360: EQUAL
2361: IFFALSE 2371
// sSpeed := true ;
2363: LD_ADDR_EXP 20
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// if p3 = 3 then
2371: LD_VAR 0 3
2375: PUSH
2376: LD_INT 3
2378: EQUAL
2379: IFFALSE 2389
// sEngine := true ;
2381: LD_ADDR_EXP 22
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// if p3 = 4 then
2389: LD_VAR 0 3
2393: PUSH
2394: LD_INT 4
2396: EQUAL
2397: IFFALSE 2407
// sSpec := true ;
2399: LD_ADDR_EXP 19
2403: PUSH
2404: LD_INT 1
2406: ST_TO_ADDR
// end ; end ;
2407: PPOPN 6
2409: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i ;
2410: LD_EXP 18
2414: PUSH
2415: LD_EXP 21
2419: AND
2420: IFFALSE 2521
2422: GO 2424
2424: DISABLE
2425: LD_INT 0
2427: PPUSH
// begin enable ;
2428: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) do
2429: LD_ADDR_VAR 0 1
2433: PUSH
2434: LD_INT 22
2436: PUSH
2437: LD_OWVAR 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 2
2448: PUSH
2449: LD_INT 34
2451: PUSH
2452: LD_INT 7
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 34
2461: PUSH
2462: LD_INT 45
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 34
2471: PUSH
2472: LD_INT 28
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 34
2481: PUSH
2482: LD_INT 47
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: PPUSH
2500: CALL_OW 69
2504: PUSH
2505: FOR_IN
2506: IFFALSE 2519
// begin DestroyUnit ( i ) ;
2508: LD_VAR 0 1
2512: PPUSH
2513: CALL_OW 65
// end ;
2517: GO 2505
2519: POP
2520: POP
// end ;
2521: PPOPN 1
2523: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i ;
2524: LD_EXP 18
2528: PUSH
2529: LD_EXP 22
2533: AND
2534: IFFALSE 2595
2536: GO 2538
2538: DISABLE
2539: LD_INT 0
2541: PPUSH
// begin enable ;
2542: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) do
2543: LD_ADDR_VAR 0 1
2547: PUSH
2548: LD_INT 22
2550: PUSH
2551: LD_OWVAR 2
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 32
2562: PUSH
2563: LD_INT 3
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: PPUSH
2574: CALL_OW 69
2578: PUSH
2579: FOR_IN
2580: IFFALSE 2593
// begin DestroyUnit ( i ) ;
2582: LD_VAR 0 1
2586: PPUSH
2587: CALL_OW 65
// end ;
2591: GO 2579
2593: POP
2594: POP
// end ;
2595: PPOPN 1
2597: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
2598: LD_EXP 18
2602: PUSH
2603: LD_EXP 19
2607: AND
2608: IFFALSE 2701
2610: GO 2612
2612: DISABLE
2613: LD_INT 0
2615: PPUSH
// begin enable ;
2616: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
2617: LD_ADDR_VAR 0 1
2621: PUSH
2622: LD_INT 22
2624: PUSH
2625: LD_OWVAR 2
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 2
2636: PUSH
2637: LD_INT 25
2639: PUSH
2640: LD_INT 5
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 25
2649: PUSH
2650: LD_INT 9
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 25
2659: PUSH
2660: LD_INT 8
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PPUSH
2677: CALL_OW 69
2681: PUSH
2682: FOR_IN
2683: IFFALSE 2699
// begin SetClass ( i , 1 ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: CALL_OW 336
// end ;
2697: GO 2682
2699: POP
2700: POP
// end ;
2701: PPOPN 1
2703: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
2704: LD_EXP 18
2708: PUSH
2709: LD_EXP 20
2713: AND
2714: PUSH
2715: LD_OWVAR 65
2719: PUSH
2720: LD_INT 7
2722: LESS
2723: AND
2724: IFFALSE 2738
2726: GO 2728
2728: DISABLE
// begin enable ;
2729: ENABLE
// game_speed := 7 ;
2730: LD_ADDR_OWVAR 65
2734: PUSH
2735: LD_INT 7
2737: ST_TO_ADDR
// end ;
2738: END
