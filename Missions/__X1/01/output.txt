// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 36 0 0
// PrepareAmericanBase ;
  31: CALL 3030 0 0
// end ;
  35: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  36: LD_INT 0
  38: PPUSH
// foundPoints := 0 ;
  39: LD_ADDR_EXP 16
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// goWithHeike := false ;
  47: LD_ADDR_EXP 17
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// baseSpotted := false ;
  55: LD_ADDR_EXP 18
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// heikeNearbyEon := false ;
  63: LD_ADDR_EXP 19
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// meetingActive := true ;
  71: LD_ADDR_EXP 20
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// scientists := [ ] ;
  79: LD_ADDR_EXP 13
  83: PUSH
  84: EMPTY
  85: ST_TO_ADDR
// eonGuards := [ ] ;
  86: LD_ADDR_EXP 14
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// firstGroup := [ ] ;
  93: LD_ADDR_EXP 15
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// end ; end_of_file
 100: LD_VAR 0 1
 104: RET
// export function Action ; begin
 105: LD_INT 0
 107: PPUSH
// InGameOn ;
 108: CALL_OW 8
// wait ( 0 0$2 ) ;
 112: LD_INT 70
 114: PPUSH
 115: CALL_OW 67
// PrepareArabian ;
 119: CALL 3278 0 0
// PrepareKurtGroup ;
 123: CALL 2877 0 0
// PrepareSheikGroup ;
 127: CALL 2515 0 0
// PrepareHeikeGroup ;
 131: CALL 2427 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 135: LD_INT 51
 137: PPUSH
 138: LD_INT 85
 140: PPUSH
 141: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 145: LD_INT 1
 147: PPUSH
 148: LD_INT 1
 150: PPUSH
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 32763
 156: NEG
 157: PPUSH
 158: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 162: LD_INT 1
 164: PPUSH
 165: LD_INT 1
 167: PPUSH
 168: LD_INT 5
 170: PPUSH
 171: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 175: LD_EXP 1
 179: PUSH
 180: LD_EXP 5
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: LD_INT 53
 191: PPUSH
 192: LD_INT 88
 194: PPUSH
 195: CALL_OW 111
// wait ( 0 0$1 ) ;
 199: LD_INT 35
 201: PPUSH
 202: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 206: LD_EXP 5
 210: PPUSH
 211: LD_STRING DK-1
 213: PPUSH
 214: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 218: LD_EXP 1
 222: PPUSH
 223: LD_STRING DH-1
 225: PPUSH
 226: CALL_OW 88
// wait ( 0 0$2 ) ;
 230: LD_INT 70
 232: PPUSH
 233: CALL_OW 67
// PrepareArabian ;
 237: CALL 3278 0 0
// InGameOff ;
 241: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 245: LD_STRING O1
 247: PPUSH
 248: CALL_OW 337
// goWithHeike := true ;
 252: LD_ADDR_EXP 17
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// SaveForQuickRestart ;
 260: CALL_OW 22
// end ;
 264: LD_VAR 0 1
 268: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 269: LD_INT 2
 271: PPUSH
 272: LD_INT 5
 274: PPUSH
 275: CALL_OW 81
 279: PUSH
 280: LD_INT 2
 282: EQUAL
 283: IFFALSE 429
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin goWithHeike := false ;
 291: LD_ADDR_EXP 17
 295: PUSH
 296: LD_INT 0
 298: ST_TO_ADDR
// DialogueOn ;
 299: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 303: LD_EXP 1
 307: PPUSH
 308: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 312: LD_EXP 5
 316: PPUSH
 317: LD_STRING DK-betray-1
 319: PPUSH
 320: CALL_OW 88
// DialogueOff ;
 324: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 328: LD_EXP 5
 332: PPUSH
 333: LD_INT 90
 335: PPUSH
 336: LD_INT 46
 338: PPUSH
 339: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 343: LD_INT 35
 345: PPUSH
 346: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 350: LD_ADDR_VAR 0 1
 354: PUSH
 355: LD_INT 22
 357: PUSH
 358: LD_INT 5
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 25
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PPUSH
 379: CALL_OW 69
 383: PUSH
 384: LD_EXP 5
 388: DIFF
 389: PUSH
 390: FOR_IN
 391: IFFALSE 409
// ComAttackUnit ( i , Heike ) ;
 393: LD_VAR 0 1
 397: PPUSH
 398: LD_EXP 1
 402: PPUSH
 403: CALL_OW 115
 407: GO 390
 409: POP
 410: POP
// until IsDead ( Heike ) ;
 411: LD_EXP 1
 415: PPUSH
 416: CALL_OW 301
 420: IFFALSE 343
// YouLost ( Betray ) ;
 422: LD_STRING Betray
 424: PPUSH
 425: CALL_OW 104
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger goWithHeike do
 432: LD_EXP 17
 436: IFFALSE 491
 438: GO 440
 440: DISABLE
// begin enable ;
 441: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 442: LD_EXP 1
 446: PPUSH
 447: LD_EXP 5
 451: PPUSH
 452: CALL_OW 296
 456: PUSH
 457: LD_INT 3
 459: GREATER
 460: IFFALSE 491
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 462: LD_EXP 5
 466: PPUSH
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 250
 476: PPUSH
 477: LD_EXP 1
 481: PPUSH
 482: CALL_OW 251
 486: PPUSH
 487: CALL_OW 111
// end ;
 491: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 47
 497: PPUSH
 498: LD_INT 68
 500: PPUSH
 501: CALL_OW 293
 505: PUSH
 506: LD_EXP 18
 510: NOT
 511: AND
 512: IFFALSE 556
 514: GO 516
 516: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 517: LD_EXP 1
 521: PPUSH
 522: LD_STRING DH-spot-1
 524: PPUSH
 525: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 529: LD_INT 47
 531: PPUSH
 532: LD_INT 68
 534: PPUSH
 535: CALL_OW 428
 539: PPUSH
 540: CALL_OW 313
 544: PUSH
 545: LD_INT 1
 547: ARRAY
 548: PPUSH
 549: LD_STRING DR-spot-1
 551: PPUSH
 552: CALL_OW 88
// end ;
 556: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 93
 562: PPUSH
 563: LD_INT 89
 565: PPUSH
 566: CALL_OW 293
 570: PUSH
 571: LD_EXP 18
 575: NOT
 576: AND
 577: IFFALSE 621
 579: GO 581
 581: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 582: LD_EXP 1
 586: PPUSH
 587: LD_STRING DH-spot-1
 589: PPUSH
 590: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 594: LD_INT 93
 596: PPUSH
 597: LD_INT 89
 599: PPUSH
 600: CALL_OW 428
 604: PPUSH
 605: CALL_OW 313
 609: PUSH
 610: LD_INT 1
 612: ARRAY
 613: PPUSH
 614: LD_STRING DR-spot-2
 616: PPUSH
 617: CALL_OW 88
// end ;
 621: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 622: LD_EXP 20
 626: PUSH
 627: LD_EXP 14
 631: PPUSH
 632: LD_INT 101
 634: PUSH
 635: LD_INT 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 72
 646: AND
 647: IFFALSE 971
 649: GO 651
 651: DISABLE
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
 657: PPUSH
 658: PPUSH
// begin enable ;
 659: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 660: LD_ADDR_VAR 0 1
 664: PUSH
 665: LD_EXP 14
 669: PPUSH
 670: LD_INT 101
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PPUSH
 680: CALL_OW 72
 684: ST_TO_ADDR
// if not tmp then
 685: LD_VAR 0 1
 689: NOT
 690: IFFALSE 694
// exit ;
 692: GO 971
// InGameOn ;
 694: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 698: LD_EXP 1
 702: PUSH
 703: LD_EXP 5
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: LD_VAR 0 1
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PPUSH
 721: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 725: LD_VAR 0 1
 729: PUSH
 730: LD_INT 1
 732: ARRAY
 733: PPUSH
 734: LD_EXP 1
 738: PPUSH
 739: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 743: LD_VAR 0 1
 747: PUSH
 748: LD_INT 1
 750: ARRAY
 751: PPUSH
 752: LD_STRING DG-meeting-1
 754: PPUSH
 755: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 759: LD_ADDR_VAR 0 3
 763: PUSH
 764: LD_INT 81
 766: PUSH
 767: LD_INT 10
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 63
 776: PUSH
 777: LD_INT 25
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 108
 786: PUSH
 787: LD_INT 73
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 799: LD_ADDR_VAR 0 4
 803: PUSH
 804: LD_INT 9999
 806: PUSH
 807: EMPTY
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: ST_TO_ADDR
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 911
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 829: LD_ADDR_VAR 0 5
 833: PUSH
 834: LD_EXP 1
 838: PPUSH
 839: LD_VAR 0 3
 843: PUSH
 844: LD_VAR 0 2
 848: ARRAY
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_VAR 0 2
 863: ARRAY
 864: PUSH
 865: LD_INT 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 297
 873: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 874: LD_VAR 0 4
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PUSH
 883: LD_VAR 0 5
 887: GREATER
 888: IFFALSE 909
// dist := [ tdist , i ] ;
 890: LD_ADDR_VAR 0 4
 894: PUSH
 895: LD_VAR 0 5
 899: PUSH
 900: LD_VAR 0 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// end ;
 909: GO 826
 911: POP
 912: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 913: LD_EXP 1
 917: PPUSH
 918: LD_VAR 0 3
 922: PUSH
 923: LD_VAR 0 4
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: ARRAY
 932: PUSH
 933: LD_INT 1
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PUSH
 942: LD_VAR 0 4
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: ARRAY
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 111
// wait ( 0 0$3 ) ;
 960: LD_INT 105
 962: PPUSH
 963: CALL_OW 67
// InGameOff ;
 967: CALL_OW 9
// end ;
 971: PPOPN 5
 973: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
 974: LD_EXP 1
 978: PPUSH
 979: LD_INT 14
 981: PPUSH
 982: CALL_OW 296
 986: PUSH
 987: LD_INT 40
 989: GREATER
 990: PUSH
 991: LD_EXP 1
 995: PPUSH
 996: CALL_OW 316
1000: AND
1001: IFFALSE 1018
1003: GO 1005
1005: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1006: LD_EXP 5
1010: PPUSH
1011: LD_STRING DK-idle-1
1013: PPUSH
1014: CALL_OW 88
// end ;
1018: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1019: LD_INT 2
1021: PPUSH
1022: LD_INT 59
1024: PPUSH
1025: LD_INT 47
1027: PPUSH
1028: CALL_OW 293
1032: IFFALSE 1182
1034: GO 1036
1036: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1037: LD_INT 59
1039: PPUSH
1040: LD_INT 47
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: LD_INT 10
1048: NEG
1049: PPUSH
1050: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1054: LD_INT 59
1056: PPUSH
1057: LD_INT 47
1059: PPUSH
1060: CALL_OW 86
// goWithHeike := false ;
1064: LD_ADDR_EXP 17
1068: PUSH
1069: LD_INT 0
1071: ST_TO_ADDR
// baseSpotted := true ;
1072: LD_ADDR_EXP 18
1076: PUSH
1077: LD_INT 1
1079: ST_TO_ADDR
// InGameOn ;
1080: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1084: LD_EXP 1
1088: PUSH
1089: LD_EXP 5
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: LD_INT 54
1100: PPUSH
1101: LD_INT 45
1103: PPUSH
1104: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1108: LD_EXP 1
1112: PUSH
1113: LD_EXP 5
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PPUSH
1122: LD_INT 59
1124: PPUSH
1125: LD_INT 47
1127: PPUSH
1128: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_STRING DH-base-1
1139: PPUSH
1140: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1144: LD_EXP 5
1148: PPUSH
1149: LD_STRING DK-base-1
1151: PPUSH
1152: CALL_OW 88
// InGameOff ;
1156: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1160: LD_ADDR_EXP 16
1164: PUSH
1165: LD_EXP 16
1169: PUSH
1170: LD_INT 1
1172: PLUS
1173: ST_TO_ADDR
// goWithHeike := true ;
1174: LD_ADDR_EXP 17
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// end ;
1182: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1183: LD_INT 2
1185: PPUSH
1186: LD_EXP 8
1190: PPUSH
1191: CALL_OW 292
1195: IFFALSE 2424
1197: GO 1199
1199: DISABLE
1200: LD_INT 0
1202: PPUSH
1203: PPUSH
1204: PPUSH
// begin meetingActive := false ;
1205: LD_ADDR_EXP 20
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// goWithHeike := false ;
1213: LD_ADDR_EXP 17
1217: PUSH
1218: LD_INT 0
1220: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 6
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 517
1236: ST_TO_ADDR
// for i := 1 to 4 do
1237: LD_ADDR_VAR 0 1
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 4
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1318
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1253: LD_EXP 15
1257: PUSH
1258: LD_VAR 0 1
1262: ARRAY
1263: PPUSH
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PUSH
1273: LD_VAR 0 1
1277: ARRAY
1278: PPUSH
1279: LD_VAR 0 2
1283: PUSH
1284: LD_INT 2
1286: ARRAY
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1298: LD_EXP 15
1302: PUSH
1303: LD_VAR 0 1
1307: ARRAY
1308: PPUSH
1309: LD_INT 14
1311: PPUSH
1312: CALL_OW 179
// end ;
1316: GO 1250
1318: POP
1319: POP
// InGameOn ;
1320: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_EXP 8
1333: PPUSH
1334: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1338: LD_EXP 5
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1352: LD_INT 10
1354: PPUSH
1355: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1359: LD_EXP 1
1363: PPUSH
1364: LD_EXP 8
1368: PPUSH
1369: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1373: LD_EXP 5
1377: PPUSH
1378: LD_EXP 1
1382: PPUSH
1383: CALL_OW 250
1387: PPUSH
1388: LD_INT 5
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: CALL_OW 272
1398: PPUSH
1399: LD_EXP 1
1403: PPUSH
1404: CALL_OW 251
1408: PPUSH
1409: LD_INT 5
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: CALL_OW 273
1419: PPUSH
1420: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1424: LD_EXP 1
1428: PPUSH
1429: LD_EXP 8
1433: PPUSH
1434: CALL_OW 296
1438: PUSH
1439: LD_INT 5
1441: LESS
1442: PUSH
1443: LD_EXP 5
1447: PPUSH
1448: LD_EXP 8
1452: PPUSH
1453: CALL_OW 296
1457: PUSH
1458: LD_INT 6
1460: LESS
1461: AND
1462: IFFALSE 1352
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1464: LD_EXP 1
1468: PUSH
1469: LD_EXP 5
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: PPUSH
1478: LD_EXP 8
1482: PPUSH
1483: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1487: LD_EXP 8
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_EXP 9
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: LD_EXP 1
1511: PPUSH
1512: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1516: LD_INT 7
1518: PPUSH
1519: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1523: LD_EXP 8
1527: PPUSH
1528: LD_STRING DKu-Kurt-1
1530: PPUSH
1531: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1535: LD_EXP 5
1539: PPUSH
1540: LD_STRING DK-Kurt-1
1542: PPUSH
1543: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1547: LD_EXP 8
1551: PPUSH
1552: LD_STRING DKu-Kurt-2
1554: PPUSH
1555: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1559: LD_INT 7
1561: PPUSH
1562: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1566: LD_EXP 1
1570: PPUSH
1571: LD_STRING DH-Kurt-1
1573: PPUSH
1574: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1578: LD_EXP 8
1582: PPUSH
1583: LD_STRING DKu-Kurt-3
1585: PPUSH
1586: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1590: LD_EXP 5
1594: PPUSH
1595: LD_STRING DK-Kurt-3
1597: PPUSH
1598: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1602: LD_EXP 9
1606: PPUSH
1607: LD_STRING DHa-Kurt-3
1609: PPUSH
1610: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1614: LD_EXP 4
1618: PPUSH
1619: LD_STRING DO-Kurt-3
1621: PPUSH
1622: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1626: LD_ADDR_VAR 0 3
1630: PUSH
1631: LD_EXP 8
1635: PUSH
1636: LD_EXP 4
1640: PUSH
1641: LD_EXP 9
1645: PUSH
1646: LD_EXP 5
1650: PUSH
1651: LD_EXP 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: ST_TO_ADDR
// for i = 1 to 5 do
1663: LD_ADDR_VAR 0 1
1667: PUSH
1668: DOUBLE
1669: LD_INT 1
1671: DEC
1672: ST_TO_ADDR
1673: LD_INT 5
1675: PUSH
1676: FOR_TO
1677: IFFALSE 1752
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1679: LD_VAR 0 3
1683: PUSH
1684: LD_VAR 0 1
1688: ARRAY
1689: PPUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_INT 1
1697: ARRAY
1698: PUSH
1699: LD_VAR 0 1
1703: PUSH
1704: LD_INT 4
1706: PLUS
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: PUSH
1723: LD_INT 4
1725: PLUS
1726: ARRAY
1727: PPUSH
1728: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1732: LD_VAR 0 3
1736: PUSH
1737: LD_VAR 0 1
1741: ARRAY
1742: PPUSH
1743: LD_INT 14
1745: PPUSH
1746: CALL_OW 179
// end ;
1750: GO 1676
1752: POP
1753: POP
// wait ( 0 0$2 ) ;
1754: LD_INT 70
1756: PPUSH
1757: CALL_OW 67
// CenterOnUnits ( eon ) ;
1761: LD_INT 14
1763: PPUSH
1764: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1768: LD_INT 90
1770: PPUSH
1771: LD_INT 43
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 21
1779: NEG
1780: PPUSH
1781: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1785: LD_EXP 2
1789: PPUSH
1790: LD_INT 84
1792: PPUSH
1793: LD_INT 36
1795: PPUSH
1796: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1800: LD_EXP 2
1804: PPUSH
1805: LD_INT 14
1807: PPUSH
1808: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1812: LD_EXP 11
1816: PPUSH
1817: LD_INT 85
1819: PPUSH
1820: LD_INT 36
1822: PPUSH
1823: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1827: LD_EXP 11
1831: PPUSH
1832: LD_INT 14
1834: PPUSH
1835: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1839: LD_EXP 10
1843: PPUSH
1844: LD_INT 86
1846: PPUSH
1847: LD_INT 36
1849: PPUSH
1850: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1854: LD_EXP 10
1858: PPUSH
1859: LD_INT 14
1861: PPUSH
1862: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1866: LD_EXP 7
1870: PPUSH
1871: LD_INT 87
1873: PPUSH
1874: LD_INT 36
1876: PPUSH
1877: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1881: LD_EXP 7
1885: PPUSH
1886: LD_INT 14
1888: PPUSH
1889: CALL_OW 179
// wait ( 0 0$3 ) ;
1893: LD_INT 105
1895: PPUSH
1896: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1900: LD_INT 35
1902: PPUSH
1903: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1907: LD_EXP 1
1911: PPUSH
1912: LD_INT 6
1914: PPUSH
1915: CALL_OW 308
1919: IFFALSE 1900
// heikeNearbyEon := true ;
1921: LD_ADDR_EXP 19
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1929: LD_EXP 6
1933: PPUSH
1934: LD_INT 88
1936: PPUSH
1937: LD_INT 37
1939: PPUSH
1940: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1944: LD_EXP 6
1948: PPUSH
1949: LD_EXP 13
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1962: LD_EXP 13
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: LD_INT 89
1973: PPUSH
1974: LD_INT 37
1976: PPUSH
1977: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
1981: LD_EXP 13
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PPUSH
1990: LD_INT 91
1992: PPUSH
1993: LD_INT 39
1995: PPUSH
1996: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2000: LD_EXP 13
2004: PPUSH
2005: LD_EXP 11
2009: PPUSH
2010: CALL_OW 179
// wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2021: LD_EXP 13
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: PPUSH
2030: LD_STRING DS-eon-1
2032: PPUSH
2033: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2037: LD_EXP 6
2041: PPUSH
2042: LD_STRING DSh-eon-1
2044: PPUSH
2045: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2049: LD_EXP 13
2053: PUSH
2054: LD_INT 1
2056: ARRAY
2057: PPUSH
2058: LD_INT 92
2060: PPUSH
2061: LD_INT 43
2063: PPUSH
2064: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2068: LD_EXP 13
2072: PUSH
2073: LD_INT 1
2075: ARRAY
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2084: LD_EXP 13
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_INT 93
2095: PPUSH
2096: LD_INT 41
2098: PPUSH
2099: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2103: LD_EXP 13
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: LD_INT 93
2114: PPUSH
2115: LD_INT 40
2117: PPUSH
2118: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2122: LD_EXP 6
2126: PPUSH
2127: LD_INT 88
2129: PPUSH
2130: LD_INT 41
2132: PPUSH
2133: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2137: LD_EXP 6
2141: PPUSH
2142: LD_INT 87
2144: PPUSH
2145: LD_INT 41
2147: PPUSH
2148: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2152: LD_INT 35
2154: PPUSH
2155: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2159: LD_EXP 6
2163: PPUSH
2164: LD_INT 88
2166: PPUSH
2167: LD_INT 41
2169: PPUSH
2170: CALL_OW 307
2174: IFFALSE 2152
// wait ( 0 0$1 ) ;
2176: LD_INT 35
2178: PPUSH
2179: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2183: LD_EXP 6
2187: PPUSH
2188: LD_STRING DSh-eon-2
2190: PPUSH
2191: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2195: LD_EXP 11
2199: PPUSH
2200: LD_INT 87
2202: PPUSH
2203: LD_INT 40
2205: PPUSH
2206: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2210: LD_EXP 11
2214: PPUSH
2215: LD_INT 86
2217: PPUSH
2218: LD_INT 40
2220: PPUSH
2221: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2232: LD_EXP 11
2236: PPUSH
2237: LD_INT 87
2239: PPUSH
2240: LD_INT 40
2242: PPUSH
2243: CALL_OW 307
2247: IFFALSE 2225
// Say ( Shariff , DShar-eon-3 ) ;
2249: LD_EXP 11
2253: PPUSH
2254: LD_STRING DShar-eon-3
2256: PPUSH
2257: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2261: LD_EXP 11
2265: PPUSH
2266: LD_STRING DShar-eon-4
2268: PPUSH
2269: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2273: LD_EXP 5
2277: PPUSH
2278: LD_STRING DK-eon-4
2280: PPUSH
2281: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2285: LD_EXP 5
2289: PPUSH
2290: LD_INT 14
2292: PPUSH
2293: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2297: LD_INT 35
2299: PPUSH
2300: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2304: LD_EXP 5
2308: PPUSH
2309: CALL_OW 305
2313: NOT
2314: IFFALSE 2297
// Say ( Shariff , DShar-eon-5 ) ;
2316: LD_EXP 11
2320: PPUSH
2321: LD_STRING DShar-eon-5
2323: PPUSH
2324: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2328: LD_EXP 1
2332: PPUSH
2333: LD_INT 91
2335: PPUSH
2336: LD_INT 44
2338: PPUSH
2339: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 14
2350: PPUSH
2351: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2362: LD_EXP 1
2366: PPUSH
2367: LD_INT 91
2369: PPUSH
2370: LD_INT 44
2372: PPUSH
2373: CALL_OW 307
2377: IFFALSE 2355
// Say ( Heike , DH-eon-5 ) ;
2379: LD_EXP 1
2383: PPUSH
2384: LD_STRING DH-eon-5
2386: PPUSH
2387: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2391: LD_EXP 1
2395: PPUSH
2396: LD_INT 14
2398: PPUSH
2399: CALL_OW 120
// wait ( 0 0$2 ) ;
2403: LD_INT 70
2405: PPUSH
2406: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING %_cont
2415: PPUSH
2416: CALL_OW 340
// InGameOff ;
2420: CALL_OW 9
// end ; end_of_file
2424: PPOPN 3
2426: END
// export function PrepareHeikeGroup ; begin
2427: LD_INT 0
2429: PPUSH
// uc_side := 2 ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_INT 2
2437: ST_TO_ADDR
// uc_nation := 2 ;
2438: LD_ADDR_OWVAR 21
2442: PUSH
2443: LD_INT 2
2445: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2446: LD_ADDR_EXP 1
2450: PUSH
2451: LD_STRING Heike
2453: PPUSH
2454: CALL_OW 25
2458: ST_TO_ADDR
// uc_side := 5 ;
2459: LD_ADDR_OWVAR 20
2463: PUSH
2464: LD_INT 5
2466: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2467: LD_ADDR_EXP 5
2471: PUSH
2472: LD_STRING Kaia
2474: PPUSH
2475: CALL_OW 25
2479: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2480: LD_EXP 1
2484: PPUSH
2485: LD_INT 3
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2495: LD_EXP 5
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 49
// end ;
2510: LD_VAR 0 1
2514: RET
// export function PrepareSheikGroup ; var un , i ; begin
2515: LD_INT 0
2517: PPUSH
2518: PPUSH
2519: PPUSH
// uc_side := 5 ;
2520: LD_ADDR_OWVAR 20
2524: PUSH
2525: LD_INT 5
2527: ST_TO_ADDR
// uc_nation := 2 ;
2528: LD_ADDR_OWVAR 21
2532: PUSH
2533: LD_INT 2
2535: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2536: LD_ADDR_EXP 10
2540: PUSH
2541: LD_STRING Ali
2543: PPUSH
2544: CALL_OW 25
2548: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2549: LD_ADDR_EXP 11
2553: PUSH
2554: LD_STRING Abdul
2556: PPUSH
2557: CALL_OW 25
2561: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2562: LD_ADDR_EXP 2
2566: PUSH
2567: LD_STRING Omar
2569: PPUSH
2570: CALL_OW 25
2574: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2575: LD_ADDR_EXP 7
2579: PUSH
2580: LD_STRING Mahtab
2582: PPUSH
2583: CALL_OW 25
2587: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2588: LD_ADDR_EXP 6
2592: PUSH
2593: LD_STRING Shahrzad
2595: PPUSH
2596: CALL_OW 25
2600: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2601: LD_EXP 10
2605: PPUSH
2606: LD_INT 85
2608: PPUSH
2609: LD_INT 37
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2619: LD_EXP 11
2623: PPUSH
2624: LD_INT 87
2626: PPUSH
2627: LD_INT 37
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2637: LD_EXP 2
2641: PPUSH
2642: LD_INT 85
2644: PPUSH
2645: LD_INT 35
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2655: LD_EXP 7
2659: PPUSH
2660: LD_INT 86
2662: PPUSH
2663: LD_INT 39
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2673: LD_EXP 6
2677: PPUSH
2678: LD_INT 88
2680: PPUSH
2681: LD_INT 39
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2691: LD_EXP 10
2695: PPUSH
2696: LD_EXP 11
2700: PPUSH
2701: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2705: LD_EXP 11
2709: PPUSH
2710: LD_EXP 10
2714: PPUSH
2715: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2719: LD_EXP 2
2723: PPUSH
2724: LD_EXP 11
2728: PPUSH
2729: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2733: LD_EXP 7
2737: PUSH
2738: LD_EXP 6
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: LD_EXP 11
2751: PPUSH
2752: CALL_OW 119
// for i := 1 to 2 do
2756: LD_ADDR_VAR 0 3
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 2
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2856
// begin PrepareHuman ( false , 4 , 6 ) ;
2772: LD_INT 0
2774: PPUSH
2775: LD_INT 4
2777: PPUSH
2778: LD_INT 6
2780: PPUSH
2781: CALL_OW 380
// un := CreateHuman ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: CALL_OW 44
2794: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2795: LD_VAR 0 2
2799: PPUSH
2800: LD_INT 90
2802: PPUSH
2803: LD_INT 44
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2816: LD_VAR 0 2
2820: PPUSH
2821: LD_INT 91
2823: PPUSH
2824: LD_INT 43
2826: PPUSH
2827: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2831: LD_ADDR_EXP 13
2835: PUSH
2836: LD_EXP 13
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_VAR 0 2
2848: PPUSH
2849: CALL_OW 2
2853: ST_TO_ADDR
// end ;
2854: GO 2769
2856: POP
2857: POP
// scientists := scientists diff 0 ;
2858: LD_ADDR_EXP 13
2862: PUSH
2863: LD_EXP 13
2867: PUSH
2868: LD_INT 0
2870: DIFF
2871: ST_TO_ADDR
// end ;
2872: LD_VAR 0 1
2876: RET
// export function PrepareKurtGroup ; var i ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
// uc_side := 5 ;
2881: LD_ADDR_OWVAR 20
2885: PUSH
2886: LD_INT 5
2888: ST_TO_ADDR
// uc_nation := 2 ;
2889: LD_ADDR_OWVAR 21
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2897: LD_ADDR_EXP 8
2901: PUSH
2902: LD_STRING Kurt
2904: PPUSH
2905: CALL_OW 25
2909: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2910: LD_ADDR_EXP 4
2914: PUSH
2915: LD_STRING Olaf
2917: PPUSH
2918: CALL_OW 25
2922: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2923: LD_ADDR_EXP 9
2927: PUSH
2928: LD_STRING Hans
2930: PPUSH
2931: CALL_OW 25
2935: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_EXP 8
2945: PUSH
2946: LD_EXP 9
2950: PUSH
2951: LD_EXP 4
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: PUSH
2961: FOR_IN
2962: IFFALSE 2981
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_INT 10
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL_OW 49
2979: GO 2961
2981: POP
2982: POP
// ComTurnUnit ( Kurt , Hans ) ;
2983: LD_EXP 8
2987: PPUSH
2988: LD_EXP 9
2992: PPUSH
2993: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
2997: LD_EXP 4
3001: PPUSH
3002: LD_EXP 9
3006: PPUSH
3007: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3011: LD_EXP 9
3015: PPUSH
3016: LD_EXP 4
3020: PPUSH
3021: CALL_OW 119
// end ;
3025: LD_VAR 0 1
3029: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3030: LD_INT 0
3032: PPUSH
3033: PPUSH
3034: PPUSH
3035: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 21
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: PUSH
3056: LD_INT 14
3058: DIFF
3059: PUSH
3060: FOR_IN
3061: IFFALSE 3141
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3063: LD_VAR 0 2
3067: PPUSH
3068: CALL_OW 266
3072: PUSH
3073: LD_INT 6
3075: PUSH
3076: LD_INT 31
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: IN
3083: IFFALSE 3107
// SetLives ( i , rand ( 500 , 600 ) ) else
3085: LD_VAR 0 2
3089: PPUSH
3090: LD_INT 500
3092: PPUSH
3093: LD_INT 600
3095: PPUSH
3096: CALL_OW 12
3100: PPUSH
3101: CALL_OW 234
3105: GO 3127
// SetLives ( i , rand ( 300 , 499 ) ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: LD_INT 300
3114: PPUSH
3115: LD_INT 499
3117: PPUSH
3118: CALL_OW 12
3122: PPUSH
3123: CALL_OW 234
// SetSide ( i , 5 ) ;
3127: LD_VAR 0 2
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: CALL_OW 235
// end ;
3139: GO 3060
3141: POP
3142: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 9
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 517
3158: ST_TO_ADDR
// uc_side := 4 ;
3159: LD_ADDR_OWVAR 20
3163: PUSH
3164: LD_INT 4
3166: ST_TO_ADDR
// uc_nation := 1 ;
3167: LD_ADDR_OWVAR 21
3171: PUSH
3172: LD_INT 1
3174: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3175: LD_ADDR_VAR 0 2
3179: PUSH
3180: DOUBLE
3181: LD_INT 1
3183: DEC
3184: ST_TO_ADDR
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PUSH
3194: FOR_TO
3195: IFFALSE 3271
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3197: LD_INT 0
3199: PPUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 4
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_VAR 0 2
3218: PUSH
3219: LD_INT 3
3221: MOD
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: ARRAY
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 380
// un := CreateHuman ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: CALL_OW 44
3244: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 9
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// KillUnit ( un ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: CALL_OW 66
// end ;
3269: GO 3194
3271: POP
3272: POP
// end ;
3273: LD_VAR 0 1
3277: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
3285: PPUSH
3286: PPUSH
// uc_side := 5 ;
3287: LD_ADDR_OWVAR 20
3291: PUSH
3292: LD_INT 5
3294: ST_TO_ADDR
// uc_nation := 2 ;
3295: LD_ADDR_OWVAR 21
3299: PUSH
3300: LD_INT 2
3302: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3303: LD_ADDR_VAR 0 6
3307: PUSH
3308: LD_INT 2
3310: PUSH
3311: LD_INT 4
3313: PUSH
3314: LD_INT 5
3316: PUSH
3317: LD_INT 14
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: ST_TO_ADDR
// InitHc ;
3326: CALL_OW 19
// for i in area do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_VAR 0 6
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3505
// begin tmp := AreaToList ( i , 0 ) ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 2
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 517
3360: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: DOUBLE
3367: LD_INT 1
3369: DEC
3370: ST_TO_ADDR
3371: LD_VAR 0 5
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PUSH
3380: FOR_TO
3381: IFFALSE 3501
// begin PrepareHuman ( false , 1 , 3 ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: CALL_OW 380
// un := CreateHuman ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 44
3405: ST_TO_ADDR
// if i = spawnBaseArea3 then
3406: LD_VAR 0 2
3410: PUSH
3411: LD_INT 5
3413: EQUAL
3414: IFFALSE 3432
// eonGuards := eonGuards ^ un ;
3416: LD_ADDR_EXP 14
3420: PUSH
3421: LD_EXP 14
3425: PUSH
3426: LD_VAR 0 7
3430: ADD
3431: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3432: LD_VAR 0 7
3436: PPUSH
3437: LD_VAR 0 2
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: CALL_OW 49
// ComHold ( un ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: CALL_OW 140
// if i = spawnBaseArea4 then
3458: LD_VAR 0 2
3462: PUSH
3463: LD_INT 14
3465: EQUAL
3466: IFFALSE 3499
// begin firstGroup := firstGroup ^ un ;
3468: LD_ADDR_EXP 15
3472: PUSH
3473: LD_EXP 15
3477: PUSH
3478: LD_VAR 0 7
3482: ADD
3483: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3484: LD_VAR 0 7
3488: PPUSH
3489: LD_INT 108
3491: PPUSH
3492: LD_INT 47
3494: PPUSH
3495: CALL_OW 118
// end ; end ;
3499: GO 3380
3501: POP
3502: POP
// end ;
3503: GO 3340
3505: POP
3506: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 69
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3627
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 31
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 69
3554: PUSH
3555: LD_VAR 0 2
3559: ARRAY
3560: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 3
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 7
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3584: LD_VAR 0 7
3588: PPUSH
3589: LD_VAR 0 4
3593: PPUSH
3594: CALL_OW 254
3598: PUSH
3599: LD_INT 3
3601: PLUS
3602: PUSH
3603: LD_INT 6
3605: MOD
3606: PPUSH
3607: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3611: LD_VAR 0 7
3615: PPUSH
3616: LD_VAR 0 4
3620: PPUSH
3621: CALL_OW 52
// end ;
3625: GO 3532
3627: POP
3628: POP
// end ; end_of_file
3629: LD_VAR 0 1
3633: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_INT 2
3641: EQUAL
3642: PUSH
3643: LD_VAR 0 2
3647: PUSH
3648: LD_INT 5
3650: EQUAL
3651: AND
3652: IFFALSE 3670
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 5
3659: PPUSH
3660: LD_INT 2
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 80
// end ;
3670: PPOPN 2
3672: END
// every 0 0$1 trigger scientists do var i ;
3673: LD_EXP 13
3677: IFFALSE 3885
3679: GO 3681
3681: DISABLE
3682: LD_INT 0
3684: PPUSH
// begin repeat for i in scientists do
3685: LD_ADDR_VAR 0 1
3689: PUSH
3690: LD_EXP 13
3694: PUSH
3695: FOR_IN
3696: IFFALSE 3870
// begin wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3705: LD_VAR 0 1
3709: PPUSH
3710: LD_INT 11
3712: PUSH
3713: LD_INT 13
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: LD_INT 2
3727: MOD
3728: PUSH
3729: LD_INT 1
3731: PLUS
3732: ARRAY
3733: PPUSH
3734: CALL_OW 308
3738: NOT
3739: IFFALSE 3774
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3741: LD_VAR 0 1
3745: PPUSH
3746: LD_INT 11
3748: PUSH
3749: LD_INT 13
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: LD_INT 2
3763: MOD
3764: PUSH
3765: LD_INT 1
3767: PLUS
3768: ARRAY
3769: PPUSH
3770: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3774: LD_VAR 0 1
3778: PPUSH
3779: LD_INT 14
3781: PPUSH
3782: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_INT 70
3793: PPUSH
3794: CALL_OW 202
// if rand ( 0 , 1 ) then
3798: LD_INT 0
3800: PPUSH
3801: LD_INT 1
3803: PPUSH
3804: CALL_OW 12
3808: IFFALSE 3822
// AddComAnim ( i , 15 ) ;
3810: LD_VAR 0 1
3814: PPUSH
3815: LD_INT 15
3817: PPUSH
3818: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: LD_INT 35
3829: PPUSH
3830: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3834: LD_VAR 0 1
3838: PPUSH
3839: LD_INT 12
3841: PPUSH
3842: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 93
3853: PPUSH
3854: LD_INT 40
3856: PPUSH
3857: CALL_OW 178
// wait ( 0 0$1 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// end ;
3868: GO 3695
3870: POP
3871: POP
// wait ( 0 0$10 ) ;
3872: LD_INT 350
3874: PPUSH
3875: CALL_OW 67
// until heikeNearbyEon ;
3879: LD_EXP 19
3883: IFFALSE 3685
// end ; end_of_file
3885: PPOPN 1
3887: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3888: GO 3890
3890: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3891: LD_STRING initStreamRollete();
3893: PPUSH
3894: CALL_OW 559
// InitStreamMode ;
3898: CALL 3907 0 0
// DefineStreamItems ( ) ;
3902: CALL 4347 0 0
// end ;
3906: END
// function InitStreamMode ; begin
3907: LD_INT 0
3909: PPUSH
// streamModeActive := false ;
3910: LD_ADDR_EXP 21
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// normalCounter := 26 ;
3918: LD_ADDR_EXP 22
3922: PUSH
3923: LD_INT 26
3925: ST_TO_ADDR
// hardcoreCounter := 12 ;
3926: LD_ADDR_EXP 23
3930: PUSH
3931: LD_INT 12
3933: ST_TO_ADDR
// sRocket := false ;
3934: LD_ADDR_EXP 26
3938: PUSH
3939: LD_INT 0
3941: ST_TO_ADDR
// sSpeed := false ;
3942: LD_ADDR_EXP 25
3946: PUSH
3947: LD_INT 0
3949: ST_TO_ADDR
// sEngine := false ;
3950: LD_ADDR_EXP 27
3954: PUSH
3955: LD_INT 0
3957: ST_TO_ADDR
// sSpec := false ;
3958: LD_ADDR_EXP 24
3962: PUSH
3963: LD_INT 0
3965: ST_TO_ADDR
// sLevel := false ;
3966: LD_ADDR_EXP 28
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// sArmoury := false ;
3974: LD_ADDR_EXP 29
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// sRadar := false ;
3982: LD_ADDR_EXP 30
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// sBunker := false ;
3990: LD_ADDR_EXP 31
3994: PUSH
3995: LD_INT 0
3997: ST_TO_ADDR
// sHack := false ;
3998: LD_ADDR_EXP 32
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// sFire := false ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: LD_INT 0
4013: ST_TO_ADDR
// sRefresh := false ;
4014: LD_ADDR_EXP 34
4018: PUSH
4019: LD_INT 0
4021: ST_TO_ADDR
// sExp := false ;
4022: LD_ADDR_EXP 35
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// sDepot := false ;
4030: LD_ADDR_EXP 36
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// sFlag := false ;
4038: LD_ADDR_EXP 37
4042: PUSH
4043: LD_INT 0
4045: ST_TO_ADDR
// sKamikadze := false ;
4046: LD_ADDR_EXP 45
4050: PUSH
4051: LD_INT 0
4053: ST_TO_ADDR
// sTroll := false ;
4054: LD_ADDR_EXP 46
4058: PUSH
4059: LD_INT 0
4061: ST_TO_ADDR
// sSlow := false ;
4062: LD_ADDR_EXP 47
4066: PUSH
4067: LD_INT 0
4069: ST_TO_ADDR
// sLack := false ;
4070: LD_ADDR_EXP 48
4074: PUSH
4075: LD_INT 0
4077: ST_TO_ADDR
// sTank := false ;
4078: LD_ADDR_EXP 50
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// sRemote := false ;
4086: LD_ADDR_EXP 51
4090: PUSH
4091: LD_INT 0
4093: ST_TO_ADDR
// sPowell := false ;
4094: LD_ADDR_EXP 52
4098: PUSH
4099: LD_INT 0
4101: ST_TO_ADDR
// sTeleport := false ;
4102: LD_ADDR_EXP 55
4106: PUSH
4107: LD_INT 0
4109: ST_TO_ADDR
// sOilTower := false ;
4110: LD_ADDR_EXP 57
4114: PUSH
4115: LD_INT 0
4117: ST_TO_ADDR
// sShovel := false ;
4118: LD_ADDR_EXP 58
4122: PUSH
4123: LD_INT 0
4125: ST_TO_ADDR
// sSheik := false ;
4126: LD_ADDR_EXP 59
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// sEarthquake := false ;
4134: LD_ADDR_EXP 61
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// sAI := false ;
4142: LD_ADDR_EXP 62
4146: PUSH
4147: LD_INT 0
4149: ST_TO_ADDR
// sCargo := false ;
4150: LD_ADDR_EXP 65
4154: PUSH
4155: LD_INT 0
4157: ST_TO_ADDR
// sDLaser := false ;
4158: LD_ADDR_EXP 66
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// sExchange := false ;
4166: LD_ADDR_EXP 67
4170: PUSH
4171: LD_INT 0
4173: ST_TO_ADDR
// sFac := false ;
4174: LD_ADDR_EXP 68
4178: PUSH
4179: LD_INT 0
4181: ST_TO_ADDR
// sPower := false ;
4182: LD_ADDR_EXP 69
4186: PUSH
4187: LD_INT 0
4189: ST_TO_ADDR
// sRandom := false ;
4190: LD_ADDR_EXP 70
4194: PUSH
4195: LD_INT 0
4197: ST_TO_ADDR
// sShield := false ;
4198: LD_ADDR_EXP 71
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// sTime := false ;
4206: LD_ADDR_EXP 72
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// sTools := false ;
4214: LD_ADDR_EXP 73
4218: PUSH
4219: LD_INT 0
4221: ST_TO_ADDR
// sSold := false ;
4222: LD_ADDR_EXP 38
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// sDiff := false ;
4230: LD_ADDR_EXP 39
4234: PUSH
4235: LD_INT 0
4237: ST_TO_ADDR
// sFog := false ;
4238: LD_ADDR_EXP 42
4242: PUSH
4243: LD_INT 0
4245: ST_TO_ADDR
// sReset := false ;
4246: LD_ADDR_EXP 43
4250: PUSH
4251: LD_INT 0
4253: ST_TO_ADDR
// sSun := false ;
4254: LD_ADDR_EXP 44
4258: PUSH
4259: LD_INT 0
4261: ST_TO_ADDR
// sTiger := false ;
4262: LD_ADDR_EXP 40
4266: PUSH
4267: LD_INT 0
4269: ST_TO_ADDR
// sBomb := false ;
4270: LD_ADDR_EXP 41
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// sWound := false ;
4278: LD_ADDR_EXP 49
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// sBetray := false ;
4286: LD_ADDR_EXP 53
4290: PUSH
4291: LD_INT 0
4293: ST_TO_ADDR
// sContamin := false ;
4294: LD_ADDR_EXP 54
4298: PUSH
4299: LD_INT 0
4301: ST_TO_ADDR
// sOil := false ;
4302: LD_ADDR_EXP 56
4306: PUSH
4307: LD_INT 0
4309: ST_TO_ADDR
// sStu := false ;
4310: LD_ADDR_EXP 60
4314: PUSH
4315: LD_INT 0
4317: ST_TO_ADDR
// sBazooka := false ;
4318: LD_ADDR_EXP 63
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// sMortar := false ;
4326: LD_ADDR_EXP 64
4330: PUSH
4331: LD_INT 0
4333: ST_TO_ADDR
// sRanger := false ;
4334: LD_ADDR_EXP 74
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
// result := [ ] ;
4354: LD_ADDR_VAR 0 1
4358: PUSH
4359: EMPTY
4360: ST_TO_ADDR
// if campaign_id = 1 then
4361: LD_OWVAR 69
4365: PUSH
4366: LD_INT 1
4368: EQUAL
4369: IFFALSE 7305
// begin case mission_number of 1 :
4371: LD_OWVAR 70
4375: PUSH
4376: LD_INT 1
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4448
4384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4385: LD_ADDR_VAR 0 1
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: LD_INT 4
4395: PUSH
4396: LD_INT 11
4398: PUSH
4399: LD_INT 12
4401: PUSH
4402: LD_INT 15
4404: PUSH
4405: LD_INT 16
4407: PUSH
4408: LD_INT 22
4410: PUSH
4411: LD_INT 23
4413: PUSH
4414: LD_INT 26
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 101
4430: PUSH
4431: LD_INT 102
4433: PUSH
4434: LD_INT 106
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: ST_TO_ADDR
4446: GO 7305
4448: LD_INT 2
4450: DOUBLE
4451: EQUAL
4452: IFTRUE 4456
4454: GO 4528
4456: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: LD_INT 2
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: LD_INT 11
4470: PUSH
4471: LD_INT 12
4473: PUSH
4474: LD_INT 15
4476: PUSH
4477: LD_INT 16
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 23
4485: PUSH
4486: LD_INT 26
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 101
4502: PUSH
4503: LD_INT 102
4505: PUSH
4506: LD_INT 105
4508: PUSH
4509: LD_INT 106
4511: PUSH
4512: LD_INT 108
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
4526: GO 7305
4528: LD_INT 3
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4612
4536: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4537: LD_ADDR_VAR 0 1
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: LD_INT 4
4547: PUSH
4548: LD_INT 5
4550: PUSH
4551: LD_INT 11
4553: PUSH
4554: LD_INT 12
4556: PUSH
4557: LD_INT 15
4559: PUSH
4560: LD_INT 16
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 26
4568: PUSH
4569: LD_INT 36
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 101
4586: PUSH
4587: LD_INT 102
4589: PUSH
4590: LD_INT 105
4592: PUSH
4593: LD_INT 106
4595: PUSH
4596: LD_INT 108
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: ST_TO_ADDR
4610: GO 7305
4612: LD_INT 4
4614: DOUBLE
4615: EQUAL
4616: IFTRUE 4620
4618: GO 4704
4620: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4621: LD_ADDR_VAR 0 1
4625: PUSH
4626: LD_INT 2
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 8
4637: PUSH
4638: LD_INT 11
4640: PUSH
4641: LD_INT 12
4643: PUSH
4644: LD_INT 15
4646: PUSH
4647: LD_INT 16
4649: PUSH
4650: LD_INT 22
4652: PUSH
4653: LD_INT 23
4655: PUSH
4656: LD_INT 26
4658: PUSH
4659: LD_INT 36
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 101
4678: PUSH
4679: LD_INT 102
4681: PUSH
4682: LD_INT 105
4684: PUSH
4685: LD_INT 106
4687: PUSH
4688: LD_INT 108
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: ST_TO_ADDR
4702: GO 7305
4704: LD_INT 5
4706: DOUBLE
4707: EQUAL
4708: IFTRUE 4712
4710: GO 4812
4712: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4713: LD_ADDR_VAR 0 1
4717: PUSH
4718: LD_INT 2
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 5
4726: PUSH
4727: LD_INT 6
4729: PUSH
4730: LD_INT 8
4732: PUSH
4733: LD_INT 11
4735: PUSH
4736: LD_INT 12
4738: PUSH
4739: LD_INT 15
4741: PUSH
4742: LD_INT 16
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 23
4750: PUSH
4751: LD_INT 25
4753: PUSH
4754: LD_INT 26
4756: PUSH
4757: LD_INT 36
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 101
4778: PUSH
4779: LD_INT 102
4781: PUSH
4782: LD_INT 105
4784: PUSH
4785: LD_INT 106
4787: PUSH
4788: LD_INT 108
4790: PUSH
4791: LD_INT 109
4793: PUSH
4794: LD_INT 112
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 7305
4812: LD_INT 6
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4940
4820: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4821: LD_ADDR_VAR 0 1
4825: PUSH
4826: LD_INT 2
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 6
4837: PUSH
4838: LD_INT 8
4840: PUSH
4841: LD_INT 11
4843: PUSH
4844: LD_INT 12
4846: PUSH
4847: LD_INT 15
4849: PUSH
4850: LD_INT 16
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 22
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: LD_INT 26
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 31
4876: PUSH
4877: LD_INT 32
4879: PUSH
4880: LD_INT 36
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 101
4906: PUSH
4907: LD_INT 102
4909: PUSH
4910: LD_INT 105
4912: PUSH
4913: LD_INT 106
4915: PUSH
4916: LD_INT 108
4918: PUSH
4919: LD_INT 109
4921: PUSH
4922: LD_INT 112
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: ST_TO_ADDR
4938: GO 7305
4940: LD_INT 7
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4948
4946: GO 5048
4948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4949: LD_ADDR_VAR 0 1
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 4
4959: PUSH
4960: LD_INT 5
4962: PUSH
4963: LD_INT 7
4965: PUSH
4966: LD_INT 11
4968: PUSH
4969: LD_INT 12
4971: PUSH
4972: LD_INT 15
4974: PUSH
4975: LD_INT 16
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 23
4989: PUSH
4990: LD_INT 25
4992: PUSH
4993: LD_INT 26
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 101
5014: PUSH
5015: LD_INT 102
5017: PUSH
5018: LD_INT 103
5020: PUSH
5021: LD_INT 105
5023: PUSH
5024: LD_INT 106
5026: PUSH
5027: LD_INT 108
5029: PUSH
5030: LD_INT 112
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: ST_TO_ADDR
5046: GO 7305
5048: LD_INT 8
5050: DOUBLE
5051: EQUAL
5052: IFTRUE 5056
5054: GO 5184
5056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5057: LD_ADDR_VAR 0 1
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: LD_INT 6
5073: PUSH
5074: LD_INT 7
5076: PUSH
5077: LD_INT 8
5079: PUSH
5080: LD_INT 11
5082: PUSH
5083: LD_INT 12
5085: PUSH
5086: LD_INT 15
5088: PUSH
5089: LD_INT 16
5091: PUSH
5092: LD_INT 20
5094: PUSH
5095: LD_INT 21
5097: PUSH
5098: LD_INT 22
5100: PUSH
5101: LD_INT 23
5103: PUSH
5104: LD_INT 25
5106: PUSH
5107: LD_INT 26
5109: PUSH
5110: LD_INT 30
5112: PUSH
5113: LD_INT 31
5115: PUSH
5116: LD_INT 32
5118: PUSH
5119: LD_INT 36
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 101
5146: PUSH
5147: LD_INT 102
5149: PUSH
5150: LD_INT 103
5152: PUSH
5153: LD_INT 105
5155: PUSH
5156: LD_INT 106
5158: PUSH
5159: LD_INT 108
5161: PUSH
5162: LD_INT 109
5164: PUSH
5165: LD_INT 112
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: ST_TO_ADDR
5182: GO 7305
5184: LD_INT 9
5186: DOUBLE
5187: EQUAL
5188: IFTRUE 5192
5190: GO 5328
5192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5193: LD_ADDR_VAR 0 1
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: LD_INT 4
5203: PUSH
5204: LD_INT 5
5206: PUSH
5207: LD_INT 6
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 8
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 15
5224: PUSH
5225: LD_INT 16
5227: PUSH
5228: LD_INT 20
5230: PUSH
5231: LD_INT 21
5233: PUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 23
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 26
5245: PUSH
5246: LD_INT 28
5248: PUSH
5249: LD_INT 30
5251: PUSH
5252: LD_INT 31
5254: PUSH
5255: LD_INT 32
5257: PUSH
5258: LD_INT 36
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 101
5286: PUSH
5287: LD_INT 102
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: LD_INT 105
5295: PUSH
5296: LD_INT 106
5298: PUSH
5299: LD_INT 108
5301: PUSH
5302: LD_INT 109
5304: PUSH
5305: LD_INT 112
5307: PUSH
5308: LD_INT 114
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: ST_TO_ADDR
5326: GO 7305
5328: LD_INT 10
5330: DOUBLE
5331: EQUAL
5332: IFTRUE 5336
5334: GO 5520
5336: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5337: LD_ADDR_VAR 0 1
5341: PUSH
5342: LD_INT 2
5344: PUSH
5345: LD_INT 4
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: LD_INT 11
5368: PUSH
5369: LD_INT 12
5371: PUSH
5372: LD_INT 13
5374: PUSH
5375: LD_INT 14
5377: PUSH
5378: LD_INT 15
5380: PUSH
5381: LD_INT 16
5383: PUSH
5384: LD_INT 17
5386: PUSH
5387: LD_INT 18
5389: PUSH
5390: LD_INT 19
5392: PUSH
5393: LD_INT 20
5395: PUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 23
5404: PUSH
5405: LD_INT 24
5407: PUSH
5408: LD_INT 25
5410: PUSH
5411: LD_INT 26
5413: PUSH
5414: LD_INT 28
5416: PUSH
5417: LD_INT 30
5419: PUSH
5420: LD_INT 31
5422: PUSH
5423: LD_INT 32
5425: PUSH
5426: LD_INT 36
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 101
5462: PUSH
5463: LD_INT 102
5465: PUSH
5466: LD_INT 103
5468: PUSH
5469: LD_INT 104
5471: PUSH
5472: LD_INT 105
5474: PUSH
5475: LD_INT 106
5477: PUSH
5478: LD_INT 107
5480: PUSH
5481: LD_INT 108
5483: PUSH
5484: LD_INT 109
5486: PUSH
5487: LD_INT 110
5489: PUSH
5490: LD_INT 111
5492: PUSH
5493: LD_INT 112
5495: PUSH
5496: LD_INT 114
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: ST_TO_ADDR
5518: GO 7305
5520: LD_INT 11
5522: DOUBLE
5523: EQUAL
5524: IFTRUE 5528
5526: GO 5720
5528: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5529: LD_ADDR_VAR 0 1
5533: PUSH
5534: LD_INT 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 4
5542: PUSH
5543: LD_INT 5
5545: PUSH
5546: LD_INT 6
5548: PUSH
5549: LD_INT 7
5551: PUSH
5552: LD_INT 8
5554: PUSH
5555: LD_INT 9
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: LD_INT 11
5563: PUSH
5564: LD_INT 12
5566: PUSH
5567: LD_INT 13
5569: PUSH
5570: LD_INT 14
5572: PUSH
5573: LD_INT 15
5575: PUSH
5576: LD_INT 16
5578: PUSH
5579: LD_INT 17
5581: PUSH
5582: LD_INT 18
5584: PUSH
5585: LD_INT 19
5587: PUSH
5588: LD_INT 20
5590: PUSH
5591: LD_INT 21
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 23
5599: PUSH
5600: LD_INT 24
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 26
5608: PUSH
5609: LD_INT 28
5611: PUSH
5612: LD_INT 30
5614: PUSH
5615: LD_INT 31
5617: PUSH
5618: LD_INT 32
5620: PUSH
5621: LD_INT 34
5623: PUSH
5624: LD_INT 36
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 101
5662: PUSH
5663: LD_INT 102
5665: PUSH
5666: LD_INT 103
5668: PUSH
5669: LD_INT 104
5671: PUSH
5672: LD_INT 105
5674: PUSH
5675: LD_INT 106
5677: PUSH
5678: LD_INT 107
5680: PUSH
5681: LD_INT 108
5683: PUSH
5684: LD_INT 109
5686: PUSH
5687: LD_INT 110
5689: PUSH
5690: LD_INT 111
5692: PUSH
5693: LD_INT 112
5695: PUSH
5696: LD_INT 114
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: ST_TO_ADDR
5718: GO 7305
5720: LD_INT 12
5722: DOUBLE
5723: EQUAL
5724: IFTRUE 5728
5726: GO 5936
5728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5729: LD_ADDR_VAR 0 1
5733: PUSH
5734: LD_INT 1
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: LD_INT 3
5742: PUSH
5743: LD_INT 4
5745: PUSH
5746: LD_INT 5
5748: PUSH
5749: LD_INT 6
5751: PUSH
5752: LD_INT 7
5754: PUSH
5755: LD_INT 8
5757: PUSH
5758: LD_INT 9
5760: PUSH
5761: LD_INT 10
5763: PUSH
5764: LD_INT 11
5766: PUSH
5767: LD_INT 12
5769: PUSH
5770: LD_INT 13
5772: PUSH
5773: LD_INT 14
5775: PUSH
5776: LD_INT 15
5778: PUSH
5779: LD_INT 16
5781: PUSH
5782: LD_INT 17
5784: PUSH
5785: LD_INT 18
5787: PUSH
5788: LD_INT 19
5790: PUSH
5791: LD_INT 20
5793: PUSH
5794: LD_INT 21
5796: PUSH
5797: LD_INT 22
5799: PUSH
5800: LD_INT 23
5802: PUSH
5803: LD_INT 24
5805: PUSH
5806: LD_INT 25
5808: PUSH
5809: LD_INT 26
5811: PUSH
5812: LD_INT 27
5814: PUSH
5815: LD_INT 28
5817: PUSH
5818: LD_INT 30
5820: PUSH
5821: LD_INT 31
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 33
5829: PUSH
5830: LD_INT 34
5832: PUSH
5833: LD_INT 36
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 101
5874: PUSH
5875: LD_INT 102
5877: PUSH
5878: LD_INT 103
5880: PUSH
5881: LD_INT 104
5883: PUSH
5884: LD_INT 105
5886: PUSH
5887: LD_INT 106
5889: PUSH
5890: LD_INT 107
5892: PUSH
5893: LD_INT 108
5895: PUSH
5896: LD_INT 109
5898: PUSH
5899: LD_INT 110
5901: PUSH
5902: LD_INT 111
5904: PUSH
5905: LD_INT 112
5907: PUSH
5908: LD_INT 113
5910: PUSH
5911: LD_INT 114
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: ST_TO_ADDR
5934: GO 7305
5936: LD_INT 13
5938: DOUBLE
5939: EQUAL
5940: IFTRUE 5944
5942: GO 6140
5944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: LD_INT 3
5958: PUSH
5959: LD_INT 4
5961: PUSH
5962: LD_INT 5
5964: PUSH
5965: LD_INT 8
5967: PUSH
5968: LD_INT 9
5970: PUSH
5971: LD_INT 10
5973: PUSH
5974: LD_INT 11
5976: PUSH
5977: LD_INT 12
5979: PUSH
5980: LD_INT 14
5982: PUSH
5983: LD_INT 15
5985: PUSH
5986: LD_INT 16
5988: PUSH
5989: LD_INT 17
5991: PUSH
5992: LD_INT 18
5994: PUSH
5995: LD_INT 19
5997: PUSH
5998: LD_INT 20
6000: PUSH
6001: LD_INT 21
6003: PUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 23
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: LD_INT 25
6015: PUSH
6016: LD_INT 26
6018: PUSH
6019: LD_INT 27
6021: PUSH
6022: LD_INT 28
6024: PUSH
6025: LD_INT 30
6027: PUSH
6028: LD_INT 31
6030: PUSH
6031: LD_INT 32
6033: PUSH
6034: LD_INT 33
6036: PUSH
6037: LD_INT 34
6039: PUSH
6040: LD_INT 36
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 101
6078: PUSH
6079: LD_INT 102
6081: PUSH
6082: LD_INT 103
6084: PUSH
6085: LD_INT 104
6087: PUSH
6088: LD_INT 105
6090: PUSH
6091: LD_INT 106
6093: PUSH
6094: LD_INT 107
6096: PUSH
6097: LD_INT 108
6099: PUSH
6100: LD_INT 109
6102: PUSH
6103: LD_INT 110
6105: PUSH
6106: LD_INT 111
6108: PUSH
6109: LD_INT 112
6111: PUSH
6112: LD_INT 113
6114: PUSH
6115: LD_INT 114
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: ST_TO_ADDR
6138: GO 7305
6140: LD_INT 14
6142: DOUBLE
6143: EQUAL
6144: IFTRUE 6148
6146: GO 6360
6148: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6149: LD_ADDR_VAR 0 1
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: LD_INT 2
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: LD_INT 4
6165: PUSH
6166: LD_INT 5
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 7
6174: PUSH
6175: LD_INT 8
6177: PUSH
6178: LD_INT 9
6180: PUSH
6181: LD_INT 10
6183: PUSH
6184: LD_INT 11
6186: PUSH
6187: LD_INT 12
6189: PUSH
6190: LD_INT 13
6192: PUSH
6193: LD_INT 14
6195: PUSH
6196: LD_INT 15
6198: PUSH
6199: LD_INT 16
6201: PUSH
6202: LD_INT 17
6204: PUSH
6205: LD_INT 18
6207: PUSH
6208: LD_INT 19
6210: PUSH
6211: LD_INT 20
6213: PUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: LD_INT 23
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: LD_INT 25
6228: PUSH
6229: LD_INT 26
6231: PUSH
6232: LD_INT 27
6234: PUSH
6235: LD_INT 28
6237: PUSH
6238: LD_INT 29
6240: PUSH
6241: LD_INT 30
6243: PUSH
6244: LD_INT 31
6246: PUSH
6247: LD_INT 32
6249: PUSH
6250: LD_INT 33
6252: PUSH
6253: LD_INT 34
6255: PUSH
6256: LD_INT 36
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 101
6298: PUSH
6299: LD_INT 102
6301: PUSH
6302: LD_INT 103
6304: PUSH
6305: LD_INT 104
6307: PUSH
6308: LD_INT 105
6310: PUSH
6311: LD_INT 106
6313: PUSH
6314: LD_INT 107
6316: PUSH
6317: LD_INT 108
6319: PUSH
6320: LD_INT 109
6322: PUSH
6323: LD_INT 110
6325: PUSH
6326: LD_INT 111
6328: PUSH
6329: LD_INT 112
6331: PUSH
6332: LD_INT 113
6334: PUSH
6335: LD_INT 114
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 7305
6360: LD_INT 15
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6580
6368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6369: LD_ADDR_VAR 0 1
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: LD_INT 7
6394: PUSH
6395: LD_INT 8
6397: PUSH
6398: LD_INT 9
6400: PUSH
6401: LD_INT 10
6403: PUSH
6404: LD_INT 11
6406: PUSH
6407: LD_INT 12
6409: PUSH
6410: LD_INT 13
6412: PUSH
6413: LD_INT 14
6415: PUSH
6416: LD_INT 15
6418: PUSH
6419: LD_INT 16
6421: PUSH
6422: LD_INT 17
6424: PUSH
6425: LD_INT 18
6427: PUSH
6428: LD_INT 19
6430: PUSH
6431: LD_INT 20
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 23
6442: PUSH
6443: LD_INT 24
6445: PUSH
6446: LD_INT 25
6448: PUSH
6449: LD_INT 26
6451: PUSH
6452: LD_INT 27
6454: PUSH
6455: LD_INT 28
6457: PUSH
6458: LD_INT 29
6460: PUSH
6461: LD_INT 30
6463: PUSH
6464: LD_INT 31
6466: PUSH
6467: LD_INT 32
6469: PUSH
6470: LD_INT 33
6472: PUSH
6473: LD_INT 34
6475: PUSH
6476: LD_INT 36
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 101
6518: PUSH
6519: LD_INT 102
6521: PUSH
6522: LD_INT 103
6524: PUSH
6525: LD_INT 104
6527: PUSH
6528: LD_INT 105
6530: PUSH
6531: LD_INT 106
6533: PUSH
6534: LD_INT 107
6536: PUSH
6537: LD_INT 108
6539: PUSH
6540: LD_INT 109
6542: PUSH
6543: LD_INT 110
6545: PUSH
6546: LD_INT 111
6548: PUSH
6549: LD_INT 112
6551: PUSH
6552: LD_INT 113
6554: PUSH
6555: LD_INT 114
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: ST_TO_ADDR
6578: GO 7305
6580: LD_INT 16
6582: DOUBLE
6583: EQUAL
6584: IFTRUE 6588
6586: GO 6712
6588: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6589: LD_ADDR_VAR 0 1
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: LD_INT 4
6599: PUSH
6600: LD_INT 5
6602: PUSH
6603: LD_INT 7
6605: PUSH
6606: LD_INT 11
6608: PUSH
6609: LD_INT 12
6611: PUSH
6612: LD_INT 15
6614: PUSH
6615: LD_INT 16
6617: PUSH
6618: LD_INT 20
6620: PUSH
6621: LD_INT 21
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 23
6629: PUSH
6630: LD_INT 25
6632: PUSH
6633: LD_INT 26
6635: PUSH
6636: LD_INT 30
6638: PUSH
6639: LD_INT 31
6641: PUSH
6642: LD_INT 32
6644: PUSH
6645: LD_INT 33
6647: PUSH
6648: LD_INT 34
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 101
6674: PUSH
6675: LD_INT 102
6677: PUSH
6678: LD_INT 103
6680: PUSH
6681: LD_INT 106
6683: PUSH
6684: LD_INT 108
6686: PUSH
6687: LD_INT 112
6689: PUSH
6690: LD_INT 113
6692: PUSH
6693: LD_INT 114
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 7305
6712: LD_INT 17
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6932
6720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6721: LD_ADDR_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: LD_INT 6
6743: PUSH
6744: LD_INT 7
6746: PUSH
6747: LD_INT 8
6749: PUSH
6750: LD_INT 9
6752: PUSH
6753: LD_INT 10
6755: PUSH
6756: LD_INT 11
6758: PUSH
6759: LD_INT 12
6761: PUSH
6762: LD_INT 13
6764: PUSH
6765: LD_INT 14
6767: PUSH
6768: LD_INT 15
6770: PUSH
6771: LD_INT 16
6773: PUSH
6774: LD_INT 17
6776: PUSH
6777: LD_INT 18
6779: PUSH
6780: LD_INT 19
6782: PUSH
6783: LD_INT 20
6785: PUSH
6786: LD_INT 21
6788: PUSH
6789: LD_INT 22
6791: PUSH
6792: LD_INT 23
6794: PUSH
6795: LD_INT 24
6797: PUSH
6798: LD_INT 25
6800: PUSH
6801: LD_INT 26
6803: PUSH
6804: LD_INT 27
6806: PUSH
6807: LD_INT 28
6809: PUSH
6810: LD_INT 29
6812: PUSH
6813: LD_INT 30
6815: PUSH
6816: LD_INT 31
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: LD_INT 33
6824: PUSH
6825: LD_INT 34
6827: PUSH
6828: LD_INT 36
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 101
6870: PUSH
6871: LD_INT 102
6873: PUSH
6874: LD_INT 103
6876: PUSH
6877: LD_INT 104
6879: PUSH
6880: LD_INT 105
6882: PUSH
6883: LD_INT 106
6885: PUSH
6886: LD_INT 107
6888: PUSH
6889: LD_INT 108
6891: PUSH
6892: LD_INT 109
6894: PUSH
6895: LD_INT 110
6897: PUSH
6898: LD_INT 111
6900: PUSH
6901: LD_INT 112
6903: PUSH
6904: LD_INT 113
6906: PUSH
6907: LD_INT 114
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7305
6932: LD_INT 18
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 7076
6940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: LD_INT 5
6954: PUSH
6955: LD_INT 7
6957: PUSH
6958: LD_INT 11
6960: PUSH
6961: LD_INT 12
6963: PUSH
6964: LD_INT 15
6966: PUSH
6967: LD_INT 16
6969: PUSH
6970: LD_INT 20
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_INT 23
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 26
6987: PUSH
6988: LD_INT 30
6990: PUSH
6991: LD_INT 31
6993: PUSH
6994: LD_INT 32
6996: PUSH
6997: LD_INT 33
6999: PUSH
7000: LD_INT 34
7002: PUSH
7003: LD_INT 35
7005: PUSH
7006: LD_INT 36
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 101
7034: PUSH
7035: LD_INT 102
7037: PUSH
7038: LD_INT 103
7040: PUSH
7041: LD_INT 106
7043: PUSH
7044: LD_INT 108
7046: PUSH
7047: LD_INT 112
7049: PUSH
7050: LD_INT 113
7052: PUSH
7053: LD_INT 114
7055: PUSH
7056: LD_INT 115
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7305
7076: LD_INT 19
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7304
7084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_INT 1
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: LD_INT 3
7098: PUSH
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: LD_INT 7
7110: PUSH
7111: LD_INT 8
7113: PUSH
7114: LD_INT 9
7116: PUSH
7117: LD_INT 10
7119: PUSH
7120: LD_INT 11
7122: PUSH
7123: LD_INT 12
7125: PUSH
7126: LD_INT 13
7128: PUSH
7129: LD_INT 14
7131: PUSH
7132: LD_INT 15
7134: PUSH
7135: LD_INT 16
7137: PUSH
7138: LD_INT 17
7140: PUSH
7141: LD_INT 18
7143: PUSH
7144: LD_INT 19
7146: PUSH
7147: LD_INT 20
7149: PUSH
7150: LD_INT 21
7152: PUSH
7153: LD_INT 22
7155: PUSH
7156: LD_INT 23
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 26
7167: PUSH
7168: LD_INT 27
7170: PUSH
7171: LD_INT 28
7173: PUSH
7174: LD_INT 29
7176: PUSH
7177: LD_INT 30
7179: PUSH
7180: LD_INT 31
7182: PUSH
7183: LD_INT 32
7185: PUSH
7186: LD_INT 33
7188: PUSH
7189: LD_INT 34
7191: PUSH
7192: LD_INT 35
7194: PUSH
7195: LD_INT 36
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 101
7238: PUSH
7239: LD_INT 102
7241: PUSH
7242: LD_INT 103
7244: PUSH
7245: LD_INT 104
7247: PUSH
7248: LD_INT 105
7250: PUSH
7251: LD_INT 106
7253: PUSH
7254: LD_INT 107
7256: PUSH
7257: LD_INT 108
7259: PUSH
7260: LD_INT 109
7262: PUSH
7263: LD_INT 110
7265: PUSH
7266: LD_INT 111
7268: PUSH
7269: LD_INT 112
7271: PUSH
7272: LD_INT 113
7274: PUSH
7275: LD_INT 114
7277: PUSH
7278: LD_INT 115
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: ST_TO_ADDR
7302: GO 7305
7304: POP
// end ; if result then
7305: LD_VAR 0 1
7309: IFFALSE 7598
// begin normal :=  ;
7311: LD_ADDR_VAR 0 3
7315: PUSH
7316: LD_STRING 
7318: ST_TO_ADDR
// hardcore :=  ;
7319: LD_ADDR_VAR 0 4
7323: PUSH
7324: LD_STRING 
7326: ST_TO_ADDR
// for i = 1 to normalCounter do
7327: LD_ADDR_VAR 0 5
7331: PUSH
7332: DOUBLE
7333: LD_INT 1
7335: DEC
7336: ST_TO_ADDR
7337: LD_EXP 22
7341: PUSH
7342: FOR_TO
7343: IFFALSE 7444
// begin tmp := 0 ;
7345: LD_ADDR_VAR 0 2
7349: PUSH
7350: LD_STRING 0
7352: ST_TO_ADDR
// if result [ 1 ] then
7353: LD_VAR 0 1
7357: PUSH
7358: LD_INT 1
7360: ARRAY
7361: IFFALSE 7426
// if result [ 1 ] [ 1 ] = i then
7363: LD_VAR 0 1
7367: PUSH
7368: LD_INT 1
7370: ARRAY
7371: PUSH
7372: LD_INT 1
7374: ARRAY
7375: PUSH
7376: LD_VAR 0 5
7380: EQUAL
7381: IFFALSE 7426
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7383: LD_ADDR_VAR 0 1
7387: PUSH
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_INT 1
7395: PPUSH
7396: LD_VAR 0 1
7400: PUSH
7401: LD_INT 1
7403: ARRAY
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: CALL_OW 3
7412: PPUSH
7413: CALL_OW 1
7417: ST_TO_ADDR
// tmp := 1 ;
7418: LD_ADDR_VAR 0 2
7422: PUSH
7423: LD_STRING 1
7425: ST_TO_ADDR
// end ; normal := normal & tmp ;
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_VAR 0 3
7435: PUSH
7436: LD_VAR 0 2
7440: STR
7441: ST_TO_ADDR
// end ;
7442: GO 7342
7444: POP
7445: POP
// for i = 1 to hardcoreCounter do
7446: LD_ADDR_VAR 0 5
7450: PUSH
7451: DOUBLE
7452: LD_INT 1
7454: DEC
7455: ST_TO_ADDR
7456: LD_EXP 23
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7567
// begin tmp := 0 ;
7464: LD_ADDR_VAR 0 2
7468: PUSH
7469: LD_STRING 0
7471: ST_TO_ADDR
// if result [ 2 ] then
7472: LD_VAR 0 1
7476: PUSH
7477: LD_INT 2
7479: ARRAY
7480: IFFALSE 7549
// if result [ 2 ] [ 1 ] = 100 + i then
7482: LD_VAR 0 1
7486: PUSH
7487: LD_INT 2
7489: ARRAY
7490: PUSH
7491: LD_INT 1
7493: ARRAY
7494: PUSH
7495: LD_INT 100
7497: PUSH
7498: LD_VAR 0 5
7502: PLUS
7503: EQUAL
7504: IFFALSE 7549
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7506: LD_ADDR_VAR 0 1
7510: PUSH
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_INT 2
7518: PPUSH
7519: LD_VAR 0 1
7523: PUSH
7524: LD_INT 2
7526: ARRAY
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 3
7535: PPUSH
7536: CALL_OW 1
7540: ST_TO_ADDR
// tmp := 1 ;
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_STRING 1
7548: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7549: LD_ADDR_VAR 0 4
7553: PUSH
7554: LD_VAR 0 4
7558: PUSH
7559: LD_VAR 0 2
7563: STR
7564: ST_TO_ADDR
// end ;
7565: GO 7461
7567: POP
7568: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7569: LD_STRING getStreamItemsFromMission("
7571: PUSH
7572: LD_VAR 0 3
7576: STR
7577: PUSH
7578: LD_STRING ","
7580: STR
7581: PUSH
7582: LD_VAR 0 4
7586: STR
7587: PUSH
7588: LD_STRING ")
7590: STR
7591: PPUSH
7592: CALL_OW 559
// end else
7596: GO 7605
// ToLua ( getStreamItemsFromMission("","") ) ;
7598: LD_STRING getStreamItemsFromMission("","")
7600: PPUSH
7601: CALL_OW 559
// end ;
7605: LD_VAR 0 1
7609: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7610: LD_VAR 0 2
7614: PUSH
7615: LD_INT 100
7617: EQUAL
7618: IFFALSE 8567
// begin if not StreamModeActive then
7620: LD_EXP 21
7624: NOT
7625: IFFALSE 7635
// StreamModeActive := true ;
7627: LD_ADDR_EXP 21
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// if p3 = 0 then
7635: LD_VAR 0 3
7639: PUSH
7640: LD_INT 0
7642: EQUAL
7643: IFFALSE 7649
// InitStreamMode ;
7645: CALL 3907 0 0
// if p3 = 1 then
7649: LD_VAR 0 3
7653: PUSH
7654: LD_INT 1
7656: EQUAL
7657: IFFALSE 7667
// sRocket := true ;
7659: LD_ADDR_EXP 26
7663: PUSH
7664: LD_INT 1
7666: ST_TO_ADDR
// if p3 = 2 then
7667: LD_VAR 0 3
7671: PUSH
7672: LD_INT 2
7674: EQUAL
7675: IFFALSE 7685
// sSpeed := true ;
7677: LD_ADDR_EXP 25
7681: PUSH
7682: LD_INT 1
7684: ST_TO_ADDR
// if p3 = 3 then
7685: LD_VAR 0 3
7689: PUSH
7690: LD_INT 3
7692: EQUAL
7693: IFFALSE 7703
// sEngine := true ;
7695: LD_ADDR_EXP 27
7699: PUSH
7700: LD_INT 1
7702: ST_TO_ADDR
// if p3 = 4 then
7703: LD_VAR 0 3
7707: PUSH
7708: LD_INT 4
7710: EQUAL
7711: IFFALSE 7721
// sSpec := true ;
7713: LD_ADDR_EXP 24
7717: PUSH
7718: LD_INT 1
7720: ST_TO_ADDR
// if p3 = 5 then
7721: LD_VAR 0 3
7725: PUSH
7726: LD_INT 5
7728: EQUAL
7729: IFFALSE 7739
// sLevel := true ;
7731: LD_ADDR_EXP 28
7735: PUSH
7736: LD_INT 1
7738: ST_TO_ADDR
// if p3 = 6 then
7739: LD_VAR 0 3
7743: PUSH
7744: LD_INT 6
7746: EQUAL
7747: IFFALSE 7757
// sArmoury := true ;
7749: LD_ADDR_EXP 29
7753: PUSH
7754: LD_INT 1
7756: ST_TO_ADDR
// if p3 = 7 then
7757: LD_VAR 0 3
7761: PUSH
7762: LD_INT 7
7764: EQUAL
7765: IFFALSE 7775
// sRadar := true ;
7767: LD_ADDR_EXP 30
7771: PUSH
7772: LD_INT 1
7774: ST_TO_ADDR
// if p3 = 8 then
7775: LD_VAR 0 3
7779: PUSH
7780: LD_INT 8
7782: EQUAL
7783: IFFALSE 7793
// sBunker := true ;
7785: LD_ADDR_EXP 31
7789: PUSH
7790: LD_INT 1
7792: ST_TO_ADDR
// if p3 = 9 then
7793: LD_VAR 0 3
7797: PUSH
7798: LD_INT 9
7800: EQUAL
7801: IFFALSE 7811
// sHack := true ;
7803: LD_ADDR_EXP 32
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// if p3 = 10 then
7811: LD_VAR 0 3
7815: PUSH
7816: LD_INT 10
7818: EQUAL
7819: IFFALSE 7829
// sFire := true ;
7821: LD_ADDR_EXP 33
7825: PUSH
7826: LD_INT 1
7828: ST_TO_ADDR
// if p3 = 11 then
7829: LD_VAR 0 3
7833: PUSH
7834: LD_INT 11
7836: EQUAL
7837: IFFALSE 7847
// sRefresh := true ;
7839: LD_ADDR_EXP 34
7843: PUSH
7844: LD_INT 1
7846: ST_TO_ADDR
// if p3 = 12 then
7847: LD_VAR 0 3
7851: PUSH
7852: LD_INT 12
7854: EQUAL
7855: IFFALSE 7865
// sExp := true ;
7857: LD_ADDR_EXP 35
7861: PUSH
7862: LD_INT 1
7864: ST_TO_ADDR
// if p3 = 13 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 13
7872: EQUAL
7873: IFFALSE 7883
// sDepot := true ;
7875: LD_ADDR_EXP 36
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// if p3 = 14 then
7883: LD_VAR 0 3
7887: PUSH
7888: LD_INT 14
7890: EQUAL
7891: IFFALSE 7901
// sFlag := true ;
7893: LD_ADDR_EXP 37
7897: PUSH
7898: LD_INT 1
7900: ST_TO_ADDR
// if p3 = 15 then
7901: LD_VAR 0 3
7905: PUSH
7906: LD_INT 15
7908: EQUAL
7909: IFFALSE 7919
// sKamikadze := true ;
7911: LD_ADDR_EXP 45
7915: PUSH
7916: LD_INT 1
7918: ST_TO_ADDR
// if p3 = 16 then
7919: LD_VAR 0 3
7923: PUSH
7924: LD_INT 16
7926: EQUAL
7927: IFFALSE 7937
// sTroll := true ;
7929: LD_ADDR_EXP 46
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// if p3 = 17 then
7937: LD_VAR 0 3
7941: PUSH
7942: LD_INT 17
7944: EQUAL
7945: IFFALSE 7955
// sSlow := true ;
7947: LD_ADDR_EXP 47
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// if p3 = 18 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 18
7962: EQUAL
7963: IFFALSE 7973
// sLack := true ;
7965: LD_ADDR_EXP 48
7969: PUSH
7970: LD_INT 1
7972: ST_TO_ADDR
// if p3 = 19 then
7973: LD_VAR 0 3
7977: PUSH
7978: LD_INT 19
7980: EQUAL
7981: IFFALSE 7991
// sTank := true ;
7983: LD_ADDR_EXP 50
7987: PUSH
7988: LD_INT 1
7990: ST_TO_ADDR
// if p3 = 20 then
7991: LD_VAR 0 3
7995: PUSH
7996: LD_INT 20
7998: EQUAL
7999: IFFALSE 8009
// sRemote := true ;
8001: LD_ADDR_EXP 51
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
// if p3 = 21 then
8009: LD_VAR 0 3
8013: PUSH
8014: LD_INT 21
8016: EQUAL
8017: IFFALSE 8027
// sPowell := true ;
8019: LD_ADDR_EXP 52
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// if p3 = 22 then
8027: LD_VAR 0 3
8031: PUSH
8032: LD_INT 22
8034: EQUAL
8035: IFFALSE 8045
// sTeleport := true ;
8037: LD_ADDR_EXP 55
8041: PUSH
8042: LD_INT 1
8044: ST_TO_ADDR
// if p3 = 23 then
8045: LD_VAR 0 3
8049: PUSH
8050: LD_INT 23
8052: EQUAL
8053: IFFALSE 8063
// sOilTower := true ;
8055: LD_ADDR_EXP 57
8059: PUSH
8060: LD_INT 1
8062: ST_TO_ADDR
// if p3 = 24 then
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 24
8070: EQUAL
8071: IFFALSE 8081
// sShovel := true ;
8073: LD_ADDR_EXP 58
8077: PUSH
8078: LD_INT 1
8080: ST_TO_ADDR
// if p3 = 25 then
8081: LD_VAR 0 3
8085: PUSH
8086: LD_INT 25
8088: EQUAL
8089: IFFALSE 8099
// sSheik := true ;
8091: LD_ADDR_EXP 59
8095: PUSH
8096: LD_INT 1
8098: ST_TO_ADDR
// if p3 = 26 then
8099: LD_VAR 0 3
8103: PUSH
8104: LD_INT 26
8106: EQUAL
8107: IFFALSE 8117
// sEarthquake := true ;
8109: LD_ADDR_EXP 61
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// if p3 = 27 then
8117: LD_VAR 0 3
8121: PUSH
8122: LD_INT 27
8124: EQUAL
8125: IFFALSE 8135
// sAI := true ;
8127: LD_ADDR_EXP 62
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
// if p3 = 28 then
8135: LD_VAR 0 3
8139: PUSH
8140: LD_INT 28
8142: EQUAL
8143: IFFALSE 8153
// sCargo := true ;
8145: LD_ADDR_EXP 65
8149: PUSH
8150: LD_INT 1
8152: ST_TO_ADDR
// if p3 = 29 then
8153: LD_VAR 0 3
8157: PUSH
8158: LD_INT 29
8160: EQUAL
8161: IFFALSE 8171
// sDLaser := true ;
8163: LD_ADDR_EXP 66
8167: PUSH
8168: LD_INT 1
8170: ST_TO_ADDR
// if p3 = 30 then
8171: LD_VAR 0 3
8175: PUSH
8176: LD_INT 30
8178: EQUAL
8179: IFFALSE 8189
// sExchange := true ;
8181: LD_ADDR_EXP 67
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// if p3 = 31 then
8189: LD_VAR 0 3
8193: PUSH
8194: LD_INT 31
8196: EQUAL
8197: IFFALSE 8207
// sFac := true ;
8199: LD_ADDR_EXP 68
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// if p3 = 32 then
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 32
8214: EQUAL
8215: IFFALSE 8225
// sPower := true ;
8217: LD_ADDR_EXP 69
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// if p3 = 33 then
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 33
8232: EQUAL
8233: IFFALSE 8243
// sRandom := true ;
8235: LD_ADDR_EXP 70
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// if p3 = 34 then
8243: LD_VAR 0 3
8247: PUSH
8248: LD_INT 34
8250: EQUAL
8251: IFFALSE 8261
// sShield := true ;
8253: LD_ADDR_EXP 71
8257: PUSH
8258: LD_INT 1
8260: ST_TO_ADDR
// if p3 = 35 then
8261: LD_VAR 0 3
8265: PUSH
8266: LD_INT 35
8268: EQUAL
8269: IFFALSE 8279
// sTime := true ;
8271: LD_ADDR_EXP 72
8275: PUSH
8276: LD_INT 1
8278: ST_TO_ADDR
// if p3 = 36 then
8279: LD_VAR 0 3
8283: PUSH
8284: LD_INT 36
8286: EQUAL
8287: IFFALSE 8297
// sTools := true ;
8289: LD_ADDR_EXP 73
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
// if p3 = 101 then
8297: LD_VAR 0 3
8301: PUSH
8302: LD_INT 101
8304: EQUAL
8305: IFFALSE 8315
// sSold := true ;
8307: LD_ADDR_EXP 38
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// if p3 = 102 then
8315: LD_VAR 0 3
8319: PUSH
8320: LD_INT 102
8322: EQUAL
8323: IFFALSE 8333
// sDiff := true ;
8325: LD_ADDR_EXP 39
8329: PUSH
8330: LD_INT 1
8332: ST_TO_ADDR
// if p3 = 103 then
8333: LD_VAR 0 3
8337: PUSH
8338: LD_INT 103
8340: EQUAL
8341: IFFALSE 8351
// sFog := true ;
8343: LD_ADDR_EXP 42
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// if p3 = 104 then
8351: LD_VAR 0 3
8355: PUSH
8356: LD_INT 104
8358: EQUAL
8359: IFFALSE 8369
// sReset := true ;
8361: LD_ADDR_EXP 43
8365: PUSH
8366: LD_INT 1
8368: ST_TO_ADDR
// if p3 = 105 then
8369: LD_VAR 0 3
8373: PUSH
8374: LD_INT 105
8376: EQUAL
8377: IFFALSE 8387
// sSun := true ;
8379: LD_ADDR_EXP 44
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// if p3 = 106 then
8387: LD_VAR 0 3
8391: PUSH
8392: LD_INT 106
8394: EQUAL
8395: IFFALSE 8405
// sTiger := true ;
8397: LD_ADDR_EXP 40
8401: PUSH
8402: LD_INT 1
8404: ST_TO_ADDR
// if p3 = 107 then
8405: LD_VAR 0 3
8409: PUSH
8410: LD_INT 107
8412: EQUAL
8413: IFFALSE 8423
// sBomb := true ;
8415: LD_ADDR_EXP 41
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// if p3 = 108 then
8423: LD_VAR 0 3
8427: PUSH
8428: LD_INT 108
8430: EQUAL
8431: IFFALSE 8441
// sWound := true ;
8433: LD_ADDR_EXP 49
8437: PUSH
8438: LD_INT 1
8440: ST_TO_ADDR
// if p3 = 109 then
8441: LD_VAR 0 3
8445: PUSH
8446: LD_INT 109
8448: EQUAL
8449: IFFALSE 8459
// sBetray := true ;
8451: LD_ADDR_EXP 53
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// if p3 = 110 then
8459: LD_VAR 0 3
8463: PUSH
8464: LD_INT 110
8466: EQUAL
8467: IFFALSE 8477
// sContamin := true ;
8469: LD_ADDR_EXP 54
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// if p3 = 111 then
8477: LD_VAR 0 3
8481: PUSH
8482: LD_INT 111
8484: EQUAL
8485: IFFALSE 8495
// sOil := true ;
8487: LD_ADDR_EXP 56
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// if p3 = 112 then
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 112
8502: EQUAL
8503: IFFALSE 8513
// sStu := true ;
8505: LD_ADDR_EXP 60
8509: PUSH
8510: LD_INT 1
8512: ST_TO_ADDR
// if p3 = 113 then
8513: LD_VAR 0 3
8517: PUSH
8518: LD_INT 113
8520: EQUAL
8521: IFFALSE 8531
// sBazooka := true ;
8523: LD_ADDR_EXP 63
8527: PUSH
8528: LD_INT 1
8530: ST_TO_ADDR
// if p3 = 114 then
8531: LD_VAR 0 3
8535: PUSH
8536: LD_INT 114
8538: EQUAL
8539: IFFALSE 8549
// sMortar := true ;
8541: LD_ADDR_EXP 64
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// if p3 = 115 then
8549: LD_VAR 0 3
8553: PUSH
8554: LD_INT 115
8556: EQUAL
8557: IFFALSE 8567
// sRanger := true ;
8559: LD_ADDR_EXP 74
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// end ; end ;
8567: PPOPN 6
8569: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8570: LD_EXP 21
8574: PUSH
8575: LD_EXP 26
8579: AND
8580: IFFALSE 8704
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
// begin enable ;
8589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_INT 22
8597: PUSH
8598: LD_OWVAR 2
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: LD_INT 34
8612: PUSH
8613: LD_INT 7
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 34
8622: PUSH
8623: LD_INT 45
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 34
8632: PUSH
8633: LD_INT 28
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 34
8642: PUSH
8643: LD_INT 47
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 69
8665: ST_TO_ADDR
// if not tmp then
8666: LD_VAR 0 2
8670: NOT
8671: IFFALSE 8675
// exit ;
8673: GO 8704
// for i in tmp do
8675: LD_ADDR_VAR 0 1
8679: PUSH
8680: LD_VAR 0 2
8684: PUSH
8685: FOR_IN
8686: IFFALSE 8702
// begin SetLives ( i , 0 ) ;
8688: LD_VAR 0 1
8692: PPUSH
8693: LD_INT 0
8695: PPUSH
8696: CALL_OW 234
// end ;
8700: GO 8685
8702: POP
8703: POP
// end ;
8704: PPOPN 2
8706: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8707: LD_EXP 21
8711: PUSH
8712: LD_EXP 27
8716: AND
8717: IFFALSE 8801
8719: GO 8721
8721: DISABLE
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
// begin enable ;
8726: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: LD_OWVAR 2
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 32
8746: PUSH
8747: LD_INT 3
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// if not tmp then
8763: LD_VAR 0 2
8767: NOT
8768: IFFALSE 8772
// exit ;
8770: GO 8801
// for i in tmp do
8772: LD_ADDR_VAR 0 1
8776: PUSH
8777: LD_VAR 0 2
8781: PUSH
8782: FOR_IN
8783: IFFALSE 8799
// begin SetLives ( i , 0 ) ;
8785: LD_VAR 0 1
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 234
// end ;
8797: GO 8782
8799: POP
8800: POP
// end ;
8801: PPOPN 2
8803: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8804: LD_EXP 21
8808: PUSH
8809: LD_EXP 24
8813: AND
8814: IFFALSE 8907
8816: GO 8818
8818: DISABLE
8819: LD_INT 0
8821: PPUSH
// begin enable ;
8822: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_OWVAR 2
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 9
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 8
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8905
// begin SetClass ( i , 1 ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 336
// end ;
8903: GO 8888
8905: POP
8906: POP
// end ;
8907: PPOPN 1
8909: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8910: LD_EXP 21
8914: PUSH
8915: LD_EXP 25
8919: AND
8920: PUSH
8921: LD_OWVAR 65
8925: PUSH
8926: LD_INT 7
8928: LESS
8929: AND
8930: IFFALSE 8944
8932: GO 8934
8934: DISABLE
// begin enable ;
8935: ENABLE
// game_speed := 7 ;
8936: LD_ADDR_OWVAR 65
8940: PUSH
8941: LD_INT 7
8943: ST_TO_ADDR
// end ;
8944: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8945: LD_EXP 21
8949: PUSH
8950: LD_EXP 28
8954: AND
8955: IFFALSE 9157
8957: GO 8959
8959: DISABLE
8960: LD_INT 0
8962: PPUSH
8963: PPUSH
8964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8965: LD_ADDR_VAR 0 3
8969: PUSH
8970: LD_INT 81
8972: PUSH
8973: LD_OWVAR 2
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 21
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 69
9000: ST_TO_ADDR
// if not tmp then
9001: LD_VAR 0 3
9005: NOT
9006: IFFALSE 9010
// exit ;
9008: GO 9157
// if tmp > 5 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 5
9017: GREATER
9018: IFFALSE 9030
// k := 5 else
9020: LD_ADDR_VAR 0 2
9024: PUSH
9025: LD_INT 5
9027: ST_TO_ADDR
9028: GO 9040
// k := tmp ;
9030: LD_ADDR_VAR 0 2
9034: PUSH
9035: LD_VAR 0 3
9039: ST_TO_ADDR
// for i := 1 to k do
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: DOUBLE
9046: LD_INT 1
9048: DEC
9049: ST_TO_ADDR
9050: LD_VAR 0 2
9054: PUSH
9055: FOR_TO
9056: IFFALSE 9155
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_VAR 0 1
9067: ARRAY
9068: PPUSH
9069: LD_VAR 0 1
9073: PUSH
9074: LD_INT 4
9076: MOD
9077: PUSH
9078: LD_INT 1
9080: PLUS
9081: PPUSH
9082: CALL_OW 259
9086: PUSH
9087: LD_INT 10
9089: LESS
9090: IFFALSE 9153
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9092: LD_VAR 0 3
9096: PUSH
9097: LD_VAR 0 1
9101: ARRAY
9102: PPUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_INT 4
9110: MOD
9111: PUSH
9112: LD_INT 1
9114: PLUS
9115: PPUSH
9116: LD_VAR 0 3
9120: PUSH
9121: LD_VAR 0 1
9125: ARRAY
9126: PPUSH
9127: LD_VAR 0 1
9131: PUSH
9132: LD_INT 4
9134: MOD
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: PPUSH
9140: CALL_OW 259
9144: PUSH
9145: LD_INT 1
9147: PLUS
9148: PPUSH
9149: CALL_OW 237
9153: GO 9055
9155: POP
9156: POP
// end ;
9157: PPOPN 3
9159: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9160: LD_EXP 21
9164: PUSH
9165: LD_EXP 29
9169: AND
9170: IFFALSE 9190
9172: GO 9174
9174: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9175: LD_INT 4
9177: PPUSH
9178: LD_OWVAR 2
9182: PPUSH
9183: LD_INT 0
9185: PPUSH
9186: CALL_OW 324
9190: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9191: LD_EXP 21
9195: PUSH
9196: LD_EXP 58
9200: AND
9201: IFFALSE 9221
9203: GO 9205
9205: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9206: LD_INT 19
9208: PPUSH
9209: LD_OWVAR 2
9213: PPUSH
9214: LD_INT 0
9216: PPUSH
9217: CALL_OW 324
9221: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9222: LD_EXP 21
9226: PUSH
9227: LD_EXP 30
9231: AND
9232: IFFALSE 9334
9234: GO 9236
9236: DISABLE
9237: LD_INT 0
9239: PPUSH
9240: PPUSH
// begin enable ;
9241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 22
9249: PUSH
9250: LD_OWVAR 2
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 2
9261: PUSH
9262: LD_INT 34
9264: PUSH
9265: LD_INT 11
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 34
9274: PUSH
9275: LD_INT 30
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: LIST
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PPUSH
9291: CALL_OW 69
9295: ST_TO_ADDR
// if not tmp then
9296: LD_VAR 0 2
9300: NOT
9301: IFFALSE 9305
// exit ;
9303: GO 9334
// for i in tmp do
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: LD_VAR 0 2
9314: PUSH
9315: FOR_IN
9316: IFFALSE 9332
// begin SetLives ( i , 0 ) ;
9318: LD_VAR 0 1
9322: PPUSH
9323: LD_INT 0
9325: PPUSH
9326: CALL_OW 234
// end ;
9330: GO 9315
9332: POP
9333: POP
// end ;
9334: PPOPN 2
9336: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9337: LD_EXP 21
9341: PUSH
9342: LD_EXP 31
9346: AND
9347: IFFALSE 9367
9349: GO 9351
9351: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9352: LD_INT 32
9354: PPUSH
9355: LD_OWVAR 2
9359: PPUSH
9360: LD_INT 0
9362: PPUSH
9363: CALL_OW 324
9367: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9368: LD_EXP 21
9372: PUSH
9373: LD_EXP 32
9377: AND
9378: IFFALSE 9559
9380: GO 9382
9382: DISABLE
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
9387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9388: LD_ADDR_VAR 0 2
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_OWVAR 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 33
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 69
9423: ST_TO_ADDR
// if not tmp then
9424: LD_VAR 0 2
9428: NOT
9429: IFFALSE 9433
// exit ;
9431: GO 9559
// side := 0 ;
9433: LD_ADDR_VAR 0 3
9437: PUSH
9438: LD_INT 0
9440: ST_TO_ADDR
// for i := 1 to 8 do
9441: LD_ADDR_VAR 0 1
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_INT 8
9453: PUSH
9454: FOR_TO
9455: IFFALSE 9503
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9457: LD_OWVAR 2
9461: PUSH
9462: LD_VAR 0 1
9466: NONEQUAL
9467: PUSH
9468: LD_OWVAR 2
9472: PPUSH
9473: LD_VAR 0 1
9477: PPUSH
9478: CALL_OW 81
9482: PUSH
9483: LD_INT 2
9485: EQUAL
9486: AND
9487: IFFALSE 9501
// begin side := i ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: LD_VAR 0 1
9498: ST_TO_ADDR
// break ;
9499: GO 9503
// end ;
9501: GO 9454
9503: POP
9504: POP
// if not side then
9505: LD_VAR 0 3
9509: NOT
9510: IFFALSE 9514
// exit ;
9512: GO 9559
// for i := 1 to tmp do
9514: LD_ADDR_VAR 0 1
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_VAR 0 2
9528: PUSH
9529: FOR_TO
9530: IFFALSE 9557
// if Prob ( 60 ) then
9532: LD_INT 60
9534: PPUSH
9535: CALL_OW 13
9539: IFFALSE 9555
// SetSide ( i , side ) ;
9541: LD_VAR 0 1
9545: PPUSH
9546: LD_VAR 0 3
9550: PPUSH
9551: CALL_OW 235
9555: GO 9529
9557: POP
9558: POP
// end ;
9559: PPOPN 3
9561: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9562: LD_EXP 21
9566: PUSH
9567: LD_EXP 34
9571: AND
9572: IFFALSE 9691
9574: GO 9576
9576: DISABLE
9577: LD_INT 0
9579: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_OWVAR 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: LD_INT 23
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 69
9633: PUSH
9634: FOR_IN
9635: IFFALSE 9689
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 257
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 4
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: IN
9665: IFFALSE 9687
// SetClass ( un , rand ( 1 , 4 ) ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: LD_INT 4
9677: PPUSH
9678: CALL_OW 12
9682: PPUSH
9683: CALL_OW 336
9687: GO 9634
9689: POP
9690: POP
// end ;
9691: PPOPN 1
9693: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9694: LD_EXP 21
9698: PUSH
9699: LD_EXP 33
9703: AND
9704: IFFALSE 9783
9706: GO 9708
9708: DISABLE
9709: LD_INT 0
9711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9712: LD_ADDR_VAR 0 1
9716: PUSH
9717: LD_INT 22
9719: PUSH
9720: LD_OWVAR 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 21
9731: PUSH
9732: LD_INT 3
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 69
9747: ST_TO_ADDR
// if not tmp then
9748: LD_VAR 0 1
9752: NOT
9753: IFFALSE 9757
// exit ;
9755: GO 9783
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9757: LD_VAR 0 1
9761: PUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 1
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: PPUSH
9776: LD_INT 100
9778: PPUSH
9779: CALL_OW 234
// end ;
9783: PPOPN 1
9785: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9786: LD_EXP 21
9790: PUSH
9791: LD_EXP 35
9795: AND
9796: IFFALSE 9894
9798: GO 9800
9800: DISABLE
9801: LD_INT 0
9803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9804: LD_ADDR_VAR 0 1
9808: PUSH
9809: LD_INT 22
9811: PUSH
9812: LD_OWVAR 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 1
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: ST_TO_ADDR
// if not tmp then
9840: LD_VAR 0 1
9844: NOT
9845: IFFALSE 9849
// exit ;
9847: GO 9894
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9849: LD_VAR 0 1
9853: PUSH
9854: LD_INT 1
9856: PPUSH
9857: LD_VAR 0 1
9861: PPUSH
9862: CALL_OW 12
9866: ARRAY
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: LD_INT 4
9873: PPUSH
9874: CALL_OW 12
9878: PPUSH
9879: LD_INT 3000
9881: PPUSH
9882: LD_INT 9000
9884: PPUSH
9885: CALL_OW 12
9889: PPUSH
9890: CALL_OW 492
// end ;
9894: PPOPN 1
9896: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9897: LD_EXP 21
9901: PUSH
9902: LD_EXP 36
9906: AND
9907: IFFALSE 9927
9909: GO 9911
9911: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9912: LD_INT 1
9914: PPUSH
9915: LD_OWVAR 2
9919: PPUSH
9920: LD_INT 0
9922: PPUSH
9923: CALL_OW 324
9927: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9928: LD_EXP 21
9932: PUSH
9933: LD_EXP 37
9937: AND
9938: IFFALSE 10021
9940: GO 9942
9942: DISABLE
9943: LD_INT 0
9945: PPUSH
9946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: LD_INT 22
9954: PUSH
9955: LD_OWVAR 2
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 21
9966: PUSH
9967: LD_INT 3
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 69
9982: ST_TO_ADDR
// if not tmp then
9983: LD_VAR 0 2
9987: NOT
9988: IFFALSE 9992
// exit ;
9990: GO 10021
// for i in tmp do
9992: LD_ADDR_VAR 0 1
9996: PUSH
9997: LD_VAR 0 2
10001: PUSH
10002: FOR_IN
10003: IFFALSE 10019
// SetBLevel ( i , 10 ) ;
10005: LD_VAR 0 1
10009: PPUSH
10010: LD_INT 10
10012: PPUSH
10013: CALL_OW 241
10017: GO 10002
10019: POP
10020: POP
// end ;
10021: PPOPN 2
10023: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10024: LD_EXP 21
10028: PUSH
10029: LD_EXP 38
10033: AND
10034: IFFALSE 10145
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
10042: PPUSH
10043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10044: LD_ADDR_VAR 0 3
10048: PUSH
10049: LD_INT 22
10051: PUSH
10052: LD_OWVAR 2
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 25
10063: PUSH
10064: LD_INT 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: ST_TO_ADDR
// if not tmp then
10080: LD_VAR 0 3
10084: NOT
10085: IFFALSE 10089
// exit ;
10087: GO 10145
// un := tmp [ rand ( 1 , tmp ) ] ;
10089: LD_ADDR_VAR 0 2
10093: PUSH
10094: LD_VAR 0 3
10098: PUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: CALL_OW 12
10111: ARRAY
10112: ST_TO_ADDR
// if Crawls ( un ) then
10113: LD_VAR 0 2
10117: PPUSH
10118: CALL_OW 318
10122: IFFALSE 10133
// ComWalk ( un ) ;
10124: LD_VAR 0 2
10128: PPUSH
10129: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10133: LD_VAR 0 2
10137: PPUSH
10138: LD_INT 5
10140: PPUSH
10141: CALL_OW 336
// end ;
10145: PPOPN 3
10147: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10148: LD_EXP 21
10152: PUSH
10153: LD_EXP 39
10157: AND
10158: PUSH
10159: LD_OWVAR 67
10163: PUSH
10164: LD_INT 3
10166: LESS
10167: AND
10168: IFFALSE 10187
10170: GO 10172
10172: DISABLE
// Difficulty := Difficulty + 1 ;
10173: LD_ADDR_OWVAR 67
10177: PUSH
10178: LD_OWVAR 67
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: ST_TO_ADDR
10187: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10188: LD_EXP 21
10192: PUSH
10193: LD_EXP 40
10197: AND
10198: IFFALSE 10301
10200: GO 10202
10202: DISABLE
10203: LD_INT 0
10205: PPUSH
// begin for i := 1 to 5 do
10206: LD_ADDR_VAR 0 1
10210: PUSH
10211: DOUBLE
10212: LD_INT 1
10214: DEC
10215: ST_TO_ADDR
10216: LD_INT 5
10218: PUSH
10219: FOR_TO
10220: IFFALSE 10299
// begin uc_nation := nation_nature ;
10222: LD_ADDR_OWVAR 21
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// uc_side := 0 ;
10230: LD_ADDR_OWVAR 20
10234: PUSH
10235: LD_INT 0
10237: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10238: LD_ADDR_OWVAR 29
10242: PUSH
10243: LD_INT 12
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: ST_TO_ADDR
// hc_agressivity := 20 ;
10253: LD_ADDR_OWVAR 35
10257: PUSH
10258: LD_INT 20
10260: ST_TO_ADDR
// hc_class := class_tiger ;
10261: LD_ADDR_OWVAR 28
10265: PUSH
10266: LD_INT 14
10268: ST_TO_ADDR
// hc_gallery :=  ;
10269: LD_ADDR_OWVAR 33
10273: PUSH
10274: LD_STRING 
10276: ST_TO_ADDR
// hc_name :=  ;
10277: LD_ADDR_OWVAR 26
10281: PUSH
10282: LD_STRING 
10284: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_INT 0
10292: PPUSH
10293: CALL_OW 51
// end ;
10297: GO 10219
10299: POP
10300: POP
// end ;
10301: PPOPN 1
10303: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10304: LD_EXP 21
10308: PUSH
10309: LD_EXP 41
10313: AND
10314: IFFALSE 10323
10316: GO 10318
10318: DISABLE
// StreamSibBomb ;
10319: CALL 10324 0 0
10323: END
// export function StreamSibBomb ; var i , x , y ; begin
10324: LD_INT 0
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
// result := false ;
10330: LD_ADDR_VAR 0 1
10334: PUSH
10335: LD_INT 0
10337: ST_TO_ADDR
// for i := 1 to 16 do
10338: LD_ADDR_VAR 0 2
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_INT 16
10350: PUSH
10351: FOR_TO
10352: IFFALSE 10551
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10354: LD_ADDR_VAR 0 3
10358: PUSH
10359: LD_INT 10
10361: PUSH
10362: LD_INT 20
10364: PUSH
10365: LD_INT 30
10367: PUSH
10368: LD_INT 40
10370: PUSH
10371: LD_INT 50
10373: PUSH
10374: LD_INT 60
10376: PUSH
10377: LD_INT 70
10379: PUSH
10380: LD_INT 80
10382: PUSH
10383: LD_INT 90
10385: PUSH
10386: LD_INT 100
10388: PUSH
10389: LD_INT 110
10391: PUSH
10392: LD_INT 120
10394: PUSH
10395: LD_INT 130
10397: PUSH
10398: LD_INT 140
10400: PUSH
10401: LD_INT 150
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 1
10423: PPUSH
10424: LD_INT 15
10426: PPUSH
10427: CALL_OW 12
10431: ARRAY
10432: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10433: LD_ADDR_VAR 0 4
10437: PUSH
10438: LD_INT 10
10440: PUSH
10441: LD_INT 20
10443: PUSH
10444: LD_INT 30
10446: PUSH
10447: LD_INT 40
10449: PUSH
10450: LD_INT 50
10452: PUSH
10453: LD_INT 60
10455: PUSH
10456: LD_INT 70
10458: PUSH
10459: LD_INT 80
10461: PUSH
10462: LD_INT 90
10464: PUSH
10465: LD_INT 100
10467: PUSH
10468: LD_INT 110
10470: PUSH
10471: LD_INT 120
10473: PUSH
10474: LD_INT 130
10476: PUSH
10477: LD_INT 140
10479: PUSH
10480: LD_INT 150
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 1
10502: PPUSH
10503: LD_INT 15
10505: PPUSH
10506: CALL_OW 12
10510: ARRAY
10511: ST_TO_ADDR
// if ValidHex ( x , y ) then
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_VAR 0 4
10521: PPUSH
10522: CALL_OW 488
10526: IFFALSE 10549
// begin result := [ x , y ] ;
10528: LD_ADDR_VAR 0 1
10532: PUSH
10533: LD_VAR 0 3
10537: PUSH
10538: LD_VAR 0 4
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: ST_TO_ADDR
// break ;
10547: GO 10551
// end ; end ;
10549: GO 10351
10551: POP
10552: POP
// if result then
10553: LD_VAR 0 1
10557: IFFALSE 10617
// begin ToLua ( playSibBomb() ) ;
10559: LD_STRING playSibBomb()
10561: PPUSH
10562: CALL_OW 559
// wait ( 0 0$14 ) ;
10566: LD_INT 490
10568: PPUSH
10569: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10573: LD_VAR 0 1
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: PPUSH
10582: LD_VAR 0 1
10586: PUSH
10587: LD_INT 2
10589: ARRAY
10590: PPUSH
10591: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10595: LD_VAR 0 1
10599: PUSH
10600: LD_INT 1
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 1
10608: PUSH
10609: LD_INT 2
10611: ARRAY
10612: PPUSH
10613: CALL_OW 429
// end ; end ;
10617: LD_VAR 0 1
10621: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10622: LD_EXP 21
10626: PUSH
10627: LD_EXP 43
10631: AND
10632: IFFALSE 10644
10634: GO 10636
10636: DISABLE
// YouLost (  ) ;
10637: LD_STRING 
10639: PPUSH
10640: CALL_OW 104
10644: END
// every 0 0$1 trigger StreamModeActive and sFog do
10645: LD_EXP 21
10649: PUSH
10650: LD_EXP 42
10654: AND
10655: IFFALSE 10669
10657: GO 10659
10659: DISABLE
// FogOff ( your_side ) ;
10660: LD_OWVAR 2
10664: PPUSH
10665: CALL_OW 344
10669: END
// every 0 0$1 trigger StreamModeActive and sSun do
10670: LD_EXP 21
10674: PUSH
10675: LD_EXP 44
10679: AND
10680: IFFALSE 10708
10682: GO 10684
10684: DISABLE
// begin solar_recharge_percent := 0 ;
10685: LD_ADDR_OWVAR 79
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10693: LD_INT 10500
10695: PPUSH
10696: CALL_OW 67
// solar_recharge_percent := 100 ;
10700: LD_ADDR_OWVAR 79
10704: PUSH
10705: LD_INT 100
10707: ST_TO_ADDR
// end ;
10708: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10709: LD_EXP 21
10713: PUSH
10714: LD_EXP 45
10718: AND
10719: IFFALSE 10958
10721: GO 10723
10723: DISABLE
10724: LD_INT 0
10726: PPUSH
10727: PPUSH
10728: PPUSH
// begin tmp := [ ] ;
10729: LD_ADDR_VAR 0 3
10733: PUSH
10734: EMPTY
10735: ST_TO_ADDR
// for i := 1 to 6 do
10736: LD_ADDR_VAR 0 1
10740: PUSH
10741: DOUBLE
10742: LD_INT 1
10744: DEC
10745: ST_TO_ADDR
10746: LD_INT 6
10748: PUSH
10749: FOR_TO
10750: IFFALSE 10855
// begin uc_nation := nation_nature ;
10752: LD_ADDR_OWVAR 21
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// uc_side := 0 ;
10760: LD_ADDR_OWVAR 20
10764: PUSH
10765: LD_INT 0
10767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10768: LD_ADDR_OWVAR 29
10772: PUSH
10773: LD_INT 12
10775: PUSH
10776: LD_INT 12
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: ST_TO_ADDR
// hc_agressivity := 20 ;
10783: LD_ADDR_OWVAR 35
10787: PUSH
10788: LD_INT 20
10790: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10791: LD_ADDR_OWVAR 28
10795: PUSH
10796: LD_INT 17
10798: ST_TO_ADDR
// hc_gallery :=  ;
10799: LD_ADDR_OWVAR 33
10803: PUSH
10804: LD_STRING 
10806: ST_TO_ADDR
// hc_name :=  ;
10807: LD_ADDR_OWVAR 26
10811: PUSH
10812: LD_STRING 
10814: ST_TO_ADDR
// un := CreateHuman ;
10815: LD_ADDR_VAR 0 2
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10825: LD_VAR 0 2
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 51
// tmp := tmp ^ un ;
10837: LD_ADDR_VAR 0 3
10841: PUSH
10842: LD_VAR 0 3
10846: PUSH
10847: LD_VAR 0 2
10851: ADD
10852: ST_TO_ADDR
// end ;
10853: GO 10749
10855: POP
10856: POP
// repeat wait ( 0 0$1 ) ;
10857: LD_INT 35
10859: PPUSH
10860: CALL_OW 67
// for un in tmp do
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: LD_VAR 0 3
10873: PUSH
10874: FOR_IN
10875: IFFALSE 10949
// begin if IsDead ( un ) then
10877: LD_VAR 0 2
10881: PPUSH
10882: CALL_OW 301
10886: IFFALSE 10906
// begin tmp := tmp diff un ;
10888: LD_ADDR_VAR 0 3
10892: PUSH
10893: LD_VAR 0 3
10897: PUSH
10898: LD_VAR 0 2
10902: DIFF
10903: ST_TO_ADDR
// continue ;
10904: GO 10874
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10906: LD_VAR 0 2
10910: PPUSH
10911: LD_INT 3
10913: PUSH
10914: LD_INT 22
10916: PUSH
10917: LD_INT 0
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PPUSH
10928: CALL_OW 69
10932: PPUSH
10933: LD_VAR 0 2
10937: PPUSH
10938: CALL_OW 74
10942: PPUSH
10943: CALL_OW 115
// end ;
10947: GO 10874
10949: POP
10950: POP
// until not tmp ;
10951: LD_VAR 0 3
10955: NOT
10956: IFFALSE 10857
// end ;
10958: PPOPN 3
10960: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10961: LD_EXP 21
10965: PUSH
10966: LD_EXP 46
10970: AND
10971: IFFALSE 11025
10973: GO 10975
10975: DISABLE
// begin ToLua ( displayTroll(); ) ;
10976: LD_STRING displayTroll();
10978: PPUSH
10979: CALL_OW 559
// wait ( 3 3$00 ) ;
10983: LD_INT 6300
10985: PPUSH
10986: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10990: LD_STRING hideTroll();
10992: PPUSH
10993: CALL_OW 559
// wait ( 1 1$00 ) ;
10997: LD_INT 2100
10999: PPUSH
11000: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11004: LD_STRING displayTroll();
11006: PPUSH
11007: CALL_OW 559
// wait ( 1 1$00 ) ;
11011: LD_INT 2100
11013: PPUSH
11014: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11018: LD_STRING hideTroll();
11020: PPUSH
11021: CALL_OW 559
// end ;
11025: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11026: LD_EXP 21
11030: PUSH
11031: LD_EXP 47
11035: AND
11036: IFFALSE 11099
11038: GO 11040
11040: DISABLE
11041: LD_INT 0
11043: PPUSH
// begin p := 0 ;
11044: LD_ADDR_VAR 0 1
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// repeat game_speed := 1 ;
11052: LD_ADDR_OWVAR 65
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11060: LD_INT 35
11062: PPUSH
11063: CALL_OW 67
// p := p + 1 ;
11067: LD_ADDR_VAR 0 1
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: ST_TO_ADDR
// until p >= 60 ;
11081: LD_VAR 0 1
11085: PUSH
11086: LD_INT 60
11088: GREATEREQUAL
11089: IFFALSE 11052
// game_speed := 4 ;
11091: LD_ADDR_OWVAR 65
11095: PUSH
11096: LD_INT 4
11098: ST_TO_ADDR
// end ;
11099: PPOPN 1
11101: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11102: LD_EXP 21
11106: PUSH
11107: LD_EXP 48
11111: AND
11112: IFFALSE 11258
11114: GO 11116
11116: DISABLE
11117: LD_INT 0
11119: PPUSH
11120: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11121: LD_ADDR_VAR 0 1
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_OWVAR 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 30
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 69
11174: ST_TO_ADDR
// if not depot then
11175: LD_VAR 0 1
11179: NOT
11180: IFFALSE 11184
// exit ;
11182: GO 11258
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11184: LD_ADDR_VAR 0 2
11188: PUSH
11189: LD_VAR 0 1
11193: PUSH
11194: LD_INT 1
11196: PPUSH
11197: LD_VAR 0 1
11201: PPUSH
11202: CALL_OW 12
11206: ARRAY
11207: PPUSH
11208: CALL_OW 274
11212: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11213: LD_VAR 0 2
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11228: LD_VAR 0 2
11232: PPUSH
11233: LD_INT 2
11235: PPUSH
11236: LD_INT 0
11238: PPUSH
11239: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11243: LD_VAR 0 2
11247: PPUSH
11248: LD_INT 3
11250: PPUSH
11251: LD_INT 0
11253: PPUSH
11254: CALL_OW 277
// end ;
11258: PPOPN 2
11260: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11261: LD_EXP 21
11265: PUSH
11266: LD_EXP 49
11270: AND
11271: IFFALSE 11368
11273: GO 11275
11275: DISABLE
11276: LD_INT 0
11278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11279: LD_ADDR_VAR 0 1
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_OWVAR 2
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 21
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: LD_INT 23
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: ST_TO_ADDR
// if not tmp then
11333: LD_VAR 0 1
11337: NOT
11338: IFFALSE 11342
// exit ;
11340: GO 11368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11342: LD_VAR 0 1
11346: PUSH
11347: LD_INT 1
11349: PPUSH
11350: LD_VAR 0 1
11354: PPUSH
11355: CALL_OW 12
11359: ARRAY
11360: PPUSH
11361: LD_INT 200
11363: PPUSH
11364: CALL_OW 234
// end ;
11368: PPOPN 1
11370: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11371: LD_EXP 21
11375: PUSH
11376: LD_EXP 50
11380: AND
11381: IFFALSE 11460
11383: GO 11385
11385: DISABLE
11386: LD_INT 0
11388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11389: LD_ADDR_VAR 0 1
11393: PUSH
11394: LD_INT 22
11396: PUSH
11397: LD_OWVAR 2
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 21
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 69
11424: ST_TO_ADDR
// if not tmp then
11425: LD_VAR 0 1
11429: NOT
11430: IFFALSE 11434
// exit ;
11432: GO 11460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11434: LD_VAR 0 1
11438: PUSH
11439: LD_INT 1
11441: PPUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 12
11451: ARRAY
11452: PPUSH
11453: LD_INT 60
11455: PPUSH
11456: CALL_OW 234
// end ;
11460: PPOPN 1
11462: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11463: LD_EXP 21
11467: PUSH
11468: LD_EXP 51
11472: AND
11473: IFFALSE 11572
11475: GO 11477
11477: DISABLE
11478: LD_INT 0
11480: PPUSH
11481: PPUSH
// begin enable ;
11482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: LD_INT 22
11490: PUSH
11491: LD_OWVAR 2
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 61
11502: PUSH
11503: EMPTY
11504: LIST
11505: PUSH
11506: LD_INT 33
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: ST_TO_ADDR
// if not tmp then
11526: LD_VAR 0 1
11530: NOT
11531: IFFALSE 11535
// exit ;
11533: GO 11572
// for i in tmp do
11535: LD_ADDR_VAR 0 2
11539: PUSH
11540: LD_VAR 0 1
11544: PUSH
11545: FOR_IN
11546: IFFALSE 11570
// if IsControledBy ( i ) then
11548: LD_VAR 0 2
11552: PPUSH
11553: CALL_OW 312
11557: IFFALSE 11568
// ComUnlink ( i ) ;
11559: LD_VAR 0 2
11563: PPUSH
11564: CALL_OW 136
11568: GO 11545
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11575: LD_EXP 21
11579: PUSH
11580: LD_EXP 52
11584: AND
11585: IFFALSE 11725
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
// begin ToLua ( displayPowell(); ) ;
11594: LD_STRING displayPowell();
11596: PPUSH
11597: CALL_OW 559
// uc_side := 0 ;
11601: LD_ADDR_OWVAR 20
11605: PUSH
11606: LD_INT 0
11608: ST_TO_ADDR
// uc_nation := 2 ;
11609: LD_ADDR_OWVAR 21
11613: PUSH
11614: LD_INT 2
11616: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11617: LD_ADDR_OWVAR 37
11621: PUSH
11622: LD_INT 14
11624: ST_TO_ADDR
// vc_engine := engine_siberite ;
11625: LD_ADDR_OWVAR 39
11629: PUSH
11630: LD_INT 3
11632: ST_TO_ADDR
// vc_control := control_apeman ;
11633: LD_ADDR_OWVAR 38
11637: PUSH
11638: LD_INT 5
11640: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11641: LD_ADDR_OWVAR 40
11645: PUSH
11646: LD_INT 29
11648: ST_TO_ADDR
// un := CreateVehicle ;
11649: LD_ADDR_VAR 0 2
11653: PUSH
11654: CALL_OW 45
11658: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11659: LD_VAR 0 2
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11671: LD_INT 35
11673: PPUSH
11674: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11678: LD_VAR 0 2
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_OWVAR 2
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PPUSH
11695: CALL_OW 69
11699: PPUSH
11700: LD_VAR 0 2
11704: PPUSH
11705: CALL_OW 74
11709: PPUSH
11710: CALL_OW 115
// until IsDead ( un ) ;
11714: LD_VAR 0 2
11718: PPUSH
11719: CALL_OW 301
11723: IFFALSE 11671
// end ;
11725: PPOPN 2
11727: END
// every 0 0$1 trigger StreamModeActive and sStu do
11728: LD_EXP 21
11732: PUSH
11733: LD_EXP 60
11737: AND
11738: IFFALSE 11754
11740: GO 11742
11742: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11743: LD_STRING displayStucuk();
11745: PPUSH
11746: CALL_OW 559
// ResetFog ;
11750: CALL_OW 335
// end ;
11754: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11755: LD_EXP 21
11759: PUSH
11760: LD_EXP 53
11764: AND
11765: IFFALSE 11906
11767: GO 11769
11769: DISABLE
11770: LD_INT 0
11772: PPUSH
11773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11774: LD_ADDR_VAR 0 2
11778: PUSH
11779: LD_INT 22
11781: PUSH
11782: LD_OWVAR 2
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 21
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: ST_TO_ADDR
// if not tmp then
11810: LD_VAR 0 2
11814: NOT
11815: IFFALSE 11819
// exit ;
11817: GO 11906
// un := tmp [ rand ( 1 , tmp ) ] ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_VAR 0 2
11828: PUSH
11829: LD_INT 1
11831: PPUSH
11832: LD_VAR 0 2
11836: PPUSH
11837: CALL_OW 12
11841: ARRAY
11842: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11843: LD_VAR 0 1
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11855: LD_VAR 0 1
11859: PPUSH
11860: LD_OWVAR 3
11864: PUSH
11865: LD_VAR 0 1
11869: DIFF
11870: PPUSH
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 74
11880: PPUSH
11881: CALL_OW 115
// wait ( 0 0$20 ) ;
11885: LD_INT 700
11887: PPUSH
11888: CALL_OW 67
// SetSide ( un , your_side ) ;
11892: LD_VAR 0 1
11896: PPUSH
11897: LD_OWVAR 2
11901: PPUSH
11902: CALL_OW 235
// end ;
11906: PPOPN 2
11908: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11909: LD_EXP 21
11913: PUSH
11914: LD_EXP 54
11918: AND
11919: IFFALSE 12025
11921: GO 11923
11923: DISABLE
11924: LD_INT 0
11926: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11927: LD_ADDR_VAR 0 1
11931: PUSH
11932: LD_INT 22
11934: PUSH
11935: LD_OWVAR 2
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: LD_INT 30
11949: PUSH
11950: LD_INT 0
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 1
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PPUSH
11976: CALL_OW 69
11980: ST_TO_ADDR
// if not depot then
11981: LD_VAR 0 1
11985: NOT
11986: IFFALSE 11990
// exit ;
11988: GO 12025
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 1
11997: ARRAY
11998: PPUSH
11999: CALL_OW 250
12003: PPUSH
12004: LD_VAR 0 1
12008: PUSH
12009: LD_INT 1
12011: ARRAY
12012: PPUSH
12013: CALL_OW 251
12017: PPUSH
12018: LD_INT 70
12020: PPUSH
12021: CALL_OW 495
// end ;
12025: PPOPN 1
12027: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12028: LD_EXP 21
12032: PUSH
12033: LD_EXP 55
12037: AND
12038: IFFALSE 12249
12040: GO 12042
12042: DISABLE
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12050: LD_ADDR_VAR 0 5
12054: PUSH
12055: LD_INT 22
12057: PUSH
12058: LD_OWVAR 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 21
12069: PUSH
12070: LD_INT 1
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: ST_TO_ADDR
// if not tmp then
12086: LD_VAR 0 5
12090: NOT
12091: IFFALSE 12095
// exit ;
12093: GO 12249
// for i in tmp do
12095: LD_ADDR_VAR 0 1
12099: PUSH
12100: LD_VAR 0 5
12104: PUSH
12105: FOR_IN
12106: IFFALSE 12247
// begin d := rand ( 0 , 5 ) ;
12108: LD_ADDR_VAR 0 4
12112: PUSH
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 5
12118: PPUSH
12119: CALL_OW 12
12123: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 250
12138: PPUSH
12139: LD_VAR 0 4
12143: PPUSH
12144: LD_INT 3
12146: PPUSH
12147: LD_INT 12
12149: PPUSH
12150: CALL_OW 12
12154: PPUSH
12155: CALL_OW 272
12159: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12160: LD_ADDR_VAR 0 3
12164: PUSH
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 251
12174: PPUSH
12175: LD_VAR 0 4
12179: PPUSH
12180: LD_INT 3
12182: PPUSH
12183: LD_INT 12
12185: PPUSH
12186: CALL_OW 12
12190: PPUSH
12191: CALL_OW 273
12195: ST_TO_ADDR
// if ValidHex ( x , y ) then
12196: LD_VAR 0 2
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: CALL_OW 488
12210: IFFALSE 12245
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_VAR 0 2
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 3
12229: PPUSH
12230: LD_INT 6
12232: PPUSH
12233: CALL_OW 12
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: CALL_OW 483
// end ;
12245: GO 12105
12247: POP
12248: POP
// end ;
12249: PPOPN 5
12251: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12252: LD_EXP 21
12256: PUSH
12257: LD_EXP 56
12261: AND
12262: IFFALSE 12356
12264: GO 12266
12266: DISABLE
12267: LD_INT 0
12269: PPUSH
12270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_OWVAR 2
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 32
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 21
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 69
12317: ST_TO_ADDR
// if not tmp then
12318: LD_VAR 0 2
12322: NOT
12323: IFFALSE 12327
// exit ;
12325: GO 12356
// for i in tmp do
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_VAR 0 2
12336: PUSH
12337: FOR_IN
12338: IFFALSE 12354
// SetFuel ( i , 0 ) ;
12340: LD_VAR 0 1
12344: PPUSH
12345: LD_INT 0
12347: PPUSH
12348: CALL_OW 240
12352: GO 12337
12354: POP
12355: POP
// end ;
12356: PPOPN 2
12358: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12359: LD_EXP 21
12363: PUSH
12364: LD_EXP 57
12368: AND
12369: IFFALSE 12435
12371: GO 12373
12373: DISABLE
12374: LD_INT 0
12376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12377: LD_ADDR_VAR 0 1
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_OWVAR 2
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 30
12396: PUSH
12397: LD_INT 29
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 69
12412: ST_TO_ADDR
// if not tmp then
12413: LD_VAR 0 1
12417: NOT
12418: IFFALSE 12422
// exit ;
12420: GO 12435
// DestroyUnit ( tmp [ 1 ] ) ;
12422: LD_VAR 0 1
12426: PUSH
12427: LD_INT 1
12429: ARRAY
12430: PPUSH
12431: CALL_OW 65
// end ;
12435: PPOPN 1
12437: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12438: LD_EXP 21
12442: PUSH
12443: LD_EXP 59
12447: AND
12448: IFFALSE 12577
12450: GO 12452
12452: DISABLE
12453: LD_INT 0
12455: PPUSH
// begin uc_side := 0 ;
12456: LD_ADDR_OWVAR 20
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// uc_nation := nation_arabian ;
12464: LD_ADDR_OWVAR 21
12468: PUSH
12469: LD_INT 2
12471: ST_TO_ADDR
// hc_gallery :=  ;
12472: LD_ADDR_OWVAR 33
12476: PUSH
12477: LD_STRING 
12479: ST_TO_ADDR
// hc_name :=  ;
12480: LD_ADDR_OWVAR 26
12484: PUSH
12485: LD_STRING 
12487: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12488: LD_INT 1
12490: PPUSH
12491: LD_INT 11
12493: PPUSH
12494: LD_INT 10
12496: PPUSH
12497: CALL_OW 380
// un := CreateHuman ;
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: CALL_OW 44
12510: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12511: LD_VAR 0 1
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12523: LD_INT 35
12525: PPUSH
12526: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12530: LD_VAR 0 1
12534: PPUSH
12535: LD_INT 22
12537: PUSH
12538: LD_OWVAR 2
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: PPUSH
12552: LD_VAR 0 1
12556: PPUSH
12557: CALL_OW 74
12561: PPUSH
12562: CALL_OW 115
// until IsDead ( un ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 301
12575: IFFALSE 12523
// end ;
12577: PPOPN 1
12579: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12580: LD_EXP 21
12584: PUSH
12585: LD_EXP 61
12589: AND
12590: IFFALSE 12602
12592: GO 12594
12594: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12595: LD_STRING earthquake(getX(game), 0, 32)
12597: PPUSH
12598: CALL_OW 559
12602: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12603: LD_EXP 21
12607: PUSH
12608: LD_EXP 62
12612: AND
12613: IFFALSE 12704
12615: GO 12617
12617: DISABLE
12618: LD_INT 0
12620: PPUSH
// begin enable ;
12621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12622: LD_ADDR_VAR 0 1
12626: PUSH
12627: LD_INT 22
12629: PUSH
12630: LD_OWVAR 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 33
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: ST_TO_ADDR
// if not tmp then
12669: LD_VAR 0 1
12673: NOT
12674: IFFALSE 12678
// exit ;
12676: GO 12704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12678: LD_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_VAR 0 1
12690: PPUSH
12691: CALL_OW 12
12695: ARRAY
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 234
// end ;
12704: PPOPN 1
12706: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12707: LD_EXP 21
12711: PUSH
12712: LD_EXP 63
12716: AND
12717: IFFALSE 12858
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
12726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: LD_INT 22
12734: PUSH
12735: LD_OWVAR 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 25
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: ST_TO_ADDR
// if not tmp then
12763: LD_VAR 0 3
12767: NOT
12768: IFFALSE 12772
// exit ;
12770: GO 12858
// un := tmp [ rand ( 1 , tmp ) ] ;
12772: LD_ADDR_VAR 0 2
12776: PUSH
12777: LD_VAR 0 3
12781: PUSH
12782: LD_INT 1
12784: PPUSH
12785: LD_VAR 0 3
12789: PPUSH
12790: CALL_OW 12
12794: ARRAY
12795: ST_TO_ADDR
// if Crawls ( un ) then
12796: LD_VAR 0 2
12800: PPUSH
12801: CALL_OW 318
12805: IFFALSE 12816
// ComWalk ( un ) ;
12807: LD_VAR 0 2
12811: PPUSH
12812: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12816: LD_VAR 0 2
12820: PPUSH
12821: LD_INT 9
12823: PPUSH
12824: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12828: LD_INT 28
12830: PPUSH
12831: LD_OWVAR 2
12835: PPUSH
12836: LD_INT 2
12838: PPUSH
12839: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12843: LD_INT 29
12845: PPUSH
12846: LD_OWVAR 2
12850: PPUSH
12851: LD_INT 2
12853: PPUSH
12854: CALL_OW 322
// end ;
12858: PPOPN 3
12860: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12861: LD_EXP 21
12865: PUSH
12866: LD_EXP 64
12870: AND
12871: IFFALSE 12982
12873: GO 12875
12875: DISABLE
12876: LD_INT 0
12878: PPUSH
12879: PPUSH
12880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12881: LD_ADDR_VAR 0 3
12885: PUSH
12886: LD_INT 22
12888: PUSH
12889: LD_OWVAR 2
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 25
12900: PUSH
12901: LD_INT 1
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PPUSH
12912: CALL_OW 69
12916: ST_TO_ADDR
// if not tmp then
12917: LD_VAR 0 3
12921: NOT
12922: IFFALSE 12926
// exit ;
12924: GO 12982
// un := tmp [ rand ( 1 , tmp ) ] ;
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: LD_VAR 0 3
12935: PUSH
12936: LD_INT 1
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: CALL_OW 12
12948: ARRAY
12949: ST_TO_ADDR
// if Crawls ( un ) then
12950: LD_VAR 0 2
12954: PPUSH
12955: CALL_OW 318
12959: IFFALSE 12970
// ComWalk ( un ) ;
12961: LD_VAR 0 2
12965: PPUSH
12966: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12970: LD_VAR 0 2
12974: PPUSH
12975: LD_INT 8
12977: PPUSH
12978: CALL_OW 336
// end ;
12982: PPOPN 3
12984: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12985: LD_EXP 21
12989: PUSH
12990: LD_EXP 65
12994: AND
12995: IFFALSE 13139
12997: GO 12999
12999: DISABLE
13000: LD_INT 0
13002: PPUSH
13003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13004: LD_ADDR_VAR 0 2
13008: PUSH
13009: LD_INT 22
13011: PUSH
13012: LD_OWVAR 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 21
13023: PUSH
13024: LD_INT 2
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 34
13036: PUSH
13037: LD_INT 12
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 34
13046: PUSH
13047: LD_INT 51
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 34
13056: PUSH
13057: LD_INT 32
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// if not tmp then
13080: LD_VAR 0 2
13084: NOT
13085: IFFALSE 13089
// exit ;
13087: GO 13139
// for i in tmp do
13089: LD_ADDR_VAR 0 1
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: FOR_IN
13100: IFFALSE 13137
// if GetCargo ( i , mat_artifact ) = 0 then
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 4
13109: PPUSH
13110: CALL_OW 289
13114: PUSH
13115: LD_INT 0
13117: EQUAL
13118: IFFALSE 13135
// SetCargo ( i , mat_siberit , 100 ) ;
13120: LD_VAR 0 1
13124: PPUSH
13125: LD_INT 3
13127: PPUSH
13128: LD_INT 100
13130: PPUSH
13131: CALL_OW 290
13135: GO 13099
13137: POP
13138: POP
// end ;
13139: PPOPN 2
13141: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13142: LD_EXP 21
13146: PUSH
13147: LD_EXP 66
13151: AND
13152: IFFALSE 13305
13154: GO 13156
13156: DISABLE
13157: LD_INT 0
13159: PPUSH
13160: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_OWVAR 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: ST_TO_ADDR
// if not tmp then
13183: LD_VAR 0 2
13187: NOT
13188: IFFALSE 13192
// exit ;
13190: GO 13305
// for i := 1 to 2 do
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: DOUBLE
13198: LD_INT 1
13200: DEC
13201: ST_TO_ADDR
13202: LD_INT 2
13204: PUSH
13205: FOR_TO
13206: IFFALSE 13303
// begin uc_side := your_side ;
13208: LD_ADDR_OWVAR 20
13212: PUSH
13213: LD_OWVAR 2
13217: ST_TO_ADDR
// uc_nation := nation_american ;
13218: LD_ADDR_OWVAR 21
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_chassis := us_morphling ;
13226: LD_ADDR_OWVAR 37
13230: PUSH
13231: LD_INT 5
13233: ST_TO_ADDR
// vc_engine := engine_siberite ;
13234: LD_ADDR_OWVAR 39
13238: PUSH
13239: LD_INT 3
13241: ST_TO_ADDR
// vc_control := control_computer ;
13242: LD_ADDR_OWVAR 38
13246: PUSH
13247: LD_INT 3
13249: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13250: LD_ADDR_OWVAR 40
13254: PUSH
13255: LD_INT 10
13257: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13258: CALL_OW 45
13262: PPUSH
13263: LD_VAR 0 2
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PPUSH
13272: CALL_OW 250
13276: PPUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_INT 1
13284: ARRAY
13285: PPUSH
13286: CALL_OW 251
13290: PPUSH
13291: LD_INT 12
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 50
// end ;
13301: GO 13205
13303: POP
13304: POP
// end ;
13305: PPOPN 2
13307: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13308: LD_EXP 21
13312: PUSH
13313: LD_EXP 67
13317: AND
13318: IFFALSE 13540
13320: GO 13322
13322: DISABLE
13323: LD_INT 0
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13331: LD_ADDR_VAR 0 6
13335: PUSH
13336: LD_INT 22
13338: PUSH
13339: LD_OWVAR 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 21
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 3
13360: PUSH
13361: LD_INT 23
13363: PUSH
13364: LD_INT 0
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: PPUSH
13380: CALL_OW 69
13384: ST_TO_ADDR
// if not tmp then
13385: LD_VAR 0 6
13389: NOT
13390: IFFALSE 13394
// exit ;
13392: GO 13540
// s1 := rand ( 1 , 4 ) ;
13394: LD_ADDR_VAR 0 2
13398: PUSH
13399: LD_INT 1
13401: PPUSH
13402: LD_INT 4
13404: PPUSH
13405: CALL_OW 12
13409: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: LD_VAR 0 6
13419: PUSH
13420: LD_INT 1
13422: ARRAY
13423: PPUSH
13424: LD_VAR 0 2
13428: PPUSH
13429: CALL_OW 259
13433: ST_TO_ADDR
// if s1 = 1 then
13434: LD_VAR 0 2
13438: PUSH
13439: LD_INT 1
13441: EQUAL
13442: IFFALSE 13462
// s2 := rand ( 2 , 4 ) else
13444: LD_ADDR_VAR 0 3
13448: PUSH
13449: LD_INT 2
13451: PPUSH
13452: LD_INT 4
13454: PPUSH
13455: CALL_OW 12
13459: ST_TO_ADDR
13460: GO 13470
// s2 := 1 ;
13462: LD_ADDR_VAR 0 3
13466: PUSH
13467: LD_INT 1
13469: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13470: LD_ADDR_VAR 0 5
13474: PUSH
13475: LD_VAR 0 6
13479: PUSH
13480: LD_INT 1
13482: ARRAY
13483: PPUSH
13484: LD_VAR 0 3
13488: PPUSH
13489: CALL_OW 259
13493: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13494: LD_VAR 0 6
13498: PUSH
13499: LD_INT 1
13501: ARRAY
13502: PPUSH
13503: LD_VAR 0 2
13507: PPUSH
13508: LD_VAR 0 5
13512: PPUSH
13513: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13517: LD_VAR 0 6
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_VAR 0 3
13530: PPUSH
13531: LD_VAR 0 4
13535: PPUSH
13536: CALL_OW 237
// end ;
13540: PPOPN 6
13542: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13543: LD_EXP 21
13547: PUSH
13548: LD_EXP 68
13552: AND
13553: IFFALSE 13632
13555: GO 13557
13557: DISABLE
13558: LD_INT 0
13560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_OWVAR 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 30
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: ST_TO_ADDR
// if not tmp then
13597: LD_VAR 0 1
13601: NOT
13602: IFFALSE 13606
// exit ;
13604: GO 13632
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13606: LD_VAR 0 1
13610: PUSH
13611: LD_INT 1
13613: PPUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 12
13623: ARRAY
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 234
// end ;
13632: PPOPN 1
13634: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13635: LD_EXP 21
13639: PUSH
13640: LD_EXP 69
13644: AND
13645: IFFALSE 13757
13647: GO 13649
13649: DISABLE
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 2
13673: PUSH
13674: LD_INT 30
13676: PUSH
13677: LD_INT 27
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 30
13686: PUSH
13687: LD_INT 26
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 30
13696: PUSH
13697: LD_INT 28
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: PPUSH
13714: CALL_OW 69
13718: ST_TO_ADDR
// if not tmp then
13719: LD_VAR 0 2
13723: NOT
13724: IFFALSE 13728
// exit ;
13726: GO 13757
// for i in tmp do
13728: LD_ADDR_VAR 0 1
13732: PUSH
13733: LD_VAR 0 2
13737: PUSH
13738: FOR_IN
13739: IFFALSE 13755
// SetLives ( i , 1 ) ;
13741: LD_VAR 0 1
13745: PPUSH
13746: LD_INT 1
13748: PPUSH
13749: CALL_OW 234
13753: GO 13738
13755: POP
13756: POP
// end ;
13757: PPOPN 2
13759: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13760: LD_EXP 21
13764: PUSH
13765: LD_EXP 70
13769: AND
13770: IFFALSE 14044
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
13779: PPUSH
// begin i := rand ( 1 , 7 ) ;
13780: LD_ADDR_VAR 0 1
13784: PUSH
13785: LD_INT 1
13787: PPUSH
13788: LD_INT 7
13790: PPUSH
13791: CALL_OW 12
13795: ST_TO_ADDR
// case i of 1 :
13796: LD_VAR 0 1
13800: PUSH
13801: LD_INT 1
13803: DOUBLE
13804: EQUAL
13805: IFTRUE 13809
13807: GO 13819
13809: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13810: LD_STRING earthquake(getX(game), 0, 32)
13812: PPUSH
13813: CALL_OW 559
13817: GO 14044
13819: LD_INT 2
13821: DOUBLE
13822: EQUAL
13823: IFTRUE 13827
13825: GO 13841
13827: POP
// begin ToLua ( displayStucuk(); ) ;
13828: LD_STRING displayStucuk();
13830: PPUSH
13831: CALL_OW 559
// ResetFog ;
13835: CALL_OW 335
// end ; 3 :
13839: GO 14044
13841: LD_INT 3
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13849
13847: GO 13953
13849: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13850: LD_ADDR_VAR 0 2
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_OWVAR 2
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 25
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: ST_TO_ADDR
// if not tmp then
13886: LD_VAR 0 2
13890: NOT
13891: IFFALSE 13895
// exit ;
13893: GO 14044
// un := tmp [ rand ( 1 , tmp ) ] ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_VAR 0 2
13904: PUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_VAR 0 2
13912: PPUSH
13913: CALL_OW 12
13917: ARRAY
13918: ST_TO_ADDR
// if Crawls ( un ) then
13919: LD_VAR 0 3
13923: PPUSH
13924: CALL_OW 318
13928: IFFALSE 13939
// ComWalk ( un ) ;
13930: LD_VAR 0 3
13934: PPUSH
13935: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_INT 8
13946: PPUSH
13947: CALL_OW 336
// end ; 4 :
13951: GO 14044
13953: LD_INT 4
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 14022
13961: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13962: LD_ADDR_VAR 0 2
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_OWVAR 2
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 29
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PPUSH
13993: CALL_OW 69
13997: ST_TO_ADDR
// if not tmp then
13998: LD_VAR 0 2
14002: NOT
14003: IFFALSE 14007
// exit ;
14005: GO 14044
// DestroyUnit ( tmp [ 1 ] ) ;
14007: LD_VAR 0 2
14011: PUSH
14012: LD_INT 1
14014: ARRAY
14015: PPUSH
14016: CALL_OW 65
// end ; 5 .. 7 :
14020: GO 14044
14022: LD_INT 5
14024: DOUBLE
14025: GREATEREQUAL
14026: IFFALSE 14034
14028: LD_INT 7
14030: DOUBLE
14031: LESSEQUAL
14032: IFTRUE 14036
14034: GO 14043
14036: POP
// StreamSibBomb ; end ;
14037: CALL 10324 0 0
14041: GO 14044
14043: POP
// end ;
14044: PPOPN 3
14046: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14047: LD_EXP 21
14051: PUSH
14052: LD_EXP 71
14056: AND
14057: IFFALSE 14213
14059: GO 14061
14061: DISABLE
14062: LD_INT 0
14064: PPUSH
14065: PPUSH
14066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: LD_INT 81
14074: PUSH
14075: LD_OWVAR 2
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 2
14086: PUSH
14087: LD_INT 21
14089: PUSH
14090: LD_INT 1
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: ST_TO_ADDR
// if not tmp then
14121: LD_VAR 0 2
14125: NOT
14126: IFFALSE 14130
// exit ;
14128: GO 14213
// p := 0 ;
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14138: LD_INT 35
14140: PPUSH
14141: CALL_OW 67
// p := p + 1 ;
14145: LD_ADDR_VAR 0 3
14149: PUSH
14150: LD_VAR 0 3
14154: PUSH
14155: LD_INT 1
14157: PLUS
14158: ST_TO_ADDR
// for i in tmp do
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_VAR 0 2
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14201
// if GetLives ( i ) < 1000 then
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 256
14181: PUSH
14182: LD_INT 1000
14184: LESS
14185: IFFALSE 14199
// SetLives ( i , 1000 ) ;
14187: LD_VAR 0 1
14191: PPUSH
14192: LD_INT 1000
14194: PPUSH
14195: CALL_OW 234
14199: GO 14169
14201: POP
14202: POP
// until p > 20 ;
14203: LD_VAR 0 3
14207: PUSH
14208: LD_INT 20
14210: GREATER
14211: IFFALSE 14138
// end ;
14213: PPOPN 3
14215: END
// every 0 0$1 trigger StreamModeActive and sTime do
14216: LD_EXP 21
14220: PUSH
14221: LD_EXP 72
14225: AND
14226: IFFALSE 14261
14228: GO 14230
14230: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14231: LD_INT 28
14233: PPUSH
14234: LD_OWVAR 2
14238: PPUSH
14239: LD_INT 2
14241: PPUSH
14242: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14246: LD_INT 30
14248: PPUSH
14249: LD_OWVAR 2
14253: PPUSH
14254: LD_INT 2
14256: PPUSH
14257: CALL_OW 322
// end ;
14261: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14262: LD_EXP 21
14266: PUSH
14267: LD_EXP 73
14271: AND
14272: IFFALSE 14393
14274: GO 14276
14276: DISABLE
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_OWVAR 2
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 1
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 3
14310: PUSH
14311: LD_INT 23
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: ST_TO_ADDR
// if not tmp then
14335: LD_VAR 0 2
14339: NOT
14340: IFFALSE 14344
// exit ;
14342: GO 14393
// for i in tmp do
14344: LD_ADDR_VAR 0 1
14348: PUSH
14349: LD_VAR 0 2
14353: PUSH
14354: FOR_IN
14355: IFFALSE 14391
// begin if Crawls ( i ) then
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 318
14366: IFFALSE 14377
// ComWalk ( i ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: CALL_OW 138
// SetClass ( i , 2 ) ;
14377: LD_VAR 0 1
14381: PPUSH
14382: LD_INT 2
14384: PPUSH
14385: CALL_OW 336
// end ;
14389: GO 14354
14391: POP
14392: POP
// end ;
14393: PPOPN 2
14395: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14396: LD_EXP 21
14400: PUSH
14401: LD_EXP 74
14405: AND
14406: IFFALSE 14627
14408: GO 14410
14410: DISABLE
14411: LD_INT 0
14413: PPUSH
14414: PPUSH
14415: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14416: LD_OWVAR 2
14420: PPUSH
14421: LD_INT 9
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14434: LD_INT 9
14436: PPUSH
14437: LD_OWVAR 2
14441: PPUSH
14442: CALL_OW 343
// uc_side := 9 ;
14446: LD_ADDR_OWVAR 20
14450: PUSH
14451: LD_INT 9
14453: ST_TO_ADDR
// uc_nation := 2 ;
14454: LD_ADDR_OWVAR 21
14458: PUSH
14459: LD_INT 2
14461: ST_TO_ADDR
// hc_name := Dark Warrior ;
14462: LD_ADDR_OWVAR 26
14466: PUSH
14467: LD_STRING Dark Warrior
14469: ST_TO_ADDR
// hc_gallery :=  ;
14470: LD_ADDR_OWVAR 33
14474: PUSH
14475: LD_STRING 
14477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
14478: LD_INT 1
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: LD_INT 10
14486: PPUSH
14487: CALL_OW 380
// un := CreateHuman ;
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: CALL_OW 44
14500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14501: LD_VAR 0 3
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 51
// p := 0 ;
14513: LD_ADDR_VAR 0 2
14517: PUSH
14518: LD_INT 0
14520: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14521: LD_INT 35
14523: PPUSH
14524: CALL_OW 67
// if GetLives ( un ) < 1000 then
14528: LD_VAR 0 3
14532: PPUSH
14533: CALL_OW 256
14537: PUSH
14538: LD_INT 1000
14540: LESS
14541: IFFALSE 14555
// SetLives ( un , 1000 ) ;
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_INT 1000
14550: PPUSH
14551: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
14555: LD_VAR 0 3
14559: PPUSH
14560: LD_INT 81
14562: PUSH
14563: LD_OWVAR 2
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: PPUSH
14577: LD_VAR 0 3
14581: PPUSH
14582: CALL_OW 74
14586: PPUSH
14587: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
14591: LD_VAR 0 2
14595: PUSH
14596: LD_INT 60
14598: GREATER
14599: PUSH
14600: LD_VAR 0 3
14604: PPUSH
14605: CALL_OW 301
14609: OR
14610: IFFALSE 14521
// if un then
14612: LD_VAR 0 3
14616: IFFALSE 14627
// RemoveUnit ( un ) ;
14618: LD_VAR 0 3
14622: PPUSH
14623: CALL_OW 64
// end ;
14627: PPOPN 3
14629: END
