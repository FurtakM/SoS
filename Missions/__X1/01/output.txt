// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3314 0 0
// Action ;
  28: CALL 102 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// end ; end_of_file
  97: LD_VAR 0 1
 101: RET
// export function Action ; var i , un ; begin
 102: LD_INT 0
 104: PPUSH
 105: PPUSH
 106: PPUSH
// InGameOn ;
 107: CALL_OW 8
// PrepareKurtGroup ;
 111: CALL 3161 0 0
// PrepareSheikGroup ;
 115: CALL 2799 0 0
// specGroup := [ ] ;
 119: LD_ADDR_EXP 16
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// for i := 1 to 3 do
 126: LD_ADDR_VAR 0 2
 130: PUSH
 131: DOUBLE
 132: LD_INT 1
 134: DEC
 135: ST_TO_ADDR
 136: LD_INT 3
 138: PUSH
 139: FOR_TO
 140: IFFALSE 258
// begin uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := 2 ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 158: LD_INT 0
 160: PPUSH
 161: LD_INT 1
 163: PPUSH
 164: LD_INT 3
 166: PPUSH
 167: CALL_OW 380
// un := CreateHuman ;
 171: LD_ADDR_VAR 0 3
 175: PUSH
 176: CALL_OW 44
 180: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 181: LD_VAR 0 3
 185: PPUSH
 186: LD_INT 3
 188: PPUSH
 189: LD_INT 0
 191: PPUSH
 192: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 196: LD_ADDR_EXP 16
 200: PUSH
 201: LD_EXP 16
 205: PPUSH
 206: LD_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PLUS
 214: PPUSH
 215: LD_VAR 0 3
 219: PPUSH
 220: CALL_OW 1
 224: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_INT 92
 232: PPUSH
 233: LD_INT 66
 235: PPUSH
 236: CALL_OW 111
// AddComHold ( un ) ;
 240: LD_VAR 0 3
 244: PPUSH
 245: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 249: LD_INT 18
 251: PPUSH
 252: CALL_OW 67
// end ;
 256: GO 139
 258: POP
 259: POP
// PrepareHeikeGroup ;
 260: CALL 2711 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 264: LD_INT 51
 266: PPUSH
 267: LD_INT 85
 269: PPUSH
 270: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 274: LD_INT 1
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 5
 282: PPUSH
 283: LD_INT 32763
 285: NEG
 286: PPUSH
 287: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 304: LD_EXP 1
 308: PPUSH
 309: LD_INT 50
 311: PPUSH
 312: LD_INT 86
 314: PPUSH
 315: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 319: LD_EXP 5
 323: PPUSH
 324: LD_INT 51
 326: PPUSH
 327: LD_INT 90
 329: PPUSH
 330: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_EXP 5
 343: PPUSH
 344: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 348: LD_EXP 5
 352: PPUSH
 353: LD_EXP 1
 357: PPUSH
 358: CALL_OW 179
// wait ( 0 0$3 ) ;
 362: LD_INT 105
 364: PPUSH
 365: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 369: LD_EXP 5
 373: PPUSH
 374: LD_STRING DK-1
 376: PPUSH
 377: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING DH-1
 388: PPUSH
 389: CALL_OW 88
// wait ( 0 0$2 ) ;
 393: LD_INT 70
 395: PPUSH
 396: CALL_OW 67
// PrepareArabian ;
 400: CALL 3562 0 0
// InGameOff ;
 404: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 408: LD_STRING O1
 410: PPUSH
 411: CALL_OW 337
// goWithHeike := true ;
 415: LD_ADDR_EXP 18
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// SaveForQuickRestart ;
 423: CALL_OW 22
// end ;
 427: LD_VAR 0 1
 431: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 432: LD_INT 2
 434: PPUSH
 435: LD_INT 5
 437: PPUSH
 438: CALL_OW 81
 442: PUSH
 443: LD_INT 2
 445: EQUAL
 446: IFFALSE 592
 448: GO 450
 450: DISABLE
 451: LD_INT 0
 453: PPUSH
// begin goWithHeike := false ;
 454: LD_ADDR_EXP 18
 458: PUSH
 459: LD_INT 0
 461: ST_TO_ADDR
// DialogueOn ;
 462: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 466: LD_EXP 1
 470: PPUSH
 471: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 475: LD_EXP 5
 479: PPUSH
 480: LD_STRING DK-betray-1
 482: PPUSH
 483: CALL_OW 88
// DialogueOff ;
 487: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 491: LD_EXP 5
 495: PPUSH
 496: LD_INT 90
 498: PPUSH
 499: LD_INT 46
 501: PPUSH
 502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 506: LD_INT 35
 508: PPUSH
 509: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 513: LD_ADDR_VAR 0 1
 517: PUSH
 518: LD_INT 22
 520: PUSH
 521: LD_INT 5
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 25
 530: PUSH
 531: LD_INT 1
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PPUSH
 542: CALL_OW 69
 546: PUSH
 547: LD_EXP 5
 551: DIFF
 552: PUSH
 553: FOR_IN
 554: IFFALSE 572
// ComAttackUnit ( i , Heike ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_EXP 1
 565: PPUSH
 566: CALL_OW 115
 570: GO 553
 572: POP
 573: POP
// until IsDead ( Heike ) ;
 574: LD_EXP 1
 578: PPUSH
 579: CALL_OW 301
 583: IFFALSE 506
// YouLost ( Betray ) ;
 585: LD_STRING Betray
 587: PPUSH
 588: CALL_OW 104
// end ;
 592: PPOPN 1
 594: END
// every 0 0$1 trigger goWithHeike do
 595: LD_EXP 18
 599: IFFALSE 654
 601: GO 603
 603: DISABLE
// begin enable ;
 604: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 605: LD_EXP 1
 609: PPUSH
 610: LD_EXP 5
 614: PPUSH
 615: CALL_OW 296
 619: PUSH
 620: LD_INT 3
 622: GREATER
 623: IFFALSE 654
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 625: LD_EXP 5
 629: PPUSH
 630: LD_EXP 1
 634: PPUSH
 635: CALL_OW 250
 639: PPUSH
 640: LD_EXP 1
 644: PPUSH
 645: CALL_OW 251
 649: PPUSH
 650: CALL_OW 111
// end ;
 654: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 655: LD_INT 2
 657: PPUSH
 658: LD_INT 47
 660: PPUSH
 661: LD_INT 68
 663: PPUSH
 664: CALL_OW 293
 668: PUSH
 669: LD_EXP 19
 673: NOT
 674: AND
 675: IFFALSE 736
 677: GO 679
 679: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 680: LD_EXP 1
 684: PPUSH
 685: LD_STRING DH-spot-1
 687: PPUSH
 688: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 692: LD_INT 47
 694: PPUSH
 695: LD_INT 68
 697: PPUSH
 698: CALL_OW 428
 702: PPUSH
 703: CALL_OW 313
 707: PUSH
 708: LD_INT 1
 710: ARRAY
 711: PPUSH
 712: LD_STRING DRa-spot-1
 714: PPUSH
 715: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 719: LD_INT 90
 721: PPUSH
 722: LD_INT 41
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 6
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 93
 742: PPUSH
 743: LD_INT 89
 745: PPUSH
 746: CALL_OW 293
 750: PUSH
 751: LD_EXP 19
 755: NOT
 756: AND
 757: IFFALSE 818
 759: GO 761
 761: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 762: LD_EXP 1
 766: PPUSH
 767: LD_STRING DH-spot-1
 769: PPUSH
 770: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 774: LD_INT 93
 776: PPUSH
 777: LD_INT 89
 779: PPUSH
 780: CALL_OW 428
 784: PPUSH
 785: CALL_OW 313
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PPUSH
 794: LD_STRING DRa-spot-2
 796: PPUSH
 797: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 801: LD_INT 90
 803: PPUSH
 804: LD_INT 41
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 6
 812: NEG
 813: PPUSH
 814: CALL_OW 330
// end ;
 818: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 819: LD_EXP 21
 823: PUSH
 824: LD_EXP 14
 828: PPUSH
 829: LD_INT 101
 831: PUSH
 832: LD_INT 2
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PPUSH
 839: CALL_OW 72
 843: AND
 844: IFFALSE 1168
 846: GO 848
 848: DISABLE
 849: LD_INT 0
 851: PPUSH
 852: PPUSH
 853: PPUSH
 854: PPUSH
 855: PPUSH
// begin enable ;
 856: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 857: LD_ADDR_VAR 0 1
 861: PUSH
 862: LD_EXP 14
 866: PPUSH
 867: LD_INT 101
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 72
 881: ST_TO_ADDR
// if not tmp then
 882: LD_VAR 0 1
 886: NOT
 887: IFFALSE 891
// exit ;
 889: GO 1168
// InGameOn ;
 891: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 895: LD_EXP 1
 899: PUSH
 900: LD_EXP 5
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PPUSH
 909: LD_VAR 0 1
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 922: LD_VAR 0 1
 926: PUSH
 927: LD_INT 1
 929: ARRAY
 930: PPUSH
 931: LD_EXP 1
 935: PPUSH
 936: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 940: LD_VAR 0 1
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: LD_STRING DG-meeting-1
 951: PPUSH
 952: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 956: LD_ADDR_VAR 0 3
 960: PUSH
 961: LD_INT 81
 963: PUSH
 964: LD_INT 10
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 63
 973: PUSH
 974: LD_INT 25
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 108
 983: PUSH
 984: LD_INT 73
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 996: LD_ADDR_VAR 0 4
1000: PUSH
1001: LD_INT 9999
1003: PUSH
1004: EMPTY
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// for i := 1 to 3 do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: DOUBLE
1016: LD_INT 1
1018: DEC
1019: ST_TO_ADDR
1020: LD_INT 3
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1108
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1026: LD_ADDR_VAR 0 5
1030: PUSH
1031: LD_EXP 1
1035: PPUSH
1036: LD_VAR 0 3
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: LD_VAR 0 3
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: PUSH
1062: LD_INT 2
1064: ARRAY
1065: PPUSH
1066: CALL_OW 297
1070: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1071: LD_VAR 0 4
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PUSH
1080: LD_VAR 0 5
1084: GREATER
1085: IFFALSE 1106
// dist := [ tdist , i ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_VAR 0 5
1096: PUSH
1097: LD_VAR 0 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ;
1106: GO 1023
1108: POP
1109: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1110: LD_EXP 1
1114: PPUSH
1115: LD_VAR 0 3
1119: PUSH
1120: LD_VAR 0 4
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: ARRAY
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 2
1146: ARRAY
1147: ARRAY
1148: PUSH
1149: LD_INT 2
1151: ARRAY
1152: PPUSH
1153: CALL_OW 111
// wait ( 0 0$3 ) ;
1157: LD_INT 105
1159: PPUSH
1160: CALL_OW 67
// InGameOff ;
1164: CALL_OW 9
// end ;
1168: PPOPN 5
1170: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1171: LD_EXP 1
1175: PPUSH
1176: LD_INT 14
1178: PPUSH
1179: CALL_OW 296
1183: PUSH
1184: LD_INT 40
1186: GREATER
1187: PUSH
1188: LD_EXP 1
1192: PPUSH
1193: CALL_OW 316
1197: AND
1198: IFFALSE 1215
1200: GO 1202
1202: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_STRING DK-idle-1
1210: PPUSH
1211: CALL_OW 88
// end ;
1215: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1216: LD_INT 2
1218: PPUSH
1219: LD_INT 59
1221: PPUSH
1222: LD_INT 47
1224: PPUSH
1225: CALL_OW 293
1229: IFFALSE 1386
1231: GO 1233
1233: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1234: LD_INT 59
1236: PPUSH
1237: LD_INT 47
1239: PPUSH
1240: LD_INT 2
1242: PPUSH
1243: LD_INT 10
1245: NEG
1246: PPUSH
1247: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1251: LD_INT 59
1253: PPUSH
1254: LD_INT 47
1256: PPUSH
1257: CALL_OW 86
// goWithHeike := false ;
1261: LD_ADDR_EXP 18
1265: PUSH
1266: LD_INT 0
1268: ST_TO_ADDR
// baseSpotted := true ;
1269: LD_ADDR_EXP 19
1273: PUSH
1274: LD_INT 1
1276: ST_TO_ADDR
// InGameOn ;
1277: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1281: LD_EXP 1
1285: PUSH
1286: LD_EXP 5
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PPUSH
1295: LD_INT 54
1297: PPUSH
1298: LD_INT 45
1300: PPUSH
1301: CALL_OW 111
// wait ( 0 0$1 ) ;
1305: LD_INT 35
1307: PPUSH
1308: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1312: LD_EXP 1
1316: PUSH
1317: LD_EXP 5
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PPUSH
1326: LD_INT 59
1328: PPUSH
1329: LD_INT 47
1331: PPUSH
1332: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1336: LD_EXP 1
1340: PPUSH
1341: LD_STRING DH-base-1
1343: PPUSH
1344: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1348: LD_EXP 5
1352: PPUSH
1353: LD_STRING DK-base-1
1355: PPUSH
1356: CALL_OW 88
// InGameOff ;
1360: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1364: LD_ADDR_EXP 17
1368: PUSH
1369: LD_EXP 17
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: ST_TO_ADDR
// goWithHeike := true ;
1378: LD_ADDR_EXP 18
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// end ;
1386: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1387: LD_INT 2
1389: PPUSH
1390: LD_EXP 8
1394: PPUSH
1395: CALL_OW 292
1399: IFFALSE 2708
1401: GO 1403
1403: DISABLE
1404: LD_INT 0
1406: PPUSH
1407: PPUSH
1408: PPUSH
// begin meetingActive := false ;
1409: LD_ADDR_EXP 21
1413: PUSH
1414: LD_INT 0
1416: ST_TO_ADDR
// goWithHeike := false ;
1417: LD_ADDR_EXP 18
1421: PUSH
1422: LD_INT 0
1424: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1425: LD_ADDR_VAR 0 2
1429: PUSH
1430: LD_INT 6
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL_OW 517
1440: ST_TO_ADDR
// for i := 1 to 4 do
1441: LD_ADDR_VAR 0 1
1445: PUSH
1446: DOUBLE
1447: LD_INT 1
1449: DEC
1450: ST_TO_ADDR
1451: LD_INT 4
1453: PUSH
1454: FOR_TO
1455: IFFALSE 1522
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1457: LD_EXP 15
1461: PUSH
1462: LD_VAR 0 1
1466: ARRAY
1467: PPUSH
1468: LD_VAR 0 2
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PUSH
1477: LD_VAR 0 1
1481: ARRAY
1482: PPUSH
1483: LD_VAR 0 2
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PUSH
1492: LD_VAR 0 1
1496: ARRAY
1497: PPUSH
1498: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1502: LD_EXP 15
1506: PUSH
1507: LD_VAR 0 1
1511: ARRAY
1512: PPUSH
1513: LD_INT 14
1515: PPUSH
1516: CALL_OW 179
// end ;
1520: GO 1454
1522: POP
1523: POP
// InGameOn ;
1524: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1528: LD_EXP 8
1532: PPUSH
1533: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1537: LD_EXP 1
1541: PPUSH
1542: LD_EXP 8
1546: PPUSH
1547: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1551: LD_EXP 5
1555: PPUSH
1556: LD_EXP 1
1560: PPUSH
1561: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1565: LD_INT 10
1567: PPUSH
1568: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1572: LD_EXP 1
1576: PPUSH
1577: LD_EXP 8
1581: PPUSH
1582: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1586: LD_EXP 5
1590: PPUSH
1591: LD_EXP 1
1595: PPUSH
1596: CALL_OW 250
1600: PPUSH
1601: LD_INT 5
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: CALL_OW 272
1611: PPUSH
1612: LD_EXP 1
1616: PPUSH
1617: CALL_OW 251
1621: PPUSH
1622: LD_INT 5
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: CALL_OW 273
1632: PPUSH
1633: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 296
1651: PUSH
1652: LD_INT 5
1654: LESS
1655: PUSH
1656: LD_EXP 5
1660: PPUSH
1661: LD_EXP 8
1665: PPUSH
1666: CALL_OW 296
1670: PUSH
1671: LD_INT 6
1673: LESS
1674: AND
1675: IFFALSE 1565
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1677: LD_EXP 1
1681: PUSH
1682: LD_EXP 5
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: LD_EXP 8
1695: PPUSH
1696: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1700: LD_EXP 8
1704: PUSH
1705: LD_EXP 4
1709: PUSH
1710: LD_EXP 9
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PPUSH
1720: LD_EXP 1
1724: PPUSH
1725: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1729: LD_INT 7
1731: PPUSH
1732: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1736: LD_EXP 8
1740: PPUSH
1741: LD_STRING DKu-Kurt-1
1743: PPUSH
1744: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1748: LD_EXP 5
1752: PPUSH
1753: LD_STRING DK-Kurt-1
1755: PPUSH
1756: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1760: LD_EXP 8
1764: PPUSH
1765: LD_STRING DKu-Kurt-2
1767: PPUSH
1768: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1772: LD_INT 7
1774: PPUSH
1775: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1779: LD_EXP 1
1783: PPUSH
1784: LD_STRING DH-Kurt-1
1786: PPUSH
1787: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1791: LD_EXP 8
1795: PPUSH
1796: LD_STRING DKu-Kurt-3
1798: PPUSH
1799: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_STRING DK-Kurt-3
1810: PPUSH
1811: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1815: LD_EXP 9
1819: PPUSH
1820: LD_STRING DHa-Kurt-3
1822: PPUSH
1823: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1827: LD_EXP 4
1831: PPUSH
1832: LD_STRING DO-Kurt-3
1834: PPUSH
1835: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_EXP 8
1848: PUSH
1849: LD_EXP 4
1853: PUSH
1854: LD_EXP 9
1858: PUSH
1859: LD_EXP 5
1863: PUSH
1864: LD_EXP 1
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_EXP 16
1880: UNION
1881: ST_TO_ADDR
// for i = 1 to tmp2 do
1882: LD_ADDR_VAR 0 1
1886: PUSH
1887: DOUBLE
1888: LD_INT 1
1890: DEC
1891: ST_TO_ADDR
1892: LD_VAR 0 3
1896: PUSH
1897: FOR_TO
1898: IFFALSE 1973
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1900: LD_VAR 0 3
1904: PUSH
1905: LD_VAR 0 1
1909: ARRAY
1910: PPUSH
1911: LD_VAR 0 2
1915: PUSH
1916: LD_INT 1
1918: ARRAY
1919: PUSH
1920: LD_VAR 0 1
1924: PUSH
1925: LD_INT 4
1927: PLUS
1928: ARRAY
1929: PPUSH
1930: LD_VAR 0 2
1934: PUSH
1935: LD_INT 2
1937: ARRAY
1938: PUSH
1939: LD_VAR 0 1
1943: PUSH
1944: LD_INT 4
1946: PLUS
1947: ARRAY
1948: PPUSH
1949: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1953: LD_VAR 0 3
1957: PUSH
1958: LD_VAR 0 1
1962: ARRAY
1963: PPUSH
1964: LD_INT 14
1966: PPUSH
1967: CALL_OW 179
// end ;
1971: GO 1897
1973: POP
1974: POP
// wait ( 0 0$2 ) ;
1975: LD_INT 70
1977: PPUSH
1978: CALL_OW 67
// CenterOnUnits ( eon ) ;
1982: LD_INT 14
1984: PPUSH
1985: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1989: LD_INT 90
1991: PPUSH
1992: LD_INT 43
1994: PPUSH
1995: LD_INT 2
1997: PPUSH
1998: LD_INT 21
2000: NEG
2001: PPUSH
2002: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2006: LD_EXP 2
2010: PPUSH
2011: LD_INT 84
2013: PPUSH
2014: LD_INT 36
2016: PPUSH
2017: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2021: LD_EXP 2
2025: PPUSH
2026: LD_INT 14
2028: PPUSH
2029: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2033: LD_EXP 11
2037: PPUSH
2038: LD_INT 85
2040: PPUSH
2041: LD_INT 36
2043: PPUSH
2044: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2048: LD_EXP 11
2052: PPUSH
2053: LD_INT 14
2055: PPUSH
2056: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2060: LD_EXP 10
2064: PPUSH
2065: LD_INT 86
2067: PPUSH
2068: LD_INT 36
2070: PPUSH
2071: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2075: LD_EXP 10
2079: PPUSH
2080: LD_INT 14
2082: PPUSH
2083: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2087: LD_EXP 7
2091: PPUSH
2092: LD_INT 87
2094: PPUSH
2095: LD_INT 36
2097: PPUSH
2098: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2102: LD_EXP 7
2106: PPUSH
2107: LD_INT 14
2109: PPUSH
2110: CALL_OW 179
// wait ( 0 0$3 ) ;
2114: LD_INT 105
2116: PPUSH
2117: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2121: LD_INT 35
2123: PPUSH
2124: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
2128: LD_EXP 1
2132: PPUSH
2133: LD_INT 6
2135: PPUSH
2136: CALL_OW 308
2140: IFFALSE 2121
// heikeNearbyEon := true ;
2142: LD_ADDR_EXP 20
2146: PUSH
2147: LD_INT 1
2149: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2150: LD_EXP 6
2154: PPUSH
2155: LD_INT 88
2157: PPUSH
2158: LD_INT 37
2160: PPUSH
2161: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2165: LD_EXP 6
2169: PPUSH
2170: LD_EXP 13
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2183: LD_EXP 13
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: LD_INT 89
2194: PPUSH
2195: LD_INT 37
2197: PPUSH
2198: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2202: LD_EXP 13
2206: PUSH
2207: LD_INT 2
2209: ARRAY
2210: PPUSH
2211: LD_INT 91
2213: PPUSH
2214: LD_INT 39
2216: PPUSH
2217: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2221: LD_EXP 13
2225: PPUSH
2226: LD_EXP 11
2230: PPUSH
2231: CALL_OW 179
// wait ( 0 0$1 ) ;
2235: LD_INT 35
2237: PPUSH
2238: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2242: LD_EXP 13
2246: PUSH
2247: LD_INT 1
2249: ARRAY
2250: PPUSH
2251: LD_STRING DS-eon-1
2253: PPUSH
2254: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2258: LD_EXP 6
2262: PPUSH
2263: LD_STRING DSh-eon-1
2265: PPUSH
2266: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2270: LD_EXP 13
2274: PUSH
2275: LD_INT 1
2277: ARRAY
2278: PPUSH
2279: LD_STRING DS-eon-2
2281: PPUSH
2282: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2286: LD_EXP 6
2290: PPUSH
2291: LD_STRING DSh-eon-1a
2293: PPUSH
2294: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2298: LD_EXP 13
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: PPUSH
2307: LD_INT 92
2309: PPUSH
2310: LD_INT 43
2312: PPUSH
2313: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2317: LD_EXP 13
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2333: LD_EXP 13
2337: PUSH
2338: LD_INT 2
2340: ARRAY
2341: PPUSH
2342: LD_INT 93
2344: PPUSH
2345: LD_INT 41
2347: PPUSH
2348: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2352: LD_EXP 13
2356: PUSH
2357: LD_INT 2
2359: ARRAY
2360: PPUSH
2361: LD_INT 93
2363: PPUSH
2364: LD_INT 40
2366: PPUSH
2367: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2371: LD_EXP 6
2375: PPUSH
2376: LD_INT 88
2378: PPUSH
2379: LD_INT 41
2381: PPUSH
2382: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2386: LD_EXP 6
2390: PPUSH
2391: LD_INT 87
2393: PPUSH
2394: LD_INT 41
2396: PPUSH
2397: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2401: LD_INT 35
2403: PPUSH
2404: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 41
2418: PPUSH
2419: CALL_OW 307
2423: IFFALSE 2401
// wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2432: LD_EXP 6
2436: PPUSH
2437: LD_STRING DSh-eon-2
2439: PPUSH
2440: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2444: LD_EXP 11
2448: PPUSH
2449: LD_INT 87
2451: PPUSH
2452: LD_INT 40
2454: PPUSH
2455: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2459: LD_EXP 11
2463: PPUSH
2464: LD_INT 86
2466: PPUSH
2467: LD_INT 40
2469: PPUSH
2470: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2474: LD_INT 35
2476: PPUSH
2477: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2481: LD_EXP 11
2485: PPUSH
2486: LD_INT 87
2488: PPUSH
2489: LD_INT 40
2491: PPUSH
2492: CALL_OW 307
2496: IFFALSE 2474
// Say ( Shariff , DShar-eon-3 ) ;
2498: LD_EXP 11
2502: PPUSH
2503: LD_STRING DShar-eon-3
2505: PPUSH
2506: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2510: LD_INT 10
2512: PPUSH
2513: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2517: LD_EXP 5
2521: PPUSH
2522: LD_EXP 1
2526: PPUSH
2527: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2531: LD_EXP 11
2535: PPUSH
2536: LD_STRING DShar-eon-4
2538: PPUSH
2539: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2543: LD_EXP 5
2547: PPUSH
2548: LD_STRING DK-eon-4
2550: PPUSH
2551: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2555: LD_EXP 5
2559: PPUSH
2560: LD_INT 14
2562: PPUSH
2563: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2567: LD_INT 35
2569: PPUSH
2570: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2574: LD_EXP 5
2578: PPUSH
2579: CALL_OW 305
2583: NOT
2584: IFFALSE 2567
// ComTurnUnit ( Shariff , Heike ) ;
2586: LD_EXP 11
2590: PPUSH
2591: LD_EXP 1
2595: PPUSH
2596: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2600: LD_EXP 11
2604: PPUSH
2605: LD_STRING DShar-eon-5
2607: PPUSH
2608: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2612: LD_EXP 1
2616: PPUSH
2617: LD_INT 91
2619: PPUSH
2620: LD_INT 44
2622: PPUSH
2623: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2627: LD_EXP 1
2631: PPUSH
2632: LD_INT 14
2634: PPUSH
2635: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2639: LD_INT 35
2641: PPUSH
2642: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2646: LD_EXP 1
2650: PPUSH
2651: LD_INT 91
2653: PPUSH
2654: LD_INT 44
2656: PPUSH
2657: CALL_OW 307
2661: IFFALSE 2639
// Say ( Heike , DH-eon-5 ) ;
2663: LD_EXP 1
2667: PPUSH
2668: LD_STRING DH-eon-5
2670: PPUSH
2671: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2675: LD_EXP 1
2679: PPUSH
2680: LD_INT 14
2682: PPUSH
2683: CALL_OW 120
// wait ( 0 0$2 ) ;
2687: LD_INT 70
2689: PPUSH
2690: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2694: LD_INT 1
2696: PPUSH
2697: LD_STRING %_cont
2699: PPUSH
2700: CALL_OW 340
// InGameOff ;
2704: CALL_OW 9
// end ; end_of_file
2708: PPOPN 3
2710: END
// export function PrepareHeikeGroup ; begin
2711: LD_INT 0
2713: PPUSH
// uc_side := 2 ;
2714: LD_ADDR_OWVAR 20
2718: PUSH
2719: LD_INT 2
2721: ST_TO_ADDR
// uc_nation := 2 ;
2722: LD_ADDR_OWVAR 21
2726: PUSH
2727: LD_INT 2
2729: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2730: LD_ADDR_EXP 1
2734: PUSH
2735: LD_STRING Heike
2737: PPUSH
2738: CALL_OW 25
2742: ST_TO_ADDR
// uc_side := 5 ;
2743: LD_ADDR_OWVAR 20
2747: PUSH
2748: LD_INT 5
2750: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2751: LD_ADDR_EXP 5
2755: PUSH
2756: LD_STRING Kaia
2758: PPUSH
2759: CALL_OW 25
2763: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2764: LD_EXP 1
2768: PPUSH
2769: LD_INT 3
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2779: LD_EXP 5
2783: PPUSH
2784: LD_INT 3
2786: PPUSH
2787: LD_INT 0
2789: PPUSH
2790: CALL_OW 49
// end ;
2794: LD_VAR 0 1
2798: RET
// export function PrepareSheikGroup ; var un , i ; begin
2799: LD_INT 0
2801: PPUSH
2802: PPUSH
2803: PPUSH
// uc_side := 5 ;
2804: LD_ADDR_OWVAR 20
2808: PUSH
2809: LD_INT 5
2811: ST_TO_ADDR
// uc_nation := 2 ;
2812: LD_ADDR_OWVAR 21
2816: PUSH
2817: LD_INT 2
2819: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2820: LD_ADDR_EXP 10
2824: PUSH
2825: LD_STRING Ali
2827: PPUSH
2828: CALL_OW 25
2832: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2833: LD_ADDR_EXP 11
2837: PUSH
2838: LD_STRING Abdul
2840: PPUSH
2841: CALL_OW 25
2845: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2846: LD_ADDR_EXP 2
2850: PUSH
2851: LD_STRING Omar
2853: PPUSH
2854: CALL_OW 25
2858: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2859: LD_ADDR_EXP 7
2863: PUSH
2864: LD_STRING Mahtab
2866: PPUSH
2867: CALL_OW 25
2871: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2872: LD_ADDR_EXP 6
2876: PUSH
2877: LD_STRING Shahrzad
2879: PPUSH
2880: CALL_OW 25
2884: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2885: LD_EXP 10
2889: PPUSH
2890: LD_INT 85
2892: PPUSH
2893: LD_INT 37
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2903: LD_EXP 11
2907: PPUSH
2908: LD_INT 87
2910: PPUSH
2911: LD_INT 37
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2921: LD_EXP 2
2925: PPUSH
2926: LD_INT 85
2928: PPUSH
2929: LD_INT 35
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2939: LD_EXP 7
2943: PPUSH
2944: LD_INT 86
2946: PPUSH
2947: LD_INT 39
2949: PPUSH
2950: LD_INT 0
2952: PPUSH
2953: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2957: LD_EXP 6
2961: PPUSH
2962: LD_INT 88
2964: PPUSH
2965: LD_INT 39
2967: PPUSH
2968: LD_INT 0
2970: PPUSH
2971: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2975: LD_EXP 10
2979: PPUSH
2980: LD_EXP 11
2984: PPUSH
2985: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2989: LD_EXP 11
2993: PPUSH
2994: LD_EXP 10
2998: PPUSH
2999: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3003: LD_EXP 2
3007: PPUSH
3008: LD_EXP 11
3012: PPUSH
3013: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3017: LD_EXP 7
3021: PUSH
3022: LD_EXP 6
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PPUSH
3031: LD_EXP 11
3035: PPUSH
3036: CALL_OW 119
// for i := 1 to 2 do
3040: LD_ADDR_VAR 0 3
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 2
3052: PUSH
3053: FOR_TO
3054: IFFALSE 3140
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3056: LD_INT 2
3058: PPUSH
3059: LD_INT 4
3061: PPUSH
3062: LD_INT 6
3064: PPUSH
3065: CALL_OW 380
// un := CreateHuman ;
3069: LD_ADDR_VAR 0 2
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3079: LD_VAR 0 2
3083: PPUSH
3084: LD_INT 90
3086: PPUSH
3087: LD_INT 44
3089: PPUSH
3090: LD_INT 3
3092: PPUSH
3093: LD_INT 0
3095: PPUSH
3096: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 91
3107: PPUSH
3108: LD_INT 43
3110: PPUSH
3111: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3115: LD_ADDR_EXP 13
3119: PUSH
3120: LD_EXP 13
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 2
3137: ST_TO_ADDR
// end ;
3138: GO 3053
3140: POP
3141: POP
// scientists := scientists diff 0 ;
3142: LD_ADDR_EXP 13
3146: PUSH
3147: LD_EXP 13
3151: PUSH
3152: LD_INT 0
3154: DIFF
3155: ST_TO_ADDR
// end ;
3156: LD_VAR 0 1
3160: RET
// export function PrepareKurtGroup ; var i ; begin
3161: LD_INT 0
3163: PPUSH
3164: PPUSH
// uc_side := 5 ;
3165: LD_ADDR_OWVAR 20
3169: PUSH
3170: LD_INT 5
3172: ST_TO_ADDR
// uc_nation := 2 ;
3173: LD_ADDR_OWVAR 21
3177: PUSH
3178: LD_INT 2
3180: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3181: LD_ADDR_EXP 8
3185: PUSH
3186: LD_STRING Kurt
3188: PPUSH
3189: CALL_OW 25
3193: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3194: LD_ADDR_EXP 4
3198: PUSH
3199: LD_STRING Olaf
3201: PPUSH
3202: CALL_OW 25
3206: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3207: LD_ADDR_EXP 9
3211: PUSH
3212: LD_STRING Hans
3214: PPUSH
3215: CALL_OW 25
3219: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: LD_EXP 8
3229: PUSH
3230: LD_EXP 9
3234: PUSH
3235: LD_EXP 4
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: LIST
3244: PUSH
3245: FOR_IN
3246: IFFALSE 3265
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3248: LD_VAR 0 2
3252: PPUSH
3253: LD_INT 10
3255: PPUSH
3256: LD_INT 0
3258: PPUSH
3259: CALL_OW 49
3263: GO 3245
3265: POP
3266: POP
// ComTurnUnit ( Kurt , Hans ) ;
3267: LD_EXP 8
3271: PPUSH
3272: LD_EXP 9
3276: PPUSH
3277: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3281: LD_EXP 4
3285: PPUSH
3286: LD_EXP 9
3290: PPUSH
3291: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3295: LD_EXP 9
3299: PPUSH
3300: LD_EXP 4
3304: PPUSH
3305: CALL_OW 119
// end ;
3309: LD_VAR 0 1
3313: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3314: LD_INT 0
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3320: LD_ADDR_VAR 0 2
3324: PUSH
3325: LD_INT 21
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PPUSH
3335: CALL_OW 69
3339: PUSH
3340: LD_INT 14
3342: DIFF
3343: PUSH
3344: FOR_IN
3345: IFFALSE 3425
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3347: LD_VAR 0 2
3351: PPUSH
3352: CALL_OW 266
3356: PUSH
3357: LD_INT 6
3359: PUSH
3360: LD_INT 31
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: IN
3367: IFFALSE 3391
// SetLives ( i , rand ( 500 , 600 ) ) else
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 500
3376: PPUSH
3377: LD_INT 600
3379: PPUSH
3380: CALL_OW 12
3384: PPUSH
3385: CALL_OW 234
3389: GO 3411
// SetLives ( i , rand ( 300 , 499 ) ) ;
3391: LD_VAR 0 2
3395: PPUSH
3396: LD_INT 300
3398: PPUSH
3399: LD_INT 499
3401: PPUSH
3402: CALL_OW 12
3406: PPUSH
3407: CALL_OW 234
// SetSide ( i , 5 ) ;
3411: LD_VAR 0 2
3415: PPUSH
3416: LD_INT 5
3418: PPUSH
3419: CALL_OW 235
// end ;
3423: GO 3344
3425: POP
3426: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3427: LD_ADDR_VAR 0 4
3431: PUSH
3432: LD_INT 9
3434: PPUSH
3435: LD_INT 0
3437: PPUSH
3438: CALL_OW 517
3442: ST_TO_ADDR
// uc_side := 4 ;
3443: LD_ADDR_OWVAR 20
3447: PUSH
3448: LD_INT 4
3450: ST_TO_ADDR
// uc_nation := 1 ;
3451: LD_ADDR_OWVAR 21
3455: PUSH
3456: LD_INT 1
3458: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_VAR 0 4
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3555
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3481: LD_INT 0
3483: PPUSH
3484: LD_INT 1
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_VAR 0 2
3502: PUSH
3503: LD_INT 3
3505: MOD
3506: PUSH
3507: LD_INT 1
3509: PLUS
3510: ARRAY
3511: PPUSH
3512: LD_INT 0
3514: PPUSH
3515: CALL_OW 380
// un := CreateHuman ;
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: CALL_OW 44
3528: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3529: LD_VAR 0 3
3533: PPUSH
3534: LD_INT 9
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: CALL_OW 49
// KillUnit ( un ) ;
3544: LD_VAR 0 3
3548: PPUSH
3549: CALL_OW 66
// end ;
3553: GO 3478
3555: POP
3556: POP
// end ;
3557: LD_VAR 0 1
3561: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3562: LD_INT 0
3564: PPUSH
3565: PPUSH
3566: PPUSH
3567: PPUSH
3568: PPUSH
3569: PPUSH
3570: PPUSH
// uc_side := 5 ;
3571: LD_ADDR_OWVAR 20
3575: PUSH
3576: LD_INT 5
3578: ST_TO_ADDR
// uc_nation := 2 ;
3579: LD_ADDR_OWVAR 21
3583: PUSH
3584: LD_INT 2
3586: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3587: LD_ADDR_VAR 0 6
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: LD_INT 5
3600: PUSH
3601: LD_INT 14
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: ST_TO_ADDR
// InitHc ;
3610: CALL_OW 19
// for i in area do
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: LD_VAR 0 6
3623: PUSH
3624: FOR_IN
3625: IFFALSE 3789
// begin tmp := AreaToList ( i , 0 ) ;
3627: LD_ADDR_VAR 0 5
3631: PUSH
3632: LD_VAR 0 2
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: CALL_OW 517
3644: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_VAR 0 5
3659: PUSH
3660: LD_INT 1
3662: ARRAY
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3785
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3667: LD_INT 1
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: CALL_OW 380
// un := CreateHuman ;
3680: LD_ADDR_VAR 0 7
3684: PUSH
3685: CALL_OW 44
3689: ST_TO_ADDR
// if i = spawnBaseArea3 then
3690: LD_VAR 0 2
3694: PUSH
3695: LD_INT 5
3697: EQUAL
3698: IFFALSE 3716
// eonGuards := eonGuards ^ un ;
3700: LD_ADDR_EXP 14
3704: PUSH
3705: LD_EXP 14
3709: PUSH
3710: LD_VAR 0 7
3714: ADD
3715: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3716: LD_VAR 0 7
3720: PPUSH
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 49
// ComHold ( un ) ;
3733: LD_VAR 0 7
3737: PPUSH
3738: CALL_OW 140
// if i = spawnBaseArea4 then
3742: LD_VAR 0 2
3746: PUSH
3747: LD_INT 14
3749: EQUAL
3750: IFFALSE 3783
// begin firstGroup := firstGroup ^ un ;
3752: LD_ADDR_EXP 15
3756: PUSH
3757: LD_EXP 15
3761: PUSH
3762: LD_VAR 0 7
3766: ADD
3767: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3768: LD_VAR 0 7
3772: PPUSH
3773: LD_INT 108
3775: PPUSH
3776: LD_INT 47
3778: PPUSH
3779: CALL_OW 118
// end ; end ;
3783: GO 3664
3785: POP
3786: POP
// end ;
3787: GO 3624
3789: POP
3790: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 30
3803: PUSH
3804: LD_INT 31
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3911
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_INT 30
3826: PUSH
3827: LD_INT 31
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PPUSH
3834: CALL_OW 69
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 1
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 7
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3868: LD_VAR 0 7
3872: PPUSH
3873: LD_VAR 0 4
3877: PPUSH
3878: CALL_OW 254
3882: PUSH
3883: LD_INT 3
3885: PLUS
3886: PUSH
3887: LD_INT 6
3889: MOD
3890: PPUSH
3891: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3895: LD_VAR 0 7
3899: PPUSH
3900: LD_VAR 0 4
3904: PPUSH
3905: CALL_OW 52
// end ;
3909: GO 3816
3911: POP
3912: POP
// end ; end_of_file
3913: LD_VAR 0 1
3917: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3918: LD_VAR 0 1
3922: PUSH
3923: LD_INT 2
3925: EQUAL
3926: PUSH
3927: LD_VAR 0 2
3931: PUSH
3932: LD_INT 5
3934: EQUAL
3935: AND
3936: IFFALSE 3954
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3938: LD_INT 2
3940: PPUSH
3941: LD_INT 5
3943: PPUSH
3944: LD_INT 2
3946: PPUSH
3947: LD_INT 1
3949: PPUSH
3950: CALL_OW 80
// end ;
3954: PPOPN 2
3956: END
// every 0 0$1 trigger scientists do var i ;
3957: LD_EXP 13
3961: IFFALSE 4169
3963: GO 3965
3965: DISABLE
3966: LD_INT 0
3968: PPUSH
// begin repeat for i in scientists do
3969: LD_ADDR_VAR 0 1
3973: PUSH
3974: LD_EXP 13
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4154
// begin wait ( 0 0$1 ) ;
3982: LD_INT 35
3984: PPUSH
3985: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 11
3996: PUSH
3997: LD_INT 13
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_VAR 0 1
4008: PUSH
4009: LD_INT 2
4011: MOD
4012: PUSH
4013: LD_INT 1
4015: PLUS
4016: ARRAY
4017: PPUSH
4018: CALL_OW 308
4022: NOT
4023: IFFALSE 4058
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 11
4032: PUSH
4033: LD_INT 13
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_VAR 0 1
4044: PUSH
4045: LD_INT 2
4047: MOD
4048: PUSH
4049: LD_INT 1
4051: PLUS
4052: ARRAY
4053: PPUSH
4054: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4058: LD_VAR 0 1
4062: PPUSH
4063: LD_INT 14
4065: PPUSH
4066: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4070: LD_VAR 0 1
4074: PPUSH
4075: LD_INT 70
4077: PPUSH
4078: CALL_OW 202
// if rand ( 0 , 1 ) then
4082: LD_INT 0
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL_OW 12
4092: IFFALSE 4106
// AddComAnim ( i , 15 ) ;
4094: LD_VAR 0 1
4098: PPUSH
4099: LD_INT 15
4101: PPUSH
4102: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4106: LD_VAR 0 1
4110: PPUSH
4111: LD_INT 35
4113: PPUSH
4114: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4118: LD_VAR 0 1
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4130: LD_VAR 0 1
4134: PPUSH
4135: LD_INT 93
4137: PPUSH
4138: LD_INT 40
4140: PPUSH
4141: CALL_OW 178
// wait ( 0 0$1 ) ;
4145: LD_INT 35
4147: PPUSH
4148: CALL_OW 67
// end ;
4152: GO 3979
4154: POP
4155: POP
// wait ( 0 0$10 ) ;
4156: LD_INT 350
4158: PPUSH
4159: CALL_OW 67
// until heikeNearbyEon ;
4163: LD_EXP 20
4167: IFFALSE 3969
// end ; end_of_file
4169: PPOPN 1
4171: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4172: GO 4174
4174: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4175: LD_STRING initStreamRollete();
4177: PPUSH
4178: CALL_OW 559
// InitStreamMode ;
4182: CALL 4191 0 0
// DefineStreamItems ( ) ;
4186: CALL 4631 0 0
// end ;
4190: END
// function InitStreamMode ; begin
4191: LD_INT 0
4193: PPUSH
// streamModeActive := false ;
4194: LD_ADDR_EXP 22
4198: PUSH
4199: LD_INT 0
4201: ST_TO_ADDR
// normalCounter := 36 ;
4202: LD_ADDR_EXP 23
4206: PUSH
4207: LD_INT 36
4209: ST_TO_ADDR
// hardcoreCounter := 16 ;
4210: LD_ADDR_EXP 24
4214: PUSH
4215: LD_INT 16
4217: ST_TO_ADDR
// sRocket := false ;
4218: LD_ADDR_EXP 27
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// sSpeed := false ;
4226: LD_ADDR_EXP 26
4230: PUSH
4231: LD_INT 0
4233: ST_TO_ADDR
// sEngine := false ;
4234: LD_ADDR_EXP 28
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// sSpec := false ;
4242: LD_ADDR_EXP 25
4246: PUSH
4247: LD_INT 0
4249: ST_TO_ADDR
// sLevel := false ;
4250: LD_ADDR_EXP 29
4254: PUSH
4255: LD_INT 0
4257: ST_TO_ADDR
// sArmoury := false ;
4258: LD_ADDR_EXP 30
4262: PUSH
4263: LD_INT 0
4265: ST_TO_ADDR
// sRadar := false ;
4266: LD_ADDR_EXP 31
4270: PUSH
4271: LD_INT 0
4273: ST_TO_ADDR
// sBunker := false ;
4274: LD_ADDR_EXP 32
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// sHack := false ;
4282: LD_ADDR_EXP 33
4286: PUSH
4287: LD_INT 0
4289: ST_TO_ADDR
// sFire := false ;
4290: LD_ADDR_EXP 34
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// sRefresh := false ;
4298: LD_ADDR_EXP 35
4302: PUSH
4303: LD_INT 0
4305: ST_TO_ADDR
// sExp := false ;
4306: LD_ADDR_EXP 36
4310: PUSH
4311: LD_INT 0
4313: ST_TO_ADDR
// sDepot := false ;
4314: LD_ADDR_EXP 37
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// sFlag := false ;
4322: LD_ADDR_EXP 38
4326: PUSH
4327: LD_INT 0
4329: ST_TO_ADDR
// sKamikadze := false ;
4330: LD_ADDR_EXP 46
4334: PUSH
4335: LD_INT 0
4337: ST_TO_ADDR
// sTroll := false ;
4338: LD_ADDR_EXP 47
4342: PUSH
4343: LD_INT 0
4345: ST_TO_ADDR
// sSlow := false ;
4346: LD_ADDR_EXP 48
4350: PUSH
4351: LD_INT 0
4353: ST_TO_ADDR
// sLack := false ;
4354: LD_ADDR_EXP 49
4358: PUSH
4359: LD_INT 0
4361: ST_TO_ADDR
// sTank := false ;
4362: LD_ADDR_EXP 51
4366: PUSH
4367: LD_INT 0
4369: ST_TO_ADDR
// sRemote := false ;
4370: LD_ADDR_EXP 52
4374: PUSH
4375: LD_INT 0
4377: ST_TO_ADDR
// sPowell := false ;
4378: LD_ADDR_EXP 53
4382: PUSH
4383: LD_INT 0
4385: ST_TO_ADDR
// sTeleport := false ;
4386: LD_ADDR_EXP 56
4390: PUSH
4391: LD_INT 0
4393: ST_TO_ADDR
// sOilTower := false ;
4394: LD_ADDR_EXP 58
4398: PUSH
4399: LD_INT 0
4401: ST_TO_ADDR
// sShovel := false ;
4402: LD_ADDR_EXP 59
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// sSheik := false ;
4410: LD_ADDR_EXP 60
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// sEarthquake := false ;
4418: LD_ADDR_EXP 62
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// sAI := false ;
4426: LD_ADDR_EXP 63
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// sCargo := false ;
4434: LD_ADDR_EXP 66
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// sDLaser := false ;
4442: LD_ADDR_EXP 67
4446: PUSH
4447: LD_INT 0
4449: ST_TO_ADDR
// sExchange := false ;
4450: LD_ADDR_EXP 68
4454: PUSH
4455: LD_INT 0
4457: ST_TO_ADDR
// sFac := false ;
4458: LD_ADDR_EXP 69
4462: PUSH
4463: LD_INT 0
4465: ST_TO_ADDR
// sPower := false ;
4466: LD_ADDR_EXP 70
4470: PUSH
4471: LD_INT 0
4473: ST_TO_ADDR
// sRandom := false ;
4474: LD_ADDR_EXP 71
4478: PUSH
4479: LD_INT 0
4481: ST_TO_ADDR
// sShield := false ;
4482: LD_ADDR_EXP 72
4486: PUSH
4487: LD_INT 0
4489: ST_TO_ADDR
// sTime := false ;
4490: LD_ADDR_EXP 73
4494: PUSH
4495: LD_INT 0
4497: ST_TO_ADDR
// sTools := false ;
4498: LD_ADDR_EXP 74
4502: PUSH
4503: LD_INT 0
4505: ST_TO_ADDR
// sSold := false ;
4506: LD_ADDR_EXP 39
4510: PUSH
4511: LD_INT 0
4513: ST_TO_ADDR
// sDiff := false ;
4514: LD_ADDR_EXP 40
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// sFog := false ;
4522: LD_ADDR_EXP 43
4526: PUSH
4527: LD_INT 0
4529: ST_TO_ADDR
// sReset := false ;
4530: LD_ADDR_EXP 44
4534: PUSH
4535: LD_INT 0
4537: ST_TO_ADDR
// sSun := false ;
4538: LD_ADDR_EXP 45
4542: PUSH
4543: LD_INT 0
4545: ST_TO_ADDR
// sTiger := false ;
4546: LD_ADDR_EXP 41
4550: PUSH
4551: LD_INT 0
4553: ST_TO_ADDR
// sBomb := false ;
4554: LD_ADDR_EXP 42
4558: PUSH
4559: LD_INT 0
4561: ST_TO_ADDR
// sWound := false ;
4562: LD_ADDR_EXP 50
4566: PUSH
4567: LD_INT 0
4569: ST_TO_ADDR
// sBetray := false ;
4570: LD_ADDR_EXP 54
4574: PUSH
4575: LD_INT 0
4577: ST_TO_ADDR
// sContamin := false ;
4578: LD_ADDR_EXP 55
4582: PUSH
4583: LD_INT 0
4585: ST_TO_ADDR
// sOil := false ;
4586: LD_ADDR_EXP 57
4590: PUSH
4591: LD_INT 0
4593: ST_TO_ADDR
// sStu := false ;
4594: LD_ADDR_EXP 61
4598: PUSH
4599: LD_INT 0
4601: ST_TO_ADDR
// sBazooka := false ;
4602: LD_ADDR_EXP 64
4606: PUSH
4607: LD_INT 0
4609: ST_TO_ADDR
// sMortar := false ;
4610: LD_ADDR_EXP 65
4614: PUSH
4615: LD_INT 0
4617: ST_TO_ADDR
// sRanger := false ;
4618: LD_ADDR_EXP 75
4622: PUSH
4623: LD_INT 0
4625: ST_TO_ADDR
// end ;
4626: LD_VAR 0 1
4630: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4631: LD_INT 0
4633: PPUSH
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
// result := [ ] ;
4638: LD_ADDR_VAR 0 1
4642: PUSH
4643: EMPTY
4644: ST_TO_ADDR
// if campaign_id = 1 then
4645: LD_OWVAR 69
4649: PUSH
4650: LD_INT 1
4652: EQUAL
4653: IFFALSE 7591
// begin case mission_number of 1 :
4655: LD_OWVAR 70
4659: PUSH
4660: LD_INT 1
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4668
4666: GO 4732
4668: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4669: LD_ADDR_VAR 0 1
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 4
4679: PUSH
4680: LD_INT 11
4682: PUSH
4683: LD_INT 12
4685: PUSH
4686: LD_INT 15
4688: PUSH
4689: LD_INT 16
4691: PUSH
4692: LD_INT 22
4694: PUSH
4695: LD_INT 23
4697: PUSH
4698: LD_INT 26
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 101
4714: PUSH
4715: LD_INT 102
4717: PUSH
4718: LD_INT 106
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: ST_TO_ADDR
4730: GO 7589
4732: LD_INT 2
4734: DOUBLE
4735: EQUAL
4736: IFTRUE 4740
4738: GO 4812
4740: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4741: LD_ADDR_VAR 0 1
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: LD_INT 4
4751: PUSH
4752: LD_INT 11
4754: PUSH
4755: LD_INT 12
4757: PUSH
4758: LD_INT 15
4760: PUSH
4761: LD_INT 16
4763: PUSH
4764: LD_INT 22
4766: PUSH
4767: LD_INT 23
4769: PUSH
4770: LD_INT 26
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 101
4786: PUSH
4787: LD_INT 102
4789: PUSH
4790: LD_INT 105
4792: PUSH
4793: LD_INT 106
4795: PUSH
4796: LD_INT 108
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 7589
4812: LD_INT 3
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4896
4820: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4821: LD_ADDR_VAR 0 1
4825: PUSH
4826: LD_INT 2
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 11
4837: PUSH
4838: LD_INT 12
4840: PUSH
4841: LD_INT 15
4843: PUSH
4844: LD_INT 16
4846: PUSH
4847: LD_INT 22
4849: PUSH
4850: LD_INT 26
4852: PUSH
4853: LD_INT 36
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 101
4870: PUSH
4871: LD_INT 102
4873: PUSH
4874: LD_INT 105
4876: PUSH
4877: LD_INT 106
4879: PUSH
4880: LD_INT 108
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
4894: GO 7589
4896: LD_INT 4
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4988
4904: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4905: LD_ADDR_VAR 0 1
4909: PUSH
4910: LD_INT 2
4912: PUSH
4913: LD_INT 4
4915: PUSH
4916: LD_INT 5
4918: PUSH
4919: LD_INT 8
4921: PUSH
4922: LD_INT 11
4924: PUSH
4925: LD_INT 12
4927: PUSH
4928: LD_INT 15
4930: PUSH
4931: LD_INT 16
4933: PUSH
4934: LD_INT 22
4936: PUSH
4937: LD_INT 23
4939: PUSH
4940: LD_INT 26
4942: PUSH
4943: LD_INT 36
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 101
4962: PUSH
4963: LD_INT 102
4965: PUSH
4966: LD_INT 105
4968: PUSH
4969: LD_INT 106
4971: PUSH
4972: LD_INT 108
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: ST_TO_ADDR
4986: GO 7589
4988: LD_INT 5
4990: DOUBLE
4991: EQUAL
4992: IFTRUE 4996
4994: GO 5096
4996: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4997: LD_ADDR_VAR 0 1
5001: PUSH
5002: LD_INT 2
5004: PUSH
5005: LD_INT 4
5007: PUSH
5008: LD_INT 5
5010: PUSH
5011: LD_INT 6
5013: PUSH
5014: LD_INT 8
5016: PUSH
5017: LD_INT 11
5019: PUSH
5020: LD_INT 12
5022: PUSH
5023: LD_INT 15
5025: PUSH
5026: LD_INT 16
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 23
5034: PUSH
5035: LD_INT 25
5037: PUSH
5038: LD_INT 26
5040: PUSH
5041: LD_INT 36
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 101
5062: PUSH
5063: LD_INT 102
5065: PUSH
5066: LD_INT 105
5068: PUSH
5069: LD_INT 106
5071: PUSH
5072: LD_INT 108
5074: PUSH
5075: LD_INT 109
5077: PUSH
5078: LD_INT 112
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: ST_TO_ADDR
5094: GO 7589
5096: LD_INT 6
5098: DOUBLE
5099: EQUAL
5100: IFTRUE 5104
5102: GO 5224
5104: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5105: LD_ADDR_VAR 0 1
5109: PUSH
5110: LD_INT 2
5112: PUSH
5113: LD_INT 4
5115: PUSH
5116: LD_INT 5
5118: PUSH
5119: LD_INT 6
5121: PUSH
5122: LD_INT 8
5124: PUSH
5125: LD_INT 11
5127: PUSH
5128: LD_INT 12
5130: PUSH
5131: LD_INT 15
5133: PUSH
5134: LD_INT 16
5136: PUSH
5137: LD_INT 20
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 22
5145: PUSH
5146: LD_INT 23
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 26
5154: PUSH
5155: LD_INT 30
5157: PUSH
5158: LD_INT 31
5160: PUSH
5161: LD_INT 32
5163: PUSH
5164: LD_INT 36
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 101
5190: PUSH
5191: LD_INT 102
5193: PUSH
5194: LD_INT 105
5196: PUSH
5197: LD_INT 106
5199: PUSH
5200: LD_INT 108
5202: PUSH
5203: LD_INT 109
5205: PUSH
5206: LD_INT 112
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: ST_TO_ADDR
5222: GO 7589
5224: LD_INT 7
5226: DOUBLE
5227: EQUAL
5228: IFTRUE 5232
5230: GO 5332
5232: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5233: LD_ADDR_VAR 0 1
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: LD_INT 7
5249: PUSH
5250: LD_INT 11
5252: PUSH
5253: LD_INT 12
5255: PUSH
5256: LD_INT 15
5258: PUSH
5259: LD_INT 16
5261: PUSH
5262: LD_INT 20
5264: PUSH
5265: LD_INT 21
5267: PUSH
5268: LD_INT 22
5270: PUSH
5271: LD_INT 23
5273: PUSH
5274: LD_INT 25
5276: PUSH
5277: LD_INT 26
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 101
5298: PUSH
5299: LD_INT 102
5301: PUSH
5302: LD_INT 103
5304: PUSH
5305: LD_INT 105
5307: PUSH
5308: LD_INT 106
5310: PUSH
5311: LD_INT 108
5313: PUSH
5314: LD_INT 112
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: ST_TO_ADDR
5330: GO 7589
5332: LD_INT 8
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5468
5340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 2
5348: PUSH
5349: LD_INT 4
5351: PUSH
5352: LD_INT 5
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: LD_INT 7
5360: PUSH
5361: LD_INT 8
5363: PUSH
5364: LD_INT 11
5366: PUSH
5367: LD_INT 12
5369: PUSH
5370: LD_INT 15
5372: PUSH
5373: LD_INT 16
5375: PUSH
5376: LD_INT 20
5378: PUSH
5379: LD_INT 21
5381: PUSH
5382: LD_INT 22
5384: PUSH
5385: LD_INT 23
5387: PUSH
5388: LD_INT 25
5390: PUSH
5391: LD_INT 26
5393: PUSH
5394: LD_INT 30
5396: PUSH
5397: LD_INT 31
5399: PUSH
5400: LD_INT 32
5402: PUSH
5403: LD_INT 36
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 101
5430: PUSH
5431: LD_INT 102
5433: PUSH
5434: LD_INT 103
5436: PUSH
5437: LD_INT 105
5439: PUSH
5440: LD_INT 106
5442: PUSH
5443: LD_INT 108
5445: PUSH
5446: LD_INT 109
5448: PUSH
5449: LD_INT 112
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: ST_TO_ADDR
5466: GO 7589
5468: LD_INT 9
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5612
5476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5477: LD_ADDR_VAR 0 1
5481: PUSH
5482: LD_INT 2
5484: PUSH
5485: LD_INT 4
5487: PUSH
5488: LD_INT 5
5490: PUSH
5491: LD_INT 6
5493: PUSH
5494: LD_INT 7
5496: PUSH
5497: LD_INT 8
5499: PUSH
5500: LD_INT 11
5502: PUSH
5503: LD_INT 12
5505: PUSH
5506: LD_INT 15
5508: PUSH
5509: LD_INT 16
5511: PUSH
5512: LD_INT 20
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 22
5520: PUSH
5521: LD_INT 23
5523: PUSH
5524: LD_INT 25
5526: PUSH
5527: LD_INT 26
5529: PUSH
5530: LD_INT 28
5532: PUSH
5533: LD_INT 30
5535: PUSH
5536: LD_INT 31
5538: PUSH
5539: LD_INT 32
5541: PUSH
5542: LD_INT 36
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 101
5570: PUSH
5571: LD_INT 102
5573: PUSH
5574: LD_INT 103
5576: PUSH
5577: LD_INT 105
5579: PUSH
5580: LD_INT 106
5582: PUSH
5583: LD_INT 108
5585: PUSH
5586: LD_INT 109
5588: PUSH
5589: LD_INT 112
5591: PUSH
5592: LD_INT 114
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: ST_TO_ADDR
5610: GO 7589
5612: LD_INT 10
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5804
5620: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5621: LD_ADDR_VAR 0 1
5625: PUSH
5626: LD_INT 2
5628: PUSH
5629: LD_INT 4
5631: PUSH
5632: LD_INT 5
5634: PUSH
5635: LD_INT 6
5637: PUSH
5638: LD_INT 7
5640: PUSH
5641: LD_INT 8
5643: PUSH
5644: LD_INT 9
5646: PUSH
5647: LD_INT 10
5649: PUSH
5650: LD_INT 11
5652: PUSH
5653: LD_INT 12
5655: PUSH
5656: LD_INT 13
5658: PUSH
5659: LD_INT 14
5661: PUSH
5662: LD_INT 15
5664: PUSH
5665: LD_INT 16
5667: PUSH
5668: LD_INT 17
5670: PUSH
5671: LD_INT 18
5673: PUSH
5674: LD_INT 19
5676: PUSH
5677: LD_INT 20
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 22
5685: PUSH
5686: LD_INT 23
5688: PUSH
5689: LD_INT 24
5691: PUSH
5692: LD_INT 25
5694: PUSH
5695: LD_INT 26
5697: PUSH
5698: LD_INT 28
5700: PUSH
5701: LD_INT 30
5703: PUSH
5704: LD_INT 31
5706: PUSH
5707: LD_INT 32
5709: PUSH
5710: LD_INT 36
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 101
5746: PUSH
5747: LD_INT 102
5749: PUSH
5750: LD_INT 103
5752: PUSH
5753: LD_INT 104
5755: PUSH
5756: LD_INT 105
5758: PUSH
5759: LD_INT 106
5761: PUSH
5762: LD_INT 107
5764: PUSH
5765: LD_INT 108
5767: PUSH
5768: LD_INT 109
5770: PUSH
5771: LD_INT 110
5773: PUSH
5774: LD_INT 111
5776: PUSH
5777: LD_INT 112
5779: PUSH
5780: LD_INT 114
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: ST_TO_ADDR
5802: GO 7589
5804: LD_INT 11
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 6004
5812: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5813: LD_ADDR_VAR 0 1
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 3
5823: PUSH
5824: LD_INT 4
5826: PUSH
5827: LD_INT 5
5829: PUSH
5830: LD_INT 6
5832: PUSH
5833: LD_INT 7
5835: PUSH
5836: LD_INT 8
5838: PUSH
5839: LD_INT 9
5841: PUSH
5842: LD_INT 10
5844: PUSH
5845: LD_INT 11
5847: PUSH
5848: LD_INT 12
5850: PUSH
5851: LD_INT 13
5853: PUSH
5854: LD_INT 14
5856: PUSH
5857: LD_INT 15
5859: PUSH
5860: LD_INT 16
5862: PUSH
5863: LD_INT 17
5865: PUSH
5866: LD_INT 18
5868: PUSH
5869: LD_INT 19
5871: PUSH
5872: LD_INT 20
5874: PUSH
5875: LD_INT 21
5877: PUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 23
5883: PUSH
5884: LD_INT 24
5886: PUSH
5887: LD_INT 25
5889: PUSH
5890: LD_INT 26
5892: PUSH
5893: LD_INT 28
5895: PUSH
5896: LD_INT 30
5898: PUSH
5899: LD_INT 31
5901: PUSH
5902: LD_INT 32
5904: PUSH
5905: LD_INT 34
5907: PUSH
5908: LD_INT 36
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 101
5946: PUSH
5947: LD_INT 102
5949: PUSH
5950: LD_INT 103
5952: PUSH
5953: LD_INT 104
5955: PUSH
5956: LD_INT 105
5958: PUSH
5959: LD_INT 106
5961: PUSH
5962: LD_INT 107
5964: PUSH
5965: LD_INT 108
5967: PUSH
5968: LD_INT 109
5970: PUSH
5971: LD_INT 110
5973: PUSH
5974: LD_INT 111
5976: PUSH
5977: LD_INT 112
5979: PUSH
5980: LD_INT 114
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: ST_TO_ADDR
6002: GO 7589
6004: LD_INT 12
6006: DOUBLE
6007: EQUAL
6008: IFTRUE 6012
6010: GO 6220
6012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6013: LD_ADDR_VAR 0 1
6017: PUSH
6018: LD_INT 1
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: LD_INT 4
6029: PUSH
6030: LD_INT 5
6032: PUSH
6033: LD_INT 6
6035: PUSH
6036: LD_INT 7
6038: PUSH
6039: LD_INT 8
6041: PUSH
6042: LD_INT 9
6044: PUSH
6045: LD_INT 10
6047: PUSH
6048: LD_INT 11
6050: PUSH
6051: LD_INT 12
6053: PUSH
6054: LD_INT 13
6056: PUSH
6057: LD_INT 14
6059: PUSH
6060: LD_INT 15
6062: PUSH
6063: LD_INT 16
6065: PUSH
6066: LD_INT 17
6068: PUSH
6069: LD_INT 18
6071: PUSH
6072: LD_INT 19
6074: PUSH
6075: LD_INT 20
6077: PUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_INT 23
6086: PUSH
6087: LD_INT 24
6089: PUSH
6090: LD_INT 25
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 27
6098: PUSH
6099: LD_INT 28
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_INT 31
6107: PUSH
6108: LD_INT 32
6110: PUSH
6111: LD_INT 33
6113: PUSH
6114: LD_INT 34
6116: PUSH
6117: LD_INT 36
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 101
6158: PUSH
6159: LD_INT 102
6161: PUSH
6162: LD_INT 103
6164: PUSH
6165: LD_INT 104
6167: PUSH
6168: LD_INT 105
6170: PUSH
6171: LD_INT 106
6173: PUSH
6174: LD_INT 107
6176: PUSH
6177: LD_INT 108
6179: PUSH
6180: LD_INT 109
6182: PUSH
6183: LD_INT 110
6185: PUSH
6186: LD_INT 111
6188: PUSH
6189: LD_INT 112
6191: PUSH
6192: LD_INT 113
6194: PUSH
6195: LD_INT 114
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: ST_TO_ADDR
6218: GO 7589
6220: LD_INT 13
6222: DOUBLE
6223: EQUAL
6224: IFTRUE 6228
6226: GO 6424
6228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6229: LD_ADDR_VAR 0 1
6233: PUSH
6234: LD_INT 1
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: LD_INT 4
6245: PUSH
6246: LD_INT 5
6248: PUSH
6249: LD_INT 8
6251: PUSH
6252: LD_INT 9
6254: PUSH
6255: LD_INT 10
6257: PUSH
6258: LD_INT 11
6260: PUSH
6261: LD_INT 12
6263: PUSH
6264: LD_INT 14
6266: PUSH
6267: LD_INT 15
6269: PUSH
6270: LD_INT 16
6272: PUSH
6273: LD_INT 17
6275: PUSH
6276: LD_INT 18
6278: PUSH
6279: LD_INT 19
6281: PUSH
6282: LD_INT 20
6284: PUSH
6285: LD_INT 21
6287: PUSH
6288: LD_INT 22
6290: PUSH
6291: LD_INT 23
6293: PUSH
6294: LD_INT 24
6296: PUSH
6297: LD_INT 25
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 27
6305: PUSH
6306: LD_INT 28
6308: PUSH
6309: LD_INT 30
6311: PUSH
6312: LD_INT 31
6314: PUSH
6315: LD_INT 32
6317: PUSH
6318: LD_INT 33
6320: PUSH
6321: LD_INT 34
6323: PUSH
6324: LD_INT 36
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 101
6362: PUSH
6363: LD_INT 102
6365: PUSH
6366: LD_INT 103
6368: PUSH
6369: LD_INT 104
6371: PUSH
6372: LD_INT 105
6374: PUSH
6375: LD_INT 106
6377: PUSH
6378: LD_INT 107
6380: PUSH
6381: LD_INT 108
6383: PUSH
6384: LD_INT 109
6386: PUSH
6387: LD_INT 110
6389: PUSH
6390: LD_INT 111
6392: PUSH
6393: LD_INT 112
6395: PUSH
6396: LD_INT 113
6398: PUSH
6399: LD_INT 114
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: ST_TO_ADDR
6422: GO 7589
6424: LD_INT 14
6426: DOUBLE
6427: EQUAL
6428: IFTRUE 6432
6430: GO 6644
6432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6433: LD_ADDR_VAR 0 1
6437: PUSH
6438: LD_INT 1
6440: PUSH
6441: LD_INT 2
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: LD_INT 4
6449: PUSH
6450: LD_INT 5
6452: PUSH
6453: LD_INT 6
6455: PUSH
6456: LD_INT 7
6458: PUSH
6459: LD_INT 8
6461: PUSH
6462: LD_INT 9
6464: PUSH
6465: LD_INT 10
6467: PUSH
6468: LD_INT 11
6470: PUSH
6471: LD_INT 12
6473: PUSH
6474: LD_INT 13
6476: PUSH
6477: LD_INT 14
6479: PUSH
6480: LD_INT 15
6482: PUSH
6483: LD_INT 16
6485: PUSH
6486: LD_INT 17
6488: PUSH
6489: LD_INT 18
6491: PUSH
6492: LD_INT 19
6494: PUSH
6495: LD_INT 20
6497: PUSH
6498: LD_INT 21
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_INT 23
6506: PUSH
6507: LD_INT 24
6509: PUSH
6510: LD_INT 25
6512: PUSH
6513: LD_INT 26
6515: PUSH
6516: LD_INT 27
6518: PUSH
6519: LD_INT 28
6521: PUSH
6522: LD_INT 29
6524: PUSH
6525: LD_INT 30
6527: PUSH
6528: LD_INT 31
6530: PUSH
6531: LD_INT 32
6533: PUSH
6534: LD_INT 33
6536: PUSH
6537: LD_INT 34
6539: PUSH
6540: LD_INT 36
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 101
6582: PUSH
6583: LD_INT 102
6585: PUSH
6586: LD_INT 103
6588: PUSH
6589: LD_INT 104
6591: PUSH
6592: LD_INT 105
6594: PUSH
6595: LD_INT 106
6597: PUSH
6598: LD_INT 107
6600: PUSH
6601: LD_INT 108
6603: PUSH
6604: LD_INT 109
6606: PUSH
6607: LD_INT 110
6609: PUSH
6610: LD_INT 111
6612: PUSH
6613: LD_INT 112
6615: PUSH
6616: LD_INT 113
6618: PUSH
6619: LD_INT 114
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: ST_TO_ADDR
6642: GO 7589
6644: LD_INT 15
6646: DOUBLE
6647: EQUAL
6648: IFTRUE 6652
6650: GO 6864
6652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6653: LD_ADDR_VAR 0 1
6657: PUSH
6658: LD_INT 1
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: LD_INT 6
6675: PUSH
6676: LD_INT 7
6678: PUSH
6679: LD_INT 8
6681: PUSH
6682: LD_INT 9
6684: PUSH
6685: LD_INT 10
6687: PUSH
6688: LD_INT 11
6690: PUSH
6691: LD_INT 12
6693: PUSH
6694: LD_INT 13
6696: PUSH
6697: LD_INT 14
6699: PUSH
6700: LD_INT 15
6702: PUSH
6703: LD_INT 16
6705: PUSH
6706: LD_INT 17
6708: PUSH
6709: LD_INT 18
6711: PUSH
6712: LD_INT 19
6714: PUSH
6715: LD_INT 20
6717: PUSH
6718: LD_INT 21
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_INT 23
6726: PUSH
6727: LD_INT 24
6729: PUSH
6730: LD_INT 25
6732: PUSH
6733: LD_INT 26
6735: PUSH
6736: LD_INT 27
6738: PUSH
6739: LD_INT 28
6741: PUSH
6742: LD_INT 29
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: LD_INT 32
6753: PUSH
6754: LD_INT 33
6756: PUSH
6757: LD_INT 34
6759: PUSH
6760: LD_INT 36
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 101
6802: PUSH
6803: LD_INT 102
6805: PUSH
6806: LD_INT 103
6808: PUSH
6809: LD_INT 104
6811: PUSH
6812: LD_INT 105
6814: PUSH
6815: LD_INT 106
6817: PUSH
6818: LD_INT 107
6820: PUSH
6821: LD_INT 108
6823: PUSH
6824: LD_INT 109
6826: PUSH
6827: LD_INT 110
6829: PUSH
6830: LD_INT 111
6832: PUSH
6833: LD_INT 112
6835: PUSH
6836: LD_INT 113
6838: PUSH
6839: LD_INT 114
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: ST_TO_ADDR
6862: GO 7589
6864: LD_INT 16
6866: DOUBLE
6867: EQUAL
6868: IFTRUE 6872
6870: GO 6996
6872: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6873: LD_ADDR_VAR 0 1
6877: PUSH
6878: LD_INT 2
6880: PUSH
6881: LD_INT 4
6883: PUSH
6884: LD_INT 5
6886: PUSH
6887: LD_INT 7
6889: PUSH
6890: LD_INT 11
6892: PUSH
6893: LD_INT 12
6895: PUSH
6896: LD_INT 15
6898: PUSH
6899: LD_INT 16
6901: PUSH
6902: LD_INT 20
6904: PUSH
6905: LD_INT 21
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_INT 23
6913: PUSH
6914: LD_INT 25
6916: PUSH
6917: LD_INT 26
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 31
6925: PUSH
6926: LD_INT 32
6928: PUSH
6929: LD_INT 33
6931: PUSH
6932: LD_INT 34
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 101
6958: PUSH
6959: LD_INT 102
6961: PUSH
6962: LD_INT 103
6964: PUSH
6965: LD_INT 106
6967: PUSH
6968: LD_INT 108
6970: PUSH
6971: LD_INT 112
6973: PUSH
6974: LD_INT 113
6976: PUSH
6977: LD_INT 114
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: ST_TO_ADDR
6994: GO 7589
6996: LD_INT 17
6998: DOUBLE
6999: EQUAL
7000: IFTRUE 7004
7002: GO 7216
7004: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7005: LD_ADDR_VAR 0 1
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: LD_INT 8
7033: PUSH
7034: LD_INT 9
7036: PUSH
7037: LD_INT 10
7039: PUSH
7040: LD_INT 11
7042: PUSH
7043: LD_INT 12
7045: PUSH
7046: LD_INT 13
7048: PUSH
7049: LD_INT 14
7051: PUSH
7052: LD_INT 15
7054: PUSH
7055: LD_INT 16
7057: PUSH
7058: LD_INT 17
7060: PUSH
7061: LD_INT 18
7063: PUSH
7064: LD_INT 19
7066: PUSH
7067: LD_INT 20
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 24
7081: PUSH
7082: LD_INT 25
7084: PUSH
7085: LD_INT 26
7087: PUSH
7088: LD_INT 27
7090: PUSH
7091: LD_INT 28
7093: PUSH
7094: LD_INT 29
7096: PUSH
7097: LD_INT 30
7099: PUSH
7100: LD_INT 31
7102: PUSH
7103: LD_INT 32
7105: PUSH
7106: LD_INT 33
7108: PUSH
7109: LD_INT 34
7111: PUSH
7112: LD_INT 36
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 101
7154: PUSH
7155: LD_INT 102
7157: PUSH
7158: LD_INT 103
7160: PUSH
7161: LD_INT 104
7163: PUSH
7164: LD_INT 105
7166: PUSH
7167: LD_INT 106
7169: PUSH
7170: LD_INT 107
7172: PUSH
7173: LD_INT 108
7175: PUSH
7176: LD_INT 109
7178: PUSH
7179: LD_INT 110
7181: PUSH
7182: LD_INT 111
7184: PUSH
7185: LD_INT 112
7187: PUSH
7188: LD_INT 113
7190: PUSH
7191: LD_INT 114
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: ST_TO_ADDR
7214: GO 7589
7216: LD_INT 18
7218: DOUBLE
7219: EQUAL
7220: IFTRUE 7224
7222: GO 7360
7224: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7225: LD_ADDR_VAR 0 1
7229: PUSH
7230: LD_INT 2
7232: PUSH
7233: LD_INT 4
7235: PUSH
7236: LD_INT 5
7238: PUSH
7239: LD_INT 7
7241: PUSH
7242: LD_INT 11
7244: PUSH
7245: LD_INT 12
7247: PUSH
7248: LD_INT 15
7250: PUSH
7251: LD_INT 16
7253: PUSH
7254: LD_INT 20
7256: PUSH
7257: LD_INT 21
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 23
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 26
7271: PUSH
7272: LD_INT 30
7274: PUSH
7275: LD_INT 31
7277: PUSH
7278: LD_INT 32
7280: PUSH
7281: LD_INT 33
7283: PUSH
7284: LD_INT 34
7286: PUSH
7287: LD_INT 35
7289: PUSH
7290: LD_INT 36
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 101
7318: PUSH
7319: LD_INT 102
7321: PUSH
7322: LD_INT 103
7324: PUSH
7325: LD_INT 106
7327: PUSH
7328: LD_INT 108
7330: PUSH
7331: LD_INT 112
7333: PUSH
7334: LD_INT 113
7336: PUSH
7337: LD_INT 114
7339: PUSH
7340: LD_INT 115
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 7589
7360: LD_INT 19
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7588
7368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7369: LD_ADDR_VAR 0 1
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: LD_INT 2
7379: PUSH
7380: LD_INT 3
7382: PUSH
7383: LD_INT 4
7385: PUSH
7386: LD_INT 5
7388: PUSH
7389: LD_INT 6
7391: PUSH
7392: LD_INT 7
7394: PUSH
7395: LD_INT 8
7397: PUSH
7398: LD_INT 9
7400: PUSH
7401: LD_INT 10
7403: PUSH
7404: LD_INT 11
7406: PUSH
7407: LD_INT 12
7409: PUSH
7410: LD_INT 13
7412: PUSH
7413: LD_INT 14
7415: PUSH
7416: LD_INT 15
7418: PUSH
7419: LD_INT 16
7421: PUSH
7422: LD_INT 17
7424: PUSH
7425: LD_INT 18
7427: PUSH
7428: LD_INT 19
7430: PUSH
7431: LD_INT 20
7433: PUSH
7434: LD_INT 21
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_INT 23
7442: PUSH
7443: LD_INT 24
7445: PUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 26
7451: PUSH
7452: LD_INT 27
7454: PUSH
7455: LD_INT 28
7457: PUSH
7458: LD_INT 29
7460: PUSH
7461: LD_INT 30
7463: PUSH
7464: LD_INT 31
7466: PUSH
7467: LD_INT 32
7469: PUSH
7470: LD_INT 33
7472: PUSH
7473: LD_INT 34
7475: PUSH
7476: LD_INT 35
7478: PUSH
7479: LD_INT 36
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 101
7522: PUSH
7523: LD_INT 102
7525: PUSH
7526: LD_INT 103
7528: PUSH
7529: LD_INT 104
7531: PUSH
7532: LD_INT 105
7534: PUSH
7535: LD_INT 106
7537: PUSH
7538: LD_INT 107
7540: PUSH
7541: LD_INT 108
7543: PUSH
7544: LD_INT 109
7546: PUSH
7547: LD_INT 110
7549: PUSH
7550: LD_INT 111
7552: PUSH
7553: LD_INT 112
7555: PUSH
7556: LD_INT 113
7558: PUSH
7559: LD_INT 114
7561: PUSH
7562: LD_INT 115
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: ST_TO_ADDR
7586: GO 7589
7588: POP
// end else
7589: GO 7808
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7591: LD_ADDR_VAR 0 1
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: LD_INT 2
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: LD_INT 4
7607: PUSH
7608: LD_INT 5
7610: PUSH
7611: LD_INT 6
7613: PUSH
7614: LD_INT 7
7616: PUSH
7617: LD_INT 8
7619: PUSH
7620: LD_INT 9
7622: PUSH
7623: LD_INT 10
7625: PUSH
7626: LD_INT 11
7628: PUSH
7629: LD_INT 12
7631: PUSH
7632: LD_INT 13
7634: PUSH
7635: LD_INT 14
7637: PUSH
7638: LD_INT 15
7640: PUSH
7641: LD_INT 16
7643: PUSH
7644: LD_INT 17
7646: PUSH
7647: LD_INT 18
7649: PUSH
7650: LD_INT 19
7652: PUSH
7653: LD_INT 20
7655: PUSH
7656: LD_INT 21
7658: PUSH
7659: LD_INT 22
7661: PUSH
7662: LD_INT 23
7664: PUSH
7665: LD_INT 24
7667: PUSH
7668: LD_INT 25
7670: PUSH
7671: LD_INT 26
7673: PUSH
7674: LD_INT 27
7676: PUSH
7677: LD_INT 28
7679: PUSH
7680: LD_INT 29
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 31
7688: PUSH
7689: LD_INT 32
7691: PUSH
7692: LD_INT 33
7694: PUSH
7695: LD_INT 34
7697: PUSH
7698: LD_INT 35
7700: PUSH
7701: LD_INT 36
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 101
7744: PUSH
7745: LD_INT 102
7747: PUSH
7748: LD_INT 103
7750: PUSH
7751: LD_INT 104
7753: PUSH
7754: LD_INT 105
7756: PUSH
7757: LD_INT 106
7759: PUSH
7760: LD_INT 107
7762: PUSH
7763: LD_INT 108
7765: PUSH
7766: LD_INT 109
7768: PUSH
7769: LD_INT 110
7771: PUSH
7772: LD_INT 111
7774: PUSH
7775: LD_INT 112
7777: PUSH
7778: LD_INT 113
7780: PUSH
7781: LD_INT 114
7783: PUSH
7784: LD_INT 115
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: ST_TO_ADDR
// if result then
7808: LD_VAR 0 1
7812: IFFALSE 8101
// begin normal :=  ;
7814: LD_ADDR_VAR 0 3
7818: PUSH
7819: LD_STRING 
7821: ST_TO_ADDR
// hardcore :=  ;
7822: LD_ADDR_VAR 0 4
7826: PUSH
7827: LD_STRING 
7829: ST_TO_ADDR
// for i = 1 to normalCounter do
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: DOUBLE
7836: LD_INT 1
7838: DEC
7839: ST_TO_ADDR
7840: LD_EXP 23
7844: PUSH
7845: FOR_TO
7846: IFFALSE 7947
// begin tmp := 0 ;
7848: LD_ADDR_VAR 0 2
7852: PUSH
7853: LD_STRING 0
7855: ST_TO_ADDR
// if result [ 1 ] then
7856: LD_VAR 0 1
7860: PUSH
7861: LD_INT 1
7863: ARRAY
7864: IFFALSE 7929
// if result [ 1 ] [ 1 ] = i then
7866: LD_VAR 0 1
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PUSH
7879: LD_VAR 0 5
7883: EQUAL
7884: IFFALSE 7929
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: LD_VAR 0 1
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: LD_INT 1
7910: PPUSH
7911: CALL_OW 3
7915: PPUSH
7916: CALL_OW 1
7920: ST_TO_ADDR
// tmp := 1 ;
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_STRING 1
7928: ST_TO_ADDR
// end ; normal := normal & tmp ;
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: LD_VAR 0 3
7938: PUSH
7939: LD_VAR 0 2
7943: STR
7944: ST_TO_ADDR
// end ;
7945: GO 7845
7947: POP
7948: POP
// for i = 1 to hardcoreCounter do
7949: LD_ADDR_VAR 0 5
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_EXP 24
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8070
// begin tmp := 0 ;
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_STRING 0
7974: ST_TO_ADDR
// if result [ 2 ] then
7975: LD_VAR 0 1
7979: PUSH
7980: LD_INT 2
7982: ARRAY
7983: IFFALSE 8052
// if result [ 2 ] [ 1 ] = 100 + i then
7985: LD_VAR 0 1
7989: PUSH
7990: LD_INT 2
7992: ARRAY
7993: PUSH
7994: LD_INT 1
7996: ARRAY
7997: PUSH
7998: LD_INT 100
8000: PUSH
8001: LD_VAR 0 5
8005: PLUS
8006: EQUAL
8007: IFFALSE 8052
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_INT 2
8021: PPUSH
8022: LD_VAR 0 1
8026: PUSH
8027: LD_INT 2
8029: ARRAY
8030: PPUSH
8031: LD_INT 1
8033: PPUSH
8034: CALL_OW 3
8038: PPUSH
8039: CALL_OW 1
8043: ST_TO_ADDR
// tmp := 1 ;
8044: LD_ADDR_VAR 0 2
8048: PUSH
8049: LD_STRING 1
8051: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_VAR 0 2
8066: STR
8067: ST_TO_ADDR
// end ;
8068: GO 7964
8070: POP
8071: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8072: LD_STRING getStreamItemsFromMission("
8074: PUSH
8075: LD_VAR 0 3
8079: STR
8080: PUSH
8081: LD_STRING ","
8083: STR
8084: PUSH
8085: LD_VAR 0 4
8089: STR
8090: PUSH
8091: LD_STRING ")
8093: STR
8094: PPUSH
8095: CALL_OW 559
// end else
8099: GO 8108
// ToLua ( getStreamItemsFromMission("","") ) ;
8101: LD_STRING getStreamItemsFromMission("","")
8103: PPUSH
8104: CALL_OW 559
// end ;
8108: LD_VAR 0 1
8112: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8113: LD_VAR 0 2
8117: PUSH
8118: LD_INT 100
8120: EQUAL
8121: IFFALSE 9070
// begin if not StreamModeActive then
8123: LD_EXP 22
8127: NOT
8128: IFFALSE 8138
// StreamModeActive := true ;
8130: LD_ADDR_EXP 22
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 0 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 0
8145: EQUAL
8146: IFFALSE 8152
// InitStreamMode ;
8148: CALL 4191 0 0
// if p3 = 1 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 1
8159: EQUAL
8160: IFFALSE 8170
// sRocket := true ;
8162: LD_ADDR_EXP 27
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 2 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 2
8177: EQUAL
8178: IFFALSE 8188
// sSpeed := true ;
8180: LD_ADDR_EXP 26
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 3 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 3
8195: EQUAL
8196: IFFALSE 8206
// sEngine := true ;
8198: LD_ADDR_EXP 28
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 4 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 4
8213: EQUAL
8214: IFFALSE 8224
// sSpec := true ;
8216: LD_ADDR_EXP 25
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 5 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 5
8231: EQUAL
8232: IFFALSE 8242
// sLevel := true ;
8234: LD_ADDR_EXP 29
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 6 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 6
8249: EQUAL
8250: IFFALSE 8260
// sArmoury := true ;
8252: LD_ADDR_EXP 30
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 7 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 7
8267: EQUAL
8268: IFFALSE 8278
// sRadar := true ;
8270: LD_ADDR_EXP 31
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 8 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 8
8285: EQUAL
8286: IFFALSE 8296
// sBunker := true ;
8288: LD_ADDR_EXP 32
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 9 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 9
8303: EQUAL
8304: IFFALSE 8314
// sHack := true ;
8306: LD_ADDR_EXP 33
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 10 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 10
8321: EQUAL
8322: IFFALSE 8332
// sFire := true ;
8324: LD_ADDR_EXP 34
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 11 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 11
8339: EQUAL
8340: IFFALSE 8350
// sRefresh := true ;
8342: LD_ADDR_EXP 35
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 12 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 12
8357: EQUAL
8358: IFFALSE 8368
// sExp := true ;
8360: LD_ADDR_EXP 36
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 13 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 13
8375: EQUAL
8376: IFFALSE 8386
// sDepot := true ;
8378: LD_ADDR_EXP 37
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 14 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 14
8393: EQUAL
8394: IFFALSE 8404
// sFlag := true ;
8396: LD_ADDR_EXP 38
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 15 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 15
8411: EQUAL
8412: IFFALSE 8422
// sKamikadze := true ;
8414: LD_ADDR_EXP 46
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 16 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 16
8429: EQUAL
8430: IFFALSE 8440
// sTroll := true ;
8432: LD_ADDR_EXP 47
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 17 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 17
8447: EQUAL
8448: IFFALSE 8458
// sSlow := true ;
8450: LD_ADDR_EXP 48
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 18 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 18
8465: EQUAL
8466: IFFALSE 8476
// sLack := true ;
8468: LD_ADDR_EXP 49
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 19 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 19
8483: EQUAL
8484: IFFALSE 8494
// sTank := true ;
8486: LD_ADDR_EXP 51
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 20 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 20
8501: EQUAL
8502: IFFALSE 8512
// sRemote := true ;
8504: LD_ADDR_EXP 52
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 21 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 21
8519: EQUAL
8520: IFFALSE 8530
// sPowell := true ;
8522: LD_ADDR_EXP 53
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 22 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 22
8537: EQUAL
8538: IFFALSE 8548
// sTeleport := true ;
8540: LD_ADDR_EXP 56
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 23 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 23
8555: EQUAL
8556: IFFALSE 8566
// sOilTower := true ;
8558: LD_ADDR_EXP 58
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 24 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 24
8573: EQUAL
8574: IFFALSE 8584
// sShovel := true ;
8576: LD_ADDR_EXP 59
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 25 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 25
8591: EQUAL
8592: IFFALSE 8602
// sSheik := true ;
8594: LD_ADDR_EXP 60
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 26 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 26
8609: EQUAL
8610: IFFALSE 8620
// sEarthquake := true ;
8612: LD_ADDR_EXP 62
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 27 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 27
8627: EQUAL
8628: IFFALSE 8638
// sAI := true ;
8630: LD_ADDR_EXP 63
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 28 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 28
8645: EQUAL
8646: IFFALSE 8656
// sCargo := true ;
8648: LD_ADDR_EXP 66
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 29 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 29
8663: EQUAL
8664: IFFALSE 8674
// sDLaser := true ;
8666: LD_ADDR_EXP 67
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 30 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 30
8681: EQUAL
8682: IFFALSE 8692
// sExchange := true ;
8684: LD_ADDR_EXP 68
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 31 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 31
8699: EQUAL
8700: IFFALSE 8710
// sFac := true ;
8702: LD_ADDR_EXP 69
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 32 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 32
8717: EQUAL
8718: IFFALSE 8728
// sPower := true ;
8720: LD_ADDR_EXP 70
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// if p3 = 33 then
8728: LD_VAR 0 3
8732: PUSH
8733: LD_INT 33
8735: EQUAL
8736: IFFALSE 8746
// sRandom := true ;
8738: LD_ADDR_EXP 71
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// if p3 = 34 then
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 34
8753: EQUAL
8754: IFFALSE 8764
// sShield := true ;
8756: LD_ADDR_EXP 72
8760: PUSH
8761: LD_INT 1
8763: ST_TO_ADDR
// if p3 = 35 then
8764: LD_VAR 0 3
8768: PUSH
8769: LD_INT 35
8771: EQUAL
8772: IFFALSE 8782
// sTime := true ;
8774: LD_ADDR_EXP 73
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// if p3 = 36 then
8782: LD_VAR 0 3
8786: PUSH
8787: LD_INT 36
8789: EQUAL
8790: IFFALSE 8800
// sTools := true ;
8792: LD_ADDR_EXP 74
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// if p3 = 101 then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 101
8807: EQUAL
8808: IFFALSE 8818
// sSold := true ;
8810: LD_ADDR_EXP 39
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// if p3 = 102 then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_INT 102
8825: EQUAL
8826: IFFALSE 8836
// sDiff := true ;
8828: LD_ADDR_EXP 40
8832: PUSH
8833: LD_INT 1
8835: ST_TO_ADDR
// if p3 = 103 then
8836: LD_VAR 0 3
8840: PUSH
8841: LD_INT 103
8843: EQUAL
8844: IFFALSE 8854
// sFog := true ;
8846: LD_ADDR_EXP 43
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// if p3 = 104 then
8854: LD_VAR 0 3
8858: PUSH
8859: LD_INT 104
8861: EQUAL
8862: IFFALSE 8872
// sReset := true ;
8864: LD_ADDR_EXP 44
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// if p3 = 105 then
8872: LD_VAR 0 3
8876: PUSH
8877: LD_INT 105
8879: EQUAL
8880: IFFALSE 8890
// sSun := true ;
8882: LD_ADDR_EXP 45
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// if p3 = 106 then
8890: LD_VAR 0 3
8894: PUSH
8895: LD_INT 106
8897: EQUAL
8898: IFFALSE 8908
// sTiger := true ;
8900: LD_ADDR_EXP 41
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// if p3 = 107 then
8908: LD_VAR 0 3
8912: PUSH
8913: LD_INT 107
8915: EQUAL
8916: IFFALSE 8926
// sBomb := true ;
8918: LD_ADDR_EXP 42
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
// if p3 = 108 then
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 108
8933: EQUAL
8934: IFFALSE 8944
// sWound := true ;
8936: LD_ADDR_EXP 50
8940: PUSH
8941: LD_INT 1
8943: ST_TO_ADDR
// if p3 = 109 then
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 109
8951: EQUAL
8952: IFFALSE 8962
// sBetray := true ;
8954: LD_ADDR_EXP 54
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// if p3 = 110 then
8962: LD_VAR 0 3
8966: PUSH
8967: LD_INT 110
8969: EQUAL
8970: IFFALSE 8980
// sContamin := true ;
8972: LD_ADDR_EXP 55
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// if p3 = 111 then
8980: LD_VAR 0 3
8984: PUSH
8985: LD_INT 111
8987: EQUAL
8988: IFFALSE 8998
// sOil := true ;
8990: LD_ADDR_EXP 57
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// if p3 = 112 then
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 112
9005: EQUAL
9006: IFFALSE 9016
// sStu := true ;
9008: LD_ADDR_EXP 61
9012: PUSH
9013: LD_INT 1
9015: ST_TO_ADDR
// if p3 = 113 then
9016: LD_VAR 0 3
9020: PUSH
9021: LD_INT 113
9023: EQUAL
9024: IFFALSE 9034
// sBazooka := true ;
9026: LD_ADDR_EXP 64
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// if p3 = 114 then
9034: LD_VAR 0 3
9038: PUSH
9039: LD_INT 114
9041: EQUAL
9042: IFFALSE 9052
// sMortar := true ;
9044: LD_ADDR_EXP 65
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if p3 = 115 then
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 115
9059: EQUAL
9060: IFFALSE 9070
// sRanger := true ;
9062: LD_ADDR_EXP 75
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// end ; end ;
9070: PPOPN 6
9072: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9073: LD_EXP 22
9077: PUSH
9078: LD_EXP 27
9082: AND
9083: IFFALSE 9207
9085: GO 9087
9087: DISABLE
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin enable ;
9092: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 22
9100: PUSH
9101: LD_OWVAR 2
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 2
9112: PUSH
9113: LD_INT 34
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 34
9125: PUSH
9126: LD_INT 45
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 34
9135: PUSH
9136: LD_INT 28
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 34
9145: PUSH
9146: LD_INT 47
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: ST_TO_ADDR
// if not tmp then
9169: LD_VAR 0 2
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9207
// for i in tmp do
9178: LD_ADDR_VAR 0 1
9182: PUSH
9183: LD_VAR 0 2
9187: PUSH
9188: FOR_IN
9189: IFFALSE 9205
// begin SetLives ( i , 0 ) ;
9191: LD_VAR 0 1
9195: PPUSH
9196: LD_INT 0
9198: PPUSH
9199: CALL_OW 234
// end ;
9203: GO 9188
9205: POP
9206: POP
// end ;
9207: PPOPN 2
9209: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9210: LD_EXP 22
9214: PUSH
9215: LD_EXP 28
9219: AND
9220: IFFALSE 9304
9222: GO 9224
9224: DISABLE
9225: LD_INT 0
9227: PPUSH
9228: PPUSH
// begin enable ;
9229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9230: LD_ADDR_VAR 0 2
9234: PUSH
9235: LD_INT 22
9237: PUSH
9238: LD_OWVAR 2
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 32
9249: PUSH
9250: LD_INT 3
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 69
9265: ST_TO_ADDR
// if not tmp then
9266: LD_VAR 0 2
9270: NOT
9271: IFFALSE 9275
// exit ;
9273: GO 9304
// for i in tmp do
9275: LD_ADDR_VAR 0 1
9279: PUSH
9280: LD_VAR 0 2
9284: PUSH
9285: FOR_IN
9286: IFFALSE 9302
// begin SetLives ( i , 0 ) ;
9288: LD_VAR 0 1
9292: PPUSH
9293: LD_INT 0
9295: PPUSH
9296: CALL_OW 234
// end ;
9300: GO 9285
9302: POP
9303: POP
// end ;
9304: PPOPN 2
9306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9307: LD_EXP 22
9311: PUSH
9312: LD_EXP 25
9316: AND
9317: IFFALSE 9410
9319: GO 9321
9321: DISABLE
9322: LD_INT 0
9324: PPUSH
// begin enable ;
9325: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9326: LD_ADDR_VAR 0 1
9330: PUSH
9331: LD_INT 22
9333: PUSH
9334: LD_OWVAR 2
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 5
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 25
9358: PUSH
9359: LD_INT 9
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 8
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PPUSH
9386: CALL_OW 69
9390: PUSH
9391: FOR_IN
9392: IFFALSE 9408
// begin SetClass ( i , 1 ) ;
9394: LD_VAR 0 1
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 336
// end ;
9406: GO 9391
9408: POP
9409: POP
// end ;
9410: PPOPN 1
9412: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9413: LD_EXP 22
9417: PUSH
9418: LD_EXP 26
9422: AND
9423: PUSH
9424: LD_OWVAR 65
9428: PUSH
9429: LD_INT 7
9431: LESS
9432: AND
9433: IFFALSE 9447
9435: GO 9437
9437: DISABLE
// begin enable ;
9438: ENABLE
// game_speed := 7 ;
9439: LD_ADDR_OWVAR 65
9443: PUSH
9444: LD_INT 7
9446: ST_TO_ADDR
// end ;
9447: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9448: LD_EXP 22
9452: PUSH
9453: LD_EXP 29
9457: AND
9458: IFFALSE 9660
9460: GO 9462
9462: DISABLE
9463: LD_INT 0
9465: PPUSH
9466: PPUSH
9467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9468: LD_ADDR_VAR 0 3
9472: PUSH
9473: LD_INT 81
9475: PUSH
9476: LD_OWVAR 2
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 21
9487: PUSH
9488: LD_INT 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: ST_TO_ADDR
// if not tmp then
9504: LD_VAR 0 3
9508: NOT
9509: IFFALSE 9513
// exit ;
9511: GO 9660
// if tmp > 5 then
9513: LD_VAR 0 3
9517: PUSH
9518: LD_INT 5
9520: GREATER
9521: IFFALSE 9533
// k := 5 else
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: LD_INT 5
9530: ST_TO_ADDR
9531: GO 9543
// k := tmp ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_VAR 0 3
9542: ST_TO_ADDR
// for i := 1 to k do
9543: LD_ADDR_VAR 0 1
9547: PUSH
9548: DOUBLE
9549: LD_INT 1
9551: DEC
9552: ST_TO_ADDR
9553: LD_VAR 0 2
9557: PUSH
9558: FOR_TO
9559: IFFALSE 9658
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9561: LD_VAR 0 3
9565: PUSH
9566: LD_VAR 0 1
9570: ARRAY
9571: PPUSH
9572: LD_VAR 0 1
9576: PUSH
9577: LD_INT 4
9579: MOD
9580: PUSH
9581: LD_INT 1
9583: PLUS
9584: PPUSH
9585: CALL_OW 259
9589: PUSH
9590: LD_INT 10
9592: LESS
9593: IFFALSE 9656
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9595: LD_VAR 0 3
9599: PUSH
9600: LD_VAR 0 1
9604: ARRAY
9605: PPUSH
9606: LD_VAR 0 1
9610: PUSH
9611: LD_INT 4
9613: MOD
9614: PUSH
9615: LD_INT 1
9617: PLUS
9618: PPUSH
9619: LD_VAR 0 3
9623: PUSH
9624: LD_VAR 0 1
9628: ARRAY
9629: PPUSH
9630: LD_VAR 0 1
9634: PUSH
9635: LD_INT 4
9637: MOD
9638: PUSH
9639: LD_INT 1
9641: PLUS
9642: PPUSH
9643: CALL_OW 259
9647: PUSH
9648: LD_INT 1
9650: PLUS
9651: PPUSH
9652: CALL_OW 237
9656: GO 9558
9658: POP
9659: POP
// end ;
9660: PPOPN 3
9662: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9663: LD_EXP 22
9667: PUSH
9668: LD_EXP 30
9672: AND
9673: IFFALSE 9693
9675: GO 9677
9677: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9678: LD_INT 4
9680: PPUSH
9681: LD_OWVAR 2
9685: PPUSH
9686: LD_INT 0
9688: PPUSH
9689: CALL_OW 324
9693: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9694: LD_EXP 22
9698: PUSH
9699: LD_EXP 59
9703: AND
9704: IFFALSE 9724
9706: GO 9708
9708: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9709: LD_INT 19
9711: PPUSH
9712: LD_OWVAR 2
9716: PPUSH
9717: LD_INT 0
9719: PPUSH
9720: CALL_OW 324
9724: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9725: LD_EXP 22
9729: PUSH
9730: LD_EXP 31
9734: AND
9735: IFFALSE 9837
9737: GO 9739
9739: DISABLE
9740: LD_INT 0
9742: PPUSH
9743: PPUSH
// begin enable ;
9744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9745: LD_ADDR_VAR 0 2
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_OWVAR 2
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: LD_INT 34
9767: PUSH
9768: LD_INT 11
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 34
9777: PUSH
9778: LD_INT 30
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PPUSH
9794: CALL_OW 69
9798: ST_TO_ADDR
// if not tmp then
9799: LD_VAR 0 2
9803: NOT
9804: IFFALSE 9808
// exit ;
9806: GO 9837
// for i in tmp do
9808: LD_ADDR_VAR 0 1
9812: PUSH
9813: LD_VAR 0 2
9817: PUSH
9818: FOR_IN
9819: IFFALSE 9835
// begin SetLives ( i , 0 ) ;
9821: LD_VAR 0 1
9825: PPUSH
9826: LD_INT 0
9828: PPUSH
9829: CALL_OW 234
// end ;
9833: GO 9818
9835: POP
9836: POP
// end ;
9837: PPOPN 2
9839: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9840: LD_EXP 22
9844: PUSH
9845: LD_EXP 32
9849: AND
9850: IFFALSE 9870
9852: GO 9854
9854: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9855: LD_INT 32
9857: PPUSH
9858: LD_OWVAR 2
9862: PPUSH
9863: LD_INT 0
9865: PPUSH
9866: CALL_OW 324
9870: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9871: LD_EXP 22
9875: PUSH
9876: LD_EXP 33
9880: AND
9881: IFFALSE 10062
9883: GO 9885
9885: DISABLE
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9891: LD_ADDR_VAR 0 2
9895: PUSH
9896: LD_INT 22
9898: PUSH
9899: LD_OWVAR 2
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 33
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PPUSH
9922: CALL_OW 69
9926: ST_TO_ADDR
// if not tmp then
9927: LD_VAR 0 2
9931: NOT
9932: IFFALSE 9936
// exit ;
9934: GO 10062
// side := 0 ;
9936: LD_ADDR_VAR 0 3
9940: PUSH
9941: LD_INT 0
9943: ST_TO_ADDR
// for i := 1 to 8 do
9944: LD_ADDR_VAR 0 1
9948: PUSH
9949: DOUBLE
9950: LD_INT 1
9952: DEC
9953: ST_TO_ADDR
9954: LD_INT 8
9956: PUSH
9957: FOR_TO
9958: IFFALSE 10006
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9960: LD_OWVAR 2
9964: PUSH
9965: LD_VAR 0 1
9969: NONEQUAL
9970: PUSH
9971: LD_OWVAR 2
9975: PPUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 81
9985: PUSH
9986: LD_INT 2
9988: EQUAL
9989: AND
9990: IFFALSE 10004
// begin side := i ;
9992: LD_ADDR_VAR 0 3
9996: PUSH
9997: LD_VAR 0 1
10001: ST_TO_ADDR
// break ;
10002: GO 10006
// end ;
10004: GO 9957
10006: POP
10007: POP
// if not side then
10008: LD_VAR 0 3
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10062
// for i := 1 to tmp do
10017: LD_ADDR_VAR 0 1
10021: PUSH
10022: DOUBLE
10023: LD_INT 1
10025: DEC
10026: ST_TO_ADDR
10027: LD_VAR 0 2
10031: PUSH
10032: FOR_TO
10033: IFFALSE 10060
// if Prob ( 60 ) then
10035: LD_INT 60
10037: PPUSH
10038: CALL_OW 13
10042: IFFALSE 10058
// SetSide ( i , side ) ;
10044: LD_VAR 0 1
10048: PPUSH
10049: LD_VAR 0 3
10053: PPUSH
10054: CALL_OW 235
10058: GO 10032
10060: POP
10061: POP
// end ;
10062: PPOPN 3
10064: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10065: LD_EXP 22
10069: PUSH
10070: LD_EXP 35
10074: AND
10075: IFFALSE 10194
10077: GO 10079
10079: DISABLE
10080: LD_INT 0
10082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10083: LD_ADDR_VAR 0 1
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_OWVAR 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 3
10112: PUSH
10113: LD_INT 23
10115: PUSH
10116: LD_INT 0
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 257
10149: PUSH
10150: LD_INT 1
10152: PUSH
10153: LD_INT 2
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: LD_INT 4
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: IN
10168: IFFALSE 10190
// SetClass ( un , rand ( 1 , 4 ) ) ;
10170: LD_VAR 0 1
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: LD_INT 4
10180: PPUSH
10181: CALL_OW 12
10185: PPUSH
10186: CALL_OW 336
10190: GO 10137
10192: POP
10193: POP
// end ;
10194: PPOPN 1
10196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10197: LD_EXP 22
10201: PUSH
10202: LD_EXP 34
10206: AND
10207: IFFALSE 10286
10209: GO 10211
10211: DISABLE
10212: LD_INT 0
10214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10215: LD_ADDR_VAR 0 1
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_OWVAR 2
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 21
10234: PUSH
10235: LD_INT 3
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 69
10250: ST_TO_ADDR
// if not tmp then
10251: LD_VAR 0 1
10255: NOT
10256: IFFALSE 10260
// exit ;
10258: GO 10286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10260: LD_VAR 0 1
10264: PUSH
10265: LD_INT 1
10267: PPUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 12
10277: ARRAY
10278: PPUSH
10279: LD_INT 100
10281: PPUSH
10282: CALL_OW 234
// end ;
10286: PPOPN 1
10288: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10289: LD_EXP 22
10293: PUSH
10294: LD_EXP 36
10298: AND
10299: IFFALSE 10397
10301: GO 10303
10303: DISABLE
10304: LD_INT 0
10306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10307: LD_ADDR_VAR 0 1
10311: PUSH
10312: LD_INT 22
10314: PUSH
10315: LD_OWVAR 2
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 21
10326: PUSH
10327: LD_INT 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: CALL_OW 69
10342: ST_TO_ADDR
// if not tmp then
10343: LD_VAR 0 1
10347: NOT
10348: IFFALSE 10352
// exit ;
10350: GO 10397
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10352: LD_VAR 0 1
10356: PUSH
10357: LD_INT 1
10359: PPUSH
10360: LD_VAR 0 1
10364: PPUSH
10365: CALL_OW 12
10369: ARRAY
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: LD_INT 4
10376: PPUSH
10377: CALL_OW 12
10381: PPUSH
10382: LD_INT 3000
10384: PPUSH
10385: LD_INT 9000
10387: PPUSH
10388: CALL_OW 12
10392: PPUSH
10393: CALL_OW 492
// end ;
10397: PPOPN 1
10399: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10400: LD_EXP 22
10404: PUSH
10405: LD_EXP 37
10409: AND
10410: IFFALSE 10430
10412: GO 10414
10414: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10415: LD_INT 1
10417: PPUSH
10418: LD_OWVAR 2
10422: PPUSH
10423: LD_INT 0
10425: PPUSH
10426: CALL_OW 324
10430: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10431: LD_EXP 22
10435: PUSH
10436: LD_EXP 38
10440: AND
10441: IFFALSE 10524
10443: GO 10445
10445: DISABLE
10446: LD_INT 0
10448: PPUSH
10449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 22
10457: PUSH
10458: LD_OWVAR 2
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 3
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL_OW 69
10485: ST_TO_ADDR
// if not tmp then
10486: LD_VAR 0 2
10490: NOT
10491: IFFALSE 10495
// exit ;
10493: GO 10524
// for i in tmp do
10495: LD_ADDR_VAR 0 1
10499: PUSH
10500: LD_VAR 0 2
10504: PUSH
10505: FOR_IN
10506: IFFALSE 10522
// SetBLevel ( i , 10 ) ;
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_INT 10
10515: PPUSH
10516: CALL_OW 241
10520: GO 10505
10522: POP
10523: POP
// end ;
10524: PPOPN 2
10526: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10527: LD_EXP 22
10531: PUSH
10532: LD_EXP 39
10536: AND
10537: IFFALSE 10648
10539: GO 10541
10541: DISABLE
10542: LD_INT 0
10544: PPUSH
10545: PPUSH
10546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10547: LD_ADDR_VAR 0 3
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_OWVAR 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 25
10566: PUSH
10567: LD_INT 1
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 69
10582: ST_TO_ADDR
// if not tmp then
10583: LD_VAR 0 3
10587: NOT
10588: IFFALSE 10592
// exit ;
10590: GO 10648
// un := tmp [ rand ( 1 , tmp ) ] ;
10592: LD_ADDR_VAR 0 2
10596: PUSH
10597: LD_VAR 0 3
10601: PUSH
10602: LD_INT 1
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: CALL_OW 12
10614: ARRAY
10615: ST_TO_ADDR
// if Crawls ( un ) then
10616: LD_VAR 0 2
10620: PPUSH
10621: CALL_OW 318
10625: IFFALSE 10636
// ComWalk ( un ) ;
10627: LD_VAR 0 2
10631: PPUSH
10632: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10636: LD_VAR 0 2
10640: PPUSH
10641: LD_INT 5
10643: PPUSH
10644: CALL_OW 336
// end ;
10648: PPOPN 3
10650: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10651: LD_EXP 22
10655: PUSH
10656: LD_EXP 40
10660: AND
10661: PUSH
10662: LD_OWVAR 67
10666: PUSH
10667: LD_INT 3
10669: LESS
10670: AND
10671: IFFALSE 10690
10673: GO 10675
10675: DISABLE
// Difficulty := Difficulty + 1 ;
10676: LD_ADDR_OWVAR 67
10680: PUSH
10681: LD_OWVAR 67
10685: PUSH
10686: LD_INT 1
10688: PLUS
10689: ST_TO_ADDR
10690: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10691: LD_EXP 22
10695: PUSH
10696: LD_EXP 41
10700: AND
10701: IFFALSE 10804
10703: GO 10705
10705: DISABLE
10706: LD_INT 0
10708: PPUSH
// begin for i := 1 to 5 do
10709: LD_ADDR_VAR 0 1
10713: PUSH
10714: DOUBLE
10715: LD_INT 1
10717: DEC
10718: ST_TO_ADDR
10719: LD_INT 5
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10802
// begin uc_nation := nation_nature ;
10725: LD_ADDR_OWVAR 21
10729: PUSH
10730: LD_INT 0
10732: ST_TO_ADDR
// uc_side := 0 ;
10733: LD_ADDR_OWVAR 20
10737: PUSH
10738: LD_INT 0
10740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10741: LD_ADDR_OWVAR 29
10745: PUSH
10746: LD_INT 12
10748: PUSH
10749: LD_INT 12
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: ST_TO_ADDR
// hc_agressivity := 20 ;
10756: LD_ADDR_OWVAR 35
10760: PUSH
10761: LD_INT 20
10763: ST_TO_ADDR
// hc_class := class_tiger ;
10764: LD_ADDR_OWVAR 28
10768: PUSH
10769: LD_INT 14
10771: ST_TO_ADDR
// hc_gallery :=  ;
10772: LD_ADDR_OWVAR 33
10776: PUSH
10777: LD_STRING 
10779: ST_TO_ADDR
// hc_name :=  ;
10780: LD_ADDR_OWVAR 26
10784: PUSH
10785: LD_STRING 
10787: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10788: CALL_OW 44
10792: PPUSH
10793: LD_INT 0
10795: PPUSH
10796: CALL_OW 51
// end ;
10800: GO 10722
10802: POP
10803: POP
// end ;
10804: PPOPN 1
10806: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10807: LD_EXP 22
10811: PUSH
10812: LD_EXP 42
10816: AND
10817: IFFALSE 10826
10819: GO 10821
10821: DISABLE
// StreamSibBomb ;
10822: CALL 10827 0 0
10826: END
// export function StreamSibBomb ; var i , x , y ; begin
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
// result := false ;
10833: LD_ADDR_VAR 0 1
10837: PUSH
10838: LD_INT 0
10840: ST_TO_ADDR
// for i := 1 to 16 do
10841: LD_ADDR_VAR 0 2
10845: PUSH
10846: DOUBLE
10847: LD_INT 1
10849: DEC
10850: ST_TO_ADDR
10851: LD_INT 16
10853: PUSH
10854: FOR_TO
10855: IFFALSE 11054
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10857: LD_ADDR_VAR 0 3
10861: PUSH
10862: LD_INT 10
10864: PUSH
10865: LD_INT 20
10867: PUSH
10868: LD_INT 30
10870: PUSH
10871: LD_INT 40
10873: PUSH
10874: LD_INT 50
10876: PUSH
10877: LD_INT 60
10879: PUSH
10880: LD_INT 70
10882: PUSH
10883: LD_INT 80
10885: PUSH
10886: LD_INT 90
10888: PUSH
10889: LD_INT 100
10891: PUSH
10892: LD_INT 110
10894: PUSH
10895: LD_INT 120
10897: PUSH
10898: LD_INT 130
10900: PUSH
10901: LD_INT 140
10903: PUSH
10904: LD_INT 150
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: LD_INT 1
10926: PPUSH
10927: LD_INT 15
10929: PPUSH
10930: CALL_OW 12
10934: ARRAY
10935: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_INT 10
10943: PUSH
10944: LD_INT 20
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 40
10952: PUSH
10953: LD_INT 50
10955: PUSH
10956: LD_INT 60
10958: PUSH
10959: LD_INT 70
10961: PUSH
10962: LD_INT 80
10964: PUSH
10965: LD_INT 90
10967: PUSH
10968: LD_INT 100
10970: PUSH
10971: LD_INT 110
10973: PUSH
10974: LD_INT 120
10976: PUSH
10977: LD_INT 130
10979: PUSH
10980: LD_INT 140
10982: PUSH
10983: LD_INT 150
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 1
11005: PPUSH
11006: LD_INT 15
11008: PPUSH
11009: CALL_OW 12
11013: ARRAY
11014: ST_TO_ADDR
// if ValidHex ( x , y ) then
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_VAR 0 4
11024: PPUSH
11025: CALL_OW 488
11029: IFFALSE 11052
// begin result := [ x , y ] ;
11031: LD_ADDR_VAR 0 1
11035: PUSH
11036: LD_VAR 0 3
11040: PUSH
11041: LD_VAR 0 4
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: ST_TO_ADDR
// break ;
11050: GO 11054
// end ; end ;
11052: GO 10854
11054: POP
11055: POP
// if result then
11056: LD_VAR 0 1
11060: IFFALSE 11120
// begin ToLua ( playSibBomb() ) ;
11062: LD_STRING playSibBomb()
11064: PPUSH
11065: CALL_OW 559
// wait ( 0 0$14 ) ;
11069: LD_INT 490
11071: PPUSH
11072: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11076: LD_VAR 0 1
11080: PUSH
11081: LD_INT 1
11083: ARRAY
11084: PPUSH
11085: LD_VAR 0 1
11089: PUSH
11090: LD_INT 2
11092: ARRAY
11093: PPUSH
11094: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11098: LD_VAR 0 1
11102: PUSH
11103: LD_INT 1
11105: ARRAY
11106: PPUSH
11107: LD_VAR 0 1
11111: PUSH
11112: LD_INT 2
11114: ARRAY
11115: PPUSH
11116: CALL_OW 429
// end ; end ;
11120: LD_VAR 0 1
11124: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11125: LD_EXP 22
11129: PUSH
11130: LD_EXP 44
11134: AND
11135: IFFALSE 11147
11137: GO 11139
11139: DISABLE
// YouLost (  ) ;
11140: LD_STRING 
11142: PPUSH
11143: CALL_OW 104
11147: END
// every 0 0$1 trigger StreamModeActive and sFog do
11148: LD_EXP 22
11152: PUSH
11153: LD_EXP 43
11157: AND
11158: IFFALSE 11172
11160: GO 11162
11162: DISABLE
// FogOff ( your_side ) ;
11163: LD_OWVAR 2
11167: PPUSH
11168: CALL_OW 344
11172: END
// every 0 0$1 trigger StreamModeActive and sSun do
11173: LD_EXP 22
11177: PUSH
11178: LD_EXP 45
11182: AND
11183: IFFALSE 11211
11185: GO 11187
11187: DISABLE
// begin solar_recharge_percent := 0 ;
11188: LD_ADDR_OWVAR 79
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11196: LD_INT 10500
11198: PPUSH
11199: CALL_OW 67
// solar_recharge_percent := 100 ;
11203: LD_ADDR_OWVAR 79
11207: PUSH
11208: LD_INT 100
11210: ST_TO_ADDR
// end ;
11211: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11212: LD_EXP 22
11216: PUSH
11217: LD_EXP 46
11221: AND
11222: IFFALSE 11461
11224: GO 11226
11226: DISABLE
11227: LD_INT 0
11229: PPUSH
11230: PPUSH
11231: PPUSH
// begin tmp := [ ] ;
11232: LD_ADDR_VAR 0 3
11236: PUSH
11237: EMPTY
11238: ST_TO_ADDR
// for i := 1 to 6 do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: DOUBLE
11245: LD_INT 1
11247: DEC
11248: ST_TO_ADDR
11249: LD_INT 6
11251: PUSH
11252: FOR_TO
11253: IFFALSE 11358
// begin uc_nation := nation_nature ;
11255: LD_ADDR_OWVAR 21
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// uc_side := 0 ;
11263: LD_ADDR_OWVAR 20
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11271: LD_ADDR_OWVAR 29
11275: PUSH
11276: LD_INT 12
11278: PUSH
11279: LD_INT 12
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// hc_agressivity := 20 ;
11286: LD_ADDR_OWVAR 35
11290: PUSH
11291: LD_INT 20
11293: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11294: LD_ADDR_OWVAR 28
11298: PUSH
11299: LD_INT 17
11301: ST_TO_ADDR
// hc_gallery :=  ;
11302: LD_ADDR_OWVAR 33
11306: PUSH
11307: LD_STRING 
11309: ST_TO_ADDR
// hc_name :=  ;
11310: LD_ADDR_OWVAR 26
11314: PUSH
11315: LD_STRING 
11317: ST_TO_ADDR
// un := CreateHuman ;
11318: LD_ADDR_VAR 0 2
11322: PUSH
11323: CALL_OW 44
11327: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11328: LD_VAR 0 2
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 51
// tmp := tmp ^ un ;
11340: LD_ADDR_VAR 0 3
11344: PUSH
11345: LD_VAR 0 3
11349: PUSH
11350: LD_VAR 0 2
11354: ADD
11355: ST_TO_ADDR
// end ;
11356: GO 11252
11358: POP
11359: POP
// repeat wait ( 0 0$1 ) ;
11360: LD_INT 35
11362: PPUSH
11363: CALL_OW 67
// for un in tmp do
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_VAR 0 3
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11452
// begin if IsDead ( un ) then
11380: LD_VAR 0 2
11384: PPUSH
11385: CALL_OW 301
11389: IFFALSE 11409
// begin tmp := tmp diff un ;
11391: LD_ADDR_VAR 0 3
11395: PUSH
11396: LD_VAR 0 3
11400: PUSH
11401: LD_VAR 0 2
11405: DIFF
11406: ST_TO_ADDR
// continue ;
11407: GO 11377
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11409: LD_VAR 0 2
11413: PPUSH
11414: LD_INT 3
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 0
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PPUSH
11431: CALL_OW 69
11435: PPUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 74
11445: PPUSH
11446: CALL_OW 115
// end ;
11450: GO 11377
11452: POP
11453: POP
// until not tmp ;
11454: LD_VAR 0 3
11458: NOT
11459: IFFALSE 11360
// end ;
11461: PPOPN 3
11463: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11464: LD_EXP 22
11468: PUSH
11469: LD_EXP 47
11473: AND
11474: IFFALSE 11528
11476: GO 11478
11478: DISABLE
// begin ToLua ( displayTroll(); ) ;
11479: LD_STRING displayTroll();
11481: PPUSH
11482: CALL_OW 559
// wait ( 3 3$00 ) ;
11486: LD_INT 6300
11488: PPUSH
11489: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11493: LD_STRING hideTroll();
11495: PPUSH
11496: CALL_OW 559
// wait ( 1 1$00 ) ;
11500: LD_INT 2100
11502: PPUSH
11503: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11507: LD_STRING displayTroll();
11509: PPUSH
11510: CALL_OW 559
// wait ( 1 1$00 ) ;
11514: LD_INT 2100
11516: PPUSH
11517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11521: LD_STRING hideTroll();
11523: PPUSH
11524: CALL_OW 559
// end ;
11528: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11529: LD_EXP 22
11533: PUSH
11534: LD_EXP 48
11538: AND
11539: IFFALSE 11602
11541: GO 11543
11543: DISABLE
11544: LD_INT 0
11546: PPUSH
// begin p := 0 ;
11547: LD_ADDR_VAR 0 1
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// repeat game_speed := 1 ;
11555: LD_ADDR_OWVAR 65
11559: PUSH
11560: LD_INT 1
11562: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11563: LD_INT 35
11565: PPUSH
11566: CALL_OW 67
// p := p + 1 ;
11570: LD_ADDR_VAR 0 1
11574: PUSH
11575: LD_VAR 0 1
11579: PUSH
11580: LD_INT 1
11582: PLUS
11583: ST_TO_ADDR
// until p >= 60 ;
11584: LD_VAR 0 1
11588: PUSH
11589: LD_INT 60
11591: GREATEREQUAL
11592: IFFALSE 11555
// game_speed := 4 ;
11594: LD_ADDR_OWVAR 65
11598: PUSH
11599: LD_INT 4
11601: ST_TO_ADDR
// end ;
11602: PPOPN 1
11604: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11605: LD_EXP 22
11609: PUSH
11610: LD_EXP 49
11614: AND
11615: IFFALSE 11761
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_INT 22
11631: PUSH
11632: LD_OWVAR 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 2
11643: PUSH
11644: LD_INT 30
11646: PUSH
11647: LD_INT 0
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 30
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: ST_TO_ADDR
// if not depot then
11678: LD_VAR 0 1
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11761
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11687: LD_ADDR_VAR 0 2
11691: PUSH
11692: LD_VAR 0 1
11696: PUSH
11697: LD_INT 1
11699: PPUSH
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 12
11709: ARRAY
11710: PPUSH
11711: CALL_OW 274
11715: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 0
11726: PPUSH
11727: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 2
11738: PPUSH
11739: LD_INT 0
11741: PPUSH
11742: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11746: LD_VAR 0 2
11750: PPUSH
11751: LD_INT 3
11753: PPUSH
11754: LD_INT 0
11756: PPUSH
11757: CALL_OW 277
// end ;
11761: PPOPN 2
11763: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11764: LD_EXP 22
11768: PUSH
11769: LD_EXP 50
11773: AND
11774: IFFALSE 11871
11776: GO 11778
11778: DISABLE
11779: LD_INT 0
11781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_INT 22
11789: PUSH
11790: LD_OWVAR 2
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 21
11801: PUSH
11802: LD_INT 1
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: LD_INT 23
11814: PUSH
11815: LD_INT 0
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: ST_TO_ADDR
// if not tmp then
11836: LD_VAR 0 1
11840: NOT
11841: IFFALSE 11845
// exit ;
11843: GO 11871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11845: LD_VAR 0 1
11849: PUSH
11850: LD_INT 1
11852: PPUSH
11853: LD_VAR 0 1
11857: PPUSH
11858: CALL_OW 12
11862: ARRAY
11863: PPUSH
11864: LD_INT 200
11866: PPUSH
11867: CALL_OW 234
// end ;
11871: PPOPN 1
11873: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11874: LD_EXP 22
11878: PUSH
11879: LD_EXP 51
11883: AND
11884: IFFALSE 11963
11886: GO 11888
11888: DISABLE
11889: LD_INT 0
11891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11892: LD_ADDR_VAR 0 1
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_OWVAR 2
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: ST_TO_ADDR
// if not tmp then
11928: LD_VAR 0 1
11932: NOT
11933: IFFALSE 11937
// exit ;
11935: GO 11963
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11937: LD_VAR 0 1
11941: PUSH
11942: LD_INT 1
11944: PPUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 12
11954: ARRAY
11955: PPUSH
11956: LD_INT 60
11958: PPUSH
11959: CALL_OW 234
// end ;
11963: PPOPN 1
11965: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11966: LD_EXP 22
11970: PUSH
11971: LD_EXP 52
11975: AND
11976: IFFALSE 12075
11978: GO 11980
11980: DISABLE
11981: LD_INT 0
11983: PPUSH
11984: PPUSH
// begin enable ;
11985: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11986: LD_ADDR_VAR 0 1
11990: PUSH
11991: LD_INT 22
11993: PUSH
11994: LD_OWVAR 2
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 61
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: LD_INT 33
12011: PUSH
12012: LD_INT 2
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 69
12028: ST_TO_ADDR
// if not tmp then
12029: LD_VAR 0 1
12033: NOT
12034: IFFALSE 12038
// exit ;
12036: GO 12075
// for i in tmp do
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: LD_VAR 0 1
12047: PUSH
12048: FOR_IN
12049: IFFALSE 12073
// if IsControledBy ( i ) then
12051: LD_VAR 0 2
12055: PPUSH
12056: CALL_OW 312
12060: IFFALSE 12071
// ComUnlink ( i ) ;
12062: LD_VAR 0 2
12066: PPUSH
12067: CALL_OW 136
12071: GO 12048
12073: POP
12074: POP
// end ;
12075: PPOPN 2
12077: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12078: LD_EXP 22
12082: PUSH
12083: LD_EXP 53
12087: AND
12088: IFFALSE 12228
12090: GO 12092
12092: DISABLE
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
// begin ToLua ( displayPowell(); ) ;
12097: LD_STRING displayPowell();
12099: PPUSH
12100: CALL_OW 559
// uc_side := 0 ;
12104: LD_ADDR_OWVAR 20
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// uc_nation := 2 ;
12112: LD_ADDR_OWVAR 21
12116: PUSH
12117: LD_INT 2
12119: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12120: LD_ADDR_OWVAR 37
12124: PUSH
12125: LD_INT 14
12127: ST_TO_ADDR
// vc_engine := engine_siberite ;
12128: LD_ADDR_OWVAR 39
12132: PUSH
12133: LD_INT 3
12135: ST_TO_ADDR
// vc_control := control_apeman ;
12136: LD_ADDR_OWVAR 38
12140: PUSH
12141: LD_INT 5
12143: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12144: LD_ADDR_OWVAR 40
12148: PUSH
12149: LD_INT 29
12151: ST_TO_ADDR
// un := CreateVehicle ;
12152: LD_ADDR_VAR 0 2
12156: PUSH
12157: CALL_OW 45
12161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12162: LD_VAR 0 2
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12174: LD_INT 35
12176: PPUSH
12177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_INT 22
12188: PUSH
12189: LD_OWVAR 2
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: CALL_OW 74
12212: PPUSH
12213: CALL_OW 115
// until IsDead ( un ) ;
12217: LD_VAR 0 2
12221: PPUSH
12222: CALL_OW 301
12226: IFFALSE 12174
// end ;
12228: PPOPN 2
12230: END
// every 0 0$1 trigger StreamModeActive and sStu do
12231: LD_EXP 22
12235: PUSH
12236: LD_EXP 61
12240: AND
12241: IFFALSE 12257
12243: GO 12245
12245: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12246: LD_STRING displayStucuk();
12248: PPUSH
12249: CALL_OW 559
// ResetFog ;
12253: CALL_OW 335
// end ;
12257: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12258: LD_EXP 22
12262: PUSH
12263: LD_EXP 54
12267: AND
12268: IFFALSE 12409
12270: GO 12272
12272: DISABLE
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12277: LD_ADDR_VAR 0 2
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_OWVAR 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PPUSH
12308: CALL_OW 69
12312: ST_TO_ADDR
// if not tmp then
12313: LD_VAR 0 2
12317: NOT
12318: IFFALSE 12322
// exit ;
12320: GO 12409
// un := tmp [ rand ( 1 , tmp ) ] ;
12322: LD_ADDR_VAR 0 1
12326: PUSH
12327: LD_VAR 0 2
12331: PUSH
12332: LD_INT 1
12334: PPUSH
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 12
12344: ARRAY
12345: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12346: LD_VAR 0 1
12350: PPUSH
12351: LD_INT 0
12353: PPUSH
12354: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12358: LD_VAR 0 1
12362: PPUSH
12363: LD_OWVAR 3
12367: PUSH
12368: LD_VAR 0 1
12372: DIFF
12373: PPUSH
12374: LD_VAR 0 1
12378: PPUSH
12379: CALL_OW 74
12383: PPUSH
12384: CALL_OW 115
// wait ( 0 0$20 ) ;
12388: LD_INT 700
12390: PPUSH
12391: CALL_OW 67
// SetSide ( un , your_side ) ;
12395: LD_VAR 0 1
12399: PPUSH
12400: LD_OWVAR 2
12404: PPUSH
12405: CALL_OW 235
// end ;
12409: PPOPN 2
12411: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12412: LD_EXP 22
12416: PUSH
12417: LD_EXP 55
12421: AND
12422: IFFALSE 12528
12424: GO 12426
12426: DISABLE
12427: LD_INT 0
12429: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12430: LD_ADDR_VAR 0 1
12434: PUSH
12435: LD_INT 22
12437: PUSH
12438: LD_OWVAR 2
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: LD_INT 30
12452: PUSH
12453: LD_INT 0
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PPUSH
12479: CALL_OW 69
12483: ST_TO_ADDR
// if not depot then
12484: LD_VAR 0 1
12488: NOT
12489: IFFALSE 12493
// exit ;
12491: GO 12528
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PPUSH
12502: CALL_OW 250
12506: PPUSH
12507: LD_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: ARRAY
12515: PPUSH
12516: CALL_OW 251
12520: PPUSH
12521: LD_INT 70
12523: PPUSH
12524: CALL_OW 495
// end ;
12528: PPOPN 1
12530: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12531: LD_EXP 22
12535: PUSH
12536: LD_EXP 56
12540: AND
12541: IFFALSE 12752
12543: GO 12545
12545: DISABLE
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
12550: PPUSH
12551: PPUSH
12552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12553: LD_ADDR_VAR 0 5
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_OWVAR 2
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 21
12572: PUSH
12573: LD_INT 1
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 69
12588: ST_TO_ADDR
// if not tmp then
12589: LD_VAR 0 5
12593: NOT
12594: IFFALSE 12598
// exit ;
12596: GO 12752
// for i in tmp do
12598: LD_ADDR_VAR 0 1
12602: PUSH
12603: LD_VAR 0 5
12607: PUSH
12608: FOR_IN
12609: IFFALSE 12750
// begin d := rand ( 0 , 5 ) ;
12611: LD_ADDR_VAR 0 4
12615: PUSH
12616: LD_INT 0
12618: PPUSH
12619: LD_INT 5
12621: PPUSH
12622: CALL_OW 12
12626: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 250
12641: PPUSH
12642: LD_VAR 0 4
12646: PPUSH
12647: LD_INT 3
12649: PPUSH
12650: LD_INT 12
12652: PPUSH
12653: CALL_OW 12
12657: PPUSH
12658: CALL_OW 272
12662: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 251
12677: PPUSH
12678: LD_VAR 0 4
12682: PPUSH
12683: LD_INT 3
12685: PPUSH
12686: LD_INT 12
12688: PPUSH
12689: CALL_OW 12
12693: PPUSH
12694: CALL_OW 273
12698: ST_TO_ADDR
// if ValidHex ( x , y ) then
12699: LD_VAR 0 2
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: CALL_OW 488
12713: IFFALSE 12748
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_VAR 0 3
12729: PPUSH
12730: LD_INT 3
12732: PPUSH
12733: LD_INT 6
12735: PPUSH
12736: CALL_OW 12
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 483
// end ;
12748: GO 12608
12750: POP
12751: POP
// end ;
12752: PPOPN 5
12754: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12755: LD_EXP 22
12759: PUSH
12760: LD_EXP 57
12764: AND
12765: IFFALSE 12859
12767: GO 12769
12769: DISABLE
12770: LD_INT 0
12772: PPUSH
12773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_INT 22
12781: PUSH
12782: LD_OWVAR 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 32
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: ST_TO_ADDR
// if not tmp then
12821: LD_VAR 0 2
12825: NOT
12826: IFFALSE 12830
// exit ;
12828: GO 12859
// for i in tmp do
12830: LD_ADDR_VAR 0 1
12834: PUSH
12835: LD_VAR 0 2
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12857
// SetFuel ( i , 0 ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 240
12855: GO 12840
12857: POP
12858: POP
// end ;
12859: PPOPN 2
12861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12862: LD_EXP 22
12866: PUSH
12867: LD_EXP 58
12871: AND
12872: IFFALSE 12938
12874: GO 12876
12876: DISABLE
12877: LD_INT 0
12879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12880: LD_ADDR_VAR 0 1
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_OWVAR 2
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 30
12899: PUSH
12900: LD_INT 29
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 69
12915: ST_TO_ADDR
// if not tmp then
12916: LD_VAR 0 1
12920: NOT
12921: IFFALSE 12925
// exit ;
12923: GO 12938
// DestroyUnit ( tmp [ 1 ] ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: CALL_OW 65
// end ;
12938: PPOPN 1
12940: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12941: LD_EXP 22
12945: PUSH
12946: LD_EXP 60
12950: AND
12951: IFFALSE 13080
12953: GO 12955
12955: DISABLE
12956: LD_INT 0
12958: PPUSH
// begin uc_side := 0 ;
12959: LD_ADDR_OWVAR 20
12963: PUSH
12964: LD_INT 0
12966: ST_TO_ADDR
// uc_nation := nation_arabian ;
12967: LD_ADDR_OWVAR 21
12971: PUSH
12972: LD_INT 2
12974: ST_TO_ADDR
// hc_gallery :=  ;
12975: LD_ADDR_OWVAR 33
12979: PUSH
12980: LD_STRING 
12982: ST_TO_ADDR
// hc_name :=  ;
12983: LD_ADDR_OWVAR 26
12987: PUSH
12988: LD_STRING 
12990: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12991: LD_INT 1
12993: PPUSH
12994: LD_INT 11
12996: PPUSH
12997: LD_INT 10
12999: PPUSH
13000: CALL_OW 380
// un := CreateHuman ;
13004: LD_ADDR_VAR 0 1
13008: PUSH
13009: CALL_OW 44
13013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13014: LD_VAR 0 1
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13026: LD_INT 35
13028: PPUSH
13029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13033: LD_VAR 0 1
13037: PPUSH
13038: LD_INT 22
13040: PUSH
13041: LD_OWVAR 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: PPUSH
13055: LD_VAR 0 1
13059: PPUSH
13060: CALL_OW 74
13064: PPUSH
13065: CALL_OW 115
// until IsDead ( un ) ;
13069: LD_VAR 0 1
13073: PPUSH
13074: CALL_OW 301
13078: IFFALSE 13026
// end ;
13080: PPOPN 1
13082: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13083: LD_EXP 22
13087: PUSH
13088: LD_EXP 62
13092: AND
13093: IFFALSE 13105
13095: GO 13097
13097: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13098: LD_STRING earthquake(getX(game), 0, 32)
13100: PPUSH
13101: CALL_OW 559
13105: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13106: LD_EXP 22
13110: PUSH
13111: LD_EXP 63
13115: AND
13116: IFFALSE 13207
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
// begin enable ;
13124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13125: LD_ADDR_VAR 0 1
13129: PUSH
13130: LD_INT 22
13132: PUSH
13133: LD_OWVAR 2
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 33
13154: PUSH
13155: LD_INT 3
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PPUSH
13167: CALL_OW 69
13171: ST_TO_ADDR
// if not tmp then
13172: LD_VAR 0 1
13176: NOT
13177: IFFALSE 13181
// exit ;
13179: GO 13207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13181: LD_VAR 0 1
13185: PUSH
13186: LD_INT 1
13188: PPUSH
13189: LD_VAR 0 1
13193: PPUSH
13194: CALL_OW 12
13198: ARRAY
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 234
// end ;
13207: PPOPN 1
13209: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13210: LD_EXP 22
13214: PUSH
13215: LD_EXP 64
13219: AND
13220: IFFALSE 13361
13222: GO 13224
13224: DISABLE
13225: LD_INT 0
13227: PPUSH
13228: PPUSH
13229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13230: LD_ADDR_VAR 0 3
13234: PUSH
13235: LD_INT 22
13237: PUSH
13238: LD_OWVAR 2
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 25
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: ST_TO_ADDR
// if not tmp then
13266: LD_VAR 0 3
13270: NOT
13271: IFFALSE 13275
// exit ;
13273: GO 13361
// un := tmp [ rand ( 1 , tmp ) ] ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_VAR 0 3
13284: PUSH
13285: LD_INT 1
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: CALL_OW 12
13297: ARRAY
13298: ST_TO_ADDR
// if Crawls ( un ) then
13299: LD_VAR 0 2
13303: PPUSH
13304: CALL_OW 318
13308: IFFALSE 13319
// ComWalk ( un ) ;
13310: LD_VAR 0 2
13314: PPUSH
13315: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13319: LD_VAR 0 2
13323: PPUSH
13324: LD_INT 9
13326: PPUSH
13327: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13331: LD_INT 28
13333: PPUSH
13334: LD_OWVAR 2
13338: PPUSH
13339: LD_INT 2
13341: PPUSH
13342: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13346: LD_INT 29
13348: PPUSH
13349: LD_OWVAR 2
13353: PPUSH
13354: LD_INT 2
13356: PPUSH
13357: CALL_OW 322
// end ;
13361: PPOPN 3
13363: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13364: LD_EXP 22
13368: PUSH
13369: LD_EXP 65
13373: AND
13374: IFFALSE 13485
13376: GO 13378
13378: DISABLE
13379: LD_INT 0
13381: PPUSH
13382: PPUSH
13383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: LD_INT 22
13391: PUSH
13392: LD_OWVAR 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 25
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: ST_TO_ADDR
// if not tmp then
13420: LD_VAR 0 3
13424: NOT
13425: IFFALSE 13429
// exit ;
13427: GO 13485
// un := tmp [ rand ( 1 , tmp ) ] ;
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: LD_VAR 0 3
13438: PUSH
13439: LD_INT 1
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: CALL_OW 12
13451: ARRAY
13452: ST_TO_ADDR
// if Crawls ( un ) then
13453: LD_VAR 0 2
13457: PPUSH
13458: CALL_OW 318
13462: IFFALSE 13473
// ComWalk ( un ) ;
13464: LD_VAR 0 2
13468: PPUSH
13469: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13473: LD_VAR 0 2
13477: PPUSH
13478: LD_INT 8
13480: PPUSH
13481: CALL_OW 336
// end ;
13485: PPOPN 3
13487: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13488: LD_EXP 22
13492: PUSH
13493: LD_EXP 66
13497: AND
13498: IFFALSE 13642
13500: GO 13502
13502: DISABLE
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 22
13514: PUSH
13515: LD_OWVAR 2
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 21
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 34
13539: PUSH
13540: LD_INT 12
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 34
13549: PUSH
13550: LD_INT 51
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 34
13559: PUSH
13560: LD_INT 32
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: PPUSH
13578: CALL_OW 69
13582: ST_TO_ADDR
// if not tmp then
13583: LD_VAR 0 2
13587: NOT
13588: IFFALSE 13592
// exit ;
13590: GO 13642
// for i in tmp do
13592: LD_ADDR_VAR 0 1
13596: PUSH
13597: LD_VAR 0 2
13601: PUSH
13602: FOR_IN
13603: IFFALSE 13640
// if GetCargo ( i , mat_artifact ) = 0 then
13605: LD_VAR 0 1
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 289
13617: PUSH
13618: LD_INT 0
13620: EQUAL
13621: IFFALSE 13638
// SetCargo ( i , mat_siberit , 100 ) ;
13623: LD_VAR 0 1
13627: PPUSH
13628: LD_INT 3
13630: PPUSH
13631: LD_INT 100
13633: PPUSH
13634: CALL_OW 290
13638: GO 13602
13640: POP
13641: POP
// end ;
13642: PPOPN 2
13644: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13645: LD_EXP 22
13649: PUSH
13650: LD_EXP 67
13654: AND
13655: IFFALSE 13838
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13664: LD_ADDR_VAR 0 2
13668: PUSH
13669: LD_INT 22
13671: PUSH
13672: LD_OWVAR 2
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 69
13685: ST_TO_ADDR
// if not tmp then
13686: LD_VAR 0 2
13690: NOT
13691: IFFALSE 13695
// exit ;
13693: GO 13838
// for i := 1 to 2 do
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: DOUBLE
13701: LD_INT 1
13703: DEC
13704: ST_TO_ADDR
13705: LD_INT 2
13707: PUSH
13708: FOR_TO
13709: IFFALSE 13836
// begin uc_side := your_side ;
13711: LD_ADDR_OWVAR 20
13715: PUSH
13716: LD_OWVAR 2
13720: ST_TO_ADDR
// uc_nation := nation_american ;
13721: LD_ADDR_OWVAR 21
13725: PUSH
13726: LD_INT 1
13728: ST_TO_ADDR
// vc_chassis := us_morphling ;
13729: LD_ADDR_OWVAR 37
13733: PUSH
13734: LD_INT 5
13736: ST_TO_ADDR
// vc_engine := engine_siberite ;
13737: LD_ADDR_OWVAR 39
13741: PUSH
13742: LD_INT 3
13744: ST_TO_ADDR
// vc_control := control_computer ;
13745: LD_ADDR_OWVAR 38
13749: PUSH
13750: LD_INT 3
13752: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13753: LD_ADDR_OWVAR 40
13757: PUSH
13758: LD_INT 10
13760: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13761: LD_VAR 0 2
13765: PUSH
13766: LD_INT 1
13768: ARRAY
13769: PPUSH
13770: CALL_OW 310
13774: NOT
13775: IFFALSE 13822
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13777: CALL_OW 45
13781: PPUSH
13782: LD_VAR 0 2
13786: PUSH
13787: LD_INT 1
13789: ARRAY
13790: PPUSH
13791: CALL_OW 250
13795: PPUSH
13796: LD_VAR 0 2
13800: PUSH
13801: LD_INT 1
13803: ARRAY
13804: PPUSH
13805: CALL_OW 251
13809: PPUSH
13810: LD_INT 12
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 50
13820: GO 13834
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13822: CALL_OW 45
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 51
// end ;
13834: GO 13708
13836: POP
13837: POP
// end ;
13838: PPOPN 2
13840: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13841: LD_EXP 22
13845: PUSH
13846: LD_EXP 68
13850: AND
13851: IFFALSE 14073
13853: GO 13855
13855: DISABLE
13856: LD_INT 0
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
13862: PPUSH
13863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13864: LD_ADDR_VAR 0 6
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_OWVAR 2
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 21
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: LD_INT 23
13896: PUSH
13897: LD_INT 0
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: ST_TO_ADDR
// if not tmp then
13918: LD_VAR 0 6
13922: NOT
13923: IFFALSE 13927
// exit ;
13925: GO 14073
// s1 := rand ( 1 , 4 ) ;
13927: LD_ADDR_VAR 0 2
13931: PUSH
13932: LD_INT 1
13934: PPUSH
13935: LD_INT 4
13937: PPUSH
13938: CALL_OW 12
13942: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13943: LD_ADDR_VAR 0 4
13947: PUSH
13948: LD_VAR 0 6
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: LD_VAR 0 2
13961: PPUSH
13962: CALL_OW 259
13966: ST_TO_ADDR
// if s1 = 1 then
13967: LD_VAR 0 2
13971: PUSH
13972: LD_INT 1
13974: EQUAL
13975: IFFALSE 13995
// s2 := rand ( 2 , 4 ) else
13977: LD_ADDR_VAR 0 3
13981: PUSH
13982: LD_INT 2
13984: PPUSH
13985: LD_INT 4
13987: PPUSH
13988: CALL_OW 12
13992: ST_TO_ADDR
13993: GO 14003
// s2 := 1 ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_INT 1
14002: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_VAR 0 6
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: LD_VAR 0 3
14021: PPUSH
14022: CALL_OW 259
14026: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14027: LD_VAR 0 6
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: PPUSH
14036: LD_VAR 0 2
14040: PPUSH
14041: LD_VAR 0 5
14045: PPUSH
14046: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14050: LD_VAR 0 6
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: CALL_OW 237
// end ;
14073: PPOPN 6
14075: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14076: LD_EXP 22
14080: PUSH
14081: LD_EXP 69
14085: AND
14086: IFFALSE 14165
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14094: LD_ADDR_VAR 0 1
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 30
14113: PUSH
14114: LD_INT 3
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: ST_TO_ADDR
// if not tmp then
14130: LD_VAR 0 1
14134: NOT
14135: IFFALSE 14139
// exit ;
14137: GO 14165
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14139: LD_VAR 0 1
14143: PUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 12
14156: ARRAY
14157: PPUSH
14158: LD_INT 1
14160: PPUSH
14161: CALL_OW 234
// end ;
14165: PPOPN 1
14167: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14168: LD_EXP 22
14172: PUSH
14173: LD_EXP 70
14177: AND
14178: IFFALSE 14290
14180: GO 14182
14182: DISABLE
14183: LD_INT 0
14185: PPUSH
14186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14187: LD_ADDR_VAR 0 2
14191: PUSH
14192: LD_INT 22
14194: PUSH
14195: LD_OWVAR 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 2
14206: PUSH
14207: LD_INT 30
14209: PUSH
14210: LD_INT 27
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 26
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 30
14229: PUSH
14230: LD_INT 28
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PPUSH
14247: CALL_OW 69
14251: ST_TO_ADDR
// if not tmp then
14252: LD_VAR 0 2
14256: NOT
14257: IFFALSE 14261
// exit ;
14259: GO 14290
// for i in tmp do
14261: LD_ADDR_VAR 0 1
14265: PUSH
14266: LD_VAR 0 2
14270: PUSH
14271: FOR_IN
14272: IFFALSE 14288
// SetLives ( i , 1 ) ;
14274: LD_VAR 0 1
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: CALL_OW 234
14286: GO 14271
14288: POP
14289: POP
// end ;
14290: PPOPN 2
14292: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14293: LD_EXP 22
14297: PUSH
14298: LD_EXP 71
14302: AND
14303: IFFALSE 14577
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
14312: PPUSH
// begin i := rand ( 1 , 7 ) ;
14313: LD_ADDR_VAR 0 1
14317: PUSH
14318: LD_INT 1
14320: PPUSH
14321: LD_INT 7
14323: PPUSH
14324: CALL_OW 12
14328: ST_TO_ADDR
// case i of 1 :
14329: LD_VAR 0 1
14333: PUSH
14334: LD_INT 1
14336: DOUBLE
14337: EQUAL
14338: IFTRUE 14342
14340: GO 14352
14342: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14343: LD_STRING earthquake(getX(game), 0, 32)
14345: PPUSH
14346: CALL_OW 559
14350: GO 14577
14352: LD_INT 2
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14374
14360: POP
// begin ToLua ( displayStucuk(); ) ;
14361: LD_STRING displayStucuk();
14363: PPUSH
14364: CALL_OW 559
// ResetFog ;
14368: CALL_OW 335
// end ; 3 :
14372: GO 14577
14374: LD_INT 3
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14486
14382: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14383: LD_ADDR_VAR 0 2
14387: PUSH
14388: LD_INT 22
14390: PUSH
14391: LD_OWVAR 2
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 25
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: ST_TO_ADDR
// if not tmp then
14419: LD_VAR 0 2
14423: NOT
14424: IFFALSE 14428
// exit ;
14426: GO 14577
// un := tmp [ rand ( 1 , tmp ) ] ;
14428: LD_ADDR_VAR 0 3
14432: PUSH
14433: LD_VAR 0 2
14437: PUSH
14438: LD_INT 1
14440: PPUSH
14441: LD_VAR 0 2
14445: PPUSH
14446: CALL_OW 12
14450: ARRAY
14451: ST_TO_ADDR
// if Crawls ( un ) then
14452: LD_VAR 0 3
14456: PPUSH
14457: CALL_OW 318
14461: IFFALSE 14472
// ComWalk ( un ) ;
14463: LD_VAR 0 3
14467: PPUSH
14468: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14472: LD_VAR 0 3
14476: PPUSH
14477: LD_INT 8
14479: PPUSH
14480: CALL_OW 336
// end ; 4 :
14484: GO 14577
14486: LD_INT 4
14488: DOUBLE
14489: EQUAL
14490: IFTRUE 14494
14492: GO 14555
14494: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_OWVAR 2
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 30
14514: PUSH
14515: LD_INT 29
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if not tmp then
14531: LD_VAR 0 2
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14577
// DestroyUnit ( tmp [ 1 ] ) ;
14540: LD_VAR 0 2
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: PPUSH
14549: CALL_OW 65
// end ; 5 .. 7 :
14553: GO 14577
14555: LD_INT 5
14557: DOUBLE
14558: GREATEREQUAL
14559: IFFALSE 14567
14561: LD_INT 7
14563: DOUBLE
14564: LESSEQUAL
14565: IFTRUE 14569
14567: GO 14576
14569: POP
// StreamSibBomb ; end ;
14570: CALL 10827 0 0
14574: GO 14577
14576: POP
// end ;
14577: PPOPN 3
14579: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14580: LD_EXP 22
14584: PUSH
14585: LD_EXP 72
14589: AND
14590: IFFALSE 14746
14592: GO 14594
14594: DISABLE
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14600: LD_ADDR_VAR 0 2
14604: PUSH
14605: LD_INT 81
14607: PUSH
14608: LD_OWVAR 2
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 2
14619: PUSH
14620: LD_INT 21
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 21
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: ST_TO_ADDR
// if not tmp then
14654: LD_VAR 0 2
14658: NOT
14659: IFFALSE 14663
// exit ;
14661: GO 14746
// p := 0 ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14671: LD_INT 35
14673: PPUSH
14674: CALL_OW 67
// p := p + 1 ;
14678: LD_ADDR_VAR 0 3
14682: PUSH
14683: LD_VAR 0 3
14687: PUSH
14688: LD_INT 1
14690: PLUS
14691: ST_TO_ADDR
// for i in tmp do
14692: LD_ADDR_VAR 0 1
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: FOR_IN
14703: IFFALSE 14734
// if GetLives ( i ) < 1000 then
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 256
14714: PUSH
14715: LD_INT 1000
14717: LESS
14718: IFFALSE 14732
// SetLives ( i , 1000 ) ;
14720: LD_VAR 0 1
14724: PPUSH
14725: LD_INT 1000
14727: PPUSH
14728: CALL_OW 234
14732: GO 14702
14734: POP
14735: POP
// until p > 20 ;
14736: LD_VAR 0 3
14740: PUSH
14741: LD_INT 20
14743: GREATER
14744: IFFALSE 14671
// end ;
14746: PPOPN 3
14748: END
// every 0 0$1 trigger StreamModeActive and sTime do
14749: LD_EXP 22
14753: PUSH
14754: LD_EXP 73
14758: AND
14759: IFFALSE 14794
14761: GO 14763
14763: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14764: LD_INT 28
14766: PPUSH
14767: LD_OWVAR 2
14771: PPUSH
14772: LD_INT 2
14774: PPUSH
14775: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14779: LD_INT 30
14781: PPUSH
14782: LD_OWVAR 2
14786: PPUSH
14787: LD_INT 2
14789: PPUSH
14790: CALL_OW 322
// end ;
14794: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14795: LD_EXP 22
14799: PUSH
14800: LD_EXP 74
14804: AND
14805: IFFALSE 14926
14807: GO 14809
14809: DISABLE
14810: LD_INT 0
14812: PPUSH
14813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14814: LD_ADDR_VAR 0 2
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_OWVAR 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 21
14833: PUSH
14834: LD_INT 1
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 3
14843: PUSH
14844: LD_INT 23
14846: PUSH
14847: LD_INT 0
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if not tmp then
14868: LD_VAR 0 2
14872: NOT
14873: IFFALSE 14877
// exit ;
14875: GO 14926
// for i in tmp do
14877: LD_ADDR_VAR 0 1
14881: PUSH
14882: LD_VAR 0 2
14886: PUSH
14887: FOR_IN
14888: IFFALSE 14924
// begin if Crawls ( i ) then
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 318
14899: IFFALSE 14910
// ComWalk ( i ) ;
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 138
// SetClass ( i , 2 ) ;
14910: LD_VAR 0 1
14914: PPUSH
14915: LD_INT 2
14917: PPUSH
14918: CALL_OW 336
// end ;
14922: GO 14887
14924: POP
14925: POP
// end ;
14926: PPOPN 2
14928: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14929: LD_EXP 22
14933: PUSH
14934: LD_EXP 75
14938: AND
14939: IFFALSE 15220
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14949: LD_OWVAR 2
14953: PPUSH
14954: LD_INT 9
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14967: LD_INT 9
14969: PPUSH
14970: LD_OWVAR 2
14974: PPUSH
14975: CALL_OW 343
// uc_side := 9 ;
14979: LD_ADDR_OWVAR 20
14983: PUSH
14984: LD_INT 9
14986: ST_TO_ADDR
// uc_nation := 2 ;
14987: LD_ADDR_OWVAR 21
14991: PUSH
14992: LD_INT 2
14994: ST_TO_ADDR
// hc_name := Dark Warrior ;
14995: LD_ADDR_OWVAR 26
14999: PUSH
15000: LD_STRING Dark Warrior
15002: ST_TO_ADDR
// hc_gallery :=  ;
15003: LD_ADDR_OWVAR 33
15007: PUSH
15008: LD_STRING 
15010: ST_TO_ADDR
// hc_noskilllimit := true ;
15011: LD_ADDR_OWVAR 76
15015: PUSH
15016: LD_INT 1
15018: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15019: LD_ADDR_OWVAR 31
15023: PUSH
15024: LD_INT 30
15026: PUSH
15027: LD_INT 30
15029: PUSH
15030: LD_INT 30
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: ST_TO_ADDR
// un := CreateHuman ;
15042: LD_ADDR_VAR 0 3
15046: PUSH
15047: CALL_OW 44
15051: ST_TO_ADDR
// hc_noskilllimit := false ;
15052: LD_ADDR_OWVAR 76
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15060: LD_VAR 0 3
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 51
// p := 0 ;
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_INT 0
15079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15080: LD_INT 35
15082: PPUSH
15083: CALL_OW 67
// p := p + 1 ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 2
15096: PUSH
15097: LD_INT 1
15099: PLUS
15100: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15101: LD_VAR 0 3
15105: PPUSH
15106: CALL_OW 256
15110: PUSH
15111: LD_INT 1000
15113: LESS
15114: IFFALSE 15128
// SetLives ( un , 1000 ) ;
15116: LD_VAR 0 3
15120: PPUSH
15121: LD_INT 1000
15123: PPUSH
15124: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_INT 81
15135: PUSH
15136: LD_OWVAR 2
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: LD_INT 91
15147: PUSH
15148: LD_VAR 0 3
15152: PUSH
15153: LD_INT 30
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: PPUSH
15170: LD_VAR 0 3
15174: PPUSH
15175: CALL_OW 74
15179: PPUSH
15180: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15184: LD_VAR 0 2
15188: PUSH
15189: LD_INT 60
15191: GREATER
15192: PUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: CALL_OW 301
15202: OR
15203: IFFALSE 15080
// if un then
15205: LD_VAR 0 3
15209: IFFALSE 15220
// RemoveUnit ( un ) ;
15211: LD_VAR 0 3
15215: PPUSH
15216: CALL_OW 64
// end ;
15220: PPOPN 3
15222: END
