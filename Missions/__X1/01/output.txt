// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 36 0 0
// PrepareAmericanBase ;
  31: CALL 3030 0 0
// end ;
  35: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  36: LD_INT 0
  38: PPUSH
// foundPoints := 0 ;
  39: LD_ADDR_EXP 16
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// goWithHeike := false ;
  47: LD_ADDR_EXP 17
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// baseSpotted := false ;
  55: LD_ADDR_EXP 18
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// heikeNearbyEon := false ;
  63: LD_ADDR_EXP 19
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// meetingActive := true ;
  71: LD_ADDR_EXP 20
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// scientists := [ ] ;
  79: LD_ADDR_EXP 13
  83: PUSH
  84: EMPTY
  85: ST_TO_ADDR
// eonGuards := [ ] ;
  86: LD_ADDR_EXP 14
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// firstGroup := [ ] ;
  93: LD_ADDR_EXP 15
  97: PUSH
  98: EMPTY
  99: ST_TO_ADDR
// end ; end_of_file
 100: LD_VAR 0 1
 104: RET
// export function Action ; begin
 105: LD_INT 0
 107: PPUSH
// InGameOn ;
 108: CALL_OW 8
// wait ( 0 0$2 ) ;
 112: LD_INT 70
 114: PPUSH
 115: CALL_OW 67
// PrepareArabian ;
 119: CALL 3278 0 0
// PrepareKurtGroup ;
 123: CALL 2877 0 0
// PrepareSheikGroup ;
 127: CALL 2515 0 0
// PrepareHeikeGroup ;
 131: CALL 2427 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 135: LD_INT 51
 137: PPUSH
 138: LD_INT 85
 140: PPUSH
 141: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 145: LD_INT 1
 147: PPUSH
 148: LD_INT 1
 150: PPUSH
 151: LD_INT 5
 153: PPUSH
 154: LD_INT 32763
 156: NEG
 157: PPUSH
 158: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 162: LD_INT 1
 164: PPUSH
 165: LD_INT 1
 167: PPUSH
 168: LD_INT 5
 170: PPUSH
 171: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 175: LD_EXP 1
 179: PUSH
 180: LD_EXP 5
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: LD_INT 53
 191: PPUSH
 192: LD_INT 88
 194: PPUSH
 195: CALL_OW 111
// wait ( 0 0$1 ) ;
 199: LD_INT 35
 201: PPUSH
 202: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 206: LD_EXP 5
 210: PPUSH
 211: LD_STRING DK-1
 213: PPUSH
 214: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 218: LD_EXP 1
 222: PPUSH
 223: LD_STRING DH-1
 225: PPUSH
 226: CALL_OW 88
// wait ( 0 0$2 ) ;
 230: LD_INT 70
 232: PPUSH
 233: CALL_OW 67
// PrepareArabian ;
 237: CALL 3278 0 0
// InGameOff ;
 241: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 245: LD_STRING O1
 247: PPUSH
 248: CALL_OW 337
// goWithHeike := true ;
 252: LD_ADDR_EXP 17
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// SaveForQuickRestart ;
 260: CALL_OW 22
// end ;
 264: LD_VAR 0 1
 268: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 269: LD_INT 2
 271: PPUSH
 272: LD_INT 5
 274: PPUSH
 275: CALL_OW 81
 279: PUSH
 280: LD_INT 2
 282: EQUAL
 283: IFFALSE 429
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin goWithHeike := false ;
 291: LD_ADDR_EXP 17
 295: PUSH
 296: LD_INT 0
 298: ST_TO_ADDR
// DialogueOn ;
 299: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 303: LD_EXP 1
 307: PPUSH
 308: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 312: LD_EXP 5
 316: PPUSH
 317: LD_STRING DK-betray-1
 319: PPUSH
 320: CALL_OW 88
// DialogueOff ;
 324: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 328: LD_EXP 5
 332: PPUSH
 333: LD_INT 90
 335: PPUSH
 336: LD_INT 46
 338: PPUSH
 339: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 343: LD_INT 35
 345: PPUSH
 346: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 350: LD_ADDR_VAR 0 1
 354: PUSH
 355: LD_INT 22
 357: PUSH
 358: LD_INT 5
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 25
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PPUSH
 379: CALL_OW 69
 383: PUSH
 384: LD_EXP 5
 388: DIFF
 389: PUSH
 390: FOR_IN
 391: IFFALSE 409
// ComAttackUnit ( i , Heike ) ;
 393: LD_VAR 0 1
 397: PPUSH
 398: LD_EXP 1
 402: PPUSH
 403: CALL_OW 115
 407: GO 390
 409: POP
 410: POP
// until IsDead ( Heike ) ;
 411: LD_EXP 1
 415: PPUSH
 416: CALL_OW 301
 420: IFFALSE 343
// YouLost ( Betray ) ;
 422: LD_STRING Betray
 424: PPUSH
 425: CALL_OW 104
// end ;
 429: PPOPN 1
 431: END
// every 0 0$1 trigger goWithHeike do
 432: LD_EXP 17
 436: IFFALSE 491
 438: GO 440
 440: DISABLE
// begin enable ;
 441: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 442: LD_EXP 1
 446: PPUSH
 447: LD_EXP 5
 451: PPUSH
 452: CALL_OW 296
 456: PUSH
 457: LD_INT 3
 459: GREATER
 460: IFFALSE 491
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 462: LD_EXP 5
 466: PPUSH
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 250
 476: PPUSH
 477: LD_EXP 1
 481: PPUSH
 482: CALL_OW 251
 486: PPUSH
 487: CALL_OW 111
// end ;
 491: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 47
 497: PPUSH
 498: LD_INT 68
 500: PPUSH
 501: CALL_OW 293
 505: PUSH
 506: LD_EXP 18
 510: NOT
 511: AND
 512: IFFALSE 556
 514: GO 516
 516: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 517: LD_EXP 1
 521: PPUSH
 522: LD_STRING DH-spot-1
 524: PPUSH
 525: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 529: LD_INT 47
 531: PPUSH
 532: LD_INT 68
 534: PPUSH
 535: CALL_OW 428
 539: PPUSH
 540: CALL_OW 313
 544: PUSH
 545: LD_INT 1
 547: ARRAY
 548: PPUSH
 549: LD_STRING DR-spot-1
 551: PPUSH
 552: CALL_OW 88
// end ;
 556: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 93
 562: PPUSH
 563: LD_INT 89
 565: PPUSH
 566: CALL_OW 293
 570: PUSH
 571: LD_EXP 18
 575: NOT
 576: AND
 577: IFFALSE 621
 579: GO 581
 581: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 582: LD_EXP 1
 586: PPUSH
 587: LD_STRING DH-spot-1
 589: PPUSH
 590: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 594: LD_INT 93
 596: PPUSH
 597: LD_INT 89
 599: PPUSH
 600: CALL_OW 428
 604: PPUSH
 605: CALL_OW 313
 609: PUSH
 610: LD_INT 1
 612: ARRAY
 613: PPUSH
 614: LD_STRING DR-spot-2
 616: PPUSH
 617: CALL_OW 88
// end ;
 621: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 622: LD_EXP 20
 626: PUSH
 627: LD_EXP 14
 631: PPUSH
 632: LD_INT 101
 634: PUSH
 635: LD_INT 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 72
 646: AND
 647: IFFALSE 971
 649: GO 651
 651: DISABLE
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
 657: PPUSH
 658: PPUSH
// begin enable ;
 659: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 660: LD_ADDR_VAR 0 1
 664: PUSH
 665: LD_EXP 14
 669: PPUSH
 670: LD_INT 101
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PPUSH
 680: CALL_OW 72
 684: ST_TO_ADDR
// if not tmp then
 685: LD_VAR 0 1
 689: NOT
 690: IFFALSE 694
// exit ;
 692: GO 971
// InGameOn ;
 694: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 698: LD_EXP 1
 702: PUSH
 703: LD_EXP 5
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PPUSH
 712: LD_VAR 0 1
 716: PUSH
 717: LD_INT 1
 719: ARRAY
 720: PPUSH
 721: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 725: LD_VAR 0 1
 729: PUSH
 730: LD_INT 1
 732: ARRAY
 733: PPUSH
 734: LD_EXP 1
 738: PPUSH
 739: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 743: LD_VAR 0 1
 747: PUSH
 748: LD_INT 1
 750: ARRAY
 751: PPUSH
 752: LD_STRING DG-meeting-1
 754: PPUSH
 755: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 759: LD_ADDR_VAR 0 3
 763: PUSH
 764: LD_INT 81
 766: PUSH
 767: LD_INT 10
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 63
 776: PUSH
 777: LD_INT 25
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 108
 786: PUSH
 787: LD_INT 73
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 799: LD_ADDR_VAR 0 4
 803: PUSH
 804: LD_INT 9999
 806: PUSH
 807: EMPTY
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: ST_TO_ADDR
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 2
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 911
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 829: LD_ADDR_VAR 0 5
 833: PUSH
 834: LD_EXP 1
 838: PPUSH
 839: LD_VAR 0 3
 843: PUSH
 844: LD_VAR 0 2
 848: ARRAY
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PPUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_VAR 0 2
 863: ARRAY
 864: PUSH
 865: LD_INT 2
 867: ARRAY
 868: PPUSH
 869: CALL_OW 297
 873: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 874: LD_VAR 0 4
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PUSH
 883: LD_VAR 0 5
 887: GREATER
 888: IFFALSE 909
// dist := [ tdist , i ] ;
 890: LD_ADDR_VAR 0 4
 894: PUSH
 895: LD_VAR 0 5
 899: PUSH
 900: LD_VAR 0 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// end ;
 909: GO 826
 911: POP
 912: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 913: LD_EXP 1
 917: PPUSH
 918: LD_VAR 0 3
 922: PUSH
 923: LD_VAR 0 4
 927: PUSH
 928: LD_INT 2
 930: ARRAY
 931: ARRAY
 932: PUSH
 933: LD_INT 1
 935: ARRAY
 936: PPUSH
 937: LD_VAR 0 3
 941: PUSH
 942: LD_VAR 0 4
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: ARRAY
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: PPUSH
 956: CALL_OW 111
// wait ( 0 0$3 ) ;
 960: LD_INT 105
 962: PPUSH
 963: CALL_OW 67
// InGameOff ;
 967: CALL_OW 9
// end ;
 971: PPOPN 5
 973: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
 974: LD_EXP 1
 978: PPUSH
 979: LD_INT 14
 981: PPUSH
 982: CALL_OW 296
 986: PUSH
 987: LD_INT 40
 989: GREATER
 990: PUSH
 991: LD_EXP 1
 995: PPUSH
 996: CALL_OW 316
1000: AND
1001: IFFALSE 1018
1003: GO 1005
1005: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1006: LD_EXP 5
1010: PPUSH
1011: LD_STRING DK-idle-1
1013: PPUSH
1014: CALL_OW 88
// end ;
1018: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1019: LD_INT 2
1021: PPUSH
1022: LD_INT 59
1024: PPUSH
1025: LD_INT 47
1027: PPUSH
1028: CALL_OW 293
1032: IFFALSE 1182
1034: GO 1036
1036: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1037: LD_INT 59
1039: PPUSH
1040: LD_INT 47
1042: PPUSH
1043: LD_INT 2
1045: PPUSH
1046: LD_INT 10
1048: NEG
1049: PPUSH
1050: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1054: LD_INT 59
1056: PPUSH
1057: LD_INT 47
1059: PPUSH
1060: CALL_OW 86
// goWithHeike := false ;
1064: LD_ADDR_EXP 17
1068: PUSH
1069: LD_INT 0
1071: ST_TO_ADDR
// baseSpotted := true ;
1072: LD_ADDR_EXP 18
1076: PUSH
1077: LD_INT 1
1079: ST_TO_ADDR
// InGameOn ;
1080: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1084: LD_EXP 1
1088: PUSH
1089: LD_EXP 5
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: LD_INT 54
1100: PPUSH
1101: LD_INT 45
1103: PPUSH
1104: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1108: LD_EXP 1
1112: PUSH
1113: LD_EXP 5
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: PPUSH
1122: LD_INT 59
1124: PPUSH
1125: LD_INT 47
1127: PPUSH
1128: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1132: LD_EXP 1
1136: PPUSH
1137: LD_STRING DH-base-1
1139: PPUSH
1140: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1144: LD_EXP 5
1148: PPUSH
1149: LD_STRING DK-base-1
1151: PPUSH
1152: CALL_OW 88
// InGameOff ;
1156: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1160: LD_ADDR_EXP 16
1164: PUSH
1165: LD_EXP 16
1169: PUSH
1170: LD_INT 1
1172: PLUS
1173: ST_TO_ADDR
// goWithHeike := true ;
1174: LD_ADDR_EXP 17
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// end ;
1182: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1183: LD_INT 2
1185: PPUSH
1186: LD_EXP 8
1190: PPUSH
1191: CALL_OW 292
1195: IFFALSE 2424
1197: GO 1199
1199: DISABLE
1200: LD_INT 0
1202: PPUSH
1203: PPUSH
1204: PPUSH
// begin meetingActive := false ;
1205: LD_ADDR_EXP 20
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// goWithHeike := false ;
1213: LD_ADDR_EXP 17
1217: PUSH
1218: LD_INT 0
1220: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 6
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: CALL_OW 517
1236: ST_TO_ADDR
// for i := 1 to 4 do
1237: LD_ADDR_VAR 0 1
1241: PUSH
1242: DOUBLE
1243: LD_INT 1
1245: DEC
1246: ST_TO_ADDR
1247: LD_INT 4
1249: PUSH
1250: FOR_TO
1251: IFFALSE 1318
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1253: LD_EXP 15
1257: PUSH
1258: LD_VAR 0 1
1262: ARRAY
1263: PPUSH
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PUSH
1273: LD_VAR 0 1
1277: ARRAY
1278: PPUSH
1279: LD_VAR 0 2
1283: PUSH
1284: LD_INT 2
1286: ARRAY
1287: PUSH
1288: LD_VAR 0 1
1292: ARRAY
1293: PPUSH
1294: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1298: LD_EXP 15
1302: PUSH
1303: LD_VAR 0 1
1307: ARRAY
1308: PPUSH
1309: LD_INT 14
1311: PPUSH
1312: CALL_OW 179
// end ;
1316: GO 1250
1318: POP
1319: POP
// InGameOn ;
1320: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1324: LD_EXP 1
1328: PPUSH
1329: LD_EXP 8
1333: PPUSH
1334: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1338: LD_EXP 5
1342: PPUSH
1343: LD_EXP 1
1347: PPUSH
1348: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1352: LD_INT 10
1354: PPUSH
1355: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1359: LD_EXP 1
1363: PPUSH
1364: LD_EXP 8
1368: PPUSH
1369: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1373: LD_EXP 5
1377: PPUSH
1378: LD_EXP 1
1382: PPUSH
1383: CALL_OW 250
1387: PPUSH
1388: LD_INT 5
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: CALL_OW 272
1398: PPUSH
1399: LD_EXP 1
1403: PPUSH
1404: CALL_OW 251
1408: PPUSH
1409: LD_INT 5
1411: PPUSH
1412: LD_INT 1
1414: PPUSH
1415: CALL_OW 273
1419: PPUSH
1420: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1424: LD_EXP 1
1428: PPUSH
1429: LD_EXP 8
1433: PPUSH
1434: CALL_OW 296
1438: PUSH
1439: LD_INT 5
1441: LESS
1442: PUSH
1443: LD_EXP 5
1447: PPUSH
1448: LD_EXP 8
1452: PPUSH
1453: CALL_OW 296
1457: PUSH
1458: LD_INT 6
1460: LESS
1461: AND
1462: IFFALSE 1352
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1464: LD_EXP 1
1468: PUSH
1469: LD_EXP 5
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: PPUSH
1478: LD_EXP 8
1482: PPUSH
1483: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1487: LD_EXP 8
1491: PUSH
1492: LD_EXP 4
1496: PUSH
1497: LD_EXP 9
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: LD_EXP 1
1511: PPUSH
1512: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1516: LD_INT 7
1518: PPUSH
1519: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1523: LD_EXP 8
1527: PPUSH
1528: LD_STRING DKu-Kurt-1
1530: PPUSH
1531: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1535: LD_EXP 5
1539: PPUSH
1540: LD_STRING DK-Kurt-1
1542: PPUSH
1543: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1547: LD_EXP 8
1551: PPUSH
1552: LD_STRING DKu-Kurt-2
1554: PPUSH
1555: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1559: LD_INT 7
1561: PPUSH
1562: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1566: LD_EXP 1
1570: PPUSH
1571: LD_STRING DH-Kurt-1
1573: PPUSH
1574: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1578: LD_EXP 8
1582: PPUSH
1583: LD_STRING DKu-Kurt-3
1585: PPUSH
1586: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1590: LD_EXP 5
1594: PPUSH
1595: LD_STRING DK-Kurt-3
1597: PPUSH
1598: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1602: LD_EXP 9
1606: PPUSH
1607: LD_STRING DHa-Kurt-3
1609: PPUSH
1610: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1614: LD_EXP 4
1618: PPUSH
1619: LD_STRING DO-Kurt-3
1621: PPUSH
1622: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1626: LD_ADDR_VAR 0 3
1630: PUSH
1631: LD_EXP 8
1635: PUSH
1636: LD_EXP 4
1640: PUSH
1641: LD_EXP 9
1645: PUSH
1646: LD_EXP 5
1650: PUSH
1651: LD_EXP 1
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: ST_TO_ADDR
// for i = 1 to 5 do
1663: LD_ADDR_VAR 0 1
1667: PUSH
1668: DOUBLE
1669: LD_INT 1
1671: DEC
1672: ST_TO_ADDR
1673: LD_INT 5
1675: PUSH
1676: FOR_TO
1677: IFFALSE 1752
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1679: LD_VAR 0 3
1683: PUSH
1684: LD_VAR 0 1
1688: ARRAY
1689: PPUSH
1690: LD_VAR 0 2
1694: PUSH
1695: LD_INT 1
1697: ARRAY
1698: PUSH
1699: LD_VAR 0 1
1703: PUSH
1704: LD_INT 4
1706: PLUS
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: PUSH
1723: LD_INT 4
1725: PLUS
1726: ARRAY
1727: PPUSH
1728: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1732: LD_VAR 0 3
1736: PUSH
1737: LD_VAR 0 1
1741: ARRAY
1742: PPUSH
1743: LD_INT 14
1745: PPUSH
1746: CALL_OW 179
// end ;
1750: GO 1676
1752: POP
1753: POP
// wait ( 0 0$2 ) ;
1754: LD_INT 70
1756: PPUSH
1757: CALL_OW 67
// CenterOnUnits ( eon ) ;
1761: LD_INT 14
1763: PPUSH
1764: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1768: LD_INT 90
1770: PPUSH
1771: LD_INT 43
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 21
1779: NEG
1780: PPUSH
1781: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1785: LD_EXP 2
1789: PPUSH
1790: LD_INT 84
1792: PPUSH
1793: LD_INT 36
1795: PPUSH
1796: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1800: LD_EXP 2
1804: PPUSH
1805: LD_INT 14
1807: PPUSH
1808: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1812: LD_EXP 11
1816: PPUSH
1817: LD_INT 85
1819: PPUSH
1820: LD_INT 36
1822: PPUSH
1823: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1827: LD_EXP 11
1831: PPUSH
1832: LD_INT 14
1834: PPUSH
1835: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1839: LD_EXP 10
1843: PPUSH
1844: LD_INT 86
1846: PPUSH
1847: LD_INT 36
1849: PPUSH
1850: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1854: LD_EXP 10
1858: PPUSH
1859: LD_INT 14
1861: PPUSH
1862: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1866: LD_EXP 7
1870: PPUSH
1871: LD_INT 87
1873: PPUSH
1874: LD_INT 36
1876: PPUSH
1877: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1881: LD_EXP 7
1885: PPUSH
1886: LD_INT 14
1888: PPUSH
1889: CALL_OW 179
// wait ( 0 0$3 ) ;
1893: LD_INT 105
1895: PPUSH
1896: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1900: LD_INT 35
1902: PPUSH
1903: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1907: LD_EXP 1
1911: PPUSH
1912: LD_INT 6
1914: PPUSH
1915: CALL_OW 308
1919: IFFALSE 1900
// heikeNearbyEon := true ;
1921: LD_ADDR_EXP 19
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1929: LD_EXP 6
1933: PPUSH
1934: LD_INT 88
1936: PPUSH
1937: LD_INT 37
1939: PPUSH
1940: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1944: LD_EXP 6
1948: PPUSH
1949: LD_EXP 13
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1962: LD_EXP 13
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PPUSH
1971: LD_INT 89
1973: PPUSH
1974: LD_INT 37
1976: PPUSH
1977: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
1981: LD_EXP 13
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PPUSH
1990: LD_INT 91
1992: PPUSH
1993: LD_INT 39
1995: PPUSH
1996: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2000: LD_EXP 13
2004: PPUSH
2005: LD_EXP 11
2009: PPUSH
2010: CALL_OW 179
// wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2021: LD_EXP 13
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: PPUSH
2030: LD_STRING DS-eon-1
2032: PPUSH
2033: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2037: LD_EXP 6
2041: PPUSH
2042: LD_STRING DSh-eon-1
2044: PPUSH
2045: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2049: LD_EXP 13
2053: PUSH
2054: LD_INT 1
2056: ARRAY
2057: PPUSH
2058: LD_INT 92
2060: PPUSH
2061: LD_INT 43
2063: PPUSH
2064: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2068: LD_EXP 13
2072: PUSH
2073: LD_INT 1
2075: ARRAY
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2084: LD_EXP 13
2088: PUSH
2089: LD_INT 2
2091: ARRAY
2092: PPUSH
2093: LD_INT 93
2095: PPUSH
2096: LD_INT 41
2098: PPUSH
2099: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2103: LD_EXP 13
2107: PUSH
2108: LD_INT 2
2110: ARRAY
2111: PPUSH
2112: LD_INT 93
2114: PPUSH
2115: LD_INT 40
2117: PPUSH
2118: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2122: LD_EXP 6
2126: PPUSH
2127: LD_INT 88
2129: PPUSH
2130: LD_INT 41
2132: PPUSH
2133: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2137: LD_EXP 6
2141: PPUSH
2142: LD_INT 87
2144: PPUSH
2145: LD_INT 41
2147: PPUSH
2148: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2152: LD_INT 35
2154: PPUSH
2155: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2159: LD_EXP 6
2163: PPUSH
2164: LD_INT 88
2166: PPUSH
2167: LD_INT 41
2169: PPUSH
2170: CALL_OW 307
2174: IFFALSE 2152
// wait ( 0 0$1 ) ;
2176: LD_INT 35
2178: PPUSH
2179: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2183: LD_EXP 6
2187: PPUSH
2188: LD_STRING DSh-eon-2
2190: PPUSH
2191: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2195: LD_EXP 11
2199: PPUSH
2200: LD_INT 87
2202: PPUSH
2203: LD_INT 40
2205: PPUSH
2206: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2210: LD_EXP 11
2214: PPUSH
2215: LD_INT 86
2217: PPUSH
2218: LD_INT 40
2220: PPUSH
2221: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2225: LD_INT 35
2227: PPUSH
2228: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2232: LD_EXP 11
2236: PPUSH
2237: LD_INT 87
2239: PPUSH
2240: LD_INT 40
2242: PPUSH
2243: CALL_OW 307
2247: IFFALSE 2225
// Say ( Shariff , DShar-eon-3 ) ;
2249: LD_EXP 11
2253: PPUSH
2254: LD_STRING DShar-eon-3
2256: PPUSH
2257: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2261: LD_EXP 11
2265: PPUSH
2266: LD_STRING DShar-eon-4
2268: PPUSH
2269: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2273: LD_EXP 5
2277: PPUSH
2278: LD_STRING DK-eon-4
2280: PPUSH
2281: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2285: LD_EXP 5
2289: PPUSH
2290: LD_INT 14
2292: PPUSH
2293: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2297: LD_INT 35
2299: PPUSH
2300: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2304: LD_EXP 5
2308: PPUSH
2309: CALL_OW 305
2313: NOT
2314: IFFALSE 2297
// Say ( Shariff , DShar-eon-5 ) ;
2316: LD_EXP 11
2320: PPUSH
2321: LD_STRING DShar-eon-5
2323: PPUSH
2324: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2328: LD_EXP 1
2332: PPUSH
2333: LD_INT 91
2335: PPUSH
2336: LD_INT 44
2338: PPUSH
2339: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2343: LD_EXP 1
2347: PPUSH
2348: LD_INT 14
2350: PPUSH
2351: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2362: LD_EXP 1
2366: PPUSH
2367: LD_INT 91
2369: PPUSH
2370: LD_INT 44
2372: PPUSH
2373: CALL_OW 307
2377: IFFALSE 2355
// Say ( Heike , DH-eon-5 ) ;
2379: LD_EXP 1
2383: PPUSH
2384: LD_STRING DH-eon-5
2386: PPUSH
2387: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2391: LD_EXP 1
2395: PPUSH
2396: LD_INT 14
2398: PPUSH
2399: CALL_OW 120
// wait ( 0 0$2 ) ;
2403: LD_INT 70
2405: PPUSH
2406: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING %_cont
2415: PPUSH
2416: CALL_OW 340
// InGameOff ;
2420: CALL_OW 9
// end ; end_of_file
2424: PPOPN 3
2426: END
// export function PrepareHeikeGroup ; begin
2427: LD_INT 0
2429: PPUSH
// uc_side := 2 ;
2430: LD_ADDR_OWVAR 20
2434: PUSH
2435: LD_INT 2
2437: ST_TO_ADDR
// uc_nation := 2 ;
2438: LD_ADDR_OWVAR 21
2442: PUSH
2443: LD_INT 2
2445: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2446: LD_ADDR_EXP 1
2450: PUSH
2451: LD_STRING Heike
2453: PPUSH
2454: CALL_OW 25
2458: ST_TO_ADDR
// uc_side := 5 ;
2459: LD_ADDR_OWVAR 20
2463: PUSH
2464: LD_INT 5
2466: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2467: LD_ADDR_EXP 5
2471: PUSH
2472: LD_STRING Kaia
2474: PPUSH
2475: CALL_OW 25
2479: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2480: LD_EXP 1
2484: PPUSH
2485: LD_INT 3
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2495: LD_EXP 5
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 49
// end ;
2510: LD_VAR 0 1
2514: RET
// export function PrepareSheikGroup ; var un , i ; begin
2515: LD_INT 0
2517: PPUSH
2518: PPUSH
2519: PPUSH
// uc_side := 5 ;
2520: LD_ADDR_OWVAR 20
2524: PUSH
2525: LD_INT 5
2527: ST_TO_ADDR
// uc_nation := 2 ;
2528: LD_ADDR_OWVAR 21
2532: PUSH
2533: LD_INT 2
2535: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2536: LD_ADDR_EXP 10
2540: PUSH
2541: LD_STRING Ali
2543: PPUSH
2544: CALL_OW 25
2548: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2549: LD_ADDR_EXP 11
2553: PUSH
2554: LD_STRING Abdul
2556: PPUSH
2557: CALL_OW 25
2561: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2562: LD_ADDR_EXP 2
2566: PUSH
2567: LD_STRING Omar
2569: PPUSH
2570: CALL_OW 25
2574: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2575: LD_ADDR_EXP 7
2579: PUSH
2580: LD_STRING Mahtab
2582: PPUSH
2583: CALL_OW 25
2587: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2588: LD_ADDR_EXP 6
2592: PUSH
2593: LD_STRING Shahrzad
2595: PPUSH
2596: CALL_OW 25
2600: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2601: LD_EXP 10
2605: PPUSH
2606: LD_INT 85
2608: PPUSH
2609: LD_INT 37
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2619: LD_EXP 11
2623: PPUSH
2624: LD_INT 87
2626: PPUSH
2627: LD_INT 37
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2637: LD_EXP 2
2641: PPUSH
2642: LD_INT 85
2644: PPUSH
2645: LD_INT 35
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2655: LD_EXP 7
2659: PPUSH
2660: LD_INT 86
2662: PPUSH
2663: LD_INT 39
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2673: LD_EXP 6
2677: PPUSH
2678: LD_INT 88
2680: PPUSH
2681: LD_INT 39
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2691: LD_EXP 10
2695: PPUSH
2696: LD_EXP 11
2700: PPUSH
2701: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2705: LD_EXP 11
2709: PPUSH
2710: LD_EXP 10
2714: PPUSH
2715: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2719: LD_EXP 2
2723: PPUSH
2724: LD_EXP 11
2728: PPUSH
2729: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2733: LD_EXP 7
2737: PUSH
2738: LD_EXP 6
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: LD_EXP 11
2751: PPUSH
2752: CALL_OW 119
// for i := 1 to 2 do
2756: LD_ADDR_VAR 0 3
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 2
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2856
// begin PrepareHuman ( false , 4 , 6 ) ;
2772: LD_INT 0
2774: PPUSH
2775: LD_INT 4
2777: PPUSH
2778: LD_INT 6
2780: PPUSH
2781: CALL_OW 380
// un := CreateHuman ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: CALL_OW 44
2794: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2795: LD_VAR 0 2
2799: PPUSH
2800: LD_INT 90
2802: PPUSH
2803: LD_INT 44
2805: PPUSH
2806: LD_INT 3
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2816: LD_VAR 0 2
2820: PPUSH
2821: LD_INT 91
2823: PPUSH
2824: LD_INT 43
2826: PPUSH
2827: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2831: LD_ADDR_EXP 13
2835: PUSH
2836: LD_EXP 13
2840: PPUSH
2841: LD_INT 1
2843: PPUSH
2844: LD_VAR 0 2
2848: PPUSH
2849: CALL_OW 2
2853: ST_TO_ADDR
// end ;
2854: GO 2769
2856: POP
2857: POP
// scientists := scientists diff 0 ;
2858: LD_ADDR_EXP 13
2862: PUSH
2863: LD_EXP 13
2867: PUSH
2868: LD_INT 0
2870: DIFF
2871: ST_TO_ADDR
// end ;
2872: LD_VAR 0 1
2876: RET
// export function PrepareKurtGroup ; var i ; begin
2877: LD_INT 0
2879: PPUSH
2880: PPUSH
// uc_side := 5 ;
2881: LD_ADDR_OWVAR 20
2885: PUSH
2886: LD_INT 5
2888: ST_TO_ADDR
// uc_nation := 2 ;
2889: LD_ADDR_OWVAR 21
2893: PUSH
2894: LD_INT 2
2896: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2897: LD_ADDR_EXP 8
2901: PUSH
2902: LD_STRING Kurt
2904: PPUSH
2905: CALL_OW 25
2909: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2910: LD_ADDR_EXP 4
2914: PUSH
2915: LD_STRING Olaf
2917: PPUSH
2918: CALL_OW 25
2922: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2923: LD_ADDR_EXP 9
2927: PUSH
2928: LD_STRING Hans
2930: PPUSH
2931: CALL_OW 25
2935: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: LD_EXP 8
2945: PUSH
2946: LD_EXP 9
2950: PUSH
2951: LD_EXP 4
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: LIST
2960: PUSH
2961: FOR_IN
2962: IFFALSE 2981
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_INT 10
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL_OW 49
2979: GO 2961
2981: POP
2982: POP
// ComTurnUnit ( Kurt , Hans ) ;
2983: LD_EXP 8
2987: PPUSH
2988: LD_EXP 9
2992: PPUSH
2993: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
2997: LD_EXP 4
3001: PPUSH
3002: LD_EXP 9
3006: PPUSH
3007: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3011: LD_EXP 9
3015: PPUSH
3016: LD_EXP 4
3020: PPUSH
3021: CALL_OW 119
// end ;
3025: LD_VAR 0 1
3029: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3030: LD_INT 0
3032: PPUSH
3033: PPUSH
3034: PPUSH
3035: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 21
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: PUSH
3056: LD_INT 14
3058: DIFF
3059: PUSH
3060: FOR_IN
3061: IFFALSE 3141
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3063: LD_VAR 0 2
3067: PPUSH
3068: CALL_OW 266
3072: PUSH
3073: LD_INT 6
3075: PUSH
3076: LD_INT 31
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: IN
3083: IFFALSE 3107
// SetLives ( i , rand ( 500 , 600 ) ) else
3085: LD_VAR 0 2
3089: PPUSH
3090: LD_INT 500
3092: PPUSH
3093: LD_INT 600
3095: PPUSH
3096: CALL_OW 12
3100: PPUSH
3101: CALL_OW 234
3105: GO 3127
// SetLives ( i , rand ( 300 , 499 ) ) ;
3107: LD_VAR 0 2
3111: PPUSH
3112: LD_INT 300
3114: PPUSH
3115: LD_INT 499
3117: PPUSH
3118: CALL_OW 12
3122: PPUSH
3123: CALL_OW 234
// SetSide ( i , 5 ) ;
3127: LD_VAR 0 2
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: CALL_OW 235
// end ;
3139: GO 3060
3141: POP
3142: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3143: LD_ADDR_VAR 0 4
3147: PUSH
3148: LD_INT 9
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 517
3158: ST_TO_ADDR
// uc_side := 4 ;
3159: LD_ADDR_OWVAR 20
3163: PUSH
3164: LD_INT 4
3166: ST_TO_ADDR
// uc_nation := 1 ;
3167: LD_ADDR_OWVAR 21
3171: PUSH
3172: LD_INT 1
3174: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3175: LD_ADDR_VAR 0 2
3179: PUSH
3180: DOUBLE
3181: LD_INT 1
3183: DEC
3184: ST_TO_ADDR
3185: LD_VAR 0 4
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PUSH
3194: FOR_TO
3195: IFFALSE 3271
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3197: LD_INT 0
3199: PPUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: LD_INT 4
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_VAR 0 2
3218: PUSH
3219: LD_INT 3
3221: MOD
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: ARRAY
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 380
// un := CreateHuman ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: CALL_OW 44
3244: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 9
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// KillUnit ( un ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: CALL_OW 66
// end ;
3269: GO 3194
3271: POP
3272: POP
// end ;
3273: LD_VAR 0 1
3277: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
3283: PPUSH
3284: PPUSH
3285: PPUSH
3286: PPUSH
// uc_side := 5 ;
3287: LD_ADDR_OWVAR 20
3291: PUSH
3292: LD_INT 5
3294: ST_TO_ADDR
// uc_nation := 2 ;
3295: LD_ADDR_OWVAR 21
3299: PUSH
3300: LD_INT 2
3302: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3303: LD_ADDR_VAR 0 6
3307: PUSH
3308: LD_INT 2
3310: PUSH
3311: LD_INT 4
3313: PUSH
3314: LD_INT 5
3316: PUSH
3317: LD_INT 14
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: ST_TO_ADDR
// InitHc ;
3326: CALL_OW 19
// for i in area do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_VAR 0 6
3339: PUSH
3340: FOR_IN
3341: IFFALSE 3505
// begin tmp := AreaToList ( i , 0 ) ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 2
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 517
3360: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3361: LD_ADDR_VAR 0 3
3365: PUSH
3366: DOUBLE
3367: LD_INT 1
3369: DEC
3370: ST_TO_ADDR
3371: LD_VAR 0 5
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PUSH
3380: FOR_TO
3381: IFFALSE 3501
// begin PrepareHuman ( false , 1 , 3 ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: CALL_OW 380
// un := CreateHuman ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 44
3405: ST_TO_ADDR
// if i = spawnBaseArea3 then
3406: LD_VAR 0 2
3410: PUSH
3411: LD_INT 5
3413: EQUAL
3414: IFFALSE 3432
// eonGuards := eonGuards ^ un ;
3416: LD_ADDR_EXP 14
3420: PUSH
3421: LD_EXP 14
3425: PUSH
3426: LD_VAR 0 7
3430: ADD
3431: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3432: LD_VAR 0 7
3436: PPUSH
3437: LD_VAR 0 2
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: CALL_OW 49
// ComHold ( un ) ;
3449: LD_VAR 0 7
3453: PPUSH
3454: CALL_OW 140
// if i = spawnBaseArea4 then
3458: LD_VAR 0 2
3462: PUSH
3463: LD_INT 14
3465: EQUAL
3466: IFFALSE 3499
// begin firstGroup := firstGroup ^ un ;
3468: LD_ADDR_EXP 15
3472: PUSH
3473: LD_EXP 15
3477: PUSH
3478: LD_VAR 0 7
3482: ADD
3483: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3484: LD_VAR 0 7
3488: PPUSH
3489: LD_INT 108
3491: PPUSH
3492: LD_INT 47
3494: PPUSH
3495: CALL_OW 118
// end ; end ;
3499: GO 3380
3501: POP
3502: POP
// end ;
3503: GO 3340
3505: POP
3506: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3507: LD_ADDR_VAR 0 2
3511: PUSH
3512: DOUBLE
3513: LD_INT 1
3515: DEC
3516: ST_TO_ADDR
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 69
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3627
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 31
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PPUSH
3550: CALL_OW 69
3554: PUSH
3555: LD_VAR 0 2
3559: ARRAY
3560: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 3
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 7
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3584: LD_VAR 0 7
3588: PPUSH
3589: LD_VAR 0 4
3593: PPUSH
3594: CALL_OW 254
3598: PUSH
3599: LD_INT 3
3601: PLUS
3602: PUSH
3603: LD_INT 6
3605: MOD
3606: PPUSH
3607: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3611: LD_VAR 0 7
3615: PPUSH
3616: LD_VAR 0 4
3620: PPUSH
3621: CALL_OW 52
// end ;
3625: GO 3532
3627: POP
3628: POP
// end ; end_of_file
3629: LD_VAR 0 1
3633: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3634: LD_VAR 0 1
3638: PUSH
3639: LD_INT 2
3641: EQUAL
3642: PUSH
3643: LD_VAR 0 2
3647: PUSH
3648: LD_INT 5
3650: EQUAL
3651: AND
3652: IFFALSE 3670
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 5
3659: PPUSH
3660: LD_INT 2
3662: PPUSH
3663: LD_INT 1
3665: PPUSH
3666: CALL_OW 80
// end ;
3670: PPOPN 2
3672: END
// every 0 0$1 trigger scientists do var i ;
3673: LD_EXP 13
3677: IFFALSE 3885
3679: GO 3681
3681: DISABLE
3682: LD_INT 0
3684: PPUSH
// begin repeat for i in scientists do
3685: LD_ADDR_VAR 0 1
3689: PUSH
3690: LD_EXP 13
3694: PUSH
3695: FOR_IN
3696: IFFALSE 3870
// begin wait ( 0 0$1 ) ;
3698: LD_INT 35
3700: PPUSH
3701: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3705: LD_VAR 0 1
3709: PPUSH
3710: LD_INT 11
3712: PUSH
3713: LD_INT 13
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: LD_INT 2
3727: MOD
3728: PUSH
3729: LD_INT 1
3731: PLUS
3732: ARRAY
3733: PPUSH
3734: CALL_OW 308
3738: NOT
3739: IFFALSE 3774
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3741: LD_VAR 0 1
3745: PPUSH
3746: LD_INT 11
3748: PUSH
3749: LD_INT 13
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: LD_INT 2
3763: MOD
3764: PUSH
3765: LD_INT 1
3767: PLUS
3768: ARRAY
3769: PPUSH
3770: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3774: LD_VAR 0 1
3778: PPUSH
3779: LD_INT 14
3781: PPUSH
3782: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3786: LD_VAR 0 1
3790: PPUSH
3791: LD_INT 70
3793: PPUSH
3794: CALL_OW 202
// if rand ( 0 , 1 ) then
3798: LD_INT 0
3800: PPUSH
3801: LD_INT 1
3803: PPUSH
3804: CALL_OW 12
3808: IFFALSE 3822
// AddComAnim ( i , 15 ) ;
3810: LD_VAR 0 1
3814: PPUSH
3815: LD_INT 15
3817: PPUSH
3818: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: LD_INT 35
3829: PPUSH
3830: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3834: LD_VAR 0 1
3838: PPUSH
3839: LD_INT 12
3841: PPUSH
3842: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 93
3853: PPUSH
3854: LD_INT 40
3856: PPUSH
3857: CALL_OW 178
// wait ( 0 0$1 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// end ;
3868: GO 3695
3870: POP
3871: POP
// wait ( 0 0$10 ) ;
3872: LD_INT 350
3874: PPUSH
3875: CALL_OW 67
// until heikeNearbyEon ;
3879: LD_EXP 19
3883: IFFALSE 3685
// end ; end_of_file
3885: PPOPN 1
3887: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3888: GO 3890
3890: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3891: LD_STRING initStreamRollete();
3893: PPUSH
3894: CALL_OW 559
// InitStreamMode ;
3898: CALL 3907 0 0
// DefineStreamItems ( ) ;
3902: CALL 4347 0 0
// end ;
3906: END
// function InitStreamMode ; begin
3907: LD_INT 0
3909: PPUSH
// streamModeActive := false ;
3910: LD_ADDR_EXP 21
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// normalCounter := 26 ;
3918: LD_ADDR_EXP 22
3922: PUSH
3923: LD_INT 26
3925: ST_TO_ADDR
// hardcoreCounter := 12 ;
3926: LD_ADDR_EXP 23
3930: PUSH
3931: LD_INT 12
3933: ST_TO_ADDR
// sRocket := false ;
3934: LD_ADDR_EXP 26
3938: PUSH
3939: LD_INT 0
3941: ST_TO_ADDR
// sSpeed := false ;
3942: LD_ADDR_EXP 25
3946: PUSH
3947: LD_INT 0
3949: ST_TO_ADDR
// sEngine := false ;
3950: LD_ADDR_EXP 27
3954: PUSH
3955: LD_INT 0
3957: ST_TO_ADDR
// sSpec := false ;
3958: LD_ADDR_EXP 24
3962: PUSH
3963: LD_INT 0
3965: ST_TO_ADDR
// sLevel := false ;
3966: LD_ADDR_EXP 28
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// sArmoury := false ;
3974: LD_ADDR_EXP 29
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// sRadar := false ;
3982: LD_ADDR_EXP 30
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// sBunker := false ;
3990: LD_ADDR_EXP 31
3994: PUSH
3995: LD_INT 0
3997: ST_TO_ADDR
// sHack := false ;
3998: LD_ADDR_EXP 32
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// sFire := false ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: LD_INT 0
4013: ST_TO_ADDR
// sRefresh := false ;
4014: LD_ADDR_EXP 34
4018: PUSH
4019: LD_INT 0
4021: ST_TO_ADDR
// sExp := false ;
4022: LD_ADDR_EXP 35
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// sDepot := false ;
4030: LD_ADDR_EXP 36
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// sFlag := false ;
4038: LD_ADDR_EXP 37
4042: PUSH
4043: LD_INT 0
4045: ST_TO_ADDR
// sKamikadze := false ;
4046: LD_ADDR_EXP 45
4050: PUSH
4051: LD_INT 0
4053: ST_TO_ADDR
// sTroll := false ;
4054: LD_ADDR_EXP 46
4058: PUSH
4059: LD_INT 0
4061: ST_TO_ADDR
// sSlow := false ;
4062: LD_ADDR_EXP 47
4066: PUSH
4067: LD_INT 0
4069: ST_TO_ADDR
// sLack := false ;
4070: LD_ADDR_EXP 48
4074: PUSH
4075: LD_INT 0
4077: ST_TO_ADDR
// sTank := false ;
4078: LD_ADDR_EXP 50
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// sRemote := false ;
4086: LD_ADDR_EXP 51
4090: PUSH
4091: LD_INT 0
4093: ST_TO_ADDR
// sPowell := false ;
4094: LD_ADDR_EXP 52
4098: PUSH
4099: LD_INT 0
4101: ST_TO_ADDR
// sTeleport := false ;
4102: LD_ADDR_EXP 55
4106: PUSH
4107: LD_INT 0
4109: ST_TO_ADDR
// sOilTower := false ;
4110: LD_ADDR_EXP 57
4114: PUSH
4115: LD_INT 0
4117: ST_TO_ADDR
// sShovel := false ;
4118: LD_ADDR_EXP 58
4122: PUSH
4123: LD_INT 0
4125: ST_TO_ADDR
// sSheik := false ;
4126: LD_ADDR_EXP 59
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// sEarthquake := false ;
4134: LD_ADDR_EXP 61
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// sAI := false ;
4142: LD_ADDR_EXP 62
4146: PUSH
4147: LD_INT 0
4149: ST_TO_ADDR
// sCargo := false ;
4150: LD_ADDR_EXP 65
4154: PUSH
4155: LD_INT 0
4157: ST_TO_ADDR
// sDLaser := false ;
4158: LD_ADDR_EXP 66
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// sExchange := false ;
4166: LD_ADDR_EXP 67
4170: PUSH
4171: LD_INT 0
4173: ST_TO_ADDR
// sFac := false ;
4174: LD_ADDR_EXP 68
4178: PUSH
4179: LD_INT 0
4181: ST_TO_ADDR
// sPower := false ;
4182: LD_ADDR_EXP 69
4186: PUSH
4187: LD_INT 0
4189: ST_TO_ADDR
// sRandom := false ;
4190: LD_ADDR_EXP 70
4194: PUSH
4195: LD_INT 0
4197: ST_TO_ADDR
// sShield := false ;
4198: LD_ADDR_EXP 71
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// sTime := false ;
4206: LD_ADDR_EXP 72
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// sTools := false ;
4214: LD_ADDR_EXP 73
4218: PUSH
4219: LD_INT 0
4221: ST_TO_ADDR
// sSold := false ;
4222: LD_ADDR_EXP 38
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// sDiff := false ;
4230: LD_ADDR_EXP 39
4234: PUSH
4235: LD_INT 0
4237: ST_TO_ADDR
// sFog := false ;
4238: LD_ADDR_EXP 42
4242: PUSH
4243: LD_INT 0
4245: ST_TO_ADDR
// sReset := false ;
4246: LD_ADDR_EXP 43
4250: PUSH
4251: LD_INT 0
4253: ST_TO_ADDR
// sSun := false ;
4254: LD_ADDR_EXP 44
4258: PUSH
4259: LD_INT 0
4261: ST_TO_ADDR
// sTiger := false ;
4262: LD_ADDR_EXP 40
4266: PUSH
4267: LD_INT 0
4269: ST_TO_ADDR
// sBomb := false ;
4270: LD_ADDR_EXP 41
4274: PUSH
4275: LD_INT 0
4277: ST_TO_ADDR
// sWound := false ;
4278: LD_ADDR_EXP 49
4282: PUSH
4283: LD_INT 0
4285: ST_TO_ADDR
// sBetray := false ;
4286: LD_ADDR_EXP 53
4290: PUSH
4291: LD_INT 0
4293: ST_TO_ADDR
// sContamin := false ;
4294: LD_ADDR_EXP 54
4298: PUSH
4299: LD_INT 0
4301: ST_TO_ADDR
// sOil := false ;
4302: LD_ADDR_EXP 56
4306: PUSH
4307: LD_INT 0
4309: ST_TO_ADDR
// sStu := false ;
4310: LD_ADDR_EXP 60
4314: PUSH
4315: LD_INT 0
4317: ST_TO_ADDR
// sBazooka := false ;
4318: LD_ADDR_EXP 63
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// sMortar := false ;
4326: LD_ADDR_EXP 64
4330: PUSH
4331: LD_INT 0
4333: ST_TO_ADDR
// sRanger := false ;
4334: LD_ADDR_EXP 74
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
// result := [ ] ;
4354: LD_ADDR_VAR 0 1
4358: PUSH
4359: EMPTY
4360: ST_TO_ADDR
// if campaign_id = 1 then
4361: LD_OWVAR 69
4365: PUSH
4366: LD_INT 1
4368: EQUAL
4369: IFFALSE 7317
// begin case mission_number of 1 :
4371: LD_OWVAR 70
4375: PUSH
4376: LD_INT 1
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4448
4384: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4385: LD_ADDR_VAR 0 1
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: LD_INT 4
4395: PUSH
4396: LD_INT 11
4398: PUSH
4399: LD_INT 12
4401: PUSH
4402: LD_INT 15
4404: PUSH
4405: LD_INT 16
4407: PUSH
4408: LD_INT 22
4410: PUSH
4411: LD_INT 23
4413: PUSH
4414: LD_INT 26
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 101
4430: PUSH
4431: LD_INT 102
4433: PUSH
4434: LD_INT 106
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: ST_TO_ADDR
4446: GO 7317
4448: LD_INT 2
4450: DOUBLE
4451: EQUAL
4452: IFTRUE 4456
4454: GO 4528
4456: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: LD_INT 2
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: LD_INT 11
4470: PUSH
4471: LD_INT 12
4473: PUSH
4474: LD_INT 15
4476: PUSH
4477: LD_INT 16
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 23
4485: PUSH
4486: LD_INT 26
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: LD_INT 101
4502: PUSH
4503: LD_INT 102
4505: PUSH
4506: LD_INT 105
4508: PUSH
4509: LD_INT 106
4511: PUSH
4512: LD_INT 108
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: ST_TO_ADDR
4526: GO 7317
4528: LD_INT 3
4530: DOUBLE
4531: EQUAL
4532: IFTRUE 4536
4534: GO 4612
4536: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4537: LD_ADDR_VAR 0 1
4541: PUSH
4542: LD_INT 2
4544: PUSH
4545: LD_INT 4
4547: PUSH
4548: LD_INT 5
4550: PUSH
4551: LD_INT 11
4553: PUSH
4554: LD_INT 12
4556: PUSH
4557: LD_INT 15
4559: PUSH
4560: LD_INT 16
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 26
4568: PUSH
4569: LD_INT 36
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 101
4586: PUSH
4587: LD_INT 102
4589: PUSH
4590: LD_INT 105
4592: PUSH
4593: LD_INT 106
4595: PUSH
4596: LD_INT 108
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: ST_TO_ADDR
4610: GO 7317
4612: LD_INT 4
4614: DOUBLE
4615: EQUAL
4616: IFTRUE 4620
4618: GO 4704
4620: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4621: LD_ADDR_VAR 0 1
4625: PUSH
4626: LD_INT 2
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: LD_INT 8
4637: PUSH
4638: LD_INT 11
4640: PUSH
4641: LD_INT 12
4643: PUSH
4644: LD_INT 15
4646: PUSH
4647: LD_INT 16
4649: PUSH
4650: LD_INT 22
4652: PUSH
4653: LD_INT 23
4655: PUSH
4656: LD_INT 26
4658: PUSH
4659: LD_INT 36
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 101
4678: PUSH
4679: LD_INT 102
4681: PUSH
4682: LD_INT 105
4684: PUSH
4685: LD_INT 106
4687: PUSH
4688: LD_INT 108
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: ST_TO_ADDR
4702: GO 7317
4704: LD_INT 5
4706: DOUBLE
4707: EQUAL
4708: IFTRUE 4712
4710: GO 4812
4712: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4713: LD_ADDR_VAR 0 1
4717: PUSH
4718: LD_INT 2
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 5
4726: PUSH
4727: LD_INT 6
4729: PUSH
4730: LD_INT 8
4732: PUSH
4733: LD_INT 11
4735: PUSH
4736: LD_INT 12
4738: PUSH
4739: LD_INT 15
4741: PUSH
4742: LD_INT 16
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 23
4750: PUSH
4751: LD_INT 25
4753: PUSH
4754: LD_INT 26
4756: PUSH
4757: LD_INT 36
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 101
4778: PUSH
4779: LD_INT 102
4781: PUSH
4782: LD_INT 105
4784: PUSH
4785: LD_INT 106
4787: PUSH
4788: LD_INT 108
4790: PUSH
4791: LD_INT 109
4793: PUSH
4794: LD_INT 112
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: ST_TO_ADDR
4810: GO 7317
4812: LD_INT 6
4814: DOUBLE
4815: EQUAL
4816: IFTRUE 4820
4818: GO 4940
4820: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4821: LD_ADDR_VAR 0 1
4825: PUSH
4826: LD_INT 2
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: LD_INT 5
4834: PUSH
4835: LD_INT 6
4837: PUSH
4838: LD_INT 8
4840: PUSH
4841: LD_INT 11
4843: PUSH
4844: LD_INT 12
4846: PUSH
4847: LD_INT 15
4849: PUSH
4850: LD_INT 16
4852: PUSH
4853: LD_INT 20
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 22
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: LD_INT 26
4870: PUSH
4871: LD_INT 30
4873: PUSH
4874: LD_INT 31
4876: PUSH
4877: LD_INT 32
4879: PUSH
4880: LD_INT 36
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 101
4906: PUSH
4907: LD_INT 102
4909: PUSH
4910: LD_INT 105
4912: PUSH
4913: LD_INT 106
4915: PUSH
4916: LD_INT 108
4918: PUSH
4919: LD_INT 109
4921: PUSH
4922: LD_INT 112
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: ST_TO_ADDR
4938: GO 7317
4940: LD_INT 7
4942: DOUBLE
4943: EQUAL
4944: IFTRUE 4948
4946: GO 5048
4948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4949: LD_ADDR_VAR 0 1
4953: PUSH
4954: LD_INT 2
4956: PUSH
4957: LD_INT 4
4959: PUSH
4960: LD_INT 5
4962: PUSH
4963: LD_INT 7
4965: PUSH
4966: LD_INT 11
4968: PUSH
4969: LD_INT 12
4971: PUSH
4972: LD_INT 15
4974: PUSH
4975: LD_INT 16
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 23
4989: PUSH
4990: LD_INT 25
4992: PUSH
4993: LD_INT 26
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 101
5014: PUSH
5015: LD_INT 102
5017: PUSH
5018: LD_INT 103
5020: PUSH
5021: LD_INT 105
5023: PUSH
5024: LD_INT 106
5026: PUSH
5027: LD_INT 108
5029: PUSH
5030: LD_INT 112
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: ST_TO_ADDR
5046: GO 7317
5048: LD_INT 8
5050: DOUBLE
5051: EQUAL
5052: IFTRUE 5056
5054: GO 5184
5056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5057: LD_ADDR_VAR 0 1
5061: PUSH
5062: LD_INT 2
5064: PUSH
5065: LD_INT 4
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: LD_INT 6
5073: PUSH
5074: LD_INT 7
5076: PUSH
5077: LD_INT 8
5079: PUSH
5080: LD_INT 11
5082: PUSH
5083: LD_INT 12
5085: PUSH
5086: LD_INT 15
5088: PUSH
5089: LD_INT 16
5091: PUSH
5092: LD_INT 20
5094: PUSH
5095: LD_INT 21
5097: PUSH
5098: LD_INT 22
5100: PUSH
5101: LD_INT 23
5103: PUSH
5104: LD_INT 25
5106: PUSH
5107: LD_INT 26
5109: PUSH
5110: LD_INT 30
5112: PUSH
5113: LD_INT 31
5115: PUSH
5116: LD_INT 32
5118: PUSH
5119: LD_INT 36
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 101
5146: PUSH
5147: LD_INT 102
5149: PUSH
5150: LD_INT 103
5152: PUSH
5153: LD_INT 105
5155: PUSH
5156: LD_INT 106
5158: PUSH
5159: LD_INT 108
5161: PUSH
5162: LD_INT 109
5164: PUSH
5165: LD_INT 112
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: ST_TO_ADDR
5182: GO 7317
5184: LD_INT 9
5186: DOUBLE
5187: EQUAL
5188: IFTRUE 5192
5190: GO 5328
5192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5193: LD_ADDR_VAR 0 1
5197: PUSH
5198: LD_INT 2
5200: PUSH
5201: LD_INT 4
5203: PUSH
5204: LD_INT 5
5206: PUSH
5207: LD_INT 6
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 8
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 15
5224: PUSH
5225: LD_INT 16
5227: PUSH
5228: LD_INT 20
5230: PUSH
5231: LD_INT 21
5233: PUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 23
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 26
5245: PUSH
5246: LD_INT 28
5248: PUSH
5249: LD_INT 30
5251: PUSH
5252: LD_INT 31
5254: PUSH
5255: LD_INT 32
5257: PUSH
5258: LD_INT 36
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 101
5286: PUSH
5287: LD_INT 102
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: LD_INT 105
5295: PUSH
5296: LD_INT 106
5298: PUSH
5299: LD_INT 108
5301: PUSH
5302: LD_INT 109
5304: PUSH
5305: LD_INT 112
5307: PUSH
5308: LD_INT 114
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: ST_TO_ADDR
5326: GO 7317
5328: LD_INT 10
5330: DOUBLE
5331: EQUAL
5332: IFTRUE 5336
5334: GO 5520
5336: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5337: LD_ADDR_VAR 0 1
5341: PUSH
5342: LD_INT 2
5344: PUSH
5345: LD_INT 4
5347: PUSH
5348: LD_INT 5
5350: PUSH
5351: LD_INT 6
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: LD_INT 11
5368: PUSH
5369: LD_INT 12
5371: PUSH
5372: LD_INT 13
5374: PUSH
5375: LD_INT 14
5377: PUSH
5378: LD_INT 15
5380: PUSH
5381: LD_INT 16
5383: PUSH
5384: LD_INT 17
5386: PUSH
5387: LD_INT 18
5389: PUSH
5390: LD_INT 19
5392: PUSH
5393: LD_INT 20
5395: PUSH
5396: LD_INT 21
5398: PUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 23
5404: PUSH
5405: LD_INT 24
5407: PUSH
5408: LD_INT 25
5410: PUSH
5411: LD_INT 26
5413: PUSH
5414: LD_INT 28
5416: PUSH
5417: LD_INT 30
5419: PUSH
5420: LD_INT 31
5422: PUSH
5423: LD_INT 32
5425: PUSH
5426: LD_INT 36
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_INT 101
5462: PUSH
5463: LD_INT 102
5465: PUSH
5466: LD_INT 103
5468: PUSH
5469: LD_INT 104
5471: PUSH
5472: LD_INT 105
5474: PUSH
5475: LD_INT 106
5477: PUSH
5478: LD_INT 107
5480: PUSH
5481: LD_INT 108
5483: PUSH
5484: LD_INT 109
5486: PUSH
5487: LD_INT 110
5489: PUSH
5490: LD_INT 111
5492: PUSH
5493: LD_INT 112
5495: PUSH
5496: LD_INT 114
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: ST_TO_ADDR
5518: GO 7317
5520: LD_INT 11
5522: DOUBLE
5523: EQUAL
5524: IFTRUE 5528
5526: GO 5720
5528: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5529: LD_ADDR_VAR 0 1
5533: PUSH
5534: LD_INT 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: LD_INT 4
5542: PUSH
5543: LD_INT 5
5545: PUSH
5546: LD_INT 6
5548: PUSH
5549: LD_INT 7
5551: PUSH
5552: LD_INT 8
5554: PUSH
5555: LD_INT 9
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: LD_INT 11
5563: PUSH
5564: LD_INT 12
5566: PUSH
5567: LD_INT 13
5569: PUSH
5570: LD_INT 14
5572: PUSH
5573: LD_INT 15
5575: PUSH
5576: LD_INT 16
5578: PUSH
5579: LD_INT 17
5581: PUSH
5582: LD_INT 18
5584: PUSH
5585: LD_INT 19
5587: PUSH
5588: LD_INT 20
5590: PUSH
5591: LD_INT 21
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 23
5599: PUSH
5600: LD_INT 24
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 26
5608: PUSH
5609: LD_INT 28
5611: PUSH
5612: LD_INT 30
5614: PUSH
5615: LD_INT 31
5617: PUSH
5618: LD_INT 32
5620: PUSH
5621: LD_INT 34
5623: PUSH
5624: LD_INT 36
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 101
5662: PUSH
5663: LD_INT 102
5665: PUSH
5666: LD_INT 103
5668: PUSH
5669: LD_INT 104
5671: PUSH
5672: LD_INT 105
5674: PUSH
5675: LD_INT 106
5677: PUSH
5678: LD_INT 107
5680: PUSH
5681: LD_INT 108
5683: PUSH
5684: LD_INT 109
5686: PUSH
5687: LD_INT 110
5689: PUSH
5690: LD_INT 111
5692: PUSH
5693: LD_INT 112
5695: PUSH
5696: LD_INT 114
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: ST_TO_ADDR
5718: GO 7317
5720: LD_INT 12
5722: DOUBLE
5723: EQUAL
5724: IFTRUE 5728
5726: GO 5936
5728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5729: LD_ADDR_VAR 0 1
5733: PUSH
5734: LD_INT 1
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: LD_INT 3
5742: PUSH
5743: LD_INT 4
5745: PUSH
5746: LD_INT 5
5748: PUSH
5749: LD_INT 6
5751: PUSH
5752: LD_INT 7
5754: PUSH
5755: LD_INT 8
5757: PUSH
5758: LD_INT 9
5760: PUSH
5761: LD_INT 10
5763: PUSH
5764: LD_INT 11
5766: PUSH
5767: LD_INT 12
5769: PUSH
5770: LD_INT 13
5772: PUSH
5773: LD_INT 14
5775: PUSH
5776: LD_INT 15
5778: PUSH
5779: LD_INT 16
5781: PUSH
5782: LD_INT 17
5784: PUSH
5785: LD_INT 18
5787: PUSH
5788: LD_INT 19
5790: PUSH
5791: LD_INT 20
5793: PUSH
5794: LD_INT 21
5796: PUSH
5797: LD_INT 22
5799: PUSH
5800: LD_INT 23
5802: PUSH
5803: LD_INT 24
5805: PUSH
5806: LD_INT 25
5808: PUSH
5809: LD_INT 26
5811: PUSH
5812: LD_INT 27
5814: PUSH
5815: LD_INT 28
5817: PUSH
5818: LD_INT 30
5820: PUSH
5821: LD_INT 31
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 33
5829: PUSH
5830: LD_INT 34
5832: PUSH
5833: LD_INT 36
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: PUSH
5872: LD_INT 101
5874: PUSH
5875: LD_INT 102
5877: PUSH
5878: LD_INT 103
5880: PUSH
5881: LD_INT 104
5883: PUSH
5884: LD_INT 105
5886: PUSH
5887: LD_INT 106
5889: PUSH
5890: LD_INT 107
5892: PUSH
5893: LD_INT 108
5895: PUSH
5896: LD_INT 109
5898: PUSH
5899: LD_INT 110
5901: PUSH
5902: LD_INT 111
5904: PUSH
5905: LD_INT 112
5907: PUSH
5908: LD_INT 113
5910: PUSH
5911: LD_INT 114
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: ST_TO_ADDR
5934: GO 7317
5936: LD_INT 13
5938: DOUBLE
5939: EQUAL
5940: IFTRUE 5944
5942: GO 6152
5944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: LD_INT 3
5958: PUSH
5959: LD_INT 4
5961: PUSH
5962: LD_INT 5
5964: PUSH
5965: LD_INT 6
5967: PUSH
5968: LD_INT 7
5970: PUSH
5971: LD_INT 8
5973: PUSH
5974: LD_INT 9
5976: PUSH
5977: LD_INT 10
5979: PUSH
5980: LD_INT 11
5982: PUSH
5983: LD_INT 12
5985: PUSH
5986: LD_INT 13
5988: PUSH
5989: LD_INT 14
5991: PUSH
5992: LD_INT 15
5994: PUSH
5995: LD_INT 16
5997: PUSH
5998: LD_INT 17
6000: PUSH
6001: LD_INT 18
6003: PUSH
6004: LD_INT 19
6006: PUSH
6007: LD_INT 20
6009: PUSH
6010: LD_INT 21
6012: PUSH
6013: LD_INT 22
6015: PUSH
6016: LD_INT 23
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: LD_INT 25
6024: PUSH
6025: LD_INT 26
6027: PUSH
6028: LD_INT 27
6030: PUSH
6031: LD_INT 28
6033: PUSH
6034: LD_INT 30
6036: PUSH
6037: LD_INT 31
6039: PUSH
6040: LD_INT 32
6042: PUSH
6043: LD_INT 33
6045: PUSH
6046: LD_INT 34
6048: PUSH
6049: LD_INT 36
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 101
6090: PUSH
6091: LD_INT 102
6093: PUSH
6094: LD_INT 103
6096: PUSH
6097: LD_INT 104
6099: PUSH
6100: LD_INT 105
6102: PUSH
6103: LD_INT 106
6105: PUSH
6106: LD_INT 107
6108: PUSH
6109: LD_INT 108
6111: PUSH
6112: LD_INT 109
6114: PUSH
6115: LD_INT 110
6117: PUSH
6118: LD_INT 111
6120: PUSH
6121: LD_INT 112
6123: PUSH
6124: LD_INT 113
6126: PUSH
6127: LD_INT 114
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: ST_TO_ADDR
6150: GO 7317
6152: LD_INT 14
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6372
6160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6161: LD_ADDR_VAR 0 1
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 7
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: LD_INT 10
6195: PUSH
6196: LD_INT 11
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: LD_INT 13
6204: PUSH
6205: LD_INT 14
6207: PUSH
6208: LD_INT 15
6210: PUSH
6211: LD_INT 16
6213: PUSH
6214: LD_INT 17
6216: PUSH
6217: LD_INT 18
6219: PUSH
6220: LD_INT 19
6222: PUSH
6223: LD_INT 20
6225: PUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 23
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 26
6243: PUSH
6244: LD_INT 27
6246: PUSH
6247: LD_INT 28
6249: PUSH
6250: LD_INT 29
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 31
6258: PUSH
6259: LD_INT 32
6261: PUSH
6262: LD_INT 33
6264: PUSH
6265: LD_INT 34
6267: PUSH
6268: LD_INT 36
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 101
6310: PUSH
6311: LD_INT 102
6313: PUSH
6314: LD_INT 103
6316: PUSH
6317: LD_INT 104
6319: PUSH
6320: LD_INT 105
6322: PUSH
6323: LD_INT 106
6325: PUSH
6326: LD_INT 107
6328: PUSH
6329: LD_INT 108
6331: PUSH
6332: LD_INT 109
6334: PUSH
6335: LD_INT 110
6337: PUSH
6338: LD_INT 111
6340: PUSH
6341: LD_INT 112
6343: PUSH
6344: LD_INT 113
6346: PUSH
6347: LD_INT 114
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: ST_TO_ADDR
6370: GO 7317
6372: LD_INT 15
6374: DOUBLE
6375: EQUAL
6376: IFTRUE 6380
6378: GO 6592
6380: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_INT 1
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: LD_INT 8
6409: PUSH
6410: LD_INT 9
6412: PUSH
6413: LD_INT 10
6415: PUSH
6416: LD_INT 11
6418: PUSH
6419: LD_INT 12
6421: PUSH
6422: LD_INT 13
6424: PUSH
6425: LD_INT 14
6427: PUSH
6428: LD_INT 15
6430: PUSH
6431: LD_INT 16
6433: PUSH
6434: LD_INT 17
6436: PUSH
6437: LD_INT 18
6439: PUSH
6440: LD_INT 19
6442: PUSH
6443: LD_INT 20
6445: PUSH
6446: LD_INT 21
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 23
6454: PUSH
6455: LD_INT 24
6457: PUSH
6458: LD_INT 25
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: LD_INT 27
6466: PUSH
6467: LD_INT 28
6469: PUSH
6470: LD_INT 29
6472: PUSH
6473: LD_INT 30
6475: PUSH
6476: LD_INT 31
6478: PUSH
6479: LD_INT 32
6481: PUSH
6482: LD_INT 33
6484: PUSH
6485: LD_INT 34
6487: PUSH
6488: LD_INT 36
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 101
6530: PUSH
6531: LD_INT 102
6533: PUSH
6534: LD_INT 103
6536: PUSH
6537: LD_INT 104
6539: PUSH
6540: LD_INT 105
6542: PUSH
6543: LD_INT 106
6545: PUSH
6546: LD_INT 107
6548: PUSH
6549: LD_INT 108
6551: PUSH
6552: LD_INT 109
6554: PUSH
6555: LD_INT 110
6557: PUSH
6558: LD_INT 111
6560: PUSH
6561: LD_INT 112
6563: PUSH
6564: LD_INT 113
6566: PUSH
6567: LD_INT 114
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: ST_TO_ADDR
6590: GO 7317
6592: LD_INT 16
6594: DOUBLE
6595: EQUAL
6596: IFTRUE 6600
6598: GO 6724
6600: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6601: LD_ADDR_VAR 0 1
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 5
6614: PUSH
6615: LD_INT 7
6617: PUSH
6618: LD_INT 11
6620: PUSH
6621: LD_INT 12
6623: PUSH
6624: LD_INT 15
6626: PUSH
6627: LD_INT 16
6629: PUSH
6630: LD_INT 20
6632: PUSH
6633: LD_INT 21
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 23
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 31
6653: PUSH
6654: LD_INT 32
6656: PUSH
6657: LD_INT 33
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 101
6686: PUSH
6687: LD_INT 102
6689: PUSH
6690: LD_INT 103
6692: PUSH
6693: LD_INT 106
6695: PUSH
6696: LD_INT 108
6698: PUSH
6699: LD_INT 112
6701: PUSH
6702: LD_INT 113
6704: PUSH
6705: LD_INT 114
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: ST_TO_ADDR
6722: GO 7317
6724: LD_INT 17
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6944
6732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6733: LD_ADDR_VAR 0 1
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: LD_INT 2
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: LD_INT 4
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: LD_INT 6
6755: PUSH
6756: LD_INT 7
6758: PUSH
6759: LD_INT 8
6761: PUSH
6762: LD_INT 9
6764: PUSH
6765: LD_INT 10
6767: PUSH
6768: LD_INT 11
6770: PUSH
6771: LD_INT 12
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: LD_INT 15
6782: PUSH
6783: LD_INT 16
6785: PUSH
6786: LD_INT 17
6788: PUSH
6789: LD_INT 18
6791: PUSH
6792: LD_INT 19
6794: PUSH
6795: LD_INT 20
6797: PUSH
6798: LD_INT 21
6800: PUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 23
6806: PUSH
6807: LD_INT 24
6809: PUSH
6810: LD_INT 25
6812: PUSH
6813: LD_INT 26
6815: PUSH
6816: LD_INT 27
6818: PUSH
6819: LD_INT 28
6821: PUSH
6822: LD_INT 29
6824: PUSH
6825: LD_INT 30
6827: PUSH
6828: LD_INT 31
6830: PUSH
6831: LD_INT 32
6833: PUSH
6834: LD_INT 33
6836: PUSH
6837: LD_INT 34
6839: PUSH
6840: LD_INT 36
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 101
6882: PUSH
6883: LD_INT 102
6885: PUSH
6886: LD_INT 103
6888: PUSH
6889: LD_INT 104
6891: PUSH
6892: LD_INT 105
6894: PUSH
6895: LD_INT 106
6897: PUSH
6898: LD_INT 107
6900: PUSH
6901: LD_INT 108
6903: PUSH
6904: LD_INT 109
6906: PUSH
6907: LD_INT 110
6909: PUSH
6910: LD_INT 111
6912: PUSH
6913: LD_INT 112
6915: PUSH
6916: LD_INT 113
6918: PUSH
6919: LD_INT 114
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: ST_TO_ADDR
6942: GO 7317
6944: LD_INT 18
6946: DOUBLE
6947: EQUAL
6948: IFTRUE 6952
6950: GO 7088
6952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6953: LD_ADDR_VAR 0 1
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: LD_INT 5
6966: PUSH
6967: LD_INT 7
6969: PUSH
6970: LD_INT 11
6972: PUSH
6973: LD_INT 12
6975: PUSH
6976: LD_INT 15
6978: PUSH
6979: LD_INT 16
6981: PUSH
6982: LD_INT 20
6984: PUSH
6985: LD_INT 21
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_INT 23
6993: PUSH
6994: LD_INT 25
6996: PUSH
6997: LD_INT 26
6999: PUSH
7000: LD_INT 30
7002: PUSH
7003: LD_INT 31
7005: PUSH
7006: LD_INT 32
7008: PUSH
7009: LD_INT 33
7011: PUSH
7012: LD_INT 34
7014: PUSH
7015: LD_INT 35
7017: PUSH
7018: LD_INT 36
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 101
7046: PUSH
7047: LD_INT 102
7049: PUSH
7050: LD_INT 103
7052: PUSH
7053: LD_INT 106
7055: PUSH
7056: LD_INT 108
7058: PUSH
7059: LD_INT 112
7061: PUSH
7062: LD_INT 113
7064: PUSH
7065: LD_INT 114
7067: PUSH
7068: LD_INT 115
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: ST_TO_ADDR
7086: GO 7317
7088: LD_INT 19
7090: DOUBLE
7091: EQUAL
7092: IFTRUE 7096
7094: GO 7316
7096: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7097: LD_ADDR_VAR 0 1
7101: PUSH
7102: LD_INT 1
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: LD_INT 3
7110: PUSH
7111: LD_INT 4
7113: PUSH
7114: LD_INT 5
7116: PUSH
7117: LD_INT 6
7119: PUSH
7120: LD_INT 7
7122: PUSH
7123: LD_INT 8
7125: PUSH
7126: LD_INT 9
7128: PUSH
7129: LD_INT 10
7131: PUSH
7132: LD_INT 11
7134: PUSH
7135: LD_INT 12
7137: PUSH
7138: LD_INT 13
7140: PUSH
7141: LD_INT 14
7143: PUSH
7144: LD_INT 15
7146: PUSH
7147: LD_INT 16
7149: PUSH
7150: LD_INT 17
7152: PUSH
7153: LD_INT 18
7155: PUSH
7156: LD_INT 19
7158: PUSH
7159: LD_INT 20
7161: PUSH
7162: LD_INT 21
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_INT 23
7170: PUSH
7171: LD_INT 24
7173: PUSH
7174: LD_INT 25
7176: PUSH
7177: LD_INT 26
7179: PUSH
7180: LD_INT 27
7182: PUSH
7183: LD_INT 28
7185: PUSH
7186: LD_INT 29
7188: PUSH
7189: LD_INT 30
7191: PUSH
7192: LD_INT 31
7194: PUSH
7195: LD_INT 32
7197: PUSH
7198: LD_INT 33
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 35
7206: PUSH
7207: LD_INT 36
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 101
7250: PUSH
7251: LD_INT 102
7253: PUSH
7254: LD_INT 103
7256: PUSH
7257: LD_INT 104
7259: PUSH
7260: LD_INT 105
7262: PUSH
7263: LD_INT 106
7265: PUSH
7266: LD_INT 107
7268: PUSH
7269: LD_INT 108
7271: PUSH
7272: LD_INT 109
7274: PUSH
7275: LD_INT 110
7277: PUSH
7278: LD_INT 111
7280: PUSH
7281: LD_INT 112
7283: PUSH
7284: LD_INT 113
7286: PUSH
7287: LD_INT 114
7289: PUSH
7290: LD_INT 115
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 7317
7316: POP
// end ; if result then
7317: LD_VAR 0 1
7321: IFFALSE 7610
// begin normal :=  ;
7323: LD_ADDR_VAR 0 3
7327: PUSH
7328: LD_STRING 
7330: ST_TO_ADDR
// hardcore :=  ;
7331: LD_ADDR_VAR 0 4
7335: PUSH
7336: LD_STRING 
7338: ST_TO_ADDR
// for i = 1 to normalCounter do
7339: LD_ADDR_VAR 0 5
7343: PUSH
7344: DOUBLE
7345: LD_INT 1
7347: DEC
7348: ST_TO_ADDR
7349: LD_EXP 22
7353: PUSH
7354: FOR_TO
7355: IFFALSE 7456
// begin tmp := 0 ;
7357: LD_ADDR_VAR 0 2
7361: PUSH
7362: LD_STRING 0
7364: ST_TO_ADDR
// if result [ 1 ] then
7365: LD_VAR 0 1
7369: PUSH
7370: LD_INT 1
7372: ARRAY
7373: IFFALSE 7438
// if result [ 1 ] [ 1 ] = i then
7375: LD_VAR 0 1
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PUSH
7388: LD_VAR 0 5
7392: EQUAL
7393: IFFALSE 7438
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7395: LD_ADDR_VAR 0 1
7399: PUSH
7400: LD_VAR 0 1
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 3
7424: PPUSH
7425: CALL_OW 1
7429: ST_TO_ADDR
// tmp := 1 ;
7430: LD_ADDR_VAR 0 2
7434: PUSH
7435: LD_STRING 1
7437: ST_TO_ADDR
// end ; normal := normal & tmp ;
7438: LD_ADDR_VAR 0 3
7442: PUSH
7443: LD_VAR 0 3
7447: PUSH
7448: LD_VAR 0 2
7452: STR
7453: ST_TO_ADDR
// end ;
7454: GO 7354
7456: POP
7457: POP
// for i = 1 to hardcoreCounter do
7458: LD_ADDR_VAR 0 5
7462: PUSH
7463: DOUBLE
7464: LD_INT 1
7466: DEC
7467: ST_TO_ADDR
7468: LD_EXP 23
7472: PUSH
7473: FOR_TO
7474: IFFALSE 7579
// begin tmp := 0 ;
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_STRING 0
7483: ST_TO_ADDR
// if result [ 2 ] then
7484: LD_VAR 0 1
7488: PUSH
7489: LD_INT 2
7491: ARRAY
7492: IFFALSE 7561
// if result [ 2 ] [ 1 ] = 100 + i then
7494: LD_VAR 0 1
7498: PUSH
7499: LD_INT 2
7501: ARRAY
7502: PUSH
7503: LD_INT 1
7505: ARRAY
7506: PUSH
7507: LD_INT 100
7509: PUSH
7510: LD_VAR 0 5
7514: PLUS
7515: EQUAL
7516: IFFALSE 7561
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7518: LD_ADDR_VAR 0 1
7522: PUSH
7523: LD_VAR 0 1
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 1
7535: PUSH
7536: LD_INT 2
7538: ARRAY
7539: PPUSH
7540: LD_INT 1
7542: PPUSH
7543: CALL_OW 3
7547: PPUSH
7548: CALL_OW 1
7552: ST_TO_ADDR
// tmp := 1 ;
7553: LD_ADDR_VAR 0 2
7557: PUSH
7558: LD_STRING 1
7560: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7561: LD_ADDR_VAR 0 4
7565: PUSH
7566: LD_VAR 0 4
7570: PUSH
7571: LD_VAR 0 2
7575: STR
7576: ST_TO_ADDR
// end ;
7577: GO 7473
7579: POP
7580: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7581: LD_STRING getStreamItemsFromMission("
7583: PUSH
7584: LD_VAR 0 3
7588: STR
7589: PUSH
7590: LD_STRING ","
7592: STR
7593: PUSH
7594: LD_VAR 0 4
7598: STR
7599: PUSH
7600: LD_STRING ")
7602: STR
7603: PPUSH
7604: CALL_OW 559
// end else
7608: GO 7617
// ToLua ( getStreamItemsFromMission("","") ) ;
7610: LD_STRING getStreamItemsFromMission("","")
7612: PPUSH
7613: CALL_OW 559
// end ;
7617: LD_VAR 0 1
7621: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 100
7629: EQUAL
7630: IFFALSE 8579
// begin if not StreamModeActive then
7632: LD_EXP 21
7636: NOT
7637: IFFALSE 7647
// StreamModeActive := true ;
7639: LD_ADDR_EXP 21
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 0 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 0
7654: EQUAL
7655: IFFALSE 7661
// InitStreamMode ;
7657: CALL 3907 0 0
// if p3 = 1 then
7661: LD_VAR 0 3
7665: PUSH
7666: LD_INT 1
7668: EQUAL
7669: IFFALSE 7679
// sRocket := true ;
7671: LD_ADDR_EXP 26
7675: PUSH
7676: LD_INT 1
7678: ST_TO_ADDR
// if p3 = 2 then
7679: LD_VAR 0 3
7683: PUSH
7684: LD_INT 2
7686: EQUAL
7687: IFFALSE 7697
// sSpeed := true ;
7689: LD_ADDR_EXP 25
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// if p3 = 3 then
7697: LD_VAR 0 3
7701: PUSH
7702: LD_INT 3
7704: EQUAL
7705: IFFALSE 7715
// sEngine := true ;
7707: LD_ADDR_EXP 27
7711: PUSH
7712: LD_INT 1
7714: ST_TO_ADDR
// if p3 = 4 then
7715: LD_VAR 0 3
7719: PUSH
7720: LD_INT 4
7722: EQUAL
7723: IFFALSE 7733
// sSpec := true ;
7725: LD_ADDR_EXP 24
7729: PUSH
7730: LD_INT 1
7732: ST_TO_ADDR
// if p3 = 5 then
7733: LD_VAR 0 3
7737: PUSH
7738: LD_INT 5
7740: EQUAL
7741: IFFALSE 7751
// sLevel := true ;
7743: LD_ADDR_EXP 28
7747: PUSH
7748: LD_INT 1
7750: ST_TO_ADDR
// if p3 = 6 then
7751: LD_VAR 0 3
7755: PUSH
7756: LD_INT 6
7758: EQUAL
7759: IFFALSE 7769
// sArmoury := true ;
7761: LD_ADDR_EXP 29
7765: PUSH
7766: LD_INT 1
7768: ST_TO_ADDR
// if p3 = 7 then
7769: LD_VAR 0 3
7773: PUSH
7774: LD_INT 7
7776: EQUAL
7777: IFFALSE 7787
// sRadar := true ;
7779: LD_ADDR_EXP 30
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// if p3 = 8 then
7787: LD_VAR 0 3
7791: PUSH
7792: LD_INT 8
7794: EQUAL
7795: IFFALSE 7805
// sBunker := true ;
7797: LD_ADDR_EXP 31
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// if p3 = 9 then
7805: LD_VAR 0 3
7809: PUSH
7810: LD_INT 9
7812: EQUAL
7813: IFFALSE 7823
// sHack := true ;
7815: LD_ADDR_EXP 32
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// if p3 = 10 then
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 10
7830: EQUAL
7831: IFFALSE 7841
// sFire := true ;
7833: LD_ADDR_EXP 33
7837: PUSH
7838: LD_INT 1
7840: ST_TO_ADDR
// if p3 = 11 then
7841: LD_VAR 0 3
7845: PUSH
7846: LD_INT 11
7848: EQUAL
7849: IFFALSE 7859
// sRefresh := true ;
7851: LD_ADDR_EXP 34
7855: PUSH
7856: LD_INT 1
7858: ST_TO_ADDR
// if p3 = 12 then
7859: LD_VAR 0 3
7863: PUSH
7864: LD_INT 12
7866: EQUAL
7867: IFFALSE 7877
// sExp := true ;
7869: LD_ADDR_EXP 35
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// if p3 = 13 then
7877: LD_VAR 0 3
7881: PUSH
7882: LD_INT 13
7884: EQUAL
7885: IFFALSE 7895
// sDepot := true ;
7887: LD_ADDR_EXP 36
7891: PUSH
7892: LD_INT 1
7894: ST_TO_ADDR
// if p3 = 14 then
7895: LD_VAR 0 3
7899: PUSH
7900: LD_INT 14
7902: EQUAL
7903: IFFALSE 7913
// sFlag := true ;
7905: LD_ADDR_EXP 37
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// if p3 = 15 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_INT 15
7920: EQUAL
7921: IFFALSE 7931
// sKamikadze := true ;
7923: LD_ADDR_EXP 45
7927: PUSH
7928: LD_INT 1
7930: ST_TO_ADDR
// if p3 = 16 then
7931: LD_VAR 0 3
7935: PUSH
7936: LD_INT 16
7938: EQUAL
7939: IFFALSE 7949
// sTroll := true ;
7941: LD_ADDR_EXP 46
7945: PUSH
7946: LD_INT 1
7948: ST_TO_ADDR
// if p3 = 17 then
7949: LD_VAR 0 3
7953: PUSH
7954: LD_INT 17
7956: EQUAL
7957: IFFALSE 7967
// sSlow := true ;
7959: LD_ADDR_EXP 47
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// if p3 = 18 then
7967: LD_VAR 0 3
7971: PUSH
7972: LD_INT 18
7974: EQUAL
7975: IFFALSE 7985
// sLack := true ;
7977: LD_ADDR_EXP 48
7981: PUSH
7982: LD_INT 1
7984: ST_TO_ADDR
// if p3 = 19 then
7985: LD_VAR 0 3
7989: PUSH
7990: LD_INT 19
7992: EQUAL
7993: IFFALSE 8003
// sTank := true ;
7995: LD_ADDR_EXP 50
7999: PUSH
8000: LD_INT 1
8002: ST_TO_ADDR
// if p3 = 20 then
8003: LD_VAR 0 3
8007: PUSH
8008: LD_INT 20
8010: EQUAL
8011: IFFALSE 8021
// sRemote := true ;
8013: LD_ADDR_EXP 51
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// if p3 = 21 then
8021: LD_VAR 0 3
8025: PUSH
8026: LD_INT 21
8028: EQUAL
8029: IFFALSE 8039
// sPowell := true ;
8031: LD_ADDR_EXP 52
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// if p3 = 22 then
8039: LD_VAR 0 3
8043: PUSH
8044: LD_INT 22
8046: EQUAL
8047: IFFALSE 8057
// sTeleport := true ;
8049: LD_ADDR_EXP 55
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// if p3 = 23 then
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 23
8064: EQUAL
8065: IFFALSE 8075
// sOilTower := true ;
8067: LD_ADDR_EXP 57
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// if p3 = 24 then
8075: LD_VAR 0 3
8079: PUSH
8080: LD_INT 24
8082: EQUAL
8083: IFFALSE 8093
// sShovel := true ;
8085: LD_ADDR_EXP 58
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// if p3 = 25 then
8093: LD_VAR 0 3
8097: PUSH
8098: LD_INT 25
8100: EQUAL
8101: IFFALSE 8111
// sSheik := true ;
8103: LD_ADDR_EXP 59
8107: PUSH
8108: LD_INT 1
8110: ST_TO_ADDR
// if p3 = 26 then
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 26
8118: EQUAL
8119: IFFALSE 8129
// sEarthquake := true ;
8121: LD_ADDR_EXP 61
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// if p3 = 27 then
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 27
8136: EQUAL
8137: IFFALSE 8147
// sAI := true ;
8139: LD_ADDR_EXP 62
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// if p3 = 28 then
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 28
8154: EQUAL
8155: IFFALSE 8165
// sCargo := true ;
8157: LD_ADDR_EXP 65
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// if p3 = 29 then
8165: LD_VAR 0 3
8169: PUSH
8170: LD_INT 29
8172: EQUAL
8173: IFFALSE 8183
// sDLaser := true ;
8175: LD_ADDR_EXP 66
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// if p3 = 30 then
8183: LD_VAR 0 3
8187: PUSH
8188: LD_INT 30
8190: EQUAL
8191: IFFALSE 8201
// sExchange := true ;
8193: LD_ADDR_EXP 67
8197: PUSH
8198: LD_INT 1
8200: ST_TO_ADDR
// if p3 = 31 then
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 31
8208: EQUAL
8209: IFFALSE 8219
// sFac := true ;
8211: LD_ADDR_EXP 68
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// if p3 = 32 then
8219: LD_VAR 0 3
8223: PUSH
8224: LD_INT 32
8226: EQUAL
8227: IFFALSE 8237
// sPower := true ;
8229: LD_ADDR_EXP 69
8233: PUSH
8234: LD_INT 1
8236: ST_TO_ADDR
// if p3 = 33 then
8237: LD_VAR 0 3
8241: PUSH
8242: LD_INT 33
8244: EQUAL
8245: IFFALSE 8255
// sRandom := true ;
8247: LD_ADDR_EXP 70
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// if p3 = 34 then
8255: LD_VAR 0 3
8259: PUSH
8260: LD_INT 34
8262: EQUAL
8263: IFFALSE 8273
// sShield := true ;
8265: LD_ADDR_EXP 71
8269: PUSH
8270: LD_INT 1
8272: ST_TO_ADDR
// if p3 = 35 then
8273: LD_VAR 0 3
8277: PUSH
8278: LD_INT 35
8280: EQUAL
8281: IFFALSE 8291
// sTime := true ;
8283: LD_ADDR_EXP 72
8287: PUSH
8288: LD_INT 1
8290: ST_TO_ADDR
// if p3 = 36 then
8291: LD_VAR 0 3
8295: PUSH
8296: LD_INT 36
8298: EQUAL
8299: IFFALSE 8309
// sTools := true ;
8301: LD_ADDR_EXP 73
8305: PUSH
8306: LD_INT 1
8308: ST_TO_ADDR
// if p3 = 101 then
8309: LD_VAR 0 3
8313: PUSH
8314: LD_INT 101
8316: EQUAL
8317: IFFALSE 8327
// sSold := true ;
8319: LD_ADDR_EXP 38
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// if p3 = 102 then
8327: LD_VAR 0 3
8331: PUSH
8332: LD_INT 102
8334: EQUAL
8335: IFFALSE 8345
// sDiff := true ;
8337: LD_ADDR_EXP 39
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// if p3 = 103 then
8345: LD_VAR 0 3
8349: PUSH
8350: LD_INT 103
8352: EQUAL
8353: IFFALSE 8363
// sFog := true ;
8355: LD_ADDR_EXP 42
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// if p3 = 104 then
8363: LD_VAR 0 3
8367: PUSH
8368: LD_INT 104
8370: EQUAL
8371: IFFALSE 8381
// sReset := true ;
8373: LD_ADDR_EXP 43
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// if p3 = 105 then
8381: LD_VAR 0 3
8385: PUSH
8386: LD_INT 105
8388: EQUAL
8389: IFFALSE 8399
// sSun := true ;
8391: LD_ADDR_EXP 44
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// if p3 = 106 then
8399: LD_VAR 0 3
8403: PUSH
8404: LD_INT 106
8406: EQUAL
8407: IFFALSE 8417
// sTiger := true ;
8409: LD_ADDR_EXP 40
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// if p3 = 107 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 107
8424: EQUAL
8425: IFFALSE 8435
// sBomb := true ;
8427: LD_ADDR_EXP 41
8431: PUSH
8432: LD_INT 1
8434: ST_TO_ADDR
// if p3 = 108 then
8435: LD_VAR 0 3
8439: PUSH
8440: LD_INT 108
8442: EQUAL
8443: IFFALSE 8453
// sWound := true ;
8445: LD_ADDR_EXP 49
8449: PUSH
8450: LD_INT 1
8452: ST_TO_ADDR
// if p3 = 109 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 109
8460: EQUAL
8461: IFFALSE 8471
// sBetray := true ;
8463: LD_ADDR_EXP 53
8467: PUSH
8468: LD_INT 1
8470: ST_TO_ADDR
// if p3 = 110 then
8471: LD_VAR 0 3
8475: PUSH
8476: LD_INT 110
8478: EQUAL
8479: IFFALSE 8489
// sContamin := true ;
8481: LD_ADDR_EXP 54
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// if p3 = 111 then
8489: LD_VAR 0 3
8493: PUSH
8494: LD_INT 111
8496: EQUAL
8497: IFFALSE 8507
// sOil := true ;
8499: LD_ADDR_EXP 56
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// if p3 = 112 then
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 112
8514: EQUAL
8515: IFFALSE 8525
// sStu := true ;
8517: LD_ADDR_EXP 60
8521: PUSH
8522: LD_INT 1
8524: ST_TO_ADDR
// if p3 = 113 then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 113
8532: EQUAL
8533: IFFALSE 8543
// sBazooka := true ;
8535: LD_ADDR_EXP 63
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// if p3 = 114 then
8543: LD_VAR 0 3
8547: PUSH
8548: LD_INT 114
8550: EQUAL
8551: IFFALSE 8561
// sMortar := true ;
8553: LD_ADDR_EXP 64
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// if p3 = 115 then
8561: LD_VAR 0 3
8565: PUSH
8566: LD_INT 115
8568: EQUAL
8569: IFFALSE 8579
// sRanger := true ;
8571: LD_ADDR_EXP 74
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// end ; end ;
8579: PPOPN 6
8581: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8582: LD_EXP 21
8586: PUSH
8587: LD_EXP 26
8591: AND
8592: IFFALSE 8716
8594: GO 8596
8596: DISABLE
8597: LD_INT 0
8599: PPUSH
8600: PPUSH
// begin enable ;
8601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: LD_INT 22
8609: PUSH
8610: LD_OWVAR 2
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 2
8621: PUSH
8622: LD_INT 34
8624: PUSH
8625: LD_INT 7
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 45
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 34
8644: PUSH
8645: LD_INT 28
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 34
8654: PUSH
8655: LD_INT 47
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: ST_TO_ADDR
// if not tmp then
8678: LD_VAR 0 2
8682: NOT
8683: IFFALSE 8687
// exit ;
8685: GO 8716
// for i in tmp do
8687: LD_ADDR_VAR 0 1
8691: PUSH
8692: LD_VAR 0 2
8696: PUSH
8697: FOR_IN
8698: IFFALSE 8714
// begin SetLives ( i , 0 ) ;
8700: LD_VAR 0 1
8704: PPUSH
8705: LD_INT 0
8707: PPUSH
8708: CALL_OW 234
// end ;
8712: GO 8697
8714: POP
8715: POP
// end ;
8716: PPOPN 2
8718: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8719: LD_EXP 21
8723: PUSH
8724: LD_EXP 27
8728: AND
8729: IFFALSE 8813
8731: GO 8733
8733: DISABLE
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
// begin enable ;
8738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8739: LD_ADDR_VAR 0 2
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_OWVAR 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 32
8758: PUSH
8759: LD_INT 3
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ST_TO_ADDR
// if not tmp then
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8784
// exit ;
8782: GO 8813
// for i in tmp do
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: LD_VAR 0 2
8793: PUSH
8794: FOR_IN
8795: IFFALSE 8811
// begin SetLives ( i , 0 ) ;
8797: LD_VAR 0 1
8801: PPUSH
8802: LD_INT 0
8804: PPUSH
8805: CALL_OW 234
// end ;
8809: GO 8794
8811: POP
8812: POP
// end ;
8813: PPOPN 2
8815: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8816: LD_EXP 21
8820: PUSH
8821: LD_EXP 24
8825: AND
8826: IFFALSE 8919
8828: GO 8830
8830: DISABLE
8831: LD_INT 0
8833: PPUSH
// begin enable ;
8834: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8835: LD_ADDR_VAR 0 1
8839: PUSH
8840: LD_INT 22
8842: PUSH
8843: LD_OWVAR 2
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: LD_INT 25
8857: PUSH
8858: LD_INT 5
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 25
8867: PUSH
8868: LD_INT 9
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 25
8877: PUSH
8878: LD_INT 8
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: FOR_IN
8901: IFFALSE 8917
// begin SetClass ( i , 1 ) ;
8903: LD_VAR 0 1
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: CALL_OW 336
// end ;
8915: GO 8900
8917: POP
8918: POP
// end ;
8919: PPOPN 1
8921: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8922: LD_EXP 21
8926: PUSH
8927: LD_EXP 25
8931: AND
8932: PUSH
8933: LD_OWVAR 65
8937: PUSH
8938: LD_INT 7
8940: LESS
8941: AND
8942: IFFALSE 8956
8944: GO 8946
8946: DISABLE
// begin enable ;
8947: ENABLE
// game_speed := 7 ;
8948: LD_ADDR_OWVAR 65
8952: PUSH
8953: LD_INT 7
8955: ST_TO_ADDR
// end ;
8956: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8957: LD_EXP 21
8961: PUSH
8962: LD_EXP 28
8966: AND
8967: IFFALSE 9169
8969: GO 8971
8971: DISABLE
8972: LD_INT 0
8974: PPUSH
8975: PPUSH
8976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8977: LD_ADDR_VAR 0 3
8981: PUSH
8982: LD_INT 81
8984: PUSH
8985: LD_OWVAR 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 21
8996: PUSH
8997: LD_INT 1
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PPUSH
9008: CALL_OW 69
9012: ST_TO_ADDR
// if not tmp then
9013: LD_VAR 0 3
9017: NOT
9018: IFFALSE 9022
// exit ;
9020: GO 9169
// if tmp > 5 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 5
9029: GREATER
9030: IFFALSE 9042
// k := 5 else
9032: LD_ADDR_VAR 0 2
9036: PUSH
9037: LD_INT 5
9039: ST_TO_ADDR
9040: GO 9052
// k := tmp ;
9042: LD_ADDR_VAR 0 2
9046: PUSH
9047: LD_VAR 0 3
9051: ST_TO_ADDR
// for i := 1 to k do
9052: LD_ADDR_VAR 0 1
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_VAR 0 2
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9167
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9070: LD_VAR 0 3
9074: PUSH
9075: LD_VAR 0 1
9079: ARRAY
9080: PPUSH
9081: LD_VAR 0 1
9085: PUSH
9086: LD_INT 4
9088: MOD
9089: PUSH
9090: LD_INT 1
9092: PLUS
9093: PPUSH
9094: CALL_OW 259
9098: PUSH
9099: LD_INT 10
9101: LESS
9102: IFFALSE 9165
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9104: LD_VAR 0 3
9108: PUSH
9109: LD_VAR 0 1
9113: ARRAY
9114: PPUSH
9115: LD_VAR 0 1
9119: PUSH
9120: LD_INT 4
9122: MOD
9123: PUSH
9124: LD_INT 1
9126: PLUS
9127: PPUSH
9128: LD_VAR 0 3
9132: PUSH
9133: LD_VAR 0 1
9137: ARRAY
9138: PPUSH
9139: LD_VAR 0 1
9143: PUSH
9144: LD_INT 4
9146: MOD
9147: PUSH
9148: LD_INT 1
9150: PLUS
9151: PPUSH
9152: CALL_OW 259
9156: PUSH
9157: LD_INT 1
9159: PLUS
9160: PPUSH
9161: CALL_OW 237
9165: GO 9067
9167: POP
9168: POP
// end ;
9169: PPOPN 3
9171: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9172: LD_EXP 21
9176: PUSH
9177: LD_EXP 29
9181: AND
9182: IFFALSE 9202
9184: GO 9186
9186: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9187: LD_INT 4
9189: PPUSH
9190: LD_OWVAR 2
9194: PPUSH
9195: LD_INT 0
9197: PPUSH
9198: CALL_OW 324
9202: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9203: LD_EXP 21
9207: PUSH
9208: LD_EXP 58
9212: AND
9213: IFFALSE 9233
9215: GO 9217
9217: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9218: LD_INT 19
9220: PPUSH
9221: LD_OWVAR 2
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 324
9233: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9234: LD_EXP 21
9238: PUSH
9239: LD_EXP 30
9243: AND
9244: IFFALSE 9346
9246: GO 9248
9248: DISABLE
9249: LD_INT 0
9251: PPUSH
9252: PPUSH
// begin enable ;
9253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9254: LD_ADDR_VAR 0 2
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_OWVAR 2
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 34
9276: PUSH
9277: LD_INT 11
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 34
9286: PUSH
9287: LD_INT 30
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 69
9307: ST_TO_ADDR
// if not tmp then
9308: LD_VAR 0 2
9312: NOT
9313: IFFALSE 9317
// exit ;
9315: GO 9346
// for i in tmp do
9317: LD_ADDR_VAR 0 1
9321: PUSH
9322: LD_VAR 0 2
9326: PUSH
9327: FOR_IN
9328: IFFALSE 9344
// begin SetLives ( i , 0 ) ;
9330: LD_VAR 0 1
9334: PPUSH
9335: LD_INT 0
9337: PPUSH
9338: CALL_OW 234
// end ;
9342: GO 9327
9344: POP
9345: POP
// end ;
9346: PPOPN 2
9348: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9349: LD_EXP 21
9353: PUSH
9354: LD_EXP 31
9358: AND
9359: IFFALSE 9379
9361: GO 9363
9363: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9364: LD_INT 32
9366: PPUSH
9367: LD_OWVAR 2
9371: PPUSH
9372: LD_INT 0
9374: PPUSH
9375: CALL_OW 324
9379: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9380: LD_EXP 21
9384: PUSH
9385: LD_EXP 32
9389: AND
9390: IFFALSE 9571
9392: GO 9394
9394: DISABLE
9395: LD_INT 0
9397: PPUSH
9398: PPUSH
9399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_INT 22
9407: PUSH
9408: LD_OWVAR 2
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 33
9419: PUSH
9420: LD_INT 3
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PPUSH
9431: CALL_OW 69
9435: ST_TO_ADDR
// if not tmp then
9436: LD_VAR 0 2
9440: NOT
9441: IFFALSE 9445
// exit ;
9443: GO 9571
// side := 0 ;
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// for i := 1 to 8 do
9453: LD_ADDR_VAR 0 1
9457: PUSH
9458: DOUBLE
9459: LD_INT 1
9461: DEC
9462: ST_TO_ADDR
9463: LD_INT 8
9465: PUSH
9466: FOR_TO
9467: IFFALSE 9515
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9469: LD_OWVAR 2
9473: PUSH
9474: LD_VAR 0 1
9478: NONEQUAL
9479: PUSH
9480: LD_OWVAR 2
9484: PPUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 81
9494: PUSH
9495: LD_INT 2
9497: EQUAL
9498: AND
9499: IFFALSE 9513
// begin side := i ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 1
9510: ST_TO_ADDR
// break ;
9511: GO 9515
// end ;
9513: GO 9466
9515: POP
9516: POP
// if not side then
9517: LD_VAR 0 3
9521: NOT
9522: IFFALSE 9526
// exit ;
9524: GO 9571
// for i := 1 to tmp do
9526: LD_ADDR_VAR 0 1
9530: PUSH
9531: DOUBLE
9532: LD_INT 1
9534: DEC
9535: ST_TO_ADDR
9536: LD_VAR 0 2
9540: PUSH
9541: FOR_TO
9542: IFFALSE 9569
// if Prob ( 30 ) then
9544: LD_INT 30
9546: PPUSH
9547: CALL_OW 13
9551: IFFALSE 9567
// SetSide ( i , side ) ;
9553: LD_VAR 0 1
9557: PPUSH
9558: LD_VAR 0 3
9562: PPUSH
9563: CALL_OW 235
9567: GO 9541
9569: POP
9570: POP
// end ;
9571: PPOPN 3
9573: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9574: LD_EXP 21
9578: PUSH
9579: LD_EXP 34
9583: AND
9584: IFFALSE 9703
9586: GO 9588
9588: DISABLE
9589: LD_INT 0
9591: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9592: LD_ADDR_VAR 0 1
9596: PUSH
9597: LD_INT 22
9599: PUSH
9600: LD_OWVAR 2
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 21
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 3
9621: PUSH
9622: LD_INT 23
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: PUSH
9646: FOR_IN
9647: IFFALSE 9701
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 257
9658: PUSH
9659: LD_INT 1
9661: PUSH
9662: LD_INT 2
9664: PUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 4
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: IN
9677: IFFALSE 9699
// SetClass ( un , rand ( 1 , 4 ) ) ;
9679: LD_VAR 0 1
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 4
9689: PPUSH
9690: CALL_OW 12
9694: PPUSH
9695: CALL_OW 336
9699: GO 9646
9701: POP
9702: POP
// end ;
9703: PPOPN 1
9705: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9706: LD_EXP 21
9710: PUSH
9711: LD_EXP 33
9715: AND
9716: IFFALSE 9795
9718: GO 9720
9720: DISABLE
9721: LD_INT 0
9723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9724: LD_ADDR_VAR 0 1
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_OWVAR 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 3
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: ST_TO_ADDR
// if not tmp then
9760: LD_VAR 0 1
9764: NOT
9765: IFFALSE 9769
// exit ;
9767: GO 9795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: PPUSH
9788: LD_INT 100
9790: PPUSH
9791: CALL_OW 234
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9798: LD_EXP 21
9802: PUSH
9803: LD_EXP 35
9807: AND
9808: IFFALSE 9906
9810: GO 9812
9812: DISABLE
9813: LD_INT 0
9815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_OWVAR 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: ST_TO_ADDR
// if not tmp then
9852: LD_VAR 0 1
9856: NOT
9857: IFFALSE 9861
// exit ;
9859: GO 9906
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9861: LD_VAR 0 1
9865: PUSH
9866: LD_INT 1
9868: PPUSH
9869: LD_VAR 0 1
9873: PPUSH
9874: CALL_OW 12
9878: ARRAY
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: LD_INT 4
9885: PPUSH
9886: CALL_OW 12
9890: PPUSH
9891: LD_INT 3000
9893: PPUSH
9894: LD_INT 9000
9896: PPUSH
9897: CALL_OW 12
9901: PPUSH
9902: CALL_OW 492
// end ;
9906: PPOPN 1
9908: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9909: LD_EXP 21
9913: PUSH
9914: LD_EXP 36
9918: AND
9919: IFFALSE 9939
9921: GO 9923
9923: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9924: LD_INT 1
9926: PPUSH
9927: LD_OWVAR 2
9931: PPUSH
9932: LD_INT 0
9934: PPUSH
9935: CALL_OW 324
9939: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9940: LD_EXP 21
9944: PUSH
9945: LD_EXP 37
9949: AND
9950: IFFALSE 10033
9952: GO 9954
9954: DISABLE
9955: LD_INT 0
9957: PPUSH
9958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: LD_INT 22
9966: PUSH
9967: LD_OWVAR 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 21
9978: PUSH
9979: LD_INT 3
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PPUSH
9990: CALL_OW 69
9994: ST_TO_ADDR
// if not tmp then
9995: LD_VAR 0 2
9999: NOT
10000: IFFALSE 10004
// exit ;
10002: GO 10033
// for i in tmp do
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: LD_VAR 0 2
10013: PUSH
10014: FOR_IN
10015: IFFALSE 10031
// SetBLevel ( i , 10 ) ;
10017: LD_VAR 0 1
10021: PPUSH
10022: LD_INT 10
10024: PPUSH
10025: CALL_OW 241
10029: GO 10014
10031: POP
10032: POP
// end ;
10033: PPOPN 2
10035: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10036: LD_EXP 21
10040: PUSH
10041: LD_EXP 38
10045: AND
10046: IFFALSE 10157
10048: GO 10050
10050: DISABLE
10051: LD_INT 0
10053: PPUSH
10054: PPUSH
10055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10056: LD_ADDR_VAR 0 3
10060: PUSH
10061: LD_INT 22
10063: PUSH
10064: LD_OWVAR 2
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PPUSH
10087: CALL_OW 69
10091: ST_TO_ADDR
// if not tmp then
10092: LD_VAR 0 3
10096: NOT
10097: IFFALSE 10101
// exit ;
10099: GO 10157
// un := tmp [ rand ( 1 , tmp ) ] ;
10101: LD_ADDR_VAR 0 2
10105: PUSH
10106: LD_VAR 0 3
10110: PUSH
10111: LD_INT 1
10113: PPUSH
10114: LD_VAR 0 3
10118: PPUSH
10119: CALL_OW 12
10123: ARRAY
10124: ST_TO_ADDR
// if Crawls ( un ) then
10125: LD_VAR 0 2
10129: PPUSH
10130: CALL_OW 318
10134: IFFALSE 10145
// ComWalk ( un ) ;
10136: LD_VAR 0 2
10140: PPUSH
10141: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: LD_INT 5
10152: PPUSH
10153: CALL_OW 336
// end ;
10157: PPOPN 3
10159: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10160: LD_EXP 21
10164: PUSH
10165: LD_EXP 39
10169: AND
10170: PUSH
10171: LD_OWVAR 67
10175: PUSH
10176: LD_INT 3
10178: LESS
10179: AND
10180: IFFALSE 10199
10182: GO 10184
10184: DISABLE
// Difficulty := Difficulty + 1 ;
10185: LD_ADDR_OWVAR 67
10189: PUSH
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 1
10197: PLUS
10198: ST_TO_ADDR
10199: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10200: LD_EXP 21
10204: PUSH
10205: LD_EXP 40
10209: AND
10210: IFFALSE 10313
10212: GO 10214
10214: DISABLE
10215: LD_INT 0
10217: PPUSH
// begin for i := 1 to 5 do
10218: LD_ADDR_VAR 0 1
10222: PUSH
10223: DOUBLE
10224: LD_INT 1
10226: DEC
10227: ST_TO_ADDR
10228: LD_INT 5
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10311
// begin uc_nation := nation_nature ;
10234: LD_ADDR_OWVAR 21
10238: PUSH
10239: LD_INT 0
10241: ST_TO_ADDR
// uc_side := 0 ;
10242: LD_ADDR_OWVAR 20
10246: PUSH
10247: LD_INT 0
10249: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10250: LD_ADDR_OWVAR 29
10254: PUSH
10255: LD_INT 12
10257: PUSH
10258: LD_INT 12
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: ST_TO_ADDR
// hc_agressivity := 20 ;
10265: LD_ADDR_OWVAR 35
10269: PUSH
10270: LD_INT 20
10272: ST_TO_ADDR
// hc_class := class_tiger ;
10273: LD_ADDR_OWVAR 28
10277: PUSH
10278: LD_INT 14
10280: ST_TO_ADDR
// hc_gallery :=  ;
10281: LD_ADDR_OWVAR 33
10285: PUSH
10286: LD_STRING 
10288: ST_TO_ADDR
// hc_name :=  ;
10289: LD_ADDR_OWVAR 26
10293: PUSH
10294: LD_STRING 
10296: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10297: CALL_OW 44
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 51
// end ;
10309: GO 10231
10311: POP
10312: POP
// end ;
10313: PPOPN 1
10315: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10316: LD_EXP 21
10320: PUSH
10321: LD_EXP 41
10325: AND
10326: IFFALSE 10335
10328: GO 10330
10330: DISABLE
// StreamSibBomb ;
10331: CALL 10336 0 0
10335: END
// export function StreamSibBomb ; var i , x , y ; begin
10336: LD_INT 0
10338: PPUSH
10339: PPUSH
10340: PPUSH
10341: PPUSH
// result := false ;
10342: LD_ADDR_VAR 0 1
10346: PUSH
10347: LD_INT 0
10349: ST_TO_ADDR
// for i := 1 to 16 do
10350: LD_ADDR_VAR 0 2
10354: PUSH
10355: DOUBLE
10356: LD_INT 1
10358: DEC
10359: ST_TO_ADDR
10360: LD_INT 16
10362: PUSH
10363: FOR_TO
10364: IFFALSE 10563
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10366: LD_ADDR_VAR 0 3
10370: PUSH
10371: LD_INT 10
10373: PUSH
10374: LD_INT 20
10376: PUSH
10377: LD_INT 30
10379: PUSH
10380: LD_INT 40
10382: PUSH
10383: LD_INT 50
10385: PUSH
10386: LD_INT 60
10388: PUSH
10389: LD_INT 70
10391: PUSH
10392: LD_INT 80
10394: PUSH
10395: LD_INT 90
10397: PUSH
10398: LD_INT 100
10400: PUSH
10401: LD_INT 110
10403: PUSH
10404: LD_INT 120
10406: PUSH
10407: LD_INT 130
10409: PUSH
10410: LD_INT 140
10412: PUSH
10413: LD_INT 150
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 1
10435: PPUSH
10436: LD_INT 15
10438: PPUSH
10439: CALL_OW 12
10443: ARRAY
10444: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10445: LD_ADDR_VAR 0 4
10449: PUSH
10450: LD_INT 10
10452: PUSH
10453: LD_INT 20
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 40
10461: PUSH
10462: LD_INT 50
10464: PUSH
10465: LD_INT 60
10467: PUSH
10468: LD_INT 70
10470: PUSH
10471: LD_INT 80
10473: PUSH
10474: LD_INT 90
10476: PUSH
10477: LD_INT 100
10479: PUSH
10480: LD_INT 110
10482: PUSH
10483: LD_INT 120
10485: PUSH
10486: LD_INT 130
10488: PUSH
10489: LD_INT 140
10491: PUSH
10492: LD_INT 150
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 1
10514: PPUSH
10515: LD_INT 15
10517: PPUSH
10518: CALL_OW 12
10522: ARRAY
10523: ST_TO_ADDR
// if ValidHex ( x , y ) then
10524: LD_VAR 0 3
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL_OW 488
10538: IFFALSE 10561
// begin result := [ x , y ] ;
10540: LD_ADDR_VAR 0 1
10544: PUSH
10545: LD_VAR 0 3
10549: PUSH
10550: LD_VAR 0 4
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: ST_TO_ADDR
// break ;
10559: GO 10563
// end ; end ;
10561: GO 10363
10563: POP
10564: POP
// if result then
10565: LD_VAR 0 1
10569: IFFALSE 10629
// begin ToLua ( playSibBomb() ) ;
10571: LD_STRING playSibBomb()
10573: PPUSH
10574: CALL_OW 559
// wait ( 0 0$14 ) ;
10578: LD_INT 490
10580: PPUSH
10581: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10585: LD_VAR 0 1
10589: PUSH
10590: LD_INT 1
10592: ARRAY
10593: PPUSH
10594: LD_VAR 0 1
10598: PUSH
10599: LD_INT 2
10601: ARRAY
10602: PPUSH
10603: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10607: LD_VAR 0 1
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: LD_VAR 0 1
10620: PUSH
10621: LD_INT 2
10623: ARRAY
10624: PPUSH
10625: CALL_OW 429
// end ; end ;
10629: LD_VAR 0 1
10633: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10634: LD_EXP 21
10638: PUSH
10639: LD_EXP 43
10643: AND
10644: IFFALSE 10656
10646: GO 10648
10648: DISABLE
// YouLost (  ) ;
10649: LD_STRING 
10651: PPUSH
10652: CALL_OW 104
10656: END
// every 0 0$1 trigger StreamModeActive and sFog do
10657: LD_EXP 21
10661: PUSH
10662: LD_EXP 42
10666: AND
10667: IFFALSE 10681
10669: GO 10671
10671: DISABLE
// FogOff ( your_side ) ;
10672: LD_OWVAR 2
10676: PPUSH
10677: CALL_OW 344
10681: END
// every 0 0$1 trigger StreamModeActive and sSun do
10682: LD_EXP 21
10686: PUSH
10687: LD_EXP 44
10691: AND
10692: IFFALSE 10720
10694: GO 10696
10696: DISABLE
// begin solar_recharge_percent := 0 ;
10697: LD_ADDR_OWVAR 79
10701: PUSH
10702: LD_INT 0
10704: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10705: LD_INT 10500
10707: PPUSH
10708: CALL_OW 67
// solar_recharge_percent := 100 ;
10712: LD_ADDR_OWVAR 79
10716: PUSH
10717: LD_INT 100
10719: ST_TO_ADDR
// end ;
10720: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10721: LD_EXP 21
10725: PUSH
10726: LD_EXP 45
10730: AND
10731: IFFALSE 10970
10733: GO 10735
10735: DISABLE
10736: LD_INT 0
10738: PPUSH
10739: PPUSH
10740: PPUSH
// begin tmp := [ ] ;
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: EMPTY
10747: ST_TO_ADDR
// for i := 1 to 6 do
10748: LD_ADDR_VAR 0 1
10752: PUSH
10753: DOUBLE
10754: LD_INT 1
10756: DEC
10757: ST_TO_ADDR
10758: LD_INT 6
10760: PUSH
10761: FOR_TO
10762: IFFALSE 10867
// begin uc_nation := nation_nature ;
10764: LD_ADDR_OWVAR 21
10768: PUSH
10769: LD_INT 0
10771: ST_TO_ADDR
// uc_side := 0 ;
10772: LD_ADDR_OWVAR 20
10776: PUSH
10777: LD_INT 0
10779: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10780: LD_ADDR_OWVAR 29
10784: PUSH
10785: LD_INT 12
10787: PUSH
10788: LD_INT 12
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: ST_TO_ADDR
// hc_agressivity := 20 ;
10795: LD_ADDR_OWVAR 35
10799: PUSH
10800: LD_INT 20
10802: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10803: LD_ADDR_OWVAR 28
10807: PUSH
10808: LD_INT 17
10810: ST_TO_ADDR
// hc_gallery :=  ;
10811: LD_ADDR_OWVAR 33
10815: PUSH
10816: LD_STRING 
10818: ST_TO_ADDR
// hc_name :=  ;
10819: LD_ADDR_OWVAR 26
10823: PUSH
10824: LD_STRING 
10826: ST_TO_ADDR
// un := CreateHuman ;
10827: LD_ADDR_VAR 0 2
10831: PUSH
10832: CALL_OW 44
10836: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10837: LD_VAR 0 2
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 51
// tmp := tmp ^ un ;
10849: LD_ADDR_VAR 0 3
10853: PUSH
10854: LD_VAR 0 3
10858: PUSH
10859: LD_VAR 0 2
10863: ADD
10864: ST_TO_ADDR
// end ;
10865: GO 10761
10867: POP
10868: POP
// repeat wait ( 0 0$1 ) ;
10869: LD_INT 35
10871: PPUSH
10872: CALL_OW 67
// for un in tmp do
10876: LD_ADDR_VAR 0 2
10880: PUSH
10881: LD_VAR 0 3
10885: PUSH
10886: FOR_IN
10887: IFFALSE 10961
// begin if IsDead ( un ) then
10889: LD_VAR 0 2
10893: PPUSH
10894: CALL_OW 301
10898: IFFALSE 10918
// begin tmp := tmp diff un ;
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 3
10909: PUSH
10910: LD_VAR 0 2
10914: DIFF
10915: ST_TO_ADDR
// continue ;
10916: GO 10886
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 0
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 69
10944: PPUSH
10945: LD_VAR 0 2
10949: PPUSH
10950: CALL_OW 74
10954: PPUSH
10955: CALL_OW 115
// end ;
10959: GO 10886
10961: POP
10962: POP
// until not tmp ;
10963: LD_VAR 0 3
10967: NOT
10968: IFFALSE 10869
// end ;
10970: PPOPN 3
10972: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10973: LD_EXP 21
10977: PUSH
10978: LD_EXP 46
10982: AND
10983: IFFALSE 11037
10985: GO 10987
10987: DISABLE
// begin ToLua ( displayTroll(); ) ;
10988: LD_STRING displayTroll();
10990: PPUSH
10991: CALL_OW 559
// wait ( 3 3$00 ) ;
10995: LD_INT 6300
10997: PPUSH
10998: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11002: LD_STRING hideTroll();
11004: PPUSH
11005: CALL_OW 559
// wait ( 1 1$00 ) ;
11009: LD_INT 2100
11011: PPUSH
11012: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11016: LD_STRING displayTroll();
11018: PPUSH
11019: CALL_OW 559
// wait ( 1 1$00 ) ;
11023: LD_INT 2100
11025: PPUSH
11026: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11030: LD_STRING hideTroll();
11032: PPUSH
11033: CALL_OW 559
// end ;
11037: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11038: LD_EXP 21
11042: PUSH
11043: LD_EXP 47
11047: AND
11048: IFFALSE 11111
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
// begin p := 0 ;
11056: LD_ADDR_VAR 0 1
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// repeat game_speed := 1 ;
11064: LD_ADDR_OWVAR 65
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11072: LD_INT 35
11074: PPUSH
11075: CALL_OW 67
// p := p + 1 ;
11079: LD_ADDR_VAR 0 1
11083: PUSH
11084: LD_VAR 0 1
11088: PUSH
11089: LD_INT 1
11091: PLUS
11092: ST_TO_ADDR
// until p >= 60 ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_INT 60
11100: GREATEREQUAL
11101: IFFALSE 11064
// game_speed := 4 ;
11103: LD_ADDR_OWVAR 65
11107: PUSH
11108: LD_INT 4
11110: ST_TO_ADDR
// end ;
11111: PPOPN 1
11113: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11114: LD_EXP 21
11118: PUSH
11119: LD_EXP 48
11123: AND
11124: IFFALSE 11270
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11133: LD_ADDR_VAR 0 1
11137: PUSH
11138: LD_INT 22
11140: PUSH
11141: LD_OWVAR 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 30
11155: PUSH
11156: LD_INT 0
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 30
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 69
11186: ST_TO_ADDR
// if not depot then
11187: LD_VAR 0 1
11191: NOT
11192: IFFALSE 11196
// exit ;
11194: GO 11270
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11196: LD_ADDR_VAR 0 2
11200: PUSH
11201: LD_VAR 0 1
11205: PUSH
11206: LD_INT 1
11208: PPUSH
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 12
11218: ARRAY
11219: PPUSH
11220: CALL_OW 274
11224: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11225: LD_VAR 0 2
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: LD_INT 0
11235: PPUSH
11236: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11240: LD_VAR 0 2
11244: PPUSH
11245: LD_INT 2
11247: PPUSH
11248: LD_INT 0
11250: PPUSH
11251: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11255: LD_VAR 0 2
11259: PPUSH
11260: LD_INT 3
11262: PPUSH
11263: LD_INT 0
11265: PPUSH
11266: CALL_OW 277
// end ;
11270: PPOPN 2
11272: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11273: LD_EXP 21
11277: PUSH
11278: LD_EXP 49
11282: AND
11283: IFFALSE 11380
11285: GO 11287
11287: DISABLE
11288: LD_INT 0
11290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_OWVAR 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 3
11320: PUSH
11321: LD_INT 23
11323: PUSH
11324: LD_INT 0
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 69
11344: ST_TO_ADDR
// if not tmp then
11345: LD_VAR 0 1
11349: NOT
11350: IFFALSE 11354
// exit ;
11352: GO 11380
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11354: LD_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 12
11371: ARRAY
11372: PPUSH
11373: LD_INT 200
11375: PPUSH
11376: CALL_OW 234
// end ;
11380: PPOPN 1
11382: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11383: LD_EXP 21
11387: PUSH
11388: LD_EXP 50
11392: AND
11393: IFFALSE 11472
11395: GO 11397
11397: DISABLE
11398: LD_INT 0
11400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11401: LD_ADDR_VAR 0 1
11405: PUSH
11406: LD_INT 22
11408: PUSH
11409: LD_OWVAR 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 21
11420: PUSH
11421: LD_INT 2
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PPUSH
11432: CALL_OW 69
11436: ST_TO_ADDR
// if not tmp then
11437: LD_VAR 0 1
11441: NOT
11442: IFFALSE 11446
// exit ;
11444: GO 11472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11446: LD_VAR 0 1
11450: PUSH
11451: LD_INT 1
11453: PPUSH
11454: LD_VAR 0 1
11458: PPUSH
11459: CALL_OW 12
11463: ARRAY
11464: PPUSH
11465: LD_INT 60
11467: PPUSH
11468: CALL_OW 234
// end ;
11472: PPOPN 1
11474: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11475: LD_EXP 21
11479: PUSH
11480: LD_EXP 51
11484: AND
11485: IFFALSE 11584
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
11493: PPUSH
// begin enable ;
11494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_OWVAR 2
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 61
11514: PUSH
11515: EMPTY
11516: LIST
11517: PUSH
11518: LD_INT 33
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: ST_TO_ADDR
// if not tmp then
11538: LD_VAR 0 1
11542: NOT
11543: IFFALSE 11547
// exit ;
11545: GO 11584
// for i in tmp do
11547: LD_ADDR_VAR 0 2
11551: PUSH
11552: LD_VAR 0 1
11556: PUSH
11557: FOR_IN
11558: IFFALSE 11582
// if IsControledBy ( i ) then
11560: LD_VAR 0 2
11564: PPUSH
11565: CALL_OW 312
11569: IFFALSE 11580
// ComUnlink ( i ) ;
11571: LD_VAR 0 2
11575: PPUSH
11576: CALL_OW 136
11580: GO 11557
11582: POP
11583: POP
// end ;
11584: PPOPN 2
11586: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11587: LD_EXP 21
11591: PUSH
11592: LD_EXP 52
11596: AND
11597: IFFALSE 11731
11599: GO 11601
11601: DISABLE
11602: LD_INT 0
11604: PPUSH
11605: PPUSH
// begin ToLua ( displayPowell(); ) ;
11606: LD_STRING displayPowell();
11608: PPUSH
11609: CALL_OW 559
// uc_side := 0 ;
11613: LD_ADDR_OWVAR 20
11617: PUSH
11618: LD_INT 0
11620: ST_TO_ADDR
// uc_nation := 2 ;
11621: LD_ADDR_OWVAR 21
11625: PUSH
11626: LD_INT 2
11628: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11629: LD_ADDR_OWVAR 37
11633: PUSH
11634: LD_INT 14
11636: ST_TO_ADDR
// vc_engine := engine_siberite ;
11637: LD_ADDR_OWVAR 39
11641: PUSH
11642: LD_INT 3
11644: ST_TO_ADDR
// vc_control := control_apeman ;
11645: LD_ADDR_OWVAR 38
11649: PUSH
11650: LD_INT 5
11652: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11653: LD_ADDR_OWVAR 40
11657: PUSH
11658: LD_INT 29
11660: ST_TO_ADDR
// un := CreateVehicle ;
11661: LD_ADDR_VAR 0 2
11665: PUSH
11666: CALL_OW 45
11670: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11683: LD_INT 35
11685: PPUSH
11686: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11690: LD_VAR 0 2
11694: PPUSH
11695: LD_OWVAR 3
11699: PUSH
11700: LD_VAR 0 2
11704: DIFF
11705: PPUSH
11706: LD_VAR 0 2
11710: PPUSH
11711: CALL_OW 74
11715: PPUSH
11716: CALL_OW 115
// until IsOk ( un ) ;
11720: LD_VAR 0 2
11724: PPUSH
11725: CALL_OW 302
11729: IFFALSE 11683
// end ;
11731: PPOPN 2
11733: END
// every 0 0$1 trigger StreamModeActive and sStu do
11734: LD_EXP 21
11738: PUSH
11739: LD_EXP 60
11743: AND
11744: IFFALSE 11756
11746: GO 11748
11748: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11749: LD_STRING displayStucuk();
11751: PPUSH
11752: CALL_OW 559
// end ;
11756: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11757: LD_EXP 21
11761: PUSH
11762: LD_EXP 53
11766: AND
11767: IFFALSE 11908
11769: GO 11771
11771: DISABLE
11772: LD_INT 0
11774: PPUSH
11775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11776: LD_ADDR_VAR 0 2
11780: PUSH
11781: LD_INT 22
11783: PUSH
11784: LD_OWVAR 2
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 21
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PPUSH
11807: CALL_OW 69
11811: ST_TO_ADDR
// if not tmp then
11812: LD_VAR 0 2
11816: NOT
11817: IFFALSE 11821
// exit ;
11819: GO 11908
// un := tmp [ rand ( 1 , tmp ) ] ;
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_VAR 0 2
11830: PUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_VAR 0 2
11838: PPUSH
11839: CALL_OW 12
11843: ARRAY
11844: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_INT 0
11852: PPUSH
11853: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_OWVAR 3
11866: PUSH
11867: LD_VAR 0 1
11871: DIFF
11872: PPUSH
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 74
11882: PPUSH
11883: CALL_OW 115
// wait ( 0 0$20 ) ;
11887: LD_INT 700
11889: PPUSH
11890: CALL_OW 67
// SetSide ( un , your_side ) ;
11894: LD_VAR 0 1
11898: PPUSH
11899: LD_OWVAR 2
11903: PPUSH
11904: CALL_OW 235
// end ;
11908: PPOPN 2
11910: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11911: LD_EXP 21
11915: PUSH
11916: LD_EXP 54
11920: AND
11921: IFFALSE 12027
11923: GO 11925
11925: DISABLE
11926: LD_INT 0
11928: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11929: LD_ADDR_VAR 0 1
11933: PUSH
11934: LD_INT 22
11936: PUSH
11937: LD_OWVAR 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 2
11948: PUSH
11949: LD_INT 30
11951: PUSH
11952: LD_INT 0
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 30
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 69
11982: ST_TO_ADDR
// if not depot then
11983: LD_VAR 0 1
11987: NOT
11988: IFFALSE 11992
// exit ;
11990: GO 12027
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 1
11999: ARRAY
12000: PPUSH
12001: CALL_OW 250
12005: PPUSH
12006: LD_VAR 0 1
12010: PUSH
12011: LD_INT 1
12013: ARRAY
12014: PPUSH
12015: CALL_OW 251
12019: PPUSH
12020: LD_INT 70
12022: PPUSH
12023: CALL_OW 495
// end ;
12027: PPOPN 1
12029: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12030: LD_EXP 21
12034: PUSH
12035: LD_EXP 55
12039: AND
12040: IFFALSE 12251
12042: GO 12044
12044: DISABLE
12045: LD_INT 0
12047: PPUSH
12048: PPUSH
12049: PPUSH
12050: PPUSH
12051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12052: LD_ADDR_VAR 0 5
12056: PUSH
12057: LD_INT 22
12059: PUSH
12060: LD_OWVAR 2
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 21
12071: PUSH
12072: LD_INT 1
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PPUSH
12083: CALL_OW 69
12087: ST_TO_ADDR
// if not tmp then
12088: LD_VAR 0 5
12092: NOT
12093: IFFALSE 12097
// exit ;
12095: GO 12251
// for i in tmp do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 5
12106: PUSH
12107: FOR_IN
12108: IFFALSE 12249
// begin d := rand ( 0 , 5 ) ;
12110: LD_ADDR_VAR 0 4
12114: PUSH
12115: LD_INT 0
12117: PPUSH
12118: LD_INT 5
12120: PPUSH
12121: CALL_OW 12
12125: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12126: LD_ADDR_VAR 0 2
12130: PUSH
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 4
12145: PPUSH
12146: LD_INT 3
12148: PPUSH
12149: LD_INT 12
12151: PPUSH
12152: CALL_OW 12
12156: PPUSH
12157: CALL_OW 272
12161: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12162: LD_ADDR_VAR 0 3
12166: PUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 251
12176: PPUSH
12177: LD_VAR 0 4
12181: PPUSH
12182: LD_INT 3
12184: PPUSH
12185: LD_INT 12
12187: PPUSH
12188: CALL_OW 12
12192: PPUSH
12193: CALL_OW 273
12197: ST_TO_ADDR
// if ValidHex ( x , y ) then
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_VAR 0 3
12207: PPUSH
12208: CALL_OW 488
12212: IFFALSE 12247
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: LD_VAR 0 2
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 3
12231: PPUSH
12232: LD_INT 6
12234: PPUSH
12235: CALL_OW 12
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 483
// end ;
12247: GO 12107
12249: POP
12250: POP
// end ;
12251: PPOPN 5
12253: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12254: LD_EXP 21
12258: PUSH
12259: LD_EXP 56
12263: AND
12264: IFFALSE 12358
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
12272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_INT 22
12280: PUSH
12281: LD_OWVAR 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 32
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: ST_TO_ADDR
// if not tmp then
12320: LD_VAR 0 2
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 12358
// for i in tmp do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_VAR 0 2
12338: PUSH
12339: FOR_IN
12340: IFFALSE 12356
// SetFuel ( i , 0 ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_INT 0
12349: PPUSH
12350: CALL_OW 240
12354: GO 12339
12356: POP
12357: POP
// end ;
12358: PPOPN 2
12360: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12361: LD_EXP 21
12365: PUSH
12366: LD_EXP 57
12370: AND
12371: IFFALSE 12437
12373: GO 12375
12375: DISABLE
12376: LD_INT 0
12378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12379: LD_ADDR_VAR 0 1
12383: PUSH
12384: LD_INT 22
12386: PUSH
12387: LD_OWVAR 2
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 30
12398: PUSH
12399: LD_INT 29
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 69
12414: ST_TO_ADDR
// if not tmp then
12415: LD_VAR 0 1
12419: NOT
12420: IFFALSE 12424
// exit ;
12422: GO 12437
// DestroyUnit ( tmp [ 1 ] ) ;
12424: LD_VAR 0 1
12428: PUSH
12429: LD_INT 1
12431: ARRAY
12432: PPUSH
12433: CALL_OW 65
// end ;
12437: PPOPN 1
12439: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12440: LD_EXP 21
12444: PUSH
12445: LD_EXP 59
12449: AND
12450: IFFALSE 12579
12452: GO 12454
12454: DISABLE
12455: LD_INT 0
12457: PPUSH
// begin uc_side := 0 ;
12458: LD_ADDR_OWVAR 20
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// uc_nation := nation_arabian ;
12466: LD_ADDR_OWVAR 21
12470: PUSH
12471: LD_INT 2
12473: ST_TO_ADDR
// hc_gallery :=  ;
12474: LD_ADDR_OWVAR 33
12478: PUSH
12479: LD_STRING 
12481: ST_TO_ADDR
// hc_name :=  ;
12482: LD_ADDR_OWVAR 26
12486: PUSH
12487: LD_STRING 
12489: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12490: LD_INT 1
12492: PPUSH
12493: LD_INT 11
12495: PPUSH
12496: LD_INT 10
12498: PPUSH
12499: CALL_OW 380
// un := CreateHuman ;
12503: LD_ADDR_VAR 0 1
12507: PUSH
12508: CALL_OW 44
12512: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12513: LD_VAR 0 1
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12525: LD_INT 35
12527: PPUSH
12528: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 22
12539: PUSH
12540: LD_OWVAR 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: PPUSH
12554: LD_VAR 0 1
12558: PPUSH
12559: CALL_OW 74
12563: PPUSH
12564: CALL_OW 115
// until IsDead ( un ) ;
12568: LD_VAR 0 1
12572: PPUSH
12573: CALL_OW 301
12577: IFFALSE 12525
// end ;
12579: PPOPN 1
12581: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12582: LD_EXP 21
12586: PUSH
12587: LD_EXP 61
12591: AND
12592: IFFALSE 12604
12594: GO 12596
12596: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12597: LD_STRING earthquake(getX(game), 0, 32)
12599: PPUSH
12600: CALL_OW 559
12604: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12605: LD_EXP 21
12609: PUSH
12610: LD_EXP 62
12614: AND
12615: IFFALSE 12706
12617: GO 12619
12619: DISABLE
12620: LD_INT 0
12622: PPUSH
// begin enable ;
12623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12624: LD_ADDR_VAR 0 1
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_OWVAR 2
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 21
12643: PUSH
12644: LD_INT 2
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 33
12653: PUSH
12654: LD_INT 3
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: ST_TO_ADDR
// if not tmp then
12671: LD_VAR 0 1
12675: NOT
12676: IFFALSE 12680
// exit ;
12678: GO 12706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12680: LD_VAR 0 1
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_VAR 0 1
12692: PPUSH
12693: CALL_OW 12
12697: ARRAY
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 234
// end ;
12706: PPOPN 1
12708: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12709: LD_EXP 21
12713: PUSH
12714: LD_EXP 63
12718: AND
12719: IFFALSE 12860
12721: GO 12723
12723: DISABLE
12724: LD_INT 0
12726: PPUSH
12727: PPUSH
12728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12729: LD_ADDR_VAR 0 3
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_OWVAR 2
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PPUSH
12760: CALL_OW 69
12764: ST_TO_ADDR
// if not tmp then
12765: LD_VAR 0 3
12769: NOT
12770: IFFALSE 12774
// exit ;
12772: GO 12860
// un := tmp [ rand ( 1 , tmp ) ] ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_VAR 0 3
12783: PUSH
12784: LD_INT 1
12786: PPUSH
12787: LD_VAR 0 3
12791: PPUSH
12792: CALL_OW 12
12796: ARRAY
12797: ST_TO_ADDR
// if Crawls ( un ) then
12798: LD_VAR 0 2
12802: PPUSH
12803: CALL_OW 318
12807: IFFALSE 12818
// ComWalk ( un ) ;
12809: LD_VAR 0 2
12813: PPUSH
12814: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12818: LD_VAR 0 2
12822: PPUSH
12823: LD_INT 9
12825: PPUSH
12826: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12830: LD_INT 28
12832: PPUSH
12833: LD_OWVAR 2
12837: PPUSH
12838: LD_INT 2
12840: PPUSH
12841: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12845: LD_INT 29
12847: PPUSH
12848: LD_OWVAR 2
12852: PPUSH
12853: LD_INT 2
12855: PPUSH
12856: CALL_OW 322
// end ;
12860: PPOPN 3
12862: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12863: LD_EXP 21
12867: PUSH
12868: LD_EXP 64
12872: AND
12873: IFFALSE 12984
12875: GO 12877
12877: DISABLE
12878: LD_INT 0
12880: PPUSH
12881: PPUSH
12882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_OWVAR 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: ST_TO_ADDR
// if not tmp then
12919: LD_VAR 0 3
12923: NOT
12924: IFFALSE 12928
// exit ;
12926: GO 12984
// un := tmp [ rand ( 1 , tmp ) ] ;
12928: LD_ADDR_VAR 0 2
12932: PUSH
12933: LD_VAR 0 3
12937: PUSH
12938: LD_INT 1
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: CALL_OW 12
12950: ARRAY
12951: ST_TO_ADDR
// if Crawls ( un ) then
12952: LD_VAR 0 2
12956: PPUSH
12957: CALL_OW 318
12961: IFFALSE 12972
// ComWalk ( un ) ;
12963: LD_VAR 0 2
12967: PPUSH
12968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 8
12979: PPUSH
12980: CALL_OW 336
// end ;
12984: PPOPN 3
12986: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12987: LD_EXP 21
12991: PUSH
12992: LD_EXP 65
12996: AND
12997: IFFALSE 13141
12999: GO 13001
13001: DISABLE
13002: LD_INT 0
13004: PPUSH
13005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_INT 22
13013: PUSH
13014: LD_OWVAR 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 2
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 34
13038: PUSH
13039: LD_INT 12
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 34
13048: PUSH
13049: LD_INT 51
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 34
13058: PUSH
13059: LD_INT 32
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: PPUSH
13077: CALL_OW 69
13081: ST_TO_ADDR
// if not tmp then
13082: LD_VAR 0 2
13086: NOT
13087: IFFALSE 13091
// exit ;
13089: GO 13141
// for i in tmp do
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: LD_VAR 0 2
13100: PUSH
13101: FOR_IN
13102: IFFALSE 13139
// if GetCargo ( i , mat_artifact ) = 0 then
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_INT 4
13111: PPUSH
13112: CALL_OW 289
13116: PUSH
13117: LD_INT 0
13119: EQUAL
13120: IFFALSE 13137
// SetCargo ( i , mat_siberit , 100 ) ;
13122: LD_VAR 0 1
13126: PPUSH
13127: LD_INT 3
13129: PPUSH
13130: LD_INT 100
13132: PPUSH
13133: CALL_OW 290
13137: GO 13101
13139: POP
13140: POP
// end ;
13141: PPOPN 2
13143: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13144: LD_EXP 21
13148: PUSH
13149: LD_EXP 66
13153: AND
13154: IFFALSE 13307
13156: GO 13158
13158: DISABLE
13159: LD_INT 0
13161: PPUSH
13162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13163: LD_ADDR_VAR 0 2
13167: PUSH
13168: LD_INT 22
13170: PUSH
13171: LD_OWVAR 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: ST_TO_ADDR
// if not tmp then
13185: LD_VAR 0 2
13189: NOT
13190: IFFALSE 13194
// exit ;
13192: GO 13307
// for i := 1 to 2 do
13194: LD_ADDR_VAR 0 1
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_INT 2
13206: PUSH
13207: FOR_TO
13208: IFFALSE 13305
// begin uc_side := your_side ;
13210: LD_ADDR_OWVAR 20
13214: PUSH
13215: LD_OWVAR 2
13219: ST_TO_ADDR
// uc_nation := nation_american ;
13220: LD_ADDR_OWVAR 21
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// vc_chassis := us_morphling ;
13228: LD_ADDR_OWVAR 37
13232: PUSH
13233: LD_INT 5
13235: ST_TO_ADDR
// vc_engine := engine_siberite ;
13236: LD_ADDR_OWVAR 39
13240: PUSH
13241: LD_INT 3
13243: ST_TO_ADDR
// vc_control := control_computer ;
13244: LD_ADDR_OWVAR 38
13248: PUSH
13249: LD_INT 3
13251: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13252: LD_ADDR_OWVAR 40
13256: PUSH
13257: LD_INT 10
13259: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13260: CALL_OW 45
13264: PPUSH
13265: LD_VAR 0 2
13269: PUSH
13270: LD_INT 1
13272: ARRAY
13273: PPUSH
13274: CALL_OW 250
13278: PPUSH
13279: LD_VAR 0 2
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: CALL_OW 251
13292: PPUSH
13293: LD_INT 12
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 50
// end ;
13303: GO 13207
13305: POP
13306: POP
// end ;
13307: PPOPN 2
13309: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13310: LD_EXP 21
13314: PUSH
13315: LD_EXP 67
13319: AND
13320: IFFALSE 13542
13322: GO 13324
13324: DISABLE
13325: LD_INT 0
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13333: LD_ADDR_VAR 0 6
13337: PUSH
13338: LD_INT 22
13340: PUSH
13341: LD_OWVAR 2
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 21
13352: PUSH
13353: LD_INT 1
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 23
13365: PUSH
13366: LD_INT 0
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: PPUSH
13382: CALL_OW 69
13386: ST_TO_ADDR
// if not tmp then
13387: LD_VAR 0 6
13391: NOT
13392: IFFALSE 13396
// exit ;
13394: GO 13542
// s1 := rand ( 1 , 4 ) ;
13396: LD_ADDR_VAR 0 2
13400: PUSH
13401: LD_INT 1
13403: PPUSH
13404: LD_INT 4
13406: PPUSH
13407: CALL_OW 12
13411: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13412: LD_ADDR_VAR 0 4
13416: PUSH
13417: LD_VAR 0 6
13421: PUSH
13422: LD_INT 1
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 2
13430: PPUSH
13431: CALL_OW 259
13435: ST_TO_ADDR
// if s1 = 1 then
13436: LD_VAR 0 2
13440: PUSH
13441: LD_INT 1
13443: EQUAL
13444: IFFALSE 13464
// s2 := rand ( 2 , 4 ) else
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_INT 2
13453: PPUSH
13454: LD_INT 4
13456: PPUSH
13457: CALL_OW 12
13461: ST_TO_ADDR
13462: GO 13472
// s2 := 1 ;
13464: LD_ADDR_VAR 0 3
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13472: LD_ADDR_VAR 0 5
13476: PUSH
13477: LD_VAR 0 6
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: LD_VAR 0 3
13490: PPUSH
13491: CALL_OW 259
13495: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13496: LD_VAR 0 6
13500: PUSH
13501: LD_INT 1
13503: ARRAY
13504: PPUSH
13505: LD_VAR 0 2
13509: PPUSH
13510: LD_VAR 0 5
13514: PPUSH
13515: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13519: LD_VAR 0 6
13523: PUSH
13524: LD_INT 1
13526: ARRAY
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_VAR 0 4
13537: PPUSH
13538: CALL_OW 237
// end ;
13542: PPOPN 6
13544: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13545: LD_EXP 21
13549: PUSH
13550: LD_EXP 68
13554: AND
13555: IFFALSE 13634
13557: GO 13559
13559: DISABLE
13560: LD_INT 0
13562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13563: LD_ADDR_VAR 0 1
13567: PUSH
13568: LD_INT 22
13570: PUSH
13571: LD_OWVAR 2
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 30
13582: PUSH
13583: LD_INT 3
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 69
13598: ST_TO_ADDR
// if not tmp then
13599: LD_VAR 0 1
13603: NOT
13604: IFFALSE 13608
// exit ;
13606: GO 13634
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 12
13625: ARRAY
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 234
// end ;
13634: PPOPN 1
13636: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13637: LD_EXP 21
13641: PUSH
13642: LD_EXP 69
13646: AND
13647: IFFALSE 13759
13649: GO 13651
13651: DISABLE
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_INT 22
13663: PUSH
13664: LD_OWVAR 2
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: LD_INT 30
13678: PUSH
13679: LD_INT 27
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 30
13688: PUSH
13689: LD_INT 26
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 28
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 2
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13759
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13757
// SetLives ( i , 1 ) ;
13743: LD_VAR 0 1
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: CALL_OW 234
13755: GO 13740
13757: POP
13758: POP
// end ;
13759: PPOPN 2
13761: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13762: LD_EXP 21
13766: PUSH
13767: LD_EXP 70
13771: AND
13772: IFFALSE 14042
13774: GO 13776
13776: DISABLE
13777: LD_INT 0
13779: PPUSH
13780: PPUSH
13781: PPUSH
// begin i := rand ( 1 , 7 ) ;
13782: LD_ADDR_VAR 0 1
13786: PUSH
13787: LD_INT 1
13789: PPUSH
13790: LD_INT 7
13792: PPUSH
13793: CALL_OW 12
13797: ST_TO_ADDR
// case i of 1 :
13798: LD_VAR 0 1
13802: PUSH
13803: LD_INT 1
13805: DOUBLE
13806: EQUAL
13807: IFTRUE 13811
13809: GO 13821
13811: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13812: LD_STRING earthquake(getX(game), 0, 32)
13814: PPUSH
13815: CALL_OW 559
13819: GO 14042
13821: LD_INT 2
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13839
13829: POP
// ToLua ( displayStucuk(); ) ; 3 :
13830: LD_STRING displayStucuk();
13832: PPUSH
13833: CALL_OW 559
13837: GO 14042
13839: LD_INT 3
13841: DOUBLE
13842: EQUAL
13843: IFTRUE 13847
13845: GO 13951
13847: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13848: LD_ADDR_VAR 0 2
13852: PUSH
13853: LD_INT 22
13855: PUSH
13856: LD_OWVAR 2
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 69
13883: ST_TO_ADDR
// if not tmp then
13884: LD_VAR 0 2
13888: NOT
13889: IFFALSE 13893
// exit ;
13891: GO 14042
// un := tmp [ rand ( 1 , tmp ) ] ;
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: LD_VAR 0 2
13902: PUSH
13903: LD_INT 1
13905: PPUSH
13906: LD_VAR 0 2
13910: PPUSH
13911: CALL_OW 12
13915: ARRAY
13916: ST_TO_ADDR
// if Crawls ( un ) then
13917: LD_VAR 0 3
13921: PPUSH
13922: CALL_OW 318
13926: IFFALSE 13937
// ComWalk ( un ) ;
13928: LD_VAR 0 3
13932: PPUSH
13933: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 8
13944: PPUSH
13945: CALL_OW 336
// end ; 4 :
13949: GO 14042
13951: LD_INT 4
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 14020
13959: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 22
13967: PUSH
13968: LD_OWVAR 2
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 30
13979: PUSH
13980: LD_INT 29
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PPUSH
13991: CALL_OW 69
13995: ST_TO_ADDR
// if not tmp then
13996: LD_VAR 0 2
14000: NOT
14001: IFFALSE 14005
// exit ;
14003: GO 14042
// DestroyUnit ( tmp [ 1 ] ) ;
14005: LD_VAR 0 2
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: CALL_OW 65
// end ; 5 .. 7 :
14018: GO 14042
14020: LD_INT 5
14022: DOUBLE
14023: GREATEREQUAL
14024: IFFALSE 14032
14026: LD_INT 7
14028: DOUBLE
14029: LESSEQUAL
14030: IFTRUE 14034
14032: GO 14041
14034: POP
// StreamSibBomb ; end ;
14035: CALL 10336 0 0
14039: GO 14042
14041: POP
// end ;
14042: PPOPN 3
14044: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14045: LD_EXP 21
14049: PUSH
14050: LD_EXP 71
14054: AND
14055: IFFALSE 14211
14057: GO 14059
14059: DISABLE
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: LD_INT 81
14072: PUSH
14073: LD_OWVAR 2
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 2
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 1
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 21
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PPUSH
14114: CALL_OW 69
14118: ST_TO_ADDR
// if not tmp then
14119: LD_VAR 0 2
14123: NOT
14124: IFFALSE 14128
// exit ;
14126: GO 14211
// p := 0 ;
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// p := p + 1 ;
14143: LD_ADDR_VAR 0 3
14147: PUSH
14148: LD_VAR 0 3
14152: PUSH
14153: LD_INT 1
14155: PLUS
14156: ST_TO_ADDR
// for i in tmp do
14157: LD_ADDR_VAR 0 1
14161: PUSH
14162: LD_VAR 0 2
14166: PUSH
14167: FOR_IN
14168: IFFALSE 14199
// if GetLives ( i ) < 1000 then
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 256
14179: PUSH
14180: LD_INT 1000
14182: LESS
14183: IFFALSE 14197
// SetLives ( i , 1000 ) ;
14185: LD_VAR 0 1
14189: PPUSH
14190: LD_INT 1000
14192: PPUSH
14193: CALL_OW 234
14197: GO 14167
14199: POP
14200: POP
// until p > 20 ;
14201: LD_VAR 0 3
14205: PUSH
14206: LD_INT 20
14208: GREATER
14209: IFFALSE 14136
// end ;
14211: PPOPN 3
14213: END
// every 0 0$1 trigger StreamModeActive and sTime do
14214: LD_EXP 21
14218: PUSH
14219: LD_EXP 72
14223: AND
14224: IFFALSE 14259
14226: GO 14228
14228: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14229: LD_INT 28
14231: PPUSH
14232: LD_OWVAR 2
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14244: LD_INT 30
14246: PPUSH
14247: LD_OWVAR 2
14251: PPUSH
14252: LD_INT 2
14254: PPUSH
14255: CALL_OW 322
// end ;
14259: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14260: LD_EXP 21
14264: PUSH
14265: LD_EXP 73
14269: AND
14270: IFFALSE 14391
14272: GO 14274
14274: DISABLE
14275: LD_INT 0
14277: PPUSH
14278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_INT 22
14286: PUSH
14287: LD_OWVAR 2
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 21
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 3
14308: PUSH
14309: LD_INT 23
14311: PUSH
14312: LD_INT 0
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: ST_TO_ADDR
// if not tmp then
14333: LD_VAR 0 2
14337: NOT
14338: IFFALSE 14342
// exit ;
14340: GO 14391
// for i in tmp do
14342: LD_ADDR_VAR 0 1
14346: PUSH
14347: LD_VAR 0 2
14351: PUSH
14352: FOR_IN
14353: IFFALSE 14389
// begin if Crawls ( i ) then
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 318
14364: IFFALSE 14375
// ComWalk ( i ) ;
14366: LD_VAR 0 1
14370: PPUSH
14371: CALL_OW 138
// SetClass ( i , 2 ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_INT 2
14382: PPUSH
14383: CALL_OW 336
// end ;
14387: GO 14352
14389: POP
14390: POP
// end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14394: LD_EXP 21
14398: PUSH
14399: LD_EXP 74
14403: AND
14404: IFFALSE 14609
14406: GO 14408
14408: DISABLE
14409: LD_INT 0
14411: PPUSH
14412: PPUSH
14413: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14414: LD_OWVAR 2
14418: PPUSH
14419: LD_INT 9
14421: PPUSH
14422: LD_INT 1
14424: PPUSH
14425: LD_INT 1
14427: PPUSH
14428: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14432: LD_INT 9
14434: PPUSH
14435: LD_OWVAR 2
14439: PPUSH
14440: CALL_OW 343
// hc_name := Dark Warrior ;
14444: LD_ADDR_OWVAR 26
14448: PUSH
14449: LD_STRING Dark Warrior
14451: ST_TO_ADDR
// hc_gallery :=  ;
14452: LD_ADDR_OWVAR 33
14456: PUSH
14457: LD_STRING 
14459: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
14460: LD_INT 1
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: LD_INT 10
14468: PPUSH
14469: CALL_OW 380
// un := CreateHuman ;
14473: LD_ADDR_VAR 0 3
14477: PUSH
14478: CALL_OW 44
14482: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14483: LD_VAR 0 3
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: CALL_OW 51
// p := 0 ;
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14503: LD_INT 35
14505: PPUSH
14506: CALL_OW 67
// if GetLives ( un ) < 1000 then
14510: LD_VAR 0 3
14514: PPUSH
14515: CALL_OW 256
14519: PUSH
14520: LD_INT 1000
14522: LESS
14523: IFFALSE 14537
// SetLives ( un , 1000 ) ;
14525: LD_VAR 0 3
14529: PPUSH
14530: LD_INT 1000
14532: PPUSH
14533: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 81
14544: PUSH
14545: LD_OWVAR 2
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PPUSH
14554: CALL_OW 69
14558: PPUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: CALL_OW 74
14568: PPUSH
14569: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
14573: LD_VAR 0 2
14577: PUSH
14578: LD_INT 60
14580: GREATER
14581: PUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: CALL_OW 301
14591: OR
14592: IFFALSE 14503
// if un then
14594: LD_VAR 0 3
14598: IFFALSE 14609
// RemoveUnit ( un ) ;
14600: LD_VAR 0 3
14604: PPUSH
14605: CALL_OW 64
// end ;
14609: PPOPN 3
14611: END
