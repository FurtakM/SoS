// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3085 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 16
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 18
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 19
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 20
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; begin
 109: LD_INT 0
 111: PPUSH
// InGameOn ;
 112: CALL_OW 8
// PrepareKurtGroup ;
 116: CALL 2932 0 0
// PrepareSheikGroup ;
 120: CALL 2570 0 0
// PrepareHeikeGroup ;
 124: CALL 2482 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 128: LD_INT 51
 130: PPUSH
 131: LD_INT 85
 133: PPUSH
 134: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 138: LD_INT 1
 140: PPUSH
 141: LD_INT 1
 143: PPUSH
 144: LD_INT 5
 146: PPUSH
 147: LD_INT 32763
 149: NEG
 150: PPUSH
 151: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 155: LD_INT 1
 157: PPUSH
 158: LD_INT 1
 160: PPUSH
 161: LD_INT 5
 163: PPUSH
 164: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 168: LD_EXP 1
 172: PPUSH
 173: LD_INT 50
 175: PPUSH
 176: LD_INT 86
 178: PPUSH
 179: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 183: LD_EXP 5
 187: PPUSH
 188: LD_INT 51
 190: PPUSH
 191: LD_INT 90
 193: PPUSH
 194: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 198: LD_EXP 1
 202: PPUSH
 203: LD_EXP 5
 207: PPUSH
 208: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 212: LD_EXP 5
 216: PPUSH
 217: LD_EXP 1
 221: PPUSH
 222: CALL_OW 179
// wait ( 0 0$3 ) ;
 226: LD_INT 105
 228: PPUSH
 229: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 233: LD_EXP 5
 237: PPUSH
 238: LD_STRING DK-1
 240: PPUSH
 241: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 245: LD_EXP 1
 249: PPUSH
 250: LD_STRING DH-1
 252: PPUSH
 253: CALL_OW 88
// wait ( 0 0$2 ) ;
 257: LD_INT 70
 259: PPUSH
 260: CALL_OW 67
// PrepareArabian ;
 264: CALL 3333 0 0
// InGameOff ;
 268: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 272: LD_STRING O1
 274: PPUSH
 275: CALL_OW 337
// goWithHeike := true ;
 279: LD_ADDR_EXP 17
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// SaveForQuickRestart ;
 287: CALL_OW 22
// end ;
 291: LD_VAR 0 1
 295: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 5
 301: PPUSH
 302: CALL_OW 81
 306: PUSH
 307: LD_INT 2
 309: EQUAL
 310: IFFALSE 456
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin goWithHeike := false ;
 318: LD_ADDR_EXP 17
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// DialogueOn ;
 326: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 330: LD_EXP 1
 334: PPUSH
 335: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 339: LD_EXP 5
 343: PPUSH
 344: LD_STRING DK-betray-1
 346: PPUSH
 347: CALL_OW 88
// DialogueOff ;
 351: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 355: LD_EXP 5
 359: PPUSH
 360: LD_INT 90
 362: PPUSH
 363: LD_INT 46
 365: PPUSH
 366: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 370: LD_INT 35
 372: PPUSH
 373: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 377: LD_ADDR_VAR 0 1
 381: PUSH
 382: LD_INT 22
 384: PUSH
 385: LD_INT 5
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 25
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: LD_EXP 5
 415: DIFF
 416: PUSH
 417: FOR_IN
 418: IFFALSE 436
// ComAttackUnit ( i , Heike ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_EXP 1
 429: PPUSH
 430: CALL_OW 115
 434: GO 417
 436: POP
 437: POP
// until IsDead ( Heike ) ;
 438: LD_EXP 1
 442: PPUSH
 443: CALL_OW 301
 447: IFFALSE 370
// YouLost ( Betray ) ;
 449: LD_STRING Betray
 451: PPUSH
 452: CALL_OW 104
// end ;
 456: PPOPN 1
 458: END
// every 0 0$1 trigger goWithHeike do
 459: LD_EXP 17
 463: IFFALSE 518
 465: GO 467
 467: DISABLE
// begin enable ;
 468: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 469: LD_EXP 1
 473: PPUSH
 474: LD_EXP 5
 478: PPUSH
 479: CALL_OW 296
 483: PUSH
 484: LD_INT 3
 486: GREATER
 487: IFFALSE 518
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 489: LD_EXP 5
 493: PPUSH
 494: LD_EXP 1
 498: PPUSH
 499: CALL_OW 250
 503: PPUSH
 504: LD_EXP 1
 508: PPUSH
 509: CALL_OW 251
 513: PPUSH
 514: CALL_OW 111
// end ;
 518: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 519: LD_INT 2
 521: PPUSH
 522: LD_INT 47
 524: PPUSH
 525: LD_INT 68
 527: PPUSH
 528: CALL_OW 293
 532: PUSH
 533: LD_EXP 18
 537: NOT
 538: AND
 539: IFFALSE 583
 541: GO 543
 543: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 544: LD_EXP 1
 548: PPUSH
 549: LD_STRING DH-spot-1
 551: PPUSH
 552: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 556: LD_INT 47
 558: PPUSH
 559: LD_INT 68
 561: PPUSH
 562: CALL_OW 428
 566: PPUSH
 567: CALL_OW 313
 571: PUSH
 572: LD_INT 1
 574: ARRAY
 575: PPUSH
 576: LD_STRING DRa-spot-1
 578: PPUSH
 579: CALL_OW 88
// end ;
 583: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 584: LD_INT 2
 586: PPUSH
 587: LD_INT 93
 589: PPUSH
 590: LD_INT 89
 592: PPUSH
 593: CALL_OW 293
 597: PUSH
 598: LD_EXP 18
 602: NOT
 603: AND
 604: IFFALSE 648
 606: GO 608
 608: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 609: LD_EXP 1
 613: PPUSH
 614: LD_STRING DH-spot-1
 616: PPUSH
 617: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 621: LD_INT 93
 623: PPUSH
 624: LD_INT 89
 626: PPUSH
 627: CALL_OW 428
 631: PPUSH
 632: CALL_OW 313
 636: PUSH
 637: LD_INT 1
 639: ARRAY
 640: PPUSH
 641: LD_STRING DRa-spot-2
 643: PPUSH
 644: CALL_OW 88
// end ;
 648: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 649: LD_EXP 20
 653: PUSH
 654: LD_EXP 14
 658: PPUSH
 659: LD_INT 101
 661: PUSH
 662: LD_INT 2
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PPUSH
 669: CALL_OW 72
 673: AND
 674: IFFALSE 998
 676: GO 678
 678: DISABLE
 679: LD_INT 0
 681: PPUSH
 682: PPUSH
 683: PPUSH
 684: PPUSH
 685: PPUSH
// begin enable ;
 686: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 687: LD_ADDR_VAR 0 1
 691: PUSH
 692: LD_EXP 14
 696: PPUSH
 697: LD_INT 101
 699: PUSH
 700: LD_INT 2
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PPUSH
 707: CALL_OW 72
 711: ST_TO_ADDR
// if not tmp then
 712: LD_VAR 0 1
 716: NOT
 717: IFFALSE 721
// exit ;
 719: GO 998
// InGameOn ;
 721: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 725: LD_EXP 1
 729: PUSH
 730: LD_EXP 5
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PPUSH
 739: LD_VAR 0 1
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 752: LD_VAR 0 1
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: LD_EXP 1
 765: PPUSH
 766: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 770: LD_VAR 0 1
 774: PUSH
 775: LD_INT 1
 777: ARRAY
 778: PPUSH
 779: LD_STRING DG-meeting-1
 781: PPUSH
 782: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 786: LD_ADDR_VAR 0 3
 790: PUSH
 791: LD_INT 81
 793: PUSH
 794: LD_INT 10
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 63
 803: PUSH
 804: LD_INT 25
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 108
 813: PUSH
 814: LD_INT 73
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: LIST
 825: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: LD_INT 9999
 833: PUSH
 834: EMPTY
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// for i := 1 to 3 do
 840: LD_ADDR_VAR 0 2
 844: PUSH
 845: DOUBLE
 846: LD_INT 1
 848: DEC
 849: ST_TO_ADDR
 850: LD_INT 3
 852: PUSH
 853: FOR_TO
 854: IFFALSE 938
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_EXP 1
 865: PPUSH
 866: LD_VAR 0 3
 870: PUSH
 871: LD_VAR 0 2
 875: ARRAY
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PPUSH
 881: LD_VAR 0 3
 885: PUSH
 886: LD_VAR 0 2
 890: ARRAY
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: CALL_OW 297
 900: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 901: LD_VAR 0 4
 905: PUSH
 906: LD_INT 1
 908: ARRAY
 909: PUSH
 910: LD_VAR 0 5
 914: GREATER
 915: IFFALSE 936
// dist := [ tdist , i ] ;
 917: LD_ADDR_VAR 0 4
 921: PUSH
 922: LD_VAR 0 5
 926: PUSH
 927: LD_VAR 0 2
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// end ;
 936: GO 853
 938: POP
 939: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 940: LD_EXP 1
 944: PPUSH
 945: LD_VAR 0 3
 949: PUSH
 950: LD_VAR 0 4
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: ARRAY
 959: PUSH
 960: LD_INT 1
 962: ARRAY
 963: PPUSH
 964: LD_VAR 0 3
 968: PUSH
 969: LD_VAR 0 4
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: ARRAY
 978: PUSH
 979: LD_INT 2
 981: ARRAY
 982: PPUSH
 983: CALL_OW 111
// wait ( 0 0$3 ) ;
 987: LD_INT 105
 989: PPUSH
 990: CALL_OW 67
// InGameOff ;
 994: CALL_OW 9
// end ;
 998: PPOPN 5
1000: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1001: LD_EXP 1
1005: PPUSH
1006: LD_INT 14
1008: PPUSH
1009: CALL_OW 296
1013: PUSH
1014: LD_INT 40
1016: GREATER
1017: PUSH
1018: LD_EXP 1
1022: PPUSH
1023: CALL_OW 316
1027: AND
1028: IFFALSE 1045
1030: GO 1032
1032: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1033: LD_EXP 5
1037: PPUSH
1038: LD_STRING DK-idle-1
1040: PPUSH
1041: CALL_OW 88
// end ;
1045: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1046: LD_INT 2
1048: PPUSH
1049: LD_INT 59
1051: PPUSH
1052: LD_INT 47
1054: PPUSH
1055: CALL_OW 293
1059: IFFALSE 1209
1061: GO 1063
1063: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1064: LD_INT 59
1066: PPUSH
1067: LD_INT 47
1069: PPUSH
1070: LD_INT 2
1072: PPUSH
1073: LD_INT 10
1075: NEG
1076: PPUSH
1077: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1081: LD_INT 59
1083: PPUSH
1084: LD_INT 47
1086: PPUSH
1087: CALL_OW 86
// goWithHeike := false ;
1091: LD_ADDR_EXP 17
1095: PUSH
1096: LD_INT 0
1098: ST_TO_ADDR
// baseSpotted := true ;
1099: LD_ADDR_EXP 18
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// InGameOn ;
1107: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1111: LD_EXP 1
1115: PUSH
1116: LD_EXP 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PPUSH
1125: LD_INT 54
1127: PPUSH
1128: LD_INT 45
1130: PPUSH
1131: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1135: LD_EXP 1
1139: PUSH
1140: LD_EXP 5
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PPUSH
1149: LD_INT 59
1151: PPUSH
1152: LD_INT 47
1154: PPUSH
1155: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1159: LD_EXP 1
1163: PPUSH
1164: LD_STRING DH-base-1
1166: PPUSH
1167: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1171: LD_EXP 5
1175: PPUSH
1176: LD_STRING DK-base-1
1178: PPUSH
1179: CALL_OW 88
// InGameOff ;
1183: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1187: LD_ADDR_EXP 16
1191: PUSH
1192: LD_EXP 16
1196: PUSH
1197: LD_INT 1
1199: PLUS
1200: ST_TO_ADDR
// goWithHeike := true ;
1201: LD_ADDR_EXP 17
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// end ;
1209: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1210: LD_INT 2
1212: PPUSH
1213: LD_EXP 8
1217: PPUSH
1218: CALL_OW 292
1222: IFFALSE 2479
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
1231: PPUSH
// begin meetingActive := false ;
1232: LD_ADDR_EXP 20
1236: PUSH
1237: LD_INT 0
1239: ST_TO_ADDR
// goWithHeike := false ;
1240: LD_ADDR_EXP 17
1244: PUSH
1245: LD_INT 0
1247: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1248: LD_ADDR_VAR 0 2
1252: PUSH
1253: LD_INT 6
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL_OW 517
1263: ST_TO_ADDR
// for i := 1 to 4 do
1264: LD_ADDR_VAR 0 1
1268: PUSH
1269: DOUBLE
1270: LD_INT 1
1272: DEC
1273: ST_TO_ADDR
1274: LD_INT 4
1276: PUSH
1277: FOR_TO
1278: IFFALSE 1345
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1280: LD_EXP 15
1284: PUSH
1285: LD_VAR 0 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PUSH
1300: LD_VAR 0 1
1304: ARRAY
1305: PPUSH
1306: LD_VAR 0 2
1310: PUSH
1311: LD_INT 2
1313: ARRAY
1314: PUSH
1315: LD_VAR 0 1
1319: ARRAY
1320: PPUSH
1321: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1325: LD_EXP 15
1329: PUSH
1330: LD_VAR 0 1
1334: ARRAY
1335: PPUSH
1336: LD_INT 14
1338: PPUSH
1339: CALL_OW 179
// end ;
1343: GO 1277
1345: POP
1346: POP
// InGameOn ;
1347: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1351: LD_EXP 1
1355: PPUSH
1356: LD_EXP 8
1360: PPUSH
1361: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1365: LD_EXP 5
1369: PPUSH
1370: LD_EXP 1
1374: PPUSH
1375: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1379: LD_INT 10
1381: PPUSH
1382: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1386: LD_EXP 1
1390: PPUSH
1391: LD_EXP 8
1395: PPUSH
1396: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1400: LD_EXP 5
1404: PPUSH
1405: LD_EXP 1
1409: PPUSH
1410: CALL_OW 250
1414: PPUSH
1415: LD_INT 5
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 272
1425: PPUSH
1426: LD_EXP 1
1430: PPUSH
1431: CALL_OW 251
1435: PPUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_INT 1
1441: PPUSH
1442: CALL_OW 273
1446: PPUSH
1447: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1451: LD_EXP 1
1455: PPUSH
1456: LD_EXP 8
1460: PPUSH
1461: CALL_OW 296
1465: PUSH
1466: LD_INT 5
1468: LESS
1469: PUSH
1470: LD_EXP 5
1474: PPUSH
1475: LD_EXP 8
1479: PPUSH
1480: CALL_OW 296
1484: PUSH
1485: LD_INT 6
1487: LESS
1488: AND
1489: IFFALSE 1379
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1491: LD_EXP 1
1495: PUSH
1496: LD_EXP 5
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PPUSH
1505: LD_EXP 8
1509: PPUSH
1510: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1514: LD_EXP 8
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_EXP 9
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PPUSH
1534: LD_EXP 1
1538: PPUSH
1539: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1543: LD_INT 7
1545: PPUSH
1546: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1550: LD_EXP 8
1554: PPUSH
1555: LD_STRING DKu-Kurt-1
1557: PPUSH
1558: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1562: LD_EXP 5
1566: PPUSH
1567: LD_STRING DK-Kurt-1
1569: PPUSH
1570: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1574: LD_EXP 8
1578: PPUSH
1579: LD_STRING DKu-Kurt-2
1581: PPUSH
1582: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1586: LD_INT 7
1588: PPUSH
1589: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1593: LD_EXP 1
1597: PPUSH
1598: LD_STRING DH-Kurt-1
1600: PPUSH
1601: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1605: LD_EXP 8
1609: PPUSH
1610: LD_STRING DKu-Kurt-3
1612: PPUSH
1613: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1617: LD_EXP 5
1621: PPUSH
1622: LD_STRING DK-Kurt-3
1624: PPUSH
1625: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1629: LD_EXP 9
1633: PPUSH
1634: LD_STRING DHa-Kurt-3
1636: PPUSH
1637: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1641: LD_EXP 4
1645: PPUSH
1646: LD_STRING DO-Kurt-3
1648: PPUSH
1649: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1653: LD_ADDR_VAR 0 3
1657: PUSH
1658: LD_EXP 8
1662: PUSH
1663: LD_EXP 4
1667: PUSH
1668: LD_EXP 9
1672: PUSH
1673: LD_EXP 5
1677: PUSH
1678: LD_EXP 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i = 1 to 5 do
1690: LD_ADDR_VAR 0 1
1694: PUSH
1695: DOUBLE
1696: LD_INT 1
1698: DEC
1699: ST_TO_ADDR
1700: LD_INT 5
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1779
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1706: LD_VAR 0 3
1710: PUSH
1711: LD_VAR 0 1
1715: ARRAY
1716: PPUSH
1717: LD_VAR 0 2
1721: PUSH
1722: LD_INT 1
1724: ARRAY
1725: PUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_INT 4
1733: PLUS
1734: ARRAY
1735: PPUSH
1736: LD_VAR 0 2
1740: PUSH
1741: LD_INT 2
1743: ARRAY
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_INT 4
1752: PLUS
1753: ARRAY
1754: PPUSH
1755: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1759: LD_VAR 0 3
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PPUSH
1770: LD_INT 14
1772: PPUSH
1773: CALL_OW 179
// end ;
1777: GO 1703
1779: POP
1780: POP
// wait ( 0 0$2 ) ;
1781: LD_INT 70
1783: PPUSH
1784: CALL_OW 67
// CenterOnUnits ( eon ) ;
1788: LD_INT 14
1790: PPUSH
1791: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1795: LD_INT 90
1797: PPUSH
1798: LD_INT 43
1800: PPUSH
1801: LD_INT 2
1803: PPUSH
1804: LD_INT 21
1806: NEG
1807: PPUSH
1808: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1812: LD_EXP 2
1816: PPUSH
1817: LD_INT 84
1819: PPUSH
1820: LD_INT 36
1822: PPUSH
1823: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1827: LD_EXP 2
1831: PPUSH
1832: LD_INT 14
1834: PPUSH
1835: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1839: LD_EXP 11
1843: PPUSH
1844: LD_INT 85
1846: PPUSH
1847: LD_INT 36
1849: PPUSH
1850: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1854: LD_EXP 11
1858: PPUSH
1859: LD_INT 14
1861: PPUSH
1862: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1866: LD_EXP 10
1870: PPUSH
1871: LD_INT 86
1873: PPUSH
1874: LD_INT 36
1876: PPUSH
1877: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1881: LD_EXP 10
1885: PPUSH
1886: LD_INT 14
1888: PPUSH
1889: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1893: LD_EXP 7
1897: PPUSH
1898: LD_INT 87
1900: PPUSH
1901: LD_INT 36
1903: PPUSH
1904: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1908: LD_EXP 7
1912: PPUSH
1913: LD_INT 14
1915: PPUSH
1916: CALL_OW 179
// wait ( 0 0$3 ) ;
1920: LD_INT 105
1922: PPUSH
1923: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1927: LD_INT 35
1929: PPUSH
1930: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1934: LD_EXP 1
1938: PPUSH
1939: LD_INT 6
1941: PPUSH
1942: CALL_OW 308
1946: IFFALSE 1927
// heikeNearbyEon := true ;
1948: LD_ADDR_EXP 19
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1956: LD_EXP 6
1960: PPUSH
1961: LD_INT 88
1963: PPUSH
1964: LD_INT 37
1966: PPUSH
1967: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1971: LD_EXP 6
1975: PPUSH
1976: LD_EXP 13
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PPUSH
1985: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1989: LD_EXP 13
1993: PUSH
1994: LD_INT 1
1996: ARRAY
1997: PPUSH
1998: LD_INT 89
2000: PPUSH
2001: LD_INT 37
2003: PPUSH
2004: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2008: LD_EXP 13
2012: PUSH
2013: LD_INT 2
2015: ARRAY
2016: PPUSH
2017: LD_INT 91
2019: PPUSH
2020: LD_INT 39
2022: PPUSH
2023: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2027: LD_EXP 13
2031: PPUSH
2032: LD_EXP 11
2036: PPUSH
2037: CALL_OW 179
// wait ( 0 0$1 ) ;
2041: LD_INT 35
2043: PPUSH
2044: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2048: LD_EXP 13
2052: PUSH
2053: LD_INT 1
2055: ARRAY
2056: PPUSH
2057: LD_STRING DS-eon-1
2059: PPUSH
2060: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2064: LD_EXP 6
2068: PPUSH
2069: LD_STRING DSh-eon-1
2071: PPUSH
2072: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2076: LD_EXP 13
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: LD_STRING DS-eon-2
2087: PPUSH
2088: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2092: LD_EXP 6
2096: PPUSH
2097: LD_STRING DSh-eon-1a
2099: PPUSH
2100: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2104: LD_EXP 13
2108: PUSH
2109: LD_INT 1
2111: ARRAY
2112: PPUSH
2113: LD_INT 92
2115: PPUSH
2116: LD_INT 43
2118: PPUSH
2119: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2123: LD_EXP 13
2127: PUSH
2128: LD_INT 1
2130: ARRAY
2131: PPUSH
2132: LD_INT 14
2134: PPUSH
2135: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2139: LD_EXP 13
2143: PUSH
2144: LD_INT 2
2146: ARRAY
2147: PPUSH
2148: LD_INT 93
2150: PPUSH
2151: LD_INT 41
2153: PPUSH
2154: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2158: LD_EXP 13
2162: PUSH
2163: LD_INT 2
2165: ARRAY
2166: PPUSH
2167: LD_INT 93
2169: PPUSH
2170: LD_INT 40
2172: PPUSH
2173: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2177: LD_EXP 6
2181: PPUSH
2182: LD_INT 88
2184: PPUSH
2185: LD_INT 41
2187: PPUSH
2188: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2192: LD_EXP 6
2196: PPUSH
2197: LD_INT 87
2199: PPUSH
2200: LD_INT 41
2202: PPUSH
2203: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2207: LD_INT 35
2209: PPUSH
2210: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2214: LD_EXP 6
2218: PPUSH
2219: LD_INT 88
2221: PPUSH
2222: LD_INT 41
2224: PPUSH
2225: CALL_OW 307
2229: IFFALSE 2207
// wait ( 0 0$1 ) ;
2231: LD_INT 35
2233: PPUSH
2234: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2238: LD_EXP 6
2242: PPUSH
2243: LD_STRING DSh-eon-2
2245: PPUSH
2246: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2250: LD_EXP 11
2254: PPUSH
2255: LD_INT 87
2257: PPUSH
2258: LD_INT 40
2260: PPUSH
2261: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2265: LD_EXP 11
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 40
2275: PPUSH
2276: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2280: LD_INT 35
2282: PPUSH
2283: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2287: LD_EXP 11
2291: PPUSH
2292: LD_INT 87
2294: PPUSH
2295: LD_INT 40
2297: PPUSH
2298: CALL_OW 307
2302: IFFALSE 2280
// Say ( Shariff , DShar-eon-3 ) ;
2304: LD_EXP 11
2308: PPUSH
2309: LD_STRING DShar-eon-3
2311: PPUSH
2312: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2316: LD_EXP 11
2320: PPUSH
2321: LD_STRING DShar-eon-4
2323: PPUSH
2324: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2328: LD_EXP 5
2332: PPUSH
2333: LD_STRING DK-eon-4
2335: PPUSH
2336: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2340: LD_EXP 5
2344: PPUSH
2345: LD_INT 14
2347: PPUSH
2348: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2352: LD_INT 35
2354: PPUSH
2355: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2359: LD_EXP 5
2363: PPUSH
2364: CALL_OW 305
2368: NOT
2369: IFFALSE 2352
// Say ( Shariff , DShar-eon-5 ) ;
2371: LD_EXP 11
2375: PPUSH
2376: LD_STRING DShar-eon-5
2378: PPUSH
2379: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2383: LD_EXP 1
2387: PPUSH
2388: LD_INT 91
2390: PPUSH
2391: LD_INT 44
2393: PPUSH
2394: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2398: LD_EXP 1
2402: PPUSH
2403: LD_INT 14
2405: PPUSH
2406: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2410: LD_INT 35
2412: PPUSH
2413: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2417: LD_EXP 1
2421: PPUSH
2422: LD_INT 91
2424: PPUSH
2425: LD_INT 44
2427: PPUSH
2428: CALL_OW 307
2432: IFFALSE 2410
// Say ( Heike , DH-eon-5 ) ;
2434: LD_EXP 1
2438: PPUSH
2439: LD_STRING DH-eon-5
2441: PPUSH
2442: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2446: LD_EXP 1
2450: PPUSH
2451: LD_INT 14
2453: PPUSH
2454: CALL_OW 120
// wait ( 0 0$2 ) ;
2458: LD_INT 70
2460: PPUSH
2461: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2465: LD_INT 1
2467: PPUSH
2468: LD_STRING %_cont
2470: PPUSH
2471: CALL_OW 340
// InGameOff ;
2475: CALL_OW 9
// end ; end_of_file
2479: PPOPN 3
2481: END
// export function PrepareHeikeGroup ; begin
2482: LD_INT 0
2484: PPUSH
// uc_side := 2 ;
2485: LD_ADDR_OWVAR 20
2489: PUSH
2490: LD_INT 2
2492: ST_TO_ADDR
// uc_nation := 2 ;
2493: LD_ADDR_OWVAR 21
2497: PUSH
2498: LD_INT 2
2500: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2501: LD_ADDR_EXP 1
2505: PUSH
2506: LD_STRING Heike
2508: PPUSH
2509: CALL_OW 25
2513: ST_TO_ADDR
// uc_side := 5 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 5
2521: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2522: LD_ADDR_EXP 5
2526: PUSH
2527: LD_STRING Kaia
2529: PPUSH
2530: CALL_OW 25
2534: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2535: LD_EXP 1
2539: PPUSH
2540: LD_INT 3
2542: PPUSH
2543: LD_INT 0
2545: PPUSH
2546: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2550: LD_EXP 5
2554: PPUSH
2555: LD_INT 3
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: CALL_OW 49
// end ;
2565: LD_VAR 0 1
2569: RET
// export function PrepareSheikGroup ; var un , i ; begin
2570: LD_INT 0
2572: PPUSH
2573: PPUSH
2574: PPUSH
// uc_side := 5 ;
2575: LD_ADDR_OWVAR 20
2579: PUSH
2580: LD_INT 5
2582: ST_TO_ADDR
// uc_nation := 2 ;
2583: LD_ADDR_OWVAR 21
2587: PUSH
2588: LD_INT 2
2590: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2591: LD_ADDR_EXP 10
2595: PUSH
2596: LD_STRING Ali
2598: PPUSH
2599: CALL_OW 25
2603: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2604: LD_ADDR_EXP 11
2608: PUSH
2609: LD_STRING Abdul
2611: PPUSH
2612: CALL_OW 25
2616: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2617: LD_ADDR_EXP 2
2621: PUSH
2622: LD_STRING Omar
2624: PPUSH
2625: CALL_OW 25
2629: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2630: LD_ADDR_EXP 7
2634: PUSH
2635: LD_STRING Mahtab
2637: PPUSH
2638: CALL_OW 25
2642: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2643: LD_ADDR_EXP 6
2647: PUSH
2648: LD_STRING Shahrzad
2650: PPUSH
2651: CALL_OW 25
2655: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2656: LD_EXP 10
2660: PPUSH
2661: LD_INT 85
2663: PPUSH
2664: LD_INT 37
2666: PPUSH
2667: LD_INT 0
2669: PPUSH
2670: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2674: LD_EXP 11
2678: PPUSH
2679: LD_INT 87
2681: PPUSH
2682: LD_INT 37
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2692: LD_EXP 2
2696: PPUSH
2697: LD_INT 85
2699: PPUSH
2700: LD_INT 35
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2710: LD_EXP 7
2714: PPUSH
2715: LD_INT 86
2717: PPUSH
2718: LD_INT 39
2720: PPUSH
2721: LD_INT 0
2723: PPUSH
2724: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2728: LD_EXP 6
2732: PPUSH
2733: LD_INT 88
2735: PPUSH
2736: LD_INT 39
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2746: LD_EXP 10
2750: PPUSH
2751: LD_EXP 11
2755: PPUSH
2756: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2760: LD_EXP 11
2764: PPUSH
2765: LD_EXP 10
2769: PPUSH
2770: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2774: LD_EXP 2
2778: PPUSH
2779: LD_EXP 11
2783: PPUSH
2784: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2788: LD_EXP 7
2792: PUSH
2793: LD_EXP 6
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PPUSH
2802: LD_EXP 11
2806: PPUSH
2807: CALL_OW 119
// for i := 1 to 2 do
2811: LD_ADDR_VAR 0 3
2815: PUSH
2816: DOUBLE
2817: LD_INT 1
2819: DEC
2820: ST_TO_ADDR
2821: LD_INT 2
2823: PUSH
2824: FOR_TO
2825: IFFALSE 2911
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
2827: LD_INT 2
2829: PPUSH
2830: LD_INT 4
2832: PPUSH
2833: LD_INT 6
2835: PPUSH
2836: CALL_OW 380
// un := CreateHuman ;
2840: LD_ADDR_VAR 0 2
2844: PUSH
2845: CALL_OW 44
2849: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2850: LD_VAR 0 2
2854: PPUSH
2855: LD_INT 90
2857: PPUSH
2858: LD_INT 44
2860: PPUSH
2861: LD_INT 3
2863: PPUSH
2864: LD_INT 0
2866: PPUSH
2867: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2871: LD_VAR 0 2
2875: PPUSH
2876: LD_INT 91
2878: PPUSH
2879: LD_INT 43
2881: PPUSH
2882: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2886: LD_ADDR_EXP 13
2890: PUSH
2891: LD_EXP 13
2895: PPUSH
2896: LD_INT 1
2898: PPUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL_OW 2
2908: ST_TO_ADDR
// end ;
2909: GO 2824
2911: POP
2912: POP
// scientists := scientists diff 0 ;
2913: LD_ADDR_EXP 13
2917: PUSH
2918: LD_EXP 13
2922: PUSH
2923: LD_INT 0
2925: DIFF
2926: ST_TO_ADDR
// end ;
2927: LD_VAR 0 1
2931: RET
// export function PrepareKurtGroup ; var i ; begin
2932: LD_INT 0
2934: PPUSH
2935: PPUSH
// uc_side := 5 ;
2936: LD_ADDR_OWVAR 20
2940: PUSH
2941: LD_INT 5
2943: ST_TO_ADDR
// uc_nation := 2 ;
2944: LD_ADDR_OWVAR 21
2948: PUSH
2949: LD_INT 2
2951: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2952: LD_ADDR_EXP 8
2956: PUSH
2957: LD_STRING Kurt
2959: PPUSH
2960: CALL_OW 25
2964: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2965: LD_ADDR_EXP 4
2969: PUSH
2970: LD_STRING Olaf
2972: PPUSH
2973: CALL_OW 25
2977: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2978: LD_ADDR_EXP 9
2982: PUSH
2983: LD_STRING Hans
2985: PPUSH
2986: CALL_OW 25
2990: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2991: LD_ADDR_VAR 0 2
2995: PUSH
2996: LD_EXP 8
3000: PUSH
3001: LD_EXP 9
3005: PUSH
3006: LD_EXP 4
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3036
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 10
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
3034: GO 3016
3036: POP
3037: POP
// ComTurnUnit ( Kurt , Hans ) ;
3038: LD_EXP 8
3042: PPUSH
3043: LD_EXP 9
3047: PPUSH
3048: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3052: LD_EXP 4
3056: PPUSH
3057: LD_EXP 9
3061: PPUSH
3062: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3066: LD_EXP 9
3070: PPUSH
3071: LD_EXP 4
3075: PPUSH
3076: CALL_OW 119
// end ;
3080: LD_VAR 0 1
3084: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3091: LD_ADDR_VAR 0 2
3095: PUSH
3096: LD_INT 21
3098: PUSH
3099: LD_INT 3
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PPUSH
3106: CALL_OW 69
3110: PUSH
3111: LD_INT 14
3113: DIFF
3114: PUSH
3115: FOR_IN
3116: IFFALSE 3196
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3118: LD_VAR 0 2
3122: PPUSH
3123: CALL_OW 266
3127: PUSH
3128: LD_INT 6
3130: PUSH
3131: LD_INT 31
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: IN
3138: IFFALSE 3162
// SetLives ( i , rand ( 500 , 600 ) ) else
3140: LD_VAR 0 2
3144: PPUSH
3145: LD_INT 500
3147: PPUSH
3148: LD_INT 600
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 234
3160: GO 3182
// SetLives ( i , rand ( 300 , 499 ) ) ;
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_INT 300
3169: PPUSH
3170: LD_INT 499
3172: PPUSH
3173: CALL_OW 12
3177: PPUSH
3178: CALL_OW 234
// SetSide ( i , 5 ) ;
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_INT 5
3189: PPUSH
3190: CALL_OW 235
// end ;
3194: GO 3115
3196: POP
3197: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3198: LD_ADDR_VAR 0 4
3202: PUSH
3203: LD_INT 9
3205: PPUSH
3206: LD_INT 0
3208: PPUSH
3209: CALL_OW 517
3213: ST_TO_ADDR
// uc_side := 4 ;
3214: LD_ADDR_OWVAR 20
3218: PUSH
3219: LD_INT 4
3221: ST_TO_ADDR
// uc_nation := 1 ;
3222: LD_ADDR_OWVAR 21
3226: PUSH
3227: LD_INT 1
3229: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: DOUBLE
3236: LD_INT 1
3238: DEC
3239: ST_TO_ADDR
3240: LD_VAR 0 4
3244: PUSH
3245: LD_INT 1
3247: ARRAY
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3326
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3252: LD_INT 0
3254: PPUSH
3255: LD_INT 1
3257: PUSH
3258: LD_INT 1
3260: PUSH
3261: LD_INT 4
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: PUSH
3269: LD_VAR 0 2
3273: PUSH
3274: LD_INT 3
3276: MOD
3277: PUSH
3278: LD_INT 1
3280: PLUS
3281: ARRAY
3282: PPUSH
3283: LD_INT 0
3285: PPUSH
3286: CALL_OW 380
// un := CreateHuman ;
3290: LD_ADDR_VAR 0 3
3294: PUSH
3295: CALL_OW 44
3299: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3300: LD_VAR 0 3
3304: PPUSH
3305: LD_INT 9
3307: PPUSH
3308: LD_INT 0
3310: PPUSH
3311: CALL_OW 49
// KillUnit ( un ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: CALL_OW 66
// end ;
3324: GO 3249
3326: POP
3327: POP
// end ;
3328: LD_VAR 0 1
3332: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
// uc_side := 5 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 5
3349: ST_TO_ADDR
// uc_nation := 2 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 2
3357: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3358: LD_ADDR_VAR 0 6
3362: PUSH
3363: LD_INT 2
3365: PUSH
3366: LD_INT 4
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 14
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: ST_TO_ADDR
// InitHc ;
3381: CALL_OW 19
// for i in area do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_VAR 0 6
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3560
// begin tmp := AreaToList ( i , 0 ) ;
3398: LD_ADDR_VAR 0 5
3402: PUSH
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 517
3415: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3416: LD_ADDR_VAR 0 3
3420: PUSH
3421: DOUBLE
3422: LD_INT 1
3424: DEC
3425: ST_TO_ADDR
3426: LD_VAR 0 5
3430: PUSH
3431: LD_INT 1
3433: ARRAY
3434: PUSH
3435: FOR_TO
3436: IFFALSE 3556
// begin PrepareHuman ( false , 1 , 3 ) ;
3438: LD_INT 0
3440: PPUSH
3441: LD_INT 1
3443: PPUSH
3444: LD_INT 3
3446: PPUSH
3447: CALL_OW 380
// un := CreateHuman ;
3451: LD_ADDR_VAR 0 7
3455: PUSH
3456: CALL_OW 44
3460: ST_TO_ADDR
// if i = spawnBaseArea3 then
3461: LD_VAR 0 2
3465: PUSH
3466: LD_INT 5
3468: EQUAL
3469: IFFALSE 3487
// eonGuards := eonGuards ^ un ;
3471: LD_ADDR_EXP 14
3475: PUSH
3476: LD_EXP 14
3480: PUSH
3481: LD_VAR 0 7
3485: ADD
3486: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3487: LD_VAR 0 7
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 49
// ComHold ( un ) ;
3504: LD_VAR 0 7
3508: PPUSH
3509: CALL_OW 140
// if i = spawnBaseArea4 then
3513: LD_VAR 0 2
3517: PUSH
3518: LD_INT 14
3520: EQUAL
3521: IFFALSE 3554
// begin firstGroup := firstGroup ^ un ;
3523: LD_ADDR_EXP 15
3527: PUSH
3528: LD_EXP 15
3532: PUSH
3533: LD_VAR 0 7
3537: ADD
3538: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3539: LD_VAR 0 7
3543: PPUSH
3544: LD_INT 108
3546: PPUSH
3547: LD_INT 47
3549: PPUSH
3550: CALL_OW 118
// end ; end ;
3554: GO 3435
3556: POP
3557: POP
// end ;
3558: GO 3395
3560: POP
3561: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3562: LD_ADDR_VAR 0 2
3566: PUSH
3567: DOUBLE
3568: LD_INT 1
3570: DEC
3571: ST_TO_ADDR
3572: LD_INT 30
3574: PUSH
3575: LD_INT 31
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PPUSH
3582: CALL_OW 69
3586: PUSH
3587: FOR_TO
3588: IFFALSE 3682
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3590: LD_ADDR_VAR 0 4
3594: PUSH
3595: LD_INT 30
3597: PUSH
3598: LD_INT 31
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: CALL_OW 69
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3616: LD_INT 1
3618: PPUSH
3619: LD_INT 1
3621: PPUSH
3622: LD_INT 3
3624: PPUSH
3625: CALL_OW 380
// un := CreateHuman ;
3629: LD_ADDR_VAR 0 7
3633: PUSH
3634: CALL_OW 44
3638: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3639: LD_VAR 0 7
3643: PPUSH
3644: LD_VAR 0 4
3648: PPUSH
3649: CALL_OW 254
3653: PUSH
3654: LD_INT 3
3656: PLUS
3657: PUSH
3658: LD_INT 6
3660: MOD
3661: PPUSH
3662: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3666: LD_VAR 0 7
3670: PPUSH
3671: LD_VAR 0 4
3675: PPUSH
3676: CALL_OW 52
// end ;
3680: GO 3587
3682: POP
3683: POP
// end ; end_of_file
3684: LD_VAR 0 1
3688: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3689: LD_VAR 0 1
3693: PUSH
3694: LD_INT 2
3696: EQUAL
3697: PUSH
3698: LD_VAR 0 2
3702: PUSH
3703: LD_INT 5
3705: EQUAL
3706: AND
3707: IFFALSE 3725
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 5
3714: PPUSH
3715: LD_INT 2
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: CALL_OW 80
// end ;
3725: PPOPN 2
3727: END
// every 0 0$1 trigger scientists do var i ;
3728: LD_EXP 13
3732: IFFALSE 3940
3734: GO 3736
3736: DISABLE
3737: LD_INT 0
3739: PPUSH
// begin repeat for i in scientists do
3740: LD_ADDR_VAR 0 1
3744: PUSH
3745: LD_EXP 13
3749: PUSH
3750: FOR_IN
3751: IFFALSE 3925
// begin wait ( 0 0$1 ) ;
3753: LD_INT 35
3755: PPUSH
3756: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3760: LD_VAR 0 1
3764: PPUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 13
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_VAR 0 1
3779: PUSH
3780: LD_INT 2
3782: MOD
3783: PUSH
3784: LD_INT 1
3786: PLUS
3787: ARRAY
3788: PPUSH
3789: CALL_OW 308
3793: NOT
3794: IFFALSE 3829
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3796: LD_VAR 0 1
3800: PPUSH
3801: LD_INT 11
3803: PUSH
3804: LD_INT 13
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_VAR 0 1
3815: PUSH
3816: LD_INT 2
3818: MOD
3819: PUSH
3820: LD_INT 1
3822: PLUS
3823: ARRAY
3824: PPUSH
3825: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3829: LD_VAR 0 1
3833: PPUSH
3834: LD_INT 14
3836: PPUSH
3837: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3841: LD_VAR 0 1
3845: PPUSH
3846: LD_INT 70
3848: PPUSH
3849: CALL_OW 202
// if rand ( 0 , 1 ) then
3853: LD_INT 0
3855: PPUSH
3856: LD_INT 1
3858: PPUSH
3859: CALL_OW 12
3863: IFFALSE 3877
// AddComAnim ( i , 15 ) ;
3865: LD_VAR 0 1
3869: PPUSH
3870: LD_INT 15
3872: PPUSH
3873: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 35
3884: PPUSH
3885: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: LD_INT 12
3896: PPUSH
3897: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 93
3908: PPUSH
3909: LD_INT 40
3911: PPUSH
3912: CALL_OW 178
// wait ( 0 0$1 ) ;
3916: LD_INT 35
3918: PPUSH
3919: CALL_OW 67
// end ;
3923: GO 3750
3925: POP
3926: POP
// wait ( 0 0$10 ) ;
3927: LD_INT 350
3929: PPUSH
3930: CALL_OW 67
// until heikeNearbyEon ;
3934: LD_EXP 19
3938: IFFALSE 3740
// end ; end_of_file
3940: PPOPN 1
3942: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3943: GO 3945
3945: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3946: LD_STRING initStreamRollete();
3948: PPUSH
3949: CALL_OW 559
// InitStreamMode ;
3953: CALL 3962 0 0
// DefineStreamItems ( ) ;
3957: CALL 4402 0 0
// end ;
3961: END
// function InitStreamMode ; begin
3962: LD_INT 0
3964: PPUSH
// streamModeActive := false ;
3965: LD_ADDR_EXP 21
3969: PUSH
3970: LD_INT 0
3972: ST_TO_ADDR
// normalCounter := 36 ;
3973: LD_ADDR_EXP 22
3977: PUSH
3978: LD_INT 36
3980: ST_TO_ADDR
// hardcoreCounter := 16 ;
3981: LD_ADDR_EXP 23
3985: PUSH
3986: LD_INT 16
3988: ST_TO_ADDR
// sRocket := false ;
3989: LD_ADDR_EXP 26
3993: PUSH
3994: LD_INT 0
3996: ST_TO_ADDR
// sSpeed := false ;
3997: LD_ADDR_EXP 25
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// sEngine := false ;
4005: LD_ADDR_EXP 27
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// sSpec := false ;
4013: LD_ADDR_EXP 24
4017: PUSH
4018: LD_INT 0
4020: ST_TO_ADDR
// sLevel := false ;
4021: LD_ADDR_EXP 28
4025: PUSH
4026: LD_INT 0
4028: ST_TO_ADDR
// sArmoury := false ;
4029: LD_ADDR_EXP 29
4033: PUSH
4034: LD_INT 0
4036: ST_TO_ADDR
// sRadar := false ;
4037: LD_ADDR_EXP 30
4041: PUSH
4042: LD_INT 0
4044: ST_TO_ADDR
// sBunker := false ;
4045: LD_ADDR_EXP 31
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// sHack := false ;
4053: LD_ADDR_EXP 32
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// sFire := false ;
4061: LD_ADDR_EXP 33
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// sRefresh := false ;
4069: LD_ADDR_EXP 34
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// sExp := false ;
4077: LD_ADDR_EXP 35
4081: PUSH
4082: LD_INT 0
4084: ST_TO_ADDR
// sDepot := false ;
4085: LD_ADDR_EXP 36
4089: PUSH
4090: LD_INT 0
4092: ST_TO_ADDR
// sFlag := false ;
4093: LD_ADDR_EXP 37
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// sKamikadze := false ;
4101: LD_ADDR_EXP 45
4105: PUSH
4106: LD_INT 0
4108: ST_TO_ADDR
// sTroll := false ;
4109: LD_ADDR_EXP 46
4113: PUSH
4114: LD_INT 0
4116: ST_TO_ADDR
// sSlow := false ;
4117: LD_ADDR_EXP 47
4121: PUSH
4122: LD_INT 0
4124: ST_TO_ADDR
// sLack := false ;
4125: LD_ADDR_EXP 48
4129: PUSH
4130: LD_INT 0
4132: ST_TO_ADDR
// sTank := false ;
4133: LD_ADDR_EXP 50
4137: PUSH
4138: LD_INT 0
4140: ST_TO_ADDR
// sRemote := false ;
4141: LD_ADDR_EXP 51
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// sPowell := false ;
4149: LD_ADDR_EXP 52
4153: PUSH
4154: LD_INT 0
4156: ST_TO_ADDR
// sTeleport := false ;
4157: LD_ADDR_EXP 55
4161: PUSH
4162: LD_INT 0
4164: ST_TO_ADDR
// sOilTower := false ;
4165: LD_ADDR_EXP 57
4169: PUSH
4170: LD_INT 0
4172: ST_TO_ADDR
// sShovel := false ;
4173: LD_ADDR_EXP 58
4177: PUSH
4178: LD_INT 0
4180: ST_TO_ADDR
// sSheik := false ;
4181: LD_ADDR_EXP 59
4185: PUSH
4186: LD_INT 0
4188: ST_TO_ADDR
// sEarthquake := false ;
4189: LD_ADDR_EXP 61
4193: PUSH
4194: LD_INT 0
4196: ST_TO_ADDR
// sAI := false ;
4197: LD_ADDR_EXP 62
4201: PUSH
4202: LD_INT 0
4204: ST_TO_ADDR
// sCargo := false ;
4205: LD_ADDR_EXP 65
4209: PUSH
4210: LD_INT 0
4212: ST_TO_ADDR
// sDLaser := false ;
4213: LD_ADDR_EXP 66
4217: PUSH
4218: LD_INT 0
4220: ST_TO_ADDR
// sExchange := false ;
4221: LD_ADDR_EXP 67
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// sFac := false ;
4229: LD_ADDR_EXP 68
4233: PUSH
4234: LD_INT 0
4236: ST_TO_ADDR
// sPower := false ;
4237: LD_ADDR_EXP 69
4241: PUSH
4242: LD_INT 0
4244: ST_TO_ADDR
// sRandom := false ;
4245: LD_ADDR_EXP 70
4249: PUSH
4250: LD_INT 0
4252: ST_TO_ADDR
// sShield := false ;
4253: LD_ADDR_EXP 71
4257: PUSH
4258: LD_INT 0
4260: ST_TO_ADDR
// sTime := false ;
4261: LD_ADDR_EXP 72
4265: PUSH
4266: LD_INT 0
4268: ST_TO_ADDR
// sTools := false ;
4269: LD_ADDR_EXP 73
4273: PUSH
4274: LD_INT 0
4276: ST_TO_ADDR
// sSold := false ;
4277: LD_ADDR_EXP 38
4281: PUSH
4282: LD_INT 0
4284: ST_TO_ADDR
// sDiff := false ;
4285: LD_ADDR_EXP 39
4289: PUSH
4290: LD_INT 0
4292: ST_TO_ADDR
// sFog := false ;
4293: LD_ADDR_EXP 42
4297: PUSH
4298: LD_INT 0
4300: ST_TO_ADDR
// sReset := false ;
4301: LD_ADDR_EXP 43
4305: PUSH
4306: LD_INT 0
4308: ST_TO_ADDR
// sSun := false ;
4309: LD_ADDR_EXP 44
4313: PUSH
4314: LD_INT 0
4316: ST_TO_ADDR
// sTiger := false ;
4317: LD_ADDR_EXP 40
4321: PUSH
4322: LD_INT 0
4324: ST_TO_ADDR
// sBomb := false ;
4325: LD_ADDR_EXP 41
4329: PUSH
4330: LD_INT 0
4332: ST_TO_ADDR
// sWound := false ;
4333: LD_ADDR_EXP 49
4337: PUSH
4338: LD_INT 0
4340: ST_TO_ADDR
// sBetray := false ;
4341: LD_ADDR_EXP 53
4345: PUSH
4346: LD_INT 0
4348: ST_TO_ADDR
// sContamin := false ;
4349: LD_ADDR_EXP 54
4353: PUSH
4354: LD_INT 0
4356: ST_TO_ADDR
// sOil := false ;
4357: LD_ADDR_EXP 56
4361: PUSH
4362: LD_INT 0
4364: ST_TO_ADDR
// sStu := false ;
4365: LD_ADDR_EXP 60
4369: PUSH
4370: LD_INT 0
4372: ST_TO_ADDR
// sBazooka := false ;
4373: LD_ADDR_EXP 63
4377: PUSH
4378: LD_INT 0
4380: ST_TO_ADDR
// sMortar := false ;
4381: LD_ADDR_EXP 64
4385: PUSH
4386: LD_INT 0
4388: ST_TO_ADDR
// sRanger := false ;
4389: LD_ADDR_EXP 74
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// end ;
4397: LD_VAR 0 1
4401: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4402: LD_INT 0
4404: PPUSH
4405: PPUSH
4406: PPUSH
4407: PPUSH
4408: PPUSH
// result := [ ] ;
4409: LD_ADDR_VAR 0 1
4413: PUSH
4414: EMPTY
4415: ST_TO_ADDR
// if campaign_id = 1 then
4416: LD_OWVAR 69
4420: PUSH
4421: LD_INT 1
4423: EQUAL
4424: IFFALSE 7362
// begin case mission_number of 1 :
4426: LD_OWVAR 70
4430: PUSH
4431: LD_INT 1
4433: DOUBLE
4434: EQUAL
4435: IFTRUE 4439
4437: GO 4503
4439: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4440: LD_ADDR_VAR 0 1
4444: PUSH
4445: LD_INT 2
4447: PUSH
4448: LD_INT 4
4450: PUSH
4451: LD_INT 11
4453: PUSH
4454: LD_INT 12
4456: PUSH
4457: LD_INT 15
4459: PUSH
4460: LD_INT 16
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 23
4468: PUSH
4469: LD_INT 26
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 101
4485: PUSH
4486: LD_INT 102
4488: PUSH
4489: LD_INT 106
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: ST_TO_ADDR
4501: GO 7360
4503: LD_INT 2
4505: DOUBLE
4506: EQUAL
4507: IFTRUE 4511
4509: GO 4583
4511: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4512: LD_ADDR_VAR 0 1
4516: PUSH
4517: LD_INT 2
4519: PUSH
4520: LD_INT 4
4522: PUSH
4523: LD_INT 11
4525: PUSH
4526: LD_INT 12
4528: PUSH
4529: LD_INT 15
4531: PUSH
4532: LD_INT 16
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 23
4540: PUSH
4541: LD_INT 26
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 101
4557: PUSH
4558: LD_INT 102
4560: PUSH
4561: LD_INT 105
4563: PUSH
4564: LD_INT 106
4566: PUSH
4567: LD_INT 108
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
4581: GO 7360
4583: LD_INT 3
4585: DOUBLE
4586: EQUAL
4587: IFTRUE 4591
4589: GO 4667
4591: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: LD_INT 4
4602: PUSH
4603: LD_INT 5
4605: PUSH
4606: LD_INT 11
4608: PUSH
4609: LD_INT 12
4611: PUSH
4612: LD_INT 15
4614: PUSH
4615: LD_INT 16
4617: PUSH
4618: LD_INT 22
4620: PUSH
4621: LD_INT 26
4623: PUSH
4624: LD_INT 36
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 105
4647: PUSH
4648: LD_INT 106
4650: PUSH
4651: LD_INT 108
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: ST_TO_ADDR
4665: GO 7360
4667: LD_INT 4
4669: DOUBLE
4670: EQUAL
4671: IFTRUE 4675
4673: GO 4759
4675: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4676: LD_ADDR_VAR 0 1
4680: PUSH
4681: LD_INT 2
4683: PUSH
4684: LD_INT 4
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: LD_INT 8
4692: PUSH
4693: LD_INT 11
4695: PUSH
4696: LD_INT 12
4698: PUSH
4699: LD_INT 15
4701: PUSH
4702: LD_INT 16
4704: PUSH
4705: LD_INT 22
4707: PUSH
4708: LD_INT 23
4710: PUSH
4711: LD_INT 26
4713: PUSH
4714: LD_INT 36
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_INT 102
4736: PUSH
4737: LD_INT 105
4739: PUSH
4740: LD_INT 106
4742: PUSH
4743: LD_INT 108
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: ST_TO_ADDR
4757: GO 7360
4759: LD_INT 5
4761: DOUBLE
4762: EQUAL
4763: IFTRUE 4767
4765: GO 4867
4767: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: LD_INT 4
4778: PUSH
4779: LD_INT 5
4781: PUSH
4782: LD_INT 6
4784: PUSH
4785: LD_INT 8
4787: PUSH
4788: LD_INT 11
4790: PUSH
4791: LD_INT 12
4793: PUSH
4794: LD_INT 15
4796: PUSH
4797: LD_INT 16
4799: PUSH
4800: LD_INT 22
4802: PUSH
4803: LD_INT 23
4805: PUSH
4806: LD_INT 25
4808: PUSH
4809: LD_INT 26
4811: PUSH
4812: LD_INT 36
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 101
4833: PUSH
4834: LD_INT 102
4836: PUSH
4837: LD_INT 105
4839: PUSH
4840: LD_INT 106
4842: PUSH
4843: LD_INT 108
4845: PUSH
4846: LD_INT 109
4848: PUSH
4849: LD_INT 112
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
4865: GO 7360
4867: LD_INT 6
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 4995
4875: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4876: LD_ADDR_VAR 0 1
4880: PUSH
4881: LD_INT 2
4883: PUSH
4884: LD_INT 4
4886: PUSH
4887: LD_INT 5
4889: PUSH
4890: LD_INT 6
4892: PUSH
4893: LD_INT 8
4895: PUSH
4896: LD_INT 11
4898: PUSH
4899: LD_INT 12
4901: PUSH
4902: LD_INT 15
4904: PUSH
4905: LD_INT 16
4907: PUSH
4908: LD_INT 20
4910: PUSH
4911: LD_INT 21
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 23
4919: PUSH
4920: LD_INT 25
4922: PUSH
4923: LD_INT 26
4925: PUSH
4926: LD_INT 30
4928: PUSH
4929: LD_INT 31
4931: PUSH
4932: LD_INT 32
4934: PUSH
4935: LD_INT 36
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 101
4961: PUSH
4962: LD_INT 102
4964: PUSH
4965: LD_INT 105
4967: PUSH
4968: LD_INT 106
4970: PUSH
4971: LD_INT 108
4973: PUSH
4974: LD_INT 109
4976: PUSH
4977: LD_INT 112
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: ST_TO_ADDR
4993: GO 7360
4995: LD_INT 7
4997: DOUBLE
4998: EQUAL
4999: IFTRUE 5003
5001: GO 5103
5003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5004: LD_ADDR_VAR 0 1
5008: PUSH
5009: LD_INT 2
5011: PUSH
5012: LD_INT 4
5014: PUSH
5015: LD_INT 5
5017: PUSH
5018: LD_INT 7
5020: PUSH
5021: LD_INT 11
5023: PUSH
5024: LD_INT 12
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: LD_INT 16
5032: PUSH
5033: LD_INT 20
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 22
5041: PUSH
5042: LD_INT 23
5044: PUSH
5045: LD_INT 25
5047: PUSH
5048: LD_INT 26
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: PUSH
5067: LD_INT 101
5069: PUSH
5070: LD_INT 102
5072: PUSH
5073: LD_INT 103
5075: PUSH
5076: LD_INT 105
5078: PUSH
5079: LD_INT 106
5081: PUSH
5082: LD_INT 108
5084: PUSH
5085: LD_INT 112
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: ST_TO_ADDR
5101: GO 7360
5103: LD_INT 8
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5239
5111: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5112: LD_ADDR_VAR 0 1
5116: PUSH
5117: LD_INT 2
5119: PUSH
5120: LD_INT 4
5122: PUSH
5123: LD_INT 5
5125: PUSH
5126: LD_INT 6
5128: PUSH
5129: LD_INT 7
5131: PUSH
5132: LD_INT 8
5134: PUSH
5135: LD_INT 11
5137: PUSH
5138: LD_INT 12
5140: PUSH
5141: LD_INT 15
5143: PUSH
5144: LD_INT 16
5146: PUSH
5147: LD_INT 20
5149: PUSH
5150: LD_INT 21
5152: PUSH
5153: LD_INT 22
5155: PUSH
5156: LD_INT 23
5158: PUSH
5159: LD_INT 25
5161: PUSH
5162: LD_INT 26
5164: PUSH
5165: LD_INT 30
5167: PUSH
5168: LD_INT 31
5170: PUSH
5171: LD_INT 32
5173: PUSH
5174: LD_INT 36
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 101
5201: PUSH
5202: LD_INT 102
5204: PUSH
5205: LD_INT 103
5207: PUSH
5208: LD_INT 105
5210: PUSH
5211: LD_INT 106
5213: PUSH
5214: LD_INT 108
5216: PUSH
5217: LD_INT 109
5219: PUSH
5220: LD_INT 112
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: ST_TO_ADDR
5237: GO 7360
5239: LD_INT 9
5241: DOUBLE
5242: EQUAL
5243: IFTRUE 5247
5245: GO 5383
5247: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5248: LD_ADDR_VAR 0 1
5252: PUSH
5253: LD_INT 2
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: LD_INT 5
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 7
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: LD_INT 11
5273: PUSH
5274: LD_INT 12
5276: PUSH
5277: LD_INT 15
5279: PUSH
5280: LD_INT 16
5282: PUSH
5283: LD_INT 20
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 23
5294: PUSH
5295: LD_INT 25
5297: PUSH
5298: LD_INT 26
5300: PUSH
5301: LD_INT 28
5303: PUSH
5304: LD_INT 30
5306: PUSH
5307: LD_INT 31
5309: PUSH
5310: LD_INT 32
5312: PUSH
5313: LD_INT 36
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 101
5341: PUSH
5342: LD_INT 102
5344: PUSH
5345: LD_INT 103
5347: PUSH
5348: LD_INT 105
5350: PUSH
5351: LD_INT 106
5353: PUSH
5354: LD_INT 108
5356: PUSH
5357: LD_INT 109
5359: PUSH
5360: LD_INT 112
5362: PUSH
5363: LD_INT 114
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: ST_TO_ADDR
5381: GO 7360
5383: LD_INT 10
5385: DOUBLE
5386: EQUAL
5387: IFTRUE 5391
5389: GO 5575
5391: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5392: LD_ADDR_VAR 0 1
5396: PUSH
5397: LD_INT 2
5399: PUSH
5400: LD_INT 4
5402: PUSH
5403: LD_INT 5
5405: PUSH
5406: LD_INT 6
5408: PUSH
5409: LD_INT 7
5411: PUSH
5412: LD_INT 8
5414: PUSH
5415: LD_INT 9
5417: PUSH
5418: LD_INT 10
5420: PUSH
5421: LD_INT 11
5423: PUSH
5424: LD_INT 12
5426: PUSH
5427: LD_INT 13
5429: PUSH
5430: LD_INT 14
5432: PUSH
5433: LD_INT 15
5435: PUSH
5436: LD_INT 16
5438: PUSH
5439: LD_INT 17
5441: PUSH
5442: LD_INT 18
5444: PUSH
5445: LD_INT 19
5447: PUSH
5448: LD_INT 20
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: LD_INT 25
5465: PUSH
5466: LD_INT 26
5468: PUSH
5469: LD_INT 28
5471: PUSH
5472: LD_INT 30
5474: PUSH
5475: LD_INT 31
5477: PUSH
5478: LD_INT 32
5480: PUSH
5481: LD_INT 36
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: PUSH
5515: LD_INT 101
5517: PUSH
5518: LD_INT 102
5520: PUSH
5521: LD_INT 103
5523: PUSH
5524: LD_INT 104
5526: PUSH
5527: LD_INT 105
5529: PUSH
5530: LD_INT 106
5532: PUSH
5533: LD_INT 107
5535: PUSH
5536: LD_INT 108
5538: PUSH
5539: LD_INT 109
5541: PUSH
5542: LD_INT 110
5544: PUSH
5545: LD_INT 111
5547: PUSH
5548: LD_INT 112
5550: PUSH
5551: LD_INT 114
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: ST_TO_ADDR
5573: GO 7360
5575: LD_INT 11
5577: DOUBLE
5578: EQUAL
5579: IFTRUE 5583
5581: GO 5775
5583: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5584: LD_ADDR_VAR 0 1
5588: PUSH
5589: LD_INT 2
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: LD_INT 4
5597: PUSH
5598: LD_INT 5
5600: PUSH
5601: LD_INT 6
5603: PUSH
5604: LD_INT 7
5606: PUSH
5607: LD_INT 8
5609: PUSH
5610: LD_INT 9
5612: PUSH
5613: LD_INT 10
5615: PUSH
5616: LD_INT 11
5618: PUSH
5619: LD_INT 12
5621: PUSH
5622: LD_INT 13
5624: PUSH
5625: LD_INT 14
5627: PUSH
5628: LD_INT 15
5630: PUSH
5631: LD_INT 16
5633: PUSH
5634: LD_INT 17
5636: PUSH
5637: LD_INT 18
5639: PUSH
5640: LD_INT 19
5642: PUSH
5643: LD_INT 20
5645: PUSH
5646: LD_INT 21
5648: PUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 23
5654: PUSH
5655: LD_INT 24
5657: PUSH
5658: LD_INT 25
5660: PUSH
5661: LD_INT 26
5663: PUSH
5664: LD_INT 28
5666: PUSH
5667: LD_INT 30
5669: PUSH
5670: LD_INT 31
5672: PUSH
5673: LD_INT 32
5675: PUSH
5676: LD_INT 34
5678: PUSH
5679: LD_INT 36
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 101
5717: PUSH
5718: LD_INT 102
5720: PUSH
5721: LD_INT 103
5723: PUSH
5724: LD_INT 104
5726: PUSH
5727: LD_INT 105
5729: PUSH
5730: LD_INT 106
5732: PUSH
5733: LD_INT 107
5735: PUSH
5736: LD_INT 108
5738: PUSH
5739: LD_INT 109
5741: PUSH
5742: LD_INT 110
5744: PUSH
5745: LD_INT 111
5747: PUSH
5748: LD_INT 112
5750: PUSH
5751: LD_INT 114
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: ST_TO_ADDR
5773: GO 7360
5775: LD_INT 12
5777: DOUBLE
5778: EQUAL
5779: IFTRUE 5783
5781: GO 5991
5783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5784: LD_ADDR_VAR 0 1
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 3
5797: PUSH
5798: LD_INT 4
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: LD_INT 6
5806: PUSH
5807: LD_INT 7
5809: PUSH
5810: LD_INT 8
5812: PUSH
5813: LD_INT 9
5815: PUSH
5816: LD_INT 10
5818: PUSH
5819: LD_INT 11
5821: PUSH
5822: LD_INT 12
5824: PUSH
5825: LD_INT 13
5827: PUSH
5828: LD_INT 14
5830: PUSH
5831: LD_INT 15
5833: PUSH
5834: LD_INT 16
5836: PUSH
5837: LD_INT 17
5839: PUSH
5840: LD_INT 18
5842: PUSH
5843: LD_INT 19
5845: PUSH
5846: LD_INT 20
5848: PUSH
5849: LD_INT 21
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_INT 23
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 26
5866: PUSH
5867: LD_INT 27
5869: PUSH
5870: LD_INT 28
5872: PUSH
5873: LD_INT 30
5875: PUSH
5876: LD_INT 31
5878: PUSH
5879: LD_INT 32
5881: PUSH
5882: LD_INT 33
5884: PUSH
5885: LD_INT 34
5887: PUSH
5888: LD_INT 36
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 101
5929: PUSH
5930: LD_INT 102
5932: PUSH
5933: LD_INT 103
5935: PUSH
5936: LD_INT 104
5938: PUSH
5939: LD_INT 105
5941: PUSH
5942: LD_INT 106
5944: PUSH
5945: LD_INT 107
5947: PUSH
5948: LD_INT 108
5950: PUSH
5951: LD_INT 109
5953: PUSH
5954: LD_INT 110
5956: PUSH
5957: LD_INT 111
5959: PUSH
5960: LD_INT 112
5962: PUSH
5963: LD_INT 113
5965: PUSH
5966: LD_INT 114
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: ST_TO_ADDR
5989: GO 7360
5991: LD_INT 13
5993: DOUBLE
5994: EQUAL
5995: IFTRUE 5999
5997: GO 6195
5999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6000: LD_ADDR_VAR 0 1
6004: PUSH
6005: LD_INT 1
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: LD_INT 3
6013: PUSH
6014: LD_INT 4
6016: PUSH
6017: LD_INT 5
6019: PUSH
6020: LD_INT 8
6022: PUSH
6023: LD_INT 9
6025: PUSH
6026: LD_INT 10
6028: PUSH
6029: LD_INT 11
6031: PUSH
6032: LD_INT 12
6034: PUSH
6035: LD_INT 14
6037: PUSH
6038: LD_INT 15
6040: PUSH
6041: LD_INT 16
6043: PUSH
6044: LD_INT 17
6046: PUSH
6047: LD_INT 18
6049: PUSH
6050: LD_INT 19
6052: PUSH
6053: LD_INT 20
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 23
6064: PUSH
6065: LD_INT 24
6067: PUSH
6068: LD_INT 25
6070: PUSH
6071: LD_INT 26
6073: PUSH
6074: LD_INT 27
6076: PUSH
6077: LD_INT 28
6079: PUSH
6080: LD_INT 30
6082: PUSH
6083: LD_INT 31
6085: PUSH
6086: LD_INT 32
6088: PUSH
6089: LD_INT 33
6091: PUSH
6092: LD_INT 34
6094: PUSH
6095: LD_INT 36
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 101
6133: PUSH
6134: LD_INT 102
6136: PUSH
6137: LD_INT 103
6139: PUSH
6140: LD_INT 104
6142: PUSH
6143: LD_INT 105
6145: PUSH
6146: LD_INT 106
6148: PUSH
6149: LD_INT 107
6151: PUSH
6152: LD_INT 108
6154: PUSH
6155: LD_INT 109
6157: PUSH
6158: LD_INT 110
6160: PUSH
6161: LD_INT 111
6163: PUSH
6164: LD_INT 112
6166: PUSH
6167: LD_INT 113
6169: PUSH
6170: LD_INT 114
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: ST_TO_ADDR
6193: GO 7360
6195: LD_INT 14
6197: DOUBLE
6198: EQUAL
6199: IFTRUE 6203
6201: GO 6415
6203: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6204: LD_ADDR_VAR 0 1
6208: PUSH
6209: LD_INT 1
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 4
6220: PUSH
6221: LD_INT 5
6223: PUSH
6224: LD_INT 6
6226: PUSH
6227: LD_INT 7
6229: PUSH
6230: LD_INT 8
6232: PUSH
6233: LD_INT 9
6235: PUSH
6236: LD_INT 10
6238: PUSH
6239: LD_INT 11
6241: PUSH
6242: LD_INT 12
6244: PUSH
6245: LD_INT 13
6247: PUSH
6248: LD_INT 14
6250: PUSH
6251: LD_INT 15
6253: PUSH
6254: LD_INT 16
6256: PUSH
6257: LD_INT 17
6259: PUSH
6260: LD_INT 18
6262: PUSH
6263: LD_INT 19
6265: PUSH
6266: LD_INT 20
6268: PUSH
6269: LD_INT 21
6271: PUSH
6272: LD_INT 22
6274: PUSH
6275: LD_INT 23
6277: PUSH
6278: LD_INT 24
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 26
6286: PUSH
6287: LD_INT 27
6289: PUSH
6290: LD_INT 28
6292: PUSH
6293: LD_INT 29
6295: PUSH
6296: LD_INT 30
6298: PUSH
6299: LD_INT 31
6301: PUSH
6302: LD_INT 32
6304: PUSH
6305: LD_INT 33
6307: PUSH
6308: LD_INT 34
6310: PUSH
6311: LD_INT 36
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 101
6353: PUSH
6354: LD_INT 102
6356: PUSH
6357: LD_INT 103
6359: PUSH
6360: LD_INT 104
6362: PUSH
6363: LD_INT 105
6365: PUSH
6366: LD_INT 106
6368: PUSH
6369: LD_INT 107
6371: PUSH
6372: LD_INT 108
6374: PUSH
6375: LD_INT 109
6377: PUSH
6378: LD_INT 110
6380: PUSH
6381: LD_INT 111
6383: PUSH
6384: LD_INT 112
6386: PUSH
6387: LD_INT 113
6389: PUSH
6390: LD_INT 114
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: ST_TO_ADDR
6413: GO 7360
6415: LD_INT 15
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6635
6423: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_INT 4
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: LD_INT 6
6446: PUSH
6447: LD_INT 7
6449: PUSH
6450: LD_INT 8
6452: PUSH
6453: LD_INT 9
6455: PUSH
6456: LD_INT 10
6458: PUSH
6459: LD_INT 11
6461: PUSH
6462: LD_INT 12
6464: PUSH
6465: LD_INT 13
6467: PUSH
6468: LD_INT 14
6470: PUSH
6471: LD_INT 15
6473: PUSH
6474: LD_INT 16
6476: PUSH
6477: LD_INT 17
6479: PUSH
6480: LD_INT 18
6482: PUSH
6483: LD_INT 19
6485: PUSH
6486: LD_INT 20
6488: PUSH
6489: LD_INT 21
6491: PUSH
6492: LD_INT 22
6494: PUSH
6495: LD_INT 23
6497: PUSH
6498: LD_INT 24
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 26
6506: PUSH
6507: LD_INT 27
6509: PUSH
6510: LD_INT 28
6512: PUSH
6513: LD_INT 29
6515: PUSH
6516: LD_INT 30
6518: PUSH
6519: LD_INT 31
6521: PUSH
6522: LD_INT 32
6524: PUSH
6525: LD_INT 33
6527: PUSH
6528: LD_INT 34
6530: PUSH
6531: LD_INT 36
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 101
6573: PUSH
6574: LD_INT 102
6576: PUSH
6577: LD_INT 103
6579: PUSH
6580: LD_INT 104
6582: PUSH
6583: LD_INT 105
6585: PUSH
6586: LD_INT 106
6588: PUSH
6589: LD_INT 107
6591: PUSH
6592: LD_INT 108
6594: PUSH
6595: LD_INT 109
6597: PUSH
6598: LD_INT 110
6600: PUSH
6601: LD_INT 111
6603: PUSH
6604: LD_INT 112
6606: PUSH
6607: LD_INT 113
6609: PUSH
6610: LD_INT 114
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: ST_TO_ADDR
6633: GO 7360
6635: LD_INT 16
6637: DOUBLE
6638: EQUAL
6639: IFTRUE 6643
6641: GO 6767
6643: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6644: LD_ADDR_VAR 0 1
6648: PUSH
6649: LD_INT 2
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: LD_INT 5
6657: PUSH
6658: LD_INT 7
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: LD_INT 12
6666: PUSH
6667: LD_INT 15
6669: PUSH
6670: LD_INT 16
6672: PUSH
6673: LD_INT 20
6675: PUSH
6676: LD_INT 21
6678: PUSH
6679: LD_INT 22
6681: PUSH
6682: LD_INT 23
6684: PUSH
6685: LD_INT 25
6687: PUSH
6688: LD_INT 26
6690: PUSH
6691: LD_INT 30
6693: PUSH
6694: LD_INT 31
6696: PUSH
6697: LD_INT 32
6699: PUSH
6700: LD_INT 33
6702: PUSH
6703: LD_INT 34
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 101
6729: PUSH
6730: LD_INT 102
6732: PUSH
6733: LD_INT 103
6735: PUSH
6736: LD_INT 106
6738: PUSH
6739: LD_INT 108
6741: PUSH
6742: LD_INT 112
6744: PUSH
6745: LD_INT 113
6747: PUSH
6748: LD_INT 114
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: ST_TO_ADDR
6765: GO 7360
6767: LD_INT 17
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6987
6775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6776: LD_ADDR_VAR 0 1
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 3
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: LD_INT 6
6798: PUSH
6799: LD_INT 7
6801: PUSH
6802: LD_INT 8
6804: PUSH
6805: LD_INT 9
6807: PUSH
6808: LD_INT 10
6810: PUSH
6811: LD_INT 11
6813: PUSH
6814: LD_INT 12
6816: PUSH
6817: LD_INT 13
6819: PUSH
6820: LD_INT 14
6822: PUSH
6823: LD_INT 15
6825: PUSH
6826: LD_INT 16
6828: PUSH
6829: LD_INT 17
6831: PUSH
6832: LD_INT 18
6834: PUSH
6835: LD_INT 19
6837: PUSH
6838: LD_INT 20
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 23
6849: PUSH
6850: LD_INT 24
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 26
6858: PUSH
6859: LD_INT 27
6861: PUSH
6862: LD_INT 28
6864: PUSH
6865: LD_INT 29
6867: PUSH
6868: LD_INT 30
6870: PUSH
6871: LD_INT 31
6873: PUSH
6874: LD_INT 32
6876: PUSH
6877: LD_INT 33
6879: PUSH
6880: LD_INT 34
6882: PUSH
6883: LD_INT 36
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 101
6925: PUSH
6926: LD_INT 102
6928: PUSH
6929: LD_INT 103
6931: PUSH
6932: LD_INT 104
6934: PUSH
6935: LD_INT 105
6937: PUSH
6938: LD_INT 106
6940: PUSH
6941: LD_INT 107
6943: PUSH
6944: LD_INT 108
6946: PUSH
6947: LD_INT 109
6949: PUSH
6950: LD_INT 110
6952: PUSH
6953: LD_INT 111
6955: PUSH
6956: LD_INT 112
6958: PUSH
6959: LD_INT 113
6961: PUSH
6962: LD_INT 114
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: ST_TO_ADDR
6985: GO 7360
6987: LD_INT 18
6989: DOUBLE
6990: EQUAL
6991: IFTRUE 6995
6993: GO 7131
6995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6996: LD_ADDR_VAR 0 1
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: LD_INT 5
7009: PUSH
7010: LD_INT 7
7012: PUSH
7013: LD_INT 11
7015: PUSH
7016: LD_INT 12
7018: PUSH
7019: LD_INT 15
7021: PUSH
7022: LD_INT 16
7024: PUSH
7025: LD_INT 20
7027: PUSH
7028: LD_INT 21
7030: PUSH
7031: LD_INT 22
7033: PUSH
7034: LD_INT 23
7036: PUSH
7037: LD_INT 25
7039: PUSH
7040: LD_INT 26
7042: PUSH
7043: LD_INT 30
7045: PUSH
7046: LD_INT 31
7048: PUSH
7049: LD_INT 32
7051: PUSH
7052: LD_INT 33
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 35
7060: PUSH
7061: LD_INT 36
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 101
7089: PUSH
7090: LD_INT 102
7092: PUSH
7093: LD_INT 103
7095: PUSH
7096: LD_INT 106
7098: PUSH
7099: LD_INT 108
7101: PUSH
7102: LD_INT 112
7104: PUSH
7105: LD_INT 113
7107: PUSH
7108: LD_INT 114
7110: PUSH
7111: LD_INT 115
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: ST_TO_ADDR
7129: GO 7360
7131: LD_INT 19
7133: DOUBLE
7134: EQUAL
7135: IFTRUE 7139
7137: GO 7359
7139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7140: LD_ADDR_VAR 0 1
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: LD_INT 2
7150: PUSH
7151: LD_INT 3
7153: PUSH
7154: LD_INT 4
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: LD_INT 6
7162: PUSH
7163: LD_INT 7
7165: PUSH
7166: LD_INT 8
7168: PUSH
7169: LD_INT 9
7171: PUSH
7172: LD_INT 10
7174: PUSH
7175: LD_INT 11
7177: PUSH
7178: LD_INT 12
7180: PUSH
7181: LD_INT 13
7183: PUSH
7184: LD_INT 14
7186: PUSH
7187: LD_INT 15
7189: PUSH
7190: LD_INT 16
7192: PUSH
7193: LD_INT 17
7195: PUSH
7196: LD_INT 18
7198: PUSH
7199: LD_INT 19
7201: PUSH
7202: LD_INT 20
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 22
7210: PUSH
7211: LD_INT 23
7213: PUSH
7214: LD_INT 24
7216: PUSH
7217: LD_INT 25
7219: PUSH
7220: LD_INT 26
7222: PUSH
7223: LD_INT 27
7225: PUSH
7226: LD_INT 28
7228: PUSH
7229: LD_INT 29
7231: PUSH
7232: LD_INT 30
7234: PUSH
7235: LD_INT 31
7237: PUSH
7238: LD_INT 32
7240: PUSH
7241: LD_INT 33
7243: PUSH
7244: LD_INT 34
7246: PUSH
7247: LD_INT 35
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 101
7293: PUSH
7294: LD_INT 102
7296: PUSH
7297: LD_INT 103
7299: PUSH
7300: LD_INT 104
7302: PUSH
7303: LD_INT 105
7305: PUSH
7306: LD_INT 106
7308: PUSH
7309: LD_INT 107
7311: PUSH
7312: LD_INT 108
7314: PUSH
7315: LD_INT 109
7317: PUSH
7318: LD_INT 110
7320: PUSH
7321: LD_INT 111
7323: PUSH
7324: LD_INT 112
7326: PUSH
7327: LD_INT 113
7329: PUSH
7330: LD_INT 114
7332: PUSH
7333: LD_INT 115
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: ST_TO_ADDR
7357: GO 7360
7359: POP
// end else
7360: GO 7579
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7362: LD_ADDR_VAR 0 1
7366: PUSH
7367: LD_INT 1
7369: PUSH
7370: LD_INT 2
7372: PUSH
7373: LD_INT 3
7375: PUSH
7376: LD_INT 4
7378: PUSH
7379: LD_INT 5
7381: PUSH
7382: LD_INT 6
7384: PUSH
7385: LD_INT 7
7387: PUSH
7388: LD_INT 8
7390: PUSH
7391: LD_INT 9
7393: PUSH
7394: LD_INT 10
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: LD_INT 12
7402: PUSH
7403: LD_INT 13
7405: PUSH
7406: LD_INT 14
7408: PUSH
7409: LD_INT 15
7411: PUSH
7412: LD_INT 16
7414: PUSH
7415: LD_INT 17
7417: PUSH
7418: LD_INT 18
7420: PUSH
7421: LD_INT 19
7423: PUSH
7424: LD_INT 20
7426: PUSH
7427: LD_INT 21
7429: PUSH
7430: LD_INT 22
7432: PUSH
7433: LD_INT 23
7435: PUSH
7436: LD_INT 24
7438: PUSH
7439: LD_INT 25
7441: PUSH
7442: LD_INT 26
7444: PUSH
7445: LD_INT 27
7447: PUSH
7448: LD_INT 28
7450: PUSH
7451: LD_INT 29
7453: PUSH
7454: LD_INT 30
7456: PUSH
7457: LD_INT 31
7459: PUSH
7460: LD_INT 32
7462: PUSH
7463: LD_INT 33
7465: PUSH
7466: LD_INT 34
7468: PUSH
7469: LD_INT 35
7471: PUSH
7472: LD_INT 36
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 101
7515: PUSH
7516: LD_INT 102
7518: PUSH
7519: LD_INT 103
7521: PUSH
7522: LD_INT 104
7524: PUSH
7525: LD_INT 105
7527: PUSH
7528: LD_INT 106
7530: PUSH
7531: LD_INT 107
7533: PUSH
7534: LD_INT 108
7536: PUSH
7537: LD_INT 109
7539: PUSH
7540: LD_INT 110
7542: PUSH
7543: LD_INT 111
7545: PUSH
7546: LD_INT 112
7548: PUSH
7549: LD_INT 113
7551: PUSH
7552: LD_INT 114
7554: PUSH
7555: LD_INT 115
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: ST_TO_ADDR
// if result then
7579: LD_VAR 0 1
7583: IFFALSE 7872
// begin normal :=  ;
7585: LD_ADDR_VAR 0 3
7589: PUSH
7590: LD_STRING 
7592: ST_TO_ADDR
// hardcore :=  ;
7593: LD_ADDR_VAR 0 4
7597: PUSH
7598: LD_STRING 
7600: ST_TO_ADDR
// for i = 1 to normalCounter do
7601: LD_ADDR_VAR 0 5
7605: PUSH
7606: DOUBLE
7607: LD_INT 1
7609: DEC
7610: ST_TO_ADDR
7611: LD_EXP 22
7615: PUSH
7616: FOR_TO
7617: IFFALSE 7718
// begin tmp := 0 ;
7619: LD_ADDR_VAR 0 2
7623: PUSH
7624: LD_STRING 0
7626: ST_TO_ADDR
// if result [ 1 ] then
7627: LD_VAR 0 1
7631: PUSH
7632: LD_INT 1
7634: ARRAY
7635: IFFALSE 7700
// if result [ 1 ] [ 1 ] = i then
7637: LD_VAR 0 1
7641: PUSH
7642: LD_INT 1
7644: ARRAY
7645: PUSH
7646: LD_INT 1
7648: ARRAY
7649: PUSH
7650: LD_VAR 0 5
7654: EQUAL
7655: IFFALSE 7700
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7657: LD_ADDR_VAR 0 1
7661: PUSH
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 1
7669: PPUSH
7670: LD_VAR 0 1
7674: PUSH
7675: LD_INT 1
7677: ARRAY
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 3
7686: PPUSH
7687: CALL_OW 1
7691: ST_TO_ADDR
// tmp := 1 ;
7692: LD_ADDR_VAR 0 2
7696: PUSH
7697: LD_STRING 1
7699: ST_TO_ADDR
// end ; normal := normal & tmp ;
7700: LD_ADDR_VAR 0 3
7704: PUSH
7705: LD_VAR 0 3
7709: PUSH
7710: LD_VAR 0 2
7714: STR
7715: ST_TO_ADDR
// end ;
7716: GO 7616
7718: POP
7719: POP
// for i = 1 to hardcoreCounter do
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: DOUBLE
7726: LD_INT 1
7728: DEC
7729: ST_TO_ADDR
7730: LD_EXP 23
7734: PUSH
7735: FOR_TO
7736: IFFALSE 7841
// begin tmp := 0 ;
7738: LD_ADDR_VAR 0 2
7742: PUSH
7743: LD_STRING 0
7745: ST_TO_ADDR
// if result [ 2 ] then
7746: LD_VAR 0 1
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: IFFALSE 7823
// if result [ 2 ] [ 1 ] = 100 + i then
7756: LD_VAR 0 1
7760: PUSH
7761: LD_INT 2
7763: ARRAY
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PUSH
7769: LD_INT 100
7771: PUSH
7772: LD_VAR 0 5
7776: PLUS
7777: EQUAL
7778: IFFALSE 7823
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7780: LD_ADDR_VAR 0 1
7784: PUSH
7785: LD_VAR 0 1
7789: PPUSH
7790: LD_INT 2
7792: PPUSH
7793: LD_VAR 0 1
7797: PUSH
7798: LD_INT 2
7800: ARRAY
7801: PPUSH
7802: LD_INT 1
7804: PPUSH
7805: CALL_OW 3
7809: PPUSH
7810: CALL_OW 1
7814: ST_TO_ADDR
// tmp := 1 ;
7815: LD_ADDR_VAR 0 2
7819: PUSH
7820: LD_STRING 1
7822: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7823: LD_ADDR_VAR 0 4
7827: PUSH
7828: LD_VAR 0 4
7832: PUSH
7833: LD_VAR 0 2
7837: STR
7838: ST_TO_ADDR
// end ;
7839: GO 7735
7841: POP
7842: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7843: LD_STRING getStreamItemsFromMission("
7845: PUSH
7846: LD_VAR 0 3
7850: STR
7851: PUSH
7852: LD_STRING ","
7854: STR
7855: PUSH
7856: LD_VAR 0 4
7860: STR
7861: PUSH
7862: LD_STRING ")
7864: STR
7865: PPUSH
7866: CALL_OW 559
// end else
7870: GO 7879
// ToLua ( getStreamItemsFromMission("","") ) ;
7872: LD_STRING getStreamItemsFromMission("","")
7874: PPUSH
7875: CALL_OW 559
// end ;
7879: LD_VAR 0 1
7883: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7884: LD_VAR 0 2
7888: PUSH
7889: LD_INT 100
7891: EQUAL
7892: IFFALSE 8841
// begin if not StreamModeActive then
7894: LD_EXP 21
7898: NOT
7899: IFFALSE 7909
// StreamModeActive := true ;
7901: LD_ADDR_EXP 21
7905: PUSH
7906: LD_INT 1
7908: ST_TO_ADDR
// if p3 = 0 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 0
7916: EQUAL
7917: IFFALSE 7923
// InitStreamMode ;
7919: CALL 3962 0 0
// if p3 = 1 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 1
7930: EQUAL
7931: IFFALSE 7941
// sRocket := true ;
7933: LD_ADDR_EXP 26
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// if p3 = 2 then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 2
7948: EQUAL
7949: IFFALSE 7959
// sSpeed := true ;
7951: LD_ADDR_EXP 25
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// if p3 = 3 then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 3
7966: EQUAL
7967: IFFALSE 7977
// sEngine := true ;
7969: LD_ADDR_EXP 27
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// if p3 = 4 then
7977: LD_VAR 0 3
7981: PUSH
7982: LD_INT 4
7984: EQUAL
7985: IFFALSE 7995
// sSpec := true ;
7987: LD_ADDR_EXP 24
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if p3 = 5 then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 5
8002: EQUAL
8003: IFFALSE 8013
// sLevel := true ;
8005: LD_ADDR_EXP 28
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// if p3 = 6 then
8013: LD_VAR 0 3
8017: PUSH
8018: LD_INT 6
8020: EQUAL
8021: IFFALSE 8031
// sArmoury := true ;
8023: LD_ADDR_EXP 29
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// if p3 = 7 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 7
8038: EQUAL
8039: IFFALSE 8049
// sRadar := true ;
8041: LD_ADDR_EXP 30
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// if p3 = 8 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 8
8056: EQUAL
8057: IFFALSE 8067
// sBunker := true ;
8059: LD_ADDR_EXP 31
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// if p3 = 9 then
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 9
8074: EQUAL
8075: IFFALSE 8085
// sHack := true ;
8077: LD_ADDR_EXP 32
8081: PUSH
8082: LD_INT 1
8084: ST_TO_ADDR
// if p3 = 10 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 10
8092: EQUAL
8093: IFFALSE 8103
// sFire := true ;
8095: LD_ADDR_EXP 33
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// if p3 = 11 then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 11
8110: EQUAL
8111: IFFALSE 8121
// sRefresh := true ;
8113: LD_ADDR_EXP 34
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// if p3 = 12 then
8121: LD_VAR 0 3
8125: PUSH
8126: LD_INT 12
8128: EQUAL
8129: IFFALSE 8139
// sExp := true ;
8131: LD_ADDR_EXP 35
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if p3 = 13 then
8139: LD_VAR 0 3
8143: PUSH
8144: LD_INT 13
8146: EQUAL
8147: IFFALSE 8157
// sDepot := true ;
8149: LD_ADDR_EXP 36
8153: PUSH
8154: LD_INT 1
8156: ST_TO_ADDR
// if p3 = 14 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 14
8164: EQUAL
8165: IFFALSE 8175
// sFlag := true ;
8167: LD_ADDR_EXP 37
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// if p3 = 15 then
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 15
8182: EQUAL
8183: IFFALSE 8193
// sKamikadze := true ;
8185: LD_ADDR_EXP 45
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if p3 = 16 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 16
8200: EQUAL
8201: IFFALSE 8211
// sTroll := true ;
8203: LD_ADDR_EXP 46
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if p3 = 17 then
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 17
8218: EQUAL
8219: IFFALSE 8229
// sSlow := true ;
8221: LD_ADDR_EXP 47
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// if p3 = 18 then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 18
8236: EQUAL
8237: IFFALSE 8247
// sLack := true ;
8239: LD_ADDR_EXP 48
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if p3 = 19 then
8247: LD_VAR 0 3
8251: PUSH
8252: LD_INT 19
8254: EQUAL
8255: IFFALSE 8265
// sTank := true ;
8257: LD_ADDR_EXP 50
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// if p3 = 20 then
8265: LD_VAR 0 3
8269: PUSH
8270: LD_INT 20
8272: EQUAL
8273: IFFALSE 8283
// sRemote := true ;
8275: LD_ADDR_EXP 51
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// if p3 = 21 then
8283: LD_VAR 0 3
8287: PUSH
8288: LD_INT 21
8290: EQUAL
8291: IFFALSE 8301
// sPowell := true ;
8293: LD_ADDR_EXP 52
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// if p3 = 22 then
8301: LD_VAR 0 3
8305: PUSH
8306: LD_INT 22
8308: EQUAL
8309: IFFALSE 8319
// sTeleport := true ;
8311: LD_ADDR_EXP 55
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// if p3 = 23 then
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 23
8326: EQUAL
8327: IFFALSE 8337
// sOilTower := true ;
8329: LD_ADDR_EXP 57
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// if p3 = 24 then
8337: LD_VAR 0 3
8341: PUSH
8342: LD_INT 24
8344: EQUAL
8345: IFFALSE 8355
// sShovel := true ;
8347: LD_ADDR_EXP 58
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// if p3 = 25 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_INT 25
8362: EQUAL
8363: IFFALSE 8373
// sSheik := true ;
8365: LD_ADDR_EXP 59
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// if p3 = 26 then
8373: LD_VAR 0 3
8377: PUSH
8378: LD_INT 26
8380: EQUAL
8381: IFFALSE 8391
// sEarthquake := true ;
8383: LD_ADDR_EXP 61
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// if p3 = 27 then
8391: LD_VAR 0 3
8395: PUSH
8396: LD_INT 27
8398: EQUAL
8399: IFFALSE 8409
// sAI := true ;
8401: LD_ADDR_EXP 62
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// if p3 = 28 then
8409: LD_VAR 0 3
8413: PUSH
8414: LD_INT 28
8416: EQUAL
8417: IFFALSE 8427
// sCargo := true ;
8419: LD_ADDR_EXP 65
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// if p3 = 29 then
8427: LD_VAR 0 3
8431: PUSH
8432: LD_INT 29
8434: EQUAL
8435: IFFALSE 8445
// sDLaser := true ;
8437: LD_ADDR_EXP 66
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
// if p3 = 30 then
8445: LD_VAR 0 3
8449: PUSH
8450: LD_INT 30
8452: EQUAL
8453: IFFALSE 8463
// sExchange := true ;
8455: LD_ADDR_EXP 67
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// if p3 = 31 then
8463: LD_VAR 0 3
8467: PUSH
8468: LD_INT 31
8470: EQUAL
8471: IFFALSE 8481
// sFac := true ;
8473: LD_ADDR_EXP 68
8477: PUSH
8478: LD_INT 1
8480: ST_TO_ADDR
// if p3 = 32 then
8481: LD_VAR 0 3
8485: PUSH
8486: LD_INT 32
8488: EQUAL
8489: IFFALSE 8499
// sPower := true ;
8491: LD_ADDR_EXP 69
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if p3 = 33 then
8499: LD_VAR 0 3
8503: PUSH
8504: LD_INT 33
8506: EQUAL
8507: IFFALSE 8517
// sRandom := true ;
8509: LD_ADDR_EXP 70
8513: PUSH
8514: LD_INT 1
8516: ST_TO_ADDR
// if p3 = 34 then
8517: LD_VAR 0 3
8521: PUSH
8522: LD_INT 34
8524: EQUAL
8525: IFFALSE 8535
// sShield := true ;
8527: LD_ADDR_EXP 71
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// if p3 = 35 then
8535: LD_VAR 0 3
8539: PUSH
8540: LD_INT 35
8542: EQUAL
8543: IFFALSE 8553
// sTime := true ;
8545: LD_ADDR_EXP 72
8549: PUSH
8550: LD_INT 1
8552: ST_TO_ADDR
// if p3 = 36 then
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 36
8560: EQUAL
8561: IFFALSE 8571
// sTools := true ;
8563: LD_ADDR_EXP 73
8567: PUSH
8568: LD_INT 1
8570: ST_TO_ADDR
// if p3 = 101 then
8571: LD_VAR 0 3
8575: PUSH
8576: LD_INT 101
8578: EQUAL
8579: IFFALSE 8589
// sSold := true ;
8581: LD_ADDR_EXP 38
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// if p3 = 102 then
8589: LD_VAR 0 3
8593: PUSH
8594: LD_INT 102
8596: EQUAL
8597: IFFALSE 8607
// sDiff := true ;
8599: LD_ADDR_EXP 39
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// if p3 = 103 then
8607: LD_VAR 0 3
8611: PUSH
8612: LD_INT 103
8614: EQUAL
8615: IFFALSE 8625
// sFog := true ;
8617: LD_ADDR_EXP 42
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// if p3 = 104 then
8625: LD_VAR 0 3
8629: PUSH
8630: LD_INT 104
8632: EQUAL
8633: IFFALSE 8643
// sReset := true ;
8635: LD_ADDR_EXP 43
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// if p3 = 105 then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_INT 105
8650: EQUAL
8651: IFFALSE 8661
// sSun := true ;
8653: LD_ADDR_EXP 44
8657: PUSH
8658: LD_INT 1
8660: ST_TO_ADDR
// if p3 = 106 then
8661: LD_VAR 0 3
8665: PUSH
8666: LD_INT 106
8668: EQUAL
8669: IFFALSE 8679
// sTiger := true ;
8671: LD_ADDR_EXP 40
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// if p3 = 107 then
8679: LD_VAR 0 3
8683: PUSH
8684: LD_INT 107
8686: EQUAL
8687: IFFALSE 8697
// sBomb := true ;
8689: LD_ADDR_EXP 41
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
// if p3 = 108 then
8697: LD_VAR 0 3
8701: PUSH
8702: LD_INT 108
8704: EQUAL
8705: IFFALSE 8715
// sWound := true ;
8707: LD_ADDR_EXP 49
8711: PUSH
8712: LD_INT 1
8714: ST_TO_ADDR
// if p3 = 109 then
8715: LD_VAR 0 3
8719: PUSH
8720: LD_INT 109
8722: EQUAL
8723: IFFALSE 8733
// sBetray := true ;
8725: LD_ADDR_EXP 53
8729: PUSH
8730: LD_INT 1
8732: ST_TO_ADDR
// if p3 = 110 then
8733: LD_VAR 0 3
8737: PUSH
8738: LD_INT 110
8740: EQUAL
8741: IFFALSE 8751
// sContamin := true ;
8743: LD_ADDR_EXP 54
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// if p3 = 111 then
8751: LD_VAR 0 3
8755: PUSH
8756: LD_INT 111
8758: EQUAL
8759: IFFALSE 8769
// sOil := true ;
8761: LD_ADDR_EXP 56
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
// if p3 = 112 then
8769: LD_VAR 0 3
8773: PUSH
8774: LD_INT 112
8776: EQUAL
8777: IFFALSE 8787
// sStu := true ;
8779: LD_ADDR_EXP 60
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// if p3 = 113 then
8787: LD_VAR 0 3
8791: PUSH
8792: LD_INT 113
8794: EQUAL
8795: IFFALSE 8805
// sBazooka := true ;
8797: LD_ADDR_EXP 63
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// if p3 = 114 then
8805: LD_VAR 0 3
8809: PUSH
8810: LD_INT 114
8812: EQUAL
8813: IFFALSE 8823
// sMortar := true ;
8815: LD_ADDR_EXP 64
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// if p3 = 115 then
8823: LD_VAR 0 3
8827: PUSH
8828: LD_INT 115
8830: EQUAL
8831: IFFALSE 8841
// sRanger := true ;
8833: LD_ADDR_EXP 74
8837: PUSH
8838: LD_INT 1
8840: ST_TO_ADDR
// end ; end ;
8841: PPOPN 6
8843: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8844: LD_EXP 21
8848: PUSH
8849: LD_EXP 26
8853: AND
8854: IFFALSE 8978
8856: GO 8858
8858: DISABLE
8859: LD_INT 0
8861: PPUSH
8862: PPUSH
// begin enable ;
8863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8864: LD_ADDR_VAR 0 2
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_OWVAR 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 2
8883: PUSH
8884: LD_INT 34
8886: PUSH
8887: LD_INT 7
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 34
8896: PUSH
8897: LD_INT 45
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_INT 28
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 34
8916: PUSH
8917: LD_INT 47
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: ST_TO_ADDR
// if not tmp then
8940: LD_VAR 0 2
8944: NOT
8945: IFFALSE 8949
// exit ;
8947: GO 8978
// for i in tmp do
8949: LD_ADDR_VAR 0 1
8953: PUSH
8954: LD_VAR 0 2
8958: PUSH
8959: FOR_IN
8960: IFFALSE 8976
// begin SetLives ( i , 0 ) ;
8962: LD_VAR 0 1
8966: PPUSH
8967: LD_INT 0
8969: PPUSH
8970: CALL_OW 234
// end ;
8974: GO 8959
8976: POP
8977: POP
// end ;
8978: PPOPN 2
8980: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8981: LD_EXP 21
8985: PUSH
8986: LD_EXP 27
8990: AND
8991: IFFALSE 9075
8993: GO 8995
8995: DISABLE
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
// begin enable ;
9000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9001: LD_ADDR_VAR 0 2
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_OWVAR 2
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 32
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: ST_TO_ADDR
// if not tmp then
9037: LD_VAR 0 2
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9075
// for i in tmp do
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_VAR 0 2
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9073
// begin SetLives ( i , 0 ) ;
9059: LD_VAR 0 1
9063: PPUSH
9064: LD_INT 0
9066: PPUSH
9067: CALL_OW 234
// end ;
9071: GO 9056
9073: POP
9074: POP
// end ;
9075: PPOPN 2
9077: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9078: LD_EXP 21
9082: PUSH
9083: LD_EXP 24
9087: AND
9088: IFFALSE 9181
9090: GO 9092
9092: DISABLE
9093: LD_INT 0
9095: PPUSH
// begin enable ;
9096: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9097: LD_ADDR_VAR 0 1
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_OWVAR 2
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 2
9116: PUSH
9117: LD_INT 25
9119: PUSH
9120: LD_INT 5
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 25
9129: PUSH
9130: LD_INT 9
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 25
9139: PUSH
9140: LD_INT 8
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 69
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9179
// begin SetClass ( i , 1 ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 336
// end ;
9177: GO 9162
9179: POP
9180: POP
// end ;
9181: PPOPN 1
9183: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9184: LD_EXP 21
9188: PUSH
9189: LD_EXP 25
9193: AND
9194: PUSH
9195: LD_OWVAR 65
9199: PUSH
9200: LD_INT 7
9202: LESS
9203: AND
9204: IFFALSE 9218
9206: GO 9208
9208: DISABLE
// begin enable ;
9209: ENABLE
// game_speed := 7 ;
9210: LD_ADDR_OWVAR 65
9214: PUSH
9215: LD_INT 7
9217: ST_TO_ADDR
// end ;
9218: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9219: LD_EXP 21
9223: PUSH
9224: LD_EXP 28
9228: AND
9229: IFFALSE 9431
9231: GO 9233
9233: DISABLE
9234: LD_INT 0
9236: PPUSH
9237: PPUSH
9238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9239: LD_ADDR_VAR 0 3
9243: PUSH
9244: LD_INT 81
9246: PUSH
9247: LD_OWVAR 2
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 69
9274: ST_TO_ADDR
// if not tmp then
9275: LD_VAR 0 3
9279: NOT
9280: IFFALSE 9284
// exit ;
9282: GO 9431
// if tmp > 5 then
9284: LD_VAR 0 3
9288: PUSH
9289: LD_INT 5
9291: GREATER
9292: IFFALSE 9304
// k := 5 else
9294: LD_ADDR_VAR 0 2
9298: PUSH
9299: LD_INT 5
9301: ST_TO_ADDR
9302: GO 9314
// k := tmp ;
9304: LD_ADDR_VAR 0 2
9308: PUSH
9309: LD_VAR 0 3
9313: ST_TO_ADDR
// for i := 1 to k do
9314: LD_ADDR_VAR 0 1
9318: PUSH
9319: DOUBLE
9320: LD_INT 1
9322: DEC
9323: ST_TO_ADDR
9324: LD_VAR 0 2
9328: PUSH
9329: FOR_TO
9330: IFFALSE 9429
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9332: LD_VAR 0 3
9336: PUSH
9337: LD_VAR 0 1
9341: ARRAY
9342: PPUSH
9343: LD_VAR 0 1
9347: PUSH
9348: LD_INT 4
9350: MOD
9351: PUSH
9352: LD_INT 1
9354: PLUS
9355: PPUSH
9356: CALL_OW 259
9360: PUSH
9361: LD_INT 10
9363: LESS
9364: IFFALSE 9427
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9366: LD_VAR 0 3
9370: PUSH
9371: LD_VAR 0 1
9375: ARRAY
9376: PPUSH
9377: LD_VAR 0 1
9381: PUSH
9382: LD_INT 4
9384: MOD
9385: PUSH
9386: LD_INT 1
9388: PLUS
9389: PPUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 1
9399: ARRAY
9400: PPUSH
9401: LD_VAR 0 1
9405: PUSH
9406: LD_INT 4
9408: MOD
9409: PUSH
9410: LD_INT 1
9412: PLUS
9413: PPUSH
9414: CALL_OW 259
9418: PUSH
9419: LD_INT 1
9421: PLUS
9422: PPUSH
9423: CALL_OW 237
9427: GO 9329
9429: POP
9430: POP
// end ;
9431: PPOPN 3
9433: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9434: LD_EXP 21
9438: PUSH
9439: LD_EXP 29
9443: AND
9444: IFFALSE 9464
9446: GO 9448
9448: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9449: LD_INT 4
9451: PPUSH
9452: LD_OWVAR 2
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 324
9464: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9465: LD_EXP 21
9469: PUSH
9470: LD_EXP 58
9474: AND
9475: IFFALSE 9495
9477: GO 9479
9479: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9480: LD_INT 19
9482: PPUSH
9483: LD_OWVAR 2
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 324
9495: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9496: LD_EXP 21
9500: PUSH
9501: LD_EXP 30
9505: AND
9506: IFFALSE 9608
9508: GO 9510
9510: DISABLE
9511: LD_INT 0
9513: PPUSH
9514: PPUSH
// begin enable ;
9515: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9516: LD_ADDR_VAR 0 2
9520: PUSH
9521: LD_INT 22
9523: PUSH
9524: LD_OWVAR 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 2
9535: PUSH
9536: LD_INT 34
9538: PUSH
9539: LD_INT 11
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 30
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 69
9569: ST_TO_ADDR
// if not tmp then
9570: LD_VAR 0 2
9574: NOT
9575: IFFALSE 9579
// exit ;
9577: GO 9608
// for i in tmp do
9579: LD_ADDR_VAR 0 1
9583: PUSH
9584: LD_VAR 0 2
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9606
// begin SetLives ( i , 0 ) ;
9592: LD_VAR 0 1
9596: PPUSH
9597: LD_INT 0
9599: PPUSH
9600: CALL_OW 234
// end ;
9604: GO 9589
9606: POP
9607: POP
// end ;
9608: PPOPN 2
9610: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9611: LD_EXP 21
9615: PUSH
9616: LD_EXP 31
9620: AND
9621: IFFALSE 9641
9623: GO 9625
9625: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9626: LD_INT 32
9628: PPUSH
9629: LD_OWVAR 2
9633: PPUSH
9634: LD_INT 0
9636: PPUSH
9637: CALL_OW 324
9641: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9642: LD_EXP 21
9646: PUSH
9647: LD_EXP 32
9651: AND
9652: IFFALSE 9833
9654: GO 9656
9656: DISABLE
9657: LD_INT 0
9659: PPUSH
9660: PPUSH
9661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9662: LD_ADDR_VAR 0 2
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_OWVAR 2
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 33
9681: PUSH
9682: LD_INT 3
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 69
9697: ST_TO_ADDR
// if not tmp then
9698: LD_VAR 0 2
9702: NOT
9703: IFFALSE 9707
// exit ;
9705: GO 9833
// side := 0 ;
9707: LD_ADDR_VAR 0 3
9711: PUSH
9712: LD_INT 0
9714: ST_TO_ADDR
// for i := 1 to 8 do
9715: LD_ADDR_VAR 0 1
9719: PUSH
9720: DOUBLE
9721: LD_INT 1
9723: DEC
9724: ST_TO_ADDR
9725: LD_INT 8
9727: PUSH
9728: FOR_TO
9729: IFFALSE 9777
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9731: LD_OWVAR 2
9735: PUSH
9736: LD_VAR 0 1
9740: NONEQUAL
9741: PUSH
9742: LD_OWVAR 2
9746: PPUSH
9747: LD_VAR 0 1
9751: PPUSH
9752: CALL_OW 81
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: AND
9761: IFFALSE 9775
// begin side := i ;
9763: LD_ADDR_VAR 0 3
9767: PUSH
9768: LD_VAR 0 1
9772: ST_TO_ADDR
// break ;
9773: GO 9777
// end ;
9775: GO 9728
9777: POP
9778: POP
// if not side then
9779: LD_VAR 0 3
9783: NOT
9784: IFFALSE 9788
// exit ;
9786: GO 9833
// for i := 1 to tmp do
9788: LD_ADDR_VAR 0 1
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_VAR 0 2
9802: PUSH
9803: FOR_TO
9804: IFFALSE 9831
// if Prob ( 60 ) then
9806: LD_INT 60
9808: PPUSH
9809: CALL_OW 13
9813: IFFALSE 9829
// SetSide ( i , side ) ;
9815: LD_VAR 0 1
9819: PPUSH
9820: LD_VAR 0 3
9824: PPUSH
9825: CALL_OW 235
9829: GO 9803
9831: POP
9832: POP
// end ;
9833: PPOPN 3
9835: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9836: LD_EXP 21
9840: PUSH
9841: LD_EXP 34
9845: AND
9846: IFFALSE 9965
9848: GO 9850
9850: DISABLE
9851: LD_INT 0
9853: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9854: LD_ADDR_VAR 0 1
9858: PUSH
9859: LD_INT 22
9861: PUSH
9862: LD_OWVAR 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 3
9883: PUSH
9884: LD_INT 23
9886: PUSH
9887: LD_INT 0
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PUSH
9908: FOR_IN
9909: IFFALSE 9963
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9911: LD_VAR 0 1
9915: PPUSH
9916: CALL_OW 257
9920: PUSH
9921: LD_INT 1
9923: PUSH
9924: LD_INT 2
9926: PUSH
9927: LD_INT 3
9929: PUSH
9930: LD_INT 4
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: IN
9939: IFFALSE 9961
// SetClass ( un , rand ( 1 , 4 ) ) ;
9941: LD_VAR 0 1
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: LD_INT 4
9951: PPUSH
9952: CALL_OW 12
9956: PPUSH
9957: CALL_OW 336
9961: GO 9908
9963: POP
9964: POP
// end ;
9965: PPOPN 1
9967: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9968: LD_EXP 21
9972: PUSH
9973: LD_EXP 33
9977: AND
9978: IFFALSE 10057
9980: GO 9982
9982: DISABLE
9983: LD_INT 0
9985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9986: LD_ADDR_VAR 0 1
9990: PUSH
9991: LD_INT 22
9993: PUSH
9994: LD_OWVAR 2
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 21
10005: PUSH
10006: LD_INT 3
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PPUSH
10017: CALL_OW 69
10021: ST_TO_ADDR
// if not tmp then
10022: LD_VAR 0 1
10026: NOT
10027: IFFALSE 10031
// exit ;
10029: GO 10057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10031: LD_VAR 0 1
10035: PUSH
10036: LD_INT 1
10038: PPUSH
10039: LD_VAR 0 1
10043: PPUSH
10044: CALL_OW 12
10048: ARRAY
10049: PPUSH
10050: LD_INT 100
10052: PPUSH
10053: CALL_OW 234
// end ;
10057: PPOPN 1
10059: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10060: LD_EXP 21
10064: PUSH
10065: LD_EXP 35
10069: AND
10070: IFFALSE 10168
10072: GO 10074
10074: DISABLE
10075: LD_INT 0
10077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: LD_INT 22
10085: PUSH
10086: LD_OWVAR 2
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 21
10097: PUSH
10098: LD_INT 1
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PPUSH
10109: CALL_OW 69
10113: ST_TO_ADDR
// if not tmp then
10114: LD_VAR 0 1
10118: NOT
10119: IFFALSE 10123
// exit ;
10121: GO 10168
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 1
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 12
10140: ARRAY
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: LD_INT 4
10147: PPUSH
10148: CALL_OW 12
10152: PPUSH
10153: LD_INT 3000
10155: PPUSH
10156: LD_INT 9000
10158: PPUSH
10159: CALL_OW 12
10163: PPUSH
10164: CALL_OW 492
// end ;
10168: PPOPN 1
10170: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10171: LD_EXP 21
10175: PUSH
10176: LD_EXP 36
10180: AND
10181: IFFALSE 10201
10183: GO 10185
10185: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10186: LD_INT 1
10188: PPUSH
10189: LD_OWVAR 2
10193: PPUSH
10194: LD_INT 0
10196: PPUSH
10197: CALL_OW 324
10201: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10202: LD_EXP 21
10206: PUSH
10207: LD_EXP 37
10211: AND
10212: IFFALSE 10295
10214: GO 10216
10216: DISABLE
10217: LD_INT 0
10219: PPUSH
10220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10221: LD_ADDR_VAR 0 2
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_OWVAR 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 21
10240: PUSH
10241: LD_INT 3
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PPUSH
10252: CALL_OW 69
10256: ST_TO_ADDR
// if not tmp then
10257: LD_VAR 0 2
10261: NOT
10262: IFFALSE 10266
// exit ;
10264: GO 10295
// for i in tmp do
10266: LD_ADDR_VAR 0 1
10270: PUSH
10271: LD_VAR 0 2
10275: PUSH
10276: FOR_IN
10277: IFFALSE 10293
// SetBLevel ( i , 10 ) ;
10279: LD_VAR 0 1
10283: PPUSH
10284: LD_INT 10
10286: PPUSH
10287: CALL_OW 241
10291: GO 10276
10293: POP
10294: POP
// end ;
10295: PPOPN 2
10297: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10298: LD_EXP 21
10302: PUSH
10303: LD_EXP 38
10307: AND
10308: IFFALSE 10419
10310: GO 10312
10312: DISABLE
10313: LD_INT 0
10315: PPUSH
10316: PPUSH
10317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_INT 22
10325: PUSH
10326: LD_OWVAR 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: ST_TO_ADDR
// if not tmp then
10354: LD_VAR 0 3
10358: NOT
10359: IFFALSE 10363
// exit ;
10361: GO 10419
// un := tmp [ rand ( 1 , tmp ) ] ;
10363: LD_ADDR_VAR 0 2
10367: PUSH
10368: LD_VAR 0 3
10372: PUSH
10373: LD_INT 1
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: CALL_OW 12
10385: ARRAY
10386: ST_TO_ADDR
// if Crawls ( un ) then
10387: LD_VAR 0 2
10391: PPUSH
10392: CALL_OW 318
10396: IFFALSE 10407
// ComWalk ( un ) ;
10398: LD_VAR 0 2
10402: PPUSH
10403: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10407: LD_VAR 0 2
10411: PPUSH
10412: LD_INT 5
10414: PPUSH
10415: CALL_OW 336
// end ;
10419: PPOPN 3
10421: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10422: LD_EXP 21
10426: PUSH
10427: LD_EXP 39
10431: AND
10432: PUSH
10433: LD_OWVAR 67
10437: PUSH
10438: LD_INT 3
10440: LESS
10441: AND
10442: IFFALSE 10461
10444: GO 10446
10446: DISABLE
// Difficulty := Difficulty + 1 ;
10447: LD_ADDR_OWVAR 67
10451: PUSH
10452: LD_OWVAR 67
10456: PUSH
10457: LD_INT 1
10459: PLUS
10460: ST_TO_ADDR
10461: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10462: LD_EXP 21
10466: PUSH
10467: LD_EXP 40
10471: AND
10472: IFFALSE 10575
10474: GO 10476
10476: DISABLE
10477: LD_INT 0
10479: PPUSH
// begin for i := 1 to 5 do
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: DOUBLE
10486: LD_INT 1
10488: DEC
10489: ST_TO_ADDR
10490: LD_INT 5
10492: PUSH
10493: FOR_TO
10494: IFFALSE 10573
// begin uc_nation := nation_nature ;
10496: LD_ADDR_OWVAR 21
10500: PUSH
10501: LD_INT 0
10503: ST_TO_ADDR
// uc_side := 0 ;
10504: LD_ADDR_OWVAR 20
10508: PUSH
10509: LD_INT 0
10511: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10512: LD_ADDR_OWVAR 29
10516: PUSH
10517: LD_INT 12
10519: PUSH
10520: LD_INT 12
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: ST_TO_ADDR
// hc_agressivity := 20 ;
10527: LD_ADDR_OWVAR 35
10531: PUSH
10532: LD_INT 20
10534: ST_TO_ADDR
// hc_class := class_tiger ;
10535: LD_ADDR_OWVAR 28
10539: PUSH
10540: LD_INT 14
10542: ST_TO_ADDR
// hc_gallery :=  ;
10543: LD_ADDR_OWVAR 33
10547: PUSH
10548: LD_STRING 
10550: ST_TO_ADDR
// hc_name :=  ;
10551: LD_ADDR_OWVAR 26
10555: PUSH
10556: LD_STRING 
10558: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10559: CALL_OW 44
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL_OW 51
// end ;
10571: GO 10493
10573: POP
10574: POP
// end ;
10575: PPOPN 1
10577: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10578: LD_EXP 21
10582: PUSH
10583: LD_EXP 41
10587: AND
10588: IFFALSE 10597
10590: GO 10592
10592: DISABLE
// StreamSibBomb ;
10593: CALL 10598 0 0
10597: END
// export function StreamSibBomb ; var i , x , y ; begin
10598: LD_INT 0
10600: PPUSH
10601: PPUSH
10602: PPUSH
10603: PPUSH
// result := false ;
10604: LD_ADDR_VAR 0 1
10608: PUSH
10609: LD_INT 0
10611: ST_TO_ADDR
// for i := 1 to 16 do
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: DOUBLE
10618: LD_INT 1
10620: DEC
10621: ST_TO_ADDR
10622: LD_INT 16
10624: PUSH
10625: FOR_TO
10626: IFFALSE 10825
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10628: LD_ADDR_VAR 0 3
10632: PUSH
10633: LD_INT 10
10635: PUSH
10636: LD_INT 20
10638: PUSH
10639: LD_INT 30
10641: PUSH
10642: LD_INT 40
10644: PUSH
10645: LD_INT 50
10647: PUSH
10648: LD_INT 60
10650: PUSH
10651: LD_INT 70
10653: PUSH
10654: LD_INT 80
10656: PUSH
10657: LD_INT 90
10659: PUSH
10660: LD_INT 100
10662: PUSH
10663: LD_INT 110
10665: PUSH
10666: LD_INT 120
10668: PUSH
10669: LD_INT 130
10671: PUSH
10672: LD_INT 140
10674: PUSH
10675: LD_INT 150
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 1
10697: PPUSH
10698: LD_INT 15
10700: PPUSH
10701: CALL_OW 12
10705: ARRAY
10706: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10707: LD_ADDR_VAR 0 4
10711: PUSH
10712: LD_INT 10
10714: PUSH
10715: LD_INT 20
10717: PUSH
10718: LD_INT 30
10720: PUSH
10721: LD_INT 40
10723: PUSH
10724: LD_INT 50
10726: PUSH
10727: LD_INT 60
10729: PUSH
10730: LD_INT 70
10732: PUSH
10733: LD_INT 80
10735: PUSH
10736: LD_INT 90
10738: PUSH
10739: LD_INT 100
10741: PUSH
10742: LD_INT 110
10744: PUSH
10745: LD_INT 120
10747: PUSH
10748: LD_INT 130
10750: PUSH
10751: LD_INT 140
10753: PUSH
10754: LD_INT 150
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 1
10776: PPUSH
10777: LD_INT 15
10779: PPUSH
10780: CALL_OW 12
10784: ARRAY
10785: ST_TO_ADDR
// if ValidHex ( x , y ) then
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_VAR 0 4
10795: PPUSH
10796: CALL_OW 488
10800: IFFALSE 10823
// begin result := [ x , y ] ;
10802: LD_ADDR_VAR 0 1
10806: PUSH
10807: LD_VAR 0 3
10811: PUSH
10812: LD_VAR 0 4
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: ST_TO_ADDR
// break ;
10821: GO 10825
// end ; end ;
10823: GO 10625
10825: POP
10826: POP
// if result then
10827: LD_VAR 0 1
10831: IFFALSE 10891
// begin ToLua ( playSibBomb() ) ;
10833: LD_STRING playSibBomb()
10835: PPUSH
10836: CALL_OW 559
// wait ( 0 0$14 ) ;
10840: LD_INT 490
10842: PPUSH
10843: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10847: LD_VAR 0 1
10851: PUSH
10852: LD_INT 1
10854: ARRAY
10855: PPUSH
10856: LD_VAR 0 1
10860: PUSH
10861: LD_INT 2
10863: ARRAY
10864: PPUSH
10865: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10869: LD_VAR 0 1
10873: PUSH
10874: LD_INT 1
10876: ARRAY
10877: PPUSH
10878: LD_VAR 0 1
10882: PUSH
10883: LD_INT 2
10885: ARRAY
10886: PPUSH
10887: CALL_OW 429
// end ; end ;
10891: LD_VAR 0 1
10895: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10896: LD_EXP 21
10900: PUSH
10901: LD_EXP 43
10905: AND
10906: IFFALSE 10918
10908: GO 10910
10910: DISABLE
// YouLost (  ) ;
10911: LD_STRING 
10913: PPUSH
10914: CALL_OW 104
10918: END
// every 0 0$1 trigger StreamModeActive and sFog do
10919: LD_EXP 21
10923: PUSH
10924: LD_EXP 42
10928: AND
10929: IFFALSE 10943
10931: GO 10933
10933: DISABLE
// FogOff ( your_side ) ;
10934: LD_OWVAR 2
10938: PPUSH
10939: CALL_OW 344
10943: END
// every 0 0$1 trigger StreamModeActive and sSun do
10944: LD_EXP 21
10948: PUSH
10949: LD_EXP 44
10953: AND
10954: IFFALSE 10982
10956: GO 10958
10958: DISABLE
// begin solar_recharge_percent := 0 ;
10959: LD_ADDR_OWVAR 79
10963: PUSH
10964: LD_INT 0
10966: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10967: LD_INT 10500
10969: PPUSH
10970: CALL_OW 67
// solar_recharge_percent := 100 ;
10974: LD_ADDR_OWVAR 79
10978: PUSH
10979: LD_INT 100
10981: ST_TO_ADDR
// end ;
10982: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10983: LD_EXP 21
10987: PUSH
10988: LD_EXP 45
10992: AND
10993: IFFALSE 11232
10995: GO 10997
10997: DISABLE
10998: LD_INT 0
11000: PPUSH
11001: PPUSH
11002: PPUSH
// begin tmp := [ ] ;
11003: LD_ADDR_VAR 0 3
11007: PUSH
11008: EMPTY
11009: ST_TO_ADDR
// for i := 1 to 6 do
11010: LD_ADDR_VAR 0 1
11014: PUSH
11015: DOUBLE
11016: LD_INT 1
11018: DEC
11019: ST_TO_ADDR
11020: LD_INT 6
11022: PUSH
11023: FOR_TO
11024: IFFALSE 11129
// begin uc_nation := nation_nature ;
11026: LD_ADDR_OWVAR 21
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// uc_side := 0 ;
11034: LD_ADDR_OWVAR 20
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11042: LD_ADDR_OWVAR 29
11046: PUSH
11047: LD_INT 12
11049: PUSH
11050: LD_INT 12
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: ST_TO_ADDR
// hc_agressivity := 20 ;
11057: LD_ADDR_OWVAR 35
11061: PUSH
11062: LD_INT 20
11064: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11065: LD_ADDR_OWVAR 28
11069: PUSH
11070: LD_INT 17
11072: ST_TO_ADDR
// hc_gallery :=  ;
11073: LD_ADDR_OWVAR 33
11077: PUSH
11078: LD_STRING 
11080: ST_TO_ADDR
// hc_name :=  ;
11081: LD_ADDR_OWVAR 26
11085: PUSH
11086: LD_STRING 
11088: ST_TO_ADDR
// un := CreateHuman ;
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: CALL_OW 44
11098: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11099: LD_VAR 0 2
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 51
// tmp := tmp ^ un ;
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_VAR 0 3
11120: PUSH
11121: LD_VAR 0 2
11125: ADD
11126: ST_TO_ADDR
// end ;
11127: GO 11023
11129: POP
11130: POP
// repeat wait ( 0 0$1 ) ;
11131: LD_INT 35
11133: PPUSH
11134: CALL_OW 67
// for un in tmp do
11138: LD_ADDR_VAR 0 2
11142: PUSH
11143: LD_VAR 0 3
11147: PUSH
11148: FOR_IN
11149: IFFALSE 11223
// begin if IsDead ( un ) then
11151: LD_VAR 0 2
11155: PPUSH
11156: CALL_OW 301
11160: IFFALSE 11180
// begin tmp := tmp diff un ;
11162: LD_ADDR_VAR 0 3
11166: PUSH
11167: LD_VAR 0 3
11171: PUSH
11172: LD_VAR 0 2
11176: DIFF
11177: ST_TO_ADDR
// continue ;
11178: GO 11148
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: LD_INT 3
11187: PUSH
11188: LD_INT 22
11190: PUSH
11191: LD_INT 0
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: PPUSH
11207: LD_VAR 0 2
11211: PPUSH
11212: CALL_OW 74
11216: PPUSH
11217: CALL_OW 115
// end ;
11221: GO 11148
11223: POP
11224: POP
// until not tmp ;
11225: LD_VAR 0 3
11229: NOT
11230: IFFALSE 11131
// end ;
11232: PPOPN 3
11234: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11235: LD_EXP 21
11239: PUSH
11240: LD_EXP 46
11244: AND
11245: IFFALSE 11299
11247: GO 11249
11249: DISABLE
// begin ToLua ( displayTroll(); ) ;
11250: LD_STRING displayTroll();
11252: PPUSH
11253: CALL_OW 559
// wait ( 3 3$00 ) ;
11257: LD_INT 6300
11259: PPUSH
11260: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11264: LD_STRING hideTroll();
11266: PPUSH
11267: CALL_OW 559
// wait ( 1 1$00 ) ;
11271: LD_INT 2100
11273: PPUSH
11274: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11278: LD_STRING displayTroll();
11280: PPUSH
11281: CALL_OW 559
// wait ( 1 1$00 ) ;
11285: LD_INT 2100
11287: PPUSH
11288: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11292: LD_STRING hideTroll();
11294: PPUSH
11295: CALL_OW 559
// end ;
11299: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11300: LD_EXP 21
11304: PUSH
11305: LD_EXP 47
11309: AND
11310: IFFALSE 11373
11312: GO 11314
11314: DISABLE
11315: LD_INT 0
11317: PPUSH
// begin p := 0 ;
11318: LD_ADDR_VAR 0 1
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// repeat game_speed := 1 ;
11326: LD_ADDR_OWVAR 65
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11334: LD_INT 35
11336: PPUSH
11337: CALL_OW 67
// p := p + 1 ;
11341: LD_ADDR_VAR 0 1
11345: PUSH
11346: LD_VAR 0 1
11350: PUSH
11351: LD_INT 1
11353: PLUS
11354: ST_TO_ADDR
// until p >= 60 ;
11355: LD_VAR 0 1
11359: PUSH
11360: LD_INT 60
11362: GREATEREQUAL
11363: IFFALSE 11326
// game_speed := 4 ;
11365: LD_ADDR_OWVAR 65
11369: PUSH
11370: LD_INT 4
11372: ST_TO_ADDR
// end ;
11373: PPOPN 1
11375: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11376: LD_EXP 21
11380: PUSH
11381: LD_EXP 48
11385: AND
11386: IFFALSE 11532
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
11394: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11395: LD_ADDR_VAR 0 1
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: LD_OWVAR 2
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 30
11417: PUSH
11418: LD_INT 0
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 30
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: ST_TO_ADDR
// if not depot then
11449: LD_VAR 0 1
11453: NOT
11454: IFFALSE 11458
// exit ;
11456: GO 11532
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11458: LD_ADDR_VAR 0 2
11462: PUSH
11463: LD_VAR 0 1
11467: PUSH
11468: LD_INT 1
11470: PPUSH
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 12
11480: ARRAY
11481: PPUSH
11482: CALL_OW 274
11486: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11487: LD_VAR 0 2
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_INT 0
11497: PPUSH
11498: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11502: LD_VAR 0 2
11506: PPUSH
11507: LD_INT 2
11509: PPUSH
11510: LD_INT 0
11512: PPUSH
11513: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11517: LD_VAR 0 2
11521: PPUSH
11522: LD_INT 3
11524: PPUSH
11525: LD_INT 0
11527: PPUSH
11528: CALL_OW 277
// end ;
11532: PPOPN 2
11534: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11535: LD_EXP 21
11539: PUSH
11540: LD_EXP 49
11544: AND
11545: IFFALSE 11642
11547: GO 11549
11549: DISABLE
11550: LD_INT 0
11552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11553: LD_ADDR_VAR 0 1
11557: PUSH
11558: LD_INT 22
11560: PUSH
11561: LD_OWVAR 2
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 21
11572: PUSH
11573: LD_INT 1
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 23
11585: PUSH
11586: LD_INT 0
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 69
11606: ST_TO_ADDR
// if not tmp then
11607: LD_VAR 0 1
11611: NOT
11612: IFFALSE 11616
// exit ;
11614: GO 11642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11616: LD_VAR 0 1
11620: PUSH
11621: LD_INT 1
11623: PPUSH
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 12
11633: ARRAY
11634: PPUSH
11635: LD_INT 200
11637: PPUSH
11638: CALL_OW 234
// end ;
11642: PPOPN 1
11644: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11645: LD_EXP 21
11649: PUSH
11650: LD_EXP 50
11654: AND
11655: IFFALSE 11734
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11663: LD_ADDR_VAR 0 1
11667: PUSH
11668: LD_INT 22
11670: PUSH
11671: LD_OWVAR 2
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: ST_TO_ADDR
// if not tmp then
11699: LD_VAR 0 1
11703: NOT
11704: IFFALSE 11708
// exit ;
11706: GO 11734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11708: LD_VAR 0 1
11712: PUSH
11713: LD_INT 1
11715: PPUSH
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 12
11725: ARRAY
11726: PPUSH
11727: LD_INT 60
11729: PPUSH
11730: CALL_OW 234
// end ;
11734: PPOPN 1
11736: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11737: LD_EXP 21
11741: PUSH
11742: LD_EXP 51
11746: AND
11747: IFFALSE 11846
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
11755: PPUSH
// begin enable ;
11756: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11757: LD_ADDR_VAR 0 1
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_OWVAR 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 61
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 33
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: ST_TO_ADDR
// if not tmp then
11800: LD_VAR 0 1
11804: NOT
11805: IFFALSE 11809
// exit ;
11807: GO 11846
// for i in tmp do
11809: LD_ADDR_VAR 0 2
11813: PUSH
11814: LD_VAR 0 1
11818: PUSH
11819: FOR_IN
11820: IFFALSE 11844
// if IsControledBy ( i ) then
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 312
11831: IFFALSE 11842
// ComUnlink ( i ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 136
11842: GO 11819
11844: POP
11845: POP
// end ;
11846: PPOPN 2
11848: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11849: LD_EXP 21
11853: PUSH
11854: LD_EXP 52
11858: AND
11859: IFFALSE 11999
11861: GO 11863
11863: DISABLE
11864: LD_INT 0
11866: PPUSH
11867: PPUSH
// begin ToLua ( displayPowell(); ) ;
11868: LD_STRING displayPowell();
11870: PPUSH
11871: CALL_OW 559
// uc_side := 0 ;
11875: LD_ADDR_OWVAR 20
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// uc_nation := 2 ;
11883: LD_ADDR_OWVAR 21
11887: PUSH
11888: LD_INT 2
11890: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11891: LD_ADDR_OWVAR 37
11895: PUSH
11896: LD_INT 14
11898: ST_TO_ADDR
// vc_engine := engine_siberite ;
11899: LD_ADDR_OWVAR 39
11903: PUSH
11904: LD_INT 3
11906: ST_TO_ADDR
// vc_control := control_apeman ;
11907: LD_ADDR_OWVAR 38
11911: PUSH
11912: LD_INT 5
11914: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11915: LD_ADDR_OWVAR 40
11919: PUSH
11920: LD_INT 29
11922: ST_TO_ADDR
// un := CreateVehicle ;
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: CALL_OW 45
11932: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11933: LD_VAR 0 2
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11945: LD_INT 35
11947: PPUSH
11948: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_INT 22
11959: PUSH
11960: LD_OWVAR 2
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 69
11973: PPUSH
11974: LD_VAR 0 2
11978: PPUSH
11979: CALL_OW 74
11983: PPUSH
11984: CALL_OW 115
// until IsDead ( un ) ;
11988: LD_VAR 0 2
11992: PPUSH
11993: CALL_OW 301
11997: IFFALSE 11945
// end ;
11999: PPOPN 2
12001: END
// every 0 0$1 trigger StreamModeActive and sStu do
12002: LD_EXP 21
12006: PUSH
12007: LD_EXP 60
12011: AND
12012: IFFALSE 12028
12014: GO 12016
12016: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12017: LD_STRING displayStucuk();
12019: PPUSH
12020: CALL_OW 559
// ResetFog ;
12024: CALL_OW 335
// end ;
12028: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12029: LD_EXP 21
12033: PUSH
12034: LD_EXP 53
12038: AND
12039: IFFALSE 12180
12041: GO 12043
12043: DISABLE
12044: LD_INT 0
12046: PPUSH
12047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12048: LD_ADDR_VAR 0 2
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_OWVAR 2
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 69
12083: ST_TO_ADDR
// if not tmp then
12084: LD_VAR 0 2
12088: NOT
12089: IFFALSE 12093
// exit ;
12091: GO 12180
// un := tmp [ rand ( 1 , tmp ) ] ;
12093: LD_ADDR_VAR 0 1
12097: PUSH
12098: LD_VAR 0 2
12102: PUSH
12103: LD_INT 1
12105: PPUSH
12106: LD_VAR 0 2
12110: PPUSH
12111: CALL_OW 12
12115: ARRAY
12116: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12117: LD_VAR 0 1
12121: PPUSH
12122: LD_INT 0
12124: PPUSH
12125: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_OWVAR 3
12138: PUSH
12139: LD_VAR 0 1
12143: DIFF
12144: PPUSH
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 74
12154: PPUSH
12155: CALL_OW 115
// wait ( 0 0$20 ) ;
12159: LD_INT 700
12161: PPUSH
12162: CALL_OW 67
// SetSide ( un , your_side ) ;
12166: LD_VAR 0 1
12170: PPUSH
12171: LD_OWVAR 2
12175: PPUSH
12176: CALL_OW 235
// end ;
12180: PPOPN 2
12182: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12183: LD_EXP 21
12187: PUSH
12188: LD_EXP 54
12192: AND
12193: IFFALSE 12299
12195: GO 12197
12197: DISABLE
12198: LD_INT 0
12200: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12201: LD_ADDR_VAR 0 1
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_OWVAR 2
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 2
12220: PUSH
12221: LD_INT 30
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: ST_TO_ADDR
// if not depot then
12255: LD_VAR 0 1
12259: NOT
12260: IFFALSE 12264
// exit ;
12262: GO 12299
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 250
12277: PPUSH
12278: LD_VAR 0 1
12282: PUSH
12283: LD_INT 1
12285: ARRAY
12286: PPUSH
12287: CALL_OW 251
12291: PPUSH
12292: LD_INT 70
12294: PPUSH
12295: CALL_OW 495
// end ;
12299: PPOPN 1
12301: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12302: LD_EXP 21
12306: PUSH
12307: LD_EXP 55
12311: AND
12312: IFFALSE 12523
12314: GO 12316
12316: DISABLE
12317: LD_INT 0
12319: PPUSH
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12324: LD_ADDR_VAR 0 5
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_OWVAR 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 21
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PPUSH
12355: CALL_OW 69
12359: ST_TO_ADDR
// if not tmp then
12360: LD_VAR 0 5
12364: NOT
12365: IFFALSE 12369
// exit ;
12367: GO 12523
// for i in tmp do
12369: LD_ADDR_VAR 0 1
12373: PUSH
12374: LD_VAR 0 5
12378: PUSH
12379: FOR_IN
12380: IFFALSE 12521
// begin d := rand ( 0 , 5 ) ;
12382: LD_ADDR_VAR 0 4
12386: PUSH
12387: LD_INT 0
12389: PPUSH
12390: LD_INT 5
12392: PPUSH
12393: CALL_OW 12
12397: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_VAR 0 1
12407: PPUSH
12408: CALL_OW 250
12412: PPUSH
12413: LD_VAR 0 4
12417: PPUSH
12418: LD_INT 3
12420: PPUSH
12421: LD_INT 12
12423: PPUSH
12424: CALL_OW 12
12428: PPUSH
12429: CALL_OW 272
12433: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12434: LD_ADDR_VAR 0 3
12438: PUSH
12439: LD_VAR 0 1
12443: PPUSH
12444: CALL_OW 251
12448: PPUSH
12449: LD_VAR 0 4
12453: PPUSH
12454: LD_INT 3
12456: PPUSH
12457: LD_INT 12
12459: PPUSH
12460: CALL_OW 12
12464: PPUSH
12465: CALL_OW 273
12469: ST_TO_ADDR
// if ValidHex ( x , y ) then
12470: LD_VAR 0 2
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: CALL_OW 488
12484: IFFALSE 12519
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_VAR 0 2
12495: PPUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 3
12503: PPUSH
12504: LD_INT 6
12506: PPUSH
12507: CALL_OW 12
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 483
// end ;
12519: GO 12379
12521: POP
12522: POP
// end ;
12523: PPOPN 5
12525: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12526: LD_EXP 21
12530: PUSH
12531: LD_EXP 56
12535: AND
12536: IFFALSE 12630
12538: GO 12540
12540: DISABLE
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_OWVAR 2
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 32
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: ST_TO_ADDR
// if not tmp then
12592: LD_VAR 0 2
12596: NOT
12597: IFFALSE 12601
// exit ;
12599: GO 12630
// for i in tmp do
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_VAR 0 2
12610: PUSH
12611: FOR_IN
12612: IFFALSE 12628
// SetFuel ( i , 0 ) ;
12614: LD_VAR 0 1
12618: PPUSH
12619: LD_INT 0
12621: PPUSH
12622: CALL_OW 240
12626: GO 12611
12628: POP
12629: POP
// end ;
12630: PPOPN 2
12632: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12633: LD_EXP 21
12637: PUSH
12638: LD_EXP 57
12642: AND
12643: IFFALSE 12709
12645: GO 12647
12647: DISABLE
12648: LD_INT 0
12650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12651: LD_ADDR_VAR 0 1
12655: PUSH
12656: LD_INT 22
12658: PUSH
12659: LD_OWVAR 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 29
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: ST_TO_ADDR
// if not tmp then
12687: LD_VAR 0 1
12691: NOT
12692: IFFALSE 12696
// exit ;
12694: GO 12709
// DestroyUnit ( tmp [ 1 ] ) ;
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: CALL_OW 65
// end ;
12709: PPOPN 1
12711: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12712: LD_EXP 21
12716: PUSH
12717: LD_EXP 59
12721: AND
12722: IFFALSE 12851
12724: GO 12726
12726: DISABLE
12727: LD_INT 0
12729: PPUSH
// begin uc_side := 0 ;
12730: LD_ADDR_OWVAR 20
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// uc_nation := nation_arabian ;
12738: LD_ADDR_OWVAR 21
12742: PUSH
12743: LD_INT 2
12745: ST_TO_ADDR
// hc_gallery :=  ;
12746: LD_ADDR_OWVAR 33
12750: PUSH
12751: LD_STRING 
12753: ST_TO_ADDR
// hc_name :=  ;
12754: LD_ADDR_OWVAR 26
12758: PUSH
12759: LD_STRING 
12761: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12762: LD_INT 1
12764: PPUSH
12765: LD_INT 11
12767: PPUSH
12768: LD_INT 10
12770: PPUSH
12771: CALL_OW 380
// un := CreateHuman ;
12775: LD_ADDR_VAR 0 1
12779: PUSH
12780: CALL_OW 44
12784: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12797: LD_INT 35
12799: PPUSH
12800: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12804: LD_VAR 0 1
12808: PPUSH
12809: LD_INT 22
12811: PUSH
12812: LD_OWVAR 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PPUSH
12821: CALL_OW 69
12825: PPUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: CALL_OW 74
12835: PPUSH
12836: CALL_OW 115
// until IsDead ( un ) ;
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 301
12849: IFFALSE 12797
// end ;
12851: PPOPN 1
12853: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12854: LD_EXP 21
12858: PUSH
12859: LD_EXP 61
12863: AND
12864: IFFALSE 12876
12866: GO 12868
12868: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12869: LD_STRING earthquake(getX(game), 0, 32)
12871: PPUSH
12872: CALL_OW 559
12876: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12877: LD_EXP 21
12881: PUSH
12882: LD_EXP 62
12886: AND
12887: IFFALSE 12978
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
// begin enable ;
12895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 33
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 69
12942: ST_TO_ADDR
// if not tmp then
12943: LD_VAR 0 1
12947: NOT
12948: IFFALSE 12952
// exit ;
12950: GO 12978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12952: LD_VAR 0 1
12956: PUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL_OW 12
12969: ARRAY
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 234
// end ;
12978: PPOPN 1
12980: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12981: LD_EXP 21
12985: PUSH
12986: LD_EXP 63
12990: AND
12991: IFFALSE 13132
12993: GO 12995
12995: DISABLE
12996: LD_INT 0
12998: PPUSH
12999: PPUSH
13000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13001: LD_ADDR_VAR 0 3
13005: PUSH
13006: LD_INT 22
13008: PUSH
13009: LD_OWVAR 2
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 25
13020: PUSH
13021: LD_INT 1
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 69
13036: ST_TO_ADDR
// if not tmp then
13037: LD_VAR 0 3
13041: NOT
13042: IFFALSE 13046
// exit ;
13044: GO 13132
// un := tmp [ rand ( 1 , tmp ) ] ;
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 1
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: CALL_OW 12
13068: ARRAY
13069: ST_TO_ADDR
// if Crawls ( un ) then
13070: LD_VAR 0 2
13074: PPUSH
13075: CALL_OW 318
13079: IFFALSE 13090
// ComWalk ( un ) ;
13081: LD_VAR 0 2
13085: PPUSH
13086: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13090: LD_VAR 0 2
13094: PPUSH
13095: LD_INT 9
13097: PPUSH
13098: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13102: LD_INT 28
13104: PPUSH
13105: LD_OWVAR 2
13109: PPUSH
13110: LD_INT 2
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13117: LD_INT 29
13119: PPUSH
13120: LD_OWVAR 2
13124: PPUSH
13125: LD_INT 2
13127: PPUSH
13128: CALL_OW 322
// end ;
13132: PPOPN 3
13134: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13135: LD_EXP 21
13139: PUSH
13140: LD_EXP 64
13144: AND
13145: IFFALSE 13256
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
13153: PPUSH
13154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_OWVAR 2
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 25
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PPUSH
13186: CALL_OW 69
13190: ST_TO_ADDR
// if not tmp then
13191: LD_VAR 0 3
13195: NOT
13196: IFFALSE 13200
// exit ;
13198: GO 13256
// un := tmp [ rand ( 1 , tmp ) ] ;
13200: LD_ADDR_VAR 0 2
13204: PUSH
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: CALL_OW 12
13222: ARRAY
13223: ST_TO_ADDR
// if Crawls ( un ) then
13224: LD_VAR 0 2
13228: PPUSH
13229: CALL_OW 318
13233: IFFALSE 13244
// ComWalk ( un ) ;
13235: LD_VAR 0 2
13239: PPUSH
13240: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13244: LD_VAR 0 2
13248: PPUSH
13249: LD_INT 8
13251: PPUSH
13252: CALL_OW 336
// end ;
13256: PPOPN 3
13258: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13259: LD_EXP 21
13263: PUSH
13264: LD_EXP 65
13268: AND
13269: IFFALSE 13413
13271: GO 13273
13273: DISABLE
13274: LD_INT 0
13276: PPUSH
13277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13278: LD_ADDR_VAR 0 2
13282: PUSH
13283: LD_INT 22
13285: PUSH
13286: LD_OWVAR 2
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 21
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 2
13307: PUSH
13308: LD_INT 34
13310: PUSH
13311: LD_INT 12
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 51
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 34
13330: PUSH
13331: LD_INT 32
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: PPUSH
13349: CALL_OW 69
13353: ST_TO_ADDR
// if not tmp then
13354: LD_VAR 0 2
13358: NOT
13359: IFFALSE 13363
// exit ;
13361: GO 13413
// for i in tmp do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: LD_VAR 0 2
13372: PUSH
13373: FOR_IN
13374: IFFALSE 13411
// if GetCargo ( i , mat_artifact ) = 0 then
13376: LD_VAR 0 1
13380: PPUSH
13381: LD_INT 4
13383: PPUSH
13384: CALL_OW 289
13388: PUSH
13389: LD_INT 0
13391: EQUAL
13392: IFFALSE 13409
// SetCargo ( i , mat_siberit , 100 ) ;
13394: LD_VAR 0 1
13398: PPUSH
13399: LD_INT 3
13401: PPUSH
13402: LD_INT 100
13404: PPUSH
13405: CALL_OW 290
13409: GO 13373
13411: POP
13412: POP
// end ;
13413: PPOPN 2
13415: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13416: LD_EXP 21
13420: PUSH
13421: LD_EXP 66
13425: AND
13426: IFFALSE 13579
13428: GO 13430
13430: DISABLE
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_OWVAR 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: ST_TO_ADDR
// if not tmp then
13457: LD_VAR 0 2
13461: NOT
13462: IFFALSE 13466
// exit ;
13464: GO 13579
// for i := 1 to 2 do
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: DOUBLE
13472: LD_INT 1
13474: DEC
13475: ST_TO_ADDR
13476: LD_INT 2
13478: PUSH
13479: FOR_TO
13480: IFFALSE 13577
// begin uc_side := your_side ;
13482: LD_ADDR_OWVAR 20
13486: PUSH
13487: LD_OWVAR 2
13491: ST_TO_ADDR
// uc_nation := nation_american ;
13492: LD_ADDR_OWVAR 21
13496: PUSH
13497: LD_INT 1
13499: ST_TO_ADDR
// vc_chassis := us_morphling ;
13500: LD_ADDR_OWVAR 37
13504: PUSH
13505: LD_INT 5
13507: ST_TO_ADDR
// vc_engine := engine_siberite ;
13508: LD_ADDR_OWVAR 39
13512: PUSH
13513: LD_INT 3
13515: ST_TO_ADDR
// vc_control := control_computer ;
13516: LD_ADDR_OWVAR 38
13520: PUSH
13521: LD_INT 3
13523: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13524: LD_ADDR_OWVAR 40
13528: PUSH
13529: LD_INT 10
13531: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13532: CALL_OW 45
13536: PPUSH
13537: LD_VAR 0 2
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: CALL_OW 250
13550: PPUSH
13551: LD_VAR 0 2
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 251
13564: PPUSH
13565: LD_INT 12
13567: PPUSH
13568: LD_INT 1
13570: PPUSH
13571: CALL_OW 50
// end ;
13575: GO 13479
13577: POP
13578: POP
// end ;
13579: PPOPN 2
13581: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13582: LD_EXP 21
13586: PUSH
13587: LD_EXP 67
13591: AND
13592: IFFALSE 13814
13594: GO 13596
13596: DISABLE
13597: LD_INT 0
13599: PPUSH
13600: PPUSH
13601: PPUSH
13602: PPUSH
13603: PPUSH
13604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13605: LD_ADDR_VAR 0 6
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_OWVAR 2
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 21
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 3
13634: PUSH
13635: LD_INT 23
13637: PUSH
13638: LD_INT 0
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: PPUSH
13654: CALL_OW 69
13658: ST_TO_ADDR
// if not tmp then
13659: LD_VAR 0 6
13663: NOT
13664: IFFALSE 13668
// exit ;
13666: GO 13814
// s1 := rand ( 1 , 4 ) ;
13668: LD_ADDR_VAR 0 2
13672: PUSH
13673: LD_INT 1
13675: PPUSH
13676: LD_INT 4
13678: PPUSH
13679: CALL_OW 12
13683: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13684: LD_ADDR_VAR 0 4
13688: PUSH
13689: LD_VAR 0 6
13693: PUSH
13694: LD_INT 1
13696: ARRAY
13697: PPUSH
13698: LD_VAR 0 2
13702: PPUSH
13703: CALL_OW 259
13707: ST_TO_ADDR
// if s1 = 1 then
13708: LD_VAR 0 2
13712: PUSH
13713: LD_INT 1
13715: EQUAL
13716: IFFALSE 13736
// s2 := rand ( 2 , 4 ) else
13718: LD_ADDR_VAR 0 3
13722: PUSH
13723: LD_INT 2
13725: PPUSH
13726: LD_INT 4
13728: PPUSH
13729: CALL_OW 12
13733: ST_TO_ADDR
13734: GO 13744
// s2 := 1 ;
13736: LD_ADDR_VAR 0 3
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13744: LD_ADDR_VAR 0 5
13748: PUSH
13749: LD_VAR 0 6
13753: PUSH
13754: LD_INT 1
13756: ARRAY
13757: PPUSH
13758: LD_VAR 0 3
13762: PPUSH
13763: CALL_OW 259
13767: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13768: LD_VAR 0 6
13772: PUSH
13773: LD_INT 1
13775: ARRAY
13776: PPUSH
13777: LD_VAR 0 2
13781: PPUSH
13782: LD_VAR 0 5
13786: PPUSH
13787: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13791: LD_VAR 0 6
13795: PUSH
13796: LD_INT 1
13798: ARRAY
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_VAR 0 4
13809: PPUSH
13810: CALL_OW 237
// end ;
13814: PPOPN 6
13816: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13817: LD_EXP 21
13821: PUSH
13822: LD_EXP 68
13826: AND
13827: IFFALSE 13906
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13835: LD_ADDR_VAR 0 1
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_OWVAR 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 30
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: ST_TO_ADDR
// if not tmp then
13871: LD_VAR 0 1
13875: NOT
13876: IFFALSE 13880
// exit ;
13878: GO 13906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13880: LD_VAR 0 1
13884: PUSH
13885: LD_INT 1
13887: PPUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: CALL_OW 12
13897: ARRAY
13898: PPUSH
13899: LD_INT 1
13901: PPUSH
13902: CALL_OW 234
// end ;
13906: PPOPN 1
13908: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13909: LD_EXP 21
13913: PUSH
13914: LD_EXP 69
13918: AND
13919: IFFALSE 14031
13921: GO 13923
13923: DISABLE
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_INT 22
13935: PUSH
13936: LD_OWVAR 2
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 30
13950: PUSH
13951: LD_INT 27
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 30
13960: PUSH
13961: LD_INT 26
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 30
13970: PUSH
13971: LD_INT 28
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: ST_TO_ADDR
// if not tmp then
13993: LD_VAR 0 2
13997: NOT
13998: IFFALSE 14002
// exit ;
14000: GO 14031
// for i in tmp do
14002: LD_ADDR_VAR 0 1
14006: PUSH
14007: LD_VAR 0 2
14011: PUSH
14012: FOR_IN
14013: IFFALSE 14029
// SetLives ( i , 1 ) ;
14015: LD_VAR 0 1
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 234
14027: GO 14012
14029: POP
14030: POP
// end ;
14031: PPOPN 2
14033: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14034: LD_EXP 21
14038: PUSH
14039: LD_EXP 70
14043: AND
14044: IFFALSE 14318
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
14053: PPUSH
// begin i := rand ( 1 , 7 ) ;
14054: LD_ADDR_VAR 0 1
14058: PUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_INT 7
14064: PPUSH
14065: CALL_OW 12
14069: ST_TO_ADDR
// case i of 1 :
14070: LD_VAR 0 1
14074: PUSH
14075: LD_INT 1
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14093
14083: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14084: LD_STRING earthquake(getX(game), 0, 32)
14086: PPUSH
14087: CALL_OW 559
14091: GO 14318
14093: LD_INT 2
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14115
14101: POP
// begin ToLua ( displayStucuk(); ) ;
14102: LD_STRING displayStucuk();
14104: PPUSH
14105: CALL_OW 559
// ResetFog ;
14109: CALL_OW 335
// end ; 3 :
14113: GO 14318
14115: LD_INT 3
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14227
14123: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14124: LD_ADDR_VAR 0 2
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_OWVAR 2
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: ST_TO_ADDR
// if not tmp then
14160: LD_VAR 0 2
14164: NOT
14165: IFFALSE 14169
// exit ;
14167: GO 14318
// un := tmp [ rand ( 1 , tmp ) ] ;
14169: LD_ADDR_VAR 0 3
14173: PUSH
14174: LD_VAR 0 2
14178: PUSH
14179: LD_INT 1
14181: PPUSH
14182: LD_VAR 0 2
14186: PPUSH
14187: CALL_OW 12
14191: ARRAY
14192: ST_TO_ADDR
// if Crawls ( un ) then
14193: LD_VAR 0 3
14197: PPUSH
14198: CALL_OW 318
14202: IFFALSE 14213
// ComWalk ( un ) ;
14204: LD_VAR 0 3
14208: PPUSH
14209: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_INT 8
14220: PPUSH
14221: CALL_OW 336
// end ; 4 :
14225: GO 14318
14227: LD_INT 4
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14296
14235: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14236: LD_ADDR_VAR 0 2
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_OWVAR 2
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 30
14255: PUSH
14256: LD_INT 29
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PPUSH
14267: CALL_OW 69
14271: ST_TO_ADDR
// if not tmp then
14272: LD_VAR 0 2
14276: NOT
14277: IFFALSE 14281
// exit ;
14279: GO 14318
// DestroyUnit ( tmp [ 1 ] ) ;
14281: LD_VAR 0 2
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: CALL_OW 65
// end ; 5 .. 7 :
14294: GO 14318
14296: LD_INT 5
14298: DOUBLE
14299: GREATEREQUAL
14300: IFFALSE 14308
14302: LD_INT 7
14304: DOUBLE
14305: LESSEQUAL
14306: IFTRUE 14310
14308: GO 14317
14310: POP
// StreamSibBomb ; end ;
14311: CALL 10598 0 0
14315: GO 14318
14317: POP
// end ;
14318: PPOPN 3
14320: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14321: LD_EXP 21
14325: PUSH
14326: LD_EXP 71
14330: AND
14331: IFFALSE 14487
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
14339: PPUSH
14340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14341: LD_ADDR_VAR 0 2
14345: PUSH
14346: LD_INT 81
14348: PUSH
14349: LD_OWVAR 2
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 2
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PPUSH
14390: CALL_OW 69
14394: ST_TO_ADDR
// if not tmp then
14395: LD_VAR 0 2
14399: NOT
14400: IFFALSE 14404
// exit ;
14402: GO 14487
// p := 0 ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_INT 0
14411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14412: LD_INT 35
14414: PPUSH
14415: CALL_OW 67
// p := p + 1 ;
14419: LD_ADDR_VAR 0 3
14423: PUSH
14424: LD_VAR 0 3
14428: PUSH
14429: LD_INT 1
14431: PLUS
14432: ST_TO_ADDR
// for i in tmp do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_VAR 0 2
14442: PUSH
14443: FOR_IN
14444: IFFALSE 14475
// if GetLives ( i ) < 1000 then
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 256
14455: PUSH
14456: LD_INT 1000
14458: LESS
14459: IFFALSE 14473
// SetLives ( i , 1000 ) ;
14461: LD_VAR 0 1
14465: PPUSH
14466: LD_INT 1000
14468: PPUSH
14469: CALL_OW 234
14473: GO 14443
14475: POP
14476: POP
// until p > 20 ;
14477: LD_VAR 0 3
14481: PUSH
14482: LD_INT 20
14484: GREATER
14485: IFFALSE 14412
// end ;
14487: PPOPN 3
14489: END
// every 0 0$1 trigger StreamModeActive and sTime do
14490: LD_EXP 21
14494: PUSH
14495: LD_EXP 72
14499: AND
14500: IFFALSE 14535
14502: GO 14504
14504: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14505: LD_INT 28
14507: PPUSH
14508: LD_OWVAR 2
14512: PPUSH
14513: LD_INT 2
14515: PPUSH
14516: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14520: LD_INT 30
14522: PPUSH
14523: LD_OWVAR 2
14527: PPUSH
14528: LD_INT 2
14530: PPUSH
14531: CALL_OW 322
// end ;
14535: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14536: LD_EXP 21
14540: PUSH
14541: LD_EXP 73
14545: AND
14546: IFFALSE 14667
14548: GO 14550
14550: DISABLE
14551: LD_INT 0
14553: PPUSH
14554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: LD_INT 22
14562: PUSH
14563: LD_OWVAR 2
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 21
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: LD_INT 23
14587: PUSH
14588: LD_INT 0
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 69
14608: ST_TO_ADDR
// if not tmp then
14609: LD_VAR 0 2
14613: NOT
14614: IFFALSE 14618
// exit ;
14616: GO 14667
// for i in tmp do
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: LD_VAR 0 2
14627: PUSH
14628: FOR_IN
14629: IFFALSE 14665
// begin if Crawls ( i ) then
14631: LD_VAR 0 1
14635: PPUSH
14636: CALL_OW 318
14640: IFFALSE 14651
// ComWalk ( i ) ;
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 138
// SetClass ( i , 2 ) ;
14651: LD_VAR 0 1
14655: PPUSH
14656: LD_INT 2
14658: PPUSH
14659: CALL_OW 336
// end ;
14663: GO 14628
14665: POP
14666: POP
// end ;
14667: PPOPN 2
14669: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14670: LD_EXP 21
14674: PUSH
14675: LD_EXP 74
14679: AND
14680: IFFALSE 14961
14682: GO 14684
14684: DISABLE
14685: LD_INT 0
14687: PPUSH
14688: PPUSH
14689: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14690: LD_OWVAR 2
14694: PPUSH
14695: LD_INT 9
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14708: LD_INT 9
14710: PPUSH
14711: LD_OWVAR 2
14715: PPUSH
14716: CALL_OW 343
// uc_side := 9 ;
14720: LD_ADDR_OWVAR 20
14724: PUSH
14725: LD_INT 9
14727: ST_TO_ADDR
// uc_nation := 2 ;
14728: LD_ADDR_OWVAR 21
14732: PUSH
14733: LD_INT 2
14735: ST_TO_ADDR
// hc_name := Dark Warrior ;
14736: LD_ADDR_OWVAR 26
14740: PUSH
14741: LD_STRING Dark Warrior
14743: ST_TO_ADDR
// hc_gallery :=  ;
14744: LD_ADDR_OWVAR 33
14748: PUSH
14749: LD_STRING 
14751: ST_TO_ADDR
// hc_noskilllimit := true ;
14752: LD_ADDR_OWVAR 76
14756: PUSH
14757: LD_INT 1
14759: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14760: LD_ADDR_OWVAR 31
14764: PUSH
14765: LD_INT 30
14767: PUSH
14768: LD_INT 30
14770: PUSH
14771: LD_INT 30
14773: PUSH
14774: LD_INT 30
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: ST_TO_ADDR
// un := CreateHuman ;
14783: LD_ADDR_VAR 0 3
14787: PUSH
14788: CALL_OW 44
14792: ST_TO_ADDR
// hc_noskilllimit := false ;
14793: LD_ADDR_OWVAR 76
14797: PUSH
14798: LD_INT 0
14800: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 51
// p := 0 ;
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: LD_INT 0
14820: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14821: LD_INT 35
14823: PPUSH
14824: CALL_OW 67
// p := p + 1 ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_VAR 0 2
14837: PUSH
14838: LD_INT 1
14840: PLUS
14841: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14842: LD_VAR 0 3
14846: PPUSH
14847: CALL_OW 256
14851: PUSH
14852: LD_INT 1000
14854: LESS
14855: IFFALSE 14869
// SetLives ( un , 1000 ) ;
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 1000
14864: PPUSH
14865: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14869: LD_VAR 0 3
14873: PPUSH
14874: LD_INT 81
14876: PUSH
14877: LD_OWVAR 2
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 91
14888: PUSH
14889: LD_VAR 0 3
14893: PUSH
14894: LD_INT 30
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: CALL_OW 74
14920: PPUSH
14921: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
14925: LD_VAR 0 2
14929: PUSH
14930: LD_INT 60
14932: GREATER
14933: PUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: CALL_OW 301
14943: OR
14944: IFFALSE 14821
// if un then
14946: LD_VAR 0 3
14950: IFFALSE 14961
// RemoveUnit ( un ) ;
14952: LD_VAR 0 3
14956: PPUSH
14957: CALL_OW 64
// end ;
14961: PPOPN 3
14963: END
