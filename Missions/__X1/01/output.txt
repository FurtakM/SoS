// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3034 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 16
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 18
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 19
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 20
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; begin
 109: LD_INT 0
 111: PPUSH
// InGameOn ;
 112: CALL_OW 8
// wait ( 0 0$2 ) ;
 116: LD_INT 70
 118: PPUSH
 119: CALL_OW 67
// PrepareArabian ;
 123: CALL 3282 0 0
// PrepareKurtGroup ;
 127: CALL 2881 0 0
// PrepareSheikGroup ;
 131: CALL 2519 0 0
// PrepareHeikeGroup ;
 135: CALL 2431 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 139: LD_INT 51
 141: PPUSH
 142: LD_INT 85
 144: PPUSH
 145: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 1
 154: PPUSH
 155: LD_INT 5
 157: PPUSH
 158: LD_INT 32763
 160: NEG
 161: PPUSH
 162: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 166: LD_INT 1
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 5
 174: PPUSH
 175: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 179: LD_EXP 1
 183: PUSH
 184: LD_EXP 5
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: PPUSH
 193: LD_INT 53
 195: PPUSH
 196: LD_INT 88
 198: PPUSH
 199: CALL_OW 111
// wait ( 0 0$1 ) ;
 203: LD_INT 35
 205: PPUSH
 206: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 210: LD_EXP 5
 214: PPUSH
 215: LD_STRING DK-1
 217: PPUSH
 218: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 222: LD_EXP 1
 226: PPUSH
 227: LD_STRING DH-1
 229: PPUSH
 230: CALL_OW 88
// wait ( 0 0$2 ) ;
 234: LD_INT 70
 236: PPUSH
 237: CALL_OW 67
// PrepareArabian ;
 241: CALL 3282 0 0
// InGameOff ;
 245: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 249: LD_STRING O1
 251: PPUSH
 252: CALL_OW 337
// goWithHeike := true ;
 256: LD_ADDR_EXP 17
 260: PUSH
 261: LD_INT 1
 263: ST_TO_ADDR
// SaveForQuickRestart ;
 264: CALL_OW 22
// end ;
 268: LD_VAR 0 1
 272: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 273: LD_INT 2
 275: PPUSH
 276: LD_INT 5
 278: PPUSH
 279: CALL_OW 81
 283: PUSH
 284: LD_INT 2
 286: EQUAL
 287: IFFALSE 433
 289: GO 291
 291: DISABLE
 292: LD_INT 0
 294: PPUSH
// begin goWithHeike := false ;
 295: LD_ADDR_EXP 17
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// DialogueOn ;
 303: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 307: LD_EXP 1
 311: PPUSH
 312: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 316: LD_EXP 5
 320: PPUSH
 321: LD_STRING DK-betray-1
 323: PPUSH
 324: CALL_OW 88
// DialogueOff ;
 328: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 332: LD_EXP 5
 336: PPUSH
 337: LD_INT 90
 339: PPUSH
 340: LD_INT 46
 342: PPUSH
 343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 347: LD_INT 35
 349: PPUSH
 350: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 5
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 25
 371: PUSH
 372: LD_INT 1
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PPUSH
 383: CALL_OW 69
 387: PUSH
 388: LD_EXP 5
 392: DIFF
 393: PUSH
 394: FOR_IN
 395: IFFALSE 413
// ComAttackUnit ( i , Heike ) ;
 397: LD_VAR 0 1
 401: PPUSH
 402: LD_EXP 1
 406: PPUSH
 407: CALL_OW 115
 411: GO 394
 413: POP
 414: POP
// until IsDead ( Heike ) ;
 415: LD_EXP 1
 419: PPUSH
 420: CALL_OW 301
 424: IFFALSE 347
// YouLost ( Betray ) ;
 426: LD_STRING Betray
 428: PPUSH
 429: CALL_OW 104
// end ;
 433: PPOPN 1
 435: END
// every 0 0$1 trigger goWithHeike do
 436: LD_EXP 17
 440: IFFALSE 495
 442: GO 444
 444: DISABLE
// begin enable ;
 445: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 446: LD_EXP 1
 450: PPUSH
 451: LD_EXP 5
 455: PPUSH
 456: CALL_OW 296
 460: PUSH
 461: LD_INT 3
 463: GREATER
 464: IFFALSE 495
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 466: LD_EXP 5
 470: PPUSH
 471: LD_EXP 1
 475: PPUSH
 476: CALL_OW 250
 480: PPUSH
 481: LD_EXP 1
 485: PPUSH
 486: CALL_OW 251
 490: PPUSH
 491: CALL_OW 111
// end ;
 495: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 47
 501: PPUSH
 502: LD_INT 68
 504: PPUSH
 505: CALL_OW 293
 509: PUSH
 510: LD_EXP 18
 514: NOT
 515: AND
 516: IFFALSE 560
 518: GO 520
 520: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 521: LD_EXP 1
 525: PPUSH
 526: LD_STRING DH-spot-1
 528: PPUSH
 529: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 533: LD_INT 47
 535: PPUSH
 536: LD_INT 68
 538: PPUSH
 539: CALL_OW 428
 543: PPUSH
 544: CALL_OW 313
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_STRING DR-spot-1
 555: PPUSH
 556: CALL_OW 88
// end ;
 560: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 561: LD_INT 2
 563: PPUSH
 564: LD_INT 93
 566: PPUSH
 567: LD_INT 89
 569: PPUSH
 570: CALL_OW 293
 574: PUSH
 575: LD_EXP 18
 579: NOT
 580: AND
 581: IFFALSE 625
 583: GO 585
 585: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 586: LD_EXP 1
 590: PPUSH
 591: LD_STRING DH-spot-1
 593: PPUSH
 594: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 598: LD_INT 93
 600: PPUSH
 601: LD_INT 89
 603: PPUSH
 604: CALL_OW 428
 608: PPUSH
 609: CALL_OW 313
 613: PUSH
 614: LD_INT 1
 616: ARRAY
 617: PPUSH
 618: LD_STRING DR-spot-2
 620: PPUSH
 621: CALL_OW 88
// end ;
 625: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 626: LD_EXP 20
 630: PUSH
 631: LD_EXP 14
 635: PPUSH
 636: LD_INT 101
 638: PUSH
 639: LD_INT 2
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: AND
 651: IFFALSE 975
 653: GO 655
 655: DISABLE
 656: LD_INT 0
 658: PPUSH
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// begin enable ;
 663: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_EXP 14
 673: PPUSH
 674: LD_INT 101
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 72
 688: ST_TO_ADDR
// if not tmp then
 689: LD_VAR 0 1
 693: NOT
 694: IFFALSE 698
// exit ;
 696: GO 975
// InGameOn ;
 698: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 702: LD_EXP 1
 706: PUSH
 707: LD_EXP 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PPUSH
 716: LD_VAR 0 1
 720: PUSH
 721: LD_INT 1
 723: ARRAY
 724: PPUSH
 725: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 729: LD_VAR 0 1
 733: PUSH
 734: LD_INT 1
 736: ARRAY
 737: PPUSH
 738: LD_EXP 1
 742: PPUSH
 743: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 747: LD_VAR 0 1
 751: PUSH
 752: LD_INT 1
 754: ARRAY
 755: PPUSH
 756: LD_STRING DG-meeting-1
 758: PPUSH
 759: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: LD_INT 81
 770: PUSH
 771: LD_INT 10
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 63
 780: PUSH
 781: LD_INT 25
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 108
 790: PUSH
 791: LD_INT 73
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 803: LD_ADDR_VAR 0 4
 807: PUSH
 808: LD_INT 9999
 810: PUSH
 811: EMPTY
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 2
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 915
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 833: LD_ADDR_VAR 0 5
 837: PUSH
 838: LD_EXP 1
 842: PPUSH
 843: LD_VAR 0 3
 847: PUSH
 848: LD_VAR 0 2
 852: ARRAY
 853: PUSH
 854: LD_INT 1
 856: ARRAY
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PUSH
 869: LD_INT 2
 871: ARRAY
 872: PPUSH
 873: CALL_OW 297
 877: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 878: LD_VAR 0 4
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PUSH
 887: LD_VAR 0 5
 891: GREATER
 892: IFFALSE 913
// dist := [ tdist , i ] ;
 894: LD_ADDR_VAR 0 4
 898: PUSH
 899: LD_VAR 0 5
 903: PUSH
 904: LD_VAR 0 2
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// end ;
 913: GO 830
 915: POP
 916: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 917: LD_EXP 1
 921: PPUSH
 922: LD_VAR 0 3
 926: PUSH
 927: LD_VAR 0 4
 931: PUSH
 932: LD_INT 2
 934: ARRAY
 935: ARRAY
 936: PUSH
 937: LD_INT 1
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 3
 945: PUSH
 946: LD_VAR 0 4
 950: PUSH
 951: LD_INT 2
 953: ARRAY
 954: ARRAY
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$3 ) ;
 964: LD_INT 105
 966: PPUSH
 967: CALL_OW 67
// InGameOff ;
 971: CALL_OW 9
// end ;
 975: PPOPN 5
 977: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
 978: LD_EXP 1
 982: PPUSH
 983: LD_INT 14
 985: PPUSH
 986: CALL_OW 296
 990: PUSH
 991: LD_INT 40
 993: GREATER
 994: PUSH
 995: LD_EXP 1
 999: PPUSH
1000: CALL_OW 316
1004: AND
1005: IFFALSE 1022
1007: GO 1009
1009: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1010: LD_EXP 5
1014: PPUSH
1015: LD_STRING DK-idle-1
1017: PPUSH
1018: CALL_OW 88
// end ;
1022: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1023: LD_INT 2
1025: PPUSH
1026: LD_INT 59
1028: PPUSH
1029: LD_INT 47
1031: PPUSH
1032: CALL_OW 293
1036: IFFALSE 1186
1038: GO 1040
1040: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1041: LD_INT 59
1043: PPUSH
1044: LD_INT 47
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 10
1052: NEG
1053: PPUSH
1054: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1058: LD_INT 59
1060: PPUSH
1061: LD_INT 47
1063: PPUSH
1064: CALL_OW 86
// goWithHeike := false ;
1068: LD_ADDR_EXP 17
1072: PUSH
1073: LD_INT 0
1075: ST_TO_ADDR
// baseSpotted := true ;
1076: LD_ADDR_EXP 18
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// InGameOn ;
1084: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1088: LD_EXP 1
1092: PUSH
1093: LD_EXP 5
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PPUSH
1102: LD_INT 54
1104: PPUSH
1105: LD_INT 45
1107: PPUSH
1108: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1112: LD_EXP 1
1116: PUSH
1117: LD_EXP 5
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PPUSH
1126: LD_INT 59
1128: PPUSH
1129: LD_INT 47
1131: PPUSH
1132: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1136: LD_EXP 1
1140: PPUSH
1141: LD_STRING DH-base-1
1143: PPUSH
1144: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1148: LD_EXP 5
1152: PPUSH
1153: LD_STRING DK-base-1
1155: PPUSH
1156: CALL_OW 88
// InGameOff ;
1160: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1164: LD_ADDR_EXP 16
1168: PUSH
1169: LD_EXP 16
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ST_TO_ADDR
// goWithHeike := true ;
1178: LD_ADDR_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// end ;
1186: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1187: LD_INT 2
1189: PPUSH
1190: LD_EXP 8
1194: PPUSH
1195: CALL_OW 292
1199: IFFALSE 2428
1201: GO 1203
1203: DISABLE
1204: LD_INT 0
1206: PPUSH
1207: PPUSH
1208: PPUSH
// begin meetingActive := false ;
1209: LD_ADDR_EXP 20
1213: PUSH
1214: LD_INT 0
1216: ST_TO_ADDR
// goWithHeike := false ;
1217: LD_ADDR_EXP 17
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: LD_INT 6
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 517
1240: ST_TO_ADDR
// for i := 1 to 4 do
1241: LD_ADDR_VAR 0 1
1245: PUSH
1246: DOUBLE
1247: LD_INT 1
1249: DEC
1250: ST_TO_ADDR
1251: LD_INT 4
1253: PUSH
1254: FOR_TO
1255: IFFALSE 1322
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1257: LD_EXP 15
1261: PUSH
1262: LD_VAR 0 1
1266: ARRAY
1267: PPUSH
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PUSH
1277: LD_VAR 0 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 2
1290: ARRAY
1291: PUSH
1292: LD_VAR 0 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1302: LD_EXP 15
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 14
1315: PPUSH
1316: CALL_OW 179
// end ;
1320: GO 1254
1322: POP
1323: POP
// InGameOn ;
1324: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1328: LD_EXP 1
1332: PPUSH
1333: LD_EXP 8
1337: PPUSH
1338: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1342: LD_EXP 5
1346: PPUSH
1347: LD_EXP 1
1351: PPUSH
1352: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1356: LD_INT 10
1358: PPUSH
1359: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1363: LD_EXP 1
1367: PPUSH
1368: LD_EXP 8
1372: PPUSH
1373: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1377: LD_EXP 5
1381: PPUSH
1382: LD_EXP 1
1386: PPUSH
1387: CALL_OW 250
1391: PPUSH
1392: LD_INT 5
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 272
1402: PPUSH
1403: LD_EXP 1
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: CALL_OW 273
1423: PPUSH
1424: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1428: LD_EXP 1
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 296
1442: PUSH
1443: LD_INT 5
1445: LESS
1446: PUSH
1447: LD_EXP 5
1451: PPUSH
1452: LD_EXP 8
1456: PPUSH
1457: CALL_OW 296
1461: PUSH
1462: LD_INT 6
1464: LESS
1465: AND
1466: IFFALSE 1356
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1468: LD_EXP 1
1472: PUSH
1473: LD_EXP 5
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: LD_EXP 8
1486: PPUSH
1487: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1491: LD_EXP 8
1495: PUSH
1496: LD_EXP 4
1500: PUSH
1501: LD_EXP 9
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: LIST
1510: PPUSH
1511: LD_EXP 1
1515: PPUSH
1516: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1520: LD_INT 7
1522: PPUSH
1523: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1527: LD_EXP 8
1531: PPUSH
1532: LD_STRING DKu-Kurt-1
1534: PPUSH
1535: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1539: LD_EXP 5
1543: PPUSH
1544: LD_STRING DK-Kurt-1
1546: PPUSH
1547: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1551: LD_EXP 8
1555: PPUSH
1556: LD_STRING DKu-Kurt-2
1558: PPUSH
1559: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1563: LD_INT 7
1565: PPUSH
1566: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1570: LD_EXP 1
1574: PPUSH
1575: LD_STRING DH-Kurt-1
1577: PPUSH
1578: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1582: LD_EXP 8
1586: PPUSH
1587: LD_STRING DKu-Kurt-3
1589: PPUSH
1590: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1594: LD_EXP 5
1598: PPUSH
1599: LD_STRING DK-Kurt-3
1601: PPUSH
1602: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1606: LD_EXP 9
1610: PPUSH
1611: LD_STRING DHa-Kurt-3
1613: PPUSH
1614: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1618: LD_EXP 4
1622: PPUSH
1623: LD_STRING DO-Kurt-3
1625: PPUSH
1626: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: LD_EXP 8
1639: PUSH
1640: LD_EXP 4
1644: PUSH
1645: LD_EXP 9
1649: PUSH
1650: LD_EXP 5
1654: PUSH
1655: LD_EXP 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// for i = 1 to 5 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 5
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1756
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1683: LD_VAR 0 3
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: PUSH
1708: LD_INT 4
1710: PLUS
1711: ARRAY
1712: PPUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 2
1720: ARRAY
1721: PUSH
1722: LD_VAR 0 1
1726: PUSH
1727: LD_INT 4
1729: PLUS
1730: ARRAY
1731: PPUSH
1732: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 1
1745: ARRAY
1746: PPUSH
1747: LD_INT 14
1749: PPUSH
1750: CALL_OW 179
// end ;
1754: GO 1680
1756: POP
1757: POP
// wait ( 0 0$2 ) ;
1758: LD_INT 70
1760: PPUSH
1761: CALL_OW 67
// CenterOnUnits ( eon ) ;
1765: LD_INT 14
1767: PPUSH
1768: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1772: LD_INT 90
1774: PPUSH
1775: LD_INT 43
1777: PPUSH
1778: LD_INT 2
1780: PPUSH
1781: LD_INT 21
1783: NEG
1784: PPUSH
1785: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1789: LD_EXP 2
1793: PPUSH
1794: LD_INT 84
1796: PPUSH
1797: LD_INT 36
1799: PPUSH
1800: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1804: LD_EXP 2
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1816: LD_EXP 11
1820: PPUSH
1821: LD_INT 85
1823: PPUSH
1824: LD_INT 36
1826: PPUSH
1827: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1831: LD_EXP 11
1835: PPUSH
1836: LD_INT 14
1838: PPUSH
1839: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1843: LD_EXP 10
1847: PPUSH
1848: LD_INT 86
1850: PPUSH
1851: LD_INT 36
1853: PPUSH
1854: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1858: LD_EXP 10
1862: PPUSH
1863: LD_INT 14
1865: PPUSH
1866: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1870: LD_EXP 7
1874: PPUSH
1875: LD_INT 87
1877: PPUSH
1878: LD_INT 36
1880: PPUSH
1881: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1885: LD_EXP 7
1889: PPUSH
1890: LD_INT 14
1892: PPUSH
1893: CALL_OW 179
// wait ( 0 0$3 ) ;
1897: LD_INT 105
1899: PPUSH
1900: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1904: LD_INT 35
1906: PPUSH
1907: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1911: LD_EXP 1
1915: PPUSH
1916: LD_INT 6
1918: PPUSH
1919: CALL_OW 308
1923: IFFALSE 1904
// heikeNearbyEon := true ;
1925: LD_ADDR_EXP 19
1929: PUSH
1930: LD_INT 1
1932: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1933: LD_EXP 6
1937: PPUSH
1938: LD_INT 88
1940: PPUSH
1941: LD_INT 37
1943: PPUSH
1944: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1948: LD_EXP 6
1952: PPUSH
1953: LD_EXP 13
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1966: LD_EXP 13
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PPUSH
1975: LD_INT 89
1977: PPUSH
1978: LD_INT 37
1980: PPUSH
1981: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
1985: LD_EXP 13
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: PPUSH
1994: LD_INT 91
1996: PPUSH
1997: LD_INT 39
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2004: LD_EXP 13
2008: PPUSH
2009: LD_EXP 11
2013: PPUSH
2014: CALL_OW 179
// wait ( 0 0$1 ) ;
2018: LD_INT 35
2020: PPUSH
2021: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2025: LD_EXP 13
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: LD_STRING DS-eon-1
2036: PPUSH
2037: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2041: LD_EXP 6
2045: PPUSH
2046: LD_STRING DSh-eon-1
2048: PPUSH
2049: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2053: LD_EXP 13
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: LD_INT 92
2064: PPUSH
2065: LD_INT 43
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2072: LD_EXP 13
2076: PUSH
2077: LD_INT 1
2079: ARRAY
2080: PPUSH
2081: LD_INT 14
2083: PPUSH
2084: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2088: LD_EXP 13
2092: PUSH
2093: LD_INT 2
2095: ARRAY
2096: PPUSH
2097: LD_INT 93
2099: PPUSH
2100: LD_INT 41
2102: PPUSH
2103: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2107: LD_EXP 13
2111: PUSH
2112: LD_INT 2
2114: ARRAY
2115: PPUSH
2116: LD_INT 93
2118: PPUSH
2119: LD_INT 40
2121: PPUSH
2122: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2126: LD_EXP 6
2130: PPUSH
2131: LD_INT 88
2133: PPUSH
2134: LD_INT 41
2136: PPUSH
2137: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2141: LD_EXP 6
2145: PPUSH
2146: LD_INT 87
2148: PPUSH
2149: LD_INT 41
2151: PPUSH
2152: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2163: LD_EXP 6
2167: PPUSH
2168: LD_INT 88
2170: PPUSH
2171: LD_INT 41
2173: PPUSH
2174: CALL_OW 307
2178: IFFALSE 2156
// wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2187: LD_EXP 6
2191: PPUSH
2192: LD_STRING DSh-eon-2
2194: PPUSH
2195: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2199: LD_EXP 11
2203: PPUSH
2204: LD_INT 87
2206: PPUSH
2207: LD_INT 40
2209: PPUSH
2210: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2214: LD_EXP 11
2218: PPUSH
2219: LD_INT 86
2221: PPUSH
2222: LD_INT 40
2224: PPUSH
2225: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2229: LD_INT 35
2231: PPUSH
2232: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2236: LD_EXP 11
2240: PPUSH
2241: LD_INT 87
2243: PPUSH
2244: LD_INT 40
2246: PPUSH
2247: CALL_OW 307
2251: IFFALSE 2229
// Say ( Shariff , DShar-eon-3 ) ;
2253: LD_EXP 11
2257: PPUSH
2258: LD_STRING DShar-eon-3
2260: PPUSH
2261: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2265: LD_EXP 11
2269: PPUSH
2270: LD_STRING DShar-eon-4
2272: PPUSH
2273: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2277: LD_EXP 5
2281: PPUSH
2282: LD_STRING DK-eon-4
2284: PPUSH
2285: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2289: LD_EXP 5
2293: PPUSH
2294: LD_INT 14
2296: PPUSH
2297: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2301: LD_INT 35
2303: PPUSH
2304: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2308: LD_EXP 5
2312: PPUSH
2313: CALL_OW 305
2317: NOT
2318: IFFALSE 2301
// Say ( Shariff , DShar-eon-5 ) ;
2320: LD_EXP 11
2324: PPUSH
2325: LD_STRING DShar-eon-5
2327: PPUSH
2328: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2332: LD_EXP 1
2336: PPUSH
2337: LD_INT 91
2339: PPUSH
2340: LD_INT 44
2342: PPUSH
2343: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2347: LD_EXP 1
2351: PPUSH
2352: LD_INT 14
2354: PPUSH
2355: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2359: LD_INT 35
2361: PPUSH
2362: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2366: LD_EXP 1
2370: PPUSH
2371: LD_INT 91
2373: PPUSH
2374: LD_INT 44
2376: PPUSH
2377: CALL_OW 307
2381: IFFALSE 2359
// Say ( Heike , DH-eon-5 ) ;
2383: LD_EXP 1
2387: PPUSH
2388: LD_STRING DH-eon-5
2390: PPUSH
2391: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2395: LD_EXP 1
2399: PPUSH
2400: LD_INT 14
2402: PPUSH
2403: CALL_OW 120
// wait ( 0 0$2 ) ;
2407: LD_INT 70
2409: PPUSH
2410: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2414: LD_INT 1
2416: PPUSH
2417: LD_STRING %_cont
2419: PPUSH
2420: CALL_OW 340
// InGameOff ;
2424: CALL_OW 9
// end ; end_of_file
2428: PPOPN 3
2430: END
// export function PrepareHeikeGroup ; begin
2431: LD_INT 0
2433: PPUSH
// uc_side := 2 ;
2434: LD_ADDR_OWVAR 20
2438: PUSH
2439: LD_INT 2
2441: ST_TO_ADDR
// uc_nation := 2 ;
2442: LD_ADDR_OWVAR 21
2446: PUSH
2447: LD_INT 2
2449: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2450: LD_ADDR_EXP 1
2454: PUSH
2455: LD_STRING Heike
2457: PPUSH
2458: CALL_OW 25
2462: ST_TO_ADDR
// uc_side := 5 ;
2463: LD_ADDR_OWVAR 20
2467: PUSH
2468: LD_INT 5
2470: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2471: LD_ADDR_EXP 5
2475: PUSH
2476: LD_STRING Kaia
2478: PPUSH
2479: CALL_OW 25
2483: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2484: LD_EXP 1
2488: PPUSH
2489: LD_INT 3
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2499: LD_EXP 5
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareSheikGroup ; var un , i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
// uc_side := 5 ;
2524: LD_ADDR_OWVAR 20
2528: PUSH
2529: LD_INT 5
2531: ST_TO_ADDR
// uc_nation := 2 ;
2532: LD_ADDR_OWVAR 21
2536: PUSH
2537: LD_INT 2
2539: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2540: LD_ADDR_EXP 10
2544: PUSH
2545: LD_STRING Ali
2547: PPUSH
2548: CALL_OW 25
2552: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2553: LD_ADDR_EXP 11
2557: PUSH
2558: LD_STRING Abdul
2560: PPUSH
2561: CALL_OW 25
2565: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2566: LD_ADDR_EXP 2
2570: PUSH
2571: LD_STRING Omar
2573: PPUSH
2574: CALL_OW 25
2578: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2579: LD_ADDR_EXP 7
2583: PUSH
2584: LD_STRING Mahtab
2586: PPUSH
2587: CALL_OW 25
2591: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2592: LD_ADDR_EXP 6
2596: PUSH
2597: LD_STRING Shahrzad
2599: PPUSH
2600: CALL_OW 25
2604: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2605: LD_EXP 10
2609: PPUSH
2610: LD_INT 85
2612: PPUSH
2613: LD_INT 37
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2623: LD_EXP 11
2627: PPUSH
2628: LD_INT 87
2630: PPUSH
2631: LD_INT 37
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2641: LD_EXP 2
2645: PPUSH
2646: LD_INT 85
2648: PPUSH
2649: LD_INT 35
2651: PPUSH
2652: LD_INT 0
2654: PPUSH
2655: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2659: LD_EXP 7
2663: PPUSH
2664: LD_INT 86
2666: PPUSH
2667: LD_INT 39
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2677: LD_EXP 6
2681: PPUSH
2682: LD_INT 88
2684: PPUSH
2685: LD_INT 39
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2695: LD_EXP 10
2699: PPUSH
2700: LD_EXP 11
2704: PPUSH
2705: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2709: LD_EXP 11
2713: PPUSH
2714: LD_EXP 10
2718: PPUSH
2719: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2723: LD_EXP 2
2727: PPUSH
2728: LD_EXP 11
2732: PPUSH
2733: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2737: LD_EXP 7
2741: PUSH
2742: LD_EXP 6
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: LD_EXP 11
2755: PPUSH
2756: CALL_OW 119
// for i := 1 to 2 do
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: DOUBLE
2766: LD_INT 1
2768: DEC
2769: ST_TO_ADDR
2770: LD_INT 2
2772: PUSH
2773: FOR_TO
2774: IFFALSE 2860
// begin PrepareHuman ( false , 4 , 6 ) ;
2776: LD_INT 0
2778: PPUSH
2779: LD_INT 4
2781: PPUSH
2782: LD_INT 6
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2799: LD_VAR 0 2
2803: PPUSH
2804: LD_INT 90
2806: PPUSH
2807: LD_INT 44
2809: PPUSH
2810: LD_INT 3
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2820: LD_VAR 0 2
2824: PPUSH
2825: LD_INT 91
2827: PPUSH
2828: LD_INT 43
2830: PPUSH
2831: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2835: LD_ADDR_EXP 13
2839: PUSH
2840: LD_EXP 13
2844: PPUSH
2845: LD_INT 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL_OW 2
2857: ST_TO_ADDR
// end ;
2858: GO 2773
2860: POP
2861: POP
// scientists := scientists diff 0 ;
2862: LD_ADDR_EXP 13
2866: PUSH
2867: LD_EXP 13
2871: PUSH
2872: LD_INT 0
2874: DIFF
2875: ST_TO_ADDR
// end ;
2876: LD_VAR 0 1
2880: RET
// export function PrepareKurtGroup ; var i ; begin
2881: LD_INT 0
2883: PPUSH
2884: PPUSH
// uc_side := 5 ;
2885: LD_ADDR_OWVAR 20
2889: PUSH
2890: LD_INT 5
2892: ST_TO_ADDR
// uc_nation := 2 ;
2893: LD_ADDR_OWVAR 21
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2901: LD_ADDR_EXP 8
2905: PUSH
2906: LD_STRING Kurt
2908: PPUSH
2909: CALL_OW 25
2913: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2914: LD_ADDR_EXP 4
2918: PUSH
2919: LD_STRING Olaf
2921: PPUSH
2922: CALL_OW 25
2926: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2927: LD_ADDR_EXP 9
2931: PUSH
2932: LD_STRING Hans
2934: PPUSH
2935: CALL_OW 25
2939: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: LD_EXP 8
2949: PUSH
2950: LD_EXP 9
2954: PUSH
2955: LD_EXP 4
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: FOR_IN
2966: IFFALSE 2985
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
2968: LD_VAR 0 2
2972: PPUSH
2973: LD_INT 10
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 49
2983: GO 2965
2985: POP
2986: POP
// ComTurnUnit ( Kurt , Hans ) ;
2987: LD_EXP 8
2991: PPUSH
2992: LD_EXP 9
2996: PPUSH
2997: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3001: LD_EXP 4
3005: PPUSH
3006: LD_EXP 9
3010: PPUSH
3011: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3015: LD_EXP 9
3019: PPUSH
3020: LD_EXP 4
3024: PPUSH
3025: CALL_OW 119
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: LD_INT 21
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 69
3059: PUSH
3060: LD_INT 14
3062: DIFF
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3145
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3067: LD_VAR 0 2
3071: PPUSH
3072: CALL_OW 266
3076: PUSH
3077: LD_INT 6
3079: PUSH
3080: LD_INT 31
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: IN
3087: IFFALSE 3111
// SetLives ( i , rand ( 500 , 600 ) ) else
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 500
3096: PPUSH
3097: LD_INT 600
3099: PPUSH
3100: CALL_OW 12
3104: PPUSH
3105: CALL_OW 234
3109: GO 3131
// SetLives ( i , rand ( 300 , 499 ) ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 300
3118: PPUSH
3119: LD_INT 499
3121: PPUSH
3122: CALL_OW 12
3126: PPUSH
3127: CALL_OW 234
// SetSide ( i , 5 ) ;
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 5
3138: PPUSH
3139: CALL_OW 235
// end ;
3143: GO 3064
3145: POP
3146: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_INT 9
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 517
3162: ST_TO_ADDR
// uc_side := 4 ;
3163: LD_ADDR_OWVAR 20
3167: PUSH
3168: LD_INT 4
3170: ST_TO_ADDR
// uc_nation := 1 ;
3171: LD_ADDR_OWVAR 21
3175: PUSH
3176: LD_INT 1
3178: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: DOUBLE
3185: LD_INT 1
3187: DEC
3188: ST_TO_ADDR
3189: LD_VAR 0 4
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3275
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 1
3206: PUSH
3207: LD_INT 1
3209: PUSH
3210: LD_INT 4
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_VAR 0 2
3222: PUSH
3223: LD_INT 3
3225: MOD
3226: PUSH
3227: LD_INT 1
3229: PLUS
3230: ARRAY
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 380
// un := CreateHuman ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: CALL_OW 44
3248: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3249: LD_VAR 0 3
3253: PPUSH
3254: LD_INT 9
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
// KillUnit ( un ) ;
3264: LD_VAR 0 3
3268: PPUSH
3269: CALL_OW 66
// end ;
3273: GO 3198
3275: POP
3276: POP
// end ;
3277: LD_VAR 0 1
3281: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side := 5 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 5
3298: ST_TO_ADDR
// uc_nation := 2 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3307: LD_ADDR_VAR 0 6
3311: PUSH
3312: LD_INT 2
3314: PUSH
3315: LD_INT 4
3317: PUSH
3318: LD_INT 5
3320: PUSH
3321: LD_INT 14
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: ST_TO_ADDR
// InitHc ;
3330: CALL_OW 19
// for i in area do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_VAR 0 6
3343: PUSH
3344: FOR_IN
3345: IFFALSE 3509
// begin tmp := AreaToList ( i , 0 ) ;
3347: LD_ADDR_VAR 0 5
3351: PUSH
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 517
3364: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_VAR 0 5
3379: PUSH
3380: LD_INT 1
3382: ARRAY
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3505
// begin PrepareHuman ( false , 1 , 3 ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 380
// un := CreateHuman ;
3400: LD_ADDR_VAR 0 7
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// if i = spawnBaseArea3 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 5
3417: EQUAL
3418: IFFALSE 3436
// eonGuards := eonGuards ^ un ;
3420: LD_ADDR_EXP 14
3424: PUSH
3425: LD_EXP 14
3429: PUSH
3430: LD_VAR 0 7
3434: ADD
3435: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3436: LD_VAR 0 7
3440: PPUSH
3441: LD_VAR 0 2
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 49
// ComHold ( un ) ;
3453: LD_VAR 0 7
3457: PPUSH
3458: CALL_OW 140
// if i = spawnBaseArea4 then
3462: LD_VAR 0 2
3466: PUSH
3467: LD_INT 14
3469: EQUAL
3470: IFFALSE 3503
// begin firstGroup := firstGroup ^ un ;
3472: LD_ADDR_EXP 15
3476: PUSH
3477: LD_EXP 15
3481: PUSH
3482: LD_VAR 0 7
3486: ADD
3487: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3488: LD_VAR 0 7
3492: PPUSH
3493: LD_INT 108
3495: PPUSH
3496: LD_INT 47
3498: PPUSH
3499: CALL_OW 118
// end ; end ;
3503: GO 3384
3505: POP
3506: POP
// end ;
3507: GO 3344
3509: POP
3510: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 30
3523: PUSH
3524: LD_INT 31
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3631
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: LD_INT 30
3546: PUSH
3547: LD_INT 31
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 69
3558: PUSH
3559: LD_VAR 0 2
3563: ARRAY
3564: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 3
3573: PPUSH
3574: CALL_OW 380
// un := CreateHuman ;
3578: LD_ADDR_VAR 0 7
3582: PUSH
3583: CALL_OW 44
3587: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3588: LD_VAR 0 7
3592: PPUSH
3593: LD_VAR 0 4
3597: PPUSH
3598: CALL_OW 254
3602: PUSH
3603: LD_INT 3
3605: PLUS
3606: PUSH
3607: LD_INT 6
3609: MOD
3610: PPUSH
3611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3615: LD_VAR 0 7
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: CALL_OW 52
// end ;
3629: GO 3536
3631: POP
3632: POP
// end ; end_of_file
3633: LD_VAR 0 1
3637: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3638: LD_VAR 0 1
3642: PUSH
3643: LD_INT 2
3645: EQUAL
3646: PUSH
3647: LD_VAR 0 2
3651: PUSH
3652: LD_INT 5
3654: EQUAL
3655: AND
3656: IFFALSE 3674
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 5
3663: PPUSH
3664: LD_INT 2
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 80
// end ;
3674: PPOPN 2
3676: END
// every 0 0$1 trigger scientists do var i ;
3677: LD_EXP 13
3681: IFFALSE 3889
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
// begin repeat for i in scientists do
3689: LD_ADDR_VAR 0 1
3693: PUSH
3694: LD_EXP 13
3698: PUSH
3699: FOR_IN
3700: IFFALSE 3874
// begin wait ( 0 0$1 ) ;
3702: LD_INT 35
3704: PPUSH
3705: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3709: LD_VAR 0 1
3713: PPUSH
3714: LD_INT 11
3716: PUSH
3717: LD_INT 13
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_VAR 0 1
3728: PUSH
3729: LD_INT 2
3731: MOD
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: ARRAY
3737: PPUSH
3738: CALL_OW 308
3742: NOT
3743: IFFALSE 3778
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 13
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_VAR 0 1
3764: PUSH
3765: LD_INT 2
3767: MOD
3768: PUSH
3769: LD_INT 1
3771: PLUS
3772: ARRAY
3773: PPUSH
3774: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 14
3785: PPUSH
3786: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_INT 70
3797: PPUSH
3798: CALL_OW 202
// if rand ( 0 , 1 ) then
3802: LD_INT 0
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: CALL_OW 12
3812: IFFALSE 3826
// AddComAnim ( i , 15 ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_INT 15
3821: PPUSH
3822: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3826: LD_VAR 0 1
3830: PPUSH
3831: LD_INT 35
3833: PPUSH
3834: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 12
3845: PPUSH
3846: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3850: LD_VAR 0 1
3854: PPUSH
3855: LD_INT 93
3857: PPUSH
3858: LD_INT 40
3860: PPUSH
3861: CALL_OW 178
// wait ( 0 0$1 ) ;
3865: LD_INT 35
3867: PPUSH
3868: CALL_OW 67
// end ;
3872: GO 3699
3874: POP
3875: POP
// wait ( 0 0$10 ) ;
3876: LD_INT 350
3878: PPUSH
3879: CALL_OW 67
// until heikeNearbyEon ;
3883: LD_EXP 19
3887: IFFALSE 3689
// end ; end_of_file
3889: PPOPN 1
3891: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
3892: GO 3894
3894: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3895: LD_STRING initStreamRollete();
3897: PPUSH
3898: CALL_OW 559
// InitStreamMode ;
3902: CALL 3907 0 0
// end ;
3906: END
// function InitStreamMode ; begin
3907: LD_INT 0
3909: PPUSH
// streamModeActive := false ;
3910: LD_ADDR_EXP 21
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// sRocket := false ;
3918: LD_ADDR_EXP 24
3922: PUSH
3923: LD_INT 0
3925: ST_TO_ADDR
// sSpeed := false ;
3926: LD_ADDR_EXP 23
3930: PUSH
3931: LD_INT 0
3933: ST_TO_ADDR
// sEngine := false ;
3934: LD_ADDR_EXP 25
3938: PUSH
3939: LD_INT 0
3941: ST_TO_ADDR
// sSpec := false ;
3942: LD_ADDR_EXP 22
3946: PUSH
3947: LD_INT 0
3949: ST_TO_ADDR
// sLevel := false ;
3950: LD_ADDR_EXP 26
3954: PUSH
3955: LD_INT 0
3957: ST_TO_ADDR
// sArmoury := false ;
3958: LD_ADDR_EXP 27
3962: PUSH
3963: LD_INT 0
3965: ST_TO_ADDR
// sRadar := false ;
3966: LD_ADDR_EXP 28
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// sBunker := false ;
3974: LD_ADDR_EXP 29
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// sHack := false ;
3982: LD_ADDR_EXP 30
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// sFire := false ;
3990: LD_ADDR_EXP 31
3994: PUSH
3995: LD_INT 0
3997: ST_TO_ADDR
// sRefresh := false ;
3998: LD_ADDR_EXP 32
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// sExp := false ;
4006: LD_ADDR_EXP 33
4010: PUSH
4011: LD_INT 0
4013: ST_TO_ADDR
// sDepot := false ;
4014: LD_ADDR_EXP 34
4018: PUSH
4019: LD_INT 0
4021: ST_TO_ADDR
// sFlag := false ;
4022: LD_ADDR_EXP 35
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// sKamikadze := false ;
4030: LD_ADDR_EXP 43
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// sTroll := false ;
4038: LD_ADDR_EXP 44
4042: PUSH
4043: LD_INT 0
4045: ST_TO_ADDR
// sSlow := false ;
4046: LD_ADDR_EXP 45
4050: PUSH
4051: LD_INT 0
4053: ST_TO_ADDR
// sLack := false ;
4054: LD_ADDR_EXP 46
4058: PUSH
4059: LD_INT 0
4061: ST_TO_ADDR
// sTank := false ;
4062: LD_ADDR_EXP 48
4066: PUSH
4067: LD_INT 0
4069: ST_TO_ADDR
// sRemote := false ;
4070: LD_ADDR_EXP 49
4074: PUSH
4075: LD_INT 0
4077: ST_TO_ADDR
// sPowell := false ;
4078: LD_ADDR_EXP 50
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// sTeleport := false ;
4086: LD_ADDR_EXP 53
4090: PUSH
4091: LD_INT 0
4093: ST_TO_ADDR
// sOilTower := false ;
4094: LD_ADDR_EXP 55
4098: PUSH
4099: LD_INT 0
4101: ST_TO_ADDR
// sShovel := false ;
4102: LD_ADDR_EXP 56
4106: PUSH
4107: LD_INT 0
4109: ST_TO_ADDR
// sSheik := false ;
4110: LD_ADDR_EXP 57
4114: PUSH
4115: LD_INT 0
4117: ST_TO_ADDR
// sSold := false ;
4118: LD_ADDR_EXP 36
4122: PUSH
4123: LD_INT 0
4125: ST_TO_ADDR
// sDiff := false ;
4126: LD_ADDR_EXP 37
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// sFog := false ;
4134: LD_ADDR_EXP 40
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// sReset := false ;
4142: LD_ADDR_EXP 41
4146: PUSH
4147: LD_INT 0
4149: ST_TO_ADDR
// sSun := false ;
4150: LD_ADDR_EXP 42
4154: PUSH
4155: LD_INT 0
4157: ST_TO_ADDR
// sTiger := false ;
4158: LD_ADDR_EXP 38
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// sBomb := false ;
4166: LD_ADDR_EXP 39
4170: PUSH
4171: LD_INT 0
4173: ST_TO_ADDR
// sWound := false ;
4174: LD_ADDR_EXP 47
4178: PUSH
4179: LD_INT 0
4181: ST_TO_ADDR
// sBetray := false ;
4182: LD_ADDR_EXP 51
4186: PUSH
4187: LD_INT 0
4189: ST_TO_ADDR
// sContamin := false ;
4190: LD_ADDR_EXP 52
4194: PUSH
4195: LD_INT 0
4197: ST_TO_ADDR
// sOil := false ;
4198: LD_ADDR_EXP 54
4202: PUSH
4203: LD_INT 0
4205: ST_TO_ADDR
// sStu := false ;
4206: LD_ADDR_EXP 58
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// end ;
4214: LD_VAR 0 1
4218: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4219: LD_VAR 0 2
4223: PUSH
4224: LD_INT 100
4226: EQUAL
4227: IFFALSE 4924
// begin if not StreamModeActive then
4229: LD_EXP 21
4233: NOT
4234: IFFALSE 4244
// StreamModeActive := true ;
4236: LD_ADDR_EXP 21
4240: PUSH
4241: LD_INT 1
4243: ST_TO_ADDR
// if p3 = 0 then
4244: LD_VAR 0 3
4248: PUSH
4249: LD_INT 0
4251: EQUAL
4252: IFFALSE 4258
// InitStreamMode ;
4254: CALL 3907 0 0
// if p3 = 1 then
4258: LD_VAR 0 3
4262: PUSH
4263: LD_INT 1
4265: EQUAL
4266: IFFALSE 4276
// sRocket := true ;
4268: LD_ADDR_EXP 24
4272: PUSH
4273: LD_INT 1
4275: ST_TO_ADDR
// if p3 = 2 then
4276: LD_VAR 0 3
4280: PUSH
4281: LD_INT 2
4283: EQUAL
4284: IFFALSE 4294
// sSpeed := true ;
4286: LD_ADDR_EXP 23
4290: PUSH
4291: LD_INT 1
4293: ST_TO_ADDR
// if p3 = 3 then
4294: LD_VAR 0 3
4298: PUSH
4299: LD_INT 3
4301: EQUAL
4302: IFFALSE 4312
// sEngine := true ;
4304: LD_ADDR_EXP 25
4308: PUSH
4309: LD_INT 1
4311: ST_TO_ADDR
// if p3 = 4 then
4312: LD_VAR 0 3
4316: PUSH
4317: LD_INT 4
4319: EQUAL
4320: IFFALSE 4330
// sSpec := true ;
4322: LD_ADDR_EXP 22
4326: PUSH
4327: LD_INT 1
4329: ST_TO_ADDR
// if p3 = 5 then
4330: LD_VAR 0 3
4334: PUSH
4335: LD_INT 5
4337: EQUAL
4338: IFFALSE 4348
// sLevel := true ;
4340: LD_ADDR_EXP 26
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// if p3 = 6 then
4348: LD_VAR 0 3
4352: PUSH
4353: LD_INT 6
4355: EQUAL
4356: IFFALSE 4366
// sArmoury := true ;
4358: LD_ADDR_EXP 27
4362: PUSH
4363: LD_INT 1
4365: ST_TO_ADDR
// if p3 = 7 then
4366: LD_VAR 0 3
4370: PUSH
4371: LD_INT 7
4373: EQUAL
4374: IFFALSE 4384
// sRadar := true ;
4376: LD_ADDR_EXP 28
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// if p3 = 8 then
4384: LD_VAR 0 3
4388: PUSH
4389: LD_INT 8
4391: EQUAL
4392: IFFALSE 4402
// sBunker := true ;
4394: LD_ADDR_EXP 29
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// if p3 = 9 then
4402: LD_VAR 0 3
4406: PUSH
4407: LD_INT 9
4409: EQUAL
4410: IFFALSE 4420
// sHack := true ;
4412: LD_ADDR_EXP 30
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// if p3 = 10 then
4420: LD_VAR 0 3
4424: PUSH
4425: LD_INT 10
4427: EQUAL
4428: IFFALSE 4438
// sFire := true ;
4430: LD_ADDR_EXP 31
4434: PUSH
4435: LD_INT 1
4437: ST_TO_ADDR
// if p3 = 11 then
4438: LD_VAR 0 3
4442: PUSH
4443: LD_INT 11
4445: EQUAL
4446: IFFALSE 4456
// sRefresh := true ;
4448: LD_ADDR_EXP 32
4452: PUSH
4453: LD_INT 1
4455: ST_TO_ADDR
// if p3 = 12 then
4456: LD_VAR 0 3
4460: PUSH
4461: LD_INT 12
4463: EQUAL
4464: IFFALSE 4474
// sExp := true ;
4466: LD_ADDR_EXP 33
4470: PUSH
4471: LD_INT 1
4473: ST_TO_ADDR
// if p3 = 13 then
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 13
4481: EQUAL
4482: IFFALSE 4492
// sDepot := true ;
4484: LD_ADDR_EXP 34
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// if p3 = 14 then
4492: LD_VAR 0 3
4496: PUSH
4497: LD_INT 14
4499: EQUAL
4500: IFFALSE 4510
// sFlag := true ;
4502: LD_ADDR_EXP 35
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// if p3 = 15 then
4510: LD_VAR 0 3
4514: PUSH
4515: LD_INT 15
4517: EQUAL
4518: IFFALSE 4528
// sKamikadze := true ;
4520: LD_ADDR_EXP 43
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// if p3 = 16 then
4528: LD_VAR 0 3
4532: PUSH
4533: LD_INT 16
4535: EQUAL
4536: IFFALSE 4546
// sTroll := true ;
4538: LD_ADDR_EXP 44
4542: PUSH
4543: LD_INT 1
4545: ST_TO_ADDR
// if p3 = 17 then
4546: LD_VAR 0 3
4550: PUSH
4551: LD_INT 17
4553: EQUAL
4554: IFFALSE 4564
// sSlow := true ;
4556: LD_ADDR_EXP 45
4560: PUSH
4561: LD_INT 1
4563: ST_TO_ADDR
// if p3 = 18 then
4564: LD_VAR 0 3
4568: PUSH
4569: LD_INT 18
4571: EQUAL
4572: IFFALSE 4582
// sLack := true ;
4574: LD_ADDR_EXP 46
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// if p3 = 19 then
4582: LD_VAR 0 3
4586: PUSH
4587: LD_INT 19
4589: EQUAL
4590: IFFALSE 4600
// sTank := true ;
4592: LD_ADDR_EXP 48
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// if p3 = 20 then
4600: LD_VAR 0 3
4604: PUSH
4605: LD_INT 20
4607: EQUAL
4608: IFFALSE 4618
// sRemote := true ;
4610: LD_ADDR_EXP 49
4614: PUSH
4615: LD_INT 1
4617: ST_TO_ADDR
// if p3 = 21 then
4618: LD_VAR 0 3
4622: PUSH
4623: LD_INT 21
4625: EQUAL
4626: IFFALSE 4636
// sPowell := true ;
4628: LD_ADDR_EXP 50
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// if p3 = 22 then
4636: LD_VAR 0 3
4640: PUSH
4641: LD_INT 22
4643: EQUAL
4644: IFFALSE 4654
// sTeleport := true ;
4646: LD_ADDR_EXP 53
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// if p3 = 23 then
4654: LD_VAR 0 3
4658: PUSH
4659: LD_INT 23
4661: EQUAL
4662: IFFALSE 4672
// sOilTower := true ;
4664: LD_ADDR_EXP 55
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// if p3 = 24 then
4672: LD_VAR 0 3
4676: PUSH
4677: LD_INT 24
4679: EQUAL
4680: IFFALSE 4690
// sShovel := true ;
4682: LD_ADDR_EXP 56
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// if p3 = 25 then
4690: LD_VAR 0 3
4694: PUSH
4695: LD_INT 25
4697: EQUAL
4698: IFFALSE 4708
// sSheik := true ;
4700: LD_ADDR_EXP 57
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// if p3 = 101 then
4708: LD_VAR 0 3
4712: PUSH
4713: LD_INT 101
4715: EQUAL
4716: IFFALSE 4726
// sSold := true ;
4718: LD_ADDR_EXP 36
4722: PUSH
4723: LD_INT 1
4725: ST_TO_ADDR
// if p3 = 102 then
4726: LD_VAR 0 3
4730: PUSH
4731: LD_INT 102
4733: EQUAL
4734: IFFALSE 4744
// sDiff := true ;
4736: LD_ADDR_EXP 37
4740: PUSH
4741: LD_INT 1
4743: ST_TO_ADDR
// if p3 = 103 then
4744: LD_VAR 0 3
4748: PUSH
4749: LD_INT 103
4751: EQUAL
4752: IFFALSE 4762
// sFog := true ;
4754: LD_ADDR_EXP 40
4758: PUSH
4759: LD_INT 1
4761: ST_TO_ADDR
// if p3 = 104 then
4762: LD_VAR 0 3
4766: PUSH
4767: LD_INT 104
4769: EQUAL
4770: IFFALSE 4780
// sReset := true ;
4772: LD_ADDR_EXP 41
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// if p3 = 105 then
4780: LD_VAR 0 3
4784: PUSH
4785: LD_INT 105
4787: EQUAL
4788: IFFALSE 4798
// sSun := true ;
4790: LD_ADDR_EXP 42
4794: PUSH
4795: LD_INT 1
4797: ST_TO_ADDR
// if p3 = 106 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_INT 106
4805: EQUAL
4806: IFFALSE 4816
// sTiger := true ;
4808: LD_ADDR_EXP 38
4812: PUSH
4813: LD_INT 1
4815: ST_TO_ADDR
// if p3 = 107 then
4816: LD_VAR 0 3
4820: PUSH
4821: LD_INT 107
4823: EQUAL
4824: IFFALSE 4834
// sBomb := true ;
4826: LD_ADDR_EXP 39
4830: PUSH
4831: LD_INT 1
4833: ST_TO_ADDR
// if p3 = 108 then
4834: LD_VAR 0 3
4838: PUSH
4839: LD_INT 108
4841: EQUAL
4842: IFFALSE 4852
// sWound := true ;
4844: LD_ADDR_EXP 47
4848: PUSH
4849: LD_INT 1
4851: ST_TO_ADDR
// if p3 = 109 then
4852: LD_VAR 0 3
4856: PUSH
4857: LD_INT 109
4859: EQUAL
4860: IFFALSE 4870
// sBetray := true ;
4862: LD_ADDR_EXP 51
4866: PUSH
4867: LD_INT 1
4869: ST_TO_ADDR
// if p3 = 110 then
4870: LD_VAR 0 3
4874: PUSH
4875: LD_INT 110
4877: EQUAL
4878: IFFALSE 4888
// sContamin := true ;
4880: LD_ADDR_EXP 52
4884: PUSH
4885: LD_INT 1
4887: ST_TO_ADDR
// if p3 = 111 then
4888: LD_VAR 0 3
4892: PUSH
4893: LD_INT 111
4895: EQUAL
4896: IFFALSE 4906
// sOil := true ;
4898: LD_ADDR_EXP 54
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// if p3 = 112 then
4906: LD_VAR 0 3
4910: PUSH
4911: LD_INT 112
4913: EQUAL
4914: IFFALSE 4924
// sStu := true ;
4916: LD_ADDR_EXP 58
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// end ; end ;
4924: PPOPN 6
4926: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
4927: LD_EXP 21
4931: PUSH
4932: LD_EXP 24
4936: AND
4937: IFFALSE 5061
4939: GO 4941
4941: DISABLE
4942: LD_INT 0
4944: PPUSH
4945: PPUSH
// begin enable ;
4946: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
4947: LD_ADDR_VAR 0 2
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_OWVAR 2
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 2
4966: PUSH
4967: LD_INT 34
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 34
4979: PUSH
4980: LD_INT 45
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 34
4989: PUSH
4990: LD_INT 28
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 34
4999: PUSH
5000: LD_INT 47
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// if not tmp then
5023: LD_VAR 0 2
5027: NOT
5028: IFFALSE 5032
// exit ;
5030: GO 5061
// for i in tmp do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_VAR 0 2
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5059
// begin SetLives ( i , 0 ) ;
5045: LD_VAR 0 1
5049: PPUSH
5050: LD_INT 0
5052: PPUSH
5053: CALL_OW 234
// end ;
5057: GO 5042
5059: POP
5060: POP
// end ;
5061: PPOPN 2
5063: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
5064: LD_EXP 21
5068: PUSH
5069: LD_EXP 25
5073: AND
5074: IFFALSE 5155
5076: GO 5078
5078: DISABLE
5079: LD_INT 0
5081: PPUSH
5082: PPUSH
// begin enable ;
5083: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
5084: LD_ADDR_VAR 0 2
5088: PUSH
5089: LD_INT 22
5091: PUSH
5092: LD_OWVAR 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 32
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PPUSH
5115: CALL_OW 69
5119: ST_TO_ADDR
// if not tmp then
5120: LD_VAR 0 2
5124: NOT
5125: IFFALSE 5129
// exit ;
5127: GO 5155
// for i in tmp do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5153
// begin DestroyUnit ( i ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 65
// end ;
5151: GO 5139
5153: POP
5154: POP
// end ;
5155: PPOPN 2
5157: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
5158: LD_EXP 21
5162: PUSH
5163: LD_EXP 22
5167: AND
5168: IFFALSE 5261
5170: GO 5172
5172: DISABLE
5173: LD_INT 0
5175: PPUSH
// begin enable ;
5176: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
5177: LD_ADDR_VAR 0 1
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_OWVAR 2
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 2
5196: PUSH
5197: LD_INT 25
5199: PUSH
5200: LD_INT 5
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 25
5209: PUSH
5210: LD_INT 9
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: LD_INT 25
5219: PUSH
5220: LD_INT 8
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PPUSH
5237: CALL_OW 69
5241: PUSH
5242: FOR_IN
5243: IFFALSE 5259
// begin SetClass ( i , 1 ) ;
5245: LD_VAR 0 1
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: CALL_OW 336
// end ;
5257: GO 5242
5259: POP
5260: POP
// end ;
5261: PPOPN 1
5263: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
5264: LD_EXP 21
5268: PUSH
5269: LD_EXP 23
5273: AND
5274: PUSH
5275: LD_OWVAR 65
5279: PUSH
5280: LD_INT 7
5282: LESS
5283: AND
5284: IFFALSE 5298
5286: GO 5288
5288: DISABLE
// begin enable ;
5289: ENABLE
// game_speed := 7 ;
5290: LD_ADDR_OWVAR 65
5294: PUSH
5295: LD_INT 7
5297: ST_TO_ADDR
// end ;
5298: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
5299: LD_EXP 21
5303: PUSH
5304: LD_EXP 26
5308: AND
5309: IFFALSE 5511
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_INT 81
5326: PUSH
5327: LD_OWVAR 2
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: PPUSH
5350: CALL_OW 69
5354: ST_TO_ADDR
// if not tmp then
5355: LD_VAR 0 3
5359: NOT
5360: IFFALSE 5364
// exit ;
5362: GO 5511
// if tmp > 5 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 5
5371: GREATER
5372: IFFALSE 5384
// k := 5 else
5374: LD_ADDR_VAR 0 2
5378: PUSH
5379: LD_INT 5
5381: ST_TO_ADDR
5382: GO 5394
// k := tmp ;
5384: LD_ADDR_VAR 0 2
5388: PUSH
5389: LD_VAR 0 3
5393: ST_TO_ADDR
// for i := 1 to k do
5394: LD_ADDR_VAR 0 1
5398: PUSH
5399: DOUBLE
5400: LD_INT 1
5402: DEC
5403: ST_TO_ADDR
5404: LD_VAR 0 2
5408: PUSH
5409: FOR_TO
5410: IFFALSE 5509
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_VAR 0 1
5421: ARRAY
5422: PPUSH
5423: LD_VAR 0 1
5427: PUSH
5428: LD_INT 4
5430: MOD
5431: PUSH
5432: LD_INT 1
5434: PLUS
5435: PPUSH
5436: CALL_OW 259
5440: PUSH
5441: LD_INT 10
5443: LESS
5444: IFFALSE 5507
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
5446: LD_VAR 0 3
5450: PUSH
5451: LD_VAR 0 1
5455: ARRAY
5456: PPUSH
5457: LD_VAR 0 1
5461: PUSH
5462: LD_INT 4
5464: MOD
5465: PUSH
5466: LD_INT 1
5468: PLUS
5469: PPUSH
5470: LD_VAR 0 3
5474: PUSH
5475: LD_VAR 0 1
5479: ARRAY
5480: PPUSH
5481: LD_VAR 0 1
5485: PUSH
5486: LD_INT 4
5488: MOD
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: CALL_OW 259
5498: PUSH
5499: LD_INT 1
5501: PLUS
5502: PPUSH
5503: CALL_OW 237
5507: GO 5409
5509: POP
5510: POP
// end ;
5511: PPOPN 3
5513: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
5514: LD_EXP 21
5518: PUSH
5519: LD_EXP 27
5523: AND
5524: IFFALSE 5544
5526: GO 5528
5528: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
5529: LD_INT 4
5531: PPUSH
5532: LD_OWVAR 2
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: CALL_OW 324
5544: END
// every 0 0$1 trigger StreamModeActive and sShovel do
5545: LD_EXP 21
5549: PUSH
5550: LD_EXP 56
5554: AND
5555: IFFALSE 5575
5557: GO 5559
5559: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
5560: LD_INT 19
5562: PPUSH
5563: LD_OWVAR 2
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 324
5575: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
5576: LD_EXP 21
5580: PUSH
5581: LD_EXP 28
5585: AND
5586: IFFALSE 5685
5588: GO 5590
5590: DISABLE
5591: LD_INT 0
5593: PPUSH
5594: PPUSH
// begin enable ;
5595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
5596: LD_ADDR_VAR 0 2
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_OWVAR 2
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 34
5618: PUSH
5619: LD_INT 11
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_INT 34
5628: PUSH
5629: LD_INT 30
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// if not tmp then
5650: LD_VAR 0 2
5654: NOT
5655: IFFALSE 5659
// exit ;
5657: GO 5685
// for i in tmp do
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_VAR 0 2
5668: PUSH
5669: FOR_IN
5670: IFFALSE 5683
// begin DestroyUnit ( i ) ;
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 65
// end ;
5681: GO 5669
5683: POP
5684: POP
// end ;
5685: PPOPN 2
5687: END
// every 0 0$1 trigger StreamModeActive and sBunker do
5688: LD_EXP 21
5692: PUSH
5693: LD_EXP 29
5697: AND
5698: IFFALSE 5718
5700: GO 5702
5702: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
5703: LD_INT 32
5705: PPUSH
5706: LD_OWVAR 2
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 324
5718: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
5719: LD_EXP 21
5723: PUSH
5724: LD_EXP 30
5728: AND
5729: IFFALSE 5910
5731: GO 5733
5733: DISABLE
5734: LD_INT 0
5736: PPUSH
5737: PPUSH
5738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_INT 22
5746: PUSH
5747: LD_OWVAR 2
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: LD_INT 33
5758: PUSH
5759: LD_INT 3
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: ST_TO_ADDR
// if not tmp then
5775: LD_VAR 0 2
5779: NOT
5780: IFFALSE 5784
// exit ;
5782: GO 5910
// side := 0 ;
5784: LD_ADDR_VAR 0 3
5788: PUSH
5789: LD_INT 0
5791: ST_TO_ADDR
// for i := 1 to 8 do
5792: LD_ADDR_VAR 0 1
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_INT 8
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5854
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
5808: LD_OWVAR 2
5812: PUSH
5813: LD_VAR 0 1
5817: NONEQUAL
5818: PUSH
5819: LD_OWVAR 2
5823: PPUSH
5824: LD_VAR 0 1
5828: PPUSH
5829: CALL_OW 81
5833: PUSH
5834: LD_INT 2
5836: EQUAL
5837: AND
5838: IFFALSE 5852
// begin side := i ;
5840: LD_ADDR_VAR 0 3
5844: PUSH
5845: LD_VAR 0 1
5849: ST_TO_ADDR
// break ;
5850: GO 5854
// end ;
5852: GO 5805
5854: POP
5855: POP
// if not side then
5856: LD_VAR 0 3
5860: NOT
5861: IFFALSE 5865
// exit ;
5863: GO 5910
// for i := 1 to tmp do
5865: LD_ADDR_VAR 0 1
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_VAR 0 2
5879: PUSH
5880: FOR_TO
5881: IFFALSE 5908
// if Prob ( 30 ) then
5883: LD_INT 30
5885: PPUSH
5886: CALL_OW 13
5890: IFFALSE 5906
// SetSide ( i , side ) ;
5892: LD_VAR 0 1
5896: PPUSH
5897: LD_VAR 0 3
5901: PPUSH
5902: CALL_OW 235
5906: GO 5880
5908: POP
5909: POP
// end ;
5910: PPOPN 3
5912: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
5913: LD_EXP 21
5917: PUSH
5918: LD_EXP 32
5922: AND
5923: IFFALSE 6042
5925: GO 5927
5927: DISABLE
5928: LD_INT 0
5930: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
5931: LD_ADDR_VAR 0 1
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_OWVAR 2
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: LD_INT 21
5950: PUSH
5951: LD_INT 1
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: LD_INT 23
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: PUSH
5985: FOR_IN
5986: IFFALSE 6040
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 257
5997: PUSH
5998: LD_INT 1
6000: PUSH
6001: LD_INT 2
6003: PUSH
6004: LD_INT 3
6006: PUSH
6007: LD_INT 4
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: IN
6016: IFFALSE 6038
// SetClass ( un , rand ( 1 , 4 ) ) ;
6018: LD_VAR 0 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 4
6028: PPUSH
6029: CALL_OW 12
6033: PPUSH
6034: CALL_OW 336
6038: GO 5985
6040: POP
6041: POP
// end ;
6042: PPOPN 1
6044: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
6045: LD_EXP 21
6049: PUSH
6050: LD_EXP 31
6054: AND
6055: IFFALSE 6134
6057: GO 6059
6059: DISABLE
6060: LD_INT 0
6062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6063: LD_ADDR_VAR 0 1
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_OWVAR 2
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// if not tmp then
6099: LD_VAR 0 1
6103: NOT
6104: IFFALSE 6108
// exit ;
6106: GO 6134
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
6108: LD_VAR 0 1
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: LD_VAR 0 1
6120: PPUSH
6121: CALL_OW 12
6125: ARRAY
6126: PPUSH
6127: LD_INT 100
6129: PPUSH
6130: CALL_OW 234
// end ;
6134: PPOPN 1
6136: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
6137: LD_EXP 21
6141: PUSH
6142: LD_EXP 33
6146: AND
6147: IFFALSE 6245
6149: GO 6151
6151: DISABLE
6152: LD_INT 0
6154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
6155: LD_ADDR_VAR 0 1
6159: PUSH
6160: LD_INT 22
6162: PUSH
6163: LD_OWVAR 2
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PPUSH
6186: CALL_OW 69
6190: ST_TO_ADDR
// if not tmp then
6191: LD_VAR 0 1
6195: NOT
6196: IFFALSE 6200
// exit ;
6198: GO 6245
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
6200: LD_VAR 0 1
6204: PUSH
6205: LD_INT 1
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 12
6217: ARRAY
6218: PPUSH
6219: LD_INT 1
6221: PPUSH
6222: LD_INT 4
6224: PPUSH
6225: CALL_OW 12
6229: PPUSH
6230: LD_INT 3000
6232: PPUSH
6233: LD_INT 9000
6235: PPUSH
6236: CALL_OW 12
6240: PPUSH
6241: CALL_OW 492
// end ;
6245: PPOPN 1
6247: END
// every 0 0$1 trigger StreamModeActive and sDepot do
6248: LD_EXP 21
6252: PUSH
6253: LD_EXP 34
6257: AND
6258: IFFALSE 6278
6260: GO 6262
6262: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
6263: LD_INT 1
6265: PPUSH
6266: LD_OWVAR 2
6270: PPUSH
6271: LD_INT 0
6273: PPUSH
6274: CALL_OW 324
6278: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
6279: LD_EXP 21
6283: PUSH
6284: LD_EXP 35
6288: AND
6289: IFFALSE 6372
6291: GO 6293
6293: DISABLE
6294: LD_INT 0
6296: PPUSH
6297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
6298: LD_ADDR_VAR 0 2
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_OWVAR 2
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 21
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: ST_TO_ADDR
// if not tmp then
6334: LD_VAR 0 2
6338: NOT
6339: IFFALSE 6343
// exit ;
6341: GO 6372
// for i in tmp do
6343: LD_ADDR_VAR 0 1
6347: PUSH
6348: LD_VAR 0 2
6352: PUSH
6353: FOR_IN
6354: IFFALSE 6370
// SetBLevel ( i , 10 ) ;
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_INT 10
6363: PPUSH
6364: CALL_OW 241
6368: GO 6353
6370: POP
6371: POP
// end ;
6372: PPOPN 2
6374: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
6375: LD_EXP 21
6379: PUSH
6380: LD_EXP 36
6384: AND
6385: IFFALSE 6496
6387: GO 6389
6389: DISABLE
6390: LD_INT 0
6392: PPUSH
6393: PPUSH
6394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_OWVAR 2
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 1
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PPUSH
6426: CALL_OW 69
6430: ST_TO_ADDR
// if not tmp then
6431: LD_VAR 0 3
6435: NOT
6436: IFFALSE 6440
// exit ;
6438: GO 6496
// un := tmp [ rand ( 1 , tmp ) ] ;
6440: LD_ADDR_VAR 0 2
6444: PUSH
6445: LD_VAR 0 3
6449: PUSH
6450: LD_INT 1
6452: PPUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: CALL_OW 12
6462: ARRAY
6463: ST_TO_ADDR
// if Crawls ( un ) then
6464: LD_VAR 0 2
6468: PPUSH
6469: CALL_OW 318
6473: IFFALSE 6484
// ComWalk ( un ) ;
6475: LD_VAR 0 2
6479: PPUSH
6480: CALL_OW 138
// SetClass ( un , class_sniper ) ;
6484: LD_VAR 0 2
6488: PPUSH
6489: LD_INT 5
6491: PPUSH
6492: CALL_OW 336
// end ;
6496: PPOPN 3
6498: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
6499: LD_EXP 21
6503: PUSH
6504: LD_EXP 37
6508: AND
6509: PUSH
6510: LD_OWVAR 67
6514: PUSH
6515: LD_INT 3
6517: LESS
6518: AND
6519: IFFALSE 6538
6521: GO 6523
6523: DISABLE
// Difficulty := Difficulty + 1 ;
6524: LD_ADDR_OWVAR 67
6528: PUSH
6529: LD_OWVAR 67
6533: PUSH
6534: LD_INT 1
6536: PLUS
6537: ST_TO_ADDR
6538: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
6539: LD_EXP 21
6543: PUSH
6544: LD_EXP 38
6548: AND
6549: IFFALSE 6652
6551: GO 6553
6553: DISABLE
6554: LD_INT 0
6556: PPUSH
// begin for i := 1 to 5 do
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: DOUBLE
6563: LD_INT 1
6565: DEC
6566: ST_TO_ADDR
6567: LD_INT 5
6569: PUSH
6570: FOR_TO
6571: IFFALSE 6650
// begin uc_nation := nation_nature ;
6573: LD_ADDR_OWVAR 21
6577: PUSH
6578: LD_INT 0
6580: ST_TO_ADDR
// uc_side := 0 ;
6581: LD_ADDR_OWVAR 20
6585: PUSH
6586: LD_INT 0
6588: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6589: LD_ADDR_OWVAR 29
6593: PUSH
6594: LD_INT 12
6596: PUSH
6597: LD_INT 12
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: ST_TO_ADDR
// hc_agressivity := 20 ;
6604: LD_ADDR_OWVAR 35
6608: PUSH
6609: LD_INT 20
6611: ST_TO_ADDR
// hc_class := class_tiger ;
6612: LD_ADDR_OWVAR 28
6616: PUSH
6617: LD_INT 14
6619: ST_TO_ADDR
// hc_gallery :=  ;
6620: LD_ADDR_OWVAR 33
6624: PUSH
6625: LD_STRING 
6627: ST_TO_ADDR
// hc_name :=  ;
6628: LD_ADDR_OWVAR 26
6632: PUSH
6633: LD_STRING 
6635: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
6636: CALL_OW 44
6640: PPUSH
6641: LD_INT 0
6643: PPUSH
6644: CALL_OW 51
// end ;
6648: GO 6570
6650: POP
6651: POP
// end ;
6652: PPOPN 1
6654: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
6655: LD_EXP 21
6659: PUSH
6660: LD_EXP 39
6664: AND
6665: IFFALSE 6839
6667: GO 6669
6669: DISABLE
6670: LD_INT 0
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
// begin result := false ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// for i := 1 to 8 do
6684: LD_ADDR_VAR 0 1
6688: PUSH
6689: DOUBLE
6690: LD_INT 1
6692: DEC
6693: ST_TO_ADDR
6694: LD_INT 8
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6809
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: LD_INT 10
6707: PUSH
6708: LD_INT 50
6710: PUSH
6711: LD_INT 90
6713: PUSH
6714: LD_INT 140
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 1
6725: PPUSH
6726: LD_INT 4
6728: PPUSH
6729: CALL_OW 12
6733: ARRAY
6734: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_INT 10
6742: PUSH
6743: LD_INT 50
6745: PUSH
6746: LD_INT 90
6748: PUSH
6749: LD_INT 140
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 4
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// if ValidHex ( x , y ) then
6770: LD_VAR 0 2
6774: PPUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: CALL_OW 488
6784: IFFALSE 6807
// begin result := [ x , y ] ;
6786: LD_ADDR_VAR 0 4
6790: PUSH
6791: LD_VAR 0 2
6795: PUSH
6796: LD_VAR 0 3
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// break ;
6805: GO 6809
// end ; end ;
6807: GO 6697
6809: POP
6810: POP
// if result then
6811: LD_VAR 0 4
6815: IFFALSE 6839
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
6817: LD_VAR 0 4
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PUSH
6831: LD_INT 2
6833: ARRAY
6834: PPUSH
6835: CALL_OW 429
// end ;
6839: PPOPN 4
6841: END
// every 0 0$1 trigger StreamModeActive and sReset do
6842: LD_EXP 21
6846: PUSH
6847: LD_EXP 41
6851: AND
6852: IFFALSE 6864
6854: GO 6856
6856: DISABLE
// YouLost (  ) ;
6857: LD_STRING 
6859: PPUSH
6860: CALL_OW 104
6864: END
// every 0 0$1 trigger StreamModeActive and sFog do
6865: LD_EXP 21
6869: PUSH
6870: LD_EXP 40
6874: AND
6875: IFFALSE 6889
6877: GO 6879
6879: DISABLE
// FogOff ( your_side ) ;
6880: LD_OWVAR 2
6884: PPUSH
6885: CALL_OW 344
6889: END
// every 0 0$1 trigger StreamModeActive and sSun do
6890: LD_EXP 21
6894: PUSH
6895: LD_EXP 42
6899: AND
6900: IFFALSE 6928
6902: GO 6904
6904: DISABLE
// begin solar_recharge_percent := 0 ;
6905: LD_ADDR_OWVAR 79
6909: PUSH
6910: LD_INT 0
6912: ST_TO_ADDR
// wait ( 5 5$00 ) ;
6913: LD_INT 10500
6915: PPUSH
6916: CALL_OW 67
// solar_recharge_percent := 100 ;
6920: LD_ADDR_OWVAR 79
6924: PUSH
6925: LD_INT 100
6927: ST_TO_ADDR
// end ;
6928: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
6929: LD_EXP 21
6933: PUSH
6934: LD_EXP 43
6938: AND
6939: IFFALSE 7178
6941: GO 6943
6943: DISABLE
6944: LD_INT 0
6946: PPUSH
6947: PPUSH
6948: PPUSH
// begin tmp := [ ] ;
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: EMPTY
6955: ST_TO_ADDR
// for i := 1 to 6 do
6956: LD_ADDR_VAR 0 1
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 6
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7075
// begin uc_nation := nation_nature ;
6972: LD_ADDR_OWVAR 21
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// uc_side := 0 ;
6980: LD_ADDR_OWVAR 20
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6988: LD_ADDR_OWVAR 29
6992: PUSH
6993: LD_INT 12
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: ST_TO_ADDR
// hc_agressivity := 20 ;
7003: LD_ADDR_OWVAR 35
7007: PUSH
7008: LD_INT 20
7010: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
7011: LD_ADDR_OWVAR 28
7015: PUSH
7016: LD_INT 17
7018: ST_TO_ADDR
// hc_gallery :=  ;
7019: LD_ADDR_OWVAR 33
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_name :=  ;
7027: LD_ADDR_OWVAR 26
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// un := CreateHuman ;
7035: LD_ADDR_VAR 0 2
7039: PUSH
7040: CALL_OW 44
7044: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_INT 1
7052: PPUSH
7053: CALL_OW 51
// tmp := tmp * un ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: LD_VAR 0 3
7066: PUSH
7067: LD_VAR 0 2
7071: MUL
7072: ST_TO_ADDR
// end ;
7073: GO 6969
7075: POP
7076: POP
// repeat wait ( 0 0$1 ) ;
7077: LD_INT 35
7079: PPUSH
7080: CALL_OW 67
// for un in tmp do
7084: LD_ADDR_VAR 0 2
7088: PUSH
7089: LD_VAR 0 3
7093: PUSH
7094: FOR_IN
7095: IFFALSE 7169
// begin if IsDead ( un ) then
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL_OW 301
7106: IFFALSE 7126
// begin tmp := tmp diff un ;
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_VAR 0 3
7117: PUSH
7118: LD_VAR 0 2
7122: DIFF
7123: ST_TO_ADDR
// continue ;
7124: GO 7094
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
7126: LD_VAR 0 2
7130: PPUSH
7131: LD_INT 3
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_INT 0
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PPUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 74
7162: PPUSH
7163: CALL_OW 115
// end ;
7167: GO 7094
7169: POP
7170: POP
// until not tmp ;
7171: LD_VAR 0 3
7175: NOT
7176: IFFALSE 7077
// end ;
7178: PPOPN 3
7180: END
// every 0 0$1 trigger StreamModeActive and sTroll do
7181: LD_EXP 21
7185: PUSH
7186: LD_EXP 44
7190: AND
7191: IFFALSE 7217
7193: GO 7195
7195: DISABLE
// begin ToLua ( displayTroll(); ) ;
7196: LD_STRING displayTroll();
7198: PPUSH
7199: CALL_OW 559
// wait ( 3 3$00 ) ;
7203: LD_INT 6300
7205: PPUSH
7206: CALL_OW 67
// ToLua ( hideTroll(); ) ;
7210: LD_STRING hideTroll();
7212: PPUSH
7213: CALL_OW 559
// end ;
7217: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
7218: LD_EXP 21
7222: PUSH
7223: LD_EXP 45
7227: AND
7228: IFFALSE 7291
7230: GO 7232
7232: DISABLE
7233: LD_INT 0
7235: PPUSH
// begin p := 0 ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_INT 0
7243: ST_TO_ADDR
// repeat game_speed := 1 ;
7244: LD_ADDR_OWVAR 65
7248: PUSH
7249: LD_INT 1
7251: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7252: LD_INT 35
7254: PPUSH
7255: CALL_OW 67
// p := p + 1 ;
7259: LD_ADDR_VAR 0 1
7263: PUSH
7264: LD_VAR 0 1
7268: PUSH
7269: LD_INT 1
7271: PLUS
7272: ST_TO_ADDR
// until p >= 60 ;
7273: LD_VAR 0 1
7277: PUSH
7278: LD_INT 60
7280: GREATEREQUAL
7281: IFFALSE 7244
// game_speed := 4 ;
7283: LD_ADDR_OWVAR 65
7287: PUSH
7288: LD_INT 4
7290: ST_TO_ADDR
// end ;
7291: PPOPN 1
7293: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
7294: LD_EXP 21
7298: PUSH
7299: LD_EXP 46
7303: AND
7304: IFFALSE 7450
7306: GO 7308
7308: DISABLE
7309: LD_INT 0
7311: PPUSH
7312: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7313: LD_ADDR_VAR 0 1
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_OWVAR 2
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: LD_INT 30
7335: PUSH
7336: LD_INT 0
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 30
7345: PUSH
7346: LD_INT 1
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
// if not depot then
7367: LD_VAR 0 1
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 7450
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
7376: LD_ADDR_VAR 0 2
7380: PUSH
7381: LD_VAR 0 1
7385: PUSH
7386: LD_INT 1
7388: PPUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL_OW 12
7398: ARRAY
7399: PPUSH
7400: CALL_OW 274
7404: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_INT 1
7412: PPUSH
7413: LD_INT 0
7415: PPUSH
7416: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
7420: LD_VAR 0 2
7424: PPUSH
7425: LD_INT 2
7427: PPUSH
7428: LD_INT 0
7430: PPUSH
7431: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
7435: LD_VAR 0 2
7439: PPUSH
7440: LD_INT 3
7442: PPUSH
7443: LD_INT 0
7445: PPUSH
7446: CALL_OW 277
// end ;
7450: PPOPN 2
7452: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
7453: LD_EXP 21
7457: PUSH
7458: LD_EXP 47
7462: AND
7463: IFFALSE 7560
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
7471: LD_ADDR_VAR 0 1
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_OWVAR 2
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: LD_INT 21
7490: PUSH
7491: LD_INT 1
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 23
7503: PUSH
7504: LD_INT 0
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: ST_TO_ADDR
// if not tmp then
7525: LD_VAR 0 1
7529: NOT
7530: IFFALSE 7534
// exit ;
7532: GO 7560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
7534: LD_VAR 0 1
7538: PUSH
7539: LD_INT 1
7541: PPUSH
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 12
7551: ARRAY
7552: PPUSH
7553: LD_INT 200
7555: PPUSH
7556: CALL_OW 234
// end ;
7560: PPOPN 1
7562: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
7563: LD_EXP 21
7567: PUSH
7568: LD_EXP 48
7572: AND
7573: IFFALSE 7652
7575: GO 7577
7577: DISABLE
7578: LD_INT 0
7580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
7581: LD_ADDR_VAR 0 1
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_OWVAR 2
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 21
7600: PUSH
7601: LD_INT 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 69
7616: ST_TO_ADDR
// if not tmp then
7617: LD_VAR 0 1
7621: NOT
7622: IFFALSE 7626
// exit ;
7624: GO 7652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
7626: LD_VAR 0 1
7630: PUSH
7631: LD_INT 1
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 12
7643: ARRAY
7644: PPUSH
7645: LD_INT 60
7647: PPUSH
7648: CALL_OW 234
// end ;
7652: PPOPN 1
7654: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
7655: LD_EXP 21
7659: PUSH
7660: LD_EXP 49
7664: AND
7665: IFFALSE 7764
7667: GO 7669
7669: DISABLE
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
// begin enable ;
7674: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_OWVAR 2
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 61
7694: PUSH
7695: EMPTY
7696: LIST
7697: PUSH
7698: LD_INT 33
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: ST_TO_ADDR
// if not tmp then
7718: LD_VAR 0 1
7722: NOT
7723: IFFALSE 7727
// exit ;
7725: GO 7764
// for i in tmp do
7727: LD_ADDR_VAR 0 2
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: FOR_IN
7738: IFFALSE 7762
// if IsControledBy ( i ) then
7740: LD_VAR 0 2
7744: PPUSH
7745: CALL_OW 312
7749: IFFALSE 7760
// ComUnlink ( i ) ;
7751: LD_VAR 0 2
7755: PPUSH
7756: CALL_OW 136
7760: GO 7737
7762: POP
7763: POP
// end ;
7764: PPOPN 2
7766: END
// every 0 0$1 trigger StreamModeActive and sPowell do
7767: LD_EXP 21
7771: PUSH
7772: LD_EXP 50
7776: AND
7777: IFFALSE 7817
7779: GO 7781
7781: DISABLE
// begin ToLua ( displayPowell(); ) ;
7782: LD_STRING displayPowell();
7784: PPUSH
7785: CALL_OW 559
// wait ( 0 0$20 ) ;
7789: LD_INT 700
7791: PPUSH
7792: CALL_OW 67
// ToLua ( displayPowell(); ) ;
7796: LD_STRING displayPowell();
7798: PPUSH
7799: CALL_OW 559
// wait ( 0 0$40 ) ;
7803: LD_INT 1400
7805: PPUSH
7806: CALL_OW 67
// ToLua ( displayPowell(); ) ;
7810: LD_STRING displayPowell();
7812: PPUSH
7813: CALL_OW 559
// end ;
7817: END
// every 0 0$1 trigger StreamModeActive and sStu do
7818: LD_EXP 21
7822: PUSH
7823: LD_EXP 58
7827: AND
7828: IFFALSE 7840
7830: GO 7832
7832: DISABLE
// begin ToLua ( displayStucuk(); ) ;
7833: LD_STRING displayStucuk();
7835: PPUSH
7836: CALL_OW 559
// end ;
7840: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
7841: LD_EXP 21
7845: PUSH
7846: LD_EXP 51
7850: AND
7851: IFFALSE 7992
7853: GO 7855
7855: DISABLE
7856: LD_INT 0
7858: PPUSH
7859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_INT 22
7867: PUSH
7868: LD_OWVAR 2
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 69
7895: ST_TO_ADDR
// if not tmp then
7896: LD_VAR 0 2
7900: NOT
7901: IFFALSE 7905
// exit ;
7903: GO 7992
// un := tmp [ rand ( 1 , tmp ) ] ;
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_VAR 0 2
7914: PUSH
7915: LD_INT 1
7917: PPUSH
7918: LD_VAR 0 2
7922: PPUSH
7923: CALL_OW 12
7927: ARRAY
7928: ST_TO_ADDR
// SetSide ( un , 0 ) ;
7929: LD_VAR 0 1
7933: PPUSH
7934: LD_INT 0
7936: PPUSH
7937: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
7941: LD_VAR 0 1
7945: PPUSH
7946: LD_OWVAR 3
7950: PUSH
7951: LD_VAR 0 1
7955: DIFF
7956: PPUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 74
7966: PPUSH
7967: CALL_OW 115
// wait ( 0 0$20 ) ;
7971: LD_INT 700
7973: PPUSH
7974: CALL_OW 67
// SetSide ( un , your_side ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_OWVAR 2
7987: PPUSH
7988: CALL_OW 235
// end ;
7992: PPOPN 2
7994: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
7995: LD_EXP 21
7999: PUSH
8000: LD_EXP 52
8004: AND
8005: IFFALSE 8111
8007: GO 8009
8009: DISABLE
8010: LD_INT 0
8012: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8013: LD_ADDR_VAR 0 1
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_OWVAR 2
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 30
8035: PUSH
8036: LD_INT 0
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 1
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
// if not depot then
8067: LD_VAR 0 1
8071: NOT
8072: IFFALSE 8076
// exit ;
8074: GO 8111
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
8076: LD_VAR 0 1
8080: PUSH
8081: LD_INT 1
8083: ARRAY
8084: PPUSH
8085: CALL_OW 250
8089: PPUSH
8090: LD_VAR 0 1
8094: PUSH
8095: LD_INT 1
8097: ARRAY
8098: PPUSH
8099: CALL_OW 251
8103: PPUSH
8104: LD_INT 70
8106: PPUSH
8107: CALL_OW 495
// end ;
8111: PPOPN 1
8113: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
8114: LD_EXP 21
8118: PUSH
8119: LD_EXP 53
8123: AND
8124: IFFALSE 8335
8126: GO 8128
8128: DISABLE
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
8135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8136: LD_ADDR_VAR 0 5
8140: PUSH
8141: LD_INT 22
8143: PUSH
8144: LD_OWVAR 2
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: ST_TO_ADDR
// if not tmp then
8172: LD_VAR 0 5
8176: NOT
8177: IFFALSE 8181
// exit ;
8179: GO 8335
// for i in tmp do
8181: LD_ADDR_VAR 0 1
8185: PUSH
8186: LD_VAR 0 5
8190: PUSH
8191: FOR_IN
8192: IFFALSE 8333
// begin d := rand ( 0 , 5 ) ;
8194: LD_ADDR_VAR 0 4
8198: PUSH
8199: LD_INT 0
8201: PPUSH
8202: LD_INT 5
8204: PPUSH
8205: CALL_OW 12
8209: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
8210: LD_ADDR_VAR 0 2
8214: PUSH
8215: LD_VAR 0 1
8219: PPUSH
8220: CALL_OW 250
8224: PPUSH
8225: LD_VAR 0 4
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_INT 12
8235: PPUSH
8236: CALL_OW 12
8240: PPUSH
8241: CALL_OW 272
8245: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL_OW 251
8260: PPUSH
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_INT 3
8268: PPUSH
8269: LD_INT 12
8271: PPUSH
8272: CALL_OW 12
8276: PPUSH
8277: CALL_OW 273
8281: ST_TO_ADDR
// if ValidHex ( x , y ) then
8282: LD_VAR 0 2
8286: PPUSH
8287: LD_VAR 0 3
8291: PPUSH
8292: CALL_OW 488
8296: IFFALSE 8331
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_VAR 0 2
8307: PPUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: LD_INT 3
8315: PPUSH
8316: LD_INT 6
8318: PPUSH
8319: CALL_OW 12
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: CALL_OW 483
// end ;
8331: GO 8191
8333: POP
8334: POP
// end ;
8335: PPOPN 5
8337: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
8338: LD_EXP 21
8342: PUSH
8343: LD_EXP 54
8347: AND
8348: IFFALSE 8442
8350: GO 8352
8352: DISABLE
8353: LD_INT 0
8355: PPUSH
8356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_INT 22
8364: PUSH
8365: LD_OWVAR 2
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 32
8376: PUSH
8377: LD_INT 1
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 2
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 69
8403: ST_TO_ADDR
// if not tmp then
8404: LD_VAR 0 2
8408: NOT
8409: IFFALSE 8413
// exit ;
8411: GO 8442
// for i in tmp do
8413: LD_ADDR_VAR 0 1
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: FOR_IN
8424: IFFALSE 8440
// SetFuel ( i , 0 ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_INT 0
8433: PPUSH
8434: CALL_OW 240
8438: GO 8423
8440: POP
8441: POP
// end ;
8442: PPOPN 2
8444: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
8445: LD_EXP 21
8449: PUSH
8450: LD_EXP 55
8454: AND
8455: IFFALSE 8521
8457: GO 8459
8459: DISABLE
8460: LD_INT 0
8462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
8463: LD_ADDR_VAR 0 1
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_OWVAR 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 30
8482: PUSH
8483: LD_INT 29
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PPUSH
8494: CALL_OW 69
8498: ST_TO_ADDR
// if not tmp then
8499: LD_VAR 0 1
8503: NOT
8504: IFFALSE 8508
// exit ;
8506: GO 8521
// DestroyUnit ( tmp [ 1 ] ) ;
8508: LD_VAR 0 1
8512: PUSH
8513: LD_INT 1
8515: ARRAY
8516: PPUSH
8517: CALL_OW 65
// end ;
8521: PPOPN 1
8523: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
8524: LD_EXP 21
8528: PUSH
8529: LD_EXP 57
8533: AND
8534: IFFALSE 8647
8536: GO 8538
8538: DISABLE
8539: LD_INT 0
8541: PPUSH
// begin uc_side := 0 ;
8542: LD_ADDR_OWVAR 20
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// uc_nation := nation_arabian ;
8550: LD_ADDR_OWVAR 21
8554: PUSH
8555: LD_INT 2
8557: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
8558: LD_INT 1
8560: PPUSH
8561: LD_INT 10
8563: PPUSH
8564: LD_INT 11
8566: PPUSH
8567: CALL_OW 380
// un := CreateHuman ;
8571: LD_ADDR_VAR 0 1
8575: PUSH
8576: CALL_OW 44
8580: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
8581: LD_VAR 0 1
8585: PPUSH
8586: LD_INT 1
8588: PPUSH
8589: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
8593: LD_INT 35
8595: PPUSH
8596: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_INT 22
8607: PUSH
8608: LD_OWVAR 2
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 69
8621: PPUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 74
8631: PPUSH
8632: CALL_OW 115
// until IsDead ( un ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: CALL_OW 301
8645: IFFALSE 8593
// end ;
8647: PPOPN 1
8649: END
