// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4304: LD_INT 0
4306: PPUSH
// if p2 = 100 then
4307: LD_VAR 0 2
4311: PUSH
4312: LD_INT 100
4314: EQUAL
4315: IFFALSE 5264
// begin if not StreamModeActive then
4317: LD_EXP 23
4321: NOT
4322: IFFALSE 4332
// StreamModeActive := true ;
4324: LD_ADDR_EXP 23
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// if p3 = 0 then
4332: LD_VAR 0 3
4336: PUSH
4337: LD_INT 0
4339: EQUAL
4340: IFFALSE 4346
// InitStreamMode ;
4342: CALL 5424 0 0
// if p3 = 1 then
4346: LD_VAR 0 3
4350: PUSH
4351: LD_INT 1
4353: EQUAL
4354: IFFALSE 4364
// sRocket := true ;
4356: LD_ADDR_EXP 28
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// if p3 = 2 then
4364: LD_VAR 0 3
4368: PUSH
4369: LD_INT 2
4371: EQUAL
4372: IFFALSE 4382
// sSpeed := true ;
4374: LD_ADDR_EXP 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// if p3 = 3 then
4382: LD_VAR 0 3
4386: PUSH
4387: LD_INT 3
4389: EQUAL
4390: IFFALSE 4400
// sEngine := true ;
4392: LD_ADDR_EXP 29
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// if p3 = 4 then
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 4
4407: EQUAL
4408: IFFALSE 4418
// sSpec := true ;
4410: LD_ADDR_EXP 26
4414: PUSH
4415: LD_INT 1
4417: ST_TO_ADDR
// if p3 = 5 then
4418: LD_VAR 0 3
4422: PUSH
4423: LD_INT 5
4425: EQUAL
4426: IFFALSE 4436
// sLevel := true ;
4428: LD_ADDR_EXP 30
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// if p3 = 6 then
4436: LD_VAR 0 3
4440: PUSH
4441: LD_INT 6
4443: EQUAL
4444: IFFALSE 4454
// sArmoury := true ;
4446: LD_ADDR_EXP 31
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// if p3 = 7 then
4454: LD_VAR 0 3
4458: PUSH
4459: LD_INT 7
4461: EQUAL
4462: IFFALSE 4472
// sRadar := true ;
4464: LD_ADDR_EXP 32
4468: PUSH
4469: LD_INT 1
4471: ST_TO_ADDR
// if p3 = 8 then
4472: LD_VAR 0 3
4476: PUSH
4477: LD_INT 8
4479: EQUAL
4480: IFFALSE 4490
// sBunker := true ;
4482: LD_ADDR_EXP 33
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// if p3 = 9 then
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 9
4497: EQUAL
4498: IFFALSE 4508
// sHack := true ;
4500: LD_ADDR_EXP 34
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// if p3 = 10 then
4508: LD_VAR 0 3
4512: PUSH
4513: LD_INT 10
4515: EQUAL
4516: IFFALSE 4526
// sFire := true ;
4518: LD_ADDR_EXP 35
4522: PUSH
4523: LD_INT 1
4525: ST_TO_ADDR
// if p3 = 11 then
4526: LD_VAR 0 3
4530: PUSH
4531: LD_INT 11
4533: EQUAL
4534: IFFALSE 4544
// sRefresh := true ;
4536: LD_ADDR_EXP 36
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
// if p3 = 12 then
4544: LD_VAR 0 3
4548: PUSH
4549: LD_INT 12
4551: EQUAL
4552: IFFALSE 4562
// sExp := true ;
4554: LD_ADDR_EXP 37
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if p3 = 13 then
4562: LD_VAR 0 3
4566: PUSH
4567: LD_INT 13
4569: EQUAL
4570: IFFALSE 4580
// sDepot := true ;
4572: LD_ADDR_EXP 38
4576: PUSH
4577: LD_INT 1
4579: ST_TO_ADDR
// if p3 = 14 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 14
4587: EQUAL
4588: IFFALSE 4598
// sFlag := true ;
4590: LD_ADDR_EXP 39
4594: PUSH
4595: LD_INT 1
4597: ST_TO_ADDR
// if p3 = 15 then
4598: LD_VAR 0 3
4602: PUSH
4603: LD_INT 15
4605: EQUAL
4606: IFFALSE 4616
// sKamikadze := true ;
4608: LD_ADDR_EXP 47
4612: PUSH
4613: LD_INT 1
4615: ST_TO_ADDR
// if p3 = 16 then
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 16
4623: EQUAL
4624: IFFALSE 4634
// sTroll := true ;
4626: LD_ADDR_EXP 48
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 17 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 17
4641: EQUAL
4642: IFFALSE 4652
// sSlow := true ;
4644: LD_ADDR_EXP 49
4648: PUSH
4649: LD_INT 1
4651: ST_TO_ADDR
// if p3 = 18 then
4652: LD_VAR 0 3
4656: PUSH
4657: LD_INT 18
4659: EQUAL
4660: IFFALSE 4670
// sLack := true ;
4662: LD_ADDR_EXP 50
4666: PUSH
4667: LD_INT 1
4669: ST_TO_ADDR
// if p3 = 19 then
4670: LD_VAR 0 3
4674: PUSH
4675: LD_INT 19
4677: EQUAL
4678: IFFALSE 4688
// sTank := true ;
4680: LD_ADDR_EXP 52
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// if p3 = 20 then
4688: LD_VAR 0 3
4692: PUSH
4693: LD_INT 20
4695: EQUAL
4696: IFFALSE 4706
// sRemote := true ;
4698: LD_ADDR_EXP 53
4702: PUSH
4703: LD_INT 1
4705: ST_TO_ADDR
// if p3 = 21 then
4706: LD_VAR 0 3
4710: PUSH
4711: LD_INT 21
4713: EQUAL
4714: IFFALSE 4724
// sPowell := true ;
4716: LD_ADDR_EXP 54
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// if p3 = 22 then
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 22
4731: EQUAL
4732: IFFALSE 4742
// sTeleport := true ;
4734: LD_ADDR_EXP 57
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// if p3 = 23 then
4742: LD_VAR 0 3
4746: PUSH
4747: LD_INT 23
4749: EQUAL
4750: IFFALSE 4760
// sOilTower := true ;
4752: LD_ADDR_EXP 59
4756: PUSH
4757: LD_INT 1
4759: ST_TO_ADDR
// if p3 = 24 then
4760: LD_VAR 0 3
4764: PUSH
4765: LD_INT 24
4767: EQUAL
4768: IFFALSE 4778
// sShovel := true ;
4770: LD_ADDR_EXP 60
4774: PUSH
4775: LD_INT 1
4777: ST_TO_ADDR
// if p3 = 25 then
4778: LD_VAR 0 3
4782: PUSH
4783: LD_INT 25
4785: EQUAL
4786: IFFALSE 4796
// sSheik := true ;
4788: LD_ADDR_EXP 61
4792: PUSH
4793: LD_INT 1
4795: ST_TO_ADDR
// if p3 = 26 then
4796: LD_VAR 0 3
4800: PUSH
4801: LD_INT 26
4803: EQUAL
4804: IFFALSE 4814
// sEarthquake := true ;
4806: LD_ADDR_EXP 63
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if p3 = 27 then
4814: LD_VAR 0 3
4818: PUSH
4819: LD_INT 27
4821: EQUAL
4822: IFFALSE 4832
// sAI := true ;
4824: LD_ADDR_EXP 64
4828: PUSH
4829: LD_INT 1
4831: ST_TO_ADDR
// if p3 = 28 then
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 28
4839: EQUAL
4840: IFFALSE 4850
// sCargo := true ;
4842: LD_ADDR_EXP 67
4846: PUSH
4847: LD_INT 1
4849: ST_TO_ADDR
// if p3 = 29 then
4850: LD_VAR 0 3
4854: PUSH
4855: LD_INT 29
4857: EQUAL
4858: IFFALSE 4868
// sDLaser := true ;
4860: LD_ADDR_EXP 68
4864: PUSH
4865: LD_INT 1
4867: ST_TO_ADDR
// if p3 = 30 then
4868: LD_VAR 0 3
4872: PUSH
4873: LD_INT 30
4875: EQUAL
4876: IFFALSE 4886
// sExchange := true ;
4878: LD_ADDR_EXP 69
4882: PUSH
4883: LD_INT 1
4885: ST_TO_ADDR
// if p3 = 31 then
4886: LD_VAR 0 3
4890: PUSH
4891: LD_INT 31
4893: EQUAL
4894: IFFALSE 4904
// sFac := true ;
4896: LD_ADDR_EXP 70
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 32 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 32
4911: EQUAL
4912: IFFALSE 4922
// sPower := true ;
4914: LD_ADDR_EXP 71
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// if p3 = 33 then
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 33
4929: EQUAL
4930: IFFALSE 4940
// sRandom := true ;
4932: LD_ADDR_EXP 72
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// if p3 = 34 then
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 34
4947: EQUAL
4948: IFFALSE 4958
// sShield := true ;
4950: LD_ADDR_EXP 73
4954: PUSH
4955: LD_INT 1
4957: ST_TO_ADDR
// if p3 = 35 then
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 35
4965: EQUAL
4966: IFFALSE 4976
// sTime := true ;
4968: LD_ADDR_EXP 74
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if p3 = 36 then
4976: LD_VAR 0 3
4980: PUSH
4981: LD_INT 36
4983: EQUAL
4984: IFFALSE 4994
// sTools := true ;
4986: LD_ADDR_EXP 75
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// if p3 = 101 then
4994: LD_VAR 0 3
4998: PUSH
4999: LD_INT 101
5001: EQUAL
5002: IFFALSE 5012
// sSold := true ;
5004: LD_ADDR_EXP 40
5008: PUSH
5009: LD_INT 1
5011: ST_TO_ADDR
// if p3 = 102 then
5012: LD_VAR 0 3
5016: PUSH
5017: LD_INT 102
5019: EQUAL
5020: IFFALSE 5030
// sDiff := true ;
5022: LD_ADDR_EXP 41
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// if p3 = 103 then
5030: LD_VAR 0 3
5034: PUSH
5035: LD_INT 103
5037: EQUAL
5038: IFFALSE 5048
// sFog := true ;
5040: LD_ADDR_EXP 44
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// if p3 = 104 then
5048: LD_VAR 0 3
5052: PUSH
5053: LD_INT 104
5055: EQUAL
5056: IFFALSE 5066
// sReset := true ;
5058: LD_ADDR_EXP 45
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// if p3 = 105 then
5066: LD_VAR 0 3
5070: PUSH
5071: LD_INT 105
5073: EQUAL
5074: IFFALSE 5084
// sSun := true ;
5076: LD_ADDR_EXP 46
5080: PUSH
5081: LD_INT 1
5083: ST_TO_ADDR
// if p3 = 106 then
5084: LD_VAR 0 3
5088: PUSH
5089: LD_INT 106
5091: EQUAL
5092: IFFALSE 5102
// sTiger := true ;
5094: LD_ADDR_EXP 42
5098: PUSH
5099: LD_INT 1
5101: ST_TO_ADDR
// if p3 = 107 then
5102: LD_VAR 0 3
5106: PUSH
5107: LD_INT 107
5109: EQUAL
5110: IFFALSE 5120
// sBomb := true ;
5112: LD_ADDR_EXP 43
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// if p3 = 108 then
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 108
5127: EQUAL
5128: IFFALSE 5138
// sWound := true ;
5130: LD_ADDR_EXP 51
5134: PUSH
5135: LD_INT 1
5137: ST_TO_ADDR
// if p3 = 109 then
5138: LD_VAR 0 3
5142: PUSH
5143: LD_INT 109
5145: EQUAL
5146: IFFALSE 5156
// sBetray := true ;
5148: LD_ADDR_EXP 55
5152: PUSH
5153: LD_INT 1
5155: ST_TO_ADDR
// if p3 = 110 then
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 110
5163: EQUAL
5164: IFFALSE 5174
// sContamin := true ;
5166: LD_ADDR_EXP 56
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// if p3 = 111 then
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 111
5181: EQUAL
5182: IFFALSE 5192
// sOil := true ;
5184: LD_ADDR_EXP 58
5188: PUSH
5189: LD_INT 1
5191: ST_TO_ADDR
// if p3 = 112 then
5192: LD_VAR 0 3
5196: PUSH
5197: LD_INT 112
5199: EQUAL
5200: IFFALSE 5210
// sStu := true ;
5202: LD_ADDR_EXP 62
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// if p3 = 113 then
5210: LD_VAR 0 3
5214: PUSH
5215: LD_INT 113
5217: EQUAL
5218: IFFALSE 5228
// sBazooka := true ;
5220: LD_ADDR_EXP 65
5224: PUSH
5225: LD_INT 1
5227: ST_TO_ADDR
// if p3 = 114 then
5228: LD_VAR 0 3
5232: PUSH
5233: LD_INT 114
5235: EQUAL
5236: IFFALSE 5246
// sMortar := true ;
5238: LD_ADDR_EXP 66
5242: PUSH
5243: LD_INT 1
5245: ST_TO_ADDR
// if p3 = 115 then
5246: LD_VAR 0 3
5250: PUSH
5251: LD_INT 115
5253: EQUAL
5254: IFFALSE 5264
// sRanger := true ;
5256: LD_ADDR_EXP 76
5260: PUSH
5261: LD_INT 1
5263: ST_TO_ADDR
// end ; if p2 = 101 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 101
5271: EQUAL
5272: IFFALSE 5400
// begin case p3 of 1 :
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 1
5281: DOUBLE
5282: EQUAL
5283: IFTRUE 5287
5285: GO 5294
5287: POP
// hHackUnlimitedResources ; 2 :
5288: CALL 16437 0 0
5292: GO 5400
5294: LD_INT 2
5296: DOUBLE
5297: EQUAL
5298: IFTRUE 5302
5300: GO 5309
5302: POP
// hHackSetLevel10 ; 3 :
5303: CALL 16570 0 0
5307: GO 5400
5309: LD_INT 3
5311: DOUBLE
5312: EQUAL
5313: IFTRUE 5317
5315: GO 5324
5317: POP
// hHackSetLevel10YourUnits ; 4 :
5318: CALL 16655 0 0
5322: GO 5400
5324: LD_INT 4
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5339
5332: POP
// hHackInvincible ; 5 :
5333: CALL 17103 0 0
5337: GO 5400
5339: LD_INT 5
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5354
5347: POP
// hHackInvisible ; 6 :
5348: CALL 17214 0 0
5352: GO 5400
5354: LD_INT 6
5356: DOUBLE
5357: EQUAL
5358: IFTRUE 5362
5360: GO 5369
5362: POP
// hHackChangeYourSide ; 7 :
5363: CALL 17271 0 0
5367: GO 5400
5369: LD_INT 7
5371: DOUBLE
5372: EQUAL
5373: IFTRUE 5377
5375: GO 5384
5377: POP
// hHackChangeUnitSide ; 8 :
5378: CALL 17313 0 0
5382: GO 5400
5384: LD_INT 8
5386: DOUBLE
5387: EQUAL
5388: IFTRUE 5392
5390: GO 5399
5392: POP
// hHackFog ; end ;
5393: CALL 17414 0 0
5397: GO 5400
5399: POP
// end ; end ;
5400: LD_VAR 0 7
5404: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5405: GO 5407
5407: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5408: LD_STRING initStreamRollete();
5410: PPUSH
5411: CALL_OW 559
// InitStreamMode ;
5415: CALL 5424 0 0
// DefineStreamItems ( ) ;
5419: CALL 5864 0 0
// end ;
5423: END
// function InitStreamMode ; begin
5424: LD_INT 0
5426: PPUSH
// streamModeActive := false ;
5427: LD_ADDR_EXP 23
5431: PUSH
5432: LD_INT 0
5434: ST_TO_ADDR
// normalCounter := 36 ;
5435: LD_ADDR_EXP 24
5439: PUSH
5440: LD_INT 36
5442: ST_TO_ADDR
// hardcoreCounter := 16 ;
5443: LD_ADDR_EXP 25
5447: PUSH
5448: LD_INT 16
5450: ST_TO_ADDR
// sRocket := false ;
5451: LD_ADDR_EXP 28
5455: PUSH
5456: LD_INT 0
5458: ST_TO_ADDR
// sSpeed := false ;
5459: LD_ADDR_EXP 27
5463: PUSH
5464: LD_INT 0
5466: ST_TO_ADDR
// sEngine := false ;
5467: LD_ADDR_EXP 29
5471: PUSH
5472: LD_INT 0
5474: ST_TO_ADDR
// sSpec := false ;
5475: LD_ADDR_EXP 26
5479: PUSH
5480: LD_INT 0
5482: ST_TO_ADDR
// sLevel := false ;
5483: LD_ADDR_EXP 30
5487: PUSH
5488: LD_INT 0
5490: ST_TO_ADDR
// sArmoury := false ;
5491: LD_ADDR_EXP 31
5495: PUSH
5496: LD_INT 0
5498: ST_TO_ADDR
// sRadar := false ;
5499: LD_ADDR_EXP 32
5503: PUSH
5504: LD_INT 0
5506: ST_TO_ADDR
// sBunker := false ;
5507: LD_ADDR_EXP 33
5511: PUSH
5512: LD_INT 0
5514: ST_TO_ADDR
// sHack := false ;
5515: LD_ADDR_EXP 34
5519: PUSH
5520: LD_INT 0
5522: ST_TO_ADDR
// sFire := false ;
5523: LD_ADDR_EXP 35
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// sRefresh := false ;
5531: LD_ADDR_EXP 36
5535: PUSH
5536: LD_INT 0
5538: ST_TO_ADDR
// sExp := false ;
5539: LD_ADDR_EXP 37
5543: PUSH
5544: LD_INT 0
5546: ST_TO_ADDR
// sDepot := false ;
5547: LD_ADDR_EXP 38
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sFlag := false ;
5555: LD_ADDR_EXP 39
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sKamikadze := false ;
5563: LD_ADDR_EXP 47
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sTroll := false ;
5571: LD_ADDR_EXP 48
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sSlow := false ;
5579: LD_ADDR_EXP 49
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sLack := false ;
5587: LD_ADDR_EXP 50
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sTank := false ;
5595: LD_ADDR_EXP 52
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sRemote := false ;
5603: LD_ADDR_EXP 53
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sPowell := false ;
5611: LD_ADDR_EXP 54
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sTeleport := false ;
5619: LD_ADDR_EXP 57
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sOilTower := false ;
5627: LD_ADDR_EXP 59
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sShovel := false ;
5635: LD_ADDR_EXP 60
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sSheik := false ;
5643: LD_ADDR_EXP 61
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sEarthquake := false ;
5651: LD_ADDR_EXP 63
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sAI := false ;
5659: LD_ADDR_EXP 64
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sCargo := false ;
5667: LD_ADDR_EXP 67
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sDLaser := false ;
5675: LD_ADDR_EXP 68
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sExchange := false ;
5683: LD_ADDR_EXP 69
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sFac := false ;
5691: LD_ADDR_EXP 70
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sPower := false ;
5699: LD_ADDR_EXP 71
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sRandom := false ;
5707: LD_ADDR_EXP 72
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sShield := false ;
5715: LD_ADDR_EXP 73
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sTime := false ;
5723: LD_ADDR_EXP 74
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sTools := false ;
5731: LD_ADDR_EXP 75
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sSold := false ;
5739: LD_ADDR_EXP 40
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sDiff := false ;
5747: LD_ADDR_EXP 41
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sFog := false ;
5755: LD_ADDR_EXP 44
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sReset := false ;
5763: LD_ADDR_EXP 45
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sSun := false ;
5771: LD_ADDR_EXP 46
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sTiger := false ;
5779: LD_ADDR_EXP 42
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sBomb := false ;
5787: LD_ADDR_EXP 43
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sWound := false ;
5795: LD_ADDR_EXP 51
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sBetray := false ;
5803: LD_ADDR_EXP 55
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sContamin := false ;
5811: LD_ADDR_EXP 56
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sOil := false ;
5819: LD_ADDR_EXP 58
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sStu := false ;
5827: LD_ADDR_EXP 62
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sBazooka := false ;
5835: LD_ADDR_EXP 65
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sMortar := false ;
5843: LD_ADDR_EXP 66
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sRanger := false ;
5851: LD_ADDR_EXP 76
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// end ;
5859: LD_VAR 0 1
5863: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5864: LD_INT 0
5866: PPUSH
5867: PPUSH
5868: PPUSH
5869: PPUSH
5870: PPUSH
// result := [ ] ;
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: EMPTY
5877: ST_TO_ADDR
// if campaign_id = 1 then
5878: LD_OWVAR 69
5882: PUSH
5883: LD_INT 1
5885: EQUAL
5886: IFFALSE 8824
// begin case mission_number of 1 :
5888: LD_OWVAR 70
5892: PUSH
5893: LD_INT 1
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5965
5901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: LD_INT 2
5909: PUSH
5910: LD_INT 4
5912: PUSH
5913: LD_INT 11
5915: PUSH
5916: LD_INT 12
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 23
5930: PUSH
5931: LD_INT 26
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 101
5947: PUSH
5948: LD_INT 102
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: ST_TO_ADDR
5963: GO 8822
5965: LD_INT 2
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 6045
5973: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5974: LD_ADDR_VAR 0 1
5978: PUSH
5979: LD_INT 2
5981: PUSH
5982: LD_INT 4
5984: PUSH
5985: LD_INT 11
5987: PUSH
5988: LD_INT 12
5990: PUSH
5991: LD_INT 15
5993: PUSH
5994: LD_INT 16
5996: PUSH
5997: LD_INT 22
5999: PUSH
6000: LD_INT 23
6002: PUSH
6003: LD_INT 26
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: PUSH
6017: LD_INT 101
6019: PUSH
6020: LD_INT 102
6022: PUSH
6023: LD_INT 105
6025: PUSH
6026: LD_INT 106
6028: PUSH
6029: LD_INT 108
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: ST_TO_ADDR
6043: GO 8822
6045: LD_INT 3
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6129
6053: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6054: LD_ADDR_VAR 0 1
6058: PUSH
6059: LD_INT 2
6061: PUSH
6062: LD_INT 4
6064: PUSH
6065: LD_INT 5
6067: PUSH
6068: LD_INT 11
6070: PUSH
6071: LD_INT 12
6073: PUSH
6074: LD_INT 15
6076: PUSH
6077: LD_INT 16
6079: PUSH
6080: LD_INT 22
6082: PUSH
6083: LD_INT 26
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 101
6103: PUSH
6104: LD_INT 102
6106: PUSH
6107: LD_INT 105
6109: PUSH
6110: LD_INT 106
6112: PUSH
6113: LD_INT 108
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: ST_TO_ADDR
6127: GO 8822
6129: LD_INT 4
6131: DOUBLE
6132: EQUAL
6133: IFTRUE 6137
6135: GO 6221
6137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6138: LD_ADDR_VAR 0 1
6142: PUSH
6143: LD_INT 2
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 5
6151: PUSH
6152: LD_INT 8
6154: PUSH
6155: LD_INT 11
6157: PUSH
6158: LD_INT 12
6160: PUSH
6161: LD_INT 15
6163: PUSH
6164: LD_INT 16
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_INT 23
6172: PUSH
6173: LD_INT 26
6175: PUSH
6176: LD_INT 36
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: PUSH
6193: LD_INT 101
6195: PUSH
6196: LD_INT 102
6198: PUSH
6199: LD_INT 105
6201: PUSH
6202: LD_INT 106
6204: PUSH
6205: LD_INT 108
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: ST_TO_ADDR
6219: GO 8822
6221: LD_INT 5
6223: DOUBLE
6224: EQUAL
6225: IFTRUE 6229
6227: GO 6329
6229: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 4
6240: PUSH
6241: LD_INT 5
6243: PUSH
6244: LD_INT 6
6246: PUSH
6247: LD_INT 8
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 15
6258: PUSH
6259: LD_INT 16
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 26
6273: PUSH
6274: LD_INT 36
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 101
6295: PUSH
6296: LD_INT 102
6298: PUSH
6299: LD_INT 105
6301: PUSH
6302: LD_INT 106
6304: PUSH
6305: LD_INT 108
6307: PUSH
6308: LD_INT 109
6310: PUSH
6311: LD_INT 112
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: ST_TO_ADDR
6327: GO 8822
6329: LD_INT 6
6331: DOUBLE
6332: EQUAL
6333: IFTRUE 6337
6335: GO 6457
6337: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 2
6345: PUSH
6346: LD_INT 4
6348: PUSH
6349: LD_INT 5
6351: PUSH
6352: LD_INT 6
6354: PUSH
6355: LD_INT 8
6357: PUSH
6358: LD_INT 11
6360: PUSH
6361: LD_INT 12
6363: PUSH
6364: LD_INT 15
6366: PUSH
6367: LD_INT 16
6369: PUSH
6370: LD_INT 20
6372: PUSH
6373: LD_INT 21
6375: PUSH
6376: LD_INT 22
6378: PUSH
6379: LD_INT 23
6381: PUSH
6382: LD_INT 25
6384: PUSH
6385: LD_INT 26
6387: PUSH
6388: LD_INT 30
6390: PUSH
6391: LD_INT 31
6393: PUSH
6394: LD_INT 32
6396: PUSH
6397: LD_INT 36
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 101
6423: PUSH
6424: LD_INT 102
6426: PUSH
6427: LD_INT 105
6429: PUSH
6430: LD_INT 106
6432: PUSH
6433: LD_INT 108
6435: PUSH
6436: LD_INT 109
6438: PUSH
6439: LD_INT 112
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: ST_TO_ADDR
6455: GO 8822
6457: LD_INT 7
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6565
6465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: LD_INT 7
6482: PUSH
6483: LD_INT 11
6485: PUSH
6486: LD_INT 12
6488: PUSH
6489: LD_INT 15
6491: PUSH
6492: LD_INT 16
6494: PUSH
6495: LD_INT 20
6497: PUSH
6498: LD_INT 21
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_INT 23
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 26
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 101
6531: PUSH
6532: LD_INT 102
6534: PUSH
6535: LD_INT 103
6537: PUSH
6538: LD_INT 105
6540: PUSH
6541: LD_INT 106
6543: PUSH
6544: LD_INT 108
6546: PUSH
6547: LD_INT 112
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: ST_TO_ADDR
6563: GO 8822
6565: LD_INT 8
6567: DOUBLE
6568: EQUAL
6569: IFTRUE 6573
6571: GO 6701
6573: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6574: LD_ADDR_VAR 0 1
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: LD_INT 7
6593: PUSH
6594: LD_INT 8
6596: PUSH
6597: LD_INT 11
6599: PUSH
6600: LD_INT 12
6602: PUSH
6603: LD_INT 15
6605: PUSH
6606: LD_INT 16
6608: PUSH
6609: LD_INT 20
6611: PUSH
6612: LD_INT 21
6614: PUSH
6615: LD_INT 22
6617: PUSH
6618: LD_INT 23
6620: PUSH
6621: LD_INT 25
6623: PUSH
6624: LD_INT 26
6626: PUSH
6627: LD_INT 30
6629: PUSH
6630: LD_INT 31
6632: PUSH
6633: LD_INT 32
6635: PUSH
6636: LD_INT 36
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 101
6663: PUSH
6664: LD_INT 102
6666: PUSH
6667: LD_INT 103
6669: PUSH
6670: LD_INT 105
6672: PUSH
6673: LD_INT 106
6675: PUSH
6676: LD_INT 108
6678: PUSH
6679: LD_INT 109
6681: PUSH
6682: LD_INT 112
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: ST_TO_ADDR
6699: GO 8822
6701: LD_INT 9
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6845
6709: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6710: LD_ADDR_VAR 0 1
6714: PUSH
6715: LD_INT 2
6717: PUSH
6718: LD_INT 4
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: LD_INT 6
6726: PUSH
6727: LD_INT 7
6729: PUSH
6730: LD_INT 8
6732: PUSH
6733: LD_INT 11
6735: PUSH
6736: LD_INT 12
6738: PUSH
6739: LD_INT 15
6741: PUSH
6742: LD_INT 16
6744: PUSH
6745: LD_INT 20
6747: PUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 22
6753: PUSH
6754: LD_INT 23
6756: PUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 26
6762: PUSH
6763: LD_INT 28
6765: PUSH
6766: LD_INT 30
6768: PUSH
6769: LD_INT 31
6771: PUSH
6772: LD_INT 32
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 101
6803: PUSH
6804: LD_INT 102
6806: PUSH
6807: LD_INT 103
6809: PUSH
6810: LD_INT 105
6812: PUSH
6813: LD_INT 106
6815: PUSH
6816: LD_INT 108
6818: PUSH
6819: LD_INT 109
6821: PUSH
6822: LD_INT 112
6824: PUSH
6825: LD_INT 114
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
6843: GO 8822
6845: LD_INT 10
6847: DOUBLE
6848: EQUAL
6849: IFTRUE 6853
6851: GO 7037
6853: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6854: LD_ADDR_VAR 0 1
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: LD_INT 4
6864: PUSH
6865: LD_INT 5
6867: PUSH
6868: LD_INT 6
6870: PUSH
6871: LD_INT 7
6873: PUSH
6874: LD_INT 8
6876: PUSH
6877: LD_INT 9
6879: PUSH
6880: LD_INT 10
6882: PUSH
6883: LD_INT 11
6885: PUSH
6886: LD_INT 12
6888: PUSH
6889: LD_INT 13
6891: PUSH
6892: LD_INT 14
6894: PUSH
6895: LD_INT 15
6897: PUSH
6898: LD_INT 16
6900: PUSH
6901: LD_INT 17
6903: PUSH
6904: LD_INT 18
6906: PUSH
6907: LD_INT 19
6909: PUSH
6910: LD_INT 20
6912: PUSH
6913: LD_INT 21
6915: PUSH
6916: LD_INT 22
6918: PUSH
6919: LD_INT 23
6921: PUSH
6922: LD_INT 24
6924: PUSH
6925: LD_INT 25
6927: PUSH
6928: LD_INT 26
6930: PUSH
6931: LD_INT 28
6933: PUSH
6934: LD_INT 30
6936: PUSH
6937: LD_INT 31
6939: PUSH
6940: LD_INT 32
6942: PUSH
6943: LD_INT 36
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 101
6979: PUSH
6980: LD_INT 102
6982: PUSH
6983: LD_INT 103
6985: PUSH
6986: LD_INT 104
6988: PUSH
6989: LD_INT 105
6991: PUSH
6992: LD_INT 106
6994: PUSH
6995: LD_INT 107
6997: PUSH
6998: LD_INT 108
7000: PUSH
7001: LD_INT 109
7003: PUSH
7004: LD_INT 110
7006: PUSH
7007: LD_INT 111
7009: PUSH
7010: LD_INT 112
7012: PUSH
7013: LD_INT 114
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: ST_TO_ADDR
7035: GO 8822
7037: LD_INT 11
7039: DOUBLE
7040: EQUAL
7041: IFTRUE 7045
7043: GO 7237
7045: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7046: LD_ADDR_VAR 0 1
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: LD_INT 4
7059: PUSH
7060: LD_INT 5
7062: PUSH
7063: LD_INT 6
7065: PUSH
7066: LD_INT 7
7068: PUSH
7069: LD_INT 8
7071: PUSH
7072: LD_INT 9
7074: PUSH
7075: LD_INT 10
7077: PUSH
7078: LD_INT 11
7080: PUSH
7081: LD_INT 12
7083: PUSH
7084: LD_INT 13
7086: PUSH
7087: LD_INT 14
7089: PUSH
7090: LD_INT 15
7092: PUSH
7093: LD_INT 16
7095: PUSH
7096: LD_INT 17
7098: PUSH
7099: LD_INT 18
7101: PUSH
7102: LD_INT 19
7104: PUSH
7105: LD_INT 20
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 22
7113: PUSH
7114: LD_INT 23
7116: PUSH
7117: LD_INT 24
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 26
7125: PUSH
7126: LD_INT 28
7128: PUSH
7129: LD_INT 30
7131: PUSH
7132: LD_INT 31
7134: PUSH
7135: LD_INT 32
7137: PUSH
7138: LD_INT 34
7140: PUSH
7141: LD_INT 36
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 101
7179: PUSH
7180: LD_INT 102
7182: PUSH
7183: LD_INT 103
7185: PUSH
7186: LD_INT 104
7188: PUSH
7189: LD_INT 105
7191: PUSH
7192: LD_INT 106
7194: PUSH
7195: LD_INT 107
7197: PUSH
7198: LD_INT 108
7200: PUSH
7201: LD_INT 109
7203: PUSH
7204: LD_INT 110
7206: PUSH
7207: LD_INT 111
7209: PUSH
7210: LD_INT 112
7212: PUSH
7213: LD_INT 114
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 8822
7237: LD_INT 12
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7453
7245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_INT 1
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 3
7259: PUSH
7260: LD_INT 4
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: LD_INT 6
7268: PUSH
7269: LD_INT 7
7271: PUSH
7272: LD_INT 8
7274: PUSH
7275: LD_INT 9
7277: PUSH
7278: LD_INT 10
7280: PUSH
7281: LD_INT 11
7283: PUSH
7284: LD_INT 12
7286: PUSH
7287: LD_INT 13
7289: PUSH
7290: LD_INT 14
7292: PUSH
7293: LD_INT 15
7295: PUSH
7296: LD_INT 16
7298: PUSH
7299: LD_INT 17
7301: PUSH
7302: LD_INT 18
7304: PUSH
7305: LD_INT 19
7307: PUSH
7308: LD_INT 20
7310: PUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 25
7325: PUSH
7326: LD_INT 26
7328: PUSH
7329: LD_INT 27
7331: PUSH
7332: LD_INT 28
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 31
7340: PUSH
7341: LD_INT 32
7343: PUSH
7344: LD_INT 33
7346: PUSH
7347: LD_INT 34
7349: PUSH
7350: LD_INT 36
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 101
7391: PUSH
7392: LD_INT 102
7394: PUSH
7395: LD_INT 103
7397: PUSH
7398: LD_INT 104
7400: PUSH
7401: LD_INT 105
7403: PUSH
7404: LD_INT 106
7406: PUSH
7407: LD_INT 107
7409: PUSH
7410: LD_INT 108
7412: PUSH
7413: LD_INT 109
7415: PUSH
7416: LD_INT 110
7418: PUSH
7419: LD_INT 111
7421: PUSH
7422: LD_INT 112
7424: PUSH
7425: LD_INT 113
7427: PUSH
7428: LD_INT 114
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
7451: GO 8822
7453: LD_INT 13
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7657
7461: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7462: LD_ADDR_VAR 0 1
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 3
7475: PUSH
7476: LD_INT 4
7478: PUSH
7479: LD_INT 5
7481: PUSH
7482: LD_INT 8
7484: PUSH
7485: LD_INT 9
7487: PUSH
7488: LD_INT 10
7490: PUSH
7491: LD_INT 11
7493: PUSH
7494: LD_INT 12
7496: PUSH
7497: LD_INT 14
7499: PUSH
7500: LD_INT 15
7502: PUSH
7503: LD_INT 16
7505: PUSH
7506: LD_INT 17
7508: PUSH
7509: LD_INT 18
7511: PUSH
7512: LD_INT 19
7514: PUSH
7515: LD_INT 20
7517: PUSH
7518: LD_INT 21
7520: PUSH
7521: LD_INT 22
7523: PUSH
7524: LD_INT 23
7526: PUSH
7527: LD_INT 24
7529: PUSH
7530: LD_INT 25
7532: PUSH
7533: LD_INT 26
7535: PUSH
7536: LD_INT 27
7538: PUSH
7539: LD_INT 28
7541: PUSH
7542: LD_INT 30
7544: PUSH
7545: LD_INT 31
7547: PUSH
7548: LD_INT 32
7550: PUSH
7551: LD_INT 33
7553: PUSH
7554: LD_INT 34
7556: PUSH
7557: LD_INT 36
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 101
7595: PUSH
7596: LD_INT 102
7598: PUSH
7599: LD_INT 103
7601: PUSH
7602: LD_INT 104
7604: PUSH
7605: LD_INT 105
7607: PUSH
7608: LD_INT 106
7610: PUSH
7611: LD_INT 107
7613: PUSH
7614: LD_INT 108
7616: PUSH
7617: LD_INT 109
7619: PUSH
7620: LD_INT 110
7622: PUSH
7623: LD_INT 111
7625: PUSH
7626: LD_INT 112
7628: PUSH
7629: LD_INT 113
7631: PUSH
7632: LD_INT 114
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: ST_TO_ADDR
7655: GO 8822
7657: LD_INT 14
7659: DOUBLE
7660: EQUAL
7661: IFTRUE 7665
7663: GO 7877
7665: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: LD_INT 1
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: LD_INT 6
7688: PUSH
7689: LD_INT 7
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 9
7697: PUSH
7698: LD_INT 10
7700: PUSH
7701: LD_INT 11
7703: PUSH
7704: LD_INT 12
7706: PUSH
7707: LD_INT 13
7709: PUSH
7710: LD_INT 14
7712: PUSH
7713: LD_INT 15
7715: PUSH
7716: LD_INT 16
7718: PUSH
7719: LD_INT 17
7721: PUSH
7722: LD_INT 18
7724: PUSH
7725: LD_INT 19
7727: PUSH
7728: LD_INT 20
7730: PUSH
7731: LD_INT 21
7733: PUSH
7734: LD_INT 22
7736: PUSH
7737: LD_INT 23
7739: PUSH
7740: LD_INT 24
7742: PUSH
7743: LD_INT 25
7745: PUSH
7746: LD_INT 26
7748: PUSH
7749: LD_INT 27
7751: PUSH
7752: LD_INT 28
7754: PUSH
7755: LD_INT 29
7757: PUSH
7758: LD_INT 30
7760: PUSH
7761: LD_INT 31
7763: PUSH
7764: LD_INT 32
7766: PUSH
7767: LD_INT 33
7769: PUSH
7770: LD_INT 34
7772: PUSH
7773: LD_INT 36
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 101
7815: PUSH
7816: LD_INT 102
7818: PUSH
7819: LD_INT 103
7821: PUSH
7822: LD_INT 104
7824: PUSH
7825: LD_INT 105
7827: PUSH
7828: LD_INT 106
7830: PUSH
7831: LD_INT 107
7833: PUSH
7834: LD_INT 108
7836: PUSH
7837: LD_INT 109
7839: PUSH
7840: LD_INT 110
7842: PUSH
7843: LD_INT 111
7845: PUSH
7846: LD_INT 112
7848: PUSH
7849: LD_INT 113
7851: PUSH
7852: LD_INT 114
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: ST_TO_ADDR
7875: GO 8822
7877: LD_INT 15
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8097
7885: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 4
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 6
7908: PUSH
7909: LD_INT 7
7911: PUSH
7912: LD_INT 8
7914: PUSH
7915: LD_INT 9
7917: PUSH
7918: LD_INT 10
7920: PUSH
7921: LD_INT 11
7923: PUSH
7924: LD_INT 12
7926: PUSH
7927: LD_INT 13
7929: PUSH
7930: LD_INT 14
7932: PUSH
7933: LD_INT 15
7935: PUSH
7936: LD_INT 16
7938: PUSH
7939: LD_INT 17
7941: PUSH
7942: LD_INT 18
7944: PUSH
7945: LD_INT 19
7947: PUSH
7948: LD_INT 20
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 23
7959: PUSH
7960: LD_INT 24
7962: PUSH
7963: LD_INT 25
7965: PUSH
7966: LD_INT 26
7968: PUSH
7969: LD_INT 27
7971: PUSH
7972: LD_INT 28
7974: PUSH
7975: LD_INT 29
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 31
7983: PUSH
7984: LD_INT 32
7986: PUSH
7987: LD_INT 33
7989: PUSH
7990: LD_INT 34
7992: PUSH
7993: LD_INT 36
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 101
8035: PUSH
8036: LD_INT 102
8038: PUSH
8039: LD_INT 103
8041: PUSH
8042: LD_INT 104
8044: PUSH
8045: LD_INT 105
8047: PUSH
8048: LD_INT 106
8050: PUSH
8051: LD_INT 107
8053: PUSH
8054: LD_INT 108
8056: PUSH
8057: LD_INT 109
8059: PUSH
8060: LD_INT 110
8062: PUSH
8063: LD_INT 111
8065: PUSH
8066: LD_INT 112
8068: PUSH
8069: LD_INT 113
8071: PUSH
8072: LD_INT 114
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: ST_TO_ADDR
8095: GO 8822
8097: LD_INT 16
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8229
8105: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 4
8116: PUSH
8117: LD_INT 5
8119: PUSH
8120: LD_INT 7
8122: PUSH
8123: LD_INT 11
8125: PUSH
8126: LD_INT 12
8128: PUSH
8129: LD_INT 15
8131: PUSH
8132: LD_INT 16
8134: PUSH
8135: LD_INT 20
8137: PUSH
8138: LD_INT 21
8140: PUSH
8141: LD_INT 22
8143: PUSH
8144: LD_INT 23
8146: PUSH
8147: LD_INT 25
8149: PUSH
8150: LD_INT 26
8152: PUSH
8153: LD_INT 30
8155: PUSH
8156: LD_INT 31
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 33
8164: PUSH
8165: LD_INT 34
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 101
8191: PUSH
8192: LD_INT 102
8194: PUSH
8195: LD_INT 103
8197: PUSH
8198: LD_INT 106
8200: PUSH
8201: LD_INT 108
8203: PUSH
8204: LD_INT 112
8206: PUSH
8207: LD_INT 113
8209: PUSH
8210: LD_INT 114
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 8822
8229: LD_INT 17
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8449
8237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: LD_INT 1
8245: PUSH
8246: LD_INT 2
8248: PUSH
8249: LD_INT 3
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 6
8260: PUSH
8261: LD_INT 7
8263: PUSH
8264: LD_INT 8
8266: PUSH
8267: LD_INT 9
8269: PUSH
8270: LD_INT 10
8272: PUSH
8273: LD_INT 11
8275: PUSH
8276: LD_INT 12
8278: PUSH
8279: LD_INT 13
8281: PUSH
8282: LD_INT 14
8284: PUSH
8285: LD_INT 15
8287: PUSH
8288: LD_INT 16
8290: PUSH
8291: LD_INT 17
8293: PUSH
8294: LD_INT 18
8296: PUSH
8297: LD_INT 19
8299: PUSH
8300: LD_INT 20
8302: PUSH
8303: LD_INT 21
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_INT 23
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 25
8317: PUSH
8318: LD_INT 26
8320: PUSH
8321: LD_INT 27
8323: PUSH
8324: LD_INT 28
8326: PUSH
8327: LD_INT 29
8329: PUSH
8330: LD_INT 30
8332: PUSH
8333: LD_INT 31
8335: PUSH
8336: LD_INT 32
8338: PUSH
8339: LD_INT 33
8341: PUSH
8342: LD_INT 34
8344: PUSH
8345: LD_INT 36
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 101
8387: PUSH
8388: LD_INT 102
8390: PUSH
8391: LD_INT 103
8393: PUSH
8394: LD_INT 104
8396: PUSH
8397: LD_INT 105
8399: PUSH
8400: LD_INT 106
8402: PUSH
8403: LD_INT 107
8405: PUSH
8406: LD_INT 108
8408: PUSH
8409: LD_INT 109
8411: PUSH
8412: LD_INT 110
8414: PUSH
8415: LD_INT 111
8417: PUSH
8418: LD_INT 112
8420: PUSH
8421: LD_INT 113
8423: PUSH
8424: LD_INT 114
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
8447: GO 8822
8449: LD_INT 18
8451: DOUBLE
8452: EQUAL
8453: IFTRUE 8457
8455: GO 8593
8457: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8458: LD_ADDR_VAR 0 1
8462: PUSH
8463: LD_INT 2
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: LD_INT 5
8471: PUSH
8472: LD_INT 7
8474: PUSH
8475: LD_INT 11
8477: PUSH
8478: LD_INT 12
8480: PUSH
8481: LD_INT 15
8483: PUSH
8484: LD_INT 16
8486: PUSH
8487: LD_INT 20
8489: PUSH
8490: LD_INT 21
8492: PUSH
8493: LD_INT 22
8495: PUSH
8496: LD_INT 23
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 26
8504: PUSH
8505: LD_INT 30
8507: PUSH
8508: LD_INT 31
8510: PUSH
8511: LD_INT 32
8513: PUSH
8514: LD_INT 33
8516: PUSH
8517: LD_INT 34
8519: PUSH
8520: LD_INT 35
8522: PUSH
8523: LD_INT 36
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 101
8551: PUSH
8552: LD_INT 102
8554: PUSH
8555: LD_INT 103
8557: PUSH
8558: LD_INT 106
8560: PUSH
8561: LD_INT 108
8563: PUSH
8564: LD_INT 112
8566: PUSH
8567: LD_INT 113
8569: PUSH
8570: LD_INT 114
8572: PUSH
8573: LD_INT 115
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: ST_TO_ADDR
8591: GO 8822
8593: LD_INT 19
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8601
8599: GO 8821
8601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: LD_INT 2
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 6
8624: PUSH
8625: LD_INT 7
8627: PUSH
8628: LD_INT 8
8630: PUSH
8631: LD_INT 9
8633: PUSH
8634: LD_INT 10
8636: PUSH
8637: LD_INT 11
8639: PUSH
8640: LD_INT 12
8642: PUSH
8643: LD_INT 13
8645: PUSH
8646: LD_INT 14
8648: PUSH
8649: LD_INT 15
8651: PUSH
8652: LD_INT 16
8654: PUSH
8655: LD_INT 17
8657: PUSH
8658: LD_INT 18
8660: PUSH
8661: LD_INT 19
8663: PUSH
8664: LD_INT 20
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 22
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: LD_INT 25
8681: PUSH
8682: LD_INT 26
8684: PUSH
8685: LD_INT 27
8687: PUSH
8688: LD_INT 28
8690: PUSH
8691: LD_INT 29
8693: PUSH
8694: LD_INT 30
8696: PUSH
8697: LD_INT 31
8699: PUSH
8700: LD_INT 32
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: LD_INT 34
8708: PUSH
8709: LD_INT 35
8711: PUSH
8712: LD_INT 36
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 101
8755: PUSH
8756: LD_INT 102
8758: PUSH
8759: LD_INT 103
8761: PUSH
8762: LD_INT 104
8764: PUSH
8765: LD_INT 105
8767: PUSH
8768: LD_INT 106
8770: PUSH
8771: LD_INT 107
8773: PUSH
8774: LD_INT 108
8776: PUSH
8777: LD_INT 109
8779: PUSH
8780: LD_INT 110
8782: PUSH
8783: LD_INT 111
8785: PUSH
8786: LD_INT 112
8788: PUSH
8789: LD_INT 113
8791: PUSH
8792: LD_INT 114
8794: PUSH
8795: LD_INT 115
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: ST_TO_ADDR
8819: GO 8822
8821: POP
// end else
8822: GO 9041
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8824: LD_ADDR_VAR 0 1
8828: PUSH
8829: LD_INT 1
8831: PUSH
8832: LD_INT 2
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: LD_INT 4
8840: PUSH
8841: LD_INT 5
8843: PUSH
8844: LD_INT 6
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 8
8852: PUSH
8853: LD_INT 9
8855: PUSH
8856: LD_INT 10
8858: PUSH
8859: LD_INT 11
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: LD_INT 13
8867: PUSH
8868: LD_INT 14
8870: PUSH
8871: LD_INT 15
8873: PUSH
8874: LD_INT 16
8876: PUSH
8877: LD_INT 17
8879: PUSH
8880: LD_INT 18
8882: PUSH
8883: LD_INT 19
8885: PUSH
8886: LD_INT 20
8888: PUSH
8889: LD_INT 21
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_INT 23
8897: PUSH
8898: LD_INT 24
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 27
8909: PUSH
8910: LD_INT 28
8912: PUSH
8913: LD_INT 29
8915: PUSH
8916: LD_INT 30
8918: PUSH
8919: LD_INT 31
8921: PUSH
8922: LD_INT 32
8924: PUSH
8925: LD_INT 33
8927: PUSH
8928: LD_INT 34
8930: PUSH
8931: LD_INT 35
8933: PUSH
8934: LD_INT 36
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 103
8983: PUSH
8984: LD_INT 104
8986: PUSH
8987: LD_INT 105
8989: PUSH
8990: LD_INT 106
8992: PUSH
8993: LD_INT 107
8995: PUSH
8996: LD_INT 108
8998: PUSH
8999: LD_INT 109
9001: PUSH
9002: LD_INT 110
9004: PUSH
9005: LD_INT 111
9007: PUSH
9008: LD_INT 112
9010: PUSH
9011: LD_INT 113
9013: PUSH
9014: LD_INT 114
9016: PUSH
9017: LD_INT 115
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// if result then
9041: LD_VAR 0 1
9045: IFFALSE 9334
// begin normal :=  ;
9047: LD_ADDR_VAR 0 3
9051: PUSH
9052: LD_STRING 
9054: ST_TO_ADDR
// hardcore :=  ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: LD_STRING 
9062: ST_TO_ADDR
// for i = 1 to normalCounter do
9063: LD_ADDR_VAR 0 5
9067: PUSH
9068: DOUBLE
9069: LD_INT 1
9071: DEC
9072: ST_TO_ADDR
9073: LD_EXP 24
9077: PUSH
9078: FOR_TO
9079: IFFALSE 9180
// begin tmp := 0 ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_STRING 0
9088: ST_TO_ADDR
// if result [ 1 ] then
9089: LD_VAR 0 1
9093: PUSH
9094: LD_INT 1
9096: ARRAY
9097: IFFALSE 9162
// if result [ 1 ] [ 1 ] = i then
9099: LD_VAR 0 1
9103: PUSH
9104: LD_INT 1
9106: ARRAY
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PUSH
9112: LD_VAR 0 5
9116: EQUAL
9117: IFFALSE 9162
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: LD_VAR 0 1
9136: PUSH
9137: LD_INT 1
9139: ARRAY
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 3
9148: PPUSH
9149: CALL_OW 1
9153: ST_TO_ADDR
// tmp := 1 ;
9154: LD_ADDR_VAR 0 2
9158: PUSH
9159: LD_STRING 1
9161: ST_TO_ADDR
// end ; normal := normal & tmp ;
9162: LD_ADDR_VAR 0 3
9166: PUSH
9167: LD_VAR 0 3
9171: PUSH
9172: LD_VAR 0 2
9176: STR
9177: ST_TO_ADDR
// end ;
9178: GO 9078
9180: POP
9181: POP
// for i = 1 to hardcoreCounter do
9182: LD_ADDR_VAR 0 5
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_EXP 25
9196: PUSH
9197: FOR_TO
9198: IFFALSE 9303
// begin tmp := 0 ;
9200: LD_ADDR_VAR 0 2
9204: PUSH
9205: LD_STRING 0
9207: ST_TO_ADDR
// if result [ 2 ] then
9208: LD_VAR 0 1
9212: PUSH
9213: LD_INT 2
9215: ARRAY
9216: IFFALSE 9285
// if result [ 2 ] [ 1 ] = 100 + i then
9218: LD_VAR 0 1
9222: PUSH
9223: LD_INT 2
9225: ARRAY
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PUSH
9231: LD_INT 100
9233: PUSH
9234: LD_VAR 0 5
9238: PLUS
9239: EQUAL
9240: IFFALSE 9285
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 1
9251: PPUSH
9252: LD_INT 2
9254: PPUSH
9255: LD_VAR 0 1
9259: PUSH
9260: LD_INT 2
9262: ARRAY
9263: PPUSH
9264: LD_INT 1
9266: PPUSH
9267: CALL_OW 3
9271: PPUSH
9272: CALL_OW 1
9276: ST_TO_ADDR
// tmp := 1 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_STRING 1
9284: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9285: LD_ADDR_VAR 0 4
9289: PUSH
9290: LD_VAR 0 4
9294: PUSH
9295: LD_VAR 0 2
9299: STR
9300: ST_TO_ADDR
// end ;
9301: GO 9197
9303: POP
9304: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9305: LD_STRING getStreamItemsFromMission("
9307: PUSH
9308: LD_VAR 0 3
9312: STR
9313: PUSH
9314: LD_STRING ","
9316: STR
9317: PUSH
9318: LD_VAR 0 4
9322: STR
9323: PUSH
9324: LD_STRING ")
9326: STR
9327: PPUSH
9328: CALL_OW 559
// end else
9332: GO 9341
// ToLua ( getStreamItemsFromMission("","") ) ;
9334: LD_STRING getStreamItemsFromMission("","")
9336: PPUSH
9337: CALL_OW 559
// end ;
9341: LD_VAR 0 1
9345: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9346: LD_EXP 23
9350: PUSH
9351: LD_EXP 28
9355: AND
9356: IFFALSE 9480
9358: GO 9360
9360: DISABLE
9361: LD_INT 0
9363: PPUSH
9364: PPUSH
// begin enable ;
9365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_INT 22
9373: PUSH
9374: LD_OWVAR 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: LD_INT 34
9388: PUSH
9389: LD_INT 7
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 34
9398: PUSH
9399: LD_INT 45
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 34
9408: PUSH
9409: LD_INT 28
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 34
9418: PUSH
9419: LD_INT 47
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: ST_TO_ADDR
// if not tmp then
9442: LD_VAR 0 2
9446: NOT
9447: IFFALSE 9451
// exit ;
9449: GO 9480
// for i in tmp do
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_VAR 0 2
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9478
// begin SetLives ( i , 0 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 0
9471: PPUSH
9472: CALL_OW 234
// end ;
9476: GO 9461
9478: POP
9479: POP
// end ;
9480: PPOPN 2
9482: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9483: LD_EXP 23
9487: PUSH
9488: LD_EXP 29
9492: AND
9493: IFFALSE 9577
9495: GO 9497
9497: DISABLE
9498: LD_INT 0
9500: PPUSH
9501: PPUSH
// begin enable ;
9502: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9503: LD_ADDR_VAR 0 2
9507: PUSH
9508: LD_INT 22
9510: PUSH
9511: LD_OWVAR 2
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: ST_TO_ADDR
// if not tmp then
9539: LD_VAR 0 2
9543: NOT
9544: IFFALSE 9548
// exit ;
9546: GO 9577
// for i in tmp do
9548: LD_ADDR_VAR 0 1
9552: PUSH
9553: LD_VAR 0 2
9557: PUSH
9558: FOR_IN
9559: IFFALSE 9575
// begin SetLives ( i , 0 ) ;
9561: LD_VAR 0 1
9565: PPUSH
9566: LD_INT 0
9568: PPUSH
9569: CALL_OW 234
// end ;
9573: GO 9558
9575: POP
9576: POP
// end ;
9577: PPOPN 2
9579: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9580: LD_EXP 23
9584: PUSH
9585: LD_EXP 26
9589: AND
9590: IFFALSE 9683
9592: GO 9594
9594: DISABLE
9595: LD_INT 0
9597: PPUSH
// begin enable ;
9598: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9599: LD_ADDR_VAR 0 1
9603: PUSH
9604: LD_INT 22
9606: PUSH
9607: LD_OWVAR 2
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 5
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 9
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 8
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: CALL_OW 69
9663: PUSH
9664: FOR_IN
9665: IFFALSE 9681
// begin SetClass ( i , 1 ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 336
// end ;
9679: GO 9664
9681: POP
9682: POP
// end ;
9683: PPOPN 1
9685: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9686: LD_EXP 23
9690: PUSH
9691: LD_EXP 27
9695: AND
9696: PUSH
9697: LD_OWVAR 65
9701: PUSH
9702: LD_INT 7
9704: LESS
9705: AND
9706: IFFALSE 9720
9708: GO 9710
9710: DISABLE
// begin enable ;
9711: ENABLE
// game_speed := 7 ;
9712: LD_ADDR_OWVAR 65
9716: PUSH
9717: LD_INT 7
9719: ST_TO_ADDR
// end ;
9720: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9721: LD_EXP 23
9725: PUSH
9726: LD_EXP 30
9730: AND
9731: IFFALSE 9933
9733: GO 9735
9735: DISABLE
9736: LD_INT 0
9738: PPUSH
9739: PPUSH
9740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9741: LD_ADDR_VAR 0 3
9745: PUSH
9746: LD_INT 81
9748: PUSH
9749: LD_OWVAR 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 21
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: ST_TO_ADDR
// if not tmp then
9777: LD_VAR 0 3
9781: NOT
9782: IFFALSE 9786
// exit ;
9784: GO 9933
// if tmp > 5 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 5
9793: GREATER
9794: IFFALSE 9806
// k := 5 else
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_INT 5
9803: ST_TO_ADDR
9804: GO 9816
// k := tmp ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_VAR 0 3
9815: ST_TO_ADDR
// for i := 1 to k do
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: DOUBLE
9822: LD_INT 1
9824: DEC
9825: ST_TO_ADDR
9826: LD_VAR 0 2
9830: PUSH
9831: FOR_TO
9832: IFFALSE 9931
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9834: LD_VAR 0 3
9838: PUSH
9839: LD_VAR 0 1
9843: ARRAY
9844: PPUSH
9845: LD_VAR 0 1
9849: PUSH
9850: LD_INT 4
9852: MOD
9853: PUSH
9854: LD_INT 1
9856: PLUS
9857: PPUSH
9858: CALL_OW 259
9862: PUSH
9863: LD_INT 10
9865: LESS
9866: IFFALSE 9929
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9868: LD_VAR 0 3
9872: PUSH
9873: LD_VAR 0 1
9877: ARRAY
9878: PPUSH
9879: LD_VAR 0 1
9883: PUSH
9884: LD_INT 4
9886: MOD
9887: PUSH
9888: LD_INT 1
9890: PLUS
9891: PPUSH
9892: LD_VAR 0 3
9896: PUSH
9897: LD_VAR 0 1
9901: ARRAY
9902: PPUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 4
9910: MOD
9911: PUSH
9912: LD_INT 1
9914: PLUS
9915: PPUSH
9916: CALL_OW 259
9920: PUSH
9921: LD_INT 1
9923: PLUS
9924: PPUSH
9925: CALL_OW 237
9929: GO 9831
9931: POP
9932: POP
// end ;
9933: PPOPN 3
9935: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9936: LD_EXP 23
9940: PUSH
9941: LD_EXP 31
9945: AND
9946: IFFALSE 9966
9948: GO 9950
9950: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9951: LD_INT 4
9953: PPUSH
9954: LD_OWVAR 2
9958: PPUSH
9959: LD_INT 0
9961: PPUSH
9962: CALL_OW 324
9966: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9967: LD_EXP 23
9971: PUSH
9972: LD_EXP 60
9976: AND
9977: IFFALSE 9997
9979: GO 9981
9981: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9982: LD_INT 19
9984: PPUSH
9985: LD_OWVAR 2
9989: PPUSH
9990: LD_INT 0
9992: PPUSH
9993: CALL_OW 324
9997: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9998: LD_EXP 23
10002: PUSH
10003: LD_EXP 32
10007: AND
10008: IFFALSE 10110
10010: GO 10012
10012: DISABLE
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
// begin enable ;
10017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: LD_INT 22
10025: PUSH
10026: LD_OWVAR 2
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 34
10040: PUSH
10041: LD_INT 11
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 34
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PPUSH
10067: CALL_OW 69
10071: ST_TO_ADDR
// if not tmp then
10072: LD_VAR 0 2
10076: NOT
10077: IFFALSE 10081
// exit ;
10079: GO 10110
// for i in tmp do
10081: LD_ADDR_VAR 0 1
10085: PUSH
10086: LD_VAR 0 2
10090: PUSH
10091: FOR_IN
10092: IFFALSE 10108
// begin SetLives ( i , 0 ) ;
10094: LD_VAR 0 1
10098: PPUSH
10099: LD_INT 0
10101: PPUSH
10102: CALL_OW 234
// end ;
10106: GO 10091
10108: POP
10109: POP
// end ;
10110: PPOPN 2
10112: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10113: LD_EXP 23
10117: PUSH
10118: LD_EXP 33
10122: AND
10123: IFFALSE 10143
10125: GO 10127
10127: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10128: LD_INT 32
10130: PPUSH
10131: LD_OWVAR 2
10135: PPUSH
10136: LD_INT 0
10138: PPUSH
10139: CALL_OW 324
10143: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10144: LD_EXP 23
10148: PUSH
10149: LD_EXP 34
10153: AND
10154: IFFALSE 10335
10156: GO 10158
10158: DISABLE
10159: LD_INT 0
10161: PPUSH
10162: PPUSH
10163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10164: LD_ADDR_VAR 0 2
10168: PUSH
10169: LD_INT 22
10171: PUSH
10172: LD_OWVAR 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 33
10183: PUSH
10184: LD_INT 3
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PPUSH
10195: CALL_OW 69
10199: ST_TO_ADDR
// if not tmp then
10200: LD_VAR 0 2
10204: NOT
10205: IFFALSE 10209
// exit ;
10207: GO 10335
// side := 0 ;
10209: LD_ADDR_VAR 0 3
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// for i := 1 to 8 do
10217: LD_ADDR_VAR 0 1
10221: PUSH
10222: DOUBLE
10223: LD_INT 1
10225: DEC
10226: ST_TO_ADDR
10227: LD_INT 8
10229: PUSH
10230: FOR_TO
10231: IFFALSE 10279
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10233: LD_OWVAR 2
10237: PUSH
10238: LD_VAR 0 1
10242: NONEQUAL
10243: PUSH
10244: LD_OWVAR 2
10248: PPUSH
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 81
10258: PUSH
10259: LD_INT 2
10261: EQUAL
10262: AND
10263: IFFALSE 10277
// begin side := i ;
10265: LD_ADDR_VAR 0 3
10269: PUSH
10270: LD_VAR 0 1
10274: ST_TO_ADDR
// break ;
10275: GO 10279
// end ;
10277: GO 10230
10279: POP
10280: POP
// if not side then
10281: LD_VAR 0 3
10285: NOT
10286: IFFALSE 10290
// exit ;
10288: GO 10335
// for i := 1 to tmp do
10290: LD_ADDR_VAR 0 1
10294: PUSH
10295: DOUBLE
10296: LD_INT 1
10298: DEC
10299: ST_TO_ADDR
10300: LD_VAR 0 2
10304: PUSH
10305: FOR_TO
10306: IFFALSE 10333
// if Prob ( 60 ) then
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 13
10315: IFFALSE 10331
// SetSide ( i , side ) ;
10317: LD_VAR 0 1
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: CALL_OW 235
10331: GO 10305
10333: POP
10334: POP
// end ;
10335: PPOPN 3
10337: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10338: LD_EXP 23
10342: PUSH
10343: LD_EXP 36
10347: AND
10348: IFFALSE 10467
10350: GO 10352
10352: DISABLE
10353: LD_INT 0
10355: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_OWVAR 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: LD_INT 23
10388: PUSH
10389: LD_INT 0
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: PUSH
10410: FOR_IN
10411: IFFALSE 10465
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10413: LD_VAR 0 1
10417: PPUSH
10418: CALL_OW 257
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: LD_INT 3
10431: PUSH
10432: LD_INT 4
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: IN
10441: IFFALSE 10463
// SetClass ( un , rand ( 1 , 4 ) ) ;
10443: LD_VAR 0 1
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: LD_INT 4
10453: PPUSH
10454: CALL_OW 12
10458: PPUSH
10459: CALL_OW 336
10463: GO 10410
10465: POP
10466: POP
// end ;
10467: PPOPN 1
10469: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10470: LD_EXP 23
10474: PUSH
10475: LD_EXP 35
10479: AND
10480: IFFALSE 10559
10482: GO 10484
10484: DISABLE
10485: LD_INT 0
10487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10488: LD_ADDR_VAR 0 1
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_OWVAR 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 21
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 69
10523: ST_TO_ADDR
// if not tmp then
10524: LD_VAR 0 1
10528: NOT
10529: IFFALSE 10533
// exit ;
10531: GO 10559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10533: LD_VAR 0 1
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_VAR 0 1
10545: PPUSH
10546: CALL_OW 12
10550: ARRAY
10551: PPUSH
10552: LD_INT 100
10554: PPUSH
10555: CALL_OW 234
// end ;
10559: PPOPN 1
10561: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10562: LD_EXP 23
10566: PUSH
10567: LD_EXP 37
10571: AND
10572: IFFALSE 10670
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10580: LD_ADDR_VAR 0 1
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_OWVAR 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 1
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: ST_TO_ADDR
// if not tmp then
10616: LD_VAR 0 1
10620: NOT
10621: IFFALSE 10625
// exit ;
10623: GO 10670
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10625: LD_VAR 0 1
10629: PUSH
10630: LD_INT 1
10632: PPUSH
10633: LD_VAR 0 1
10637: PPUSH
10638: CALL_OW 12
10642: ARRAY
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_INT 4
10649: PPUSH
10650: CALL_OW 12
10654: PPUSH
10655: LD_INT 3000
10657: PPUSH
10658: LD_INT 9000
10660: PPUSH
10661: CALL_OW 12
10665: PPUSH
10666: CALL_OW 492
// end ;
10670: PPOPN 1
10672: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10673: LD_EXP 23
10677: PUSH
10678: LD_EXP 38
10682: AND
10683: IFFALSE 10703
10685: GO 10687
10687: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10688: LD_INT 1
10690: PPUSH
10691: LD_OWVAR 2
10695: PPUSH
10696: LD_INT 0
10698: PPUSH
10699: CALL_OW 324
10703: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10704: LD_EXP 23
10708: PUSH
10709: LD_EXP 39
10713: AND
10714: IFFALSE 10797
10716: GO 10718
10718: DISABLE
10719: LD_INT 0
10721: PPUSH
10722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10723: LD_ADDR_VAR 0 2
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_OWVAR 2
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 21
10742: PUSH
10743: LD_INT 3
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not tmp then
10759: LD_VAR 0 2
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10797
// for i in tmp do
10768: LD_ADDR_VAR 0 1
10772: PUSH
10773: LD_VAR 0 2
10777: PUSH
10778: FOR_IN
10779: IFFALSE 10795
// SetBLevel ( i , 10 ) ;
10781: LD_VAR 0 1
10785: PPUSH
10786: LD_INT 10
10788: PPUSH
10789: CALL_OW 241
10793: GO 10778
10795: POP
10796: POP
// end ;
10797: PPOPN 2
10799: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10800: LD_EXP 23
10804: PUSH
10805: LD_EXP 40
10809: AND
10810: IFFALSE 10921
10812: GO 10814
10814: DISABLE
10815: LD_INT 0
10817: PPUSH
10818: PPUSH
10819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10820: LD_ADDR_VAR 0 3
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_OWVAR 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 25
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 69
10855: ST_TO_ADDR
// if not tmp then
10856: LD_VAR 0 3
10860: NOT
10861: IFFALSE 10865
// exit ;
10863: GO 10921
// un := tmp [ rand ( 1 , tmp ) ] ;
10865: LD_ADDR_VAR 0 2
10869: PUSH
10870: LD_VAR 0 3
10874: PUSH
10875: LD_INT 1
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// if Crawls ( un ) then
10889: LD_VAR 0 2
10893: PPUSH
10894: CALL_OW 318
10898: IFFALSE 10909
// ComWalk ( un ) ;
10900: LD_VAR 0 2
10904: PPUSH
10905: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10909: LD_VAR 0 2
10913: PPUSH
10914: LD_INT 5
10916: PPUSH
10917: CALL_OW 336
// end ;
10921: PPOPN 3
10923: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10924: LD_EXP 23
10928: PUSH
10929: LD_EXP 41
10933: AND
10934: PUSH
10935: LD_OWVAR 67
10939: PUSH
10940: LD_INT 3
10942: LESS
10943: AND
10944: IFFALSE 10963
10946: GO 10948
10948: DISABLE
// Difficulty := Difficulty + 1 ;
10949: LD_ADDR_OWVAR 67
10953: PUSH
10954: LD_OWVAR 67
10958: PUSH
10959: LD_INT 1
10961: PLUS
10962: ST_TO_ADDR
10963: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10964: LD_EXP 23
10968: PUSH
10969: LD_EXP 42
10973: AND
10974: IFFALSE 11077
10976: GO 10978
10978: DISABLE
10979: LD_INT 0
10981: PPUSH
// begin for i := 1 to 5 do
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: DOUBLE
10988: LD_INT 1
10990: DEC
10991: ST_TO_ADDR
10992: LD_INT 5
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11075
// begin uc_nation := nation_nature ;
10998: LD_ADDR_OWVAR 21
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// uc_side := 0 ;
11006: LD_ADDR_OWVAR 20
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11014: LD_ADDR_OWVAR 29
11018: PUSH
11019: LD_INT 12
11021: PUSH
11022: LD_INT 12
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// hc_agressivity := 20 ;
11029: LD_ADDR_OWVAR 35
11033: PUSH
11034: LD_INT 20
11036: ST_TO_ADDR
// hc_class := class_tiger ;
11037: LD_ADDR_OWVAR 28
11041: PUSH
11042: LD_INT 14
11044: ST_TO_ADDR
// hc_gallery :=  ;
11045: LD_ADDR_OWVAR 33
11049: PUSH
11050: LD_STRING 
11052: ST_TO_ADDR
// hc_name :=  ;
11053: LD_ADDR_OWVAR 26
11057: PUSH
11058: LD_STRING 
11060: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11061: CALL_OW 44
11065: PPUSH
11066: LD_INT 0
11068: PPUSH
11069: CALL_OW 51
// end ;
11073: GO 10995
11075: POP
11076: POP
// end ;
11077: PPOPN 1
11079: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11080: LD_EXP 23
11084: PUSH
11085: LD_EXP 43
11089: AND
11090: IFFALSE 11099
11092: GO 11094
11094: DISABLE
// StreamSibBomb ;
11095: CALL 11100 0 0
11099: END
// export function StreamSibBomb ; var i , x , y ; begin
11100: LD_INT 0
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
// result := false ;
11106: LD_ADDR_VAR 0 1
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// for i := 1 to 16 do
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: DOUBLE
11120: LD_INT 1
11122: DEC
11123: ST_TO_ADDR
11124: LD_INT 16
11126: PUSH
11127: FOR_TO
11128: IFFALSE 11327
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11130: LD_ADDR_VAR 0 3
11134: PUSH
11135: LD_INT 10
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 40
11146: PUSH
11147: LD_INT 50
11149: PUSH
11150: LD_INT 60
11152: PUSH
11153: LD_INT 70
11155: PUSH
11156: LD_INT 80
11158: PUSH
11159: LD_INT 90
11161: PUSH
11162: LD_INT 100
11164: PUSH
11165: LD_INT 110
11167: PUSH
11168: LD_INT 120
11170: PUSH
11171: LD_INT 130
11173: PUSH
11174: LD_INT 140
11176: PUSH
11177: LD_INT 150
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 1
11199: PPUSH
11200: LD_INT 15
11202: PPUSH
11203: CALL_OW 12
11207: ARRAY
11208: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_INT 10
11216: PUSH
11217: LD_INT 20
11219: PUSH
11220: LD_INT 30
11222: PUSH
11223: LD_INT 40
11225: PUSH
11226: LD_INT 50
11228: PUSH
11229: LD_INT 60
11231: PUSH
11232: LD_INT 70
11234: PUSH
11235: LD_INT 80
11237: PUSH
11238: LD_INT 90
11240: PUSH
11241: LD_INT 100
11243: PUSH
11244: LD_INT 110
11246: PUSH
11247: LD_INT 120
11249: PUSH
11250: LD_INT 130
11252: PUSH
11253: LD_INT 140
11255: PUSH
11256: LD_INT 150
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 1
11278: PPUSH
11279: LD_INT 15
11281: PPUSH
11282: CALL_OW 12
11286: ARRAY
11287: ST_TO_ADDR
// if ValidHex ( x , y ) then
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: CALL_OW 488
11302: IFFALSE 11325
// begin result := [ x , y ] ;
11304: LD_ADDR_VAR 0 1
11308: PUSH
11309: LD_VAR 0 3
11313: PUSH
11314: LD_VAR 0 4
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: ST_TO_ADDR
// break ;
11323: GO 11327
// end ; end ;
11325: GO 11127
11327: POP
11328: POP
// if result then
11329: LD_VAR 0 1
11333: IFFALSE 11393
// begin ToLua ( playSibBomb() ) ;
11335: LD_STRING playSibBomb()
11337: PPUSH
11338: CALL_OW 559
// wait ( 0 0$14 ) ;
11342: LD_INT 490
11344: PPUSH
11345: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11349: LD_VAR 0 1
11353: PUSH
11354: LD_INT 1
11356: ARRAY
11357: PPUSH
11358: LD_VAR 0 1
11362: PUSH
11363: LD_INT 2
11365: ARRAY
11366: PPUSH
11367: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11371: LD_VAR 0 1
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PPUSH
11380: LD_VAR 0 1
11384: PUSH
11385: LD_INT 2
11387: ARRAY
11388: PPUSH
11389: CALL_OW 429
// end ; end ;
11393: LD_VAR 0 1
11397: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11398: LD_EXP 23
11402: PUSH
11403: LD_EXP 45
11407: AND
11408: IFFALSE 11420
11410: GO 11412
11412: DISABLE
// YouLost (  ) ;
11413: LD_STRING 
11415: PPUSH
11416: CALL_OW 104
11420: END
// every 0 0$1 trigger StreamModeActive and sFog do
11421: LD_EXP 23
11425: PUSH
11426: LD_EXP 44
11430: AND
11431: IFFALSE 11445
11433: GO 11435
11435: DISABLE
// FogOff ( your_side ) ;
11436: LD_OWVAR 2
11440: PPUSH
11441: CALL_OW 344
11445: END
// every 0 0$1 trigger StreamModeActive and sSun do
11446: LD_EXP 23
11450: PUSH
11451: LD_EXP 46
11455: AND
11456: IFFALSE 11484
11458: GO 11460
11460: DISABLE
// begin solar_recharge_percent := 0 ;
11461: LD_ADDR_OWVAR 79
11465: PUSH
11466: LD_INT 0
11468: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11469: LD_INT 10500
11471: PPUSH
11472: CALL_OW 67
// solar_recharge_percent := 100 ;
11476: LD_ADDR_OWVAR 79
11480: PUSH
11481: LD_INT 100
11483: ST_TO_ADDR
// end ;
11484: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11485: LD_EXP 23
11489: PUSH
11490: LD_EXP 47
11494: AND
11495: IFFALSE 11734
11497: GO 11499
11499: DISABLE
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
11504: PPUSH
// begin tmp := [ ] ;
11505: LD_ADDR_VAR 0 3
11509: PUSH
11510: EMPTY
11511: ST_TO_ADDR
// for i := 1 to 6 do
11512: LD_ADDR_VAR 0 1
11516: PUSH
11517: DOUBLE
11518: LD_INT 1
11520: DEC
11521: ST_TO_ADDR
11522: LD_INT 6
11524: PUSH
11525: FOR_TO
11526: IFFALSE 11631
// begin uc_nation := nation_nature ;
11528: LD_ADDR_OWVAR 21
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// uc_side := 0 ;
11536: LD_ADDR_OWVAR 20
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11544: LD_ADDR_OWVAR 29
11548: PUSH
11549: LD_INT 12
11551: PUSH
11552: LD_INT 12
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: ST_TO_ADDR
// hc_agressivity := 20 ;
11559: LD_ADDR_OWVAR 35
11563: PUSH
11564: LD_INT 20
11566: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11567: LD_ADDR_OWVAR 28
11571: PUSH
11572: LD_INT 17
11574: ST_TO_ADDR
// hc_gallery :=  ;
11575: LD_ADDR_OWVAR 33
11579: PUSH
11580: LD_STRING 
11582: ST_TO_ADDR
// hc_name :=  ;
11583: LD_ADDR_OWVAR 26
11587: PUSH
11588: LD_STRING 
11590: ST_TO_ADDR
// un := CreateHuman ;
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: CALL_OW 44
11600: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11601: LD_VAR 0 2
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 51
// tmp := tmp ^ un ;
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: LD_VAR 0 3
11622: PUSH
11623: LD_VAR 0 2
11627: ADD
11628: ST_TO_ADDR
// end ;
11629: GO 11525
11631: POP
11632: POP
// repeat wait ( 0 0$1 ) ;
11633: LD_INT 35
11635: PPUSH
11636: CALL_OW 67
// for un in tmp do
11640: LD_ADDR_VAR 0 2
11644: PUSH
11645: LD_VAR 0 3
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11725
// begin if IsDead ( un ) then
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 301
11662: IFFALSE 11682
// begin tmp := tmp diff un ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_VAR 0 3
11673: PUSH
11674: LD_VAR 0 2
11678: DIFF
11679: ST_TO_ADDR
// continue ;
11680: GO 11650
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 3
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 0
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL_OW 69
11708: PPUSH
11709: LD_VAR 0 2
11713: PPUSH
11714: CALL_OW 74
11718: PPUSH
11719: CALL_OW 115
// end ;
11723: GO 11650
11725: POP
11726: POP
// until not tmp ;
11727: LD_VAR 0 3
11731: NOT
11732: IFFALSE 11633
// end ;
11734: PPOPN 3
11736: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11737: LD_EXP 23
11741: PUSH
11742: LD_EXP 48
11746: AND
11747: IFFALSE 11801
11749: GO 11751
11751: DISABLE
// begin ToLua ( displayTroll(); ) ;
11752: LD_STRING displayTroll();
11754: PPUSH
11755: CALL_OW 559
// wait ( 3 3$00 ) ;
11759: LD_INT 6300
11761: PPUSH
11762: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11766: LD_STRING hideTroll();
11768: PPUSH
11769: CALL_OW 559
// wait ( 1 1$00 ) ;
11773: LD_INT 2100
11775: PPUSH
11776: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11780: LD_STRING displayTroll();
11782: PPUSH
11783: CALL_OW 559
// wait ( 1 1$00 ) ;
11787: LD_INT 2100
11789: PPUSH
11790: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11794: LD_STRING hideTroll();
11796: PPUSH
11797: CALL_OW 559
// end ;
11801: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11802: LD_EXP 23
11806: PUSH
11807: LD_EXP 49
11811: AND
11812: IFFALSE 11875
11814: GO 11816
11816: DISABLE
11817: LD_INT 0
11819: PPUSH
// begin p := 0 ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// repeat game_speed := 1 ;
11828: LD_ADDR_OWVAR 65
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11836: LD_INT 35
11838: PPUSH
11839: CALL_OW 67
// p := p + 1 ;
11843: LD_ADDR_VAR 0 1
11847: PUSH
11848: LD_VAR 0 1
11852: PUSH
11853: LD_INT 1
11855: PLUS
11856: ST_TO_ADDR
// until p >= 60 ;
11857: LD_VAR 0 1
11861: PUSH
11862: LD_INT 60
11864: GREATEREQUAL
11865: IFFALSE 11828
// game_speed := 4 ;
11867: LD_ADDR_OWVAR 65
11871: PUSH
11872: LD_INT 4
11874: ST_TO_ADDR
// end ;
11875: PPOPN 1
11877: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11878: LD_EXP 23
11882: PUSH
11883: LD_EXP 50
11887: AND
11888: IFFALSE 12034
11890: GO 11892
11892: DISABLE
11893: LD_INT 0
11895: PPUSH
11896: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11897: LD_ADDR_VAR 0 1
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_OWVAR 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 2
11916: PUSH
11917: LD_INT 30
11919: PUSH
11920: LD_INT 0
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 30
11929: PUSH
11930: LD_INT 1
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 69
11950: ST_TO_ADDR
// if not depot then
11951: LD_VAR 0 1
11955: NOT
11956: IFFALSE 11960
// exit ;
11958: GO 12034
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 1
11972: PPUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 12
11982: ARRAY
11983: PPUSH
11984: CALL_OW 274
11988: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11989: LD_VAR 0 2
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: LD_INT 0
11999: PPUSH
12000: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12004: LD_VAR 0 2
12008: PPUSH
12009: LD_INT 2
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12019: LD_VAR 0 2
12023: PPUSH
12024: LD_INT 3
12026: PPUSH
12027: LD_INT 0
12029: PPUSH
12030: CALL_OW 277
// end ;
12034: PPOPN 2
12036: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12037: LD_EXP 23
12041: PUSH
12042: LD_EXP 51
12046: AND
12047: IFFALSE 12144
12049: GO 12051
12051: DISABLE
12052: LD_INT 0
12054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 22
12062: PUSH
12063: LD_OWVAR 2
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 21
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 23
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: ST_TO_ADDR
// if not tmp then
12109: LD_VAR 0 1
12113: NOT
12114: IFFALSE 12118
// exit ;
12116: GO 12144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12118: LD_VAR 0 1
12122: PUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 12
12135: ARRAY
12136: PPUSH
12137: LD_INT 200
12139: PPUSH
12140: CALL_OW 234
// end ;
12144: PPOPN 1
12146: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12147: LD_EXP 23
12151: PUSH
12152: LD_EXP 52
12156: AND
12157: IFFALSE 12236
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: LD_INT 22
12172: PUSH
12173: LD_OWVAR 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: ST_TO_ADDR
// if not tmp then
12201: LD_VAR 0 1
12205: NOT
12206: IFFALSE 12210
// exit ;
12208: GO 12236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12210: LD_VAR 0 1
12214: PUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL_OW 12
12227: ARRAY
12228: PPUSH
12229: LD_INT 60
12231: PPUSH
12232: CALL_OW 234
// end ;
12236: PPOPN 1
12238: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12239: LD_EXP 23
12243: PUSH
12244: LD_EXP 53
12248: AND
12249: IFFALSE 12348
12251: GO 12253
12253: DISABLE
12254: LD_INT 0
12256: PPUSH
12257: PPUSH
// begin enable ;
12258: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12259: LD_ADDR_VAR 0 1
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_OWVAR 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 61
12278: PUSH
12279: EMPTY
12280: LIST
12281: PUSH
12282: LD_INT 33
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 69
12301: ST_TO_ADDR
// if not tmp then
12302: LD_VAR 0 1
12306: NOT
12307: IFFALSE 12311
// exit ;
12309: GO 12348
// for i in tmp do
12311: LD_ADDR_VAR 0 2
12315: PUSH
12316: LD_VAR 0 1
12320: PUSH
12321: FOR_IN
12322: IFFALSE 12346
// if IsControledBy ( i ) then
12324: LD_VAR 0 2
12328: PPUSH
12329: CALL_OW 312
12333: IFFALSE 12344
// ComUnlink ( i ) ;
12335: LD_VAR 0 2
12339: PPUSH
12340: CALL_OW 136
12344: GO 12321
12346: POP
12347: POP
// end ;
12348: PPOPN 2
12350: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12351: LD_EXP 23
12355: PUSH
12356: LD_EXP 54
12360: AND
12361: IFFALSE 12501
12363: GO 12365
12365: DISABLE
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
// begin ToLua ( displayPowell(); ) ;
12370: LD_STRING displayPowell();
12372: PPUSH
12373: CALL_OW 559
// uc_side := 0 ;
12377: LD_ADDR_OWVAR 20
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// uc_nation := 2 ;
12385: LD_ADDR_OWVAR 21
12389: PUSH
12390: LD_INT 2
12392: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12393: LD_ADDR_OWVAR 37
12397: PUSH
12398: LD_INT 14
12400: ST_TO_ADDR
// vc_engine := engine_siberite ;
12401: LD_ADDR_OWVAR 39
12405: PUSH
12406: LD_INT 3
12408: ST_TO_ADDR
// vc_control := control_apeman ;
12409: LD_ADDR_OWVAR 38
12413: PUSH
12414: LD_INT 5
12416: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12417: LD_ADDR_OWVAR 40
12421: PUSH
12422: LD_INT 29
12424: ST_TO_ADDR
// un := CreateVehicle ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: CALL_OW 45
12434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12447: LD_INT 35
12449: PPUSH
12450: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12454: LD_VAR 0 2
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_OWVAR 2
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 69
12475: PPUSH
12476: LD_VAR 0 2
12480: PPUSH
12481: CALL_OW 74
12485: PPUSH
12486: CALL_OW 115
// until IsDead ( un ) ;
12490: LD_VAR 0 2
12494: PPUSH
12495: CALL_OW 301
12499: IFFALSE 12447
// end ;
12501: PPOPN 2
12503: END
// every 0 0$1 trigger StreamModeActive and sStu do
12504: LD_EXP 23
12508: PUSH
12509: LD_EXP 62
12513: AND
12514: IFFALSE 12530
12516: GO 12518
12518: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12519: LD_STRING displayStucuk();
12521: PPUSH
12522: CALL_OW 559
// ResetFog ;
12526: CALL_OW 335
// end ;
12530: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12531: LD_EXP 23
12535: PUSH
12536: LD_EXP 55
12540: AND
12541: IFFALSE 12682
12543: GO 12545
12545: DISABLE
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_INT 22
12557: PUSH
12558: LD_OWVAR 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 21
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PPUSH
12581: CALL_OW 69
12585: ST_TO_ADDR
// if not tmp then
12586: LD_VAR 0 2
12590: NOT
12591: IFFALSE 12595
// exit ;
12593: GO 12682
// un := tmp [ rand ( 1 , tmp ) ] ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_VAR 0 2
12604: PUSH
12605: LD_INT 1
12607: PPUSH
12608: LD_VAR 0 2
12612: PPUSH
12613: CALL_OW 12
12617: ARRAY
12618: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12619: LD_VAR 0 1
12623: PPUSH
12624: LD_INT 0
12626: PPUSH
12627: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_OWVAR 3
12640: PUSH
12641: LD_VAR 0 1
12645: DIFF
12646: PPUSH
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 74
12656: PPUSH
12657: CALL_OW 115
// wait ( 0 0$20 ) ;
12661: LD_INT 700
12663: PPUSH
12664: CALL_OW 67
// SetSide ( un , your_side ) ;
12668: LD_VAR 0 1
12672: PPUSH
12673: LD_OWVAR 2
12677: PPUSH
12678: CALL_OW 235
// end ;
12682: PPOPN 2
12684: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12685: LD_EXP 23
12689: PUSH
12690: LD_EXP 56
12694: AND
12695: IFFALSE 12801
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_OWVAR 2
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 0
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 30
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PPUSH
12752: CALL_OW 69
12756: ST_TO_ADDR
// if not depot then
12757: LD_VAR 0 1
12761: NOT
12762: IFFALSE 12766
// exit ;
12764: GO 12801
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PPUSH
12775: CALL_OW 250
12779: PPUSH
12780: LD_VAR 0 1
12784: PUSH
12785: LD_INT 1
12787: ARRAY
12788: PPUSH
12789: CALL_OW 251
12793: PPUSH
12794: LD_INT 70
12796: PPUSH
12797: CALL_OW 495
// end ;
12801: PPOPN 1
12803: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12804: LD_EXP 23
12808: PUSH
12809: LD_EXP 57
12813: AND
12814: IFFALSE 13025
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12826: LD_ADDR_VAR 0 5
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: LD_OWVAR 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: ST_TO_ADDR
// if not tmp then
12862: LD_VAR 0 5
12866: NOT
12867: IFFALSE 12871
// exit ;
12869: GO 13025
// for i in tmp do
12871: LD_ADDR_VAR 0 1
12875: PUSH
12876: LD_VAR 0 5
12880: PUSH
12881: FOR_IN
12882: IFFALSE 13023
// begin d := rand ( 0 , 5 ) ;
12884: LD_ADDR_VAR 0 4
12888: PUSH
12889: LD_INT 0
12891: PPUSH
12892: LD_INT 5
12894: PPUSH
12895: CALL_OW 12
12899: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 250
12914: PPUSH
12915: LD_VAR 0 4
12919: PPUSH
12920: LD_INT 3
12922: PPUSH
12923: LD_INT 12
12925: PPUSH
12926: CALL_OW 12
12930: PPUSH
12931: CALL_OW 272
12935: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: LD_VAR 0 1
12945: PPUSH
12946: CALL_OW 251
12950: PPUSH
12951: LD_VAR 0 4
12955: PPUSH
12956: LD_INT 3
12958: PPUSH
12959: LD_INT 12
12961: PPUSH
12962: CALL_OW 12
12966: PPUSH
12967: CALL_OW 273
12971: ST_TO_ADDR
// if ValidHex ( x , y ) then
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: CALL_OW 488
12986: IFFALSE 13021
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12988: LD_VAR 0 1
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 3
13005: PPUSH
13006: LD_INT 6
13008: PPUSH
13009: CALL_OW 12
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 483
// end ;
13021: GO 12881
13023: POP
13024: POP
// end ;
13025: PPOPN 5
13027: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13028: LD_EXP 23
13032: PUSH
13033: LD_EXP 58
13037: AND
13038: IFFALSE 13132
13040: GO 13042
13042: DISABLE
13043: LD_INT 0
13045: PPUSH
13046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13047: LD_ADDR_VAR 0 2
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_OWVAR 2
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 32
13066: PUSH
13067: LD_INT 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 21
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: PPUSH
13089: CALL_OW 69
13093: ST_TO_ADDR
// if not tmp then
13094: LD_VAR 0 2
13098: NOT
13099: IFFALSE 13103
// exit ;
13101: GO 13132
// for i in tmp do
13103: LD_ADDR_VAR 0 1
13107: PUSH
13108: LD_VAR 0 2
13112: PUSH
13113: FOR_IN
13114: IFFALSE 13130
// SetFuel ( i , 0 ) ;
13116: LD_VAR 0 1
13120: PPUSH
13121: LD_INT 0
13123: PPUSH
13124: CALL_OW 240
13128: GO 13113
13130: POP
13131: POP
// end ;
13132: PPOPN 2
13134: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13135: LD_EXP 23
13139: PUSH
13140: LD_EXP 59
13144: AND
13145: IFFALSE 13211
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_OWVAR 2
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: LD_INT 29
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PPUSH
13184: CALL_OW 69
13188: ST_TO_ADDR
// if not tmp then
13189: LD_VAR 0 1
13193: NOT
13194: IFFALSE 13198
// exit ;
13196: GO 13211
// DestroyUnit ( tmp [ 1 ] ) ;
13198: LD_VAR 0 1
13202: PUSH
13203: LD_INT 1
13205: ARRAY
13206: PPUSH
13207: CALL_OW 65
// end ;
13211: PPOPN 1
13213: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13214: LD_EXP 23
13218: PUSH
13219: LD_EXP 61
13223: AND
13224: IFFALSE 13353
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
// begin uc_side := 0 ;
13232: LD_ADDR_OWVAR 20
13236: PUSH
13237: LD_INT 0
13239: ST_TO_ADDR
// uc_nation := nation_arabian ;
13240: LD_ADDR_OWVAR 21
13244: PUSH
13245: LD_INT 2
13247: ST_TO_ADDR
// hc_gallery :=  ;
13248: LD_ADDR_OWVAR 33
13252: PUSH
13253: LD_STRING 
13255: ST_TO_ADDR
// hc_name :=  ;
13256: LD_ADDR_OWVAR 26
13260: PUSH
13261: LD_STRING 
13263: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13264: LD_INT 1
13266: PPUSH
13267: LD_INT 11
13269: PPUSH
13270: LD_INT 10
13272: PPUSH
13273: CALL_OW 380
// un := CreateHuman ;
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: CALL_OW 44
13286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13299: LD_INT 35
13301: PPUSH
13302: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13306: LD_VAR 0 1
13310: PPUSH
13311: LD_INT 22
13313: PUSH
13314: LD_OWVAR 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 69
13327: PPUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 74
13337: PPUSH
13338: CALL_OW 115
// until IsDead ( un ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: CALL_OW 301
13351: IFFALSE 13299
// end ;
13353: PPOPN 1
13355: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13356: LD_EXP 23
13360: PUSH
13361: LD_EXP 63
13365: AND
13366: IFFALSE 13378
13368: GO 13370
13370: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13371: LD_STRING earthquake(getX(game), 0, 32)
13373: PPUSH
13374: CALL_OW 559
13378: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13379: LD_EXP 23
13383: PUSH
13384: LD_EXP 64
13388: AND
13389: IFFALSE 13480
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin enable ;
13397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13398: LD_ADDR_VAR 0 1
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_OWVAR 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 33
13427: PUSH
13428: LD_INT 3
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 69
13444: ST_TO_ADDR
// if not tmp then
13445: LD_VAR 0 1
13449: NOT
13450: IFFALSE 13454
// exit ;
13452: GO 13480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13454: LD_VAR 0 1
13458: PUSH
13459: LD_INT 1
13461: PPUSH
13462: LD_VAR 0 1
13466: PPUSH
13467: CALL_OW 12
13471: ARRAY
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 234
// end ;
13480: PPOPN 1
13482: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13483: LD_EXP 23
13487: PUSH
13488: LD_EXP 65
13492: AND
13493: IFFALSE 13634
13495: GO 13497
13497: DISABLE
13498: LD_INT 0
13500: PPUSH
13501: PPUSH
13502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 22
13510: PUSH
13511: LD_OWVAR 2
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 25
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: ST_TO_ADDR
// if not tmp then
13539: LD_VAR 0 3
13543: NOT
13544: IFFALSE 13548
// exit ;
13546: GO 13634
// un := tmp [ rand ( 1 , tmp ) ] ;
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 1
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: CALL_OW 12
13570: ARRAY
13571: ST_TO_ADDR
// if Crawls ( un ) then
13572: LD_VAR 0 2
13576: PPUSH
13577: CALL_OW 318
13581: IFFALSE 13592
// ComWalk ( un ) ;
13583: LD_VAR 0 2
13587: PPUSH
13588: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13592: LD_VAR 0 2
13596: PPUSH
13597: LD_INT 9
13599: PPUSH
13600: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13604: LD_INT 28
13606: PPUSH
13607: LD_OWVAR 2
13611: PPUSH
13612: LD_INT 2
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13619: LD_INT 29
13621: PPUSH
13622: LD_OWVAR 2
13626: PPUSH
13627: LD_INT 2
13629: PPUSH
13630: CALL_OW 322
// end ;
13634: PPOPN 3
13636: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13637: LD_EXP 23
13641: PUSH
13642: LD_EXP 66
13646: AND
13647: IFFALSE 13758
13649: GO 13651
13651: DISABLE
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
13656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13657: LD_ADDR_VAR 0 3
13661: PUSH
13662: LD_INT 22
13664: PUSH
13665: LD_OWVAR 2
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: LD_INT 25
13676: PUSH
13677: LD_INT 1
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: ST_TO_ADDR
// if not tmp then
13693: LD_VAR 0 3
13697: NOT
13698: IFFALSE 13702
// exit ;
13700: GO 13758
// un := tmp [ rand ( 1 , tmp ) ] ;
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: LD_VAR 0 3
13711: PUSH
13712: LD_INT 1
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: CALL_OW 12
13724: ARRAY
13725: ST_TO_ADDR
// if Crawls ( un ) then
13726: LD_VAR 0 2
13730: PPUSH
13731: CALL_OW 318
13735: IFFALSE 13746
// ComWalk ( un ) ;
13737: LD_VAR 0 2
13741: PPUSH
13742: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13746: LD_VAR 0 2
13750: PPUSH
13751: LD_INT 8
13753: PPUSH
13754: CALL_OW 336
// end ;
13758: PPOPN 3
13760: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13761: LD_EXP 23
13765: PUSH
13766: LD_EXP 67
13770: AND
13771: IFFALSE 13915
13773: GO 13775
13775: DISABLE
13776: LD_INT 0
13778: PPUSH
13779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_OWVAR 2
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 21
13799: PUSH
13800: LD_INT 2
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: LD_INT 34
13812: PUSH
13813: LD_INT 12
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 34
13822: PUSH
13823: LD_INT 51
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 34
13832: PUSH
13833: LD_INT 32
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: LIST
13850: PPUSH
13851: CALL_OW 69
13855: ST_TO_ADDR
// if not tmp then
13856: LD_VAR 0 2
13860: NOT
13861: IFFALSE 13865
// exit ;
13863: GO 13915
// for i in tmp do
13865: LD_ADDR_VAR 0 1
13869: PUSH
13870: LD_VAR 0 2
13874: PUSH
13875: FOR_IN
13876: IFFALSE 13913
// if GetCargo ( i , mat_artifact ) = 0 then
13878: LD_VAR 0 1
13882: PPUSH
13883: LD_INT 4
13885: PPUSH
13886: CALL_OW 289
13890: PUSH
13891: LD_INT 0
13893: EQUAL
13894: IFFALSE 13911
// SetCargo ( i , mat_siberit , 100 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 3
13903: PPUSH
13904: LD_INT 100
13906: PPUSH
13907: CALL_OW 290
13911: GO 13875
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13918: LD_EXP 23
13922: PUSH
13923: LD_EXP 68
13927: AND
13928: IFFALSE 14111
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_OWVAR 2
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: ST_TO_ADDR
// if not tmp then
13959: LD_VAR 0 2
13963: NOT
13964: IFFALSE 13968
// exit ;
13966: GO 14111
// for i := 1 to 2 do
13968: LD_ADDR_VAR 0 1
13972: PUSH
13973: DOUBLE
13974: LD_INT 1
13976: DEC
13977: ST_TO_ADDR
13978: LD_INT 2
13980: PUSH
13981: FOR_TO
13982: IFFALSE 14109
// begin uc_side := your_side ;
13984: LD_ADDR_OWVAR 20
13988: PUSH
13989: LD_OWVAR 2
13993: ST_TO_ADDR
// uc_nation := nation_american ;
13994: LD_ADDR_OWVAR 21
13998: PUSH
13999: LD_INT 1
14001: ST_TO_ADDR
// vc_chassis := us_morphling ;
14002: LD_ADDR_OWVAR 37
14006: PUSH
14007: LD_INT 5
14009: ST_TO_ADDR
// vc_engine := engine_siberite ;
14010: LD_ADDR_OWVAR 39
14014: PUSH
14015: LD_INT 3
14017: ST_TO_ADDR
// vc_control := control_computer ;
14018: LD_ADDR_OWVAR 38
14022: PUSH
14023: LD_INT 3
14025: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14026: LD_ADDR_OWVAR 40
14030: PUSH
14031: LD_INT 10
14033: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: PPUSH
14043: CALL_OW 310
14047: NOT
14048: IFFALSE 14095
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14050: CALL_OW 45
14054: PPUSH
14055: LD_VAR 0 2
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: CALL_OW 250
14068: PPUSH
14069: LD_VAR 0 2
14073: PUSH
14074: LD_INT 1
14076: ARRAY
14077: PPUSH
14078: CALL_OW 251
14082: PPUSH
14083: LD_INT 12
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 50
14093: GO 14107
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14095: CALL_OW 45
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: CALL_OW 51
// end ;
14107: GO 13981
14109: POP
14110: POP
// end ;
14111: PPOPN 2
14113: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14114: LD_EXP 23
14118: PUSH
14119: LD_EXP 69
14123: AND
14124: IFFALSE 14346
14126: GO 14128
14128: DISABLE
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
14133: PPUSH
14134: PPUSH
14135: PPUSH
14136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14137: LD_ADDR_VAR 0 6
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_OWVAR 2
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 1
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 3
14166: PUSH
14167: LD_INT 23
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: EMPTY
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: PPUSH
14186: CALL_OW 69
14190: ST_TO_ADDR
// if not tmp then
14191: LD_VAR 0 6
14195: NOT
14196: IFFALSE 14200
// exit ;
14198: GO 14346
// s1 := rand ( 1 , 4 ) ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_INT 4
14210: PPUSH
14211: CALL_OW 12
14215: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14216: LD_ADDR_VAR 0 4
14220: PUSH
14221: LD_VAR 0 6
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PPUSH
14230: LD_VAR 0 2
14234: PPUSH
14235: CALL_OW 259
14239: ST_TO_ADDR
// if s1 = 1 then
14240: LD_VAR 0 2
14244: PUSH
14245: LD_INT 1
14247: EQUAL
14248: IFFALSE 14268
// s2 := rand ( 2 , 4 ) else
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_INT 2
14257: PPUSH
14258: LD_INT 4
14260: PPUSH
14261: CALL_OW 12
14265: ST_TO_ADDR
14266: GO 14276
// s2 := 1 ;
14268: LD_ADDR_VAR 0 3
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14276: LD_ADDR_VAR 0 5
14280: PUSH
14281: LD_VAR 0 6
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: CALL_OW 259
14299: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14300: LD_VAR 0 6
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: LD_VAR 0 2
14313: PPUSH
14314: LD_VAR 0 5
14318: PPUSH
14319: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14323: LD_VAR 0 6
14327: PUSH
14328: LD_INT 1
14330: ARRAY
14331: PPUSH
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_VAR 0 4
14341: PPUSH
14342: CALL_OW 237
// end ;
14346: PPOPN 6
14348: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14349: LD_EXP 23
14353: PUSH
14354: LD_EXP 70
14358: AND
14359: IFFALSE 14438
14361: GO 14363
14363: DISABLE
14364: LD_INT 0
14366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14367: LD_ADDR_VAR 0 1
14371: PUSH
14372: LD_INT 22
14374: PUSH
14375: LD_OWVAR 2
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 30
14386: PUSH
14387: LD_INT 3
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: ST_TO_ADDR
// if not tmp then
14403: LD_VAR 0 1
14407: NOT
14408: IFFALSE 14412
// exit ;
14410: GO 14438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14412: LD_VAR 0 1
14416: PUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 12
14429: ARRAY
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 234
// end ;
14438: PPOPN 1
14440: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14441: LD_EXP 23
14445: PUSH
14446: LD_EXP 71
14450: AND
14451: IFFALSE 14563
14453: GO 14455
14455: DISABLE
14456: LD_INT 0
14458: PPUSH
14459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_OWVAR 2
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 30
14482: PUSH
14483: LD_INT 27
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: LD_INT 30
14492: PUSH
14493: LD_INT 26
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 28
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PPUSH
14520: CALL_OW 69
14524: ST_TO_ADDR
// if not tmp then
14525: LD_VAR 0 2
14529: NOT
14530: IFFALSE 14534
// exit ;
14532: GO 14563
// for i in tmp do
14534: LD_ADDR_VAR 0 1
14538: PUSH
14539: LD_VAR 0 2
14543: PUSH
14544: FOR_IN
14545: IFFALSE 14561
// SetLives ( i , 1 ) ;
14547: LD_VAR 0 1
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 234
14559: GO 14544
14561: POP
14562: POP
// end ;
14563: PPOPN 2
14565: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14566: LD_EXP 23
14570: PUSH
14571: LD_EXP 72
14575: AND
14576: IFFALSE 14850
14578: GO 14580
14580: DISABLE
14581: LD_INT 0
14583: PPUSH
14584: PPUSH
14585: PPUSH
// begin i := rand ( 1 , 7 ) ;
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_INT 1
14593: PPUSH
14594: LD_INT 7
14596: PPUSH
14597: CALL_OW 12
14601: ST_TO_ADDR
// case i of 1 :
14602: LD_VAR 0 1
14606: PUSH
14607: LD_INT 1
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14625
14615: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14616: LD_STRING earthquake(getX(game), 0, 32)
14618: PPUSH
14619: CALL_OW 559
14623: GO 14850
14625: LD_INT 2
14627: DOUBLE
14628: EQUAL
14629: IFTRUE 14633
14631: GO 14647
14633: POP
// begin ToLua ( displayStucuk(); ) ;
14634: LD_STRING displayStucuk();
14636: PPUSH
14637: CALL_OW 559
// ResetFog ;
14641: CALL_OW 335
// end ; 3 :
14645: GO 14850
14647: LD_INT 3
14649: DOUBLE
14650: EQUAL
14651: IFTRUE 14655
14653: GO 14759
14655: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14656: LD_ADDR_VAR 0 2
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_OWVAR 2
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 25
14675: PUSH
14676: LD_INT 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 2
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14850
// un := tmp [ rand ( 1 , tmp ) ] ;
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_VAR 0 2
14710: PUSH
14711: LD_INT 1
14713: PPUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: CALL_OW 12
14723: ARRAY
14724: ST_TO_ADDR
// if Crawls ( un ) then
14725: LD_VAR 0 3
14729: PPUSH
14730: CALL_OW 318
14734: IFFALSE 14745
// ComWalk ( un ) ;
14736: LD_VAR 0 3
14740: PPUSH
14741: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_INT 8
14752: PPUSH
14753: CALL_OW 336
// end ; 4 :
14757: GO 14850
14759: LD_INT 4
14761: DOUBLE
14762: EQUAL
14763: IFTRUE 14767
14765: GO 14828
14767: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_INT 22
14775: PUSH
14776: LD_OWVAR 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 30
14787: PUSH
14788: LD_INT 29
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: ST_TO_ADDR
// if not tmp then
14804: LD_VAR 0 2
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14850
// DestroyUnit ( tmp [ 1 ] ) ;
14813: LD_VAR 0 2
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: CALL_OW 65
// end ; 5 .. 7 :
14826: GO 14850
14828: LD_INT 5
14830: DOUBLE
14831: GREATEREQUAL
14832: IFFALSE 14840
14834: LD_INT 7
14836: DOUBLE
14837: LESSEQUAL
14838: IFTRUE 14842
14840: GO 14849
14842: POP
// StreamSibBomb ; end ;
14843: CALL 11100 0 0
14847: GO 14850
14849: POP
// end ;
14850: PPOPN 3
14852: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14853: LD_EXP 23
14857: PUSH
14858: LD_EXP 73
14862: AND
14863: IFFALSE 15019
14865: GO 14867
14867: DISABLE
14868: LD_INT 0
14870: PPUSH
14871: PPUSH
14872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14873: LD_ADDR_VAR 0 2
14877: PUSH
14878: LD_INT 81
14880: PUSH
14881: LD_OWVAR 2
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 2
14892: PUSH
14893: LD_INT 21
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 21
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 69
14926: ST_TO_ADDR
// if not tmp then
14927: LD_VAR 0 2
14931: NOT
14932: IFFALSE 14936
// exit ;
14934: GO 15019
// p := 0 ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_INT 0
14943: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14944: LD_INT 35
14946: PPUSH
14947: CALL_OW 67
// p := p + 1 ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_VAR 0 3
14960: PUSH
14961: LD_INT 1
14963: PLUS
14964: ST_TO_ADDR
// for i in tmp do
14965: LD_ADDR_VAR 0 1
14969: PUSH
14970: LD_VAR 0 2
14974: PUSH
14975: FOR_IN
14976: IFFALSE 15007
// if GetLives ( i ) < 1000 then
14978: LD_VAR 0 1
14982: PPUSH
14983: CALL_OW 256
14987: PUSH
14988: LD_INT 1000
14990: LESS
14991: IFFALSE 15005
// SetLives ( i , 1000 ) ;
14993: LD_VAR 0 1
14997: PPUSH
14998: LD_INT 1000
15000: PPUSH
15001: CALL_OW 234
15005: GO 14975
15007: POP
15008: POP
// until p > 20 ;
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 20
15016: GREATER
15017: IFFALSE 14944
// end ;
15019: PPOPN 3
15021: END
// every 0 0$1 trigger StreamModeActive and sTime do
15022: LD_EXP 23
15026: PUSH
15027: LD_EXP 74
15031: AND
15032: IFFALSE 15067
15034: GO 15036
15036: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15037: LD_INT 28
15039: PPUSH
15040: LD_OWVAR 2
15044: PPUSH
15045: LD_INT 2
15047: PPUSH
15048: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15052: LD_INT 30
15054: PPUSH
15055: LD_OWVAR 2
15059: PPUSH
15060: LD_INT 2
15062: PPUSH
15063: CALL_OW 322
// end ;
15067: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15068: LD_EXP 23
15072: PUSH
15073: LD_EXP 75
15077: AND
15078: IFFALSE 15199
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_INT 22
15094: PUSH
15095: LD_OWVAR 2
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 3
15116: PUSH
15117: LD_INT 23
15119: PUSH
15120: LD_INT 0
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: PPUSH
15136: CALL_OW 69
15140: ST_TO_ADDR
// if not tmp then
15141: LD_VAR 0 2
15145: NOT
15146: IFFALSE 15150
// exit ;
15148: GO 15199
// for i in tmp do
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 2
15159: PUSH
15160: FOR_IN
15161: IFFALSE 15197
// begin if Crawls ( i ) then
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 318
15172: IFFALSE 15183
// ComWalk ( i ) ;
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 138
// SetClass ( i , 2 ) ;
15183: LD_VAR 0 1
15187: PPUSH
15188: LD_INT 2
15190: PPUSH
15191: CALL_OW 336
// end ;
15195: GO 15160
15197: POP
15198: POP
// end ;
15199: PPOPN 2
15201: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15202: LD_EXP 23
15206: PUSH
15207: LD_EXP 76
15211: AND
15212: IFFALSE 15493
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
15221: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15222: LD_OWVAR 2
15226: PPUSH
15227: LD_INT 9
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15240: LD_INT 9
15242: PPUSH
15243: LD_OWVAR 2
15247: PPUSH
15248: CALL_OW 343
// uc_side := 9 ;
15252: LD_ADDR_OWVAR 20
15256: PUSH
15257: LD_INT 9
15259: ST_TO_ADDR
// uc_nation := 2 ;
15260: LD_ADDR_OWVAR 21
15264: PUSH
15265: LD_INT 2
15267: ST_TO_ADDR
// hc_name := Dark Warrior ;
15268: LD_ADDR_OWVAR 26
15272: PUSH
15273: LD_STRING Dark Warrior
15275: ST_TO_ADDR
// hc_gallery :=  ;
15276: LD_ADDR_OWVAR 33
15280: PUSH
15281: LD_STRING 
15283: ST_TO_ADDR
// hc_noskilllimit := true ;
15284: LD_ADDR_OWVAR 76
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15292: LD_ADDR_OWVAR 31
15296: PUSH
15297: LD_INT 30
15299: PUSH
15300: LD_INT 30
15302: PUSH
15303: LD_INT 30
15305: PUSH
15306: LD_INT 30
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: ST_TO_ADDR
// un := CreateHuman ;
15315: LD_ADDR_VAR 0 3
15319: PUSH
15320: CALL_OW 44
15324: ST_TO_ADDR
// hc_noskilllimit := false ;
15325: LD_ADDR_OWVAR 76
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 51
// p := 0 ;
15345: LD_ADDR_VAR 0 2
15349: PUSH
15350: LD_INT 0
15352: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15353: LD_INT 35
15355: PPUSH
15356: CALL_OW 67
// p := p + 1 ;
15360: LD_ADDR_VAR 0 2
15364: PUSH
15365: LD_VAR 0 2
15369: PUSH
15370: LD_INT 1
15372: PLUS
15373: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15374: LD_VAR 0 3
15378: PPUSH
15379: CALL_OW 256
15383: PUSH
15384: LD_INT 1000
15386: LESS
15387: IFFALSE 15401
// SetLives ( un , 1000 ) ;
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_INT 1000
15396: PPUSH
15397: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 81
15408: PUSH
15409: LD_OWVAR 2
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 91
15420: PUSH
15421: LD_VAR 0 3
15425: PUSH
15426: LD_INT 30
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PPUSH
15438: CALL_OW 69
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: CALL_OW 74
15452: PPUSH
15453: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15457: LD_VAR 0 2
15461: PUSH
15462: LD_INT 60
15464: GREATER
15465: PUSH
15466: LD_VAR 0 3
15470: PPUSH
15471: CALL_OW 301
15475: OR
15476: IFFALSE 15353
// if un then
15478: LD_VAR 0 3
15482: IFFALSE 15493
// RemoveUnit ( un ) ;
15484: LD_VAR 0 3
15488: PPUSH
15489: CALL_OW 64
// end ;
15493: PPOPN 3
15495: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15496: LD_INT 0
15498: PPUSH
// case cmd of 301 :
15499: LD_VAR 0 1
15503: PUSH
15504: LD_INT 301
15506: DOUBLE
15507: EQUAL
15508: IFTRUE 15512
15510: GO 15544
15512: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15513: LD_VAR 0 6
15517: PPUSH
15518: LD_VAR 0 7
15522: PPUSH
15523: LD_VAR 0 8
15527: PPUSH
15528: LD_VAR 0 4
15532: PPUSH
15533: LD_VAR 0 5
15537: PPUSH
15538: CALL 16745 0 5
15542: GO 15665
15544: LD_INT 302
15546: DOUBLE
15547: EQUAL
15548: IFTRUE 15552
15550: GO 15589
15552: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15553: LD_VAR 0 6
15557: PPUSH
15558: LD_VAR 0 7
15562: PPUSH
15563: LD_VAR 0 8
15567: PPUSH
15568: LD_VAR 0 9
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: LD_VAR 0 5
15582: PPUSH
15583: CALL 16836 0 6
15587: GO 15665
15589: LD_INT 303
15591: DOUBLE
15592: EQUAL
15593: IFTRUE 15597
15595: GO 15634
15597: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15598: LD_VAR 0 6
15602: PPUSH
15603: LD_VAR 0 7
15607: PPUSH
15608: LD_VAR 0 8
15612: PPUSH
15613: LD_VAR 0 9
15617: PPUSH
15618: LD_VAR 0 4
15622: PPUSH
15623: LD_VAR 0 5
15627: PPUSH
15628: CALL 15670 0 6
15632: GO 15665
15634: LD_INT 304
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15664
15642: POP
// hHackTeleport ( unit , x , y ) ; end ;
15643: LD_VAR 0 2
15647: PPUSH
15648: LD_VAR 0 4
15652: PPUSH
15653: LD_VAR 0 5
15657: PPUSH
15658: CALL 17429 0 3
15662: GO 15665
15664: POP
// end ;
15665: LD_VAR 0 12
15669: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15674: LD_VAR 0 1
15678: PUSH
15679: LD_INT 1
15681: LESS
15682: PUSH
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 3
15690: GREATER
15691: OR
15692: PUSH
15693: LD_VAR 0 5
15697: PPUSH
15698: LD_VAR 0 6
15702: PPUSH
15703: CALL_OW 428
15707: OR
15708: IFFALSE 15712
// exit ;
15710: GO 16432
// uc_side := your_side ;
15712: LD_ADDR_OWVAR 20
15716: PUSH
15717: LD_OWVAR 2
15721: ST_TO_ADDR
// uc_nation := nation ;
15722: LD_ADDR_OWVAR 21
15726: PUSH
15727: LD_VAR 0 1
15731: ST_TO_ADDR
// bc_level = 1 ;
15732: LD_ADDR_OWVAR 43
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// case btype of 1 :
15740: LD_VAR 0 2
15744: PUSH
15745: LD_INT 1
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15764
15753: POP
// bc_type := b_depot ; 2 :
15754: LD_ADDR_OWVAR 42
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
15762: GO 16376
15764: LD_INT 2
15766: DOUBLE
15767: EQUAL
15768: IFTRUE 15772
15770: GO 15783
15772: POP
// bc_type := b_warehouse ; 3 :
15773: LD_ADDR_OWVAR 42
15777: PUSH
15778: LD_INT 1
15780: ST_TO_ADDR
15781: GO 16376
15783: LD_INT 3
15785: DOUBLE
15786: EQUAL
15787: IFTRUE 15791
15789: GO 15802
15791: POP
// bc_type := b_lab ; 4 .. 9 :
15792: LD_ADDR_OWVAR 42
15796: PUSH
15797: LD_INT 6
15799: ST_TO_ADDR
15800: GO 16376
15802: LD_INT 4
15804: DOUBLE
15805: GREATEREQUAL
15806: IFFALSE 15814
15808: LD_INT 9
15810: DOUBLE
15811: LESSEQUAL
15812: IFTRUE 15816
15814: GO 15868
15816: POP
// begin bc_type := b_lab_half ;
15817: LD_ADDR_OWVAR 42
15821: PUSH
15822: LD_INT 7
15824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15825: LD_ADDR_OWVAR 44
15829: PUSH
15830: LD_INT 10
15832: PUSH
15833: LD_INT 11
15835: PUSH
15836: LD_INT 12
15838: PUSH
15839: LD_INT 15
15841: PUSH
15842: LD_INT 14
15844: PUSH
15845: LD_INT 13
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: PUSH
15856: LD_VAR 0 2
15860: PUSH
15861: LD_INT 3
15863: MINUS
15864: ARRAY
15865: ST_TO_ADDR
// end ; 10 .. 13 :
15866: GO 16376
15868: LD_INT 10
15870: DOUBLE
15871: GREATEREQUAL
15872: IFFALSE 15880
15874: LD_INT 13
15876: DOUBLE
15877: LESSEQUAL
15878: IFTRUE 15882
15880: GO 15959
15882: POP
// begin bc_type := b_lab_full ;
15883: LD_ADDR_OWVAR 42
15887: PUSH
15888: LD_INT 8
15890: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15891: LD_ADDR_OWVAR 44
15895: PUSH
15896: LD_INT 10
15898: PUSH
15899: LD_INT 12
15901: PUSH
15902: LD_INT 14
15904: PUSH
15905: LD_INT 13
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: LD_VAR 0 2
15918: PUSH
15919: LD_INT 9
15921: MINUS
15922: ARRAY
15923: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15924: LD_ADDR_OWVAR 45
15928: PUSH
15929: LD_INT 11
15931: PUSH
15932: LD_INT 15
15934: PUSH
15935: LD_INT 12
15937: PUSH
15938: LD_INT 15
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: PUSH
15947: LD_VAR 0 2
15951: PUSH
15952: LD_INT 9
15954: MINUS
15955: ARRAY
15956: ST_TO_ADDR
// end ; 14 :
15957: GO 16376
15959: LD_INT 14
15961: DOUBLE
15962: EQUAL
15963: IFTRUE 15967
15965: GO 15978
15967: POP
// bc_type := b_workshop ; 15 :
15968: LD_ADDR_OWVAR 42
15972: PUSH
15973: LD_INT 2
15975: ST_TO_ADDR
15976: GO 16376
15978: LD_INT 15
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15997
15986: POP
// bc_type := b_factory ; 16 :
15987: LD_ADDR_OWVAR 42
15991: PUSH
15992: LD_INT 3
15994: ST_TO_ADDR
15995: GO 16376
15997: LD_INT 16
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16016
16005: POP
// bc_type := b_ext_gun ; 17 :
16006: LD_ADDR_OWVAR 42
16010: PUSH
16011: LD_INT 17
16013: ST_TO_ADDR
16014: GO 16376
16016: LD_INT 17
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16052
16024: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16025: LD_ADDR_OWVAR 42
16029: PUSH
16030: LD_INT 19
16032: PUSH
16033: LD_INT 23
16035: PUSH
16036: LD_INT 19
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: PUSH
16044: LD_VAR 0 1
16048: ARRAY
16049: ST_TO_ADDR
16050: GO 16376
16052: LD_INT 18
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16071
16060: POP
// bc_type := b_ext_radar ; 19 :
16061: LD_ADDR_OWVAR 42
16065: PUSH
16066: LD_INT 20
16068: ST_TO_ADDR
16069: GO 16376
16071: LD_INT 19
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16090
16079: POP
// bc_type := b_ext_radio ; 20 :
16080: LD_ADDR_OWVAR 42
16084: PUSH
16085: LD_INT 22
16087: ST_TO_ADDR
16088: GO 16376
16090: LD_INT 20
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16109
16098: POP
// bc_type := b_ext_siberium ; 21 :
16099: LD_ADDR_OWVAR 42
16103: PUSH
16104: LD_INT 21
16106: ST_TO_ADDR
16107: GO 16376
16109: LD_INT 21
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16128
16117: POP
// bc_type := b_ext_computer ; 22 :
16118: LD_ADDR_OWVAR 42
16122: PUSH
16123: LD_INT 24
16125: ST_TO_ADDR
16126: GO 16376
16128: LD_INT 22
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16147
16136: POP
// bc_type := b_ext_track ; 23 :
16137: LD_ADDR_OWVAR 42
16141: PUSH
16142: LD_INT 16
16144: ST_TO_ADDR
16145: GO 16376
16147: LD_INT 23
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16166
16155: POP
// bc_type := b_ext_laser ; 24 :
16156: LD_ADDR_OWVAR 42
16160: PUSH
16161: LD_INT 25
16163: ST_TO_ADDR
16164: GO 16376
16166: LD_INT 24
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16185
16174: POP
// bc_type := b_control_tower ; 25 :
16175: LD_ADDR_OWVAR 42
16179: PUSH
16180: LD_INT 36
16182: ST_TO_ADDR
16183: GO 16376
16185: LD_INT 25
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16204
16193: POP
// bc_type := b_breastwork ; 26 :
16194: LD_ADDR_OWVAR 42
16198: PUSH
16199: LD_INT 31
16201: ST_TO_ADDR
16202: GO 16376
16204: LD_INT 26
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16223
16212: POP
// bc_type := b_bunker ; 27 :
16213: LD_ADDR_OWVAR 42
16217: PUSH
16218: LD_INT 32
16220: ST_TO_ADDR
16221: GO 16376
16223: LD_INT 27
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16242
16231: POP
// bc_type := b_turret ; 28 :
16232: LD_ADDR_OWVAR 42
16236: PUSH
16237: LD_INT 33
16239: ST_TO_ADDR
16240: GO 16376
16242: LD_INT 28
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16261
16250: POP
// bc_type := b_armoury ; 29 :
16251: LD_ADDR_OWVAR 42
16255: PUSH
16256: LD_INT 4
16258: ST_TO_ADDR
16259: GO 16376
16261: LD_INT 29
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16280
16269: POP
// bc_type := b_barracks ; 30 :
16270: LD_ADDR_OWVAR 42
16274: PUSH
16275: LD_INT 5
16277: ST_TO_ADDR
16278: GO 16376
16280: LD_INT 30
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16299
16288: POP
// bc_type := b_solar_power ; 31 :
16289: LD_ADDR_OWVAR 42
16293: PUSH
16294: LD_INT 27
16296: ST_TO_ADDR
16297: GO 16376
16299: LD_INT 31
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16318
16307: POP
// bc_type := b_oil_power ; 32 :
16308: LD_ADDR_OWVAR 42
16312: PUSH
16313: LD_INT 26
16315: ST_TO_ADDR
16316: GO 16376
16318: LD_INT 32
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16337
16326: POP
// bc_type := b_siberite_power ; 33 :
16327: LD_ADDR_OWVAR 42
16331: PUSH
16332: LD_INT 28
16334: ST_TO_ADDR
16335: GO 16376
16337: LD_INT 33
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16356
16345: POP
// bc_type := b_oil_mine ; 34 :
16346: LD_ADDR_OWVAR 42
16350: PUSH
16351: LD_INT 29
16353: ST_TO_ADDR
16354: GO 16376
16356: LD_INT 34
16358: DOUBLE
16359: EQUAL
16360: IFTRUE 16364
16362: GO 16375
16364: POP
// bc_type := b_siberite_mine ; end ;
16365: LD_ADDR_OWVAR 42
16369: PUSH
16370: LD_INT 30
16372: ST_TO_ADDR
16373: GO 16376
16375: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16376: LD_ADDR_VAR 0 8
16380: PUSH
16381: LD_VAR 0 5
16385: PPUSH
16386: LD_VAR 0 6
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL_OW 47
16400: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16401: LD_OWVAR 42
16405: PUSH
16406: LD_INT 32
16408: PUSH
16409: LD_INT 33
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: IN
16416: IFFALSE 16432
// PlaceWeaponTurret ( b , weapon ) ;
16418: LD_VAR 0 8
16422: PPUSH
16423: LD_VAR 0 4
16427: PPUSH
16428: CALL_OW 431
// end ;
16432: LD_VAR 0 7
16436: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16437: LD_INT 0
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16443: LD_ADDR_VAR 0 4
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_OWVAR 2
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 2
16462: PUSH
16463: LD_INT 30
16465: PUSH
16466: LD_INT 0
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 30
16475: PUSH
16476: LD_INT 1
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: ST_TO_ADDR
// if not tmp then
16497: LD_VAR 0 4
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 16565
// for i in tmp do
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_VAR 0 4
16515: PUSH
16516: FOR_IN
16517: IFFALSE 16563
// for j = 1 to 3 do
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: DOUBLE
16525: LD_INT 1
16527: DEC
16528: ST_TO_ADDR
16529: LD_INT 3
16531: PUSH
16532: FOR_TO
16533: IFFALSE 16559
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16535: LD_VAR 0 2
16539: PPUSH
16540: CALL_OW 274
16544: PPUSH
16545: LD_VAR 0 3
16549: PPUSH
16550: LD_INT 99999
16552: PPUSH
16553: CALL_OW 277
16557: GO 16532
16559: POP
16560: POP
16561: GO 16516
16563: POP
16564: POP
// end ;
16565: LD_VAR 0 1
16569: RET
// export function hHackSetLevel10 ; var i , j ; begin
16570: LD_INT 0
16572: PPUSH
16573: PPUSH
16574: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: PUSH
16595: FOR_IN
16596: IFFALSE 16648
// if IsSelected ( i ) then
16598: LD_VAR 0 2
16602: PPUSH
16603: CALL_OW 306
16607: IFFALSE 16646
// begin for j := 1 to 4 do
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: DOUBLE
16615: LD_INT 1
16617: DEC
16618: ST_TO_ADDR
16619: LD_INT 4
16621: PUSH
16622: FOR_TO
16623: IFFALSE 16644
// SetSkill ( i , j , 10 ) ;
16625: LD_VAR 0 2
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 10
16637: PPUSH
16638: CALL_OW 237
16642: GO 16622
16644: POP
16645: POP
// end ;
16646: GO 16595
16648: POP
16649: POP
// end ;
16650: LD_VAR 0 1
16654: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16655: LD_INT 0
16657: PPUSH
16658: PPUSH
16659: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16660: LD_ADDR_VAR 0 2
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_OWVAR 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16738
// begin for j := 1 to 4 do
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: DOUBLE
16705: LD_INT 1
16707: DEC
16708: ST_TO_ADDR
16709: LD_INT 4
16711: PUSH
16712: FOR_TO
16713: IFFALSE 16734
// SetSkill ( i , j , 10 ) ;
16715: LD_VAR 0 2
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 10
16727: PPUSH
16728: CALL_OW 237
16732: GO 16712
16734: POP
16735: POP
// end ;
16736: GO 16696
16738: POP
16739: POP
// end ;
16740: LD_VAR 0 1
16744: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16745: LD_INT 0
16747: PPUSH
// uc_side := your_side ;
16748: LD_ADDR_OWVAR 20
16752: PUSH
16753: LD_OWVAR 2
16757: ST_TO_ADDR
// uc_nation := nation ;
16758: LD_ADDR_OWVAR 21
16762: PUSH
16763: LD_VAR 0 1
16767: ST_TO_ADDR
// InitHc ;
16768: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16772: LD_INT 0
16774: PPUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16789: LD_VAR 0 4
16793: PPUSH
16794: LD_VAR 0 5
16798: PPUSH
16799: CALL_OW 428
16803: PUSH
16804: LD_INT 0
16806: EQUAL
16807: IFFALSE 16831
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16809: CALL_OW 44
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 5
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 48
// end ;
16831: LD_VAR 0 6
16835: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
// uc_side := your_side ;
16840: LD_ADDR_OWVAR 20
16844: PUSH
16845: LD_OWVAR 2
16849: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16850: LD_VAR 0 1
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: LD_INT 2
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: IN
16877: IFFALSE 16889
// uc_nation := nation_american else
16879: LD_ADDR_OWVAR 21
16883: PUSH
16884: LD_INT 1
16886: ST_TO_ADDR
16887: GO 16932
// if chassis in [ 11 , 12 , 13 , 14 ] then
16889: LD_VAR 0 1
16893: PUSH
16894: LD_INT 11
16896: PUSH
16897: LD_INT 12
16899: PUSH
16900: LD_INT 13
16902: PUSH
16903: LD_INT 14
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: IN
16912: IFFALSE 16924
// uc_nation := nation_arabian else
16914: LD_ADDR_OWVAR 21
16918: PUSH
16919: LD_INT 2
16921: ST_TO_ADDR
16922: GO 16932
// uc_nation := nation_russian ;
16924: LD_ADDR_OWVAR 21
16928: PUSH
16929: LD_INT 3
16931: ST_TO_ADDR
// vc_chassis := chassis ;
16932: LD_ADDR_OWVAR 37
16936: PUSH
16937: LD_VAR 0 1
16941: ST_TO_ADDR
// vc_engine := engine ;
16942: LD_ADDR_OWVAR 39
16946: PUSH
16947: LD_VAR 0 2
16951: ST_TO_ADDR
// vc_control := control ;
16952: LD_ADDR_OWVAR 38
16956: PUSH
16957: LD_VAR 0 3
16961: ST_TO_ADDR
// vc_weapon := weapon ;
16962: LD_ADDR_OWVAR 40
16966: PUSH
16967: LD_VAR 0 4
16971: ST_TO_ADDR
// un := CreateVehicle ;
16972: LD_ADDR_VAR 0 8
16976: PUSH
16977: CALL_OW 45
16981: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16982: LD_VAR 0 8
16986: PPUSH
16987: LD_INT 0
16989: PPUSH
16990: LD_INT 5
16992: PPUSH
16993: CALL_OW 12
16997: PPUSH
16998: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17002: LD_VAR 0 8
17006: PPUSH
17007: LD_VAR 0 5
17011: PPUSH
17012: LD_VAR 0 6
17016: PPUSH
17017: LD_INT 1
17019: PPUSH
17020: CALL_OW 48
// end ;
17024: LD_VAR 0 7
17028: RET
// export hInvincible ; every 1 do
17029: GO 17031
17031: DISABLE
// hInvincible := [ ] ;
17032: LD_ADDR_EXP 77
17036: PUSH
17037: EMPTY
17038: ST_TO_ADDR
17039: END
// every 10 do var i ;
17040: GO 17042
17042: DISABLE
17043: LD_INT 0
17045: PPUSH
// begin enable ;
17046: ENABLE
// if not hInvincible then
17047: LD_EXP 77
17051: NOT
17052: IFFALSE 17056
// exit ;
17054: GO 17100
// for i in hInvincible do
17056: LD_ADDR_VAR 0 1
17060: PUSH
17061: LD_EXP 77
17065: PUSH
17066: FOR_IN
17067: IFFALSE 17098
// if GetLives ( i ) < 1000 then
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 256
17078: PUSH
17079: LD_INT 1000
17081: LESS
17082: IFFALSE 17096
// SetLives ( i , 1000 ) ;
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 1000
17091: PPUSH
17092: CALL_OW 234
17096: GO 17066
17098: POP
17099: POP
// end ;
17100: PPOPN 1
17102: END
// export function hHackInvincible ; var i ; begin
17103: LD_INT 0
17105: PPUSH
17106: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17107: LD_ADDR_VAR 0 2
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 2
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: FOR_IN
17146: IFFALSE 17207
// if IsSelected ( i ) then
17148: LD_VAR 0 2
17152: PPUSH
17153: CALL_OW 306
17157: IFFALSE 17205
// begin if i in hInvincible then
17159: LD_VAR 0 2
17163: PUSH
17164: LD_EXP 77
17168: IN
17169: IFFALSE 17189
// hInvincible := hInvincible diff i else
17171: LD_ADDR_EXP 77
17175: PUSH
17176: LD_EXP 77
17180: PUSH
17181: LD_VAR 0 2
17185: DIFF
17186: ST_TO_ADDR
17187: GO 17205
// hInvincible := hInvincible union i ;
17189: LD_ADDR_EXP 77
17193: PUSH
17194: LD_EXP 77
17198: PUSH
17199: LD_VAR 0 2
17203: UNION
17204: ST_TO_ADDR
// end ;
17205: GO 17145
17207: POP
17208: POP
// end ;
17209: LD_VAR 0 1
17213: RET
// export function hHackInvisible ; var i , j ; begin
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_INT 21
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PPUSH
17234: CALL_OW 69
17238: PUSH
17239: FOR_IN
17240: IFFALSE 17264
// if IsSelected ( i ) then
17242: LD_VAR 0 2
17246: PPUSH
17247: CALL_OW 306
17251: IFFALSE 17262
// ComForceInvisible ( i ) ;
17253: LD_VAR 0 2
17257: PPUSH
17258: CALL_OW 496
17262: GO 17239
17264: POP
17265: POP
// end ;
17266: LD_VAR 0 1
17270: RET
// export function hHackChangeYourSide ; begin
17271: LD_INT 0
17273: PPUSH
// if your_side = 8 then
17274: LD_OWVAR 2
17278: PUSH
17279: LD_INT 8
17281: EQUAL
17282: IFFALSE 17294
// your_side := 0 else
17284: LD_ADDR_OWVAR 2
17288: PUSH
17289: LD_INT 0
17291: ST_TO_ADDR
17292: GO 17308
// your_side := your_side + 1 ;
17294: LD_ADDR_OWVAR 2
17298: PUSH
17299: LD_OWVAR 2
17303: PUSH
17304: LD_INT 1
17306: PLUS
17307: ST_TO_ADDR
// end ;
17308: LD_VAR 0 1
17312: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17313: LD_INT 0
17315: PPUSH
17316: PPUSH
17317: PPUSH
// for i in all_units do
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_OWVAR 3
17327: PUSH
17328: FOR_IN
17329: IFFALSE 17407
// if IsSelected ( i ) then
17331: LD_VAR 0 2
17335: PPUSH
17336: CALL_OW 306
17340: IFFALSE 17405
// begin j := GetSide ( i ) ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_VAR 0 2
17351: PPUSH
17352: CALL_OW 255
17356: ST_TO_ADDR
// if j = 8 then
17357: LD_VAR 0 3
17361: PUSH
17362: LD_INT 8
17364: EQUAL
17365: IFFALSE 17377
// j := 0 else
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
17375: GO 17391
// j := j + 1 ;
17377: LD_ADDR_VAR 0 3
17381: PUSH
17382: LD_VAR 0 3
17386: PUSH
17387: LD_INT 1
17389: PLUS
17390: ST_TO_ADDR
// SetSide ( i , j ) ;
17391: LD_VAR 0 2
17395: PPUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: CALL_OW 235
// end ;
17405: GO 17328
17407: POP
17408: POP
// end ;
17409: LD_VAR 0 1
17413: RET
// export function hHackFog ; begin
17414: LD_INT 0
17416: PPUSH
// FogOff ( true ) ;
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 344
// end ;
17424: LD_VAR 0 1
17428: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17429: LD_INT 0
17431: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 483
// CenterOnXY ( x , y ) ;
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_VAR 0 3
17466: PPUSH
17467: CALL_OW 84
// end ; end_of_file
17471: LD_VAR 0 4
17475: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17476: LD_VAR 0 1
17480: PUSH
17481: LD_INT 200
17483: DOUBLE
17484: GREATEREQUAL
17485: IFFALSE 17493
17487: LD_INT 299
17489: DOUBLE
17490: LESSEQUAL
17491: IFTRUE 17495
17493: GO 17527
17495: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17496: LD_VAR 0 1
17500: PPUSH
17501: LD_VAR 0 2
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_VAR 0 4
17515: PPUSH
17516: LD_VAR 0 5
17520: PPUSH
17521: CALL 17771 0 5
17525: GO 17604
17527: LD_INT 300
17529: DOUBLE
17530: GREATEREQUAL
17531: IFFALSE 17539
17533: LD_INT 399
17535: DOUBLE
17536: LESSEQUAL
17537: IFTRUE 17541
17539: GO 17603
17541: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17542: LD_VAR 0 1
17546: PPUSH
17547: LD_VAR 0 2
17551: PPUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_VAR 0 5
17566: PPUSH
17567: LD_VAR 0 6
17571: PPUSH
17572: LD_VAR 0 7
17576: PPUSH
17577: LD_VAR 0 8
17581: PPUSH
17582: LD_VAR 0 9
17586: PPUSH
17587: LD_VAR 0 10
17591: PPUSH
17592: LD_VAR 0 11
17596: PPUSH
17597: CALL 15496 0 11
17601: GO 17604
17603: POP
// end ;
17604: PPOPN 11
17606: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17607: LD_VAR 0 1
17611: PPUSH
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: LD_VAR 0 4
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: CALL 17753 0 5
// end ; end_of_file
17636: PPOPN 5
17638: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17639: LD_INT 0
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 264
17654: PUSH
17655: LD_EXP 94
17659: EQUAL
17660: IFFALSE 17732
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17662: LD_INT 68
17664: PPUSH
17665: LD_VAR 0 1
17669: PPUSH
17670: CALL_OW 255
17674: PPUSH
17675: CALL_OW 321
17679: PUSH
17680: LD_INT 2
17682: EQUAL
17683: IFFALSE 17695
// eff := 70 else
17685: LD_ADDR_VAR 0 4
17689: PUSH
17690: LD_INT 70
17692: ST_TO_ADDR
17693: GO 17703
// eff := 30 ;
17695: LD_ADDR_VAR 0 4
17699: PUSH
17700: LD_INT 30
17702: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 250
17712: PPUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: CALL_OW 251
17722: PPUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: CALL_OW 495
// end ; end ;
17732: LD_VAR 0 2
17736: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17737: LD_INT 0
17739: PPUSH
// end ;
17740: LD_VAR 0 4
17744: RET
// export function SOS_Command ( cmd ) ; begin
17745: LD_INT 0
17747: PPUSH
// end ;
17748: LD_VAR 0 2
17752: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17753: LD_INT 0
17755: PPUSH
// if cmd = 121 then
17756: LD_VAR 0 1
17760: PUSH
17761: LD_INT 121
17763: EQUAL
17764: IFFALSE 17766
// end ;
17766: LD_VAR 0 6
17770: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17771: LD_INT 0
17773: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17774: LD_VAR 0 1
17778: PUSH
17779: LD_INT 250
17781: EQUAL
17782: PUSH
17783: LD_VAR 0 2
17787: PPUSH
17788: CALL_OW 264
17792: PUSH
17793: LD_EXP 97
17797: EQUAL
17798: AND
17799: IFFALSE 17820
// MinerPlaceMine ( unit , x , y ) ;
17801: LD_VAR 0 2
17805: PPUSH
17806: LD_VAR 0 4
17810: PPUSH
17811: LD_VAR 0 5
17815: PPUSH
17816: CALL 20169 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17820: LD_VAR 0 1
17824: PUSH
17825: LD_INT 251
17827: EQUAL
17828: PUSH
17829: LD_VAR 0 2
17833: PPUSH
17834: CALL_OW 264
17838: PUSH
17839: LD_EXP 97
17843: EQUAL
17844: AND
17845: IFFALSE 17866
// MinerDetonateMine ( unit , x , y ) ;
17847: LD_VAR 0 2
17851: PPUSH
17852: LD_VAR 0 4
17856: PPUSH
17857: LD_VAR 0 5
17861: PPUSH
17862: CALL 20446 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17866: LD_VAR 0 1
17870: PUSH
17871: LD_INT 252
17873: EQUAL
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: CALL_OW 264
17884: PUSH
17885: LD_EXP 97
17889: EQUAL
17890: AND
17891: IFFALSE 17912
// MinerCreateMinefield ( unit , x , y ) ;
17893: LD_VAR 0 2
17897: PPUSH
17898: LD_VAR 0 4
17902: PPUSH
17903: LD_VAR 0 5
17907: PPUSH
17908: CALL 20863 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17912: LD_VAR 0 1
17916: PUSH
17917: LD_INT 253
17919: EQUAL
17920: PUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: CALL_OW 257
17930: PUSH
17931: LD_INT 5
17933: EQUAL
17934: AND
17935: IFFALSE 17956
// ComBinocular ( unit , x , y ) ;
17937: LD_VAR 0 2
17941: PPUSH
17942: LD_VAR 0 4
17946: PPUSH
17947: LD_VAR 0 5
17951: PPUSH
17952: CALL 21234 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17956: LD_VAR 0 1
17960: PUSH
17961: LD_INT 254
17963: EQUAL
17964: PUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: CALL_OW 264
17974: PUSH
17975: LD_EXP 92
17979: EQUAL
17980: AND
17981: PUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: CALL_OW 263
17991: PUSH
17992: LD_INT 3
17994: EQUAL
17995: AND
17996: IFFALSE 18012
// HackDestroyVehicle ( unit , selectedUnit ) ;
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL 19529 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 255
18019: EQUAL
18020: PUSH
18021: LD_VAR 0 2
18025: PPUSH
18026: CALL_OW 264
18030: PUSH
18031: LD_INT 14
18033: PUSH
18034: LD_INT 53
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: IN
18041: AND
18042: PUSH
18043: LD_VAR 0 4
18047: PPUSH
18048: LD_VAR 0 5
18052: PPUSH
18053: CALL_OW 488
18057: AND
18058: IFFALSE 18082
// CutTreeXYR ( unit , x , y , 12 ) ;
18060: LD_VAR 0 2
18064: PPUSH
18065: LD_VAR 0 4
18069: PPUSH
18070: LD_VAR 0 5
18074: PPUSH
18075: LD_INT 12
18077: PPUSH
18078: CALL 18095 0 4
// end ;
18082: LD_VAR 0 6
18086: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18087: LD_INT 0
18089: PPUSH
// end ;
18090: LD_VAR 0 4
18094: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
18099: PPUSH
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18106: LD_VAR 0 1
18110: NOT
18111: PUSH
18112: LD_VAR 0 2
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: CALL_OW 488
18126: NOT
18127: OR
18128: PUSH
18129: LD_VAR 0 4
18133: NOT
18134: OR
18135: IFFALSE 18139
// exit ;
18137: GO 18479
// list := [ ] ;
18139: LD_ADDR_VAR 0 13
18143: PUSH
18144: EMPTY
18145: ST_TO_ADDR
// if x - r < 0 then
18146: LD_VAR 0 2
18150: PUSH
18151: LD_VAR 0 4
18155: MINUS
18156: PUSH
18157: LD_INT 0
18159: LESS
18160: IFFALSE 18172
// min_x := 0 else
18162: LD_ADDR_VAR 0 7
18166: PUSH
18167: LD_INT 0
18169: ST_TO_ADDR
18170: GO 18188
// min_x := x - r ;
18172: LD_ADDR_VAR 0 7
18176: PUSH
18177: LD_VAR 0 2
18181: PUSH
18182: LD_VAR 0 4
18186: MINUS
18187: ST_TO_ADDR
// if y - r < 0 then
18188: LD_VAR 0 3
18192: PUSH
18193: LD_VAR 0 4
18197: MINUS
18198: PUSH
18199: LD_INT 0
18201: LESS
18202: IFFALSE 18214
// min_y := 0 else
18204: LD_ADDR_VAR 0 8
18208: PUSH
18209: LD_INT 0
18211: ST_TO_ADDR
18212: GO 18230
// min_y := y - r ;
18214: LD_ADDR_VAR 0 8
18218: PUSH
18219: LD_VAR 0 3
18223: PUSH
18224: LD_VAR 0 4
18228: MINUS
18229: ST_TO_ADDR
// max_x := x + r ;
18230: LD_ADDR_VAR 0 9
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: LD_VAR 0 4
18244: PLUS
18245: ST_TO_ADDR
// max_y := y + r ;
18246: LD_ADDR_VAR 0 10
18250: PUSH
18251: LD_VAR 0 3
18255: PUSH
18256: LD_VAR 0 4
18260: PLUS
18261: ST_TO_ADDR
// for _x = min_x to max_x do
18262: LD_ADDR_VAR 0 11
18266: PUSH
18267: DOUBLE
18268: LD_VAR 0 7
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 9
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18397
// for _y = min_y to max_y do
18282: LD_ADDR_VAR 0 12
18286: PUSH
18287: DOUBLE
18288: LD_VAR 0 8
18292: DEC
18293: ST_TO_ADDR
18294: LD_VAR 0 10
18298: PUSH
18299: FOR_TO
18300: IFFALSE 18393
// begin if not ValidHex ( _x , _y ) then
18302: LD_VAR 0 11
18306: PPUSH
18307: LD_VAR 0 12
18311: PPUSH
18312: CALL_OW 488
18316: NOT
18317: IFFALSE 18321
// continue ;
18319: GO 18299
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18321: LD_VAR 0 11
18325: PPUSH
18326: LD_VAR 0 12
18330: PPUSH
18331: CALL_OW 351
18335: PUSH
18336: LD_VAR 0 11
18340: PPUSH
18341: LD_VAR 0 12
18345: PPUSH
18346: CALL_OW 554
18350: AND
18351: IFFALSE 18391
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18353: LD_ADDR_VAR 0 13
18357: PUSH
18358: LD_VAR 0 13
18362: PPUSH
18363: LD_VAR 0 13
18367: PUSH
18368: LD_INT 1
18370: PLUS
18371: PPUSH
18372: LD_VAR 0 11
18376: PUSH
18377: LD_VAR 0 12
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 2
18390: ST_TO_ADDR
// end ;
18391: GO 18299
18393: POP
18394: POP
18395: GO 18279
18397: POP
18398: POP
// if not list then
18399: LD_VAR 0 13
18403: NOT
18404: IFFALSE 18408
// exit ;
18406: GO 18479
// for i in list do
18408: LD_ADDR_VAR 0 6
18412: PUSH
18413: LD_VAR 0 13
18417: PUSH
18418: FOR_IN
18419: IFFALSE 18477
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18421: LD_VAR 0 1
18425: PPUSH
18426: LD_STRING M
18428: PUSH
18429: LD_VAR 0 6
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PUSH
18438: LD_VAR 0 6
18442: PUSH
18443: LD_INT 2
18445: ARRAY
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: PPUSH
18471: CALL_OW 447
18475: GO 18418
18477: POP
18478: POP
// end ;
18479: LD_VAR 0 5
18483: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18484: LD_EXP 80
18488: NOT
18489: IFFALSE 18539
18491: GO 18493
18493: DISABLE
// begin initHack := true ;
18494: LD_ADDR_EXP 80
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// hackTanks := [ ] ;
18502: LD_ADDR_EXP 81
18506: PUSH
18507: EMPTY
18508: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18509: LD_ADDR_EXP 82
18513: PUSH
18514: EMPTY
18515: ST_TO_ADDR
// hackLimit := 3 ;
18516: LD_ADDR_EXP 83
18520: PUSH
18521: LD_INT 3
18523: ST_TO_ADDR
// hackDist := 12 ;
18524: LD_ADDR_EXP 84
18528: PUSH
18529: LD_INT 12
18531: ST_TO_ADDR
// hackCounter := [ ] ;
18532: LD_ADDR_EXP 85
18536: PUSH
18537: EMPTY
18538: ST_TO_ADDR
// end ;
18539: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18540: LD_EXP 80
18544: PUSH
18545: LD_INT 34
18547: PUSH
18548: LD_EXP 92
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: AND
18562: IFFALSE 18817
18564: GO 18566
18566: DISABLE
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
// begin enable ;
18571: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18572: LD_ADDR_VAR 0 1
18576: PUSH
18577: LD_INT 34
18579: PUSH
18580: LD_EXP 92
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PPUSH
18589: CALL_OW 69
18593: PUSH
18594: FOR_IN
18595: IFFALSE 18815
// begin if not i in hackTanks then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_EXP 81
18606: IN
18607: NOT
18608: IFFALSE 18691
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18610: LD_ADDR_EXP 81
18614: PUSH
18615: LD_EXP 81
18619: PPUSH
18620: LD_EXP 81
18624: PUSH
18625: LD_INT 1
18627: PLUS
18628: PPUSH
18629: LD_VAR 0 1
18633: PPUSH
18634: CALL_OW 1
18638: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18639: LD_ADDR_EXP 82
18643: PUSH
18644: LD_EXP 82
18648: PPUSH
18649: LD_EXP 82
18653: PUSH
18654: LD_INT 1
18656: PLUS
18657: PPUSH
18658: EMPTY
18659: PPUSH
18660: CALL_OW 1
18664: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18665: LD_ADDR_EXP 85
18669: PUSH
18670: LD_EXP 85
18674: PPUSH
18675: LD_EXP 85
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: PPUSH
18684: EMPTY
18685: PPUSH
18686: CALL_OW 1
18690: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18691: LD_VAR 0 1
18695: PPUSH
18696: CALL_OW 302
18700: NOT
18701: IFFALSE 18714
// begin HackUnlinkAll ( i ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL 18820 0 1
// continue ;
18712: GO 18594
// end ; HackCheckCapturedStatus ( i ) ;
18714: LD_VAR 0 1
18718: PPUSH
18719: CALL 19263 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 81
18730: PUSH
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL_OW 255
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 33
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 91
18757: PUSH
18758: LD_VAR 0 1
18762: PUSH
18763: LD_EXP 84
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 50
18775: PUSH
18776: EMPTY
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
// if not tmp then
18790: LD_VAR 0 2
18794: NOT
18795: IFFALSE 18799
// continue ;
18797: GO 18594
// HackLink ( i , tmp ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_VAR 0 2
18808: PPUSH
18809: CALL 18956 0 2
// end ;
18813: GO 18594
18815: POP
18816: POP
// end ;
18817: PPOPN 2
18819: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
18824: PPUSH
// if not hack in hackTanks then
18825: LD_VAR 0 1
18829: PUSH
18830: LD_EXP 81
18834: IN
18835: NOT
18836: IFFALSE 18840
// exit ;
18838: GO 18951
// index := GetElementIndex ( hackTanks , hack ) ;
18840: LD_ADDR_VAR 0 4
18844: PUSH
18845: LD_EXP 81
18849: PPUSH
18850: LD_VAR 0 1
18854: PPUSH
18855: CALL 26553 0 2
18859: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18860: LD_EXP 82
18864: PUSH
18865: LD_VAR 0 4
18869: ARRAY
18870: IFFALSE 18951
// begin for i in hackTanksCaptured [ index ] do
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_EXP 82
18881: PUSH
18882: LD_VAR 0 4
18886: ARRAY
18887: PUSH
18888: FOR_IN
18889: IFFALSE 18915
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 1
18898: ARRAY
18899: PPUSH
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 2
18907: ARRAY
18908: PPUSH
18909: CALL_OW 235
18913: GO 18888
18915: POP
18916: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18917: LD_ADDR_EXP 82
18921: PUSH
18922: LD_EXP 82
18926: PPUSH
18927: LD_VAR 0 4
18931: PPUSH
18932: EMPTY
18933: PPUSH
18934: CALL_OW 1
18938: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 505
// end ; end ;
18951: LD_VAR 0 2
18955: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
// if not hack in hackTanks or not vehicles then
18961: LD_VAR 0 1
18965: PUSH
18966: LD_EXP 81
18970: IN
18971: NOT
18972: PUSH
18973: LD_VAR 0 2
18977: NOT
18978: OR
18979: IFFALSE 18983
// exit ;
18981: GO 19258
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18983: LD_ADDR_VAR 0 2
18987: PUSH
18988: LD_VAR 0 1
18992: PPUSH
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL 27203 0 4
19008: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19009: LD_ADDR_VAR 0 5
19013: PUSH
19014: LD_EXP 81
19018: PPUSH
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL 26553 0 2
19028: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19029: LD_EXP 82
19033: PUSH
19034: LD_VAR 0 5
19038: ARRAY
19039: PUSH
19040: LD_EXP 83
19044: LESS
19045: IFFALSE 19234
// begin for i := 1 to vehicles do
19047: LD_ADDR_VAR 0 4
19051: PUSH
19052: DOUBLE
19053: LD_INT 1
19055: DEC
19056: ST_TO_ADDR
19057: LD_VAR 0 2
19061: PUSH
19062: FOR_TO
19063: IFFALSE 19232
// begin if hackTanksCaptured [ index ] = hackLimit then
19065: LD_EXP 82
19069: PUSH
19070: LD_VAR 0 5
19074: ARRAY
19075: PUSH
19076: LD_EXP 83
19080: EQUAL
19081: IFFALSE 19085
// break ;
19083: GO 19232
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19085: LD_ADDR_EXP 85
19089: PUSH
19090: LD_EXP 85
19094: PPUSH
19095: LD_VAR 0 5
19099: PPUSH
19100: LD_EXP 85
19104: PUSH
19105: LD_VAR 0 5
19109: ARRAY
19110: PUSH
19111: LD_INT 1
19113: PLUS
19114: PPUSH
19115: CALL_OW 1
19119: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19120: LD_ADDR_EXP 82
19124: PUSH
19125: LD_EXP 82
19129: PPUSH
19130: LD_VAR 0 5
19134: PUSH
19135: LD_EXP 82
19139: PUSH
19140: LD_VAR 0 5
19144: ARRAY
19145: PUSH
19146: LD_INT 1
19148: PLUS
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PPUSH
19154: LD_VAR 0 2
19158: PUSH
19159: LD_VAR 0 4
19163: ARRAY
19164: PUSH
19165: LD_VAR 0 2
19169: PUSH
19170: LD_VAR 0 4
19174: ARRAY
19175: PPUSH
19176: CALL_OW 255
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL 26768 0 3
19189: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19190: LD_VAR 0 2
19194: PUSH
19195: LD_VAR 0 4
19199: ARRAY
19200: PPUSH
19201: LD_VAR 0 1
19205: PPUSH
19206: CALL_OW 255
19210: PPUSH
19211: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19215: LD_VAR 0 2
19219: PUSH
19220: LD_VAR 0 4
19224: ARRAY
19225: PPUSH
19226: CALL_OW 141
// end ;
19230: GO 19062
19232: POP
19233: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_EXP 82
19243: PUSH
19244: LD_VAR 0 5
19248: ARRAY
19249: PUSH
19250: LD_INT 0
19252: PLUS
19253: PPUSH
19254: CALL_OW 505
// end ;
19258: LD_VAR 0 3
19262: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19263: LD_INT 0
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
// if not hack in hackTanks then
19269: LD_VAR 0 1
19273: PUSH
19274: LD_EXP 81
19278: IN
19279: NOT
19280: IFFALSE 19284
// exit ;
19282: GO 19524
// index := GetElementIndex ( hackTanks , hack ) ;
19284: LD_ADDR_VAR 0 4
19288: PUSH
19289: LD_EXP 81
19293: PPUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL 26553 0 2
19303: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19304: LD_ADDR_VAR 0 3
19308: PUSH
19309: DOUBLE
19310: LD_EXP 82
19314: PUSH
19315: LD_VAR 0 4
19319: ARRAY
19320: INC
19321: ST_TO_ADDR
19322: LD_INT 1
19324: PUSH
19325: FOR_DOWNTO
19326: IFFALSE 19498
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19328: LD_ADDR_VAR 0 5
19332: PUSH
19333: LD_EXP 82
19337: PUSH
19338: LD_VAR 0 4
19342: ARRAY
19343: PUSH
19344: LD_VAR 0 3
19348: ARRAY
19349: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19350: LD_VAR 0 5
19354: PUSH
19355: LD_INT 1
19357: ARRAY
19358: PPUSH
19359: CALL_OW 302
19363: NOT
19364: PUSH
19365: LD_VAR 0 5
19369: PUSH
19370: LD_INT 1
19372: ARRAY
19373: PPUSH
19374: CALL_OW 255
19378: PUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 255
19388: NONEQUAL
19389: OR
19390: IFFALSE 19496
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19392: LD_VAR 0 5
19396: PUSH
19397: LD_INT 1
19399: ARRAY
19400: PPUSH
19401: CALL_OW 305
19405: PUSH
19406: LD_VAR 0 5
19410: PUSH
19411: LD_INT 1
19413: ARRAY
19414: PPUSH
19415: CALL_OW 255
19419: PUSH
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 255
19429: EQUAL
19430: AND
19431: IFFALSE 19455
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19433: LD_VAR 0 5
19437: PUSH
19438: LD_INT 1
19440: ARRAY
19441: PPUSH
19442: LD_VAR 0 5
19446: PUSH
19447: LD_INT 2
19449: ARRAY
19450: PPUSH
19451: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19455: LD_ADDR_EXP 82
19459: PUSH
19460: LD_EXP 82
19464: PPUSH
19465: LD_VAR 0 4
19469: PPUSH
19470: LD_EXP 82
19474: PUSH
19475: LD_VAR 0 4
19479: ARRAY
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: CALL_OW 3
19490: PPUSH
19491: CALL_OW 1
19495: ST_TO_ADDR
// end ; end ;
19496: GO 19325
19498: POP
19499: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_EXP 82
19509: PUSH
19510: LD_VAR 0 4
19514: ARRAY
19515: PUSH
19516: LD_INT 0
19518: PLUS
19519: PPUSH
19520: CALL_OW 505
// end ;
19524: LD_VAR 0 2
19528: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
// if not hack in hackTanks then
19535: LD_VAR 0 1
19539: PUSH
19540: LD_EXP 81
19544: IN
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 19635
// index := GetElementIndex ( hackTanks , hack ) ;
19550: LD_ADDR_VAR 0 5
19554: PUSH
19555: LD_EXP 81
19559: PPUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL 26553 0 2
19569: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_EXP 82
19584: PUSH
19585: LD_VAR 0 5
19589: ARRAY
19590: PUSH
19591: FOR_TO
19592: IFFALSE 19633
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19594: LD_EXP 82
19598: PUSH
19599: LD_VAR 0 5
19603: ARRAY
19604: PUSH
19605: LD_VAR 0 4
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: PUSH
19615: LD_VAR 0 2
19619: EQUAL
19620: IFFALSE 19631
// KillUnit ( vehicle ) ;
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 66
19631: GO 19591
19633: POP
19634: POP
// end ;
19635: LD_VAR 0 3
19639: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19640: LD_EXP 86
19644: NOT
19645: IFFALSE 19680
19647: GO 19649
19649: DISABLE
// begin initMiner := true ;
19650: LD_ADDR_EXP 86
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// minersList := [ ] ;
19658: LD_ADDR_EXP 87
19662: PUSH
19663: EMPTY
19664: ST_TO_ADDR
// minerMinesList := [ ] ;
19665: LD_ADDR_EXP 88
19669: PUSH
19670: EMPTY
19671: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19672: LD_ADDR_EXP 89
19676: PUSH
19677: LD_INT 5
19679: ST_TO_ADDR
// end ;
19680: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19681: LD_EXP 86
19685: PUSH
19686: LD_INT 34
19688: PUSH
19689: LD_EXP 97
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 69
19702: AND
19703: IFFALSE 20166
19705: GO 19707
19707: DISABLE
19708: LD_INT 0
19710: PPUSH
19711: PPUSH
19712: PPUSH
19713: PPUSH
// begin enable ;
19714: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19715: LD_ADDR_VAR 0 1
19719: PUSH
19720: LD_INT 34
19722: PUSH
19723: LD_EXP 97
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 69
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19810
// begin if not i in minersList then
19740: LD_VAR 0 1
19744: PUSH
19745: LD_EXP 87
19749: IN
19750: NOT
19751: IFFALSE 19808
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19753: LD_ADDR_EXP 87
19757: PUSH
19758: LD_EXP 87
19762: PPUSH
19763: LD_EXP 87
19767: PUSH
19768: LD_INT 1
19770: PLUS
19771: PPUSH
19772: LD_VAR 0 1
19776: PPUSH
19777: CALL_OW 1
19781: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19782: LD_ADDR_EXP 88
19786: PUSH
19787: LD_EXP 88
19791: PPUSH
19792: LD_EXP 88
19796: PUSH
19797: LD_INT 1
19799: PLUS
19800: PPUSH
19801: EMPTY
19802: PPUSH
19803: CALL_OW 1
19807: ST_TO_ADDR
// end end ;
19808: GO 19737
19810: POP
19811: POP
// for i := minerMinesList downto 1 do
19812: LD_ADDR_VAR 0 1
19816: PUSH
19817: DOUBLE
19818: LD_EXP 88
19822: INC
19823: ST_TO_ADDR
19824: LD_INT 1
19826: PUSH
19827: FOR_DOWNTO
19828: IFFALSE 20164
// begin if IsLive ( minersList [ i ] ) then
19830: LD_EXP 87
19834: PUSH
19835: LD_VAR 0 1
19839: ARRAY
19840: PPUSH
19841: CALL_OW 300
19845: IFFALSE 19873
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19847: LD_EXP 87
19851: PUSH
19852: LD_VAR 0 1
19856: ARRAY
19857: PPUSH
19858: LD_EXP 88
19862: PUSH
19863: LD_VAR 0 1
19867: ARRAY
19868: PPUSH
19869: CALL_OW 505
// if not minerMinesList [ i ] then
19873: LD_EXP 88
19877: PUSH
19878: LD_VAR 0 1
19882: ARRAY
19883: NOT
19884: IFFALSE 19888
// continue ;
19886: GO 19827
// for j := minerMinesList [ i ] downto 1 do
19888: LD_ADDR_VAR 0 2
19892: PUSH
19893: DOUBLE
19894: LD_EXP 88
19898: PUSH
19899: LD_VAR 0 1
19903: ARRAY
19904: INC
19905: ST_TO_ADDR
19906: LD_INT 1
19908: PUSH
19909: FOR_DOWNTO
19910: IFFALSE 20160
// begin side := GetSide ( minersList [ i ] ) ;
19912: LD_ADDR_VAR 0 3
19916: PUSH
19917: LD_EXP 87
19921: PUSH
19922: LD_VAR 0 1
19926: ARRAY
19927: PPUSH
19928: CALL_OW 255
19932: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19933: LD_ADDR_VAR 0 4
19937: PUSH
19938: LD_EXP 88
19942: PUSH
19943: LD_VAR 0 1
19947: ARRAY
19948: PUSH
19949: LD_VAR 0 2
19953: ARRAY
19954: PUSH
19955: LD_INT 1
19957: ARRAY
19958: PPUSH
19959: LD_EXP 88
19963: PUSH
19964: LD_VAR 0 1
19968: ARRAY
19969: PUSH
19970: LD_VAR 0 2
19974: ARRAY
19975: PUSH
19976: LD_INT 2
19978: ARRAY
19979: PPUSH
19980: CALL_OW 428
19984: ST_TO_ADDR
// if not tmp then
19985: LD_VAR 0 4
19989: NOT
19990: IFFALSE 19994
// continue ;
19992: GO 19909
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19994: LD_VAR 0 4
19998: PUSH
19999: LD_INT 81
20001: PUSH
20002: LD_VAR 0 3
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: IN
20016: PUSH
20017: LD_EXP 88
20021: PUSH
20022: LD_VAR 0 1
20026: ARRAY
20027: PUSH
20028: LD_VAR 0 2
20032: ARRAY
20033: PUSH
20034: LD_INT 1
20036: ARRAY
20037: PPUSH
20038: LD_EXP 88
20042: PUSH
20043: LD_VAR 0 1
20047: ARRAY
20048: PUSH
20049: LD_VAR 0 2
20053: ARRAY
20054: PUSH
20055: LD_INT 2
20057: ARRAY
20058: PPUSH
20059: CALL_OW 458
20063: AND
20064: IFFALSE 20158
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20066: LD_EXP 88
20070: PUSH
20071: LD_VAR 0 1
20075: ARRAY
20076: PUSH
20077: LD_VAR 0 2
20081: ARRAY
20082: PUSH
20083: LD_INT 1
20085: ARRAY
20086: PPUSH
20087: LD_EXP 88
20091: PUSH
20092: LD_VAR 0 1
20096: ARRAY
20097: PUSH
20098: LD_VAR 0 2
20102: ARRAY
20103: PUSH
20104: LD_INT 2
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 3
20112: PPUSH
20113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20117: LD_ADDR_EXP 88
20121: PUSH
20122: LD_EXP 88
20126: PPUSH
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_EXP 88
20136: PUSH
20137: LD_VAR 0 1
20141: ARRAY
20142: PPUSH
20143: LD_VAR 0 2
20147: PPUSH
20148: CALL_OW 3
20152: PPUSH
20153: CALL_OW 1
20157: ST_TO_ADDR
// end ; end ;
20158: GO 19909
20160: POP
20161: POP
// end ;
20162: GO 19827
20164: POP
20165: POP
// end ;
20166: PPOPN 4
20168: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
// result := false ;
20173: LD_ADDR_VAR 0 4
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 264
20190: PUSH
20191: LD_EXP 97
20195: EQUAL
20196: NOT
20197: IFFALSE 20201
// exit ;
20199: GO 20441
// index := GetElementIndex ( minersList , unit ) ;
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: LD_EXP 87
20210: PPUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL 26553 0 2
20220: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20221: LD_EXP 88
20225: PUSH
20226: LD_VAR 0 5
20230: ARRAY
20231: PUSH
20232: LD_EXP 89
20236: GREATEREQUAL
20237: IFFALSE 20241
// exit ;
20239: GO 20441
// ComMoveXY ( unit , x , y ) ;
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_VAR 0 2
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20260: LD_INT 35
20262: PPUSH
20263: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_VAR 0 2
20276: PPUSH
20277: LD_VAR 0 3
20281: PPUSH
20282: CALL 56950 0 3
20286: NOT
20287: PUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 314
20297: AND
20298: IFFALSE 20302
// exit ;
20300: GO 20441
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20302: LD_VAR 0 2
20306: PPUSH
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 428
20316: PUSH
20317: LD_VAR 0 1
20321: EQUAL
20322: PUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 314
20332: NOT
20333: AND
20334: IFFALSE 20260
// PlaySoundXY ( x , y , PlantMine ) ;
20336: LD_VAR 0 2
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_STRING PlantMine
20348: PPUSH
20349: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20353: LD_VAR 0 2
20357: PPUSH
20358: LD_VAR 0 3
20362: PPUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 255
20372: PPUSH
20373: LD_INT 0
20375: PPUSH
20376: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20380: LD_ADDR_EXP 88
20384: PUSH
20385: LD_EXP 88
20389: PPUSH
20390: LD_VAR 0 5
20394: PUSH
20395: LD_EXP 88
20399: PUSH
20400: LD_VAR 0 5
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: PLUS
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: LD_VAR 0 2
20418: PUSH
20419: LD_VAR 0 3
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL 26768 0 3
20432: ST_TO_ADDR
// result := true ;
20433: LD_ADDR_VAR 0 4
20437: PUSH
20438: LD_INT 1
20440: ST_TO_ADDR
// end ;
20441: LD_VAR 0 4
20445: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20446: LD_INT 0
20448: PPUSH
20449: PPUSH
20450: PPUSH
// if not unit in minersList then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_EXP 87
20460: IN
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20858
// index := GetElementIndex ( minersList , unit ) ;
20466: LD_ADDR_VAR 0 6
20470: PUSH
20471: LD_EXP 87
20475: PPUSH
20476: LD_VAR 0 1
20480: PPUSH
20481: CALL 26553 0 2
20485: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20486: LD_ADDR_VAR 0 5
20490: PUSH
20491: DOUBLE
20492: LD_EXP 88
20496: PUSH
20497: LD_VAR 0 6
20501: ARRAY
20502: INC
20503: ST_TO_ADDR
20504: LD_INT 1
20506: PUSH
20507: FOR_DOWNTO
20508: IFFALSE 20669
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20510: LD_EXP 88
20514: PUSH
20515: LD_VAR 0 6
20519: ARRAY
20520: PUSH
20521: LD_VAR 0 5
20525: ARRAY
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PUSH
20531: LD_VAR 0 2
20535: EQUAL
20536: PUSH
20537: LD_EXP 88
20541: PUSH
20542: LD_VAR 0 6
20546: ARRAY
20547: PUSH
20548: LD_VAR 0 5
20552: ARRAY
20553: PUSH
20554: LD_INT 2
20556: ARRAY
20557: PUSH
20558: LD_VAR 0 3
20562: EQUAL
20563: AND
20564: IFFALSE 20667
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20566: LD_EXP 88
20570: PUSH
20571: LD_VAR 0 6
20575: ARRAY
20576: PUSH
20577: LD_VAR 0 5
20581: ARRAY
20582: PUSH
20583: LD_INT 1
20585: ARRAY
20586: PPUSH
20587: LD_EXP 88
20591: PUSH
20592: LD_VAR 0 6
20596: ARRAY
20597: PUSH
20598: LD_VAR 0 5
20602: ARRAY
20603: PUSH
20604: LD_INT 2
20606: ARRAY
20607: PPUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 255
20617: PPUSH
20618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20622: LD_ADDR_EXP 88
20626: PUSH
20627: LD_EXP 88
20631: PPUSH
20632: LD_VAR 0 6
20636: PPUSH
20637: LD_EXP 88
20641: PUSH
20642: LD_VAR 0 6
20646: ARRAY
20647: PPUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL_OW 3
20657: PPUSH
20658: CALL_OW 1
20662: ST_TO_ADDR
// exit ;
20663: POP
20664: POP
20665: GO 20858
// end ; end ;
20667: GO 20507
20669: POP
20670: POP
// for i := minerMinesList [ index ] downto 1 do
20671: LD_ADDR_VAR 0 5
20675: PUSH
20676: DOUBLE
20677: LD_EXP 88
20681: PUSH
20682: LD_VAR 0 6
20686: ARRAY
20687: INC
20688: ST_TO_ADDR
20689: LD_INT 1
20691: PUSH
20692: FOR_DOWNTO
20693: IFFALSE 20856
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20695: LD_EXP 88
20699: PUSH
20700: LD_VAR 0 6
20704: ARRAY
20705: PUSH
20706: LD_VAR 0 5
20710: ARRAY
20711: PUSH
20712: LD_INT 1
20714: ARRAY
20715: PPUSH
20716: LD_EXP 88
20720: PUSH
20721: LD_VAR 0 6
20725: ARRAY
20726: PUSH
20727: LD_VAR 0 5
20731: ARRAY
20732: PUSH
20733: LD_INT 2
20735: ARRAY
20736: PPUSH
20737: LD_VAR 0 2
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: CALL_OW 298
20751: PUSH
20752: LD_INT 6
20754: LESS
20755: IFFALSE 20854
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20757: LD_EXP 88
20761: PUSH
20762: LD_VAR 0 6
20766: ARRAY
20767: PUSH
20768: LD_VAR 0 5
20772: ARRAY
20773: PUSH
20774: LD_INT 1
20776: ARRAY
20777: PPUSH
20778: LD_EXP 88
20782: PUSH
20783: LD_VAR 0 6
20787: ARRAY
20788: PUSH
20789: LD_VAR 0 5
20793: ARRAY
20794: PUSH
20795: LD_INT 2
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 255
20808: PPUSH
20809: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20813: LD_ADDR_EXP 88
20817: PUSH
20818: LD_EXP 88
20822: PPUSH
20823: LD_VAR 0 6
20827: PPUSH
20828: LD_EXP 88
20832: PUSH
20833: LD_VAR 0 6
20837: ARRAY
20838: PPUSH
20839: LD_VAR 0 5
20843: PPUSH
20844: CALL_OW 3
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
// end ; end ;
20854: GO 20692
20856: POP
20857: POP
// end ;
20858: LD_VAR 0 4
20862: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20863: LD_INT 0
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 264
20883: PUSH
20884: LD_EXP 97
20888: EQUAL
20889: NOT
20890: PUSH
20891: LD_VAR 0 1
20895: PUSH
20896: LD_EXP 87
20900: IN
20901: NOT
20902: OR
20903: IFFALSE 20907
// exit ;
20905: GO 21229
// index := GetElementIndex ( minersList , unit ) ;
20907: LD_ADDR_VAR 0 6
20911: PUSH
20912: LD_EXP 87
20916: PPUSH
20917: LD_VAR 0 1
20921: PPUSH
20922: CALL 26553 0 2
20926: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: LD_EXP 89
20936: PUSH
20937: LD_EXP 88
20941: PUSH
20942: LD_VAR 0 6
20946: ARRAY
20947: MINUS
20948: ST_TO_ADDR
// if not minesFreeAmount then
20949: LD_VAR 0 8
20953: NOT
20954: IFFALSE 20958
// exit ;
20956: GO 21229
// tmp := [ ] ;
20958: LD_ADDR_VAR 0 7
20962: PUSH
20963: EMPTY
20964: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20965: LD_ADDR_VAR 0 5
20969: PUSH
20970: DOUBLE
20971: LD_INT 1
20973: DEC
20974: ST_TO_ADDR
20975: LD_VAR 0 8
20979: PUSH
20980: FOR_TO
20981: IFFALSE 21176
// begin _d := rand ( 0 , 5 ) ;
20983: LD_ADDR_VAR 0 11
20987: PUSH
20988: LD_INT 0
20990: PPUSH
20991: LD_INT 5
20993: PPUSH
20994: CALL_OW 12
20998: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20999: LD_ADDR_VAR 0 12
21003: PUSH
21004: LD_INT 2
21006: PPUSH
21007: LD_INT 6
21009: PPUSH
21010: CALL_OW 12
21014: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21015: LD_ADDR_VAR 0 9
21019: PUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 11
21029: PPUSH
21030: LD_VAR 0 12
21034: PPUSH
21035: CALL_OW 272
21039: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21040: LD_ADDR_VAR 0 10
21044: PUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_VAR 0 11
21054: PPUSH
21055: LD_VAR 0 12
21059: PPUSH
21060: CALL_OW 273
21064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21065: LD_VAR 0 9
21069: PPUSH
21070: LD_VAR 0 10
21074: PPUSH
21075: CALL_OW 488
21079: PUSH
21080: LD_VAR 0 9
21084: PUSH
21085: LD_VAR 0 10
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_VAR 0 7
21098: IN
21099: NOT
21100: AND
21101: PUSH
21102: LD_VAR 0 9
21106: PPUSH
21107: LD_VAR 0 10
21111: PPUSH
21112: CALL_OW 458
21116: NOT
21117: AND
21118: IFFALSE 21160
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21120: LD_ADDR_VAR 0 7
21124: PUSH
21125: LD_VAR 0 7
21129: PPUSH
21130: LD_VAR 0 7
21134: PUSH
21135: LD_INT 1
21137: PLUS
21138: PPUSH
21139: LD_VAR 0 9
21143: PUSH
21144: LD_VAR 0 10
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 1
21157: ST_TO_ADDR
21158: GO 21174
// i := i - 1 ;
21160: LD_ADDR_VAR 0 5
21164: PUSH
21165: LD_VAR 0 5
21169: PUSH
21170: LD_INT 1
21172: MINUS
21173: ST_TO_ADDR
// end ;
21174: GO 20980
21176: POP
21177: POP
// for i in tmp do
21178: LD_ADDR_VAR 0 5
21182: PUSH
21183: LD_VAR 0 7
21187: PUSH
21188: FOR_IN
21189: IFFALSE 21227
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21191: LD_VAR 0 1
21195: PPUSH
21196: LD_VAR 0 5
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: PPUSH
21205: LD_VAR 0 5
21209: PUSH
21210: LD_INT 2
21212: ARRAY
21213: PPUSH
21214: CALL 20169 0 3
21218: NOT
21219: IFFALSE 21225
// exit ;
21221: POP
21222: POP
21223: GO 21229
21225: GO 21188
21227: POP
21228: POP
// end ;
21229: LD_VAR 0 4
21233: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21234: LD_INT 0
21236: PPUSH
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
// if not GetClass ( unit ) = class_sniper then
21243: LD_VAR 0 1
21247: PPUSH
21248: CALL_OW 257
21252: PUSH
21253: LD_INT 5
21255: EQUAL
21256: NOT
21257: IFFALSE 21261
// exit ;
21259: GO 21649
// dist := 8 ;
21261: LD_ADDR_VAR 0 5
21265: PUSH
21266: LD_INT 8
21268: ST_TO_ADDR
// viewRange := 12 ;
21269: LD_ADDR_VAR 0 7
21273: PUSH
21274: LD_INT 12
21276: ST_TO_ADDR
// side := GetSide ( unit ) ;
21277: LD_ADDR_VAR 0 6
21281: PUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 255
21291: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21292: LD_INT 61
21294: PPUSH
21295: LD_VAR 0 6
21299: PPUSH
21300: CALL_OW 321
21304: PUSH
21305: LD_INT 2
21307: EQUAL
21308: IFFALSE 21318
// viewRange := 16 ;
21310: LD_ADDR_VAR 0 7
21314: PUSH
21315: LD_INT 16
21317: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: LD_VAR 0 3
21332: PPUSH
21333: CALL_OW 297
21337: PUSH
21338: LD_VAR 0 5
21342: GREATER
21343: IFFALSE 21422
// begin ComMoveXY ( unit , x , y ) ;
21345: LD_VAR 0 1
21349: PPUSH
21350: LD_VAR 0 2
21354: PPUSH
21355: LD_VAR 0 3
21359: PPUSH
21360: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21364: LD_INT 35
21366: PPUSH
21367: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_VAR 0 2
21380: PPUSH
21381: LD_VAR 0 3
21385: PPUSH
21386: CALL 56950 0 3
21390: NOT
21391: IFFALSE 21395
// exit ;
21393: GO 21649
// until GetDistUnitXY ( unit , x , y ) < dist ;
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_VAR 0 2
21404: PPUSH
21405: LD_VAR 0 3
21409: PPUSH
21410: CALL_OW 297
21414: PUSH
21415: LD_VAR 0 5
21419: LESS
21420: IFFALSE 21364
// end ; ComTurnXY ( unit , x , y ) ;
21422: LD_VAR 0 1
21426: PPUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: CALL_OW 118
// wait ( 5 ) ;
21441: LD_INT 5
21443: PPUSH
21444: CALL_OW 67
// _d := GetDir ( unit ) ;
21448: LD_ADDR_VAR 0 10
21452: PUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 254
21462: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21463: LD_ADDR_VAR 0 8
21467: PUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 250
21477: PPUSH
21478: LD_VAR 0 10
21482: PPUSH
21483: LD_VAR 0 5
21487: PPUSH
21488: CALL_OW 272
21492: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21493: LD_ADDR_VAR 0 9
21497: PUSH
21498: LD_VAR 0 1
21502: PPUSH
21503: CALL_OW 251
21507: PPUSH
21508: LD_VAR 0 10
21512: PPUSH
21513: LD_VAR 0 5
21517: PPUSH
21518: CALL_OW 273
21522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21523: LD_VAR 0 8
21527: PPUSH
21528: LD_VAR 0 9
21532: PPUSH
21533: CALL_OW 488
21537: NOT
21538: IFFALSE 21542
// exit ;
21540: GO 21649
// ComAnimCustom ( unit , 1 ) ;
21542: LD_VAR 0 1
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21554: LD_VAR 0 8
21558: PPUSH
21559: LD_VAR 0 9
21563: PPUSH
21564: LD_VAR 0 6
21568: PPUSH
21569: LD_VAR 0 7
21573: PPUSH
21574: CALL_OW 330
// repeat wait ( 1 ) ;
21578: LD_INT 1
21580: PPUSH
21581: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: CALL_OW 316
21594: PUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL_OW 314
21604: OR
21605: PUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 302
21615: NOT
21616: OR
21617: PUSH
21618: LD_VAR 0 1
21622: PPUSH
21623: CALL_OW 301
21627: OR
21628: IFFALSE 21578
// RemoveSeeing ( _x , _y , side ) ;
21630: LD_VAR 0 8
21634: PPUSH
21635: LD_VAR 0 9
21639: PPUSH
21640: LD_VAR 0 6
21644: PPUSH
21645: CALL_OW 331
// end ; end_of_file
21649: LD_VAR 0 4
21653: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21654: LD_INT 0
21656: PPUSH
// ar_miner := 81 ;
21657: LD_ADDR_EXP 97
21661: PUSH
21662: LD_INT 81
21664: ST_TO_ADDR
// ar_crane := 88 ;
21665: LD_ADDR_EXP 96
21669: PUSH
21670: LD_INT 88
21672: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21673: LD_ADDR_EXP 91
21677: PUSH
21678: LD_INT 89
21680: ST_TO_ADDR
// us_hack := 99 ;
21681: LD_ADDR_EXP 92
21685: PUSH
21686: LD_INT 99
21688: ST_TO_ADDR
// us_artillery := 97 ;
21689: LD_ADDR_EXP 93
21693: PUSH
21694: LD_INT 97
21696: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21697: LD_ADDR_EXP 94
21701: PUSH
21702: LD_INT 91
21704: ST_TO_ADDR
// ar_mortar := 92 ;
21705: LD_ADDR_EXP 95
21709: PUSH
21710: LD_INT 92
21712: ST_TO_ADDR
// ru_radar := 98 ;
21713: LD_ADDR_EXP 90
21717: PUSH
21718: LD_INT 98
21720: ST_TO_ADDR
// tech_Artillery := 80 ;
21721: LD_ADDR_EXP 98
21725: PUSH
21726: LD_INT 80
21728: ST_TO_ADDR
// tech_RadMat := 81 ;
21729: LD_ADDR_EXP 99
21733: PUSH
21734: LD_INT 81
21736: ST_TO_ADDR
// tech_BasicTools := 82 ;
21737: LD_ADDR_EXP 100
21741: PUSH
21742: LD_INT 82
21744: ST_TO_ADDR
// tech_Cargo := 83 ;
21745: LD_ADDR_EXP 101
21749: PUSH
21750: LD_INT 83
21752: ST_TO_ADDR
// tech_Track := 84 ;
21753: LD_ADDR_EXP 102
21757: PUSH
21758: LD_INT 84
21760: ST_TO_ADDR
// tech_Crane := 85 ;
21761: LD_ADDR_EXP 103
21765: PUSH
21766: LD_INT 85
21768: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21769: LD_ADDR_EXP 104
21773: PUSH
21774: LD_INT 86
21776: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21777: LD_ADDR_EXP 105
21781: PUSH
21782: LD_INT 87
21784: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21785: LD_ADDR_EXP 106
21789: PUSH
21790: LD_INT 88
21792: ST_TO_ADDR
// class_mastodont := 31 ;
21793: LD_ADDR_EXP 107
21797: PUSH
21798: LD_INT 31
21800: ST_TO_ADDR
// class_horse := 21 ;
21801: LD_ADDR_EXP 108
21805: PUSH
21806: LD_INT 21
21808: ST_TO_ADDR
// end ;
21809: LD_VAR 0 1
21813: RET
// every 1 do
21814: GO 21816
21816: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
21817: CALL 21654 0 0
21821: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21822: LD_INT 0
21824: PPUSH
21825: PPUSH
// if exist_mode then
21826: LD_VAR 0 2
21830: IFFALSE 21855
// unit := CreateCharacter ( prefix & ident ) else
21832: LD_ADDR_VAR 0 5
21836: PUSH
21837: LD_VAR 0 3
21841: PUSH
21842: LD_VAR 0 1
21846: STR
21847: PPUSH
21848: CALL_OW 34
21852: ST_TO_ADDR
21853: GO 21870
// unit := NewCharacter ( ident ) ;
21855: LD_ADDR_VAR 0 5
21859: PUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL_OW 25
21869: ST_TO_ADDR
// result := unit ;
21870: LD_ADDR_VAR 0 4
21874: PUSH
21875: LD_VAR 0 5
21879: ST_TO_ADDR
// end ;
21880: LD_VAR 0 4
21884: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21885: LD_INT 0
21887: PPUSH
21888: PPUSH
// if not side or not nation then
21889: LD_VAR 0 1
21893: NOT
21894: PUSH
21895: LD_VAR 0 2
21899: NOT
21900: OR
21901: IFFALSE 21905
// exit ;
21903: GO 22669
// case nation of nation_american :
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 1
21912: DOUBLE
21913: EQUAL
21914: IFTRUE 21918
21916: GO 22132
21918: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21919: LD_ADDR_VAR 0 4
21923: PUSH
21924: LD_INT 35
21926: PUSH
21927: LD_INT 45
21929: PUSH
21930: LD_INT 46
21932: PUSH
21933: LD_INT 47
21935: PUSH
21936: LD_INT 82
21938: PUSH
21939: LD_INT 83
21941: PUSH
21942: LD_INT 84
21944: PUSH
21945: LD_INT 85
21947: PUSH
21948: LD_INT 86
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 6
21959: PUSH
21960: LD_INT 15
21962: PUSH
21963: LD_INT 16
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 12
21971: PUSH
21972: LD_INT 13
21974: PUSH
21975: LD_INT 10
21977: PUSH
21978: LD_INT 14
21980: PUSH
21981: LD_INT 20
21983: PUSH
21984: LD_INT 21
21986: PUSH
21987: LD_INT 22
21989: PUSH
21990: LD_INT 25
21992: PUSH
21993: LD_INT 32
21995: PUSH
21996: LD_INT 27
21998: PUSH
21999: LD_INT 36
22001: PUSH
22002: LD_INT 69
22004: PUSH
22005: LD_INT 39
22007: PUSH
22008: LD_INT 34
22010: PUSH
22011: LD_INT 40
22013: PUSH
22014: LD_INT 48
22016: PUSH
22017: LD_INT 49
22019: PUSH
22020: LD_INT 50
22022: PUSH
22023: LD_INT 51
22025: PUSH
22026: LD_INT 52
22028: PUSH
22029: LD_INT 53
22031: PUSH
22032: LD_INT 54
22034: PUSH
22035: LD_INT 55
22037: PUSH
22038: LD_INT 56
22040: PUSH
22041: LD_INT 57
22043: PUSH
22044: LD_INT 58
22046: PUSH
22047: LD_INT 59
22049: PUSH
22050: LD_INT 60
22052: PUSH
22053: LD_INT 61
22055: PUSH
22056: LD_INT 62
22058: PUSH
22059: LD_INT 80
22061: PUSH
22062: LD_INT 82
22064: PUSH
22065: LD_INT 83
22067: PUSH
22068: LD_INT 84
22070: PUSH
22071: LD_INT 85
22073: PUSH
22074: LD_INT 86
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 22593
22132: LD_INT 2
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22362
22140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_INT 35
22148: PUSH
22149: LD_INT 45
22151: PUSH
22152: LD_INT 46
22154: PUSH
22155: LD_INT 47
22157: PUSH
22158: LD_INT 82
22160: PUSH
22161: LD_INT 83
22163: PUSH
22164: LD_INT 84
22166: PUSH
22167: LD_INT 85
22169: PUSH
22170: LD_INT 87
22172: PUSH
22173: LD_INT 70
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 11
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: LD_INT 4
22187: PUSH
22188: LD_INT 5
22190: PUSH
22191: LD_INT 6
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 18
22199: PUSH
22200: LD_INT 7
22202: PUSH
22203: LD_INT 17
22205: PUSH
22206: LD_INT 8
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 72
22220: PUSH
22221: LD_INT 26
22223: PUSH
22224: LD_INT 69
22226: PUSH
22227: LD_INT 39
22229: PUSH
22230: LD_INT 40
22232: PUSH
22233: LD_INT 41
22235: PUSH
22236: LD_INT 42
22238: PUSH
22239: LD_INT 43
22241: PUSH
22242: LD_INT 48
22244: PUSH
22245: LD_INT 49
22247: PUSH
22248: LD_INT 50
22250: PUSH
22251: LD_INT 51
22253: PUSH
22254: LD_INT 52
22256: PUSH
22257: LD_INT 53
22259: PUSH
22260: LD_INT 54
22262: PUSH
22263: LD_INT 55
22265: PUSH
22266: LD_INT 56
22268: PUSH
22269: LD_INT 60
22271: PUSH
22272: LD_INT 61
22274: PUSH
22275: LD_INT 62
22277: PUSH
22278: LD_INT 66
22280: PUSH
22281: LD_INT 67
22283: PUSH
22284: LD_INT 68
22286: PUSH
22287: LD_INT 81
22289: PUSH
22290: LD_INT 82
22292: PUSH
22293: LD_INT 83
22295: PUSH
22296: LD_INT 84
22298: PUSH
22299: LD_INT 85
22301: PUSH
22302: LD_INT 87
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: ST_TO_ADDR
22360: GO 22593
22362: LD_INT 3
22364: DOUBLE
22365: EQUAL
22366: IFTRUE 22370
22368: GO 22592
22370: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22371: LD_ADDR_VAR 0 4
22375: PUSH
22376: LD_INT 46
22378: PUSH
22379: LD_INT 47
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 82
22390: PUSH
22391: LD_INT 83
22393: PUSH
22394: LD_INT 84
22396: PUSH
22397: LD_INT 85
22399: PUSH
22400: LD_INT 86
22402: PUSH
22403: LD_INT 11
22405: PUSH
22406: LD_INT 9
22408: PUSH
22409: LD_INT 20
22411: PUSH
22412: LD_INT 19
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 24
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_INT 25
22426: PUSH
22427: LD_INT 28
22429: PUSH
22430: LD_INT 29
22432: PUSH
22433: LD_INT 30
22435: PUSH
22436: LD_INT 31
22438: PUSH
22439: LD_INT 37
22441: PUSH
22442: LD_INT 38
22444: PUSH
22445: LD_INT 32
22447: PUSH
22448: LD_INT 27
22450: PUSH
22451: LD_INT 33
22453: PUSH
22454: LD_INT 69
22456: PUSH
22457: LD_INT 39
22459: PUSH
22460: LD_INT 34
22462: PUSH
22463: LD_INT 40
22465: PUSH
22466: LD_INT 71
22468: PUSH
22469: LD_INT 23
22471: PUSH
22472: LD_INT 44
22474: PUSH
22475: LD_INT 48
22477: PUSH
22478: LD_INT 49
22480: PUSH
22481: LD_INT 50
22483: PUSH
22484: LD_INT 51
22486: PUSH
22487: LD_INT 52
22489: PUSH
22490: LD_INT 53
22492: PUSH
22493: LD_INT 54
22495: PUSH
22496: LD_INT 55
22498: PUSH
22499: LD_INT 56
22501: PUSH
22502: LD_INT 57
22504: PUSH
22505: LD_INT 58
22507: PUSH
22508: LD_INT 59
22510: PUSH
22511: LD_INT 63
22513: PUSH
22514: LD_INT 64
22516: PUSH
22517: LD_INT 65
22519: PUSH
22520: LD_INT 82
22522: PUSH
22523: LD_INT 83
22525: PUSH
22526: LD_INT 84
22528: PUSH
22529: LD_INT 85
22531: PUSH
22532: LD_INT 86
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
22590: GO 22593
22592: POP
// if state > - 1 and state < 3 then
22593: LD_VAR 0 3
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: GREATER
22602: PUSH
22603: LD_VAR 0 3
22607: PUSH
22608: LD_INT 3
22610: LESS
22611: AND
22612: IFFALSE 22669
// for i in result do
22614: LD_ADDR_VAR 0 5
22618: PUSH
22619: LD_VAR 0 4
22623: PUSH
22624: FOR_IN
22625: IFFALSE 22667
// if GetTech ( i , side ) <> state then
22627: LD_VAR 0 5
22631: PPUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: CALL_OW 321
22641: PUSH
22642: LD_VAR 0 3
22646: NONEQUAL
22647: IFFALSE 22665
// result := result diff i ;
22649: LD_ADDR_VAR 0 4
22653: PUSH
22654: LD_VAR 0 4
22658: PUSH
22659: LD_VAR 0 5
22663: DIFF
22664: ST_TO_ADDR
22665: GO 22624
22667: POP
22668: POP
// end ;
22669: LD_VAR 0 4
22673: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22674: LD_INT 0
22676: PPUSH
22677: PPUSH
22678: PPUSH
// result := true ;
22679: LD_ADDR_VAR 0 3
22683: PUSH
22684: LD_INT 1
22686: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22687: LD_ADDR_VAR 0 5
22691: PUSH
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 480
22701: ST_TO_ADDR
// if not tmp then
22702: LD_VAR 0 5
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22760
// for i in tmp do
22711: LD_ADDR_VAR 0 4
22715: PUSH
22716: LD_VAR 0 5
22720: PUSH
22721: FOR_IN
22722: IFFALSE 22758
// if GetTech ( i , side ) <> state_researched then
22724: LD_VAR 0 4
22728: PPUSH
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 321
22738: PUSH
22739: LD_INT 2
22741: NONEQUAL
22742: IFFALSE 22756
// begin result := false ;
22744: LD_ADDR_VAR 0 3
22748: PUSH
22749: LD_INT 0
22751: ST_TO_ADDR
// exit ;
22752: POP
22753: POP
22754: GO 22760
// end ;
22756: GO 22721
22758: POP
22759: POP
// end ;
22760: LD_VAR 0 3
22764: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22765: LD_INT 0
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
22771: PPUSH
22772: PPUSH
22773: PPUSH
22774: PPUSH
22775: PPUSH
22776: PPUSH
22777: PPUSH
22778: PPUSH
22779: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22780: LD_VAR 0 1
22784: NOT
22785: PUSH
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 257
22795: PUSH
22796: LD_INT 9
22798: NONEQUAL
22799: OR
22800: IFFALSE 22804
// exit ;
22802: GO 23377
// side := GetSide ( unit ) ;
22804: LD_ADDR_VAR 0 9
22808: PUSH
22809: LD_VAR 0 1
22813: PPUSH
22814: CALL_OW 255
22818: ST_TO_ADDR
// tech_space := tech_spacanom ;
22819: LD_ADDR_VAR 0 12
22823: PUSH
22824: LD_INT 29
22826: ST_TO_ADDR
// tech_time := tech_taurad ;
22827: LD_ADDR_VAR 0 13
22831: PUSH
22832: LD_INT 28
22834: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22835: LD_ADDR_VAR 0 11
22839: PUSH
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL_OW 310
22849: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22850: LD_VAR 0 11
22854: PPUSH
22855: CALL_OW 247
22859: PUSH
22860: LD_INT 2
22862: EQUAL
22863: IFFALSE 22867
// exit ;
22865: GO 23377
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22867: LD_ADDR_VAR 0 8
22871: PUSH
22872: LD_INT 81
22874: PUSH
22875: LD_VAR 0 9
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 21
22889: PUSH
22890: LD_INT 3
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PPUSH
22905: CALL_OW 69
22909: ST_TO_ADDR
// if not tmp then
22910: LD_VAR 0 8
22914: NOT
22915: IFFALSE 22919
// exit ;
22917: GO 23377
// if in_unit then
22919: LD_VAR 0 11
22923: IFFALSE 22947
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22925: LD_ADDR_VAR 0 10
22929: PUSH
22930: LD_VAR 0 8
22934: PPUSH
22935: LD_VAR 0 11
22939: PPUSH
22940: CALL_OW 74
22944: ST_TO_ADDR
22945: GO 22967
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22947: LD_ADDR_VAR 0 10
22951: PUSH
22952: LD_VAR 0 8
22956: PPUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 74
22966: ST_TO_ADDR
// if not enemy then
22967: LD_VAR 0 10
22971: NOT
22972: IFFALSE 22976
// exit ;
22974: GO 23377
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22976: LD_VAR 0 11
22980: PUSH
22981: LD_VAR 0 11
22985: PPUSH
22986: LD_VAR 0 10
22990: PPUSH
22991: CALL_OW 296
22995: PUSH
22996: LD_INT 13
22998: GREATER
22999: AND
23000: PUSH
23001: LD_VAR 0 1
23005: PPUSH
23006: LD_VAR 0 10
23010: PPUSH
23011: CALL_OW 296
23015: PUSH
23016: LD_INT 12
23018: GREATER
23019: OR
23020: IFFALSE 23024
// exit ;
23022: GO 23377
// missile := [ 1 ] ;
23024: LD_ADDR_VAR 0 14
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: EMPTY
23033: LIST
23034: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23035: LD_VAR 0 9
23039: PPUSH
23040: LD_VAR 0 12
23044: PPUSH
23045: CALL_OW 325
23049: IFFALSE 23078
// missile := Insert ( missile , missile + 1 , 2 ) ;
23051: LD_ADDR_VAR 0 14
23055: PUSH
23056: LD_VAR 0 14
23060: PPUSH
23061: LD_VAR 0 14
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: PPUSH
23070: LD_INT 2
23072: PPUSH
23073: CALL_OW 2
23077: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23078: LD_VAR 0 9
23082: PPUSH
23083: LD_VAR 0 13
23087: PPUSH
23088: CALL_OW 325
23092: PUSH
23093: LD_VAR 0 10
23097: PPUSH
23098: CALL_OW 255
23102: PPUSH
23103: LD_VAR 0 13
23107: PPUSH
23108: CALL_OW 325
23112: NOT
23113: AND
23114: IFFALSE 23143
// missile := Insert ( missile , missile + 1 , 3 ) ;
23116: LD_ADDR_VAR 0 14
23120: PUSH
23121: LD_VAR 0 14
23125: PPUSH
23126: LD_VAR 0 14
23130: PUSH
23131: LD_INT 1
23133: PLUS
23134: PPUSH
23135: LD_INT 3
23137: PPUSH
23138: CALL_OW 2
23142: ST_TO_ADDR
// if missile < 2 then
23143: LD_VAR 0 14
23147: PUSH
23148: LD_INT 2
23150: LESS
23151: IFFALSE 23155
// exit ;
23153: GO 23377
// x := GetX ( enemy ) ;
23155: LD_ADDR_VAR 0 4
23159: PUSH
23160: LD_VAR 0 10
23164: PPUSH
23165: CALL_OW 250
23169: ST_TO_ADDR
// y := GetY ( enemy ) ;
23170: LD_ADDR_VAR 0 5
23174: PUSH
23175: LD_VAR 0 10
23179: PPUSH
23180: CALL_OW 251
23184: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23185: LD_ADDR_VAR 0 6
23189: PUSH
23190: LD_VAR 0 4
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 12
23206: PLUS
23207: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23208: LD_ADDR_VAR 0 7
23212: PUSH
23213: LD_VAR 0 5
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PPUSH
23222: LD_INT 1
23224: PPUSH
23225: CALL_OW 12
23229: PLUS
23230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23231: LD_VAR 0 6
23235: PPUSH
23236: LD_VAR 0 7
23240: PPUSH
23241: CALL_OW 488
23245: NOT
23246: IFFALSE 23268
// begin _x := x ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 4
23257: ST_TO_ADDR
// _y := y ;
23258: LD_ADDR_VAR 0 7
23262: PUSH
23263: LD_VAR 0 5
23267: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_INT 1
23275: PPUSH
23276: LD_VAR 0 14
23280: PPUSH
23281: CALL_OW 12
23285: ST_TO_ADDR
// case i of 1 :
23286: LD_VAR 0 3
23290: PUSH
23291: LD_INT 1
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23316
23299: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_VAR 0 10
23309: PPUSH
23310: CALL_OW 115
23314: GO 23377
23316: LD_INT 2
23318: DOUBLE
23319: EQUAL
23320: IFTRUE 23324
23322: GO 23346
23324: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23325: LD_VAR 0 1
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: LD_VAR 0 7
23339: PPUSH
23340: CALL_OW 153
23344: GO 23377
23346: LD_INT 3
23348: DOUBLE
23349: EQUAL
23350: IFTRUE 23354
23352: GO 23376
23354: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_VAR 0 6
23364: PPUSH
23365: LD_VAR 0 7
23369: PPUSH
23370: CALL_OW 154
23374: GO 23377
23376: POP
// end ;
23377: LD_VAR 0 2
23381: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
// if not unit or not building then
23390: LD_VAR 0 1
23394: NOT
23395: PUSH
23396: LD_VAR 0 2
23400: NOT
23401: OR
23402: IFFALSE 23406
// exit ;
23404: GO 23564
// x := GetX ( building ) ;
23406: LD_ADDR_VAR 0 5
23410: PUSH
23411: LD_VAR 0 2
23415: PPUSH
23416: CALL_OW 250
23420: ST_TO_ADDR
// y := GetY ( building ) ;
23421: LD_ADDR_VAR 0 6
23425: PUSH
23426: LD_VAR 0 2
23430: PPUSH
23431: CALL_OW 251
23435: ST_TO_ADDR
// for i = 0 to 5 do
23436: LD_ADDR_VAR 0 4
23440: PUSH
23441: DOUBLE
23442: LD_INT 0
23444: DEC
23445: ST_TO_ADDR
23446: LD_INT 5
23448: PUSH
23449: FOR_TO
23450: IFFALSE 23562
// begin _x := ShiftX ( x , i , 3 ) ;
23452: LD_ADDR_VAR 0 7
23456: PUSH
23457: LD_VAR 0 5
23461: PPUSH
23462: LD_VAR 0 4
23466: PPUSH
23467: LD_INT 3
23469: PPUSH
23470: CALL_OW 272
23474: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23475: LD_ADDR_VAR 0 8
23479: PUSH
23480: LD_VAR 0 6
23484: PPUSH
23485: LD_VAR 0 4
23489: PPUSH
23490: LD_INT 3
23492: PPUSH
23493: CALL_OW 273
23497: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23498: LD_VAR 0 7
23502: PPUSH
23503: LD_VAR 0 8
23507: PPUSH
23508: CALL_OW 488
23512: NOT
23513: IFFALSE 23517
// continue ;
23515: GO 23449
// if HexInfo ( _x , _y ) = 0 then
23517: LD_VAR 0 7
23521: PPUSH
23522: LD_VAR 0 8
23526: PPUSH
23527: CALL_OW 428
23531: PUSH
23532: LD_INT 0
23534: EQUAL
23535: IFFALSE 23560
// begin ComMoveXY ( unit , _x , _y ) ;
23537: LD_VAR 0 1
23541: PPUSH
23542: LD_VAR 0 7
23546: PPUSH
23547: LD_VAR 0 8
23551: PPUSH
23552: CALL_OW 111
// exit ;
23556: POP
23557: POP
23558: GO 23564
// end ; end ;
23560: GO 23449
23562: POP
23563: POP
// end ;
23564: LD_VAR 0 3
23568: RET
// export function ScanBase ( side , base_area ) ; begin
23569: LD_INT 0
23571: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23572: LD_ADDR_VAR 0 3
23576: PUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: LD_INT 81
23584: PUSH
23585: LD_VAR 0 1
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PPUSH
23594: CALL_OW 70
23598: ST_TO_ADDR
// end ;
23599: LD_VAR 0 3
23603: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23604: LD_INT 0
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
// result := false ;
23610: LD_ADDR_VAR 0 2
23614: PUSH
23615: LD_INT 0
23617: ST_TO_ADDR
// side := GetSide ( unit ) ;
23618: LD_ADDR_VAR 0 3
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 255
23632: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23633: LD_ADDR_VAR 0 4
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 248
23647: ST_TO_ADDR
// case nat of 1 :
23648: LD_VAR 0 4
23652: PUSH
23653: LD_INT 1
23655: DOUBLE
23656: EQUAL
23657: IFTRUE 23661
23659: GO 23672
23661: POP
// tech := tech_lassight ; 2 :
23662: LD_ADDR_VAR 0 5
23666: PUSH
23667: LD_INT 12
23669: ST_TO_ADDR
23670: GO 23711
23672: LD_INT 2
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23691
23680: POP
// tech := tech_mortar ; 3 :
23681: LD_ADDR_VAR 0 5
23685: PUSH
23686: LD_INT 41
23688: ST_TO_ADDR
23689: GO 23711
23691: LD_INT 3
23693: DOUBLE
23694: EQUAL
23695: IFTRUE 23699
23697: GO 23710
23699: POP
// tech := tech_bazooka ; end ;
23700: LD_ADDR_VAR 0 5
23704: PUSH
23705: LD_INT 44
23707: ST_TO_ADDR
23708: GO 23711
23710: POP
// if Researched ( side , tech ) then
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_VAR 0 5
23720: PPUSH
23721: CALL_OW 325
23725: IFFALSE 23752
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: LD_INT 8
23737: PUSH
23738: LD_INT 9
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: PUSH
23746: LD_VAR 0 4
23750: ARRAY
23751: ST_TO_ADDR
// end ;
23752: LD_VAR 0 2
23756: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
23761: PPUSH
// if not mines then
23762: LD_VAR 0 2
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 23915
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23771: LD_ADDR_VAR 0 5
23775: PUSH
23776: LD_INT 81
23778: PUSH
23779: LD_VAR 0 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: LD_INT 21
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PPUSH
23809: CALL_OW 69
23813: ST_TO_ADDR
// for i in mines do
23814: LD_ADDR_VAR 0 4
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23913
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23827: LD_VAR 0 4
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PPUSH
23836: LD_VAR 0 4
23840: PUSH
23841: LD_INT 2
23843: ARRAY
23844: PPUSH
23845: CALL_OW 458
23849: NOT
23850: IFFALSE 23854
// continue ;
23852: GO 23824
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23854: LD_VAR 0 4
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: LD_VAR 0 4
23867: PUSH
23868: LD_INT 2
23870: ARRAY
23871: PPUSH
23872: CALL_OW 428
23876: PUSH
23877: LD_VAR 0 5
23881: IN
23882: IFFALSE 23911
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23884: LD_VAR 0 4
23888: PUSH
23889: LD_INT 1
23891: ARRAY
23892: PPUSH
23893: LD_VAR 0 4
23897: PUSH
23898: LD_INT 2
23900: ARRAY
23901: PPUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 456
// end ;
23911: GO 23824
23913: POP
23914: POP
// end ;
23915: LD_VAR 0 3
23919: RET
// export function Count ( array ) ; var i ; begin
23920: LD_INT 0
23922: PPUSH
23923: PPUSH
// result := 0 ;
23924: LD_ADDR_VAR 0 2
23928: PUSH
23929: LD_INT 0
23931: ST_TO_ADDR
// for i in array do
23932: LD_ADDR_VAR 0 3
23936: PUSH
23937: LD_VAR 0 1
23941: PUSH
23942: FOR_IN
23943: IFFALSE 23967
// if i then
23945: LD_VAR 0 3
23949: IFFALSE 23965
// result := result + 1 ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_INT 1
23963: PLUS
23964: ST_TO_ADDR
23965: GO 23942
23967: POP
23968: POP
// end ;
23969: LD_VAR 0 2
23973: RET
// export function IsEmpty ( building ) ; begin
23974: LD_INT 0
23976: PPUSH
// if not building then
23977: LD_VAR 0 1
23981: NOT
23982: IFFALSE 23986
// exit ;
23984: GO 24029
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23986: LD_ADDR_VAR 0 2
23990: PUSH
23991: LD_VAR 0 1
23995: PUSH
23996: LD_INT 22
23998: PUSH
23999: LD_VAR 0 1
24003: PPUSH
24004: CALL_OW 255
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 58
24015: PUSH
24016: EMPTY
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: IN
24028: ST_TO_ADDR
// end ;
24029: LD_VAR 0 2
24033: RET
// export function IsNotFull ( building ) ; begin
24034: LD_INT 0
24036: PPUSH
// if not building then
24037: LD_VAR 0 1
24041: NOT
24042: IFFALSE 24046
// exit ;
24044: GO 24065
// result := UnitsInside ( building ) < 6 ;
24046: LD_ADDR_VAR 0 2
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 313
24060: PUSH
24061: LD_INT 6
24063: LESS
24064: ST_TO_ADDR
// end ;
24065: LD_VAR 0 2
24069: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24070: LD_INT 0
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
// tmp := [ ] ;
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: EMPTY
24082: ST_TO_ADDR
// list := [ ] ;
24083: LD_ADDR_VAR 0 5
24087: PUSH
24088: EMPTY
24089: ST_TO_ADDR
// for i = 16 to 25 do
24090: LD_ADDR_VAR 0 4
24094: PUSH
24095: DOUBLE
24096: LD_INT 16
24098: DEC
24099: ST_TO_ADDR
24100: LD_INT 25
24102: PUSH
24103: FOR_TO
24104: IFFALSE 24177
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_VAR 0 3
24115: PUSH
24116: LD_INT 22
24118: PUSH
24119: LD_VAR 0 1
24123: PPUSH
24124: CALL_OW 255
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 91
24135: PUSH
24136: LD_VAR 0 1
24140: PUSH
24141: LD_INT 6
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_VAR 0 4
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: PPUSH
24169: CALL_OW 69
24173: ADD
24174: ST_TO_ADDR
24175: GO 24103
24177: POP
24178: POP
// for i = 1 to tmp do
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: DOUBLE
24185: LD_INT 1
24187: DEC
24188: ST_TO_ADDR
24189: LD_VAR 0 3
24193: PUSH
24194: FOR_TO
24195: IFFALSE 24283
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24197: LD_ADDR_VAR 0 5
24201: PUSH
24202: LD_VAR 0 5
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_VAR 0 4
24216: ARRAY
24217: PPUSH
24218: CALL_OW 266
24222: PUSH
24223: LD_VAR 0 3
24227: PUSH
24228: LD_VAR 0 4
24232: ARRAY
24233: PPUSH
24234: CALL_OW 250
24238: PUSH
24239: LD_VAR 0 3
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PPUSH
24250: CALL_OW 251
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_VAR 0 4
24264: ARRAY
24265: PPUSH
24266: CALL_OW 254
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: ADD
24280: ST_TO_ADDR
24281: GO 24194
24283: POP
24284: POP
// result := list ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_VAR 0 5
24294: ST_TO_ADDR
// end ;
24295: LD_VAR 0 2
24299: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24300: LD_INT 0
24302: PPUSH
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
24307: PPUSH
24308: PPUSH
// if not factory then
24309: LD_VAR 0 1
24313: NOT
24314: IFFALSE 24318
// exit ;
24316: GO 24911
// if control = control_apeman then
24318: LD_VAR 0 4
24322: PUSH
24323: LD_INT 5
24325: EQUAL
24326: IFFALSE 24435
// begin tmp := UnitsInside ( factory ) ;
24328: LD_ADDR_VAR 0 8
24332: PUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 313
24342: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24343: LD_VAR 0 8
24347: PPUSH
24348: LD_INT 25
24350: PUSH
24351: LD_INT 12
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PPUSH
24358: CALL_OW 72
24362: NOT
24363: IFFALSE 24373
// control := control_manual ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_INT 1
24372: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24373: LD_ADDR_VAR 0 8
24377: PUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL 24070 0 1
24387: ST_TO_ADDR
// if tmp then
24388: LD_VAR 0 8
24392: IFFALSE 24435
// begin for i in tmp do
24394: LD_ADDR_VAR 0 7
24398: PUSH
24399: LD_VAR 0 8
24403: PUSH
24404: FOR_IN
24405: IFFALSE 24433
// if i [ 1 ] = b_ext_radio then
24407: LD_VAR 0 7
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: PUSH
24416: LD_INT 22
24418: EQUAL
24419: IFFALSE 24431
// begin control := control_remote ;
24421: LD_ADDR_VAR 0 4
24425: PUSH
24426: LD_INT 2
24428: ST_TO_ADDR
// break ;
24429: GO 24433
// end ;
24431: GO 24404
24433: POP
24434: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24435: LD_VAR 0 1
24439: PPUSH
24440: LD_VAR 0 2
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_VAR 0 4
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: CALL_OW 448
24464: IFFALSE 24499
// begin result := [ chassis , engine , control , weapon ] ;
24466: LD_ADDR_VAR 0 6
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: LD_VAR 0 3
24480: PUSH
24481: LD_VAR 0 4
24485: PUSH
24486: LD_VAR 0 5
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: ST_TO_ADDR
// exit ;
24497: GO 24911
// end ; _chassis := AvailableChassisList ( factory ) ;
24499: LD_ADDR_VAR 0 9
24503: PUSH
24504: LD_VAR 0 1
24508: PPUSH
24509: CALL_OW 475
24513: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24514: LD_ADDR_VAR 0 11
24518: PUSH
24519: LD_VAR 0 1
24523: PPUSH
24524: CALL_OW 476
24528: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24529: LD_ADDR_VAR 0 12
24533: PUSH
24534: LD_VAR 0 1
24538: PPUSH
24539: CALL_OW 477
24543: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24544: LD_ADDR_VAR 0 10
24548: PUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 478
24558: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24559: LD_VAR 0 9
24563: NOT
24564: PUSH
24565: LD_VAR 0 11
24569: NOT
24570: OR
24571: PUSH
24572: LD_VAR 0 12
24576: NOT
24577: OR
24578: PUSH
24579: LD_VAR 0 10
24583: NOT
24584: OR
24585: IFFALSE 24620
// begin result := [ chassis , engine , control , weapon ] ;
24587: LD_ADDR_VAR 0 6
24591: PUSH
24592: LD_VAR 0 2
24596: PUSH
24597: LD_VAR 0 3
24601: PUSH
24602: LD_VAR 0 4
24606: PUSH
24607: LD_VAR 0 5
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: ST_TO_ADDR
// exit ;
24618: GO 24911
// end ; if not chassis in _chassis then
24620: LD_VAR 0 2
24624: PUSH
24625: LD_VAR 0 9
24629: IN
24630: NOT
24631: IFFALSE 24657
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_VAR 0 9
24642: PUSH
24643: LD_INT 1
24645: PPUSH
24646: LD_VAR 0 9
24650: PPUSH
24651: CALL_OW 12
24655: ARRAY
24656: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24657: LD_VAR 0 2
24661: PPUSH
24662: LD_VAR 0 3
24666: PPUSH
24667: CALL 24916 0 2
24671: NOT
24672: IFFALSE 24731
// repeat engine := _engine [ 1 ] ;
24674: LD_ADDR_VAR 0 3
24678: PUSH
24679: LD_VAR 0 11
24683: PUSH
24684: LD_INT 1
24686: ARRAY
24687: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24688: LD_ADDR_VAR 0 11
24692: PUSH
24693: LD_VAR 0 11
24697: PPUSH
24698: LD_INT 1
24700: PPUSH
24701: CALL_OW 3
24705: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24706: LD_VAR 0 2
24710: PPUSH
24711: LD_VAR 0 3
24715: PPUSH
24716: CALL 24916 0 2
24720: PUSH
24721: LD_VAR 0 11
24725: PUSH
24726: EMPTY
24727: EQUAL
24728: OR
24729: IFFALSE 24674
// if not control in _control then
24731: LD_VAR 0 4
24735: PUSH
24736: LD_VAR 0 12
24740: IN
24741: NOT
24742: IFFALSE 24768
// control := _control [ rand ( 1 , _control ) ] ;
24744: LD_ADDR_VAR 0 4
24748: PUSH
24749: LD_VAR 0 12
24753: PUSH
24754: LD_INT 1
24756: PPUSH
24757: LD_VAR 0 12
24761: PPUSH
24762: CALL_OW 12
24766: ARRAY
24767: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_VAR 0 5
24777: PPUSH
24778: CALL 25136 0 2
24782: NOT
24783: IFFALSE 24842
// repeat weapon := _weapon [ 1 ] ;
24785: LD_ADDR_VAR 0 5
24789: PUSH
24790: LD_VAR 0 10
24794: PUSH
24795: LD_INT 1
24797: ARRAY
24798: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24799: LD_ADDR_VAR 0 10
24803: PUSH
24804: LD_VAR 0 10
24808: PPUSH
24809: LD_INT 1
24811: PPUSH
24812: CALL_OW 3
24816: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24817: LD_VAR 0 2
24821: PPUSH
24822: LD_VAR 0 5
24826: PPUSH
24827: CALL 25136 0 2
24831: PUSH
24832: LD_VAR 0 10
24836: PUSH
24837: EMPTY
24838: EQUAL
24839: OR
24840: IFFALSE 24785
// result := [ ] ;
24842: LD_ADDR_VAR 0 6
24846: PUSH
24847: EMPTY
24848: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24849: LD_VAR 0 1
24853: PPUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_VAR 0 3
24863: PPUSH
24864: LD_VAR 0 4
24868: PPUSH
24869: LD_VAR 0 5
24873: PPUSH
24874: CALL_OW 448
24878: IFFALSE 24911
// result := [ chassis , engine , control , weapon ] ;
24880: LD_ADDR_VAR 0 6
24884: PUSH
24885: LD_VAR 0 2
24889: PUSH
24890: LD_VAR 0 3
24894: PUSH
24895: LD_VAR 0 4
24899: PUSH
24900: LD_VAR 0 5
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: ST_TO_ADDR
// end ;
24911: LD_VAR 0 6
24915: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24916: LD_INT 0
24918: PPUSH
// if not chassis or not engine then
24919: LD_VAR 0 1
24923: NOT
24924: PUSH
24925: LD_VAR 0 2
24929: NOT
24930: OR
24931: IFFALSE 24935
// exit ;
24933: GO 25131
// case engine of engine_solar :
24935: LD_VAR 0 2
24939: PUSH
24940: LD_INT 2
24942: DOUBLE
24943: EQUAL
24944: IFTRUE 24948
24946: GO 24986
24948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24949: LD_ADDR_VAR 0 3
24953: PUSH
24954: LD_INT 11
24956: PUSH
24957: LD_INT 12
24959: PUSH
24960: LD_INT 13
24962: PUSH
24963: LD_INT 14
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
24984: GO 25115
24986: LD_INT 1
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25056
24994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24995: LD_ADDR_VAR 0 3
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 12
25005: PUSH
25006: LD_INT 13
25008: PUSH
25009: LD_INT 14
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: LD_INT 3
25020: PUSH
25021: LD_INT 4
25023: PUSH
25024: LD_INT 5
25026: PUSH
25027: LD_INT 21
25029: PUSH
25030: LD_INT 23
25032: PUSH
25033: LD_INT 22
25035: PUSH
25036: LD_INT 24
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: ST_TO_ADDR
25054: GO 25115
25056: LD_INT 3
25058: DOUBLE
25059: EQUAL
25060: IFTRUE 25064
25062: GO 25114
25064: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_INT 13
25072: PUSH
25073: LD_INT 14
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: LD_INT 4
25084: PUSH
25085: LD_INT 5
25087: PUSH
25088: LD_INT 21
25090: PUSH
25091: LD_INT 22
25093: PUSH
25094: LD_INT 23
25096: PUSH
25097: LD_INT 24
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
25112: GO 25115
25114: POP
// result := ( chassis in result ) ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_VAR 0 1
25124: PUSH
25125: LD_VAR 0 3
25129: IN
25130: ST_TO_ADDR
// end ;
25131: LD_VAR 0 3
25135: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25136: LD_INT 0
25138: PPUSH
// if not chassis or not weapon then
25139: LD_VAR 0 1
25143: NOT
25144: PUSH
25145: LD_VAR 0 2
25149: NOT
25150: OR
25151: IFFALSE 25155
// exit ;
25153: GO 26181
// case weapon of us_machine_gun :
25155: LD_VAR 0 2
25159: PUSH
25160: LD_INT 2
25162: DOUBLE
25163: EQUAL
25164: IFTRUE 25168
25166: GO 25198
25168: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 2
25179: PUSH
25180: LD_INT 3
25182: PUSH
25183: LD_INT 4
25185: PUSH
25186: LD_INT 5
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: ST_TO_ADDR
25196: GO 26165
25198: LD_INT 3
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25236
25206: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25207: LD_ADDR_VAR 0 3
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 4
25223: PUSH
25224: LD_INT 5
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: ST_TO_ADDR
25234: GO 26165
25236: LD_INT 11
25238: DOUBLE
25239: EQUAL
25240: IFTRUE 25244
25242: GO 25274
25244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 3
25258: PUSH
25259: LD_INT 4
25261: PUSH
25262: LD_INT 5
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: ST_TO_ADDR
25272: GO 26165
25274: LD_INT 4
25276: DOUBLE
25277: EQUAL
25278: IFTRUE 25282
25280: GO 25308
25282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 3
25293: PUSH
25294: LD_INT 4
25296: PUSH
25297: LD_INT 5
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
25306: GO 26165
25308: LD_INT 5
25310: DOUBLE
25311: EQUAL
25312: IFTRUE 25316
25314: GO 25342
25316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25317: LD_ADDR_VAR 0 3
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 3
25327: PUSH
25328: LD_INT 4
25330: PUSH
25331: LD_INT 5
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 26165
25342: LD_INT 9
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25376
25350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 4
25364: PUSH
25365: LD_INT 5
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: ST_TO_ADDR
25374: GO 26165
25376: LD_INT 7
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25410
25384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 4
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: ST_TO_ADDR
25408: GO 26165
25410: LD_INT 12
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25418
25416: GO 25444
25418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: LD_INT 4
25432: PUSH
25433: LD_INT 5
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
25442: GO 26165
25444: LD_INT 13
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 25478
25452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25453: LD_ADDR_VAR 0 3
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 3
25463: PUSH
25464: LD_INT 4
25466: PUSH
25467: LD_INT 5
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: ST_TO_ADDR
25476: GO 26165
25478: LD_INT 14
25480: DOUBLE
25481: EQUAL
25482: IFTRUE 25486
25484: GO 25504
25486: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_INT 4
25494: PUSH
25495: LD_INT 5
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: ST_TO_ADDR
25502: GO 26165
25504: LD_INT 6
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25512
25510: GO 25530
25512: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25513: LD_ADDR_VAR 0 3
25517: PUSH
25518: LD_INT 4
25520: PUSH
25521: LD_INT 5
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: ST_TO_ADDR
25528: GO 26165
25530: LD_INT 10
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25556
25538: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25539: LD_ADDR_VAR 0 3
25543: PUSH
25544: LD_INT 4
25546: PUSH
25547: LD_INT 5
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: ST_TO_ADDR
25554: GO 26165
25556: LD_INT 22
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25590
25564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_INT 11
25572: PUSH
25573: LD_INT 12
25575: PUSH
25576: LD_INT 13
25578: PUSH
25579: LD_INT 14
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
25588: GO 26165
25590: LD_INT 23
25592: DOUBLE
25593: EQUAL
25594: IFTRUE 25598
25596: GO 25624
25598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25599: LD_ADDR_VAR 0 3
25603: PUSH
25604: LD_INT 11
25606: PUSH
25607: LD_INT 12
25609: PUSH
25610: LD_INT 13
25612: PUSH
25613: LD_INT 14
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
25622: GO 26165
25624: LD_INT 24
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25632
25630: GO 25658
25632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25633: LD_ADDR_VAR 0 3
25637: PUSH
25638: LD_INT 11
25640: PUSH
25641: LD_INT 12
25643: PUSH
25644: LD_INT 13
25646: PUSH
25647: LD_INT 14
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: ST_TO_ADDR
25656: GO 26165
25658: LD_INT 30
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25692
25666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: LD_INT 11
25674: PUSH
25675: LD_INT 12
25677: PUSH
25678: LD_INT 13
25680: PUSH
25681: LD_INT 14
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: ST_TO_ADDR
25690: GO 26165
25692: LD_INT 25
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25718
25700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_INT 13
25708: PUSH
25709: LD_INT 14
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: ST_TO_ADDR
25716: GO 26165
25718: LD_INT 27
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25744
25726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_INT 13
25734: PUSH
25735: LD_INT 14
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 26165
25744: LD_INT 28
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25770
25752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 13
25760: PUSH
25761: LD_INT 14
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 26165
25770: LD_INT 29
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25796
25778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 13
25786: PUSH
25787: LD_INT 14
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: ST_TO_ADDR
25794: GO 26165
25796: LD_INT 31
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25822
25804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_INT 13
25812: PUSH
25813: LD_INT 14
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: ST_TO_ADDR
25820: GO 26165
25822: LD_INT 26
25824: DOUBLE
25825: EQUAL
25826: IFTRUE 25830
25828: GO 25848
25830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_INT 13
25838: PUSH
25839: LD_INT 14
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: ST_TO_ADDR
25846: GO 26165
25848: LD_INT 42
25850: DOUBLE
25851: EQUAL
25852: IFTRUE 25856
25854: GO 25882
25856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 22
25867: PUSH
25868: LD_INT 23
25870: PUSH
25871: LD_INT 24
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
25880: GO 26165
25882: LD_INT 43
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25916
25890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 22
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 24
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: ST_TO_ADDR
25914: GO 26165
25916: LD_INT 44
25918: DOUBLE
25919: EQUAL
25920: IFTRUE 25924
25922: GO 25950
25924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 21
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_INT 23
25938: PUSH
25939: LD_INT 24
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: ST_TO_ADDR
25948: GO 26165
25950: LD_INT 45
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 25984
25958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 21
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_INT 23
25972: PUSH
25973: LD_INT 24
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
25982: GO 26165
25984: LD_INT 49
25986: DOUBLE
25987: EQUAL
25988: IFTRUE 25992
25990: GO 26018
25992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 21
26000: PUSH
26001: LD_INT 22
26003: PUSH
26004: LD_INT 23
26006: PUSH
26007: LD_INT 24
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
26016: GO 26165
26018: LD_INT 51
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26052
26026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 24
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 26165
26052: LD_INT 52
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26086
26060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 22
26071: PUSH
26072: LD_INT 23
26074: PUSH
26075: LD_INT 24
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
26084: GO 26165
26086: LD_INT 53
26088: DOUBLE
26089: EQUAL
26090: IFTRUE 26094
26092: GO 26112
26094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_INT 23
26102: PUSH
26103: LD_INT 24
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: ST_TO_ADDR
26110: GO 26165
26112: LD_INT 46
26114: DOUBLE
26115: EQUAL
26116: IFTRUE 26120
26118: GO 26138
26120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26121: LD_ADDR_VAR 0 3
26125: PUSH
26126: LD_INT 23
26128: PUSH
26129: LD_INT 24
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: ST_TO_ADDR
26136: GO 26165
26138: LD_INT 47
26140: DOUBLE
26141: EQUAL
26142: IFTRUE 26146
26144: GO 26164
26146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: LD_INT 23
26154: PUSH
26155: LD_INT 24
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: ST_TO_ADDR
26162: GO 26165
26164: POP
// result := ( chassis in result ) ;
26165: LD_ADDR_VAR 0 3
26169: PUSH
26170: LD_VAR 0 1
26174: PUSH
26175: LD_VAR 0 3
26179: IN
26180: ST_TO_ADDR
// end ;
26181: LD_VAR 0 3
26185: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
// result := array ;
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: LD_VAR 0 1
26204: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26205: LD_VAR 0 1
26209: NOT
26210: PUSH
26211: LD_VAR 0 2
26215: NOT
26216: OR
26217: PUSH
26218: LD_VAR 0 3
26222: NOT
26223: OR
26224: PUSH
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 1
26234: GREATER
26235: OR
26236: PUSH
26237: LD_VAR 0 3
26241: PUSH
26242: LD_VAR 0 1
26246: GREATER
26247: OR
26248: IFFALSE 26252
// exit ;
26250: GO 26548
// if direction then
26252: LD_VAR 0 4
26256: IFFALSE 26320
// begin d := 1 ;
26258: LD_ADDR_VAR 0 9
26262: PUSH
26263: LD_INT 1
26265: ST_TO_ADDR
// if i_from > i_to then
26266: LD_VAR 0 2
26270: PUSH
26271: LD_VAR 0 3
26275: GREATER
26276: IFFALSE 26302
// length := ( array - i_from ) + i_to else
26278: LD_ADDR_VAR 0 11
26282: PUSH
26283: LD_VAR 0 1
26287: PUSH
26288: LD_VAR 0 2
26292: MINUS
26293: PUSH
26294: LD_VAR 0 3
26298: PLUS
26299: ST_TO_ADDR
26300: GO 26318
// length := i_to - i_from ;
26302: LD_ADDR_VAR 0 11
26306: PUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 2
26316: MINUS
26317: ST_TO_ADDR
// end else
26318: GO 26381
// begin d := - 1 ;
26320: LD_ADDR_VAR 0 9
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: ST_TO_ADDR
// if i_from > i_to then
26329: LD_VAR 0 2
26333: PUSH
26334: LD_VAR 0 3
26338: GREATER
26339: IFFALSE 26359
// length := i_from - i_to else
26341: LD_ADDR_VAR 0 11
26345: PUSH
26346: LD_VAR 0 2
26350: PUSH
26351: LD_VAR 0 3
26355: MINUS
26356: ST_TO_ADDR
26357: GO 26381
// length := ( array - i_to ) + i_from ;
26359: LD_ADDR_VAR 0 11
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_VAR 0 3
26373: MINUS
26374: PUSH
26375: LD_VAR 0 2
26379: PLUS
26380: ST_TO_ADDR
// end ; if not length then
26381: LD_VAR 0 11
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26548
// tmp := array ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 1
26399: ST_TO_ADDR
// for i = 1 to length do
26400: LD_ADDR_VAR 0 6
26404: PUSH
26405: DOUBLE
26406: LD_INT 1
26408: DEC
26409: ST_TO_ADDR
26410: LD_VAR 0 11
26414: PUSH
26415: FOR_TO
26416: IFFALSE 26536
// begin for j = 1 to array do
26418: LD_ADDR_VAR 0 7
26422: PUSH
26423: DOUBLE
26424: LD_INT 1
26426: DEC
26427: ST_TO_ADDR
26428: LD_VAR 0 1
26432: PUSH
26433: FOR_TO
26434: IFFALSE 26522
// begin k := j + d ;
26436: LD_ADDR_VAR 0 8
26440: PUSH
26441: LD_VAR 0 7
26445: PUSH
26446: LD_VAR 0 9
26450: PLUS
26451: ST_TO_ADDR
// if k > array then
26452: LD_VAR 0 8
26456: PUSH
26457: LD_VAR 0 1
26461: GREATER
26462: IFFALSE 26472
// k := 1 ;
26464: LD_ADDR_VAR 0 8
26468: PUSH
26469: LD_INT 1
26471: ST_TO_ADDR
// if not k then
26472: LD_VAR 0 8
26476: NOT
26477: IFFALSE 26489
// k := array ;
26479: LD_ADDR_VAR 0 8
26483: PUSH
26484: LD_VAR 0 1
26488: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26489: LD_ADDR_VAR 0 10
26493: PUSH
26494: LD_VAR 0 10
26498: PPUSH
26499: LD_VAR 0 8
26503: PPUSH
26504: LD_VAR 0 1
26508: PUSH
26509: LD_VAR 0 7
26513: ARRAY
26514: PPUSH
26515: CALL_OW 1
26519: ST_TO_ADDR
// end ;
26520: GO 26433
26522: POP
26523: POP
// array := tmp ;
26524: LD_ADDR_VAR 0 1
26528: PUSH
26529: LD_VAR 0 10
26533: ST_TO_ADDR
// end ;
26534: GO 26415
26536: POP
26537: POP
// result := array ;
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: LD_VAR 0 1
26547: ST_TO_ADDR
// end ;
26548: LD_VAR 0 5
26552: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26553: LD_INT 0
26555: PPUSH
26556: PPUSH
// result := 0 ;
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 0
26564: ST_TO_ADDR
// if not array or not value in array then
26565: LD_VAR 0 1
26569: NOT
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: LD_VAR 0 1
26580: IN
26581: NOT
26582: OR
26583: IFFALSE 26587
// exit ;
26585: GO 26641
// for i = 1 to array do
26587: LD_ADDR_VAR 0 4
26591: PUSH
26592: DOUBLE
26593: LD_INT 1
26595: DEC
26596: ST_TO_ADDR
26597: LD_VAR 0 1
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26639
// if value = array [ i ] then
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 1
26614: PUSH
26615: LD_VAR 0 4
26619: ARRAY
26620: EQUAL
26621: IFFALSE 26637
// begin result := i ;
26623: LD_ADDR_VAR 0 3
26627: PUSH
26628: LD_VAR 0 4
26632: ST_TO_ADDR
// exit ;
26633: POP
26634: POP
26635: GO 26641
// end ;
26637: GO 26602
26639: POP
26640: POP
// end ;
26641: LD_VAR 0 3
26645: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26646: LD_INT 0
26648: PPUSH
// vc_chassis := chassis ;
26649: LD_ADDR_OWVAR 37
26653: PUSH
26654: LD_VAR 0 1
26658: ST_TO_ADDR
// vc_engine := engine ;
26659: LD_ADDR_OWVAR 39
26663: PUSH
26664: LD_VAR 0 2
26668: ST_TO_ADDR
// vc_control := control ;
26669: LD_ADDR_OWVAR 38
26673: PUSH
26674: LD_VAR 0 3
26678: ST_TO_ADDR
// vc_weapon := weapon ;
26679: LD_ADDR_OWVAR 40
26683: PUSH
26684: LD_VAR 0 4
26688: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26689: LD_ADDR_OWVAR 41
26693: PUSH
26694: LD_VAR 0 5
26698: ST_TO_ADDR
// end ;
26699: LD_VAR 0 6
26703: RET
// export function WantPlant ( unit ) ; var task ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
// result := false ;
26708: LD_ADDR_VAR 0 2
26712: PUSH
26713: LD_INT 0
26715: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_VAR 0 1
26725: PPUSH
26726: CALL_OW 437
26730: ST_TO_ADDR
// if task then
26731: LD_VAR 0 3
26735: IFFALSE 26763
// if task [ 1 ] [ 1 ] = p then
26737: LD_VAR 0 3
26741: PUSH
26742: LD_INT 1
26744: ARRAY
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: PUSH
26750: LD_STRING p
26752: EQUAL
26753: IFFALSE 26763
// result := true ;
26755: LD_ADDR_VAR 0 2
26759: PUSH
26760: LD_INT 1
26762: ST_TO_ADDR
// end ;
26763: LD_VAR 0 2
26767: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26768: LD_INT 0
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
// if pos < 1 then
26774: LD_VAR 0 2
26778: PUSH
26779: LD_INT 1
26781: LESS
26782: IFFALSE 26786
// exit ;
26784: GO 27089
// if pos = 1 then
26786: LD_VAR 0 2
26790: PUSH
26791: LD_INT 1
26793: EQUAL
26794: IFFALSE 26827
// result := Replace ( arr , pos [ 1 ] , value ) else
26796: LD_ADDR_VAR 0 4
26800: PUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: LD_VAR 0 2
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 1
26824: ST_TO_ADDR
26825: GO 27089
// begin tmp := arr ;
26827: LD_ADDR_VAR 0 6
26831: PUSH
26832: LD_VAR 0 1
26836: ST_TO_ADDR
// s_arr := [ tmp ] ;
26837: LD_ADDR_VAR 0 7
26841: PUSH
26842: LD_VAR 0 6
26846: PUSH
26847: EMPTY
26848: LIST
26849: ST_TO_ADDR
// for i = 1 to pos - 1 do
26850: LD_ADDR_VAR 0 5
26854: PUSH
26855: DOUBLE
26856: LD_INT 1
26858: DEC
26859: ST_TO_ADDR
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: MINUS
26868: PUSH
26869: FOR_TO
26870: IFFALSE 26915
// begin tmp := tmp [ pos [ i ] ] ;
26872: LD_ADDR_VAR 0 6
26876: PUSH
26877: LD_VAR 0 6
26881: PUSH
26882: LD_VAR 0 2
26886: PUSH
26887: LD_VAR 0 5
26891: ARRAY
26892: ARRAY
26893: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26894: LD_ADDR_VAR 0 7
26898: PUSH
26899: LD_VAR 0 7
26903: PUSH
26904: LD_VAR 0 6
26908: PUSH
26909: EMPTY
26910: LIST
26911: ADD
26912: ST_TO_ADDR
// end ;
26913: GO 26869
26915: POP
26916: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26917: LD_ADDR_VAR 0 6
26921: PUSH
26922: LD_VAR 0 6
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PPUSH
26938: LD_VAR 0 3
26942: PPUSH
26943: CALL_OW 1
26947: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26948: LD_ADDR_VAR 0 7
26952: PUSH
26953: LD_VAR 0 7
26957: PPUSH
26958: LD_VAR 0 7
26962: PPUSH
26963: LD_VAR 0 6
26967: PPUSH
26968: CALL_OW 1
26972: ST_TO_ADDR
// for i = s_arr downto 2 do
26973: LD_ADDR_VAR 0 5
26977: PUSH
26978: DOUBLE
26979: LD_VAR 0 7
26983: INC
26984: ST_TO_ADDR
26985: LD_INT 2
26987: PUSH
26988: FOR_DOWNTO
26989: IFFALSE 27073
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26991: LD_ADDR_VAR 0 6
26995: PUSH
26996: LD_VAR 0 7
27000: PUSH
27001: LD_VAR 0 5
27005: PUSH
27006: LD_INT 1
27008: MINUS
27009: ARRAY
27010: PPUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 5
27020: PUSH
27021: LD_INT 1
27023: MINUS
27024: ARRAY
27025: PPUSH
27026: LD_VAR 0 7
27030: PUSH
27031: LD_VAR 0 5
27035: ARRAY
27036: PPUSH
27037: CALL_OW 1
27041: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27042: LD_ADDR_VAR 0 7
27046: PUSH
27047: LD_VAR 0 7
27051: PPUSH
27052: LD_VAR 0 5
27056: PUSH
27057: LD_INT 1
27059: MINUS
27060: PPUSH
27061: LD_VAR 0 6
27065: PPUSH
27066: CALL_OW 1
27070: ST_TO_ADDR
// end ;
27071: GO 26988
27073: POP
27074: POP
// result := s_arr [ 1 ] ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_VAR 0 7
27084: PUSH
27085: LD_INT 1
27087: ARRAY
27088: ST_TO_ADDR
// end ; end ;
27089: LD_VAR 0 4
27093: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27094: LD_INT 0
27096: PPUSH
27097: PPUSH
// if not list then
27098: LD_VAR 0 1
27102: NOT
27103: IFFALSE 27107
// exit ;
27105: GO 27198
// i := list [ pos1 ] ;
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_VAR 0 1
27116: PUSH
27117: LD_VAR 0 2
27121: ARRAY
27122: ST_TO_ADDR
// if not i then
27123: LD_VAR 0 5
27127: NOT
27128: IFFALSE 27132
// exit ;
27130: GO 27198
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27132: LD_ADDR_VAR 0 1
27136: PUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_VAR 0 1
27151: PUSH
27152: LD_VAR 0 3
27156: ARRAY
27157: PPUSH
27158: CALL_OW 1
27162: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27163: LD_ADDR_VAR 0 1
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_VAR 0 3
27177: PPUSH
27178: LD_VAR 0 5
27182: PPUSH
27183: CALL_OW 1
27187: ST_TO_ADDR
// result := list ;
27188: LD_ADDR_VAR 0 4
27192: PUSH
27193: LD_VAR 0 1
27197: ST_TO_ADDR
// end ;
27198: LD_VAR 0 4
27202: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27203: LD_INT 0
27205: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_VAR 0 1
27215: PPUSH
27216: CALL_OW 250
27220: PPUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 251
27230: PPUSH
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_VAR 0 3
27240: PPUSH
27241: LD_VAR 0 4
27245: PPUSH
27246: CALL 27256 0 5
27250: ST_TO_ADDR
// end ;
27251: LD_VAR 0 5
27255: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27256: LD_INT 0
27258: PPUSH
27259: PPUSH
27260: PPUSH
27261: PPUSH
// if not list then
27262: LD_VAR 0 3
27266: NOT
27267: IFFALSE 27271
// exit ;
27269: GO 27659
// result := [ ] ;
27271: LD_ADDR_VAR 0 6
27275: PUSH
27276: EMPTY
27277: ST_TO_ADDR
// for i in list do
27278: LD_ADDR_VAR 0 7
27282: PUSH
27283: LD_VAR 0 3
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27491
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27291: LD_ADDR_VAR 0 9
27295: PUSH
27296: LD_VAR 0 7
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_VAR 0 2
27310: PPUSH
27311: CALL_OW 297
27315: ST_TO_ADDR
// if not result then
27316: LD_VAR 0 6
27320: NOT
27321: IFFALSE 27347
// result := [ [ i , tmp ] ] else
27323: LD_ADDR_VAR 0 6
27327: PUSH
27328: LD_VAR 0 7
27332: PUSH
27333: LD_VAR 0 9
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: ST_TO_ADDR
27345: GO 27489
// begin if result [ result ] [ 2 ] < tmp then
27347: LD_VAR 0 6
27351: PUSH
27352: LD_VAR 0 6
27356: ARRAY
27357: PUSH
27358: LD_INT 2
27360: ARRAY
27361: PUSH
27362: LD_VAR 0 9
27366: LESS
27367: IFFALSE 27409
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27369: LD_ADDR_VAR 0 6
27373: PUSH
27374: LD_VAR 0 6
27378: PPUSH
27379: LD_VAR 0 6
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: PPUSH
27388: LD_VAR 0 7
27392: PUSH
27393: LD_VAR 0 9
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 2
27406: ST_TO_ADDR
27407: GO 27489
// for j = 1 to result do
27409: LD_ADDR_VAR 0 8
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 6
27423: PUSH
27424: FOR_TO
27425: IFFALSE 27487
// begin if tmp < result [ j ] [ 2 ] then
27427: LD_VAR 0 9
27431: PUSH
27432: LD_VAR 0 6
27436: PUSH
27437: LD_VAR 0 8
27441: ARRAY
27442: PUSH
27443: LD_INT 2
27445: ARRAY
27446: LESS
27447: IFFALSE 27485
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27449: LD_ADDR_VAR 0 6
27453: PUSH
27454: LD_VAR 0 6
27458: PPUSH
27459: LD_VAR 0 8
27463: PPUSH
27464: LD_VAR 0 7
27468: PUSH
27469: LD_VAR 0 9
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 2
27482: ST_TO_ADDR
// break ;
27483: GO 27487
// end ; end ;
27485: GO 27424
27487: POP
27488: POP
// end ; end ;
27489: GO 27288
27491: POP
27492: POP
// if result and not asc then
27493: LD_VAR 0 6
27497: PUSH
27498: LD_VAR 0 4
27502: NOT
27503: AND
27504: IFFALSE 27579
// begin tmp := result ;
27506: LD_ADDR_VAR 0 9
27510: PUSH
27511: LD_VAR 0 6
27515: ST_TO_ADDR
// for i = tmp downto 1 do
27516: LD_ADDR_VAR 0 7
27520: PUSH
27521: DOUBLE
27522: LD_VAR 0 9
27526: INC
27527: ST_TO_ADDR
27528: LD_INT 1
27530: PUSH
27531: FOR_DOWNTO
27532: IFFALSE 27577
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27534: LD_ADDR_VAR 0 6
27538: PUSH
27539: LD_VAR 0 6
27543: PPUSH
27544: LD_VAR 0 9
27548: PUSH
27549: LD_VAR 0 7
27553: MINUS
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: PPUSH
27559: LD_VAR 0 9
27563: PUSH
27564: LD_VAR 0 7
27568: ARRAY
27569: PPUSH
27570: CALL_OW 1
27574: ST_TO_ADDR
27575: GO 27531
27577: POP
27578: POP
// end ; tmp := [ ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: EMPTY
27585: ST_TO_ADDR
// if mode then
27586: LD_VAR 0 5
27590: IFFALSE 27659
// begin for i = 1 to result do
27592: LD_ADDR_VAR 0 7
27596: PUSH
27597: DOUBLE
27598: LD_INT 1
27600: DEC
27601: ST_TO_ADDR
27602: LD_VAR 0 6
27606: PUSH
27607: FOR_TO
27608: IFFALSE 27647
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27610: LD_ADDR_VAR 0 9
27614: PUSH
27615: LD_VAR 0 9
27619: PPUSH
27620: LD_VAR 0 7
27624: PPUSH
27625: LD_VAR 0 6
27629: PUSH
27630: LD_VAR 0 7
27634: ARRAY
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: CALL_OW 1
27644: ST_TO_ADDR
27645: GO 27607
27647: POP
27648: POP
// result := tmp ;
27649: LD_ADDR_VAR 0 6
27653: PUSH
27654: LD_VAR 0 9
27658: ST_TO_ADDR
// end ; end ;
27659: LD_VAR 0 6
27663: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27664: LD_INT 0
27666: PPUSH
27667: PPUSH
27668: PPUSH
27669: PPUSH
27670: PPUSH
27671: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// if not x or not y then
27694: LD_VAR 0 2
27698: NOT
27699: PUSH
27700: LD_VAR 0 3
27704: NOT
27705: OR
27706: IFFALSE 27710
// exit ;
27708: GO 29356
// if not range then
27710: LD_VAR 0 4
27714: NOT
27715: IFFALSE 27725
// range := 10 ;
27717: LD_ADDR_VAR 0 4
27721: PUSH
27722: LD_INT 10
27724: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27725: LD_ADDR_VAR 0 8
27729: PUSH
27730: LD_INT 81
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 92
27744: PUSH
27745: LD_VAR 0 2
27749: PUSH
27750: LD_VAR 0 3
27754: PUSH
27755: LD_VAR 0 4
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 3
27768: PUSH
27769: LD_INT 21
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: ST_TO_ADDR
// if not tmp then
27793: LD_VAR 0 8
27797: NOT
27798: IFFALSE 27802
// exit ;
27800: GO 29356
// for i in tmp do
27802: LD_ADDR_VAR 0 6
27806: PUSH
27807: LD_VAR 0 8
27811: PUSH
27812: FOR_IN
27813: IFFALSE 29331
// begin points := [ 0 , 0 , 0 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// bpoints := 1 ;
27834: LD_ADDR_VAR 0 10
27838: PUSH
27839: LD_INT 1
27841: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 247
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 28438
27860: POP
// begin if GetClass ( i ) = 1 then
27861: LD_VAR 0 6
27865: PPUSH
27866: CALL_OW 257
27870: PUSH
27871: LD_INT 1
27873: EQUAL
27874: IFFALSE 27895
// points := [ 10 , 5 , 3 ] ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_INT 10
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27895: LD_VAR 0 6
27899: PPUSH
27900: CALL_OW 257
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: LD_INT 4
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: IN
27919: IFFALSE 27940
// points := [ 3 , 2 , 1 ] ;
27921: LD_ADDR_VAR 0 9
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27940: LD_VAR 0 6
27944: PPUSH
27945: CALL_OW 257
27949: PUSH
27950: LD_INT 5
27952: EQUAL
27953: IFFALSE 27974
// points := [ 130 , 5 , 2 ] ;
27955: LD_ADDR_VAR 0 9
27959: PUSH
27960: LD_INT 130
27962: PUSH
27963: LD_INT 5
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27974: LD_VAR 0 6
27978: PPUSH
27979: CALL_OW 257
27983: PUSH
27984: LD_INT 8
27986: EQUAL
27987: IFFALSE 28008
// points := [ 35 , 35 , 30 ] ;
27989: LD_ADDR_VAR 0 9
27993: PUSH
27994: LD_INT 35
27996: PUSH
27997: LD_INT 35
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28008: LD_VAR 0 6
28012: PPUSH
28013: CALL_OW 257
28017: PUSH
28018: LD_INT 9
28020: EQUAL
28021: IFFALSE 28042
// points := [ 20 , 55 , 40 ] ;
28023: LD_ADDR_VAR 0 9
28027: PUSH
28028: LD_INT 20
28030: PUSH
28031: LD_INT 55
28033: PUSH
28034: LD_INT 40
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 257
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: LD_INT 16
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: IN
28062: IFFALSE 28083
// points := [ 5 , 3 , 2 ] ;
28064: LD_ADDR_VAR 0 9
28068: PUSH
28069: LD_INT 5
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 257
28092: PUSH
28093: LD_INT 17
28095: EQUAL
28096: IFFALSE 28117
// points := [ 100 , 50 , 75 ] ;
28098: LD_ADDR_VAR 0 9
28102: PUSH
28103: LD_INT 100
28105: PUSH
28106: LD_INT 50
28108: PUSH
28109: LD_INT 75
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28117: LD_VAR 0 6
28121: PPUSH
28122: CALL_OW 257
28126: PUSH
28127: LD_INT 15
28129: EQUAL
28130: IFFALSE 28151
// points := [ 10 , 5 , 3 ] ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_INT 10
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: LD_INT 3
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28151: LD_VAR 0 6
28155: PPUSH
28156: CALL_OW 257
28160: PUSH
28161: LD_INT 14
28163: EQUAL
28164: IFFALSE 28185
// points := [ 10 , 0 , 0 ] ;
28166: LD_ADDR_VAR 0 9
28170: PUSH
28171: LD_INT 10
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28185: LD_VAR 0 6
28189: PPUSH
28190: CALL_OW 257
28194: PUSH
28195: LD_INT 11
28197: EQUAL
28198: IFFALSE 28219
// points := [ 30 , 10 , 5 ] ;
28200: LD_ADDR_VAR 0 9
28204: PUSH
28205: LD_INT 30
28207: PUSH
28208: LD_INT 10
28210: PUSH
28211: LD_INT 5
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 5
28226: PPUSH
28227: CALL_OW 321
28231: PUSH
28232: LD_INT 2
28234: EQUAL
28235: IFFALSE 28252
// bpoints := bpoints * 1.8 ;
28237: LD_ADDR_VAR 0 10
28241: PUSH
28242: LD_VAR 0 10
28246: PUSH
28247: LD_REAL  1.80000000000000E+0000
28250: MUL
28251: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28252: LD_VAR 0 6
28256: PPUSH
28257: CALL_OW 257
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 4
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: IN
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_INT 51
28288: PPUSH
28289: CALL_OW 321
28293: PUSH
28294: LD_INT 2
28296: EQUAL
28297: AND
28298: IFFALSE 28315
// bpoints := bpoints * 1.2 ;
28300: LD_ADDR_VAR 0 10
28304: PUSH
28305: LD_VAR 0 10
28309: PUSH
28310: LD_REAL  1.20000000000000E+0000
28313: MUL
28314: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28315: LD_VAR 0 6
28319: PPUSH
28320: CALL_OW 257
28324: PUSH
28325: LD_INT 5
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: LD_INT 9
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: IN
28339: PUSH
28340: LD_VAR 0 1
28344: PPUSH
28345: LD_INT 52
28347: PPUSH
28348: CALL_OW 321
28352: PUSH
28353: LD_INT 2
28355: EQUAL
28356: AND
28357: IFFALSE 28374
// bpoints := bpoints * 1.5 ;
28359: LD_ADDR_VAR 0 10
28363: PUSH
28364: LD_VAR 0 10
28368: PUSH
28369: LD_REAL  1.50000000000000E+0000
28372: MUL
28373: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28374: LD_VAR 0 1
28378: PPUSH
28379: LD_INT 66
28381: PPUSH
28382: CALL_OW 321
28386: PUSH
28387: LD_INT 2
28389: EQUAL
28390: IFFALSE 28407
// bpoints := bpoints * 1.1 ;
28392: LD_ADDR_VAR 0 10
28396: PUSH
28397: LD_VAR 0 10
28401: PUSH
28402: LD_REAL  1.10000000000000E+0000
28405: MUL
28406: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: LD_VAR 0 10
28416: PUSH
28417: LD_VAR 0 6
28421: PPUSH
28422: LD_INT 1
28424: PPUSH
28425: CALL_OW 259
28429: PUSH
28430: LD_REAL  1.15000000000000E+0000
28433: MUL
28434: MUL
28435: ST_TO_ADDR
// end ; unit_vehicle :
28436: GO 29260
28438: LD_INT 2
28440: DOUBLE
28441: EQUAL
28442: IFTRUE 28446
28444: GO 29248
28446: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28447: LD_VAR 0 6
28451: PPUSH
28452: CALL_OW 264
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 42
28462: PUSH
28463: LD_INT 24
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: IN
28471: IFFALSE 28492
// points := [ 25 , 5 , 3 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28492: LD_VAR 0 6
28496: PPUSH
28497: CALL_OW 264
28501: PUSH
28502: LD_INT 4
28504: PUSH
28505: LD_INT 43
28507: PUSH
28508: LD_INT 25
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: IN
28516: IFFALSE 28537
// points := [ 40 , 15 , 5 ] ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_INT 40
28525: PUSH
28526: LD_INT 15
28528: PUSH
28529: LD_INT 5
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28537: LD_VAR 0 6
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_INT 3
28549: PUSH
28550: LD_INT 23
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: IN
28557: IFFALSE 28578
// points := [ 7 , 25 , 8 ] ;
28559: LD_ADDR_VAR 0 9
28563: PUSH
28564: LD_INT 7
28566: PUSH
28567: LD_INT 25
28569: PUSH
28570: LD_INT 8
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 5
28590: PUSH
28591: LD_INT 27
28593: PUSH
28594: LD_INT 44
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: IN
28602: IFFALSE 28623
// points := [ 14 , 50 , 16 ] ;
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: LD_INT 14
28611: PUSH
28612: LD_INT 50
28614: PUSH
28615: LD_INT 16
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 264
28632: PUSH
28633: LD_INT 6
28635: PUSH
28636: LD_INT 46
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: IN
28643: IFFALSE 28664
// points := [ 32 , 120 , 70 ] ;
28645: LD_ADDR_VAR 0 9
28649: PUSH
28650: LD_INT 32
28652: PUSH
28653: LD_INT 120
28655: PUSH
28656: LD_INT 70
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28664: LD_VAR 0 6
28668: PPUSH
28669: CALL_OW 264
28673: PUSH
28674: LD_INT 7
28676: PUSH
28677: LD_INT 28
28679: PUSH
28680: LD_INT 45
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: IN
28688: IFFALSE 28709
// points := [ 35 , 20 , 45 ] ;
28690: LD_ADDR_VAR 0 9
28694: PUSH
28695: LD_INT 35
28697: PUSH
28698: LD_INT 20
28700: PUSH
28701: LD_INT 45
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28709: LD_VAR 0 6
28713: PPUSH
28714: CALL_OW 264
28718: PUSH
28719: LD_INT 47
28721: PUSH
28722: EMPTY
28723: LIST
28724: IN
28725: IFFALSE 28746
// points := [ 67 , 45 , 75 ] ;
28727: LD_ADDR_VAR 0 9
28731: PUSH
28732: LD_INT 67
28734: PUSH
28735: LD_INT 45
28737: PUSH
28738: LD_INT 75
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28746: LD_VAR 0 6
28750: PPUSH
28751: CALL_OW 264
28755: PUSH
28756: LD_INT 26
28758: PUSH
28759: EMPTY
28760: LIST
28761: IN
28762: IFFALSE 28783
// points := [ 120 , 30 , 80 ] ;
28764: LD_ADDR_VAR 0 9
28768: PUSH
28769: LD_INT 120
28771: PUSH
28772: LD_INT 30
28774: PUSH
28775: LD_INT 80
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28783: LD_VAR 0 6
28787: PPUSH
28788: CALL_OW 264
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: EMPTY
28797: LIST
28798: IN
28799: IFFALSE 28820
// points := [ 40 , 1 , 1 ] ;
28801: LD_ADDR_VAR 0 9
28805: PUSH
28806: LD_INT 40
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28820: LD_VAR 0 6
28824: PPUSH
28825: CALL_OW 264
28829: PUSH
28830: LD_INT 29
28832: PUSH
28833: EMPTY
28834: LIST
28835: IN
28836: IFFALSE 28857
// points := [ 70 , 200 , 400 ] ;
28838: LD_ADDR_VAR 0 9
28842: PUSH
28843: LD_INT 70
28845: PUSH
28846: LD_INT 200
28848: PUSH
28849: LD_INT 400
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28857: LD_VAR 0 6
28861: PPUSH
28862: CALL_OW 264
28866: PUSH
28867: LD_INT 14
28869: PUSH
28870: LD_INT 53
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: IFFALSE 28898
// points := [ 40 , 10 , 20 ] ;
28879: LD_ADDR_VAR 0 9
28883: PUSH
28884: LD_INT 40
28886: PUSH
28887: LD_INT 10
28889: PUSH
28890: LD_INT 20
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28898: LD_VAR 0 6
28902: PPUSH
28903: CALL_OW 264
28907: PUSH
28908: LD_INT 9
28910: PUSH
28911: EMPTY
28912: LIST
28913: IN
28914: IFFALSE 28935
// points := [ 5 , 70 , 20 ] ;
28916: LD_ADDR_VAR 0 9
28920: PUSH
28921: LD_INT 5
28923: PUSH
28924: LD_INT 70
28926: PUSH
28927: LD_INT 20
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28935: LD_VAR 0 6
28939: PPUSH
28940: CALL_OW 264
28944: PUSH
28945: LD_INT 10
28947: PUSH
28948: EMPTY
28949: LIST
28950: IN
28951: IFFALSE 28972
// points := [ 35 , 110 , 70 ] ;
28953: LD_ADDR_VAR 0 9
28957: PUSH
28958: LD_INT 35
28960: PUSH
28961: LD_INT 110
28963: PUSH
28964: LD_INT 70
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28972: LD_VAR 0 6
28976: PPUSH
28977: CALL_OW 265
28981: PUSH
28982: LD_INT 25
28984: EQUAL
28985: IFFALSE 29006
// points := [ 80 , 65 , 100 ] ;
28987: LD_ADDR_VAR 0 9
28991: PUSH
28992: LD_INT 80
28994: PUSH
28995: LD_INT 65
28997: PUSH
28998: LD_INT 100
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29006: LD_VAR 0 6
29010: PPUSH
29011: CALL_OW 263
29015: PUSH
29016: LD_INT 1
29018: EQUAL
29019: IFFALSE 29054
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29021: LD_ADDR_VAR 0 10
29025: PUSH
29026: LD_VAR 0 10
29030: PUSH
29031: LD_VAR 0 6
29035: PPUSH
29036: CALL_OW 311
29040: PPUSH
29041: LD_INT 3
29043: PPUSH
29044: CALL_OW 259
29048: PUSH
29049: LD_INT 4
29051: MUL
29052: MUL
29053: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29054: LD_VAR 0 6
29058: PPUSH
29059: CALL_OW 263
29063: PUSH
29064: LD_INT 2
29066: EQUAL
29067: IFFALSE 29118
// begin j := IsControledBy ( i ) ;
29069: LD_ADDR_VAR 0 7
29073: PUSH
29074: LD_VAR 0 6
29078: PPUSH
29079: CALL_OW 312
29083: ST_TO_ADDR
// if j then
29084: LD_VAR 0 7
29088: IFFALSE 29118
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29090: LD_ADDR_VAR 0 10
29094: PUSH
29095: LD_VAR 0 10
29099: PUSH
29100: LD_VAR 0 7
29104: PPUSH
29105: LD_INT 3
29107: PPUSH
29108: CALL_OW 259
29112: PUSH
29113: LD_INT 3
29115: MUL
29116: MUL
29117: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29118: LD_VAR 0 6
29122: PPUSH
29123: CALL_OW 264
29127: PUSH
29128: LD_INT 5
29130: PUSH
29131: LD_INT 6
29133: PUSH
29134: LD_INT 46
29136: PUSH
29137: LD_INT 44
29139: PUSH
29140: LD_INT 47
29142: PUSH
29143: LD_INT 45
29145: PUSH
29146: LD_INT 28
29148: PUSH
29149: LD_INT 7
29151: PUSH
29152: LD_INT 27
29154: PUSH
29155: LD_INT 29
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: IN
29170: PUSH
29171: LD_VAR 0 1
29175: PPUSH
29176: LD_INT 52
29178: PPUSH
29179: CALL_OW 321
29183: PUSH
29184: LD_INT 2
29186: EQUAL
29187: AND
29188: IFFALSE 29205
// bpoints := bpoints * 1.2 ;
29190: LD_ADDR_VAR 0 10
29194: PUSH
29195: LD_VAR 0 10
29199: PUSH
29200: LD_REAL  1.20000000000000E+0000
29203: MUL
29204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29205: LD_VAR 0 6
29209: PPUSH
29210: CALL_OW 264
29214: PUSH
29215: LD_INT 6
29217: PUSH
29218: LD_INT 46
29220: PUSH
29221: LD_INT 47
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: LIST
29228: IN
29229: IFFALSE 29246
// bpoints := bpoints * 1.2 ;
29231: LD_ADDR_VAR 0 10
29235: PUSH
29236: LD_VAR 0 10
29240: PUSH
29241: LD_REAL  1.20000000000000E+0000
29244: MUL
29245: ST_TO_ADDR
// end ; unit_building :
29246: GO 29260
29248: LD_INT 3
29250: DOUBLE
29251: EQUAL
29252: IFTRUE 29256
29254: GO 29259
29256: POP
// ; end ;
29257: GO 29260
29259: POP
// for j = 1 to 3 do
29260: LD_ADDR_VAR 0 7
29264: PUSH
29265: DOUBLE
29266: LD_INT 1
29268: DEC
29269: ST_TO_ADDR
29270: LD_INT 3
29272: PUSH
29273: FOR_TO
29274: IFFALSE 29327
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_VAR 0 5
29285: PPUSH
29286: LD_VAR 0 7
29290: PPUSH
29291: LD_VAR 0 5
29295: PUSH
29296: LD_VAR 0 7
29300: ARRAY
29301: PUSH
29302: LD_VAR 0 9
29306: PUSH
29307: LD_VAR 0 7
29311: ARRAY
29312: PUSH
29313: LD_VAR 0 10
29317: MUL
29318: PLUS
29319: PPUSH
29320: CALL_OW 1
29324: ST_TO_ADDR
29325: GO 29273
29327: POP
29328: POP
// end ;
29329: GO 27812
29331: POP
29332: POP
// result := Replace ( result , 4 , tmp ) ;
29333: LD_ADDR_VAR 0 5
29337: PUSH
29338: LD_VAR 0 5
29342: PPUSH
29343: LD_INT 4
29345: PPUSH
29346: LD_VAR 0 8
29350: PPUSH
29351: CALL_OW 1
29355: ST_TO_ADDR
// end ;
29356: LD_VAR 0 5
29360: RET
// export function DangerAtRange ( unit , range ) ; begin
29361: LD_INT 0
29363: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29364: LD_ADDR_VAR 0 3
29368: PUSH
29369: LD_VAR 0 1
29373: PPUSH
29374: CALL_OW 255
29378: PPUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 250
29388: PPUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 251
29398: PPUSH
29399: LD_VAR 0 2
29403: PPUSH
29404: CALL 27664 0 4
29408: ST_TO_ADDR
// end ;
29409: LD_VAR 0 3
29413: RET
// export function DangerInArea ( side , area ) ; begin
29414: LD_INT 0
29416: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_INT 81
29429: PUSH
29430: LD_VAR 0 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 70
29443: ST_TO_ADDR
// end ;
29444: LD_VAR 0 3
29448: RET
// export function IsExtension ( b ) ; begin
29449: LD_INT 0
29451: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_VAR 0 1
29461: PUSH
29462: LD_INT 23
29464: PUSH
29465: LD_INT 20
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_INT 17
29473: PUSH
29474: LD_INT 24
29476: PUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 19
29482: PUSH
29483: LD_INT 16
29485: PUSH
29486: LD_INT 25
29488: PUSH
29489: LD_INT 18
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: IN
29504: ST_TO_ADDR
// end ;
29505: LD_VAR 0 2
29509: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
// result := [ ] ;
29515: LD_ADDR_VAR 0 4
29519: PUSH
29520: EMPTY
29521: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29522: LD_ADDR_VAR 0 5
29526: PUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: LD_INT 21
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 70
29546: ST_TO_ADDR
// if not tmp then
29547: LD_VAR 0 5
29551: NOT
29552: IFFALSE 29556
// exit ;
29554: GO 29620
// if checkLink then
29556: LD_VAR 0 3
29560: IFFALSE 29610
// begin for i in tmp do
29562: LD_ADDR_VAR 0 6
29566: PUSH
29567: LD_VAR 0 5
29571: PUSH
29572: FOR_IN
29573: IFFALSE 29608
// if GetBase ( i ) <> base then
29575: LD_VAR 0 6
29579: PPUSH
29580: CALL_OW 274
29584: PUSH
29585: LD_VAR 0 1
29589: NONEQUAL
29590: IFFALSE 29606
// ComLinkToBase ( base , i ) ;
29592: LD_VAR 0 1
29596: PPUSH
29597: LD_VAR 0 6
29601: PPUSH
29602: CALL_OW 169
29606: GO 29572
29608: POP
29609: POP
// end ; result := tmp ;
29610: LD_ADDR_VAR 0 4
29614: PUSH
29615: LD_VAR 0 5
29619: ST_TO_ADDR
// end ;
29620: LD_VAR 0 4
29624: RET
// export function ComComplete ( units , b ) ; var i ; begin
29625: LD_INT 0
29627: PPUSH
29628: PPUSH
// if not units then
29629: LD_VAR 0 1
29633: NOT
29634: IFFALSE 29638
// exit ;
29636: GO 29728
// for i in units do
29638: LD_ADDR_VAR 0 4
29642: PUSH
29643: LD_VAR 0 1
29647: PUSH
29648: FOR_IN
29649: IFFALSE 29726
// if BuildingStatus ( b ) = bs_build then
29651: LD_VAR 0 2
29655: PPUSH
29656: CALL_OW 461
29660: PUSH
29661: LD_INT 1
29663: EQUAL
29664: IFFALSE 29724
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29666: LD_VAR 0 4
29670: PPUSH
29671: LD_STRING h
29673: PUSH
29674: LD_VAR 0 2
29678: PPUSH
29679: CALL_OW 250
29683: PUSH
29684: LD_VAR 0 2
29688: PPUSH
29689: CALL_OW 251
29693: PUSH
29694: LD_VAR 0 2
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: PPUSH
29720: CALL_OW 446
29724: GO 29648
29726: POP
29727: POP
// end ;
29728: LD_VAR 0 3
29732: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29733: LD_INT 0
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29741: LD_VAR 0 1
29745: NOT
29746: PUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 263
29756: PUSH
29757: LD_INT 2
29759: EQUAL
29760: NOT
29761: OR
29762: IFFALSE 29766
// exit ;
29764: GO 30082
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29766: LD_ADDR_VAR 0 6
29770: PUSH
29771: LD_INT 22
29773: PUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 255
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: LD_INT 30
29793: PUSH
29794: LD_INT 36
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 34
29803: PUSH
29804: LD_INT 31
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PPUSH
29820: CALL_OW 69
29824: ST_TO_ADDR
// if not tmp then
29825: LD_VAR 0 6
29829: NOT
29830: IFFALSE 29834
// exit ;
29832: GO 30082
// result := [ ] ;
29834: LD_ADDR_VAR 0 2
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// for i in tmp do
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_VAR 0 6
29850: PUSH
29851: FOR_IN
29852: IFFALSE 29923
// begin t := UnitsInside ( i ) ;
29854: LD_ADDR_VAR 0 4
29858: PUSH
29859: LD_VAR 0 3
29863: PPUSH
29864: CALL_OW 313
29868: ST_TO_ADDR
// if t then
29869: LD_VAR 0 4
29873: IFFALSE 29921
// for j in t do
29875: LD_ADDR_VAR 0 7
29879: PUSH
29880: LD_VAR 0 4
29884: PUSH
29885: FOR_IN
29886: IFFALSE 29919
// result := Insert ( result , result + 1 , j ) ;
29888: LD_ADDR_VAR 0 2
29892: PUSH
29893: LD_VAR 0 2
29897: PPUSH
29898: LD_VAR 0 2
29902: PUSH
29903: LD_INT 1
29905: PLUS
29906: PPUSH
29907: LD_VAR 0 7
29911: PPUSH
29912: CALL_OW 2
29916: ST_TO_ADDR
29917: GO 29885
29919: POP
29920: POP
// end ;
29921: GO 29851
29923: POP
29924: POP
// if not result then
29925: LD_VAR 0 2
29929: NOT
29930: IFFALSE 29934
// exit ;
29932: GO 30082
// mech := result [ 1 ] ;
29934: LD_ADDR_VAR 0 5
29938: PUSH
29939: LD_VAR 0 2
29943: PUSH
29944: LD_INT 1
29946: ARRAY
29947: ST_TO_ADDR
// if result > 1 then
29948: LD_VAR 0 2
29952: PUSH
29953: LD_INT 1
29955: GREATER
29956: IFFALSE 30068
// for i = 2 to result do
29958: LD_ADDR_VAR 0 3
29962: PUSH
29963: DOUBLE
29964: LD_INT 2
29966: DEC
29967: ST_TO_ADDR
29968: LD_VAR 0 2
29972: PUSH
29973: FOR_TO
29974: IFFALSE 30066
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29976: LD_ADDR_VAR 0 4
29980: PUSH
29981: LD_VAR 0 2
29985: PUSH
29986: LD_VAR 0 3
29990: ARRAY
29991: PPUSH
29992: LD_INT 3
29994: PPUSH
29995: CALL_OW 259
29999: PUSH
30000: LD_VAR 0 2
30004: PUSH
30005: LD_VAR 0 3
30009: ARRAY
30010: PPUSH
30011: CALL_OW 432
30015: MINUS
30016: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30017: LD_VAR 0 4
30021: PUSH
30022: LD_VAR 0 5
30026: PPUSH
30027: LD_INT 3
30029: PPUSH
30030: CALL_OW 259
30034: PUSH
30035: LD_VAR 0 5
30039: PPUSH
30040: CALL_OW 432
30044: MINUS
30045: GREATEREQUAL
30046: IFFALSE 30064
// mech := result [ i ] ;
30048: LD_ADDR_VAR 0 5
30052: PUSH
30053: LD_VAR 0 2
30057: PUSH
30058: LD_VAR 0 3
30062: ARRAY
30063: ST_TO_ADDR
// end ;
30064: GO 29973
30066: POP
30067: POP
// ComLinkTo ( vehicle , mech ) ;
30068: LD_VAR 0 1
30072: PPUSH
30073: LD_VAR 0 5
30077: PPUSH
30078: CALL_OW 135
// end ;
30082: LD_VAR 0 2
30086: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30087: LD_INT 0
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
// result := [ ] ;
30102: LD_ADDR_VAR 0 7
30106: PUSH
30107: EMPTY
30108: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 266
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: IN
30129: NOT
30130: IFFALSE 30134
// exit ;
30132: GO 31768
// if name then
30134: LD_VAR 0 3
30138: IFFALSE 30154
// SetBName ( base_dep , name ) ;
30140: LD_VAR 0 1
30144: PPUSH
30145: LD_VAR 0 3
30149: PPUSH
30150: CALL_OW 500
// base := GetBase ( base_dep ) ;
30154: LD_ADDR_VAR 0 15
30158: PUSH
30159: LD_VAR 0 1
30163: PPUSH
30164: CALL_OW 274
30168: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30169: LD_ADDR_VAR 0 16
30173: PUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 255
30183: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30184: LD_ADDR_VAR 0 17
30188: PUSH
30189: LD_VAR 0 1
30193: PPUSH
30194: CALL_OW 248
30198: ST_TO_ADDR
// if sources then
30199: LD_VAR 0 5
30203: IFFALSE 30250
// for i = 1 to 3 do
30205: LD_ADDR_VAR 0 8
30209: PUSH
30210: DOUBLE
30211: LD_INT 1
30213: DEC
30214: ST_TO_ADDR
30215: LD_INT 3
30217: PUSH
30218: FOR_TO
30219: IFFALSE 30248
// AddResourceType ( base , i , sources [ i ] ) ;
30221: LD_VAR 0 15
30225: PPUSH
30226: LD_VAR 0 8
30230: PPUSH
30231: LD_VAR 0 5
30235: PUSH
30236: LD_VAR 0 8
30240: ARRAY
30241: PPUSH
30242: CALL_OW 276
30246: GO 30218
30248: POP
30249: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30250: LD_ADDR_VAR 0 18
30254: PUSH
30255: LD_VAR 0 15
30259: PPUSH
30260: LD_VAR 0 2
30264: PPUSH
30265: LD_INT 1
30267: PPUSH
30268: CALL 29510 0 3
30272: ST_TO_ADDR
// InitHc ;
30273: CALL_OW 19
// InitUc ;
30277: CALL_OW 18
// uc_side := side ;
30281: LD_ADDR_OWVAR 20
30285: PUSH
30286: LD_VAR 0 16
30290: ST_TO_ADDR
// uc_nation := nation ;
30291: LD_ADDR_OWVAR 21
30295: PUSH
30296: LD_VAR 0 17
30300: ST_TO_ADDR
// if buildings then
30301: LD_VAR 0 18
30305: IFFALSE 31627
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30307: LD_ADDR_VAR 0 19
30311: PUSH
30312: LD_VAR 0 18
30316: PPUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: LD_INT 29
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 30
30332: PUSH
30333: LD_INT 30
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: PPUSH
30345: CALL_OW 72
30349: ST_TO_ADDR
// if tmp then
30350: LD_VAR 0 19
30354: IFFALSE 30402
// for i in tmp do
30356: LD_ADDR_VAR 0 8
30360: PUSH
30361: LD_VAR 0 19
30365: PUSH
30366: FOR_IN
30367: IFFALSE 30400
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30369: LD_VAR 0 8
30373: PPUSH
30374: CALL_OW 250
30378: PPUSH
30379: LD_VAR 0 8
30383: PPUSH
30384: CALL_OW 251
30388: PPUSH
30389: LD_VAR 0 16
30393: PPUSH
30394: CALL_OW 441
30398: GO 30366
30400: POP
30401: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30402: LD_VAR 0 18
30406: PPUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 30
30412: PUSH
30413: LD_INT 32
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 30
30422: PUSH
30423: LD_INT 33
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: LIST
30434: PPUSH
30435: CALL_OW 72
30439: IFFALSE 30527
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30441: LD_ADDR_VAR 0 8
30445: PUSH
30446: LD_VAR 0 18
30450: PPUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 30
30456: PUSH
30457: LD_INT 32
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 33
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: PPUSH
30479: CALL_OW 72
30483: PUSH
30484: FOR_IN
30485: IFFALSE 30525
// begin if not GetBWeapon ( i ) then
30487: LD_VAR 0 8
30491: PPUSH
30492: CALL_OW 269
30496: NOT
30497: IFFALSE 30523
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30499: LD_VAR 0 8
30503: PPUSH
30504: LD_VAR 0 8
30508: PPUSH
30509: LD_VAR 0 2
30513: PPUSH
30514: CALL 31773 0 2
30518: PPUSH
30519: CALL_OW 431
// end ;
30523: GO 30484
30525: POP
30526: POP
// end ; for i = 1 to personel do
30527: LD_ADDR_VAR 0 8
30531: PUSH
30532: DOUBLE
30533: LD_INT 1
30535: DEC
30536: ST_TO_ADDR
30537: LD_VAR 0 6
30541: PUSH
30542: FOR_TO
30543: IFFALSE 31607
// begin if i > 4 then
30545: LD_VAR 0 8
30549: PUSH
30550: LD_INT 4
30552: GREATER
30553: IFFALSE 30557
// break ;
30555: GO 31607
// case i of 1 :
30557: LD_VAR 0 8
30561: PUSH
30562: LD_INT 1
30564: DOUBLE
30565: EQUAL
30566: IFTRUE 30570
30568: GO 30650
30570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30571: LD_ADDR_VAR 0 12
30575: PUSH
30576: LD_VAR 0 18
30580: PPUSH
30581: LD_INT 22
30583: PUSH
30584: LD_VAR 0 16
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 58
30595: PUSH
30596: EMPTY
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 30
30604: PUSH
30605: LD_INT 32
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 30
30614: PUSH
30615: LD_INT 4
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 30
30624: PUSH
30625: LD_INT 5
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: LIST
30642: PPUSH
30643: CALL_OW 72
30647: ST_TO_ADDR
30648: GO 30872
30650: LD_INT 2
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30720
30658: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30659: LD_ADDR_VAR 0 12
30663: PUSH
30664: LD_VAR 0 18
30668: PPUSH
30669: LD_INT 22
30671: PUSH
30672: LD_VAR 0 16
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 30
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 30
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PPUSH
30713: CALL_OW 72
30717: ST_TO_ADDR
30718: GO 30872
30720: LD_INT 3
30722: DOUBLE
30723: EQUAL
30724: IFTRUE 30728
30726: GO 30790
30728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30729: LD_ADDR_VAR 0 12
30733: PUSH
30734: LD_VAR 0 18
30738: PPUSH
30739: LD_INT 22
30741: PUSH
30742: LD_VAR 0 16
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 30
30756: PUSH
30757: LD_INT 2
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 30
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PPUSH
30783: CALL_OW 72
30787: ST_TO_ADDR
30788: GO 30872
30790: LD_INT 4
30792: DOUBLE
30793: EQUAL
30794: IFTRUE 30798
30796: GO 30871
30798: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30799: LD_ADDR_VAR 0 12
30803: PUSH
30804: LD_VAR 0 18
30808: PPUSH
30809: LD_INT 22
30811: PUSH
30812: LD_VAR 0 16
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 30
30826: PUSH
30827: LD_INT 6
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 30
30836: PUSH
30837: LD_INT 7
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 30
30846: PUSH
30847: LD_INT 8
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PPUSH
30864: CALL_OW 72
30868: ST_TO_ADDR
30869: GO 30872
30871: POP
// if i = 1 then
30872: LD_VAR 0 8
30876: PUSH
30877: LD_INT 1
30879: EQUAL
30880: IFFALSE 30991
// begin tmp := [ ] ;
30882: LD_ADDR_VAR 0 19
30886: PUSH
30887: EMPTY
30888: ST_TO_ADDR
// for j in f do
30889: LD_ADDR_VAR 0 9
30893: PUSH
30894: LD_VAR 0 12
30898: PUSH
30899: FOR_IN
30900: IFFALSE 30973
// if GetBType ( j ) = b_bunker then
30902: LD_VAR 0 9
30906: PPUSH
30907: CALL_OW 266
30911: PUSH
30912: LD_INT 32
30914: EQUAL
30915: IFFALSE 30942
// tmp := Insert ( tmp , 1 , j ) else
30917: LD_ADDR_VAR 0 19
30921: PUSH
30922: LD_VAR 0 19
30926: PPUSH
30927: LD_INT 1
30929: PPUSH
30930: LD_VAR 0 9
30934: PPUSH
30935: CALL_OW 2
30939: ST_TO_ADDR
30940: GO 30971
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30942: LD_ADDR_VAR 0 19
30946: PUSH
30947: LD_VAR 0 19
30951: PPUSH
30952: LD_VAR 0 19
30956: PUSH
30957: LD_INT 1
30959: PLUS
30960: PPUSH
30961: LD_VAR 0 9
30965: PPUSH
30966: CALL_OW 2
30970: ST_TO_ADDR
30971: GO 30899
30973: POP
30974: POP
// if tmp then
30975: LD_VAR 0 19
30979: IFFALSE 30991
// f := tmp ;
30981: LD_ADDR_VAR 0 12
30985: PUSH
30986: LD_VAR 0 19
30990: ST_TO_ADDR
// end ; x := personel [ i ] ;
30991: LD_ADDR_VAR 0 13
30995: PUSH
30996: LD_VAR 0 6
31000: PUSH
31001: LD_VAR 0 8
31005: ARRAY
31006: ST_TO_ADDR
// if x = - 1 then
31007: LD_VAR 0 13
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: EQUAL
31016: IFFALSE 31225
// begin for j in f do
31018: LD_ADDR_VAR 0 9
31022: PUSH
31023: LD_VAR 0 12
31027: PUSH
31028: FOR_IN
31029: IFFALSE 31221
// repeat InitHc ;
31031: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31035: LD_VAR 0 9
31039: PPUSH
31040: CALL_OW 266
31044: PUSH
31045: LD_INT 5
31047: EQUAL
31048: IFFALSE 31118
// begin if UnitsInside ( j ) < 3 then
31050: LD_VAR 0 9
31054: PPUSH
31055: CALL_OW 313
31059: PUSH
31060: LD_INT 3
31062: LESS
31063: IFFALSE 31099
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31065: LD_INT 0
31067: PPUSH
31068: LD_INT 5
31070: PUSH
31071: LD_INT 8
31073: PUSH
31074: LD_INT 9
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: PUSH
31082: LD_VAR 0 17
31086: ARRAY
31087: PPUSH
31088: LD_VAR 0 4
31092: PPUSH
31093: CALL_OW 380
31097: GO 31116
// PrepareHuman ( false , i , skill ) ;
31099: LD_INT 0
31101: PPUSH
31102: LD_VAR 0 8
31106: PPUSH
31107: LD_VAR 0 4
31111: PPUSH
31112: CALL_OW 380
// end else
31116: GO 31135
// PrepareHuman ( false , i , skill ) ;
31118: LD_INT 0
31120: PPUSH
31121: LD_VAR 0 8
31125: PPUSH
31126: LD_VAR 0 4
31130: PPUSH
31131: CALL_OW 380
// un := CreateHuman ;
31135: LD_ADDR_VAR 0 14
31139: PUSH
31140: CALL_OW 44
31144: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31145: LD_ADDR_VAR 0 7
31149: PUSH
31150: LD_VAR 0 7
31154: PPUSH
31155: LD_INT 1
31157: PPUSH
31158: LD_VAR 0 14
31162: PPUSH
31163: CALL_OW 2
31167: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31168: LD_VAR 0 14
31172: PPUSH
31173: LD_VAR 0 9
31177: PPUSH
31178: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31182: LD_VAR 0 9
31186: PPUSH
31187: CALL_OW 313
31191: PUSH
31192: LD_INT 6
31194: EQUAL
31195: PUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: CALL_OW 266
31205: PUSH
31206: LD_INT 32
31208: PUSH
31209: LD_INT 31
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: IN
31216: OR
31217: IFFALSE 31031
31219: GO 31028
31221: POP
31222: POP
// end else
31223: GO 31605
// for j = 1 to x do
31225: LD_ADDR_VAR 0 9
31229: PUSH
31230: DOUBLE
31231: LD_INT 1
31233: DEC
31234: ST_TO_ADDR
31235: LD_VAR 0 13
31239: PUSH
31240: FOR_TO
31241: IFFALSE 31603
// begin InitHc ;
31243: CALL_OW 19
// if not f then
31247: LD_VAR 0 12
31251: NOT
31252: IFFALSE 31341
// begin PrepareHuman ( false , i , skill ) ;
31254: LD_INT 0
31256: PPUSH
31257: LD_VAR 0 8
31261: PPUSH
31262: LD_VAR 0 4
31266: PPUSH
31267: CALL_OW 380
// un := CreateHuman ;
31271: LD_ADDR_VAR 0 14
31275: PUSH
31276: CALL_OW 44
31280: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31281: LD_ADDR_VAR 0 7
31285: PUSH
31286: LD_VAR 0 7
31290: PPUSH
31291: LD_INT 1
31293: PPUSH
31294: LD_VAR 0 14
31298: PPUSH
31299: CALL_OW 2
31303: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31304: LD_VAR 0 14
31308: PPUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 250
31318: PPUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 251
31328: PPUSH
31329: LD_INT 10
31331: PPUSH
31332: LD_INT 0
31334: PPUSH
31335: CALL_OW 50
// continue ;
31339: GO 31240
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31341: LD_VAR 0 12
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: CALL_OW 313
31354: PUSH
31355: LD_VAR 0 12
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: CALL_OW 266
31368: PUSH
31369: LD_INT 32
31371: PUSH
31372: LD_INT 31
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: IN
31379: AND
31380: PUSH
31381: LD_VAR 0 12
31385: PUSH
31386: LD_INT 1
31388: ARRAY
31389: PPUSH
31390: CALL_OW 313
31394: PUSH
31395: LD_INT 6
31397: EQUAL
31398: OR
31399: IFFALSE 31419
// f := Delete ( f , 1 ) ;
31401: LD_ADDR_VAR 0 12
31405: PUSH
31406: LD_VAR 0 12
31410: PPUSH
31411: LD_INT 1
31413: PPUSH
31414: CALL_OW 3
31418: ST_TO_ADDR
// if not f then
31419: LD_VAR 0 12
31423: NOT
31424: IFFALSE 31442
// begin x := x + 2 ;
31426: LD_ADDR_VAR 0 13
31430: PUSH
31431: LD_VAR 0 13
31435: PUSH
31436: LD_INT 2
31438: PLUS
31439: ST_TO_ADDR
// continue ;
31440: GO 31240
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31442: LD_VAR 0 12
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: CALL_OW 266
31455: PUSH
31456: LD_INT 5
31458: EQUAL
31459: IFFALSE 31533
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31461: LD_VAR 0 12
31465: PUSH
31466: LD_INT 1
31468: ARRAY
31469: PPUSH
31470: CALL_OW 313
31474: PUSH
31475: LD_INT 3
31477: LESS
31478: IFFALSE 31514
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31480: LD_INT 0
31482: PPUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 8
31488: PUSH
31489: LD_INT 9
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: PUSH
31497: LD_VAR 0 17
31501: ARRAY
31502: PPUSH
31503: LD_VAR 0 4
31507: PPUSH
31508: CALL_OW 380
31512: GO 31531
// PrepareHuman ( false , i , skill ) ;
31514: LD_INT 0
31516: PPUSH
31517: LD_VAR 0 8
31521: PPUSH
31522: LD_VAR 0 4
31526: PPUSH
31527: CALL_OW 380
// end else
31531: GO 31550
// PrepareHuman ( false , i , skill ) ;
31533: LD_INT 0
31535: PPUSH
31536: LD_VAR 0 8
31540: PPUSH
31541: LD_VAR 0 4
31545: PPUSH
31546: CALL_OW 380
// un := CreateHuman ;
31550: LD_ADDR_VAR 0 14
31554: PUSH
31555: CALL_OW 44
31559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31560: LD_ADDR_VAR 0 7
31564: PUSH
31565: LD_VAR 0 7
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: LD_VAR 0 14
31577: PPUSH
31578: CALL_OW 2
31582: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31583: LD_VAR 0 14
31587: PPUSH
31588: LD_VAR 0 12
31592: PUSH
31593: LD_INT 1
31595: ARRAY
31596: PPUSH
31597: CALL_OW 52
// end ;
31601: GO 31240
31603: POP
31604: POP
// end ;
31605: GO 30542
31607: POP
31608: POP
// result := result ^ buildings ;
31609: LD_ADDR_VAR 0 7
31613: PUSH
31614: LD_VAR 0 7
31618: PUSH
31619: LD_VAR 0 18
31623: ADD
31624: ST_TO_ADDR
// end else
31625: GO 31768
// begin for i = 1 to personel do
31627: LD_ADDR_VAR 0 8
31631: PUSH
31632: DOUBLE
31633: LD_INT 1
31635: DEC
31636: ST_TO_ADDR
31637: LD_VAR 0 6
31641: PUSH
31642: FOR_TO
31643: IFFALSE 31766
// begin if i > 4 then
31645: LD_VAR 0 8
31649: PUSH
31650: LD_INT 4
31652: GREATER
31653: IFFALSE 31657
// break ;
31655: GO 31766
// x := personel [ i ] ;
31657: LD_ADDR_VAR 0 13
31661: PUSH
31662: LD_VAR 0 6
31666: PUSH
31667: LD_VAR 0 8
31671: ARRAY
31672: ST_TO_ADDR
// if x = - 1 then
31673: LD_VAR 0 13
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: EQUAL
31682: IFFALSE 31686
// continue ;
31684: GO 31642
// PrepareHuman ( false , i , skill ) ;
31686: LD_INT 0
31688: PPUSH
31689: LD_VAR 0 8
31693: PPUSH
31694: LD_VAR 0 4
31698: PPUSH
31699: CALL_OW 380
// un := CreateHuman ;
31703: LD_ADDR_VAR 0 14
31707: PUSH
31708: CALL_OW 44
31712: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31713: LD_VAR 0 14
31717: PPUSH
31718: LD_VAR 0 1
31722: PPUSH
31723: CALL_OW 250
31727: PPUSH
31728: LD_VAR 0 1
31732: PPUSH
31733: CALL_OW 251
31737: PPUSH
31738: LD_INT 10
31740: PPUSH
31741: LD_INT 0
31743: PPUSH
31744: CALL_OW 50
// result := result ^ un ;
31748: LD_ADDR_VAR 0 7
31752: PUSH
31753: LD_VAR 0 7
31757: PUSH
31758: LD_VAR 0 14
31762: ADD
31763: ST_TO_ADDR
// end ;
31764: GO 31642
31766: POP
31767: POP
// end ; end ;
31768: LD_VAR 0 7
31772: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
// result := false ;
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31799: LD_VAR 0 1
31803: NOT
31804: PUSH
31805: LD_VAR 0 1
31809: PPUSH
31810: CALL_OW 266
31814: PUSH
31815: LD_INT 32
31817: PUSH
31818: LD_INT 33
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: IN
31825: NOT
31826: OR
31827: IFFALSE 31831
// exit ;
31829: GO 32970
// nat := GetNation ( tower ) ;
31831: LD_ADDR_VAR 0 12
31835: PUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 248
31845: ST_TO_ADDR
// side := GetSide ( tower ) ;
31846: LD_ADDR_VAR 0 16
31850: PUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 255
31860: ST_TO_ADDR
// x := GetX ( tower ) ;
31861: LD_ADDR_VAR 0 10
31865: PUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 250
31875: ST_TO_ADDR
// y := GetY ( tower ) ;
31876: LD_ADDR_VAR 0 11
31880: PUSH
31881: LD_VAR 0 1
31885: PPUSH
31886: CALL_OW 251
31890: ST_TO_ADDR
// if not x or not y then
31891: LD_VAR 0 10
31895: NOT
31896: PUSH
31897: LD_VAR 0 11
31901: NOT
31902: OR
31903: IFFALSE 31907
// exit ;
31905: GO 32970
// weapon := 0 ;
31907: LD_ADDR_VAR 0 18
31911: PUSH
31912: LD_INT 0
31914: ST_TO_ADDR
// fac_list := [ ] ;
31915: LD_ADDR_VAR 0 17
31919: PUSH
31920: EMPTY
31921: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31922: LD_ADDR_VAR 0 6
31926: PUSH
31927: LD_VAR 0 1
31931: PPUSH
31932: CALL_OW 274
31936: PPUSH
31937: LD_VAR 0 2
31941: PPUSH
31942: LD_INT 0
31944: PPUSH
31945: CALL 29510 0 3
31949: PPUSH
31950: LD_INT 30
31952: PUSH
31953: LD_INT 3
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 72
31964: ST_TO_ADDR
// if not factories then
31965: LD_VAR 0 6
31969: NOT
31970: IFFALSE 31974
// exit ;
31972: GO 32970
// for i in factories do
31974: LD_ADDR_VAR 0 8
31978: PUSH
31979: LD_VAR 0 6
31983: PUSH
31984: FOR_IN
31985: IFFALSE 32010
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31987: LD_ADDR_VAR 0 17
31991: PUSH
31992: LD_VAR 0 17
31996: PUSH
31997: LD_VAR 0 8
32001: PPUSH
32002: CALL_OW 478
32006: UNION
32007: ST_TO_ADDR
32008: GO 31984
32010: POP
32011: POP
// if not fac_list then
32012: LD_VAR 0 17
32016: NOT
32017: IFFALSE 32021
// exit ;
32019: GO 32970
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32021: LD_ADDR_VAR 0 5
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 5
32031: PUSH
32032: LD_INT 9
32034: PUSH
32035: LD_INT 10
32037: PUSH
32038: LD_INT 6
32040: PUSH
32041: LD_INT 7
32043: PUSH
32044: LD_INT 11
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 27
32058: PUSH
32059: LD_INT 28
32061: PUSH
32062: LD_INT 26
32064: PUSH
32065: LD_INT 30
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 43
32076: PUSH
32077: LD_INT 44
32079: PUSH
32080: LD_INT 46
32082: PUSH
32083: LD_INT 45
32085: PUSH
32086: LD_INT 47
32088: PUSH
32089: LD_INT 49
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: PUSH
32105: LD_VAR 0 12
32109: ARRAY
32110: ST_TO_ADDR
// for i in list do
32111: LD_ADDR_VAR 0 8
32115: PUSH
32116: LD_VAR 0 5
32120: PUSH
32121: FOR_IN
32122: IFFALSE 32155
// if not i in fac_list then
32124: LD_VAR 0 8
32128: PUSH
32129: LD_VAR 0 17
32133: IN
32134: NOT
32135: IFFALSE 32153
// list := list diff i ;
32137: LD_ADDR_VAR 0 5
32141: PUSH
32142: LD_VAR 0 5
32146: PUSH
32147: LD_VAR 0 8
32151: DIFF
32152: ST_TO_ADDR
32153: GO 32121
32155: POP
32156: POP
// if not list then
32157: LD_VAR 0 5
32161: NOT
32162: IFFALSE 32166
// exit ;
32164: GO 32970
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32166: LD_VAR 0 12
32170: PUSH
32171: LD_INT 3
32173: EQUAL
32174: PUSH
32175: LD_INT 49
32177: PUSH
32178: LD_VAR 0 5
32182: IN
32183: AND
32184: PUSH
32185: LD_INT 31
32187: PPUSH
32188: LD_VAR 0 16
32192: PPUSH
32193: CALL_OW 321
32197: PUSH
32198: LD_INT 2
32200: EQUAL
32201: AND
32202: IFFALSE 32262
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32204: LD_INT 22
32206: PUSH
32207: LD_VAR 0 16
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 35
32218: PUSH
32219: LD_INT 49
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 91
32228: PUSH
32229: LD_VAR 0 1
32233: PUSH
32234: LD_INT 10
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: PPUSH
32247: CALL_OW 69
32251: NOT
32252: IFFALSE 32262
// weapon := ru_time_lapser ;
32254: LD_ADDR_VAR 0 18
32258: PUSH
32259: LD_INT 49
32261: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32262: LD_VAR 0 12
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: IN
32277: PUSH
32278: LD_INT 11
32280: PUSH
32281: LD_VAR 0 5
32285: IN
32286: PUSH
32287: LD_INT 30
32289: PUSH
32290: LD_VAR 0 5
32294: IN
32295: OR
32296: AND
32297: PUSH
32298: LD_INT 6
32300: PPUSH
32301: LD_VAR 0 16
32305: PPUSH
32306: CALL_OW 321
32310: PUSH
32311: LD_INT 2
32313: EQUAL
32314: AND
32315: IFFALSE 32480
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32317: LD_INT 22
32319: PUSH
32320: LD_VAR 0 16
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 35
32334: PUSH
32335: LD_INT 11
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 35
32344: PUSH
32345: LD_INT 30
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 91
32359: PUSH
32360: LD_VAR 0 1
32364: PUSH
32365: LD_INT 18
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: PPUSH
32378: CALL_OW 69
32382: NOT
32383: PUSH
32384: LD_INT 22
32386: PUSH
32387: LD_VAR 0 16
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: LD_INT 30
32401: PUSH
32402: LD_INT 32
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 30
32411: PUSH
32412: LD_INT 33
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 91
32426: PUSH
32427: LD_VAR 0 1
32431: PUSH
32432: LD_INT 12
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: PPUSH
32448: CALL_OW 69
32452: PUSH
32453: LD_INT 2
32455: GREATER
32456: AND
32457: IFFALSE 32480
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32459: LD_ADDR_VAR 0 18
32463: PUSH
32464: LD_INT 11
32466: PUSH
32467: LD_INT 30
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_VAR 0 12
32478: ARRAY
32479: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32480: LD_VAR 0 18
32484: NOT
32485: PUSH
32486: LD_INT 40
32488: PPUSH
32489: LD_VAR 0 16
32493: PPUSH
32494: CALL_OW 321
32498: PUSH
32499: LD_INT 2
32501: EQUAL
32502: AND
32503: PUSH
32504: LD_INT 7
32506: PUSH
32507: LD_VAR 0 5
32511: IN
32512: PUSH
32513: LD_INT 28
32515: PUSH
32516: LD_VAR 0 5
32520: IN
32521: OR
32522: PUSH
32523: LD_INT 45
32525: PUSH
32526: LD_VAR 0 5
32530: IN
32531: OR
32532: AND
32533: IFFALSE 32787
// begin hex := GetHexInfo ( x , y ) ;
32535: LD_ADDR_VAR 0 4
32539: PUSH
32540: LD_VAR 0 10
32544: PPUSH
32545: LD_VAR 0 11
32549: PPUSH
32550: CALL_OW 546
32554: ST_TO_ADDR
// if hex [ 1 ] then
32555: LD_VAR 0 4
32559: PUSH
32560: LD_INT 1
32562: ARRAY
32563: IFFALSE 32567
// exit ;
32565: GO 32970
// height := hex [ 2 ] ;
32567: LD_ADDR_VAR 0 15
32571: PUSH
32572: LD_VAR 0 4
32576: PUSH
32577: LD_INT 2
32579: ARRAY
32580: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32581: LD_ADDR_VAR 0 14
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// for i in tmp do
32604: LD_ADDR_VAR 0 8
32608: PUSH
32609: LD_VAR 0 14
32613: PUSH
32614: FOR_IN
32615: IFFALSE 32785
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32617: LD_ADDR_VAR 0 9
32621: PUSH
32622: LD_VAR 0 10
32626: PPUSH
32627: LD_VAR 0 8
32631: PPUSH
32632: LD_INT 5
32634: PPUSH
32635: CALL_OW 272
32639: PUSH
32640: LD_VAR 0 11
32644: PPUSH
32645: LD_VAR 0 8
32649: PPUSH
32650: LD_INT 5
32652: PPUSH
32653: CALL_OW 273
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32662: LD_VAR 0 9
32666: PUSH
32667: LD_INT 1
32669: ARRAY
32670: PPUSH
32671: LD_VAR 0 9
32675: PUSH
32676: LD_INT 2
32678: ARRAY
32679: PPUSH
32680: CALL_OW 488
32684: IFFALSE 32783
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32686: LD_ADDR_VAR 0 4
32690: PUSH
32691: LD_VAR 0 9
32695: PUSH
32696: LD_INT 1
32698: ARRAY
32699: PPUSH
32700: LD_VAR 0 9
32704: PUSH
32705: LD_INT 2
32707: ARRAY
32708: PPUSH
32709: CALL_OW 546
32713: ST_TO_ADDR
// if hex [ 1 ] then
32714: LD_VAR 0 4
32718: PUSH
32719: LD_INT 1
32721: ARRAY
32722: IFFALSE 32726
// continue ;
32724: GO 32614
// h := hex [ 2 ] ;
32726: LD_ADDR_VAR 0 13
32730: PUSH
32731: LD_VAR 0 4
32735: PUSH
32736: LD_INT 2
32738: ARRAY
32739: ST_TO_ADDR
// if h + 7 < height then
32740: LD_VAR 0 13
32744: PUSH
32745: LD_INT 7
32747: PLUS
32748: PUSH
32749: LD_VAR 0 15
32753: LESS
32754: IFFALSE 32783
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32756: LD_ADDR_VAR 0 18
32760: PUSH
32761: LD_INT 7
32763: PUSH
32764: LD_INT 28
32766: PUSH
32767: LD_INT 45
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: PUSH
32775: LD_VAR 0 12
32779: ARRAY
32780: ST_TO_ADDR
// break ;
32781: GO 32785
// end ; end ; end ;
32783: GO 32614
32785: POP
32786: POP
// end ; if not weapon then
32787: LD_VAR 0 18
32791: NOT
32792: IFFALSE 32852
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32794: LD_ADDR_VAR 0 5
32798: PUSH
32799: LD_VAR 0 5
32803: PUSH
32804: LD_INT 11
32806: PUSH
32807: LD_INT 30
32809: PUSH
32810: LD_INT 49
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: DIFF
32818: ST_TO_ADDR
// if not list then
32819: LD_VAR 0 5
32823: NOT
32824: IFFALSE 32828
// exit ;
32826: GO 32970
// weapon := list [ rand ( 1 , list ) ] ;
32828: LD_ADDR_VAR 0 18
32832: PUSH
32833: LD_VAR 0 5
32837: PUSH
32838: LD_INT 1
32840: PPUSH
32841: LD_VAR 0 5
32845: PPUSH
32846: CALL_OW 12
32850: ARRAY
32851: ST_TO_ADDR
// end ; if weapon then
32852: LD_VAR 0 18
32856: IFFALSE 32970
// begin tmp := CostOfWeapon ( weapon ) ;
32858: LD_ADDR_VAR 0 14
32862: PUSH
32863: LD_VAR 0 18
32867: PPUSH
32868: CALL_OW 451
32872: ST_TO_ADDR
// j := GetBase ( tower ) ;
32873: LD_ADDR_VAR 0 9
32877: PUSH
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL_OW 274
32887: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32888: LD_VAR 0 9
32892: PPUSH
32893: LD_INT 1
32895: PPUSH
32896: CALL_OW 275
32900: PUSH
32901: LD_VAR 0 14
32905: PUSH
32906: LD_INT 1
32908: ARRAY
32909: GREATEREQUAL
32910: PUSH
32911: LD_VAR 0 9
32915: PPUSH
32916: LD_INT 2
32918: PPUSH
32919: CALL_OW 275
32923: PUSH
32924: LD_VAR 0 14
32928: PUSH
32929: LD_INT 2
32931: ARRAY
32932: GREATEREQUAL
32933: AND
32934: PUSH
32935: LD_VAR 0 9
32939: PPUSH
32940: LD_INT 3
32942: PPUSH
32943: CALL_OW 275
32947: PUSH
32948: LD_VAR 0 14
32952: PUSH
32953: LD_INT 3
32955: ARRAY
32956: GREATEREQUAL
32957: AND
32958: IFFALSE 32970
// result := weapon ;
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_VAR 0 18
32969: ST_TO_ADDR
// end ; end ;
32970: LD_VAR 0 3
32974: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
// result := true ;
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_INT 1
32986: ST_TO_ADDR
// if array1 = array2 then
32987: LD_VAR 0 1
32991: PUSH
32992: LD_VAR 0 2
32996: EQUAL
32997: IFFALSE 33057
// begin for i = 1 to array1 do
32999: LD_ADDR_VAR 0 4
33003: PUSH
33004: DOUBLE
33005: LD_INT 1
33007: DEC
33008: ST_TO_ADDR
33009: LD_VAR 0 1
33013: PUSH
33014: FOR_TO
33015: IFFALSE 33053
// if array1 [ i ] <> array2 [ i ] then
33017: LD_VAR 0 1
33021: PUSH
33022: LD_VAR 0 4
33026: ARRAY
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_VAR 0 4
33037: ARRAY
33038: NONEQUAL
33039: IFFALSE 33051
// begin result := false ;
33041: LD_ADDR_VAR 0 3
33045: PUSH
33046: LD_INT 0
33048: ST_TO_ADDR
// break ;
33049: GO 33053
// end ;
33051: GO 33014
33053: POP
33054: POP
// end else
33055: GO 33065
// result := false ;
33057: LD_ADDR_VAR 0 3
33061: PUSH
33062: LD_INT 0
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 3
33069: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
// if not array1 or not array2 then
33074: LD_VAR 0 1
33078: NOT
33079: PUSH
33080: LD_VAR 0 2
33084: NOT
33085: OR
33086: IFFALSE 33090
// exit ;
33088: GO 33154
// result := true ;
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_INT 1
33097: ST_TO_ADDR
// for i = 1 to array1 do
33098: LD_ADDR_VAR 0 4
33102: PUSH
33103: DOUBLE
33104: LD_INT 1
33106: DEC
33107: ST_TO_ADDR
33108: LD_VAR 0 1
33112: PUSH
33113: FOR_TO
33114: IFFALSE 33152
// if array1 [ i ] <> array2 [ i ] then
33116: LD_VAR 0 1
33120: PUSH
33121: LD_VAR 0 4
33125: ARRAY
33126: PUSH
33127: LD_VAR 0 2
33131: PUSH
33132: LD_VAR 0 4
33136: ARRAY
33137: NONEQUAL
33138: IFFALSE 33150
// begin result := false ;
33140: LD_ADDR_VAR 0 3
33144: PUSH
33145: LD_INT 0
33147: ST_TO_ADDR
// break ;
33148: GO 33152
// end ;
33150: GO 33113
33152: POP
33153: POP
// end ;
33154: LD_VAR 0 3
33158: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
33163: PPUSH
// pom := GetBase ( fac ) ;
33164: LD_ADDR_VAR 0 5
33168: PUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 274
33178: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33179: LD_ADDR_VAR 0 4
33183: PUSH
33184: LD_VAR 0 2
33188: PUSH
33189: LD_INT 1
33191: ARRAY
33192: PPUSH
33193: LD_VAR 0 2
33197: PUSH
33198: LD_INT 2
33200: ARRAY
33201: PPUSH
33202: LD_VAR 0 2
33206: PUSH
33207: LD_INT 3
33209: ARRAY
33210: PPUSH
33211: LD_VAR 0 2
33215: PUSH
33216: LD_INT 4
33218: ARRAY
33219: PPUSH
33220: CALL_OW 449
33224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: LD_VAR 0 5
33234: PPUSH
33235: LD_INT 1
33237: PPUSH
33238: CALL_OW 275
33242: PUSH
33243: LD_VAR 0 4
33247: PUSH
33248: LD_INT 1
33250: ARRAY
33251: GREATEREQUAL
33252: PUSH
33253: LD_VAR 0 5
33257: PPUSH
33258: LD_INT 2
33260: PPUSH
33261: CALL_OW 275
33265: PUSH
33266: LD_VAR 0 4
33270: PUSH
33271: LD_INT 2
33273: ARRAY
33274: GREATEREQUAL
33275: AND
33276: PUSH
33277: LD_VAR 0 5
33281: PPUSH
33282: LD_INT 3
33284: PPUSH
33285: CALL_OW 275
33289: PUSH
33290: LD_VAR 0 4
33294: PUSH
33295: LD_INT 3
33297: ARRAY
33298: GREATEREQUAL
33299: AND
33300: ST_TO_ADDR
// end ;
33301: LD_VAR 0 3
33305: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33306: LD_INT 0
33308: PPUSH
33309: PPUSH
33310: PPUSH
33311: PPUSH
// pom := GetBase ( building ) ;
33312: LD_ADDR_VAR 0 3
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 274
33326: ST_TO_ADDR
// if not pom then
33327: LD_VAR 0 3
33331: NOT
33332: IFFALSE 33336
// exit ;
33334: GO 33506
// btype := GetBType ( building ) ;
33336: LD_ADDR_VAR 0 5
33340: PUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 266
33350: ST_TO_ADDR
// if btype = b_armoury then
33351: LD_VAR 0 5
33355: PUSH
33356: LD_INT 4
33358: EQUAL
33359: IFFALSE 33369
// btype := b_barracks ;
33361: LD_ADDR_VAR 0 5
33365: PUSH
33366: LD_INT 5
33368: ST_TO_ADDR
// if btype = b_depot then
33369: LD_VAR 0 5
33373: PUSH
33374: LD_INT 0
33376: EQUAL
33377: IFFALSE 33387
// btype := b_warehouse ;
33379: LD_ADDR_VAR 0 5
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
// if btype = b_workshop then
33387: LD_VAR 0 5
33391: PUSH
33392: LD_INT 2
33394: EQUAL
33395: IFFALSE 33405
// btype := b_factory ;
33397: LD_ADDR_VAR 0 5
33401: PUSH
33402: LD_INT 3
33404: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33405: LD_ADDR_VAR 0 4
33409: PUSH
33410: LD_VAR 0 5
33414: PPUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: CALL_OW 248
33424: PPUSH
33425: CALL_OW 450
33429: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33430: LD_ADDR_VAR 0 2
33434: PUSH
33435: LD_VAR 0 3
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: CALL_OW 275
33447: PUSH
33448: LD_VAR 0 4
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: GREATEREQUAL
33457: PUSH
33458: LD_VAR 0 3
33462: PPUSH
33463: LD_INT 2
33465: PPUSH
33466: CALL_OW 275
33470: PUSH
33471: LD_VAR 0 4
33475: PUSH
33476: LD_INT 2
33478: ARRAY
33479: GREATEREQUAL
33480: AND
33481: PUSH
33482: LD_VAR 0 3
33486: PPUSH
33487: LD_INT 3
33489: PPUSH
33490: CALL_OW 275
33494: PUSH
33495: LD_VAR 0 4
33499: PUSH
33500: LD_INT 3
33502: ARRAY
33503: GREATEREQUAL
33504: AND
33505: ST_TO_ADDR
// end ;
33506: LD_VAR 0 2
33510: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
33515: PPUSH
// pom := GetBase ( building ) ;
33516: LD_ADDR_VAR 0 4
33520: PUSH
33521: LD_VAR 0 1
33525: PPUSH
33526: CALL_OW 274
33530: ST_TO_ADDR
// if not pom then
33531: LD_VAR 0 4
33535: NOT
33536: IFFALSE 33540
// exit ;
33538: GO 33641
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33540: LD_ADDR_VAR 0 5
33544: PUSH
33545: LD_VAR 0 2
33549: PPUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 248
33559: PPUSH
33560: CALL_OW 450
33564: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_VAR 0 4
33574: PPUSH
33575: LD_INT 1
33577: PPUSH
33578: CALL_OW 275
33582: PUSH
33583: LD_VAR 0 5
33587: PUSH
33588: LD_INT 1
33590: ARRAY
33591: GREATEREQUAL
33592: PUSH
33593: LD_VAR 0 4
33597: PPUSH
33598: LD_INT 2
33600: PPUSH
33601: CALL_OW 275
33605: PUSH
33606: LD_VAR 0 5
33610: PUSH
33611: LD_INT 2
33613: ARRAY
33614: GREATEREQUAL
33615: AND
33616: PUSH
33617: LD_VAR 0 4
33621: PPUSH
33622: LD_INT 3
33624: PPUSH
33625: CALL_OW 275
33629: PUSH
33630: LD_VAR 0 5
33634: PUSH
33635: LD_INT 3
33637: ARRAY
33638: GREATEREQUAL
33639: AND
33640: ST_TO_ADDR
// end ;
33641: LD_VAR 0 3
33645: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33646: LD_INT 0
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
// result := false ;
33659: LD_ADDR_VAR 0 8
33663: PUSH
33664: LD_INT 0
33666: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33667: LD_VAR 0 5
33671: NOT
33672: PUSH
33673: LD_VAR 0 1
33677: NOT
33678: OR
33679: PUSH
33680: LD_VAR 0 2
33684: NOT
33685: OR
33686: PUSH
33687: LD_VAR 0 3
33691: NOT
33692: OR
33693: IFFALSE 33697
// exit ;
33695: GO 34511
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33697: LD_ADDR_VAR 0 14
33701: PUSH
33702: LD_VAR 0 1
33706: PPUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: LD_VAR 0 3
33716: PPUSH
33717: LD_VAR 0 4
33721: PPUSH
33722: LD_VAR 0 5
33726: PUSH
33727: LD_INT 1
33729: ARRAY
33730: PPUSH
33731: CALL_OW 248
33735: PPUSH
33736: LD_INT 0
33738: PPUSH
33739: CALL 35348 0 6
33743: ST_TO_ADDR
// if not hexes then
33744: LD_VAR 0 14
33748: NOT
33749: IFFALSE 33753
// exit ;
33751: GO 34511
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33753: LD_ADDR_VAR 0 17
33757: PUSH
33758: LD_VAR 0 5
33762: PPUSH
33763: LD_INT 22
33765: PUSH
33766: LD_VAR 0 13
33770: PPUSH
33771: CALL_OW 255
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 30
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 30
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PPUSH
33812: CALL_OW 72
33816: ST_TO_ADDR
// for i = 1 to hexes do
33817: LD_ADDR_VAR 0 9
33821: PUSH
33822: DOUBLE
33823: LD_INT 1
33825: DEC
33826: ST_TO_ADDR
33827: LD_VAR 0 14
33831: PUSH
33832: FOR_TO
33833: IFFALSE 34509
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33835: LD_ADDR_VAR 0 13
33839: PUSH
33840: LD_VAR 0 14
33844: PUSH
33845: LD_VAR 0 9
33849: ARRAY
33850: PUSH
33851: LD_INT 1
33853: ARRAY
33854: PPUSH
33855: LD_VAR 0 14
33859: PUSH
33860: LD_VAR 0 9
33864: ARRAY
33865: PUSH
33866: LD_INT 2
33868: ARRAY
33869: PPUSH
33870: CALL_OW 428
33874: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33875: LD_VAR 0 14
33879: PUSH
33880: LD_VAR 0 9
33884: ARRAY
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: PPUSH
33890: LD_VAR 0 14
33894: PUSH
33895: LD_VAR 0 9
33899: ARRAY
33900: PUSH
33901: LD_INT 2
33903: ARRAY
33904: PPUSH
33905: CALL_OW 351
33909: PUSH
33910: LD_VAR 0 14
33914: PUSH
33915: LD_VAR 0 9
33919: ARRAY
33920: PUSH
33921: LD_INT 1
33923: ARRAY
33924: PPUSH
33925: LD_VAR 0 14
33929: PUSH
33930: LD_VAR 0 9
33934: ARRAY
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: PPUSH
33940: CALL_OW 488
33944: NOT
33945: OR
33946: PUSH
33947: LD_VAR 0 13
33951: PPUSH
33952: CALL_OW 247
33956: PUSH
33957: LD_INT 3
33959: EQUAL
33960: OR
33961: IFFALSE 33967
// exit ;
33963: POP
33964: POP
33965: GO 34511
// if not tmp then
33967: LD_VAR 0 13
33971: NOT
33972: IFFALSE 33976
// continue ;
33974: GO 33832
// result := true ;
33976: LD_ADDR_VAR 0 8
33980: PUSH
33981: LD_INT 1
33983: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33984: LD_VAR 0 6
33988: PUSH
33989: LD_VAR 0 13
33993: PPUSH
33994: CALL_OW 247
33998: PUSH
33999: LD_INT 2
34001: EQUAL
34002: AND
34003: PUSH
34004: LD_VAR 0 13
34008: PPUSH
34009: CALL_OW 263
34013: PUSH
34014: LD_INT 1
34016: EQUAL
34017: AND
34018: IFFALSE 34182
// begin if IsDrivenBy ( tmp ) then
34020: LD_VAR 0 13
34024: PPUSH
34025: CALL_OW 311
34029: IFFALSE 34033
// continue ;
34031: GO 33832
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34033: LD_VAR 0 6
34037: PPUSH
34038: LD_INT 3
34040: PUSH
34041: LD_INT 60
34043: PUSH
34044: EMPTY
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 55
34056: PUSH
34057: EMPTY
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PPUSH
34068: CALL_OW 72
34072: IFFALSE 34180
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34074: LD_ADDR_VAR 0 18
34078: PUSH
34079: LD_VAR 0 6
34083: PPUSH
34084: LD_INT 3
34086: PUSH
34087: LD_INT 60
34089: PUSH
34090: EMPTY
34091: LIST
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 55
34102: PUSH
34103: EMPTY
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PPUSH
34114: CALL_OW 72
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: ST_TO_ADDR
// if IsInUnit ( driver ) then
34123: LD_VAR 0 18
34127: PPUSH
34128: CALL_OW 310
34132: IFFALSE 34143
// ComExit ( driver ) ;
34134: LD_VAR 0 18
34138: PPUSH
34139: CALL 58532 0 1
// AddComEnterUnit ( driver , tmp ) ;
34143: LD_VAR 0 18
34147: PPUSH
34148: LD_VAR 0 13
34152: PPUSH
34153: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34157: LD_VAR 0 18
34161: PPUSH
34162: LD_VAR 0 7
34166: PPUSH
34167: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34171: LD_VAR 0 18
34175: PPUSH
34176: CALL_OW 181
// end ; continue ;
34180: GO 33832
// end ; if not cleaners or not tmp in cleaners then
34182: LD_VAR 0 6
34186: NOT
34187: PUSH
34188: LD_VAR 0 13
34192: PUSH
34193: LD_VAR 0 6
34197: IN
34198: NOT
34199: OR
34200: IFFALSE 34507
// begin if dep then
34202: LD_VAR 0 17
34206: IFFALSE 34342
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34208: LD_ADDR_VAR 0 16
34212: PUSH
34213: LD_VAR 0 17
34217: PUSH
34218: LD_INT 1
34220: ARRAY
34221: PPUSH
34222: CALL_OW 250
34226: PPUSH
34227: LD_VAR 0 17
34231: PUSH
34232: LD_INT 1
34234: ARRAY
34235: PPUSH
34236: CALL_OW 254
34240: PPUSH
34241: LD_INT 5
34243: PPUSH
34244: CALL_OW 272
34248: PUSH
34249: LD_VAR 0 17
34253: PUSH
34254: LD_INT 1
34256: ARRAY
34257: PPUSH
34258: CALL_OW 251
34262: PPUSH
34263: LD_VAR 0 17
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: PPUSH
34272: CALL_OW 254
34276: PPUSH
34277: LD_INT 5
34279: PPUSH
34280: CALL_OW 273
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34289: LD_VAR 0 16
34293: PUSH
34294: LD_INT 1
34296: ARRAY
34297: PPUSH
34298: LD_VAR 0 16
34302: PUSH
34303: LD_INT 2
34305: ARRAY
34306: PPUSH
34307: CALL_OW 488
34311: IFFALSE 34342
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34313: LD_VAR 0 13
34317: PPUSH
34318: LD_VAR 0 16
34322: PUSH
34323: LD_INT 1
34325: ARRAY
34326: PPUSH
34327: LD_VAR 0 16
34331: PUSH
34332: LD_INT 2
34334: ARRAY
34335: PPUSH
34336: CALL_OW 111
// continue ;
34340: GO 33832
// end ; end ; r := GetDir ( tmp ) ;
34342: LD_ADDR_VAR 0 15
34346: PUSH
34347: LD_VAR 0 13
34351: PPUSH
34352: CALL_OW 254
34356: ST_TO_ADDR
// if r = 5 then
34357: LD_VAR 0 15
34361: PUSH
34362: LD_INT 5
34364: EQUAL
34365: IFFALSE 34375
// r := 0 ;
34367: LD_ADDR_VAR 0 15
34371: PUSH
34372: LD_INT 0
34374: ST_TO_ADDR
// for j = r to 5 do
34375: LD_ADDR_VAR 0 10
34379: PUSH
34380: DOUBLE
34381: LD_VAR 0 15
34385: DEC
34386: ST_TO_ADDR
34387: LD_INT 5
34389: PUSH
34390: FOR_TO
34391: IFFALSE 34505
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34393: LD_ADDR_VAR 0 11
34397: PUSH
34398: LD_VAR 0 13
34402: PPUSH
34403: CALL_OW 250
34407: PPUSH
34408: LD_VAR 0 10
34412: PPUSH
34413: LD_INT 2
34415: PPUSH
34416: CALL_OW 272
34420: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34421: LD_ADDR_VAR 0 12
34425: PUSH
34426: LD_VAR 0 13
34430: PPUSH
34431: CALL_OW 251
34435: PPUSH
34436: LD_VAR 0 10
34440: PPUSH
34441: LD_INT 2
34443: PPUSH
34444: CALL_OW 273
34448: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34449: LD_VAR 0 11
34453: PPUSH
34454: LD_VAR 0 12
34458: PPUSH
34459: CALL_OW 488
34463: PUSH
34464: LD_VAR 0 11
34468: PPUSH
34469: LD_VAR 0 12
34473: PPUSH
34474: CALL_OW 428
34478: NOT
34479: AND
34480: IFFALSE 34503
// begin ComMoveXY ( tmp , _x , _y ) ;
34482: LD_VAR 0 13
34486: PPUSH
34487: LD_VAR 0 11
34491: PPUSH
34492: LD_VAR 0 12
34496: PPUSH
34497: CALL_OW 111
// break ;
34501: GO 34505
// end ; end ;
34503: GO 34390
34505: POP
34506: POP
// end ; end ;
34507: GO 33832
34509: POP
34510: POP
// end ;
34511: LD_VAR 0 8
34515: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34516: LD_INT 0
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
// result := false ;
34528: LD_ADDR_VAR 0 6
34532: PUSH
34533: LD_INT 0
34535: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34536: LD_VAR 0 1
34540: NOT
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 266
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: IN
34562: NOT
34563: OR
34564: PUSH
34565: LD_VAR 0 2
34569: NOT
34570: OR
34571: PUSH
34572: LD_VAR 0 5
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: LD_INT 4
34591: PUSH
34592: LD_INT 5
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: IN
34603: NOT
34604: OR
34605: PUSH
34606: LD_VAR 0 3
34610: PPUSH
34611: LD_VAR 0 4
34615: PPUSH
34616: CALL_OW 488
34620: NOT
34621: OR
34622: IFFALSE 34626
// exit ;
34624: GO 35343
// pom := GetBase ( depot ) ;
34626: LD_ADDR_VAR 0 10
34630: PUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 274
34640: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34641: LD_ADDR_VAR 0 11
34645: PUSH
34646: LD_VAR 0 2
34650: PPUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL_OW 248
34660: PPUSH
34661: CALL_OW 450
34665: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34666: LD_VAR 0 10
34670: PPUSH
34671: LD_INT 1
34673: PPUSH
34674: CALL_OW 275
34678: PUSH
34679: LD_VAR 0 11
34683: PUSH
34684: LD_INT 1
34686: ARRAY
34687: GREATEREQUAL
34688: PUSH
34689: LD_VAR 0 10
34693: PPUSH
34694: LD_INT 2
34696: PPUSH
34697: CALL_OW 275
34701: PUSH
34702: LD_VAR 0 11
34706: PUSH
34707: LD_INT 2
34709: ARRAY
34710: GREATEREQUAL
34711: AND
34712: PUSH
34713: LD_VAR 0 10
34717: PPUSH
34718: LD_INT 3
34720: PPUSH
34721: CALL_OW 275
34725: PUSH
34726: LD_VAR 0 11
34730: PUSH
34731: LD_INT 3
34733: ARRAY
34734: GREATEREQUAL
34735: AND
34736: NOT
34737: IFFALSE 34741
// exit ;
34739: GO 35343
// if GetBType ( depot ) = b_depot then
34741: LD_VAR 0 1
34745: PPUSH
34746: CALL_OW 266
34750: PUSH
34751: LD_INT 0
34753: EQUAL
34754: IFFALSE 34766
// dist := 28 else
34756: LD_ADDR_VAR 0 14
34760: PUSH
34761: LD_INT 28
34763: ST_TO_ADDR
34764: GO 34774
// dist := 36 ;
34766: LD_ADDR_VAR 0 14
34770: PUSH
34771: LD_INT 36
34773: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_VAR 0 3
34783: PPUSH
34784: LD_VAR 0 4
34788: PPUSH
34789: CALL_OW 297
34793: PUSH
34794: LD_VAR 0 14
34798: GREATER
34799: IFFALSE 34803
// exit ;
34801: GO 35343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34803: LD_ADDR_VAR 0 12
34807: PUSH
34808: LD_VAR 0 2
34812: PPUSH
34813: LD_VAR 0 3
34817: PPUSH
34818: LD_VAR 0 4
34822: PPUSH
34823: LD_VAR 0 5
34827: PPUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 248
34837: PPUSH
34838: LD_INT 0
34840: PPUSH
34841: CALL 35348 0 6
34845: ST_TO_ADDR
// if not hexes then
34846: LD_VAR 0 12
34850: NOT
34851: IFFALSE 34855
// exit ;
34853: GO 35343
// hex := GetHexInfo ( x , y ) ;
34855: LD_ADDR_VAR 0 15
34859: PUSH
34860: LD_VAR 0 3
34864: PPUSH
34865: LD_VAR 0 4
34869: PPUSH
34870: CALL_OW 546
34874: ST_TO_ADDR
// if hex [ 1 ] then
34875: LD_VAR 0 15
34879: PUSH
34880: LD_INT 1
34882: ARRAY
34883: IFFALSE 34887
// exit ;
34885: GO 35343
// height := hex [ 2 ] ;
34887: LD_ADDR_VAR 0 13
34891: PUSH
34892: LD_VAR 0 15
34896: PUSH
34897: LD_INT 2
34899: ARRAY
34900: ST_TO_ADDR
// for i = 1 to hexes do
34901: LD_ADDR_VAR 0 7
34905: PUSH
34906: DOUBLE
34907: LD_INT 1
34909: DEC
34910: ST_TO_ADDR
34911: LD_VAR 0 12
34915: PUSH
34916: FOR_TO
34917: IFFALSE 35247
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34919: LD_VAR 0 12
34923: PUSH
34924: LD_VAR 0 7
34928: ARRAY
34929: PUSH
34930: LD_INT 1
34932: ARRAY
34933: PPUSH
34934: LD_VAR 0 12
34938: PUSH
34939: LD_VAR 0 7
34943: ARRAY
34944: PUSH
34945: LD_INT 2
34947: ARRAY
34948: PPUSH
34949: CALL_OW 488
34953: NOT
34954: PUSH
34955: LD_VAR 0 12
34959: PUSH
34960: LD_VAR 0 7
34964: ARRAY
34965: PUSH
34966: LD_INT 1
34968: ARRAY
34969: PPUSH
34970: LD_VAR 0 12
34974: PUSH
34975: LD_VAR 0 7
34979: ARRAY
34980: PUSH
34981: LD_INT 2
34983: ARRAY
34984: PPUSH
34985: CALL_OW 428
34989: PUSH
34990: LD_INT 0
34992: GREATER
34993: OR
34994: PUSH
34995: LD_VAR 0 12
34999: PUSH
35000: LD_VAR 0 7
35004: ARRAY
35005: PUSH
35006: LD_INT 1
35008: ARRAY
35009: PPUSH
35010: LD_VAR 0 12
35014: PUSH
35015: LD_VAR 0 7
35019: ARRAY
35020: PUSH
35021: LD_INT 2
35023: ARRAY
35024: PPUSH
35025: CALL_OW 351
35029: OR
35030: IFFALSE 35036
// exit ;
35032: POP
35033: POP
35034: GO 35343
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35036: LD_ADDR_VAR 0 8
35040: PUSH
35041: LD_VAR 0 12
35045: PUSH
35046: LD_VAR 0 7
35050: ARRAY
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: PPUSH
35056: LD_VAR 0 12
35060: PUSH
35061: LD_VAR 0 7
35065: ARRAY
35066: PUSH
35067: LD_INT 2
35069: ARRAY
35070: PPUSH
35071: CALL_OW 546
35075: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35076: LD_VAR 0 8
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: PUSH
35085: LD_VAR 0 8
35089: PUSH
35090: LD_INT 2
35092: ARRAY
35093: PUSH
35094: LD_VAR 0 13
35098: PUSH
35099: LD_INT 2
35101: PLUS
35102: GREATER
35103: OR
35104: PUSH
35105: LD_VAR 0 8
35109: PUSH
35110: LD_INT 2
35112: ARRAY
35113: PUSH
35114: LD_VAR 0 13
35118: PUSH
35119: LD_INT 2
35121: MINUS
35122: LESS
35123: OR
35124: PUSH
35125: LD_VAR 0 8
35129: PUSH
35130: LD_INT 3
35132: ARRAY
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 8
35139: PUSH
35140: LD_INT 9
35142: PUSH
35143: LD_INT 10
35145: PUSH
35146: LD_INT 11
35148: PUSH
35149: LD_INT 12
35151: PUSH
35152: LD_INT 13
35154: PUSH
35155: LD_INT 16
35157: PUSH
35158: LD_INT 17
35160: PUSH
35161: LD_INT 18
35163: PUSH
35164: LD_INT 19
35166: PUSH
35167: LD_INT 20
35169: PUSH
35170: LD_INT 21
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: IN
35188: NOT
35189: OR
35190: PUSH
35191: LD_VAR 0 8
35195: PUSH
35196: LD_INT 5
35198: ARRAY
35199: NOT
35200: OR
35201: PUSH
35202: LD_VAR 0 8
35206: PUSH
35207: LD_INT 6
35209: ARRAY
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: LD_INT 7
35219: PUSH
35220: LD_INT 9
35222: PUSH
35223: LD_INT 10
35225: PUSH
35226: LD_INT 11
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: IN
35237: NOT
35238: OR
35239: IFFALSE 35245
// exit ;
35241: POP
35242: POP
35243: GO 35343
// end ;
35245: GO 34916
35247: POP
35248: POP
// side := GetSide ( depot ) ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 255
35263: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35264: LD_VAR 0 9
35268: PPUSH
35269: LD_VAR 0 3
35273: PPUSH
35274: LD_VAR 0 4
35278: PPUSH
35279: LD_INT 20
35281: PPUSH
35282: CALL 27664 0 4
35286: PUSH
35287: LD_INT 4
35289: ARRAY
35290: IFFALSE 35294
// exit ;
35292: GO 35343
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35294: LD_VAR 0 2
35298: PUSH
35299: LD_INT 29
35301: PUSH
35302: LD_INT 30
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: IN
35309: PUSH
35310: LD_VAR 0 3
35314: PPUSH
35315: LD_VAR 0 4
35319: PPUSH
35320: LD_VAR 0 9
35324: PPUSH
35325: CALL_OW 440
35329: NOT
35330: AND
35331: IFFALSE 35335
// exit ;
35333: GO 35343
// result := true ;
35335: LD_ADDR_VAR 0 6
35339: PUSH
35340: LD_INT 1
35342: ST_TO_ADDR
// end ;
35343: LD_VAR 0 6
35347: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35348: LD_INT 0
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
35374: PPUSH
35375: PPUSH
35376: PPUSH
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
35383: PPUSH
35384: PPUSH
35385: PPUSH
35386: PPUSH
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
35393: PPUSH
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
35399: PPUSH
35400: PPUSH
35401: PPUSH
35402: PPUSH
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
// result = [ ] ;
35408: LD_ADDR_VAR 0 7
35412: PUSH
35413: EMPTY
35414: ST_TO_ADDR
// temp_list = [ ] ;
35415: LD_ADDR_VAR 0 9
35419: PUSH
35420: EMPTY
35421: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35422: LD_VAR 0 4
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: IN
35453: NOT
35454: PUSH
35455: LD_VAR 0 1
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: IN
35470: PUSH
35471: LD_VAR 0 5
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: IN
35490: NOT
35491: AND
35492: OR
35493: IFFALSE 35497
// exit ;
35495: GO 53888
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35497: LD_VAR 0 1
35501: PUSH
35502: LD_INT 6
35504: PUSH
35505: LD_INT 7
35507: PUSH
35508: LD_INT 8
35510: PUSH
35511: LD_INT 13
35513: PUSH
35514: LD_INT 12
35516: PUSH
35517: LD_INT 15
35519: PUSH
35520: LD_INT 11
35522: PUSH
35523: LD_INT 14
35525: PUSH
35526: LD_INT 10
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: IN
35540: IFFALSE 35550
// btype = b_lab ;
35542: LD_ADDR_VAR 0 1
35546: PUSH
35547: LD_INT 6
35549: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35550: LD_VAR 0 6
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: IN
35569: NOT
35570: PUSH
35571: LD_VAR 0 1
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: LD_INT 3
35587: PUSH
35588: LD_INT 6
35590: PUSH
35591: LD_INT 36
35593: PUSH
35594: LD_INT 4
35596: PUSH
35597: LD_INT 5
35599: PUSH
35600: LD_INT 31
35602: PUSH
35603: LD_INT 32
35605: PUSH
35606: LD_INT 33
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: IN
35622: NOT
35623: PUSH
35624: LD_VAR 0 6
35628: PUSH
35629: LD_INT 1
35631: EQUAL
35632: AND
35633: OR
35634: PUSH
35635: LD_VAR 0 1
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: LD_INT 3
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: IN
35650: NOT
35651: PUSH
35652: LD_VAR 0 6
35656: PUSH
35657: LD_INT 2
35659: EQUAL
35660: AND
35661: OR
35662: IFFALSE 35672
// mode = 0 ;
35664: LD_ADDR_VAR 0 6
35668: PUSH
35669: LD_INT 0
35671: ST_TO_ADDR
// case mode of 0 :
35672: LD_VAR 0 6
35676: PUSH
35677: LD_INT 0
35679: DOUBLE
35680: EQUAL
35681: IFTRUE 35685
35683: GO 47138
35685: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35686: LD_ADDR_VAR 0 11
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35879: LD_ADDR_VAR 0 12
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: NEG
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 2
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 2
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 3
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 3
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36075: LD_ADDR_VAR 0 13
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 3
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36274: LD_ADDR_VAR 0 14
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 3
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 3
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36470: LD_ADDR_VAR 0 15
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 2
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36663: LD_ADDR_VAR 0 16
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: LD_INT 2
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 3
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36856: LD_ADDR_VAR 0 17
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: LD_INT 2
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 2
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37086: LD_ADDR_VAR 0 18
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37316: LD_ADDR_VAR 0 19
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 2
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 2
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37546: LD_ADDR_VAR 0 20
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 2
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 2
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: NEG
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37776: LD_ADDR_VAR 0 21
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38006: LD_ADDR_VAR 0 22
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 2
38205: NEG
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38236: LD_ADDR_VAR 0 23
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: LD_INT 3
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38516: LD_ADDR_VAR 0 24
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 3
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38792: LD_ADDR_VAR 0 25
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 2
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 3
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: PUSH
39024: LD_INT 3
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39066: LD_ADDR_VAR 0 26
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39342: LD_ADDR_VAR 0 27
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 3
39575: NEG
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 3
39587: NEG
39588: PUSH
39589: LD_INT 2
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39622: LD_ADDR_VAR 0 28
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 1
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: LD_INT 3
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39904: LD_ADDR_VAR 0 29
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40183: LD_ADDR_VAR 0 30
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 3
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40461: LD_ADDR_VAR 0 31
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 3
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40739: LD_ADDR_VAR 0 32
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 3
40982: NEG
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41017: LD_ADDR_VAR 0 33
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 3
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 3
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 3
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41296: LD_ADDR_VAR 0 34
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: LD_INT 3
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 3
41541: NEG
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41576: LD_ADDR_VAR 0 35
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41688: LD_ADDR_VAR 0 36
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 2
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41800: LD_ADDR_VAR 0 37
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41912: LD_ADDR_VAR 0 38
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42024: LD_ADDR_VAR 0 39
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42136: LD_ADDR_VAR 0 40
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42248: LD_ADDR_VAR 0 41
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 2
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: LD_INT 3
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: LD_INT 3
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 3
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 3
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: NEG
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: LD_INT 3
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42598: LD_ADDR_VAR 0 42
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: LD_INT 3
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: LD_INT 3
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 3
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: NEG
42908: PUSH
42909: LD_INT 3
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42948: LD_ADDR_VAR 0 43
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43296: LD_ADDR_VAR 0 44
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 3
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 3
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: LD_INT 3
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43646: LD_ADDR_VAR 0 45
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 2
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 3
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: LD_INT 3
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43996: LD_ADDR_VAR 0 46
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: NEG
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44344: LD_ADDR_VAR 0 47
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44495: LD_ADDR_VAR 0 48
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44642: LD_ADDR_VAR 0 49
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44786: LD_ADDR_VAR 0 50
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44930: LD_ADDR_VAR 0 51
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45077: LD_ADDR_VAR 0 52
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45228: LD_ADDR_VAR 0 53
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45458: LD_ADDR_VAR 0 54
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 2
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45688: LD_ADDR_VAR 0 55
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45918: LD_ADDR_VAR 0 56
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46148: LD_ADDR_VAR 0 57
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46378: LD_ADDR_VAR 0 58
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46608: LD_ADDR_VAR 0 59
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46696: LD_ADDR_VAR 0 60
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46784: LD_ADDR_VAR 0 61
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46872: LD_ADDR_VAR 0 62
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46960: LD_ADDR_VAR 0 63
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47048: LD_ADDR_VAR 0 64
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// end ; 1 :
47136: GO 53033
47138: LD_INT 1
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 49769
47146: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47147: LD_ADDR_VAR 0 11
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47191: LD_ADDR_VAR 0 12
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47232: LD_ADDR_VAR 0 13
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47272: LD_ADDR_VAR 0 14
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47313: LD_ADDR_VAR 0 15
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47357: LD_ADDR_VAR 0 16
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 3
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47403: LD_ADDR_VAR 0 17
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47447: LD_ADDR_VAR 0 18
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47488: LD_ADDR_VAR 0 19
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 3
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47528: LD_ADDR_VAR 0 20
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47569: LD_ADDR_VAR 0 21
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47613: LD_ADDR_VAR 0 22
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: NEG
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47659: LD_ADDR_VAR 0 23
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 4
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47703: LD_ADDR_VAR 0 24
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47744: LD_ADDR_VAR 0 25
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 4
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47784: LD_ADDR_VAR 0 26
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 4
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47825: LD_ADDR_VAR 0 27
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 4
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47869: LD_ADDR_VAR 0 28
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 3
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 4
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 4
47900: NEG
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47915: LD_ADDR_VAR 0 29
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 3
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 4
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 4
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 5
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 5
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 4
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 6
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 6
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 5
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48070: LD_ADDR_VAR 0 30
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 4
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 5
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 5
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 5
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 6
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 6
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48213: LD_ADDR_VAR 0 31
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 4
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: LD_INT 4
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 5
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 5
48290: PUSH
48291: LD_INT 5
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 4
48300: PUSH
48301: LD_INT 5
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 6
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 6
48320: PUSH
48321: LD_INT 6
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 5
48330: PUSH
48331: LD_INT 6
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48352: LD_ADDR_VAR 0 32
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 4
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 5
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 5
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 4
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 6
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 6
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48495: LD_ADDR_VAR 0 33
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 4
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: NEG
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 5
48581: NEG
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 5
48592: NEG
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 5
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 6
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 6
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48650: LD_ADDR_VAR 0 34
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 3
48669: NEG
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 3
48693: NEG
48694: PUSH
48695: LD_INT 4
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 4
48705: NEG
48706: PUSH
48707: LD_INT 3
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 4
48717: NEG
48718: PUSH
48719: LD_INT 4
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 4
48729: NEG
48730: PUSH
48731: LD_INT 5
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 5
48741: NEG
48742: PUSH
48743: LD_INT 4
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 5
48753: NEG
48754: PUSH
48755: LD_INT 5
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 5
48765: NEG
48766: PUSH
48767: LD_INT 6
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 6
48777: NEG
48778: PUSH
48779: LD_INT 5
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 6
48789: NEG
48790: PUSH
48791: LD_INT 6
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48813: LD_ADDR_VAR 0 41
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 3
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48857: LD_ADDR_VAR 0 42
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48898: LD_ADDR_VAR 0 43
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48938: LD_ADDR_VAR 0 44
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48979: LD_ADDR_VAR 0 45
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49023: LD_ADDR_VAR 0 46
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: LD_INT 3
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 3
49054: NEG
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49069: LD_ADDR_VAR 0 47
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 3
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 3
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49102: LD_ADDR_VAR 0 48
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49133: LD_ADDR_VAR 0 49
49137: PUSH
49138: LD_INT 3
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49162: LD_ADDR_VAR 0 50
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49191: LD_ADDR_VAR 0 51
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49222: LD_ADDR_VAR 0 52
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49255: LD_ADDR_VAR 0 53
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 3
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49299: LD_ADDR_VAR 0 54
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49340: LD_ADDR_VAR 0 55
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49380: LD_ADDR_VAR 0 56
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49421: LD_ADDR_VAR 0 57
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49465: LD_ADDR_VAR 0 58
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49511: LD_ADDR_VAR 0 59
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49555: LD_ADDR_VAR 0 60
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49596: LD_ADDR_VAR 0 61
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49636: LD_ADDR_VAR 0 62
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49677: LD_ADDR_VAR 0 63
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49721: LD_ADDR_VAR 0 64
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 2
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: ST_TO_ADDR
// end ; 2 :
49767: GO 53033
49769: LD_INT 2
49771: DOUBLE
49772: EQUAL
49773: IFTRUE 49777
49775: GO 53032
49777: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49778: LD_ADDR_VAR 0 29
49782: PUSH
49783: LD_INT 4
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 5
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 5
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 4
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 5
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 4
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 4
49908: PUSH
49909: LD_INT 4
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 3
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 4
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 4
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 4
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 5
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 5
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 4
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 5
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 4
50140: NEG
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 4
50163: NEG
50164: PUSH
50165: LD_INT 4
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: LD_INT 5
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: LD_INT 4
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 3
50199: NEG
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 4
50211: NEG
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 5
50223: NEG
50224: PUSH
50225: LD_INT 4
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 5
50235: NEG
50236: PUSH
50237: LD_INT 5
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 5
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 5
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50316: LD_ADDR_VAR 0 30
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: LD_INT 4
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: LD_INT 3
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 5
50343: PUSH
50344: LD_INT 4
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 5
50353: PUSH
50354: LD_INT 5
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 5
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 3
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 5
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: LD_INT 5
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 4
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 4
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 4
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 5
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 5
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 5
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: LD_INT 3
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: LD_INT 4
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 2
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 4
50668: NEG
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: LD_INT 4
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 4
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 4
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 5
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 4
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 3
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 4
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 5
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 3
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 5
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50863: LD_ADDR_VAR 0 31
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 4
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 4
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 5
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 5
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 4
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 5
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 4
51019: NEG
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 4
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 4
51065: NEG
51066: PUSH
51067: LD_INT 4
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 4
51077: NEG
51078: PUSH
51079: LD_INT 5
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 4
51113: NEG
51114: PUSH
51115: LD_INT 3
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 5
51125: NEG
51126: PUSH
51127: LD_INT 4
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: LD_INT 5
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 5
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 5
51161: NEG
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 4
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: LD_INT 4
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 4
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 4
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 4
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 5
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51413: LD_ADDR_VAR 0 32
51417: PUSH
51418: LD_INT 4
51420: NEG
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 4
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 5
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 5
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 5
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 4
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: LD_INT 2
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: LD_INT 3
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 4
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: NEG
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 4
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 4
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 5
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 3
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 3
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 4
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 5
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: LD_INT 5
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 3
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 4
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 4
51825: PUSH
51826: LD_INT 4
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 5
51845: PUSH
51846: LD_INT 4
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 5
51855: PUSH
51856: LD_INT 5
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 4
51865: PUSH
51866: LD_INT 5
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: LD_INT 4
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 5
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 5
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51960: LD_ADDR_VAR 0 33
51964: PUSH
51965: LD_INT 4
51967: NEG
51968: PUSH
51969: LD_INT 4
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 4
51979: NEG
51980: PUSH
51981: LD_INT 5
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: LD_INT 4
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 3
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 4
52015: NEG
52016: PUSH
52017: LD_INT 3
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: LD_INT 4
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 5
52039: NEG
52040: PUSH
52041: LD_INT 5
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: LD_INT 5
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 5
52063: NEG
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 4
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: LD_INT 4
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 4
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 5
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 5
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 5
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 4
52290: PUSH
52291: LD_INT 3
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 4
52300: PUSH
52301: LD_INT 4
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: LD_INT 4
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 4
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 4
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 4
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 5
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 5
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 5
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52498: LD_ADDR_VAR 0 34
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 4
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 5
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 4
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 4
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 5
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 5
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 4
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 4
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: PUSH
52721: LD_INT 4
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: LD_INT 5
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 4
52740: PUSH
52741: LD_INT 5
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 3
52750: PUSH
52751: LD_INT 4
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 4
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 4
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 4
52883: NEG
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 5
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 5
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 5
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// end ; end ;
53030: GO 53033
53032: POP
// case btype of b_depot , b_warehouse :
53033: LD_VAR 0 1
53037: PUSH
53038: LD_INT 0
53040: DOUBLE
53041: EQUAL
53042: IFTRUE 53052
53044: LD_INT 1
53046: DOUBLE
53047: EQUAL
53048: IFTRUE 53052
53050: GO 53253
53052: POP
// case nation of nation_american :
53053: LD_VAR 0 5
53057: PUSH
53058: LD_INT 1
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53066
53064: GO 53122
53066: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53067: LD_ADDR_VAR 0 9
53071: PUSH
53072: LD_VAR 0 11
53076: PUSH
53077: LD_VAR 0 12
53081: PUSH
53082: LD_VAR 0 13
53086: PUSH
53087: LD_VAR 0 14
53091: PUSH
53092: LD_VAR 0 15
53096: PUSH
53097: LD_VAR 0 16
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: PUSH
53110: LD_VAR 0 4
53114: PUSH
53115: LD_INT 1
53117: PLUS
53118: ARRAY
53119: ST_TO_ADDR
53120: GO 53251
53122: LD_INT 2
53124: DOUBLE
53125: EQUAL
53126: IFTRUE 53130
53128: GO 53186
53130: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53131: LD_ADDR_VAR 0 9
53135: PUSH
53136: LD_VAR 0 17
53140: PUSH
53141: LD_VAR 0 18
53145: PUSH
53146: LD_VAR 0 19
53150: PUSH
53151: LD_VAR 0 20
53155: PUSH
53156: LD_VAR 0 21
53160: PUSH
53161: LD_VAR 0 22
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: PUSH
53174: LD_VAR 0 4
53178: PUSH
53179: LD_INT 1
53181: PLUS
53182: ARRAY
53183: ST_TO_ADDR
53184: GO 53251
53186: LD_INT 3
53188: DOUBLE
53189: EQUAL
53190: IFTRUE 53194
53192: GO 53250
53194: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53195: LD_ADDR_VAR 0 9
53199: PUSH
53200: LD_VAR 0 23
53204: PUSH
53205: LD_VAR 0 24
53209: PUSH
53210: LD_VAR 0 25
53214: PUSH
53215: LD_VAR 0 26
53219: PUSH
53220: LD_VAR 0 27
53224: PUSH
53225: LD_VAR 0 28
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: PUSH
53238: LD_VAR 0 4
53242: PUSH
53243: LD_INT 1
53245: PLUS
53246: ARRAY
53247: ST_TO_ADDR
53248: GO 53251
53250: POP
53251: GO 53806
53253: LD_INT 2
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53267
53259: LD_INT 3
53261: DOUBLE
53262: EQUAL
53263: IFTRUE 53267
53265: GO 53323
53267: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53268: LD_ADDR_VAR 0 9
53272: PUSH
53273: LD_VAR 0 29
53277: PUSH
53278: LD_VAR 0 30
53282: PUSH
53283: LD_VAR 0 31
53287: PUSH
53288: LD_VAR 0 32
53292: PUSH
53293: LD_VAR 0 33
53297: PUSH
53298: LD_VAR 0 34
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: PUSH
53311: LD_VAR 0 4
53315: PUSH
53316: LD_INT 1
53318: PLUS
53319: ARRAY
53320: ST_TO_ADDR
53321: GO 53806
53323: LD_INT 16
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53385
53329: LD_INT 17
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53385
53335: LD_INT 18
53337: DOUBLE
53338: EQUAL
53339: IFTRUE 53385
53341: LD_INT 19
53343: DOUBLE
53344: EQUAL
53345: IFTRUE 53385
53347: LD_INT 22
53349: DOUBLE
53350: EQUAL
53351: IFTRUE 53385
53353: LD_INT 20
53355: DOUBLE
53356: EQUAL
53357: IFTRUE 53385
53359: LD_INT 21
53361: DOUBLE
53362: EQUAL
53363: IFTRUE 53385
53365: LD_INT 23
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53385
53371: LD_INT 24
53373: DOUBLE
53374: EQUAL
53375: IFTRUE 53385
53377: LD_INT 25
53379: DOUBLE
53380: EQUAL
53381: IFTRUE 53385
53383: GO 53441
53385: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53386: LD_ADDR_VAR 0 9
53390: PUSH
53391: LD_VAR 0 35
53395: PUSH
53396: LD_VAR 0 36
53400: PUSH
53401: LD_VAR 0 37
53405: PUSH
53406: LD_VAR 0 38
53410: PUSH
53411: LD_VAR 0 39
53415: PUSH
53416: LD_VAR 0 40
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: PUSH
53429: LD_VAR 0 4
53433: PUSH
53434: LD_INT 1
53436: PLUS
53437: ARRAY
53438: ST_TO_ADDR
53439: GO 53806
53441: LD_INT 6
53443: DOUBLE
53444: EQUAL
53445: IFTRUE 53497
53447: LD_INT 7
53449: DOUBLE
53450: EQUAL
53451: IFTRUE 53497
53453: LD_INT 8
53455: DOUBLE
53456: EQUAL
53457: IFTRUE 53497
53459: LD_INT 13
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53497
53465: LD_INT 12
53467: DOUBLE
53468: EQUAL
53469: IFTRUE 53497
53471: LD_INT 15
53473: DOUBLE
53474: EQUAL
53475: IFTRUE 53497
53477: LD_INT 11
53479: DOUBLE
53480: EQUAL
53481: IFTRUE 53497
53483: LD_INT 14
53485: DOUBLE
53486: EQUAL
53487: IFTRUE 53497
53489: LD_INT 10
53491: DOUBLE
53492: EQUAL
53493: IFTRUE 53497
53495: GO 53553
53497: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53498: LD_ADDR_VAR 0 9
53502: PUSH
53503: LD_VAR 0 41
53507: PUSH
53508: LD_VAR 0 42
53512: PUSH
53513: LD_VAR 0 43
53517: PUSH
53518: LD_VAR 0 44
53522: PUSH
53523: LD_VAR 0 45
53527: PUSH
53528: LD_VAR 0 46
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: PUSH
53541: LD_VAR 0 4
53545: PUSH
53546: LD_INT 1
53548: PLUS
53549: ARRAY
53550: ST_TO_ADDR
53551: GO 53806
53553: LD_INT 36
53555: DOUBLE
53556: EQUAL
53557: IFTRUE 53561
53559: GO 53617
53561: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53562: LD_ADDR_VAR 0 9
53566: PUSH
53567: LD_VAR 0 47
53571: PUSH
53572: LD_VAR 0 48
53576: PUSH
53577: LD_VAR 0 49
53581: PUSH
53582: LD_VAR 0 50
53586: PUSH
53587: LD_VAR 0 51
53591: PUSH
53592: LD_VAR 0 52
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: PUSH
53605: LD_VAR 0 4
53609: PUSH
53610: LD_INT 1
53612: PLUS
53613: ARRAY
53614: ST_TO_ADDR
53615: GO 53806
53617: LD_INT 4
53619: DOUBLE
53620: EQUAL
53621: IFTRUE 53643
53623: LD_INT 5
53625: DOUBLE
53626: EQUAL
53627: IFTRUE 53643
53629: LD_INT 34
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53643
53635: LD_INT 37
53637: DOUBLE
53638: EQUAL
53639: IFTRUE 53643
53641: GO 53699
53643: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53644: LD_ADDR_VAR 0 9
53648: PUSH
53649: LD_VAR 0 53
53653: PUSH
53654: LD_VAR 0 54
53658: PUSH
53659: LD_VAR 0 55
53663: PUSH
53664: LD_VAR 0 56
53668: PUSH
53669: LD_VAR 0 57
53673: PUSH
53674: LD_VAR 0 58
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: LD_VAR 0 4
53691: PUSH
53692: LD_INT 1
53694: PLUS
53695: ARRAY
53696: ST_TO_ADDR
53697: GO 53806
53699: LD_INT 31
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53749
53705: LD_INT 32
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53749
53711: LD_INT 33
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53749
53717: LD_INT 27
53719: DOUBLE
53720: EQUAL
53721: IFTRUE 53749
53723: LD_INT 26
53725: DOUBLE
53726: EQUAL
53727: IFTRUE 53749
53729: LD_INT 28
53731: DOUBLE
53732: EQUAL
53733: IFTRUE 53749
53735: LD_INT 29
53737: DOUBLE
53738: EQUAL
53739: IFTRUE 53749
53741: LD_INT 30
53743: DOUBLE
53744: EQUAL
53745: IFTRUE 53749
53747: GO 53805
53749: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53750: LD_ADDR_VAR 0 9
53754: PUSH
53755: LD_VAR 0 59
53759: PUSH
53760: LD_VAR 0 60
53764: PUSH
53765: LD_VAR 0 61
53769: PUSH
53770: LD_VAR 0 62
53774: PUSH
53775: LD_VAR 0 63
53779: PUSH
53780: LD_VAR 0 64
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: PUSH
53793: LD_VAR 0 4
53797: PUSH
53798: LD_INT 1
53800: PLUS
53801: ARRAY
53802: ST_TO_ADDR
53803: GO 53806
53805: POP
// temp_list2 = [ ] ;
53806: LD_ADDR_VAR 0 10
53810: PUSH
53811: EMPTY
53812: ST_TO_ADDR
// for i in temp_list do
53813: LD_ADDR_VAR 0 8
53817: PUSH
53818: LD_VAR 0 9
53822: PUSH
53823: FOR_IN
53824: IFFALSE 53876
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53826: LD_ADDR_VAR 0 10
53830: PUSH
53831: LD_VAR 0 10
53835: PUSH
53836: LD_VAR 0 8
53840: PUSH
53841: LD_INT 1
53843: ARRAY
53844: PUSH
53845: LD_VAR 0 2
53849: PLUS
53850: PUSH
53851: LD_VAR 0 8
53855: PUSH
53856: LD_INT 2
53858: ARRAY
53859: PUSH
53860: LD_VAR 0 3
53864: PLUS
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: ADD
53873: ST_TO_ADDR
53874: GO 53823
53876: POP
53877: POP
// result = temp_list2 ;
53878: LD_ADDR_VAR 0 7
53882: PUSH
53883: LD_VAR 0 10
53887: ST_TO_ADDR
// end ;
53888: LD_VAR 0 7
53892: RET
// export function EnemyInRange ( unit , dist ) ; begin
53893: LD_INT 0
53895: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53896: LD_ADDR_VAR 0 3
53900: PUSH
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 255
53910: PPUSH
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL_OW 250
53920: PPUSH
53921: LD_VAR 0 1
53925: PPUSH
53926: CALL_OW 251
53930: PPUSH
53931: LD_VAR 0 2
53935: PPUSH
53936: CALL 27664 0 4
53940: PUSH
53941: LD_INT 4
53943: ARRAY
53944: ST_TO_ADDR
// end ;
53945: LD_VAR 0 3
53949: RET
// export function PlayerSeeMe ( unit ) ; begin
53950: LD_INT 0
53952: PPUSH
// result := See ( your_side , unit ) ;
53953: LD_ADDR_VAR 0 2
53957: PUSH
53958: LD_OWVAR 2
53962: PPUSH
53963: LD_VAR 0 1
53967: PPUSH
53968: CALL_OW 292
53972: ST_TO_ADDR
// end ;
53973: LD_VAR 0 2
53977: RET
// export function ReverseDir ( unit ) ; begin
53978: LD_INT 0
53980: PPUSH
// if not unit then
53981: LD_VAR 0 1
53985: NOT
53986: IFFALSE 53990
// exit ;
53988: GO 54013
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53990: LD_ADDR_VAR 0 2
53994: PUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: CALL_OW 254
54004: PUSH
54005: LD_INT 3
54007: PLUS
54008: PUSH
54009: LD_INT 6
54011: MOD
54012: ST_TO_ADDR
// end ;
54013: LD_VAR 0 2
54017: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54018: LD_INT 0
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
54024: PPUSH
// if not hexes then
54025: LD_VAR 0 2
54029: NOT
54030: IFFALSE 54034
// exit ;
54032: GO 54182
// dist := 9999 ;
54034: LD_ADDR_VAR 0 5
54038: PUSH
54039: LD_INT 9999
54041: ST_TO_ADDR
// for i = 1 to hexes do
54042: LD_ADDR_VAR 0 4
54046: PUSH
54047: DOUBLE
54048: LD_INT 1
54050: DEC
54051: ST_TO_ADDR
54052: LD_VAR 0 2
54056: PUSH
54057: FOR_TO
54058: IFFALSE 54170
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 2
54069: PUSH
54070: LD_VAR 0 4
54074: ARRAY
54075: PUSH
54076: LD_INT 1
54078: ARRAY
54079: PPUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_VAR 0 4
54089: ARRAY
54090: PUSH
54091: LD_INT 2
54093: ARRAY
54094: PPUSH
54095: CALL_OW 297
54099: PUSH
54100: LD_VAR 0 5
54104: LESS
54105: IFFALSE 54168
// begin hex := hexes [ i ] ;
54107: LD_ADDR_VAR 0 7
54111: PUSH
54112: LD_VAR 0 2
54116: PUSH
54117: LD_VAR 0 4
54121: ARRAY
54122: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54123: LD_ADDR_VAR 0 5
54127: PUSH
54128: LD_VAR 0 1
54132: PPUSH
54133: LD_VAR 0 2
54137: PUSH
54138: LD_VAR 0 4
54142: ARRAY
54143: PUSH
54144: LD_INT 1
54146: ARRAY
54147: PPUSH
54148: LD_VAR 0 2
54152: PUSH
54153: LD_VAR 0 4
54157: ARRAY
54158: PUSH
54159: LD_INT 2
54161: ARRAY
54162: PPUSH
54163: CALL_OW 297
54167: ST_TO_ADDR
// end ; end ;
54168: GO 54057
54170: POP
54171: POP
// result := hex ;
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_VAR 0 7
54181: ST_TO_ADDR
// end ;
54182: LD_VAR 0 3
54186: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54187: LD_INT 0
54189: PPUSH
54190: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54191: LD_VAR 0 1
54195: NOT
54196: PUSH
54197: LD_VAR 0 1
54201: PUSH
54202: LD_INT 21
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 23
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PPUSH
54226: CALL_OW 69
54230: IN
54231: NOT
54232: OR
54233: IFFALSE 54237
// exit ;
54235: GO 54284
// for i = 1 to 3 do
54237: LD_ADDR_VAR 0 3
54241: PUSH
54242: DOUBLE
54243: LD_INT 1
54245: DEC
54246: ST_TO_ADDR
54247: LD_INT 3
54249: PUSH
54250: FOR_TO
54251: IFFALSE 54282
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54253: LD_VAR 0 1
54257: PPUSH
54258: CALL_OW 250
54262: PPUSH
54263: LD_VAR 0 1
54267: PPUSH
54268: CALL_OW 251
54272: PPUSH
54273: LD_INT 1
54275: PPUSH
54276: CALL_OW 453
54280: GO 54250
54282: POP
54283: POP
// end ;
54284: LD_VAR 0 2
54288: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54289: LD_INT 0
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54297: LD_VAR 0 1
54301: NOT
54302: PUSH
54303: LD_VAR 0 2
54307: NOT
54308: OR
54309: PUSH
54310: LD_VAR 0 1
54314: PPUSH
54315: CALL_OW 314
54319: OR
54320: IFFALSE 54324
// exit ;
54322: GO 54765
// x := GetX ( enemy_unit ) ;
54324: LD_ADDR_VAR 0 7
54328: PUSH
54329: LD_VAR 0 2
54333: PPUSH
54334: CALL_OW 250
54338: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54339: LD_ADDR_VAR 0 8
54343: PUSH
54344: LD_VAR 0 2
54348: PPUSH
54349: CALL_OW 251
54353: ST_TO_ADDR
// if not x or not y then
54354: LD_VAR 0 7
54358: NOT
54359: PUSH
54360: LD_VAR 0 8
54364: NOT
54365: OR
54366: IFFALSE 54370
// exit ;
54368: GO 54765
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54370: LD_ADDR_VAR 0 6
54374: PUSH
54375: LD_VAR 0 7
54379: PPUSH
54380: LD_INT 0
54382: PPUSH
54383: LD_INT 4
54385: PPUSH
54386: CALL_OW 272
54390: PUSH
54391: LD_VAR 0 8
54395: PPUSH
54396: LD_INT 0
54398: PPUSH
54399: LD_INT 4
54401: PPUSH
54402: CALL_OW 273
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_VAR 0 7
54415: PPUSH
54416: LD_INT 1
54418: PPUSH
54419: LD_INT 4
54421: PPUSH
54422: CALL_OW 272
54426: PUSH
54427: LD_VAR 0 8
54431: PPUSH
54432: LD_INT 1
54434: PPUSH
54435: LD_INT 4
54437: PPUSH
54438: CALL_OW 273
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_VAR 0 7
54451: PPUSH
54452: LD_INT 2
54454: PPUSH
54455: LD_INT 4
54457: PPUSH
54458: CALL_OW 272
54462: PUSH
54463: LD_VAR 0 8
54467: PPUSH
54468: LD_INT 2
54470: PPUSH
54471: LD_INT 4
54473: PPUSH
54474: CALL_OW 273
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_VAR 0 7
54487: PPUSH
54488: LD_INT 3
54490: PPUSH
54491: LD_INT 4
54493: PPUSH
54494: CALL_OW 272
54498: PUSH
54499: LD_VAR 0 8
54503: PPUSH
54504: LD_INT 3
54506: PPUSH
54507: LD_INT 4
54509: PPUSH
54510: CALL_OW 273
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_VAR 0 7
54523: PPUSH
54524: LD_INT 4
54526: PPUSH
54527: LD_INT 4
54529: PPUSH
54530: CALL_OW 272
54534: PUSH
54535: LD_VAR 0 8
54539: PPUSH
54540: LD_INT 4
54542: PPUSH
54543: LD_INT 4
54545: PPUSH
54546: CALL_OW 273
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_VAR 0 7
54559: PPUSH
54560: LD_INT 5
54562: PPUSH
54563: LD_INT 4
54565: PPUSH
54566: CALL_OW 272
54570: PUSH
54571: LD_VAR 0 8
54575: PPUSH
54576: LD_INT 5
54578: PPUSH
54579: LD_INT 4
54581: PPUSH
54582: CALL_OW 273
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// for i = tmp downto 1 do
54599: LD_ADDR_VAR 0 4
54603: PUSH
54604: DOUBLE
54605: LD_VAR 0 6
54609: INC
54610: ST_TO_ADDR
54611: LD_INT 1
54613: PUSH
54614: FOR_DOWNTO
54615: IFFALSE 54716
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54617: LD_VAR 0 6
54621: PUSH
54622: LD_VAR 0 4
54626: ARRAY
54627: PUSH
54628: LD_INT 1
54630: ARRAY
54631: PPUSH
54632: LD_VAR 0 6
54636: PUSH
54637: LD_VAR 0 4
54641: ARRAY
54642: PUSH
54643: LD_INT 2
54645: ARRAY
54646: PPUSH
54647: CALL_OW 488
54651: NOT
54652: PUSH
54653: LD_VAR 0 6
54657: PUSH
54658: LD_VAR 0 4
54662: ARRAY
54663: PUSH
54664: LD_INT 1
54666: ARRAY
54667: PPUSH
54668: LD_VAR 0 6
54672: PUSH
54673: LD_VAR 0 4
54677: ARRAY
54678: PUSH
54679: LD_INT 2
54681: ARRAY
54682: PPUSH
54683: CALL_OW 428
54687: PUSH
54688: LD_INT 0
54690: NONEQUAL
54691: OR
54692: IFFALSE 54714
// tmp := Delete ( tmp , i ) ;
54694: LD_ADDR_VAR 0 6
54698: PUSH
54699: LD_VAR 0 6
54703: PPUSH
54704: LD_VAR 0 4
54708: PPUSH
54709: CALL_OW 3
54713: ST_TO_ADDR
54714: GO 54614
54716: POP
54717: POP
// j := GetClosestHex ( unit , tmp ) ;
54718: LD_ADDR_VAR 0 5
54722: PUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: LD_VAR 0 6
54732: PPUSH
54733: CALL 54018 0 2
54737: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54738: LD_VAR 0 1
54742: PPUSH
54743: LD_VAR 0 5
54747: PUSH
54748: LD_INT 1
54750: ARRAY
54751: PPUSH
54752: LD_VAR 0 5
54756: PUSH
54757: LD_INT 2
54759: ARRAY
54760: PPUSH
54761: CALL_OW 111
// end ;
54765: LD_VAR 0 3
54769: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54770: LD_INT 0
54772: PPUSH
54773: PPUSH
54774: PPUSH
// uc_side = 0 ;
54775: LD_ADDR_OWVAR 20
54779: PUSH
54780: LD_INT 0
54782: ST_TO_ADDR
// uc_nation = 0 ;
54783: LD_ADDR_OWVAR 21
54787: PUSH
54788: LD_INT 0
54790: ST_TO_ADDR
// InitHc_All ( ) ;
54791: CALL_OW 584
// InitVc ;
54795: CALL_OW 20
// if mastodonts then
54799: LD_VAR 0 6
54803: IFFALSE 54870
// for i = 1 to mastodonts do
54805: LD_ADDR_VAR 0 11
54809: PUSH
54810: DOUBLE
54811: LD_INT 1
54813: DEC
54814: ST_TO_ADDR
54815: LD_VAR 0 6
54819: PUSH
54820: FOR_TO
54821: IFFALSE 54868
// begin vc_chassis := 31 ;
54823: LD_ADDR_OWVAR 37
54827: PUSH
54828: LD_INT 31
54830: ST_TO_ADDR
// vc_control := control_rider ;
54831: LD_ADDR_OWVAR 38
54835: PUSH
54836: LD_INT 4
54838: ST_TO_ADDR
// animal := CreateVehicle ;
54839: LD_ADDR_VAR 0 12
54843: PUSH
54844: CALL_OW 45
54848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54849: LD_VAR 0 12
54853: PPUSH
54854: LD_VAR 0 8
54858: PPUSH
54859: LD_INT 0
54861: PPUSH
54862: CALL 57058 0 3
// end ;
54866: GO 54820
54868: POP
54869: POP
// if horses then
54870: LD_VAR 0 5
54874: IFFALSE 54941
// for i = 1 to horses do
54876: LD_ADDR_VAR 0 11
54880: PUSH
54881: DOUBLE
54882: LD_INT 1
54884: DEC
54885: ST_TO_ADDR
54886: LD_VAR 0 5
54890: PUSH
54891: FOR_TO
54892: IFFALSE 54939
// begin hc_class := 21 ;
54894: LD_ADDR_OWVAR 28
54898: PUSH
54899: LD_INT 21
54901: ST_TO_ADDR
// hc_gallery :=  ;
54902: LD_ADDR_OWVAR 33
54906: PUSH
54907: LD_STRING 
54909: ST_TO_ADDR
// animal := CreateHuman ;
54910: LD_ADDR_VAR 0 12
54914: PUSH
54915: CALL_OW 44
54919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54920: LD_VAR 0 12
54924: PPUSH
54925: LD_VAR 0 8
54929: PPUSH
54930: LD_INT 0
54932: PPUSH
54933: CALL 57058 0 3
// end ;
54937: GO 54891
54939: POP
54940: POP
// if birds then
54941: LD_VAR 0 1
54945: IFFALSE 55012
// for i = 1 to birds do
54947: LD_ADDR_VAR 0 11
54951: PUSH
54952: DOUBLE
54953: LD_INT 1
54955: DEC
54956: ST_TO_ADDR
54957: LD_VAR 0 1
54961: PUSH
54962: FOR_TO
54963: IFFALSE 55010
// begin hc_class = 18 ;
54965: LD_ADDR_OWVAR 28
54969: PUSH
54970: LD_INT 18
54972: ST_TO_ADDR
// hc_gallery =  ;
54973: LD_ADDR_OWVAR 33
54977: PUSH
54978: LD_STRING 
54980: ST_TO_ADDR
// animal := CreateHuman ;
54981: LD_ADDR_VAR 0 12
54985: PUSH
54986: CALL_OW 44
54990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54991: LD_VAR 0 12
54995: PPUSH
54996: LD_VAR 0 8
55000: PPUSH
55001: LD_INT 0
55003: PPUSH
55004: CALL 57058 0 3
// end ;
55008: GO 54962
55010: POP
55011: POP
// if tigers then
55012: LD_VAR 0 2
55016: IFFALSE 55100
// for i = 1 to tigers do
55018: LD_ADDR_VAR 0 11
55022: PUSH
55023: DOUBLE
55024: LD_INT 1
55026: DEC
55027: ST_TO_ADDR
55028: LD_VAR 0 2
55032: PUSH
55033: FOR_TO
55034: IFFALSE 55098
// begin hc_class = class_tiger ;
55036: LD_ADDR_OWVAR 28
55040: PUSH
55041: LD_INT 14
55043: ST_TO_ADDR
// hc_gallery =  ;
55044: LD_ADDR_OWVAR 33
55048: PUSH
55049: LD_STRING 
55051: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55052: LD_ADDR_OWVAR 35
55056: PUSH
55057: LD_INT 7
55059: NEG
55060: PPUSH
55061: LD_INT 7
55063: PPUSH
55064: CALL_OW 12
55068: ST_TO_ADDR
// animal := CreateHuman ;
55069: LD_ADDR_VAR 0 12
55073: PUSH
55074: CALL_OW 44
55078: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55079: LD_VAR 0 12
55083: PPUSH
55084: LD_VAR 0 8
55088: PPUSH
55089: LD_INT 0
55091: PPUSH
55092: CALL 57058 0 3
// end ;
55096: GO 55033
55098: POP
55099: POP
// if apemans then
55100: LD_VAR 0 3
55104: IFFALSE 55227
// for i = 1 to apemans do
55106: LD_ADDR_VAR 0 11
55110: PUSH
55111: DOUBLE
55112: LD_INT 1
55114: DEC
55115: ST_TO_ADDR
55116: LD_VAR 0 3
55120: PUSH
55121: FOR_TO
55122: IFFALSE 55225
// begin hc_class = class_apeman ;
55124: LD_ADDR_OWVAR 28
55128: PUSH
55129: LD_INT 12
55131: ST_TO_ADDR
// hc_gallery =  ;
55132: LD_ADDR_OWVAR 33
55136: PUSH
55137: LD_STRING 
55139: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
55140: LD_ADDR_OWVAR 35
55144: PUSH
55145: LD_INT 5
55147: NEG
55148: PPUSH
55149: LD_INT 5
55151: PPUSH
55152: CALL_OW 12
55156: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55157: LD_ADDR_OWVAR 31
55161: PUSH
55162: LD_INT 1
55164: PPUSH
55165: LD_INT 3
55167: PPUSH
55168: CALL_OW 12
55172: PUSH
55173: LD_INT 1
55175: PPUSH
55176: LD_INT 3
55178: PPUSH
55179: CALL_OW 12
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: ST_TO_ADDR
// animal := CreateHuman ;
55196: LD_ADDR_VAR 0 12
55200: PUSH
55201: CALL_OW 44
55205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55206: LD_VAR 0 12
55210: PPUSH
55211: LD_VAR 0 8
55215: PPUSH
55216: LD_INT 0
55218: PPUSH
55219: CALL 57058 0 3
// end ;
55223: GO 55121
55225: POP
55226: POP
// if enchidnas then
55227: LD_VAR 0 4
55231: IFFALSE 55298
// for i = 1 to enchidnas do
55233: LD_ADDR_VAR 0 11
55237: PUSH
55238: DOUBLE
55239: LD_INT 1
55241: DEC
55242: ST_TO_ADDR
55243: LD_VAR 0 4
55247: PUSH
55248: FOR_TO
55249: IFFALSE 55296
// begin hc_class = 13 ;
55251: LD_ADDR_OWVAR 28
55255: PUSH
55256: LD_INT 13
55258: ST_TO_ADDR
// hc_gallery =  ;
55259: LD_ADDR_OWVAR 33
55263: PUSH
55264: LD_STRING 
55266: ST_TO_ADDR
// animal := CreateHuman ;
55267: LD_ADDR_VAR 0 12
55271: PUSH
55272: CALL_OW 44
55276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55277: LD_VAR 0 12
55281: PPUSH
55282: LD_VAR 0 8
55286: PPUSH
55287: LD_INT 0
55289: PPUSH
55290: CALL 57058 0 3
// end ;
55294: GO 55248
55296: POP
55297: POP
// if fishes then
55298: LD_VAR 0 7
55302: IFFALSE 55369
// for i = 1 to fishes do
55304: LD_ADDR_VAR 0 11
55308: PUSH
55309: DOUBLE
55310: LD_INT 1
55312: DEC
55313: ST_TO_ADDR
55314: LD_VAR 0 7
55318: PUSH
55319: FOR_TO
55320: IFFALSE 55367
// begin hc_class = 20 ;
55322: LD_ADDR_OWVAR 28
55326: PUSH
55327: LD_INT 20
55329: ST_TO_ADDR
// hc_gallery =  ;
55330: LD_ADDR_OWVAR 33
55334: PUSH
55335: LD_STRING 
55337: ST_TO_ADDR
// animal := CreateHuman ;
55338: LD_ADDR_VAR 0 12
55342: PUSH
55343: CALL_OW 44
55347: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55348: LD_VAR 0 12
55352: PPUSH
55353: LD_VAR 0 9
55357: PPUSH
55358: LD_INT 0
55360: PPUSH
55361: CALL 57058 0 3
// end ;
55365: GO 55319
55367: POP
55368: POP
// end ;
55369: LD_VAR 0 10
55373: RET
// export function WantHeal ( sci , unit ) ; begin
55374: LD_INT 0
55376: PPUSH
// if GetTaskList ( sci ) > 0 then
55377: LD_VAR 0 1
55381: PPUSH
55382: CALL_OW 437
55386: PUSH
55387: LD_INT 0
55389: GREATER
55390: IFFALSE 55460
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55392: LD_VAR 0 1
55396: PPUSH
55397: CALL_OW 437
55401: PUSH
55402: LD_INT 1
55404: ARRAY
55405: PUSH
55406: LD_INT 1
55408: ARRAY
55409: PUSH
55410: LD_STRING l
55412: EQUAL
55413: PUSH
55414: LD_VAR 0 1
55418: PPUSH
55419: CALL_OW 437
55423: PUSH
55424: LD_INT 1
55426: ARRAY
55427: PUSH
55428: LD_INT 4
55430: ARRAY
55431: PUSH
55432: LD_VAR 0 2
55436: EQUAL
55437: AND
55438: IFFALSE 55450
// result := true else
55440: LD_ADDR_VAR 0 3
55444: PUSH
55445: LD_INT 1
55447: ST_TO_ADDR
55448: GO 55458
// result := false ;
55450: LD_ADDR_VAR 0 3
55454: PUSH
55455: LD_INT 0
55457: ST_TO_ADDR
// end else
55458: GO 55468
// result := false ;
55460: LD_ADDR_VAR 0 3
55464: PUSH
55465: LD_INT 0
55467: ST_TO_ADDR
// end ;
55468: LD_VAR 0 3
55472: RET
// export function HealTarget ( sci ) ; begin
55473: LD_INT 0
55475: PPUSH
// if not sci then
55476: LD_VAR 0 1
55480: NOT
55481: IFFALSE 55485
// exit ;
55483: GO 55550
// result := 0 ;
55485: LD_ADDR_VAR 0 2
55489: PUSH
55490: LD_INT 0
55492: ST_TO_ADDR
// if GetTaskList ( sci ) then
55493: LD_VAR 0 1
55497: PPUSH
55498: CALL_OW 437
55502: IFFALSE 55550
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 437
55513: PUSH
55514: LD_INT 1
55516: ARRAY
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: LD_STRING l
55524: EQUAL
55525: IFFALSE 55550
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55527: LD_ADDR_VAR 0 2
55531: PUSH
55532: LD_VAR 0 1
55536: PPUSH
55537: CALL_OW 437
55541: PUSH
55542: LD_INT 1
55544: ARRAY
55545: PUSH
55546: LD_INT 4
55548: ARRAY
55549: ST_TO_ADDR
// end ;
55550: LD_VAR 0 2
55554: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55555: LD_INT 0
55557: PPUSH
55558: PPUSH
55559: PPUSH
55560: PPUSH
// if not base_units then
55561: LD_VAR 0 1
55565: NOT
55566: IFFALSE 55570
// exit ;
55568: GO 55657
// result := false ;
55570: LD_ADDR_VAR 0 2
55574: PUSH
55575: LD_INT 0
55577: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55578: LD_ADDR_VAR 0 5
55582: PUSH
55583: LD_VAR 0 1
55587: PPUSH
55588: LD_INT 21
55590: PUSH
55591: LD_INT 3
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PPUSH
55598: CALL_OW 72
55602: ST_TO_ADDR
// if not tmp then
55603: LD_VAR 0 5
55607: NOT
55608: IFFALSE 55612
// exit ;
55610: GO 55657
// for i in tmp do
55612: LD_ADDR_VAR 0 3
55616: PUSH
55617: LD_VAR 0 5
55621: PUSH
55622: FOR_IN
55623: IFFALSE 55655
// begin result := EnemyInRange ( i , 22 ) ;
55625: LD_ADDR_VAR 0 2
55629: PUSH
55630: LD_VAR 0 3
55634: PPUSH
55635: LD_INT 22
55637: PPUSH
55638: CALL 53893 0 2
55642: ST_TO_ADDR
// if result then
55643: LD_VAR 0 2
55647: IFFALSE 55653
// exit ;
55649: POP
55650: POP
55651: GO 55657
// end ;
55653: GO 55622
55655: POP
55656: POP
// end ;
55657: LD_VAR 0 2
55661: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55662: LD_INT 0
55664: PPUSH
55665: PPUSH
// if not units then
55666: LD_VAR 0 1
55670: NOT
55671: IFFALSE 55675
// exit ;
55673: GO 55745
// result := [ ] ;
55675: LD_ADDR_VAR 0 3
55679: PUSH
55680: EMPTY
55681: ST_TO_ADDR
// for i in units do
55682: LD_ADDR_VAR 0 4
55686: PUSH
55687: LD_VAR 0 1
55691: PUSH
55692: FOR_IN
55693: IFFALSE 55743
// if GetTag ( i ) = tag then
55695: LD_VAR 0 4
55699: PPUSH
55700: CALL_OW 110
55704: PUSH
55705: LD_VAR 0 2
55709: EQUAL
55710: IFFALSE 55741
// result := Insert ( result , result + 1 , i ) ;
55712: LD_ADDR_VAR 0 3
55716: PUSH
55717: LD_VAR 0 3
55721: PPUSH
55722: LD_VAR 0 3
55726: PUSH
55727: LD_INT 1
55729: PLUS
55730: PPUSH
55731: LD_VAR 0 4
55735: PPUSH
55736: CALL_OW 2
55740: ST_TO_ADDR
55741: GO 55692
55743: POP
55744: POP
// end ;
55745: LD_VAR 0 3
55749: RET
// export function IsDriver ( un ) ; begin
55750: LD_INT 0
55752: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55753: LD_ADDR_VAR 0 2
55757: PUSH
55758: LD_VAR 0 1
55762: PUSH
55763: LD_INT 55
55765: PUSH
55766: EMPTY
55767: LIST
55768: PPUSH
55769: CALL_OW 69
55773: IN
55774: ST_TO_ADDR
// end ;
55775: LD_VAR 0 2
55779: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55780: LD_INT 0
55782: PPUSH
55783: PPUSH
// list := [ ] ;
55784: LD_ADDR_VAR 0 5
55788: PUSH
55789: EMPTY
55790: ST_TO_ADDR
// case d of 0 :
55791: LD_VAR 0 3
55795: PUSH
55796: LD_INT 0
55798: DOUBLE
55799: EQUAL
55800: IFTRUE 55804
55802: GO 55937
55804: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55805: LD_ADDR_VAR 0 5
55809: PUSH
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 4
55817: MINUS
55818: PUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 4
55826: MINUS
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: PUSH
55836: LD_VAR 0 1
55840: PUSH
55841: LD_INT 3
55843: MINUS
55844: PUSH
55845: LD_VAR 0 2
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 4
55865: PLUS
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: PUSH
55880: LD_VAR 0 1
55884: PUSH
55885: LD_INT 3
55887: PLUS
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: LD_INT 3
55896: PLUS
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: PUSH
55906: LD_VAR 0 1
55910: PUSH
55911: LD_VAR 0 2
55915: PUSH
55916: LD_INT 4
55918: PLUS
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// end ; 1 :
55935: GO 56635
55937: LD_INT 1
55939: DOUBLE
55940: EQUAL
55941: IFTRUE 55945
55943: GO 56078
55945: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55946: LD_ADDR_VAR 0 5
55950: PUSH
55951: LD_VAR 0 1
55955: PUSH
55956: LD_VAR 0 2
55960: PUSH
55961: LD_INT 4
55963: MINUS
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: PUSH
55973: LD_VAR 0 1
55977: PUSH
55978: LD_INT 3
55980: MINUS
55981: PUSH
55982: LD_VAR 0 2
55986: PUSH
55987: LD_INT 3
55989: MINUS
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: PUSH
55999: LD_VAR 0 1
56003: PUSH
56004: LD_INT 4
56006: MINUS
56007: PUSH
56008: LD_VAR 0 2
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: PUSH
56021: LD_VAR 0 1
56025: PUSH
56026: LD_VAR 0 2
56030: PUSH
56031: LD_INT 3
56033: PLUS
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: PUSH
56043: LD_VAR 0 1
56047: PUSH
56048: LD_INT 4
56050: PLUS
56051: PUSH
56052: LD_VAR 0 2
56056: PUSH
56057: LD_INT 4
56059: PLUS
56060: PUSH
56061: LD_INT 5
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// end ; 2 :
56076: GO 56635
56078: LD_INT 2
56080: DOUBLE
56081: EQUAL
56082: IFTRUE 56086
56084: GO 56215
56086: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56087: LD_ADDR_VAR 0 5
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: LD_INT 3
56104: MINUS
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: PUSH
56114: LD_VAR 0 1
56118: PUSH
56119: LD_INT 4
56121: PLUS
56122: PUSH
56123: LD_VAR 0 2
56127: PUSH
56128: LD_INT 4
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: LD_VAR 0 2
56145: PUSH
56146: LD_INT 4
56148: PLUS
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: LD_VAR 0 1
56162: PUSH
56163: LD_INT 3
56165: MINUS
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_INT 4
56187: MINUS
56188: PUSH
56189: LD_VAR 0 2
56193: PUSH
56194: LD_INT 4
56196: MINUS
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// end ; 3 :
56213: GO 56635
56215: LD_INT 3
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56223
56221: GO 56356
56223: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56224: LD_ADDR_VAR 0 5
56228: PUSH
56229: LD_VAR 0 1
56233: PUSH
56234: LD_INT 3
56236: PLUS
56237: PUSH
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: PUSH
56251: LD_VAR 0 1
56255: PUSH
56256: LD_INT 4
56258: PLUS
56259: PUSH
56260: LD_VAR 0 2
56264: PUSH
56265: LD_INT 4
56267: PLUS
56268: PUSH
56269: LD_INT 5
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_VAR 0 1
56281: PUSH
56282: LD_INT 4
56284: MINUS
56285: PUSH
56286: LD_VAR 0 2
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_VAR 0 2
56308: PUSH
56309: LD_INT 4
56311: MINUS
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: PUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_INT 3
56328: MINUS
56329: PUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_INT 3
56337: MINUS
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// end ; 4 :
56354: GO 56635
56356: LD_INT 4
56358: DOUBLE
56359: EQUAL
56360: IFTRUE 56364
56362: GO 56497
56364: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56365: LD_ADDR_VAR 0 5
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_VAR 0 2
56379: PUSH
56380: LD_INT 4
56382: PLUS
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 3
56399: PLUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 3
56408: PLUS
56409: PUSH
56410: LD_INT 5
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 4
56425: PLUS
56426: PUSH
56427: LD_VAR 0 2
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_VAR 0 2
56449: PUSH
56450: LD_INT 3
56452: MINUS
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 4
56469: MINUS
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 4
56478: MINUS
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// end ; 5 :
56495: GO 56635
56497: LD_INT 5
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56505
56503: GO 56634
56505: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56506: LD_ADDR_VAR 0 5
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: LD_INT 4
56518: MINUS
56519: PUSH
56520: LD_VAR 0 2
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_VAR 0 2
56542: PUSH
56543: LD_INT 4
56545: MINUS
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: PUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 4
56562: PLUS
56563: PUSH
56564: LD_VAR 0 2
56568: PUSH
56569: LD_INT 4
56571: PLUS
56572: PUSH
56573: LD_INT 5
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_VAR 0 1
56585: PUSH
56586: LD_INT 3
56588: PLUS
56589: PUSH
56590: LD_VAR 0 2
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_VAR 0 2
56612: PUSH
56613: LD_INT 3
56615: PLUS
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// end ; end ;
56632: GO 56635
56634: POP
// result := list ;
56635: LD_ADDR_VAR 0 4
56639: PUSH
56640: LD_VAR 0 5
56644: ST_TO_ADDR
// end ;
56645: LD_VAR 0 4
56649: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56650: LD_INT 0
56652: PPUSH
56653: PPUSH
56654: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56655: LD_VAR 0 1
56659: NOT
56660: PUSH
56661: LD_VAR 0 2
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: IN
56684: NOT
56685: OR
56686: IFFALSE 56690
// exit ;
56688: GO 56782
// tmp := [ ] ;
56690: LD_ADDR_VAR 0 5
56694: PUSH
56695: EMPTY
56696: ST_TO_ADDR
// for i in units do
56697: LD_ADDR_VAR 0 4
56701: PUSH
56702: LD_VAR 0 1
56706: PUSH
56707: FOR_IN
56708: IFFALSE 56751
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56710: LD_ADDR_VAR 0 5
56714: PUSH
56715: LD_VAR 0 5
56719: PPUSH
56720: LD_VAR 0 5
56724: PUSH
56725: LD_INT 1
56727: PLUS
56728: PPUSH
56729: LD_VAR 0 4
56733: PPUSH
56734: LD_VAR 0 2
56738: PPUSH
56739: CALL_OW 259
56743: PPUSH
56744: CALL_OW 2
56748: ST_TO_ADDR
56749: GO 56707
56751: POP
56752: POP
// if not tmp then
56753: LD_VAR 0 5
56757: NOT
56758: IFFALSE 56762
// exit ;
56760: GO 56782
// result := SortListByListDesc ( units , tmp ) ;
56762: LD_ADDR_VAR 0 3
56766: PUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: LD_VAR 0 5
56776: PPUSH
56777: CALL_OW 77
56781: ST_TO_ADDR
// end ;
56782: LD_VAR 0 3
56786: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56787: LD_INT 0
56789: PPUSH
56790: PPUSH
56791: PPUSH
// result := false ;
56792: LD_ADDR_VAR 0 3
56796: PUSH
56797: LD_INT 0
56799: ST_TO_ADDR
// x := GetX ( building ) ;
56800: LD_ADDR_VAR 0 4
56804: PUSH
56805: LD_VAR 0 2
56809: PPUSH
56810: CALL_OW 250
56814: ST_TO_ADDR
// y := GetY ( building ) ;
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: LD_VAR 0 2
56824: PPUSH
56825: CALL_OW 251
56829: ST_TO_ADDR
// if not building or not x or not y then
56830: LD_VAR 0 2
56834: NOT
56835: PUSH
56836: LD_VAR 0 4
56840: NOT
56841: OR
56842: PUSH
56843: LD_VAR 0 5
56847: NOT
56848: OR
56849: IFFALSE 56853
// exit ;
56851: GO 56945
// if GetTaskList ( unit ) then
56853: LD_VAR 0 1
56857: PPUSH
56858: CALL_OW 437
56862: IFFALSE 56945
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56864: LD_STRING e
56866: PUSH
56867: LD_VAR 0 1
56871: PPUSH
56872: CALL_OW 437
56876: PUSH
56877: LD_INT 1
56879: ARRAY
56880: PUSH
56881: LD_INT 1
56883: ARRAY
56884: EQUAL
56885: PUSH
56886: LD_VAR 0 4
56890: PUSH
56891: LD_VAR 0 1
56895: PPUSH
56896: CALL_OW 437
56900: PUSH
56901: LD_INT 1
56903: ARRAY
56904: PUSH
56905: LD_INT 2
56907: ARRAY
56908: EQUAL
56909: AND
56910: PUSH
56911: LD_VAR 0 5
56915: PUSH
56916: LD_VAR 0 1
56920: PPUSH
56921: CALL_OW 437
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PUSH
56930: LD_INT 3
56932: ARRAY
56933: EQUAL
56934: AND
56935: IFFALSE 56945
// result := true end ;
56937: LD_ADDR_VAR 0 3
56941: PUSH
56942: LD_INT 1
56944: ST_TO_ADDR
// end ;
56945: LD_VAR 0 3
56949: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56950: LD_INT 0
56952: PPUSH
// result := false ;
56953: LD_ADDR_VAR 0 4
56957: PUSH
56958: LD_INT 0
56960: ST_TO_ADDR
// if GetTaskList ( unit ) then
56961: LD_VAR 0 1
56965: PPUSH
56966: CALL_OW 437
56970: IFFALSE 57053
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56972: LD_STRING M
56974: PUSH
56975: LD_VAR 0 1
56979: PPUSH
56980: CALL_OW 437
56984: PUSH
56985: LD_INT 1
56987: ARRAY
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: EQUAL
56993: PUSH
56994: LD_VAR 0 2
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 437
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PUSH
57013: LD_INT 2
57015: ARRAY
57016: EQUAL
57017: AND
57018: PUSH
57019: LD_VAR 0 3
57023: PUSH
57024: LD_VAR 0 1
57028: PPUSH
57029: CALL_OW 437
57033: PUSH
57034: LD_INT 1
57036: ARRAY
57037: PUSH
57038: LD_INT 3
57040: ARRAY
57041: EQUAL
57042: AND
57043: IFFALSE 57053
// result := true ;
57045: LD_ADDR_VAR 0 4
57049: PUSH
57050: LD_INT 1
57052: ST_TO_ADDR
// end ; end ;
57053: LD_VAR 0 4
57057: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57058: LD_INT 0
57060: PPUSH
57061: PPUSH
57062: PPUSH
57063: PPUSH
// if not unit or not area then
57064: LD_VAR 0 1
57068: NOT
57069: PUSH
57070: LD_VAR 0 2
57074: NOT
57075: OR
57076: IFFALSE 57080
// exit ;
57078: GO 57244
// tmp := AreaToList ( area , i ) ;
57080: LD_ADDR_VAR 0 6
57084: PUSH
57085: LD_VAR 0 2
57089: PPUSH
57090: LD_VAR 0 5
57094: PPUSH
57095: CALL_OW 517
57099: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57100: LD_ADDR_VAR 0 5
57104: PUSH
57105: DOUBLE
57106: LD_INT 1
57108: DEC
57109: ST_TO_ADDR
57110: LD_VAR 0 6
57114: PUSH
57115: LD_INT 1
57117: ARRAY
57118: PUSH
57119: FOR_TO
57120: IFFALSE 57242
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57122: LD_ADDR_VAR 0 7
57126: PUSH
57127: LD_VAR 0 6
57131: PUSH
57132: LD_INT 1
57134: ARRAY
57135: PUSH
57136: LD_VAR 0 5
57140: ARRAY
57141: PUSH
57142: LD_VAR 0 6
57146: PUSH
57147: LD_INT 2
57149: ARRAY
57150: PUSH
57151: LD_VAR 0 5
57155: ARRAY
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57161: LD_VAR 0 7
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: PPUSH
57170: LD_VAR 0 7
57174: PUSH
57175: LD_INT 2
57177: ARRAY
57178: PPUSH
57179: CALL_OW 428
57183: PUSH
57184: LD_INT 0
57186: EQUAL
57187: IFFALSE 57240
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57189: LD_VAR 0 1
57193: PPUSH
57194: LD_VAR 0 7
57198: PUSH
57199: LD_INT 1
57201: ARRAY
57202: PPUSH
57203: LD_VAR 0 7
57207: PUSH
57208: LD_INT 2
57210: ARRAY
57211: PPUSH
57212: LD_VAR 0 3
57216: PPUSH
57217: CALL_OW 48
// result := IsPlaced ( unit ) ;
57221: LD_ADDR_VAR 0 4
57225: PUSH
57226: LD_VAR 0 1
57230: PPUSH
57231: CALL_OW 305
57235: ST_TO_ADDR
// exit ;
57236: POP
57237: POP
57238: GO 57244
// end ; end ;
57240: GO 57119
57242: POP
57243: POP
// end ;
57244: LD_VAR 0 4
57248: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57249: LD_INT 0
57251: PPUSH
57252: PPUSH
57253: PPUSH
// if not side or side > 8 then
57254: LD_VAR 0 1
57258: NOT
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_INT 8
57267: GREATER
57268: OR
57269: IFFALSE 57273
// exit ;
57271: GO 57460
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57273: LD_ADDR_VAR 0 4
57277: PUSH
57278: LD_INT 22
57280: PUSH
57281: LD_VAR 0 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 21
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PPUSH
57304: CALL_OW 69
57308: ST_TO_ADDR
// if not tmp then
57309: LD_VAR 0 4
57313: NOT
57314: IFFALSE 57318
// exit ;
57316: GO 57460
// enable_addtolog := true ;
57318: LD_ADDR_OWVAR 81
57322: PUSH
57323: LD_INT 1
57325: ST_TO_ADDR
// AddToLog ( [ ) ;
57326: LD_STRING [
57328: PPUSH
57329: CALL_OW 561
// for i in tmp do
57333: LD_ADDR_VAR 0 3
57337: PUSH
57338: LD_VAR 0 4
57342: PUSH
57343: FOR_IN
57344: IFFALSE 57451
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57346: LD_STRING [
57348: PUSH
57349: LD_VAR 0 3
57353: PPUSH
57354: CALL_OW 266
57358: STR
57359: PUSH
57360: LD_STRING , 
57362: STR
57363: PUSH
57364: LD_VAR 0 3
57368: PPUSH
57369: CALL_OW 250
57373: STR
57374: PUSH
57375: LD_STRING , 
57377: STR
57378: PUSH
57379: LD_VAR 0 3
57383: PPUSH
57384: CALL_OW 251
57388: STR
57389: PUSH
57390: LD_STRING , 
57392: STR
57393: PUSH
57394: LD_VAR 0 3
57398: PPUSH
57399: CALL_OW 254
57403: STR
57404: PUSH
57405: LD_STRING , 
57407: STR
57408: PUSH
57409: LD_VAR 0 3
57413: PPUSH
57414: LD_INT 1
57416: PPUSH
57417: CALL_OW 268
57421: STR
57422: PUSH
57423: LD_STRING , 
57425: STR
57426: PUSH
57427: LD_VAR 0 3
57431: PPUSH
57432: LD_INT 2
57434: PPUSH
57435: CALL_OW 268
57439: STR
57440: PUSH
57441: LD_STRING ],
57443: STR
57444: PPUSH
57445: CALL_OW 561
// end ;
57449: GO 57343
57451: POP
57452: POP
// AddToLog ( ]; ) ;
57453: LD_STRING ];
57455: PPUSH
57456: CALL_OW 561
// end ;
57460: LD_VAR 0 2
57464: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57465: LD_INT 0
57467: PPUSH
57468: PPUSH
57469: PPUSH
57470: PPUSH
57471: PPUSH
// if not area or not rate or not max then
57472: LD_VAR 0 1
57476: NOT
57477: PUSH
57478: LD_VAR 0 2
57482: NOT
57483: OR
57484: PUSH
57485: LD_VAR 0 4
57489: NOT
57490: OR
57491: IFFALSE 57495
// exit ;
57493: GO 57687
// while 1 do
57495: LD_INT 1
57497: IFFALSE 57687
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57499: LD_ADDR_VAR 0 9
57503: PUSH
57504: LD_VAR 0 1
57508: PPUSH
57509: LD_INT 1
57511: PPUSH
57512: CALL_OW 287
57516: PUSH
57517: LD_INT 10
57519: MUL
57520: ST_TO_ADDR
// r := rate / 10 ;
57521: LD_ADDR_VAR 0 7
57525: PUSH
57526: LD_VAR 0 2
57530: PUSH
57531: LD_INT 10
57533: DIVREAL
57534: ST_TO_ADDR
// time := 1 1$00 ;
57535: LD_ADDR_VAR 0 8
57539: PUSH
57540: LD_INT 2100
57542: ST_TO_ADDR
// if amount < min then
57543: LD_VAR 0 9
57547: PUSH
57548: LD_VAR 0 3
57552: LESS
57553: IFFALSE 57571
// r := r * 2 else
57555: LD_ADDR_VAR 0 7
57559: PUSH
57560: LD_VAR 0 7
57564: PUSH
57565: LD_INT 2
57567: MUL
57568: ST_TO_ADDR
57569: GO 57597
// if amount > max then
57571: LD_VAR 0 9
57575: PUSH
57576: LD_VAR 0 4
57580: GREATER
57581: IFFALSE 57597
// r := r / 2 ;
57583: LD_ADDR_VAR 0 7
57587: PUSH
57588: LD_VAR 0 7
57592: PUSH
57593: LD_INT 2
57595: DIVREAL
57596: ST_TO_ADDR
// time := time / r ;
57597: LD_ADDR_VAR 0 8
57601: PUSH
57602: LD_VAR 0 8
57606: PUSH
57607: LD_VAR 0 7
57611: DIVREAL
57612: ST_TO_ADDR
// if time < 0 then
57613: LD_VAR 0 8
57617: PUSH
57618: LD_INT 0
57620: LESS
57621: IFFALSE 57638
// time := time * - 1 ;
57623: LD_ADDR_VAR 0 8
57627: PUSH
57628: LD_VAR 0 8
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: MUL
57637: ST_TO_ADDR
// wait ( time ) ;
57638: LD_VAR 0 8
57642: PPUSH
57643: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57647: LD_INT 35
57649: PPUSH
57650: LD_INT 875
57652: PPUSH
57653: CALL_OW 12
57657: PPUSH
57658: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57662: LD_INT 1
57664: PPUSH
57665: LD_INT 5
57667: PPUSH
57668: CALL_OW 12
57672: PPUSH
57673: LD_VAR 0 1
57677: PPUSH
57678: LD_INT 1
57680: PPUSH
57681: CALL_OW 55
// end ;
57685: GO 57495
// end ;
57687: LD_VAR 0 5
57691: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57692: LD_INT 0
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
// if not turrets or not factories then
57702: LD_VAR 0 1
57706: NOT
57707: PUSH
57708: LD_VAR 0 2
57712: NOT
57713: OR
57714: IFFALSE 57718
// exit ;
57716: GO 58025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57718: LD_ADDR_VAR 0 10
57722: PUSH
57723: LD_INT 5
57725: PUSH
57726: LD_INT 6
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 3
57745: PUSH
57746: LD_INT 5
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 24
57760: PUSH
57761: LD_INT 25
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 23
57770: PUSH
57771: LD_INT 27
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 42
57784: PUSH
57785: LD_INT 43
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 44
57794: PUSH
57795: LD_INT 46
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 45
57804: PUSH
57805: LD_INT 47
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// result := [ ] ;
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: EMPTY
57828: ST_TO_ADDR
// for i in turrets do
57829: LD_ADDR_VAR 0 4
57833: PUSH
57834: LD_VAR 0 1
57838: PUSH
57839: FOR_IN
57840: IFFALSE 58023
// begin nat := GetNation ( i ) ;
57842: LD_ADDR_VAR 0 7
57846: PUSH
57847: LD_VAR 0 4
57851: PPUSH
57852: CALL_OW 248
57856: ST_TO_ADDR
// weapon := 0 ;
57857: LD_ADDR_VAR 0 8
57861: PUSH
57862: LD_INT 0
57864: ST_TO_ADDR
// if not nat then
57865: LD_VAR 0 7
57869: NOT
57870: IFFALSE 57874
// continue ;
57872: GO 57839
// for j in list [ nat ] do
57874: LD_ADDR_VAR 0 5
57878: PUSH
57879: LD_VAR 0 10
57883: PUSH
57884: LD_VAR 0 7
57888: ARRAY
57889: PUSH
57890: FOR_IN
57891: IFFALSE 57932
// if GetBWeapon ( i ) = j [ 1 ] then
57893: LD_VAR 0 4
57897: PPUSH
57898: CALL_OW 269
57902: PUSH
57903: LD_VAR 0 5
57907: PUSH
57908: LD_INT 1
57910: ARRAY
57911: EQUAL
57912: IFFALSE 57930
// begin weapon := j [ 2 ] ;
57914: LD_ADDR_VAR 0 8
57918: PUSH
57919: LD_VAR 0 5
57923: PUSH
57924: LD_INT 2
57926: ARRAY
57927: ST_TO_ADDR
// break ;
57928: GO 57932
// end ;
57930: GO 57890
57932: POP
57933: POP
// if not weapon then
57934: LD_VAR 0 8
57938: NOT
57939: IFFALSE 57943
// continue ;
57941: GO 57839
// for k in factories do
57943: LD_ADDR_VAR 0 6
57947: PUSH
57948: LD_VAR 0 2
57952: PUSH
57953: FOR_IN
57954: IFFALSE 58019
// begin weapons := AvailableWeaponList ( k ) ;
57956: LD_ADDR_VAR 0 9
57960: PUSH
57961: LD_VAR 0 6
57965: PPUSH
57966: CALL_OW 478
57970: ST_TO_ADDR
// if not weapons then
57971: LD_VAR 0 9
57975: NOT
57976: IFFALSE 57980
// continue ;
57978: GO 57953
// if weapon in weapons then
57980: LD_VAR 0 8
57984: PUSH
57985: LD_VAR 0 9
57989: IN
57990: IFFALSE 58017
// begin result := [ i , weapon ] ;
57992: LD_ADDR_VAR 0 3
57996: PUSH
57997: LD_VAR 0 4
58001: PUSH
58002: LD_VAR 0 8
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// exit ;
58011: POP
58012: POP
58013: POP
58014: POP
58015: GO 58025
// end ; end ;
58017: GO 57953
58019: POP
58020: POP
// end ;
58021: GO 57839
58023: POP
58024: POP
// end ;
58025: LD_VAR 0 3
58029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58030: LD_INT 0
58032: PPUSH
// if not side or side > 8 then
58033: LD_VAR 0 3
58037: NOT
58038: PUSH
58039: LD_VAR 0 3
58043: PUSH
58044: LD_INT 8
58046: GREATER
58047: OR
58048: IFFALSE 58052
// exit ;
58050: GO 58111
// if not range then
58052: LD_VAR 0 4
58056: NOT
58057: IFFALSE 58068
// range := - 12 ;
58059: LD_ADDR_VAR 0 4
58063: PUSH
58064: LD_INT 12
58066: NEG
58067: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58068: LD_VAR 0 1
58072: PPUSH
58073: LD_VAR 0 2
58077: PPUSH
58078: LD_VAR 0 3
58082: PPUSH
58083: LD_VAR 0 4
58087: PPUSH
58088: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58092: LD_VAR 0 1
58096: PPUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: LD_VAR 0 3
58106: PPUSH
58107: CALL_OW 331
// end ;
58111: LD_VAR 0 5
58115: RET
// export function Video ( mode ) ; begin
58116: LD_INT 0
58118: PPUSH
// ingame_video = mode ;
58119: LD_ADDR_OWVAR 52
58123: PUSH
58124: LD_VAR 0 1
58128: ST_TO_ADDR
// interface_hidden = mode ;
58129: LD_ADDR_OWVAR 54
58133: PUSH
58134: LD_VAR 0 1
58138: ST_TO_ADDR
// end ;
58139: LD_VAR 0 2
58143: RET
// export function Join ( array , element ) ; begin
58144: LD_INT 0
58146: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58147: LD_ADDR_VAR 0 3
58151: PUSH
58152: LD_VAR 0 1
58156: PPUSH
58157: LD_VAR 0 1
58161: PUSH
58162: LD_INT 1
58164: PLUS
58165: PPUSH
58166: LD_VAR 0 2
58170: PPUSH
58171: CALL_OW 1
58175: ST_TO_ADDR
// end ;
58176: LD_VAR 0 3
58180: RET
// export function JoinUnion ( array , element ) ; begin
58181: LD_INT 0
58183: PPUSH
// result := array union element ;
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_VAR 0 1
58193: PUSH
58194: LD_VAR 0 2
58198: UNION
58199: ST_TO_ADDR
// end ;
58200: LD_VAR 0 3
58204: RET
// export function GetBehemoths ( side ) ; begin
58205: LD_INT 0
58207: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58208: LD_ADDR_VAR 0 2
58212: PUSH
58213: LD_INT 22
58215: PUSH
58216: LD_VAR 0 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 31
58227: PUSH
58228: LD_INT 25
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PPUSH
58239: CALL_OW 69
58243: ST_TO_ADDR
// end ;
58244: LD_VAR 0 2
58248: RET
// export function Shuffle ( array ) ; var i , index ; begin
58249: LD_INT 0
58251: PPUSH
58252: PPUSH
58253: PPUSH
// result := [ ] ;
58254: LD_ADDR_VAR 0 2
58258: PUSH
58259: EMPTY
58260: ST_TO_ADDR
// if not array then
58261: LD_VAR 0 1
58265: NOT
58266: IFFALSE 58270
// exit ;
58268: GO 58369
// Randomize ;
58270: CALL_OW 10
// for i = array downto 1 do
58274: LD_ADDR_VAR 0 3
58278: PUSH
58279: DOUBLE
58280: LD_VAR 0 1
58284: INC
58285: ST_TO_ADDR
58286: LD_INT 1
58288: PUSH
58289: FOR_DOWNTO
58290: IFFALSE 58367
// begin index := rand ( 1 , array ) ;
58292: LD_ADDR_VAR 0 4
58296: PUSH
58297: LD_INT 1
58299: PPUSH
58300: LD_VAR 0 1
58304: PPUSH
58305: CALL_OW 12
58309: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58310: LD_ADDR_VAR 0 2
58314: PUSH
58315: LD_VAR 0 2
58319: PPUSH
58320: LD_VAR 0 2
58324: PUSH
58325: LD_INT 1
58327: PLUS
58328: PPUSH
58329: LD_VAR 0 1
58333: PUSH
58334: LD_VAR 0 4
58338: ARRAY
58339: PPUSH
58340: CALL_OW 2
58344: ST_TO_ADDR
// array := Delete ( array , index ) ;
58345: LD_ADDR_VAR 0 1
58349: PUSH
58350: LD_VAR 0 1
58354: PPUSH
58355: LD_VAR 0 4
58359: PPUSH
58360: CALL_OW 3
58364: ST_TO_ADDR
// end ;
58365: GO 58289
58367: POP
58368: POP
// end ;
58369: LD_VAR 0 2
58373: RET
// export function GetBaseMaterials ( base ) ; begin
58374: LD_INT 0
58376: PPUSH
// result := [ 0 , 0 , 0 ] ;
58377: LD_ADDR_VAR 0 2
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: ST_TO_ADDR
// if not base then
58396: LD_VAR 0 1
58400: NOT
58401: IFFALSE 58405
// exit ;
58403: GO 58454
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58405: LD_ADDR_VAR 0 2
58409: PUSH
58410: LD_VAR 0 1
58414: PPUSH
58415: LD_INT 1
58417: PPUSH
58418: CALL_OW 275
58422: PUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: LD_INT 2
58430: PPUSH
58431: CALL_OW 275
58435: PUSH
58436: LD_VAR 0 1
58440: PPUSH
58441: LD_INT 3
58443: PPUSH
58444: CALL_OW 275
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// end ;
58454: LD_VAR 0 2
58458: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58459: LD_INT 0
58461: PPUSH
58462: PPUSH
// result := array ;
58463: LD_ADDR_VAR 0 3
58467: PUSH
58468: LD_VAR 0 1
58472: ST_TO_ADDR
// if size > 0 then
58473: LD_VAR 0 2
58477: PUSH
58478: LD_INT 0
58480: GREATER
58481: IFFALSE 58527
// for i := array downto size do
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: DOUBLE
58489: LD_VAR 0 1
58493: INC
58494: ST_TO_ADDR
58495: LD_VAR 0 2
58499: PUSH
58500: FOR_DOWNTO
58501: IFFALSE 58525
// result := Delete ( result , result ) ;
58503: LD_ADDR_VAR 0 3
58507: PUSH
58508: LD_VAR 0 3
58512: PPUSH
58513: LD_VAR 0 3
58517: PPUSH
58518: CALL_OW 3
58522: ST_TO_ADDR
58523: GO 58500
58525: POP
58526: POP
// end ;
58527: LD_VAR 0 3
58531: RET
// export function ComExit ( unit ) ; var tmp ; begin
58532: LD_INT 0
58534: PPUSH
58535: PPUSH
// if not IsInUnit ( unit ) then
58536: LD_VAR 0 1
58540: PPUSH
58541: CALL_OW 310
58545: NOT
58546: IFFALSE 58550
// exit ;
58548: GO 58610
// tmp := IsInUnit ( unit ) ;
58550: LD_ADDR_VAR 0 3
58554: PUSH
58555: LD_VAR 0 1
58559: PPUSH
58560: CALL_OW 310
58564: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58565: LD_VAR 0 3
58569: PPUSH
58570: CALL_OW 247
58574: PUSH
58575: LD_INT 2
58577: EQUAL
58578: IFFALSE 58591
// ComExitVehicle ( unit ) else
58580: LD_VAR 0 1
58584: PPUSH
58585: CALL_OW 121
58589: GO 58600
// ComExitBuilding ( unit ) ;
58591: LD_VAR 0 1
58595: PPUSH
58596: CALL_OW 122
// result := tmp ;
58600: LD_ADDR_VAR 0 2
58604: PUSH
58605: LD_VAR 0 3
58609: ST_TO_ADDR
// end ;
58610: LD_VAR 0 2
58614: RET
// export function ComExitAll ( units ) ; var i ; begin
58615: LD_INT 0
58617: PPUSH
58618: PPUSH
// if not units then
58619: LD_VAR 0 1
58623: NOT
58624: IFFALSE 58628
// exit ;
58626: GO 58654
// for i in units do
58628: LD_ADDR_VAR 0 3
58632: PUSH
58633: LD_VAR 0 1
58637: PUSH
58638: FOR_IN
58639: IFFALSE 58652
// ComExit ( i ) ;
58641: LD_VAR 0 3
58645: PPUSH
58646: CALL 58532 0 1
58650: GO 58638
58652: POP
58653: POP
// end ;
58654: LD_VAR 0 2
58658: RET
// export function ResetHc ; begin
58659: LD_INT 0
58661: PPUSH
// InitHc ;
58662: CALL_OW 19
// hc_importance := 0 ;
58666: LD_ADDR_OWVAR 32
58670: PUSH
58671: LD_INT 0
58673: ST_TO_ADDR
// end ;
58674: LD_VAR 0 1
58678: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58679: LD_INT 0
58681: PPUSH
58682: PPUSH
58683: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58684: LD_ADDR_VAR 0 6
58688: PUSH
58689: LD_VAR 0 1
58693: PUSH
58694: LD_VAR 0 3
58698: PLUS
58699: PUSH
58700: LD_INT 2
58702: DIV
58703: ST_TO_ADDR
// if _x < 0 then
58704: LD_VAR 0 6
58708: PUSH
58709: LD_INT 0
58711: LESS
58712: IFFALSE 58729
// _x := _x * - 1 ;
58714: LD_ADDR_VAR 0 6
58718: PUSH
58719: LD_VAR 0 6
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: MUL
58728: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58729: LD_ADDR_VAR 0 7
58733: PUSH
58734: LD_VAR 0 2
58738: PUSH
58739: LD_VAR 0 4
58743: PLUS
58744: PUSH
58745: LD_INT 2
58747: DIV
58748: ST_TO_ADDR
// if _y < 0 then
58749: LD_VAR 0 7
58753: PUSH
58754: LD_INT 0
58756: LESS
58757: IFFALSE 58774
// _y := _y * - 1 ;
58759: LD_ADDR_VAR 0 7
58763: PUSH
58764: LD_VAR 0 7
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: MUL
58773: ST_TO_ADDR
// result := [ _x , _y ] ;
58774: LD_ADDR_VAR 0 5
58778: PUSH
58779: LD_VAR 0 6
58783: PUSH
58784: LD_VAR 0 7
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// end ;
58793: LD_VAR 0 5
58797: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58798: LD_INT 0
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
// task := GetTaskList ( unit ) ;
58804: LD_ADDR_VAR 0 7
58808: PUSH
58809: LD_VAR 0 1
58813: PPUSH
58814: CALL_OW 437
58818: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58819: LD_VAR 0 7
58823: NOT
58824: PUSH
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: CALL_OW 308
58839: NOT
58840: AND
58841: IFFALSE 58845
// exit ;
58843: GO 58963
// if IsInArea ( unit , area ) then
58845: LD_VAR 0 1
58849: PPUSH
58850: LD_VAR 0 2
58854: PPUSH
58855: CALL_OW 308
58859: IFFALSE 58877
// begin ComMoveToArea ( unit , goAway ) ;
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_VAR 0 3
58870: PPUSH
58871: CALL_OW 113
// exit ;
58875: GO 58963
// end ; if task [ 1 ] [ 1 ] <> M then
58877: LD_VAR 0 7
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PUSH
58886: LD_INT 1
58888: ARRAY
58889: PUSH
58890: LD_STRING M
58892: NONEQUAL
58893: IFFALSE 58897
// exit ;
58895: GO 58963
// x := task [ 1 ] [ 2 ] ;
58897: LD_ADDR_VAR 0 5
58901: PUSH
58902: LD_VAR 0 7
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PUSH
58911: LD_INT 2
58913: ARRAY
58914: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58915: LD_ADDR_VAR 0 6
58919: PUSH
58920: LD_VAR 0 7
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: PUSH
58929: LD_INT 3
58931: ARRAY
58932: ST_TO_ADDR
// if InArea ( x , y , area ) then
58933: LD_VAR 0 5
58937: PPUSH
58938: LD_VAR 0 6
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: CALL_OW 309
58952: IFFALSE 58963
// ComStop ( unit ) ;
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 141
// end ;
58963: LD_VAR 0 4
58967: RET
// export function Abs ( value ) ; begin
58968: LD_INT 0
58970: PPUSH
// result := value ;
58971: LD_ADDR_VAR 0 2
58975: PUSH
58976: LD_VAR 0 1
58980: ST_TO_ADDR
// if value < 0 then
58981: LD_VAR 0 1
58985: PUSH
58986: LD_INT 0
58988: LESS
58989: IFFALSE 59006
// result := value * - 1 ;
58991: LD_ADDR_VAR 0 2
58995: PUSH
58996: LD_VAR 0 1
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: MUL
59005: ST_TO_ADDR
// end ;
59006: LD_VAR 0 2
59010: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59011: LD_INT 0
59013: PPUSH
59014: PPUSH
59015: PPUSH
59016: PPUSH
59017: PPUSH
59018: PPUSH
59019: PPUSH
59020: PPUSH
// if not unit or not building then
59021: LD_VAR 0 1
59025: NOT
59026: PUSH
59027: LD_VAR 0 2
59031: NOT
59032: OR
59033: IFFALSE 59037
// exit ;
59035: GO 59263
// x := GetX ( building ) ;
59037: LD_ADDR_VAR 0 4
59041: PUSH
59042: LD_VAR 0 2
59046: PPUSH
59047: CALL_OW 250
59051: ST_TO_ADDR
// y := GetY ( building ) ;
59052: LD_ADDR_VAR 0 6
59056: PUSH
59057: LD_VAR 0 2
59061: PPUSH
59062: CALL_OW 251
59066: ST_TO_ADDR
// d := GetDir ( building ) ;
59067: LD_ADDR_VAR 0 8
59071: PUSH
59072: LD_VAR 0 2
59076: PPUSH
59077: CALL_OW 254
59081: ST_TO_ADDR
// r := 4 ;
59082: LD_ADDR_VAR 0 9
59086: PUSH
59087: LD_INT 4
59089: ST_TO_ADDR
// for i := 1 to 5 do
59090: LD_ADDR_VAR 0 10
59094: PUSH
59095: DOUBLE
59096: LD_INT 1
59098: DEC
59099: ST_TO_ADDR
59100: LD_INT 5
59102: PUSH
59103: FOR_TO
59104: IFFALSE 59261
// begin _x := ShiftX ( x , d , r + i ) ;
59106: LD_ADDR_VAR 0 5
59110: PUSH
59111: LD_VAR 0 4
59115: PPUSH
59116: LD_VAR 0 8
59120: PPUSH
59121: LD_VAR 0 9
59125: PUSH
59126: LD_VAR 0 10
59130: PLUS
59131: PPUSH
59132: CALL_OW 272
59136: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59137: LD_ADDR_VAR 0 7
59141: PUSH
59142: LD_VAR 0 6
59146: PPUSH
59147: LD_VAR 0 8
59151: PPUSH
59152: LD_VAR 0 9
59156: PUSH
59157: LD_VAR 0 10
59161: PLUS
59162: PPUSH
59163: CALL_OW 273
59167: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59168: LD_VAR 0 5
59172: PPUSH
59173: LD_VAR 0 7
59177: PPUSH
59178: CALL_OW 488
59182: PUSH
59183: LD_VAR 0 5
59187: PPUSH
59188: LD_VAR 0 7
59192: PPUSH
59193: CALL_OW 428
59197: PPUSH
59198: CALL_OW 247
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 2
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: IN
59213: NOT
59214: AND
59215: IFFALSE 59259
// begin ComMoveXY ( unit , _x , _y ) ;
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_VAR 0 5
59226: PPUSH
59227: LD_VAR 0 7
59231: PPUSH
59232: CALL_OW 111
// result := [ _x , _y ] ;
59236: LD_ADDR_VAR 0 3
59240: PUSH
59241: LD_VAR 0 5
59245: PUSH
59246: LD_VAR 0 7
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: ST_TO_ADDR
// exit ;
59255: POP
59256: POP
59257: GO 59263
// end ; end ;
59259: GO 59103
59261: POP
59262: POP
// end ;
59263: LD_VAR 0 3
59267: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59268: LD_INT 0
59270: PPUSH
59271: PPUSH
59272: PPUSH
// result := 0 ;
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_INT 0
59280: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59281: LD_VAR 0 1
59285: PUSH
59286: LD_INT 0
59288: LESS
59289: PUSH
59290: LD_VAR 0 1
59294: PUSH
59295: LD_INT 8
59297: GREATER
59298: OR
59299: PUSH
59300: LD_VAR 0 2
59304: PUSH
59305: LD_INT 0
59307: LESS
59308: OR
59309: PUSH
59310: LD_VAR 0 2
59314: PUSH
59315: LD_INT 8
59317: GREATER
59318: OR
59319: IFFALSE 59323
// exit ;
59321: GO 59398
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59323: LD_ADDR_VAR 0 4
59327: PUSH
59328: LD_INT 22
59330: PUSH
59331: LD_VAR 0 2
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PPUSH
59340: CALL_OW 69
59344: PUSH
59345: FOR_IN
59346: IFFALSE 59396
// begin un := UnitShoot ( i ) ;
59348: LD_ADDR_VAR 0 5
59352: PUSH
59353: LD_VAR 0 4
59357: PPUSH
59358: CALL_OW 504
59362: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59363: LD_VAR 0 5
59367: PPUSH
59368: CALL_OW 255
59372: PUSH
59373: LD_VAR 0 1
59377: EQUAL
59378: IFFALSE 59394
// begin result := un ;
59380: LD_ADDR_VAR 0 3
59384: PUSH
59385: LD_VAR 0 5
59389: ST_TO_ADDR
// exit ;
59390: POP
59391: POP
59392: GO 59398
// end ; end ;
59394: GO 59345
59396: POP
59397: POP
// end ;
59398: LD_VAR 0 3
59402: RET
// export function GetCargoBay ( units ) ; begin
59403: LD_INT 0
59405: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 34
59421: PUSH
59422: LD_INT 12
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 34
59431: PUSH
59432: LD_INT 51
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 34
59441: PUSH
59442: LD_INT 32
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 34
59451: PUSH
59452: LD_EXP 91
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: PPUSH
59468: CALL_OW 72
59472: ST_TO_ADDR
// end ; end_of_file
59473: LD_VAR 0 2
59477: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59478: LD_VAR 0 1
59482: PPUSH
59483: LD_VAR 0 2
59487: PPUSH
59488: LD_VAR 0 3
59492: PPUSH
59493: LD_VAR 0 4
59497: PPUSH
59498: LD_VAR 0 5
59502: PPUSH
59503: LD_VAR 0 6
59507: PPUSH
59508: CALL 4304 0 6
// end ;
59512: PPOPN 6
59514: END
