// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 65262 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 65262 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// export globalGameSaveCounter ; every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// every 0 0$1 do
4577: GO 4579
4579: DISABLE
// begin globalGameSaveCounter := 0 ;
4580: LD_ADDR_EXP 23
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4588: LD_STRING setGameSaveCounter(0)
4590: PPUSH
4591: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4595: LD_STRING initStreamRollete();
4597: PPUSH
4598: CALL_OW 559
// InitStreamMode ;
4602: CALL 5945 0 0
// DefineStreamItems ( false ) ;
4606: LD_INT 0
4608: PPUSH
4609: CALL 6409 0 1
// end ;
4613: END
// export function SOS_MapStart ( ) ; begin
4614: LD_INT 0
4616: PPUSH
// if streamModeActive then
4617: LD_EXP 24
4621: IFFALSE 4630
// DefineStreamItems ( true ) ;
4623: LD_INT 1
4625: PPUSH
4626: CALL 6409 0 1
// UpdateLuaVariables ( ) ;
4630: CALL 4647 0 0
// UpdateFactoryWaypoints ( ) ;
4634: CALL 19278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4638: CALL 19535 0 0
// end ;
4642: LD_VAR 0 1
4646: RET
// function UpdateLuaVariables ( ) ; begin
4647: LD_INT 0
4649: PPUSH
// if globalGameSaveCounter then
4650: LD_EXP 23
4654: IFFALSE 4688
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4656: LD_ADDR_EXP 23
4660: PUSH
4661: LD_EXP 23
4665: PPUSH
4666: CALL 64483 0 1
4670: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4671: LD_STRING setGameSaveCounter(
4673: PUSH
4674: LD_EXP 23
4678: STR
4679: PUSH
4680: LD_STRING )
4682: STR
4683: PPUSH
4684: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4688: LD_STRING setGameDifficulty(
4690: PUSH
4691: LD_OWVAR 67
4695: STR
4696: PUSH
4697: LD_STRING )
4699: STR
4700: PPUSH
4701: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4705: LD_STRING displayDifficulty(
4707: PUSH
4708: LD_OWVAR 67
4712: STR
4713: PUSH
4714: LD_STRING )
4716: STR
4717: PPUSH
4718: CALL_OW 559
// end ;
4722: LD_VAR 0 1
4726: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4727: LD_INT 0
4729: PPUSH
// if p2 = stream_mode then
4730: LD_VAR 0 2
4734: PUSH
4735: LD_INT 100
4737: EQUAL
4738: IFFALSE 5741
// begin if not StreamModeActive then
4740: LD_EXP 24
4744: NOT
4745: IFFALSE 4755
// StreamModeActive := true ;
4747: LD_ADDR_EXP 24
4751: PUSH
4752: LD_INT 1
4754: ST_TO_ADDR
// if p3 = 0 then
4755: LD_VAR 0 3
4759: PUSH
4760: LD_INT 0
4762: EQUAL
4763: IFFALSE 4769
// InitStreamMode ;
4765: CALL 5945 0 0
// if p3 = 1 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 1
4776: EQUAL
4777: IFFALSE 4787
// sRocket := true ;
4779: LD_ADDR_EXP 29
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 2 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 2
4794: EQUAL
4795: IFFALSE 4805
// sSpeed := true ;
4797: LD_ADDR_EXP 28
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 3 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 3
4812: EQUAL
4813: IFFALSE 4823
// sEngine := true ;
4815: LD_ADDR_EXP 30
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 4 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 4
4830: EQUAL
4831: IFFALSE 4841
// sSpec := true ;
4833: LD_ADDR_EXP 27
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 5 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 5
4848: EQUAL
4849: IFFALSE 4859
// sLevel := true ;
4851: LD_ADDR_EXP 31
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 6 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 6
4866: EQUAL
4867: IFFALSE 4877
// sArmoury := true ;
4869: LD_ADDR_EXP 32
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 7 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 7
4884: EQUAL
4885: IFFALSE 4895
// sRadar := true ;
4887: LD_ADDR_EXP 33
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 8 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 8
4902: EQUAL
4903: IFFALSE 4913
// sBunker := true ;
4905: LD_ADDR_EXP 34
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 9 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 9
4920: EQUAL
4921: IFFALSE 4931
// sHack := true ;
4923: LD_ADDR_EXP 35
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 10 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 10
4938: EQUAL
4939: IFFALSE 4949
// sFire := true ;
4941: LD_ADDR_EXP 36
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 11 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 11
4956: EQUAL
4957: IFFALSE 4967
// sRefresh := true ;
4959: LD_ADDR_EXP 37
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 12 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 12
4974: EQUAL
4975: IFFALSE 4985
// sExp := true ;
4977: LD_ADDR_EXP 38
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 13 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 13
4992: EQUAL
4993: IFFALSE 5003
// sDepot := true ;
4995: LD_ADDR_EXP 39
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 14 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 14
5010: EQUAL
5011: IFFALSE 5021
// sFlag := true ;
5013: LD_ADDR_EXP 40
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 15 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 15
5028: EQUAL
5029: IFFALSE 5039
// sKamikadze := true ;
5031: LD_ADDR_EXP 48
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 16 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 16
5046: EQUAL
5047: IFFALSE 5057
// sTroll := true ;
5049: LD_ADDR_EXP 49
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 17 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 17
5064: EQUAL
5065: IFFALSE 5075
// sSlow := true ;
5067: LD_ADDR_EXP 50
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 18 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 18
5082: EQUAL
5083: IFFALSE 5093
// sLack := true ;
5085: LD_ADDR_EXP 51
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 19 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 19
5100: EQUAL
5101: IFFALSE 5111
// sTank := true ;
5103: LD_ADDR_EXP 53
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 20 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 20
5118: EQUAL
5119: IFFALSE 5129
// sRemote := true ;
5121: LD_ADDR_EXP 54
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 21 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 21
5136: EQUAL
5137: IFFALSE 5147
// sPowell := true ;
5139: LD_ADDR_EXP 55
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 22 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 22
5154: EQUAL
5155: IFFALSE 5165
// sTeleport := true ;
5157: LD_ADDR_EXP 58
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 23 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 23
5172: EQUAL
5173: IFFALSE 5183
// sOilTower := true ;
5175: LD_ADDR_EXP 60
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 24 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 24
5190: EQUAL
5191: IFFALSE 5201
// sShovel := true ;
5193: LD_ADDR_EXP 61
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 25 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 25
5208: EQUAL
5209: IFFALSE 5219
// sSheik := true ;
5211: LD_ADDR_EXP 62
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 26 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 26
5226: EQUAL
5227: IFFALSE 5237
// sEarthquake := true ;
5229: LD_ADDR_EXP 64
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 27 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 27
5244: EQUAL
5245: IFFALSE 5255
// sAI := true ;
5247: LD_ADDR_EXP 65
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 28 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 28
5262: EQUAL
5263: IFFALSE 5273
// sCargo := true ;
5265: LD_ADDR_EXP 68
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 29 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 29
5280: EQUAL
5281: IFFALSE 5291
// sDLaser := true ;
5283: LD_ADDR_EXP 69
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 30 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 30
5298: EQUAL
5299: IFFALSE 5309
// sExchange := true ;
5301: LD_ADDR_EXP 70
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 31 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 31
5316: EQUAL
5317: IFFALSE 5327
// sFac := true ;
5319: LD_ADDR_EXP 71
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 32 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 32
5334: EQUAL
5335: IFFALSE 5345
// sPower := true ;
5337: LD_ADDR_EXP 72
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// if p3 = 33 then
5345: LD_VAR 0 3
5349: PUSH
5350: LD_INT 33
5352: EQUAL
5353: IFFALSE 5363
// sRandom := true ;
5355: LD_ADDR_EXP 73
5359: PUSH
5360: LD_INT 1
5362: ST_TO_ADDR
// if p3 = 34 then
5363: LD_VAR 0 3
5367: PUSH
5368: LD_INT 34
5370: EQUAL
5371: IFFALSE 5381
// sShield := true ;
5373: LD_ADDR_EXP 74
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if p3 = 35 then
5381: LD_VAR 0 3
5385: PUSH
5386: LD_INT 35
5388: EQUAL
5389: IFFALSE 5399
// sTime := true ;
5391: LD_ADDR_EXP 75
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// if p3 = 36 then
5399: LD_VAR 0 3
5403: PUSH
5404: LD_INT 36
5406: EQUAL
5407: IFFALSE 5417
// sTools := true ;
5409: LD_ADDR_EXP 76
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// if p3 = 101 then
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 101
5424: EQUAL
5425: IFFALSE 5435
// sSold := true ;
5427: LD_ADDR_EXP 41
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// if p3 = 102 then
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 102
5442: EQUAL
5443: IFFALSE 5453
// sDiff := true ;
5445: LD_ADDR_EXP 42
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// if p3 = 103 then
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 103
5460: EQUAL
5461: IFFALSE 5471
// sFog := true ;
5463: LD_ADDR_EXP 45
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// if p3 = 104 then
5471: LD_VAR 0 3
5475: PUSH
5476: LD_INT 104
5478: EQUAL
5479: IFFALSE 5489
// sReset := true ;
5481: LD_ADDR_EXP 46
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// if p3 = 105 then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 105
5496: EQUAL
5497: IFFALSE 5507
// sSun := true ;
5499: LD_ADDR_EXP 47
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// if p3 = 106 then
5507: LD_VAR 0 3
5511: PUSH
5512: LD_INT 106
5514: EQUAL
5515: IFFALSE 5525
// sTiger := true ;
5517: LD_ADDR_EXP 43
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// if p3 = 107 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 107
5532: EQUAL
5533: IFFALSE 5543
// sBomb := true ;
5535: LD_ADDR_EXP 44
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// if p3 = 108 then
5543: LD_VAR 0 3
5547: PUSH
5548: LD_INT 108
5550: EQUAL
5551: IFFALSE 5561
// sWound := true ;
5553: LD_ADDR_EXP 52
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// if p3 = 109 then
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 109
5568: EQUAL
5569: IFFALSE 5579
// sBetray := true ;
5571: LD_ADDR_EXP 56
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// if p3 = 110 then
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 110
5586: EQUAL
5587: IFFALSE 5597
// sContamin := true ;
5589: LD_ADDR_EXP 57
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// if p3 = 111 then
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 111
5604: EQUAL
5605: IFFALSE 5615
// sOil := true ;
5607: LD_ADDR_EXP 59
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if p3 = 112 then
5615: LD_VAR 0 3
5619: PUSH
5620: LD_INT 112
5622: EQUAL
5623: IFFALSE 5633
// sStu := true ;
5625: LD_ADDR_EXP 63
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// if p3 = 113 then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 113
5640: EQUAL
5641: IFFALSE 5651
// sBazooka := true ;
5643: LD_ADDR_EXP 66
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// if p3 = 114 then
5651: LD_VAR 0 3
5655: PUSH
5656: LD_INT 114
5658: EQUAL
5659: IFFALSE 5669
// sMortar := true ;
5661: LD_ADDR_EXP 67
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// if p3 = 115 then
5669: LD_VAR 0 3
5673: PUSH
5674: LD_INT 115
5676: EQUAL
5677: IFFALSE 5687
// sRanger := true ;
5679: LD_ADDR_EXP 77
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// if p3 = 116 then
5687: LD_VAR 0 3
5691: PUSH
5692: LD_INT 116
5694: EQUAL
5695: IFFALSE 5705
// sComputer := true ;
5697: LD_ADDR_EXP 78
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
// if p3 = 117 then
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 117
5712: EQUAL
5713: IFFALSE 5723
// s30 := true ;
5715: LD_ADDR_EXP 79
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// if p3 = 118 then
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 118
5730: EQUAL
5731: IFFALSE 5741
// s60 := true ;
5733: LD_ADDR_EXP 80
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// end ; if p2 = hack_mode then
5741: LD_VAR 0 2
5745: PUSH
5746: LD_INT 101
5748: EQUAL
5749: IFFALSE 5877
// begin case p3 of 1 :
5751: LD_VAR 0 3
5755: PUSH
5756: LD_INT 1
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5771
5764: POP
// hHackUnlimitedResources ; 2 :
5765: CALL 18024 0 0
5769: GO 5877
5771: LD_INT 2
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5786
5779: POP
// hHackSetLevel10 ; 3 :
5780: CALL 18157 0 0
5784: GO 5877
5786: LD_INT 3
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5801
5794: POP
// hHackSetLevel10YourUnits ; 4 :
5795: CALL 18242 0 0
5799: GO 5877
5801: LD_INT 4
5803: DOUBLE
5804: EQUAL
5805: IFTRUE 5809
5807: GO 5816
5809: POP
// hHackInvincible ; 5 :
5810: CALL 18690 0 0
5814: GO 5877
5816: LD_INT 5
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5831
5824: POP
// hHackInvisible ; 6 :
5825: CALL 18801 0 0
5829: GO 5877
5831: LD_INT 6
5833: DOUBLE
5834: EQUAL
5835: IFTRUE 5839
5837: GO 5846
5839: POP
// hHackChangeYourSide ; 7 :
5840: CALL 18858 0 0
5844: GO 5877
5846: LD_INT 7
5848: DOUBLE
5849: EQUAL
5850: IFTRUE 5854
5852: GO 5861
5854: POP
// hHackChangeUnitSide ; 8 :
5855: CALL 18900 0 0
5859: GO 5877
5861: LD_INT 8
5863: DOUBLE
5864: EQUAL
5865: IFTRUE 5869
5867: GO 5876
5869: POP
// hHackFog ; end ;
5870: CALL 19001 0 0
5874: GO 5877
5876: POP
// end ; if p2 = game_save_mode then
5877: LD_VAR 0 2
5881: PUSH
5882: LD_INT 102
5884: EQUAL
5885: IFFALSE 5940
// begin if p3 = 1 then
5887: LD_VAR 0 3
5891: PUSH
5892: LD_INT 1
5894: EQUAL
5895: IFFALSE 5907
// globalGameSaveCounter := p4 ;
5897: LD_ADDR_EXP 23
5901: PUSH
5902: LD_VAR 0 4
5906: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 2
5914: EQUAL
5915: PUSH
5916: LD_EXP 23
5920: AND
5921: IFFALSE 5940
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5923: LD_STRING setGameSaveCounter(
5925: PUSH
5926: LD_EXP 23
5930: STR
5931: PUSH
5932: LD_STRING )
5934: STR
5935: PPUSH
5936: CALL_OW 559
// end ; end ;
5940: LD_VAR 0 7
5944: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5945: LD_INT 0
5947: PPUSH
// streamModeActive := false ;
5948: LD_ADDR_EXP 24
5952: PUSH
5953: LD_INT 0
5955: ST_TO_ADDR
// normalCounter := 36 ;
5956: LD_ADDR_EXP 25
5960: PUSH
5961: LD_INT 36
5963: ST_TO_ADDR
// hardcoreCounter := 18 ;
5964: LD_ADDR_EXP 26
5968: PUSH
5969: LD_INT 18
5971: ST_TO_ADDR
// sRocket := false ;
5972: LD_ADDR_EXP 29
5976: PUSH
5977: LD_INT 0
5979: ST_TO_ADDR
// sSpeed := false ;
5980: LD_ADDR_EXP 28
5984: PUSH
5985: LD_INT 0
5987: ST_TO_ADDR
// sEngine := false ;
5988: LD_ADDR_EXP 30
5992: PUSH
5993: LD_INT 0
5995: ST_TO_ADDR
// sSpec := false ;
5996: LD_ADDR_EXP 27
6000: PUSH
6001: LD_INT 0
6003: ST_TO_ADDR
// sLevel := false ;
6004: LD_ADDR_EXP 31
6008: PUSH
6009: LD_INT 0
6011: ST_TO_ADDR
// sArmoury := false ;
6012: LD_ADDR_EXP 32
6016: PUSH
6017: LD_INT 0
6019: ST_TO_ADDR
// sRadar := false ;
6020: LD_ADDR_EXP 33
6024: PUSH
6025: LD_INT 0
6027: ST_TO_ADDR
// sBunker := false ;
6028: LD_ADDR_EXP 34
6032: PUSH
6033: LD_INT 0
6035: ST_TO_ADDR
// sHack := false ;
6036: LD_ADDR_EXP 35
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// sFire := false ;
6044: LD_ADDR_EXP 36
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// sRefresh := false ;
6052: LD_ADDR_EXP 37
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// sExp := false ;
6060: LD_ADDR_EXP 38
6064: PUSH
6065: LD_INT 0
6067: ST_TO_ADDR
// sDepot := false ;
6068: LD_ADDR_EXP 39
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// sFlag := false ;
6076: LD_ADDR_EXP 40
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// sKamikadze := false ;
6084: LD_ADDR_EXP 48
6088: PUSH
6089: LD_INT 0
6091: ST_TO_ADDR
// sTroll := false ;
6092: LD_ADDR_EXP 49
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// sSlow := false ;
6100: LD_ADDR_EXP 50
6104: PUSH
6105: LD_INT 0
6107: ST_TO_ADDR
// sLack := false ;
6108: LD_ADDR_EXP 51
6112: PUSH
6113: LD_INT 0
6115: ST_TO_ADDR
// sTank := false ;
6116: LD_ADDR_EXP 53
6120: PUSH
6121: LD_INT 0
6123: ST_TO_ADDR
// sRemote := false ;
6124: LD_ADDR_EXP 54
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// sPowell := false ;
6132: LD_ADDR_EXP 55
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// sTeleport := false ;
6140: LD_ADDR_EXP 58
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// sOilTower := false ;
6148: LD_ADDR_EXP 60
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// sShovel := false ;
6156: LD_ADDR_EXP 61
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// sSheik := false ;
6164: LD_ADDR_EXP 62
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sEarthquake := false ;
6172: LD_ADDR_EXP 64
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sAI := false ;
6180: LD_ADDR_EXP 65
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sCargo := false ;
6188: LD_ADDR_EXP 68
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sDLaser := false ;
6196: LD_ADDR_EXP 69
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sExchange := false ;
6204: LD_ADDR_EXP 70
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sFac := false ;
6212: LD_ADDR_EXP 71
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sPower := false ;
6220: LD_ADDR_EXP 72
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sRandom := false ;
6228: LD_ADDR_EXP 73
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sShield := false ;
6236: LD_ADDR_EXP 74
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sTime := false ;
6244: LD_ADDR_EXP 75
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sTools := false ;
6252: LD_ADDR_EXP 76
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sSold := false ;
6260: LD_ADDR_EXP 41
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sDiff := false ;
6268: LD_ADDR_EXP 42
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sFog := false ;
6276: LD_ADDR_EXP 45
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sReset := false ;
6284: LD_ADDR_EXP 46
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sSun := false ;
6292: LD_ADDR_EXP 47
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sTiger := false ;
6300: LD_ADDR_EXP 43
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// sBomb := false ;
6308: LD_ADDR_EXP 44
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// sWound := false ;
6316: LD_ADDR_EXP 52
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// sBetray := false ;
6324: LD_ADDR_EXP 56
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// sContamin := false ;
6332: LD_ADDR_EXP 57
6336: PUSH
6337: LD_INT 0
6339: ST_TO_ADDR
// sOil := false ;
6340: LD_ADDR_EXP 59
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// sStu := false ;
6348: LD_ADDR_EXP 63
6352: PUSH
6353: LD_INT 0
6355: ST_TO_ADDR
// sBazooka := false ;
6356: LD_ADDR_EXP 66
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// sMortar := false ;
6364: LD_ADDR_EXP 67
6368: PUSH
6369: LD_INT 0
6371: ST_TO_ADDR
// sRanger := false ;
6372: LD_ADDR_EXP 77
6376: PUSH
6377: LD_INT 0
6379: ST_TO_ADDR
// sComputer := false ;
6380: LD_ADDR_EXP 78
6384: PUSH
6385: LD_INT 0
6387: ST_TO_ADDR
// s30 := false ;
6388: LD_ADDR_EXP 79
6392: PUSH
6393: LD_INT 0
6395: ST_TO_ADDR
// s60 := false ;
6396: LD_ADDR_EXP 80
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// end ;
6404: LD_VAR 0 1
6408: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
6417: PPUSH
// result := [ ] ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: EMPTY
6424: ST_TO_ADDR
// if campaign_id = 1 then
6425: LD_OWVAR 69
6429: PUSH
6430: LD_INT 1
6432: EQUAL
6433: IFFALSE 9599
// begin case mission_number of 1 :
6435: LD_OWVAR 70
6439: PUSH
6440: LD_INT 1
6442: DOUBLE
6443: EQUAL
6444: IFTRUE 6448
6446: GO 6524
6448: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 2
6456: PUSH
6457: LD_INT 4
6459: PUSH
6460: LD_INT 11
6462: PUSH
6463: LD_INT 12
6465: PUSH
6466: LD_INT 15
6468: PUSH
6469: LD_INT 16
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 26
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 101
6494: PUSH
6495: LD_INT 102
6497: PUSH
6498: LD_INT 106
6500: PUSH
6501: LD_INT 116
6503: PUSH
6504: LD_INT 117
6506: PUSH
6507: LD_INT 118
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 9597
6524: LD_INT 2
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6616
6532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6533: LD_ADDR_VAR 0 2
6537: PUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 4
6543: PUSH
6544: LD_INT 11
6546: PUSH
6547: LD_INT 12
6549: PUSH
6550: LD_INT 15
6552: PUSH
6553: LD_INT 16
6555: PUSH
6556: LD_INT 22
6558: PUSH
6559: LD_INT 23
6561: PUSH
6562: LD_INT 26
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 101
6578: PUSH
6579: LD_INT 102
6581: PUSH
6582: LD_INT 105
6584: PUSH
6585: LD_INT 106
6587: PUSH
6588: LD_INT 108
6590: PUSH
6591: LD_INT 116
6593: PUSH
6594: LD_INT 117
6596: PUSH
6597: LD_INT 118
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: ST_TO_ADDR
6614: GO 9597
6616: LD_INT 3
6618: DOUBLE
6619: EQUAL
6620: IFTRUE 6624
6622: GO 6712
6624: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6625: LD_ADDR_VAR 0 2
6629: PUSH
6630: LD_INT 2
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: LD_INT 11
6641: PUSH
6642: LD_INT 12
6644: PUSH
6645: LD_INT 15
6647: PUSH
6648: LD_INT 16
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 26
6656: PUSH
6657: LD_INT 36
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 101
6674: PUSH
6675: LD_INT 102
6677: PUSH
6678: LD_INT 105
6680: PUSH
6681: LD_INT 106
6683: PUSH
6684: LD_INT 108
6686: PUSH
6687: LD_INT 116
6689: PUSH
6690: LD_INT 117
6692: PUSH
6693: LD_INT 118
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: ST_TO_ADDR
6710: GO 9597
6712: LD_INT 4
6714: DOUBLE
6715: EQUAL
6716: IFTRUE 6720
6718: GO 6816
6720: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6721: LD_ADDR_VAR 0 2
6725: PUSH
6726: LD_INT 2
6728: PUSH
6729: LD_INT 4
6731: PUSH
6732: LD_INT 5
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: LD_INT 16
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 23
6755: PUSH
6756: LD_INT 26
6758: PUSH
6759: LD_INT 36
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 101
6778: PUSH
6779: LD_INT 102
6781: PUSH
6782: LD_INT 105
6784: PUSH
6785: LD_INT 106
6787: PUSH
6788: LD_INT 108
6790: PUSH
6791: LD_INT 116
6793: PUSH
6794: LD_INT 117
6796: PUSH
6797: LD_INT 118
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 9597
6816: LD_INT 5
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6936
6824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6825: LD_ADDR_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: PUSH
6833: LD_INT 4
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: LD_INT 6
6841: PUSH
6842: LD_INT 8
6844: PUSH
6845: LD_INT 11
6847: PUSH
6848: LD_INT 12
6850: PUSH
6851: LD_INT 15
6853: PUSH
6854: LD_INT 16
6856: PUSH
6857: LD_INT 22
6859: PUSH
6860: LD_INT 23
6862: PUSH
6863: LD_INT 25
6865: PUSH
6866: LD_INT 26
6868: PUSH
6869: LD_INT 36
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 101
6890: PUSH
6891: LD_INT 102
6893: PUSH
6894: LD_INT 105
6896: PUSH
6897: LD_INT 106
6899: PUSH
6900: LD_INT 108
6902: PUSH
6903: LD_INT 109
6905: PUSH
6906: LD_INT 112
6908: PUSH
6909: LD_INT 116
6911: PUSH
6912: LD_INT 117
6914: PUSH
6915: LD_INT 118
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 9597
6936: LD_INT 6
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7076
6944: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 4
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: LD_INT 6
6961: PUSH
6962: LD_INT 8
6964: PUSH
6965: LD_INT 11
6967: PUSH
6968: LD_INT 12
6970: PUSH
6971: LD_INT 15
6973: PUSH
6974: LD_INT 16
6976: PUSH
6977: LD_INT 20
6979: PUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 23
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 26
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 31
7000: PUSH
7001: LD_INT 32
7003: PUSH
7004: LD_INT 36
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 101
7030: PUSH
7031: LD_INT 102
7033: PUSH
7034: LD_INT 105
7036: PUSH
7037: LD_INT 106
7039: PUSH
7040: LD_INT 108
7042: PUSH
7043: LD_INT 109
7045: PUSH
7046: LD_INT 112
7048: PUSH
7049: LD_INT 116
7051: PUSH
7052: LD_INT 117
7054: PUSH
7055: LD_INT 118
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 9597
7076: LD_INT 7
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7196
7084: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7085: LD_ADDR_VAR 0 2
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: LD_INT 4
7095: PUSH
7096: LD_INT 5
7098: PUSH
7099: LD_INT 7
7101: PUSH
7102: LD_INT 11
7104: PUSH
7105: LD_INT 12
7107: PUSH
7108: LD_INT 15
7110: PUSH
7111: LD_INT 16
7113: PUSH
7114: LD_INT 20
7116: PUSH
7117: LD_INT 21
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 25
7128: PUSH
7129: LD_INT 26
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 101
7150: PUSH
7151: LD_INT 102
7153: PUSH
7154: LD_INT 103
7156: PUSH
7157: LD_INT 105
7159: PUSH
7160: LD_INT 106
7162: PUSH
7163: LD_INT 108
7165: PUSH
7166: LD_INT 112
7168: PUSH
7169: LD_INT 116
7171: PUSH
7172: LD_INT 117
7174: PUSH
7175: LD_INT 118
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: ST_TO_ADDR
7194: GO 9597
7196: LD_INT 8
7198: DOUBLE
7199: EQUAL
7200: IFTRUE 7204
7202: GO 7344
7204: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7205: LD_ADDR_VAR 0 2
7209: PUSH
7210: LD_INT 2
7212: PUSH
7213: LD_INT 4
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: LD_INT 6
7221: PUSH
7222: LD_INT 7
7224: PUSH
7225: LD_INT 8
7227: PUSH
7228: LD_INT 11
7230: PUSH
7231: LD_INT 12
7233: PUSH
7234: LD_INT 15
7236: PUSH
7237: LD_INT 16
7239: PUSH
7240: LD_INT 20
7242: PUSH
7243: LD_INT 21
7245: PUSH
7246: LD_INT 22
7248: PUSH
7249: LD_INT 23
7251: PUSH
7252: LD_INT 25
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 30
7260: PUSH
7261: LD_INT 31
7263: PUSH
7264: LD_INT 32
7266: PUSH
7267: LD_INT 36
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 101
7294: PUSH
7295: LD_INT 102
7297: PUSH
7298: LD_INT 103
7300: PUSH
7301: LD_INT 105
7303: PUSH
7304: LD_INT 106
7306: PUSH
7307: LD_INT 108
7309: PUSH
7310: LD_INT 109
7312: PUSH
7313: LD_INT 112
7315: PUSH
7316: LD_INT 116
7318: PUSH
7319: LD_INT 117
7321: PUSH
7322: LD_INT 118
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 9597
7344: LD_INT 9
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7500
7352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: LD_INT 4
7363: PUSH
7364: LD_INT 5
7366: PUSH
7367: LD_INT 6
7369: PUSH
7370: LD_INT 7
7372: PUSH
7373: LD_INT 8
7375: PUSH
7376: LD_INT 11
7378: PUSH
7379: LD_INT 12
7381: PUSH
7382: LD_INT 15
7384: PUSH
7385: LD_INT 16
7387: PUSH
7388: LD_INT 20
7390: PUSH
7391: LD_INT 21
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_INT 23
7399: PUSH
7400: LD_INT 25
7402: PUSH
7403: LD_INT 26
7405: PUSH
7406: LD_INT 28
7408: PUSH
7409: LD_INT 30
7411: PUSH
7412: LD_INT 31
7414: PUSH
7415: LD_INT 32
7417: PUSH
7418: LD_INT 36
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 101
7446: PUSH
7447: LD_INT 102
7449: PUSH
7450: LD_INT 103
7452: PUSH
7453: LD_INT 105
7455: PUSH
7456: LD_INT 106
7458: PUSH
7459: LD_INT 108
7461: PUSH
7462: LD_INT 109
7464: PUSH
7465: LD_INT 112
7467: PUSH
7468: LD_INT 114
7470: PUSH
7471: LD_INT 116
7473: PUSH
7474: LD_INT 117
7476: PUSH
7477: LD_INT 118
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: ST_TO_ADDR
7498: GO 9597
7500: LD_INT 10
7502: DOUBLE
7503: EQUAL
7504: IFTRUE 7508
7506: GO 7704
7508: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_INT 2
7516: PUSH
7517: LD_INT 4
7519: PUSH
7520: LD_INT 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_INT 7
7528: PUSH
7529: LD_INT 8
7531: PUSH
7532: LD_INT 9
7534: PUSH
7535: LD_INT 10
7537: PUSH
7538: LD_INT 11
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: LD_INT 13
7546: PUSH
7547: LD_INT 14
7549: PUSH
7550: LD_INT 15
7552: PUSH
7553: LD_INT 16
7555: PUSH
7556: LD_INT 17
7558: PUSH
7559: LD_INT 18
7561: PUSH
7562: LD_INT 19
7564: PUSH
7565: LD_INT 20
7567: PUSH
7568: LD_INT 21
7570: PUSH
7571: LD_INT 22
7573: PUSH
7574: LD_INT 23
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: LD_INT 28
7588: PUSH
7589: LD_INT 30
7591: PUSH
7592: LD_INT 31
7594: PUSH
7595: LD_INT 32
7597: PUSH
7598: LD_INT 36
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 101
7634: PUSH
7635: LD_INT 102
7637: PUSH
7638: LD_INT 103
7640: PUSH
7641: LD_INT 104
7643: PUSH
7644: LD_INT 105
7646: PUSH
7647: LD_INT 106
7649: PUSH
7650: LD_INT 107
7652: PUSH
7653: LD_INT 108
7655: PUSH
7656: LD_INT 109
7658: PUSH
7659: LD_INT 110
7661: PUSH
7662: LD_INT 111
7664: PUSH
7665: LD_INT 112
7667: PUSH
7668: LD_INT 114
7670: PUSH
7671: LD_INT 116
7673: PUSH
7674: LD_INT 117
7676: PUSH
7677: LD_INT 118
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: ST_TO_ADDR
7702: GO 9597
7704: LD_INT 11
7706: DOUBLE
7707: EQUAL
7708: IFTRUE 7712
7710: GO 7916
7712: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 4
7726: PUSH
7727: LD_INT 5
7729: PUSH
7730: LD_INT 6
7732: PUSH
7733: LD_INT 7
7735: PUSH
7736: LD_INT 8
7738: PUSH
7739: LD_INT 9
7741: PUSH
7742: LD_INT 10
7744: PUSH
7745: LD_INT 11
7747: PUSH
7748: LD_INT 12
7750: PUSH
7751: LD_INT 13
7753: PUSH
7754: LD_INT 14
7756: PUSH
7757: LD_INT 15
7759: PUSH
7760: LD_INT 16
7762: PUSH
7763: LD_INT 17
7765: PUSH
7766: LD_INT 18
7768: PUSH
7769: LD_INT 19
7771: PUSH
7772: LD_INT 20
7774: PUSH
7775: LD_INT 21
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_INT 23
7783: PUSH
7784: LD_INT 24
7786: PUSH
7787: LD_INT 25
7789: PUSH
7790: LD_INT 26
7792: PUSH
7793: LD_INT 28
7795: PUSH
7796: LD_INT 30
7798: PUSH
7799: LD_INT 31
7801: PUSH
7802: LD_INT 32
7804: PUSH
7805: LD_INT 34
7807: PUSH
7808: LD_INT 36
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 101
7846: PUSH
7847: LD_INT 102
7849: PUSH
7850: LD_INT 103
7852: PUSH
7853: LD_INT 104
7855: PUSH
7856: LD_INT 105
7858: PUSH
7859: LD_INT 106
7861: PUSH
7862: LD_INT 107
7864: PUSH
7865: LD_INT 108
7867: PUSH
7868: LD_INT 109
7870: PUSH
7871: LD_INT 110
7873: PUSH
7874: LD_INT 111
7876: PUSH
7877: LD_INT 112
7879: PUSH
7880: LD_INT 114
7882: PUSH
7883: LD_INT 116
7885: PUSH
7886: LD_INT 117
7888: PUSH
7889: LD_INT 118
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: ST_TO_ADDR
7914: GO 9597
7916: LD_INT 12
7918: DOUBLE
7919: EQUAL
7920: IFTRUE 7924
7922: GO 8144
7924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 2
7935: PUSH
7936: LD_INT 3
7938: PUSH
7939: LD_INT 4
7941: PUSH
7942: LD_INT 5
7944: PUSH
7945: LD_INT 6
7947: PUSH
7948: LD_INT 7
7950: PUSH
7951: LD_INT 8
7953: PUSH
7954: LD_INT 9
7956: PUSH
7957: LD_INT 10
7959: PUSH
7960: LD_INT 11
7962: PUSH
7963: LD_INT 12
7965: PUSH
7966: LD_INT 13
7968: PUSH
7969: LD_INT 14
7971: PUSH
7972: LD_INT 15
7974: PUSH
7975: LD_INT 16
7977: PUSH
7978: LD_INT 17
7980: PUSH
7981: LD_INT 18
7983: PUSH
7984: LD_INT 19
7986: PUSH
7987: LD_INT 20
7989: PUSH
7990: LD_INT 21
7992: PUSH
7993: LD_INT 22
7995: PUSH
7996: LD_INT 23
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 26
8007: PUSH
8008: LD_INT 27
8010: PUSH
8011: LD_INT 28
8013: PUSH
8014: LD_INT 30
8016: PUSH
8017: LD_INT 31
8019: PUSH
8020: LD_INT 32
8022: PUSH
8023: LD_INT 33
8025: PUSH
8026: LD_INT 34
8028: PUSH
8029: LD_INT 36
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 101
8070: PUSH
8071: LD_INT 102
8073: PUSH
8074: LD_INT 103
8076: PUSH
8077: LD_INT 104
8079: PUSH
8080: LD_INT 105
8082: PUSH
8083: LD_INT 106
8085: PUSH
8086: LD_INT 107
8088: PUSH
8089: LD_INT 108
8091: PUSH
8092: LD_INT 109
8094: PUSH
8095: LD_INT 110
8097: PUSH
8098: LD_INT 111
8100: PUSH
8101: LD_INT 112
8103: PUSH
8104: LD_INT 113
8106: PUSH
8107: LD_INT 114
8109: PUSH
8110: LD_INT 116
8112: PUSH
8113: LD_INT 117
8115: PUSH
8116: LD_INT 118
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: ST_TO_ADDR
8142: GO 9597
8144: LD_INT 13
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8360
8152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8153: LD_ADDR_VAR 0 2
8157: PUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: LD_INT 8
8175: PUSH
8176: LD_INT 9
8178: PUSH
8179: LD_INT 10
8181: PUSH
8182: LD_INT 11
8184: PUSH
8185: LD_INT 12
8187: PUSH
8188: LD_INT 14
8190: PUSH
8191: LD_INT 15
8193: PUSH
8194: LD_INT 16
8196: PUSH
8197: LD_INT 17
8199: PUSH
8200: LD_INT 18
8202: PUSH
8203: LD_INT 19
8205: PUSH
8206: LD_INT 20
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 22
8214: PUSH
8215: LD_INT 23
8217: PUSH
8218: LD_INT 24
8220: PUSH
8221: LD_INT 25
8223: PUSH
8224: LD_INT 26
8226: PUSH
8227: LD_INT 27
8229: PUSH
8230: LD_INT 28
8232: PUSH
8233: LD_INT 30
8235: PUSH
8236: LD_INT 31
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: LD_INT 33
8244: PUSH
8245: LD_INT 34
8247: PUSH
8248: LD_INT 36
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 101
8286: PUSH
8287: LD_INT 102
8289: PUSH
8290: LD_INT 103
8292: PUSH
8293: LD_INT 104
8295: PUSH
8296: LD_INT 105
8298: PUSH
8299: LD_INT 106
8301: PUSH
8302: LD_INT 107
8304: PUSH
8305: LD_INT 108
8307: PUSH
8308: LD_INT 109
8310: PUSH
8311: LD_INT 110
8313: PUSH
8314: LD_INT 111
8316: PUSH
8317: LD_INT 112
8319: PUSH
8320: LD_INT 113
8322: PUSH
8323: LD_INT 114
8325: PUSH
8326: LD_INT 116
8328: PUSH
8329: LD_INT 117
8331: PUSH
8332: LD_INT 118
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: ST_TO_ADDR
8358: GO 9597
8360: LD_INT 14
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8592
8368: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: LD_INT 2
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 4
8385: PUSH
8386: LD_INT 5
8388: PUSH
8389: LD_INT 6
8391: PUSH
8392: LD_INT 7
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 9
8400: PUSH
8401: LD_INT 10
8403: PUSH
8404: LD_INT 11
8406: PUSH
8407: LD_INT 12
8409: PUSH
8410: LD_INT 13
8412: PUSH
8413: LD_INT 14
8415: PUSH
8416: LD_INT 15
8418: PUSH
8419: LD_INT 16
8421: PUSH
8422: LD_INT 17
8424: PUSH
8425: LD_INT 18
8427: PUSH
8428: LD_INT 19
8430: PUSH
8431: LD_INT 20
8433: PUSH
8434: LD_INT 21
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 23
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 25
8448: PUSH
8449: LD_INT 26
8451: PUSH
8452: LD_INT 27
8454: PUSH
8455: LD_INT 28
8457: PUSH
8458: LD_INT 29
8460: PUSH
8461: LD_INT 30
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 32
8469: PUSH
8470: LD_INT 33
8472: PUSH
8473: LD_INT 34
8475: PUSH
8476: LD_INT 36
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 101
8518: PUSH
8519: LD_INT 102
8521: PUSH
8522: LD_INT 103
8524: PUSH
8525: LD_INT 104
8527: PUSH
8528: LD_INT 105
8530: PUSH
8531: LD_INT 106
8533: PUSH
8534: LD_INT 107
8536: PUSH
8537: LD_INT 108
8539: PUSH
8540: LD_INT 109
8542: PUSH
8543: LD_INT 110
8545: PUSH
8546: LD_INT 111
8548: PUSH
8549: LD_INT 112
8551: PUSH
8552: LD_INT 113
8554: PUSH
8555: LD_INT 114
8557: PUSH
8558: LD_INT 116
8560: PUSH
8561: LD_INT 117
8563: PUSH
8564: LD_INT 118
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: ST_TO_ADDR
8590: GO 9597
8592: LD_INT 15
8594: DOUBLE
8595: EQUAL
8596: IFTRUE 8600
8598: GO 8824
8600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 3
8614: PUSH
8615: LD_INT 4
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 6
8623: PUSH
8624: LD_INT 7
8626: PUSH
8627: LD_INT 8
8629: PUSH
8630: LD_INT 9
8632: PUSH
8633: LD_INT 10
8635: PUSH
8636: LD_INT 11
8638: PUSH
8639: LD_INT 12
8641: PUSH
8642: LD_INT 13
8644: PUSH
8645: LD_INT 14
8647: PUSH
8648: LD_INT 15
8650: PUSH
8651: LD_INT 16
8653: PUSH
8654: LD_INT 17
8656: PUSH
8657: LD_INT 18
8659: PUSH
8660: LD_INT 19
8662: PUSH
8663: LD_INT 20
8665: PUSH
8666: LD_INT 21
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_INT 23
8674: PUSH
8675: LD_INT 24
8677: PUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 26
8683: PUSH
8684: LD_INT 27
8686: PUSH
8687: LD_INT 28
8689: PUSH
8690: LD_INT 29
8692: PUSH
8693: LD_INT 30
8695: PUSH
8696: LD_INT 31
8698: PUSH
8699: LD_INT 32
8701: PUSH
8702: LD_INT 33
8704: PUSH
8705: LD_INT 34
8707: PUSH
8708: LD_INT 36
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 101
8750: PUSH
8751: LD_INT 102
8753: PUSH
8754: LD_INT 103
8756: PUSH
8757: LD_INT 104
8759: PUSH
8760: LD_INT 105
8762: PUSH
8763: LD_INT 106
8765: PUSH
8766: LD_INT 107
8768: PUSH
8769: LD_INT 108
8771: PUSH
8772: LD_INT 109
8774: PUSH
8775: LD_INT 110
8777: PUSH
8778: LD_INT 111
8780: PUSH
8781: LD_INT 112
8783: PUSH
8784: LD_INT 113
8786: PUSH
8787: LD_INT 114
8789: PUSH
8790: LD_INT 116
8792: PUSH
8793: LD_INT 117
8795: PUSH
8796: LD_INT 118
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: ST_TO_ADDR
8822: GO 9597
8824: LD_INT 16
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 8968
8832: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8833: LD_ADDR_VAR 0 2
8837: PUSH
8838: LD_INT 2
8840: PUSH
8841: LD_INT 4
8843: PUSH
8844: LD_INT 5
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 11
8852: PUSH
8853: LD_INT 12
8855: PUSH
8856: LD_INT 15
8858: PUSH
8859: LD_INT 16
8861: PUSH
8862: LD_INT 20
8864: PUSH
8865: LD_INT 21
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_INT 23
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 31
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 34
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 101
8918: PUSH
8919: LD_INT 102
8921: PUSH
8922: LD_INT 103
8924: PUSH
8925: LD_INT 106
8927: PUSH
8928: LD_INT 108
8930: PUSH
8931: LD_INT 112
8933: PUSH
8934: LD_INT 113
8936: PUSH
8937: LD_INT 114
8939: PUSH
8940: LD_INT 116
8942: PUSH
8943: LD_INT 117
8945: PUSH
8946: LD_INT 118
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 9597
8968: LD_INT 17
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9200
8976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: LD_INT 1
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: LD_INT 3
8990: PUSH
8991: LD_INT 4
8993: PUSH
8994: LD_INT 5
8996: PUSH
8997: LD_INT 6
8999: PUSH
9000: LD_INT 7
9002: PUSH
9003: LD_INT 8
9005: PUSH
9006: LD_INT 9
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 11
9014: PUSH
9015: LD_INT 12
9017: PUSH
9018: LD_INT 13
9020: PUSH
9021: LD_INT 14
9023: PUSH
9024: LD_INT 15
9026: PUSH
9027: LD_INT 16
9029: PUSH
9030: LD_INT 17
9032: PUSH
9033: LD_INT 18
9035: PUSH
9036: LD_INT 19
9038: PUSH
9039: LD_INT 20
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_INT 23
9050: PUSH
9051: LD_INT 24
9053: PUSH
9054: LD_INT 25
9056: PUSH
9057: LD_INT 26
9059: PUSH
9060: LD_INT 27
9062: PUSH
9063: LD_INT 28
9065: PUSH
9066: LD_INT 29
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 31
9074: PUSH
9075: LD_INT 32
9077: PUSH
9078: LD_INT 33
9080: PUSH
9081: LD_INT 34
9083: PUSH
9084: LD_INT 36
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 101
9126: PUSH
9127: LD_INT 102
9129: PUSH
9130: LD_INT 103
9132: PUSH
9133: LD_INT 104
9135: PUSH
9136: LD_INT 105
9138: PUSH
9139: LD_INT 106
9141: PUSH
9142: LD_INT 107
9144: PUSH
9145: LD_INT 108
9147: PUSH
9148: LD_INT 109
9150: PUSH
9151: LD_INT 110
9153: PUSH
9154: LD_INT 111
9156: PUSH
9157: LD_INT 112
9159: PUSH
9160: LD_INT 113
9162: PUSH
9163: LD_INT 114
9165: PUSH
9166: LD_INT 116
9168: PUSH
9169: LD_INT 117
9171: PUSH
9172: LD_INT 118
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: ST_TO_ADDR
9198: GO 9597
9200: LD_INT 18
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9356
9208: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9209: LD_ADDR_VAR 0 2
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: LD_INT 7
9225: PUSH
9226: LD_INT 11
9228: PUSH
9229: LD_INT 12
9231: PUSH
9232: LD_INT 15
9234: PUSH
9235: LD_INT 16
9237: PUSH
9238: LD_INT 20
9240: PUSH
9241: LD_INT 21
9243: PUSH
9244: LD_INT 22
9246: PUSH
9247: LD_INT 23
9249: PUSH
9250: LD_INT 25
9252: PUSH
9253: LD_INT 26
9255: PUSH
9256: LD_INT 30
9258: PUSH
9259: LD_INT 31
9261: PUSH
9262: LD_INT 32
9264: PUSH
9265: LD_INT 33
9267: PUSH
9268: LD_INT 34
9270: PUSH
9271: LD_INT 35
9273: PUSH
9274: LD_INT 36
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 101
9302: PUSH
9303: LD_INT 102
9305: PUSH
9306: LD_INT 103
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 108
9314: PUSH
9315: LD_INT 112
9317: PUSH
9318: LD_INT 113
9320: PUSH
9321: LD_INT 114
9323: PUSH
9324: LD_INT 115
9326: PUSH
9327: LD_INT 116
9329: PUSH
9330: LD_INT 117
9332: PUSH
9333: LD_INT 118
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
9354: GO 9597
9356: LD_INT 19
9358: DOUBLE
9359: EQUAL
9360: IFTRUE 9364
9362: GO 9596
9364: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 3
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: LD_INT 6
9387: PUSH
9388: LD_INT 7
9390: PUSH
9391: LD_INT 8
9393: PUSH
9394: LD_INT 9
9396: PUSH
9397: LD_INT 10
9399: PUSH
9400: LD_INT 11
9402: PUSH
9403: LD_INT 12
9405: PUSH
9406: LD_INT 13
9408: PUSH
9409: LD_INT 14
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 17
9420: PUSH
9421: LD_INT 18
9423: PUSH
9424: LD_INT 19
9426: PUSH
9427: LD_INT 20
9429: PUSH
9430: LD_INT 21
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_INT 23
9438: PUSH
9439: LD_INT 24
9441: PUSH
9442: LD_INT 25
9444: PUSH
9445: LD_INT 26
9447: PUSH
9448: LD_INT 27
9450: PUSH
9451: LD_INT 28
9453: PUSH
9454: LD_INT 29
9456: PUSH
9457: LD_INT 30
9459: PUSH
9460: LD_INT 31
9462: PUSH
9463: LD_INT 32
9465: PUSH
9466: LD_INT 33
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 35
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 101
9518: PUSH
9519: LD_INT 102
9521: PUSH
9522: LD_INT 103
9524: PUSH
9525: LD_INT 104
9527: PUSH
9528: LD_INT 105
9530: PUSH
9531: LD_INT 106
9533: PUSH
9534: LD_INT 107
9536: PUSH
9537: LD_INT 108
9539: PUSH
9540: LD_INT 109
9542: PUSH
9543: LD_INT 110
9545: PUSH
9546: LD_INT 111
9548: PUSH
9549: LD_INT 112
9551: PUSH
9552: LD_INT 113
9554: PUSH
9555: LD_INT 114
9557: PUSH
9558: LD_INT 115
9560: PUSH
9561: LD_INT 116
9563: PUSH
9564: LD_INT 117
9566: PUSH
9567: LD_INT 118
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: ST_TO_ADDR
9594: GO 9597
9596: POP
// end else
9597: GO 9828
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: LD_INT 1
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: LD_INT 4
9615: PUSH
9616: LD_INT 5
9618: PUSH
9619: LD_INT 6
9621: PUSH
9622: LD_INT 7
9624: PUSH
9625: LD_INT 8
9627: PUSH
9628: LD_INT 9
9630: PUSH
9631: LD_INT 10
9633: PUSH
9634: LD_INT 11
9636: PUSH
9637: LD_INT 12
9639: PUSH
9640: LD_INT 13
9642: PUSH
9643: LD_INT 14
9645: PUSH
9646: LD_INT 15
9648: PUSH
9649: LD_INT 16
9651: PUSH
9652: LD_INT 17
9654: PUSH
9655: LD_INT 18
9657: PUSH
9658: LD_INT 19
9660: PUSH
9661: LD_INT 20
9663: PUSH
9664: LD_INT 21
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_INT 23
9672: PUSH
9673: LD_INT 24
9675: PUSH
9676: LD_INT 25
9678: PUSH
9679: LD_INT 26
9681: PUSH
9682: LD_INT 27
9684: PUSH
9685: LD_INT 28
9687: PUSH
9688: LD_INT 29
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 31
9696: PUSH
9697: LD_INT 32
9699: PUSH
9700: LD_INT 33
9702: PUSH
9703: LD_INT 34
9705: PUSH
9706: LD_INT 35
9708: PUSH
9709: LD_INT 36
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 101
9752: PUSH
9753: LD_INT 102
9755: PUSH
9756: LD_INT 103
9758: PUSH
9759: LD_INT 104
9761: PUSH
9762: LD_INT 105
9764: PUSH
9765: LD_INT 106
9767: PUSH
9768: LD_INT 107
9770: PUSH
9771: LD_INT 108
9773: PUSH
9774: LD_INT 109
9776: PUSH
9777: LD_INT 110
9779: PUSH
9780: LD_INT 111
9782: PUSH
9783: LD_INT 112
9785: PUSH
9786: LD_INT 113
9788: PUSH
9789: LD_INT 114
9791: PUSH
9792: LD_INT 115
9794: PUSH
9795: LD_INT 116
9797: PUSH
9798: LD_INT 117
9800: PUSH
9801: LD_INT 118
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: ST_TO_ADDR
// if result then
9828: LD_VAR 0 2
9832: IFFALSE 10618
// begin normal :=  ;
9834: LD_ADDR_VAR 0 5
9838: PUSH
9839: LD_STRING 
9841: ST_TO_ADDR
// hardcore :=  ;
9842: LD_ADDR_VAR 0 6
9846: PUSH
9847: LD_STRING 
9849: ST_TO_ADDR
// active :=  ;
9850: LD_ADDR_VAR 0 7
9854: PUSH
9855: LD_STRING 
9857: ST_TO_ADDR
// for i = 1 to normalCounter do
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: DOUBLE
9864: LD_INT 1
9866: DEC
9867: ST_TO_ADDR
9868: LD_EXP 25
9872: PUSH
9873: FOR_TO
9874: IFFALSE 9975
// begin tmp := 0 ;
9876: LD_ADDR_VAR 0 3
9880: PUSH
9881: LD_STRING 0
9883: ST_TO_ADDR
// if result [ 1 ] then
9884: LD_VAR 0 2
9888: PUSH
9889: LD_INT 1
9891: ARRAY
9892: IFFALSE 9957
// if result [ 1 ] [ 1 ] = i then
9894: LD_VAR 0 2
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PUSH
9907: LD_VAR 0 8
9911: EQUAL
9912: IFFALSE 9957
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9914: LD_ADDR_VAR 0 2
9918: PUSH
9919: LD_VAR 0 2
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: LD_VAR 0 2
9931: PUSH
9932: LD_INT 1
9934: ARRAY
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 3
9943: PPUSH
9944: CALL_OW 1
9948: ST_TO_ADDR
// tmp := 1 ;
9949: LD_ADDR_VAR 0 3
9953: PUSH
9954: LD_STRING 1
9956: ST_TO_ADDR
// end ; normal := normal & tmp ;
9957: LD_ADDR_VAR 0 5
9961: PUSH
9962: LD_VAR 0 5
9966: PUSH
9967: LD_VAR 0 3
9971: STR
9972: ST_TO_ADDR
// end ;
9973: GO 9873
9975: POP
9976: POP
// for i = 1 to hardcoreCounter do
9977: LD_ADDR_VAR 0 8
9981: PUSH
9982: DOUBLE
9983: LD_INT 1
9985: DEC
9986: ST_TO_ADDR
9987: LD_EXP 26
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10098
// begin tmp := 0 ;
9995: LD_ADDR_VAR 0 3
9999: PUSH
10000: LD_STRING 0
10002: ST_TO_ADDR
// if result [ 2 ] then
10003: LD_VAR 0 2
10007: PUSH
10008: LD_INT 2
10010: ARRAY
10011: IFFALSE 10080
// if result [ 2 ] [ 1 ] = 100 + i then
10013: LD_VAR 0 2
10017: PUSH
10018: LD_INT 2
10020: ARRAY
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: PUSH
10026: LD_INT 100
10028: PUSH
10029: LD_VAR 0 8
10033: PLUS
10034: EQUAL
10035: IFFALSE 10080
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: LD_VAR 0 2
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: LD_VAR 0 2
10054: PUSH
10055: LD_INT 2
10057: ARRAY
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 3
10066: PPUSH
10067: CALL_OW 1
10071: ST_TO_ADDR
// tmp := 1 ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_STRING 1
10079: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10080: LD_ADDR_VAR 0 6
10084: PUSH
10085: LD_VAR 0 6
10089: PUSH
10090: LD_VAR 0 3
10094: STR
10095: ST_TO_ADDR
// end ;
10096: GO 9992
10098: POP
10099: POP
// if isGameLoad then
10100: LD_VAR 0 1
10104: IFFALSE 10579
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_EXP 29
10115: PUSH
10116: LD_EXP 28
10120: PUSH
10121: LD_EXP 30
10125: PUSH
10126: LD_EXP 27
10130: PUSH
10131: LD_EXP 31
10135: PUSH
10136: LD_EXP 32
10140: PUSH
10141: LD_EXP 33
10145: PUSH
10146: LD_EXP 34
10150: PUSH
10151: LD_EXP 35
10155: PUSH
10156: LD_EXP 36
10160: PUSH
10161: LD_EXP 37
10165: PUSH
10166: LD_EXP 38
10170: PUSH
10171: LD_EXP 39
10175: PUSH
10176: LD_EXP 40
10180: PUSH
10181: LD_EXP 48
10185: PUSH
10186: LD_EXP 49
10190: PUSH
10191: LD_EXP 50
10195: PUSH
10196: LD_EXP 51
10200: PUSH
10201: LD_EXP 53
10205: PUSH
10206: LD_EXP 54
10210: PUSH
10211: LD_EXP 55
10215: PUSH
10216: LD_EXP 58
10220: PUSH
10221: LD_EXP 60
10225: PUSH
10226: LD_EXP 61
10230: PUSH
10231: LD_EXP 62
10235: PUSH
10236: LD_EXP 64
10240: PUSH
10241: LD_EXP 65
10245: PUSH
10246: LD_EXP 68
10250: PUSH
10251: LD_EXP 69
10255: PUSH
10256: LD_EXP 70
10260: PUSH
10261: LD_EXP 71
10265: PUSH
10266: LD_EXP 72
10270: PUSH
10271: LD_EXP 73
10275: PUSH
10276: LD_EXP 74
10280: PUSH
10281: LD_EXP 75
10285: PUSH
10286: LD_EXP 76
10290: PUSH
10291: LD_EXP 41
10295: PUSH
10296: LD_EXP 42
10300: PUSH
10301: LD_EXP 45
10305: PUSH
10306: LD_EXP 46
10310: PUSH
10311: LD_EXP 47
10315: PUSH
10316: LD_EXP 43
10320: PUSH
10321: LD_EXP 44
10325: PUSH
10326: LD_EXP 52
10330: PUSH
10331: LD_EXP 56
10335: PUSH
10336: LD_EXP 57
10340: PUSH
10341: LD_EXP 59
10345: PUSH
10346: LD_EXP 63
10350: PUSH
10351: LD_EXP 66
10355: PUSH
10356: LD_EXP 67
10360: PUSH
10361: LD_EXP 77
10365: PUSH
10366: LD_EXP 78
10370: PUSH
10371: LD_EXP 79
10375: PUSH
10376: LD_EXP 80
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: ST_TO_ADDR
// tmp :=  ;
10437: LD_ADDR_VAR 0 3
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// for i = 1 to normalCounter do
10445: LD_ADDR_VAR 0 8
10449: PUSH
10450: DOUBLE
10451: LD_INT 1
10453: DEC
10454: ST_TO_ADDR
10455: LD_EXP 25
10459: PUSH
10460: FOR_TO
10461: IFFALSE 10497
// begin if flags [ i ] then
10463: LD_VAR 0 4
10467: PUSH
10468: LD_VAR 0 8
10472: ARRAY
10473: IFFALSE 10495
// tmp := tmp & i & ; ;
10475: LD_ADDR_VAR 0 3
10479: PUSH
10480: LD_VAR 0 3
10484: PUSH
10485: LD_VAR 0 8
10489: STR
10490: PUSH
10491: LD_STRING ;
10493: STR
10494: ST_TO_ADDR
// end ;
10495: GO 10460
10497: POP
10498: POP
// for i = 1 to hardcoreCounter do
10499: LD_ADDR_VAR 0 8
10503: PUSH
10504: DOUBLE
10505: LD_INT 1
10507: DEC
10508: ST_TO_ADDR
10509: LD_EXP 26
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10561
// begin if flags [ normalCounter + i ] then
10517: LD_VAR 0 4
10521: PUSH
10522: LD_EXP 25
10526: PUSH
10527: LD_VAR 0 8
10531: PLUS
10532: ARRAY
10533: IFFALSE 10559
// tmp := tmp & ( 100 + i ) & ; ;
10535: LD_ADDR_VAR 0 3
10539: PUSH
10540: LD_VAR 0 3
10544: PUSH
10545: LD_INT 100
10547: PUSH
10548: LD_VAR 0 8
10552: PLUS
10553: STR
10554: PUSH
10555: LD_STRING ;
10557: STR
10558: ST_TO_ADDR
// end ;
10559: GO 10514
10561: POP
10562: POP
// if tmp then
10563: LD_VAR 0 3
10567: IFFALSE 10579
// active := tmp ;
10569: LD_ADDR_VAR 0 7
10573: PUSH
10574: LD_VAR 0 3
10578: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10579: LD_STRING getStreamItemsFromMission("
10581: PUSH
10582: LD_VAR 0 5
10586: STR
10587: PUSH
10588: LD_STRING ","
10590: STR
10591: PUSH
10592: LD_VAR 0 6
10596: STR
10597: PUSH
10598: LD_STRING ","
10600: STR
10601: PUSH
10602: LD_VAR 0 7
10606: STR
10607: PUSH
10608: LD_STRING ")
10610: STR
10611: PPUSH
10612: CALL_OW 559
// end else
10616: GO 10625
// ToLua ( getStreamItemsFromMission("","","") ) ;
10618: LD_STRING getStreamItemsFromMission("","","")
10620: PPUSH
10621: CALL_OW 559
// end ;
10625: LD_VAR 0 2
10629: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10630: LD_EXP 24
10634: PUSH
10635: LD_EXP 29
10639: AND
10640: IFFALSE 10764
10642: GO 10644
10644: DISABLE
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
// begin enable ;
10649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10650: LD_ADDR_VAR 0 2
10654: PUSH
10655: LD_INT 22
10657: PUSH
10658: LD_OWVAR 2
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 34
10672: PUSH
10673: LD_INT 7
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 34
10682: PUSH
10683: LD_INT 45
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PUSH
10690: LD_INT 34
10692: PUSH
10693: LD_INT 28
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 34
10702: PUSH
10703: LD_INT 47
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: ST_TO_ADDR
// if not tmp then
10726: LD_VAR 0 2
10730: NOT
10731: IFFALSE 10735
// exit ;
10733: GO 10764
// for i in tmp do
10735: LD_ADDR_VAR 0 1
10739: PUSH
10740: LD_VAR 0 2
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10762
// begin SetLives ( i , 0 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 0
10755: PPUSH
10756: CALL_OW 234
// end ;
10760: GO 10745
10762: POP
10763: POP
// end ;
10764: PPOPN 2
10766: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10767: LD_EXP 24
10771: PUSH
10772: LD_EXP 30
10776: AND
10777: IFFALSE 10861
10779: GO 10781
10781: DISABLE
10782: LD_INT 0
10784: PPUSH
10785: PPUSH
// begin enable ;
10786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_OWVAR 2
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 32
10806: PUSH
10807: LD_INT 3
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 69
10822: ST_TO_ADDR
// if not tmp then
10823: LD_VAR 0 2
10827: NOT
10828: IFFALSE 10832
// exit ;
10830: GO 10861
// for i in tmp do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_VAR 0 2
10841: PUSH
10842: FOR_IN
10843: IFFALSE 10859
// begin SetLives ( i , 0 ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_INT 0
10852: PPUSH
10853: CALL_OW 234
// end ;
10857: GO 10842
10859: POP
10860: POP
// end ;
10861: PPOPN 2
10863: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10864: LD_EXP 24
10868: PUSH
10869: LD_EXP 27
10873: AND
10874: IFFALSE 10967
10876: GO 10878
10878: DISABLE
10879: LD_INT 0
10881: PPUSH
// begin enable ;
10882: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10883: LD_ADDR_VAR 0 1
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_OWVAR 2
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 5
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 9
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 8
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PPUSH
10943: CALL_OW 69
10947: PUSH
10948: FOR_IN
10949: IFFALSE 10965
// begin SetClass ( i , 1 ) ;
10951: LD_VAR 0 1
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 336
// end ;
10963: GO 10948
10965: POP
10966: POP
// end ;
10967: PPOPN 1
10969: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10970: LD_EXP 24
10974: PUSH
10975: LD_EXP 28
10979: AND
10980: PUSH
10981: LD_OWVAR 65
10985: PUSH
10986: LD_INT 7
10988: LESS
10989: AND
10990: IFFALSE 11004
10992: GO 10994
10994: DISABLE
// begin enable ;
10995: ENABLE
// game_speed := 7 ;
10996: LD_ADDR_OWVAR 65
11000: PUSH
11001: LD_INT 7
11003: ST_TO_ADDR
// end ;
11004: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11005: LD_EXP 24
11009: PUSH
11010: LD_EXP 31
11014: AND
11015: IFFALSE 11217
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
11023: PPUSH
11024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11025: LD_ADDR_VAR 0 3
11029: PUSH
11030: LD_INT 81
11032: PUSH
11033: LD_OWVAR 2
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 69
11060: ST_TO_ADDR
// if not tmp then
11061: LD_VAR 0 3
11065: NOT
11066: IFFALSE 11070
// exit ;
11068: GO 11217
// if tmp > 5 then
11070: LD_VAR 0 3
11074: PUSH
11075: LD_INT 5
11077: GREATER
11078: IFFALSE 11090
// k := 5 else
11080: LD_ADDR_VAR 0 2
11084: PUSH
11085: LD_INT 5
11087: ST_TO_ADDR
11088: GO 11100
// k := tmp ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_VAR 0 3
11099: ST_TO_ADDR
// for i := 1 to k do
11100: LD_ADDR_VAR 0 1
11104: PUSH
11105: DOUBLE
11106: LD_INT 1
11108: DEC
11109: ST_TO_ADDR
11110: LD_VAR 0 2
11114: PUSH
11115: FOR_TO
11116: IFFALSE 11215
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11118: LD_VAR 0 3
11122: PUSH
11123: LD_VAR 0 1
11127: ARRAY
11128: PPUSH
11129: LD_VAR 0 1
11133: PUSH
11134: LD_INT 4
11136: MOD
11137: PUSH
11138: LD_INT 1
11140: PLUS
11141: PPUSH
11142: CALL_OW 259
11146: PUSH
11147: LD_INT 10
11149: LESS
11150: IFFALSE 11213
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11152: LD_VAR 0 3
11156: PUSH
11157: LD_VAR 0 1
11161: ARRAY
11162: PPUSH
11163: LD_VAR 0 1
11167: PUSH
11168: LD_INT 4
11170: MOD
11171: PUSH
11172: LD_INT 1
11174: PLUS
11175: PPUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 1
11185: ARRAY
11186: PPUSH
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 4
11194: MOD
11195: PUSH
11196: LD_INT 1
11198: PLUS
11199: PPUSH
11200: CALL_OW 259
11204: PUSH
11205: LD_INT 1
11207: PLUS
11208: PPUSH
11209: CALL_OW 237
11213: GO 11115
11215: POP
11216: POP
// end ;
11217: PPOPN 3
11219: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11220: LD_EXP 24
11224: PUSH
11225: LD_EXP 32
11229: AND
11230: IFFALSE 11250
11232: GO 11234
11234: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11235: LD_INT 4
11237: PPUSH
11238: LD_OWVAR 2
11242: PPUSH
11243: LD_INT 0
11245: PPUSH
11246: CALL_OW 324
11250: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11251: LD_EXP 24
11255: PUSH
11256: LD_EXP 61
11260: AND
11261: IFFALSE 11281
11263: GO 11265
11265: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11266: LD_INT 19
11268: PPUSH
11269: LD_OWVAR 2
11273: PPUSH
11274: LD_INT 0
11276: PPUSH
11277: CALL_OW 324
11281: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11282: LD_EXP 24
11286: PUSH
11287: LD_EXP 33
11291: AND
11292: IFFALSE 11394
11294: GO 11296
11296: DISABLE
11297: LD_INT 0
11299: PPUSH
11300: PPUSH
// begin enable ;
11301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11302: LD_ADDR_VAR 0 2
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_OWVAR 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: LD_INT 34
11324: PUSH
11325: LD_INT 11
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 34
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// if not tmp then
11356: LD_VAR 0 2
11360: NOT
11361: IFFALSE 11365
// exit ;
11363: GO 11394
// for i in tmp do
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_VAR 0 2
11374: PUSH
11375: FOR_IN
11376: IFFALSE 11392
// begin SetLives ( i , 0 ) ;
11378: LD_VAR 0 1
11382: PPUSH
11383: LD_INT 0
11385: PPUSH
11386: CALL_OW 234
// end ;
11390: GO 11375
11392: POP
11393: POP
// end ;
11394: PPOPN 2
11396: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11397: LD_EXP 24
11401: PUSH
11402: LD_EXP 34
11406: AND
11407: IFFALSE 11427
11409: GO 11411
11411: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11412: LD_INT 32
11414: PPUSH
11415: LD_OWVAR 2
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 324
11427: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11428: LD_EXP 24
11432: PUSH
11433: LD_EXP 35
11437: AND
11438: IFFALSE 11619
11440: GO 11442
11442: DISABLE
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11448: LD_ADDR_VAR 0 2
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_OWVAR 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 33
11467: PUSH
11468: LD_INT 3
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 69
11483: ST_TO_ADDR
// if not tmp then
11484: LD_VAR 0 2
11488: NOT
11489: IFFALSE 11493
// exit ;
11491: GO 11619
// side := 0 ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_INT 0
11500: ST_TO_ADDR
// for i := 1 to 8 do
11501: LD_ADDR_VAR 0 1
11505: PUSH
11506: DOUBLE
11507: LD_INT 1
11509: DEC
11510: ST_TO_ADDR
11511: LD_INT 8
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11563
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11517: LD_OWVAR 2
11521: PUSH
11522: LD_VAR 0 1
11526: NONEQUAL
11527: PUSH
11528: LD_OWVAR 2
11532: PPUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 81
11542: PUSH
11543: LD_INT 2
11545: EQUAL
11546: AND
11547: IFFALSE 11561
// begin side := i ;
11549: LD_ADDR_VAR 0 3
11553: PUSH
11554: LD_VAR 0 1
11558: ST_TO_ADDR
// break ;
11559: GO 11563
// end ;
11561: GO 11514
11563: POP
11564: POP
// if not side then
11565: LD_VAR 0 3
11569: NOT
11570: IFFALSE 11574
// exit ;
11572: GO 11619
// for i := 1 to tmp do
11574: LD_ADDR_VAR 0 1
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 2
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11617
// if Prob ( 60 ) then
11592: LD_INT 60
11594: PPUSH
11595: CALL_OW 13
11599: IFFALSE 11615
// SetSide ( i , side ) ;
11601: LD_VAR 0 1
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: CALL_OW 235
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 3
11621: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11622: LD_EXP 24
11626: PUSH
11627: LD_EXP 37
11631: AND
11632: IFFALSE 11751
11634: GO 11636
11636: DISABLE
11637: LD_INT 0
11639: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11640: LD_ADDR_VAR 0 1
11644: PUSH
11645: LD_INT 22
11647: PUSH
11648: LD_OWVAR 2
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 21
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 23
11672: PUSH
11673: LD_INT 0
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 69
11693: PUSH
11694: FOR_IN
11695: IFFALSE 11749
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11697: LD_VAR 0 1
11701: PPUSH
11702: CALL_OW 257
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: IN
11725: IFFALSE 11747
// SetClass ( un , rand ( 1 , 4 ) ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: LD_INT 4
11737: PPUSH
11738: CALL_OW 12
11742: PPUSH
11743: CALL_OW 336
11747: GO 11694
11749: POP
11750: POP
// end ;
11751: PPOPN 1
11753: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11754: LD_EXP 24
11758: PUSH
11759: LD_EXP 36
11763: AND
11764: IFFALSE 11843
11766: GO 11768
11768: DISABLE
11769: LD_INT 0
11771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_INT 22
11779: PUSH
11780: LD_OWVAR 2
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 21
11791: PUSH
11792: LD_INT 3
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PPUSH
11803: CALL_OW 69
11807: ST_TO_ADDR
// if not tmp then
11808: LD_VAR 0 1
11812: NOT
11813: IFFALSE 11817
// exit ;
11815: GO 11843
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11817: LD_VAR 0 1
11821: PUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_VAR 0 1
11829: PPUSH
11830: CALL_OW 12
11834: ARRAY
11835: PPUSH
11836: LD_INT 100
11838: PPUSH
11839: CALL_OW 234
// end ;
11843: PPOPN 1
11845: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11846: LD_EXP 24
11850: PUSH
11851: LD_EXP 38
11855: AND
11856: IFFALSE 11954
11858: GO 11860
11860: DISABLE
11861: LD_INT 0
11863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_INT 22
11871: PUSH
11872: LD_OWVAR 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: ST_TO_ADDR
// if not tmp then
11900: LD_VAR 0 1
11904: NOT
11905: IFFALSE 11909
// exit ;
11907: GO 11954
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11909: LD_VAR 0 1
11913: PUSH
11914: LD_INT 1
11916: PPUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 12
11926: ARRAY
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: LD_INT 4
11933: PPUSH
11934: CALL_OW 12
11938: PPUSH
11939: LD_INT 3000
11941: PPUSH
11942: LD_INT 9000
11944: PPUSH
11945: CALL_OW 12
11949: PPUSH
11950: CALL_OW 492
// end ;
11954: PPOPN 1
11956: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11957: LD_EXP 24
11961: PUSH
11962: LD_EXP 39
11966: AND
11967: IFFALSE 11987
11969: GO 11971
11971: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11972: LD_INT 1
11974: PPUSH
11975: LD_OWVAR 2
11979: PPUSH
11980: LD_INT 0
11982: PPUSH
11983: CALL_OW 324
11987: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11988: LD_EXP 24
11992: PUSH
11993: LD_EXP 40
11997: AND
11998: IFFALSE 12081
12000: GO 12002
12002: DISABLE
12003: LD_INT 0
12005: PPUSH
12006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12007: LD_ADDR_VAR 0 2
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_OWVAR 2
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 21
12026: PUSH
12027: LD_INT 3
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 2
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12081
// for i in tmp do
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_VAR 0 2
12061: PUSH
12062: FOR_IN
12063: IFFALSE 12079
// SetBLevel ( i , 10 ) ;
12065: LD_VAR 0 1
12069: PPUSH
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 241
12077: GO 12062
12079: POP
12080: POP
// end ;
12081: PPOPN 2
12083: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12084: LD_EXP 24
12088: PUSH
12089: LD_EXP 41
12093: AND
12094: IFFALSE 12205
12096: GO 12098
12098: DISABLE
12099: LD_INT 0
12101: PPUSH
12102: PPUSH
12103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_INT 22
12111: PUSH
12112: LD_OWVAR 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 25
12123: PUSH
12124: LD_INT 1
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 3
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12205
// un := tmp [ rand ( 1 , tmp ) ] ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_VAR 0 3
12158: PUSH
12159: LD_INT 1
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: CALL_OW 12
12171: ARRAY
12172: ST_TO_ADDR
// if Crawls ( un ) then
12173: LD_VAR 0 2
12177: PPUSH
12178: CALL_OW 318
12182: IFFALSE 12193
// ComWalk ( un ) ;
12184: LD_VAR 0 2
12188: PPUSH
12189: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12193: LD_VAR 0 2
12197: PPUSH
12198: LD_INT 5
12200: PPUSH
12201: CALL_OW 336
// end ;
12205: PPOPN 3
12207: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12208: LD_EXP 24
12212: PUSH
12213: LD_EXP 42
12217: AND
12218: PUSH
12219: LD_OWVAR 67
12223: PUSH
12224: LD_INT 4
12226: LESS
12227: AND
12228: IFFALSE 12247
12230: GO 12232
12232: DISABLE
// begin Difficulty := Difficulty + 1 ;
12233: LD_ADDR_OWVAR 67
12237: PUSH
12238: LD_OWVAR 67
12242: PUSH
12243: LD_INT 1
12245: PLUS
12246: ST_TO_ADDR
// end ;
12247: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12248: LD_EXP 24
12252: PUSH
12253: LD_EXP 43
12257: AND
12258: IFFALSE 12361
12260: GO 12262
12262: DISABLE
12263: LD_INT 0
12265: PPUSH
// begin for i := 1 to 5 do
12266: LD_ADDR_VAR 0 1
12270: PUSH
12271: DOUBLE
12272: LD_INT 1
12274: DEC
12275: ST_TO_ADDR
12276: LD_INT 5
12278: PUSH
12279: FOR_TO
12280: IFFALSE 12359
// begin uc_nation := nation_nature ;
12282: LD_ADDR_OWVAR 21
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// uc_side := 0 ;
12290: LD_ADDR_OWVAR 20
12294: PUSH
12295: LD_INT 0
12297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12298: LD_ADDR_OWVAR 29
12302: PUSH
12303: LD_INT 12
12305: PUSH
12306: LD_INT 12
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: ST_TO_ADDR
// hc_agressivity := 20 ;
12313: LD_ADDR_OWVAR 35
12317: PUSH
12318: LD_INT 20
12320: ST_TO_ADDR
// hc_class := class_tiger ;
12321: LD_ADDR_OWVAR 28
12325: PUSH
12326: LD_INT 14
12328: ST_TO_ADDR
// hc_gallery :=  ;
12329: LD_ADDR_OWVAR 33
12333: PUSH
12334: LD_STRING 
12336: ST_TO_ADDR
// hc_name :=  ;
12337: LD_ADDR_OWVAR 26
12341: PUSH
12342: LD_STRING 
12344: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12345: CALL_OW 44
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 51
// end ;
12357: GO 12279
12359: POP
12360: POP
// end ;
12361: PPOPN 1
12363: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12364: LD_EXP 24
12368: PUSH
12369: LD_EXP 44
12373: AND
12374: IFFALSE 12383
12376: GO 12378
12378: DISABLE
// StreamSibBomb ;
12379: CALL 12384 0 0
12383: END
// export function StreamSibBomb ; var i , x , y ; begin
12384: LD_INT 0
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
// result := false ;
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// for i := 1 to 16 do
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: DOUBLE
12404: LD_INT 1
12406: DEC
12407: ST_TO_ADDR
12408: LD_INT 16
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12611
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12414: LD_ADDR_VAR 0 3
12418: PUSH
12419: LD_INT 10
12421: PUSH
12422: LD_INT 20
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 40
12430: PUSH
12431: LD_INT 50
12433: PUSH
12434: LD_INT 60
12436: PUSH
12437: LD_INT 70
12439: PUSH
12440: LD_INT 80
12442: PUSH
12443: LD_INT 90
12445: PUSH
12446: LD_INT 100
12448: PUSH
12449: LD_INT 110
12451: PUSH
12452: LD_INT 120
12454: PUSH
12455: LD_INT 130
12457: PUSH
12458: LD_INT 140
12460: PUSH
12461: LD_INT 150
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 15
12486: PPUSH
12487: CALL_OW 12
12491: ARRAY
12492: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: LD_INT 10
12500: PUSH
12501: LD_INT 20
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: LD_INT 40
12509: PUSH
12510: LD_INT 50
12512: PUSH
12513: LD_INT 60
12515: PUSH
12516: LD_INT 70
12518: PUSH
12519: LD_INT 80
12521: PUSH
12522: LD_INT 90
12524: PUSH
12525: LD_INT 100
12527: PUSH
12528: LD_INT 110
12530: PUSH
12531: LD_INT 120
12533: PUSH
12534: LD_INT 130
12536: PUSH
12537: LD_INT 140
12539: PUSH
12540: LD_INT 150
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 1
12562: PPUSH
12563: LD_INT 15
12565: PPUSH
12566: CALL_OW 12
12570: ARRAY
12571: ST_TO_ADDR
// if ValidHex ( x , y ) then
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_VAR 0 4
12581: PPUSH
12582: CALL_OW 488
12586: IFFALSE 12609
// begin result := [ x , y ] ;
12588: LD_ADDR_VAR 0 1
12592: PUSH
12593: LD_VAR 0 3
12597: PUSH
12598: LD_VAR 0 4
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: ST_TO_ADDR
// break ;
12607: GO 12611
// end ; end ;
12609: GO 12411
12611: POP
12612: POP
// if result then
12613: LD_VAR 0 1
12617: IFFALSE 12677
// begin ToLua ( playSibBomb() ) ;
12619: LD_STRING playSibBomb()
12621: PPUSH
12622: CALL_OW 559
// wait ( 0 0$14 ) ;
12626: LD_INT 490
12628: PPUSH
12629: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: LD_VAR 0 1
12646: PUSH
12647: LD_INT 2
12649: ARRAY
12650: PPUSH
12651: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12655: LD_VAR 0 1
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_INT 2
12671: ARRAY
12672: PPUSH
12673: CALL_OW 429
// end ; end ;
12677: LD_VAR 0 1
12681: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12682: LD_EXP 24
12686: PUSH
12687: LD_EXP 46
12691: AND
12692: IFFALSE 12704
12694: GO 12696
12696: DISABLE
// YouLost (  ) ;
12697: LD_STRING 
12699: PPUSH
12700: CALL_OW 104
12704: END
// every 0 0$1 trigger StreamModeActive and sFog do
12705: LD_EXP 24
12709: PUSH
12710: LD_EXP 45
12714: AND
12715: IFFALSE 12729
12717: GO 12719
12719: DISABLE
// FogOff ( your_side ) ;
12720: LD_OWVAR 2
12724: PPUSH
12725: CALL_OW 344
12729: END
// every 0 0$1 trigger StreamModeActive and sSun do
12730: LD_EXP 24
12734: PUSH
12735: LD_EXP 47
12739: AND
12740: IFFALSE 12768
12742: GO 12744
12744: DISABLE
// begin solar_recharge_percent := 0 ;
12745: LD_ADDR_OWVAR 79
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12753: LD_INT 10500
12755: PPUSH
12756: CALL_OW 67
// solar_recharge_percent := 100 ;
12760: LD_ADDR_OWVAR 79
12764: PUSH
12765: LD_INT 100
12767: ST_TO_ADDR
// end ;
12768: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12769: LD_EXP 24
12773: PUSH
12774: LD_EXP 48
12778: AND
12779: IFFALSE 13018
12781: GO 12783
12783: DISABLE
12784: LD_INT 0
12786: PPUSH
12787: PPUSH
12788: PPUSH
// begin tmp := [ ] ;
12789: LD_ADDR_VAR 0 3
12793: PUSH
12794: EMPTY
12795: ST_TO_ADDR
// for i := 1 to 6 do
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: DOUBLE
12802: LD_INT 1
12804: DEC
12805: ST_TO_ADDR
12806: LD_INT 6
12808: PUSH
12809: FOR_TO
12810: IFFALSE 12915
// begin uc_nation := nation_nature ;
12812: LD_ADDR_OWVAR 21
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// uc_side := 0 ;
12820: LD_ADDR_OWVAR 20
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12828: LD_ADDR_OWVAR 29
12832: PUSH
12833: LD_INT 12
12835: PUSH
12836: LD_INT 12
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: ST_TO_ADDR
// hc_agressivity := 20 ;
12843: LD_ADDR_OWVAR 35
12847: PUSH
12848: LD_INT 20
12850: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12851: LD_ADDR_OWVAR 28
12855: PUSH
12856: LD_INT 17
12858: ST_TO_ADDR
// hc_gallery :=  ;
12859: LD_ADDR_OWVAR 33
12863: PUSH
12864: LD_STRING 
12866: ST_TO_ADDR
// hc_name :=  ;
12867: LD_ADDR_OWVAR 26
12871: PUSH
12872: LD_STRING 
12874: ST_TO_ADDR
// un := CreateHuman ;
12875: LD_ADDR_VAR 0 2
12879: PUSH
12880: CALL_OW 44
12884: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12885: LD_VAR 0 2
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 51
// tmp := tmp ^ un ;
12897: LD_ADDR_VAR 0 3
12901: PUSH
12902: LD_VAR 0 3
12906: PUSH
12907: LD_VAR 0 2
12911: ADD
12912: ST_TO_ADDR
// end ;
12913: GO 12809
12915: POP
12916: POP
// repeat wait ( 0 0$1 ) ;
12917: LD_INT 35
12919: PPUSH
12920: CALL_OW 67
// for un in tmp do
12924: LD_ADDR_VAR 0 2
12928: PUSH
12929: LD_VAR 0 3
12933: PUSH
12934: FOR_IN
12935: IFFALSE 13009
// begin if IsDead ( un ) then
12937: LD_VAR 0 2
12941: PPUSH
12942: CALL_OW 301
12946: IFFALSE 12966
// begin tmp := tmp diff un ;
12948: LD_ADDR_VAR 0 3
12952: PUSH
12953: LD_VAR 0 3
12957: PUSH
12958: LD_VAR 0 2
12962: DIFF
12963: ST_TO_ADDR
// continue ;
12964: GO 12934
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12966: LD_VAR 0 2
12970: PPUSH
12971: LD_INT 3
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_INT 0
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 69
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: CALL_OW 74
13002: PPUSH
13003: CALL_OW 115
// end ;
13007: GO 12934
13009: POP
13010: POP
// until not tmp ;
13011: LD_VAR 0 3
13015: NOT
13016: IFFALSE 12917
// end ;
13018: PPOPN 3
13020: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 49
13030: AND
13031: IFFALSE 13085
13033: GO 13035
13035: DISABLE
// begin ToLua ( displayTroll(); ) ;
13036: LD_STRING displayTroll();
13038: PPUSH
13039: CALL_OW 559
// wait ( 3 3$00 ) ;
13043: LD_INT 6300
13045: PPUSH
13046: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13050: LD_STRING hideTroll();
13052: PPUSH
13053: CALL_OW 559
// wait ( 1 1$00 ) ;
13057: LD_INT 2100
13059: PPUSH
13060: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13064: LD_STRING displayTroll();
13066: PPUSH
13067: CALL_OW 559
// wait ( 1 1$00 ) ;
13071: LD_INT 2100
13073: PPUSH
13074: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13078: LD_STRING hideTroll();
13080: PPUSH
13081: CALL_OW 559
// end ;
13085: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13086: LD_EXP 24
13090: PUSH
13091: LD_EXP 50
13095: AND
13096: IFFALSE 13159
13098: GO 13100
13100: DISABLE
13101: LD_INT 0
13103: PPUSH
// begin p := 0 ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// repeat game_speed := 1 ;
13112: LD_ADDR_OWVAR 65
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13120: LD_INT 35
13122: PPUSH
13123: CALL_OW 67
// p := p + 1 ;
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_VAR 0 1
13136: PUSH
13137: LD_INT 1
13139: PLUS
13140: ST_TO_ADDR
// until p >= 60 ;
13141: LD_VAR 0 1
13145: PUSH
13146: LD_INT 60
13148: GREATEREQUAL
13149: IFFALSE 13112
// game_speed := 4 ;
13151: LD_ADDR_OWVAR 65
13155: PUSH
13156: LD_INT 4
13158: ST_TO_ADDR
// end ;
13159: PPOPN 1
13161: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13162: LD_EXP 24
13166: PUSH
13167: LD_EXP 51
13171: AND
13172: IFFALSE 13318
13174: GO 13176
13176: DISABLE
13177: LD_INT 0
13179: PPUSH
13180: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_OWVAR 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 2
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: LD_INT 0
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 30
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: ST_TO_ADDR
// if not depot then
13235: LD_VAR 0 1
13239: NOT
13240: IFFALSE 13244
// exit ;
13242: GO 13318
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_VAR 0 1
13253: PUSH
13254: LD_INT 1
13256: PPUSH
13257: LD_VAR 0 1
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: PPUSH
13268: CALL_OW 274
13272: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13273: LD_VAR 0 2
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 2
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13303: LD_VAR 0 2
13307: PPUSH
13308: LD_INT 3
13310: PPUSH
13311: LD_INT 0
13313: PPUSH
13314: CALL_OW 277
// end ;
13318: PPOPN 2
13320: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13321: LD_EXP 24
13325: PUSH
13326: LD_EXP 52
13330: AND
13331: IFFALSE 13428
13333: GO 13335
13335: DISABLE
13336: LD_INT 0
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13339: LD_ADDR_VAR 0 1
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 21
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: LD_INT 23
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PPUSH
13388: CALL_OW 69
13392: ST_TO_ADDR
// if not tmp then
13393: LD_VAR 0 1
13397: NOT
13398: IFFALSE 13402
// exit ;
13400: GO 13428
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 1
13409: PPUSH
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 12
13419: ARRAY
13420: PPUSH
13421: LD_INT 200
13423: PPUSH
13424: CALL_OW 234
// end ;
13428: PPOPN 1
13430: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13431: LD_EXP 24
13435: PUSH
13436: LD_EXP 53
13440: AND
13441: IFFALSE 13520
13443: GO 13445
13445: DISABLE
13446: LD_INT 0
13448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13449: LD_ADDR_VAR 0 1
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_OWVAR 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 21
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not tmp then
13485: LD_VAR 0 1
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13494: LD_VAR 0 1
13498: PUSH
13499: LD_INT 1
13501: PPUSH
13502: LD_VAR 0 1
13506: PPUSH
13507: CALL_OW 12
13511: ARRAY
13512: PPUSH
13513: LD_INT 60
13515: PPUSH
13516: CALL_OW 234
// end ;
13520: PPOPN 1
13522: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13523: LD_EXP 24
13527: PUSH
13528: LD_EXP 54
13532: AND
13533: IFFALSE 13632
13535: GO 13537
13537: DISABLE
13538: LD_INT 0
13540: PPUSH
13541: PPUSH
// begin enable ;
13542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_INT 22
13550: PUSH
13551: LD_OWVAR 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 61
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: LD_INT 33
13568: PUSH
13569: LD_INT 2
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: ST_TO_ADDR
// if not tmp then
13586: LD_VAR 0 1
13590: NOT
13591: IFFALSE 13595
// exit ;
13593: GO 13632
// for i in tmp do
13595: LD_ADDR_VAR 0 2
13599: PUSH
13600: LD_VAR 0 1
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13630
// if IsControledBy ( i ) then
13608: LD_VAR 0 2
13612: PPUSH
13613: CALL_OW 312
13617: IFFALSE 13628
// ComUnlink ( i ) ;
13619: LD_VAR 0 2
13623: PPUSH
13624: CALL_OW 136
13628: GO 13605
13630: POP
13631: POP
// end ;
13632: PPOPN 2
13634: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13635: LD_EXP 24
13639: PUSH
13640: LD_EXP 55
13644: AND
13645: IFFALSE 13785
13647: GO 13649
13649: DISABLE
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
// begin ToLua ( displayPowell(); ) ;
13654: LD_STRING displayPowell();
13656: PPUSH
13657: CALL_OW 559
// uc_side := 0 ;
13661: LD_ADDR_OWVAR 20
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// uc_nation := 2 ;
13669: LD_ADDR_OWVAR 21
13673: PUSH
13674: LD_INT 2
13676: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13677: LD_ADDR_OWVAR 37
13681: PUSH
13682: LD_INT 14
13684: ST_TO_ADDR
// vc_engine := engine_siberite ;
13685: LD_ADDR_OWVAR 39
13689: PUSH
13690: LD_INT 3
13692: ST_TO_ADDR
// vc_control := control_apeman ;
13693: LD_ADDR_OWVAR 38
13697: PUSH
13698: LD_INT 5
13700: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13701: LD_ADDR_OWVAR 40
13705: PUSH
13706: LD_INT 29
13708: ST_TO_ADDR
// un := CreateVehicle ;
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: CALL_OW 45
13718: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13719: LD_VAR 0 2
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13731: LD_INT 35
13733: PPUSH
13734: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13738: LD_VAR 0 2
13742: PPUSH
13743: LD_INT 22
13745: PUSH
13746: LD_OWVAR 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 69
13759: PPUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 74
13769: PPUSH
13770: CALL_OW 115
// until IsDead ( un ) ;
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL_OW 301
13783: IFFALSE 13731
// end ;
13785: PPOPN 2
13787: END
// every 0 0$1 trigger StreamModeActive and sStu do
13788: LD_EXP 24
13792: PUSH
13793: LD_EXP 63
13797: AND
13798: IFFALSE 13814
13800: GO 13802
13802: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13803: LD_STRING displayStucuk();
13805: PPUSH
13806: CALL_OW 559
// ResetFog ;
13810: CALL_OW 335
// end ;
13814: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13815: LD_EXP 24
13819: PUSH
13820: LD_EXP 56
13824: AND
13825: IFFALSE 13966
13827: GO 13829
13829: DISABLE
13830: LD_INT 0
13832: PPUSH
13833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13834: LD_ADDR_VAR 0 2
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_OWVAR 2
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 21
13853: PUSH
13854: LD_INT 1
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: ST_TO_ADDR
// if not tmp then
13870: LD_VAR 0 2
13874: NOT
13875: IFFALSE 13879
// exit ;
13877: GO 13966
// un := tmp [ rand ( 1 , tmp ) ] ;
13879: LD_ADDR_VAR 0 1
13883: PUSH
13884: LD_VAR 0 2
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 12
13901: ARRAY
13902: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13903: LD_VAR 0 1
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13915: LD_VAR 0 1
13919: PPUSH
13920: LD_OWVAR 3
13924: PUSH
13925: LD_VAR 0 1
13929: DIFF
13930: PPUSH
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 74
13940: PPUSH
13941: CALL_OW 115
// wait ( 0 0$20 ) ;
13945: LD_INT 700
13947: PPUSH
13948: CALL_OW 67
// SetSide ( un , your_side ) ;
13952: LD_VAR 0 1
13956: PPUSH
13957: LD_OWVAR 2
13961: PPUSH
13962: CALL_OW 235
// end ;
13966: PPOPN 2
13968: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13969: LD_EXP 24
13973: PUSH
13974: LD_EXP 57
13978: AND
13979: IFFALSE 14085
13981: GO 13983
13983: DISABLE
13984: LD_INT 0
13986: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13987: LD_ADDR_VAR 0 1
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_OWVAR 2
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 0
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 69
14040: ST_TO_ADDR
// if not depot then
14041: LD_VAR 0 1
14045: NOT
14046: IFFALSE 14050
// exit ;
14048: GO 14085
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14050: LD_VAR 0 1
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: CALL_OW 250
14063: PPUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 1
14071: ARRAY
14072: PPUSH
14073: CALL_OW 251
14077: PPUSH
14078: LD_INT 70
14080: PPUSH
14081: CALL_OW 495
// end ;
14085: PPOPN 1
14087: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14088: LD_EXP 24
14092: PUSH
14093: LD_EXP 58
14097: AND
14098: IFFALSE 14309
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
14109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14110: LD_ADDR_VAR 0 5
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_OWVAR 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// if not tmp then
14146: LD_VAR 0 5
14150: NOT
14151: IFFALSE 14155
// exit ;
14153: GO 14309
// for i in tmp do
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_VAR 0 5
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14307
// begin d := rand ( 0 , 5 ) ;
14168: LD_ADDR_VAR 0 4
14172: PUSH
14173: LD_INT 0
14175: PPUSH
14176: LD_INT 5
14178: PPUSH
14179: CALL_OW 12
14183: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14184: LD_ADDR_VAR 0 2
14188: PUSH
14189: LD_VAR 0 1
14193: PPUSH
14194: CALL_OW 250
14198: PPUSH
14199: LD_VAR 0 4
14203: PPUSH
14204: LD_INT 3
14206: PPUSH
14207: LD_INT 12
14209: PPUSH
14210: CALL_OW 12
14214: PPUSH
14215: CALL_OW 272
14219: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14220: LD_ADDR_VAR 0 3
14224: PUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 251
14234: PPUSH
14235: LD_VAR 0 4
14239: PPUSH
14240: LD_INT 3
14242: PPUSH
14243: LD_INT 12
14245: PPUSH
14246: CALL_OW 12
14250: PPUSH
14251: CALL_OW 273
14255: ST_TO_ADDR
// if ValidHex ( x , y ) then
14256: LD_VAR 0 2
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: CALL_OW 488
14270: IFFALSE 14305
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_VAR 0 2
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 3
14289: PPUSH
14290: LD_INT 6
14292: PPUSH
14293: CALL_OW 12
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 483
// end ;
14305: GO 14165
14307: POP
14308: POP
// end ;
14309: PPOPN 5
14311: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14312: LD_EXP 24
14316: PUSH
14317: LD_EXP 59
14321: AND
14322: IFFALSE 14416
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14331: LD_ADDR_VAR 0 2
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_OWVAR 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 32
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 69
14377: ST_TO_ADDR
// if not tmp then
14378: LD_VAR 0 2
14382: NOT
14383: IFFALSE 14387
// exit ;
14385: GO 14416
// for i in tmp do
14387: LD_ADDR_VAR 0 1
14391: PUSH
14392: LD_VAR 0 2
14396: PUSH
14397: FOR_IN
14398: IFFALSE 14414
// SetFuel ( i , 0 ) ;
14400: LD_VAR 0 1
14404: PPUSH
14405: LD_INT 0
14407: PPUSH
14408: CALL_OW 240
14412: GO 14397
14414: POP
14415: POP
// end ;
14416: PPOPN 2
14418: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14419: LD_EXP 24
14423: PUSH
14424: LD_EXP 60
14428: AND
14429: IFFALSE 14495
14431: GO 14433
14433: DISABLE
14434: LD_INT 0
14436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14437: LD_ADDR_VAR 0 1
14441: PUSH
14442: LD_INT 22
14444: PUSH
14445: LD_OWVAR 2
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 29
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: ST_TO_ADDR
// if not tmp then
14473: LD_VAR 0 1
14477: NOT
14478: IFFALSE 14482
// exit ;
14480: GO 14495
// DestroyUnit ( tmp [ 1 ] ) ;
14482: LD_VAR 0 1
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: CALL_OW 65
// end ;
14495: PPOPN 1
14497: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14498: LD_EXP 24
14502: PUSH
14503: LD_EXP 62
14507: AND
14508: IFFALSE 14637
14510: GO 14512
14512: DISABLE
14513: LD_INT 0
14515: PPUSH
// begin uc_side := 0 ;
14516: LD_ADDR_OWVAR 20
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// uc_nation := nation_arabian ;
14524: LD_ADDR_OWVAR 21
14528: PUSH
14529: LD_INT 2
14531: ST_TO_ADDR
// hc_gallery :=  ;
14532: LD_ADDR_OWVAR 33
14536: PUSH
14537: LD_STRING 
14539: ST_TO_ADDR
// hc_name :=  ;
14540: LD_ADDR_OWVAR 26
14544: PUSH
14545: LD_STRING 
14547: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 11
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 380
// un := CreateHuman ;
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: CALL_OW 44
14570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14571: LD_VAR 0 1
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PPUSH
14607: CALL_OW 69
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 74
14621: PPUSH
14622: CALL_OW 115
// until IsDead ( un ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 301
14635: IFFALSE 14583
// end ;
14637: PPOPN 1
14639: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14640: LD_EXP 24
14644: PUSH
14645: LD_EXP 64
14649: AND
14650: IFFALSE 14662
14652: GO 14654
14654: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14655: LD_STRING earthquake(getX(game), 0, 32)
14657: PPUSH
14658: CALL_OW 559
14662: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14663: LD_EXP 24
14667: PUSH
14668: LD_EXP 65
14672: AND
14673: IFFALSE 14764
14675: GO 14677
14677: DISABLE
14678: LD_INT 0
14680: PPUSH
// begin enable ;
14681: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14682: LD_ADDR_VAR 0 1
14686: PUSH
14687: LD_INT 22
14689: PUSH
14690: LD_OWVAR 2
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 21
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 33
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 69
14728: ST_TO_ADDR
// if not tmp then
14729: LD_VAR 0 1
14733: NOT
14734: IFFALSE 14738
// exit ;
14736: GO 14764
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14738: LD_VAR 0 1
14742: PUSH
14743: LD_INT 1
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 12
14755: ARRAY
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 234
// end ;
14764: PPOPN 1
14766: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14767: LD_EXP 24
14771: PUSH
14772: LD_EXP 66
14776: AND
14777: IFFALSE 14918
14779: GO 14781
14781: DISABLE
14782: LD_INT 0
14784: PPUSH
14785: PPUSH
14786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 22
14794: PUSH
14795: LD_OWVAR 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 25
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: ST_TO_ADDR
// if not tmp then
14823: LD_VAR 0 3
14827: NOT
14828: IFFALSE 14832
// exit ;
14830: GO 14918
// un := tmp [ rand ( 1 , tmp ) ] ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_VAR 0 3
14841: PUSH
14842: LD_INT 1
14844: PPUSH
14845: LD_VAR 0 3
14849: PPUSH
14850: CALL_OW 12
14854: ARRAY
14855: ST_TO_ADDR
// if Crawls ( un ) then
14856: LD_VAR 0 2
14860: PPUSH
14861: CALL_OW 318
14865: IFFALSE 14876
// ComWalk ( un ) ;
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14876: LD_VAR 0 2
14880: PPUSH
14881: LD_INT 9
14883: PPUSH
14884: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14888: LD_INT 28
14890: PPUSH
14891: LD_OWVAR 2
14895: PPUSH
14896: LD_INT 2
14898: PPUSH
14899: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14903: LD_INT 29
14905: PPUSH
14906: LD_OWVAR 2
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: CALL_OW 322
// end ;
14918: PPOPN 3
14920: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14921: LD_EXP 24
14925: PUSH
14926: LD_EXP 67
14930: AND
14931: IFFALSE 15042
14933: GO 14935
14935: DISABLE
14936: LD_INT 0
14938: PPUSH
14939: PPUSH
14940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14941: LD_ADDR_VAR 0 3
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_OWVAR 2
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: ST_TO_ADDR
// if not tmp then
14977: LD_VAR 0 3
14981: NOT
14982: IFFALSE 14986
// exit ;
14984: GO 15042
// un := tmp [ rand ( 1 , tmp ) ] ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 1
14998: PPUSH
14999: LD_VAR 0 3
15003: PPUSH
15004: CALL_OW 12
15008: ARRAY
15009: ST_TO_ADDR
// if Crawls ( un ) then
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 318
15019: IFFALSE 15030
// ComWalk ( un ) ;
15021: LD_VAR 0 2
15025: PPUSH
15026: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_INT 8
15037: PPUSH
15038: CALL_OW 336
// end ;
15042: PPOPN 3
15044: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15045: LD_EXP 24
15049: PUSH
15050: LD_EXP 68
15054: AND
15055: IFFALSE 15199
15057: GO 15059
15059: DISABLE
15060: LD_INT 0
15062: PPUSH
15063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_OWVAR 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 21
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 34
15096: PUSH
15097: LD_INT 12
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 34
15106: PUSH
15107: LD_INT 51
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 34
15116: PUSH
15117: LD_INT 32
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// if not tmp then
15140: LD_VAR 0 2
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15199
// for i in tmp do
15149: LD_ADDR_VAR 0 1
15153: PUSH
15154: LD_VAR 0 2
15158: PUSH
15159: FOR_IN
15160: IFFALSE 15197
// if GetCargo ( i , mat_artifact ) = 0 then
15162: LD_VAR 0 1
15166: PPUSH
15167: LD_INT 4
15169: PPUSH
15170: CALL_OW 289
15174: PUSH
15175: LD_INT 0
15177: EQUAL
15178: IFFALSE 15195
// SetCargo ( i , mat_siberit , 100 ) ;
15180: LD_VAR 0 1
15184: PPUSH
15185: LD_INT 3
15187: PPUSH
15188: LD_INT 100
15190: PPUSH
15191: CALL_OW 290
15195: GO 15159
15197: POP
15198: POP
// end ;
15199: PPOPN 2
15201: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15202: LD_EXP 24
15206: PUSH
15207: LD_EXP 69
15211: AND
15212: IFFALSE 15395
15214: GO 15216
15216: DISABLE
15217: LD_INT 0
15219: PPUSH
15220: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15221: LD_ADDR_VAR 0 2
15225: PUSH
15226: LD_INT 22
15228: PUSH
15229: LD_OWVAR 2
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 69
15242: ST_TO_ADDR
// if not tmp then
15243: LD_VAR 0 2
15247: NOT
15248: IFFALSE 15252
// exit ;
15250: GO 15395
// for i := 1 to 2 do
15252: LD_ADDR_VAR 0 1
15256: PUSH
15257: DOUBLE
15258: LD_INT 1
15260: DEC
15261: ST_TO_ADDR
15262: LD_INT 2
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15393
// begin uc_side := your_side ;
15268: LD_ADDR_OWVAR 20
15272: PUSH
15273: LD_OWVAR 2
15277: ST_TO_ADDR
// uc_nation := nation_american ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// vc_chassis := us_morphling ;
15286: LD_ADDR_OWVAR 37
15290: PUSH
15291: LD_INT 5
15293: ST_TO_ADDR
// vc_engine := engine_siberite ;
15294: LD_ADDR_OWVAR 39
15298: PUSH
15299: LD_INT 3
15301: ST_TO_ADDR
// vc_control := control_computer ;
15302: LD_ADDR_OWVAR 38
15306: PUSH
15307: LD_INT 3
15309: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15310: LD_ADDR_OWVAR 40
15314: PUSH
15315: LD_INT 10
15317: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15318: LD_VAR 0 2
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: CALL_OW 310
15331: NOT
15332: IFFALSE 15379
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15334: CALL_OW 45
15338: PPUSH
15339: LD_VAR 0 2
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: PPUSH
15348: CALL_OW 250
15352: PPUSH
15353: LD_VAR 0 2
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: PPUSH
15362: CALL_OW 251
15366: PPUSH
15367: LD_INT 12
15369: PPUSH
15370: LD_INT 1
15372: PPUSH
15373: CALL_OW 50
15377: GO 15391
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15379: CALL_OW 45
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 51
// end ;
15391: GO 15265
15393: POP
15394: POP
// end ;
15395: PPOPN 2
15397: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15398: LD_EXP 24
15402: PUSH
15403: LD_EXP 70
15407: AND
15408: IFFALSE 15630
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15421: LD_ADDR_VAR 0 6
15425: PUSH
15426: LD_INT 22
15428: PUSH
15429: LD_OWVAR 2
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 21
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 3
15450: PUSH
15451: LD_INT 23
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PPUSH
15470: CALL_OW 69
15474: ST_TO_ADDR
// if not tmp then
15475: LD_VAR 0 6
15479: NOT
15480: IFFALSE 15484
// exit ;
15482: GO 15630
// s1 := rand ( 1 , 4 ) ;
15484: LD_ADDR_VAR 0 2
15488: PUSH
15489: LD_INT 1
15491: PPUSH
15492: LD_INT 4
15494: PPUSH
15495: CALL_OW 12
15499: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15500: LD_ADDR_VAR 0 4
15504: PUSH
15505: LD_VAR 0 6
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: CALL_OW 259
15523: ST_TO_ADDR
// if s1 = 1 then
15524: LD_VAR 0 2
15528: PUSH
15529: LD_INT 1
15531: EQUAL
15532: IFFALSE 15552
// s2 := rand ( 2 , 4 ) else
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: LD_INT 2
15541: PPUSH
15542: LD_INT 4
15544: PPUSH
15545: CALL_OW 12
15549: ST_TO_ADDR
15550: GO 15560
// s2 := 1 ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_INT 1
15559: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15560: LD_ADDR_VAR 0 5
15564: PUSH
15565: LD_VAR 0 6
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: LD_VAR 0 3
15578: PPUSH
15579: CALL_OW 259
15583: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15584: LD_VAR 0 6
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: LD_VAR 0 2
15597: PPUSH
15598: LD_VAR 0 5
15602: PPUSH
15603: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15607: LD_VAR 0 6
15611: PUSH
15612: LD_INT 1
15614: ARRAY
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: LD_VAR 0 4
15625: PPUSH
15626: CALL_OW 237
// end ;
15630: PPOPN 6
15632: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 71
15642: AND
15643: IFFALSE 15722
15645: GO 15647
15647: DISABLE
15648: LD_INT 0
15650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15651: LD_ADDR_VAR 0 1
15655: PUSH
15656: LD_INT 22
15658: PUSH
15659: LD_OWVAR 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 30
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: ST_TO_ADDR
// if not tmp then
15687: LD_VAR 0 1
15691: NOT
15692: IFFALSE 15696
// exit ;
15694: GO 15722
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15696: LD_VAR 0 1
15700: PUSH
15701: LD_INT 1
15703: PPUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 234
// end ;
15722: PPOPN 1
15724: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15725: LD_EXP 24
15729: PUSH
15730: LD_EXP 72
15734: AND
15735: IFFALSE 15847
15737: GO 15739
15739: DISABLE
15740: LD_INT 0
15742: PPUSH
15743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15744: LD_ADDR_VAR 0 2
15748: PUSH
15749: LD_INT 22
15751: PUSH
15752: LD_OWVAR 2
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 30
15766: PUSH
15767: LD_INT 27
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 30
15776: PUSH
15777: LD_INT 26
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 28
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: ST_TO_ADDR
// if not tmp then
15809: LD_VAR 0 2
15813: NOT
15814: IFFALSE 15818
// exit ;
15816: GO 15847
// for i in tmp do
15818: LD_ADDR_VAR 0 1
15822: PUSH
15823: LD_VAR 0 2
15827: PUSH
15828: FOR_IN
15829: IFFALSE 15845
// SetLives ( i , 1 ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 234
15843: GO 15828
15845: POP
15846: POP
// end ;
15847: PPOPN 2
15849: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15850: LD_EXP 24
15854: PUSH
15855: LD_EXP 73
15859: AND
15860: IFFALSE 16147
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
// begin i := rand ( 1 , 7 ) ;
15870: LD_ADDR_VAR 0 1
15874: PUSH
15875: LD_INT 1
15877: PPUSH
15878: LD_INT 7
15880: PPUSH
15881: CALL_OW 12
15885: ST_TO_ADDR
// case i of 1 :
15886: LD_VAR 0 1
15890: PUSH
15891: LD_INT 1
15893: DOUBLE
15894: EQUAL
15895: IFTRUE 15899
15897: GO 15909
15899: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15900: LD_STRING earthquake(getX(game), 0, 32)
15902: PPUSH
15903: CALL_OW 559
15907: GO 16147
15909: LD_INT 2
15911: DOUBLE
15912: EQUAL
15913: IFTRUE 15917
15915: GO 15931
15917: POP
// begin ToLua ( displayStucuk(); ) ;
15918: LD_STRING displayStucuk();
15920: PPUSH
15921: CALL_OW 559
// ResetFog ;
15925: CALL_OW 335
// end ; 3 :
15929: GO 16147
15931: LD_INT 3
15933: DOUBLE
15934: EQUAL
15935: IFTRUE 15939
15937: GO 16043
15939: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15940: LD_ADDR_VAR 0 2
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_OWVAR 2
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 25
15959: PUSH
15960: LD_INT 1
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: ST_TO_ADDR
// if not tmp then
15976: LD_VAR 0 2
15980: NOT
15981: IFFALSE 15985
// exit ;
15983: GO 16147
// un := tmp [ rand ( 1 , tmp ) ] ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: LD_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: PPUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 12
16007: ARRAY
16008: ST_TO_ADDR
// if Crawls ( un ) then
16009: LD_VAR 0 3
16013: PPUSH
16014: CALL_OW 318
16018: IFFALSE 16029
// ComWalk ( un ) ;
16020: LD_VAR 0 3
16024: PPUSH
16025: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 8
16036: PPUSH
16037: CALL_OW 336
// end ; 4 :
16041: GO 16147
16043: LD_INT 4
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16125
16051: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16052: LD_ADDR_VAR 0 2
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_OWVAR 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 30
16071: PUSH
16072: LD_INT 29
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 69
16087: ST_TO_ADDR
// if not tmp then
16088: LD_VAR 0 2
16092: NOT
16093: IFFALSE 16097
// exit ;
16095: GO 16147
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16097: LD_VAR 0 2
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PPUSH
16106: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16110: LD_VAR 0 2
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: CALL_OW 65
// end ; 5 .. 7 :
16123: GO 16147
16125: LD_INT 5
16127: DOUBLE
16128: GREATEREQUAL
16129: IFFALSE 16137
16131: LD_INT 7
16133: DOUBLE
16134: LESSEQUAL
16135: IFTRUE 16139
16137: GO 16146
16139: POP
// StreamSibBomb ; end ;
16140: CALL 12384 0 0
16144: GO 16147
16146: POP
// end ;
16147: PPOPN 3
16149: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16150: LD_EXP 24
16154: PUSH
16155: LD_EXP 74
16159: AND
16160: IFFALSE 16316
16162: GO 16164
16164: DISABLE
16165: LD_INT 0
16167: PPUSH
16168: PPUSH
16169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16170: LD_ADDR_VAR 0 2
16174: PUSH
16175: LD_INT 81
16177: PUSH
16178: LD_OWVAR 2
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 21
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: ST_TO_ADDR
// if not tmp then
16224: LD_VAR 0 2
16228: NOT
16229: IFFALSE 16233
// exit ;
16231: GO 16316
// p := 0 ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 0
16240: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16241: LD_INT 35
16243: PPUSH
16244: CALL_OW 67
// p := p + 1 ;
16248: LD_ADDR_VAR 0 3
16252: PUSH
16253: LD_VAR 0 3
16257: PUSH
16258: LD_INT 1
16260: PLUS
16261: ST_TO_ADDR
// for i in tmp do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_VAR 0 2
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16304
// if GetLives ( i ) < 1000 then
16275: LD_VAR 0 1
16279: PPUSH
16280: CALL_OW 256
16284: PUSH
16285: LD_INT 1000
16287: LESS
16288: IFFALSE 16302
// SetLives ( i , 1000 ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 1000
16297: PPUSH
16298: CALL_OW 234
16302: GO 16272
16304: POP
16305: POP
// until p > 20 ;
16306: LD_VAR 0 3
16310: PUSH
16311: LD_INT 20
16313: GREATER
16314: IFFALSE 16241
// end ;
16316: PPOPN 3
16318: END
// every 0 0$1 trigger StreamModeActive and sTime do
16319: LD_EXP 24
16323: PUSH
16324: LD_EXP 75
16328: AND
16329: IFFALSE 16364
16331: GO 16333
16333: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16334: LD_INT 28
16336: PPUSH
16337: LD_OWVAR 2
16341: PPUSH
16342: LD_INT 2
16344: PPUSH
16345: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16349: LD_INT 30
16351: PPUSH
16352: LD_OWVAR 2
16356: PPUSH
16357: LD_INT 2
16359: PPUSH
16360: CALL_OW 322
// end ;
16364: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16365: LD_EXP 24
16369: PUSH
16370: LD_EXP 76
16374: AND
16375: IFFALSE 16496
16377: GO 16379
16379: DISABLE
16380: LD_INT 0
16382: PPUSH
16383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16384: LD_ADDR_VAR 0 2
16388: PUSH
16389: LD_INT 22
16391: PUSH
16392: LD_OWVAR 2
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 21
16403: PUSH
16404: LD_INT 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 3
16413: PUSH
16414: LD_INT 23
16416: PUSH
16417: LD_INT 0
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: PPUSH
16433: CALL_OW 69
16437: ST_TO_ADDR
// if not tmp then
16438: LD_VAR 0 2
16442: NOT
16443: IFFALSE 16447
// exit ;
16445: GO 16496
// for i in tmp do
16447: LD_ADDR_VAR 0 1
16451: PUSH
16452: LD_VAR 0 2
16456: PUSH
16457: FOR_IN
16458: IFFALSE 16494
// begin if Crawls ( i ) then
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 318
16469: IFFALSE 16480
// ComWalk ( i ) ;
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 138
// SetClass ( i , 2 ) ;
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_INT 2
16487: PPUSH
16488: CALL_OW 336
// end ;
16492: GO 16457
16494: POP
16495: POP
// end ;
16496: PPOPN 2
16498: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16499: LD_EXP 24
16503: PUSH
16504: LD_EXP 77
16508: AND
16509: IFFALSE 16797
16511: GO 16513
16513: DISABLE
16514: LD_INT 0
16516: PPUSH
16517: PPUSH
16518: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16519: LD_OWVAR 2
16523: PPUSH
16524: LD_INT 9
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16537: LD_INT 9
16539: PPUSH
16540: LD_OWVAR 2
16544: PPUSH
16545: CALL_OW 343
// uc_side := 9 ;
16549: LD_ADDR_OWVAR 20
16553: PUSH
16554: LD_INT 9
16556: ST_TO_ADDR
// uc_nation := 2 ;
16557: LD_ADDR_OWVAR 21
16561: PUSH
16562: LD_INT 2
16564: ST_TO_ADDR
// hc_name := Dark Warrior ;
16565: LD_ADDR_OWVAR 26
16569: PUSH
16570: LD_STRING Dark Warrior
16572: ST_TO_ADDR
// hc_gallery :=  ;
16573: LD_ADDR_OWVAR 33
16577: PUSH
16578: LD_STRING 
16580: ST_TO_ADDR
// hc_noskilllimit := true ;
16581: LD_ADDR_OWVAR 76
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16589: LD_ADDR_OWVAR 31
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 30
16599: PUSH
16600: LD_INT 30
16602: PUSH
16603: LD_INT 30
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: ST_TO_ADDR
// un := CreateHuman ;
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: CALL_OW 44
16621: ST_TO_ADDR
// hc_noskilllimit := false ;
16622: LD_ADDR_OWVAR 76
16626: PUSH
16627: LD_INT 0
16629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 51
// ToLua ( playRanger() ) ;
16642: LD_STRING playRanger()
16644: PPUSH
16645: CALL_OW 559
// p := 0 ;
16649: LD_ADDR_VAR 0 2
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16657: LD_INT 35
16659: PPUSH
16660: CALL_OW 67
// p := p + 1 ;
16664: LD_ADDR_VAR 0 2
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: LD_INT 1
16676: PLUS
16677: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16678: LD_VAR 0 3
16682: PPUSH
16683: CALL_OW 256
16687: PUSH
16688: LD_INT 1000
16690: LESS
16691: IFFALSE 16705
// SetLives ( un , 1000 ) ;
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 1000
16700: PPUSH
16701: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 81
16712: PUSH
16713: LD_OWVAR 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 91
16724: PUSH
16725: LD_VAR 0 3
16729: PUSH
16730: LD_INT 30
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PPUSH
16742: CALL_OW 69
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: CALL_OW 74
16756: PPUSH
16757: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16761: LD_VAR 0 2
16765: PUSH
16766: LD_INT 80
16768: GREATER
16769: PUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: CALL_OW 301
16779: OR
16780: IFFALSE 16657
// if un then
16782: LD_VAR 0 3
16786: IFFALSE 16797
// RemoveUnit ( un ) ;
16788: LD_VAR 0 3
16792: PPUSH
16793: CALL_OW 64
// end ;
16797: PPOPN 3
16799: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16800: LD_EXP 78
16804: IFFALSE 16920
16806: GO 16808
16808: DISABLE
16809: LD_INT 0
16811: PPUSH
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16814: LD_ADDR_VAR 0 2
16818: PUSH
16819: LD_INT 81
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 21
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 69
16849: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16850: LD_STRING playComputer()
16852: PPUSH
16853: CALL_OW 559
// if not tmp then
16857: LD_VAR 0 2
16861: NOT
16862: IFFALSE 16866
// exit ;
16864: GO 16920
// for i in tmp do
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_VAR 0 2
16875: PUSH
16876: FOR_IN
16877: IFFALSE 16918
// for j := 1 to 4 do
16879: LD_ADDR_VAR 0 3
16883: PUSH
16884: DOUBLE
16885: LD_INT 1
16887: DEC
16888: ST_TO_ADDR
16889: LD_INT 4
16891: PUSH
16892: FOR_TO
16893: IFFALSE 16914
// SetSkill ( i , j , 10 ) ;
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 10
16907: PPUSH
16908: CALL_OW 237
16912: GO 16892
16914: POP
16915: POP
16916: GO 16876
16918: POP
16919: POP
// end ;
16920: PPOPN 3
16922: END
// every 0 0$1 trigger s30 do var i , tmp ;
16923: LD_EXP 79
16927: IFFALSE 16996
16929: GO 16931
16931: DISABLE
16932: LD_INT 0
16934: PPUSH
16935: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16936: LD_ADDR_VAR 0 2
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_OWVAR 2
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 69
16957: ST_TO_ADDR
// if not tmp then
16958: LD_VAR 0 2
16962: NOT
16963: IFFALSE 16967
// exit ;
16965: GO 16996
// for i in tmp do
16967: LD_ADDR_VAR 0 1
16971: PUSH
16972: LD_VAR 0 2
16976: PUSH
16977: FOR_IN
16978: IFFALSE 16994
// SetLives ( i , 300 ) ;
16980: LD_VAR 0 1
16984: PPUSH
16985: LD_INT 300
16987: PPUSH
16988: CALL_OW 234
16992: GO 16977
16994: POP
16995: POP
// end ;
16996: PPOPN 2
16998: END
// every 0 0$1 trigger s60 do var i , tmp ;
16999: LD_EXP 80
17003: IFFALSE 17072
17005: GO 17007
17007: DISABLE
17008: LD_INT 0
17010: PPUSH
17011: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17012: LD_ADDR_VAR 0 2
17016: PUSH
17017: LD_INT 22
17019: PUSH
17020: LD_OWVAR 2
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 69
17033: ST_TO_ADDR
// if not tmp then
17034: LD_VAR 0 2
17038: NOT
17039: IFFALSE 17043
// exit ;
17041: GO 17072
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 2
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17070
// SetLives ( i , 600 ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 600
17063: PPUSH
17064: CALL_OW 234
17068: GO 17053
17070: POP
17071: POP
// end ;
17072: PPOPN 2
17074: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17075: LD_INT 0
17077: PPUSH
// case cmd of 301 :
17078: LD_VAR 0 1
17082: PUSH
17083: LD_INT 301
17085: DOUBLE
17086: EQUAL
17087: IFTRUE 17091
17089: GO 17123
17091: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17092: LD_VAR 0 6
17096: PPUSH
17097: LD_VAR 0 7
17101: PPUSH
17102: LD_VAR 0 8
17106: PPUSH
17107: LD_VAR 0 4
17111: PPUSH
17112: LD_VAR 0 5
17116: PPUSH
17117: CALL 18332 0 5
17121: GO 17244
17123: LD_INT 302
17125: DOUBLE
17126: EQUAL
17127: IFTRUE 17131
17129: GO 17168
17131: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17132: LD_VAR 0 6
17136: PPUSH
17137: LD_VAR 0 7
17141: PPUSH
17142: LD_VAR 0 8
17146: PPUSH
17147: LD_VAR 0 9
17151: PPUSH
17152: LD_VAR 0 4
17156: PPUSH
17157: LD_VAR 0 5
17161: PPUSH
17162: CALL 18423 0 6
17166: GO 17244
17168: LD_INT 303
17170: DOUBLE
17171: EQUAL
17172: IFTRUE 17176
17174: GO 17213
17176: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17177: LD_VAR 0 6
17181: PPUSH
17182: LD_VAR 0 7
17186: PPUSH
17187: LD_VAR 0 8
17191: PPUSH
17192: LD_VAR 0 9
17196: PPUSH
17197: LD_VAR 0 4
17201: PPUSH
17202: LD_VAR 0 5
17206: PPUSH
17207: CALL 17249 0 6
17211: GO 17244
17213: LD_INT 304
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17243
17221: POP
// hHackTeleport ( unit , x , y ) ; end ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_VAR 0 4
17231: PPUSH
17232: LD_VAR 0 5
17236: PPUSH
17237: CALL 19016 0 3
17241: GO 17244
17243: POP
// end ;
17244: LD_VAR 0 12
17248: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17249: LD_INT 0
17251: PPUSH
17252: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 1
17260: LESS
17261: PUSH
17262: LD_VAR 0 1
17266: PUSH
17267: LD_INT 3
17269: GREATER
17270: OR
17271: PUSH
17272: LD_VAR 0 5
17276: PPUSH
17277: LD_VAR 0 6
17281: PPUSH
17282: CALL_OW 428
17286: OR
17287: IFFALSE 17291
// exit ;
17289: GO 18019
// uc_side := your_side ;
17291: LD_ADDR_OWVAR 20
17295: PUSH
17296: LD_OWVAR 2
17300: ST_TO_ADDR
// uc_nation := nation ;
17301: LD_ADDR_OWVAR 21
17305: PUSH
17306: LD_VAR 0 1
17310: ST_TO_ADDR
// bc_level = 1 ;
17311: LD_ADDR_OWVAR 43
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// case btype of 1 :
17319: LD_VAR 0 2
17323: PUSH
17324: LD_INT 1
17326: DOUBLE
17327: EQUAL
17328: IFTRUE 17332
17330: GO 17343
17332: POP
// bc_type := b_depot ; 2 :
17333: LD_ADDR_OWVAR 42
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
17341: GO 17963
17343: LD_INT 2
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17362
17351: POP
// bc_type := b_warehouse ; 3 :
17352: LD_ADDR_OWVAR 42
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
17360: GO 17963
17362: LD_INT 3
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17381
17370: POP
// bc_type := b_lab ; 4 .. 9 :
17371: LD_ADDR_OWVAR 42
17375: PUSH
17376: LD_INT 6
17378: ST_TO_ADDR
17379: GO 17963
17381: LD_INT 4
17383: DOUBLE
17384: GREATEREQUAL
17385: IFFALSE 17393
17387: LD_INT 9
17389: DOUBLE
17390: LESSEQUAL
17391: IFTRUE 17395
17393: GO 17455
17395: POP
// begin bc_type := b_lab_half ;
17396: LD_ADDR_OWVAR 42
17400: PUSH
17401: LD_INT 7
17403: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17404: LD_ADDR_OWVAR 44
17408: PUSH
17409: LD_INT 10
17411: PUSH
17412: LD_INT 11
17414: PUSH
17415: LD_INT 12
17417: PUSH
17418: LD_INT 15
17420: PUSH
17421: LD_INT 14
17423: PUSH
17424: LD_INT 13
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 3
17442: MINUS
17443: ARRAY
17444: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17445: LD_ADDR_OWVAR 45
17449: PUSH
17450: LD_INT 9
17452: ST_TO_ADDR
// end ; 10 .. 13 :
17453: GO 17963
17455: LD_INT 10
17457: DOUBLE
17458: GREATEREQUAL
17459: IFFALSE 17467
17461: LD_INT 13
17463: DOUBLE
17464: LESSEQUAL
17465: IFTRUE 17469
17467: GO 17546
17469: POP
// begin bc_type := b_lab_full ;
17470: LD_ADDR_OWVAR 42
17474: PUSH
17475: LD_INT 8
17477: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17478: LD_ADDR_OWVAR 44
17482: PUSH
17483: LD_INT 10
17485: PUSH
17486: LD_INT 12
17488: PUSH
17489: LD_INT 14
17491: PUSH
17492: LD_INT 13
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_INT 9
17508: MINUS
17509: ARRAY
17510: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17511: LD_ADDR_OWVAR 45
17515: PUSH
17516: LD_INT 11
17518: PUSH
17519: LD_INT 15
17521: PUSH
17522: LD_INT 12
17524: PUSH
17525: LD_INT 15
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_VAR 0 2
17538: PUSH
17539: LD_INT 9
17541: MINUS
17542: ARRAY
17543: ST_TO_ADDR
// end ; 14 :
17544: GO 17963
17546: LD_INT 14
17548: DOUBLE
17549: EQUAL
17550: IFTRUE 17554
17552: GO 17565
17554: POP
// bc_type := b_workshop ; 15 :
17555: LD_ADDR_OWVAR 42
17559: PUSH
17560: LD_INT 2
17562: ST_TO_ADDR
17563: GO 17963
17565: LD_INT 15
17567: DOUBLE
17568: EQUAL
17569: IFTRUE 17573
17571: GO 17584
17573: POP
// bc_type := b_factory ; 16 :
17574: LD_ADDR_OWVAR 42
17578: PUSH
17579: LD_INT 3
17581: ST_TO_ADDR
17582: GO 17963
17584: LD_INT 16
17586: DOUBLE
17587: EQUAL
17588: IFTRUE 17592
17590: GO 17603
17592: POP
// bc_type := b_ext_gun ; 17 :
17593: LD_ADDR_OWVAR 42
17597: PUSH
17598: LD_INT 17
17600: ST_TO_ADDR
17601: GO 17963
17603: LD_INT 17
17605: DOUBLE
17606: EQUAL
17607: IFTRUE 17611
17609: GO 17639
17611: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17612: LD_ADDR_OWVAR 42
17616: PUSH
17617: LD_INT 19
17619: PUSH
17620: LD_INT 23
17622: PUSH
17623: LD_INT 19
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: LD_VAR 0 1
17635: ARRAY
17636: ST_TO_ADDR
17637: GO 17963
17639: LD_INT 18
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17658
17647: POP
// bc_type := b_ext_radar ; 19 :
17648: LD_ADDR_OWVAR 42
17652: PUSH
17653: LD_INT 20
17655: ST_TO_ADDR
17656: GO 17963
17658: LD_INT 19
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17677
17666: POP
// bc_type := b_ext_radio ; 20 :
17667: LD_ADDR_OWVAR 42
17671: PUSH
17672: LD_INT 22
17674: ST_TO_ADDR
17675: GO 17963
17677: LD_INT 20
17679: DOUBLE
17680: EQUAL
17681: IFTRUE 17685
17683: GO 17696
17685: POP
// bc_type := b_ext_siberium ; 21 :
17686: LD_ADDR_OWVAR 42
17690: PUSH
17691: LD_INT 21
17693: ST_TO_ADDR
17694: GO 17963
17696: LD_INT 21
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17715
17704: POP
// bc_type := b_ext_computer ; 22 :
17705: LD_ADDR_OWVAR 42
17709: PUSH
17710: LD_INT 24
17712: ST_TO_ADDR
17713: GO 17963
17715: LD_INT 22
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// bc_type := b_ext_track ; 23 :
17724: LD_ADDR_OWVAR 42
17728: PUSH
17729: LD_INT 16
17731: ST_TO_ADDR
17732: GO 17963
17734: LD_INT 23
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17753
17742: POP
// bc_type := b_ext_laser ; 24 :
17743: LD_ADDR_OWVAR 42
17747: PUSH
17748: LD_INT 25
17750: ST_TO_ADDR
17751: GO 17963
17753: LD_INT 24
17755: DOUBLE
17756: EQUAL
17757: IFTRUE 17761
17759: GO 17772
17761: POP
// bc_type := b_control_tower ; 25 :
17762: LD_ADDR_OWVAR 42
17766: PUSH
17767: LD_INT 36
17769: ST_TO_ADDR
17770: GO 17963
17772: LD_INT 25
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17791
17780: POP
// bc_type := b_breastwork ; 26 :
17781: LD_ADDR_OWVAR 42
17785: PUSH
17786: LD_INT 31
17788: ST_TO_ADDR
17789: GO 17963
17791: LD_INT 26
17793: DOUBLE
17794: EQUAL
17795: IFTRUE 17799
17797: GO 17810
17799: POP
// bc_type := b_bunker ; 27 :
17800: LD_ADDR_OWVAR 42
17804: PUSH
17805: LD_INT 32
17807: ST_TO_ADDR
17808: GO 17963
17810: LD_INT 27
17812: DOUBLE
17813: EQUAL
17814: IFTRUE 17818
17816: GO 17829
17818: POP
// bc_type := b_turret ; 28 :
17819: LD_ADDR_OWVAR 42
17823: PUSH
17824: LD_INT 33
17826: ST_TO_ADDR
17827: GO 17963
17829: LD_INT 28
17831: DOUBLE
17832: EQUAL
17833: IFTRUE 17837
17835: GO 17848
17837: POP
// bc_type := b_armoury ; 29 :
17838: LD_ADDR_OWVAR 42
17842: PUSH
17843: LD_INT 4
17845: ST_TO_ADDR
17846: GO 17963
17848: LD_INT 29
17850: DOUBLE
17851: EQUAL
17852: IFTRUE 17856
17854: GO 17867
17856: POP
// bc_type := b_barracks ; 30 :
17857: LD_ADDR_OWVAR 42
17861: PUSH
17862: LD_INT 5
17864: ST_TO_ADDR
17865: GO 17963
17867: LD_INT 30
17869: DOUBLE
17870: EQUAL
17871: IFTRUE 17875
17873: GO 17886
17875: POP
// bc_type := b_solar_power ; 31 :
17876: LD_ADDR_OWVAR 42
17880: PUSH
17881: LD_INT 27
17883: ST_TO_ADDR
17884: GO 17963
17886: LD_INT 31
17888: DOUBLE
17889: EQUAL
17890: IFTRUE 17894
17892: GO 17905
17894: POP
// bc_type := b_oil_power ; 32 :
17895: LD_ADDR_OWVAR 42
17899: PUSH
17900: LD_INT 26
17902: ST_TO_ADDR
17903: GO 17963
17905: LD_INT 32
17907: DOUBLE
17908: EQUAL
17909: IFTRUE 17913
17911: GO 17924
17913: POP
// bc_type := b_siberite_power ; 33 :
17914: LD_ADDR_OWVAR 42
17918: PUSH
17919: LD_INT 28
17921: ST_TO_ADDR
17922: GO 17963
17924: LD_INT 33
17926: DOUBLE
17927: EQUAL
17928: IFTRUE 17932
17930: GO 17943
17932: POP
// bc_type := b_oil_mine ; 34 :
17933: LD_ADDR_OWVAR 42
17937: PUSH
17938: LD_INT 29
17940: ST_TO_ADDR
17941: GO 17963
17943: LD_INT 34
17945: DOUBLE
17946: EQUAL
17947: IFTRUE 17951
17949: GO 17962
17951: POP
// bc_type := b_siberite_mine ; end ;
17952: LD_ADDR_OWVAR 42
17956: PUSH
17957: LD_INT 30
17959: ST_TO_ADDR
17960: GO 17963
17962: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17963: LD_ADDR_VAR 0 8
17967: PUSH
17968: LD_VAR 0 5
17972: PPUSH
17973: LD_VAR 0 6
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: CALL_OW 47
17987: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17988: LD_OWVAR 42
17992: PUSH
17993: LD_INT 32
17995: PUSH
17996: LD_INT 33
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: IN
18003: IFFALSE 18019
// PlaceWeaponTurret ( b , weapon ) ;
18005: LD_VAR 0 8
18009: PPUSH
18010: LD_VAR 0 4
18014: PPUSH
18015: CALL_OW 431
// end ;
18019: LD_VAR 0 7
18023: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18024: LD_INT 0
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18030: LD_ADDR_VAR 0 4
18034: PUSH
18035: LD_INT 22
18037: PUSH
18038: LD_OWVAR 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 30
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PPUSH
18079: CALL_OW 69
18083: ST_TO_ADDR
// if not tmp then
18084: LD_VAR 0 4
18088: NOT
18089: IFFALSE 18093
// exit ;
18091: GO 18152
// for i in tmp do
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: LD_VAR 0 4
18102: PUSH
18103: FOR_IN
18104: IFFALSE 18150
// for j = 1 to 3 do
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: DOUBLE
18112: LD_INT 1
18114: DEC
18115: ST_TO_ADDR
18116: LD_INT 3
18118: PUSH
18119: FOR_TO
18120: IFFALSE 18146
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18122: LD_VAR 0 2
18126: PPUSH
18127: CALL_OW 274
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 99999
18139: PPUSH
18140: CALL_OW 277
18144: GO 18119
18146: POP
18147: POP
18148: GO 18103
18150: POP
18151: POP
// end ;
18152: LD_VAR 0 1
18156: RET
// export function hHackSetLevel10 ; var i , j ; begin
18157: LD_INT 0
18159: PPUSH
18160: PPUSH
18161: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18162: LD_ADDR_VAR 0 2
18166: PUSH
18167: LD_INT 21
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PUSH
18182: FOR_IN
18183: IFFALSE 18235
// if IsSelected ( i ) then
18185: LD_VAR 0 2
18189: PPUSH
18190: CALL_OW 306
18194: IFFALSE 18233
// begin for j := 1 to 4 do
18196: LD_ADDR_VAR 0 3
18200: PUSH
18201: DOUBLE
18202: LD_INT 1
18204: DEC
18205: ST_TO_ADDR
18206: LD_INT 4
18208: PUSH
18209: FOR_TO
18210: IFFALSE 18231
// SetSkill ( i , j , 10 ) ;
18212: LD_VAR 0 2
18216: PPUSH
18217: LD_VAR 0 3
18221: PPUSH
18222: LD_INT 10
18224: PPUSH
18225: CALL_OW 237
18229: GO 18209
18231: POP
18232: POP
// end ;
18233: GO 18182
18235: POP
18236: POP
// end ;
18237: LD_VAR 0 1
18241: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18242: LD_INT 0
18244: PPUSH
18245: PPUSH
18246: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_OWVAR 2
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 21
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PPUSH
18278: CALL_OW 69
18282: PUSH
18283: FOR_IN
18284: IFFALSE 18325
// begin for j := 1 to 4 do
18286: LD_ADDR_VAR 0 3
18290: PUSH
18291: DOUBLE
18292: LD_INT 1
18294: DEC
18295: ST_TO_ADDR
18296: LD_INT 4
18298: PUSH
18299: FOR_TO
18300: IFFALSE 18321
// SetSkill ( i , j , 10 ) ;
18302: LD_VAR 0 2
18306: PPUSH
18307: LD_VAR 0 3
18311: PPUSH
18312: LD_INT 10
18314: PPUSH
18315: CALL_OW 237
18319: GO 18299
18321: POP
18322: POP
// end ;
18323: GO 18283
18325: POP
18326: POP
// end ;
18327: LD_VAR 0 1
18331: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18332: LD_INT 0
18334: PPUSH
// uc_side := your_side ;
18335: LD_ADDR_OWVAR 20
18339: PUSH
18340: LD_OWVAR 2
18344: ST_TO_ADDR
// uc_nation := nation ;
18345: LD_ADDR_OWVAR 21
18349: PUSH
18350: LD_VAR 0 1
18354: ST_TO_ADDR
// InitHc ;
18355: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18359: LD_INT 0
18361: PPUSH
18362: LD_VAR 0 2
18366: PPUSH
18367: LD_VAR 0 3
18371: PPUSH
18372: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18376: LD_VAR 0 4
18380: PPUSH
18381: LD_VAR 0 5
18385: PPUSH
18386: CALL_OW 428
18390: PUSH
18391: LD_INT 0
18393: EQUAL
18394: IFFALSE 18418
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18396: CALL_OW 44
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: LD_VAR 0 5
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 48
// end ;
18418: LD_VAR 0 6
18422: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18423: LD_INT 0
18425: PPUSH
18426: PPUSH
// uc_side := your_side ;
18427: LD_ADDR_OWVAR 20
18431: PUSH
18432: LD_OWVAR 2
18436: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18437: LD_VAR 0 1
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: LD_INT 4
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: IN
18464: IFFALSE 18476
// uc_nation := nation_american else
18466: LD_ADDR_OWVAR 21
18470: PUSH
18471: LD_INT 1
18473: ST_TO_ADDR
18474: GO 18519
// if chassis in [ 11 , 12 , 13 , 14 ] then
18476: LD_VAR 0 1
18480: PUSH
18481: LD_INT 11
18483: PUSH
18484: LD_INT 12
18486: PUSH
18487: LD_INT 13
18489: PUSH
18490: LD_INT 14
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: IN
18499: IFFALSE 18511
// uc_nation := nation_arabian else
18501: LD_ADDR_OWVAR 21
18505: PUSH
18506: LD_INT 2
18508: ST_TO_ADDR
18509: GO 18519
// uc_nation := nation_russian ;
18511: LD_ADDR_OWVAR 21
18515: PUSH
18516: LD_INT 3
18518: ST_TO_ADDR
// vc_chassis := chassis ;
18519: LD_ADDR_OWVAR 37
18523: PUSH
18524: LD_VAR 0 1
18528: ST_TO_ADDR
// vc_engine := engine ;
18529: LD_ADDR_OWVAR 39
18533: PUSH
18534: LD_VAR 0 2
18538: ST_TO_ADDR
// vc_control := control ;
18539: LD_ADDR_OWVAR 38
18543: PUSH
18544: LD_VAR 0 3
18548: ST_TO_ADDR
// vc_weapon := weapon ;
18549: LD_ADDR_OWVAR 40
18553: PUSH
18554: LD_VAR 0 4
18558: ST_TO_ADDR
// un := CreateVehicle ;
18559: LD_ADDR_VAR 0 8
18563: PUSH
18564: CALL_OW 45
18568: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18569: LD_VAR 0 8
18573: PPUSH
18574: LD_INT 0
18576: PPUSH
18577: LD_INT 5
18579: PPUSH
18580: CALL_OW 12
18584: PPUSH
18585: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18589: LD_VAR 0 8
18593: PPUSH
18594: LD_VAR 0 5
18598: PPUSH
18599: LD_VAR 0 6
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 48
// end ;
18611: LD_VAR 0 7
18615: RET
// export hInvincible ; every 1 do
18616: GO 18618
18618: DISABLE
// hInvincible := [ ] ;
18619: LD_ADDR_EXP 81
18623: PUSH
18624: EMPTY
18625: ST_TO_ADDR
18626: END
// every 10 do var i ;
18627: GO 18629
18629: DISABLE
18630: LD_INT 0
18632: PPUSH
// begin enable ;
18633: ENABLE
// if not hInvincible then
18634: LD_EXP 81
18638: NOT
18639: IFFALSE 18643
// exit ;
18641: GO 18687
// for i in hInvincible do
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_EXP 81
18652: PUSH
18653: FOR_IN
18654: IFFALSE 18685
// if GetLives ( i ) < 1000 then
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 256
18665: PUSH
18666: LD_INT 1000
18668: LESS
18669: IFFALSE 18683
// SetLives ( i , 1000 ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_INT 1000
18678: PPUSH
18679: CALL_OW 234
18683: GO 18653
18685: POP
18686: POP
// end ;
18687: PPOPN 1
18689: END
// export function hHackInvincible ; var i ; begin
18690: LD_INT 0
18692: PPUSH
18693: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18694: LD_ADDR_VAR 0 2
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 21
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 21
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 69
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18794
// if IsSelected ( i ) then
18735: LD_VAR 0 2
18739: PPUSH
18740: CALL_OW 306
18744: IFFALSE 18792
// begin if i in hInvincible then
18746: LD_VAR 0 2
18750: PUSH
18751: LD_EXP 81
18755: IN
18756: IFFALSE 18776
// hInvincible := hInvincible diff i else
18758: LD_ADDR_EXP 81
18762: PUSH
18763: LD_EXP 81
18767: PUSH
18768: LD_VAR 0 2
18772: DIFF
18773: ST_TO_ADDR
18774: GO 18792
// hInvincible := hInvincible union i ;
18776: LD_ADDR_EXP 81
18780: PUSH
18781: LD_EXP 81
18785: PUSH
18786: LD_VAR 0 2
18790: UNION
18791: ST_TO_ADDR
// end ;
18792: GO 18732
18794: POP
18795: POP
// end ;
18796: LD_VAR 0 1
18800: RET
// export function hHackInvisible ; var i , j ; begin
18801: LD_INT 0
18803: PPUSH
18804: PPUSH
18805: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18806: LD_ADDR_VAR 0 2
18810: PUSH
18811: LD_INT 21
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18851
// if IsSelected ( i ) then
18829: LD_VAR 0 2
18833: PPUSH
18834: CALL_OW 306
18838: IFFALSE 18849
// ComForceInvisible ( i ) ;
18840: LD_VAR 0 2
18844: PPUSH
18845: CALL_OW 496
18849: GO 18826
18851: POP
18852: POP
// end ;
18853: LD_VAR 0 1
18857: RET
// export function hHackChangeYourSide ; begin
18858: LD_INT 0
18860: PPUSH
// if your_side = 8 then
18861: LD_OWVAR 2
18865: PUSH
18866: LD_INT 8
18868: EQUAL
18869: IFFALSE 18881
// your_side := 0 else
18871: LD_ADDR_OWVAR 2
18875: PUSH
18876: LD_INT 0
18878: ST_TO_ADDR
18879: GO 18895
// your_side := your_side + 1 ;
18881: LD_ADDR_OWVAR 2
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: ST_TO_ADDR
// end ;
18895: LD_VAR 0 1
18899: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
18904: PPUSH
// for i in all_units do
18905: LD_ADDR_VAR 0 2
18909: PUSH
18910: LD_OWVAR 3
18914: PUSH
18915: FOR_IN
18916: IFFALSE 18994
// if IsSelected ( i ) then
18918: LD_VAR 0 2
18922: PPUSH
18923: CALL_OW 306
18927: IFFALSE 18992
// begin j := GetSide ( i ) ;
18929: LD_ADDR_VAR 0 3
18933: PUSH
18934: LD_VAR 0 2
18938: PPUSH
18939: CALL_OW 255
18943: ST_TO_ADDR
// if j = 8 then
18944: LD_VAR 0 3
18948: PUSH
18949: LD_INT 8
18951: EQUAL
18952: IFFALSE 18964
// j := 0 else
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 0
18961: ST_TO_ADDR
18962: GO 18978
// j := j + 1 ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 1
18976: PLUS
18977: ST_TO_ADDR
// SetSide ( i , j ) ;
18978: LD_VAR 0 2
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 235
// end ;
18992: GO 18915
18994: POP
18995: POP
// end ;
18996: LD_VAR 0 1
19000: RET
// export function hHackFog ; begin
19001: LD_INT 0
19003: PPUSH
// FogOff ( true ) ;
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 344
// end ;
19011: LD_VAR 0 1
19015: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19016: LD_INT 0
19018: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 483
// CenterOnXY ( x , y ) ;
19044: LD_VAR 0 2
19048: PPUSH
19049: LD_VAR 0 3
19053: PPUSH
19054: CALL_OW 84
// end ;
19058: LD_VAR 0 4
19062: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19067: LD_VAR 0 1
19071: NOT
19072: PUSH
19073: LD_VAR 0 2
19077: PPUSH
19078: LD_VAR 0 3
19082: PPUSH
19083: CALL_OW 488
19087: NOT
19088: OR
19089: PUSH
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 266
19099: PUSH
19100: LD_INT 3
19102: NONEQUAL
19103: PUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 247
19113: PUSH
19114: LD_INT 1
19116: EQUAL
19117: NOT
19118: AND
19119: OR
19120: IFFALSE 19124
// exit ;
19122: GO 19273
// if GetType ( factory ) = unit_human then
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 247
19133: PUSH
19134: LD_INT 1
19136: EQUAL
19137: IFFALSE 19154
// factory := IsInUnit ( factory ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 310
19153: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 266
19163: PUSH
19164: LD_INT 3
19166: NONEQUAL
19167: IFFALSE 19171
// exit ;
19169: GO 19273
// if HexInfo ( x , y ) = factory then
19171: LD_VAR 0 2
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: CALL_OW 428
19185: PUSH
19186: LD_VAR 0 1
19190: EQUAL
19191: IFFALSE 19218
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19193: LD_ADDR_EXP 82
19197: PUSH
19198: LD_EXP 82
19202: PPUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: LD_INT 0
19210: PPUSH
19211: CALL_OW 1
19215: ST_TO_ADDR
19216: GO 19269
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19218: LD_ADDR_EXP 82
19222: PUSH
19223: LD_EXP 82
19227: PPUSH
19228: LD_VAR 0 1
19232: PPUSH
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 255
19242: PUSH
19243: LD_VAR 0 1
19247: PUSH
19248: LD_VAR 0 2
19252: PUSH
19253: LD_VAR 0 3
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 1
19268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19269: CALL 19278 0 0
// end ;
19273: LD_VAR 0 4
19277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
19282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19283: LD_STRING resetFactoryWaypoint();
19285: PPUSH
19286: CALL_OW 559
// if factoryWaypoints then
19290: LD_EXP 82
19294: IFFALSE 19420
// begin list := PrepareArray ( factoryWaypoints ) ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_EXP 82
19305: PPUSH
19306: CALL 66880 0 1
19310: ST_TO_ADDR
// for i := 1 to list do
19311: LD_ADDR_VAR 0 2
19315: PUSH
19316: DOUBLE
19317: LD_INT 1
19319: DEC
19320: ST_TO_ADDR
19321: LD_VAR 0 3
19325: PUSH
19326: FOR_TO
19327: IFFALSE 19418
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19329: LD_STRING setFactoryWaypointXY(
19331: PUSH
19332: LD_VAR 0 3
19336: PUSH
19337: LD_VAR 0 2
19341: ARRAY
19342: PUSH
19343: LD_INT 1
19345: ARRAY
19346: STR
19347: PUSH
19348: LD_STRING ,
19350: STR
19351: PUSH
19352: LD_VAR 0 3
19356: PUSH
19357: LD_VAR 0 2
19361: ARRAY
19362: PUSH
19363: LD_INT 2
19365: ARRAY
19366: STR
19367: PUSH
19368: LD_STRING ,
19370: STR
19371: PUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_VAR 0 2
19381: ARRAY
19382: PUSH
19383: LD_INT 3
19385: ARRAY
19386: STR
19387: PUSH
19388: LD_STRING ,
19390: STR
19391: PUSH
19392: LD_VAR 0 3
19396: PUSH
19397: LD_VAR 0 2
19401: ARRAY
19402: PUSH
19403: LD_INT 4
19405: ARRAY
19406: STR
19407: PUSH
19408: LD_STRING )
19410: STR
19411: PPUSH
19412: CALL_OW 559
19416: GO 19326
19418: POP
19419: POP
// end ; end ;
19420: LD_VAR 0 1
19424: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19425: LD_INT 0
19427: PPUSH
// if HexInfo ( x , y ) = warehouse then
19428: LD_VAR 0 2
19432: PPUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 428
19442: PUSH
19443: LD_VAR 0 1
19447: EQUAL
19448: IFFALSE 19475
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19450: LD_ADDR_EXP 83
19454: PUSH
19455: LD_EXP 83
19459: PPUSH
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_INT 0
19467: PPUSH
19468: CALL_OW 1
19472: ST_TO_ADDR
19473: GO 19526
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19475: LD_ADDR_EXP 83
19479: PUSH
19480: LD_EXP 83
19484: PPUSH
19485: LD_VAR 0 1
19489: PPUSH
19490: LD_VAR 0 1
19494: PPUSH
19495: CALL_OW 255
19499: PUSH
19500: LD_VAR 0 1
19504: PUSH
19505: LD_VAR 0 2
19509: PUSH
19510: LD_VAR 0 3
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 1
19525: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19526: CALL 19535 0 0
// end ;
19530: LD_VAR 0 4
19534: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19535: LD_INT 0
19537: PPUSH
19538: PPUSH
19539: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19540: LD_STRING resetWarehouseGatheringPoints();
19542: PPUSH
19543: CALL_OW 559
// if warehouseGatheringPoints then
19547: LD_EXP 83
19551: IFFALSE 19677
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: LD_EXP 83
19562: PPUSH
19563: CALL 66880 0 1
19567: ST_TO_ADDR
// for i := 1 to list do
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: DOUBLE
19574: LD_INT 1
19576: DEC
19577: ST_TO_ADDR
19578: LD_VAR 0 3
19582: PUSH
19583: FOR_TO
19584: IFFALSE 19675
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19586: LD_STRING setWarehouseGatheringPointXY(
19588: PUSH
19589: LD_VAR 0 3
19593: PUSH
19594: LD_VAR 0 2
19598: ARRAY
19599: PUSH
19600: LD_INT 1
19602: ARRAY
19603: STR
19604: PUSH
19605: LD_STRING ,
19607: STR
19608: PUSH
19609: LD_VAR 0 3
19613: PUSH
19614: LD_VAR 0 2
19618: ARRAY
19619: PUSH
19620: LD_INT 2
19622: ARRAY
19623: STR
19624: PUSH
19625: LD_STRING ,
19627: STR
19628: PUSH
19629: LD_VAR 0 3
19633: PUSH
19634: LD_VAR 0 2
19638: ARRAY
19639: PUSH
19640: LD_INT 3
19642: ARRAY
19643: STR
19644: PUSH
19645: LD_STRING ,
19647: STR
19648: PUSH
19649: LD_VAR 0 3
19653: PUSH
19654: LD_VAR 0 2
19658: ARRAY
19659: PUSH
19660: LD_INT 4
19662: ARRAY
19663: STR
19664: PUSH
19665: LD_STRING )
19667: STR
19668: PPUSH
19669: CALL_OW 559
19673: GO 19583
19675: POP
19676: POP
// end ; end ;
19677: LD_VAR 0 1
19681: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19682: LD_EXP 83
19686: IFFALSE 20371
19688: GO 19690
19690: DISABLE
19691: LD_INT 0
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
19698: PPUSH
19699: PPUSH
19700: PPUSH
19701: PPUSH
// begin enable ;
19702: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: LD_EXP 83
19712: PPUSH
19713: CALL 66880 0 1
19717: ST_TO_ADDR
// if not list then
19718: LD_VAR 0 3
19722: NOT
19723: IFFALSE 19727
// exit ;
19725: GO 20371
// for i := 1 to list do
19727: LD_ADDR_VAR 0 1
19731: PUSH
19732: DOUBLE
19733: LD_INT 1
19735: DEC
19736: ST_TO_ADDR
19737: LD_VAR 0 3
19741: PUSH
19742: FOR_TO
19743: IFFALSE 20369
// begin depot := list [ i ] [ 2 ] ;
19745: LD_ADDR_VAR 0 8
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_VAR 0 1
19759: ARRAY
19760: PUSH
19761: LD_INT 2
19763: ARRAY
19764: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19765: LD_ADDR_VAR 0 5
19769: PUSH
19770: LD_VAR 0 3
19774: PUSH
19775: LD_VAR 0 1
19779: ARRAY
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19785: LD_VAR 0 8
19789: PPUSH
19790: CALL_OW 301
19794: PUSH
19795: LD_VAR 0 5
19799: PUSH
19800: LD_VAR 0 8
19804: PPUSH
19805: CALL_OW 255
19809: NONEQUAL
19810: OR
19811: IFFALSE 19840
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19813: LD_ADDR_EXP 83
19817: PUSH
19818: LD_EXP 83
19822: PPUSH
19823: LD_VAR 0 8
19827: PPUSH
19828: LD_INT 0
19830: PPUSH
19831: CALL_OW 1
19835: ST_TO_ADDR
// exit ;
19836: POP
19837: POP
19838: GO 20371
// end ; x := list [ i ] [ 3 ] ;
19840: LD_ADDR_VAR 0 6
19844: PUSH
19845: LD_VAR 0 3
19849: PUSH
19850: LD_VAR 0 1
19854: ARRAY
19855: PUSH
19856: LD_INT 3
19858: ARRAY
19859: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19860: LD_ADDR_VAR 0 7
19864: PUSH
19865: LD_VAR 0 3
19869: PUSH
19870: LD_VAR 0 1
19874: ARRAY
19875: PUSH
19876: LD_INT 4
19878: ARRAY
19879: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19880: LD_ADDR_VAR 0 9
19884: PUSH
19885: LD_VAR 0 6
19889: PPUSH
19890: LD_VAR 0 7
19894: PPUSH
19895: LD_INT 16
19897: PPUSH
19898: CALL 65468 0 3
19902: ST_TO_ADDR
// if not cratesNearbyPoint then
19903: LD_VAR 0 9
19907: NOT
19908: IFFALSE 19914
// exit ;
19910: POP
19911: POP
19912: GO 20371
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19914: LD_ADDR_VAR 0 4
19918: PUSH
19919: LD_INT 22
19921: PUSH
19922: LD_VAR 0 5
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 3
19933: PUSH
19934: LD_INT 60
19936: PUSH
19937: EMPTY
19938: LIST
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 91
19946: PUSH
19947: LD_VAR 0 8
19951: PUSH
19952: LD_INT 6
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: LD_INT 25
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 25
19975: PUSH
19976: LD_INT 16
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: PUSH
19999: LD_VAR 0 8
20003: PPUSH
20004: CALL_OW 313
20008: PPUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 60
20014: PUSH
20015: EMPTY
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 2
20024: PUSH
20025: LD_INT 25
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 25
20037: PUSH
20038: LD_INT 16
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 72
20058: UNION
20059: ST_TO_ADDR
// if tmp then
20060: LD_VAR 0 4
20064: IFFALSE 20144
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20066: LD_ADDR_VAR 0 4
20070: PUSH
20071: LD_VAR 0 4
20075: PPUSH
20076: LD_INT 3
20078: PPUSH
20079: CALL 63437 0 2
20083: ST_TO_ADDR
// for j in tmp do
20084: LD_ADDR_VAR 0 2
20088: PUSH
20089: LD_VAR 0 4
20093: PUSH
20094: FOR_IN
20095: IFFALSE 20138
// begin if IsInUnit ( j ) then
20097: LD_VAR 0 2
20101: PPUSH
20102: CALL_OW 310
20106: IFFALSE 20117
// ComExit ( j ) ;
20108: LD_VAR 0 2
20112: PPUSH
20113: CALL 63520 0 1
// AddComCollect ( j , x , y ) ;
20117: LD_VAR 0 2
20121: PPUSH
20122: LD_VAR 0 6
20126: PPUSH
20127: LD_VAR 0 7
20131: PPUSH
20132: CALL_OW 177
// end ;
20136: GO 20094
20138: POP
20139: POP
// exit ;
20140: POP
20141: POP
20142: GO 20371
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20144: LD_ADDR_VAR 0 4
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_VAR 0 5
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 91
20163: PUSH
20164: LD_VAR 0 8
20168: PUSH
20169: LD_INT 8
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 34
20182: PUSH
20183: LD_INT 12
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 34
20192: PUSH
20193: LD_INT 51
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 34
20202: PUSH
20203: LD_INT 32
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 89
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: ST_TO_ADDR
// if tmp then
20237: LD_VAR 0 4
20241: IFFALSE 20367
// begin for j in tmp do
20243: LD_ADDR_VAR 0 2
20247: PUSH
20248: LD_VAR 0 4
20252: PUSH
20253: FOR_IN
20254: IFFALSE 20365
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 262
20265: PUSH
20266: LD_INT 3
20268: EQUAL
20269: PUSH
20270: LD_VAR 0 2
20274: PPUSH
20275: CALL_OW 261
20279: PUSH
20280: LD_INT 20
20282: GREATER
20283: OR
20284: PUSH
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL_OW 314
20294: NOT
20295: AND
20296: PUSH
20297: LD_VAR 0 2
20301: PPUSH
20302: CALL_OW 263
20306: PUSH
20307: LD_INT 1
20309: NONEQUAL
20310: PUSH
20311: LD_VAR 0 2
20315: PPUSH
20316: CALL_OW 311
20320: OR
20321: AND
20322: IFFALSE 20363
// begin ComCollect ( j , x , y ) ;
20324: LD_VAR 0 2
20328: PPUSH
20329: LD_VAR 0 6
20333: PPUSH
20334: LD_VAR 0 7
20338: PPUSH
20339: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 8
20352: PPUSH
20353: CALL_OW 172
// exit ;
20357: POP
20358: POP
20359: POP
20360: POP
20361: GO 20371
// end ;
20363: GO 20253
20365: POP
20366: POP
// end ; end ;
20367: GO 19742
20369: POP
20370: POP
// end ; end_of_file
20371: PPOPN 9
20373: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20374: LD_VAR 0 1
20378: PUSH
20379: LD_INT 200
20381: DOUBLE
20382: GREATEREQUAL
20383: IFFALSE 20391
20385: LD_INT 299
20387: DOUBLE
20388: LESSEQUAL
20389: IFTRUE 20393
20391: GO 20425
20393: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20394: LD_VAR 0 1
20398: PPUSH
20399: LD_VAR 0 2
20403: PPUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: LD_VAR 0 4
20413: PPUSH
20414: LD_VAR 0 5
20418: PPUSH
20419: CALL 20913 0 5
20423: GO 20502
20425: LD_INT 300
20427: DOUBLE
20428: GREATEREQUAL
20429: IFFALSE 20437
20431: LD_INT 399
20433: DOUBLE
20434: LESSEQUAL
20435: IFTRUE 20439
20437: GO 20501
20439: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20440: LD_VAR 0 1
20444: PPUSH
20445: LD_VAR 0 2
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_VAR 0 4
20459: PPUSH
20460: LD_VAR 0 5
20464: PPUSH
20465: LD_VAR 0 6
20469: PPUSH
20470: LD_VAR 0 7
20474: PPUSH
20475: LD_VAR 0 8
20479: PPUSH
20480: LD_VAR 0 9
20484: PPUSH
20485: LD_VAR 0 10
20489: PPUSH
20490: LD_VAR 0 11
20494: PPUSH
20495: CALL 17075 0 11
20499: GO 20502
20501: POP
// end ;
20502: PPOPN 11
20504: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20505: LD_VAR 0 1
20509: PPUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: LD_VAR 0 4
20524: PPUSH
20525: LD_VAR 0 5
20529: PPUSH
20530: CALL 20649 0 5
// end ; end_of_file
20534: PPOPN 5
20536: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 264
20552: PUSH
20553: LD_INT 91
20555: EQUAL
20556: IFFALSE 20628
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20558: LD_INT 68
20560: PPUSH
20561: LD_VAR 0 1
20565: PPUSH
20566: CALL_OW 255
20570: PPUSH
20571: CALL_OW 321
20575: PUSH
20576: LD_INT 2
20578: EQUAL
20579: IFFALSE 20591
// eff := 70 else
20581: LD_ADDR_VAR 0 4
20585: PUSH
20586: LD_INT 70
20588: ST_TO_ADDR
20589: GO 20599
// eff := 30 ;
20591: LD_ADDR_VAR 0 4
20595: PUSH
20596: LD_INT 30
20598: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 250
20608: PPUSH
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL_OW 251
20618: PPUSH
20619: LD_VAR 0 4
20623: PPUSH
20624: CALL_OW 495
// end ; end ;
20628: LD_VAR 0 2
20632: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20633: LD_INT 0
20635: PPUSH
// end ;
20636: LD_VAR 0 4
20640: RET
// export function SOS_Command ( cmd ) ; begin
20641: LD_INT 0
20643: PPUSH
// end ;
20644: LD_VAR 0 2
20648: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20649: LD_INT 0
20651: PPUSH
// end ;
20652: LD_VAR 0 6
20656: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20657: LD_INT 0
20659: PPUSH
20660: PPUSH
// if not vehicle or not factory then
20661: LD_VAR 0 1
20665: NOT
20666: PUSH
20667: LD_VAR 0 2
20671: NOT
20672: OR
20673: IFFALSE 20677
// exit ;
20675: GO 20908
// if factoryWaypoints >= factory then
20677: LD_EXP 82
20681: PUSH
20682: LD_VAR 0 2
20686: GREATEREQUAL
20687: IFFALSE 20908
// if factoryWaypoints [ factory ] then
20689: LD_EXP 82
20693: PUSH
20694: LD_VAR 0 2
20698: ARRAY
20699: IFFALSE 20908
// begin if GetControl ( vehicle ) = control_manual then
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 263
20710: PUSH
20711: LD_INT 1
20713: EQUAL
20714: IFFALSE 20795
// begin driver := IsDrivenBy ( vehicle ) ;
20716: LD_ADDR_VAR 0 4
20720: PUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 311
20730: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20731: LD_VAR 0 4
20735: PPUSH
20736: LD_EXP 82
20740: PUSH
20741: LD_VAR 0 2
20745: ARRAY
20746: PUSH
20747: LD_INT 3
20749: ARRAY
20750: PPUSH
20751: LD_EXP 82
20755: PUSH
20756: LD_VAR 0 2
20760: ARRAY
20761: PUSH
20762: LD_INT 4
20764: ARRAY
20765: PPUSH
20766: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20770: LD_VAR 0 4
20774: PPUSH
20775: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20779: LD_VAR 0 4
20783: PPUSH
20784: LD_VAR 0 2
20788: PPUSH
20789: CALL_OW 180
// end else
20793: GO 20908
// if GetControl ( vehicle ) = control_remote then
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 263
20804: PUSH
20805: LD_INT 2
20807: EQUAL
20808: IFFALSE 20869
// begin wait ( 0 0$2 ) ;
20810: LD_INT 70
20812: PPUSH
20813: CALL_OW 67
// if Connect ( vehicle ) then
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL 33739 0 1
20826: IFFALSE 20867
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_EXP 82
20837: PUSH
20838: LD_VAR 0 2
20842: ARRAY
20843: PUSH
20844: LD_INT 3
20846: ARRAY
20847: PPUSH
20848: LD_EXP 82
20852: PUSH
20853: LD_VAR 0 2
20857: ARRAY
20858: PUSH
20859: LD_INT 4
20861: ARRAY
20862: PPUSH
20863: CALL_OW 171
// end else
20867: GO 20908
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20869: LD_VAR 0 1
20873: PPUSH
20874: LD_EXP 82
20878: PUSH
20879: LD_VAR 0 2
20883: ARRAY
20884: PUSH
20885: LD_INT 3
20887: ARRAY
20888: PPUSH
20889: LD_EXP 82
20893: PUSH
20894: LD_VAR 0 2
20898: ARRAY
20899: PUSH
20900: LD_INT 4
20902: ARRAY
20903: PPUSH
20904: CALL_OW 171
// end ; end ;
20908: LD_VAR 0 3
20912: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20913: LD_INT 0
20915: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20916: LD_VAR 0 1
20920: PUSH
20921: LD_INT 250
20923: EQUAL
20924: PUSH
20925: LD_VAR 0 2
20929: PPUSH
20930: CALL_OW 264
20934: PUSH
20935: LD_INT 81
20937: EQUAL
20938: AND
20939: IFFALSE 20960
// MinerPlaceMine ( unit , x , y ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: LD_VAR 0 4
20950: PPUSH
20951: LD_VAR 0 5
20955: PPUSH
20956: CALL 23950 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20960: LD_VAR 0 1
20964: PUSH
20965: LD_INT 251
20967: EQUAL
20968: PUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 264
20978: PUSH
20979: LD_INT 81
20981: EQUAL
20982: AND
20983: IFFALSE 21004
// MinerDetonateMine ( unit , x , y ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_VAR 0 4
20994: PPUSH
20995: LD_VAR 0 5
20999: PPUSH
21000: CALL 24225 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21004: LD_VAR 0 1
21008: PUSH
21009: LD_INT 252
21011: EQUAL
21012: PUSH
21013: LD_VAR 0 2
21017: PPUSH
21018: CALL_OW 264
21022: PUSH
21023: LD_INT 81
21025: EQUAL
21026: AND
21027: IFFALSE 21048
// MinerCreateMinefield ( unit , x , y ) ;
21029: LD_VAR 0 2
21033: PPUSH
21034: LD_VAR 0 4
21038: PPUSH
21039: LD_VAR 0 5
21043: PPUSH
21044: CALL 24642 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21048: LD_VAR 0 1
21052: PUSH
21053: LD_INT 253
21055: EQUAL
21056: PUSH
21057: LD_VAR 0 2
21061: PPUSH
21062: CALL_OW 257
21066: PUSH
21067: LD_INT 5
21069: EQUAL
21070: AND
21071: IFFALSE 21092
// ComBinocular ( unit , x , y ) ;
21073: LD_VAR 0 2
21077: PPUSH
21078: LD_VAR 0 4
21082: PPUSH
21083: LD_VAR 0 5
21087: PPUSH
21088: CALL 25011 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21092: LD_VAR 0 1
21096: PUSH
21097: LD_INT 254
21099: EQUAL
21100: PUSH
21101: LD_VAR 0 2
21105: PPUSH
21106: CALL_OW 264
21110: PUSH
21111: LD_INT 99
21113: EQUAL
21114: AND
21115: PUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: CALL_OW 263
21125: PUSH
21126: LD_INT 3
21128: EQUAL
21129: AND
21130: IFFALSE 21146
// HackDestroyVehicle ( unit , selectedUnit ) ;
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: CALL 23314 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21146: LD_VAR 0 1
21150: PUSH
21151: LD_INT 255
21153: EQUAL
21154: PUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: CALL_OW 264
21164: PUSH
21165: LD_INT 14
21167: PUSH
21168: LD_INT 53
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: IN
21175: AND
21176: PUSH
21177: LD_VAR 0 4
21181: PPUSH
21182: LD_VAR 0 5
21186: PPUSH
21187: CALL_OW 488
21191: AND
21192: IFFALSE 21216
// CutTreeXYR ( unit , x , y , 12 ) ;
21194: LD_VAR 0 2
21198: PPUSH
21199: LD_VAR 0 4
21203: PPUSH
21204: LD_VAR 0 5
21208: PPUSH
21209: LD_INT 12
21211: PPUSH
21212: CALL 21311 0 4
// if cmd = 256 then
21216: LD_VAR 0 1
21220: PUSH
21221: LD_INT 256
21223: EQUAL
21224: IFFALSE 21245
// SetFactoryWaypoint ( unit , x , y ) ;
21226: LD_VAR 0 2
21230: PPUSH
21231: LD_VAR 0 4
21235: PPUSH
21236: LD_VAR 0 5
21240: PPUSH
21241: CALL 19063 0 3
// if cmd = 257 then
21245: LD_VAR 0 1
21249: PUSH
21250: LD_INT 257
21252: EQUAL
21253: IFFALSE 21274
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21255: LD_VAR 0 2
21259: PPUSH
21260: LD_VAR 0 4
21264: PPUSH
21265: LD_VAR 0 5
21269: PPUSH
21270: CALL 19425 0 3
// if cmd = 258 then
21274: LD_VAR 0 1
21278: PUSH
21279: LD_INT 258
21281: EQUAL
21282: IFFALSE 21306
// BurnTreeXYR ( unit , x , y , 8 ) ;
21284: LD_VAR 0 2
21288: PPUSH
21289: LD_VAR 0 4
21293: PPUSH
21294: LD_VAR 0 5
21298: PPUSH
21299: LD_INT 8
21301: PPUSH
21302: CALL 21705 0 4
// end ;
21306: LD_VAR 0 6
21310: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 302
21331: NOT
21332: PUSH
21333: LD_VAR 0 2
21337: PPUSH
21338: LD_VAR 0 3
21342: PPUSH
21343: CALL_OW 488
21347: NOT
21348: OR
21349: PUSH
21350: LD_VAR 0 4
21354: NOT
21355: OR
21356: IFFALSE 21360
// exit ;
21358: GO 21700
// list := [ ] ;
21360: LD_ADDR_VAR 0 13
21364: PUSH
21365: EMPTY
21366: ST_TO_ADDR
// if x - r < 0 then
21367: LD_VAR 0 2
21371: PUSH
21372: LD_VAR 0 4
21376: MINUS
21377: PUSH
21378: LD_INT 0
21380: LESS
21381: IFFALSE 21393
// min_x := 0 else
21383: LD_ADDR_VAR 0 7
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
21391: GO 21409
// min_x := x - r ;
21393: LD_ADDR_VAR 0 7
21397: PUSH
21398: LD_VAR 0 2
21402: PUSH
21403: LD_VAR 0 4
21407: MINUS
21408: ST_TO_ADDR
// if y - r < 0 then
21409: LD_VAR 0 3
21413: PUSH
21414: LD_VAR 0 4
21418: MINUS
21419: PUSH
21420: LD_INT 0
21422: LESS
21423: IFFALSE 21435
// min_y := 0 else
21425: LD_ADDR_VAR 0 8
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
21433: GO 21451
// min_y := y - r ;
21435: LD_ADDR_VAR 0 8
21439: PUSH
21440: LD_VAR 0 3
21444: PUSH
21445: LD_VAR 0 4
21449: MINUS
21450: ST_TO_ADDR
// max_x := x + r ;
21451: LD_ADDR_VAR 0 9
21455: PUSH
21456: LD_VAR 0 2
21460: PUSH
21461: LD_VAR 0 4
21465: PLUS
21466: ST_TO_ADDR
// max_y := y + r ;
21467: LD_ADDR_VAR 0 10
21471: PUSH
21472: LD_VAR 0 3
21476: PUSH
21477: LD_VAR 0 4
21481: PLUS
21482: ST_TO_ADDR
// for _x = min_x to max_x do
21483: LD_ADDR_VAR 0 11
21487: PUSH
21488: DOUBLE
21489: LD_VAR 0 7
21493: DEC
21494: ST_TO_ADDR
21495: LD_VAR 0 9
21499: PUSH
21500: FOR_TO
21501: IFFALSE 21618
// for _y = min_y to max_y do
21503: LD_ADDR_VAR 0 12
21507: PUSH
21508: DOUBLE
21509: LD_VAR 0 8
21513: DEC
21514: ST_TO_ADDR
21515: LD_VAR 0 10
21519: PUSH
21520: FOR_TO
21521: IFFALSE 21614
// begin if not ValidHex ( _x , _y ) then
21523: LD_VAR 0 11
21527: PPUSH
21528: LD_VAR 0 12
21532: PPUSH
21533: CALL_OW 488
21537: NOT
21538: IFFALSE 21542
// continue ;
21540: GO 21520
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21542: LD_VAR 0 11
21546: PPUSH
21547: LD_VAR 0 12
21551: PPUSH
21552: CALL_OW 351
21556: PUSH
21557: LD_VAR 0 11
21561: PPUSH
21562: LD_VAR 0 12
21566: PPUSH
21567: CALL_OW 554
21571: AND
21572: IFFALSE 21612
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21574: LD_ADDR_VAR 0 13
21578: PUSH
21579: LD_VAR 0 13
21583: PPUSH
21584: LD_VAR 0 13
21588: PUSH
21589: LD_INT 1
21591: PLUS
21592: PPUSH
21593: LD_VAR 0 11
21597: PUSH
21598: LD_VAR 0 12
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 2
21611: ST_TO_ADDR
// end ;
21612: GO 21520
21614: POP
21615: POP
21616: GO 21500
21618: POP
21619: POP
// if not list then
21620: LD_VAR 0 13
21624: NOT
21625: IFFALSE 21629
// exit ;
21627: GO 21700
// for i in list do
21629: LD_ADDR_VAR 0 6
21633: PUSH
21634: LD_VAR 0 13
21638: PUSH
21639: FOR_IN
21640: IFFALSE 21698
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21642: LD_VAR 0 1
21646: PPUSH
21647: LD_STRING M
21649: PUSH
21650: LD_VAR 0 6
21654: PUSH
21655: LD_INT 1
21657: ARRAY
21658: PUSH
21659: LD_VAR 0 6
21663: PUSH
21664: LD_INT 2
21666: ARRAY
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: PPUSH
21692: CALL_OW 447
21696: GO 21639
21698: POP
21699: POP
// end ;
21700: LD_VAR 0 5
21704: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21705: LD_INT 0
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 302
21726: NOT
21727: PUSH
21728: LD_VAR 0 2
21732: PPUSH
21733: LD_VAR 0 3
21737: PPUSH
21738: CALL_OW 488
21742: NOT
21743: OR
21744: PUSH
21745: LD_VAR 0 4
21749: NOT
21750: OR
21751: IFFALSE 21755
// exit ;
21753: GO 22268
// list := [ ] ;
21755: LD_ADDR_VAR 0 13
21759: PUSH
21760: EMPTY
21761: ST_TO_ADDR
// if x - r < 0 then
21762: LD_VAR 0 2
21766: PUSH
21767: LD_VAR 0 4
21771: MINUS
21772: PUSH
21773: LD_INT 0
21775: LESS
21776: IFFALSE 21788
// min_x := 0 else
21778: LD_ADDR_VAR 0 7
21782: PUSH
21783: LD_INT 0
21785: ST_TO_ADDR
21786: GO 21804
// min_x := x - r ;
21788: LD_ADDR_VAR 0 7
21792: PUSH
21793: LD_VAR 0 2
21797: PUSH
21798: LD_VAR 0 4
21802: MINUS
21803: ST_TO_ADDR
// if y - r < 0 then
21804: LD_VAR 0 3
21808: PUSH
21809: LD_VAR 0 4
21813: MINUS
21814: PUSH
21815: LD_INT 0
21817: LESS
21818: IFFALSE 21830
// min_y := 0 else
21820: LD_ADDR_VAR 0 8
21824: PUSH
21825: LD_INT 0
21827: ST_TO_ADDR
21828: GO 21846
// min_y := y - r ;
21830: LD_ADDR_VAR 0 8
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_VAR 0 4
21844: MINUS
21845: ST_TO_ADDR
// max_x := x + r ;
21846: LD_ADDR_VAR 0 9
21850: PUSH
21851: LD_VAR 0 2
21855: PUSH
21856: LD_VAR 0 4
21860: PLUS
21861: ST_TO_ADDR
// max_y := y + r ;
21862: LD_ADDR_VAR 0 10
21866: PUSH
21867: LD_VAR 0 3
21871: PUSH
21872: LD_VAR 0 4
21876: PLUS
21877: ST_TO_ADDR
// for _x = min_x to max_x do
21878: LD_ADDR_VAR 0 11
21882: PUSH
21883: DOUBLE
21884: LD_VAR 0 7
21888: DEC
21889: ST_TO_ADDR
21890: LD_VAR 0 9
21894: PUSH
21895: FOR_TO
21896: IFFALSE 22013
// for _y = min_y to max_y do
21898: LD_ADDR_VAR 0 12
21902: PUSH
21903: DOUBLE
21904: LD_VAR 0 8
21908: DEC
21909: ST_TO_ADDR
21910: LD_VAR 0 10
21914: PUSH
21915: FOR_TO
21916: IFFALSE 22009
// begin if not ValidHex ( _x , _y ) then
21918: LD_VAR 0 11
21922: PPUSH
21923: LD_VAR 0 12
21927: PPUSH
21928: CALL_OW 488
21932: NOT
21933: IFFALSE 21937
// continue ;
21935: GO 21915
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21937: LD_VAR 0 11
21941: PPUSH
21942: LD_VAR 0 12
21946: PPUSH
21947: CALL_OW 351
21951: PUSH
21952: LD_VAR 0 11
21956: PPUSH
21957: LD_VAR 0 12
21961: PPUSH
21962: CALL_OW 554
21966: AND
21967: IFFALSE 22007
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21969: LD_ADDR_VAR 0 13
21973: PUSH
21974: LD_VAR 0 13
21978: PPUSH
21979: LD_VAR 0 13
21983: PUSH
21984: LD_INT 1
21986: PLUS
21987: PPUSH
21988: LD_VAR 0 11
21992: PUSH
21993: LD_VAR 0 12
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PPUSH
22002: CALL_OW 2
22006: ST_TO_ADDR
// end ;
22007: GO 21915
22009: POP
22010: POP
22011: GO 21895
22013: POP
22014: POP
// if not list then
22015: LD_VAR 0 13
22019: NOT
22020: IFFALSE 22024
// exit ;
22022: GO 22268
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22024: LD_ADDR_VAR 0 13
22028: PUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_VAR 0 13
22038: PPUSH
22039: LD_INT 1
22041: PPUSH
22042: LD_INT 1
22044: PPUSH
22045: CALL 30881 0 4
22049: ST_TO_ADDR
// ComStop ( flame ) ;
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 141
// for i in list do
22059: LD_ADDR_VAR 0 6
22063: PUSH
22064: LD_VAR 0 13
22068: PUSH
22069: FOR_IN
22070: IFFALSE 22101
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22072: LD_VAR 0 1
22076: PPUSH
22077: LD_VAR 0 6
22081: PUSH
22082: LD_INT 1
22084: ARRAY
22085: PPUSH
22086: LD_VAR 0 6
22090: PUSH
22091: LD_INT 2
22093: ARRAY
22094: PPUSH
22095: CALL_OW 176
22099: GO 22069
22101: POP
22102: POP
// repeat wait ( 0 0$1 ) ;
22103: LD_INT 35
22105: PPUSH
22106: CALL_OW 67
// task := GetTaskList ( flame ) ;
22110: LD_ADDR_VAR 0 14
22114: PUSH
22115: LD_VAR 0 1
22119: PPUSH
22120: CALL_OW 437
22124: ST_TO_ADDR
// if not task then
22125: LD_VAR 0 14
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22268
// if task [ 1 ] [ 1 ] <> | then
22134: LD_VAR 0 14
22138: PUSH
22139: LD_INT 1
22141: ARRAY
22142: PUSH
22143: LD_INT 1
22145: ARRAY
22146: PUSH
22147: LD_STRING |
22149: NONEQUAL
22150: IFFALSE 22154
// exit ;
22152: GO 22268
// _x := task [ 1 ] [ 2 ] ;
22154: LD_ADDR_VAR 0 11
22158: PUSH
22159: LD_VAR 0 14
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PUSH
22168: LD_INT 2
22170: ARRAY
22171: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22172: LD_ADDR_VAR 0 12
22176: PUSH
22177: LD_VAR 0 14
22181: PUSH
22182: LD_INT 1
22184: ARRAY
22185: PUSH
22186: LD_INT 3
22188: ARRAY
22189: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22190: LD_VAR 0 11
22194: PPUSH
22195: LD_VAR 0 12
22199: PPUSH
22200: CALL_OW 351
22204: NOT
22205: PUSH
22206: LD_VAR 0 11
22210: PPUSH
22211: LD_VAR 0 12
22215: PPUSH
22216: CALL_OW 554
22220: NOT
22221: OR
22222: IFFALSE 22256
// begin task := Delete ( task , 1 ) ;
22224: LD_ADDR_VAR 0 14
22228: PUSH
22229: LD_VAR 0 14
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL_OW 3
22241: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22242: LD_VAR 0 1
22246: PPUSH
22247: LD_VAR 0 14
22251: PPUSH
22252: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22256: LD_VAR 0 1
22260: PPUSH
22261: CALL_OW 314
22265: NOT
22266: IFFALSE 22103
// end ;
22268: LD_VAR 0 5
22272: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22273: LD_EXP 85
22277: NOT
22278: IFFALSE 22328
22280: GO 22282
22282: DISABLE
// begin initHack := true ;
22283: LD_ADDR_EXP 85
22287: PUSH
22288: LD_INT 1
22290: ST_TO_ADDR
// hackTanks := [ ] ;
22291: LD_ADDR_EXP 86
22295: PUSH
22296: EMPTY
22297: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22298: LD_ADDR_EXP 87
22302: PUSH
22303: EMPTY
22304: ST_TO_ADDR
// hackLimit := 3 ;
22305: LD_ADDR_EXP 88
22309: PUSH
22310: LD_INT 3
22312: ST_TO_ADDR
// hackDist := 12 ;
22313: LD_ADDR_EXP 89
22317: PUSH
22318: LD_INT 12
22320: ST_TO_ADDR
// hackCounter := [ ] ;
22321: LD_ADDR_EXP 90
22325: PUSH
22326: EMPTY
22327: ST_TO_ADDR
// end ;
22328: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22329: LD_EXP 85
22333: PUSH
22334: LD_INT 34
22336: PUSH
22337: LD_INT 99
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 69
22348: AND
22349: IFFALSE 22602
22351: GO 22353
22353: DISABLE
22354: LD_INT 0
22356: PPUSH
22357: PPUSH
// begin enable ;
22358: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22359: LD_ADDR_VAR 0 1
22363: PUSH
22364: LD_INT 34
22366: PUSH
22367: LD_INT 99
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PPUSH
22374: CALL_OW 69
22378: PUSH
22379: FOR_IN
22380: IFFALSE 22600
// begin if not i in hackTanks then
22382: LD_VAR 0 1
22386: PUSH
22387: LD_EXP 86
22391: IN
22392: NOT
22393: IFFALSE 22476
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22395: LD_ADDR_EXP 86
22399: PUSH
22400: LD_EXP 86
22404: PPUSH
22405: LD_EXP 86
22409: PUSH
22410: LD_INT 1
22412: PLUS
22413: PPUSH
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 1
22423: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22424: LD_ADDR_EXP 87
22428: PUSH
22429: LD_EXP 87
22433: PPUSH
22434: LD_EXP 87
22438: PUSH
22439: LD_INT 1
22441: PLUS
22442: PPUSH
22443: EMPTY
22444: PPUSH
22445: CALL_OW 1
22449: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22450: LD_ADDR_EXP 90
22454: PUSH
22455: LD_EXP 90
22459: PPUSH
22460: LD_EXP 90
22464: PUSH
22465: LD_INT 1
22467: PLUS
22468: PPUSH
22469: EMPTY
22470: PPUSH
22471: CALL_OW 1
22475: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 302
22485: NOT
22486: IFFALSE 22499
// begin HackUnlinkAll ( i ) ;
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL 22605 0 1
// continue ;
22497: GO 22379
// end ; HackCheckCapturedStatus ( i ) ;
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL 23048 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22508: LD_ADDR_VAR 0 2
22512: PUSH
22513: LD_INT 81
22515: PUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 255
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 33
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 91
22542: PUSH
22543: LD_VAR 0 1
22547: PUSH
22548: LD_EXP 89
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 50
22560: PUSH
22561: EMPTY
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: PPUSH
22570: CALL_OW 69
22574: ST_TO_ADDR
// if not tmp then
22575: LD_VAR 0 2
22579: NOT
22580: IFFALSE 22584
// continue ;
22582: GO 22379
// HackLink ( i , tmp ) ;
22584: LD_VAR 0 1
22588: PPUSH
22589: LD_VAR 0 2
22593: PPUSH
22594: CALL 22741 0 2
// end ;
22598: GO 22379
22600: POP
22601: POP
// end ;
22602: PPOPN 2
22604: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22605: LD_INT 0
22607: PPUSH
22608: PPUSH
22609: PPUSH
// if not hack in hackTanks then
22610: LD_VAR 0 1
22614: PUSH
22615: LD_EXP 86
22619: IN
22620: NOT
22621: IFFALSE 22625
// exit ;
22623: GO 22736
// index := GetElementIndex ( hackTanks , hack ) ;
22625: LD_ADDR_VAR 0 4
22629: PUSH
22630: LD_EXP 86
22634: PPUSH
22635: LD_VAR 0 1
22639: PPUSH
22640: CALL 30178 0 2
22644: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22645: LD_EXP 87
22649: PUSH
22650: LD_VAR 0 4
22654: ARRAY
22655: IFFALSE 22736
// begin for i in hackTanksCaptured [ index ] do
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_EXP 87
22666: PUSH
22667: LD_VAR 0 4
22671: ARRAY
22672: PUSH
22673: FOR_IN
22674: IFFALSE 22700
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22676: LD_VAR 0 3
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: PPUSH
22685: LD_VAR 0 3
22689: PUSH
22690: LD_INT 2
22692: ARRAY
22693: PPUSH
22694: CALL_OW 235
22698: GO 22673
22700: POP
22701: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22702: LD_ADDR_EXP 87
22706: PUSH
22707: LD_EXP 87
22711: PPUSH
22712: LD_VAR 0 4
22716: PPUSH
22717: EMPTY
22718: PPUSH
22719: CALL_OW 1
22723: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22724: LD_VAR 0 1
22728: PPUSH
22729: LD_INT 0
22731: PPUSH
22732: CALL_OW 505
// end ; end ;
22736: LD_VAR 0 2
22740: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22741: LD_INT 0
22743: PPUSH
22744: PPUSH
22745: PPUSH
// if not hack in hackTanks or not vehicles then
22746: LD_VAR 0 1
22750: PUSH
22751: LD_EXP 86
22755: IN
22756: NOT
22757: PUSH
22758: LD_VAR 0 2
22762: NOT
22763: OR
22764: IFFALSE 22768
// exit ;
22766: GO 23043
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22768: LD_ADDR_VAR 0 2
22772: PUSH
22773: LD_VAR 0 1
22777: PPUSH
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: CALL 30828 0 4
22793: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_EXP 86
22803: PPUSH
22804: LD_VAR 0 1
22808: PPUSH
22809: CALL 30178 0 2
22813: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22814: LD_EXP 87
22818: PUSH
22819: LD_VAR 0 5
22823: ARRAY
22824: PUSH
22825: LD_EXP 88
22829: LESS
22830: IFFALSE 23019
// begin for i := 1 to vehicles do
22832: LD_ADDR_VAR 0 4
22836: PUSH
22837: DOUBLE
22838: LD_INT 1
22840: DEC
22841: ST_TO_ADDR
22842: LD_VAR 0 2
22846: PUSH
22847: FOR_TO
22848: IFFALSE 23017
// begin if hackTanksCaptured [ index ] = hackLimit then
22850: LD_EXP 87
22854: PUSH
22855: LD_VAR 0 5
22859: ARRAY
22860: PUSH
22861: LD_EXP 88
22865: EQUAL
22866: IFFALSE 22870
// break ;
22868: GO 23017
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22870: LD_ADDR_EXP 90
22874: PUSH
22875: LD_EXP 90
22879: PPUSH
22880: LD_VAR 0 5
22884: PPUSH
22885: LD_EXP 90
22889: PUSH
22890: LD_VAR 0 5
22894: ARRAY
22895: PUSH
22896: LD_INT 1
22898: PLUS
22899: PPUSH
22900: CALL_OW 1
22904: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22905: LD_ADDR_EXP 87
22909: PUSH
22910: LD_EXP 87
22914: PPUSH
22915: LD_VAR 0 5
22919: PUSH
22920: LD_EXP 87
22924: PUSH
22925: LD_VAR 0 5
22929: ARRAY
22930: PUSH
22931: LD_INT 1
22933: PLUS
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PPUSH
22939: LD_VAR 0 2
22943: PUSH
22944: LD_VAR 0 4
22948: ARRAY
22949: PUSH
22950: LD_VAR 0 2
22954: PUSH
22955: LD_VAR 0 4
22959: ARRAY
22960: PPUSH
22961: CALL_OW 255
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL 30393 0 3
22974: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22975: LD_VAR 0 2
22979: PUSH
22980: LD_VAR 0 4
22984: ARRAY
22985: PPUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 255
22995: PPUSH
22996: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23000: LD_VAR 0 2
23004: PUSH
23005: LD_VAR 0 4
23009: ARRAY
23010: PPUSH
23011: CALL_OW 141
// end ;
23015: GO 22847
23017: POP
23018: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23019: LD_VAR 0 1
23023: PPUSH
23024: LD_EXP 87
23028: PUSH
23029: LD_VAR 0 5
23033: ARRAY
23034: PUSH
23035: LD_INT 0
23037: PLUS
23038: PPUSH
23039: CALL_OW 505
// end ;
23043: LD_VAR 0 3
23047: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
23052: PPUSH
23053: PPUSH
// if not hack in hackTanks then
23054: LD_VAR 0 1
23058: PUSH
23059: LD_EXP 86
23063: IN
23064: NOT
23065: IFFALSE 23069
// exit ;
23067: GO 23309
// index := GetElementIndex ( hackTanks , hack ) ;
23069: LD_ADDR_VAR 0 4
23073: PUSH
23074: LD_EXP 86
23078: PPUSH
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL 30178 0 2
23088: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23089: LD_ADDR_VAR 0 3
23093: PUSH
23094: DOUBLE
23095: LD_EXP 87
23099: PUSH
23100: LD_VAR 0 4
23104: ARRAY
23105: INC
23106: ST_TO_ADDR
23107: LD_INT 1
23109: PUSH
23110: FOR_DOWNTO
23111: IFFALSE 23283
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23113: LD_ADDR_VAR 0 5
23117: PUSH
23118: LD_EXP 87
23122: PUSH
23123: LD_VAR 0 4
23127: ARRAY
23128: PUSH
23129: LD_VAR 0 3
23133: ARRAY
23134: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23135: LD_VAR 0 5
23139: PUSH
23140: LD_INT 1
23142: ARRAY
23143: PPUSH
23144: CALL_OW 302
23148: NOT
23149: PUSH
23150: LD_VAR 0 5
23154: PUSH
23155: LD_INT 1
23157: ARRAY
23158: PPUSH
23159: CALL_OW 255
23163: PUSH
23164: LD_VAR 0 1
23168: PPUSH
23169: CALL_OW 255
23173: NONEQUAL
23174: OR
23175: IFFALSE 23281
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23177: LD_VAR 0 5
23181: PUSH
23182: LD_INT 1
23184: ARRAY
23185: PPUSH
23186: CALL_OW 305
23190: PUSH
23191: LD_VAR 0 5
23195: PUSH
23196: LD_INT 1
23198: ARRAY
23199: PPUSH
23200: CALL_OW 255
23204: PUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL_OW 255
23214: EQUAL
23215: AND
23216: IFFALSE 23240
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23218: LD_VAR 0 5
23222: PUSH
23223: LD_INT 1
23225: ARRAY
23226: PPUSH
23227: LD_VAR 0 5
23231: PUSH
23232: LD_INT 2
23234: ARRAY
23235: PPUSH
23236: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23240: LD_ADDR_EXP 87
23244: PUSH
23245: LD_EXP 87
23249: PPUSH
23250: LD_VAR 0 4
23254: PPUSH
23255: LD_EXP 87
23259: PUSH
23260: LD_VAR 0 4
23264: ARRAY
23265: PPUSH
23266: LD_VAR 0 3
23270: PPUSH
23271: CALL_OW 3
23275: PPUSH
23276: CALL_OW 1
23280: ST_TO_ADDR
// end ; end ;
23281: GO 23110
23283: POP
23284: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23285: LD_VAR 0 1
23289: PPUSH
23290: LD_EXP 87
23294: PUSH
23295: LD_VAR 0 4
23299: ARRAY
23300: PUSH
23301: LD_INT 0
23303: PLUS
23304: PPUSH
23305: CALL_OW 505
// end ;
23309: LD_VAR 0 2
23313: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
23318: PPUSH
23319: PPUSH
// if not hack in hackTanks then
23320: LD_VAR 0 1
23324: PUSH
23325: LD_EXP 86
23329: IN
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23420
// index := GetElementIndex ( hackTanks , hack ) ;
23335: LD_ADDR_VAR 0 5
23339: PUSH
23340: LD_EXP 86
23344: PPUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL 30178 0 2
23354: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23355: LD_ADDR_VAR 0 4
23359: PUSH
23360: DOUBLE
23361: LD_INT 1
23363: DEC
23364: ST_TO_ADDR
23365: LD_EXP 87
23369: PUSH
23370: LD_VAR 0 5
23374: ARRAY
23375: PUSH
23376: FOR_TO
23377: IFFALSE 23418
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23379: LD_EXP 87
23383: PUSH
23384: LD_VAR 0 5
23388: ARRAY
23389: PUSH
23390: LD_VAR 0 4
23394: ARRAY
23395: PUSH
23396: LD_INT 1
23398: ARRAY
23399: PUSH
23400: LD_VAR 0 2
23404: EQUAL
23405: IFFALSE 23416
// KillUnit ( vehicle ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: CALL_OW 66
23416: GO 23376
23418: POP
23419: POP
// end ;
23420: LD_VAR 0 3
23424: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23425: LD_EXP 91
23429: NOT
23430: IFFALSE 23465
23432: GO 23434
23434: DISABLE
// begin initMiner := true ;
23435: LD_ADDR_EXP 91
23439: PUSH
23440: LD_INT 1
23442: ST_TO_ADDR
// minersList := [ ] ;
23443: LD_ADDR_EXP 92
23447: PUSH
23448: EMPTY
23449: ST_TO_ADDR
// minerMinesList := [ ] ;
23450: LD_ADDR_EXP 93
23454: PUSH
23455: EMPTY
23456: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23457: LD_ADDR_EXP 94
23461: PUSH
23462: LD_INT 5
23464: ST_TO_ADDR
// end ;
23465: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23466: LD_EXP 91
23470: PUSH
23471: LD_INT 34
23473: PUSH
23474: LD_INT 81
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PPUSH
23481: CALL_OW 69
23485: AND
23486: IFFALSE 23947
23488: GO 23490
23490: DISABLE
23491: LD_INT 0
23493: PPUSH
23494: PPUSH
23495: PPUSH
23496: PPUSH
// begin enable ;
23497: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23498: LD_ADDR_VAR 0 1
23502: PUSH
23503: LD_INT 34
23505: PUSH
23506: LD_INT 81
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23591
// begin if not i in minersList then
23521: LD_VAR 0 1
23525: PUSH
23526: LD_EXP 92
23530: IN
23531: NOT
23532: IFFALSE 23589
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23534: LD_ADDR_EXP 92
23538: PUSH
23539: LD_EXP 92
23543: PPUSH
23544: LD_EXP 92
23548: PUSH
23549: LD_INT 1
23551: PLUS
23552: PPUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 1
23562: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23563: LD_ADDR_EXP 93
23567: PUSH
23568: LD_EXP 93
23572: PPUSH
23573: LD_EXP 93
23577: PUSH
23578: LD_INT 1
23580: PLUS
23581: PPUSH
23582: EMPTY
23583: PPUSH
23584: CALL_OW 1
23588: ST_TO_ADDR
// end end ;
23589: GO 23518
23591: POP
23592: POP
// for i := minerMinesList downto 1 do
23593: LD_ADDR_VAR 0 1
23597: PUSH
23598: DOUBLE
23599: LD_EXP 93
23603: INC
23604: ST_TO_ADDR
23605: LD_INT 1
23607: PUSH
23608: FOR_DOWNTO
23609: IFFALSE 23945
// begin if IsLive ( minersList [ i ] ) then
23611: LD_EXP 92
23615: PUSH
23616: LD_VAR 0 1
23620: ARRAY
23621: PPUSH
23622: CALL_OW 300
23626: IFFALSE 23654
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23628: LD_EXP 92
23632: PUSH
23633: LD_VAR 0 1
23637: ARRAY
23638: PPUSH
23639: LD_EXP 93
23643: PUSH
23644: LD_VAR 0 1
23648: ARRAY
23649: PPUSH
23650: CALL_OW 505
// if not minerMinesList [ i ] then
23654: LD_EXP 93
23658: PUSH
23659: LD_VAR 0 1
23663: ARRAY
23664: NOT
23665: IFFALSE 23669
// continue ;
23667: GO 23608
// for j := minerMinesList [ i ] downto 1 do
23669: LD_ADDR_VAR 0 2
23673: PUSH
23674: DOUBLE
23675: LD_EXP 93
23679: PUSH
23680: LD_VAR 0 1
23684: ARRAY
23685: INC
23686: ST_TO_ADDR
23687: LD_INT 1
23689: PUSH
23690: FOR_DOWNTO
23691: IFFALSE 23941
// begin side := GetSide ( minersList [ i ] ) ;
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_EXP 92
23702: PUSH
23703: LD_VAR 0 1
23707: ARRAY
23708: PPUSH
23709: CALL_OW 255
23713: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23714: LD_ADDR_VAR 0 4
23718: PUSH
23719: LD_EXP 93
23723: PUSH
23724: LD_VAR 0 1
23728: ARRAY
23729: PUSH
23730: LD_VAR 0 2
23734: ARRAY
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: PPUSH
23740: LD_EXP 93
23744: PUSH
23745: LD_VAR 0 1
23749: ARRAY
23750: PUSH
23751: LD_VAR 0 2
23755: ARRAY
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PPUSH
23761: CALL_OW 428
23765: ST_TO_ADDR
// if not tmp then
23766: LD_VAR 0 4
23770: NOT
23771: IFFALSE 23775
// continue ;
23773: GO 23690
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23775: LD_VAR 0 4
23779: PUSH
23780: LD_INT 81
23782: PUSH
23783: LD_VAR 0 3
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: CALL_OW 69
23796: IN
23797: PUSH
23798: LD_EXP 93
23802: PUSH
23803: LD_VAR 0 1
23807: ARRAY
23808: PUSH
23809: LD_VAR 0 2
23813: ARRAY
23814: PUSH
23815: LD_INT 1
23817: ARRAY
23818: PPUSH
23819: LD_EXP 93
23823: PUSH
23824: LD_VAR 0 1
23828: ARRAY
23829: PUSH
23830: LD_VAR 0 2
23834: ARRAY
23835: PUSH
23836: LD_INT 2
23838: ARRAY
23839: PPUSH
23840: CALL_OW 458
23844: AND
23845: IFFALSE 23939
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23847: LD_EXP 93
23851: PUSH
23852: LD_VAR 0 1
23856: ARRAY
23857: PUSH
23858: LD_VAR 0 2
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PPUSH
23868: LD_EXP 93
23872: PUSH
23873: LD_VAR 0 1
23877: ARRAY
23878: PUSH
23879: LD_VAR 0 2
23883: ARRAY
23884: PUSH
23885: LD_INT 2
23887: ARRAY
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23898: LD_ADDR_EXP 93
23902: PUSH
23903: LD_EXP 93
23907: PPUSH
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_EXP 93
23917: PUSH
23918: LD_VAR 0 1
23922: ARRAY
23923: PPUSH
23924: LD_VAR 0 2
23928: PPUSH
23929: CALL_OW 3
23933: PPUSH
23934: CALL_OW 1
23938: ST_TO_ADDR
// end ; end ;
23939: GO 23690
23941: POP
23942: POP
// end ;
23943: GO 23608
23945: POP
23946: POP
// end ;
23947: PPOPN 4
23949: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23950: LD_INT 0
23952: PPUSH
23953: PPUSH
// result := false ;
23954: LD_ADDR_VAR 0 4
23958: PUSH
23959: LD_INT 0
23961: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 264
23971: PUSH
23972: LD_INT 81
23974: EQUAL
23975: NOT
23976: IFFALSE 23980
// exit ;
23978: GO 24220
// index := GetElementIndex ( minersList , unit ) ;
23980: LD_ADDR_VAR 0 5
23984: PUSH
23985: LD_EXP 92
23989: PPUSH
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL 30178 0 2
23999: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24000: LD_EXP 93
24004: PUSH
24005: LD_VAR 0 5
24009: ARRAY
24010: PUSH
24011: LD_EXP 94
24015: GREATEREQUAL
24016: IFFALSE 24020
// exit ;
24018: GO 24220
// ComMoveXY ( unit , x , y ) ;
24020: LD_VAR 0 1
24024: PPUSH
24025: LD_VAR 0 2
24029: PPUSH
24030: LD_VAR 0 3
24034: PPUSH
24035: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24039: LD_INT 35
24041: PPUSH
24042: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24046: LD_VAR 0 1
24050: PPUSH
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 3
24060: PPUSH
24061: CALL 61919 0 3
24065: NOT
24066: PUSH
24067: LD_VAR 0 1
24071: PPUSH
24072: CALL_OW 314
24076: AND
24077: IFFALSE 24081
// exit ;
24079: GO 24220
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24081: LD_VAR 0 2
24085: PPUSH
24086: LD_VAR 0 3
24090: PPUSH
24091: CALL_OW 428
24095: PUSH
24096: LD_VAR 0 1
24100: EQUAL
24101: PUSH
24102: LD_VAR 0 1
24106: PPUSH
24107: CALL_OW 314
24111: NOT
24112: AND
24113: IFFALSE 24039
// PlaySoundXY ( x , y , PlantMine ) ;
24115: LD_VAR 0 2
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_STRING PlantMine
24127: PPUSH
24128: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24132: LD_VAR 0 2
24136: PPUSH
24137: LD_VAR 0 3
24141: PPUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 255
24151: PPUSH
24152: LD_INT 0
24154: PPUSH
24155: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24159: LD_ADDR_EXP 93
24163: PUSH
24164: LD_EXP 93
24168: PPUSH
24169: LD_VAR 0 5
24173: PUSH
24174: LD_EXP 93
24178: PUSH
24179: LD_VAR 0 5
24183: ARRAY
24184: PUSH
24185: LD_INT 1
24187: PLUS
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PPUSH
24193: LD_VAR 0 2
24197: PUSH
24198: LD_VAR 0 3
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PPUSH
24207: CALL 30393 0 3
24211: ST_TO_ADDR
// result := true ;
24212: LD_ADDR_VAR 0 4
24216: PUSH
24217: LD_INT 1
24219: ST_TO_ADDR
// end ;
24220: LD_VAR 0 4
24224: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24225: LD_INT 0
24227: PPUSH
24228: PPUSH
24229: PPUSH
// if not unit in minersList then
24230: LD_VAR 0 1
24234: PUSH
24235: LD_EXP 92
24239: IN
24240: NOT
24241: IFFALSE 24245
// exit ;
24243: GO 24637
// index := GetElementIndex ( minersList , unit ) ;
24245: LD_ADDR_VAR 0 6
24249: PUSH
24250: LD_EXP 92
24254: PPUSH
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL 30178 0 2
24264: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24265: LD_ADDR_VAR 0 5
24269: PUSH
24270: DOUBLE
24271: LD_EXP 93
24275: PUSH
24276: LD_VAR 0 6
24280: ARRAY
24281: INC
24282: ST_TO_ADDR
24283: LD_INT 1
24285: PUSH
24286: FOR_DOWNTO
24287: IFFALSE 24448
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24289: LD_EXP 93
24293: PUSH
24294: LD_VAR 0 6
24298: ARRAY
24299: PUSH
24300: LD_VAR 0 5
24304: ARRAY
24305: PUSH
24306: LD_INT 1
24308: ARRAY
24309: PUSH
24310: LD_VAR 0 2
24314: EQUAL
24315: PUSH
24316: LD_EXP 93
24320: PUSH
24321: LD_VAR 0 6
24325: ARRAY
24326: PUSH
24327: LD_VAR 0 5
24331: ARRAY
24332: PUSH
24333: LD_INT 2
24335: ARRAY
24336: PUSH
24337: LD_VAR 0 3
24341: EQUAL
24342: AND
24343: IFFALSE 24446
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24345: LD_EXP 93
24349: PUSH
24350: LD_VAR 0 6
24354: ARRAY
24355: PUSH
24356: LD_VAR 0 5
24360: ARRAY
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: LD_EXP 93
24370: PUSH
24371: LD_VAR 0 6
24375: ARRAY
24376: PUSH
24377: LD_VAR 0 5
24381: ARRAY
24382: PUSH
24383: LD_INT 2
24385: ARRAY
24386: PPUSH
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 255
24396: PPUSH
24397: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24401: LD_ADDR_EXP 93
24405: PUSH
24406: LD_EXP 93
24410: PPUSH
24411: LD_VAR 0 6
24415: PPUSH
24416: LD_EXP 93
24420: PUSH
24421: LD_VAR 0 6
24425: ARRAY
24426: PPUSH
24427: LD_VAR 0 5
24431: PPUSH
24432: CALL_OW 3
24436: PPUSH
24437: CALL_OW 1
24441: ST_TO_ADDR
// exit ;
24442: POP
24443: POP
24444: GO 24637
// end ; end ;
24446: GO 24286
24448: POP
24449: POP
// for i := minerMinesList [ index ] downto 1 do
24450: LD_ADDR_VAR 0 5
24454: PUSH
24455: DOUBLE
24456: LD_EXP 93
24460: PUSH
24461: LD_VAR 0 6
24465: ARRAY
24466: INC
24467: ST_TO_ADDR
24468: LD_INT 1
24470: PUSH
24471: FOR_DOWNTO
24472: IFFALSE 24635
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24474: LD_EXP 93
24478: PUSH
24479: LD_VAR 0 6
24483: ARRAY
24484: PUSH
24485: LD_VAR 0 5
24489: ARRAY
24490: PUSH
24491: LD_INT 1
24493: ARRAY
24494: PPUSH
24495: LD_EXP 93
24499: PUSH
24500: LD_VAR 0 6
24504: ARRAY
24505: PUSH
24506: LD_VAR 0 5
24510: ARRAY
24511: PUSH
24512: LD_INT 2
24514: ARRAY
24515: PPUSH
24516: LD_VAR 0 2
24520: PPUSH
24521: LD_VAR 0 3
24525: PPUSH
24526: CALL_OW 298
24530: PUSH
24531: LD_INT 6
24533: LESS
24534: IFFALSE 24633
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24536: LD_EXP 93
24540: PUSH
24541: LD_VAR 0 6
24545: ARRAY
24546: PUSH
24547: LD_VAR 0 5
24551: ARRAY
24552: PUSH
24553: LD_INT 1
24555: ARRAY
24556: PPUSH
24557: LD_EXP 93
24561: PUSH
24562: LD_VAR 0 6
24566: ARRAY
24567: PUSH
24568: LD_VAR 0 5
24572: ARRAY
24573: PUSH
24574: LD_INT 2
24576: ARRAY
24577: PPUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 255
24587: PPUSH
24588: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24592: LD_ADDR_EXP 93
24596: PUSH
24597: LD_EXP 93
24601: PPUSH
24602: LD_VAR 0 6
24606: PPUSH
24607: LD_EXP 93
24611: PUSH
24612: LD_VAR 0 6
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 5
24622: PPUSH
24623: CALL_OW 3
24627: PPUSH
24628: CALL_OW 1
24632: ST_TO_ADDR
// end ; end ;
24633: GO 24471
24635: POP
24636: POP
// end ;
24637: LD_VAR 0 4
24641: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24642: LD_INT 0
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 264
24662: PUSH
24663: LD_INT 81
24665: EQUAL
24666: NOT
24667: PUSH
24668: LD_VAR 0 1
24672: PUSH
24673: LD_EXP 92
24677: IN
24678: NOT
24679: OR
24680: IFFALSE 24684
// exit ;
24682: GO 25006
// index := GetElementIndex ( minersList , unit ) ;
24684: LD_ADDR_VAR 0 6
24688: PUSH
24689: LD_EXP 92
24693: PPUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL 30178 0 2
24703: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24704: LD_ADDR_VAR 0 8
24708: PUSH
24709: LD_EXP 94
24713: PUSH
24714: LD_EXP 93
24718: PUSH
24719: LD_VAR 0 6
24723: ARRAY
24724: MINUS
24725: ST_TO_ADDR
// if not minesFreeAmount then
24726: LD_VAR 0 8
24730: NOT
24731: IFFALSE 24735
// exit ;
24733: GO 25006
// tmp := [ ] ;
24735: LD_ADDR_VAR 0 7
24739: PUSH
24740: EMPTY
24741: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24742: LD_ADDR_VAR 0 5
24746: PUSH
24747: DOUBLE
24748: LD_INT 1
24750: DEC
24751: ST_TO_ADDR
24752: LD_VAR 0 8
24756: PUSH
24757: FOR_TO
24758: IFFALSE 24953
// begin _d := rand ( 0 , 5 ) ;
24760: LD_ADDR_VAR 0 11
24764: PUSH
24765: LD_INT 0
24767: PPUSH
24768: LD_INT 5
24770: PPUSH
24771: CALL_OW 12
24775: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24776: LD_ADDR_VAR 0 12
24780: PUSH
24781: LD_INT 2
24783: PPUSH
24784: LD_INT 6
24786: PPUSH
24787: CALL_OW 12
24791: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24792: LD_ADDR_VAR 0 9
24796: PUSH
24797: LD_VAR 0 2
24801: PPUSH
24802: LD_VAR 0 11
24806: PPUSH
24807: LD_VAR 0 12
24811: PPUSH
24812: CALL_OW 272
24816: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24817: LD_ADDR_VAR 0 10
24821: PUSH
24822: LD_VAR 0 3
24826: PPUSH
24827: LD_VAR 0 11
24831: PPUSH
24832: LD_VAR 0 12
24836: PPUSH
24837: CALL_OW 273
24841: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24842: LD_VAR 0 9
24846: PPUSH
24847: LD_VAR 0 10
24851: PPUSH
24852: CALL_OW 488
24856: PUSH
24857: LD_VAR 0 9
24861: PUSH
24862: LD_VAR 0 10
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_VAR 0 7
24875: IN
24876: NOT
24877: AND
24878: PUSH
24879: LD_VAR 0 9
24883: PPUSH
24884: LD_VAR 0 10
24888: PPUSH
24889: CALL_OW 458
24893: NOT
24894: AND
24895: IFFALSE 24937
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24897: LD_ADDR_VAR 0 7
24901: PUSH
24902: LD_VAR 0 7
24906: PPUSH
24907: LD_VAR 0 7
24911: PUSH
24912: LD_INT 1
24914: PLUS
24915: PPUSH
24916: LD_VAR 0 9
24920: PUSH
24921: LD_VAR 0 10
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 1
24934: ST_TO_ADDR
24935: GO 24951
// i := i - 1 ;
24937: LD_ADDR_VAR 0 5
24941: PUSH
24942: LD_VAR 0 5
24946: PUSH
24947: LD_INT 1
24949: MINUS
24950: ST_TO_ADDR
// end ;
24951: GO 24757
24953: POP
24954: POP
// for i in tmp do
24955: LD_ADDR_VAR 0 5
24959: PUSH
24960: LD_VAR 0 7
24964: PUSH
24965: FOR_IN
24966: IFFALSE 25004
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24968: LD_VAR 0 1
24972: PPUSH
24973: LD_VAR 0 5
24977: PUSH
24978: LD_INT 1
24980: ARRAY
24981: PPUSH
24982: LD_VAR 0 5
24986: PUSH
24987: LD_INT 2
24989: ARRAY
24990: PPUSH
24991: CALL 23950 0 3
24995: NOT
24996: IFFALSE 25002
// exit ;
24998: POP
24999: POP
25000: GO 25006
25002: GO 24965
25004: POP
25005: POP
// end ;
25006: LD_VAR 0 4
25010: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
25018: PPUSH
25019: PPUSH
// if not GetClass ( unit ) = class_sniper then
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 257
25029: PUSH
25030: LD_INT 5
25032: EQUAL
25033: NOT
25034: IFFALSE 25038
// exit ;
25036: GO 25426
// dist := 8 ;
25038: LD_ADDR_VAR 0 5
25042: PUSH
25043: LD_INT 8
25045: ST_TO_ADDR
// viewRange := 12 ;
25046: LD_ADDR_VAR 0 7
25050: PUSH
25051: LD_INT 12
25053: ST_TO_ADDR
// side := GetSide ( unit ) ;
25054: LD_ADDR_VAR 0 6
25058: PUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 255
25068: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25069: LD_INT 61
25071: PPUSH
25072: LD_VAR 0 6
25076: PPUSH
25077: CALL_OW 321
25081: PUSH
25082: LD_INT 2
25084: EQUAL
25085: IFFALSE 25095
// viewRange := 16 ;
25087: LD_ADDR_VAR 0 7
25091: PUSH
25092: LD_INT 16
25094: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25095: LD_VAR 0 1
25099: PPUSH
25100: LD_VAR 0 2
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: CALL_OW 297
25114: PUSH
25115: LD_VAR 0 5
25119: GREATER
25120: IFFALSE 25199
// begin ComMoveXY ( unit , x , y ) ;
25122: LD_VAR 0 1
25126: PPUSH
25127: LD_VAR 0 2
25131: PPUSH
25132: LD_VAR 0 3
25136: PPUSH
25137: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25141: LD_INT 35
25143: PPUSH
25144: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25148: LD_VAR 0 1
25152: PPUSH
25153: LD_VAR 0 2
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: CALL 61919 0 3
25167: NOT
25168: IFFALSE 25172
// exit ;
25170: GO 25426
// until GetDistUnitXY ( unit , x , y ) < dist ;
25172: LD_VAR 0 1
25176: PPUSH
25177: LD_VAR 0 2
25181: PPUSH
25182: LD_VAR 0 3
25186: PPUSH
25187: CALL_OW 297
25191: PUSH
25192: LD_VAR 0 5
25196: LESS
25197: IFFALSE 25141
// end ; ComTurnXY ( unit , x , y ) ;
25199: LD_VAR 0 1
25203: PPUSH
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: CALL_OW 118
// wait ( 5 ) ;
25218: LD_INT 5
25220: PPUSH
25221: CALL_OW 67
// _d := GetDir ( unit ) ;
25225: LD_ADDR_VAR 0 10
25229: PUSH
25230: LD_VAR 0 1
25234: PPUSH
25235: CALL_OW 254
25239: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25240: LD_ADDR_VAR 0 8
25244: PUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 250
25254: PPUSH
25255: LD_VAR 0 10
25259: PPUSH
25260: LD_VAR 0 5
25264: PPUSH
25265: CALL_OW 272
25269: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25270: LD_ADDR_VAR 0 9
25274: PUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 251
25284: PPUSH
25285: LD_VAR 0 10
25289: PPUSH
25290: LD_VAR 0 5
25294: PPUSH
25295: CALL_OW 273
25299: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25300: LD_VAR 0 8
25304: PPUSH
25305: LD_VAR 0 9
25309: PPUSH
25310: CALL_OW 488
25314: NOT
25315: IFFALSE 25319
// exit ;
25317: GO 25426
// ComAnimCustom ( unit , 1 ) ;
25319: LD_VAR 0 1
25323: PPUSH
25324: LD_INT 1
25326: PPUSH
25327: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25331: LD_VAR 0 8
25335: PPUSH
25336: LD_VAR 0 9
25340: PPUSH
25341: LD_VAR 0 6
25345: PPUSH
25346: LD_VAR 0 7
25350: PPUSH
25351: CALL_OW 330
// repeat wait ( 1 ) ;
25355: LD_INT 1
25357: PPUSH
25358: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 316
25371: PUSH
25372: LD_VAR 0 1
25376: PPUSH
25377: CALL_OW 314
25381: OR
25382: PUSH
25383: LD_VAR 0 1
25387: PPUSH
25388: CALL_OW 302
25392: NOT
25393: OR
25394: PUSH
25395: LD_VAR 0 1
25399: PPUSH
25400: CALL_OW 301
25404: OR
25405: IFFALSE 25355
// RemoveSeeing ( _x , _y , side ) ;
25407: LD_VAR 0 8
25411: PPUSH
25412: LD_VAR 0 9
25416: PPUSH
25417: LD_VAR 0 6
25421: PPUSH
25422: CALL_OW 331
// end ; end_of_file end_of_file
25426: LD_VAR 0 4
25430: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
// if exist_mode then
25435: LD_VAR 0 2
25439: IFFALSE 25464
// unit := CreateCharacter ( prefix & ident ) else
25441: LD_ADDR_VAR 0 5
25445: PUSH
25446: LD_VAR 0 3
25450: PUSH
25451: LD_VAR 0 1
25455: STR
25456: PPUSH
25457: CALL_OW 34
25461: ST_TO_ADDR
25462: GO 25479
// unit := NewCharacter ( ident ) ;
25464: LD_ADDR_VAR 0 5
25468: PUSH
25469: LD_VAR 0 1
25473: PPUSH
25474: CALL_OW 25
25478: ST_TO_ADDR
// result := unit ;
25479: LD_ADDR_VAR 0 4
25483: PUSH
25484: LD_VAR 0 5
25488: ST_TO_ADDR
// end ;
25489: LD_VAR 0 4
25493: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25494: LD_INT 0
25496: PPUSH
25497: PPUSH
// if not side or not nation then
25498: LD_VAR 0 1
25502: NOT
25503: PUSH
25504: LD_VAR 0 2
25508: NOT
25509: OR
25510: IFFALSE 25514
// exit ;
25512: GO 26282
// case nation of nation_american :
25514: LD_VAR 0 2
25518: PUSH
25519: LD_INT 1
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25741
25527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25528: LD_ADDR_VAR 0 4
25532: PUSH
25533: LD_INT 35
25535: PUSH
25536: LD_INT 45
25538: PUSH
25539: LD_INT 46
25541: PUSH
25542: LD_INT 47
25544: PUSH
25545: LD_INT 82
25547: PUSH
25548: LD_INT 83
25550: PUSH
25551: LD_INT 84
25553: PUSH
25554: LD_INT 85
25556: PUSH
25557: LD_INT 86
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 6
25568: PUSH
25569: LD_INT 15
25571: PUSH
25572: LD_INT 16
25574: PUSH
25575: LD_INT 7
25577: PUSH
25578: LD_INT 12
25580: PUSH
25581: LD_INT 13
25583: PUSH
25584: LD_INT 10
25586: PUSH
25587: LD_INT 14
25589: PUSH
25590: LD_INT 20
25592: PUSH
25593: LD_INT 21
25595: PUSH
25596: LD_INT 22
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 32
25604: PUSH
25605: LD_INT 27
25607: PUSH
25608: LD_INT 36
25610: PUSH
25611: LD_INT 69
25613: PUSH
25614: LD_INT 39
25616: PUSH
25617: LD_INT 34
25619: PUSH
25620: LD_INT 40
25622: PUSH
25623: LD_INT 48
25625: PUSH
25626: LD_INT 49
25628: PUSH
25629: LD_INT 50
25631: PUSH
25632: LD_INT 51
25634: PUSH
25635: LD_INT 52
25637: PUSH
25638: LD_INT 53
25640: PUSH
25641: LD_INT 54
25643: PUSH
25644: LD_INT 55
25646: PUSH
25647: LD_INT 56
25649: PUSH
25650: LD_INT 57
25652: PUSH
25653: LD_INT 58
25655: PUSH
25656: LD_INT 59
25658: PUSH
25659: LD_INT 60
25661: PUSH
25662: LD_INT 61
25664: PUSH
25665: LD_INT 62
25667: PUSH
25668: LD_INT 80
25670: PUSH
25671: LD_INT 82
25673: PUSH
25674: LD_INT 83
25676: PUSH
25677: LD_INT 84
25679: PUSH
25680: LD_INT 85
25682: PUSH
25683: LD_INT 86
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: ST_TO_ADDR
25739: GO 26206
25741: LD_INT 2
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25749
25747: GO 25975
25749: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25750: LD_ADDR_VAR 0 4
25754: PUSH
25755: LD_INT 35
25757: PUSH
25758: LD_INT 45
25760: PUSH
25761: LD_INT 46
25763: PUSH
25764: LD_INT 47
25766: PUSH
25767: LD_INT 82
25769: PUSH
25770: LD_INT 83
25772: PUSH
25773: LD_INT 84
25775: PUSH
25776: LD_INT 85
25778: PUSH
25779: LD_INT 87
25781: PUSH
25782: LD_INT 70
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 11
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: LD_INT 4
25796: PUSH
25797: LD_INT 5
25799: PUSH
25800: LD_INT 6
25802: PUSH
25803: LD_INT 15
25805: PUSH
25806: LD_INT 18
25808: PUSH
25809: LD_INT 7
25811: PUSH
25812: LD_INT 17
25814: PUSH
25815: LD_INT 8
25817: PUSH
25818: LD_INT 20
25820: PUSH
25821: LD_INT 21
25823: PUSH
25824: LD_INT 22
25826: PUSH
25827: LD_INT 72
25829: PUSH
25830: LD_INT 26
25832: PUSH
25833: LD_INT 69
25835: PUSH
25836: LD_INT 39
25838: PUSH
25839: LD_INT 40
25841: PUSH
25842: LD_INT 41
25844: PUSH
25845: LD_INT 42
25847: PUSH
25848: LD_INT 43
25850: PUSH
25851: LD_INT 48
25853: PUSH
25854: LD_INT 49
25856: PUSH
25857: LD_INT 50
25859: PUSH
25860: LD_INT 51
25862: PUSH
25863: LD_INT 52
25865: PUSH
25866: LD_INT 53
25868: PUSH
25869: LD_INT 54
25871: PUSH
25872: LD_INT 55
25874: PUSH
25875: LD_INT 56
25877: PUSH
25878: LD_INT 60
25880: PUSH
25881: LD_INT 61
25883: PUSH
25884: LD_INT 62
25886: PUSH
25887: LD_INT 66
25889: PUSH
25890: LD_INT 67
25892: PUSH
25893: LD_INT 68
25895: PUSH
25896: LD_INT 81
25898: PUSH
25899: LD_INT 82
25901: PUSH
25902: LD_INT 83
25904: PUSH
25905: LD_INT 84
25907: PUSH
25908: LD_INT 85
25910: PUSH
25911: LD_INT 87
25913: PUSH
25914: LD_INT 88
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: ST_TO_ADDR
25973: GO 26206
25975: LD_INT 3
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 26205
25983: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25984: LD_ADDR_VAR 0 4
25988: PUSH
25989: LD_INT 46
25991: PUSH
25992: LD_INT 47
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: LD_INT 82
26003: PUSH
26004: LD_INT 83
26006: PUSH
26007: LD_INT 84
26009: PUSH
26010: LD_INT 85
26012: PUSH
26013: LD_INT 86
26015: PUSH
26016: LD_INT 11
26018: PUSH
26019: LD_INT 9
26021: PUSH
26022: LD_INT 20
26024: PUSH
26025: LD_INT 19
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 24
26033: PUSH
26034: LD_INT 22
26036: PUSH
26037: LD_INT 25
26039: PUSH
26040: LD_INT 28
26042: PUSH
26043: LD_INT 29
26045: PUSH
26046: LD_INT 30
26048: PUSH
26049: LD_INT 31
26051: PUSH
26052: LD_INT 37
26054: PUSH
26055: LD_INT 38
26057: PUSH
26058: LD_INT 32
26060: PUSH
26061: LD_INT 27
26063: PUSH
26064: LD_INT 33
26066: PUSH
26067: LD_INT 69
26069: PUSH
26070: LD_INT 39
26072: PUSH
26073: LD_INT 34
26075: PUSH
26076: LD_INT 40
26078: PUSH
26079: LD_INT 71
26081: PUSH
26082: LD_INT 23
26084: PUSH
26085: LD_INT 44
26087: PUSH
26088: LD_INT 48
26090: PUSH
26091: LD_INT 49
26093: PUSH
26094: LD_INT 50
26096: PUSH
26097: LD_INT 51
26099: PUSH
26100: LD_INT 52
26102: PUSH
26103: LD_INT 53
26105: PUSH
26106: LD_INT 54
26108: PUSH
26109: LD_INT 55
26111: PUSH
26112: LD_INT 56
26114: PUSH
26115: LD_INT 57
26117: PUSH
26118: LD_INT 58
26120: PUSH
26121: LD_INT 59
26123: PUSH
26124: LD_INT 63
26126: PUSH
26127: LD_INT 64
26129: PUSH
26130: LD_INT 65
26132: PUSH
26133: LD_INT 82
26135: PUSH
26136: LD_INT 83
26138: PUSH
26139: LD_INT 84
26141: PUSH
26142: LD_INT 85
26144: PUSH
26145: LD_INT 86
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
26203: GO 26206
26205: POP
// if state > - 1 and state < 3 then
26206: LD_VAR 0 3
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: GREATER
26215: PUSH
26216: LD_VAR 0 3
26220: PUSH
26221: LD_INT 3
26223: LESS
26224: AND
26225: IFFALSE 26282
// for i in result do
26227: LD_ADDR_VAR 0 5
26231: PUSH
26232: LD_VAR 0 4
26236: PUSH
26237: FOR_IN
26238: IFFALSE 26280
// if GetTech ( i , side ) <> state then
26240: LD_VAR 0 5
26244: PPUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 321
26254: PUSH
26255: LD_VAR 0 3
26259: NONEQUAL
26260: IFFALSE 26278
// result := result diff i ;
26262: LD_ADDR_VAR 0 4
26266: PUSH
26267: LD_VAR 0 4
26271: PUSH
26272: LD_VAR 0 5
26276: DIFF
26277: ST_TO_ADDR
26278: GO 26237
26280: POP
26281: POP
// end ;
26282: LD_VAR 0 4
26286: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
// result := true ;
26292: LD_ADDR_VAR 0 3
26296: PUSH
26297: LD_INT 1
26299: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26300: LD_ADDR_VAR 0 5
26304: PUSH
26305: LD_VAR 0 2
26309: PPUSH
26310: CALL_OW 480
26314: ST_TO_ADDR
// if not tmp then
26315: LD_VAR 0 5
26319: NOT
26320: IFFALSE 26324
// exit ;
26322: GO 26373
// for i in tmp do
26324: LD_ADDR_VAR 0 4
26328: PUSH
26329: LD_VAR 0 5
26333: PUSH
26334: FOR_IN
26335: IFFALSE 26371
// if GetTech ( i , side ) <> state_researched then
26337: LD_VAR 0 4
26341: PPUSH
26342: LD_VAR 0 1
26346: PPUSH
26347: CALL_OW 321
26351: PUSH
26352: LD_INT 2
26354: NONEQUAL
26355: IFFALSE 26369
// begin result := false ;
26357: LD_ADDR_VAR 0 3
26361: PUSH
26362: LD_INT 0
26364: ST_TO_ADDR
// exit ;
26365: POP
26366: POP
26367: GO 26373
// end ;
26369: GO 26334
26371: POP
26372: POP
// end ;
26373: LD_VAR 0 3
26377: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26378: LD_INT 0
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
26388: PPUSH
26389: PPUSH
26390: PPUSH
26391: PPUSH
26392: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26393: LD_VAR 0 1
26397: NOT
26398: PUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 257
26408: PUSH
26409: LD_INT 9
26411: NONEQUAL
26412: OR
26413: IFFALSE 26417
// exit ;
26415: GO 26990
// side := GetSide ( unit ) ;
26417: LD_ADDR_VAR 0 9
26421: PUSH
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 255
26431: ST_TO_ADDR
// tech_space := tech_spacanom ;
26432: LD_ADDR_VAR 0 12
26436: PUSH
26437: LD_INT 29
26439: ST_TO_ADDR
// tech_time := tech_taurad ;
26440: LD_ADDR_VAR 0 13
26444: PUSH
26445: LD_INT 28
26447: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26448: LD_ADDR_VAR 0 11
26452: PUSH
26453: LD_VAR 0 1
26457: PPUSH
26458: CALL_OW 310
26462: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26463: LD_VAR 0 11
26467: PPUSH
26468: CALL_OW 247
26472: PUSH
26473: LD_INT 2
26475: EQUAL
26476: IFFALSE 26480
// exit ;
26478: GO 26990
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26480: LD_ADDR_VAR 0 8
26484: PUSH
26485: LD_INT 81
26487: PUSH
26488: LD_VAR 0 9
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: PUSH
26500: LD_INT 21
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PPUSH
26518: CALL_OW 69
26522: ST_TO_ADDR
// if not tmp then
26523: LD_VAR 0 8
26527: NOT
26528: IFFALSE 26532
// exit ;
26530: GO 26990
// if in_unit then
26532: LD_VAR 0 11
26536: IFFALSE 26560
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26538: LD_ADDR_VAR 0 10
26542: PUSH
26543: LD_VAR 0 8
26547: PPUSH
26548: LD_VAR 0 11
26552: PPUSH
26553: CALL_OW 74
26557: ST_TO_ADDR
26558: GO 26580
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26560: LD_ADDR_VAR 0 10
26564: PUSH
26565: LD_VAR 0 8
26569: PPUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 74
26579: ST_TO_ADDR
// if not enemy then
26580: LD_VAR 0 10
26584: NOT
26585: IFFALSE 26589
// exit ;
26587: GO 26990
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26589: LD_VAR 0 11
26593: PUSH
26594: LD_VAR 0 11
26598: PPUSH
26599: LD_VAR 0 10
26603: PPUSH
26604: CALL_OW 296
26608: PUSH
26609: LD_INT 13
26611: GREATER
26612: AND
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_VAR 0 10
26623: PPUSH
26624: CALL_OW 296
26628: PUSH
26629: LD_INT 12
26631: GREATER
26632: OR
26633: IFFALSE 26637
// exit ;
26635: GO 26990
// missile := [ 1 ] ;
26637: LD_ADDR_VAR 0 14
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26648: LD_VAR 0 9
26652: PPUSH
26653: LD_VAR 0 12
26657: PPUSH
26658: CALL_OW 325
26662: IFFALSE 26691
// missile := Replace ( missile , missile + 1 , 2 ) ;
26664: LD_ADDR_VAR 0 14
26668: PUSH
26669: LD_VAR 0 14
26673: PPUSH
26674: LD_VAR 0 14
26678: PUSH
26679: LD_INT 1
26681: PLUS
26682: PPUSH
26683: LD_INT 2
26685: PPUSH
26686: CALL_OW 1
26690: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26691: LD_VAR 0 9
26695: PPUSH
26696: LD_VAR 0 13
26700: PPUSH
26701: CALL_OW 325
26705: PUSH
26706: LD_VAR 0 10
26710: PPUSH
26711: CALL_OW 255
26715: PPUSH
26716: LD_VAR 0 13
26720: PPUSH
26721: CALL_OW 325
26725: NOT
26726: AND
26727: IFFALSE 26756
// missile := Replace ( missile , missile + 1 , 3 ) ;
26729: LD_ADDR_VAR 0 14
26733: PUSH
26734: LD_VAR 0 14
26738: PPUSH
26739: LD_VAR 0 14
26743: PUSH
26744: LD_INT 1
26746: PLUS
26747: PPUSH
26748: LD_INT 3
26750: PPUSH
26751: CALL_OW 1
26755: ST_TO_ADDR
// if missile < 2 then
26756: LD_VAR 0 14
26760: PUSH
26761: LD_INT 2
26763: LESS
26764: IFFALSE 26768
// exit ;
26766: GO 26990
// x := GetX ( enemy ) ;
26768: LD_ADDR_VAR 0 4
26772: PUSH
26773: LD_VAR 0 10
26777: PPUSH
26778: CALL_OW 250
26782: ST_TO_ADDR
// y := GetY ( enemy ) ;
26783: LD_ADDR_VAR 0 5
26787: PUSH
26788: LD_VAR 0 10
26792: PPUSH
26793: CALL_OW 251
26797: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26798: LD_ADDR_VAR 0 6
26802: PUSH
26803: LD_VAR 0 4
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PPUSH
26812: LD_INT 1
26814: PPUSH
26815: CALL_OW 12
26819: PLUS
26820: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26821: LD_ADDR_VAR 0 7
26825: PUSH
26826: LD_VAR 0 5
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PPUSH
26835: LD_INT 1
26837: PPUSH
26838: CALL_OW 12
26842: PLUS
26843: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26844: LD_VAR 0 6
26848: PPUSH
26849: LD_VAR 0 7
26853: PPUSH
26854: CALL_OW 488
26858: NOT
26859: IFFALSE 26881
// begin _x := x ;
26861: LD_ADDR_VAR 0 6
26865: PUSH
26866: LD_VAR 0 4
26870: ST_TO_ADDR
// _y := y ;
26871: LD_ADDR_VAR 0 7
26875: PUSH
26876: LD_VAR 0 5
26880: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26881: LD_ADDR_VAR 0 3
26885: PUSH
26886: LD_INT 1
26888: PPUSH
26889: LD_VAR 0 14
26893: PPUSH
26894: CALL_OW 12
26898: ST_TO_ADDR
// case i of 1 :
26899: LD_VAR 0 3
26903: PUSH
26904: LD_INT 1
26906: DOUBLE
26907: EQUAL
26908: IFTRUE 26912
26910: GO 26929
26912: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_VAR 0 10
26922: PPUSH
26923: CALL_OW 115
26927: GO 26990
26929: LD_INT 2
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26937
26935: GO 26959
26937: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26938: LD_VAR 0 1
26942: PPUSH
26943: LD_VAR 0 6
26947: PPUSH
26948: LD_VAR 0 7
26952: PPUSH
26953: CALL_OW 153
26957: GO 26990
26959: LD_INT 3
26961: DOUBLE
26962: EQUAL
26963: IFTRUE 26967
26965: GO 26989
26967: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26968: LD_VAR 0 1
26972: PPUSH
26973: LD_VAR 0 6
26977: PPUSH
26978: LD_VAR 0 7
26982: PPUSH
26983: CALL_OW 154
26987: GO 26990
26989: POP
// end ;
26990: LD_VAR 0 2
26994: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26995: LD_INT 0
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
// if not unit or not building then
27003: LD_VAR 0 1
27007: NOT
27008: PUSH
27009: LD_VAR 0 2
27013: NOT
27014: OR
27015: IFFALSE 27019
// exit ;
27017: GO 27177
// x := GetX ( building ) ;
27019: LD_ADDR_VAR 0 5
27023: PUSH
27024: LD_VAR 0 2
27028: PPUSH
27029: CALL_OW 250
27033: ST_TO_ADDR
// y := GetY ( building ) ;
27034: LD_ADDR_VAR 0 6
27038: PUSH
27039: LD_VAR 0 2
27043: PPUSH
27044: CALL_OW 251
27048: ST_TO_ADDR
// for i = 0 to 5 do
27049: LD_ADDR_VAR 0 4
27053: PUSH
27054: DOUBLE
27055: LD_INT 0
27057: DEC
27058: ST_TO_ADDR
27059: LD_INT 5
27061: PUSH
27062: FOR_TO
27063: IFFALSE 27175
// begin _x := ShiftX ( x , i , 3 ) ;
27065: LD_ADDR_VAR 0 7
27069: PUSH
27070: LD_VAR 0 5
27074: PPUSH
27075: LD_VAR 0 4
27079: PPUSH
27080: LD_INT 3
27082: PPUSH
27083: CALL_OW 272
27087: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27088: LD_ADDR_VAR 0 8
27092: PUSH
27093: LD_VAR 0 6
27097: PPUSH
27098: LD_VAR 0 4
27102: PPUSH
27103: LD_INT 3
27105: PPUSH
27106: CALL_OW 273
27110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27111: LD_VAR 0 7
27115: PPUSH
27116: LD_VAR 0 8
27120: PPUSH
27121: CALL_OW 488
27125: NOT
27126: IFFALSE 27130
// continue ;
27128: GO 27062
// if HexInfo ( _x , _y ) = 0 then
27130: LD_VAR 0 7
27134: PPUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: CALL_OW 428
27144: PUSH
27145: LD_INT 0
27147: EQUAL
27148: IFFALSE 27173
// begin ComMoveXY ( unit , _x , _y ) ;
27150: LD_VAR 0 1
27154: PPUSH
27155: LD_VAR 0 7
27159: PPUSH
27160: LD_VAR 0 8
27164: PPUSH
27165: CALL_OW 111
// exit ;
27169: POP
27170: POP
27171: GO 27177
// end ; end ;
27173: GO 27062
27175: POP
27176: POP
// end ;
27177: LD_VAR 0 3
27181: RET
// export function ScanBase ( side , base_area ) ; begin
27182: LD_INT 0
27184: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27185: LD_ADDR_VAR 0 3
27189: PUSH
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_INT 81
27197: PUSH
27198: LD_VAR 0 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PPUSH
27207: CALL_OW 70
27211: ST_TO_ADDR
// end ;
27212: LD_VAR 0 3
27216: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
27221: PPUSH
27222: PPUSH
// result := false ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 0
27230: ST_TO_ADDR
// side := GetSide ( unit ) ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL_OW 255
27245: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27246: LD_ADDR_VAR 0 4
27250: PUSH
27251: LD_VAR 0 1
27255: PPUSH
27256: CALL_OW 248
27260: ST_TO_ADDR
// case nat of 1 :
27261: LD_VAR 0 4
27265: PUSH
27266: LD_INT 1
27268: DOUBLE
27269: EQUAL
27270: IFTRUE 27274
27272: GO 27285
27274: POP
// tech := tech_lassight ; 2 :
27275: LD_ADDR_VAR 0 5
27279: PUSH
27280: LD_INT 12
27282: ST_TO_ADDR
27283: GO 27324
27285: LD_INT 2
27287: DOUBLE
27288: EQUAL
27289: IFTRUE 27293
27291: GO 27304
27293: POP
// tech := tech_mortar ; 3 :
27294: LD_ADDR_VAR 0 5
27298: PUSH
27299: LD_INT 41
27301: ST_TO_ADDR
27302: GO 27324
27304: LD_INT 3
27306: DOUBLE
27307: EQUAL
27308: IFTRUE 27312
27310: GO 27323
27312: POP
// tech := tech_bazooka ; end ;
27313: LD_ADDR_VAR 0 5
27317: PUSH
27318: LD_INT 44
27320: ST_TO_ADDR
27321: GO 27324
27323: POP
// if Researched ( side , tech ) then
27324: LD_VAR 0 3
27328: PPUSH
27329: LD_VAR 0 5
27333: PPUSH
27334: CALL_OW 325
27338: IFFALSE 27365
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27340: LD_ADDR_VAR 0 2
27344: PUSH
27345: LD_INT 5
27347: PUSH
27348: LD_INT 8
27350: PUSH
27351: LD_INT 9
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: LIST
27358: PUSH
27359: LD_VAR 0 4
27363: ARRAY
27364: ST_TO_ADDR
// end ;
27365: LD_VAR 0 2
27369: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27370: LD_INT 0
27372: PPUSH
27373: PPUSH
27374: PPUSH
// if not mines then
27375: LD_VAR 0 2
27379: NOT
27380: IFFALSE 27384
// exit ;
27382: GO 27528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27384: LD_ADDR_VAR 0 5
27388: PUSH
27389: LD_INT 81
27391: PUSH
27392: LD_VAR 0 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 3
27403: PUSH
27404: LD_INT 21
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PPUSH
27422: CALL_OW 69
27426: ST_TO_ADDR
// for i in mines do
27427: LD_ADDR_VAR 0 4
27431: PUSH
27432: LD_VAR 0 2
27436: PUSH
27437: FOR_IN
27438: IFFALSE 27526
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27440: LD_VAR 0 4
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PPUSH
27449: LD_VAR 0 4
27453: PUSH
27454: LD_INT 2
27456: ARRAY
27457: PPUSH
27458: CALL_OW 458
27462: NOT
27463: IFFALSE 27467
// continue ;
27465: GO 27437
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27467: LD_VAR 0 4
27471: PUSH
27472: LD_INT 1
27474: ARRAY
27475: PPUSH
27476: LD_VAR 0 4
27480: PUSH
27481: LD_INT 2
27483: ARRAY
27484: PPUSH
27485: CALL_OW 428
27489: PUSH
27490: LD_VAR 0 5
27494: IN
27495: IFFALSE 27524
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27497: LD_VAR 0 4
27501: PUSH
27502: LD_INT 1
27504: ARRAY
27505: PPUSH
27506: LD_VAR 0 4
27510: PUSH
27511: LD_INT 2
27513: ARRAY
27514: PPUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 456
// end ;
27524: GO 27437
27526: POP
27527: POP
// end ;
27528: LD_VAR 0 3
27532: RET
// export function Count ( array ) ; begin
27533: LD_INT 0
27535: PPUSH
// result := array + 0 ;
27536: LD_ADDR_VAR 0 2
27540: PUSH
27541: LD_VAR 0 1
27545: PUSH
27546: LD_INT 0
27548: PLUS
27549: ST_TO_ADDR
// end ;
27550: LD_VAR 0 2
27554: RET
// export function IsEmpty ( building ) ; begin
27555: LD_INT 0
27557: PPUSH
// if not building then
27558: LD_VAR 0 1
27562: NOT
27563: IFFALSE 27567
// exit ;
27565: GO 27610
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27567: LD_ADDR_VAR 0 2
27571: PUSH
27572: LD_VAR 0 1
27576: PUSH
27577: LD_INT 22
27579: PUSH
27580: LD_VAR 0 1
27584: PPUSH
27585: CALL_OW 255
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 58
27596: PUSH
27597: EMPTY
27598: LIST
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PPUSH
27604: CALL_OW 69
27608: IN
27609: ST_TO_ADDR
// end ;
27610: LD_VAR 0 2
27614: RET
// export function IsNotFull ( building ) ; var places ; begin
27615: LD_INT 0
27617: PPUSH
27618: PPUSH
// if not building then
27619: LD_VAR 0 1
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 27656
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27628: LD_ADDR_VAR 0 2
27632: PUSH
27633: LD_VAR 0 1
27637: PPUSH
27638: LD_INT 3
27640: PUSH
27641: LD_INT 62
27643: PUSH
27644: EMPTY
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PPUSH
27651: CALL_OW 72
27655: ST_TO_ADDR
// end ;
27656: LD_VAR 0 2
27660: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27661: LD_INT 0
27663: PPUSH
27664: PPUSH
27665: PPUSH
27666: PPUSH
// tmp := [ ] ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: EMPTY
27673: ST_TO_ADDR
// list := [ ] ;
27674: LD_ADDR_VAR 0 5
27678: PUSH
27679: EMPTY
27680: ST_TO_ADDR
// for i = 16 to 25 do
27681: LD_ADDR_VAR 0 4
27685: PUSH
27686: DOUBLE
27687: LD_INT 16
27689: DEC
27690: ST_TO_ADDR
27691: LD_INT 25
27693: PUSH
27694: FOR_TO
27695: IFFALSE 27768
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27697: LD_ADDR_VAR 0 3
27701: PUSH
27702: LD_VAR 0 3
27706: PUSH
27707: LD_INT 22
27709: PUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: CALL_OW 255
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 91
27726: PUSH
27727: LD_VAR 0 1
27731: PUSH
27732: LD_INT 6
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 30
27742: PUSH
27743: LD_VAR 0 4
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: PPUSH
27760: CALL_OW 69
27764: ADD
27765: ST_TO_ADDR
27766: GO 27694
27768: POP
27769: POP
// for i = 1 to tmp do
27770: LD_ADDR_VAR 0 4
27774: PUSH
27775: DOUBLE
27776: LD_INT 1
27778: DEC
27779: ST_TO_ADDR
27780: LD_VAR 0 3
27784: PUSH
27785: FOR_TO
27786: IFFALSE 27874
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27788: LD_ADDR_VAR 0 5
27792: PUSH
27793: LD_VAR 0 5
27797: PUSH
27798: LD_VAR 0 3
27802: PUSH
27803: LD_VAR 0 4
27807: ARRAY
27808: PPUSH
27809: CALL_OW 266
27813: PUSH
27814: LD_VAR 0 3
27818: PUSH
27819: LD_VAR 0 4
27823: ARRAY
27824: PPUSH
27825: CALL_OW 250
27829: PUSH
27830: LD_VAR 0 3
27834: PUSH
27835: LD_VAR 0 4
27839: ARRAY
27840: PPUSH
27841: CALL_OW 251
27845: PUSH
27846: LD_VAR 0 3
27850: PUSH
27851: LD_VAR 0 4
27855: ARRAY
27856: PPUSH
27857: CALL_OW 254
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: PUSH
27868: EMPTY
27869: LIST
27870: ADD
27871: ST_TO_ADDR
27872: GO 27785
27874: POP
27875: POP
// result := list ;
27876: LD_ADDR_VAR 0 2
27880: PUSH
27881: LD_VAR 0 5
27885: ST_TO_ADDR
// end ;
27886: LD_VAR 0 2
27890: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27891: LD_INT 0
27893: PPUSH
27894: PPUSH
27895: PPUSH
27896: PPUSH
27897: PPUSH
27898: PPUSH
27899: PPUSH
// if not factory then
27900: LD_VAR 0 1
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 28502
// if control = control_apeman then
27909: LD_VAR 0 4
27913: PUSH
27914: LD_INT 5
27916: EQUAL
27917: IFFALSE 28026
// begin tmp := UnitsInside ( factory ) ;
27919: LD_ADDR_VAR 0 8
27923: PUSH
27924: LD_VAR 0 1
27928: PPUSH
27929: CALL_OW 313
27933: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27934: LD_VAR 0 8
27938: PPUSH
27939: LD_INT 25
27941: PUSH
27942: LD_INT 12
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PPUSH
27949: CALL_OW 72
27953: NOT
27954: IFFALSE 27964
// control := control_manual ;
27956: LD_ADDR_VAR 0 4
27960: PUSH
27961: LD_INT 1
27963: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27964: LD_ADDR_VAR 0 8
27968: PUSH
27969: LD_VAR 0 1
27973: PPUSH
27974: CALL 27661 0 1
27978: ST_TO_ADDR
// if tmp then
27979: LD_VAR 0 8
27983: IFFALSE 28026
// begin for i in tmp do
27985: LD_ADDR_VAR 0 7
27989: PUSH
27990: LD_VAR 0 8
27994: PUSH
27995: FOR_IN
27996: IFFALSE 28024
// if i [ 1 ] = b_ext_radio then
27998: LD_VAR 0 7
28002: PUSH
28003: LD_INT 1
28005: ARRAY
28006: PUSH
28007: LD_INT 22
28009: EQUAL
28010: IFFALSE 28022
// begin control := control_remote ;
28012: LD_ADDR_VAR 0 4
28016: PUSH
28017: LD_INT 2
28019: ST_TO_ADDR
// break ;
28020: GO 28024
// end ;
28022: GO 27995
28024: POP
28025: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28026: LD_VAR 0 1
28030: PPUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: LD_VAR 0 3
28040: PPUSH
28041: LD_VAR 0 4
28045: PPUSH
28046: LD_VAR 0 5
28050: PPUSH
28051: CALL_OW 448
28055: IFFALSE 28090
// begin result := [ chassis , engine , control , weapon ] ;
28057: LD_ADDR_VAR 0 6
28061: PUSH
28062: LD_VAR 0 2
28066: PUSH
28067: LD_VAR 0 3
28071: PUSH
28072: LD_VAR 0 4
28076: PUSH
28077: LD_VAR 0 5
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// exit ;
28088: GO 28502
// end ; _chassis := AvailableChassisList ( factory ) ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 475
28104: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28105: LD_ADDR_VAR 0 11
28109: PUSH
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 476
28119: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28120: LD_ADDR_VAR 0 12
28124: PUSH
28125: LD_VAR 0 1
28129: PPUSH
28130: CALL_OW 477
28134: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28135: LD_ADDR_VAR 0 10
28139: PUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 478
28149: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28150: LD_VAR 0 9
28154: NOT
28155: PUSH
28156: LD_VAR 0 11
28160: NOT
28161: OR
28162: PUSH
28163: LD_VAR 0 12
28167: NOT
28168: OR
28169: PUSH
28170: LD_VAR 0 10
28174: NOT
28175: OR
28176: IFFALSE 28211
// begin result := [ chassis , engine , control , weapon ] ;
28178: LD_ADDR_VAR 0 6
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: LD_VAR 0 3
28192: PUSH
28193: LD_VAR 0 4
28197: PUSH
28198: LD_VAR 0 5
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// exit ;
28209: GO 28502
// end ; if not chassis in _chassis then
28211: LD_VAR 0 2
28215: PUSH
28216: LD_VAR 0 9
28220: IN
28221: NOT
28222: IFFALSE 28248
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_VAR 0 9
28233: PUSH
28234: LD_INT 1
28236: PPUSH
28237: LD_VAR 0 9
28241: PPUSH
28242: CALL_OW 12
28246: ARRAY
28247: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28248: LD_VAR 0 2
28252: PPUSH
28253: LD_VAR 0 3
28257: PPUSH
28258: CALL 28507 0 2
28262: NOT
28263: IFFALSE 28322
// repeat engine := _engine [ 1 ] ;
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_VAR 0 11
28274: PUSH
28275: LD_INT 1
28277: ARRAY
28278: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28279: LD_ADDR_VAR 0 11
28283: PUSH
28284: LD_VAR 0 11
28288: PPUSH
28289: LD_INT 1
28291: PPUSH
28292: CALL_OW 3
28296: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28297: LD_VAR 0 2
28301: PPUSH
28302: LD_VAR 0 3
28306: PPUSH
28307: CALL 28507 0 2
28311: PUSH
28312: LD_VAR 0 11
28316: PUSH
28317: EMPTY
28318: EQUAL
28319: OR
28320: IFFALSE 28265
// if not control in _control then
28322: LD_VAR 0 4
28326: PUSH
28327: LD_VAR 0 12
28331: IN
28332: NOT
28333: IFFALSE 28359
// control := _control [ rand ( 1 , _control ) ] ;
28335: LD_ADDR_VAR 0 4
28339: PUSH
28340: LD_VAR 0 12
28344: PUSH
28345: LD_INT 1
28347: PPUSH
28348: LD_VAR 0 12
28352: PPUSH
28353: CALL_OW 12
28357: ARRAY
28358: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28359: LD_VAR 0 2
28363: PPUSH
28364: LD_VAR 0 5
28368: PPUSH
28369: CALL 28727 0 2
28373: NOT
28374: IFFALSE 28433
// repeat weapon := _weapon [ 1 ] ;
28376: LD_ADDR_VAR 0 5
28380: PUSH
28381: LD_VAR 0 10
28385: PUSH
28386: LD_INT 1
28388: ARRAY
28389: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28390: LD_ADDR_VAR 0 10
28394: PUSH
28395: LD_VAR 0 10
28399: PPUSH
28400: LD_INT 1
28402: PPUSH
28403: CALL_OW 3
28407: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28408: LD_VAR 0 2
28412: PPUSH
28413: LD_VAR 0 5
28417: PPUSH
28418: CALL 28727 0 2
28422: PUSH
28423: LD_VAR 0 10
28427: PUSH
28428: EMPTY
28429: EQUAL
28430: OR
28431: IFFALSE 28376
// result := [ ] ;
28433: LD_ADDR_VAR 0 6
28437: PUSH
28438: EMPTY
28439: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28440: LD_VAR 0 1
28444: PPUSH
28445: LD_VAR 0 2
28449: PPUSH
28450: LD_VAR 0 3
28454: PPUSH
28455: LD_VAR 0 4
28459: PPUSH
28460: LD_VAR 0 5
28464: PPUSH
28465: CALL_OW 448
28469: IFFALSE 28502
// result := [ chassis , engine , control , weapon ] ;
28471: LD_ADDR_VAR 0 6
28475: PUSH
28476: LD_VAR 0 2
28480: PUSH
28481: LD_VAR 0 3
28485: PUSH
28486: LD_VAR 0 4
28490: PUSH
28491: LD_VAR 0 5
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: ST_TO_ADDR
// end ;
28502: LD_VAR 0 6
28506: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28507: LD_INT 0
28509: PPUSH
// if not chassis or not engine then
28510: LD_VAR 0 1
28514: NOT
28515: PUSH
28516: LD_VAR 0 2
28520: NOT
28521: OR
28522: IFFALSE 28526
// exit ;
28524: GO 28722
// case engine of engine_solar :
28526: LD_VAR 0 2
28530: PUSH
28531: LD_INT 2
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28577
28539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 11
28547: PUSH
28548: LD_INT 12
28550: PUSH
28551: LD_INT 13
28553: PUSH
28554: LD_INT 14
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: LD_INT 3
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: ST_TO_ADDR
28575: GO 28706
28577: LD_INT 1
28579: DOUBLE
28580: EQUAL
28581: IFTRUE 28585
28583: GO 28647
28585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28586: LD_ADDR_VAR 0 3
28590: PUSH
28591: LD_INT 11
28593: PUSH
28594: LD_INT 12
28596: PUSH
28597: LD_INT 13
28599: PUSH
28600: LD_INT 14
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: LD_INT 4
28614: PUSH
28615: LD_INT 5
28617: PUSH
28618: LD_INT 21
28620: PUSH
28621: LD_INT 23
28623: PUSH
28624: LD_INT 22
28626: PUSH
28627: LD_INT 24
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: ST_TO_ADDR
28645: GO 28706
28647: LD_INT 3
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28705
28655: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: LD_INT 13
28663: PUSH
28664: LD_INT 14
28666: PUSH
28667: LD_INT 2
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: LD_INT 4
28675: PUSH
28676: LD_INT 5
28678: PUSH
28679: LD_INT 21
28681: PUSH
28682: LD_INT 22
28684: PUSH
28685: LD_INT 23
28687: PUSH
28688: LD_INT 24
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: ST_TO_ADDR
28703: GO 28706
28705: POP
// result := ( chassis in result ) ;
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_VAR 0 1
28715: PUSH
28716: LD_VAR 0 3
28720: IN
28721: ST_TO_ADDR
// end ;
28722: LD_VAR 0 3
28726: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28727: LD_INT 0
28729: PPUSH
// if not chassis or not weapon then
28730: LD_VAR 0 1
28734: NOT
28735: PUSH
28736: LD_VAR 0 2
28740: NOT
28741: OR
28742: IFFALSE 28746
// exit ;
28744: GO 29806
// case weapon of us_machine_gun :
28746: LD_VAR 0 2
28750: PUSH
28751: LD_INT 2
28753: DOUBLE
28754: EQUAL
28755: IFTRUE 28759
28757: GO 28789
28759: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28760: LD_ADDR_VAR 0 3
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: LD_INT 3
28773: PUSH
28774: LD_INT 4
28776: PUSH
28777: LD_INT 5
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: ST_TO_ADDR
28787: GO 29790
28789: LD_INT 3
28791: DOUBLE
28792: EQUAL
28793: IFTRUE 28797
28795: GO 28827
28797: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28798: LD_ADDR_VAR 0 3
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: LD_INT 4
28814: PUSH
28815: LD_INT 5
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
28825: GO 29790
28827: LD_INT 11
28829: DOUBLE
28830: EQUAL
28831: IFTRUE 28835
28833: GO 28865
28835: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: LD_INT 4
28852: PUSH
28853: LD_INT 5
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
28863: GO 29790
28865: LD_INT 4
28867: DOUBLE
28868: EQUAL
28869: IFTRUE 28873
28871: GO 28899
28873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28874: LD_ADDR_VAR 0 3
28878: PUSH
28879: LD_INT 2
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: LD_INT 4
28887: PUSH
28888: LD_INT 5
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
28897: GO 29790
28899: LD_INT 5
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28933
28907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: LD_INT 3
28918: PUSH
28919: LD_INT 4
28921: PUSH
28922: LD_INT 5
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
28931: GO 29790
28933: LD_INT 9
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28967
28941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 3
28952: PUSH
28953: LD_INT 4
28955: PUSH
28956: LD_INT 5
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 29790
28967: LD_INT 7
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29001
28975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: LD_INT 4
28989: PUSH
28990: LD_INT 5
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29790
29001: LD_INT 12
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29035
29009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: LD_INT 4
29023: PUSH
29024: LD_INT 5
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29790
29035: LD_INT 13
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29069
29043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 3
29054: PUSH
29055: LD_INT 4
29057: PUSH
29058: LD_INT 5
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29790
29069: LD_INT 14
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29095
29077: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 4
29085: PUSH
29086: LD_INT 5
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: ST_TO_ADDR
29093: GO 29790
29095: LD_INT 6
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29121
29103: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: LD_INT 4
29111: PUSH
29112: LD_INT 5
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: ST_TO_ADDR
29119: GO 29790
29121: LD_INT 10
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29147
29129: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: LD_INT 5
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: ST_TO_ADDR
29145: GO 29790
29147: LD_INT 22
29149: DOUBLE
29150: EQUAL
29151: IFTRUE 29155
29153: GO 29181
29155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29156: LD_ADDR_VAR 0 3
29160: PUSH
29161: LD_INT 11
29163: PUSH
29164: LD_INT 12
29166: PUSH
29167: LD_INT 13
29169: PUSH
29170: LD_INT 14
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
29179: GO 29790
29181: LD_INT 23
29183: DOUBLE
29184: EQUAL
29185: IFTRUE 29189
29187: GO 29215
29189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_INT 11
29197: PUSH
29198: LD_INT 12
29200: PUSH
29201: LD_INT 13
29203: PUSH
29204: LD_INT 14
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: ST_TO_ADDR
29213: GO 29790
29215: LD_INT 24
29217: DOUBLE
29218: EQUAL
29219: IFTRUE 29223
29221: GO 29249
29223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_INT 11
29231: PUSH
29232: LD_INT 12
29234: PUSH
29235: LD_INT 13
29237: PUSH
29238: LD_INT 14
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: ST_TO_ADDR
29247: GO 29790
29249: LD_INT 30
29251: DOUBLE
29252: EQUAL
29253: IFTRUE 29257
29255: GO 29283
29257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29258: LD_ADDR_VAR 0 3
29262: PUSH
29263: LD_INT 11
29265: PUSH
29266: LD_INT 12
29268: PUSH
29269: LD_INT 13
29271: PUSH
29272: LD_INT 14
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
29281: GO 29790
29283: LD_INT 25
29285: DOUBLE
29286: EQUAL
29287: IFTRUE 29291
29289: GO 29309
29291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29292: LD_ADDR_VAR 0 3
29296: PUSH
29297: LD_INT 13
29299: PUSH
29300: LD_INT 14
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: ST_TO_ADDR
29307: GO 29790
29309: LD_INT 27
29311: DOUBLE
29312: EQUAL
29313: IFTRUE 29317
29315: GO 29335
29317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29318: LD_ADDR_VAR 0 3
29322: PUSH
29323: LD_INT 13
29325: PUSH
29326: LD_INT 14
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: ST_TO_ADDR
29333: GO 29790
29335: LD_INT 92
29337: DOUBLE
29338: EQUAL
29339: IFTRUE 29343
29341: GO 29369
29343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: LD_INT 11
29351: PUSH
29352: LD_INT 12
29354: PUSH
29355: LD_INT 13
29357: PUSH
29358: LD_INT 14
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
29367: GO 29790
29369: LD_INT 28
29371: DOUBLE
29372: EQUAL
29373: IFTRUE 29377
29375: GO 29395
29377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 13
29385: PUSH
29386: LD_INT 14
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: ST_TO_ADDR
29393: GO 29790
29395: LD_INT 29
29397: DOUBLE
29398: EQUAL
29399: IFTRUE 29403
29401: GO 29421
29403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29404: LD_ADDR_VAR 0 3
29408: PUSH
29409: LD_INT 13
29411: PUSH
29412: LD_INT 14
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: ST_TO_ADDR
29419: GO 29790
29421: LD_INT 31
29423: DOUBLE
29424: EQUAL
29425: IFTRUE 29429
29427: GO 29447
29429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29430: LD_ADDR_VAR 0 3
29434: PUSH
29435: LD_INT 13
29437: PUSH
29438: LD_INT 14
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: ST_TO_ADDR
29445: GO 29790
29447: LD_INT 26
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29473
29455: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 13
29463: PUSH
29464: LD_INT 14
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: ST_TO_ADDR
29471: GO 29790
29473: LD_INT 42
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29481
29479: GO 29507
29481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_INT 21
29489: PUSH
29490: LD_INT 22
29492: PUSH
29493: LD_INT 23
29495: PUSH
29496: LD_INT 24
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
29505: GO 29790
29507: LD_INT 43
29509: DOUBLE
29510: EQUAL
29511: IFTRUE 29515
29513: GO 29541
29515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 21
29523: PUSH
29524: LD_INT 22
29526: PUSH
29527: LD_INT 23
29529: PUSH
29530: LD_INT 24
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: ST_TO_ADDR
29539: GO 29790
29541: LD_INT 44
29543: DOUBLE
29544: EQUAL
29545: IFTRUE 29549
29547: GO 29575
29549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29550: LD_ADDR_VAR 0 3
29554: PUSH
29555: LD_INT 21
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_INT 23
29563: PUSH
29564: LD_INT 24
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: ST_TO_ADDR
29573: GO 29790
29575: LD_INT 45
29577: DOUBLE
29578: EQUAL
29579: IFTRUE 29583
29581: GO 29609
29583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_INT 21
29591: PUSH
29592: LD_INT 22
29594: PUSH
29595: LD_INT 23
29597: PUSH
29598: LD_INT 24
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
29607: GO 29790
29609: LD_INT 49
29611: DOUBLE
29612: EQUAL
29613: IFTRUE 29617
29615: GO 29643
29617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29618: LD_ADDR_VAR 0 3
29622: PUSH
29623: LD_INT 21
29625: PUSH
29626: LD_INT 22
29628: PUSH
29629: LD_INT 23
29631: PUSH
29632: LD_INT 24
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
29641: GO 29790
29643: LD_INT 51
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29677
29651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 21
29659: PUSH
29660: LD_INT 22
29662: PUSH
29663: LD_INT 23
29665: PUSH
29666: LD_INT 24
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: ST_TO_ADDR
29675: GO 29790
29677: LD_INT 52
29679: DOUBLE
29680: EQUAL
29681: IFTRUE 29685
29683: GO 29711
29685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29686: LD_ADDR_VAR 0 3
29690: PUSH
29691: LD_INT 21
29693: PUSH
29694: LD_INT 22
29696: PUSH
29697: LD_INT 23
29699: PUSH
29700: LD_INT 24
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: ST_TO_ADDR
29709: GO 29790
29711: LD_INT 53
29713: DOUBLE
29714: EQUAL
29715: IFTRUE 29719
29717: GO 29737
29719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29720: LD_ADDR_VAR 0 3
29724: PUSH
29725: LD_INT 23
29727: PUSH
29728: LD_INT 24
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: ST_TO_ADDR
29735: GO 29790
29737: LD_INT 46
29739: DOUBLE
29740: EQUAL
29741: IFTRUE 29745
29743: GO 29763
29745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 23
29753: PUSH
29754: LD_INT 24
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: ST_TO_ADDR
29761: GO 29790
29763: LD_INT 47
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29789
29771: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_INT 23
29779: PUSH
29780: LD_INT 24
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: ST_TO_ADDR
29787: GO 29790
29789: POP
// result := ( chassis in result ) ;
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_VAR 0 1
29799: PUSH
29800: LD_VAR 0 3
29804: IN
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 3
29810: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29811: LD_INT 0
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
// result := array ;
29820: LD_ADDR_VAR 0 5
29824: PUSH
29825: LD_VAR 0 1
29829: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29830: LD_VAR 0 1
29834: NOT
29835: PUSH
29836: LD_VAR 0 2
29840: NOT
29841: OR
29842: PUSH
29843: LD_VAR 0 3
29847: NOT
29848: OR
29849: PUSH
29850: LD_VAR 0 2
29854: PUSH
29855: LD_VAR 0 1
29859: GREATER
29860: OR
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: LD_VAR 0 1
29871: GREATER
29872: OR
29873: IFFALSE 29877
// exit ;
29875: GO 30173
// if direction then
29877: LD_VAR 0 4
29881: IFFALSE 29945
// begin d := 1 ;
29883: LD_ADDR_VAR 0 9
29887: PUSH
29888: LD_INT 1
29890: ST_TO_ADDR
// if i_from > i_to then
29891: LD_VAR 0 2
29895: PUSH
29896: LD_VAR 0 3
29900: GREATER
29901: IFFALSE 29927
// length := ( array - i_from ) + i_to else
29903: LD_ADDR_VAR 0 11
29907: PUSH
29908: LD_VAR 0 1
29912: PUSH
29913: LD_VAR 0 2
29917: MINUS
29918: PUSH
29919: LD_VAR 0 3
29923: PLUS
29924: ST_TO_ADDR
29925: GO 29943
// length := i_to - i_from ;
29927: LD_ADDR_VAR 0 11
29931: PUSH
29932: LD_VAR 0 3
29936: PUSH
29937: LD_VAR 0 2
29941: MINUS
29942: ST_TO_ADDR
// end else
29943: GO 30006
// begin d := - 1 ;
29945: LD_ADDR_VAR 0 9
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: ST_TO_ADDR
// if i_from > i_to then
29954: LD_VAR 0 2
29958: PUSH
29959: LD_VAR 0 3
29963: GREATER
29964: IFFALSE 29984
// length := i_from - i_to else
29966: LD_ADDR_VAR 0 11
29970: PUSH
29971: LD_VAR 0 2
29975: PUSH
29976: LD_VAR 0 3
29980: MINUS
29981: ST_TO_ADDR
29982: GO 30006
// length := ( array - i_to ) + i_from ;
29984: LD_ADDR_VAR 0 11
29988: PUSH
29989: LD_VAR 0 1
29993: PUSH
29994: LD_VAR 0 3
29998: MINUS
29999: PUSH
30000: LD_VAR 0 2
30004: PLUS
30005: ST_TO_ADDR
// end ; if not length then
30006: LD_VAR 0 11
30010: NOT
30011: IFFALSE 30015
// exit ;
30013: GO 30173
// tmp := array ;
30015: LD_ADDR_VAR 0 10
30019: PUSH
30020: LD_VAR 0 1
30024: ST_TO_ADDR
// for i = 1 to length do
30025: LD_ADDR_VAR 0 6
30029: PUSH
30030: DOUBLE
30031: LD_INT 1
30033: DEC
30034: ST_TO_ADDR
30035: LD_VAR 0 11
30039: PUSH
30040: FOR_TO
30041: IFFALSE 30161
// begin for j = 1 to array do
30043: LD_ADDR_VAR 0 7
30047: PUSH
30048: DOUBLE
30049: LD_INT 1
30051: DEC
30052: ST_TO_ADDR
30053: LD_VAR 0 1
30057: PUSH
30058: FOR_TO
30059: IFFALSE 30147
// begin k := j + d ;
30061: LD_ADDR_VAR 0 8
30065: PUSH
30066: LD_VAR 0 7
30070: PUSH
30071: LD_VAR 0 9
30075: PLUS
30076: ST_TO_ADDR
// if k > array then
30077: LD_VAR 0 8
30081: PUSH
30082: LD_VAR 0 1
30086: GREATER
30087: IFFALSE 30097
// k := 1 ;
30089: LD_ADDR_VAR 0 8
30093: PUSH
30094: LD_INT 1
30096: ST_TO_ADDR
// if not k then
30097: LD_VAR 0 8
30101: NOT
30102: IFFALSE 30114
// k := array ;
30104: LD_ADDR_VAR 0 8
30108: PUSH
30109: LD_VAR 0 1
30113: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30114: LD_ADDR_VAR 0 10
30118: PUSH
30119: LD_VAR 0 10
30123: PPUSH
30124: LD_VAR 0 8
30128: PPUSH
30129: LD_VAR 0 1
30133: PUSH
30134: LD_VAR 0 7
30138: ARRAY
30139: PPUSH
30140: CALL_OW 1
30144: ST_TO_ADDR
// end ;
30145: GO 30058
30147: POP
30148: POP
// array := tmp ;
30149: LD_ADDR_VAR 0 1
30153: PUSH
30154: LD_VAR 0 10
30158: ST_TO_ADDR
// end ;
30159: GO 30040
30161: POP
30162: POP
// result := array ;
30163: LD_ADDR_VAR 0 5
30167: PUSH
30168: LD_VAR 0 1
30172: ST_TO_ADDR
// end ;
30173: LD_VAR 0 5
30177: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30178: LD_INT 0
30180: PPUSH
30181: PPUSH
// result := 0 ;
30182: LD_ADDR_VAR 0 3
30186: PUSH
30187: LD_INT 0
30189: ST_TO_ADDR
// if not array or not value in array then
30190: LD_VAR 0 1
30194: NOT
30195: PUSH
30196: LD_VAR 0 2
30200: PUSH
30201: LD_VAR 0 1
30205: IN
30206: NOT
30207: OR
30208: IFFALSE 30212
// exit ;
30210: GO 30266
// for i = 1 to array do
30212: LD_ADDR_VAR 0 4
30216: PUSH
30217: DOUBLE
30218: LD_INT 1
30220: DEC
30221: ST_TO_ADDR
30222: LD_VAR 0 1
30226: PUSH
30227: FOR_TO
30228: IFFALSE 30264
// if value = array [ i ] then
30230: LD_VAR 0 2
30234: PUSH
30235: LD_VAR 0 1
30239: PUSH
30240: LD_VAR 0 4
30244: ARRAY
30245: EQUAL
30246: IFFALSE 30262
// begin result := i ;
30248: LD_ADDR_VAR 0 3
30252: PUSH
30253: LD_VAR 0 4
30257: ST_TO_ADDR
// exit ;
30258: POP
30259: POP
30260: GO 30266
// end ;
30262: GO 30227
30264: POP
30265: POP
// end ;
30266: LD_VAR 0 3
30270: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30271: LD_INT 0
30273: PPUSH
// vc_chassis := chassis ;
30274: LD_ADDR_OWVAR 37
30278: PUSH
30279: LD_VAR 0 1
30283: ST_TO_ADDR
// vc_engine := engine ;
30284: LD_ADDR_OWVAR 39
30288: PUSH
30289: LD_VAR 0 2
30293: ST_TO_ADDR
// vc_control := control ;
30294: LD_ADDR_OWVAR 38
30298: PUSH
30299: LD_VAR 0 3
30303: ST_TO_ADDR
// vc_weapon := weapon ;
30304: LD_ADDR_OWVAR 40
30308: PUSH
30309: LD_VAR 0 4
30313: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30314: LD_ADDR_OWVAR 41
30318: PUSH
30319: LD_VAR 0 5
30323: ST_TO_ADDR
// end ;
30324: LD_VAR 0 6
30328: RET
// export function WantPlant ( unit ) ; var task ; begin
30329: LD_INT 0
30331: PPUSH
30332: PPUSH
// result := false ;
30333: LD_ADDR_VAR 0 2
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30341: LD_ADDR_VAR 0 3
30345: PUSH
30346: LD_VAR 0 1
30350: PPUSH
30351: CALL_OW 437
30355: ST_TO_ADDR
// if task then
30356: LD_VAR 0 3
30360: IFFALSE 30388
// if task [ 1 ] [ 1 ] = p then
30362: LD_VAR 0 3
30366: PUSH
30367: LD_INT 1
30369: ARRAY
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PUSH
30375: LD_STRING p
30377: EQUAL
30378: IFFALSE 30388
// result := true ;
30380: LD_ADDR_VAR 0 2
30384: PUSH
30385: LD_INT 1
30387: ST_TO_ADDR
// end ;
30388: LD_VAR 0 2
30392: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
// if pos < 1 then
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: LESS
30407: IFFALSE 30411
// exit ;
30409: GO 30714
// if pos = 1 then
30411: LD_VAR 0 2
30415: PUSH
30416: LD_INT 1
30418: EQUAL
30419: IFFALSE 30452
// result := Replace ( arr , pos [ 1 ] , value ) else
30421: LD_ADDR_VAR 0 4
30425: PUSH
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_VAR 0 2
30435: PUSH
30436: LD_INT 1
30438: ARRAY
30439: PPUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: CALL_OW 1
30449: ST_TO_ADDR
30450: GO 30714
// begin tmp := arr ;
30452: LD_ADDR_VAR 0 6
30456: PUSH
30457: LD_VAR 0 1
30461: ST_TO_ADDR
// s_arr := [ tmp ] ;
30462: LD_ADDR_VAR 0 7
30466: PUSH
30467: LD_VAR 0 6
30471: PUSH
30472: EMPTY
30473: LIST
30474: ST_TO_ADDR
// for i = 1 to pos - 1 do
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: DOUBLE
30481: LD_INT 1
30483: DEC
30484: ST_TO_ADDR
30485: LD_VAR 0 2
30489: PUSH
30490: LD_INT 1
30492: MINUS
30493: PUSH
30494: FOR_TO
30495: IFFALSE 30540
// begin tmp := tmp [ pos [ i ] ] ;
30497: LD_ADDR_VAR 0 6
30501: PUSH
30502: LD_VAR 0 6
30506: PUSH
30507: LD_VAR 0 2
30511: PUSH
30512: LD_VAR 0 5
30516: ARRAY
30517: ARRAY
30518: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30519: LD_ADDR_VAR 0 7
30523: PUSH
30524: LD_VAR 0 7
30528: PUSH
30529: LD_VAR 0 6
30533: PUSH
30534: EMPTY
30535: LIST
30536: ADD
30537: ST_TO_ADDR
// end ;
30538: GO 30494
30540: POP
30541: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30542: LD_ADDR_VAR 0 6
30546: PUSH
30547: LD_VAR 0 6
30551: PPUSH
30552: LD_VAR 0 2
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: PPUSH
30563: LD_VAR 0 3
30567: PPUSH
30568: CALL_OW 1
30572: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30573: LD_ADDR_VAR 0 7
30577: PUSH
30578: LD_VAR 0 7
30582: PPUSH
30583: LD_VAR 0 7
30587: PPUSH
30588: LD_VAR 0 6
30592: PPUSH
30593: CALL_OW 1
30597: ST_TO_ADDR
// for i = s_arr downto 2 do
30598: LD_ADDR_VAR 0 5
30602: PUSH
30603: DOUBLE
30604: LD_VAR 0 7
30608: INC
30609: ST_TO_ADDR
30610: LD_INT 2
30612: PUSH
30613: FOR_DOWNTO
30614: IFFALSE 30698
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30616: LD_ADDR_VAR 0 6
30620: PUSH
30621: LD_VAR 0 7
30625: PUSH
30626: LD_VAR 0 5
30630: PUSH
30631: LD_INT 1
30633: MINUS
30634: ARRAY
30635: PPUSH
30636: LD_VAR 0 2
30640: PUSH
30641: LD_VAR 0 5
30645: PUSH
30646: LD_INT 1
30648: MINUS
30649: ARRAY
30650: PPUSH
30651: LD_VAR 0 7
30655: PUSH
30656: LD_VAR 0 5
30660: ARRAY
30661: PPUSH
30662: CALL_OW 1
30666: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30667: LD_ADDR_VAR 0 7
30671: PUSH
30672: LD_VAR 0 7
30676: PPUSH
30677: LD_VAR 0 5
30681: PUSH
30682: LD_INT 1
30684: MINUS
30685: PPUSH
30686: LD_VAR 0 6
30690: PPUSH
30691: CALL_OW 1
30695: ST_TO_ADDR
// end ;
30696: GO 30613
30698: POP
30699: POP
// result := s_arr [ 1 ] ;
30700: LD_ADDR_VAR 0 4
30704: PUSH
30705: LD_VAR 0 7
30709: PUSH
30710: LD_INT 1
30712: ARRAY
30713: ST_TO_ADDR
// end ; end ;
30714: LD_VAR 0 4
30718: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30719: LD_INT 0
30721: PPUSH
30722: PPUSH
// if not list then
30723: LD_VAR 0 1
30727: NOT
30728: IFFALSE 30732
// exit ;
30730: GO 30823
// i := list [ pos1 ] ;
30732: LD_ADDR_VAR 0 5
30736: PUSH
30737: LD_VAR 0 1
30741: PUSH
30742: LD_VAR 0 2
30746: ARRAY
30747: ST_TO_ADDR
// if not i then
30748: LD_VAR 0 5
30752: NOT
30753: IFFALSE 30757
// exit ;
30755: GO 30823
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30757: LD_ADDR_VAR 0 1
30761: PUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: LD_VAR 0 2
30771: PPUSH
30772: LD_VAR 0 1
30776: PUSH
30777: LD_VAR 0 3
30781: ARRAY
30782: PPUSH
30783: CALL_OW 1
30787: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30788: LD_ADDR_VAR 0 1
30792: PUSH
30793: LD_VAR 0 1
30797: PPUSH
30798: LD_VAR 0 3
30802: PPUSH
30803: LD_VAR 0 5
30807: PPUSH
30808: CALL_OW 1
30812: ST_TO_ADDR
// result := list ;
30813: LD_ADDR_VAR 0 4
30817: PUSH
30818: LD_VAR 0 1
30822: ST_TO_ADDR
// end ;
30823: LD_VAR 0 4
30827: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30828: LD_INT 0
30830: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30831: LD_ADDR_VAR 0 5
30835: PUSH
30836: LD_VAR 0 1
30840: PPUSH
30841: CALL_OW 250
30845: PPUSH
30846: LD_VAR 0 1
30850: PPUSH
30851: CALL_OW 251
30855: PPUSH
30856: LD_VAR 0 2
30860: PPUSH
30861: LD_VAR 0 3
30865: PPUSH
30866: LD_VAR 0 4
30870: PPUSH
30871: CALL 31249 0 5
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 5
30880: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
// if not list or not unit then
30887: LD_VAR 0 2
30891: NOT
30892: PUSH
30893: LD_VAR 0 1
30897: NOT
30898: OR
30899: IFFALSE 30903
// exit ;
30901: GO 31244
// result := [ ] ;
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: EMPTY
30909: ST_TO_ADDR
// for i in list do
30910: LD_ADDR_VAR 0 6
30914: PUSH
30915: LD_VAR 0 2
30919: PUSH
30920: FOR_IN
30921: IFFALSE 31139
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30923: LD_ADDR_VAR 0 8
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: LD_VAR 0 6
30937: PUSH
30938: LD_INT 1
30940: ARRAY
30941: PPUSH
30942: LD_VAR 0 6
30946: PUSH
30947: LD_INT 2
30949: ARRAY
30950: PPUSH
30951: CALL_OW 297
30955: ST_TO_ADDR
// if not Count ( result ) then
30956: LD_VAR 0 5
30960: PPUSH
30961: CALL 27533 0 1
30965: NOT
30966: IFFALSE 30999
// begin result := Join ( result , [ i , tmp ] ) ;
30968: LD_ADDR_VAR 0 5
30972: PUSH
30973: LD_VAR 0 5
30977: PPUSH
30978: LD_VAR 0 6
30982: PUSH
30983: LD_VAR 0 8
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PPUSH
30992: CALL 63122 0 2
30996: ST_TO_ADDR
// continue ;
30997: GO 30920
// end ; if result [ result ] [ 2 ] <= tmp then
30999: LD_VAR 0 5
31003: PUSH
31004: LD_VAR 0 5
31008: ARRAY
31009: PUSH
31010: LD_INT 2
31012: ARRAY
31013: PUSH
31014: LD_VAR 0 8
31018: LESSEQUAL
31019: IFFALSE 31052
// result := Join ( result , [ i , tmp ] ) else
31021: LD_ADDR_VAR 0 5
31025: PUSH
31026: LD_VAR 0 5
31030: PPUSH
31031: LD_VAR 0 6
31035: PUSH
31036: LD_VAR 0 8
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PPUSH
31045: CALL 63122 0 2
31049: ST_TO_ADDR
31050: GO 31137
// begin for j := 1 to Count ( result ) do
31052: LD_ADDR_VAR 0 7
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_VAR 0 5
31066: PPUSH
31067: CALL 27533 0 1
31071: PUSH
31072: FOR_TO
31073: IFFALSE 31135
// begin if tmp < result [ j ] [ 2 ] then
31075: LD_VAR 0 8
31079: PUSH
31080: LD_VAR 0 5
31084: PUSH
31085: LD_VAR 0 7
31089: ARRAY
31090: PUSH
31091: LD_INT 2
31093: ARRAY
31094: LESS
31095: IFFALSE 31133
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31097: LD_ADDR_VAR 0 5
31101: PUSH
31102: LD_VAR 0 5
31106: PPUSH
31107: LD_VAR 0 7
31111: PPUSH
31112: LD_VAR 0 6
31116: PUSH
31117: LD_VAR 0 8
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 2
31130: ST_TO_ADDR
// break ;
31131: GO 31135
// end ; end ;
31133: GO 31072
31135: POP
31136: POP
// end ; end ;
31137: GO 30920
31139: POP
31140: POP
// if result and not asc then
31141: LD_VAR 0 5
31145: PUSH
31146: LD_VAR 0 3
31150: NOT
31151: AND
31152: IFFALSE 31169
// result := ReverseArray ( result ) ;
31154: LD_ADDR_VAR 0 5
31158: PUSH
31159: LD_VAR 0 5
31163: PPUSH
31164: CALL 58409 0 1
31168: ST_TO_ADDR
// tmp := [ ] ;
31169: LD_ADDR_VAR 0 8
31173: PUSH
31174: EMPTY
31175: ST_TO_ADDR
// if mode then
31176: LD_VAR 0 4
31180: IFFALSE 31244
// begin for i := 1 to result do
31182: LD_ADDR_VAR 0 6
31186: PUSH
31187: DOUBLE
31188: LD_INT 1
31190: DEC
31191: ST_TO_ADDR
31192: LD_VAR 0 5
31196: PUSH
31197: FOR_TO
31198: IFFALSE 31232
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31200: LD_ADDR_VAR 0 8
31204: PUSH
31205: LD_VAR 0 8
31209: PPUSH
31210: LD_VAR 0 5
31214: PUSH
31215: LD_VAR 0 6
31219: ARRAY
31220: PUSH
31221: LD_INT 1
31223: ARRAY
31224: PPUSH
31225: CALL 63122 0 2
31229: ST_TO_ADDR
31230: GO 31197
31232: POP
31233: POP
// result := tmp ;
31234: LD_ADDR_VAR 0 5
31238: PUSH
31239: LD_VAR 0 8
31243: ST_TO_ADDR
// end ; end ;
31244: LD_VAR 0 5
31248: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31249: LD_INT 0
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
// if not list then
31255: LD_VAR 0 3
31259: NOT
31260: IFFALSE 31264
// exit ;
31262: GO 31652
// result := [ ] ;
31264: LD_ADDR_VAR 0 6
31268: PUSH
31269: EMPTY
31270: ST_TO_ADDR
// for i in list do
31271: LD_ADDR_VAR 0 7
31275: PUSH
31276: LD_VAR 0 3
31280: PUSH
31281: FOR_IN
31282: IFFALSE 31484
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31284: LD_ADDR_VAR 0 9
31288: PUSH
31289: LD_VAR 0 7
31293: PPUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: LD_VAR 0 2
31303: PPUSH
31304: CALL_OW 297
31308: ST_TO_ADDR
// if not result then
31309: LD_VAR 0 6
31313: NOT
31314: IFFALSE 31340
// result := [ [ i , tmp ] ] else
31316: LD_ADDR_VAR 0 6
31320: PUSH
31321: LD_VAR 0 7
31325: PUSH
31326: LD_VAR 0 9
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: ST_TO_ADDR
31338: GO 31482
// begin if result [ result ] [ 2 ] < tmp then
31340: LD_VAR 0 6
31344: PUSH
31345: LD_VAR 0 6
31349: ARRAY
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: PUSH
31355: LD_VAR 0 9
31359: LESS
31360: IFFALSE 31402
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31362: LD_ADDR_VAR 0 6
31366: PUSH
31367: LD_VAR 0 6
31371: PPUSH
31372: LD_VAR 0 6
31376: PUSH
31377: LD_INT 1
31379: PLUS
31380: PPUSH
31381: LD_VAR 0 7
31385: PUSH
31386: LD_VAR 0 9
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PPUSH
31395: CALL_OW 2
31399: ST_TO_ADDR
31400: GO 31482
// for j = 1 to result do
31402: LD_ADDR_VAR 0 8
31406: PUSH
31407: DOUBLE
31408: LD_INT 1
31410: DEC
31411: ST_TO_ADDR
31412: LD_VAR 0 6
31416: PUSH
31417: FOR_TO
31418: IFFALSE 31480
// begin if tmp < result [ j ] [ 2 ] then
31420: LD_VAR 0 9
31424: PUSH
31425: LD_VAR 0 6
31429: PUSH
31430: LD_VAR 0 8
31434: ARRAY
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: LESS
31440: IFFALSE 31478
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31442: LD_ADDR_VAR 0 6
31446: PUSH
31447: LD_VAR 0 6
31451: PPUSH
31452: LD_VAR 0 8
31456: PPUSH
31457: LD_VAR 0 7
31461: PUSH
31462: LD_VAR 0 9
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PPUSH
31471: CALL_OW 2
31475: ST_TO_ADDR
// break ;
31476: GO 31480
// end ; end ;
31478: GO 31417
31480: POP
31481: POP
// end ; end ;
31482: GO 31281
31484: POP
31485: POP
// if result and not asc then
31486: LD_VAR 0 6
31490: PUSH
31491: LD_VAR 0 4
31495: NOT
31496: AND
31497: IFFALSE 31572
// begin tmp := result ;
31499: LD_ADDR_VAR 0 9
31503: PUSH
31504: LD_VAR 0 6
31508: ST_TO_ADDR
// for i = tmp downto 1 do
31509: LD_ADDR_VAR 0 7
31513: PUSH
31514: DOUBLE
31515: LD_VAR 0 9
31519: INC
31520: ST_TO_ADDR
31521: LD_INT 1
31523: PUSH
31524: FOR_DOWNTO
31525: IFFALSE 31570
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31527: LD_ADDR_VAR 0 6
31531: PUSH
31532: LD_VAR 0 6
31536: PPUSH
31537: LD_VAR 0 9
31541: PUSH
31542: LD_VAR 0 7
31546: MINUS
31547: PUSH
31548: LD_INT 1
31550: PLUS
31551: PPUSH
31552: LD_VAR 0 9
31556: PUSH
31557: LD_VAR 0 7
31561: ARRAY
31562: PPUSH
31563: CALL_OW 1
31567: ST_TO_ADDR
31568: GO 31524
31570: POP
31571: POP
// end ; tmp := [ ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: EMPTY
31578: ST_TO_ADDR
// if mode then
31579: LD_VAR 0 5
31583: IFFALSE 31652
// begin for i = 1 to result do
31585: LD_ADDR_VAR 0 7
31589: PUSH
31590: DOUBLE
31591: LD_INT 1
31593: DEC
31594: ST_TO_ADDR
31595: LD_VAR 0 6
31599: PUSH
31600: FOR_TO
31601: IFFALSE 31640
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31603: LD_ADDR_VAR 0 9
31607: PUSH
31608: LD_VAR 0 9
31612: PPUSH
31613: LD_VAR 0 7
31617: PPUSH
31618: LD_VAR 0 6
31622: PUSH
31623: LD_VAR 0 7
31627: ARRAY
31628: PUSH
31629: LD_INT 1
31631: ARRAY
31632: PPUSH
31633: CALL_OW 1
31637: ST_TO_ADDR
31638: GO 31600
31640: POP
31641: POP
// result := tmp ;
31642: LD_ADDR_VAR 0 6
31646: PUSH
31647: LD_VAR 0 9
31651: ST_TO_ADDR
// end ; end ;
31652: LD_VAR 0 6
31656: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31657: LD_INT 0
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31665: LD_ADDR_VAR 0 5
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: ST_TO_ADDR
// if not x or not y then
31687: LD_VAR 0 2
31691: NOT
31692: PUSH
31693: LD_VAR 0 3
31697: NOT
31698: OR
31699: IFFALSE 31703
// exit ;
31701: GO 33353
// if not range then
31703: LD_VAR 0 4
31707: NOT
31708: IFFALSE 31718
// range := 10 ;
31710: LD_ADDR_VAR 0 4
31714: PUSH
31715: LD_INT 10
31717: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31718: LD_ADDR_VAR 0 8
31722: PUSH
31723: LD_INT 81
31725: PUSH
31726: LD_VAR 0 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 92
31737: PUSH
31738: LD_VAR 0 2
31742: PUSH
31743: LD_VAR 0 3
31747: PUSH
31748: LD_VAR 0 4
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 3
31761: PUSH
31762: LD_INT 21
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: PPUSH
31781: CALL_OW 69
31785: ST_TO_ADDR
// if not tmp then
31786: LD_VAR 0 8
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 33353
// for i in tmp do
31795: LD_ADDR_VAR 0 6
31799: PUSH
31800: LD_VAR 0 8
31804: PUSH
31805: FOR_IN
31806: IFFALSE 33328
// begin points := [ 0 , 0 , 0 ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// bpoints := 1 ;
31827: LD_ADDR_VAR 0 10
31831: PUSH
31832: LD_INT 1
31834: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31835: LD_VAR 0 6
31839: PPUSH
31840: CALL_OW 247
31844: PUSH
31845: LD_INT 1
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 32431
31853: POP
// begin if GetClass ( i ) = 1 then
31854: LD_VAR 0 6
31858: PPUSH
31859: CALL_OW 257
31863: PUSH
31864: LD_INT 1
31866: EQUAL
31867: IFFALSE 31888
// points := [ 10 , 5 , 3 ] ;
31869: LD_ADDR_VAR 0 9
31873: PUSH
31874: LD_INT 10
31876: PUSH
31877: LD_INT 5
31879: PUSH
31880: LD_INT 3
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31888: LD_VAR 0 6
31892: PPUSH
31893: CALL_OW 257
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: LD_INT 4
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: LIST
31911: IN
31912: IFFALSE 31933
// points := [ 3 , 2 , 1 ] ;
31914: LD_ADDR_VAR 0 9
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31933: LD_VAR 0 6
31937: PPUSH
31938: CALL_OW 257
31942: PUSH
31943: LD_INT 5
31945: EQUAL
31946: IFFALSE 31967
// points := [ 130 , 5 , 2 ] ;
31948: LD_ADDR_VAR 0 9
31952: PUSH
31953: LD_INT 130
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31967: LD_VAR 0 6
31971: PPUSH
31972: CALL_OW 257
31976: PUSH
31977: LD_INT 8
31979: EQUAL
31980: IFFALSE 32001
// points := [ 35 , 35 , 30 ] ;
31982: LD_ADDR_VAR 0 9
31986: PUSH
31987: LD_INT 35
31989: PUSH
31990: LD_INT 35
31992: PUSH
31993: LD_INT 30
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32001: LD_VAR 0 6
32005: PPUSH
32006: CALL_OW 257
32010: PUSH
32011: LD_INT 9
32013: EQUAL
32014: IFFALSE 32035
// points := [ 20 , 55 , 40 ] ;
32016: LD_ADDR_VAR 0 9
32020: PUSH
32021: LD_INT 20
32023: PUSH
32024: LD_INT 55
32026: PUSH
32027: LD_INT 40
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32035: LD_VAR 0 6
32039: PPUSH
32040: CALL_OW 257
32044: PUSH
32045: LD_INT 12
32047: PUSH
32048: LD_INT 16
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: IN
32055: IFFALSE 32076
// points := [ 5 , 3 , 2 ] ;
32057: LD_ADDR_VAR 0 9
32061: PUSH
32062: LD_INT 5
32064: PUSH
32065: LD_INT 3
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32076: LD_VAR 0 6
32080: PPUSH
32081: CALL_OW 257
32085: PUSH
32086: LD_INT 17
32088: EQUAL
32089: IFFALSE 32110
// points := [ 100 , 50 , 75 ] ;
32091: LD_ADDR_VAR 0 9
32095: PUSH
32096: LD_INT 100
32098: PUSH
32099: LD_INT 50
32101: PUSH
32102: LD_INT 75
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32110: LD_VAR 0 6
32114: PPUSH
32115: CALL_OW 257
32119: PUSH
32120: LD_INT 15
32122: EQUAL
32123: IFFALSE 32144
// points := [ 10 , 5 , 3 ] ;
32125: LD_ADDR_VAR 0 9
32129: PUSH
32130: LD_INT 10
32132: PUSH
32133: LD_INT 5
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32144: LD_VAR 0 6
32148: PPUSH
32149: CALL_OW 257
32153: PUSH
32154: LD_INT 14
32156: EQUAL
32157: IFFALSE 32178
// points := [ 10 , 0 , 0 ] ;
32159: LD_ADDR_VAR 0 9
32163: PUSH
32164: LD_INT 10
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32178: LD_VAR 0 6
32182: PPUSH
32183: CALL_OW 257
32187: PUSH
32188: LD_INT 11
32190: EQUAL
32191: IFFALSE 32212
// points := [ 30 , 10 , 5 ] ;
32193: LD_ADDR_VAR 0 9
32197: PUSH
32198: LD_INT 30
32200: PUSH
32201: LD_INT 10
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32212: LD_VAR 0 1
32216: PPUSH
32217: LD_INT 5
32219: PPUSH
32220: CALL_OW 321
32224: PUSH
32225: LD_INT 2
32227: EQUAL
32228: IFFALSE 32245
// bpoints := bpoints * 1.8 ;
32230: LD_ADDR_VAR 0 10
32234: PUSH
32235: LD_VAR 0 10
32239: PUSH
32240: LD_REAL  1.80000000000000E+0000
32243: MUL
32244: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32245: LD_VAR 0 6
32249: PPUSH
32250: CALL_OW 257
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 4
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: IN
32273: PUSH
32274: LD_VAR 0 1
32278: PPUSH
32279: LD_INT 51
32281: PPUSH
32282: CALL_OW 321
32286: PUSH
32287: LD_INT 2
32289: EQUAL
32290: AND
32291: IFFALSE 32308
// bpoints := bpoints * 1.2 ;
32293: LD_ADDR_VAR 0 10
32297: PUSH
32298: LD_VAR 0 10
32302: PUSH
32303: LD_REAL  1.20000000000000E+0000
32306: MUL
32307: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32308: LD_VAR 0 6
32312: PPUSH
32313: CALL_OW 257
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: LD_INT 7
32323: PUSH
32324: LD_INT 9
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: IN
32332: PUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: LD_INT 52
32340: PPUSH
32341: CALL_OW 321
32345: PUSH
32346: LD_INT 2
32348: EQUAL
32349: AND
32350: IFFALSE 32367
// bpoints := bpoints * 1.5 ;
32352: LD_ADDR_VAR 0 10
32356: PUSH
32357: LD_VAR 0 10
32361: PUSH
32362: LD_REAL  1.50000000000000E+0000
32365: MUL
32366: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32367: LD_VAR 0 1
32371: PPUSH
32372: LD_INT 66
32374: PPUSH
32375: CALL_OW 321
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: IFFALSE 32400
// bpoints := bpoints * 1.1 ;
32385: LD_ADDR_VAR 0 10
32389: PUSH
32390: LD_VAR 0 10
32394: PUSH
32395: LD_REAL  1.10000000000000E+0000
32398: MUL
32399: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32400: LD_ADDR_VAR 0 10
32404: PUSH
32405: LD_VAR 0 10
32409: PUSH
32410: LD_VAR 0 6
32414: PPUSH
32415: LD_INT 1
32417: PPUSH
32418: CALL_OW 259
32422: PUSH
32423: LD_REAL  1.15000000000000E+0000
32426: MUL
32427: MUL
32428: ST_TO_ADDR
// end ; unit_vehicle :
32429: GO 33257
32431: LD_INT 2
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 33245
32439: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32440: LD_VAR 0 6
32444: PPUSH
32445: CALL_OW 264
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: LD_INT 42
32455: PUSH
32456: LD_INT 24
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: IN
32464: IFFALSE 32485
// points := [ 25 , 5 , 3 ] ;
32466: LD_ADDR_VAR 0 9
32470: PUSH
32471: LD_INT 25
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32485: LD_VAR 0 6
32489: PPUSH
32490: CALL_OW 264
32494: PUSH
32495: LD_INT 4
32497: PUSH
32498: LD_INT 43
32500: PUSH
32501: LD_INT 25
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: IN
32509: IFFALSE 32530
// points := [ 40 , 15 , 5 ] ;
32511: LD_ADDR_VAR 0 9
32515: PUSH
32516: LD_INT 40
32518: PUSH
32519: LD_INT 15
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32530: LD_VAR 0 6
32534: PPUSH
32535: CALL_OW 264
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 23
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: IN
32550: IFFALSE 32571
// points := [ 7 , 25 , 8 ] ;
32552: LD_ADDR_VAR 0 9
32556: PUSH
32557: LD_INT 7
32559: PUSH
32560: LD_INT 25
32562: PUSH
32563: LD_INT 8
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32571: LD_VAR 0 6
32575: PPUSH
32576: CALL_OW 264
32580: PUSH
32581: LD_INT 5
32583: PUSH
32584: LD_INT 27
32586: PUSH
32587: LD_INT 44
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: IN
32595: IFFALSE 32616
// points := [ 14 , 50 , 16 ] ;
32597: LD_ADDR_VAR 0 9
32601: PUSH
32602: LD_INT 14
32604: PUSH
32605: LD_INT 50
32607: PUSH
32608: LD_INT 16
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: LIST
32615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32616: LD_VAR 0 6
32620: PPUSH
32621: CALL_OW 264
32625: PUSH
32626: LD_INT 6
32628: PUSH
32629: LD_INT 46
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: IN
32636: IFFALSE 32657
// points := [ 32 , 120 , 70 ] ;
32638: LD_ADDR_VAR 0 9
32642: PUSH
32643: LD_INT 32
32645: PUSH
32646: LD_INT 120
32648: PUSH
32649: LD_INT 70
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32657: LD_VAR 0 6
32661: PPUSH
32662: CALL_OW 264
32666: PUSH
32667: LD_INT 7
32669: PUSH
32670: LD_INT 28
32672: PUSH
32673: LD_INT 45
32675: PUSH
32676: LD_INT 92
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: IN
32685: IFFALSE 32706
// points := [ 35 , 20 , 45 ] ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_INT 35
32694: PUSH
32695: LD_INT 20
32697: PUSH
32698: LD_INT 45
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32706: LD_VAR 0 6
32710: PPUSH
32711: CALL_OW 264
32715: PUSH
32716: LD_INT 47
32718: PUSH
32719: EMPTY
32720: LIST
32721: IN
32722: IFFALSE 32743
// points := [ 67 , 45 , 75 ] ;
32724: LD_ADDR_VAR 0 9
32728: PUSH
32729: LD_INT 67
32731: PUSH
32732: LD_INT 45
32734: PUSH
32735: LD_INT 75
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32743: LD_VAR 0 6
32747: PPUSH
32748: CALL_OW 264
32752: PUSH
32753: LD_INT 26
32755: PUSH
32756: EMPTY
32757: LIST
32758: IN
32759: IFFALSE 32780
// points := [ 120 , 30 , 80 ] ;
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_INT 120
32768: PUSH
32769: LD_INT 30
32771: PUSH
32772: LD_INT 80
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: LIST
32779: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32780: LD_VAR 0 6
32784: PPUSH
32785: CALL_OW 264
32789: PUSH
32790: LD_INT 22
32792: PUSH
32793: EMPTY
32794: LIST
32795: IN
32796: IFFALSE 32817
// points := [ 40 , 1 , 1 ] ;
32798: LD_ADDR_VAR 0 9
32802: PUSH
32803: LD_INT 40
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32817: LD_VAR 0 6
32821: PPUSH
32822: CALL_OW 264
32826: PUSH
32827: LD_INT 29
32829: PUSH
32830: EMPTY
32831: LIST
32832: IN
32833: IFFALSE 32854
// points := [ 70 , 200 , 400 ] ;
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_INT 70
32842: PUSH
32843: LD_INT 200
32845: PUSH
32846: LD_INT 400
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32854: LD_VAR 0 6
32858: PPUSH
32859: CALL_OW 264
32863: PUSH
32864: LD_INT 14
32866: PUSH
32867: LD_INT 53
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: IFFALSE 32895
// points := [ 40 , 10 , 20 ] ;
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_INT 40
32883: PUSH
32884: LD_INT 10
32886: PUSH
32887: LD_INT 20
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32895: LD_VAR 0 6
32899: PPUSH
32900: CALL_OW 264
32904: PUSH
32905: LD_INT 9
32907: PUSH
32908: EMPTY
32909: LIST
32910: IN
32911: IFFALSE 32932
// points := [ 5 , 70 , 20 ] ;
32913: LD_ADDR_VAR 0 9
32917: PUSH
32918: LD_INT 5
32920: PUSH
32921: LD_INT 70
32923: PUSH
32924: LD_INT 20
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32932: LD_VAR 0 6
32936: PPUSH
32937: CALL_OW 264
32941: PUSH
32942: LD_INT 10
32944: PUSH
32945: EMPTY
32946: LIST
32947: IN
32948: IFFALSE 32969
// points := [ 35 , 110 , 70 ] ;
32950: LD_ADDR_VAR 0 9
32954: PUSH
32955: LD_INT 35
32957: PUSH
32958: LD_INT 110
32960: PUSH
32961: LD_INT 70
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32969: LD_VAR 0 6
32973: PPUSH
32974: CALL_OW 265
32978: PUSH
32979: LD_INT 25
32981: EQUAL
32982: IFFALSE 33003
// points := [ 80 , 65 , 100 ] ;
32984: LD_ADDR_VAR 0 9
32988: PUSH
32989: LD_INT 80
32991: PUSH
32992: LD_INT 65
32994: PUSH
32995: LD_INT 100
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33003: LD_VAR 0 6
33007: PPUSH
33008: CALL_OW 263
33012: PUSH
33013: LD_INT 1
33015: EQUAL
33016: IFFALSE 33051
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33018: LD_ADDR_VAR 0 10
33022: PUSH
33023: LD_VAR 0 10
33027: PUSH
33028: LD_VAR 0 6
33032: PPUSH
33033: CALL_OW 311
33037: PPUSH
33038: LD_INT 3
33040: PPUSH
33041: CALL_OW 259
33045: PUSH
33046: LD_INT 4
33048: MUL
33049: MUL
33050: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33051: LD_VAR 0 6
33055: PPUSH
33056: CALL_OW 263
33060: PUSH
33061: LD_INT 2
33063: EQUAL
33064: IFFALSE 33115
// begin j := IsControledBy ( i ) ;
33066: LD_ADDR_VAR 0 7
33070: PUSH
33071: LD_VAR 0 6
33075: PPUSH
33076: CALL_OW 312
33080: ST_TO_ADDR
// if j then
33081: LD_VAR 0 7
33085: IFFALSE 33115
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33087: LD_ADDR_VAR 0 10
33091: PUSH
33092: LD_VAR 0 10
33096: PUSH
33097: LD_VAR 0 7
33101: PPUSH
33102: LD_INT 3
33104: PPUSH
33105: CALL_OW 259
33109: PUSH
33110: LD_INT 3
33112: MUL
33113: MUL
33114: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33115: LD_VAR 0 6
33119: PPUSH
33120: CALL_OW 264
33124: PUSH
33125: LD_INT 5
33127: PUSH
33128: LD_INT 6
33130: PUSH
33131: LD_INT 46
33133: PUSH
33134: LD_INT 44
33136: PUSH
33137: LD_INT 47
33139: PUSH
33140: LD_INT 45
33142: PUSH
33143: LD_INT 28
33145: PUSH
33146: LD_INT 7
33148: PUSH
33149: LD_INT 27
33151: PUSH
33152: LD_INT 29
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: IN
33167: PUSH
33168: LD_VAR 0 1
33172: PPUSH
33173: LD_INT 52
33175: PPUSH
33176: CALL_OW 321
33180: PUSH
33181: LD_INT 2
33183: EQUAL
33184: AND
33185: IFFALSE 33202
// bpoints := bpoints * 1.2 ;
33187: LD_ADDR_VAR 0 10
33191: PUSH
33192: LD_VAR 0 10
33196: PUSH
33197: LD_REAL  1.20000000000000E+0000
33200: MUL
33201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33202: LD_VAR 0 6
33206: PPUSH
33207: CALL_OW 264
33211: PUSH
33212: LD_INT 6
33214: PUSH
33215: LD_INT 46
33217: PUSH
33218: LD_INT 47
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: IN
33226: IFFALSE 33243
// bpoints := bpoints * 1.2 ;
33228: LD_ADDR_VAR 0 10
33232: PUSH
33233: LD_VAR 0 10
33237: PUSH
33238: LD_REAL  1.20000000000000E+0000
33241: MUL
33242: ST_TO_ADDR
// end ; unit_building :
33243: GO 33257
33245: LD_INT 3
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33256
33253: POP
// ; end ;
33254: GO 33257
33256: POP
// for j = 1 to 3 do
33257: LD_ADDR_VAR 0 7
33261: PUSH
33262: DOUBLE
33263: LD_INT 1
33265: DEC
33266: ST_TO_ADDR
33267: LD_INT 3
33269: PUSH
33270: FOR_TO
33271: IFFALSE 33324
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33273: LD_ADDR_VAR 0 5
33277: PUSH
33278: LD_VAR 0 5
33282: PPUSH
33283: LD_VAR 0 7
33287: PPUSH
33288: LD_VAR 0 5
33292: PUSH
33293: LD_VAR 0 7
33297: ARRAY
33298: PUSH
33299: LD_VAR 0 9
33303: PUSH
33304: LD_VAR 0 7
33308: ARRAY
33309: PUSH
33310: LD_VAR 0 10
33314: MUL
33315: PLUS
33316: PPUSH
33317: CALL_OW 1
33321: ST_TO_ADDR
33322: GO 33270
33324: POP
33325: POP
// end ;
33326: GO 31805
33328: POP
33329: POP
// result := Replace ( result , 4 , tmp ) ;
33330: LD_ADDR_VAR 0 5
33334: PUSH
33335: LD_VAR 0 5
33339: PPUSH
33340: LD_INT 4
33342: PPUSH
33343: LD_VAR 0 8
33347: PPUSH
33348: CALL_OW 1
33352: ST_TO_ADDR
// end ;
33353: LD_VAR 0 5
33357: RET
// export function DangerAtRange ( unit , range ) ; begin
33358: LD_INT 0
33360: PPUSH
// if not unit then
33361: LD_VAR 0 1
33365: NOT
33366: IFFALSE 33370
// exit ;
33368: GO 33415
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_VAR 0 1
33379: PPUSH
33380: CALL_OW 255
33384: PPUSH
33385: LD_VAR 0 1
33389: PPUSH
33390: CALL_OW 250
33394: PPUSH
33395: LD_VAR 0 1
33399: PPUSH
33400: CALL_OW 251
33404: PPUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: CALL 31657 0 4
33414: ST_TO_ADDR
// end ;
33415: LD_VAR 0 3
33419: RET
// export function DangerInArea ( side , area ) ; begin
33420: LD_INT 0
33422: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33423: LD_ADDR_VAR 0 3
33427: PUSH
33428: LD_VAR 0 2
33432: PPUSH
33433: LD_INT 81
33435: PUSH
33436: LD_VAR 0 1
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PPUSH
33445: CALL_OW 70
33449: ST_TO_ADDR
// end ;
33450: LD_VAR 0 3
33454: RET
// export function IsExtension ( b ) ; begin
33455: LD_INT 0
33457: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33458: LD_ADDR_VAR 0 2
33462: PUSH
33463: LD_VAR 0 1
33467: PUSH
33468: LD_INT 23
33470: PUSH
33471: LD_INT 20
33473: PUSH
33474: LD_INT 22
33476: PUSH
33477: LD_INT 17
33479: PUSH
33480: LD_INT 24
33482: PUSH
33483: LD_INT 21
33485: PUSH
33486: LD_INT 19
33488: PUSH
33489: LD_INT 16
33491: PUSH
33492: LD_INT 25
33494: PUSH
33495: LD_INT 18
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: IN
33510: ST_TO_ADDR
// end ;
33511: LD_VAR 0 2
33515: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
33520: PPUSH
// result := [ ] ;
33521: LD_ADDR_VAR 0 4
33525: PUSH
33526: EMPTY
33527: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33528: LD_ADDR_VAR 0 5
33532: PUSH
33533: LD_VAR 0 2
33537: PPUSH
33538: LD_INT 21
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PPUSH
33548: CALL_OW 70
33552: ST_TO_ADDR
// if not tmp then
33553: LD_VAR 0 5
33557: NOT
33558: IFFALSE 33562
// exit ;
33560: GO 33626
// if checkLink then
33562: LD_VAR 0 3
33566: IFFALSE 33616
// begin for i in tmp do
33568: LD_ADDR_VAR 0 6
33572: PUSH
33573: LD_VAR 0 5
33577: PUSH
33578: FOR_IN
33579: IFFALSE 33614
// if GetBase ( i ) <> base then
33581: LD_VAR 0 6
33585: PPUSH
33586: CALL_OW 274
33590: PUSH
33591: LD_VAR 0 1
33595: NONEQUAL
33596: IFFALSE 33612
// ComLinkToBase ( base , i ) ;
33598: LD_VAR 0 1
33602: PPUSH
33603: LD_VAR 0 6
33607: PPUSH
33608: CALL_OW 169
33612: GO 33578
33614: POP
33615: POP
// end ; result := tmp ;
33616: LD_ADDR_VAR 0 4
33620: PUSH
33621: LD_VAR 0 5
33625: ST_TO_ADDR
// end ;
33626: LD_VAR 0 4
33630: RET
// export function ComComplete ( units , b ) ; var i ; begin
33631: LD_INT 0
33633: PPUSH
33634: PPUSH
// if not units then
33635: LD_VAR 0 1
33639: NOT
33640: IFFALSE 33644
// exit ;
33642: GO 33734
// for i in units do
33644: LD_ADDR_VAR 0 4
33648: PUSH
33649: LD_VAR 0 1
33653: PUSH
33654: FOR_IN
33655: IFFALSE 33732
// if BuildingStatus ( b ) = bs_build then
33657: LD_VAR 0 2
33661: PPUSH
33662: CALL_OW 461
33666: PUSH
33667: LD_INT 1
33669: EQUAL
33670: IFFALSE 33730
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33672: LD_VAR 0 4
33676: PPUSH
33677: LD_STRING h
33679: PUSH
33680: LD_VAR 0 2
33684: PPUSH
33685: CALL_OW 250
33689: PUSH
33690: LD_VAR 0 2
33694: PPUSH
33695: CALL_OW 251
33699: PUSH
33700: LD_VAR 0 2
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: PPUSH
33726: CALL_OW 446
33730: GO 33654
33732: POP
33733: POP
// end ;
33734: LD_VAR 0 3
33738: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33739: LD_INT 0
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33747: LD_VAR 0 1
33751: NOT
33752: PUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 263
33762: PUSH
33763: LD_INT 2
33765: NONEQUAL
33766: OR
33767: IFFALSE 33771
// exit ;
33769: GO 34087
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33771: LD_ADDR_VAR 0 6
33775: PUSH
33776: LD_INT 22
33778: PUSH
33779: LD_VAR 0 1
33783: PPUSH
33784: CALL_OW 255
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: LD_INT 30
33798: PUSH
33799: LD_INT 36
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 34
33808: PUSH
33809: LD_INT 31
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PPUSH
33825: CALL_OW 69
33829: ST_TO_ADDR
// if not tmp then
33830: LD_VAR 0 6
33834: NOT
33835: IFFALSE 33839
// exit ;
33837: GO 34087
// result := [ ] ;
33839: LD_ADDR_VAR 0 2
33843: PUSH
33844: EMPTY
33845: ST_TO_ADDR
// for i in tmp do
33846: LD_ADDR_VAR 0 3
33850: PUSH
33851: LD_VAR 0 6
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33928
// begin t := UnitsInside ( i ) ;
33859: LD_ADDR_VAR 0 4
33863: PUSH
33864: LD_VAR 0 3
33868: PPUSH
33869: CALL_OW 313
33873: ST_TO_ADDR
// if t then
33874: LD_VAR 0 4
33878: IFFALSE 33926
// for j in t do
33880: LD_ADDR_VAR 0 7
33884: PUSH
33885: LD_VAR 0 4
33889: PUSH
33890: FOR_IN
33891: IFFALSE 33924
// result := Replace ( result , result + 1 , j ) ;
33893: LD_ADDR_VAR 0 2
33897: PUSH
33898: LD_VAR 0 2
33902: PPUSH
33903: LD_VAR 0 2
33907: PUSH
33908: LD_INT 1
33910: PLUS
33911: PPUSH
33912: LD_VAR 0 7
33916: PPUSH
33917: CALL_OW 1
33921: ST_TO_ADDR
33922: GO 33890
33924: POP
33925: POP
// end ;
33926: GO 33856
33928: POP
33929: POP
// if not result then
33930: LD_VAR 0 2
33934: NOT
33935: IFFALSE 33939
// exit ;
33937: GO 34087
// mech := result [ 1 ] ;
33939: LD_ADDR_VAR 0 5
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_INT 1
33951: ARRAY
33952: ST_TO_ADDR
// if result > 1 then
33953: LD_VAR 0 2
33957: PUSH
33958: LD_INT 1
33960: GREATER
33961: IFFALSE 34073
// begin for i = 2 to result do
33963: LD_ADDR_VAR 0 3
33967: PUSH
33968: DOUBLE
33969: LD_INT 2
33971: DEC
33972: ST_TO_ADDR
33973: LD_VAR 0 2
33977: PUSH
33978: FOR_TO
33979: IFFALSE 34071
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33981: LD_ADDR_VAR 0 4
33985: PUSH
33986: LD_VAR 0 2
33990: PUSH
33991: LD_VAR 0 3
33995: ARRAY
33996: PPUSH
33997: LD_INT 3
33999: PPUSH
34000: CALL_OW 259
34004: PUSH
34005: LD_VAR 0 2
34009: PUSH
34010: LD_VAR 0 3
34014: ARRAY
34015: PPUSH
34016: CALL_OW 432
34020: MINUS
34021: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34022: LD_VAR 0 4
34026: PUSH
34027: LD_VAR 0 5
34031: PPUSH
34032: LD_INT 3
34034: PPUSH
34035: CALL_OW 259
34039: PUSH
34040: LD_VAR 0 5
34044: PPUSH
34045: CALL_OW 432
34049: MINUS
34050: GREATEREQUAL
34051: IFFALSE 34069
// mech := result [ i ] ;
34053: LD_ADDR_VAR 0 5
34057: PUSH
34058: LD_VAR 0 2
34062: PUSH
34063: LD_VAR 0 3
34067: ARRAY
34068: ST_TO_ADDR
// end ;
34069: GO 33978
34071: POP
34072: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34073: LD_VAR 0 1
34077: PPUSH
34078: LD_VAR 0 5
34082: PPUSH
34083: CALL_OW 135
// end ;
34087: LD_VAR 0 2
34091: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34092: LD_INT 0
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
// result := [ ] ;
34107: LD_ADDR_VAR 0 7
34111: PUSH
34112: EMPTY
34113: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 266
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: IN
34134: NOT
34135: IFFALSE 34139
// exit ;
34137: GO 35773
// if name then
34139: LD_VAR 0 3
34143: IFFALSE 34159
// SetBName ( base_dep , name ) ;
34145: LD_VAR 0 1
34149: PPUSH
34150: LD_VAR 0 3
34154: PPUSH
34155: CALL_OW 500
// base := GetBase ( base_dep ) ;
34159: LD_ADDR_VAR 0 15
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 274
34173: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34174: LD_ADDR_VAR 0 16
34178: PUSH
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 255
34188: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34189: LD_ADDR_VAR 0 17
34193: PUSH
34194: LD_VAR 0 1
34198: PPUSH
34199: CALL_OW 248
34203: ST_TO_ADDR
// if sources then
34204: LD_VAR 0 5
34208: IFFALSE 34255
// for i = 1 to 3 do
34210: LD_ADDR_VAR 0 8
34214: PUSH
34215: DOUBLE
34216: LD_INT 1
34218: DEC
34219: ST_TO_ADDR
34220: LD_INT 3
34222: PUSH
34223: FOR_TO
34224: IFFALSE 34253
// AddResourceType ( base , i , sources [ i ] ) ;
34226: LD_VAR 0 15
34230: PPUSH
34231: LD_VAR 0 8
34235: PPUSH
34236: LD_VAR 0 5
34240: PUSH
34241: LD_VAR 0 8
34245: ARRAY
34246: PPUSH
34247: CALL_OW 276
34251: GO 34223
34253: POP
34254: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34255: LD_ADDR_VAR 0 18
34259: PUSH
34260: LD_VAR 0 15
34264: PPUSH
34265: LD_VAR 0 2
34269: PPUSH
34270: LD_INT 1
34272: PPUSH
34273: CALL 33516 0 3
34277: ST_TO_ADDR
// InitHc ;
34278: CALL_OW 19
// InitUc ;
34282: CALL_OW 18
// uc_side := side ;
34286: LD_ADDR_OWVAR 20
34290: PUSH
34291: LD_VAR 0 16
34295: ST_TO_ADDR
// uc_nation := nation ;
34296: LD_ADDR_OWVAR 21
34300: PUSH
34301: LD_VAR 0 17
34305: ST_TO_ADDR
// if buildings then
34306: LD_VAR 0 18
34310: IFFALSE 35632
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34312: LD_ADDR_VAR 0 19
34316: PUSH
34317: LD_VAR 0 18
34321: PPUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 30
34327: PUSH
34328: LD_INT 29
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 30
34337: PUSH
34338: LD_INT 30
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: PPUSH
34350: CALL_OW 72
34354: ST_TO_ADDR
// if tmp then
34355: LD_VAR 0 19
34359: IFFALSE 34407
// for i in tmp do
34361: LD_ADDR_VAR 0 8
34365: PUSH
34366: LD_VAR 0 19
34370: PUSH
34371: FOR_IN
34372: IFFALSE 34405
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34374: LD_VAR 0 8
34378: PPUSH
34379: CALL_OW 250
34383: PPUSH
34384: LD_VAR 0 8
34388: PPUSH
34389: CALL_OW 251
34393: PPUSH
34394: LD_VAR 0 16
34398: PPUSH
34399: CALL_OW 441
34403: GO 34371
34405: POP
34406: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34407: LD_VAR 0 18
34411: PPUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 30
34417: PUSH
34418: LD_INT 32
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 30
34427: PUSH
34428: LD_INT 33
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: PPUSH
34440: CALL_OW 72
34444: IFFALSE 34532
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34446: LD_ADDR_VAR 0 8
34450: PUSH
34451: LD_VAR 0 18
34455: PPUSH
34456: LD_INT 2
34458: PUSH
34459: LD_INT 30
34461: PUSH
34462: LD_INT 32
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 30
34471: PUSH
34472: LD_INT 33
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: PPUSH
34484: CALL_OW 72
34488: PUSH
34489: FOR_IN
34490: IFFALSE 34530
// begin if not GetBWeapon ( i ) then
34492: LD_VAR 0 8
34496: PPUSH
34497: CALL_OW 269
34501: NOT
34502: IFFALSE 34528
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34504: LD_VAR 0 8
34508: PPUSH
34509: LD_VAR 0 8
34513: PPUSH
34514: LD_VAR 0 2
34518: PPUSH
34519: CALL 35778 0 2
34523: PPUSH
34524: CALL_OW 431
// end ;
34528: GO 34489
34530: POP
34531: POP
// end ; for i = 1 to personel do
34532: LD_ADDR_VAR 0 8
34536: PUSH
34537: DOUBLE
34538: LD_INT 1
34540: DEC
34541: ST_TO_ADDR
34542: LD_VAR 0 6
34546: PUSH
34547: FOR_TO
34548: IFFALSE 35612
// begin if i > 4 then
34550: LD_VAR 0 8
34554: PUSH
34555: LD_INT 4
34557: GREATER
34558: IFFALSE 34562
// break ;
34560: GO 35612
// case i of 1 :
34562: LD_VAR 0 8
34566: PUSH
34567: LD_INT 1
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34575
34573: GO 34655
34575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34576: LD_ADDR_VAR 0 12
34580: PUSH
34581: LD_VAR 0 18
34585: PPUSH
34586: LD_INT 22
34588: PUSH
34589: LD_VAR 0 16
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 58
34600: PUSH
34601: EMPTY
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 30
34609: PUSH
34610: LD_INT 32
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 30
34619: PUSH
34620: LD_INT 4
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 30
34629: PUSH
34630: LD_INT 5
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: PPUSH
34648: CALL_OW 72
34652: ST_TO_ADDR
34653: GO 34877
34655: LD_INT 2
34657: DOUBLE
34658: EQUAL
34659: IFTRUE 34663
34661: GO 34725
34663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34664: LD_ADDR_VAR 0 12
34668: PUSH
34669: LD_VAR 0 18
34673: PPUSH
34674: LD_INT 22
34676: PUSH
34677: LD_VAR 0 16
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 30
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 30
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PPUSH
34718: CALL_OW 72
34722: ST_TO_ADDR
34723: GO 34877
34725: LD_INT 3
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34795
34733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34734: LD_ADDR_VAR 0 12
34738: PUSH
34739: LD_VAR 0 18
34743: PPUSH
34744: LD_INT 22
34746: PUSH
34747: LD_VAR 0 16
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 30
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 30
34771: PUSH
34772: LD_INT 3
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PPUSH
34788: CALL_OW 72
34792: ST_TO_ADDR
34793: GO 34877
34795: LD_INT 4
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34876
34803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34804: LD_ADDR_VAR 0 12
34808: PUSH
34809: LD_VAR 0 18
34813: PPUSH
34814: LD_INT 22
34816: PUSH
34817: LD_VAR 0 16
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: LD_INT 30
34831: PUSH
34832: LD_INT 6
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 30
34841: PUSH
34842: LD_INT 7
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 30
34851: PUSH
34852: LD_INT 8
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PPUSH
34869: CALL_OW 72
34873: ST_TO_ADDR
34874: GO 34877
34876: POP
// if i = 1 then
34877: LD_VAR 0 8
34881: PUSH
34882: LD_INT 1
34884: EQUAL
34885: IFFALSE 34996
// begin tmp := [ ] ;
34887: LD_ADDR_VAR 0 19
34891: PUSH
34892: EMPTY
34893: ST_TO_ADDR
// for j in f do
34894: LD_ADDR_VAR 0 9
34898: PUSH
34899: LD_VAR 0 12
34903: PUSH
34904: FOR_IN
34905: IFFALSE 34978
// if GetBType ( j ) = b_bunker then
34907: LD_VAR 0 9
34911: PPUSH
34912: CALL_OW 266
34916: PUSH
34917: LD_INT 32
34919: EQUAL
34920: IFFALSE 34947
// tmp := Insert ( tmp , 1 , j ) else
34922: LD_ADDR_VAR 0 19
34926: PUSH
34927: LD_VAR 0 19
34931: PPUSH
34932: LD_INT 1
34934: PPUSH
34935: LD_VAR 0 9
34939: PPUSH
34940: CALL_OW 2
34944: ST_TO_ADDR
34945: GO 34976
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34947: LD_ADDR_VAR 0 19
34951: PUSH
34952: LD_VAR 0 19
34956: PPUSH
34957: LD_VAR 0 19
34961: PUSH
34962: LD_INT 1
34964: PLUS
34965: PPUSH
34966: LD_VAR 0 9
34970: PPUSH
34971: CALL_OW 2
34975: ST_TO_ADDR
34976: GO 34904
34978: POP
34979: POP
// if tmp then
34980: LD_VAR 0 19
34984: IFFALSE 34996
// f := tmp ;
34986: LD_ADDR_VAR 0 12
34990: PUSH
34991: LD_VAR 0 19
34995: ST_TO_ADDR
// end ; x := personel [ i ] ;
34996: LD_ADDR_VAR 0 13
35000: PUSH
35001: LD_VAR 0 6
35005: PUSH
35006: LD_VAR 0 8
35010: ARRAY
35011: ST_TO_ADDR
// if x = - 1 then
35012: LD_VAR 0 13
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: EQUAL
35021: IFFALSE 35230
// begin for j in f do
35023: LD_ADDR_VAR 0 9
35027: PUSH
35028: LD_VAR 0 12
35032: PUSH
35033: FOR_IN
35034: IFFALSE 35226
// repeat InitHc ;
35036: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35040: LD_VAR 0 9
35044: PPUSH
35045: CALL_OW 266
35049: PUSH
35050: LD_INT 5
35052: EQUAL
35053: IFFALSE 35123
// begin if UnitsInside ( j ) < 3 then
35055: LD_VAR 0 9
35059: PPUSH
35060: CALL_OW 313
35064: PUSH
35065: LD_INT 3
35067: LESS
35068: IFFALSE 35104
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35070: LD_INT 0
35072: PPUSH
35073: LD_INT 5
35075: PUSH
35076: LD_INT 8
35078: PUSH
35079: LD_INT 9
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: PUSH
35087: LD_VAR 0 17
35091: ARRAY
35092: PPUSH
35093: LD_VAR 0 4
35097: PPUSH
35098: CALL_OW 380
35102: GO 35121
// PrepareHuman ( false , i , skill ) ;
35104: LD_INT 0
35106: PPUSH
35107: LD_VAR 0 8
35111: PPUSH
35112: LD_VAR 0 4
35116: PPUSH
35117: CALL_OW 380
// end else
35121: GO 35140
// PrepareHuman ( false , i , skill ) ;
35123: LD_INT 0
35125: PPUSH
35126: LD_VAR 0 8
35130: PPUSH
35131: LD_VAR 0 4
35135: PPUSH
35136: CALL_OW 380
// un := CreateHuman ;
35140: LD_ADDR_VAR 0 14
35144: PUSH
35145: CALL_OW 44
35149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35150: LD_ADDR_VAR 0 7
35154: PUSH
35155: LD_VAR 0 7
35159: PPUSH
35160: LD_INT 1
35162: PPUSH
35163: LD_VAR 0 14
35167: PPUSH
35168: CALL_OW 2
35172: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35173: LD_VAR 0 14
35177: PPUSH
35178: LD_VAR 0 9
35182: PPUSH
35183: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35187: LD_VAR 0 9
35191: PPUSH
35192: CALL_OW 313
35196: PUSH
35197: LD_INT 6
35199: EQUAL
35200: PUSH
35201: LD_VAR 0 9
35205: PPUSH
35206: CALL_OW 266
35210: PUSH
35211: LD_INT 32
35213: PUSH
35214: LD_INT 31
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: IN
35221: OR
35222: IFFALSE 35036
35224: GO 35033
35226: POP
35227: POP
// end else
35228: GO 35610
// for j = 1 to x do
35230: LD_ADDR_VAR 0 9
35234: PUSH
35235: DOUBLE
35236: LD_INT 1
35238: DEC
35239: ST_TO_ADDR
35240: LD_VAR 0 13
35244: PUSH
35245: FOR_TO
35246: IFFALSE 35608
// begin InitHc ;
35248: CALL_OW 19
// if not f then
35252: LD_VAR 0 12
35256: NOT
35257: IFFALSE 35346
// begin PrepareHuman ( false , i , skill ) ;
35259: LD_INT 0
35261: PPUSH
35262: LD_VAR 0 8
35266: PPUSH
35267: LD_VAR 0 4
35271: PPUSH
35272: CALL_OW 380
// un := CreateHuman ;
35276: LD_ADDR_VAR 0 14
35280: PUSH
35281: CALL_OW 44
35285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35286: LD_ADDR_VAR 0 7
35290: PUSH
35291: LD_VAR 0 7
35295: PPUSH
35296: LD_INT 1
35298: PPUSH
35299: LD_VAR 0 14
35303: PPUSH
35304: CALL_OW 2
35308: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35309: LD_VAR 0 14
35313: PPUSH
35314: LD_VAR 0 1
35318: PPUSH
35319: CALL_OW 250
35323: PPUSH
35324: LD_VAR 0 1
35328: PPUSH
35329: CALL_OW 251
35333: PPUSH
35334: LD_INT 10
35336: PPUSH
35337: LD_INT 0
35339: PPUSH
35340: CALL_OW 50
// continue ;
35344: GO 35245
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35346: LD_VAR 0 12
35350: PUSH
35351: LD_INT 1
35353: ARRAY
35354: PPUSH
35355: CALL_OW 313
35359: PUSH
35360: LD_VAR 0 12
35364: PUSH
35365: LD_INT 1
35367: ARRAY
35368: PPUSH
35369: CALL_OW 266
35373: PUSH
35374: LD_INT 32
35376: PUSH
35377: LD_INT 31
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: IN
35384: AND
35385: PUSH
35386: LD_VAR 0 12
35390: PUSH
35391: LD_INT 1
35393: ARRAY
35394: PPUSH
35395: CALL_OW 313
35399: PUSH
35400: LD_INT 6
35402: EQUAL
35403: OR
35404: IFFALSE 35424
// f := Delete ( f , 1 ) ;
35406: LD_ADDR_VAR 0 12
35410: PUSH
35411: LD_VAR 0 12
35415: PPUSH
35416: LD_INT 1
35418: PPUSH
35419: CALL_OW 3
35423: ST_TO_ADDR
// if not f then
35424: LD_VAR 0 12
35428: NOT
35429: IFFALSE 35447
// begin x := x + 2 ;
35431: LD_ADDR_VAR 0 13
35435: PUSH
35436: LD_VAR 0 13
35440: PUSH
35441: LD_INT 2
35443: PLUS
35444: ST_TO_ADDR
// continue ;
35445: GO 35245
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35447: LD_VAR 0 12
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: PPUSH
35456: CALL_OW 266
35460: PUSH
35461: LD_INT 5
35463: EQUAL
35464: IFFALSE 35538
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35466: LD_VAR 0 12
35470: PUSH
35471: LD_INT 1
35473: ARRAY
35474: PPUSH
35475: CALL_OW 313
35479: PUSH
35480: LD_INT 3
35482: LESS
35483: IFFALSE 35519
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35485: LD_INT 0
35487: PPUSH
35488: LD_INT 5
35490: PUSH
35491: LD_INT 8
35493: PUSH
35494: LD_INT 9
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: LD_VAR 0 17
35506: ARRAY
35507: PPUSH
35508: LD_VAR 0 4
35512: PPUSH
35513: CALL_OW 380
35517: GO 35536
// PrepareHuman ( false , i , skill ) ;
35519: LD_INT 0
35521: PPUSH
35522: LD_VAR 0 8
35526: PPUSH
35527: LD_VAR 0 4
35531: PPUSH
35532: CALL_OW 380
// end else
35536: GO 35555
// PrepareHuman ( false , i , skill ) ;
35538: LD_INT 0
35540: PPUSH
35541: LD_VAR 0 8
35545: PPUSH
35546: LD_VAR 0 4
35550: PPUSH
35551: CALL_OW 380
// un := CreateHuman ;
35555: LD_ADDR_VAR 0 14
35559: PUSH
35560: CALL_OW 44
35564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35565: LD_ADDR_VAR 0 7
35569: PUSH
35570: LD_VAR 0 7
35574: PPUSH
35575: LD_INT 1
35577: PPUSH
35578: LD_VAR 0 14
35582: PPUSH
35583: CALL_OW 2
35587: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35588: LD_VAR 0 14
35592: PPUSH
35593: LD_VAR 0 12
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: CALL_OW 52
// end ;
35606: GO 35245
35608: POP
35609: POP
// end ;
35610: GO 34547
35612: POP
35613: POP
// result := result ^ buildings ;
35614: LD_ADDR_VAR 0 7
35618: PUSH
35619: LD_VAR 0 7
35623: PUSH
35624: LD_VAR 0 18
35628: ADD
35629: ST_TO_ADDR
// end else
35630: GO 35773
// begin for i = 1 to personel do
35632: LD_ADDR_VAR 0 8
35636: PUSH
35637: DOUBLE
35638: LD_INT 1
35640: DEC
35641: ST_TO_ADDR
35642: LD_VAR 0 6
35646: PUSH
35647: FOR_TO
35648: IFFALSE 35771
// begin if i > 4 then
35650: LD_VAR 0 8
35654: PUSH
35655: LD_INT 4
35657: GREATER
35658: IFFALSE 35662
// break ;
35660: GO 35771
// x := personel [ i ] ;
35662: LD_ADDR_VAR 0 13
35666: PUSH
35667: LD_VAR 0 6
35671: PUSH
35672: LD_VAR 0 8
35676: ARRAY
35677: ST_TO_ADDR
// if x = - 1 then
35678: LD_VAR 0 13
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: EQUAL
35687: IFFALSE 35691
// continue ;
35689: GO 35647
// PrepareHuman ( false , i , skill ) ;
35691: LD_INT 0
35693: PPUSH
35694: LD_VAR 0 8
35698: PPUSH
35699: LD_VAR 0 4
35703: PPUSH
35704: CALL_OW 380
// un := CreateHuman ;
35708: LD_ADDR_VAR 0 14
35712: PUSH
35713: CALL_OW 44
35717: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35718: LD_VAR 0 14
35722: PPUSH
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 250
35732: PPUSH
35733: LD_VAR 0 1
35737: PPUSH
35738: CALL_OW 251
35742: PPUSH
35743: LD_INT 10
35745: PPUSH
35746: LD_INT 0
35748: PPUSH
35749: CALL_OW 50
// result := result ^ un ;
35753: LD_ADDR_VAR 0 7
35757: PUSH
35758: LD_VAR 0 7
35762: PUSH
35763: LD_VAR 0 14
35767: ADD
35768: ST_TO_ADDR
// end ;
35769: GO 35647
35771: POP
35772: POP
// end ; end ;
35773: LD_VAR 0 7
35777: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35778: LD_INT 0
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
// result := false ;
35796: LD_ADDR_VAR 0 3
35800: PUSH
35801: LD_INT 0
35803: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35804: LD_VAR 0 1
35808: NOT
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 266
35819: PUSH
35820: LD_INT 32
35822: PUSH
35823: LD_INT 33
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: IN
35830: NOT
35831: OR
35832: IFFALSE 35836
// exit ;
35834: GO 36945
// nat := GetNation ( tower ) ;
35836: LD_ADDR_VAR 0 12
35840: PUSH
35841: LD_VAR 0 1
35845: PPUSH
35846: CALL_OW 248
35850: ST_TO_ADDR
// side := GetSide ( tower ) ;
35851: LD_ADDR_VAR 0 16
35855: PUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 255
35865: ST_TO_ADDR
// x := GetX ( tower ) ;
35866: LD_ADDR_VAR 0 10
35870: PUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 250
35880: ST_TO_ADDR
// y := GetY ( tower ) ;
35881: LD_ADDR_VAR 0 11
35885: PUSH
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 251
35895: ST_TO_ADDR
// if not x or not y then
35896: LD_VAR 0 10
35900: NOT
35901: PUSH
35902: LD_VAR 0 11
35906: NOT
35907: OR
35908: IFFALSE 35912
// exit ;
35910: GO 36945
// weapon := 0 ;
35912: LD_ADDR_VAR 0 18
35916: PUSH
35917: LD_INT 0
35919: ST_TO_ADDR
// fac_list := [ ] ;
35920: LD_ADDR_VAR 0 17
35924: PUSH
35925: EMPTY
35926: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35927: LD_ADDR_VAR 0 6
35931: PUSH
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 274
35941: PPUSH
35942: LD_VAR 0 2
35946: PPUSH
35947: LD_INT 0
35949: PPUSH
35950: CALL 33516 0 3
35954: PPUSH
35955: LD_INT 30
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PPUSH
35965: CALL_OW 72
35969: ST_TO_ADDR
// if not factories then
35970: LD_VAR 0 6
35974: NOT
35975: IFFALSE 35979
// exit ;
35977: GO 36945
// for i in factories do
35979: LD_ADDR_VAR 0 8
35983: PUSH
35984: LD_VAR 0 6
35988: PUSH
35989: FOR_IN
35990: IFFALSE 36015
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35992: LD_ADDR_VAR 0 17
35996: PUSH
35997: LD_VAR 0 17
36001: PUSH
36002: LD_VAR 0 8
36006: PPUSH
36007: CALL_OW 478
36011: UNION
36012: ST_TO_ADDR
36013: GO 35989
36015: POP
36016: POP
// if not fac_list then
36017: LD_VAR 0 17
36021: NOT
36022: IFFALSE 36026
// exit ;
36024: GO 36945
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36026: LD_ADDR_VAR 0 5
36030: PUSH
36031: LD_INT 4
36033: PUSH
36034: LD_INT 5
36036: PUSH
36037: LD_INT 9
36039: PUSH
36040: LD_INT 10
36042: PUSH
36043: LD_INT 6
36045: PUSH
36046: LD_INT 7
36048: PUSH
36049: LD_INT 11
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 27
36063: PUSH
36064: LD_INT 28
36066: PUSH
36067: LD_INT 26
36069: PUSH
36070: LD_INT 30
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 43
36081: PUSH
36082: LD_INT 44
36084: PUSH
36085: LD_INT 46
36087: PUSH
36088: LD_INT 45
36090: PUSH
36091: LD_INT 47
36093: PUSH
36094: LD_INT 49
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: PUSH
36110: LD_VAR 0 12
36114: ARRAY
36115: ST_TO_ADDR
// list := list isect fac_list ;
36116: LD_ADDR_VAR 0 5
36120: PUSH
36121: LD_VAR 0 5
36125: PUSH
36126: LD_VAR 0 17
36130: ISECT
36131: ST_TO_ADDR
// if not list then
36132: LD_VAR 0 5
36136: NOT
36137: IFFALSE 36141
// exit ;
36139: GO 36945
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36141: LD_VAR 0 12
36145: PUSH
36146: LD_INT 3
36148: EQUAL
36149: PUSH
36150: LD_INT 49
36152: PUSH
36153: LD_VAR 0 5
36157: IN
36158: AND
36159: PUSH
36160: LD_INT 31
36162: PPUSH
36163: LD_VAR 0 16
36167: PPUSH
36168: CALL_OW 321
36172: PUSH
36173: LD_INT 2
36175: EQUAL
36176: AND
36177: IFFALSE 36237
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36179: LD_INT 22
36181: PUSH
36182: LD_VAR 0 16
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 35
36193: PUSH
36194: LD_INT 49
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 91
36203: PUSH
36204: LD_VAR 0 1
36208: PUSH
36209: LD_INT 10
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: LIST
36221: PPUSH
36222: CALL_OW 69
36226: NOT
36227: IFFALSE 36237
// weapon := ru_time_lapser ;
36229: LD_ADDR_VAR 0 18
36233: PUSH
36234: LD_INT 49
36236: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36237: LD_VAR 0 12
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: IN
36252: PUSH
36253: LD_INT 11
36255: PUSH
36256: LD_VAR 0 5
36260: IN
36261: PUSH
36262: LD_INT 30
36264: PUSH
36265: LD_VAR 0 5
36269: IN
36270: OR
36271: AND
36272: PUSH
36273: LD_INT 6
36275: PPUSH
36276: LD_VAR 0 16
36280: PPUSH
36281: CALL_OW 321
36285: PUSH
36286: LD_INT 2
36288: EQUAL
36289: AND
36290: IFFALSE 36455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36292: LD_INT 22
36294: PUSH
36295: LD_VAR 0 16
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: LD_INT 35
36309: PUSH
36310: LD_INT 11
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 35
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 91
36334: PUSH
36335: LD_VAR 0 1
36339: PUSH
36340: LD_INT 18
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: PPUSH
36353: CALL_OW 69
36357: NOT
36358: PUSH
36359: LD_INT 22
36361: PUSH
36362: LD_VAR 0 16
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 30
36376: PUSH
36377: LD_INT 32
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 30
36386: PUSH
36387: LD_INT 33
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 91
36401: PUSH
36402: LD_VAR 0 1
36406: PUSH
36407: LD_INT 12
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: PUSH
36420: EMPTY
36421: LIST
36422: PPUSH
36423: CALL_OW 69
36427: PUSH
36428: LD_INT 2
36430: GREATER
36431: AND
36432: IFFALSE 36455
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36434: LD_ADDR_VAR 0 18
36438: PUSH
36439: LD_INT 11
36441: PUSH
36442: LD_INT 30
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_VAR 0 12
36453: ARRAY
36454: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36455: LD_VAR 0 18
36459: NOT
36460: PUSH
36461: LD_INT 40
36463: PPUSH
36464: LD_VAR 0 16
36468: PPUSH
36469: CALL_OW 321
36473: PUSH
36474: LD_INT 2
36476: EQUAL
36477: AND
36478: PUSH
36479: LD_INT 7
36481: PUSH
36482: LD_VAR 0 5
36486: IN
36487: PUSH
36488: LD_INT 28
36490: PUSH
36491: LD_VAR 0 5
36495: IN
36496: OR
36497: PUSH
36498: LD_INT 45
36500: PUSH
36501: LD_VAR 0 5
36505: IN
36506: OR
36507: AND
36508: IFFALSE 36762
// begin hex := GetHexInfo ( x , y ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_VAR 0 10
36519: PPUSH
36520: LD_VAR 0 11
36524: PPUSH
36525: CALL_OW 546
36529: ST_TO_ADDR
// if hex [ 1 ] then
36530: LD_VAR 0 4
36534: PUSH
36535: LD_INT 1
36537: ARRAY
36538: IFFALSE 36542
// exit ;
36540: GO 36945
// height := hex [ 2 ] ;
36542: LD_ADDR_VAR 0 15
36546: PUSH
36547: LD_VAR 0 4
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36556: LD_ADDR_VAR 0 14
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: LD_INT 5
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
// for i in tmp do
36579: LD_ADDR_VAR 0 8
36583: PUSH
36584: LD_VAR 0 14
36588: PUSH
36589: FOR_IN
36590: IFFALSE 36760
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36592: LD_ADDR_VAR 0 9
36596: PUSH
36597: LD_VAR 0 10
36601: PPUSH
36602: LD_VAR 0 8
36606: PPUSH
36607: LD_INT 5
36609: PPUSH
36610: CALL_OW 272
36614: PUSH
36615: LD_VAR 0 11
36619: PPUSH
36620: LD_VAR 0 8
36624: PPUSH
36625: LD_INT 5
36627: PPUSH
36628: CALL_OW 273
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36637: LD_VAR 0 9
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: PPUSH
36646: LD_VAR 0 9
36650: PUSH
36651: LD_INT 2
36653: ARRAY
36654: PPUSH
36655: CALL_OW 488
36659: IFFALSE 36758
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36661: LD_ADDR_VAR 0 4
36665: PUSH
36666: LD_VAR 0 9
36670: PUSH
36671: LD_INT 1
36673: ARRAY
36674: PPUSH
36675: LD_VAR 0 9
36679: PUSH
36680: LD_INT 2
36682: ARRAY
36683: PPUSH
36684: CALL_OW 546
36688: ST_TO_ADDR
// if hex [ 1 ] then
36689: LD_VAR 0 4
36693: PUSH
36694: LD_INT 1
36696: ARRAY
36697: IFFALSE 36701
// continue ;
36699: GO 36589
// h := hex [ 2 ] ;
36701: LD_ADDR_VAR 0 13
36705: PUSH
36706: LD_VAR 0 4
36710: PUSH
36711: LD_INT 2
36713: ARRAY
36714: ST_TO_ADDR
// if h + 7 < height then
36715: LD_VAR 0 13
36719: PUSH
36720: LD_INT 7
36722: PLUS
36723: PUSH
36724: LD_VAR 0 15
36728: LESS
36729: IFFALSE 36758
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36731: LD_ADDR_VAR 0 18
36735: PUSH
36736: LD_INT 7
36738: PUSH
36739: LD_INT 28
36741: PUSH
36742: LD_INT 45
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: PUSH
36750: LD_VAR 0 12
36754: ARRAY
36755: ST_TO_ADDR
// break ;
36756: GO 36760
// end ; end ; end ;
36758: GO 36589
36760: POP
36761: POP
// end ; if not weapon then
36762: LD_VAR 0 18
36766: NOT
36767: IFFALSE 36827
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36769: LD_ADDR_VAR 0 5
36773: PUSH
36774: LD_VAR 0 5
36778: PUSH
36779: LD_INT 11
36781: PUSH
36782: LD_INT 30
36784: PUSH
36785: LD_INT 49
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: DIFF
36793: ST_TO_ADDR
// if not list then
36794: LD_VAR 0 5
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 36945
// weapon := list [ rand ( 1 , list ) ] ;
36803: LD_ADDR_VAR 0 18
36807: PUSH
36808: LD_VAR 0 5
36812: PUSH
36813: LD_INT 1
36815: PPUSH
36816: LD_VAR 0 5
36820: PPUSH
36821: CALL_OW 12
36825: ARRAY
36826: ST_TO_ADDR
// end ; if weapon then
36827: LD_VAR 0 18
36831: IFFALSE 36945
// begin tmp := CostOfWeapon ( weapon ) ;
36833: LD_ADDR_VAR 0 14
36837: PUSH
36838: LD_VAR 0 18
36842: PPUSH
36843: CALL_OW 451
36847: ST_TO_ADDR
// j := GetBase ( tower ) ;
36848: LD_ADDR_VAR 0 9
36852: PUSH
36853: LD_VAR 0 1
36857: PPUSH
36858: CALL_OW 274
36862: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36863: LD_VAR 0 9
36867: PPUSH
36868: LD_INT 1
36870: PPUSH
36871: CALL_OW 275
36875: PUSH
36876: LD_VAR 0 14
36880: PUSH
36881: LD_INT 1
36883: ARRAY
36884: GREATEREQUAL
36885: PUSH
36886: LD_VAR 0 9
36890: PPUSH
36891: LD_INT 2
36893: PPUSH
36894: CALL_OW 275
36898: PUSH
36899: LD_VAR 0 14
36903: PUSH
36904: LD_INT 2
36906: ARRAY
36907: GREATEREQUAL
36908: AND
36909: PUSH
36910: LD_VAR 0 9
36914: PPUSH
36915: LD_INT 3
36917: PPUSH
36918: CALL_OW 275
36922: PUSH
36923: LD_VAR 0 14
36927: PUSH
36928: LD_INT 3
36930: ARRAY
36931: GREATEREQUAL
36932: AND
36933: IFFALSE 36945
// result := weapon ;
36935: LD_ADDR_VAR 0 3
36939: PUSH
36940: LD_VAR 0 18
36944: ST_TO_ADDR
// end ; end ;
36945: LD_VAR 0 3
36949: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36950: LD_INT 0
36952: PPUSH
36953: PPUSH
// result := true ;
36954: LD_ADDR_VAR 0 3
36958: PUSH
36959: LD_INT 1
36961: ST_TO_ADDR
// if array1 = array2 then
36962: LD_VAR 0 1
36966: PUSH
36967: LD_VAR 0 2
36971: EQUAL
36972: IFFALSE 37032
// begin for i = 1 to array1 do
36974: LD_ADDR_VAR 0 4
36978: PUSH
36979: DOUBLE
36980: LD_INT 1
36982: DEC
36983: ST_TO_ADDR
36984: LD_VAR 0 1
36988: PUSH
36989: FOR_TO
36990: IFFALSE 37028
// if array1 [ i ] <> array2 [ i ] then
36992: LD_VAR 0 1
36996: PUSH
36997: LD_VAR 0 4
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 2
37007: PUSH
37008: LD_VAR 0 4
37012: ARRAY
37013: NONEQUAL
37014: IFFALSE 37026
// begin result := false ;
37016: LD_ADDR_VAR 0 3
37020: PUSH
37021: LD_INT 0
37023: ST_TO_ADDR
// break ;
37024: GO 37028
// end ;
37026: GO 36989
37028: POP
37029: POP
// end else
37030: GO 37040
// result := false ;
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_INT 0
37039: ST_TO_ADDR
// end ;
37040: LD_VAR 0 3
37044: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37045: LD_INT 0
37047: PPUSH
37048: PPUSH
// if not array1 or not array2 then
37049: LD_VAR 0 1
37053: NOT
37054: PUSH
37055: LD_VAR 0 2
37059: NOT
37060: OR
37061: IFFALSE 37065
// exit ;
37063: GO 37129
// result := true ;
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 1
37072: ST_TO_ADDR
// for i = 1 to array1 do
37073: LD_ADDR_VAR 0 4
37077: PUSH
37078: DOUBLE
37079: LD_INT 1
37081: DEC
37082: ST_TO_ADDR
37083: LD_VAR 0 1
37087: PUSH
37088: FOR_TO
37089: IFFALSE 37127
// if array1 [ i ] <> array2 [ i ] then
37091: LD_VAR 0 1
37095: PUSH
37096: LD_VAR 0 4
37100: ARRAY
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_VAR 0 4
37111: ARRAY
37112: NONEQUAL
37113: IFFALSE 37125
// begin result := false ;
37115: LD_ADDR_VAR 0 3
37119: PUSH
37120: LD_INT 0
37122: ST_TO_ADDR
// break ;
37123: GO 37127
// end ;
37125: GO 37088
37127: POP
37128: POP
// end ;
37129: LD_VAR 0 3
37133: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37134: LD_INT 0
37136: PPUSH
37137: PPUSH
37138: PPUSH
// pom := GetBase ( fac ) ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: CALL_OW 274
37153: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37154: LD_ADDR_VAR 0 4
37158: PUSH
37159: LD_VAR 0 2
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: PPUSH
37168: LD_VAR 0 2
37172: PUSH
37173: LD_INT 2
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 2
37181: PUSH
37182: LD_INT 3
37184: ARRAY
37185: PPUSH
37186: LD_VAR 0 2
37190: PUSH
37191: LD_INT 4
37193: ARRAY
37194: PPUSH
37195: CALL_OW 449
37199: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37200: LD_ADDR_VAR 0 3
37204: PUSH
37205: LD_VAR 0 5
37209: PPUSH
37210: LD_INT 1
37212: PPUSH
37213: CALL_OW 275
37217: PUSH
37218: LD_VAR 0 4
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: GREATEREQUAL
37227: PUSH
37228: LD_VAR 0 5
37232: PPUSH
37233: LD_INT 2
37235: PPUSH
37236: CALL_OW 275
37240: PUSH
37241: LD_VAR 0 4
37245: PUSH
37246: LD_INT 2
37248: ARRAY
37249: GREATEREQUAL
37250: AND
37251: PUSH
37252: LD_VAR 0 5
37256: PPUSH
37257: LD_INT 3
37259: PPUSH
37260: CALL_OW 275
37264: PUSH
37265: LD_VAR 0 4
37269: PUSH
37270: LD_INT 3
37272: ARRAY
37273: GREATEREQUAL
37274: AND
37275: ST_TO_ADDR
// end ;
37276: LD_VAR 0 3
37280: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37281: LD_INT 0
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
// pom := GetBase ( building ) ;
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 274
37301: ST_TO_ADDR
// if not pom then
37302: LD_VAR 0 3
37306: NOT
37307: IFFALSE 37311
// exit ;
37309: GO 37481
// btype := GetBType ( building ) ;
37311: LD_ADDR_VAR 0 5
37315: PUSH
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL_OW 266
37325: ST_TO_ADDR
// if btype = b_armoury then
37326: LD_VAR 0 5
37330: PUSH
37331: LD_INT 4
37333: EQUAL
37334: IFFALSE 37344
// btype := b_barracks ;
37336: LD_ADDR_VAR 0 5
37340: PUSH
37341: LD_INT 5
37343: ST_TO_ADDR
// if btype = b_depot then
37344: LD_VAR 0 5
37348: PUSH
37349: LD_INT 0
37351: EQUAL
37352: IFFALSE 37362
// btype := b_warehouse ;
37354: LD_ADDR_VAR 0 5
37358: PUSH
37359: LD_INT 1
37361: ST_TO_ADDR
// if btype = b_workshop then
37362: LD_VAR 0 5
37366: PUSH
37367: LD_INT 2
37369: EQUAL
37370: IFFALSE 37380
// btype := b_factory ;
37372: LD_ADDR_VAR 0 5
37376: PUSH
37377: LD_INT 3
37379: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37380: LD_ADDR_VAR 0 4
37384: PUSH
37385: LD_VAR 0 5
37389: PPUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 248
37399: PPUSH
37400: CALL_OW 450
37404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37405: LD_ADDR_VAR 0 2
37409: PUSH
37410: LD_VAR 0 3
37414: PPUSH
37415: LD_INT 1
37417: PPUSH
37418: CALL_OW 275
37422: PUSH
37423: LD_VAR 0 4
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: GREATEREQUAL
37432: PUSH
37433: LD_VAR 0 3
37437: PPUSH
37438: LD_INT 2
37440: PPUSH
37441: CALL_OW 275
37445: PUSH
37446: LD_VAR 0 4
37450: PUSH
37451: LD_INT 2
37453: ARRAY
37454: GREATEREQUAL
37455: AND
37456: PUSH
37457: LD_VAR 0 3
37461: PPUSH
37462: LD_INT 3
37464: PPUSH
37465: CALL_OW 275
37469: PUSH
37470: LD_VAR 0 4
37474: PUSH
37475: LD_INT 3
37477: ARRAY
37478: GREATEREQUAL
37479: AND
37480: ST_TO_ADDR
// end ;
37481: LD_VAR 0 2
37485: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37486: LD_INT 0
37488: PPUSH
37489: PPUSH
37490: PPUSH
// pom := GetBase ( building ) ;
37491: LD_ADDR_VAR 0 4
37495: PUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 274
37505: ST_TO_ADDR
// if not pom then
37506: LD_VAR 0 4
37510: NOT
37511: IFFALSE 37515
// exit ;
37513: GO 37616
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37515: LD_ADDR_VAR 0 5
37519: PUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 248
37534: PPUSH
37535: CALL_OW 450
37539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37540: LD_ADDR_VAR 0 3
37544: PUSH
37545: LD_VAR 0 4
37549: PPUSH
37550: LD_INT 1
37552: PPUSH
37553: CALL_OW 275
37557: PUSH
37558: LD_VAR 0 5
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: GREATEREQUAL
37567: PUSH
37568: LD_VAR 0 4
37572: PPUSH
37573: LD_INT 2
37575: PPUSH
37576: CALL_OW 275
37580: PUSH
37581: LD_VAR 0 5
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: GREATEREQUAL
37590: AND
37591: PUSH
37592: LD_VAR 0 4
37596: PPUSH
37597: LD_INT 3
37599: PPUSH
37600: CALL_OW 275
37604: PUSH
37605: LD_VAR 0 5
37609: PUSH
37610: LD_INT 3
37612: ARRAY
37613: GREATEREQUAL
37614: AND
37615: ST_TO_ADDR
// end ;
37616: LD_VAR 0 3
37620: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37621: LD_INT 0
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
// result := false ;
37634: LD_ADDR_VAR 0 8
37638: PUSH
37639: LD_INT 0
37641: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37642: LD_VAR 0 5
37646: NOT
37647: PUSH
37648: LD_VAR 0 1
37652: NOT
37653: OR
37654: PUSH
37655: LD_VAR 0 2
37659: NOT
37660: OR
37661: PUSH
37662: LD_VAR 0 3
37666: NOT
37667: OR
37668: IFFALSE 37672
// exit ;
37670: GO 38486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37672: LD_ADDR_VAR 0 14
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: LD_VAR 0 2
37686: PPUSH
37687: LD_VAR 0 3
37691: PPUSH
37692: LD_VAR 0 4
37696: PPUSH
37697: LD_VAR 0 5
37701: PUSH
37702: LD_INT 1
37704: ARRAY
37705: PPUSH
37706: CALL_OW 248
37710: PPUSH
37711: LD_INT 0
37713: PPUSH
37714: CALL 39739 0 6
37718: ST_TO_ADDR
// if not hexes then
37719: LD_VAR 0 14
37723: NOT
37724: IFFALSE 37728
// exit ;
37726: GO 38486
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37728: LD_ADDR_VAR 0 17
37732: PUSH
37733: LD_VAR 0 5
37737: PPUSH
37738: LD_INT 22
37740: PUSH
37741: LD_VAR 0 13
37745: PPUSH
37746: CALL_OW 255
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: LD_INT 30
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 30
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PPUSH
37787: CALL_OW 72
37791: ST_TO_ADDR
// for i = 1 to hexes do
37792: LD_ADDR_VAR 0 9
37796: PUSH
37797: DOUBLE
37798: LD_INT 1
37800: DEC
37801: ST_TO_ADDR
37802: LD_VAR 0 14
37806: PUSH
37807: FOR_TO
37808: IFFALSE 38484
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37810: LD_ADDR_VAR 0 13
37814: PUSH
37815: LD_VAR 0 14
37819: PUSH
37820: LD_VAR 0 9
37824: ARRAY
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: PPUSH
37830: LD_VAR 0 14
37834: PUSH
37835: LD_VAR 0 9
37839: ARRAY
37840: PUSH
37841: LD_INT 2
37843: ARRAY
37844: PPUSH
37845: CALL_OW 428
37849: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37850: LD_VAR 0 14
37854: PUSH
37855: LD_VAR 0 9
37859: ARRAY
37860: PUSH
37861: LD_INT 1
37863: ARRAY
37864: PPUSH
37865: LD_VAR 0 14
37869: PUSH
37870: LD_VAR 0 9
37874: ARRAY
37875: PUSH
37876: LD_INT 2
37878: ARRAY
37879: PPUSH
37880: CALL_OW 351
37884: PUSH
37885: LD_VAR 0 14
37889: PUSH
37890: LD_VAR 0 9
37894: ARRAY
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: PPUSH
37900: LD_VAR 0 14
37904: PUSH
37905: LD_VAR 0 9
37909: ARRAY
37910: PUSH
37911: LD_INT 2
37913: ARRAY
37914: PPUSH
37915: CALL_OW 488
37919: NOT
37920: OR
37921: PUSH
37922: LD_VAR 0 13
37926: PPUSH
37927: CALL_OW 247
37931: PUSH
37932: LD_INT 3
37934: EQUAL
37935: OR
37936: IFFALSE 37942
// exit ;
37938: POP
37939: POP
37940: GO 38486
// if not tmp then
37942: LD_VAR 0 13
37946: NOT
37947: IFFALSE 37951
// continue ;
37949: GO 37807
// result := true ;
37951: LD_ADDR_VAR 0 8
37955: PUSH
37956: LD_INT 1
37958: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37959: LD_VAR 0 6
37963: PUSH
37964: LD_VAR 0 13
37968: PPUSH
37969: CALL_OW 247
37973: PUSH
37974: LD_INT 2
37976: EQUAL
37977: AND
37978: PUSH
37979: LD_VAR 0 13
37983: PPUSH
37984: CALL_OW 263
37988: PUSH
37989: LD_INT 1
37991: EQUAL
37992: AND
37993: IFFALSE 38157
// begin if IsDrivenBy ( tmp ) then
37995: LD_VAR 0 13
37999: PPUSH
38000: CALL_OW 311
38004: IFFALSE 38008
// continue ;
38006: GO 37807
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38008: LD_VAR 0 6
38012: PPUSH
38013: LD_INT 3
38015: PUSH
38016: LD_INT 60
38018: PUSH
38019: EMPTY
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: LD_INT 55
38031: PUSH
38032: EMPTY
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PPUSH
38043: CALL_OW 72
38047: IFFALSE 38155
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38049: LD_ADDR_VAR 0 18
38053: PUSH
38054: LD_VAR 0 6
38058: PPUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 60
38064: PUSH
38065: EMPTY
38066: LIST
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 55
38077: PUSH
38078: EMPTY
38079: LIST
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PPUSH
38089: CALL_OW 72
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: ST_TO_ADDR
// if IsInUnit ( driver ) then
38098: LD_VAR 0 18
38102: PPUSH
38103: CALL_OW 310
38107: IFFALSE 38118
// ComExit ( driver ) ;
38109: LD_VAR 0 18
38113: PPUSH
38114: CALL 63520 0 1
// AddComEnterUnit ( driver , tmp ) ;
38118: LD_VAR 0 18
38122: PPUSH
38123: LD_VAR 0 13
38127: PPUSH
38128: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38132: LD_VAR 0 18
38136: PPUSH
38137: LD_VAR 0 7
38141: PPUSH
38142: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38146: LD_VAR 0 18
38150: PPUSH
38151: CALL_OW 181
// end ; continue ;
38155: GO 37807
// end ; if not cleaners or not tmp in cleaners then
38157: LD_VAR 0 6
38161: NOT
38162: PUSH
38163: LD_VAR 0 13
38167: PUSH
38168: LD_VAR 0 6
38172: IN
38173: NOT
38174: OR
38175: IFFALSE 38482
// begin if dep then
38177: LD_VAR 0 17
38181: IFFALSE 38317
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38183: LD_ADDR_VAR 0 16
38187: PUSH
38188: LD_VAR 0 17
38192: PUSH
38193: LD_INT 1
38195: ARRAY
38196: PPUSH
38197: CALL_OW 250
38201: PPUSH
38202: LD_VAR 0 17
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PPUSH
38211: CALL_OW 254
38215: PPUSH
38216: LD_INT 5
38218: PPUSH
38219: CALL_OW 272
38223: PUSH
38224: LD_VAR 0 17
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PPUSH
38233: CALL_OW 251
38237: PPUSH
38238: LD_VAR 0 17
38242: PUSH
38243: LD_INT 1
38245: ARRAY
38246: PPUSH
38247: CALL_OW 254
38251: PPUSH
38252: LD_INT 5
38254: PPUSH
38255: CALL_OW 273
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38264: LD_VAR 0 16
38268: PUSH
38269: LD_INT 1
38271: ARRAY
38272: PPUSH
38273: LD_VAR 0 16
38277: PUSH
38278: LD_INT 2
38280: ARRAY
38281: PPUSH
38282: CALL_OW 488
38286: IFFALSE 38317
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38288: LD_VAR 0 13
38292: PPUSH
38293: LD_VAR 0 16
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: LD_VAR 0 16
38306: PUSH
38307: LD_INT 2
38309: ARRAY
38310: PPUSH
38311: CALL_OW 111
// continue ;
38315: GO 37807
// end ; end ; r := GetDir ( tmp ) ;
38317: LD_ADDR_VAR 0 15
38321: PUSH
38322: LD_VAR 0 13
38326: PPUSH
38327: CALL_OW 254
38331: ST_TO_ADDR
// if r = 5 then
38332: LD_VAR 0 15
38336: PUSH
38337: LD_INT 5
38339: EQUAL
38340: IFFALSE 38350
// r := 0 ;
38342: LD_ADDR_VAR 0 15
38346: PUSH
38347: LD_INT 0
38349: ST_TO_ADDR
// for j = r to 5 do
38350: LD_ADDR_VAR 0 10
38354: PUSH
38355: DOUBLE
38356: LD_VAR 0 15
38360: DEC
38361: ST_TO_ADDR
38362: LD_INT 5
38364: PUSH
38365: FOR_TO
38366: IFFALSE 38480
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38368: LD_ADDR_VAR 0 11
38372: PUSH
38373: LD_VAR 0 13
38377: PPUSH
38378: CALL_OW 250
38382: PPUSH
38383: LD_VAR 0 10
38387: PPUSH
38388: LD_INT 2
38390: PPUSH
38391: CALL_OW 272
38395: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38396: LD_ADDR_VAR 0 12
38400: PUSH
38401: LD_VAR 0 13
38405: PPUSH
38406: CALL_OW 251
38410: PPUSH
38411: LD_VAR 0 10
38415: PPUSH
38416: LD_INT 2
38418: PPUSH
38419: CALL_OW 273
38423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38424: LD_VAR 0 11
38428: PPUSH
38429: LD_VAR 0 12
38433: PPUSH
38434: CALL_OW 488
38438: PUSH
38439: LD_VAR 0 11
38443: PPUSH
38444: LD_VAR 0 12
38448: PPUSH
38449: CALL_OW 428
38453: NOT
38454: AND
38455: IFFALSE 38478
// begin ComMoveXY ( tmp , _x , _y ) ;
38457: LD_VAR 0 13
38461: PPUSH
38462: LD_VAR 0 11
38466: PPUSH
38467: LD_VAR 0 12
38471: PPUSH
38472: CALL_OW 111
// break ;
38476: GO 38480
// end ; end ;
38478: GO 38365
38480: POP
38481: POP
// end ; end ;
38482: GO 37807
38484: POP
38485: POP
// end ;
38486: LD_VAR 0 8
38490: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38491: LD_INT 0
38493: PPUSH
// result := true ;
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_INT 1
38501: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 24
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38521
38513: LD_INT 33
38515: DOUBLE
38516: EQUAL
38517: IFTRUE 38521
38519: GO 38546
38521: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_INT 32
38529: PPUSH
38530: LD_VAR 0 1
38534: PPUSH
38535: CALL_OW 321
38539: PUSH
38540: LD_INT 2
38542: EQUAL
38543: ST_TO_ADDR
38544: GO 38862
38546: LD_INT 20
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38579
38554: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: LD_INT 6
38562: PPUSH
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 321
38572: PUSH
38573: LD_INT 2
38575: EQUAL
38576: ST_TO_ADDR
38577: GO 38862
38579: LD_INT 22
38581: DOUBLE
38582: EQUAL
38583: IFTRUE 38593
38585: LD_INT 36
38587: DOUBLE
38588: EQUAL
38589: IFTRUE 38593
38591: GO 38618
38593: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38594: LD_ADDR_VAR 0 3
38598: PUSH
38599: LD_INT 15
38601: PPUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 321
38611: PUSH
38612: LD_INT 2
38614: EQUAL
38615: ST_TO_ADDR
38616: GO 38862
38618: LD_INT 30
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38626
38624: GO 38651
38626: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38627: LD_ADDR_VAR 0 3
38631: PUSH
38632: LD_INT 20
38634: PPUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: CALL_OW 321
38644: PUSH
38645: LD_INT 2
38647: EQUAL
38648: ST_TO_ADDR
38649: GO 38862
38651: LD_INT 28
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38665
38657: LD_INT 21
38659: DOUBLE
38660: EQUAL
38661: IFTRUE 38665
38663: GO 38690
38665: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38666: LD_ADDR_VAR 0 3
38670: PUSH
38671: LD_INT 21
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: CALL_OW 321
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: ST_TO_ADDR
38688: GO 38862
38690: LD_INT 16
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38723
38698: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38699: LD_ADDR_VAR 0 3
38703: PUSH
38704: LD_INT 84
38706: PPUSH
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 321
38716: PUSH
38717: LD_INT 2
38719: EQUAL
38720: ST_TO_ADDR
38721: GO 38862
38723: LD_INT 19
38725: DOUBLE
38726: EQUAL
38727: IFTRUE 38737
38729: LD_INT 23
38731: DOUBLE
38732: EQUAL
38733: IFTRUE 38737
38735: GO 38762
38737: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38738: LD_ADDR_VAR 0 3
38742: PUSH
38743: LD_INT 83
38745: PPUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: CALL_OW 321
38755: PUSH
38756: LD_INT 2
38758: EQUAL
38759: ST_TO_ADDR
38760: GO 38862
38762: LD_INT 17
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38795
38770: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38771: LD_ADDR_VAR 0 3
38775: PUSH
38776: LD_INT 39
38778: PPUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 321
38788: PUSH
38789: LD_INT 2
38791: EQUAL
38792: ST_TO_ADDR
38793: GO 38862
38795: LD_INT 18
38797: DOUBLE
38798: EQUAL
38799: IFTRUE 38803
38801: GO 38828
38803: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38804: LD_ADDR_VAR 0 3
38808: PUSH
38809: LD_INT 40
38811: PPUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 321
38821: PUSH
38822: LD_INT 2
38824: EQUAL
38825: ST_TO_ADDR
38826: GO 38862
38828: LD_INT 27
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38836
38834: GO 38861
38836: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38837: LD_ADDR_VAR 0 3
38841: PUSH
38842: LD_INT 35
38844: PPUSH
38845: LD_VAR 0 1
38849: PPUSH
38850: CALL_OW 321
38854: PUSH
38855: LD_INT 2
38857: EQUAL
38858: ST_TO_ADDR
38859: GO 38862
38861: POP
// end ;
38862: LD_VAR 0 3
38866: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38867: LD_INT 0
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
// result := false ;
38880: LD_ADDR_VAR 0 6
38884: PUSH
38885: LD_INT 0
38887: ST_TO_ADDR
// if btype = b_depot then
38888: LD_VAR 0 2
38892: PUSH
38893: LD_INT 0
38895: EQUAL
38896: IFFALSE 38908
// begin result := true ;
38898: LD_ADDR_VAR 0 6
38902: PUSH
38903: LD_INT 1
38905: ST_TO_ADDR
// exit ;
38906: GO 39734
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38908: LD_VAR 0 1
38912: NOT
38913: PUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: CALL_OW 266
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: IN
38934: NOT
38935: OR
38936: PUSH
38937: LD_VAR 0 2
38941: NOT
38942: OR
38943: PUSH
38944: LD_VAR 0 5
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: LD_INT 4
38963: PUSH
38964: LD_INT 5
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: IN
38975: NOT
38976: OR
38977: PUSH
38978: LD_VAR 0 3
38982: PPUSH
38983: LD_VAR 0 4
38987: PPUSH
38988: CALL_OW 488
38992: NOT
38993: OR
38994: IFFALSE 38998
// exit ;
38996: GO 39734
// side := GetSide ( depot ) ;
38998: LD_ADDR_VAR 0 9
39002: PUSH
39003: LD_VAR 0 1
39007: PPUSH
39008: CALL_OW 255
39012: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39013: LD_VAR 0 9
39017: PPUSH
39018: LD_VAR 0 2
39022: PPUSH
39023: CALL 38491 0 2
39027: NOT
39028: IFFALSE 39032
// exit ;
39030: GO 39734
// pom := GetBase ( depot ) ;
39032: LD_ADDR_VAR 0 10
39036: PUSH
39037: LD_VAR 0 1
39041: PPUSH
39042: CALL_OW 274
39046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39047: LD_ADDR_VAR 0 11
39051: PUSH
39052: LD_VAR 0 2
39056: PPUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 248
39066: PPUSH
39067: CALL_OW 450
39071: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39072: LD_VAR 0 10
39076: PPUSH
39077: LD_INT 1
39079: PPUSH
39080: CALL_OW 275
39084: PUSH
39085: LD_VAR 0 11
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: GREATEREQUAL
39094: PUSH
39095: LD_VAR 0 10
39099: PPUSH
39100: LD_INT 2
39102: PPUSH
39103: CALL_OW 275
39107: PUSH
39108: LD_VAR 0 11
39112: PUSH
39113: LD_INT 2
39115: ARRAY
39116: GREATEREQUAL
39117: AND
39118: PUSH
39119: LD_VAR 0 10
39123: PPUSH
39124: LD_INT 3
39126: PPUSH
39127: CALL_OW 275
39131: PUSH
39132: LD_VAR 0 11
39136: PUSH
39137: LD_INT 3
39139: ARRAY
39140: GREATEREQUAL
39141: AND
39142: NOT
39143: IFFALSE 39147
// exit ;
39145: GO 39734
// if GetBType ( depot ) = b_depot then
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 266
39156: PUSH
39157: LD_INT 0
39159: EQUAL
39160: IFFALSE 39172
// dist := 28 else
39162: LD_ADDR_VAR 0 14
39166: PUSH
39167: LD_INT 28
39169: ST_TO_ADDR
39170: GO 39180
// dist := 36 ;
39172: LD_ADDR_VAR 0 14
39176: PUSH
39177: LD_INT 36
39179: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39180: LD_VAR 0 1
39184: PPUSH
39185: LD_VAR 0 3
39189: PPUSH
39190: LD_VAR 0 4
39194: PPUSH
39195: CALL_OW 297
39199: PUSH
39200: LD_VAR 0 14
39204: GREATER
39205: IFFALSE 39209
// exit ;
39207: GO 39734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39209: LD_ADDR_VAR 0 12
39213: PUSH
39214: LD_VAR 0 2
39218: PPUSH
39219: LD_VAR 0 3
39223: PPUSH
39224: LD_VAR 0 4
39228: PPUSH
39229: LD_VAR 0 5
39233: PPUSH
39234: LD_VAR 0 1
39238: PPUSH
39239: CALL_OW 248
39243: PPUSH
39244: LD_INT 0
39246: PPUSH
39247: CALL 39739 0 6
39251: ST_TO_ADDR
// if not hexes then
39252: LD_VAR 0 12
39256: NOT
39257: IFFALSE 39261
// exit ;
39259: GO 39734
// hex := GetHexInfo ( x , y ) ;
39261: LD_ADDR_VAR 0 15
39265: PUSH
39266: LD_VAR 0 3
39270: PPUSH
39271: LD_VAR 0 4
39275: PPUSH
39276: CALL_OW 546
39280: ST_TO_ADDR
// if hex [ 1 ] then
39281: LD_VAR 0 15
39285: PUSH
39286: LD_INT 1
39288: ARRAY
39289: IFFALSE 39293
// exit ;
39291: GO 39734
// height := hex [ 2 ] ;
39293: LD_ADDR_VAR 0 13
39297: PUSH
39298: LD_VAR 0 15
39302: PUSH
39303: LD_INT 2
39305: ARRAY
39306: ST_TO_ADDR
// for i = 1 to hexes do
39307: LD_ADDR_VAR 0 7
39311: PUSH
39312: DOUBLE
39313: LD_INT 1
39315: DEC
39316: ST_TO_ADDR
39317: LD_VAR 0 12
39321: PUSH
39322: FOR_TO
39323: IFFALSE 39653
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39325: LD_VAR 0 12
39329: PUSH
39330: LD_VAR 0 7
39334: ARRAY
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 12
39344: PUSH
39345: LD_VAR 0 7
39349: ARRAY
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 488
39359: NOT
39360: PUSH
39361: LD_VAR 0 12
39365: PUSH
39366: LD_VAR 0 7
39370: ARRAY
39371: PUSH
39372: LD_INT 1
39374: ARRAY
39375: PPUSH
39376: LD_VAR 0 12
39380: PUSH
39381: LD_VAR 0 7
39385: ARRAY
39386: PUSH
39387: LD_INT 2
39389: ARRAY
39390: PPUSH
39391: CALL_OW 428
39395: PUSH
39396: LD_INT 0
39398: GREATER
39399: OR
39400: PUSH
39401: LD_VAR 0 12
39405: PUSH
39406: LD_VAR 0 7
39410: ARRAY
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: LD_VAR 0 12
39420: PUSH
39421: LD_VAR 0 7
39425: ARRAY
39426: PUSH
39427: LD_INT 2
39429: ARRAY
39430: PPUSH
39431: CALL_OW 351
39435: OR
39436: IFFALSE 39442
// exit ;
39438: POP
39439: POP
39440: GO 39734
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39442: LD_ADDR_VAR 0 8
39446: PUSH
39447: LD_VAR 0 12
39451: PUSH
39452: LD_VAR 0 7
39456: ARRAY
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: LD_VAR 0 12
39466: PUSH
39467: LD_VAR 0 7
39471: ARRAY
39472: PUSH
39473: LD_INT 2
39475: ARRAY
39476: PPUSH
39477: CALL_OW 546
39481: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39482: LD_VAR 0 8
39486: PUSH
39487: LD_INT 1
39489: ARRAY
39490: PUSH
39491: LD_VAR 0 8
39495: PUSH
39496: LD_INT 2
39498: ARRAY
39499: PUSH
39500: LD_VAR 0 13
39504: PUSH
39505: LD_INT 2
39507: PLUS
39508: GREATER
39509: OR
39510: PUSH
39511: LD_VAR 0 8
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: PUSH
39520: LD_VAR 0 13
39524: PUSH
39525: LD_INT 2
39527: MINUS
39528: LESS
39529: OR
39530: PUSH
39531: LD_VAR 0 8
39535: PUSH
39536: LD_INT 3
39538: ARRAY
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 8
39545: PUSH
39546: LD_INT 9
39548: PUSH
39549: LD_INT 10
39551: PUSH
39552: LD_INT 11
39554: PUSH
39555: LD_INT 12
39557: PUSH
39558: LD_INT 13
39560: PUSH
39561: LD_INT 16
39563: PUSH
39564: LD_INT 17
39566: PUSH
39567: LD_INT 18
39569: PUSH
39570: LD_INT 19
39572: PUSH
39573: LD_INT 20
39575: PUSH
39576: LD_INT 21
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: IN
39594: NOT
39595: OR
39596: PUSH
39597: LD_VAR 0 8
39601: PUSH
39602: LD_INT 5
39604: ARRAY
39605: NOT
39606: OR
39607: PUSH
39608: LD_VAR 0 8
39612: PUSH
39613: LD_INT 6
39615: ARRAY
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 7
39625: PUSH
39626: LD_INT 9
39628: PUSH
39629: LD_INT 10
39631: PUSH
39632: LD_INT 11
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: IN
39643: NOT
39644: OR
39645: IFFALSE 39651
// exit ;
39647: POP
39648: POP
39649: GO 39734
// end ;
39651: GO 39322
39653: POP
39654: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39655: LD_VAR 0 9
39659: PPUSH
39660: LD_VAR 0 3
39664: PPUSH
39665: LD_VAR 0 4
39669: PPUSH
39670: LD_INT 20
39672: PPUSH
39673: CALL 31657 0 4
39677: PUSH
39678: LD_INT 4
39680: ARRAY
39681: IFFALSE 39685
// exit ;
39683: GO 39734
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39685: LD_VAR 0 2
39689: PUSH
39690: LD_INT 29
39692: PUSH
39693: LD_INT 30
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: IN
39700: PUSH
39701: LD_VAR 0 3
39705: PPUSH
39706: LD_VAR 0 4
39710: PPUSH
39711: LD_VAR 0 9
39715: PPUSH
39716: CALL_OW 440
39720: NOT
39721: AND
39722: IFFALSE 39726
// exit ;
39724: GO 39734
// result := true ;
39726: LD_ADDR_VAR 0 6
39730: PUSH
39731: LD_INT 1
39733: ST_TO_ADDR
// end ;
39734: LD_VAR 0 6
39738: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39739: LD_INT 0
39741: PPUSH
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
39766: PPUSH
39767: PPUSH
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
39776: PPUSH
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
// result = [ ] ;
39799: LD_ADDR_VAR 0 7
39803: PUSH
39804: EMPTY
39805: ST_TO_ADDR
// temp_list = [ ] ;
39806: LD_ADDR_VAR 0 9
39810: PUSH
39811: EMPTY
39812: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39813: LD_VAR 0 4
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 4
39832: PUSH
39833: LD_INT 5
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: IN
39844: NOT
39845: PUSH
39846: LD_VAR 0 1
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: IN
39861: PUSH
39862: LD_VAR 0 5
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: IN
39881: NOT
39882: AND
39883: OR
39884: IFFALSE 39888
// exit ;
39886: GO 58279
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39888: LD_VAR 0 1
39892: PUSH
39893: LD_INT 6
39895: PUSH
39896: LD_INT 7
39898: PUSH
39899: LD_INT 8
39901: PUSH
39902: LD_INT 13
39904: PUSH
39905: LD_INT 12
39907: PUSH
39908: LD_INT 15
39910: PUSH
39911: LD_INT 11
39913: PUSH
39914: LD_INT 14
39916: PUSH
39917: LD_INT 10
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: IN
39931: IFFALSE 39941
// btype = b_lab ;
39933: LD_ADDR_VAR 0 1
39937: PUSH
39938: LD_INT 6
39940: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39941: LD_VAR 0 6
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: IN
39960: NOT
39961: PUSH
39962: LD_VAR 0 1
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: LD_INT 6
39981: PUSH
39982: LD_INT 36
39984: PUSH
39985: LD_INT 4
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: LD_INT 31
39993: PUSH
39994: LD_INT 32
39996: PUSH
39997: LD_INT 33
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: IN
40013: NOT
40014: PUSH
40015: LD_VAR 0 6
40019: PUSH
40020: LD_INT 1
40022: EQUAL
40023: AND
40024: OR
40025: PUSH
40026: LD_VAR 0 1
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 3
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: IN
40041: NOT
40042: PUSH
40043: LD_VAR 0 6
40047: PUSH
40048: LD_INT 2
40050: EQUAL
40051: AND
40052: OR
40053: IFFALSE 40063
// mode = 0 ;
40055: LD_ADDR_VAR 0 6
40059: PUSH
40060: LD_INT 0
40062: ST_TO_ADDR
// case mode of 0 :
40063: LD_VAR 0 6
40067: PUSH
40068: LD_INT 0
40070: DOUBLE
40071: EQUAL
40072: IFTRUE 40076
40074: GO 51529
40076: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40077: LD_ADDR_VAR 0 11
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40270: LD_ADDR_VAR 0 12
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 3
40427: NEG
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40466: LD_ADDR_VAR 0 13
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: LD_INT 3
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 3
40625: NEG
40626: PUSH
40627: LD_INT 2
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 3
40637: NEG
40638: PUSH
40639: LD_INT 3
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40665: LD_ADDR_VAR 0 14
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40861: LD_ADDR_VAR 0 15
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41054: LD_ADDR_VAR 0 16
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 1
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 3
41211: PUSH
41212: LD_INT 3
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41247: LD_ADDR_VAR 0 17
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41477: LD_ADDR_VAR 0 18
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41707: LD_ADDR_VAR 0 19
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41937: LD_ADDR_VAR 0 20
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42167: LD_ADDR_VAR 0 21
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: LD_INT 2
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42397: LD_ADDR_VAR 0 22
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42627: LD_ADDR_VAR 0 23
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42907: LD_ADDR_VAR 0 24
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: NEG
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43183: LD_ADDR_VAR 0 25
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43457: LD_ADDR_VAR 0 26
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: NEG
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43733: LD_ADDR_VAR 0 27
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: NEG
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 3
43966: NEG
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: NEG
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44013: LD_ADDR_VAR 0 28
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: NEG
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 3
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: LD_INT 2
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44295: LD_ADDR_VAR 0 29
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 3
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 3
44539: NEG
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44574: LD_ADDR_VAR 0 30
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44852: LD_ADDR_VAR 0 31
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 3
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45130: LD_ADDR_VAR 0 32
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 3
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 3
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45408: LD_ADDR_VAR 0 33
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45687: LD_ADDR_VAR 0 34
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: NEG
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45967: LD_ADDR_VAR 0 35
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46079: LD_ADDR_VAR 0 36
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46191: LD_ADDR_VAR 0 37
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46303: LD_ADDR_VAR 0 38
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46415: LD_ADDR_VAR 0 39
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46527: LD_ADDR_VAR 0 40
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46639: LD_ADDR_VAR 0 41
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 3
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 3
46924: NEG
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46989: LD_ADDR_VAR 0 42
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 3
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: NEG
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47339: LD_ADDR_VAR 0 43
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47687: LD_ADDR_VAR 0 44
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 3
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48037: LD_ADDR_VAR 0 45
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 3
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48387: LD_ADDR_VAR 0 46
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48735: LD_ADDR_VAR 0 47
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48886: LD_ADDR_VAR 0 48
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49033: LD_ADDR_VAR 0 49
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49177: LD_ADDR_VAR 0 50
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49321: LD_ADDR_VAR 0 51
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49468: LD_ADDR_VAR 0 52
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49619: LD_ADDR_VAR 0 53
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49849: LD_ADDR_VAR 0 54
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: NEG
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50079: LD_ADDR_VAR 0 55
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50309: LD_ADDR_VAR 0 56
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50539: LD_ADDR_VAR 0 57
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50769: LD_ADDR_VAR 0 58
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50999: LD_ADDR_VAR 0 59
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51087: LD_ADDR_VAR 0 60
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51175: LD_ADDR_VAR 0 61
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51263: LD_ADDR_VAR 0 62
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51351: LD_ADDR_VAR 0 63
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51439: LD_ADDR_VAR 0 64
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// end ; 1 :
51527: GO 57424
51529: LD_INT 1
51531: DOUBLE
51532: EQUAL
51533: IFTRUE 51537
51535: GO 54160
51537: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51538: LD_ADDR_VAR 0 11
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51582: LD_ADDR_VAR 0 12
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51623: LD_ADDR_VAR 0 13
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: LD_INT 3
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51663: LD_ADDR_VAR 0 14
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51704: LD_ADDR_VAR 0 15
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51748: LD_ADDR_VAR 0 16
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: NEG
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: NEG
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51794: LD_ADDR_VAR 0 17
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51838: LD_ADDR_VAR 0 18
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51879: LD_ADDR_VAR 0 19
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51919: LD_ADDR_VAR 0 20
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51960: LD_ADDR_VAR 0 21
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52004: LD_ADDR_VAR 0 22
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52050: LD_ADDR_VAR 0 23
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 4
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52094: LD_ADDR_VAR 0 24
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 4
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: LIST
52134: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52135: LD_ADDR_VAR 0 25
52139: PUSH
52140: LD_INT 3
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 4
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52175: LD_ADDR_VAR 0 26
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 4
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52216: LD_ADDR_VAR 0 27
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: NEG
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52260: LD_ADDR_VAR 0 28
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 4
52291: NEG
52292: PUSH
52293: LD_INT 3
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52306: LD_ADDR_VAR 0 29
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 4
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 4
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 5
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 5
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 4
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 6
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 6
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 5
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52461: LD_ADDR_VAR 0 30
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 4
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 5
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 5
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 6
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 6
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52604: LD_ADDR_VAR 0 31
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 4
52651: PUSH
52652: LD_INT 4
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 5
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 5
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 4
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 6
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 6
52711: PUSH
52712: LD_INT 6
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 5
52721: PUSH
52722: LD_INT 6
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52743: LD_ADDR_VAR 0 32
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 4
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 4
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: LD_INT 5
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 4
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 6
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 6
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 5
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52886: LD_ADDR_VAR 0 33
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: NEG
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 4
52949: NEG
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 4
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 5
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 5
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 5
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 6
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 6
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53041: LD_ADDR_VAR 0 34
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: NEG
53085: PUSH
53086: LD_INT 4
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 4
53096: NEG
53097: PUSH
53098: LD_INT 3
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: NEG
53109: PUSH
53110: LD_INT 4
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: NEG
53121: PUSH
53122: LD_INT 5
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 5
53132: NEG
53133: PUSH
53134: LD_INT 4
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 5
53144: NEG
53145: PUSH
53146: LD_INT 5
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 5
53156: NEG
53157: PUSH
53158: LD_INT 6
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 6
53168: NEG
53169: PUSH
53170: LD_INT 5
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 6
53180: NEG
53181: PUSH
53182: LD_INT 6
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53204: LD_ADDR_VAR 0 41
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53248: LD_ADDR_VAR 0 42
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53289: LD_ADDR_VAR 0 43
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53329: LD_ADDR_VAR 0 44
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53370: LD_ADDR_VAR 0 45
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 3
53399: NEG
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53414: LD_ADDR_VAR 0 46
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 3
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53460: LD_ADDR_VAR 0 47
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 3
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53493: LD_ADDR_VAR 0 48
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53524: LD_ADDR_VAR 0 49
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 3
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53553: LD_ADDR_VAR 0 50
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53582: LD_ADDR_VAR 0 51
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53613: LD_ADDR_VAR 0 52
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53646: LD_ADDR_VAR 0 53
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53690: LD_ADDR_VAR 0 54
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53731: LD_ADDR_VAR 0 55
53735: PUSH
53736: LD_INT 3
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 3
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53771: LD_ADDR_VAR 0 56
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53812: LD_ADDR_VAR 0 57
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53856: LD_ADDR_VAR 0 58
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53902: LD_ADDR_VAR 0 59
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53946: LD_ADDR_VAR 0 60
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53987: LD_ADDR_VAR 0 61
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54027: LD_ADDR_VAR 0 62
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54068: LD_ADDR_VAR 0 63
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54112: LD_ADDR_VAR 0 64
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// end ; 2 :
54158: GO 57424
54160: LD_INT 2
54162: DOUBLE
54163: EQUAL
54164: IFTRUE 54168
54166: GO 57423
54168: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54169: LD_ADDR_VAR 0 29
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 4
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 5
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 4
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 4
54299: PUSH
54300: LD_INT 4
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 4
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 4
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 4
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 4
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 5
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 5
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 3
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 5
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 4
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 4
54554: NEG
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 4
54566: NEG
54567: PUSH
54568: LD_INT 5
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: NEG
54579: PUSH
54580: LD_INT 4
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 3
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 5
54614: NEG
54615: PUSH
54616: LD_INT 4
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 5
54626: NEG
54627: PUSH
54628: LD_INT 5
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 5
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54707: LD_ADDR_VAR 0 30
54711: PUSH
54712: LD_INT 4
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 4
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 5
54734: PUSH
54735: LD_INT 4
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 5
54744: PUSH
54745: LD_INT 5
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 4
54754: PUSH
54755: LD_INT 5
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 5
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: LD_INT 5
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 4
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 4
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 4
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 4
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 4
54942: NEG
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 5
54953: NEG
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 5
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 5
54976: NEG
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 3
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 4
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 4
55095: NEG
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 4
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 5
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 4
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: LD_INT 4
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 5
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 3
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 5
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55254: LD_ADDR_VAR 0 31
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 4
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 4
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 5
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 5
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 4
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 5
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 3
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 4
55410: NEG
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: NEG
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 4
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 4
55468: NEG
55469: PUSH
55470: LD_INT 5
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: LD_INT 4
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 3
55492: NEG
55493: PUSH
55494: LD_INT 3
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 4
55504: NEG
55505: PUSH
55506: LD_INT 3
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 5
55516: NEG
55517: PUSH
55518: LD_INT 4
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 5
55528: NEG
55529: PUSH
55530: LD_INT 5
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 3
55540: NEG
55541: PUSH
55542: LD_INT 5
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 5
55552: NEG
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 3
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 4
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: LD_INT 4
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55804: LD_ADDR_VAR 0 32
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 4
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 5
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 5
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 5
55890: NEG
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: LD_INT 4
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: LD_INT 3
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 4
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 4
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 4
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 5
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 4
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 5
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 4
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 5
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: LD_INT 5
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: LD_INT 4
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 5
56286: PUSH
56287: LD_INT 3
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 3
56296: PUSH
56297: LD_INT 5
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56351: LD_ADDR_VAR 0 33
56355: PUSH
56356: LD_INT 4
56358: NEG
56359: PUSH
56360: LD_INT 4
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: LD_INT 5
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 4
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 4
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 5
56418: NEG
56419: PUSH
56420: LD_INT 4
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 5
56430: NEG
56431: PUSH
56432: LD_INT 5
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: LD_INT 5
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: NEG
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 4
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 4
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 4
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 5
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 4
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 5
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 3
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 4
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 4
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 3
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 5
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56889: LD_ADDR_VAR 0 34
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 5
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 4
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 0
56940: PUSH
56941: LD_INT 3
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 4
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 5
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 5
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 4
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 4
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 5
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 5
57121: PUSH
57122: LD_INT 5
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 4
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 4
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 3
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 5
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 5
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 4
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 4
57319: NEG
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 5
57330: NEG
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 5
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 5
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// end ; end ;
57421: GO 57424
57423: POP
// case btype of b_depot , b_warehouse :
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 0
57431: DOUBLE
57432: EQUAL
57433: IFTRUE 57443
57435: LD_INT 1
57437: DOUBLE
57438: EQUAL
57439: IFTRUE 57443
57441: GO 57644
57443: POP
// case nation of nation_american :
57444: LD_VAR 0 5
57448: PUSH
57449: LD_INT 1
57451: DOUBLE
57452: EQUAL
57453: IFTRUE 57457
57455: GO 57513
57457: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57458: LD_ADDR_VAR 0 9
57462: PUSH
57463: LD_VAR 0 11
57467: PUSH
57468: LD_VAR 0 12
57472: PUSH
57473: LD_VAR 0 13
57477: PUSH
57478: LD_VAR 0 14
57482: PUSH
57483: LD_VAR 0 15
57487: PUSH
57488: LD_VAR 0 16
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: PUSH
57501: LD_VAR 0 4
57505: PUSH
57506: LD_INT 1
57508: PLUS
57509: ARRAY
57510: ST_TO_ADDR
57511: GO 57642
57513: LD_INT 2
57515: DOUBLE
57516: EQUAL
57517: IFTRUE 57521
57519: GO 57577
57521: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57522: LD_ADDR_VAR 0 9
57526: PUSH
57527: LD_VAR 0 17
57531: PUSH
57532: LD_VAR 0 18
57536: PUSH
57537: LD_VAR 0 19
57541: PUSH
57542: LD_VAR 0 20
57546: PUSH
57547: LD_VAR 0 21
57551: PUSH
57552: LD_VAR 0 22
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: PUSH
57565: LD_VAR 0 4
57569: PUSH
57570: LD_INT 1
57572: PLUS
57573: ARRAY
57574: ST_TO_ADDR
57575: GO 57642
57577: LD_INT 3
57579: DOUBLE
57580: EQUAL
57581: IFTRUE 57585
57583: GO 57641
57585: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57586: LD_ADDR_VAR 0 9
57590: PUSH
57591: LD_VAR 0 23
57595: PUSH
57596: LD_VAR 0 24
57600: PUSH
57601: LD_VAR 0 25
57605: PUSH
57606: LD_VAR 0 26
57610: PUSH
57611: LD_VAR 0 27
57615: PUSH
57616: LD_VAR 0 28
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: PUSH
57629: LD_VAR 0 4
57633: PUSH
57634: LD_INT 1
57636: PLUS
57637: ARRAY
57638: ST_TO_ADDR
57639: GO 57642
57641: POP
57642: GO 58197
57644: LD_INT 2
57646: DOUBLE
57647: EQUAL
57648: IFTRUE 57658
57650: LD_INT 3
57652: DOUBLE
57653: EQUAL
57654: IFTRUE 57658
57656: GO 57714
57658: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57659: LD_ADDR_VAR 0 9
57663: PUSH
57664: LD_VAR 0 29
57668: PUSH
57669: LD_VAR 0 30
57673: PUSH
57674: LD_VAR 0 31
57678: PUSH
57679: LD_VAR 0 32
57683: PUSH
57684: LD_VAR 0 33
57688: PUSH
57689: LD_VAR 0 34
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: PUSH
57702: LD_VAR 0 4
57706: PUSH
57707: LD_INT 1
57709: PLUS
57710: ARRAY
57711: ST_TO_ADDR
57712: GO 58197
57714: LD_INT 16
57716: DOUBLE
57717: EQUAL
57718: IFTRUE 57776
57720: LD_INT 17
57722: DOUBLE
57723: EQUAL
57724: IFTRUE 57776
57726: LD_INT 18
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57776
57732: LD_INT 19
57734: DOUBLE
57735: EQUAL
57736: IFTRUE 57776
57738: LD_INT 22
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57776
57744: LD_INT 20
57746: DOUBLE
57747: EQUAL
57748: IFTRUE 57776
57750: LD_INT 21
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57776
57756: LD_INT 23
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57776
57762: LD_INT 24
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57776
57768: LD_INT 25
57770: DOUBLE
57771: EQUAL
57772: IFTRUE 57776
57774: GO 57832
57776: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57777: LD_ADDR_VAR 0 9
57781: PUSH
57782: LD_VAR 0 35
57786: PUSH
57787: LD_VAR 0 36
57791: PUSH
57792: LD_VAR 0 37
57796: PUSH
57797: LD_VAR 0 38
57801: PUSH
57802: LD_VAR 0 39
57806: PUSH
57807: LD_VAR 0 40
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 4
57824: PUSH
57825: LD_INT 1
57827: PLUS
57828: ARRAY
57829: ST_TO_ADDR
57830: GO 58197
57832: LD_INT 6
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57888
57838: LD_INT 7
57840: DOUBLE
57841: EQUAL
57842: IFTRUE 57888
57844: LD_INT 8
57846: DOUBLE
57847: EQUAL
57848: IFTRUE 57888
57850: LD_INT 13
57852: DOUBLE
57853: EQUAL
57854: IFTRUE 57888
57856: LD_INT 12
57858: DOUBLE
57859: EQUAL
57860: IFTRUE 57888
57862: LD_INT 15
57864: DOUBLE
57865: EQUAL
57866: IFTRUE 57888
57868: LD_INT 11
57870: DOUBLE
57871: EQUAL
57872: IFTRUE 57888
57874: LD_INT 14
57876: DOUBLE
57877: EQUAL
57878: IFTRUE 57888
57880: LD_INT 10
57882: DOUBLE
57883: EQUAL
57884: IFTRUE 57888
57886: GO 57944
57888: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57889: LD_ADDR_VAR 0 9
57893: PUSH
57894: LD_VAR 0 41
57898: PUSH
57899: LD_VAR 0 42
57903: PUSH
57904: LD_VAR 0 43
57908: PUSH
57909: LD_VAR 0 44
57913: PUSH
57914: LD_VAR 0 45
57918: PUSH
57919: LD_VAR 0 46
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: PUSH
57932: LD_VAR 0 4
57936: PUSH
57937: LD_INT 1
57939: PLUS
57940: ARRAY
57941: ST_TO_ADDR
57942: GO 58197
57944: LD_INT 36
57946: DOUBLE
57947: EQUAL
57948: IFTRUE 57952
57950: GO 58008
57952: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57953: LD_ADDR_VAR 0 9
57957: PUSH
57958: LD_VAR 0 47
57962: PUSH
57963: LD_VAR 0 48
57967: PUSH
57968: LD_VAR 0 49
57972: PUSH
57973: LD_VAR 0 50
57977: PUSH
57978: LD_VAR 0 51
57982: PUSH
57983: LD_VAR 0 52
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 4
58000: PUSH
58001: LD_INT 1
58003: PLUS
58004: ARRAY
58005: ST_TO_ADDR
58006: GO 58197
58008: LD_INT 4
58010: DOUBLE
58011: EQUAL
58012: IFTRUE 58034
58014: LD_INT 5
58016: DOUBLE
58017: EQUAL
58018: IFTRUE 58034
58020: LD_INT 34
58022: DOUBLE
58023: EQUAL
58024: IFTRUE 58034
58026: LD_INT 37
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58034
58032: GO 58090
58034: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58035: LD_ADDR_VAR 0 9
58039: PUSH
58040: LD_VAR 0 53
58044: PUSH
58045: LD_VAR 0 54
58049: PUSH
58050: LD_VAR 0 55
58054: PUSH
58055: LD_VAR 0 56
58059: PUSH
58060: LD_VAR 0 57
58064: PUSH
58065: LD_VAR 0 58
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: PUSH
58078: LD_VAR 0 4
58082: PUSH
58083: LD_INT 1
58085: PLUS
58086: ARRAY
58087: ST_TO_ADDR
58088: GO 58197
58090: LD_INT 31
58092: DOUBLE
58093: EQUAL
58094: IFTRUE 58140
58096: LD_INT 32
58098: DOUBLE
58099: EQUAL
58100: IFTRUE 58140
58102: LD_INT 33
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58140
58108: LD_INT 27
58110: DOUBLE
58111: EQUAL
58112: IFTRUE 58140
58114: LD_INT 26
58116: DOUBLE
58117: EQUAL
58118: IFTRUE 58140
58120: LD_INT 28
58122: DOUBLE
58123: EQUAL
58124: IFTRUE 58140
58126: LD_INT 29
58128: DOUBLE
58129: EQUAL
58130: IFTRUE 58140
58132: LD_INT 30
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58140
58138: GO 58196
58140: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58141: LD_ADDR_VAR 0 9
58145: PUSH
58146: LD_VAR 0 59
58150: PUSH
58151: LD_VAR 0 60
58155: PUSH
58156: LD_VAR 0 61
58160: PUSH
58161: LD_VAR 0 62
58165: PUSH
58166: LD_VAR 0 63
58170: PUSH
58171: LD_VAR 0 64
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: PUSH
58184: LD_VAR 0 4
58188: PUSH
58189: LD_INT 1
58191: PLUS
58192: ARRAY
58193: ST_TO_ADDR
58194: GO 58197
58196: POP
// temp_list2 = [ ] ;
58197: LD_ADDR_VAR 0 10
58201: PUSH
58202: EMPTY
58203: ST_TO_ADDR
// for i in temp_list do
58204: LD_ADDR_VAR 0 8
58208: PUSH
58209: LD_VAR 0 9
58213: PUSH
58214: FOR_IN
58215: IFFALSE 58267
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58217: LD_ADDR_VAR 0 10
58221: PUSH
58222: LD_VAR 0 10
58226: PUSH
58227: LD_VAR 0 8
58231: PUSH
58232: LD_INT 1
58234: ARRAY
58235: PUSH
58236: LD_VAR 0 2
58240: PLUS
58241: PUSH
58242: LD_VAR 0 8
58246: PUSH
58247: LD_INT 2
58249: ARRAY
58250: PUSH
58251: LD_VAR 0 3
58255: PLUS
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: ADD
58264: ST_TO_ADDR
58265: GO 58214
58267: POP
58268: POP
// result = temp_list2 ;
58269: LD_ADDR_VAR 0 7
58273: PUSH
58274: LD_VAR 0 10
58278: ST_TO_ADDR
// end ;
58279: LD_VAR 0 7
58283: RET
// export function EnemyInRange ( unit , dist ) ; begin
58284: LD_INT 0
58286: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58287: LD_ADDR_VAR 0 3
58291: PUSH
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL_OW 255
58301: PPUSH
58302: LD_VAR 0 1
58306: PPUSH
58307: CALL_OW 250
58311: PPUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 251
58321: PPUSH
58322: LD_VAR 0 2
58326: PPUSH
58327: CALL 31657 0 4
58331: PUSH
58332: LD_INT 4
58334: ARRAY
58335: ST_TO_ADDR
// end ;
58336: LD_VAR 0 3
58340: RET
// export function PlayerSeeMe ( unit ) ; begin
58341: LD_INT 0
58343: PPUSH
// result := See ( your_side , unit ) ;
58344: LD_ADDR_VAR 0 2
58348: PUSH
58349: LD_OWVAR 2
58353: PPUSH
58354: LD_VAR 0 1
58358: PPUSH
58359: CALL_OW 292
58363: ST_TO_ADDR
// end ;
58364: LD_VAR 0 2
58368: RET
// export function ReverseDir ( unit ) ; begin
58369: LD_INT 0
58371: PPUSH
// if not unit then
58372: LD_VAR 0 1
58376: NOT
58377: IFFALSE 58381
// exit ;
58379: GO 58404
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58381: LD_ADDR_VAR 0 2
58385: PUSH
58386: LD_VAR 0 1
58390: PPUSH
58391: CALL_OW 254
58395: PUSH
58396: LD_INT 3
58398: PLUS
58399: PUSH
58400: LD_INT 6
58402: MOD
58403: ST_TO_ADDR
// end ;
58404: LD_VAR 0 2
58408: RET
// export function ReverseArray ( array ) ; var i ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
// if not array then
58413: LD_VAR 0 1
58417: NOT
58418: IFFALSE 58422
// exit ;
58420: GO 58477
// result := [ ] ;
58422: LD_ADDR_VAR 0 2
58426: PUSH
58427: EMPTY
58428: ST_TO_ADDR
// for i := array downto 1 do
58429: LD_ADDR_VAR 0 3
58433: PUSH
58434: DOUBLE
58435: LD_VAR 0 1
58439: INC
58440: ST_TO_ADDR
58441: LD_INT 1
58443: PUSH
58444: FOR_DOWNTO
58445: IFFALSE 58475
// result := Join ( result , array [ i ] ) ;
58447: LD_ADDR_VAR 0 2
58451: PUSH
58452: LD_VAR 0 2
58456: PPUSH
58457: LD_VAR 0 1
58461: PUSH
58462: LD_VAR 0 3
58466: ARRAY
58467: PPUSH
58468: CALL 63122 0 2
58472: ST_TO_ADDR
58473: GO 58444
58475: POP
58476: POP
// end ;
58477: LD_VAR 0 2
58481: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58482: LD_INT 0
58484: PPUSH
58485: PPUSH
58486: PPUSH
58487: PPUSH
58488: PPUSH
58489: PPUSH
// if not unit or not hexes then
58490: LD_VAR 0 1
58494: NOT
58495: PUSH
58496: LD_VAR 0 2
58500: NOT
58501: OR
58502: IFFALSE 58506
// exit ;
58504: GO 58629
// dist := 9999 ;
58506: LD_ADDR_VAR 0 5
58510: PUSH
58511: LD_INT 9999
58513: ST_TO_ADDR
// for i = 1 to hexes do
58514: LD_ADDR_VAR 0 4
58518: PUSH
58519: DOUBLE
58520: LD_INT 1
58522: DEC
58523: ST_TO_ADDR
58524: LD_VAR 0 2
58528: PUSH
58529: FOR_TO
58530: IFFALSE 58617
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58532: LD_ADDR_VAR 0 6
58536: PUSH
58537: LD_VAR 0 1
58541: PPUSH
58542: LD_VAR 0 2
58546: PUSH
58547: LD_VAR 0 4
58551: ARRAY
58552: PUSH
58553: LD_INT 1
58555: ARRAY
58556: PPUSH
58557: LD_VAR 0 2
58561: PUSH
58562: LD_VAR 0 4
58566: ARRAY
58567: PUSH
58568: LD_INT 2
58570: ARRAY
58571: PPUSH
58572: CALL_OW 297
58576: ST_TO_ADDR
// if tdist < dist then
58577: LD_VAR 0 6
58581: PUSH
58582: LD_VAR 0 5
58586: LESS
58587: IFFALSE 58615
// begin hex := hexes [ i ] ;
58589: LD_ADDR_VAR 0 8
58593: PUSH
58594: LD_VAR 0 2
58598: PUSH
58599: LD_VAR 0 4
58603: ARRAY
58604: ST_TO_ADDR
// dist := tdist ;
58605: LD_ADDR_VAR 0 5
58609: PUSH
58610: LD_VAR 0 6
58614: ST_TO_ADDR
// end ; end ;
58615: GO 58529
58617: POP
58618: POP
// result := hex ;
58619: LD_ADDR_VAR 0 3
58623: PUSH
58624: LD_VAR 0 8
58628: ST_TO_ADDR
// end ;
58629: LD_VAR 0 3
58633: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58634: LD_INT 0
58636: PPUSH
58637: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58638: LD_VAR 0 1
58642: NOT
58643: PUSH
58644: LD_VAR 0 1
58648: PUSH
58649: LD_INT 21
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 23
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PPUSH
58673: CALL_OW 69
58677: IN
58678: NOT
58679: OR
58680: IFFALSE 58684
// exit ;
58682: GO 58731
// for i = 1 to 3 do
58684: LD_ADDR_VAR 0 3
58688: PUSH
58689: DOUBLE
58690: LD_INT 1
58692: DEC
58693: ST_TO_ADDR
58694: LD_INT 3
58696: PUSH
58697: FOR_TO
58698: IFFALSE 58729
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58700: LD_VAR 0 1
58704: PPUSH
58705: CALL_OW 250
58709: PPUSH
58710: LD_VAR 0 1
58714: PPUSH
58715: CALL_OW 251
58719: PPUSH
58720: LD_INT 1
58722: PPUSH
58723: CALL_OW 453
58727: GO 58697
58729: POP
58730: POP
// end ;
58731: LD_VAR 0 2
58735: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58736: LD_INT 0
58738: PPUSH
58739: PPUSH
58740: PPUSH
58741: PPUSH
58742: PPUSH
58743: PPUSH
// if not unit or not enemy_unit then
58744: LD_VAR 0 1
58748: NOT
58749: PUSH
58750: LD_VAR 0 2
58754: NOT
58755: OR
58756: IFFALSE 58760
// exit ;
58758: GO 59227
// if GetLives ( i ) < 250 then
58760: LD_VAR 0 4
58764: PPUSH
58765: CALL_OW 256
58769: PUSH
58770: LD_INT 250
58772: LESS
58773: IFFALSE 58786
// begin ComAutodestruct ( i ) ;
58775: LD_VAR 0 4
58779: PPUSH
58780: CALL 58634 0 1
// exit ;
58784: GO 59227
// end ; x := GetX ( enemy_unit ) ;
58786: LD_ADDR_VAR 0 7
58790: PUSH
58791: LD_VAR 0 2
58795: PPUSH
58796: CALL_OW 250
58800: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58801: LD_ADDR_VAR 0 8
58805: PUSH
58806: LD_VAR 0 2
58810: PPUSH
58811: CALL_OW 251
58815: ST_TO_ADDR
// if not x or not y then
58816: LD_VAR 0 7
58820: NOT
58821: PUSH
58822: LD_VAR 0 8
58826: NOT
58827: OR
58828: IFFALSE 58832
// exit ;
58830: GO 59227
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58832: LD_ADDR_VAR 0 6
58836: PUSH
58837: LD_VAR 0 7
58841: PPUSH
58842: LD_INT 0
58844: PPUSH
58845: LD_INT 4
58847: PPUSH
58848: CALL_OW 272
58852: PUSH
58853: LD_VAR 0 8
58857: PPUSH
58858: LD_INT 0
58860: PPUSH
58861: LD_INT 4
58863: PPUSH
58864: CALL_OW 273
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_VAR 0 7
58877: PPUSH
58878: LD_INT 1
58880: PPUSH
58881: LD_INT 4
58883: PPUSH
58884: CALL_OW 272
58888: PUSH
58889: LD_VAR 0 8
58893: PPUSH
58894: LD_INT 1
58896: PPUSH
58897: LD_INT 4
58899: PPUSH
58900: CALL_OW 273
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_VAR 0 7
58913: PPUSH
58914: LD_INT 2
58916: PPUSH
58917: LD_INT 4
58919: PPUSH
58920: CALL_OW 272
58924: PUSH
58925: LD_VAR 0 8
58929: PPUSH
58930: LD_INT 2
58932: PPUSH
58933: LD_INT 4
58935: PPUSH
58936: CALL_OW 273
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_VAR 0 7
58949: PPUSH
58950: LD_INT 3
58952: PPUSH
58953: LD_INT 4
58955: PPUSH
58956: CALL_OW 272
58960: PUSH
58961: LD_VAR 0 8
58965: PPUSH
58966: LD_INT 3
58968: PPUSH
58969: LD_INT 4
58971: PPUSH
58972: CALL_OW 273
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_VAR 0 7
58985: PPUSH
58986: LD_INT 4
58988: PPUSH
58989: LD_INT 4
58991: PPUSH
58992: CALL_OW 272
58996: PUSH
58997: LD_VAR 0 8
59001: PPUSH
59002: LD_INT 4
59004: PPUSH
59005: LD_INT 4
59007: PPUSH
59008: CALL_OW 273
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_VAR 0 7
59021: PPUSH
59022: LD_INT 5
59024: PPUSH
59025: LD_INT 4
59027: PPUSH
59028: CALL_OW 272
59032: PUSH
59033: LD_VAR 0 8
59037: PPUSH
59038: LD_INT 5
59040: PPUSH
59041: LD_INT 4
59043: PPUSH
59044: CALL_OW 273
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// for i = tmp downto 1 do
59061: LD_ADDR_VAR 0 4
59065: PUSH
59066: DOUBLE
59067: LD_VAR 0 6
59071: INC
59072: ST_TO_ADDR
59073: LD_INT 1
59075: PUSH
59076: FOR_DOWNTO
59077: IFFALSE 59178
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59079: LD_VAR 0 6
59083: PUSH
59084: LD_VAR 0 4
59088: ARRAY
59089: PUSH
59090: LD_INT 1
59092: ARRAY
59093: PPUSH
59094: LD_VAR 0 6
59098: PUSH
59099: LD_VAR 0 4
59103: ARRAY
59104: PUSH
59105: LD_INT 2
59107: ARRAY
59108: PPUSH
59109: CALL_OW 488
59113: NOT
59114: PUSH
59115: LD_VAR 0 6
59119: PUSH
59120: LD_VAR 0 4
59124: ARRAY
59125: PUSH
59126: LD_INT 1
59128: ARRAY
59129: PPUSH
59130: LD_VAR 0 6
59134: PUSH
59135: LD_VAR 0 4
59139: ARRAY
59140: PUSH
59141: LD_INT 2
59143: ARRAY
59144: PPUSH
59145: CALL_OW 428
59149: PUSH
59150: LD_INT 0
59152: NONEQUAL
59153: OR
59154: IFFALSE 59176
// tmp := Delete ( tmp , i ) ;
59156: LD_ADDR_VAR 0 6
59160: PUSH
59161: LD_VAR 0 6
59165: PPUSH
59166: LD_VAR 0 4
59170: PPUSH
59171: CALL_OW 3
59175: ST_TO_ADDR
59176: GO 59076
59178: POP
59179: POP
// j := GetClosestHex ( unit , tmp ) ;
59180: LD_ADDR_VAR 0 5
59184: PUSH
59185: LD_VAR 0 1
59189: PPUSH
59190: LD_VAR 0 6
59194: PPUSH
59195: CALL 58482 0 2
59199: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59200: LD_VAR 0 1
59204: PPUSH
59205: LD_VAR 0 5
59209: PUSH
59210: LD_INT 1
59212: ARRAY
59213: PPUSH
59214: LD_VAR 0 5
59218: PUSH
59219: LD_INT 2
59221: ARRAY
59222: PPUSH
59223: CALL_OW 111
// end ;
59227: LD_VAR 0 3
59231: RET
// export function PrepareApemanSoldier ( ) ; begin
59232: LD_INT 0
59234: PPUSH
// uc_nation := 0 ;
59235: LD_ADDR_OWVAR 21
59239: PUSH
59240: LD_INT 0
59242: ST_TO_ADDR
// hc_sex := sex_male ;
59243: LD_ADDR_OWVAR 27
59247: PUSH
59248: LD_INT 1
59250: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59251: LD_ADDR_OWVAR 28
59255: PUSH
59256: LD_INT 15
59258: ST_TO_ADDR
// hc_gallery :=  ;
59259: LD_ADDR_OWVAR 33
59263: PUSH
59264: LD_STRING 
59266: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59267: LD_ADDR_OWVAR 31
59271: PUSH
59272: LD_INT 0
59274: PPUSH
59275: LD_INT 3
59277: PPUSH
59278: CALL_OW 12
59282: PUSH
59283: LD_INT 0
59285: PPUSH
59286: LD_INT 3
59288: PPUSH
59289: CALL_OW 12
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: ST_TO_ADDR
// end ;
59306: LD_VAR 0 1
59310: RET
// export function PrepareApemanEngineer ( ) ; begin
59311: LD_INT 0
59313: PPUSH
// uc_nation := 0 ;
59314: LD_ADDR_OWVAR 21
59318: PUSH
59319: LD_INT 0
59321: ST_TO_ADDR
// hc_sex := sex_male ;
59322: LD_ADDR_OWVAR 27
59326: PUSH
59327: LD_INT 1
59329: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59330: LD_ADDR_OWVAR 28
59334: PUSH
59335: LD_INT 16
59337: ST_TO_ADDR
// hc_gallery :=  ;
59338: LD_ADDR_OWVAR 33
59342: PUSH
59343: LD_STRING 
59345: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59346: LD_ADDR_OWVAR 31
59350: PUSH
59351: LD_INT 0
59353: PPUSH
59354: LD_INT 3
59356: PPUSH
59357: CALL_OW 12
59361: PUSH
59362: LD_INT 0
59364: PPUSH
59365: LD_INT 3
59367: PPUSH
59368: CALL_OW 12
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// end ;
59385: LD_VAR 0 1
59389: RET
// export function PrepareApeman ( agressivity ) ; begin
59390: LD_INT 0
59392: PPUSH
// uc_side := 0 ;
59393: LD_ADDR_OWVAR 20
59397: PUSH
59398: LD_INT 0
59400: ST_TO_ADDR
// uc_nation := 0 ;
59401: LD_ADDR_OWVAR 21
59405: PUSH
59406: LD_INT 0
59408: ST_TO_ADDR
// hc_sex := sex_male ;
59409: LD_ADDR_OWVAR 27
59413: PUSH
59414: LD_INT 1
59416: ST_TO_ADDR
// hc_class := class_apeman ;
59417: LD_ADDR_OWVAR 28
59421: PUSH
59422: LD_INT 12
59424: ST_TO_ADDR
// hc_gallery :=  ;
59425: LD_ADDR_OWVAR 33
59429: PUSH
59430: LD_STRING 
59432: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59433: LD_ADDR_OWVAR 35
59437: PUSH
59438: LD_VAR 0 1
59442: NEG
59443: PPUSH
59444: LD_VAR 0 1
59448: PPUSH
59449: CALL_OW 12
59453: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59454: LD_ADDR_OWVAR 31
59458: PUSH
59459: LD_INT 0
59461: PPUSH
59462: LD_INT 3
59464: PPUSH
59465: CALL_OW 12
59469: PUSH
59470: LD_INT 0
59472: PPUSH
59473: LD_INT 3
59475: PPUSH
59476: CALL_OW 12
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: ST_TO_ADDR
// end ;
59493: LD_VAR 0 2
59497: RET
// export function PrepareTiger ( agressivity ) ; begin
59498: LD_INT 0
59500: PPUSH
// uc_side := 0 ;
59501: LD_ADDR_OWVAR 20
59505: PUSH
59506: LD_INT 0
59508: ST_TO_ADDR
// uc_nation := 0 ;
59509: LD_ADDR_OWVAR 21
59513: PUSH
59514: LD_INT 0
59516: ST_TO_ADDR
// hc_class := class_tiger ;
59517: LD_ADDR_OWVAR 28
59521: PUSH
59522: LD_INT 14
59524: ST_TO_ADDR
// hc_gallery :=  ;
59525: LD_ADDR_OWVAR 33
59529: PUSH
59530: LD_STRING 
59532: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59533: LD_ADDR_OWVAR 35
59537: PUSH
59538: LD_VAR 0 1
59542: NEG
59543: PPUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL_OW 12
59553: ST_TO_ADDR
// end ;
59554: LD_VAR 0 2
59558: RET
// export function PrepareEnchidna ( ) ; begin
59559: LD_INT 0
59561: PPUSH
// uc_side := 0 ;
59562: LD_ADDR_OWVAR 20
59566: PUSH
59567: LD_INT 0
59569: ST_TO_ADDR
// uc_nation := 0 ;
59570: LD_ADDR_OWVAR 21
59574: PUSH
59575: LD_INT 0
59577: ST_TO_ADDR
// hc_class := class_baggie ;
59578: LD_ADDR_OWVAR 28
59582: PUSH
59583: LD_INT 13
59585: ST_TO_ADDR
// hc_gallery :=  ;
59586: LD_ADDR_OWVAR 33
59590: PUSH
59591: LD_STRING 
59593: ST_TO_ADDR
// end ;
59594: LD_VAR 0 1
59598: RET
// export function PrepareFrog ( ) ; begin
59599: LD_INT 0
59601: PPUSH
// uc_side := 0 ;
59602: LD_ADDR_OWVAR 20
59606: PUSH
59607: LD_INT 0
59609: ST_TO_ADDR
// uc_nation := 0 ;
59610: LD_ADDR_OWVAR 21
59614: PUSH
59615: LD_INT 0
59617: ST_TO_ADDR
// hc_class := class_frog ;
59618: LD_ADDR_OWVAR 28
59622: PUSH
59623: LD_INT 19
59625: ST_TO_ADDR
// hc_gallery :=  ;
59626: LD_ADDR_OWVAR 33
59630: PUSH
59631: LD_STRING 
59633: ST_TO_ADDR
// end ;
59634: LD_VAR 0 1
59638: RET
// export function PrepareFish ( ) ; begin
59639: LD_INT 0
59641: PPUSH
// uc_side := 0 ;
59642: LD_ADDR_OWVAR 20
59646: PUSH
59647: LD_INT 0
59649: ST_TO_ADDR
// uc_nation := 0 ;
59650: LD_ADDR_OWVAR 21
59654: PUSH
59655: LD_INT 0
59657: ST_TO_ADDR
// hc_class := class_fish ;
59658: LD_ADDR_OWVAR 28
59662: PUSH
59663: LD_INT 20
59665: ST_TO_ADDR
// hc_gallery :=  ;
59666: LD_ADDR_OWVAR 33
59670: PUSH
59671: LD_STRING 
59673: ST_TO_ADDR
// end ;
59674: LD_VAR 0 1
59678: RET
// export function PrepareBird ( ) ; begin
59679: LD_INT 0
59681: PPUSH
// uc_side := 0 ;
59682: LD_ADDR_OWVAR 20
59686: PUSH
59687: LD_INT 0
59689: ST_TO_ADDR
// uc_nation := 0 ;
59690: LD_ADDR_OWVAR 21
59694: PUSH
59695: LD_INT 0
59697: ST_TO_ADDR
// hc_class := class_phororhacos ;
59698: LD_ADDR_OWVAR 28
59702: PUSH
59703: LD_INT 18
59705: ST_TO_ADDR
// hc_gallery :=  ;
59706: LD_ADDR_OWVAR 33
59710: PUSH
59711: LD_STRING 
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 1
59718: RET
// export function PrepareHorse ( ) ; begin
59719: LD_INT 0
59721: PPUSH
// uc_side := 0 ;
59722: LD_ADDR_OWVAR 20
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// uc_nation := 0 ;
59730: LD_ADDR_OWVAR 21
59734: PUSH
59735: LD_INT 0
59737: ST_TO_ADDR
// hc_class := class_horse ;
59738: LD_ADDR_OWVAR 28
59742: PUSH
59743: LD_INT 21
59745: ST_TO_ADDR
// hc_gallery :=  ;
59746: LD_ADDR_OWVAR 33
59750: PUSH
59751: LD_STRING 
59753: ST_TO_ADDR
// end ;
59754: LD_VAR 0 1
59758: RET
// export function PrepareMastodont ( ) ; begin
59759: LD_INT 0
59761: PPUSH
// uc_side := 0 ;
59762: LD_ADDR_OWVAR 20
59766: PUSH
59767: LD_INT 0
59769: ST_TO_ADDR
// uc_nation := 0 ;
59770: LD_ADDR_OWVAR 21
59774: PUSH
59775: LD_INT 0
59777: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59778: LD_ADDR_OWVAR 37
59782: PUSH
59783: LD_INT 31
59785: ST_TO_ADDR
// vc_control := control_rider ;
59786: LD_ADDR_OWVAR 38
59790: PUSH
59791: LD_INT 4
59793: ST_TO_ADDR
// end ;
59794: LD_VAR 0 1
59798: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59799: LD_INT 0
59801: PPUSH
59802: PPUSH
59803: PPUSH
// uc_side = 0 ;
59804: LD_ADDR_OWVAR 20
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
// uc_nation = 0 ;
59812: LD_ADDR_OWVAR 21
59816: PUSH
59817: LD_INT 0
59819: ST_TO_ADDR
// InitHc_All ( ) ;
59820: CALL_OW 584
// InitVc ;
59824: CALL_OW 20
// if mastodonts then
59828: LD_VAR 0 6
59832: IFFALSE 59899
// for i = 1 to mastodonts do
59834: LD_ADDR_VAR 0 11
59838: PUSH
59839: DOUBLE
59840: LD_INT 1
59842: DEC
59843: ST_TO_ADDR
59844: LD_VAR 0 6
59848: PUSH
59849: FOR_TO
59850: IFFALSE 59897
// begin vc_chassis := 31 ;
59852: LD_ADDR_OWVAR 37
59856: PUSH
59857: LD_INT 31
59859: ST_TO_ADDR
// vc_control := control_rider ;
59860: LD_ADDR_OWVAR 38
59864: PUSH
59865: LD_INT 4
59867: ST_TO_ADDR
// animal := CreateVehicle ;
59868: LD_ADDR_VAR 0 12
59872: PUSH
59873: CALL_OW 45
59877: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59878: LD_VAR 0 12
59882: PPUSH
59883: LD_VAR 0 8
59887: PPUSH
59888: LD_INT 0
59890: PPUSH
59891: CALL 62027 0 3
// end ;
59895: GO 59849
59897: POP
59898: POP
// if horses then
59899: LD_VAR 0 5
59903: IFFALSE 59970
// for i = 1 to horses do
59905: LD_ADDR_VAR 0 11
59909: PUSH
59910: DOUBLE
59911: LD_INT 1
59913: DEC
59914: ST_TO_ADDR
59915: LD_VAR 0 5
59919: PUSH
59920: FOR_TO
59921: IFFALSE 59968
// begin hc_class := 21 ;
59923: LD_ADDR_OWVAR 28
59927: PUSH
59928: LD_INT 21
59930: ST_TO_ADDR
// hc_gallery :=  ;
59931: LD_ADDR_OWVAR 33
59935: PUSH
59936: LD_STRING 
59938: ST_TO_ADDR
// animal := CreateHuman ;
59939: LD_ADDR_VAR 0 12
59943: PUSH
59944: CALL_OW 44
59948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59949: LD_VAR 0 12
59953: PPUSH
59954: LD_VAR 0 8
59958: PPUSH
59959: LD_INT 0
59961: PPUSH
59962: CALL 62027 0 3
// end ;
59966: GO 59920
59968: POP
59969: POP
// if birds then
59970: LD_VAR 0 1
59974: IFFALSE 60041
// for i = 1 to birds do
59976: LD_ADDR_VAR 0 11
59980: PUSH
59981: DOUBLE
59982: LD_INT 1
59984: DEC
59985: ST_TO_ADDR
59986: LD_VAR 0 1
59990: PUSH
59991: FOR_TO
59992: IFFALSE 60039
// begin hc_class := 18 ;
59994: LD_ADDR_OWVAR 28
59998: PUSH
59999: LD_INT 18
60001: ST_TO_ADDR
// hc_gallery =  ;
60002: LD_ADDR_OWVAR 33
60006: PUSH
60007: LD_STRING 
60009: ST_TO_ADDR
// animal := CreateHuman ;
60010: LD_ADDR_VAR 0 12
60014: PUSH
60015: CALL_OW 44
60019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60020: LD_VAR 0 12
60024: PPUSH
60025: LD_VAR 0 8
60029: PPUSH
60030: LD_INT 0
60032: PPUSH
60033: CALL 62027 0 3
// end ;
60037: GO 59991
60039: POP
60040: POP
// if tigers then
60041: LD_VAR 0 2
60045: IFFALSE 60129
// for i = 1 to tigers do
60047: LD_ADDR_VAR 0 11
60051: PUSH
60052: DOUBLE
60053: LD_INT 1
60055: DEC
60056: ST_TO_ADDR
60057: LD_VAR 0 2
60061: PUSH
60062: FOR_TO
60063: IFFALSE 60127
// begin hc_class = class_tiger ;
60065: LD_ADDR_OWVAR 28
60069: PUSH
60070: LD_INT 14
60072: ST_TO_ADDR
// hc_gallery =  ;
60073: LD_ADDR_OWVAR 33
60077: PUSH
60078: LD_STRING 
60080: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60081: LD_ADDR_OWVAR 35
60085: PUSH
60086: LD_INT 7
60088: NEG
60089: PPUSH
60090: LD_INT 7
60092: PPUSH
60093: CALL_OW 12
60097: ST_TO_ADDR
// animal := CreateHuman ;
60098: LD_ADDR_VAR 0 12
60102: PUSH
60103: CALL_OW 44
60107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60108: LD_VAR 0 12
60112: PPUSH
60113: LD_VAR 0 8
60117: PPUSH
60118: LD_INT 0
60120: PPUSH
60121: CALL 62027 0 3
// end ;
60125: GO 60062
60127: POP
60128: POP
// if apemans then
60129: LD_VAR 0 3
60133: IFFALSE 60256
// for i = 1 to apemans do
60135: LD_ADDR_VAR 0 11
60139: PUSH
60140: DOUBLE
60141: LD_INT 1
60143: DEC
60144: ST_TO_ADDR
60145: LD_VAR 0 3
60149: PUSH
60150: FOR_TO
60151: IFFALSE 60254
// begin hc_class = class_apeman ;
60153: LD_ADDR_OWVAR 28
60157: PUSH
60158: LD_INT 12
60160: ST_TO_ADDR
// hc_gallery =  ;
60161: LD_ADDR_OWVAR 33
60165: PUSH
60166: LD_STRING 
60168: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60169: LD_ADDR_OWVAR 35
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PPUSH
60178: LD_INT 2
60180: PPUSH
60181: CALL_OW 12
60185: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60186: LD_ADDR_OWVAR 31
60190: PUSH
60191: LD_INT 1
60193: PPUSH
60194: LD_INT 3
60196: PPUSH
60197: CALL_OW 12
60201: PUSH
60202: LD_INT 1
60204: PPUSH
60205: LD_INT 3
60207: PPUSH
60208: CALL_OW 12
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// animal := CreateHuman ;
60225: LD_ADDR_VAR 0 12
60229: PUSH
60230: CALL_OW 44
60234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60235: LD_VAR 0 12
60239: PPUSH
60240: LD_VAR 0 8
60244: PPUSH
60245: LD_INT 0
60247: PPUSH
60248: CALL 62027 0 3
// end ;
60252: GO 60150
60254: POP
60255: POP
// if enchidnas then
60256: LD_VAR 0 4
60260: IFFALSE 60327
// for i = 1 to enchidnas do
60262: LD_ADDR_VAR 0 11
60266: PUSH
60267: DOUBLE
60268: LD_INT 1
60270: DEC
60271: ST_TO_ADDR
60272: LD_VAR 0 4
60276: PUSH
60277: FOR_TO
60278: IFFALSE 60325
// begin hc_class = 13 ;
60280: LD_ADDR_OWVAR 28
60284: PUSH
60285: LD_INT 13
60287: ST_TO_ADDR
// hc_gallery =  ;
60288: LD_ADDR_OWVAR 33
60292: PUSH
60293: LD_STRING 
60295: ST_TO_ADDR
// animal := CreateHuman ;
60296: LD_ADDR_VAR 0 12
60300: PUSH
60301: CALL_OW 44
60305: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60306: LD_VAR 0 12
60310: PPUSH
60311: LD_VAR 0 8
60315: PPUSH
60316: LD_INT 0
60318: PPUSH
60319: CALL 62027 0 3
// end ;
60323: GO 60277
60325: POP
60326: POP
// if fishes then
60327: LD_VAR 0 7
60331: IFFALSE 60398
// for i = 1 to fishes do
60333: LD_ADDR_VAR 0 11
60337: PUSH
60338: DOUBLE
60339: LD_INT 1
60341: DEC
60342: ST_TO_ADDR
60343: LD_VAR 0 7
60347: PUSH
60348: FOR_TO
60349: IFFALSE 60396
// begin hc_class = 20 ;
60351: LD_ADDR_OWVAR 28
60355: PUSH
60356: LD_INT 20
60358: ST_TO_ADDR
// hc_gallery =  ;
60359: LD_ADDR_OWVAR 33
60363: PUSH
60364: LD_STRING 
60366: ST_TO_ADDR
// animal := CreateHuman ;
60367: LD_ADDR_VAR 0 12
60371: PUSH
60372: CALL_OW 44
60376: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60377: LD_VAR 0 12
60381: PPUSH
60382: LD_VAR 0 9
60386: PPUSH
60387: LD_INT 0
60389: PPUSH
60390: CALL 62027 0 3
// end ;
60394: GO 60348
60396: POP
60397: POP
// end ;
60398: LD_VAR 0 10
60402: RET
// export function WantHeal ( sci , unit ) ; begin
60403: LD_INT 0
60405: PPUSH
// if GetTaskList ( sci ) > 0 then
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 437
60415: PUSH
60416: LD_INT 0
60418: GREATER
60419: IFFALSE 60489
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60421: LD_VAR 0 1
60425: PPUSH
60426: CALL_OW 437
60430: PUSH
60431: LD_INT 1
60433: ARRAY
60434: PUSH
60435: LD_INT 1
60437: ARRAY
60438: PUSH
60439: LD_STRING l
60441: EQUAL
60442: PUSH
60443: LD_VAR 0 1
60447: PPUSH
60448: CALL_OW 437
60452: PUSH
60453: LD_INT 1
60455: ARRAY
60456: PUSH
60457: LD_INT 4
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 2
60465: EQUAL
60466: AND
60467: IFFALSE 60479
// result := true else
60469: LD_ADDR_VAR 0 3
60473: PUSH
60474: LD_INT 1
60476: ST_TO_ADDR
60477: GO 60487
// result := false ;
60479: LD_ADDR_VAR 0 3
60483: PUSH
60484: LD_INT 0
60486: ST_TO_ADDR
// end else
60487: GO 60497
// result := false ;
60489: LD_ADDR_VAR 0 3
60493: PUSH
60494: LD_INT 0
60496: ST_TO_ADDR
// end ;
60497: LD_VAR 0 3
60501: RET
// export function HealTarget ( sci ) ; begin
60502: LD_INT 0
60504: PPUSH
// if not sci then
60505: LD_VAR 0 1
60509: NOT
60510: IFFALSE 60514
// exit ;
60512: GO 60579
// result := 0 ;
60514: LD_ADDR_VAR 0 2
60518: PUSH
60519: LD_INT 0
60521: ST_TO_ADDR
// if GetTaskList ( sci ) then
60522: LD_VAR 0 1
60526: PPUSH
60527: CALL_OW 437
60531: IFFALSE 60579
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60533: LD_VAR 0 1
60537: PPUSH
60538: CALL_OW 437
60542: PUSH
60543: LD_INT 1
60545: ARRAY
60546: PUSH
60547: LD_INT 1
60549: ARRAY
60550: PUSH
60551: LD_STRING l
60553: EQUAL
60554: IFFALSE 60579
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60556: LD_ADDR_VAR 0 2
60560: PUSH
60561: LD_VAR 0 1
60565: PPUSH
60566: CALL_OW 437
60570: PUSH
60571: LD_INT 1
60573: ARRAY
60574: PUSH
60575: LD_INT 4
60577: ARRAY
60578: ST_TO_ADDR
// end ;
60579: LD_VAR 0 2
60583: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60584: LD_INT 0
60586: PPUSH
60587: PPUSH
60588: PPUSH
60589: PPUSH
// if not base_units then
60590: LD_VAR 0 1
60594: NOT
60595: IFFALSE 60599
// exit ;
60597: GO 60686
// result := false ;
60599: LD_ADDR_VAR 0 2
60603: PUSH
60604: LD_INT 0
60606: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60607: LD_ADDR_VAR 0 5
60611: PUSH
60612: LD_VAR 0 1
60616: PPUSH
60617: LD_INT 21
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PPUSH
60627: CALL_OW 72
60631: ST_TO_ADDR
// if not tmp then
60632: LD_VAR 0 5
60636: NOT
60637: IFFALSE 60641
// exit ;
60639: GO 60686
// for i in tmp do
60641: LD_ADDR_VAR 0 3
60645: PUSH
60646: LD_VAR 0 5
60650: PUSH
60651: FOR_IN
60652: IFFALSE 60684
// begin result := EnemyInRange ( i , 22 ) ;
60654: LD_ADDR_VAR 0 2
60658: PUSH
60659: LD_VAR 0 3
60663: PPUSH
60664: LD_INT 22
60666: PPUSH
60667: CALL 58284 0 2
60671: ST_TO_ADDR
// if result then
60672: LD_VAR 0 2
60676: IFFALSE 60682
// exit ;
60678: POP
60679: POP
60680: GO 60686
// end ;
60682: GO 60651
60684: POP
60685: POP
// end ;
60686: LD_VAR 0 2
60690: RET
// export function FilterByTag ( units , tag ) ; begin
60691: LD_INT 0
60693: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60694: LD_ADDR_VAR 0 3
60698: PUSH
60699: LD_VAR 0 1
60703: PPUSH
60704: LD_INT 120
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PPUSH
60716: CALL_OW 72
60720: ST_TO_ADDR
// end ;
60721: LD_VAR 0 3
60725: RET
// export function IsDriver ( un ) ; begin
60726: LD_INT 0
60728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60729: LD_ADDR_VAR 0 2
60733: PUSH
60734: LD_VAR 0 1
60738: PUSH
60739: LD_INT 55
60741: PUSH
60742: EMPTY
60743: LIST
60744: PPUSH
60745: CALL_OW 69
60749: IN
60750: ST_TO_ADDR
// end ;
60751: LD_VAR 0 2
60755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60756: LD_INT 0
60758: PPUSH
60759: PPUSH
// list := [ ] ;
60760: LD_ADDR_VAR 0 5
60764: PUSH
60765: EMPTY
60766: ST_TO_ADDR
// case d of 0 :
60767: LD_VAR 0 3
60771: PUSH
60772: LD_INT 0
60774: DOUBLE
60775: EQUAL
60776: IFTRUE 60780
60778: GO 60913
60780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_VAR 0 1
60790: PUSH
60791: LD_INT 4
60793: MINUS
60794: PUSH
60795: LD_VAR 0 2
60799: PUSH
60800: LD_INT 4
60802: MINUS
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: PUSH
60812: LD_VAR 0 1
60816: PUSH
60817: LD_INT 3
60819: MINUS
60820: PUSH
60821: LD_VAR 0 2
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: PUSH
60834: LD_VAR 0 1
60838: PUSH
60839: LD_INT 4
60841: PLUS
60842: PUSH
60843: LD_VAR 0 2
60847: PUSH
60848: LD_INT 4
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: PUSH
60856: LD_VAR 0 1
60860: PUSH
60861: LD_INT 3
60863: PLUS
60864: PUSH
60865: LD_VAR 0 2
60869: PUSH
60870: LD_INT 3
60872: PLUS
60873: PUSH
60874: LD_INT 5
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_VAR 0 2
60891: PUSH
60892: LD_INT 4
60894: PLUS
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: ST_TO_ADDR
// end ; 1 :
60911: GO 61611
60913: LD_INT 1
60915: DOUBLE
60916: EQUAL
60917: IFTRUE 60921
60919: GO 61054
60921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60922: LD_ADDR_VAR 0 5
60926: PUSH
60927: LD_VAR 0 1
60931: PUSH
60932: LD_VAR 0 2
60936: PUSH
60937: LD_INT 4
60939: MINUS
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: PUSH
60949: LD_VAR 0 1
60953: PUSH
60954: LD_INT 3
60956: MINUS
60957: PUSH
60958: LD_VAR 0 2
60962: PUSH
60963: LD_INT 3
60965: MINUS
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: PUSH
60975: LD_VAR 0 1
60979: PUSH
60980: LD_INT 4
60982: MINUS
60983: PUSH
60984: LD_VAR 0 2
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: LD_VAR 0 1
61001: PUSH
61002: LD_VAR 0 2
61006: PUSH
61007: LD_INT 3
61009: PLUS
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: PUSH
61019: LD_VAR 0 1
61023: PUSH
61024: LD_INT 4
61026: PLUS
61027: PUSH
61028: LD_VAR 0 2
61032: PUSH
61033: LD_INT 4
61035: PLUS
61036: PUSH
61037: LD_INT 5
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// end ; 2 :
61052: GO 61611
61054: LD_INT 2
61056: DOUBLE
61057: EQUAL
61058: IFTRUE 61062
61060: GO 61191
61062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61063: LD_ADDR_VAR 0 5
61067: PUSH
61068: LD_VAR 0 1
61072: PUSH
61073: LD_VAR 0 2
61077: PUSH
61078: LD_INT 3
61080: MINUS
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: LIST
61089: PUSH
61090: LD_VAR 0 1
61094: PUSH
61095: LD_INT 4
61097: PLUS
61098: PUSH
61099: LD_VAR 0 2
61103: PUSH
61104: LD_INT 4
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: PUSH
61112: LD_VAR 0 1
61116: PUSH
61117: LD_VAR 0 2
61121: PUSH
61122: LD_INT 4
61124: PLUS
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: PUSH
61134: LD_VAR 0 1
61138: PUSH
61139: LD_INT 3
61141: MINUS
61142: PUSH
61143: LD_VAR 0 2
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: PUSH
61156: LD_VAR 0 1
61160: PUSH
61161: LD_INT 4
61163: MINUS
61164: PUSH
61165: LD_VAR 0 2
61169: PUSH
61170: LD_INT 4
61172: MINUS
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// end ; 3 :
61189: GO 61611
61191: LD_INT 3
61193: DOUBLE
61194: EQUAL
61195: IFTRUE 61199
61197: GO 61332
61199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61200: LD_ADDR_VAR 0 5
61204: PUSH
61205: LD_VAR 0 1
61209: PUSH
61210: LD_INT 3
61212: PLUS
61213: PUSH
61214: LD_VAR 0 2
61218: PUSH
61219: LD_INT 4
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: LD_VAR 0 1
61231: PUSH
61232: LD_INT 4
61234: PLUS
61235: PUSH
61236: LD_VAR 0 2
61240: PUSH
61241: LD_INT 4
61243: PLUS
61244: PUSH
61245: LD_INT 5
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: LIST
61252: PUSH
61253: LD_VAR 0 1
61257: PUSH
61258: LD_INT 4
61260: MINUS
61261: PUSH
61262: LD_VAR 0 2
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: LD_VAR 0 1
61279: PUSH
61280: LD_VAR 0 2
61284: PUSH
61285: LD_INT 4
61287: MINUS
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: PUSH
61297: LD_VAR 0 1
61301: PUSH
61302: LD_INT 3
61304: MINUS
61305: PUSH
61306: LD_VAR 0 2
61310: PUSH
61311: LD_INT 3
61313: MINUS
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: ST_TO_ADDR
// end ; 4 :
61330: GO 61611
61332: LD_INT 4
61334: DOUBLE
61335: EQUAL
61336: IFTRUE 61340
61338: GO 61473
61340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61341: LD_ADDR_VAR 0 5
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: LD_VAR 0 2
61355: PUSH
61356: LD_INT 4
61358: PLUS
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: PUSH
61368: LD_VAR 0 1
61372: PUSH
61373: LD_INT 3
61375: PLUS
61376: PUSH
61377: LD_VAR 0 2
61381: PUSH
61382: LD_INT 3
61384: PLUS
61385: PUSH
61386: LD_INT 5
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: PUSH
61394: LD_VAR 0 1
61398: PUSH
61399: LD_INT 4
61401: PLUS
61402: PUSH
61403: LD_VAR 0 2
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: PUSH
61416: LD_VAR 0 1
61420: PUSH
61421: LD_VAR 0 2
61425: PUSH
61426: LD_INT 3
61428: MINUS
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: PUSH
61438: LD_VAR 0 1
61442: PUSH
61443: LD_INT 4
61445: MINUS
61446: PUSH
61447: LD_VAR 0 2
61451: PUSH
61452: LD_INT 4
61454: MINUS
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// end ; 5 :
61471: GO 61611
61473: LD_INT 5
61475: DOUBLE
61476: EQUAL
61477: IFTRUE 61481
61479: GO 61610
61481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61482: LD_ADDR_VAR 0 5
61486: PUSH
61487: LD_VAR 0 1
61491: PUSH
61492: LD_INT 4
61494: MINUS
61495: PUSH
61496: LD_VAR 0 2
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: LIST
61508: PUSH
61509: LD_VAR 0 1
61513: PUSH
61514: LD_VAR 0 2
61518: PUSH
61519: LD_INT 4
61521: MINUS
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: PUSH
61531: LD_VAR 0 1
61535: PUSH
61536: LD_INT 4
61538: PLUS
61539: PUSH
61540: LD_VAR 0 2
61544: PUSH
61545: LD_INT 4
61547: PLUS
61548: PUSH
61549: LD_INT 5
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: PUSH
61557: LD_VAR 0 1
61561: PUSH
61562: LD_INT 3
61564: PLUS
61565: PUSH
61566: LD_VAR 0 2
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: LIST
61578: PUSH
61579: LD_VAR 0 1
61583: PUSH
61584: LD_VAR 0 2
61588: PUSH
61589: LD_INT 3
61591: PLUS
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// end ; end ;
61608: GO 61611
61610: POP
// result := list ;
61611: LD_ADDR_VAR 0 4
61615: PUSH
61616: LD_VAR 0 5
61620: ST_TO_ADDR
// end ;
61621: LD_VAR 0 4
61625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61626: LD_INT 0
61628: PPUSH
61629: PPUSH
61630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61631: LD_VAR 0 1
61635: NOT
61636: PUSH
61637: LD_VAR 0 2
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 3
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: IN
61660: NOT
61661: OR
61662: IFFALSE 61666
// exit ;
61664: GO 61749
// tmp := [ ] ;
61666: LD_ADDR_VAR 0 5
61670: PUSH
61671: EMPTY
61672: ST_TO_ADDR
// for i in units do
61673: LD_ADDR_VAR 0 4
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: FOR_IN
61684: IFFALSE 61718
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61686: LD_ADDR_VAR 0 5
61690: PUSH
61691: LD_VAR 0 5
61695: PPUSH
61696: LD_VAR 0 4
61700: PPUSH
61701: LD_VAR 0 2
61705: PPUSH
61706: CALL_OW 259
61710: PPUSH
61711: CALL 63122 0 2
61715: ST_TO_ADDR
61716: GO 61683
61718: POP
61719: POP
// if not tmp then
61720: LD_VAR 0 5
61724: NOT
61725: IFFALSE 61729
// exit ;
61727: GO 61749
// result := SortListByListDesc ( units , tmp ) ;
61729: LD_ADDR_VAR 0 3
61733: PUSH
61734: LD_VAR 0 1
61738: PPUSH
61739: LD_VAR 0 5
61743: PPUSH
61744: CALL_OW 77
61748: ST_TO_ADDR
// end ;
61749: LD_VAR 0 3
61753: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61754: LD_INT 0
61756: PPUSH
61757: PPUSH
61758: PPUSH
// result := false ;
61759: LD_ADDR_VAR 0 3
61763: PUSH
61764: LD_INT 0
61766: ST_TO_ADDR
// if not building then
61767: LD_VAR 0 2
61771: NOT
61772: IFFALSE 61776
// exit ;
61774: GO 61914
// x := GetX ( building ) ;
61776: LD_ADDR_VAR 0 4
61780: PUSH
61781: LD_VAR 0 2
61785: PPUSH
61786: CALL_OW 250
61790: ST_TO_ADDR
// y := GetY ( building ) ;
61791: LD_ADDR_VAR 0 5
61795: PUSH
61796: LD_VAR 0 2
61800: PPUSH
61801: CALL_OW 251
61805: ST_TO_ADDR
// if not x or not y then
61806: LD_VAR 0 4
61810: NOT
61811: PUSH
61812: LD_VAR 0 5
61816: NOT
61817: OR
61818: IFFALSE 61822
// exit ;
61820: GO 61914
// if GetTaskList ( unit ) then
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 437
61831: IFFALSE 61914
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61833: LD_STRING e
61835: PUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 437
61845: PUSH
61846: LD_INT 1
61848: ARRAY
61849: PUSH
61850: LD_INT 1
61852: ARRAY
61853: EQUAL
61854: PUSH
61855: LD_VAR 0 4
61859: PUSH
61860: LD_VAR 0 1
61864: PPUSH
61865: CALL_OW 437
61869: PUSH
61870: LD_INT 1
61872: ARRAY
61873: PUSH
61874: LD_INT 2
61876: ARRAY
61877: EQUAL
61878: AND
61879: PUSH
61880: LD_VAR 0 5
61884: PUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: CALL_OW 437
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: PUSH
61899: LD_INT 3
61901: ARRAY
61902: EQUAL
61903: AND
61904: IFFALSE 61914
// result := true end ;
61906: LD_ADDR_VAR 0 3
61910: PUSH
61911: LD_INT 1
61913: ST_TO_ADDR
// end ;
61914: LD_VAR 0 3
61918: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61919: LD_INT 0
61921: PPUSH
// result := false ;
61922: LD_ADDR_VAR 0 4
61926: PUSH
61927: LD_INT 0
61929: ST_TO_ADDR
// if GetTaskList ( unit ) then
61930: LD_VAR 0 1
61934: PPUSH
61935: CALL_OW 437
61939: IFFALSE 62022
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61941: LD_STRING M
61943: PUSH
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 437
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PUSH
61958: LD_INT 1
61960: ARRAY
61961: EQUAL
61962: PUSH
61963: LD_VAR 0 2
61967: PUSH
61968: LD_VAR 0 1
61972: PPUSH
61973: CALL_OW 437
61977: PUSH
61978: LD_INT 1
61980: ARRAY
61981: PUSH
61982: LD_INT 2
61984: ARRAY
61985: EQUAL
61986: AND
61987: PUSH
61988: LD_VAR 0 3
61992: PUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 437
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: PUSH
62007: LD_INT 3
62009: ARRAY
62010: EQUAL
62011: AND
62012: IFFALSE 62022
// result := true ;
62014: LD_ADDR_VAR 0 4
62018: PUSH
62019: LD_INT 1
62021: ST_TO_ADDR
// end ; end ;
62022: LD_VAR 0 4
62026: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62027: LD_INT 0
62029: PPUSH
62030: PPUSH
62031: PPUSH
62032: PPUSH
// if not unit or not area then
62033: LD_VAR 0 1
62037: NOT
62038: PUSH
62039: LD_VAR 0 2
62043: NOT
62044: OR
62045: IFFALSE 62049
// exit ;
62047: GO 62225
// tmp := AreaToList ( area , i ) ;
62049: LD_ADDR_VAR 0 6
62053: PUSH
62054: LD_VAR 0 2
62058: PPUSH
62059: LD_VAR 0 5
62063: PPUSH
62064: CALL_OW 517
62068: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62069: LD_ADDR_VAR 0 5
62073: PUSH
62074: DOUBLE
62075: LD_INT 1
62077: DEC
62078: ST_TO_ADDR
62079: LD_VAR 0 6
62083: PUSH
62084: LD_INT 1
62086: ARRAY
62087: PUSH
62088: FOR_TO
62089: IFFALSE 62223
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62091: LD_ADDR_VAR 0 7
62095: PUSH
62096: LD_VAR 0 6
62100: PUSH
62101: LD_INT 1
62103: ARRAY
62104: PUSH
62105: LD_VAR 0 5
62109: ARRAY
62110: PUSH
62111: LD_VAR 0 6
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: PUSH
62120: LD_VAR 0 5
62124: ARRAY
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62130: LD_INT 92
62132: PUSH
62133: LD_VAR 0 7
62137: PUSH
62138: LD_INT 1
62140: ARRAY
62141: PUSH
62142: LD_VAR 0 7
62146: PUSH
62147: LD_INT 2
62149: ARRAY
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: PPUSH
62160: CALL_OW 69
62164: PUSH
62165: LD_INT 0
62167: EQUAL
62168: IFFALSE 62221
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62170: LD_VAR 0 1
62174: PPUSH
62175: LD_VAR 0 7
62179: PUSH
62180: LD_INT 1
62182: ARRAY
62183: PPUSH
62184: LD_VAR 0 7
62188: PUSH
62189: LD_INT 2
62191: ARRAY
62192: PPUSH
62193: LD_VAR 0 3
62197: PPUSH
62198: CALL_OW 48
// result := IsPlaced ( unit ) ;
62202: LD_ADDR_VAR 0 4
62206: PUSH
62207: LD_VAR 0 1
62211: PPUSH
62212: CALL_OW 305
62216: ST_TO_ADDR
// exit ;
62217: POP
62218: POP
62219: GO 62225
// end ; end ;
62221: GO 62088
62223: POP
62224: POP
// end ;
62225: LD_VAR 0 4
62229: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62230: LD_INT 0
62232: PPUSH
62233: PPUSH
62234: PPUSH
// if not side or side > 8 then
62235: LD_VAR 0 1
62239: NOT
62240: PUSH
62241: LD_VAR 0 1
62245: PUSH
62246: LD_INT 8
62248: GREATER
62249: OR
62250: IFFALSE 62254
// exit ;
62252: GO 62441
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62254: LD_ADDR_VAR 0 4
62258: PUSH
62259: LD_INT 22
62261: PUSH
62262: LD_VAR 0 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 21
62273: PUSH
62274: LD_INT 3
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PPUSH
62285: CALL_OW 69
62289: ST_TO_ADDR
// if not tmp then
62290: LD_VAR 0 4
62294: NOT
62295: IFFALSE 62299
// exit ;
62297: GO 62441
// enable_addtolog := true ;
62299: LD_ADDR_OWVAR 81
62303: PUSH
62304: LD_INT 1
62306: ST_TO_ADDR
// AddToLog ( [ ) ;
62307: LD_STRING [
62309: PPUSH
62310: CALL_OW 561
// for i in tmp do
62314: LD_ADDR_VAR 0 3
62318: PUSH
62319: LD_VAR 0 4
62323: PUSH
62324: FOR_IN
62325: IFFALSE 62432
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62327: LD_STRING [
62329: PUSH
62330: LD_VAR 0 3
62334: PPUSH
62335: CALL_OW 266
62339: STR
62340: PUSH
62341: LD_STRING , 
62343: STR
62344: PUSH
62345: LD_VAR 0 3
62349: PPUSH
62350: CALL_OW 250
62354: STR
62355: PUSH
62356: LD_STRING , 
62358: STR
62359: PUSH
62360: LD_VAR 0 3
62364: PPUSH
62365: CALL_OW 251
62369: STR
62370: PUSH
62371: LD_STRING , 
62373: STR
62374: PUSH
62375: LD_VAR 0 3
62379: PPUSH
62380: CALL_OW 254
62384: STR
62385: PUSH
62386: LD_STRING , 
62388: STR
62389: PUSH
62390: LD_VAR 0 3
62394: PPUSH
62395: LD_INT 1
62397: PPUSH
62398: CALL_OW 268
62402: STR
62403: PUSH
62404: LD_STRING , 
62406: STR
62407: PUSH
62408: LD_VAR 0 3
62412: PPUSH
62413: LD_INT 2
62415: PPUSH
62416: CALL_OW 268
62420: STR
62421: PUSH
62422: LD_STRING ],
62424: STR
62425: PPUSH
62426: CALL_OW 561
// end ;
62430: GO 62324
62432: POP
62433: POP
// AddToLog ( ]; ) ;
62434: LD_STRING ];
62436: PPUSH
62437: CALL_OW 561
// end ;
62441: LD_VAR 0 2
62445: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62446: LD_INT 0
62448: PPUSH
62449: PPUSH
62450: PPUSH
62451: PPUSH
62452: PPUSH
// if not area or not rate or not max then
62453: LD_VAR 0 1
62457: NOT
62458: PUSH
62459: LD_VAR 0 2
62463: NOT
62464: OR
62465: PUSH
62466: LD_VAR 0 4
62470: NOT
62471: OR
62472: IFFALSE 62476
// exit ;
62474: GO 62665
// while 1 do
62476: LD_INT 1
62478: IFFALSE 62665
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62480: LD_ADDR_VAR 0 9
62484: PUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: LD_INT 1
62492: PPUSH
62493: CALL_OW 287
62497: PUSH
62498: LD_INT 10
62500: MUL
62501: ST_TO_ADDR
// r := rate / 10 ;
62502: LD_ADDR_VAR 0 7
62506: PUSH
62507: LD_VAR 0 2
62511: PUSH
62512: LD_INT 10
62514: DIVREAL
62515: ST_TO_ADDR
// time := 1 1$00 ;
62516: LD_ADDR_VAR 0 8
62520: PUSH
62521: LD_INT 2100
62523: ST_TO_ADDR
// if amount < min then
62524: LD_VAR 0 9
62528: PUSH
62529: LD_VAR 0 3
62533: LESS
62534: IFFALSE 62552
// r := r * 2 else
62536: LD_ADDR_VAR 0 7
62540: PUSH
62541: LD_VAR 0 7
62545: PUSH
62546: LD_INT 2
62548: MUL
62549: ST_TO_ADDR
62550: GO 62578
// if amount > max then
62552: LD_VAR 0 9
62556: PUSH
62557: LD_VAR 0 4
62561: GREATER
62562: IFFALSE 62578
// r := r / 2 ;
62564: LD_ADDR_VAR 0 7
62568: PUSH
62569: LD_VAR 0 7
62573: PUSH
62574: LD_INT 2
62576: DIVREAL
62577: ST_TO_ADDR
// time := time / r ;
62578: LD_ADDR_VAR 0 8
62582: PUSH
62583: LD_VAR 0 8
62587: PUSH
62588: LD_VAR 0 7
62592: DIVREAL
62593: ST_TO_ADDR
// if time < 0 then
62594: LD_VAR 0 8
62598: PUSH
62599: LD_INT 0
62601: LESS
62602: IFFALSE 62619
// time := time * - 1 ;
62604: LD_ADDR_VAR 0 8
62608: PUSH
62609: LD_VAR 0 8
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: MUL
62618: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62619: LD_VAR 0 8
62623: PUSH
62624: LD_INT 35
62626: PPUSH
62627: LD_INT 875
62629: PPUSH
62630: CALL_OW 12
62634: PLUS
62635: PPUSH
62636: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62640: LD_INT 1
62642: PPUSH
62643: LD_INT 5
62645: PPUSH
62646: CALL_OW 12
62650: PPUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: LD_INT 1
62658: PPUSH
62659: CALL_OW 55
// end ;
62663: GO 62476
// end ;
62665: LD_VAR 0 5
62669: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62670: LD_INT 0
62672: PPUSH
62673: PPUSH
62674: PPUSH
62675: PPUSH
62676: PPUSH
62677: PPUSH
62678: PPUSH
62679: PPUSH
// if not turrets or not factories then
62680: LD_VAR 0 1
62684: NOT
62685: PUSH
62686: LD_VAR 0 2
62690: NOT
62691: OR
62692: IFFALSE 62696
// exit ;
62694: GO 63003
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62696: LD_ADDR_VAR 0 10
62700: PUSH
62701: LD_INT 5
62703: PUSH
62704: LD_INT 6
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 4
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 3
62723: PUSH
62724: LD_INT 5
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 24
62738: PUSH
62739: LD_INT 25
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 23
62748: PUSH
62749: LD_INT 27
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 42
62762: PUSH
62763: LD_INT 43
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 44
62772: PUSH
62773: LD_INT 46
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 45
62782: PUSH
62783: LD_INT 47
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: ST_TO_ADDR
// result := [ ] ;
62800: LD_ADDR_VAR 0 3
62804: PUSH
62805: EMPTY
62806: ST_TO_ADDR
// for i in turrets do
62807: LD_ADDR_VAR 0 4
62811: PUSH
62812: LD_VAR 0 1
62816: PUSH
62817: FOR_IN
62818: IFFALSE 63001
// begin nat := GetNation ( i ) ;
62820: LD_ADDR_VAR 0 7
62824: PUSH
62825: LD_VAR 0 4
62829: PPUSH
62830: CALL_OW 248
62834: ST_TO_ADDR
// weapon := 0 ;
62835: LD_ADDR_VAR 0 8
62839: PUSH
62840: LD_INT 0
62842: ST_TO_ADDR
// if not nat then
62843: LD_VAR 0 7
62847: NOT
62848: IFFALSE 62852
// continue ;
62850: GO 62817
// for j in list [ nat ] do
62852: LD_ADDR_VAR 0 5
62856: PUSH
62857: LD_VAR 0 10
62861: PUSH
62862: LD_VAR 0 7
62866: ARRAY
62867: PUSH
62868: FOR_IN
62869: IFFALSE 62910
// if GetBWeapon ( i ) = j [ 1 ] then
62871: LD_VAR 0 4
62875: PPUSH
62876: CALL_OW 269
62880: PUSH
62881: LD_VAR 0 5
62885: PUSH
62886: LD_INT 1
62888: ARRAY
62889: EQUAL
62890: IFFALSE 62908
// begin weapon := j [ 2 ] ;
62892: LD_ADDR_VAR 0 8
62896: PUSH
62897: LD_VAR 0 5
62901: PUSH
62902: LD_INT 2
62904: ARRAY
62905: ST_TO_ADDR
// break ;
62906: GO 62910
// end ;
62908: GO 62868
62910: POP
62911: POP
// if not weapon then
62912: LD_VAR 0 8
62916: NOT
62917: IFFALSE 62921
// continue ;
62919: GO 62817
// for k in factories do
62921: LD_ADDR_VAR 0 6
62925: PUSH
62926: LD_VAR 0 2
62930: PUSH
62931: FOR_IN
62932: IFFALSE 62997
// begin weapons := AvailableWeaponList ( k ) ;
62934: LD_ADDR_VAR 0 9
62938: PUSH
62939: LD_VAR 0 6
62943: PPUSH
62944: CALL_OW 478
62948: ST_TO_ADDR
// if not weapons then
62949: LD_VAR 0 9
62953: NOT
62954: IFFALSE 62958
// continue ;
62956: GO 62931
// if weapon in weapons then
62958: LD_VAR 0 8
62962: PUSH
62963: LD_VAR 0 9
62967: IN
62968: IFFALSE 62995
// begin result := [ i , weapon ] ;
62970: LD_ADDR_VAR 0 3
62974: PUSH
62975: LD_VAR 0 4
62979: PUSH
62980: LD_VAR 0 8
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: ST_TO_ADDR
// exit ;
62989: POP
62990: POP
62991: POP
62992: POP
62993: GO 63003
// end ; end ;
62995: GO 62931
62997: POP
62998: POP
// end ;
62999: GO 62817
63001: POP
63002: POP
// end ;
63003: LD_VAR 0 3
63007: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63008: LD_INT 0
63010: PPUSH
// if not side or side > 8 then
63011: LD_VAR 0 3
63015: NOT
63016: PUSH
63017: LD_VAR 0 3
63021: PUSH
63022: LD_INT 8
63024: GREATER
63025: OR
63026: IFFALSE 63030
// exit ;
63028: GO 63089
// if not range then
63030: LD_VAR 0 4
63034: NOT
63035: IFFALSE 63046
// range := - 12 ;
63037: LD_ADDR_VAR 0 4
63041: PUSH
63042: LD_INT 12
63044: NEG
63045: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63046: LD_VAR 0 1
63050: PPUSH
63051: LD_VAR 0 2
63055: PPUSH
63056: LD_VAR 0 3
63060: PPUSH
63061: LD_VAR 0 4
63065: PPUSH
63066: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63070: LD_VAR 0 1
63074: PPUSH
63075: LD_VAR 0 2
63079: PPUSH
63080: LD_VAR 0 3
63084: PPUSH
63085: CALL_OW 331
// end ;
63089: LD_VAR 0 5
63093: RET
// export function Video ( mode ) ; begin
63094: LD_INT 0
63096: PPUSH
// ingame_video = mode ;
63097: LD_ADDR_OWVAR 52
63101: PUSH
63102: LD_VAR 0 1
63106: ST_TO_ADDR
// interface_hidden = mode ;
63107: LD_ADDR_OWVAR 54
63111: PUSH
63112: LD_VAR 0 1
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 2
63121: RET
// export function Join ( array , element ) ; begin
63122: LD_INT 0
63124: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63125: LD_ADDR_VAR 0 3
63129: PUSH
63130: LD_VAR 0 1
63134: PPUSH
63135: LD_VAR 0 1
63139: PUSH
63140: LD_INT 1
63142: PLUS
63143: PPUSH
63144: LD_VAR 0 2
63148: PPUSH
63149: CALL_OW 1
63153: ST_TO_ADDR
// end ;
63154: LD_VAR 0 3
63158: RET
// export function JoinUnion ( array , element ) ; begin
63159: LD_INT 0
63161: PPUSH
// result := array union element ;
63162: LD_ADDR_VAR 0 3
63166: PUSH
63167: LD_VAR 0 1
63171: PUSH
63172: LD_VAR 0 2
63176: UNION
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 3
63182: RET
// export function GetBehemoths ( side ) ; begin
63183: LD_INT 0
63185: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63186: LD_ADDR_VAR 0 2
63190: PUSH
63191: LD_INT 22
63193: PUSH
63194: LD_VAR 0 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 31
63205: PUSH
63206: LD_INT 25
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PPUSH
63217: CALL_OW 69
63221: ST_TO_ADDR
// end ;
63222: LD_VAR 0 2
63226: RET
// export function Shuffle ( array ) ; var i , index ; begin
63227: LD_INT 0
63229: PPUSH
63230: PPUSH
63231: PPUSH
// result := [ ] ;
63232: LD_ADDR_VAR 0 2
63236: PUSH
63237: EMPTY
63238: ST_TO_ADDR
// if not array then
63239: LD_VAR 0 1
63243: NOT
63244: IFFALSE 63248
// exit ;
63246: GO 63347
// Randomize ;
63248: CALL_OW 10
// for i = array downto 1 do
63252: LD_ADDR_VAR 0 3
63256: PUSH
63257: DOUBLE
63258: LD_VAR 0 1
63262: INC
63263: ST_TO_ADDR
63264: LD_INT 1
63266: PUSH
63267: FOR_DOWNTO
63268: IFFALSE 63345
// begin index := rand ( 1 , array ) ;
63270: LD_ADDR_VAR 0 4
63274: PUSH
63275: LD_INT 1
63277: PPUSH
63278: LD_VAR 0 1
63282: PPUSH
63283: CALL_OW 12
63287: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: LD_VAR 0 2
63297: PPUSH
63298: LD_VAR 0 2
63302: PUSH
63303: LD_INT 1
63305: PLUS
63306: PPUSH
63307: LD_VAR 0 1
63311: PUSH
63312: LD_VAR 0 4
63316: ARRAY
63317: PPUSH
63318: CALL_OW 2
63322: ST_TO_ADDR
// array := Delete ( array , index ) ;
63323: LD_ADDR_VAR 0 1
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: LD_VAR 0 4
63337: PPUSH
63338: CALL_OW 3
63342: ST_TO_ADDR
// end ;
63343: GO 63267
63345: POP
63346: POP
// end ;
63347: LD_VAR 0 2
63351: RET
// export function GetBaseMaterials ( base ) ; begin
63352: LD_INT 0
63354: PPUSH
// result := [ 0 , 0 , 0 ] ;
63355: LD_ADDR_VAR 0 2
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: LIST
63373: ST_TO_ADDR
// if not base then
63374: LD_VAR 0 1
63378: NOT
63379: IFFALSE 63383
// exit ;
63381: GO 63432
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63383: LD_ADDR_VAR 0 2
63387: PUSH
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_INT 1
63395: PPUSH
63396: CALL_OW 275
63400: PUSH
63401: LD_VAR 0 1
63405: PPUSH
63406: LD_INT 2
63408: PPUSH
63409: CALL_OW 275
63413: PUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: LD_INT 3
63421: PPUSH
63422: CALL_OW 275
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// end ;
63432: LD_VAR 0 2
63436: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63437: LD_INT 0
63439: PPUSH
63440: PPUSH
// result := array ;
63441: LD_ADDR_VAR 0 3
63445: PUSH
63446: LD_VAR 0 1
63450: ST_TO_ADDR
// if size >= result then
63451: LD_VAR 0 2
63455: PUSH
63456: LD_VAR 0 3
63460: GREATEREQUAL
63461: IFFALSE 63465
// exit ;
63463: GO 63515
// if size then
63465: LD_VAR 0 2
63469: IFFALSE 63515
// for i := array downto size do
63471: LD_ADDR_VAR 0 4
63475: PUSH
63476: DOUBLE
63477: LD_VAR 0 1
63481: INC
63482: ST_TO_ADDR
63483: LD_VAR 0 2
63487: PUSH
63488: FOR_DOWNTO
63489: IFFALSE 63513
// result := Delete ( result , result ) ;
63491: LD_ADDR_VAR 0 3
63495: PUSH
63496: LD_VAR 0 3
63500: PPUSH
63501: LD_VAR 0 3
63505: PPUSH
63506: CALL_OW 3
63510: ST_TO_ADDR
63511: GO 63488
63513: POP
63514: POP
// end ;
63515: LD_VAR 0 3
63519: RET
// export function ComExit ( unit ) ; var tmp ; begin
63520: LD_INT 0
63522: PPUSH
63523: PPUSH
// if not IsInUnit ( unit ) then
63524: LD_VAR 0 1
63528: PPUSH
63529: CALL_OW 310
63533: NOT
63534: IFFALSE 63538
// exit ;
63536: GO 63598
// tmp := IsInUnit ( unit ) ;
63538: LD_ADDR_VAR 0 3
63542: PUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: CALL_OW 310
63552: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63553: LD_VAR 0 3
63557: PPUSH
63558: CALL_OW 247
63562: PUSH
63563: LD_INT 2
63565: EQUAL
63566: IFFALSE 63579
// ComExitVehicle ( unit ) else
63568: LD_VAR 0 1
63572: PPUSH
63573: CALL_OW 121
63577: GO 63588
// ComExitBuilding ( unit ) ;
63579: LD_VAR 0 1
63583: PPUSH
63584: CALL_OW 122
// result := tmp ;
63588: LD_ADDR_VAR 0 2
63592: PUSH
63593: LD_VAR 0 3
63597: ST_TO_ADDR
// end ;
63598: LD_VAR 0 2
63602: RET
// export function ComExitAll ( units ) ; var i ; begin
63603: LD_INT 0
63605: PPUSH
63606: PPUSH
// if not units then
63607: LD_VAR 0 1
63611: NOT
63612: IFFALSE 63616
// exit ;
63614: GO 63642
// for i in units do
63616: LD_ADDR_VAR 0 3
63620: PUSH
63621: LD_VAR 0 1
63625: PUSH
63626: FOR_IN
63627: IFFALSE 63640
// ComExit ( i ) ;
63629: LD_VAR 0 3
63633: PPUSH
63634: CALL 63520 0 1
63638: GO 63626
63640: POP
63641: POP
// end ;
63642: LD_VAR 0 2
63646: RET
// export function ResetHc ; begin
63647: LD_INT 0
63649: PPUSH
// InitHc ;
63650: CALL_OW 19
// hc_importance := 0 ;
63654: LD_ADDR_OWVAR 32
63658: PUSH
63659: LD_INT 0
63661: ST_TO_ADDR
// end ;
63662: LD_VAR 0 1
63666: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63667: LD_INT 0
63669: PPUSH
63670: PPUSH
63671: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63672: LD_ADDR_VAR 0 6
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_VAR 0 3
63686: PLUS
63687: PUSH
63688: LD_INT 2
63690: DIV
63691: ST_TO_ADDR
// if _x < 0 then
63692: LD_VAR 0 6
63696: PUSH
63697: LD_INT 0
63699: LESS
63700: IFFALSE 63717
// _x := _x * - 1 ;
63702: LD_ADDR_VAR 0 6
63706: PUSH
63707: LD_VAR 0 6
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: MUL
63716: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63717: LD_ADDR_VAR 0 7
63721: PUSH
63722: LD_VAR 0 2
63726: PUSH
63727: LD_VAR 0 4
63731: PLUS
63732: PUSH
63733: LD_INT 2
63735: DIV
63736: ST_TO_ADDR
// if _y < 0 then
63737: LD_VAR 0 7
63741: PUSH
63742: LD_INT 0
63744: LESS
63745: IFFALSE 63762
// _y := _y * - 1 ;
63747: LD_ADDR_VAR 0 7
63751: PUSH
63752: LD_VAR 0 7
63756: PUSH
63757: LD_INT 1
63759: NEG
63760: MUL
63761: ST_TO_ADDR
// result := [ _x , _y ] ;
63762: LD_ADDR_VAR 0 5
63766: PUSH
63767: LD_VAR 0 6
63771: PUSH
63772: LD_VAR 0 7
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// end ;
63781: LD_VAR 0 5
63785: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63786: LD_INT 0
63788: PPUSH
63789: PPUSH
63790: PPUSH
63791: PPUSH
// task := GetTaskList ( unit ) ;
63792: LD_ADDR_VAR 0 7
63796: PUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: CALL_OW 437
63806: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63807: LD_VAR 0 7
63811: NOT
63812: PUSH
63813: LD_VAR 0 1
63817: PPUSH
63818: LD_VAR 0 2
63822: PPUSH
63823: CALL_OW 308
63827: NOT
63828: AND
63829: IFFALSE 63833
// exit ;
63831: GO 63951
// if IsInArea ( unit , area ) then
63833: LD_VAR 0 1
63837: PPUSH
63838: LD_VAR 0 2
63842: PPUSH
63843: CALL_OW 308
63847: IFFALSE 63865
// begin ComMoveToArea ( unit , goAway ) ;
63849: LD_VAR 0 1
63853: PPUSH
63854: LD_VAR 0 3
63858: PPUSH
63859: CALL_OW 113
// exit ;
63863: GO 63951
// end ; if task [ 1 ] [ 1 ] <> M then
63865: LD_VAR 0 7
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PUSH
63874: LD_INT 1
63876: ARRAY
63877: PUSH
63878: LD_STRING M
63880: NONEQUAL
63881: IFFALSE 63885
// exit ;
63883: GO 63951
// x := task [ 1 ] [ 2 ] ;
63885: LD_ADDR_VAR 0 5
63889: PUSH
63890: LD_VAR 0 7
63894: PUSH
63895: LD_INT 1
63897: ARRAY
63898: PUSH
63899: LD_INT 2
63901: ARRAY
63902: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63903: LD_ADDR_VAR 0 6
63907: PUSH
63908: LD_VAR 0 7
63912: PUSH
63913: LD_INT 1
63915: ARRAY
63916: PUSH
63917: LD_INT 3
63919: ARRAY
63920: ST_TO_ADDR
// if InArea ( x , y , area ) then
63921: LD_VAR 0 5
63925: PPUSH
63926: LD_VAR 0 6
63930: PPUSH
63931: LD_VAR 0 2
63935: PPUSH
63936: CALL_OW 309
63940: IFFALSE 63951
// ComStop ( unit ) ;
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 141
// end ;
63951: LD_VAR 0 4
63955: RET
// export function Abs ( value ) ; begin
63956: LD_INT 0
63958: PPUSH
// result := value ;
63959: LD_ADDR_VAR 0 2
63963: PUSH
63964: LD_VAR 0 1
63968: ST_TO_ADDR
// if value < 0 then
63969: LD_VAR 0 1
63973: PUSH
63974: LD_INT 0
63976: LESS
63977: IFFALSE 63994
// result := value * - 1 ;
63979: LD_ADDR_VAR 0 2
63983: PUSH
63984: LD_VAR 0 1
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: MUL
63993: ST_TO_ADDR
// end ;
63994: LD_VAR 0 2
63998: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63999: LD_INT 0
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
64005: PPUSH
64006: PPUSH
64007: PPUSH
64008: PPUSH
// if not unit or not building then
64009: LD_VAR 0 1
64013: NOT
64014: PUSH
64015: LD_VAR 0 2
64019: NOT
64020: OR
64021: IFFALSE 64025
// exit ;
64023: GO 64251
// x := GetX ( building ) ;
64025: LD_ADDR_VAR 0 4
64029: PUSH
64030: LD_VAR 0 2
64034: PPUSH
64035: CALL_OW 250
64039: ST_TO_ADDR
// y := GetY ( building ) ;
64040: LD_ADDR_VAR 0 6
64044: PUSH
64045: LD_VAR 0 2
64049: PPUSH
64050: CALL_OW 251
64054: ST_TO_ADDR
// d := GetDir ( building ) ;
64055: LD_ADDR_VAR 0 8
64059: PUSH
64060: LD_VAR 0 2
64064: PPUSH
64065: CALL_OW 254
64069: ST_TO_ADDR
// r := 4 ;
64070: LD_ADDR_VAR 0 9
64074: PUSH
64075: LD_INT 4
64077: ST_TO_ADDR
// for i := 1 to 5 do
64078: LD_ADDR_VAR 0 10
64082: PUSH
64083: DOUBLE
64084: LD_INT 1
64086: DEC
64087: ST_TO_ADDR
64088: LD_INT 5
64090: PUSH
64091: FOR_TO
64092: IFFALSE 64249
// begin _x := ShiftX ( x , d , r + i ) ;
64094: LD_ADDR_VAR 0 5
64098: PUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: LD_VAR 0 8
64108: PPUSH
64109: LD_VAR 0 9
64113: PUSH
64114: LD_VAR 0 10
64118: PLUS
64119: PPUSH
64120: CALL_OW 272
64124: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64125: LD_ADDR_VAR 0 7
64129: PUSH
64130: LD_VAR 0 6
64134: PPUSH
64135: LD_VAR 0 8
64139: PPUSH
64140: LD_VAR 0 9
64144: PUSH
64145: LD_VAR 0 10
64149: PLUS
64150: PPUSH
64151: CALL_OW 273
64155: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64156: LD_VAR 0 5
64160: PPUSH
64161: LD_VAR 0 7
64165: PPUSH
64166: CALL_OW 488
64170: PUSH
64171: LD_VAR 0 5
64175: PPUSH
64176: LD_VAR 0 7
64180: PPUSH
64181: CALL_OW 428
64185: PPUSH
64186: CALL_OW 247
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: IN
64201: NOT
64202: AND
64203: IFFALSE 64247
// begin ComMoveXY ( unit , _x , _y ) ;
64205: LD_VAR 0 1
64209: PPUSH
64210: LD_VAR 0 5
64214: PPUSH
64215: LD_VAR 0 7
64219: PPUSH
64220: CALL_OW 111
// result := [ _x , _y ] ;
64224: LD_ADDR_VAR 0 3
64228: PUSH
64229: LD_VAR 0 5
64233: PUSH
64234: LD_VAR 0 7
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// exit ;
64243: POP
64244: POP
64245: GO 64251
// end ; end ;
64247: GO 64091
64249: POP
64250: POP
// end ;
64251: LD_VAR 0 3
64255: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64256: LD_INT 0
64258: PPUSH
64259: PPUSH
64260: PPUSH
// result := 0 ;
64261: LD_ADDR_VAR 0 3
64265: PUSH
64266: LD_INT 0
64268: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 0
64276: LESS
64277: PUSH
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 8
64285: GREATER
64286: OR
64287: PUSH
64288: LD_VAR 0 2
64292: PUSH
64293: LD_INT 0
64295: LESS
64296: OR
64297: PUSH
64298: LD_VAR 0 2
64302: PUSH
64303: LD_INT 8
64305: GREATER
64306: OR
64307: IFFALSE 64311
// exit ;
64309: GO 64386
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64311: LD_ADDR_VAR 0 4
64315: PUSH
64316: LD_INT 22
64318: PUSH
64319: LD_VAR 0 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PPUSH
64328: CALL_OW 69
64332: PUSH
64333: FOR_IN
64334: IFFALSE 64384
// begin un := UnitShoot ( i ) ;
64336: LD_ADDR_VAR 0 5
64340: PUSH
64341: LD_VAR 0 4
64345: PPUSH
64346: CALL_OW 504
64350: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64351: LD_VAR 0 5
64355: PPUSH
64356: CALL_OW 255
64360: PUSH
64361: LD_VAR 0 1
64365: EQUAL
64366: IFFALSE 64382
// begin result := un ;
64368: LD_ADDR_VAR 0 3
64372: PUSH
64373: LD_VAR 0 5
64377: ST_TO_ADDR
// exit ;
64378: POP
64379: POP
64380: GO 64386
// end ; end ;
64382: GO 64333
64384: POP
64385: POP
// end ;
64386: LD_VAR 0 3
64390: RET
// export function GetCargoBay ( units ) ; begin
64391: LD_INT 0
64393: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64394: LD_ADDR_VAR 0 2
64398: PUSH
64399: LD_VAR 0 1
64403: PPUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 34
64409: PUSH
64410: LD_INT 12
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 34
64419: PUSH
64420: LD_INT 51
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 34
64429: PUSH
64430: LD_INT 32
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 34
64439: PUSH
64440: LD_INT 89
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: PPUSH
64454: CALL_OW 72
64458: ST_TO_ADDR
// end ;
64459: LD_VAR 0 2
64463: RET
// export function Negate ( value ) ; begin
64464: LD_INT 0
64466: PPUSH
// result := not value ;
64467: LD_ADDR_VAR 0 2
64471: PUSH
64472: LD_VAR 0 1
64476: NOT
64477: ST_TO_ADDR
// end ;
64478: LD_VAR 0 2
64482: RET
// export function Inc ( value ) ; begin
64483: LD_INT 0
64485: PPUSH
// result := value + 1 ;
64486: LD_ADDR_VAR 0 2
64490: PUSH
64491: LD_VAR 0 1
64495: PUSH
64496: LD_INT 1
64498: PLUS
64499: ST_TO_ADDR
// end ;
64500: LD_VAR 0 2
64504: RET
// export function Dec ( value ) ; begin
64505: LD_INT 0
64507: PPUSH
// result := value - 1 ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_VAR 0 1
64517: PUSH
64518: LD_INT 1
64520: MINUS
64521: ST_TO_ADDR
// end ;
64522: LD_VAR 0 2
64526: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64527: LD_INT 0
64529: PPUSH
64530: PPUSH
64531: PPUSH
64532: PPUSH
64533: PPUSH
64534: PPUSH
64535: PPUSH
64536: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64537: LD_VAR 0 1
64541: PPUSH
64542: LD_VAR 0 2
64546: PPUSH
64547: CALL_OW 488
64551: NOT
64552: PUSH
64553: LD_VAR 0 3
64557: PPUSH
64558: LD_VAR 0 4
64562: PPUSH
64563: CALL_OW 488
64567: NOT
64568: OR
64569: IFFALSE 64582
// begin result := - 1 ;
64571: LD_ADDR_VAR 0 5
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: ST_TO_ADDR
// exit ;
64580: GO 64817
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64582: LD_ADDR_VAR 0 12
64586: PUSH
64587: LD_VAR 0 1
64591: PPUSH
64592: LD_VAR 0 2
64596: PPUSH
64597: LD_VAR 0 3
64601: PPUSH
64602: LD_VAR 0 4
64606: PPUSH
64607: CALL 63667 0 4
64611: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64612: LD_ADDR_VAR 0 11
64616: PUSH
64617: LD_VAR 0 1
64621: PPUSH
64622: LD_VAR 0 2
64626: PPUSH
64627: LD_VAR 0 12
64631: PUSH
64632: LD_INT 1
64634: ARRAY
64635: PPUSH
64636: LD_VAR 0 12
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PPUSH
64645: CALL_OW 298
64649: ST_TO_ADDR
// distance := 9999 ;
64650: LD_ADDR_VAR 0 10
64654: PUSH
64655: LD_INT 9999
64657: ST_TO_ADDR
// for i := 0 to 5 do
64658: LD_ADDR_VAR 0 6
64662: PUSH
64663: DOUBLE
64664: LD_INT 0
64666: DEC
64667: ST_TO_ADDR
64668: LD_INT 5
64670: PUSH
64671: FOR_TO
64672: IFFALSE 64815
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64674: LD_ADDR_VAR 0 7
64678: PUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: LD_VAR 0 6
64688: PPUSH
64689: LD_VAR 0 11
64693: PPUSH
64694: CALL_OW 272
64698: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64699: LD_ADDR_VAR 0 8
64703: PUSH
64704: LD_VAR 0 2
64708: PPUSH
64709: LD_VAR 0 6
64713: PPUSH
64714: LD_VAR 0 11
64718: PPUSH
64719: CALL_OW 273
64723: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64724: LD_VAR 0 7
64728: PPUSH
64729: LD_VAR 0 8
64733: PPUSH
64734: CALL_OW 488
64738: NOT
64739: IFFALSE 64743
// continue ;
64741: GO 64671
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64743: LD_ADDR_VAR 0 9
64747: PUSH
64748: LD_VAR 0 12
64752: PUSH
64753: LD_INT 1
64755: ARRAY
64756: PPUSH
64757: LD_VAR 0 12
64761: PUSH
64762: LD_INT 2
64764: ARRAY
64765: PPUSH
64766: LD_VAR 0 7
64770: PPUSH
64771: LD_VAR 0 8
64775: PPUSH
64776: CALL_OW 298
64780: ST_TO_ADDR
// if tmp < distance then
64781: LD_VAR 0 9
64785: PUSH
64786: LD_VAR 0 10
64790: LESS
64791: IFFALSE 64813
// begin result := i ;
64793: LD_ADDR_VAR 0 5
64797: PUSH
64798: LD_VAR 0 6
64802: ST_TO_ADDR
// distance := tmp ;
64803: LD_ADDR_VAR 0 10
64807: PUSH
64808: LD_VAR 0 9
64812: ST_TO_ADDR
// end ; end ;
64813: GO 64671
64815: POP
64816: POP
// end ;
64817: LD_VAR 0 5
64821: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64822: LD_INT 0
64824: PPUSH
64825: PPUSH
// if not driver or not IsInUnit ( driver ) then
64826: LD_VAR 0 1
64830: NOT
64831: PUSH
64832: LD_VAR 0 1
64836: PPUSH
64837: CALL_OW 310
64841: NOT
64842: OR
64843: IFFALSE 64847
// exit ;
64845: GO 64937
// vehicle := IsInUnit ( driver ) ;
64847: LD_ADDR_VAR 0 3
64851: PUSH
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 310
64861: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64862: LD_VAR 0 1
64866: PPUSH
64867: LD_STRING \
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 0
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: PUSH
64897: LD_STRING E
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: LD_VAR 0 3
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PPUSH
64933: CALL_OW 446
// end ;
64937: LD_VAR 0 2
64941: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64942: LD_INT 0
64944: PPUSH
64945: PPUSH
// if not driver or not IsInUnit ( driver ) then
64946: LD_VAR 0 1
64950: NOT
64951: PUSH
64952: LD_VAR 0 1
64956: PPUSH
64957: CALL_OW 310
64961: NOT
64962: OR
64963: IFFALSE 64967
// exit ;
64965: GO 65057
// vehicle := IsInUnit ( driver ) ;
64967: LD_ADDR_VAR 0 3
64971: PUSH
64972: LD_VAR 0 1
64976: PPUSH
64977: CALL_OW 310
64981: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64982: LD_VAR 0 1
64986: PPUSH
64987: LD_STRING \
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: LD_STRING E
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_VAR 0 3
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PPUSH
65053: CALL_OW 447
// end ;
65057: LD_VAR 0 2
65061: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65062: LD_INT 0
65064: PPUSH
65065: PPUSH
65066: PPUSH
// tmp := [ ] ;
65067: LD_ADDR_VAR 0 5
65071: PUSH
65072: EMPTY
65073: ST_TO_ADDR
// for i in units do
65074: LD_ADDR_VAR 0 4
65078: PUSH
65079: LD_VAR 0 1
65083: PUSH
65084: FOR_IN
65085: IFFALSE 65123
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65087: LD_ADDR_VAR 0 5
65091: PUSH
65092: LD_VAR 0 5
65096: PPUSH
65097: LD_VAR 0 5
65101: PUSH
65102: LD_INT 1
65104: PLUS
65105: PPUSH
65106: LD_VAR 0 4
65110: PPUSH
65111: CALL_OW 256
65115: PPUSH
65116: CALL_OW 2
65120: ST_TO_ADDR
65121: GO 65084
65123: POP
65124: POP
// if not tmp then
65125: LD_VAR 0 5
65129: NOT
65130: IFFALSE 65134
// exit ;
65132: GO 65182
// if asc then
65134: LD_VAR 0 2
65138: IFFALSE 65162
// result := SortListByListAsc ( units , tmp ) else
65140: LD_ADDR_VAR 0 3
65144: PUSH
65145: LD_VAR 0 1
65149: PPUSH
65150: LD_VAR 0 5
65154: PPUSH
65155: CALL_OW 76
65159: ST_TO_ADDR
65160: GO 65182
// result := SortListByListDesc ( units , tmp ) ;
65162: LD_ADDR_VAR 0 3
65166: PUSH
65167: LD_VAR 0 1
65171: PPUSH
65172: LD_VAR 0 5
65176: PPUSH
65177: CALL_OW 77
65181: ST_TO_ADDR
// end ;
65182: LD_VAR 0 3
65186: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65187: LD_INT 0
65189: PPUSH
65190: PPUSH
// task := GetTaskList ( mech ) ;
65191: LD_ADDR_VAR 0 4
65195: PUSH
65196: LD_VAR 0 1
65200: PPUSH
65201: CALL_OW 437
65205: ST_TO_ADDR
// if not task then
65206: LD_VAR 0 4
65210: NOT
65211: IFFALSE 65215
// exit ;
65213: GO 65257
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65215: LD_ADDR_VAR 0 3
65219: PUSH
65220: LD_VAR 0 4
65224: PUSH
65225: LD_INT 1
65227: ARRAY
65228: PUSH
65229: LD_INT 1
65231: ARRAY
65232: PUSH
65233: LD_STRING r
65235: EQUAL
65236: PUSH
65237: LD_VAR 0 4
65241: PUSH
65242: LD_INT 1
65244: ARRAY
65245: PUSH
65246: LD_INT 4
65248: ARRAY
65249: PUSH
65250: LD_VAR 0 2
65254: EQUAL
65255: AND
65256: ST_TO_ADDR
// end ;
65257: LD_VAR 0 3
65261: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65262: LD_INT 0
65264: PPUSH
// SetDir ( unit , d ) ;
65265: LD_VAR 0 1
65269: PPUSH
65270: LD_VAR 0 4
65274: PPUSH
65275: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65279: LD_VAR 0 1
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: LD_VAR 0 3
65293: PPUSH
65294: LD_VAR 0 5
65298: PPUSH
65299: CALL_OW 48
// end ;
65303: LD_VAR 0 6
65307: RET
// export function ToNaturalNumber ( number ) ; begin
65308: LD_INT 0
65310: PPUSH
// result := number div 1 ;
65311: LD_ADDR_VAR 0 2
65315: PUSH
65316: LD_VAR 0 1
65320: PUSH
65321: LD_INT 1
65323: DIV
65324: ST_TO_ADDR
// if number < 0 then
65325: LD_VAR 0 1
65329: PUSH
65330: LD_INT 0
65332: LESS
65333: IFFALSE 65343
// result := 0 ;
65335: LD_ADDR_VAR 0 2
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// end ;
65343: LD_VAR 0 2
65347: RET
// export function SortByClass ( units , class ) ; var un ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
// if not units or not class then
65352: LD_VAR 0 1
65356: NOT
65357: PUSH
65358: LD_VAR 0 2
65362: NOT
65363: OR
65364: IFFALSE 65368
// exit ;
65366: GO 65463
// result := [ ] ;
65368: LD_ADDR_VAR 0 3
65372: PUSH
65373: EMPTY
65374: ST_TO_ADDR
// for un in units do
65375: LD_ADDR_VAR 0 4
65379: PUSH
65380: LD_VAR 0 1
65384: PUSH
65385: FOR_IN
65386: IFFALSE 65461
// if GetClass ( un ) = class then
65388: LD_VAR 0 4
65392: PPUSH
65393: CALL_OW 257
65397: PUSH
65398: LD_VAR 0 2
65402: EQUAL
65403: IFFALSE 65430
// result := Insert ( result , 1 , un ) else
65405: LD_ADDR_VAR 0 3
65409: PUSH
65410: LD_VAR 0 3
65414: PPUSH
65415: LD_INT 1
65417: PPUSH
65418: LD_VAR 0 4
65422: PPUSH
65423: CALL_OW 2
65427: ST_TO_ADDR
65428: GO 65459
// result := Replace ( result , result + 1 , un ) ;
65430: LD_ADDR_VAR 0 3
65434: PUSH
65435: LD_VAR 0 3
65439: PPUSH
65440: LD_VAR 0 3
65444: PUSH
65445: LD_INT 1
65447: PLUS
65448: PPUSH
65449: LD_VAR 0 4
65453: PPUSH
65454: CALL_OW 1
65458: ST_TO_ADDR
65459: GO 65385
65461: POP
65462: POP
// end ;
65463: LD_VAR 0 3
65467: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65468: LD_INT 0
65470: PPUSH
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
65475: PPUSH
65476: PPUSH
// result := [ ] ;
65477: LD_ADDR_VAR 0 4
65481: PUSH
65482: EMPTY
65483: ST_TO_ADDR
// if x - r < 0 then
65484: LD_VAR 0 1
65488: PUSH
65489: LD_VAR 0 3
65493: MINUS
65494: PUSH
65495: LD_INT 0
65497: LESS
65498: IFFALSE 65510
// min_x := 0 else
65500: LD_ADDR_VAR 0 8
65504: PUSH
65505: LD_INT 0
65507: ST_TO_ADDR
65508: GO 65526
// min_x := x - r ;
65510: LD_ADDR_VAR 0 8
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_VAR 0 3
65524: MINUS
65525: ST_TO_ADDR
// if y - r < 0 then
65526: LD_VAR 0 2
65530: PUSH
65531: LD_VAR 0 3
65535: MINUS
65536: PUSH
65537: LD_INT 0
65539: LESS
65540: IFFALSE 65552
// min_y := 0 else
65542: LD_ADDR_VAR 0 7
65546: PUSH
65547: LD_INT 0
65549: ST_TO_ADDR
65550: GO 65568
// min_y := y - r ;
65552: LD_ADDR_VAR 0 7
65556: PUSH
65557: LD_VAR 0 2
65561: PUSH
65562: LD_VAR 0 3
65566: MINUS
65567: ST_TO_ADDR
// max_x := x + r ;
65568: LD_ADDR_VAR 0 9
65572: PUSH
65573: LD_VAR 0 1
65577: PUSH
65578: LD_VAR 0 3
65582: PLUS
65583: ST_TO_ADDR
// max_y := y + r ;
65584: LD_ADDR_VAR 0 10
65588: PUSH
65589: LD_VAR 0 2
65593: PUSH
65594: LD_VAR 0 3
65598: PLUS
65599: ST_TO_ADDR
// for _x = min_x to max_x do
65600: LD_ADDR_VAR 0 5
65604: PUSH
65605: DOUBLE
65606: LD_VAR 0 8
65610: DEC
65611: ST_TO_ADDR
65612: LD_VAR 0 9
65616: PUSH
65617: FOR_TO
65618: IFFALSE 65719
// for _y = min_y to max_y do
65620: LD_ADDR_VAR 0 6
65624: PUSH
65625: DOUBLE
65626: LD_VAR 0 7
65630: DEC
65631: ST_TO_ADDR
65632: LD_VAR 0 10
65636: PUSH
65637: FOR_TO
65638: IFFALSE 65715
// begin if not ValidHex ( _x , _y ) then
65640: LD_VAR 0 5
65644: PPUSH
65645: LD_VAR 0 6
65649: PPUSH
65650: CALL_OW 488
65654: NOT
65655: IFFALSE 65659
// continue ;
65657: GO 65637
// if GetResourceTypeXY ( _x , _y ) then
65659: LD_VAR 0 5
65663: PPUSH
65664: LD_VAR 0 6
65668: PPUSH
65669: CALL_OW 283
65673: IFFALSE 65713
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65675: LD_ADDR_VAR 0 4
65679: PUSH
65680: LD_VAR 0 4
65684: PPUSH
65685: LD_VAR 0 4
65689: PUSH
65690: LD_INT 1
65692: PLUS
65693: PPUSH
65694: LD_VAR 0 5
65698: PUSH
65699: LD_VAR 0 6
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PPUSH
65708: CALL_OW 1
65712: ST_TO_ADDR
// end ;
65713: GO 65637
65715: POP
65716: POP
65717: GO 65617
65719: POP
65720: POP
// end ;
65721: LD_VAR 0 4
65725: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65726: LD_INT 0
65728: PPUSH
65729: PPUSH
65730: PPUSH
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
65735: PPUSH
// if not units then
65736: LD_VAR 0 1
65740: NOT
65741: IFFALSE 65745
// exit ;
65743: GO 66269
// result := UnitFilter ( units , [ f_ok ] ) ;
65745: LD_ADDR_VAR 0 3
65749: PUSH
65750: LD_VAR 0 1
65754: PPUSH
65755: LD_INT 50
65757: PUSH
65758: EMPTY
65759: LIST
65760: PPUSH
65761: CALL_OW 72
65765: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65766: LD_ADDR_VAR 0 8
65770: PUSH
65771: LD_VAR 0 1
65775: PUSH
65776: LD_INT 1
65778: ARRAY
65779: PPUSH
65780: CALL_OW 255
65784: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65785: LD_ADDR_VAR 0 10
65789: PUSH
65790: LD_INT 29
65792: PUSH
65793: LD_INT 91
65795: PUSH
65796: LD_INT 49
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// if not result then
65804: LD_VAR 0 3
65808: NOT
65809: IFFALSE 65813
// exit ;
65811: GO 66269
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65813: LD_ADDR_VAR 0 5
65817: PUSH
65818: LD_INT 81
65820: PUSH
65821: LD_VAR 0 8
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PPUSH
65830: CALL_OW 69
65834: ST_TO_ADDR
// for i in result do
65835: LD_ADDR_VAR 0 4
65839: PUSH
65840: LD_VAR 0 3
65844: PUSH
65845: FOR_IN
65846: IFFALSE 66267
// begin tag := GetTag ( i ) + 1 ;
65848: LD_ADDR_VAR 0 9
65852: PUSH
65853: LD_VAR 0 4
65857: PPUSH
65858: CALL_OW 110
65862: PUSH
65863: LD_INT 1
65865: PLUS
65866: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65867: LD_ADDR_VAR 0 7
65871: PUSH
65872: LD_VAR 0 4
65876: PPUSH
65877: CALL_OW 250
65881: PPUSH
65882: LD_VAR 0 4
65886: PPUSH
65887: CALL_OW 251
65891: PPUSH
65892: LD_INT 6
65894: PPUSH
65895: CALL 65468 0 3
65899: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65900: LD_VAR 0 4
65904: PPUSH
65905: CALL_OW 247
65909: PUSH
65910: LD_INT 2
65912: EQUAL
65913: PUSH
65914: LD_VAR 0 7
65918: AND
65919: PUSH
65920: LD_VAR 0 4
65924: PPUSH
65925: CALL_OW 264
65929: PUSH
65930: LD_VAR 0 10
65934: IN
65935: NOT
65936: AND
65937: IFFALSE 65976
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65939: LD_VAR 0 4
65943: PPUSH
65944: LD_VAR 0 7
65948: PUSH
65949: LD_INT 1
65951: ARRAY
65952: PUSH
65953: LD_INT 1
65955: ARRAY
65956: PPUSH
65957: LD_VAR 0 7
65961: PUSH
65962: LD_INT 1
65964: ARRAY
65965: PUSH
65966: LD_INT 2
65968: ARRAY
65969: PPUSH
65970: CALL_OW 116
65974: GO 66265
// if path > tag then
65976: LD_VAR 0 2
65980: PUSH
65981: LD_VAR 0 9
65985: GREATER
65986: IFFALSE 66194
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65988: LD_ADDR_VAR 0 6
65992: PUSH
65993: LD_VAR 0 5
65997: PPUSH
65998: LD_INT 91
66000: PUSH
66001: LD_VAR 0 4
66005: PUSH
66006: LD_INT 8
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: PPUSH
66014: CALL_OW 72
66018: ST_TO_ADDR
// if nearEnemy then
66019: LD_VAR 0 6
66023: IFFALSE 66092
// begin if GetWeapon ( i ) = ru_time_lapser then
66025: LD_VAR 0 4
66029: PPUSH
66030: CALL_OW 264
66034: PUSH
66035: LD_INT 49
66037: EQUAL
66038: IFFALSE 66066
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66040: LD_VAR 0 4
66044: PPUSH
66045: LD_VAR 0 6
66049: PPUSH
66050: LD_VAR 0 4
66054: PPUSH
66055: CALL_OW 74
66059: PPUSH
66060: CALL_OW 112
66064: GO 66090
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66066: LD_VAR 0 4
66070: PPUSH
66071: LD_VAR 0 6
66075: PPUSH
66076: LD_VAR 0 4
66080: PPUSH
66081: CALL_OW 74
66085: PPUSH
66086: CALL 67194 0 2
// end else
66090: GO 66192
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66092: LD_VAR 0 4
66096: PPUSH
66097: LD_VAR 0 2
66101: PUSH
66102: LD_VAR 0 9
66106: ARRAY
66107: PUSH
66108: LD_INT 1
66110: ARRAY
66111: PPUSH
66112: LD_VAR 0 2
66116: PUSH
66117: LD_VAR 0 9
66121: ARRAY
66122: PUSH
66123: LD_INT 2
66125: ARRAY
66126: PPUSH
66127: CALL_OW 297
66131: PUSH
66132: LD_INT 6
66134: GREATER
66135: IFFALSE 66178
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66137: LD_VAR 0 4
66141: PPUSH
66142: LD_VAR 0 2
66146: PUSH
66147: LD_VAR 0 9
66151: ARRAY
66152: PUSH
66153: LD_INT 1
66155: ARRAY
66156: PPUSH
66157: LD_VAR 0 2
66161: PUSH
66162: LD_VAR 0 9
66166: ARRAY
66167: PUSH
66168: LD_INT 2
66170: ARRAY
66171: PPUSH
66172: CALL_OW 114
66176: GO 66192
// SetTag ( i , tag ) ;
66178: LD_VAR 0 4
66182: PPUSH
66183: LD_VAR 0 9
66187: PPUSH
66188: CALL_OW 109
// end else
66192: GO 66265
// if enemy then
66194: LD_VAR 0 5
66198: IFFALSE 66265
// begin if GetWeapon ( i ) = ru_time_lapser then
66200: LD_VAR 0 4
66204: PPUSH
66205: CALL_OW 264
66209: PUSH
66210: LD_INT 49
66212: EQUAL
66213: IFFALSE 66241
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66215: LD_VAR 0 4
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: LD_VAR 0 4
66229: PPUSH
66230: CALL_OW 74
66234: PPUSH
66235: CALL_OW 112
66239: GO 66265
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66241: LD_VAR 0 4
66245: PPUSH
66246: LD_VAR 0 5
66250: PPUSH
66251: LD_VAR 0 4
66255: PPUSH
66256: CALL_OW 74
66260: PPUSH
66261: CALL 67194 0 2
// end ; end ;
66265: GO 65845
66267: POP
66268: POP
// end ;
66269: LD_VAR 0 3
66273: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66274: LD_INT 0
66276: PPUSH
66277: PPUSH
66278: PPUSH
// if not unit or IsInUnit ( unit ) then
66279: LD_VAR 0 1
66283: NOT
66284: PUSH
66285: LD_VAR 0 1
66289: PPUSH
66290: CALL_OW 310
66294: OR
66295: IFFALSE 66299
// exit ;
66297: GO 66390
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66299: LD_ADDR_VAR 0 4
66303: PUSH
66304: LD_VAR 0 1
66308: PPUSH
66309: CALL_OW 250
66313: PPUSH
66314: LD_VAR 0 2
66318: PPUSH
66319: LD_INT 1
66321: PPUSH
66322: CALL_OW 272
66326: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66327: LD_ADDR_VAR 0 5
66331: PUSH
66332: LD_VAR 0 1
66336: PPUSH
66337: CALL_OW 251
66341: PPUSH
66342: LD_VAR 0 2
66346: PPUSH
66347: LD_INT 1
66349: PPUSH
66350: CALL_OW 273
66354: ST_TO_ADDR
// if ValidHex ( x , y ) then
66355: LD_VAR 0 4
66359: PPUSH
66360: LD_VAR 0 5
66364: PPUSH
66365: CALL_OW 488
66369: IFFALSE 66390
// ComTurnXY ( unit , x , y ) ;
66371: LD_VAR 0 1
66375: PPUSH
66376: LD_VAR 0 4
66380: PPUSH
66381: LD_VAR 0 5
66385: PPUSH
66386: CALL_OW 118
// end ;
66390: LD_VAR 0 3
66394: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66395: LD_INT 0
66397: PPUSH
66398: PPUSH
// result := false ;
66399: LD_ADDR_VAR 0 3
66403: PUSH
66404: LD_INT 0
66406: ST_TO_ADDR
// if not units then
66407: LD_VAR 0 2
66411: NOT
66412: IFFALSE 66416
// exit ;
66414: GO 66461
// for i in units do
66416: LD_ADDR_VAR 0 4
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: FOR_IN
66427: IFFALSE 66459
// if See ( side , i ) then
66429: LD_VAR 0 1
66433: PPUSH
66434: LD_VAR 0 4
66438: PPUSH
66439: CALL_OW 292
66443: IFFALSE 66457
// begin result := true ;
66445: LD_ADDR_VAR 0 3
66449: PUSH
66450: LD_INT 1
66452: ST_TO_ADDR
// exit ;
66453: POP
66454: POP
66455: GO 66461
// end ;
66457: GO 66426
66459: POP
66460: POP
// end ;
66461: LD_VAR 0 3
66465: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66466: LD_INT 0
66468: PPUSH
66469: PPUSH
66470: PPUSH
66471: PPUSH
// if not unit or not points then
66472: LD_VAR 0 1
66476: NOT
66477: PUSH
66478: LD_VAR 0 2
66482: NOT
66483: OR
66484: IFFALSE 66488
// exit ;
66486: GO 66578
// dist := 99999 ;
66488: LD_ADDR_VAR 0 5
66492: PUSH
66493: LD_INT 99999
66495: ST_TO_ADDR
// for i in points do
66496: LD_ADDR_VAR 0 4
66500: PUSH
66501: LD_VAR 0 2
66505: PUSH
66506: FOR_IN
66507: IFFALSE 66576
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66509: LD_ADDR_VAR 0 6
66513: PUSH
66514: LD_VAR 0 1
66518: PPUSH
66519: LD_VAR 0 4
66523: PUSH
66524: LD_INT 1
66526: ARRAY
66527: PPUSH
66528: LD_VAR 0 4
66532: PUSH
66533: LD_INT 2
66535: ARRAY
66536: PPUSH
66537: CALL_OW 297
66541: ST_TO_ADDR
// if tmpDist < dist then
66542: LD_VAR 0 6
66546: PUSH
66547: LD_VAR 0 5
66551: LESS
66552: IFFALSE 66574
// begin result := i ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 4
66563: ST_TO_ADDR
// dist := tmpDist ;
66564: LD_ADDR_VAR 0 5
66568: PUSH
66569: LD_VAR 0 6
66573: ST_TO_ADDR
// end ; end ;
66574: GO 66506
66576: POP
66577: POP
// end ;
66578: LD_VAR 0 3
66582: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66583: LD_INT 0
66585: PPUSH
// uc_side := side ;
66586: LD_ADDR_OWVAR 20
66590: PUSH
66591: LD_VAR 0 1
66595: ST_TO_ADDR
// uc_nation := 3 ;
66596: LD_ADDR_OWVAR 21
66600: PUSH
66601: LD_INT 3
66603: ST_TO_ADDR
// vc_chassis := 25 ;
66604: LD_ADDR_OWVAR 37
66608: PUSH
66609: LD_INT 25
66611: ST_TO_ADDR
// vc_engine := engine_siberite ;
66612: LD_ADDR_OWVAR 39
66616: PUSH
66617: LD_INT 3
66619: ST_TO_ADDR
// vc_control := control_computer ;
66620: LD_ADDR_OWVAR 38
66624: PUSH
66625: LD_INT 3
66627: ST_TO_ADDR
// vc_weapon := 59 ;
66628: LD_ADDR_OWVAR 40
66632: PUSH
66633: LD_INT 59
66635: ST_TO_ADDR
// result := CreateVehicle ;
66636: LD_ADDR_VAR 0 5
66640: PUSH
66641: CALL_OW 45
66645: ST_TO_ADDR
// SetDir ( result , d ) ;
66646: LD_VAR 0 5
66650: PPUSH
66651: LD_VAR 0 4
66655: PPUSH
66656: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66660: LD_VAR 0 5
66664: PPUSH
66665: LD_VAR 0 2
66669: PPUSH
66670: LD_VAR 0 3
66674: PPUSH
66675: LD_INT 0
66677: PPUSH
66678: CALL_OW 48
// end ;
66682: LD_VAR 0 5
66686: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66687: LD_INT 0
66689: PPUSH
66690: PPUSH
66691: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66692: LD_ADDR_VAR 0 2
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66715: LD_VAR 0 1
66719: NOT
66720: PUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 264
66730: PUSH
66731: LD_INT 12
66733: PUSH
66734: LD_INT 51
66736: PUSH
66737: LD_INT 32
66739: PUSH
66740: LD_INT 89
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: IN
66749: NOT
66750: OR
66751: IFFALSE 66755
// exit ;
66753: GO 66853
// for i := 1 to 3 do
66755: LD_ADDR_VAR 0 3
66759: PUSH
66760: DOUBLE
66761: LD_INT 1
66763: DEC
66764: ST_TO_ADDR
66765: LD_INT 3
66767: PUSH
66768: FOR_TO
66769: IFFALSE 66851
// begin tmp := GetCargo ( cargo , i ) ;
66771: LD_ADDR_VAR 0 4
66775: PUSH
66776: LD_VAR 0 1
66780: PPUSH
66781: LD_VAR 0 3
66785: PPUSH
66786: CALL_OW 289
66790: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66791: LD_ADDR_VAR 0 2
66795: PUSH
66796: LD_VAR 0 2
66800: PPUSH
66801: LD_VAR 0 3
66805: PPUSH
66806: LD_VAR 0 4
66810: PPUSH
66811: CALL_OW 1
66815: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66816: LD_ADDR_VAR 0 2
66820: PUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: LD_INT 4
66828: PPUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_INT 4
66836: ARRAY
66837: PUSH
66838: LD_VAR 0 4
66842: PLUS
66843: PPUSH
66844: CALL_OW 1
66848: ST_TO_ADDR
// end ;
66849: GO 66768
66851: POP
66852: POP
// end ;
66853: LD_VAR 0 2
66857: RET
// export function Length ( array ) ; begin
66858: LD_INT 0
66860: PPUSH
// result := array + 0 ;
66861: LD_ADDR_VAR 0 2
66865: PUSH
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 0
66873: PLUS
66874: ST_TO_ADDR
// end ;
66875: LD_VAR 0 2
66879: RET
// export function PrepareArray ( array ) ; begin
66880: LD_INT 0
66882: PPUSH
// result := array diff 0 ;
66883: LD_ADDR_VAR 0 2
66887: PUSH
66888: LD_VAR 0 1
66892: PUSH
66893: LD_INT 0
66895: DIFF
66896: ST_TO_ADDR
// if not result [ 1 ] then
66897: LD_VAR 0 2
66901: PUSH
66902: LD_INT 1
66904: ARRAY
66905: NOT
66906: IFFALSE 66926
// result := Delete ( result , 1 ) ;
66908: LD_ADDR_VAR 0 2
66912: PUSH
66913: LD_VAR 0 2
66917: PPUSH
66918: LD_INT 1
66920: PPUSH
66921: CALL_OW 3
66925: ST_TO_ADDR
// end ;
66926: LD_VAR 0 2
66930: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66931: LD_INT 0
66933: PPUSH
66934: PPUSH
66935: PPUSH
66936: PPUSH
// sibRocketRange := 25 ;
66937: LD_ADDR_VAR 0 6
66941: PUSH
66942: LD_INT 25
66944: ST_TO_ADDR
// result := false ;
66945: LD_ADDR_VAR 0 4
66949: PUSH
66950: LD_INT 0
66952: ST_TO_ADDR
// for i := 0 to 5 do
66953: LD_ADDR_VAR 0 5
66957: PUSH
66958: DOUBLE
66959: LD_INT 0
66961: DEC
66962: ST_TO_ADDR
66963: LD_INT 5
66965: PUSH
66966: FOR_TO
66967: IFFALSE 67034
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66969: LD_VAR 0 1
66973: PPUSH
66974: LD_VAR 0 5
66978: PPUSH
66979: LD_VAR 0 6
66983: PPUSH
66984: CALL_OW 272
66988: PPUSH
66989: LD_VAR 0 2
66993: PPUSH
66994: LD_VAR 0 5
66998: PPUSH
66999: LD_VAR 0 6
67003: PPUSH
67004: CALL_OW 273
67008: PPUSH
67009: LD_VAR 0 3
67013: PPUSH
67014: CALL_OW 309
67018: IFFALSE 67032
// begin result := true ;
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_INT 1
67027: ST_TO_ADDR
// exit ;
67028: POP
67029: POP
67030: GO 67036
// end ;
67032: GO 66966
67034: POP
67035: POP
// end ;
67036: LD_VAR 0 4
67040: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67041: LD_INT 0
67043: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67044: LD_VAR 0 1
67048: PPUSH
67049: LD_VAR 0 2
67053: PPUSH
67054: LD_INT 0
67056: PPUSH
67057: LD_INT 0
67059: PPUSH
67060: LD_INT 1
67062: PPUSH
67063: LD_INT 0
67065: PPUSH
67066: CALL_OW 587
// end ;
67070: LD_VAR 0 3
67074: RET
// export function CenterOnNow ( unit ) ; begin
67075: LD_INT 0
67077: PPUSH
// result := IsInUnit ( unit ) ;
67078: LD_ADDR_VAR 0 2
67082: PUSH
67083: LD_VAR 0 1
67087: PPUSH
67088: CALL_OW 310
67092: ST_TO_ADDR
// if not result then
67093: LD_VAR 0 2
67097: NOT
67098: IFFALSE 67110
// result := unit ;
67100: LD_ADDR_VAR 0 2
67104: PUSH
67105: LD_VAR 0 1
67109: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 87
// end ;
67119: LD_VAR 0 2
67123: RET
// export function ComMoveHex ( unit , hex ) ; begin
67124: LD_INT 0
67126: PPUSH
// if not hex then
67127: LD_VAR 0 2
67131: NOT
67132: IFFALSE 67136
// exit ;
67134: GO 67189
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67136: LD_VAR 0 2
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PPUSH
67145: LD_VAR 0 2
67149: PUSH
67150: LD_INT 2
67152: ARRAY
67153: PPUSH
67154: CALL_OW 428
67158: IFFALSE 67162
// exit ;
67160: GO 67189
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67162: LD_VAR 0 1
67166: PPUSH
67167: LD_VAR 0 2
67171: PUSH
67172: LD_INT 1
67174: ARRAY
67175: PPUSH
67176: LD_VAR 0 2
67180: PUSH
67181: LD_INT 2
67183: ARRAY
67184: PPUSH
67185: CALL_OW 111
// end ;
67189: LD_VAR 0 3
67193: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67194: LD_INT 0
67196: PPUSH
67197: PPUSH
67198: PPUSH
// if not unit or not enemy then
67199: LD_VAR 0 1
67203: NOT
67204: PUSH
67205: LD_VAR 0 2
67209: NOT
67210: OR
67211: IFFALSE 67215
// exit ;
67213: GO 67339
// x := GetX ( enemy ) ;
67215: LD_ADDR_VAR 0 4
67219: PUSH
67220: LD_VAR 0 2
67224: PPUSH
67225: CALL_OW 250
67229: ST_TO_ADDR
// y := GetY ( enemy ) ;
67230: LD_ADDR_VAR 0 5
67234: PUSH
67235: LD_VAR 0 2
67239: PPUSH
67240: CALL_OW 251
67244: ST_TO_ADDR
// if ValidHex ( x , y ) then
67245: LD_VAR 0 4
67249: PPUSH
67250: LD_VAR 0 5
67254: PPUSH
67255: CALL_OW 488
67259: IFFALSE 67339
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67261: LD_VAR 0 2
67265: PPUSH
67266: CALL_OW 247
67270: PUSH
67271: LD_INT 3
67273: PUSH
67274: LD_INT 2
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: IN
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: CALL_OW 255
67291: PPUSH
67292: LD_VAR 0 2
67296: PPUSH
67297: CALL_OW 292
67301: OR
67302: IFFALSE 67320
// ComAttackUnit ( unit , enemy ) else
67304: LD_VAR 0 1
67308: PPUSH
67309: LD_VAR 0 2
67313: PPUSH
67314: CALL_OW 115
67318: GO 67339
// ComAgressiveMove ( unit , x , y ) ;
67320: LD_VAR 0 1
67324: PPUSH
67325: LD_VAR 0 4
67329: PPUSH
67330: LD_VAR 0 5
67334: PPUSH
67335: CALL_OW 114
// end ;
67339: LD_VAR 0 3
67343: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
67348: PPUSH
// list := AreaToList ( area , 0 ) ;
67349: LD_ADDR_VAR 0 5
67353: PUSH
67354: LD_VAR 0 1
67358: PPUSH
67359: LD_INT 0
67361: PPUSH
67362: CALL_OW 517
67366: ST_TO_ADDR
// if not list then
67367: LD_VAR 0 5
67371: NOT
67372: IFFALSE 67376
// exit ;
67374: GO 67506
// if all then
67376: LD_VAR 0 2
67380: IFFALSE 67468
// begin for i := 1 to list [ 1 ] do
67382: LD_ADDR_VAR 0 4
67386: PUSH
67387: DOUBLE
67388: LD_INT 1
67390: DEC
67391: ST_TO_ADDR
67392: LD_VAR 0 5
67396: PUSH
67397: LD_INT 1
67399: ARRAY
67400: PUSH
67401: FOR_TO
67402: IFFALSE 67464
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67404: LD_ADDR_VAR 0 3
67408: PUSH
67409: LD_VAR 0 3
67413: PPUSH
67414: LD_VAR 0 3
67418: PUSH
67419: LD_INT 1
67421: PLUS
67422: PPUSH
67423: LD_VAR 0 5
67427: PUSH
67428: LD_INT 1
67430: ARRAY
67431: PUSH
67432: LD_VAR 0 4
67436: ARRAY
67437: PUSH
67438: LD_VAR 0 5
67442: PUSH
67443: LD_INT 2
67445: ARRAY
67446: PUSH
67447: LD_VAR 0 4
67451: ARRAY
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PPUSH
67457: CALL_OW 1
67461: ST_TO_ADDR
67462: GO 67401
67464: POP
67465: POP
// exit ;
67466: GO 67506
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67468: LD_ADDR_VAR 0 3
67472: PUSH
67473: LD_VAR 0 5
67477: PUSH
67478: LD_INT 1
67480: ARRAY
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PUSH
67486: LD_VAR 0 5
67490: PUSH
67491: LD_INT 2
67493: ARRAY
67494: PUSH
67495: LD_INT 1
67497: ARRAY
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: ST_TO_ADDR
// end ;
67506: LD_VAR 0 3
67510: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67511: LD_INT 0
67513: PPUSH
67514: PPUSH
// list := AreaToList ( area , 0 ) ;
67515: LD_ADDR_VAR 0 4
67519: PUSH
67520: LD_VAR 0 1
67524: PPUSH
67525: LD_INT 0
67527: PPUSH
67528: CALL_OW 517
67532: ST_TO_ADDR
// if not list then
67533: LD_VAR 0 4
67537: NOT
67538: IFFALSE 67542
// exit ;
67540: GO 67583
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67542: LD_ADDR_VAR 0 3
67546: PUSH
67547: LD_VAR 0 4
67551: PUSH
67552: LD_INT 1
67554: ARRAY
67555: PUSH
67556: LD_INT 1
67558: ARRAY
67559: PUSH
67560: LD_VAR 0 4
67564: PUSH
67565: LD_INT 2
67567: ARRAY
67568: PUSH
67569: LD_INT 1
67571: ARRAY
67572: PUSH
67573: LD_VAR 0 2
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: LIST
67582: ST_TO_ADDR
// end ;
67583: LD_VAR 0 3
67587: RET
// export function First ( array ) ; begin
67588: LD_INT 0
67590: PPUSH
// if not array then
67591: LD_VAR 0 1
67595: NOT
67596: IFFALSE 67600
// exit ;
67598: GO 67614
// result := array [ 1 ] ;
67600: LD_ADDR_VAR 0 2
67604: PUSH
67605: LD_VAR 0 1
67609: PUSH
67610: LD_INT 1
67612: ARRAY
67613: ST_TO_ADDR
// end ;
67614: LD_VAR 0 2
67618: RET
// export function Last ( array ) ; begin
67619: LD_INT 0
67621: PPUSH
// if not array then
67622: LD_VAR 0 1
67626: NOT
67627: IFFALSE 67631
// exit ;
67629: GO 67647
// result := array [ array ] ;
67631: LD_ADDR_VAR 0 2
67635: PUSH
67636: LD_VAR 0 1
67640: PUSH
67641: LD_VAR 0 1
67645: ARRAY
67646: ST_TO_ADDR
// end ;
67647: LD_VAR 0 2
67651: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67652: LD_INT 0
67654: PPUSH
67655: PPUSH
// result := [ ] ;
67656: LD_ADDR_VAR 0 5
67660: PUSH
67661: EMPTY
67662: ST_TO_ADDR
// if not array then
67663: LD_VAR 0 1
67667: NOT
67668: IFFALSE 67672
// exit ;
67670: GO 67784
// for i := 1 to array do
67672: LD_ADDR_VAR 0 6
67676: PUSH
67677: DOUBLE
67678: LD_INT 1
67680: DEC
67681: ST_TO_ADDR
67682: LD_VAR 0 1
67686: PUSH
67687: FOR_TO
67688: IFFALSE 67782
// if array [ i ] [ index ] = value then
67690: LD_VAR 0 1
67694: PUSH
67695: LD_VAR 0 6
67699: ARRAY
67700: PUSH
67701: LD_VAR 0 2
67705: ARRAY
67706: PUSH
67707: LD_VAR 0 3
67711: EQUAL
67712: IFFALSE 67780
// begin if indexColumn then
67714: LD_VAR 0 4
67718: IFFALSE 67754
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67720: LD_ADDR_VAR 0 5
67724: PUSH
67725: LD_VAR 0 5
67729: PPUSH
67730: LD_VAR 0 1
67734: PUSH
67735: LD_VAR 0 6
67739: ARRAY
67740: PUSH
67741: LD_VAR 0 4
67745: ARRAY
67746: PPUSH
67747: CALL 63122 0 2
67751: ST_TO_ADDR
67752: GO 67780
// result := Join ( result , array [ i ] ) ;
67754: LD_ADDR_VAR 0 5
67758: PUSH
67759: LD_VAR 0 5
67763: PPUSH
67764: LD_VAR 0 1
67768: PUSH
67769: LD_VAR 0 6
67773: ARRAY
67774: PPUSH
67775: CALL 63122 0 2
67779: ST_TO_ADDR
// end ;
67780: GO 67687
67782: POP
67783: POP
// end ;
67784: LD_VAR 0 5
67788: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67789: LD_INT 0
67791: PPUSH
67792: PPUSH
67793: PPUSH
// if btype = b_depot then
67794: LD_VAR 0 2
67798: PUSH
67799: LD_INT 0
67801: EQUAL
67802: IFFALSE 67814
// begin result := true ;
67804: LD_ADDR_VAR 0 3
67808: PUSH
67809: LD_INT 1
67811: ST_TO_ADDR
// exit ;
67812: GO 67930
// end ; pom := GetBase ( depot ) ;
67814: LD_ADDR_VAR 0 4
67818: PUSH
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL_OW 274
67828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67829: LD_ADDR_VAR 0 5
67833: PUSH
67834: LD_VAR 0 2
67838: PPUSH
67839: LD_VAR 0 1
67843: PPUSH
67844: CALL_OW 248
67848: PPUSH
67849: CALL_OW 450
67853: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67854: LD_ADDR_VAR 0 3
67858: PUSH
67859: LD_VAR 0 4
67863: PPUSH
67864: LD_INT 1
67866: PPUSH
67867: CALL_OW 275
67871: PUSH
67872: LD_VAR 0 5
67876: PUSH
67877: LD_INT 1
67879: ARRAY
67880: GREATEREQUAL
67881: PUSH
67882: LD_VAR 0 4
67886: PPUSH
67887: LD_INT 2
67889: PPUSH
67890: CALL_OW 275
67894: PUSH
67895: LD_VAR 0 5
67899: PUSH
67900: LD_INT 2
67902: ARRAY
67903: GREATEREQUAL
67904: AND
67905: PUSH
67906: LD_VAR 0 4
67910: PPUSH
67911: LD_INT 3
67913: PPUSH
67914: CALL_OW 275
67918: PUSH
67919: LD_VAR 0 5
67923: PUSH
67924: LD_INT 3
67926: ARRAY
67927: GREATEREQUAL
67928: AND
67929: ST_TO_ADDR
// end ;
67930: LD_VAR 0 3
67934: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67935: LD_INT 0
67937: PPUSH
// if not vehicles or not parkingPoint then
67938: LD_VAR 0 1
67942: NOT
67943: PUSH
67944: LD_VAR 0 2
67948: NOT
67949: OR
67950: IFFALSE 67954
// exit ;
67952: GO 68052
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67954: LD_ADDR_VAR 0 1
67958: PUSH
67959: LD_VAR 0 1
67963: PPUSH
67964: LD_INT 50
67966: PUSH
67967: EMPTY
67968: LIST
67969: PUSH
67970: LD_INT 3
67972: PUSH
67973: LD_INT 92
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 1
67983: ARRAY
67984: PUSH
67985: LD_VAR 0 2
67989: PUSH
67990: LD_INT 2
67992: ARRAY
67993: PUSH
67994: LD_INT 8
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PPUSH
68011: CALL_OW 72
68015: ST_TO_ADDR
// if not vehicles then
68016: LD_VAR 0 1
68020: NOT
68021: IFFALSE 68025
// exit ;
68023: GO 68052
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68025: LD_VAR 0 1
68029: PPUSH
68030: LD_VAR 0 2
68034: PUSH
68035: LD_INT 1
68037: ARRAY
68038: PPUSH
68039: LD_VAR 0 2
68043: PUSH
68044: LD_INT 2
68046: ARRAY
68047: PPUSH
68048: CALL_OW 111
// end ;
68052: LD_VAR 0 3
68056: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68057: LD_INT 0
68059: PPUSH
68060: PPUSH
68061: PPUSH
// if not side or not area then
68062: LD_VAR 0 1
68066: NOT
68067: PUSH
68068: LD_VAR 0 2
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68197
// tmp := AreaToList ( area , 0 ) ;
68078: LD_ADDR_VAR 0 5
68082: PUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: LD_INT 0
68090: PPUSH
68091: CALL_OW 517
68095: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68096: LD_ADDR_VAR 0 4
68100: PUSH
68101: DOUBLE
68102: LD_INT 1
68104: DEC
68105: ST_TO_ADDR
68106: LD_VAR 0 5
68110: PUSH
68111: LD_INT 1
68113: ARRAY
68114: PUSH
68115: FOR_TO
68116: IFFALSE 68195
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
68118: LD_VAR 0 5
68122: PUSH
68123: LD_INT 1
68125: ARRAY
68126: PUSH
68127: LD_VAR 0 4
68131: ARRAY
68132: PPUSH
68133: LD_VAR 0 5
68137: PUSH
68138: LD_INT 2
68140: ARRAY
68141: PUSH
68142: LD_VAR 0 4
68146: ARRAY
68147: PPUSH
68148: CALL_OW 351
68152: IFFALSE 68193
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68154: LD_VAR 0 5
68158: PUSH
68159: LD_INT 1
68161: ARRAY
68162: PUSH
68163: LD_VAR 0 4
68167: ARRAY
68168: PPUSH
68169: LD_VAR 0 5
68173: PUSH
68174: LD_INT 2
68176: ARRAY
68177: PUSH
68178: LD_VAR 0 4
68182: ARRAY
68183: PPUSH
68184: LD_VAR 0 1
68188: PPUSH
68189: CALL_OW 244
// end ;
68193: GO 68115
68195: POP
68196: POP
// end ; end_of_file
68197: LD_VAR 0 3
68201: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68202: LD_VAR 0 1
68206: PPUSH
68207: LD_VAR 0 2
68211: PPUSH
68212: LD_VAR 0 3
68216: PPUSH
68217: LD_VAR 0 4
68221: PPUSH
68222: LD_VAR 0 5
68226: PPUSH
68227: LD_VAR 0 6
68231: PPUSH
68232: CALL 4727 0 6
// end ;
68236: PPOPN 6
68238: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68239: LD_INT 0
68241: PPUSH
// begin if not units then
68242: LD_VAR 0 1
68246: NOT
68247: IFFALSE 68251
// exit ;
68249: GO 68251
// end ;
68251: PPOPN 7
68253: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68254: CALL 4614 0 0
// end ;
68258: PPOPN 1
68260: END
