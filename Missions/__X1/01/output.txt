// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// every 0 0$1 do
4304: GO 4306
4306: DISABLE
// begin enable ;
4307: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4308: LD_STRING updateTimer(
4310: PUSH
4311: LD_OWVAR 1
4315: STR
4316: PUSH
4317: LD_STRING );
4319: STR
4320: PPUSH
4321: CALL_OW 559
// end ;
4325: END
// on MapStart ( p ) do begin if streamModeActive then
4326: LD_EXP 23
4330: IFFALSE 4339
// DefineStreamItems ( true ) ;
4332: LD_INT 1
4334: PPUSH
4335: CALL 5987 0 1
// UpdateFactoryWaypoints ( ) ;
4339: CALL 19734 0 0
// end ;
4343: PPOPN 1
4345: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4346: LD_INT 0
4348: PPUSH
// if p2 = 100 then
4349: LD_VAR 0 2
4353: PUSH
4354: LD_INT 100
4356: EQUAL
4357: IFFALSE 5360
// begin if not StreamModeActive then
4359: LD_EXP 23
4363: NOT
4364: IFFALSE 4374
// StreamModeActive := true ;
4366: LD_ADDR_EXP 23
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// if p3 = 0 then
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 0
4381: EQUAL
4382: IFFALSE 4388
// InitStreamMode ;
4384: CALL 5523 0 0
// if p3 = 1 then
4388: LD_VAR 0 3
4392: PUSH
4393: LD_INT 1
4395: EQUAL
4396: IFFALSE 4406
// sRocket := true ;
4398: LD_ADDR_EXP 28
4402: PUSH
4403: LD_INT 1
4405: ST_TO_ADDR
// if p3 = 2 then
4406: LD_VAR 0 3
4410: PUSH
4411: LD_INT 2
4413: EQUAL
4414: IFFALSE 4424
// sSpeed := true ;
4416: LD_ADDR_EXP 27
4420: PUSH
4421: LD_INT 1
4423: ST_TO_ADDR
// if p3 = 3 then
4424: LD_VAR 0 3
4428: PUSH
4429: LD_INT 3
4431: EQUAL
4432: IFFALSE 4442
// sEngine := true ;
4434: LD_ADDR_EXP 29
4438: PUSH
4439: LD_INT 1
4441: ST_TO_ADDR
// if p3 = 4 then
4442: LD_VAR 0 3
4446: PUSH
4447: LD_INT 4
4449: EQUAL
4450: IFFALSE 4460
// sSpec := true ;
4452: LD_ADDR_EXP 26
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// if p3 = 5 then
4460: LD_VAR 0 3
4464: PUSH
4465: LD_INT 5
4467: EQUAL
4468: IFFALSE 4478
// sLevel := true ;
4470: LD_ADDR_EXP 30
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// if p3 = 6 then
4478: LD_VAR 0 3
4482: PUSH
4483: LD_INT 6
4485: EQUAL
4486: IFFALSE 4496
// sArmoury := true ;
4488: LD_ADDR_EXP 31
4492: PUSH
4493: LD_INT 1
4495: ST_TO_ADDR
// if p3 = 7 then
4496: LD_VAR 0 3
4500: PUSH
4501: LD_INT 7
4503: EQUAL
4504: IFFALSE 4514
// sRadar := true ;
4506: LD_ADDR_EXP 32
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// if p3 = 8 then
4514: LD_VAR 0 3
4518: PUSH
4519: LD_INT 8
4521: EQUAL
4522: IFFALSE 4532
// sBunker := true ;
4524: LD_ADDR_EXP 33
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// if p3 = 9 then
4532: LD_VAR 0 3
4536: PUSH
4537: LD_INT 9
4539: EQUAL
4540: IFFALSE 4550
// sHack := true ;
4542: LD_ADDR_EXP 34
4546: PUSH
4547: LD_INT 1
4549: ST_TO_ADDR
// if p3 = 10 then
4550: LD_VAR 0 3
4554: PUSH
4555: LD_INT 10
4557: EQUAL
4558: IFFALSE 4568
// sFire := true ;
4560: LD_ADDR_EXP 35
4564: PUSH
4565: LD_INT 1
4567: ST_TO_ADDR
// if p3 = 11 then
4568: LD_VAR 0 3
4572: PUSH
4573: LD_INT 11
4575: EQUAL
4576: IFFALSE 4586
// sRefresh := true ;
4578: LD_ADDR_EXP 36
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if p3 = 12 then
4586: LD_VAR 0 3
4590: PUSH
4591: LD_INT 12
4593: EQUAL
4594: IFFALSE 4604
// sExp := true ;
4596: LD_ADDR_EXP 37
4600: PUSH
4601: LD_INT 1
4603: ST_TO_ADDR
// if p3 = 13 then
4604: LD_VAR 0 3
4608: PUSH
4609: LD_INT 13
4611: EQUAL
4612: IFFALSE 4622
// sDepot := true ;
4614: LD_ADDR_EXP 38
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// if p3 = 14 then
4622: LD_VAR 0 3
4626: PUSH
4627: LD_INT 14
4629: EQUAL
4630: IFFALSE 4640
// sFlag := true ;
4632: LD_ADDR_EXP 39
4636: PUSH
4637: LD_INT 1
4639: ST_TO_ADDR
// if p3 = 15 then
4640: LD_VAR 0 3
4644: PUSH
4645: LD_INT 15
4647: EQUAL
4648: IFFALSE 4658
// sKamikadze := true ;
4650: LD_ADDR_EXP 47
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// if p3 = 16 then
4658: LD_VAR 0 3
4662: PUSH
4663: LD_INT 16
4665: EQUAL
4666: IFFALSE 4676
// sTroll := true ;
4668: LD_ADDR_EXP 48
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if p3 = 17 then
4676: LD_VAR 0 3
4680: PUSH
4681: LD_INT 17
4683: EQUAL
4684: IFFALSE 4694
// sSlow := true ;
4686: LD_ADDR_EXP 49
4690: PUSH
4691: LD_INT 1
4693: ST_TO_ADDR
// if p3 = 18 then
4694: LD_VAR 0 3
4698: PUSH
4699: LD_INT 18
4701: EQUAL
4702: IFFALSE 4712
// sLack := true ;
4704: LD_ADDR_EXP 50
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// if p3 = 19 then
4712: LD_VAR 0 3
4716: PUSH
4717: LD_INT 19
4719: EQUAL
4720: IFFALSE 4730
// sTank := true ;
4722: LD_ADDR_EXP 52
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// if p3 = 20 then
4730: LD_VAR 0 3
4734: PUSH
4735: LD_INT 20
4737: EQUAL
4738: IFFALSE 4748
// sRemote := true ;
4740: LD_ADDR_EXP 53
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// if p3 = 21 then
4748: LD_VAR 0 3
4752: PUSH
4753: LD_INT 21
4755: EQUAL
4756: IFFALSE 4766
// sPowell := true ;
4758: LD_ADDR_EXP 54
4762: PUSH
4763: LD_INT 1
4765: ST_TO_ADDR
// if p3 = 22 then
4766: LD_VAR 0 3
4770: PUSH
4771: LD_INT 22
4773: EQUAL
4774: IFFALSE 4784
// sTeleport := true ;
4776: LD_ADDR_EXP 57
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// if p3 = 23 then
4784: LD_VAR 0 3
4788: PUSH
4789: LD_INT 23
4791: EQUAL
4792: IFFALSE 4802
// sOilTower := true ;
4794: LD_ADDR_EXP 59
4798: PUSH
4799: LD_INT 1
4801: ST_TO_ADDR
// if p3 = 24 then
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 24
4809: EQUAL
4810: IFFALSE 4820
// sShovel := true ;
4812: LD_ADDR_EXP 60
4816: PUSH
4817: LD_INT 1
4819: ST_TO_ADDR
// if p3 = 25 then
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 25
4827: EQUAL
4828: IFFALSE 4838
// sSheik := true ;
4830: LD_ADDR_EXP 61
4834: PUSH
4835: LD_INT 1
4837: ST_TO_ADDR
// if p3 = 26 then
4838: LD_VAR 0 3
4842: PUSH
4843: LD_INT 26
4845: EQUAL
4846: IFFALSE 4856
// sEarthquake := true ;
4848: LD_ADDR_EXP 63
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// if p3 = 27 then
4856: LD_VAR 0 3
4860: PUSH
4861: LD_INT 27
4863: EQUAL
4864: IFFALSE 4874
// sAI := true ;
4866: LD_ADDR_EXP 64
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// if p3 = 28 then
4874: LD_VAR 0 3
4878: PUSH
4879: LD_INT 28
4881: EQUAL
4882: IFFALSE 4892
// sCargo := true ;
4884: LD_ADDR_EXP 67
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// if p3 = 29 then
4892: LD_VAR 0 3
4896: PUSH
4897: LD_INT 29
4899: EQUAL
4900: IFFALSE 4910
// sDLaser := true ;
4902: LD_ADDR_EXP 68
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// if p3 = 30 then
4910: LD_VAR 0 3
4914: PUSH
4915: LD_INT 30
4917: EQUAL
4918: IFFALSE 4928
// sExchange := true ;
4920: LD_ADDR_EXP 69
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// if p3 = 31 then
4928: LD_VAR 0 3
4932: PUSH
4933: LD_INT 31
4935: EQUAL
4936: IFFALSE 4946
// sFac := true ;
4938: LD_ADDR_EXP 70
4942: PUSH
4943: LD_INT 1
4945: ST_TO_ADDR
// if p3 = 32 then
4946: LD_VAR 0 3
4950: PUSH
4951: LD_INT 32
4953: EQUAL
4954: IFFALSE 4964
// sPower := true ;
4956: LD_ADDR_EXP 71
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// if p3 = 33 then
4964: LD_VAR 0 3
4968: PUSH
4969: LD_INT 33
4971: EQUAL
4972: IFFALSE 4982
// sRandom := true ;
4974: LD_ADDR_EXP 72
4978: PUSH
4979: LD_INT 1
4981: ST_TO_ADDR
// if p3 = 34 then
4982: LD_VAR 0 3
4986: PUSH
4987: LD_INT 34
4989: EQUAL
4990: IFFALSE 5000
// sShield := true ;
4992: LD_ADDR_EXP 73
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// if p3 = 35 then
5000: LD_VAR 0 3
5004: PUSH
5005: LD_INT 35
5007: EQUAL
5008: IFFALSE 5018
// sTime := true ;
5010: LD_ADDR_EXP 74
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if p3 = 36 then
5018: LD_VAR 0 3
5022: PUSH
5023: LD_INT 36
5025: EQUAL
5026: IFFALSE 5036
// sTools := true ;
5028: LD_ADDR_EXP 75
5032: PUSH
5033: LD_INT 1
5035: ST_TO_ADDR
// if p3 = 101 then
5036: LD_VAR 0 3
5040: PUSH
5041: LD_INT 101
5043: EQUAL
5044: IFFALSE 5054
// sSold := true ;
5046: LD_ADDR_EXP 40
5050: PUSH
5051: LD_INT 1
5053: ST_TO_ADDR
// if p3 = 102 then
5054: LD_VAR 0 3
5058: PUSH
5059: LD_INT 102
5061: EQUAL
5062: IFFALSE 5072
// sDiff := true ;
5064: LD_ADDR_EXP 41
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// if p3 = 103 then
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 103
5079: EQUAL
5080: IFFALSE 5090
// sFog := true ;
5082: LD_ADDR_EXP 44
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// if p3 = 104 then
5090: LD_VAR 0 3
5094: PUSH
5095: LD_INT 104
5097: EQUAL
5098: IFFALSE 5108
// sReset := true ;
5100: LD_ADDR_EXP 45
5104: PUSH
5105: LD_INT 1
5107: ST_TO_ADDR
// if p3 = 105 then
5108: LD_VAR 0 3
5112: PUSH
5113: LD_INT 105
5115: EQUAL
5116: IFFALSE 5126
// sSun := true ;
5118: LD_ADDR_EXP 46
5122: PUSH
5123: LD_INT 1
5125: ST_TO_ADDR
// if p3 = 106 then
5126: LD_VAR 0 3
5130: PUSH
5131: LD_INT 106
5133: EQUAL
5134: IFFALSE 5144
// sTiger := true ;
5136: LD_ADDR_EXP 42
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// if p3 = 107 then
5144: LD_VAR 0 3
5148: PUSH
5149: LD_INT 107
5151: EQUAL
5152: IFFALSE 5162
// sBomb := true ;
5154: LD_ADDR_EXP 43
5158: PUSH
5159: LD_INT 1
5161: ST_TO_ADDR
// if p3 = 108 then
5162: LD_VAR 0 3
5166: PUSH
5167: LD_INT 108
5169: EQUAL
5170: IFFALSE 5180
// sWound := true ;
5172: LD_ADDR_EXP 51
5176: PUSH
5177: LD_INT 1
5179: ST_TO_ADDR
// if p3 = 109 then
5180: LD_VAR 0 3
5184: PUSH
5185: LD_INT 109
5187: EQUAL
5188: IFFALSE 5198
// sBetray := true ;
5190: LD_ADDR_EXP 55
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// if p3 = 110 then
5198: LD_VAR 0 3
5202: PUSH
5203: LD_INT 110
5205: EQUAL
5206: IFFALSE 5216
// sContamin := true ;
5208: LD_ADDR_EXP 56
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// if p3 = 111 then
5216: LD_VAR 0 3
5220: PUSH
5221: LD_INT 111
5223: EQUAL
5224: IFFALSE 5234
// sOil := true ;
5226: LD_ADDR_EXP 58
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// if p3 = 112 then
5234: LD_VAR 0 3
5238: PUSH
5239: LD_INT 112
5241: EQUAL
5242: IFFALSE 5252
// sStu := true ;
5244: LD_ADDR_EXP 62
5248: PUSH
5249: LD_INT 1
5251: ST_TO_ADDR
// if p3 = 113 then
5252: LD_VAR 0 3
5256: PUSH
5257: LD_INT 113
5259: EQUAL
5260: IFFALSE 5270
// sBazooka := true ;
5262: LD_ADDR_EXP 65
5266: PUSH
5267: LD_INT 1
5269: ST_TO_ADDR
// if p3 = 114 then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_INT 114
5277: EQUAL
5278: IFFALSE 5288
// sMortar := true ;
5280: LD_ADDR_EXP 66
5284: PUSH
5285: LD_INT 1
5287: ST_TO_ADDR
// if p3 = 115 then
5288: LD_VAR 0 3
5292: PUSH
5293: LD_INT 115
5295: EQUAL
5296: IFFALSE 5306
// sRanger := true ;
5298: LD_ADDR_EXP 76
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// if p3 = 116 then
5306: LD_VAR 0 3
5310: PUSH
5311: LD_INT 116
5313: EQUAL
5314: IFFALSE 5324
// sComputer := true ;
5316: LD_ADDR_EXP 77
5320: PUSH
5321: LD_INT 1
5323: ST_TO_ADDR
// if p3 = 117 then
5324: LD_VAR 0 3
5328: PUSH
5329: LD_INT 117
5331: EQUAL
5332: IFFALSE 5342
// s30 := true ;
5334: LD_ADDR_EXP 78
5338: PUSH
5339: LD_INT 1
5341: ST_TO_ADDR
// if p3 = 118 then
5342: LD_VAR 0 3
5346: PUSH
5347: LD_INT 118
5349: EQUAL
5350: IFFALSE 5360
// s60 := true ;
5352: LD_ADDR_EXP 79
5356: PUSH
5357: LD_INT 1
5359: ST_TO_ADDR
// end ; if p2 = 101 then
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 101
5367: EQUAL
5368: IFFALSE 5496
// begin case p3 of 1 :
5370: LD_VAR 0 3
5374: PUSH
5375: LD_INT 1
5377: DOUBLE
5378: EQUAL
5379: IFTRUE 5383
5381: GO 5390
5383: POP
// hHackUnlimitedResources ; 2 :
5384: CALL 17594 0 0
5388: GO 5496
5390: LD_INT 2
5392: DOUBLE
5393: EQUAL
5394: IFTRUE 5398
5396: GO 5405
5398: POP
// hHackSetLevel10 ; 3 :
5399: CALL 17727 0 0
5403: GO 5496
5405: LD_INT 3
5407: DOUBLE
5408: EQUAL
5409: IFTRUE 5413
5411: GO 5420
5413: POP
// hHackSetLevel10YourUnits ; 4 :
5414: CALL 17812 0 0
5418: GO 5496
5420: LD_INT 4
5422: DOUBLE
5423: EQUAL
5424: IFTRUE 5428
5426: GO 5435
5428: POP
// hHackInvincible ; 5 :
5429: CALL 18260 0 0
5433: GO 5496
5435: LD_INT 5
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5450
5443: POP
// hHackInvisible ; 6 :
5444: CALL 18371 0 0
5448: GO 5496
5450: LD_INT 6
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5465
5458: POP
// hHackChangeYourSide ; 7 :
5459: CALL 18428 0 0
5463: GO 5496
5465: LD_INT 7
5467: DOUBLE
5468: EQUAL
5469: IFTRUE 5473
5471: GO 5480
5473: POP
// hHackChangeUnitSide ; 8 :
5474: CALL 18470 0 0
5478: GO 5496
5480: LD_INT 8
5482: DOUBLE
5483: EQUAL
5484: IFTRUE 5488
5486: GO 5495
5488: POP
// hHackFog ; end ;
5489: CALL 18571 0 0
5493: GO 5496
5495: POP
// end ; end ;
5496: LD_VAR 0 7
5500: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5501: GO 5503
5503: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5504: LD_STRING initStreamRollete();
5506: PPUSH
5507: CALL_OW 559
// InitStreamMode ;
5511: CALL 5523 0 0
// DefineStreamItems ( false ) ;
5515: LD_INT 0
5517: PPUSH
5518: CALL 5987 0 1
// end ;
5522: END
// function InitStreamMode ; begin
5523: LD_INT 0
5525: PPUSH
// streamModeActive := false ;
5526: LD_ADDR_EXP 23
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// normalCounter := 36 ;
5534: LD_ADDR_EXP 24
5538: PUSH
5539: LD_INT 36
5541: ST_TO_ADDR
// hardcoreCounter := 18 ;
5542: LD_ADDR_EXP 25
5546: PUSH
5547: LD_INT 18
5549: ST_TO_ADDR
// sRocket := false ;
5550: LD_ADDR_EXP 28
5554: PUSH
5555: LD_INT 0
5557: ST_TO_ADDR
// sSpeed := false ;
5558: LD_ADDR_EXP 27
5562: PUSH
5563: LD_INT 0
5565: ST_TO_ADDR
// sEngine := false ;
5566: LD_ADDR_EXP 29
5570: PUSH
5571: LD_INT 0
5573: ST_TO_ADDR
// sSpec := false ;
5574: LD_ADDR_EXP 26
5578: PUSH
5579: LD_INT 0
5581: ST_TO_ADDR
// sLevel := false ;
5582: LD_ADDR_EXP 30
5586: PUSH
5587: LD_INT 0
5589: ST_TO_ADDR
// sArmoury := false ;
5590: LD_ADDR_EXP 31
5594: PUSH
5595: LD_INT 0
5597: ST_TO_ADDR
// sRadar := false ;
5598: LD_ADDR_EXP 32
5602: PUSH
5603: LD_INT 0
5605: ST_TO_ADDR
// sBunker := false ;
5606: LD_ADDR_EXP 33
5610: PUSH
5611: LD_INT 0
5613: ST_TO_ADDR
// sHack := false ;
5614: LD_ADDR_EXP 34
5618: PUSH
5619: LD_INT 0
5621: ST_TO_ADDR
// sFire := false ;
5622: LD_ADDR_EXP 35
5626: PUSH
5627: LD_INT 0
5629: ST_TO_ADDR
// sRefresh := false ;
5630: LD_ADDR_EXP 36
5634: PUSH
5635: LD_INT 0
5637: ST_TO_ADDR
// sExp := false ;
5638: LD_ADDR_EXP 37
5642: PUSH
5643: LD_INT 0
5645: ST_TO_ADDR
// sDepot := false ;
5646: LD_ADDR_EXP 38
5650: PUSH
5651: LD_INT 0
5653: ST_TO_ADDR
// sFlag := false ;
5654: LD_ADDR_EXP 39
5658: PUSH
5659: LD_INT 0
5661: ST_TO_ADDR
// sKamikadze := false ;
5662: LD_ADDR_EXP 47
5666: PUSH
5667: LD_INT 0
5669: ST_TO_ADDR
// sTroll := false ;
5670: LD_ADDR_EXP 48
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// sSlow := false ;
5678: LD_ADDR_EXP 49
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// sLack := false ;
5686: LD_ADDR_EXP 50
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// sTank := false ;
5694: LD_ADDR_EXP 52
5698: PUSH
5699: LD_INT 0
5701: ST_TO_ADDR
// sRemote := false ;
5702: LD_ADDR_EXP 53
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// sPowell := false ;
5710: LD_ADDR_EXP 54
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// sTeleport := false ;
5718: LD_ADDR_EXP 57
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// sOilTower := false ;
5726: LD_ADDR_EXP 59
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// sShovel := false ;
5734: LD_ADDR_EXP 60
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// sSheik := false ;
5742: LD_ADDR_EXP 61
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// sEarthquake := false ;
5750: LD_ADDR_EXP 63
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// sAI := false ;
5758: LD_ADDR_EXP 64
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
// sCargo := false ;
5766: LD_ADDR_EXP 67
5770: PUSH
5771: LD_INT 0
5773: ST_TO_ADDR
// sDLaser := false ;
5774: LD_ADDR_EXP 68
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
// sExchange := false ;
5782: LD_ADDR_EXP 69
5786: PUSH
5787: LD_INT 0
5789: ST_TO_ADDR
// sFac := false ;
5790: LD_ADDR_EXP 70
5794: PUSH
5795: LD_INT 0
5797: ST_TO_ADDR
// sPower := false ;
5798: LD_ADDR_EXP 71
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// sRandom := false ;
5806: LD_ADDR_EXP 72
5810: PUSH
5811: LD_INT 0
5813: ST_TO_ADDR
// sShield := false ;
5814: LD_ADDR_EXP 73
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// sTime := false ;
5822: LD_ADDR_EXP 74
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// sTools := false ;
5830: LD_ADDR_EXP 75
5834: PUSH
5835: LD_INT 0
5837: ST_TO_ADDR
// sSold := false ;
5838: LD_ADDR_EXP 40
5842: PUSH
5843: LD_INT 0
5845: ST_TO_ADDR
// sDiff := false ;
5846: LD_ADDR_EXP 41
5850: PUSH
5851: LD_INT 0
5853: ST_TO_ADDR
// sFog := false ;
5854: LD_ADDR_EXP 44
5858: PUSH
5859: LD_INT 0
5861: ST_TO_ADDR
// sReset := false ;
5862: LD_ADDR_EXP 45
5866: PUSH
5867: LD_INT 0
5869: ST_TO_ADDR
// sSun := false ;
5870: LD_ADDR_EXP 46
5874: PUSH
5875: LD_INT 0
5877: ST_TO_ADDR
// sTiger := false ;
5878: LD_ADDR_EXP 42
5882: PUSH
5883: LD_INT 0
5885: ST_TO_ADDR
// sBomb := false ;
5886: LD_ADDR_EXP 43
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// sWound := false ;
5894: LD_ADDR_EXP 51
5898: PUSH
5899: LD_INT 0
5901: ST_TO_ADDR
// sBetray := false ;
5902: LD_ADDR_EXP 55
5906: PUSH
5907: LD_INT 0
5909: ST_TO_ADDR
// sContamin := false ;
5910: LD_ADDR_EXP 56
5914: PUSH
5915: LD_INT 0
5917: ST_TO_ADDR
// sOil := false ;
5918: LD_ADDR_EXP 58
5922: PUSH
5923: LD_INT 0
5925: ST_TO_ADDR
// sStu := false ;
5926: LD_ADDR_EXP 62
5930: PUSH
5931: LD_INT 0
5933: ST_TO_ADDR
// sBazooka := false ;
5934: LD_ADDR_EXP 65
5938: PUSH
5939: LD_INT 0
5941: ST_TO_ADDR
// sMortar := false ;
5942: LD_ADDR_EXP 66
5946: PUSH
5947: LD_INT 0
5949: ST_TO_ADDR
// sRanger := false ;
5950: LD_ADDR_EXP 76
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// sComputer := false ;
5958: LD_ADDR_EXP 77
5962: PUSH
5963: LD_INT 0
5965: ST_TO_ADDR
// s30 := false ;
5966: LD_ADDR_EXP 78
5970: PUSH
5971: LD_INT 0
5973: ST_TO_ADDR
// s60 := false ;
5974: LD_ADDR_EXP 79
5978: PUSH
5979: LD_INT 0
5981: ST_TO_ADDR
// end ;
5982: LD_VAR 0 1
5986: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5987: LD_INT 0
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
// result := [ ] ;
5996: LD_ADDR_VAR 0 2
6000: PUSH
6001: EMPTY
6002: ST_TO_ADDR
// if campaign_id = 1 then
6003: LD_OWVAR 69
6007: PUSH
6008: LD_INT 1
6010: EQUAL
6011: IFFALSE 9177
// begin case mission_number of 1 :
6013: LD_OWVAR 70
6017: PUSH
6018: LD_INT 1
6020: DOUBLE
6021: EQUAL
6022: IFTRUE 6026
6024: GO 6102
6026: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 2
6034: PUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 23
6055: PUSH
6056: LD_INT 26
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 101
6072: PUSH
6073: LD_INT 102
6075: PUSH
6076: LD_INT 106
6078: PUSH
6079: LD_INT 116
6081: PUSH
6082: LD_INT 117
6084: PUSH
6085: LD_INT 118
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: ST_TO_ADDR
6100: GO 9175
6102: LD_INT 2
6104: DOUBLE
6105: EQUAL
6106: IFTRUE 6110
6108: GO 6194
6110: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6111: LD_ADDR_VAR 0 2
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 11
6124: PUSH
6125: LD_INT 12
6127: PUSH
6128: LD_INT 15
6130: PUSH
6131: LD_INT 16
6133: PUSH
6134: LD_INT 22
6136: PUSH
6137: LD_INT 23
6139: PUSH
6140: LD_INT 26
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: PUSH
6154: LD_INT 101
6156: PUSH
6157: LD_INT 102
6159: PUSH
6160: LD_INT 105
6162: PUSH
6163: LD_INT 106
6165: PUSH
6166: LD_INT 108
6168: PUSH
6169: LD_INT 116
6171: PUSH
6172: LD_INT 117
6174: PUSH
6175: LD_INT 118
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: ST_TO_ADDR
6192: GO 9175
6194: LD_INT 3
6196: DOUBLE
6197: EQUAL
6198: IFTRUE 6202
6200: GO 6290
6202: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: LD_INT 2
6210: PUSH
6211: LD_INT 4
6213: PUSH
6214: LD_INT 5
6216: PUSH
6217: LD_INT 11
6219: PUSH
6220: LD_INT 12
6222: PUSH
6223: LD_INT 15
6225: PUSH
6226: LD_INT 16
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 26
6234: PUSH
6235: LD_INT 36
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 101
6252: PUSH
6253: LD_INT 102
6255: PUSH
6256: LD_INT 105
6258: PUSH
6259: LD_INT 106
6261: PUSH
6262: LD_INT 108
6264: PUSH
6265: LD_INT 116
6267: PUSH
6268: LD_INT 117
6270: PUSH
6271: LD_INT 118
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: ST_TO_ADDR
6288: GO 9175
6290: LD_INT 4
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6394
6298: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6299: LD_ADDR_VAR 0 2
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: LD_INT 8
6315: PUSH
6316: LD_INT 11
6318: PUSH
6319: LD_INT 12
6321: PUSH
6322: LD_INT 15
6324: PUSH
6325: LD_INT 16
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_INT 23
6333: PUSH
6334: LD_INT 26
6336: PUSH
6337: LD_INT 36
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 101
6356: PUSH
6357: LD_INT 102
6359: PUSH
6360: LD_INT 105
6362: PUSH
6363: LD_INT 106
6365: PUSH
6366: LD_INT 108
6368: PUSH
6369: LD_INT 116
6371: PUSH
6372: LD_INT 117
6374: PUSH
6375: LD_INT 118
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: ST_TO_ADDR
6392: GO 9175
6394: LD_INT 5
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6514
6402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6403: LD_ADDR_VAR 0 2
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 5
6416: PUSH
6417: LD_INT 6
6419: PUSH
6420: LD_INT 8
6422: PUSH
6423: LD_INT 11
6425: PUSH
6426: LD_INT 12
6428: PUSH
6429: LD_INT 15
6431: PUSH
6432: LD_INT 16
6434: PUSH
6435: LD_INT 22
6437: PUSH
6438: LD_INT 23
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 26
6446: PUSH
6447: LD_INT 36
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 101
6468: PUSH
6469: LD_INT 102
6471: PUSH
6472: LD_INT 105
6474: PUSH
6475: LD_INT 106
6477: PUSH
6478: LD_INT 108
6480: PUSH
6481: LD_INT 109
6483: PUSH
6484: LD_INT 112
6486: PUSH
6487: LD_INT 116
6489: PUSH
6490: LD_INT 117
6492: PUSH
6493: LD_INT 118
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: ST_TO_ADDR
6512: GO 9175
6514: LD_INT 6
6516: DOUBLE
6517: EQUAL
6518: IFTRUE 6522
6520: GO 6654
6522: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: LD_INT 2
6530: PUSH
6531: LD_INT 4
6533: PUSH
6534: LD_INT 5
6536: PUSH
6537: LD_INT 6
6539: PUSH
6540: LD_INT 8
6542: PUSH
6543: LD_INT 11
6545: PUSH
6546: LD_INT 12
6548: PUSH
6549: LD_INT 15
6551: PUSH
6552: LD_INT 16
6554: PUSH
6555: LD_INT 20
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_INT 23
6566: PUSH
6567: LD_INT 25
6569: PUSH
6570: LD_INT 26
6572: PUSH
6573: LD_INT 30
6575: PUSH
6576: LD_INT 31
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 36
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 101
6608: PUSH
6609: LD_INT 102
6611: PUSH
6612: LD_INT 105
6614: PUSH
6615: LD_INT 106
6617: PUSH
6618: LD_INT 108
6620: PUSH
6621: LD_INT 109
6623: PUSH
6624: LD_INT 112
6626: PUSH
6627: LD_INT 116
6629: PUSH
6630: LD_INT 117
6632: PUSH
6633: LD_INT 118
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: ST_TO_ADDR
6652: GO 9175
6654: LD_INT 7
6656: DOUBLE
6657: EQUAL
6658: IFTRUE 6662
6660: GO 6774
6662: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 4
6673: PUSH
6674: LD_INT 5
6676: PUSH
6677: LD_INT 7
6679: PUSH
6680: LD_INT 11
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 15
6688: PUSH
6689: LD_INT 16
6691: PUSH
6692: LD_INT 20
6694: PUSH
6695: LD_INT 21
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 23
6703: PUSH
6704: LD_INT 25
6706: PUSH
6707: LD_INT 26
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 101
6728: PUSH
6729: LD_INT 102
6731: PUSH
6732: LD_INT 103
6734: PUSH
6735: LD_INT 105
6737: PUSH
6738: LD_INT 106
6740: PUSH
6741: LD_INT 108
6743: PUSH
6744: LD_INT 112
6746: PUSH
6747: LD_INT 116
6749: PUSH
6750: LD_INT 117
6752: PUSH
6753: LD_INT 118
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9175
6774: LD_INT 8
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6922
6782: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 6
6799: PUSH
6800: LD_INT 7
6802: PUSH
6803: LD_INT 8
6805: PUSH
6806: LD_INT 11
6808: PUSH
6809: LD_INT 12
6811: PUSH
6812: LD_INT 15
6814: PUSH
6815: LD_INT 16
6817: PUSH
6818: LD_INT 20
6820: PUSH
6821: LD_INT 21
6823: PUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 23
6829: PUSH
6830: LD_INT 25
6832: PUSH
6833: LD_INT 26
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: LD_INT 31
6841: PUSH
6842: LD_INT 32
6844: PUSH
6845: LD_INT 36
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 101
6872: PUSH
6873: LD_INT 102
6875: PUSH
6876: LD_INT 103
6878: PUSH
6879: LD_INT 105
6881: PUSH
6882: LD_INT 106
6884: PUSH
6885: LD_INT 108
6887: PUSH
6888: LD_INT 109
6890: PUSH
6891: LD_INT 112
6893: PUSH
6894: LD_INT 116
6896: PUSH
6897: LD_INT 117
6899: PUSH
6900: LD_INT 118
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: ST_TO_ADDR
6920: GO 9175
6922: LD_INT 9
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 7078
6930: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_INT 2
6938: PUSH
6939: LD_INT 4
6941: PUSH
6942: LD_INT 5
6944: PUSH
6945: LD_INT 6
6947: PUSH
6948: LD_INT 7
6950: PUSH
6951: LD_INT 8
6953: PUSH
6954: LD_INT 11
6956: PUSH
6957: LD_INT 12
6959: PUSH
6960: LD_INT 15
6962: PUSH
6963: LD_INT 16
6965: PUSH
6966: LD_INT 20
6968: PUSH
6969: LD_INT 21
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 23
6977: PUSH
6978: LD_INT 25
6980: PUSH
6981: LD_INT 26
6983: PUSH
6984: LD_INT 28
6986: PUSH
6987: LD_INT 30
6989: PUSH
6990: LD_INT 31
6992: PUSH
6993: LD_INT 32
6995: PUSH
6996: LD_INT 36
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 101
7024: PUSH
7025: LD_INT 102
7027: PUSH
7028: LD_INT 103
7030: PUSH
7031: LD_INT 105
7033: PUSH
7034: LD_INT 106
7036: PUSH
7037: LD_INT 108
7039: PUSH
7040: LD_INT 109
7042: PUSH
7043: LD_INT 112
7045: PUSH
7046: LD_INT 114
7048: PUSH
7049: LD_INT 116
7051: PUSH
7052: LD_INT 117
7054: PUSH
7055: LD_INT 118
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: ST_TO_ADDR
7076: GO 9175
7078: LD_INT 10
7080: DOUBLE
7081: EQUAL
7082: IFTRUE 7086
7084: GO 7282
7086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7087: LD_ADDR_VAR 0 2
7091: PUSH
7092: LD_INT 2
7094: PUSH
7095: LD_INT 4
7097: PUSH
7098: LD_INT 5
7100: PUSH
7101: LD_INT 6
7103: PUSH
7104: LD_INT 7
7106: PUSH
7107: LD_INT 8
7109: PUSH
7110: LD_INT 9
7112: PUSH
7113: LD_INT 10
7115: PUSH
7116: LD_INT 11
7118: PUSH
7119: LD_INT 12
7121: PUSH
7122: LD_INT 13
7124: PUSH
7125: LD_INT 14
7127: PUSH
7128: LD_INT 15
7130: PUSH
7131: LD_INT 16
7133: PUSH
7134: LD_INT 17
7136: PUSH
7137: LD_INT 18
7139: PUSH
7140: LD_INT 19
7142: PUSH
7143: LD_INT 20
7145: PUSH
7146: LD_INT 21
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_INT 23
7154: PUSH
7155: LD_INT 24
7157: PUSH
7158: LD_INT 25
7160: PUSH
7161: LD_INT 26
7163: PUSH
7164: LD_INT 28
7166: PUSH
7167: LD_INT 30
7169: PUSH
7170: LD_INT 31
7172: PUSH
7173: LD_INT 32
7175: PUSH
7176: LD_INT 36
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 101
7212: PUSH
7213: LD_INT 102
7215: PUSH
7216: LD_INT 103
7218: PUSH
7219: LD_INT 104
7221: PUSH
7222: LD_INT 105
7224: PUSH
7225: LD_INT 106
7227: PUSH
7228: LD_INT 107
7230: PUSH
7231: LD_INT 108
7233: PUSH
7234: LD_INT 109
7236: PUSH
7237: LD_INT 110
7239: PUSH
7240: LD_INT 111
7242: PUSH
7243: LD_INT 112
7245: PUSH
7246: LD_INT 114
7248: PUSH
7249: LD_INT 116
7251: PUSH
7252: LD_INT 117
7254: PUSH
7255: LD_INT 118
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 9175
7282: LD_INT 11
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7494
7290: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 4
7304: PUSH
7305: LD_INT 5
7307: PUSH
7308: LD_INT 6
7310: PUSH
7311: LD_INT 7
7313: PUSH
7314: LD_INT 8
7316: PUSH
7317: LD_INT 9
7319: PUSH
7320: LD_INT 10
7322: PUSH
7323: LD_INT 11
7325: PUSH
7326: LD_INT 12
7328: PUSH
7329: LD_INT 13
7331: PUSH
7332: LD_INT 14
7334: PUSH
7335: LD_INT 15
7337: PUSH
7338: LD_INT 16
7340: PUSH
7341: LD_INT 17
7343: PUSH
7344: LD_INT 18
7346: PUSH
7347: LD_INT 19
7349: PUSH
7350: LD_INT 20
7352: PUSH
7353: LD_INT 21
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 23
7361: PUSH
7362: LD_INT 24
7364: PUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 26
7370: PUSH
7371: LD_INT 28
7373: PUSH
7374: LD_INT 30
7376: PUSH
7377: LD_INT 31
7379: PUSH
7380: LD_INT 32
7382: PUSH
7383: LD_INT 34
7385: PUSH
7386: LD_INT 36
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 101
7424: PUSH
7425: LD_INT 102
7427: PUSH
7428: LD_INT 103
7430: PUSH
7431: LD_INT 104
7433: PUSH
7434: LD_INT 105
7436: PUSH
7437: LD_INT 106
7439: PUSH
7440: LD_INT 107
7442: PUSH
7443: LD_INT 108
7445: PUSH
7446: LD_INT 109
7448: PUSH
7449: LD_INT 110
7451: PUSH
7452: LD_INT 111
7454: PUSH
7455: LD_INT 112
7457: PUSH
7458: LD_INT 114
7460: PUSH
7461: LD_INT 116
7463: PUSH
7464: LD_INT 117
7466: PUSH
7467: LD_INT 118
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: ST_TO_ADDR
7492: GO 9175
7494: LD_INT 12
7496: DOUBLE
7497: EQUAL
7498: IFTRUE 7502
7500: GO 7722
7502: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7503: LD_ADDR_VAR 0 2
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: LD_INT 4
7519: PUSH
7520: LD_INT 5
7522: PUSH
7523: LD_INT 6
7525: PUSH
7526: LD_INT 7
7528: PUSH
7529: LD_INT 8
7531: PUSH
7532: LD_INT 9
7534: PUSH
7535: LD_INT 10
7537: PUSH
7538: LD_INT 11
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: LD_INT 13
7546: PUSH
7547: LD_INT 14
7549: PUSH
7550: LD_INT 15
7552: PUSH
7553: LD_INT 16
7555: PUSH
7556: LD_INT 17
7558: PUSH
7559: LD_INT 18
7561: PUSH
7562: LD_INT 19
7564: PUSH
7565: LD_INT 20
7567: PUSH
7568: LD_INT 21
7570: PUSH
7571: LD_INT 22
7573: PUSH
7574: LD_INT 23
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 25
7582: PUSH
7583: LD_INT 26
7585: PUSH
7586: LD_INT 27
7588: PUSH
7589: LD_INT 28
7591: PUSH
7592: LD_INT 30
7594: PUSH
7595: LD_INT 31
7597: PUSH
7598: LD_INT 32
7600: PUSH
7601: LD_INT 33
7603: PUSH
7604: LD_INT 34
7606: PUSH
7607: LD_INT 36
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 101
7648: PUSH
7649: LD_INT 102
7651: PUSH
7652: LD_INT 103
7654: PUSH
7655: LD_INT 104
7657: PUSH
7658: LD_INT 105
7660: PUSH
7661: LD_INT 106
7663: PUSH
7664: LD_INT 107
7666: PUSH
7667: LD_INT 108
7669: PUSH
7670: LD_INT 109
7672: PUSH
7673: LD_INT 110
7675: PUSH
7676: LD_INT 111
7678: PUSH
7679: LD_INT 112
7681: PUSH
7682: LD_INT 113
7684: PUSH
7685: LD_INT 114
7687: PUSH
7688: LD_INT 116
7690: PUSH
7691: LD_INT 117
7693: PUSH
7694: LD_INT 118
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: ST_TO_ADDR
7720: GO 9175
7722: LD_INT 13
7724: DOUBLE
7725: EQUAL
7726: IFTRUE 7730
7728: GO 7938
7730: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_INT 1
7738: PUSH
7739: LD_INT 2
7741: PUSH
7742: LD_INT 3
7744: PUSH
7745: LD_INT 4
7747: PUSH
7748: LD_INT 5
7750: PUSH
7751: LD_INT 8
7753: PUSH
7754: LD_INT 9
7756: PUSH
7757: LD_INT 10
7759: PUSH
7760: LD_INT 11
7762: PUSH
7763: LD_INT 12
7765: PUSH
7766: LD_INT 14
7768: PUSH
7769: LD_INT 15
7771: PUSH
7772: LD_INT 16
7774: PUSH
7775: LD_INT 17
7777: PUSH
7778: LD_INT 18
7780: PUSH
7781: LD_INT 19
7783: PUSH
7784: LD_INT 20
7786: PUSH
7787: LD_INT 21
7789: PUSH
7790: LD_INT 22
7792: PUSH
7793: LD_INT 23
7795: PUSH
7796: LD_INT 24
7798: PUSH
7799: LD_INT 25
7801: PUSH
7802: LD_INT 26
7804: PUSH
7805: LD_INT 27
7807: PUSH
7808: LD_INT 28
7810: PUSH
7811: LD_INT 30
7813: PUSH
7814: LD_INT 31
7816: PUSH
7817: LD_INT 32
7819: PUSH
7820: LD_INT 33
7822: PUSH
7823: LD_INT 34
7825: PUSH
7826: LD_INT 36
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 101
7864: PUSH
7865: LD_INT 102
7867: PUSH
7868: LD_INT 103
7870: PUSH
7871: LD_INT 104
7873: PUSH
7874: LD_INT 105
7876: PUSH
7877: LD_INT 106
7879: PUSH
7880: LD_INT 107
7882: PUSH
7883: LD_INT 108
7885: PUSH
7886: LD_INT 109
7888: PUSH
7889: LD_INT 110
7891: PUSH
7892: LD_INT 111
7894: PUSH
7895: LD_INT 112
7897: PUSH
7898: LD_INT 113
7900: PUSH
7901: LD_INT 114
7903: PUSH
7904: LD_INT 116
7906: PUSH
7907: LD_INT 117
7909: PUSH
7910: LD_INT 118
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: ST_TO_ADDR
7936: GO 9175
7938: LD_INT 14
7940: DOUBLE
7941: EQUAL
7942: IFTRUE 7946
7944: GO 8170
7946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7947: LD_ADDR_VAR 0 2
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 3
7960: PUSH
7961: LD_INT 4
7963: PUSH
7964: LD_INT 5
7966: PUSH
7967: LD_INT 6
7969: PUSH
7970: LD_INT 7
7972: PUSH
7973: LD_INT 8
7975: PUSH
7976: LD_INT 9
7978: PUSH
7979: LD_INT 10
7981: PUSH
7982: LD_INT 11
7984: PUSH
7985: LD_INT 12
7987: PUSH
7988: LD_INT 13
7990: PUSH
7991: LD_INT 14
7993: PUSH
7994: LD_INT 15
7996: PUSH
7997: LD_INT 16
7999: PUSH
8000: LD_INT 17
8002: PUSH
8003: LD_INT 18
8005: PUSH
8006: LD_INT 19
8008: PUSH
8009: LD_INT 20
8011: PUSH
8012: LD_INT 21
8014: PUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 23
8020: PUSH
8021: LD_INT 24
8023: PUSH
8024: LD_INT 25
8026: PUSH
8027: LD_INT 26
8029: PUSH
8030: LD_INT 27
8032: PUSH
8033: LD_INT 28
8035: PUSH
8036: LD_INT 29
8038: PUSH
8039: LD_INT 30
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_INT 32
8047: PUSH
8048: LD_INT 33
8050: PUSH
8051: LD_INT 34
8053: PUSH
8054: LD_INT 36
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 101
8096: PUSH
8097: LD_INT 102
8099: PUSH
8100: LD_INT 103
8102: PUSH
8103: LD_INT 104
8105: PUSH
8106: LD_INT 105
8108: PUSH
8109: LD_INT 106
8111: PUSH
8112: LD_INT 107
8114: PUSH
8115: LD_INT 108
8117: PUSH
8118: LD_INT 109
8120: PUSH
8121: LD_INT 110
8123: PUSH
8124: LD_INT 111
8126: PUSH
8127: LD_INT 112
8129: PUSH
8130: LD_INT 113
8132: PUSH
8133: LD_INT 114
8135: PUSH
8136: LD_INT 116
8138: PUSH
8139: LD_INT 117
8141: PUSH
8142: LD_INT 118
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: ST_TO_ADDR
8168: GO 9175
8170: LD_INT 15
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8402
8178: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8179: LD_ADDR_VAR 0 2
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: LD_INT 2
8189: PUSH
8190: LD_INT 3
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: LD_INT 5
8198: PUSH
8199: LD_INT 6
8201: PUSH
8202: LD_INT 7
8204: PUSH
8205: LD_INT 8
8207: PUSH
8208: LD_INT 9
8210: PUSH
8211: LD_INT 10
8213: PUSH
8214: LD_INT 11
8216: PUSH
8217: LD_INT 12
8219: PUSH
8220: LD_INT 13
8222: PUSH
8223: LD_INT 14
8225: PUSH
8226: LD_INT 15
8228: PUSH
8229: LD_INT 16
8231: PUSH
8232: LD_INT 17
8234: PUSH
8235: LD_INT 18
8237: PUSH
8238: LD_INT 19
8240: PUSH
8241: LD_INT 20
8243: PUSH
8244: LD_INT 21
8246: PUSH
8247: LD_INT 22
8249: PUSH
8250: LD_INT 23
8252: PUSH
8253: LD_INT 24
8255: PUSH
8256: LD_INT 25
8258: PUSH
8259: LD_INT 26
8261: PUSH
8262: LD_INT 27
8264: PUSH
8265: LD_INT 28
8267: PUSH
8268: LD_INT 29
8270: PUSH
8271: LD_INT 30
8273: PUSH
8274: LD_INT 31
8276: PUSH
8277: LD_INT 32
8279: PUSH
8280: LD_INT 33
8282: PUSH
8283: LD_INT 34
8285: PUSH
8286: LD_INT 36
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 101
8328: PUSH
8329: LD_INT 102
8331: PUSH
8332: LD_INT 103
8334: PUSH
8335: LD_INT 104
8337: PUSH
8338: LD_INT 105
8340: PUSH
8341: LD_INT 106
8343: PUSH
8344: LD_INT 107
8346: PUSH
8347: LD_INT 108
8349: PUSH
8350: LD_INT 109
8352: PUSH
8353: LD_INT 110
8355: PUSH
8356: LD_INT 111
8358: PUSH
8359: LD_INT 112
8361: PUSH
8362: LD_INT 113
8364: PUSH
8365: LD_INT 114
8367: PUSH
8368: LD_INT 116
8370: PUSH
8371: LD_INT 117
8373: PUSH
8374: LD_INT 118
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: ST_TO_ADDR
8400: GO 9175
8402: LD_INT 16
8404: DOUBLE
8405: EQUAL
8406: IFTRUE 8410
8408: GO 8546
8410: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8411: LD_ADDR_VAR 0 2
8415: PUSH
8416: LD_INT 2
8418: PUSH
8419: LD_INT 4
8421: PUSH
8422: LD_INT 5
8424: PUSH
8425: LD_INT 7
8427: PUSH
8428: LD_INT 11
8430: PUSH
8431: LD_INT 12
8433: PUSH
8434: LD_INT 15
8436: PUSH
8437: LD_INT 16
8439: PUSH
8440: LD_INT 20
8442: PUSH
8443: LD_INT 21
8445: PUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 23
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 26
8457: PUSH
8458: LD_INT 30
8460: PUSH
8461: LD_INT 31
8463: PUSH
8464: LD_INT 32
8466: PUSH
8467: LD_INT 33
8469: PUSH
8470: LD_INT 34
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: LD_INT 102
8499: PUSH
8500: LD_INT 103
8502: PUSH
8503: LD_INT 106
8505: PUSH
8506: LD_INT 108
8508: PUSH
8509: LD_INT 112
8511: PUSH
8512: LD_INT 113
8514: PUSH
8515: LD_INT 114
8517: PUSH
8518: LD_INT 116
8520: PUSH
8521: LD_INT 117
8523: PUSH
8524: LD_INT 118
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ST_TO_ADDR
8544: GO 9175
8546: LD_INT 17
8548: DOUBLE
8549: EQUAL
8550: IFTRUE 8554
8552: GO 8778
8554: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8555: LD_ADDR_VAR 0 2
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 4
8571: PUSH
8572: LD_INT 5
8574: PUSH
8575: LD_INT 6
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: LD_INT 9
8586: PUSH
8587: LD_INT 10
8589: PUSH
8590: LD_INT 11
8592: PUSH
8593: LD_INT 12
8595: PUSH
8596: LD_INT 13
8598: PUSH
8599: LD_INT 14
8601: PUSH
8602: LD_INT 15
8604: PUSH
8605: LD_INT 16
8607: PUSH
8608: LD_INT 17
8610: PUSH
8611: LD_INT 18
8613: PUSH
8614: LD_INT 19
8616: PUSH
8617: LD_INT 20
8619: PUSH
8620: LD_INT 21
8622: PUSH
8623: LD_INT 22
8625: PUSH
8626: LD_INT 23
8628: PUSH
8629: LD_INT 24
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 26
8637: PUSH
8638: LD_INT 27
8640: PUSH
8641: LD_INT 28
8643: PUSH
8644: LD_INT 29
8646: PUSH
8647: LD_INT 30
8649: PUSH
8650: LD_INT 31
8652: PUSH
8653: LD_INT 32
8655: PUSH
8656: LD_INT 33
8658: PUSH
8659: LD_INT 34
8661: PUSH
8662: LD_INT 36
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: LD_INT 101
8704: PUSH
8705: LD_INT 102
8707: PUSH
8708: LD_INT 103
8710: PUSH
8711: LD_INT 104
8713: PUSH
8714: LD_INT 105
8716: PUSH
8717: LD_INT 106
8719: PUSH
8720: LD_INT 107
8722: PUSH
8723: LD_INT 108
8725: PUSH
8726: LD_INT 109
8728: PUSH
8729: LD_INT 110
8731: PUSH
8732: LD_INT 111
8734: PUSH
8735: LD_INT 112
8737: PUSH
8738: LD_INT 113
8740: PUSH
8741: LD_INT 114
8743: PUSH
8744: LD_INT 116
8746: PUSH
8747: LD_INT 117
8749: PUSH
8750: LD_INT 118
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: ST_TO_ADDR
8776: GO 9175
8778: LD_INT 18
8780: DOUBLE
8781: EQUAL
8782: IFTRUE 8786
8784: GO 8934
8786: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8787: LD_ADDR_VAR 0 2
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: LD_INT 4
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 7
8803: PUSH
8804: LD_INT 11
8806: PUSH
8807: LD_INT 12
8809: PUSH
8810: LD_INT 15
8812: PUSH
8813: LD_INT 16
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_INT 23
8827: PUSH
8828: LD_INT 25
8830: PUSH
8831: LD_INT 26
8833: PUSH
8834: LD_INT 30
8836: PUSH
8837: LD_INT 31
8839: PUSH
8840: LD_INT 32
8842: PUSH
8843: LD_INT 33
8845: PUSH
8846: LD_INT 34
8848: PUSH
8849: LD_INT 35
8851: PUSH
8852: LD_INT 36
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 101
8880: PUSH
8881: LD_INT 102
8883: PUSH
8884: LD_INT 103
8886: PUSH
8887: LD_INT 106
8889: PUSH
8890: LD_INT 108
8892: PUSH
8893: LD_INT 112
8895: PUSH
8896: LD_INT 113
8898: PUSH
8899: LD_INT 114
8901: PUSH
8902: LD_INT 115
8904: PUSH
8905: LD_INT 116
8907: PUSH
8908: LD_INT 117
8910: PUSH
8911: LD_INT 118
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: ST_TO_ADDR
8932: GO 9175
8934: LD_INT 19
8936: DOUBLE
8937: EQUAL
8938: IFTRUE 8942
8940: GO 9174
8942: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8943: LD_ADDR_VAR 0 2
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 3
8956: PUSH
8957: LD_INT 4
8959: PUSH
8960: LD_INT 5
8962: PUSH
8963: LD_INT 6
8965: PUSH
8966: LD_INT 7
8968: PUSH
8969: LD_INT 8
8971: PUSH
8972: LD_INT 9
8974: PUSH
8975: LD_INT 10
8977: PUSH
8978: LD_INT 11
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: LD_INT 13
8986: PUSH
8987: LD_INT 14
8989: PUSH
8990: LD_INT 15
8992: PUSH
8993: LD_INT 16
8995: PUSH
8996: LD_INT 17
8998: PUSH
8999: LD_INT 18
9001: PUSH
9002: LD_INT 19
9004: PUSH
9005: LD_INT 20
9007: PUSH
9008: LD_INT 21
9010: PUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 23
9016: PUSH
9017: LD_INT 24
9019: PUSH
9020: LD_INT 25
9022: PUSH
9023: LD_INT 26
9025: PUSH
9026: LD_INT 27
9028: PUSH
9029: LD_INT 28
9031: PUSH
9032: LD_INT 29
9034: PUSH
9035: LD_INT 30
9037: PUSH
9038: LD_INT 31
9040: PUSH
9041: LD_INT 32
9043: PUSH
9044: LD_INT 33
9046: PUSH
9047: LD_INT 34
9049: PUSH
9050: LD_INT 35
9052: PUSH
9053: LD_INT 36
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 101
9096: PUSH
9097: LD_INT 102
9099: PUSH
9100: LD_INT 103
9102: PUSH
9103: LD_INT 104
9105: PUSH
9106: LD_INT 105
9108: PUSH
9109: LD_INT 106
9111: PUSH
9112: LD_INT 107
9114: PUSH
9115: LD_INT 108
9117: PUSH
9118: LD_INT 109
9120: PUSH
9121: LD_INT 110
9123: PUSH
9124: LD_INT 111
9126: PUSH
9127: LD_INT 112
9129: PUSH
9130: LD_INT 113
9132: PUSH
9133: LD_INT 114
9135: PUSH
9136: LD_INT 115
9138: PUSH
9139: LD_INT 116
9141: PUSH
9142: LD_INT 117
9144: PUSH
9145: LD_INT 118
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: ST_TO_ADDR
9172: GO 9175
9174: POP
// end else
9175: GO 9406
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9177: LD_ADDR_VAR 0 2
9181: PUSH
9182: LD_INT 1
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 3
9190: PUSH
9191: LD_INT 4
9193: PUSH
9194: LD_INT 5
9196: PUSH
9197: LD_INT 6
9199: PUSH
9200: LD_INT 7
9202: PUSH
9203: LD_INT 8
9205: PUSH
9206: LD_INT 9
9208: PUSH
9209: LD_INT 10
9211: PUSH
9212: LD_INT 11
9214: PUSH
9215: LD_INT 12
9217: PUSH
9218: LD_INT 13
9220: PUSH
9221: LD_INT 14
9223: PUSH
9224: LD_INT 15
9226: PUSH
9227: LD_INT 16
9229: PUSH
9230: LD_INT 17
9232: PUSH
9233: LD_INT 18
9235: PUSH
9236: LD_INT 19
9238: PUSH
9239: LD_INT 20
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: LD_INT 23
9250: PUSH
9251: LD_INT 24
9253: PUSH
9254: LD_INT 25
9256: PUSH
9257: LD_INT 26
9259: PUSH
9260: LD_INT 27
9262: PUSH
9263: LD_INT 28
9265: PUSH
9266: LD_INT 29
9268: PUSH
9269: LD_INT 30
9271: PUSH
9272: LD_INT 31
9274: PUSH
9275: LD_INT 32
9277: PUSH
9278: LD_INT 33
9280: PUSH
9281: LD_INT 34
9283: PUSH
9284: LD_INT 35
9286: PUSH
9287: LD_INT 36
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 101
9330: PUSH
9331: LD_INT 102
9333: PUSH
9334: LD_INT 103
9336: PUSH
9337: LD_INT 104
9339: PUSH
9340: LD_INT 105
9342: PUSH
9343: LD_INT 106
9345: PUSH
9346: LD_INT 107
9348: PUSH
9349: LD_INT 108
9351: PUSH
9352: LD_INT 109
9354: PUSH
9355: LD_INT 110
9357: PUSH
9358: LD_INT 111
9360: PUSH
9361: LD_INT 112
9363: PUSH
9364: LD_INT 113
9366: PUSH
9367: LD_INT 114
9369: PUSH
9370: LD_INT 115
9372: PUSH
9373: LD_INT 116
9375: PUSH
9376: LD_INT 117
9378: PUSH
9379: LD_INT 118
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: ST_TO_ADDR
// if result then
9406: LD_VAR 0 2
9410: IFFALSE 10196
// begin normal :=  ;
9412: LD_ADDR_VAR 0 5
9416: PUSH
9417: LD_STRING 
9419: ST_TO_ADDR
// hardcore :=  ;
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_STRING 
9427: ST_TO_ADDR
// active :=  ;
9428: LD_ADDR_VAR 0 7
9432: PUSH
9433: LD_STRING 
9435: ST_TO_ADDR
// for i = 1 to normalCounter do
9436: LD_ADDR_VAR 0 8
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_EXP 24
9450: PUSH
9451: FOR_TO
9452: IFFALSE 9553
// begin tmp := 0 ;
9454: LD_ADDR_VAR 0 3
9458: PUSH
9459: LD_STRING 0
9461: ST_TO_ADDR
// if result [ 1 ] then
9462: LD_VAR 0 2
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: IFFALSE 9535
// if result [ 1 ] [ 1 ] = i then
9472: LD_VAR 0 2
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: PUSH
9485: LD_VAR 0 8
9489: EQUAL
9490: IFFALSE 9535
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_VAR 0 2
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: LD_VAR 0 2
9509: PUSH
9510: LD_INT 1
9512: ARRAY
9513: PPUSH
9514: LD_INT 1
9516: PPUSH
9517: CALL_OW 3
9521: PPUSH
9522: CALL_OW 1
9526: ST_TO_ADDR
// tmp := 1 ;
9527: LD_ADDR_VAR 0 3
9531: PUSH
9532: LD_STRING 1
9534: ST_TO_ADDR
// end ; normal := normal & tmp ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_VAR 0 5
9544: PUSH
9545: LD_VAR 0 3
9549: STR
9550: ST_TO_ADDR
// end ;
9551: GO 9451
9553: POP
9554: POP
// for i = 1 to hardcoreCounter do
9555: LD_ADDR_VAR 0 8
9559: PUSH
9560: DOUBLE
9561: LD_INT 1
9563: DEC
9564: ST_TO_ADDR
9565: LD_EXP 25
9569: PUSH
9570: FOR_TO
9571: IFFALSE 9676
// begin tmp := 0 ;
9573: LD_ADDR_VAR 0 3
9577: PUSH
9578: LD_STRING 0
9580: ST_TO_ADDR
// if result [ 2 ] then
9581: LD_VAR 0 2
9585: PUSH
9586: LD_INT 2
9588: ARRAY
9589: IFFALSE 9658
// if result [ 2 ] [ 1 ] = 100 + i then
9591: LD_VAR 0 2
9595: PUSH
9596: LD_INT 2
9598: ARRAY
9599: PUSH
9600: LD_INT 1
9602: ARRAY
9603: PUSH
9604: LD_INT 100
9606: PUSH
9607: LD_VAR 0 8
9611: PLUS
9612: EQUAL
9613: IFFALSE 9658
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9615: LD_ADDR_VAR 0 2
9619: PUSH
9620: LD_VAR 0 2
9624: PPUSH
9625: LD_INT 2
9627: PPUSH
9628: LD_VAR 0 2
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 3
9644: PPUSH
9645: CALL_OW 1
9649: ST_TO_ADDR
// tmp := 1 ;
9650: LD_ADDR_VAR 0 3
9654: PUSH
9655: LD_STRING 1
9657: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9658: LD_ADDR_VAR 0 6
9662: PUSH
9663: LD_VAR 0 6
9667: PUSH
9668: LD_VAR 0 3
9672: STR
9673: ST_TO_ADDR
// end ;
9674: GO 9570
9676: POP
9677: POP
// if isGameLoad then
9678: LD_VAR 0 1
9682: IFFALSE 10157
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9684: LD_ADDR_VAR 0 4
9688: PUSH
9689: LD_EXP 28
9693: PUSH
9694: LD_EXP 27
9698: PUSH
9699: LD_EXP 29
9703: PUSH
9704: LD_EXP 26
9708: PUSH
9709: LD_EXP 30
9713: PUSH
9714: LD_EXP 31
9718: PUSH
9719: LD_EXP 32
9723: PUSH
9724: LD_EXP 33
9728: PUSH
9729: LD_EXP 34
9733: PUSH
9734: LD_EXP 35
9738: PUSH
9739: LD_EXP 36
9743: PUSH
9744: LD_EXP 37
9748: PUSH
9749: LD_EXP 38
9753: PUSH
9754: LD_EXP 39
9758: PUSH
9759: LD_EXP 47
9763: PUSH
9764: LD_EXP 48
9768: PUSH
9769: LD_EXP 49
9773: PUSH
9774: LD_EXP 50
9778: PUSH
9779: LD_EXP 52
9783: PUSH
9784: LD_EXP 53
9788: PUSH
9789: LD_EXP 54
9793: PUSH
9794: LD_EXP 57
9798: PUSH
9799: LD_EXP 59
9803: PUSH
9804: LD_EXP 60
9808: PUSH
9809: LD_EXP 61
9813: PUSH
9814: LD_EXP 63
9818: PUSH
9819: LD_EXP 64
9823: PUSH
9824: LD_EXP 67
9828: PUSH
9829: LD_EXP 68
9833: PUSH
9834: LD_EXP 69
9838: PUSH
9839: LD_EXP 70
9843: PUSH
9844: LD_EXP 71
9848: PUSH
9849: LD_EXP 72
9853: PUSH
9854: LD_EXP 73
9858: PUSH
9859: LD_EXP 74
9863: PUSH
9864: LD_EXP 75
9868: PUSH
9869: LD_EXP 40
9873: PUSH
9874: LD_EXP 41
9878: PUSH
9879: LD_EXP 44
9883: PUSH
9884: LD_EXP 45
9888: PUSH
9889: LD_EXP 46
9893: PUSH
9894: LD_EXP 42
9898: PUSH
9899: LD_EXP 43
9903: PUSH
9904: LD_EXP 51
9908: PUSH
9909: LD_EXP 55
9913: PUSH
9914: LD_EXP 56
9918: PUSH
9919: LD_EXP 58
9923: PUSH
9924: LD_EXP 62
9928: PUSH
9929: LD_EXP 65
9933: PUSH
9934: LD_EXP 66
9938: PUSH
9939: LD_EXP 76
9943: PUSH
9944: LD_EXP 77
9948: PUSH
9949: LD_EXP 78
9953: PUSH
9954: LD_EXP 79
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: ST_TO_ADDR
// tmp :=  ;
10015: LD_ADDR_VAR 0 3
10019: PUSH
10020: LD_STRING 
10022: ST_TO_ADDR
// for i = 1 to normalCounter do
10023: LD_ADDR_VAR 0 8
10027: PUSH
10028: DOUBLE
10029: LD_INT 1
10031: DEC
10032: ST_TO_ADDR
10033: LD_EXP 24
10037: PUSH
10038: FOR_TO
10039: IFFALSE 10075
// begin if flags [ i ] then
10041: LD_VAR 0 4
10045: PUSH
10046: LD_VAR 0 8
10050: ARRAY
10051: IFFALSE 10073
// tmp := tmp & i & ; ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_VAR 0 3
10062: PUSH
10063: LD_VAR 0 8
10067: STR
10068: PUSH
10069: LD_STRING ;
10071: STR
10072: ST_TO_ADDR
// end ;
10073: GO 10038
10075: POP
10076: POP
// for i = 1 to hardcoreCounter do
10077: LD_ADDR_VAR 0 8
10081: PUSH
10082: DOUBLE
10083: LD_INT 1
10085: DEC
10086: ST_TO_ADDR
10087: LD_EXP 25
10091: PUSH
10092: FOR_TO
10093: IFFALSE 10139
// begin if flags [ normalCounter + i ] then
10095: LD_VAR 0 4
10099: PUSH
10100: LD_EXP 24
10104: PUSH
10105: LD_VAR 0 8
10109: PLUS
10110: ARRAY
10111: IFFALSE 10137
// tmp := tmp & ( 100 + i ) & ; ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_VAR 0 3
10122: PUSH
10123: LD_INT 100
10125: PUSH
10126: LD_VAR 0 8
10130: PLUS
10131: STR
10132: PUSH
10133: LD_STRING ;
10135: STR
10136: ST_TO_ADDR
// end ;
10137: GO 10092
10139: POP
10140: POP
// if tmp then
10141: LD_VAR 0 3
10145: IFFALSE 10157
// active := tmp ;
10147: LD_ADDR_VAR 0 7
10151: PUSH
10152: LD_VAR 0 3
10156: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10157: LD_STRING getStreamItemsFromMission("
10159: PUSH
10160: LD_VAR 0 5
10164: STR
10165: PUSH
10166: LD_STRING ","
10168: STR
10169: PUSH
10170: LD_VAR 0 6
10174: STR
10175: PUSH
10176: LD_STRING ","
10178: STR
10179: PUSH
10180: LD_VAR 0 7
10184: STR
10185: PUSH
10186: LD_STRING ")
10188: STR
10189: PPUSH
10190: CALL_OW 559
// end else
10194: GO 10203
// ToLua ( getStreamItemsFromMission("","","") ) ;
10196: LD_STRING getStreamItemsFromMission("","","")
10198: PPUSH
10199: CALL_OW 559
// end ;
10203: LD_VAR 0 2
10207: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10208: LD_EXP 23
10212: PUSH
10213: LD_EXP 28
10217: AND
10218: IFFALSE 10342
10220: GO 10222
10222: DISABLE
10223: LD_INT 0
10225: PPUSH
10226: PPUSH
// begin enable ;
10227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10228: LD_ADDR_VAR 0 2
10232: PUSH
10233: LD_INT 22
10235: PUSH
10236: LD_OWVAR 2
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: LD_INT 34
10250: PUSH
10251: LD_INT 7
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 34
10260: PUSH
10261: LD_INT 45
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 34
10270: PUSH
10271: LD_INT 28
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 34
10280: PUSH
10281: LD_INT 47
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: ST_TO_ADDR
// if not tmp then
10304: LD_VAR 0 2
10308: NOT
10309: IFFALSE 10313
// exit ;
10311: GO 10342
// for i in tmp do
10313: LD_ADDR_VAR 0 1
10317: PUSH
10318: LD_VAR 0 2
10322: PUSH
10323: FOR_IN
10324: IFFALSE 10340
// begin SetLives ( i , 0 ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_INT 0
10333: PPUSH
10334: CALL_OW 234
// end ;
10338: GO 10323
10340: POP
10341: POP
// end ;
10342: PPOPN 2
10344: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10345: LD_EXP 23
10349: PUSH
10350: LD_EXP 29
10354: AND
10355: IFFALSE 10439
10357: GO 10359
10359: DISABLE
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
// begin enable ;
10364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10365: LD_ADDR_VAR 0 2
10369: PUSH
10370: LD_INT 22
10372: PUSH
10373: LD_OWVAR 2
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 32
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PPUSH
10396: CALL_OW 69
10400: ST_TO_ADDR
// if not tmp then
10401: LD_VAR 0 2
10405: NOT
10406: IFFALSE 10410
// exit ;
10408: GO 10439
// for i in tmp do
10410: LD_ADDR_VAR 0 1
10414: PUSH
10415: LD_VAR 0 2
10419: PUSH
10420: FOR_IN
10421: IFFALSE 10437
// begin SetLives ( i , 0 ) ;
10423: LD_VAR 0 1
10427: PPUSH
10428: LD_INT 0
10430: PPUSH
10431: CALL_OW 234
// end ;
10435: GO 10420
10437: POP
10438: POP
// end ;
10439: PPOPN 2
10441: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10442: LD_EXP 23
10446: PUSH
10447: LD_EXP 26
10451: AND
10452: IFFALSE 10545
10454: GO 10456
10456: DISABLE
10457: LD_INT 0
10459: PPUSH
// begin enable ;
10460: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10461: LD_ADDR_VAR 0 1
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_OWVAR 2
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: LD_INT 25
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 9
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 8
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 69
10525: PUSH
10526: FOR_IN
10527: IFFALSE 10543
// begin SetClass ( i , 1 ) ;
10529: LD_VAR 0 1
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 336
// end ;
10541: GO 10526
10543: POP
10544: POP
// end ;
10545: PPOPN 1
10547: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10548: LD_EXP 23
10552: PUSH
10553: LD_EXP 27
10557: AND
10558: PUSH
10559: LD_OWVAR 65
10563: PUSH
10564: LD_INT 7
10566: LESS
10567: AND
10568: IFFALSE 10582
10570: GO 10572
10572: DISABLE
// begin enable ;
10573: ENABLE
// game_speed := 7 ;
10574: LD_ADDR_OWVAR 65
10578: PUSH
10579: LD_INT 7
10581: ST_TO_ADDR
// end ;
10582: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10583: LD_EXP 23
10587: PUSH
10588: LD_EXP 30
10592: AND
10593: IFFALSE 10795
10595: GO 10597
10597: DISABLE
10598: LD_INT 0
10600: PPUSH
10601: PPUSH
10602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10603: LD_ADDR_VAR 0 3
10607: PUSH
10608: LD_INT 81
10610: PUSH
10611: LD_OWVAR 2
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 1
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 69
10638: ST_TO_ADDR
// if not tmp then
10639: LD_VAR 0 3
10643: NOT
10644: IFFALSE 10648
// exit ;
10646: GO 10795
// if tmp > 5 then
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 5
10655: GREATER
10656: IFFALSE 10668
// k := 5 else
10658: LD_ADDR_VAR 0 2
10662: PUSH
10663: LD_INT 5
10665: ST_TO_ADDR
10666: GO 10678
// k := tmp ;
10668: LD_ADDR_VAR 0 2
10672: PUSH
10673: LD_VAR 0 3
10677: ST_TO_ADDR
// for i := 1 to k do
10678: LD_ADDR_VAR 0 1
10682: PUSH
10683: DOUBLE
10684: LD_INT 1
10686: DEC
10687: ST_TO_ADDR
10688: LD_VAR 0 2
10692: PUSH
10693: FOR_TO
10694: IFFALSE 10793
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10696: LD_VAR 0 3
10700: PUSH
10701: LD_VAR 0 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 1
10711: PUSH
10712: LD_INT 4
10714: MOD
10715: PUSH
10716: LD_INT 1
10718: PLUS
10719: PPUSH
10720: CALL_OW 259
10724: PUSH
10725: LD_INT 10
10727: LESS
10728: IFFALSE 10791
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10730: LD_VAR 0 3
10734: PUSH
10735: LD_VAR 0 1
10739: ARRAY
10740: PPUSH
10741: LD_VAR 0 1
10745: PUSH
10746: LD_INT 4
10748: MOD
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: PPUSH
10754: LD_VAR 0 3
10758: PUSH
10759: LD_VAR 0 1
10763: ARRAY
10764: PPUSH
10765: LD_VAR 0 1
10769: PUSH
10770: LD_INT 4
10772: MOD
10773: PUSH
10774: LD_INT 1
10776: PLUS
10777: PPUSH
10778: CALL_OW 259
10782: PUSH
10783: LD_INT 1
10785: PLUS
10786: PPUSH
10787: CALL_OW 237
10791: GO 10693
10793: POP
10794: POP
// end ;
10795: PPOPN 3
10797: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10798: LD_EXP 23
10802: PUSH
10803: LD_EXP 31
10807: AND
10808: IFFALSE 10828
10810: GO 10812
10812: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10813: LD_INT 4
10815: PPUSH
10816: LD_OWVAR 2
10820: PPUSH
10821: LD_INT 0
10823: PPUSH
10824: CALL_OW 324
10828: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10829: LD_EXP 23
10833: PUSH
10834: LD_EXP 60
10838: AND
10839: IFFALSE 10859
10841: GO 10843
10843: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10844: LD_INT 19
10846: PPUSH
10847: LD_OWVAR 2
10851: PPUSH
10852: LD_INT 0
10854: PPUSH
10855: CALL_OW 324
10859: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10860: LD_EXP 23
10864: PUSH
10865: LD_EXP 32
10869: AND
10870: IFFALSE 10972
10872: GO 10874
10874: DISABLE
10875: LD_INT 0
10877: PPUSH
10878: PPUSH
// begin enable ;
10879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10880: LD_ADDR_VAR 0 2
10884: PUSH
10885: LD_INT 22
10887: PUSH
10888: LD_OWVAR 2
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 2
10899: PUSH
10900: LD_INT 34
10902: PUSH
10903: LD_INT 11
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 34
10912: PUSH
10913: LD_INT 30
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 69
10933: ST_TO_ADDR
// if not tmp then
10934: LD_VAR 0 2
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 10972
// for i in tmp do
10943: LD_ADDR_VAR 0 1
10947: PUSH
10948: LD_VAR 0 2
10952: PUSH
10953: FOR_IN
10954: IFFALSE 10970
// begin SetLives ( i , 0 ) ;
10956: LD_VAR 0 1
10960: PPUSH
10961: LD_INT 0
10963: PPUSH
10964: CALL_OW 234
// end ;
10968: GO 10953
10970: POP
10971: POP
// end ;
10972: PPOPN 2
10974: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10975: LD_EXP 23
10979: PUSH
10980: LD_EXP 33
10984: AND
10985: IFFALSE 11005
10987: GO 10989
10989: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10990: LD_INT 32
10992: PPUSH
10993: LD_OWVAR 2
10997: PPUSH
10998: LD_INT 0
11000: PPUSH
11001: CALL_OW 324
11005: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11006: LD_EXP 23
11010: PUSH
11011: LD_EXP 34
11015: AND
11016: IFFALSE 11197
11018: GO 11020
11020: DISABLE
11021: LD_INT 0
11023: PPUSH
11024: PPUSH
11025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_INT 22
11033: PUSH
11034: LD_OWVAR 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 33
11045: PUSH
11046: LD_INT 3
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PPUSH
11057: CALL_OW 69
11061: ST_TO_ADDR
// if not tmp then
11062: LD_VAR 0 2
11066: NOT
11067: IFFALSE 11071
// exit ;
11069: GO 11197
// side := 0 ;
11071: LD_ADDR_VAR 0 3
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// for i := 1 to 8 do
11079: LD_ADDR_VAR 0 1
11083: PUSH
11084: DOUBLE
11085: LD_INT 1
11087: DEC
11088: ST_TO_ADDR
11089: LD_INT 8
11091: PUSH
11092: FOR_TO
11093: IFFALSE 11141
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11095: LD_OWVAR 2
11099: PUSH
11100: LD_VAR 0 1
11104: NONEQUAL
11105: PUSH
11106: LD_OWVAR 2
11110: PPUSH
11111: LD_VAR 0 1
11115: PPUSH
11116: CALL_OW 81
11120: PUSH
11121: LD_INT 2
11123: EQUAL
11124: AND
11125: IFFALSE 11139
// begin side := i ;
11127: LD_ADDR_VAR 0 3
11131: PUSH
11132: LD_VAR 0 1
11136: ST_TO_ADDR
// break ;
11137: GO 11141
// end ;
11139: GO 11092
11141: POP
11142: POP
// if not side then
11143: LD_VAR 0 3
11147: NOT
11148: IFFALSE 11152
// exit ;
11150: GO 11197
// for i := 1 to tmp do
11152: LD_ADDR_VAR 0 1
11156: PUSH
11157: DOUBLE
11158: LD_INT 1
11160: DEC
11161: ST_TO_ADDR
11162: LD_VAR 0 2
11166: PUSH
11167: FOR_TO
11168: IFFALSE 11195
// if Prob ( 60 ) then
11170: LD_INT 60
11172: PPUSH
11173: CALL_OW 13
11177: IFFALSE 11193
// SetSide ( i , side ) ;
11179: LD_VAR 0 1
11183: PPUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: CALL_OW 235
11193: GO 11167
11195: POP
11196: POP
// end ;
11197: PPOPN 3
11199: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11200: LD_EXP 23
11204: PUSH
11205: LD_EXP 36
11209: AND
11210: IFFALSE 11329
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11218: LD_ADDR_VAR 0 1
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_OWVAR 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 3
11247: PUSH
11248: LD_INT 23
11250: PUSH
11251: LD_INT 0
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PUSH
11272: FOR_IN
11273: IFFALSE 11327
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11275: LD_VAR 0 1
11279: PPUSH
11280: CALL_OW 257
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: LD_INT 3
11293: PUSH
11294: LD_INT 4
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: IN
11303: IFFALSE 11325
// SetClass ( un , rand ( 1 , 4 ) ) ;
11305: LD_VAR 0 1
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: LD_INT 4
11315: PPUSH
11316: CALL_OW 12
11320: PPUSH
11321: CALL_OW 336
11325: GO 11272
11327: POP
11328: POP
// end ;
11329: PPOPN 1
11331: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11332: LD_EXP 23
11336: PUSH
11337: LD_EXP 35
11341: AND
11342: IFFALSE 11421
11344: GO 11346
11346: DISABLE
11347: LD_INT 0
11349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11350: LD_ADDR_VAR 0 1
11354: PUSH
11355: LD_INT 22
11357: PUSH
11358: LD_OWVAR 2
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 21
11369: PUSH
11370: LD_INT 3
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 69
11385: ST_TO_ADDR
// if not tmp then
11386: LD_VAR 0 1
11390: NOT
11391: IFFALSE 11395
// exit ;
11393: GO 11421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11395: LD_VAR 0 1
11399: PUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_VAR 0 1
11407: PPUSH
11408: CALL_OW 12
11412: ARRAY
11413: PPUSH
11414: LD_INT 100
11416: PPUSH
11417: CALL_OW 234
// end ;
11421: PPOPN 1
11423: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11424: LD_EXP 23
11428: PUSH
11429: LD_EXP 37
11433: AND
11434: IFFALSE 11532
11436: GO 11438
11438: DISABLE
11439: LD_INT 0
11441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11442: LD_ADDR_VAR 0 1
11446: PUSH
11447: LD_INT 22
11449: PUSH
11450: LD_OWVAR 2
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 21
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PPUSH
11473: CALL_OW 69
11477: ST_TO_ADDR
// if not tmp then
11478: LD_VAR 0 1
11482: NOT
11483: IFFALSE 11487
// exit ;
11485: GO 11532
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11487: LD_VAR 0 1
11491: PUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 12
11504: ARRAY
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_INT 4
11511: PPUSH
11512: CALL_OW 12
11516: PPUSH
11517: LD_INT 3000
11519: PPUSH
11520: LD_INT 9000
11522: PPUSH
11523: CALL_OW 12
11527: PPUSH
11528: CALL_OW 492
// end ;
11532: PPOPN 1
11534: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11535: LD_EXP 23
11539: PUSH
11540: LD_EXP 38
11544: AND
11545: IFFALSE 11565
11547: GO 11549
11549: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11550: LD_INT 1
11552: PPUSH
11553: LD_OWVAR 2
11557: PPUSH
11558: LD_INT 0
11560: PPUSH
11561: CALL_OW 324
11565: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11566: LD_EXP 23
11570: PUSH
11571: LD_EXP 39
11575: AND
11576: IFFALSE 11659
11578: GO 11580
11580: DISABLE
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11585: LD_ADDR_VAR 0 2
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_OWVAR 2
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 21
11604: PUSH
11605: LD_INT 3
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: ST_TO_ADDR
// if not tmp then
11621: LD_VAR 0 2
11625: NOT
11626: IFFALSE 11630
// exit ;
11628: GO 11659
// for i in tmp do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: LD_VAR 0 2
11639: PUSH
11640: FOR_IN
11641: IFFALSE 11657
// SetBLevel ( i , 10 ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_INT 10
11650: PPUSH
11651: CALL_OW 241
11655: GO 11640
11657: POP
11658: POP
// end ;
11659: PPOPN 2
11661: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11662: LD_EXP 23
11666: PUSH
11667: LD_EXP 40
11671: AND
11672: IFFALSE 11783
11674: GO 11676
11676: DISABLE
11677: LD_INT 0
11679: PPUSH
11680: PPUSH
11681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11682: LD_ADDR_VAR 0 3
11686: PUSH
11687: LD_INT 22
11689: PUSH
11690: LD_OWVAR 2
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 25
11701: PUSH
11702: LD_INT 1
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: ST_TO_ADDR
// if not tmp then
11718: LD_VAR 0 3
11722: NOT
11723: IFFALSE 11727
// exit ;
11725: GO 11783
// un := tmp [ rand ( 1 , tmp ) ] ;
11727: LD_ADDR_VAR 0 2
11731: PUSH
11732: LD_VAR 0 3
11736: PUSH
11737: LD_INT 1
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: CALL_OW 12
11749: ARRAY
11750: ST_TO_ADDR
// if Crawls ( un ) then
11751: LD_VAR 0 2
11755: PPUSH
11756: CALL_OW 318
11760: IFFALSE 11771
// ComWalk ( un ) ;
11762: LD_VAR 0 2
11766: PPUSH
11767: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11771: LD_VAR 0 2
11775: PPUSH
11776: LD_INT 5
11778: PPUSH
11779: CALL_OW 336
// end ;
11783: PPOPN 3
11785: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11786: LD_EXP 23
11790: PUSH
11791: LD_EXP 41
11795: AND
11796: PUSH
11797: LD_OWVAR 67
11801: PUSH
11802: LD_INT 4
11804: LESS
11805: AND
11806: IFFALSE 11825
11808: GO 11810
11810: DISABLE
// begin Difficulty := Difficulty + 1 ;
11811: LD_ADDR_OWVAR 67
11815: PUSH
11816: LD_OWVAR 67
11820: PUSH
11821: LD_INT 1
11823: PLUS
11824: ST_TO_ADDR
// end ;
11825: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11826: LD_EXP 23
11830: PUSH
11831: LD_EXP 42
11835: AND
11836: IFFALSE 11939
11838: GO 11840
11840: DISABLE
11841: LD_INT 0
11843: PPUSH
// begin for i := 1 to 5 do
11844: LD_ADDR_VAR 0 1
11848: PUSH
11849: DOUBLE
11850: LD_INT 1
11852: DEC
11853: ST_TO_ADDR
11854: LD_INT 5
11856: PUSH
11857: FOR_TO
11858: IFFALSE 11937
// begin uc_nation := nation_nature ;
11860: LD_ADDR_OWVAR 21
11864: PUSH
11865: LD_INT 0
11867: ST_TO_ADDR
// uc_side := 0 ;
11868: LD_ADDR_OWVAR 20
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11876: LD_ADDR_OWVAR 29
11880: PUSH
11881: LD_INT 12
11883: PUSH
11884: LD_INT 12
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: ST_TO_ADDR
// hc_agressivity := 20 ;
11891: LD_ADDR_OWVAR 35
11895: PUSH
11896: LD_INT 20
11898: ST_TO_ADDR
// hc_class := class_tiger ;
11899: LD_ADDR_OWVAR 28
11903: PUSH
11904: LD_INT 14
11906: ST_TO_ADDR
// hc_gallery :=  ;
11907: LD_ADDR_OWVAR 33
11911: PUSH
11912: LD_STRING 
11914: ST_TO_ADDR
// hc_name :=  ;
11915: LD_ADDR_OWVAR 26
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11923: CALL_OW 44
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL_OW 51
// end ;
11935: GO 11857
11937: POP
11938: POP
// end ;
11939: PPOPN 1
11941: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11942: LD_EXP 23
11946: PUSH
11947: LD_EXP 43
11951: AND
11952: IFFALSE 11961
11954: GO 11956
11956: DISABLE
// StreamSibBomb ;
11957: CALL 11962 0 0
11961: END
// export function StreamSibBomb ; var i , x , y ; begin
11962: LD_INT 0
11964: PPUSH
11965: PPUSH
11966: PPUSH
11967: PPUSH
// result := false ;
11968: LD_ADDR_VAR 0 1
11972: PUSH
11973: LD_INT 0
11975: ST_TO_ADDR
// for i := 1 to 16 do
11976: LD_ADDR_VAR 0 2
11980: PUSH
11981: DOUBLE
11982: LD_INT 1
11984: DEC
11985: ST_TO_ADDR
11986: LD_INT 16
11988: PUSH
11989: FOR_TO
11990: IFFALSE 12189
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11992: LD_ADDR_VAR 0 3
11996: PUSH
11997: LD_INT 10
11999: PUSH
12000: LD_INT 20
12002: PUSH
12003: LD_INT 30
12005: PUSH
12006: LD_INT 40
12008: PUSH
12009: LD_INT 50
12011: PUSH
12012: LD_INT 60
12014: PUSH
12015: LD_INT 70
12017: PUSH
12018: LD_INT 80
12020: PUSH
12021: LD_INT 90
12023: PUSH
12024: LD_INT 100
12026: PUSH
12027: LD_INT 110
12029: PUSH
12030: LD_INT 120
12032: PUSH
12033: LD_INT 130
12035: PUSH
12036: LD_INT 140
12038: PUSH
12039: LD_INT 150
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 1
12061: PPUSH
12062: LD_INT 15
12064: PPUSH
12065: CALL_OW 12
12069: ARRAY
12070: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_INT 10
12078: PUSH
12079: LD_INT 20
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 40
12087: PUSH
12088: LD_INT 50
12090: PUSH
12091: LD_INT 60
12093: PUSH
12094: LD_INT 70
12096: PUSH
12097: LD_INT 80
12099: PUSH
12100: LD_INT 90
12102: PUSH
12103: LD_INT 100
12105: PUSH
12106: LD_INT 110
12108: PUSH
12109: LD_INT 120
12111: PUSH
12112: LD_INT 130
12114: PUSH
12115: LD_INT 140
12117: PUSH
12118: LD_INT 150
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 1
12140: PPUSH
12141: LD_INT 15
12143: PPUSH
12144: CALL_OW 12
12148: ARRAY
12149: ST_TO_ADDR
// if ValidHex ( x , y ) then
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_VAR 0 4
12159: PPUSH
12160: CALL_OW 488
12164: IFFALSE 12187
// begin result := [ x , y ] ;
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: LD_VAR 0 3
12175: PUSH
12176: LD_VAR 0 4
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: ST_TO_ADDR
// break ;
12185: GO 12189
// end ; end ;
12187: GO 11989
12189: POP
12190: POP
// if result then
12191: LD_VAR 0 1
12195: IFFALSE 12255
// begin ToLua ( playSibBomb() ) ;
12197: LD_STRING playSibBomb()
12199: PPUSH
12200: CALL_OW 559
// wait ( 0 0$14 ) ;
12204: LD_INT 490
12206: PPUSH
12207: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 2
12227: ARRAY
12228: PPUSH
12229: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12233: LD_VAR 0 1
12237: PUSH
12238: LD_INT 1
12240: ARRAY
12241: PPUSH
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 2
12249: ARRAY
12250: PPUSH
12251: CALL_OW 429
// end ; end ;
12255: LD_VAR 0 1
12259: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12260: LD_EXP 23
12264: PUSH
12265: LD_EXP 45
12269: AND
12270: IFFALSE 12282
12272: GO 12274
12274: DISABLE
// YouLost (  ) ;
12275: LD_STRING 
12277: PPUSH
12278: CALL_OW 104
12282: END
// every 0 0$1 trigger StreamModeActive and sFog do
12283: LD_EXP 23
12287: PUSH
12288: LD_EXP 44
12292: AND
12293: IFFALSE 12307
12295: GO 12297
12297: DISABLE
// FogOff ( your_side ) ;
12298: LD_OWVAR 2
12302: PPUSH
12303: CALL_OW 344
12307: END
// every 0 0$1 trigger StreamModeActive and sSun do
12308: LD_EXP 23
12312: PUSH
12313: LD_EXP 46
12317: AND
12318: IFFALSE 12346
12320: GO 12322
12322: DISABLE
// begin solar_recharge_percent := 0 ;
12323: LD_ADDR_OWVAR 79
12327: PUSH
12328: LD_INT 0
12330: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12331: LD_INT 10500
12333: PPUSH
12334: CALL_OW 67
// solar_recharge_percent := 100 ;
12338: LD_ADDR_OWVAR 79
12342: PUSH
12343: LD_INT 100
12345: ST_TO_ADDR
// end ;
12346: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12347: LD_EXP 23
12351: PUSH
12352: LD_EXP 47
12356: AND
12357: IFFALSE 12596
12359: GO 12361
12361: DISABLE
12362: LD_INT 0
12364: PPUSH
12365: PPUSH
12366: PPUSH
// begin tmp := [ ] ;
12367: LD_ADDR_VAR 0 3
12371: PUSH
12372: EMPTY
12373: ST_TO_ADDR
// for i := 1 to 6 do
12374: LD_ADDR_VAR 0 1
12378: PUSH
12379: DOUBLE
12380: LD_INT 1
12382: DEC
12383: ST_TO_ADDR
12384: LD_INT 6
12386: PUSH
12387: FOR_TO
12388: IFFALSE 12493
// begin uc_nation := nation_nature ;
12390: LD_ADDR_OWVAR 21
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// uc_side := 0 ;
12398: LD_ADDR_OWVAR 20
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12406: LD_ADDR_OWVAR 29
12410: PUSH
12411: LD_INT 12
12413: PUSH
12414: LD_INT 12
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: ST_TO_ADDR
// hc_agressivity := 20 ;
12421: LD_ADDR_OWVAR 35
12425: PUSH
12426: LD_INT 20
12428: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12429: LD_ADDR_OWVAR 28
12433: PUSH
12434: LD_INT 17
12436: ST_TO_ADDR
// hc_gallery :=  ;
12437: LD_ADDR_OWVAR 33
12441: PUSH
12442: LD_STRING 
12444: ST_TO_ADDR
// hc_name :=  ;
12445: LD_ADDR_OWVAR 26
12449: PUSH
12450: LD_STRING 
12452: ST_TO_ADDR
// un := CreateHuman ;
12453: LD_ADDR_VAR 0 2
12457: PUSH
12458: CALL_OW 44
12462: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12463: LD_VAR 0 2
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 51
// tmp := tmp ^ un ;
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_VAR 0 3
12484: PUSH
12485: LD_VAR 0 2
12489: ADD
12490: ST_TO_ADDR
// end ;
12491: GO 12387
12493: POP
12494: POP
// repeat wait ( 0 0$1 ) ;
12495: LD_INT 35
12497: PPUSH
12498: CALL_OW 67
// for un in tmp do
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_VAR 0 3
12511: PUSH
12512: FOR_IN
12513: IFFALSE 12587
// begin if IsDead ( un ) then
12515: LD_VAR 0 2
12519: PPUSH
12520: CALL_OW 301
12524: IFFALSE 12544
// begin tmp := tmp diff un ;
12526: LD_ADDR_VAR 0 3
12530: PUSH
12531: LD_VAR 0 3
12535: PUSH
12536: LD_VAR 0 2
12540: DIFF
12541: ST_TO_ADDR
// continue ;
12542: GO 12512
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12544: LD_VAR 0 2
12548: PPUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 22
12554: PUSH
12555: LD_INT 0
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PPUSH
12571: LD_VAR 0 2
12575: PPUSH
12576: CALL_OW 74
12580: PPUSH
12581: CALL_OW 115
// end ;
12585: GO 12512
12587: POP
12588: POP
// until not tmp ;
12589: LD_VAR 0 3
12593: NOT
12594: IFFALSE 12495
// end ;
12596: PPOPN 3
12598: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12599: LD_EXP 23
12603: PUSH
12604: LD_EXP 48
12608: AND
12609: IFFALSE 12663
12611: GO 12613
12613: DISABLE
// begin ToLua ( displayTroll(); ) ;
12614: LD_STRING displayTroll();
12616: PPUSH
12617: CALL_OW 559
// wait ( 3 3$00 ) ;
12621: LD_INT 6300
12623: PPUSH
12624: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12628: LD_STRING hideTroll();
12630: PPUSH
12631: CALL_OW 559
// wait ( 1 1$00 ) ;
12635: LD_INT 2100
12637: PPUSH
12638: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12642: LD_STRING displayTroll();
12644: PPUSH
12645: CALL_OW 559
// wait ( 1 1$00 ) ;
12649: LD_INT 2100
12651: PPUSH
12652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12656: LD_STRING hideTroll();
12658: PPUSH
12659: CALL_OW 559
// end ;
12663: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12664: LD_EXP 23
12668: PUSH
12669: LD_EXP 49
12673: AND
12674: IFFALSE 12737
12676: GO 12678
12678: DISABLE
12679: LD_INT 0
12681: PPUSH
// begin p := 0 ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// repeat game_speed := 1 ;
12690: LD_ADDR_OWVAR 65
12694: PUSH
12695: LD_INT 1
12697: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12698: LD_INT 35
12700: PPUSH
12701: CALL_OW 67
// p := p + 1 ;
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 1
12714: PUSH
12715: LD_INT 1
12717: PLUS
12718: ST_TO_ADDR
// until p >= 60 ;
12719: LD_VAR 0 1
12723: PUSH
12724: LD_INT 60
12726: GREATEREQUAL
12727: IFFALSE 12690
// game_speed := 4 ;
12729: LD_ADDR_OWVAR 65
12733: PUSH
12734: LD_INT 4
12736: ST_TO_ADDR
// end ;
12737: PPOPN 1
12739: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12740: LD_EXP 23
12744: PUSH
12745: LD_EXP 50
12749: AND
12750: IFFALSE 12896
12752: GO 12754
12754: DISABLE
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12759: LD_ADDR_VAR 0 1
12763: PUSH
12764: LD_INT 22
12766: PUSH
12767: LD_OWVAR 2
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: LD_INT 30
12781: PUSH
12782: LD_INT 0
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 30
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PPUSH
12808: CALL_OW 69
12812: ST_TO_ADDR
// if not depot then
12813: LD_VAR 0 1
12817: NOT
12818: IFFALSE 12822
// exit ;
12820: GO 12896
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12822: LD_ADDR_VAR 0 2
12826: PUSH
12827: LD_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 12
12844: ARRAY
12845: PPUSH
12846: CALL_OW 274
12850: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12851: LD_VAR 0 2
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 0
12861: PPUSH
12862: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12866: LD_VAR 0 2
12870: PPUSH
12871: LD_INT 2
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12881: LD_VAR 0 2
12885: PPUSH
12886: LD_INT 3
12888: PPUSH
12889: LD_INT 0
12891: PPUSH
12892: CALL_OW 277
// end ;
12896: PPOPN 2
12898: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12899: LD_EXP 23
12903: PUSH
12904: LD_EXP 51
12908: AND
12909: IFFALSE 13006
12911: GO 12913
12913: DISABLE
12914: LD_INT 0
12916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12917: LD_ADDR_VAR 0 1
12921: PUSH
12922: LD_INT 22
12924: PUSH
12925: LD_OWVAR 2
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 3
12946: PUSH
12947: LD_INT 23
12949: PUSH
12950: LD_INT 0
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: PPUSH
12966: CALL_OW 69
12970: ST_TO_ADDR
// if not tmp then
12971: LD_VAR 0 1
12975: NOT
12976: IFFALSE 12980
// exit ;
12978: GO 13006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12980: LD_VAR 0 1
12984: PUSH
12985: LD_INT 1
12987: PPUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: CALL_OW 12
12997: ARRAY
12998: PPUSH
12999: LD_INT 200
13001: PPUSH
13002: CALL_OW 234
// end ;
13006: PPOPN 1
13008: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13009: LD_EXP 23
13013: PUSH
13014: LD_EXP 52
13018: AND
13019: IFFALSE 13098
13021: GO 13023
13023: DISABLE
13024: LD_INT 0
13026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13027: LD_ADDR_VAR 0 1
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_OWVAR 2
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 21
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: CALL_OW 69
13062: ST_TO_ADDR
// if not tmp then
13063: LD_VAR 0 1
13067: NOT
13068: IFFALSE 13072
// exit ;
13070: GO 13098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13072: LD_VAR 0 1
13076: PUSH
13077: LD_INT 1
13079: PPUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 12
13089: ARRAY
13090: PPUSH
13091: LD_INT 60
13093: PPUSH
13094: CALL_OW 234
// end ;
13098: PPOPN 1
13100: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13101: LD_EXP 23
13105: PUSH
13106: LD_EXP 53
13110: AND
13111: IFFALSE 13210
13113: GO 13115
13115: DISABLE
13116: LD_INT 0
13118: PPUSH
13119: PPUSH
// begin enable ;
13120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13121: LD_ADDR_VAR 0 1
13125: PUSH
13126: LD_INT 22
13128: PUSH
13129: LD_OWVAR 2
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 61
13140: PUSH
13141: EMPTY
13142: LIST
13143: PUSH
13144: LD_INT 33
13146: PUSH
13147: LD_INT 2
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: PPUSH
13159: CALL_OW 69
13163: ST_TO_ADDR
// if not tmp then
13164: LD_VAR 0 1
13168: NOT
13169: IFFALSE 13173
// exit ;
13171: GO 13210
// for i in tmp do
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: FOR_IN
13184: IFFALSE 13208
// if IsControledBy ( i ) then
13186: LD_VAR 0 2
13190: PPUSH
13191: CALL_OW 312
13195: IFFALSE 13206
// ComUnlink ( i ) ;
13197: LD_VAR 0 2
13201: PPUSH
13202: CALL_OW 136
13206: GO 13183
13208: POP
13209: POP
// end ;
13210: PPOPN 2
13212: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13213: LD_EXP 23
13217: PUSH
13218: LD_EXP 54
13222: AND
13223: IFFALSE 13363
13225: GO 13227
13227: DISABLE
13228: LD_INT 0
13230: PPUSH
13231: PPUSH
// begin ToLua ( displayPowell(); ) ;
13232: LD_STRING displayPowell();
13234: PPUSH
13235: CALL_OW 559
// uc_side := 0 ;
13239: LD_ADDR_OWVAR 20
13243: PUSH
13244: LD_INT 0
13246: ST_TO_ADDR
// uc_nation := 2 ;
13247: LD_ADDR_OWVAR 21
13251: PUSH
13252: LD_INT 2
13254: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13255: LD_ADDR_OWVAR 37
13259: PUSH
13260: LD_INT 14
13262: ST_TO_ADDR
// vc_engine := engine_siberite ;
13263: LD_ADDR_OWVAR 39
13267: PUSH
13268: LD_INT 3
13270: ST_TO_ADDR
// vc_control := control_apeman ;
13271: LD_ADDR_OWVAR 38
13275: PUSH
13276: LD_INT 5
13278: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13279: LD_ADDR_OWVAR 40
13283: PUSH
13284: LD_INT 29
13286: ST_TO_ADDR
// un := CreateVehicle ;
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: CALL_OW 45
13296: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13309: LD_INT 35
13311: PPUSH
13312: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13316: LD_VAR 0 2
13320: PPUSH
13321: LD_INT 22
13323: PUSH
13324: LD_OWVAR 2
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: PPUSH
13338: LD_VAR 0 2
13342: PPUSH
13343: CALL_OW 74
13347: PPUSH
13348: CALL_OW 115
// until IsDead ( un ) ;
13352: LD_VAR 0 2
13356: PPUSH
13357: CALL_OW 301
13361: IFFALSE 13309
// end ;
13363: PPOPN 2
13365: END
// every 0 0$1 trigger StreamModeActive and sStu do
13366: LD_EXP 23
13370: PUSH
13371: LD_EXP 62
13375: AND
13376: IFFALSE 13392
13378: GO 13380
13380: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13381: LD_STRING displayStucuk();
13383: PPUSH
13384: CALL_OW 559
// ResetFog ;
13388: CALL_OW 335
// end ;
13392: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13393: LD_EXP 23
13397: PUSH
13398: LD_EXP 55
13402: AND
13403: IFFALSE 13544
13405: GO 13407
13407: DISABLE
13408: LD_INT 0
13410: PPUSH
13411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13412: LD_ADDR_VAR 0 2
13416: PUSH
13417: LD_INT 22
13419: PUSH
13420: LD_OWVAR 2
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 21
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PPUSH
13443: CALL_OW 69
13447: ST_TO_ADDR
// if not tmp then
13448: LD_VAR 0 2
13452: NOT
13453: IFFALSE 13457
// exit ;
13455: GO 13544
// un := tmp [ rand ( 1 , tmp ) ] ;
13457: LD_ADDR_VAR 0 1
13461: PUSH
13462: LD_VAR 0 2
13466: PUSH
13467: LD_INT 1
13469: PPUSH
13470: LD_VAR 0 2
13474: PPUSH
13475: CALL_OW 12
13479: ARRAY
13480: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13481: LD_VAR 0 1
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13493: LD_VAR 0 1
13497: PPUSH
13498: LD_OWVAR 3
13502: PUSH
13503: LD_VAR 0 1
13507: DIFF
13508: PPUSH
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 74
13518: PPUSH
13519: CALL_OW 115
// wait ( 0 0$20 ) ;
13523: LD_INT 700
13525: PPUSH
13526: CALL_OW 67
// SetSide ( un , your_side ) ;
13530: LD_VAR 0 1
13534: PPUSH
13535: LD_OWVAR 2
13539: PPUSH
13540: CALL_OW 235
// end ;
13544: PPOPN 2
13546: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13547: LD_EXP 23
13551: PUSH
13552: LD_EXP 56
13556: AND
13557: IFFALSE 13663
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_OWVAR 2
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 0
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 30
13597: PUSH
13598: LD_INT 1
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not depot then
13619: LD_VAR 0 1
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13663
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13628: LD_VAR 0 1
13632: PUSH
13633: LD_INT 1
13635: ARRAY
13636: PPUSH
13637: CALL_OW 250
13641: PPUSH
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: CALL_OW 251
13655: PPUSH
13656: LD_INT 70
13658: PPUSH
13659: CALL_OW 495
// end ;
13663: PPOPN 1
13665: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13666: LD_EXP 23
13670: PUSH
13671: LD_EXP 57
13675: AND
13676: IFFALSE 13887
13678: GO 13680
13680: DISABLE
13681: LD_INT 0
13683: PPUSH
13684: PPUSH
13685: PPUSH
13686: PPUSH
13687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13688: LD_ADDR_VAR 0 5
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_OWVAR 2
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 21
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: CALL_OW 69
13723: ST_TO_ADDR
// if not tmp then
13724: LD_VAR 0 5
13728: NOT
13729: IFFALSE 13733
// exit ;
13731: GO 13887
// for i in tmp do
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_VAR 0 5
13742: PUSH
13743: FOR_IN
13744: IFFALSE 13885
// begin d := rand ( 0 , 5 ) ;
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: LD_INT 0
13753: PPUSH
13754: LD_INT 5
13756: PPUSH
13757: CALL_OW 12
13761: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13762: LD_ADDR_VAR 0 2
13766: PUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: CALL_OW 250
13776: PPUSH
13777: LD_VAR 0 4
13781: PPUSH
13782: LD_INT 3
13784: PPUSH
13785: LD_INT 12
13787: PPUSH
13788: CALL_OW 12
13792: PPUSH
13793: CALL_OW 272
13797: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13798: LD_ADDR_VAR 0 3
13802: PUSH
13803: LD_VAR 0 1
13807: PPUSH
13808: CALL_OW 251
13812: PPUSH
13813: LD_VAR 0 4
13817: PPUSH
13818: LD_INT 3
13820: PPUSH
13821: LD_INT 12
13823: PPUSH
13824: CALL_OW 12
13828: PPUSH
13829: CALL_OW 273
13833: ST_TO_ADDR
// if ValidHex ( x , y ) then
13834: LD_VAR 0 2
13838: PPUSH
13839: LD_VAR 0 3
13843: PPUSH
13844: CALL_OW 488
13848: IFFALSE 13883
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_VAR 0 2
13859: PPUSH
13860: LD_VAR 0 3
13864: PPUSH
13865: LD_INT 3
13867: PPUSH
13868: LD_INT 6
13870: PPUSH
13871: CALL_OW 12
13875: PPUSH
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 483
// end ;
13883: GO 13743
13885: POP
13886: POP
// end ;
13887: PPOPN 5
13889: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13890: LD_EXP 23
13894: PUSH
13895: LD_EXP 58
13899: AND
13900: IFFALSE 13994
13902: GO 13904
13904: DISABLE
13905: LD_INT 0
13907: PPUSH
13908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13909: LD_ADDR_VAR 0 2
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_OWVAR 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 32
13928: PUSH
13929: LD_INT 1
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 21
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: PPUSH
13951: CALL_OW 69
13955: ST_TO_ADDR
// if not tmp then
13956: LD_VAR 0 2
13960: NOT
13961: IFFALSE 13965
// exit ;
13963: GO 13994
// for i in tmp do
13965: LD_ADDR_VAR 0 1
13969: PUSH
13970: LD_VAR 0 2
13974: PUSH
13975: FOR_IN
13976: IFFALSE 13992
// SetFuel ( i , 0 ) ;
13978: LD_VAR 0 1
13982: PPUSH
13983: LD_INT 0
13985: PPUSH
13986: CALL_OW 240
13990: GO 13975
13992: POP
13993: POP
// end ;
13994: PPOPN 2
13996: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13997: LD_EXP 23
14001: PUSH
14002: LD_EXP 59
14006: AND
14007: IFFALSE 14073
14009: GO 14011
14011: DISABLE
14012: LD_INT 0
14014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14015: LD_ADDR_VAR 0 1
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_OWVAR 2
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: LD_INT 30
14034: PUSH
14035: LD_INT 29
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PPUSH
14046: CALL_OW 69
14050: ST_TO_ADDR
// if not tmp then
14051: LD_VAR 0 1
14055: NOT
14056: IFFALSE 14060
// exit ;
14058: GO 14073
// DestroyUnit ( tmp [ 1 ] ) ;
14060: LD_VAR 0 1
14064: PUSH
14065: LD_INT 1
14067: ARRAY
14068: PPUSH
14069: CALL_OW 65
// end ;
14073: PPOPN 1
14075: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14076: LD_EXP 23
14080: PUSH
14081: LD_EXP 61
14085: AND
14086: IFFALSE 14215
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
// begin uc_side := 0 ;
14094: LD_ADDR_OWVAR 20
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// uc_nation := nation_arabian ;
14102: LD_ADDR_OWVAR 21
14106: PUSH
14107: LD_INT 2
14109: ST_TO_ADDR
// hc_gallery :=  ;
14110: LD_ADDR_OWVAR 33
14114: PUSH
14115: LD_STRING 
14117: ST_TO_ADDR
// hc_name :=  ;
14118: LD_ADDR_OWVAR 26
14122: PUSH
14123: LD_STRING 
14125: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14126: LD_INT 1
14128: PPUSH
14129: LD_INT 11
14131: PPUSH
14132: LD_INT 10
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 1
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_INT 1
14156: PPUSH
14157: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14161: LD_INT 35
14163: PPUSH
14164: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 22
14175: PUSH
14176: LD_OWVAR 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PPUSH
14185: CALL_OW 69
14189: PPUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 74
14199: PPUSH
14200: CALL_OW 115
// until IsDead ( un ) ;
14204: LD_VAR 0 1
14208: PPUSH
14209: CALL_OW 301
14213: IFFALSE 14161
// end ;
14215: PPOPN 1
14217: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14218: LD_EXP 23
14222: PUSH
14223: LD_EXP 63
14227: AND
14228: IFFALSE 14240
14230: GO 14232
14232: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14233: LD_STRING earthquake(getX(game), 0, 32)
14235: PPUSH
14236: CALL_OW 559
14240: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14241: LD_EXP 23
14245: PUSH
14246: LD_EXP 64
14250: AND
14251: IFFALSE 14342
14253: GO 14255
14255: DISABLE
14256: LD_INT 0
14258: PPUSH
// begin enable ;
14259: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_OWVAR 2
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 3
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 69
14306: ST_TO_ADDR
// if not tmp then
14307: LD_VAR 0 1
14311: NOT
14312: IFFALSE 14316
// exit ;
14314: GO 14342
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14316: LD_VAR 0 1
14320: PUSH
14321: LD_INT 1
14323: PPUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 12
14333: ARRAY
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 234
// end ;
14342: PPOPN 1
14344: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14345: LD_EXP 23
14349: PUSH
14350: LD_EXP 65
14354: AND
14355: IFFALSE 14496
14357: GO 14359
14359: DISABLE
14360: LD_INT 0
14362: PPUSH
14363: PPUSH
14364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14365: LD_ADDR_VAR 0 3
14369: PUSH
14370: LD_INT 22
14372: PUSH
14373: LD_OWVAR 2
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 69
14400: ST_TO_ADDR
// if not tmp then
14401: LD_VAR 0 3
14405: NOT
14406: IFFALSE 14410
// exit ;
14408: GO 14496
// un := tmp [ rand ( 1 , tmp ) ] ;
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_VAR 0 3
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 12
14432: ARRAY
14433: ST_TO_ADDR
// if Crawls ( un ) then
14434: LD_VAR 0 2
14438: PPUSH
14439: CALL_OW 318
14443: IFFALSE 14454
// ComWalk ( un ) ;
14445: LD_VAR 0 2
14449: PPUSH
14450: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14454: LD_VAR 0 2
14458: PPUSH
14459: LD_INT 9
14461: PPUSH
14462: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14466: LD_INT 28
14468: PPUSH
14469: LD_OWVAR 2
14473: PPUSH
14474: LD_INT 2
14476: PPUSH
14477: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14481: LD_INT 29
14483: PPUSH
14484: LD_OWVAR 2
14488: PPUSH
14489: LD_INT 2
14491: PPUSH
14492: CALL_OW 322
// end ;
14496: PPOPN 3
14498: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14499: LD_EXP 23
14503: PUSH
14504: LD_EXP 66
14508: AND
14509: IFFALSE 14620
14511: GO 14513
14513: DISABLE
14514: LD_INT 0
14516: PPUSH
14517: PPUSH
14518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_OWVAR 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 25
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 69
14554: ST_TO_ADDR
// if not tmp then
14555: LD_VAR 0 3
14559: NOT
14560: IFFALSE 14564
// exit ;
14562: GO 14620
// un := tmp [ rand ( 1 , tmp ) ] ;
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: LD_VAR 0 3
14573: PUSH
14574: LD_INT 1
14576: PPUSH
14577: LD_VAR 0 3
14581: PPUSH
14582: CALL_OW 12
14586: ARRAY
14587: ST_TO_ADDR
// if Crawls ( un ) then
14588: LD_VAR 0 2
14592: PPUSH
14593: CALL_OW 318
14597: IFFALSE 14608
// ComWalk ( un ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14608: LD_VAR 0 2
14612: PPUSH
14613: LD_INT 8
14615: PPUSH
14616: CALL_OW 336
// end ;
14620: PPOPN 3
14622: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14623: LD_EXP 23
14627: PUSH
14628: LD_EXP 67
14632: AND
14633: IFFALSE 14777
14635: GO 14637
14637: DISABLE
14638: LD_INT 0
14640: PPUSH
14641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_OWVAR 2
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 2
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 34
14674: PUSH
14675: LD_INT 12
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 34
14684: PUSH
14685: LD_INT 51
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 34
14694: PUSH
14695: LD_INT 32
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: PPUSH
14713: CALL_OW 69
14717: ST_TO_ADDR
// if not tmp then
14718: LD_VAR 0 2
14722: NOT
14723: IFFALSE 14727
// exit ;
14725: GO 14777
// for i in tmp do
14727: LD_ADDR_VAR 0 1
14731: PUSH
14732: LD_VAR 0 2
14736: PUSH
14737: FOR_IN
14738: IFFALSE 14775
// if GetCargo ( i , mat_artifact ) = 0 then
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 4
14747: PPUSH
14748: CALL_OW 289
14752: PUSH
14753: LD_INT 0
14755: EQUAL
14756: IFFALSE 14773
// SetCargo ( i , mat_siberit , 100 ) ;
14758: LD_VAR 0 1
14762: PPUSH
14763: LD_INT 3
14765: PPUSH
14766: LD_INT 100
14768: PPUSH
14769: CALL_OW 290
14773: GO 14737
14775: POP
14776: POP
// end ;
14777: PPOPN 2
14779: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14780: LD_EXP 23
14784: PUSH
14785: LD_EXP 68
14789: AND
14790: IFFALSE 14973
14792: GO 14794
14794: DISABLE
14795: LD_INT 0
14797: PPUSH
14798: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_INT 22
14806: PUSH
14807: LD_OWVAR 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: ST_TO_ADDR
// if not tmp then
14821: LD_VAR 0 2
14825: NOT
14826: IFFALSE 14830
// exit ;
14828: GO 14973
// for i := 1 to 2 do
14830: LD_ADDR_VAR 0 1
14834: PUSH
14835: DOUBLE
14836: LD_INT 1
14838: DEC
14839: ST_TO_ADDR
14840: LD_INT 2
14842: PUSH
14843: FOR_TO
14844: IFFALSE 14971
// begin uc_side := your_side ;
14846: LD_ADDR_OWVAR 20
14850: PUSH
14851: LD_OWVAR 2
14855: ST_TO_ADDR
// uc_nation := nation_american ;
14856: LD_ADDR_OWVAR 21
14860: PUSH
14861: LD_INT 1
14863: ST_TO_ADDR
// vc_chassis := us_morphling ;
14864: LD_ADDR_OWVAR 37
14868: PUSH
14869: LD_INT 5
14871: ST_TO_ADDR
// vc_engine := engine_siberite ;
14872: LD_ADDR_OWVAR 39
14876: PUSH
14877: LD_INT 3
14879: ST_TO_ADDR
// vc_control := control_computer ;
14880: LD_ADDR_OWVAR 38
14884: PUSH
14885: LD_INT 3
14887: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14888: LD_ADDR_OWVAR 40
14892: PUSH
14893: LD_INT 10
14895: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14896: LD_VAR 0 2
14900: PUSH
14901: LD_INT 1
14903: ARRAY
14904: PPUSH
14905: CALL_OW 310
14909: NOT
14910: IFFALSE 14957
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14912: CALL_OW 45
14916: PPUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: CALL_OW 250
14930: PPUSH
14931: LD_VAR 0 2
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: CALL_OW 251
14944: PPUSH
14945: LD_INT 12
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 50
14955: GO 14969
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14957: CALL_OW 45
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 51
// end ;
14969: GO 14843
14971: POP
14972: POP
// end ;
14973: PPOPN 2
14975: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14976: LD_EXP 23
14980: PUSH
14981: LD_EXP 69
14985: AND
14986: IFFALSE 15208
14988: GO 14990
14990: DISABLE
14991: LD_INT 0
14993: PPUSH
14994: PPUSH
14995: PPUSH
14996: PPUSH
14997: PPUSH
14998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14999: LD_ADDR_VAR 0 6
15003: PUSH
15004: LD_INT 22
15006: PUSH
15007: LD_OWVAR 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 21
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 3
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 0
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: ST_TO_ADDR
// if not tmp then
15053: LD_VAR 0 6
15057: NOT
15058: IFFALSE 15062
// exit ;
15060: GO 15208
// s1 := rand ( 1 , 4 ) ;
15062: LD_ADDR_VAR 0 2
15066: PUSH
15067: LD_INT 1
15069: PPUSH
15070: LD_INT 4
15072: PPUSH
15073: CALL_OW 12
15077: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15078: LD_ADDR_VAR 0 4
15082: PUSH
15083: LD_VAR 0 6
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: LD_VAR 0 2
15096: PPUSH
15097: CALL_OW 259
15101: ST_TO_ADDR
// if s1 = 1 then
15102: LD_VAR 0 2
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: IFFALSE 15130
// s2 := rand ( 2 , 4 ) else
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: LD_INT 2
15119: PPUSH
15120: LD_INT 4
15122: PPUSH
15123: CALL_OW 12
15127: ST_TO_ADDR
15128: GO 15138
// s2 := 1 ;
15130: LD_ADDR_VAR 0 3
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15138: LD_ADDR_VAR 0 5
15142: PUSH
15143: LD_VAR 0 6
15147: PUSH
15148: LD_INT 1
15150: ARRAY
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: CALL_OW 259
15161: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15162: LD_VAR 0 6
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 2
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15185: LD_VAR 0 6
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: LD_VAR 0 3
15198: PPUSH
15199: LD_VAR 0 4
15203: PPUSH
15204: CALL_OW 237
// end ;
15208: PPOPN 6
15210: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15211: LD_EXP 23
15215: PUSH
15216: LD_EXP 70
15220: AND
15221: IFFALSE 15300
15223: GO 15225
15225: DISABLE
15226: LD_INT 0
15228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15229: LD_ADDR_VAR 0 1
15233: PUSH
15234: LD_INT 22
15236: PUSH
15237: LD_OWVAR 2
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PPUSH
15260: CALL_OW 69
15264: ST_TO_ADDR
// if not tmp then
15265: LD_VAR 0 1
15269: NOT
15270: IFFALSE 15274
// exit ;
15272: GO 15300
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15274: LD_VAR 0 1
15278: PUSH
15279: LD_INT 1
15281: PPUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 12
15291: ARRAY
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 234
// end ;
15300: PPOPN 1
15302: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15303: LD_EXP 23
15307: PUSH
15308: LD_EXP 71
15312: AND
15313: IFFALSE 15425
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_OWVAR 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 27
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 30
15354: PUSH
15355: LD_INT 26
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 30
15364: PUSH
15365: LD_INT 28
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 2
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15425
// for i in tmp do
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_VAR 0 2
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15423
// SetLives ( i , 1 ) ;
15409: LD_VAR 0 1
15413: PPUSH
15414: LD_INT 1
15416: PPUSH
15417: CALL_OW 234
15421: GO 15406
15423: POP
15424: POP
// end ;
15425: PPOPN 2
15427: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15428: LD_EXP 23
15432: PUSH
15433: LD_EXP 72
15437: AND
15438: IFFALSE 15725
15440: GO 15442
15442: DISABLE
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
15447: PPUSH
// begin i := rand ( 1 , 7 ) ;
15448: LD_ADDR_VAR 0 1
15452: PUSH
15453: LD_INT 1
15455: PPUSH
15456: LD_INT 7
15458: PPUSH
15459: CALL_OW 12
15463: ST_TO_ADDR
// case i of 1 :
15464: LD_VAR 0 1
15468: PUSH
15469: LD_INT 1
15471: DOUBLE
15472: EQUAL
15473: IFTRUE 15477
15475: GO 15487
15477: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15478: LD_STRING earthquake(getX(game), 0, 32)
15480: PPUSH
15481: CALL_OW 559
15485: GO 15725
15487: LD_INT 2
15489: DOUBLE
15490: EQUAL
15491: IFTRUE 15495
15493: GO 15509
15495: POP
// begin ToLua ( displayStucuk(); ) ;
15496: LD_STRING displayStucuk();
15498: PPUSH
15499: CALL_OW 559
// ResetFog ;
15503: CALL_OW 335
// end ; 3 :
15507: GO 15725
15509: LD_INT 3
15511: DOUBLE
15512: EQUAL
15513: IFTRUE 15517
15515: GO 15621
15517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15518: LD_ADDR_VAR 0 2
15522: PUSH
15523: LD_INT 22
15525: PUSH
15526: LD_OWVAR 2
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 25
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PPUSH
15549: CALL_OW 69
15553: ST_TO_ADDR
// if not tmp then
15554: LD_VAR 0 2
15558: NOT
15559: IFFALSE 15563
// exit ;
15561: GO 15725
// un := tmp [ rand ( 1 , tmp ) ] ;
15563: LD_ADDR_VAR 0 3
15567: PUSH
15568: LD_VAR 0 2
15572: PUSH
15573: LD_INT 1
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 12
15585: ARRAY
15586: ST_TO_ADDR
// if Crawls ( un ) then
15587: LD_VAR 0 3
15591: PPUSH
15592: CALL_OW 318
15596: IFFALSE 15607
// ComWalk ( un ) ;
15598: LD_VAR 0 3
15602: PPUSH
15603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 8
15614: PPUSH
15615: CALL_OW 336
// end ; 4 :
15619: GO 15725
15621: LD_INT 4
15623: DOUBLE
15624: EQUAL
15625: IFTRUE 15629
15627: GO 15703
15629: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 30
15649: PUSH
15650: LD_INT 29
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: ST_TO_ADDR
// if not tmp then
15666: LD_VAR 0 2
15670: NOT
15671: IFFALSE 15675
// exit ;
15673: GO 15725
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15675: LD_VAR 0 2
15679: PUSH
15680: LD_INT 1
15682: ARRAY
15683: PPUSH
15684: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15688: LD_VAR 0 2
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: PPUSH
15697: CALL_OW 65
// end ; 5 .. 7 :
15701: GO 15725
15703: LD_INT 5
15705: DOUBLE
15706: GREATEREQUAL
15707: IFFALSE 15715
15709: LD_INT 7
15711: DOUBLE
15712: LESSEQUAL
15713: IFTRUE 15717
15715: GO 15724
15717: POP
// StreamSibBomb ; end ;
15718: CALL 11962 0 0
15722: GO 15725
15724: POP
// end ;
15725: PPOPN 3
15727: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15728: LD_EXP 23
15732: PUSH
15733: LD_EXP 73
15737: AND
15738: IFFALSE 15894
15740: GO 15742
15742: DISABLE
15743: LD_INT 0
15745: PPUSH
15746: PPUSH
15747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_INT 81
15755: PUSH
15756: LD_OWVAR 2
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 2
15767: PUSH
15768: LD_INT 21
15770: PUSH
15771: LD_INT 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 2
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PPUSH
15797: CALL_OW 69
15801: ST_TO_ADDR
// if not tmp then
15802: LD_VAR 0 2
15806: NOT
15807: IFFALSE 15811
// exit ;
15809: GO 15894
// p := 0 ;
15811: LD_ADDR_VAR 0 3
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15819: LD_INT 35
15821: PPUSH
15822: CALL_OW 67
// p := p + 1 ;
15826: LD_ADDR_VAR 0 3
15830: PUSH
15831: LD_VAR 0 3
15835: PUSH
15836: LD_INT 1
15838: PLUS
15839: ST_TO_ADDR
// for i in tmp do
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: LD_VAR 0 2
15849: PUSH
15850: FOR_IN
15851: IFFALSE 15882
// if GetLives ( i ) < 1000 then
15853: LD_VAR 0 1
15857: PPUSH
15858: CALL_OW 256
15862: PUSH
15863: LD_INT 1000
15865: LESS
15866: IFFALSE 15880
// SetLives ( i , 1000 ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: LD_INT 1000
15875: PPUSH
15876: CALL_OW 234
15880: GO 15850
15882: POP
15883: POP
// until p > 20 ;
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 20
15891: GREATER
15892: IFFALSE 15819
// end ;
15894: PPOPN 3
15896: END
// every 0 0$1 trigger StreamModeActive and sTime do
15897: LD_EXP 23
15901: PUSH
15902: LD_EXP 74
15906: AND
15907: IFFALSE 15942
15909: GO 15911
15911: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15912: LD_INT 28
15914: PPUSH
15915: LD_OWVAR 2
15919: PPUSH
15920: LD_INT 2
15922: PPUSH
15923: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15927: LD_INT 30
15929: PPUSH
15930: LD_OWVAR 2
15934: PPUSH
15935: LD_INT 2
15937: PPUSH
15938: CALL_OW 322
// end ;
15942: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15943: LD_EXP 23
15947: PUSH
15948: LD_EXP 75
15952: AND
15953: IFFALSE 16074
15955: GO 15957
15957: DISABLE
15958: LD_INT 0
15960: PPUSH
15961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_OWVAR 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 21
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 3
15991: PUSH
15992: LD_INT 23
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: ST_TO_ADDR
// if not tmp then
16016: LD_VAR 0 2
16020: NOT
16021: IFFALSE 16025
// exit ;
16023: GO 16074
// for i in tmp do
16025: LD_ADDR_VAR 0 1
16029: PUSH
16030: LD_VAR 0 2
16034: PUSH
16035: FOR_IN
16036: IFFALSE 16072
// begin if Crawls ( i ) then
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 318
16047: IFFALSE 16058
// ComWalk ( i ) ;
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 138
// SetClass ( i , 2 ) ;
16058: LD_VAR 0 1
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: CALL_OW 336
// end ;
16070: GO 16035
16072: POP
16073: POP
// end ;
16074: PPOPN 2
16076: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16077: LD_EXP 23
16081: PUSH
16082: LD_EXP 76
16086: AND
16087: IFFALSE 16375
16089: GO 16091
16091: DISABLE
16092: LD_INT 0
16094: PPUSH
16095: PPUSH
16096: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16097: LD_OWVAR 2
16101: PPUSH
16102: LD_INT 9
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: LD_INT 1
16110: PPUSH
16111: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16115: LD_INT 9
16117: PPUSH
16118: LD_OWVAR 2
16122: PPUSH
16123: CALL_OW 343
// uc_side := 9 ;
16127: LD_ADDR_OWVAR 20
16131: PUSH
16132: LD_INT 9
16134: ST_TO_ADDR
// uc_nation := 2 ;
16135: LD_ADDR_OWVAR 21
16139: PUSH
16140: LD_INT 2
16142: ST_TO_ADDR
// hc_name := Dark Warrior ;
16143: LD_ADDR_OWVAR 26
16147: PUSH
16148: LD_STRING Dark Warrior
16150: ST_TO_ADDR
// hc_gallery :=  ;
16151: LD_ADDR_OWVAR 33
16155: PUSH
16156: LD_STRING 
16158: ST_TO_ADDR
// hc_noskilllimit := true ;
16159: LD_ADDR_OWVAR 76
16163: PUSH
16164: LD_INT 1
16166: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16167: LD_ADDR_OWVAR 31
16171: PUSH
16172: LD_INT 30
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: LD_INT 30
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: ST_TO_ADDR
// un := CreateHuman ;
16190: LD_ADDR_VAR 0 3
16194: PUSH
16195: CALL_OW 44
16199: ST_TO_ADDR
// hc_noskilllimit := false ;
16200: LD_ADDR_OWVAR 76
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16208: LD_VAR 0 3
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: CALL_OW 51
// ToLua ( playRanger() ) ;
16220: LD_STRING playRanger()
16222: PPUSH
16223: CALL_OW 559
// p := 0 ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 0
16234: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16235: LD_INT 35
16237: PPUSH
16238: CALL_OW 67
// p := p + 1 ;
16242: LD_ADDR_VAR 0 2
16246: PUSH
16247: LD_VAR 0 2
16251: PUSH
16252: LD_INT 1
16254: PLUS
16255: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16256: LD_VAR 0 3
16260: PPUSH
16261: CALL_OW 256
16265: PUSH
16266: LD_INT 1000
16268: LESS
16269: IFFALSE 16283
// SetLives ( un , 1000 ) ;
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_INT 1000
16278: PPUSH
16279: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16283: LD_VAR 0 3
16287: PPUSH
16288: LD_INT 81
16290: PUSH
16291: LD_OWVAR 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 91
16302: PUSH
16303: LD_VAR 0 3
16307: PUSH
16308: LD_INT 30
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PPUSH
16320: CALL_OW 69
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: CALL_OW 74
16334: PPUSH
16335: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16339: LD_VAR 0 2
16343: PUSH
16344: LD_INT 80
16346: GREATER
16347: PUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: CALL_OW 301
16357: OR
16358: IFFALSE 16235
// if un then
16360: LD_VAR 0 3
16364: IFFALSE 16375
// RemoveUnit ( un ) ;
16366: LD_VAR 0 3
16370: PPUSH
16371: CALL_OW 64
// end ;
16375: PPOPN 3
16377: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16378: LD_EXP 77
16382: IFFALSE 16498
16384: GO 16386
16386: DISABLE
16387: LD_INT 0
16389: PPUSH
16390: PPUSH
16391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16392: LD_ADDR_VAR 0 2
16396: PUSH
16397: LD_INT 81
16399: PUSH
16400: LD_OWVAR 2
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PPUSH
16423: CALL_OW 69
16427: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16428: LD_STRING playComputer()
16430: PPUSH
16431: CALL_OW 559
// if not tmp then
16435: LD_VAR 0 2
16439: NOT
16440: IFFALSE 16444
// exit ;
16442: GO 16498
// for i in tmp do
16444: LD_ADDR_VAR 0 1
16448: PUSH
16449: LD_VAR 0 2
16453: PUSH
16454: FOR_IN
16455: IFFALSE 16496
// for j := 1 to 4 do
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: DOUBLE
16463: LD_INT 1
16465: DEC
16466: ST_TO_ADDR
16467: LD_INT 4
16469: PUSH
16470: FOR_TO
16471: IFFALSE 16492
// SetSkill ( i , j , 10 ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: LD_INT 10
16485: PPUSH
16486: CALL_OW 237
16490: GO 16470
16492: POP
16493: POP
16494: GO 16454
16496: POP
16497: POP
// end ;
16498: PPOPN 3
16500: END
// every 0 0$1 trigger s30 do var i , tmp ;
16501: LD_EXP 78
16505: IFFALSE 16574
16507: GO 16509
16509: DISABLE
16510: LD_INT 0
16512: PPUSH
16513: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16514: LD_ADDR_VAR 0 2
16518: PUSH
16519: LD_INT 22
16521: PUSH
16522: LD_OWVAR 2
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PPUSH
16531: CALL_OW 69
16535: ST_TO_ADDR
// if not tmp then
16536: LD_VAR 0 2
16540: NOT
16541: IFFALSE 16545
// exit ;
16543: GO 16574
// for i in tmp do
16545: LD_ADDR_VAR 0 1
16549: PUSH
16550: LD_VAR 0 2
16554: PUSH
16555: FOR_IN
16556: IFFALSE 16572
// SetLives ( i , 300 ) ;
16558: LD_VAR 0 1
16562: PPUSH
16563: LD_INT 300
16565: PPUSH
16566: CALL_OW 234
16570: GO 16555
16572: POP
16573: POP
// end ;
16574: PPOPN 2
16576: END
// every 0 0$1 trigger s60 do var i , tmp ;
16577: LD_EXP 79
16581: IFFALSE 16650
16583: GO 16585
16585: DISABLE
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16590: LD_ADDR_VAR 0 2
16594: PUSH
16595: LD_INT 22
16597: PUSH
16598: LD_OWVAR 2
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 2
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16650
// for i in tmp do
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: FOR_IN
16632: IFFALSE 16648
// SetLives ( i , 600 ) ;
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 600
16641: PPUSH
16642: CALL_OW 234
16646: GO 16631
16648: POP
16649: POP
// end ;
16650: PPOPN 2
16652: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16653: LD_INT 0
16655: PPUSH
// case cmd of 301 :
16656: LD_VAR 0 1
16660: PUSH
16661: LD_INT 301
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16701
16669: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16670: LD_VAR 0 6
16674: PPUSH
16675: LD_VAR 0 7
16679: PPUSH
16680: LD_VAR 0 8
16684: PPUSH
16685: LD_VAR 0 4
16689: PPUSH
16690: LD_VAR 0 5
16694: PPUSH
16695: CALL 17902 0 5
16699: GO 16822
16701: LD_INT 302
16703: DOUBLE
16704: EQUAL
16705: IFTRUE 16709
16707: GO 16746
16709: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16710: LD_VAR 0 6
16714: PPUSH
16715: LD_VAR 0 7
16719: PPUSH
16720: LD_VAR 0 8
16724: PPUSH
16725: LD_VAR 0 9
16729: PPUSH
16730: LD_VAR 0 4
16734: PPUSH
16735: LD_VAR 0 5
16739: PPUSH
16740: CALL 17993 0 6
16744: GO 16822
16746: LD_INT 303
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16791
16754: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16755: LD_VAR 0 6
16759: PPUSH
16760: LD_VAR 0 7
16764: PPUSH
16765: LD_VAR 0 8
16769: PPUSH
16770: LD_VAR 0 9
16774: PPUSH
16775: LD_VAR 0 4
16779: PPUSH
16780: LD_VAR 0 5
16784: PPUSH
16785: CALL 16827 0 6
16789: GO 16822
16791: LD_INT 304
16793: DOUBLE
16794: EQUAL
16795: IFTRUE 16799
16797: GO 16821
16799: POP
// hHackTeleport ( unit , x , y ) ; end ;
16800: LD_VAR 0 2
16804: PPUSH
16805: LD_VAR 0 4
16809: PPUSH
16810: LD_VAR 0 5
16814: PPUSH
16815: CALL 18586 0 3
16819: GO 16822
16821: POP
// end ;
16822: LD_VAR 0 12
16826: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16827: LD_INT 0
16829: PPUSH
16830: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16831: LD_VAR 0 1
16835: PUSH
16836: LD_INT 1
16838: LESS
16839: PUSH
16840: LD_VAR 0 1
16844: PUSH
16845: LD_INT 3
16847: GREATER
16848: OR
16849: PUSH
16850: LD_VAR 0 5
16854: PPUSH
16855: LD_VAR 0 6
16859: PPUSH
16860: CALL_OW 428
16864: OR
16865: IFFALSE 16869
// exit ;
16867: GO 17589
// uc_side := your_side ;
16869: LD_ADDR_OWVAR 20
16873: PUSH
16874: LD_OWVAR 2
16878: ST_TO_ADDR
// uc_nation := nation ;
16879: LD_ADDR_OWVAR 21
16883: PUSH
16884: LD_VAR 0 1
16888: ST_TO_ADDR
// bc_level = 1 ;
16889: LD_ADDR_OWVAR 43
16893: PUSH
16894: LD_INT 1
16896: ST_TO_ADDR
// case btype of 1 :
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 1
16904: DOUBLE
16905: EQUAL
16906: IFTRUE 16910
16908: GO 16921
16910: POP
// bc_type := b_depot ; 2 :
16911: LD_ADDR_OWVAR 42
16915: PUSH
16916: LD_INT 0
16918: ST_TO_ADDR
16919: GO 17533
16921: LD_INT 2
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16940
16929: POP
// bc_type := b_warehouse ; 3 :
16930: LD_ADDR_OWVAR 42
16934: PUSH
16935: LD_INT 1
16937: ST_TO_ADDR
16938: GO 17533
16940: LD_INT 3
16942: DOUBLE
16943: EQUAL
16944: IFTRUE 16948
16946: GO 16959
16948: POP
// bc_type := b_lab ; 4 .. 9 :
16949: LD_ADDR_OWVAR 42
16953: PUSH
16954: LD_INT 6
16956: ST_TO_ADDR
16957: GO 17533
16959: LD_INT 4
16961: DOUBLE
16962: GREATEREQUAL
16963: IFFALSE 16971
16965: LD_INT 9
16967: DOUBLE
16968: LESSEQUAL
16969: IFTRUE 16973
16971: GO 17025
16973: POP
// begin bc_type := b_lab_half ;
16974: LD_ADDR_OWVAR 42
16978: PUSH
16979: LD_INT 7
16981: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16982: LD_ADDR_OWVAR 44
16986: PUSH
16987: LD_INT 10
16989: PUSH
16990: LD_INT 11
16992: PUSH
16993: LD_INT 12
16995: PUSH
16996: LD_INT 15
16998: PUSH
16999: LD_INT 14
17001: PUSH
17002: LD_INT 13
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: LD_VAR 0 2
17017: PUSH
17018: LD_INT 3
17020: MINUS
17021: ARRAY
17022: ST_TO_ADDR
// end ; 10 .. 13 :
17023: GO 17533
17025: LD_INT 10
17027: DOUBLE
17028: GREATEREQUAL
17029: IFFALSE 17037
17031: LD_INT 13
17033: DOUBLE
17034: LESSEQUAL
17035: IFTRUE 17039
17037: GO 17116
17039: POP
// begin bc_type := b_lab_full ;
17040: LD_ADDR_OWVAR 42
17044: PUSH
17045: LD_INT 8
17047: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17048: LD_ADDR_OWVAR 44
17052: PUSH
17053: LD_INT 10
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 14
17061: PUSH
17062: LD_INT 13
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: PUSH
17071: LD_VAR 0 2
17075: PUSH
17076: LD_INT 9
17078: MINUS
17079: ARRAY
17080: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17081: LD_ADDR_OWVAR 45
17085: PUSH
17086: LD_INT 11
17088: PUSH
17089: LD_INT 15
17091: PUSH
17092: LD_INT 12
17094: PUSH
17095: LD_INT 15
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_VAR 0 2
17108: PUSH
17109: LD_INT 9
17111: MINUS
17112: ARRAY
17113: ST_TO_ADDR
// end ; 14 :
17114: GO 17533
17116: LD_INT 14
17118: DOUBLE
17119: EQUAL
17120: IFTRUE 17124
17122: GO 17135
17124: POP
// bc_type := b_workshop ; 15 :
17125: LD_ADDR_OWVAR 42
17129: PUSH
17130: LD_INT 2
17132: ST_TO_ADDR
17133: GO 17533
17135: LD_INT 15
17137: DOUBLE
17138: EQUAL
17139: IFTRUE 17143
17141: GO 17154
17143: POP
// bc_type := b_factory ; 16 :
17144: LD_ADDR_OWVAR 42
17148: PUSH
17149: LD_INT 3
17151: ST_TO_ADDR
17152: GO 17533
17154: LD_INT 16
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17173
17162: POP
// bc_type := b_ext_gun ; 17 :
17163: LD_ADDR_OWVAR 42
17167: PUSH
17168: LD_INT 17
17170: ST_TO_ADDR
17171: GO 17533
17173: LD_INT 17
17175: DOUBLE
17176: EQUAL
17177: IFTRUE 17181
17179: GO 17209
17181: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17182: LD_ADDR_OWVAR 42
17186: PUSH
17187: LD_INT 19
17189: PUSH
17190: LD_INT 23
17192: PUSH
17193: LD_INT 19
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: LIST
17200: PUSH
17201: LD_VAR 0 1
17205: ARRAY
17206: ST_TO_ADDR
17207: GO 17533
17209: LD_INT 18
17211: DOUBLE
17212: EQUAL
17213: IFTRUE 17217
17215: GO 17228
17217: POP
// bc_type := b_ext_radar ; 19 :
17218: LD_ADDR_OWVAR 42
17222: PUSH
17223: LD_INT 20
17225: ST_TO_ADDR
17226: GO 17533
17228: LD_INT 19
17230: DOUBLE
17231: EQUAL
17232: IFTRUE 17236
17234: GO 17247
17236: POP
// bc_type := b_ext_radio ; 20 :
17237: LD_ADDR_OWVAR 42
17241: PUSH
17242: LD_INT 22
17244: ST_TO_ADDR
17245: GO 17533
17247: LD_INT 20
17249: DOUBLE
17250: EQUAL
17251: IFTRUE 17255
17253: GO 17266
17255: POP
// bc_type := b_ext_siberium ; 21 :
17256: LD_ADDR_OWVAR 42
17260: PUSH
17261: LD_INT 21
17263: ST_TO_ADDR
17264: GO 17533
17266: LD_INT 21
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17285
17274: POP
// bc_type := b_ext_computer ; 22 :
17275: LD_ADDR_OWVAR 42
17279: PUSH
17280: LD_INT 24
17282: ST_TO_ADDR
17283: GO 17533
17285: LD_INT 22
17287: DOUBLE
17288: EQUAL
17289: IFTRUE 17293
17291: GO 17304
17293: POP
// bc_type := b_ext_track ; 23 :
17294: LD_ADDR_OWVAR 42
17298: PUSH
17299: LD_INT 16
17301: ST_TO_ADDR
17302: GO 17533
17304: LD_INT 23
17306: DOUBLE
17307: EQUAL
17308: IFTRUE 17312
17310: GO 17323
17312: POP
// bc_type := b_ext_laser ; 24 :
17313: LD_ADDR_OWVAR 42
17317: PUSH
17318: LD_INT 25
17320: ST_TO_ADDR
17321: GO 17533
17323: LD_INT 24
17325: DOUBLE
17326: EQUAL
17327: IFTRUE 17331
17329: GO 17342
17331: POP
// bc_type := b_control_tower ; 25 :
17332: LD_ADDR_OWVAR 42
17336: PUSH
17337: LD_INT 36
17339: ST_TO_ADDR
17340: GO 17533
17342: LD_INT 25
17344: DOUBLE
17345: EQUAL
17346: IFTRUE 17350
17348: GO 17361
17350: POP
// bc_type := b_breastwork ; 26 :
17351: LD_ADDR_OWVAR 42
17355: PUSH
17356: LD_INT 31
17358: ST_TO_ADDR
17359: GO 17533
17361: LD_INT 26
17363: DOUBLE
17364: EQUAL
17365: IFTRUE 17369
17367: GO 17380
17369: POP
// bc_type := b_bunker ; 27 :
17370: LD_ADDR_OWVAR 42
17374: PUSH
17375: LD_INT 32
17377: ST_TO_ADDR
17378: GO 17533
17380: LD_INT 27
17382: DOUBLE
17383: EQUAL
17384: IFTRUE 17388
17386: GO 17399
17388: POP
// bc_type := b_turret ; 28 :
17389: LD_ADDR_OWVAR 42
17393: PUSH
17394: LD_INT 33
17396: ST_TO_ADDR
17397: GO 17533
17399: LD_INT 28
17401: DOUBLE
17402: EQUAL
17403: IFTRUE 17407
17405: GO 17418
17407: POP
// bc_type := b_armoury ; 29 :
17408: LD_ADDR_OWVAR 42
17412: PUSH
17413: LD_INT 4
17415: ST_TO_ADDR
17416: GO 17533
17418: LD_INT 29
17420: DOUBLE
17421: EQUAL
17422: IFTRUE 17426
17424: GO 17437
17426: POP
// bc_type := b_barracks ; 30 :
17427: LD_ADDR_OWVAR 42
17431: PUSH
17432: LD_INT 5
17434: ST_TO_ADDR
17435: GO 17533
17437: LD_INT 30
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17456
17445: POP
// bc_type := b_solar_power ; 31 :
17446: LD_ADDR_OWVAR 42
17450: PUSH
17451: LD_INT 27
17453: ST_TO_ADDR
17454: GO 17533
17456: LD_INT 31
17458: DOUBLE
17459: EQUAL
17460: IFTRUE 17464
17462: GO 17475
17464: POP
// bc_type := b_oil_power ; 32 :
17465: LD_ADDR_OWVAR 42
17469: PUSH
17470: LD_INT 26
17472: ST_TO_ADDR
17473: GO 17533
17475: LD_INT 32
17477: DOUBLE
17478: EQUAL
17479: IFTRUE 17483
17481: GO 17494
17483: POP
// bc_type := b_siberite_power ; 33 :
17484: LD_ADDR_OWVAR 42
17488: PUSH
17489: LD_INT 28
17491: ST_TO_ADDR
17492: GO 17533
17494: LD_INT 33
17496: DOUBLE
17497: EQUAL
17498: IFTRUE 17502
17500: GO 17513
17502: POP
// bc_type := b_oil_mine ; 34 :
17503: LD_ADDR_OWVAR 42
17507: PUSH
17508: LD_INT 29
17510: ST_TO_ADDR
17511: GO 17533
17513: LD_INT 34
17515: DOUBLE
17516: EQUAL
17517: IFTRUE 17521
17519: GO 17532
17521: POP
// bc_type := b_siberite_mine ; end ;
17522: LD_ADDR_OWVAR 42
17526: PUSH
17527: LD_INT 30
17529: ST_TO_ADDR
17530: GO 17533
17532: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17533: LD_ADDR_VAR 0 8
17537: PUSH
17538: LD_VAR 0 5
17542: PPUSH
17543: LD_VAR 0 6
17547: PPUSH
17548: LD_VAR 0 3
17552: PPUSH
17553: CALL_OW 47
17557: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17558: LD_OWVAR 42
17562: PUSH
17563: LD_INT 32
17565: PUSH
17566: LD_INT 33
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: IN
17573: IFFALSE 17589
// PlaceWeaponTurret ( b , weapon ) ;
17575: LD_VAR 0 8
17579: PPUSH
17580: LD_VAR 0 4
17584: PPUSH
17585: CALL_OW 431
// end ;
17589: LD_VAR 0 7
17593: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17594: LD_INT 0
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: LD_INT 22
17607: PUSH
17608: LD_OWVAR 2
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: LD_INT 30
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 30
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: ST_TO_ADDR
// if not tmp then
17654: LD_VAR 0 4
17658: NOT
17659: IFFALSE 17663
// exit ;
17661: GO 17722
// for i in tmp do
17663: LD_ADDR_VAR 0 2
17667: PUSH
17668: LD_VAR 0 4
17672: PUSH
17673: FOR_IN
17674: IFFALSE 17720
// for j = 1 to 3 do
17676: LD_ADDR_VAR 0 3
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_INT 3
17688: PUSH
17689: FOR_TO
17690: IFFALSE 17716
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17692: LD_VAR 0 2
17696: PPUSH
17697: CALL_OW 274
17701: PPUSH
17702: LD_VAR 0 3
17706: PPUSH
17707: LD_INT 99999
17709: PPUSH
17710: CALL_OW 277
17714: GO 17689
17716: POP
17717: POP
17718: GO 17673
17720: POP
17721: POP
// end ;
17722: LD_VAR 0 1
17726: RET
// export function hHackSetLevel10 ; var i , j ; begin
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17732: LD_ADDR_VAR 0 2
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PPUSH
17747: CALL_OW 69
17751: PUSH
17752: FOR_IN
17753: IFFALSE 17805
// if IsSelected ( i ) then
17755: LD_VAR 0 2
17759: PPUSH
17760: CALL_OW 306
17764: IFFALSE 17803
// begin for j := 1 to 4 do
17766: LD_ADDR_VAR 0 3
17770: PUSH
17771: DOUBLE
17772: LD_INT 1
17774: DEC
17775: ST_TO_ADDR
17776: LD_INT 4
17778: PUSH
17779: FOR_TO
17780: IFFALSE 17801
// SetSkill ( i , j , 10 ) ;
17782: LD_VAR 0 2
17786: PPUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 10
17794: PPUSH
17795: CALL_OW 237
17799: GO 17779
17801: POP
17802: POP
// end ;
17803: GO 17752
17805: POP
17806: POP
// end ;
17807: LD_VAR 0 1
17811: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17812: LD_INT 0
17814: PPUSH
17815: PPUSH
17816: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_INT 22
17824: PUSH
17825: LD_OWVAR 2
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 21
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PPUSH
17848: CALL_OW 69
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17895
// begin for j := 1 to 4 do
17856: LD_ADDR_VAR 0 3
17860: PUSH
17861: DOUBLE
17862: LD_INT 1
17864: DEC
17865: ST_TO_ADDR
17866: LD_INT 4
17868: PUSH
17869: FOR_TO
17870: IFFALSE 17891
// SetSkill ( i , j , 10 ) ;
17872: LD_VAR 0 2
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: LD_INT 10
17884: PPUSH
17885: CALL_OW 237
17889: GO 17869
17891: POP
17892: POP
// end ;
17893: GO 17853
17895: POP
17896: POP
// end ;
17897: LD_VAR 0 1
17901: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17902: LD_INT 0
17904: PPUSH
// uc_side := your_side ;
17905: LD_ADDR_OWVAR 20
17909: PUSH
17910: LD_OWVAR 2
17914: ST_TO_ADDR
// uc_nation := nation ;
17915: LD_ADDR_OWVAR 21
17919: PUSH
17920: LD_VAR 0 1
17924: ST_TO_ADDR
// InitHc ;
17925: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17929: LD_INT 0
17931: PPUSH
17932: LD_VAR 0 2
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17946: LD_VAR 0 4
17950: PPUSH
17951: LD_VAR 0 5
17955: PPUSH
17956: CALL_OW 428
17960: PUSH
17961: LD_INT 0
17963: EQUAL
17964: IFFALSE 17988
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17966: CALL_OW 44
17970: PPUSH
17971: LD_VAR 0 4
17975: PPUSH
17976: LD_VAR 0 5
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: CALL_OW 48
// end ;
17988: LD_VAR 0 6
17992: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17993: LD_INT 0
17995: PPUSH
17996: PPUSH
// uc_side := your_side ;
17997: LD_ADDR_OWVAR 20
18001: PUSH
18002: LD_OWVAR 2
18006: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18007: LD_VAR 0 1
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: LD_INT 4
18023: PUSH
18024: LD_INT 5
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: IN
18034: IFFALSE 18046
// uc_nation := nation_american else
18036: LD_ADDR_OWVAR 21
18040: PUSH
18041: LD_INT 1
18043: ST_TO_ADDR
18044: GO 18089
// if chassis in [ 11 , 12 , 13 , 14 ] then
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 11
18053: PUSH
18054: LD_INT 12
18056: PUSH
18057: LD_INT 13
18059: PUSH
18060: LD_INT 14
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: IN
18069: IFFALSE 18081
// uc_nation := nation_arabian else
18071: LD_ADDR_OWVAR 21
18075: PUSH
18076: LD_INT 2
18078: ST_TO_ADDR
18079: GO 18089
// uc_nation := nation_russian ;
18081: LD_ADDR_OWVAR 21
18085: PUSH
18086: LD_INT 3
18088: ST_TO_ADDR
// vc_chassis := chassis ;
18089: LD_ADDR_OWVAR 37
18093: PUSH
18094: LD_VAR 0 1
18098: ST_TO_ADDR
// vc_engine := engine ;
18099: LD_ADDR_OWVAR 39
18103: PUSH
18104: LD_VAR 0 2
18108: ST_TO_ADDR
// vc_control := control ;
18109: LD_ADDR_OWVAR 38
18113: PUSH
18114: LD_VAR 0 3
18118: ST_TO_ADDR
// vc_weapon := weapon ;
18119: LD_ADDR_OWVAR 40
18123: PUSH
18124: LD_VAR 0 4
18128: ST_TO_ADDR
// un := CreateVehicle ;
18129: LD_ADDR_VAR 0 8
18133: PUSH
18134: CALL_OW 45
18138: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18139: LD_VAR 0 8
18143: PPUSH
18144: LD_INT 0
18146: PPUSH
18147: LD_INT 5
18149: PPUSH
18150: CALL_OW 12
18154: PPUSH
18155: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18159: LD_VAR 0 8
18163: PPUSH
18164: LD_VAR 0 5
18168: PPUSH
18169: LD_VAR 0 6
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 48
// end ;
18181: LD_VAR 0 7
18185: RET
// export hInvincible ; every 1 do
18186: GO 18188
18188: DISABLE
// hInvincible := [ ] ;
18189: LD_ADDR_EXP 80
18193: PUSH
18194: EMPTY
18195: ST_TO_ADDR
18196: END
// every 10 do var i ;
18197: GO 18199
18199: DISABLE
18200: LD_INT 0
18202: PPUSH
// begin enable ;
18203: ENABLE
// if not hInvincible then
18204: LD_EXP 80
18208: NOT
18209: IFFALSE 18213
// exit ;
18211: GO 18257
// for i in hInvincible do
18213: LD_ADDR_VAR 0 1
18217: PUSH
18218: LD_EXP 80
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18255
// if GetLives ( i ) < 1000 then
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 256
18235: PUSH
18236: LD_INT 1000
18238: LESS
18239: IFFALSE 18253
// SetLives ( i , 1000 ) ;
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_INT 1000
18248: PPUSH
18249: CALL_OW 234
18253: GO 18223
18255: POP
18256: POP
// end ;
18257: PPOPN 1
18259: END
// export function hHackInvincible ; var i ; begin
18260: LD_INT 0
18262: PPUSH
18263: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18264: LD_ADDR_VAR 0 2
18268: PUSH
18269: LD_INT 2
18271: PUSH
18272: LD_INT 21
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 69
18301: PUSH
18302: FOR_IN
18303: IFFALSE 18364
// if IsSelected ( i ) then
18305: LD_VAR 0 2
18309: PPUSH
18310: CALL_OW 306
18314: IFFALSE 18362
// begin if i in hInvincible then
18316: LD_VAR 0 2
18320: PUSH
18321: LD_EXP 80
18325: IN
18326: IFFALSE 18346
// hInvincible := hInvincible diff i else
18328: LD_ADDR_EXP 80
18332: PUSH
18333: LD_EXP 80
18337: PUSH
18338: LD_VAR 0 2
18342: DIFF
18343: ST_TO_ADDR
18344: GO 18362
// hInvincible := hInvincible union i ;
18346: LD_ADDR_EXP 80
18350: PUSH
18351: LD_EXP 80
18355: PUSH
18356: LD_VAR 0 2
18360: UNION
18361: ST_TO_ADDR
// end ;
18362: GO 18302
18364: POP
18365: POP
// end ;
18366: LD_VAR 0 1
18370: RET
// export function hHackInvisible ; var i , j ; begin
18371: LD_INT 0
18373: PPUSH
18374: PPUSH
18375: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18376: LD_ADDR_VAR 0 2
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PPUSH
18391: CALL_OW 69
18395: PUSH
18396: FOR_IN
18397: IFFALSE 18421
// if IsSelected ( i ) then
18399: LD_VAR 0 2
18403: PPUSH
18404: CALL_OW 306
18408: IFFALSE 18419
// ComForceInvisible ( i ) ;
18410: LD_VAR 0 2
18414: PPUSH
18415: CALL_OW 496
18419: GO 18396
18421: POP
18422: POP
// end ;
18423: LD_VAR 0 1
18427: RET
// export function hHackChangeYourSide ; begin
18428: LD_INT 0
18430: PPUSH
// if your_side = 8 then
18431: LD_OWVAR 2
18435: PUSH
18436: LD_INT 8
18438: EQUAL
18439: IFFALSE 18451
// your_side := 0 else
18441: LD_ADDR_OWVAR 2
18445: PUSH
18446: LD_INT 0
18448: ST_TO_ADDR
18449: GO 18465
// your_side := your_side + 1 ;
18451: LD_ADDR_OWVAR 2
18455: PUSH
18456: LD_OWVAR 2
18460: PUSH
18461: LD_INT 1
18463: PLUS
18464: ST_TO_ADDR
// end ;
18465: LD_VAR 0 1
18469: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
// for i in all_units do
18475: LD_ADDR_VAR 0 2
18479: PUSH
18480: LD_OWVAR 3
18484: PUSH
18485: FOR_IN
18486: IFFALSE 18564
// if IsSelected ( i ) then
18488: LD_VAR 0 2
18492: PPUSH
18493: CALL_OW 306
18497: IFFALSE 18562
// begin j := GetSide ( i ) ;
18499: LD_ADDR_VAR 0 3
18503: PUSH
18504: LD_VAR 0 2
18508: PPUSH
18509: CALL_OW 255
18513: ST_TO_ADDR
// if j = 8 then
18514: LD_VAR 0 3
18518: PUSH
18519: LD_INT 8
18521: EQUAL
18522: IFFALSE 18534
// j := 0 else
18524: LD_ADDR_VAR 0 3
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
18532: GO 18548
// j := j + 1 ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 3
18543: PUSH
18544: LD_INT 1
18546: PLUS
18547: ST_TO_ADDR
// SetSide ( i , j ) ;
18548: LD_VAR 0 2
18552: PPUSH
18553: LD_VAR 0 3
18557: PPUSH
18558: CALL_OW 235
// end ;
18562: GO 18485
18564: POP
18565: POP
// end ;
18566: LD_VAR 0 1
18570: RET
// export function hHackFog ; begin
18571: LD_INT 0
18573: PPUSH
// FogOff ( true ) ;
18574: LD_INT 1
18576: PPUSH
18577: CALL_OW 344
// end ;
18581: LD_VAR 0 1
18585: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18586: LD_INT 0
18588: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: LD_VAR 0 3
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: CALL_OW 483
// CenterOnXY ( x , y ) ;
18614: LD_VAR 0 2
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: CALL_OW 84
// end ; end_of_file
18628: LD_VAR 0 4
18632: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
18633: LD_VAR 0 1
18637: PUSH
18638: LD_INT 200
18640: DOUBLE
18641: GREATEREQUAL
18642: IFFALSE 18650
18644: LD_INT 299
18646: DOUBLE
18647: LESSEQUAL
18648: IFTRUE 18652
18650: GO 18684
18652: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_VAR 0 4
18672: PPUSH
18673: LD_VAR 0 5
18677: PPUSH
18678: CALL 19174 0 5
18682: GO 18761
18684: LD_INT 300
18686: DOUBLE
18687: GREATEREQUAL
18688: IFFALSE 18696
18690: LD_INT 399
18692: DOUBLE
18693: LESSEQUAL
18694: IFTRUE 18698
18696: GO 18760
18698: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
18699: LD_VAR 0 1
18703: PPUSH
18704: LD_VAR 0 2
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_VAR 0 4
18718: PPUSH
18719: LD_VAR 0 5
18723: PPUSH
18724: LD_VAR 0 6
18728: PPUSH
18729: LD_VAR 0 7
18733: PPUSH
18734: LD_VAR 0 8
18738: PPUSH
18739: LD_VAR 0 9
18743: PPUSH
18744: LD_VAR 0 10
18748: PPUSH
18749: LD_VAR 0 11
18753: PPUSH
18754: CALL 16653 0 11
18758: GO 18761
18760: POP
// end ;
18761: PPOPN 11
18763: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
18764: LD_VAR 0 1
18768: PPUSH
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_VAR 0 3
18778: PPUSH
18779: LD_VAR 0 4
18783: PPUSH
18784: LD_VAR 0 5
18788: PPUSH
18789: CALL 18910 0 5
// end ; end_of_file
18793: PPOPN 5
18795: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18796: LD_INT 0
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18802: LD_VAR 0 1
18806: PPUSH
18807: CALL_OW 264
18811: PUSH
18812: LD_EXP 96
18816: EQUAL
18817: IFFALSE 18889
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18819: LD_INT 68
18821: PPUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 255
18831: PPUSH
18832: CALL_OW 321
18836: PUSH
18837: LD_INT 2
18839: EQUAL
18840: IFFALSE 18852
// eff := 70 else
18842: LD_ADDR_VAR 0 4
18846: PUSH
18847: LD_INT 70
18849: ST_TO_ADDR
18850: GO 18860
// eff := 30 ;
18852: LD_ADDR_VAR 0 4
18856: PUSH
18857: LD_INT 30
18859: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 250
18869: PPUSH
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 251
18879: PPUSH
18880: LD_VAR 0 4
18884: PPUSH
18885: CALL_OW 495
// end ; end ;
18889: LD_VAR 0 2
18893: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18894: LD_INT 0
18896: PPUSH
// end ;
18897: LD_VAR 0 4
18901: RET
// export function SOS_Command ( cmd ) ; begin
18902: LD_INT 0
18904: PPUSH
// end ;
18905: LD_VAR 0 2
18909: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18910: LD_INT 0
18912: PPUSH
// end ;
18913: LD_VAR 0 6
18917: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
// if not vehicle or not factory then
18922: LD_VAR 0 1
18926: NOT
18927: PUSH
18928: LD_VAR 0 2
18932: NOT
18933: OR
18934: IFFALSE 18938
// exit ;
18936: GO 19169
// if factoryWaypoints >= factory then
18938: LD_EXP 81
18942: PUSH
18943: LD_VAR 0 2
18947: GREATEREQUAL
18948: IFFALSE 19169
// if factoryWaypoints [ factory ] then
18950: LD_EXP 81
18954: PUSH
18955: LD_VAR 0 2
18959: ARRAY
18960: IFFALSE 19169
// begin if GetControl ( vehicle ) = control_manual then
18962: LD_VAR 0 1
18966: PPUSH
18967: CALL_OW 263
18971: PUSH
18972: LD_INT 1
18974: EQUAL
18975: IFFALSE 19056
// begin driver := IsDrivenBy ( vehicle ) ;
18977: LD_ADDR_VAR 0 4
18981: PUSH
18982: LD_VAR 0 1
18986: PPUSH
18987: CALL_OW 311
18991: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
18992: LD_VAR 0 4
18996: PPUSH
18997: LD_EXP 81
19001: PUSH
19002: LD_VAR 0 2
19006: ARRAY
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: PPUSH
19012: LD_EXP 81
19016: PUSH
19017: LD_VAR 0 2
19021: ARRAY
19022: PUSH
19023: LD_INT 2
19025: ARRAY
19026: PPUSH
19027: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19031: LD_VAR 0 4
19035: PPUSH
19036: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19040: LD_VAR 0 4
19044: PPUSH
19045: LD_VAR 0 2
19049: PPUSH
19050: CALL_OW 180
// end else
19054: GO 19169
// if GetControl ( vehicle ) = control_remote then
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 263
19065: PUSH
19066: LD_INT 2
19068: EQUAL
19069: IFFALSE 19130
// begin wait ( 0 0$2 ) ;
19071: LD_INT 70
19073: PPUSH
19074: CALL_OW 67
// if Connect ( vehicle ) then
19078: LD_VAR 0 1
19082: PPUSH
19083: CALL 31561 0 1
19087: IFFALSE 19128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_EXP 81
19098: PUSH
19099: LD_VAR 0 2
19103: ARRAY
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: PPUSH
19109: LD_EXP 81
19113: PUSH
19114: LD_VAR 0 2
19118: ARRAY
19119: PUSH
19120: LD_INT 2
19122: ARRAY
19123: PPUSH
19124: CALL_OW 171
// end else
19128: GO 19169
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19130: LD_VAR 0 1
19134: PPUSH
19135: LD_EXP 81
19139: PUSH
19140: LD_VAR 0 2
19144: ARRAY
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: LD_EXP 81
19154: PUSH
19155: LD_VAR 0 2
19159: ARRAY
19160: PUSH
19161: LD_INT 2
19163: ARRAY
19164: PPUSH
19165: CALL_OW 171
// end ; end ;
19169: LD_VAR 0 3
19173: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19174: LD_INT 0
19176: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19177: LD_VAR 0 1
19181: PUSH
19182: LD_INT 250
19184: EQUAL
19185: PUSH
19186: LD_VAR 0 2
19190: PPUSH
19191: CALL_OW 264
19195: PUSH
19196: LD_EXP 99
19200: EQUAL
19201: AND
19202: IFFALSE 19223
// MinerPlaceMine ( unit , x , y ) ;
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_VAR 0 4
19213: PPUSH
19214: LD_VAR 0 5
19218: PPUSH
19219: CALL 21951 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19223: LD_VAR 0 1
19227: PUSH
19228: LD_INT 251
19230: EQUAL
19231: PUSH
19232: LD_VAR 0 2
19236: PPUSH
19237: CALL_OW 264
19241: PUSH
19242: LD_EXP 99
19246: EQUAL
19247: AND
19248: IFFALSE 19269
// MinerDetonateMine ( unit , x , y ) ;
19250: LD_VAR 0 2
19254: PPUSH
19255: LD_VAR 0 4
19259: PPUSH
19260: LD_VAR 0 5
19264: PPUSH
19265: CALL 22228 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19269: LD_VAR 0 1
19273: PUSH
19274: LD_INT 252
19276: EQUAL
19277: PUSH
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL_OW 264
19287: PUSH
19288: LD_EXP 99
19292: EQUAL
19293: AND
19294: IFFALSE 19315
// MinerCreateMinefield ( unit , x , y ) ;
19296: LD_VAR 0 2
19300: PPUSH
19301: LD_VAR 0 4
19305: PPUSH
19306: LD_VAR 0 5
19310: PPUSH
19311: CALL 22645 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19315: LD_VAR 0 1
19319: PUSH
19320: LD_INT 253
19322: EQUAL
19323: PUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 257
19333: PUSH
19334: LD_INT 5
19336: EQUAL
19337: AND
19338: IFFALSE 19359
// ComBinocular ( unit , x , y ) ;
19340: LD_VAR 0 2
19344: PPUSH
19345: LD_VAR 0 4
19349: PPUSH
19350: LD_VAR 0 5
19354: PPUSH
19355: CALL 23016 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 254
19366: EQUAL
19367: PUSH
19368: LD_VAR 0 2
19372: PPUSH
19373: CALL_OW 264
19377: PUSH
19378: LD_EXP 94
19382: EQUAL
19383: AND
19384: PUSH
19385: LD_VAR 0 3
19389: PPUSH
19390: CALL_OW 263
19394: PUSH
19395: LD_INT 3
19397: EQUAL
19398: AND
19399: IFFALSE 19415
// HackDestroyVehicle ( unit , selectedUnit ) ;
19401: LD_VAR 0 2
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: CALL 21311 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19415: LD_VAR 0 1
19419: PUSH
19420: LD_INT 255
19422: EQUAL
19423: PUSH
19424: LD_VAR 0 2
19428: PPUSH
19429: CALL_OW 264
19433: PUSH
19434: LD_INT 14
19436: PUSH
19437: LD_INT 53
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: IN
19444: AND
19445: PUSH
19446: LD_VAR 0 4
19450: PPUSH
19451: LD_VAR 0 5
19455: PPUSH
19456: CALL_OW 488
19460: AND
19461: IFFALSE 19485
// CutTreeXYR ( unit , x , y , 12 ) ;
19463: LD_VAR 0 2
19467: PPUSH
19468: LD_VAR 0 4
19472: PPUSH
19473: LD_VAR 0 5
19477: PPUSH
19478: LD_INT 12
19480: PPUSH
19481: CALL 19877 0 4
// if cmd = 256 then
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 256
19492: EQUAL
19493: IFFALSE 19514
// SetFactoryWaypoint ( unit , x , y ) ;
19495: LD_VAR 0 2
19499: PPUSH
19500: LD_VAR 0 4
19504: PPUSH
19505: LD_VAR 0 5
19509: PPUSH
19510: CALL 19519 0 3
// end ;
19514: LD_VAR 0 6
19518: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19519: LD_INT 0
19521: PPUSH
19522: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19523: LD_VAR 0 1
19527: NOT
19528: PUSH
19529: LD_VAR 0 2
19533: PPUSH
19534: LD_VAR 0 3
19538: PPUSH
19539: CALL_OW 488
19543: NOT
19544: OR
19545: PUSH
19546: LD_VAR 0 1
19550: PPUSH
19551: CALL_OW 266
19555: PUSH
19556: LD_INT 3
19558: NONEQUAL
19559: PUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 247
19569: PUSH
19570: LD_INT 1
19572: EQUAL
19573: NOT
19574: AND
19575: OR
19576: IFFALSE 19580
// exit ;
19578: GO 19729
// if GetType ( factory ) = unit_human then
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 247
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19610
// factory := IsInUnit ( factory ) ;
19595: LD_ADDR_VAR 0 1
19599: PUSH
19600: LD_VAR 0 1
19604: PPUSH
19605: CALL_OW 310
19609: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19610: LD_VAR 0 1
19614: PPUSH
19615: CALL_OW 266
19619: PUSH
19620: LD_INT 3
19622: NONEQUAL
19623: IFFALSE 19627
// exit ;
19625: GO 19729
// if HexInfo ( x , y ) = factory then
19627: LD_VAR 0 2
19631: PPUSH
19632: LD_VAR 0 3
19636: PPUSH
19637: CALL_OW 428
19641: PUSH
19642: LD_VAR 0 1
19646: EQUAL
19647: IFFALSE 19674
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19649: LD_ADDR_EXP 81
19653: PUSH
19654: LD_EXP 81
19658: PPUSH
19659: LD_VAR 0 1
19663: PPUSH
19664: LD_INT 0
19666: PPUSH
19667: CALL_OW 1
19671: ST_TO_ADDR
19672: GO 19725
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19674: LD_ADDR_EXP 81
19678: PUSH
19679: LD_EXP 81
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL_OW 255
19698: PUSH
19699: LD_VAR 0 1
19703: PUSH
19704: LD_VAR 0 2
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 1
19724: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19725: CALL 19734 0 0
// end ;
19729: LD_VAR 0 4
19733: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
19734: LD_INT 0
19736: PPUSH
19737: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19738: LD_STRING resetFactoryWaypoint();
19740: PPUSH
19741: CALL_OW 559
// if factoryWaypoints then
19745: LD_EXP 81
19749: IFFALSE 19872
// begin for i := 1 to factoryWaypoints do
19751: LD_ADDR_VAR 0 2
19755: PUSH
19756: DOUBLE
19757: LD_INT 1
19759: DEC
19760: ST_TO_ADDR
19761: LD_EXP 81
19765: PUSH
19766: FOR_TO
19767: IFFALSE 19870
// if factoryWaypoints [ i ] then
19769: LD_EXP 81
19773: PUSH
19774: LD_VAR 0 2
19778: ARRAY
19779: IFFALSE 19868
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
19781: LD_STRING setFactoryWaypointXY(
19783: PUSH
19784: LD_EXP 81
19788: PUSH
19789: LD_VAR 0 2
19793: ARRAY
19794: PUSH
19795: LD_INT 1
19797: ARRAY
19798: STR
19799: PUSH
19800: LD_STRING ,
19802: STR
19803: PUSH
19804: LD_EXP 81
19808: PUSH
19809: LD_VAR 0 2
19813: ARRAY
19814: PUSH
19815: LD_INT 2
19817: ARRAY
19818: STR
19819: PUSH
19820: LD_STRING ,
19822: STR
19823: PUSH
19824: LD_EXP 81
19828: PUSH
19829: LD_VAR 0 2
19833: ARRAY
19834: PUSH
19835: LD_INT 3
19837: ARRAY
19838: STR
19839: PUSH
19840: LD_STRING ,
19842: STR
19843: PUSH
19844: LD_EXP 81
19848: PUSH
19849: LD_VAR 0 2
19853: ARRAY
19854: PUSH
19855: LD_INT 4
19857: ARRAY
19858: STR
19859: PUSH
19860: LD_STRING )
19862: STR
19863: PPUSH
19864: CALL_OW 559
19868: GO 19766
19870: POP
19871: POP
// end ; end ;
19872: LD_VAR 0 1
19876: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
19881: PPUSH
19882: PPUSH
19883: PPUSH
19884: PPUSH
19885: PPUSH
19886: PPUSH
19887: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19888: LD_VAR 0 1
19892: NOT
19893: PUSH
19894: LD_VAR 0 2
19898: PPUSH
19899: LD_VAR 0 3
19903: PPUSH
19904: CALL_OW 488
19908: NOT
19909: OR
19910: PUSH
19911: LD_VAR 0 4
19915: NOT
19916: OR
19917: IFFALSE 19921
// exit ;
19919: GO 20261
// list := [ ] ;
19921: LD_ADDR_VAR 0 13
19925: PUSH
19926: EMPTY
19927: ST_TO_ADDR
// if x - r < 0 then
19928: LD_VAR 0 2
19932: PUSH
19933: LD_VAR 0 4
19937: MINUS
19938: PUSH
19939: LD_INT 0
19941: LESS
19942: IFFALSE 19954
// min_x := 0 else
19944: LD_ADDR_VAR 0 7
19948: PUSH
19949: LD_INT 0
19951: ST_TO_ADDR
19952: GO 19970
// min_x := x - r ;
19954: LD_ADDR_VAR 0 7
19958: PUSH
19959: LD_VAR 0 2
19963: PUSH
19964: LD_VAR 0 4
19968: MINUS
19969: ST_TO_ADDR
// if y - r < 0 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_VAR 0 4
19979: MINUS
19980: PUSH
19981: LD_INT 0
19983: LESS
19984: IFFALSE 19996
// min_y := 0 else
19986: LD_ADDR_VAR 0 8
19990: PUSH
19991: LD_INT 0
19993: ST_TO_ADDR
19994: GO 20012
// min_y := y - r ;
19996: LD_ADDR_VAR 0 8
20000: PUSH
20001: LD_VAR 0 3
20005: PUSH
20006: LD_VAR 0 4
20010: MINUS
20011: ST_TO_ADDR
// max_x := x + r ;
20012: LD_ADDR_VAR 0 9
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_VAR 0 4
20026: PLUS
20027: ST_TO_ADDR
// max_y := y + r ;
20028: LD_ADDR_VAR 0 10
20032: PUSH
20033: LD_VAR 0 3
20037: PUSH
20038: LD_VAR 0 4
20042: PLUS
20043: ST_TO_ADDR
// for _x = min_x to max_x do
20044: LD_ADDR_VAR 0 11
20048: PUSH
20049: DOUBLE
20050: LD_VAR 0 7
20054: DEC
20055: ST_TO_ADDR
20056: LD_VAR 0 9
20060: PUSH
20061: FOR_TO
20062: IFFALSE 20179
// for _y = min_y to max_y do
20064: LD_ADDR_VAR 0 12
20068: PUSH
20069: DOUBLE
20070: LD_VAR 0 8
20074: DEC
20075: ST_TO_ADDR
20076: LD_VAR 0 10
20080: PUSH
20081: FOR_TO
20082: IFFALSE 20175
// begin if not ValidHex ( _x , _y ) then
20084: LD_VAR 0 11
20088: PPUSH
20089: LD_VAR 0 12
20093: PPUSH
20094: CALL_OW 488
20098: NOT
20099: IFFALSE 20103
// continue ;
20101: GO 20081
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20103: LD_VAR 0 11
20107: PPUSH
20108: LD_VAR 0 12
20112: PPUSH
20113: CALL_OW 351
20117: PUSH
20118: LD_VAR 0 11
20122: PPUSH
20123: LD_VAR 0 12
20127: PPUSH
20128: CALL_OW 554
20132: AND
20133: IFFALSE 20173
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20135: LD_ADDR_VAR 0 13
20139: PUSH
20140: LD_VAR 0 13
20144: PPUSH
20145: LD_VAR 0 13
20149: PUSH
20150: LD_INT 1
20152: PLUS
20153: PPUSH
20154: LD_VAR 0 11
20158: PUSH
20159: LD_VAR 0 12
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PPUSH
20168: CALL_OW 2
20172: ST_TO_ADDR
// end ;
20173: GO 20081
20175: POP
20176: POP
20177: GO 20061
20179: POP
20180: POP
// if not list then
20181: LD_VAR 0 13
20185: NOT
20186: IFFALSE 20190
// exit ;
20188: GO 20261
// for i in list do
20190: LD_ADDR_VAR 0 6
20194: PUSH
20195: LD_VAR 0 13
20199: PUSH
20200: FOR_IN
20201: IFFALSE 20259
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: LD_STRING M
20210: PUSH
20211: LD_VAR 0 6
20215: PUSH
20216: LD_INT 1
20218: ARRAY
20219: PUSH
20220: LD_VAR 0 6
20224: PUSH
20225: LD_INT 2
20227: ARRAY
20228: PUSH
20229: LD_INT 0
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: PPUSH
20253: CALL_OW 447
20257: GO 20200
20259: POP
20260: POP
// end ;
20261: LD_VAR 0 5
20265: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20266: LD_EXP 82
20270: NOT
20271: IFFALSE 20321
20273: GO 20275
20275: DISABLE
// begin initHack := true ;
20276: LD_ADDR_EXP 82
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// hackTanks := [ ] ;
20284: LD_ADDR_EXP 83
20288: PUSH
20289: EMPTY
20290: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20291: LD_ADDR_EXP 84
20295: PUSH
20296: EMPTY
20297: ST_TO_ADDR
// hackLimit := 3 ;
20298: LD_ADDR_EXP 85
20302: PUSH
20303: LD_INT 3
20305: ST_TO_ADDR
// hackDist := 12 ;
20306: LD_ADDR_EXP 86
20310: PUSH
20311: LD_INT 12
20313: ST_TO_ADDR
// hackCounter := [ ] ;
20314: LD_ADDR_EXP 87
20318: PUSH
20319: EMPTY
20320: ST_TO_ADDR
// end ;
20321: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20322: LD_EXP 82
20326: PUSH
20327: LD_INT 34
20329: PUSH
20330: LD_EXP 94
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: AND
20344: IFFALSE 20599
20346: GO 20348
20348: DISABLE
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
// begin enable ;
20353: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20354: LD_ADDR_VAR 0 1
20358: PUSH
20359: LD_INT 34
20361: PUSH
20362: LD_EXP 94
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PPUSH
20371: CALL_OW 69
20375: PUSH
20376: FOR_IN
20377: IFFALSE 20597
// begin if not i in hackTanks then
20379: LD_VAR 0 1
20383: PUSH
20384: LD_EXP 83
20388: IN
20389: NOT
20390: IFFALSE 20473
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20392: LD_ADDR_EXP 83
20396: PUSH
20397: LD_EXP 83
20401: PPUSH
20402: LD_EXP 83
20406: PUSH
20407: LD_INT 1
20409: PLUS
20410: PPUSH
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 1
20420: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20421: LD_ADDR_EXP 84
20425: PUSH
20426: LD_EXP 84
20430: PPUSH
20431: LD_EXP 84
20435: PUSH
20436: LD_INT 1
20438: PLUS
20439: PPUSH
20440: EMPTY
20441: PPUSH
20442: CALL_OW 1
20446: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20447: LD_ADDR_EXP 87
20451: PUSH
20452: LD_EXP 87
20456: PPUSH
20457: LD_EXP 87
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: EMPTY
20467: PPUSH
20468: CALL_OW 1
20472: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 302
20482: NOT
20483: IFFALSE 20496
// begin HackUnlinkAll ( i ) ;
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL 20602 0 1
// continue ;
20494: GO 20376
// end ; HackCheckCapturedStatus ( i ) ;
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL 21045 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20505: LD_ADDR_VAR 0 2
20509: PUSH
20510: LD_INT 81
20512: PUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 255
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 33
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 91
20539: PUSH
20540: LD_VAR 0 1
20544: PUSH
20545: LD_EXP 86
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 50
20557: PUSH
20558: EMPTY
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: ST_TO_ADDR
// if not tmp then
20572: LD_VAR 0 2
20576: NOT
20577: IFFALSE 20581
// continue ;
20579: GO 20376
// HackLink ( i , tmp ) ;
20581: LD_VAR 0 1
20585: PPUSH
20586: LD_VAR 0 2
20590: PPUSH
20591: CALL 20738 0 2
// end ;
20595: GO 20376
20597: POP
20598: POP
// end ;
20599: PPOPN 2
20601: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20602: LD_INT 0
20604: PPUSH
20605: PPUSH
20606: PPUSH
// if not hack in hackTanks then
20607: LD_VAR 0 1
20611: PUSH
20612: LD_EXP 83
20616: IN
20617: NOT
20618: IFFALSE 20622
// exit ;
20620: GO 20733
// index := GetElementIndex ( hackTanks , hack ) ;
20622: LD_ADDR_VAR 0 4
20626: PUSH
20627: LD_EXP 83
20631: PPUSH
20632: LD_VAR 0 1
20636: PPUSH
20637: CALL 28375 0 2
20641: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20642: LD_EXP 84
20646: PUSH
20647: LD_VAR 0 4
20651: ARRAY
20652: IFFALSE 20733
// begin for i in hackTanksCaptured [ index ] do
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: LD_EXP 84
20663: PUSH
20664: LD_VAR 0 4
20668: ARRAY
20669: PUSH
20670: FOR_IN
20671: IFFALSE 20697
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20673: LD_VAR 0 3
20677: PUSH
20678: LD_INT 1
20680: ARRAY
20681: PPUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 2
20689: ARRAY
20690: PPUSH
20691: CALL_OW 235
20695: GO 20670
20697: POP
20698: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20699: LD_ADDR_EXP 84
20703: PUSH
20704: LD_EXP 84
20708: PPUSH
20709: LD_VAR 0 4
20713: PPUSH
20714: EMPTY
20715: PPUSH
20716: CALL_OW 1
20720: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_INT 0
20728: PPUSH
20729: CALL_OW 505
// end ; end ;
20733: LD_VAR 0 2
20737: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
20742: PPUSH
// if not hack in hackTanks or not vehicles then
20743: LD_VAR 0 1
20747: PUSH
20748: LD_EXP 83
20752: IN
20753: NOT
20754: PUSH
20755: LD_VAR 0 2
20759: NOT
20760: OR
20761: IFFALSE 20765
// exit ;
20763: GO 21040
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_VAR 0 1
20774: PPUSH
20775: LD_VAR 0 2
20779: PPUSH
20780: LD_INT 1
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: CALL 29025 0 4
20790: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20791: LD_ADDR_VAR 0 5
20795: PUSH
20796: LD_EXP 83
20800: PPUSH
20801: LD_VAR 0 1
20805: PPUSH
20806: CALL 28375 0 2
20810: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20811: LD_EXP 84
20815: PUSH
20816: LD_VAR 0 5
20820: ARRAY
20821: PUSH
20822: LD_EXP 85
20826: LESS
20827: IFFALSE 21016
// begin for i := 1 to vehicles do
20829: LD_ADDR_VAR 0 4
20833: PUSH
20834: DOUBLE
20835: LD_INT 1
20837: DEC
20838: ST_TO_ADDR
20839: LD_VAR 0 2
20843: PUSH
20844: FOR_TO
20845: IFFALSE 21014
// begin if hackTanksCaptured [ index ] = hackLimit then
20847: LD_EXP 84
20851: PUSH
20852: LD_VAR 0 5
20856: ARRAY
20857: PUSH
20858: LD_EXP 85
20862: EQUAL
20863: IFFALSE 20867
// break ;
20865: GO 21014
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20867: LD_ADDR_EXP 87
20871: PUSH
20872: LD_EXP 87
20876: PPUSH
20877: LD_VAR 0 5
20881: PPUSH
20882: LD_EXP 87
20886: PUSH
20887: LD_VAR 0 5
20891: ARRAY
20892: PUSH
20893: LD_INT 1
20895: PLUS
20896: PPUSH
20897: CALL_OW 1
20901: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20902: LD_ADDR_EXP 84
20906: PUSH
20907: LD_EXP 84
20911: PPUSH
20912: LD_VAR 0 5
20916: PUSH
20917: LD_EXP 84
20921: PUSH
20922: LD_VAR 0 5
20926: ARRAY
20927: PUSH
20928: LD_INT 1
20930: PLUS
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PPUSH
20936: LD_VAR 0 2
20940: PUSH
20941: LD_VAR 0 4
20945: ARRAY
20946: PUSH
20947: LD_VAR 0 2
20951: PUSH
20952: LD_VAR 0 4
20956: ARRAY
20957: PPUSH
20958: CALL_OW 255
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL 28590 0 3
20971: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20972: LD_VAR 0 2
20976: PUSH
20977: LD_VAR 0 4
20981: ARRAY
20982: PPUSH
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 255
20992: PPUSH
20993: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20997: LD_VAR 0 2
21001: PUSH
21002: LD_VAR 0 4
21006: ARRAY
21007: PPUSH
21008: CALL_OW 141
// end ;
21012: GO 20844
21014: POP
21015: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21016: LD_VAR 0 1
21020: PPUSH
21021: LD_EXP 84
21025: PUSH
21026: LD_VAR 0 5
21030: ARRAY
21031: PUSH
21032: LD_INT 0
21034: PLUS
21035: PPUSH
21036: CALL_OW 505
// end ;
21040: LD_VAR 0 3
21044: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21045: LD_INT 0
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
// if not hack in hackTanks then
21051: LD_VAR 0 1
21055: PUSH
21056: LD_EXP 83
21060: IN
21061: NOT
21062: IFFALSE 21066
// exit ;
21064: GO 21306
// index := GetElementIndex ( hackTanks , hack ) ;
21066: LD_ADDR_VAR 0 4
21070: PUSH
21071: LD_EXP 83
21075: PPUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL 28375 0 2
21085: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: DOUBLE
21092: LD_EXP 84
21096: PUSH
21097: LD_VAR 0 4
21101: ARRAY
21102: INC
21103: ST_TO_ADDR
21104: LD_INT 1
21106: PUSH
21107: FOR_DOWNTO
21108: IFFALSE 21280
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21110: LD_ADDR_VAR 0 5
21114: PUSH
21115: LD_EXP 84
21119: PUSH
21120: LD_VAR 0 4
21124: ARRAY
21125: PUSH
21126: LD_VAR 0 3
21130: ARRAY
21131: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21132: LD_VAR 0 5
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: PPUSH
21141: CALL_OW 302
21145: NOT
21146: PUSH
21147: LD_VAR 0 5
21151: PUSH
21152: LD_INT 1
21154: ARRAY
21155: PPUSH
21156: CALL_OW 255
21160: PUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 255
21170: NONEQUAL
21171: OR
21172: IFFALSE 21278
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21174: LD_VAR 0 5
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: PPUSH
21183: CALL_OW 305
21187: PUSH
21188: LD_VAR 0 5
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PPUSH
21197: CALL_OW 255
21201: PUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 255
21211: EQUAL
21212: AND
21213: IFFALSE 21237
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21215: LD_VAR 0 5
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PPUSH
21224: LD_VAR 0 5
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21237: LD_ADDR_EXP 84
21241: PUSH
21242: LD_EXP 84
21246: PPUSH
21247: LD_VAR 0 4
21251: PPUSH
21252: LD_EXP 84
21256: PUSH
21257: LD_VAR 0 4
21261: ARRAY
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: CALL_OW 3
21272: PPUSH
21273: CALL_OW 1
21277: ST_TO_ADDR
// end ; end ;
21278: GO 21107
21280: POP
21281: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_EXP 84
21291: PUSH
21292: LD_VAR 0 4
21296: ARRAY
21297: PUSH
21298: LD_INT 0
21300: PLUS
21301: PPUSH
21302: CALL_OW 505
// end ;
21306: LD_VAR 0 2
21310: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
21315: PPUSH
21316: PPUSH
// if not hack in hackTanks then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_EXP 83
21326: IN
21327: NOT
21328: IFFALSE 21332
// exit ;
21330: GO 21417
// index := GetElementIndex ( hackTanks , hack ) ;
21332: LD_ADDR_VAR 0 5
21336: PUSH
21337: LD_EXP 83
21341: PPUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL 28375 0 2
21351: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21352: LD_ADDR_VAR 0 4
21356: PUSH
21357: DOUBLE
21358: LD_INT 1
21360: DEC
21361: ST_TO_ADDR
21362: LD_EXP 84
21366: PUSH
21367: LD_VAR 0 5
21371: ARRAY
21372: PUSH
21373: FOR_TO
21374: IFFALSE 21415
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21376: LD_EXP 84
21380: PUSH
21381: LD_VAR 0 5
21385: ARRAY
21386: PUSH
21387: LD_VAR 0 4
21391: ARRAY
21392: PUSH
21393: LD_INT 1
21395: ARRAY
21396: PUSH
21397: LD_VAR 0 2
21401: EQUAL
21402: IFFALSE 21413
// KillUnit ( vehicle ) ;
21404: LD_VAR 0 2
21408: PPUSH
21409: CALL_OW 66
21413: GO 21373
21415: POP
21416: POP
// end ;
21417: LD_VAR 0 3
21421: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21422: LD_EXP 88
21426: NOT
21427: IFFALSE 21462
21429: GO 21431
21431: DISABLE
// begin initMiner := true ;
21432: LD_ADDR_EXP 88
21436: PUSH
21437: LD_INT 1
21439: ST_TO_ADDR
// minersList := [ ] ;
21440: LD_ADDR_EXP 89
21444: PUSH
21445: EMPTY
21446: ST_TO_ADDR
// minerMinesList := [ ] ;
21447: LD_ADDR_EXP 90
21451: PUSH
21452: EMPTY
21453: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21454: LD_ADDR_EXP 91
21458: PUSH
21459: LD_INT 5
21461: ST_TO_ADDR
// end ;
21462: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21463: LD_EXP 88
21467: PUSH
21468: LD_INT 34
21470: PUSH
21471: LD_EXP 99
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: AND
21485: IFFALSE 21948
21487: GO 21489
21489: DISABLE
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
// begin enable ;
21496: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21497: LD_ADDR_VAR 0 1
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_EXP 99
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PPUSH
21514: CALL_OW 69
21518: PUSH
21519: FOR_IN
21520: IFFALSE 21592
// begin if not i in minersList then
21522: LD_VAR 0 1
21526: PUSH
21527: LD_EXP 89
21531: IN
21532: NOT
21533: IFFALSE 21590
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21535: LD_ADDR_EXP 89
21539: PUSH
21540: LD_EXP 89
21544: PPUSH
21545: LD_EXP 89
21549: PUSH
21550: LD_INT 1
21552: PLUS
21553: PPUSH
21554: LD_VAR 0 1
21558: PPUSH
21559: CALL_OW 1
21563: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21564: LD_ADDR_EXP 90
21568: PUSH
21569: LD_EXP 90
21573: PPUSH
21574: LD_EXP 90
21578: PUSH
21579: LD_INT 1
21581: PLUS
21582: PPUSH
21583: EMPTY
21584: PPUSH
21585: CALL_OW 1
21589: ST_TO_ADDR
// end end ;
21590: GO 21519
21592: POP
21593: POP
// for i := minerMinesList downto 1 do
21594: LD_ADDR_VAR 0 1
21598: PUSH
21599: DOUBLE
21600: LD_EXP 90
21604: INC
21605: ST_TO_ADDR
21606: LD_INT 1
21608: PUSH
21609: FOR_DOWNTO
21610: IFFALSE 21946
// begin if IsLive ( minersList [ i ] ) then
21612: LD_EXP 89
21616: PUSH
21617: LD_VAR 0 1
21621: ARRAY
21622: PPUSH
21623: CALL_OW 300
21627: IFFALSE 21655
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21629: LD_EXP 89
21633: PUSH
21634: LD_VAR 0 1
21638: ARRAY
21639: PPUSH
21640: LD_EXP 90
21644: PUSH
21645: LD_VAR 0 1
21649: ARRAY
21650: PPUSH
21651: CALL_OW 505
// if not minerMinesList [ i ] then
21655: LD_EXP 90
21659: PUSH
21660: LD_VAR 0 1
21664: ARRAY
21665: NOT
21666: IFFALSE 21670
// continue ;
21668: GO 21609
// for j := minerMinesList [ i ] downto 1 do
21670: LD_ADDR_VAR 0 2
21674: PUSH
21675: DOUBLE
21676: LD_EXP 90
21680: PUSH
21681: LD_VAR 0 1
21685: ARRAY
21686: INC
21687: ST_TO_ADDR
21688: LD_INT 1
21690: PUSH
21691: FOR_DOWNTO
21692: IFFALSE 21942
// begin side := GetSide ( minersList [ i ] ) ;
21694: LD_ADDR_VAR 0 3
21698: PUSH
21699: LD_EXP 89
21703: PUSH
21704: LD_VAR 0 1
21708: ARRAY
21709: PPUSH
21710: CALL_OW 255
21714: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21715: LD_ADDR_VAR 0 4
21719: PUSH
21720: LD_EXP 90
21724: PUSH
21725: LD_VAR 0 1
21729: ARRAY
21730: PUSH
21731: LD_VAR 0 2
21735: ARRAY
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: LD_EXP 90
21745: PUSH
21746: LD_VAR 0 1
21750: ARRAY
21751: PUSH
21752: LD_VAR 0 2
21756: ARRAY
21757: PUSH
21758: LD_INT 2
21760: ARRAY
21761: PPUSH
21762: CALL_OW 428
21766: ST_TO_ADDR
// if not tmp then
21767: LD_VAR 0 4
21771: NOT
21772: IFFALSE 21776
// continue ;
21774: GO 21691
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21776: LD_VAR 0 4
21780: PUSH
21781: LD_INT 81
21783: PUSH
21784: LD_VAR 0 3
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PPUSH
21793: CALL_OW 69
21797: IN
21798: PUSH
21799: LD_EXP 90
21803: PUSH
21804: LD_VAR 0 1
21808: ARRAY
21809: PUSH
21810: LD_VAR 0 2
21814: ARRAY
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PPUSH
21820: LD_EXP 90
21824: PUSH
21825: LD_VAR 0 1
21829: ARRAY
21830: PUSH
21831: LD_VAR 0 2
21835: ARRAY
21836: PUSH
21837: LD_INT 2
21839: ARRAY
21840: PPUSH
21841: CALL_OW 458
21845: AND
21846: IFFALSE 21940
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21848: LD_EXP 90
21852: PUSH
21853: LD_VAR 0 1
21857: ARRAY
21858: PUSH
21859: LD_VAR 0 2
21863: ARRAY
21864: PUSH
21865: LD_INT 1
21867: ARRAY
21868: PPUSH
21869: LD_EXP 90
21873: PUSH
21874: LD_VAR 0 1
21878: ARRAY
21879: PUSH
21880: LD_VAR 0 2
21884: ARRAY
21885: PUSH
21886: LD_INT 2
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21899: LD_ADDR_EXP 90
21903: PUSH
21904: LD_EXP 90
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: LD_EXP 90
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PPUSH
21925: LD_VAR 0 2
21929: PPUSH
21930: CALL_OW 3
21934: PPUSH
21935: CALL_OW 1
21939: ST_TO_ADDR
// end ; end ;
21940: GO 21691
21942: POP
21943: POP
// end ;
21944: GO 21609
21946: POP
21947: POP
// end ;
21948: PPOPN 4
21950: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21951: LD_INT 0
21953: PPUSH
21954: PPUSH
// result := false ;
21955: LD_ADDR_VAR 0 4
21959: PUSH
21960: LD_INT 0
21962: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 264
21972: PUSH
21973: LD_EXP 99
21977: EQUAL
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22223
// index := GetElementIndex ( minersList , unit ) ;
21983: LD_ADDR_VAR 0 5
21987: PUSH
21988: LD_EXP 89
21992: PPUSH
21993: LD_VAR 0 1
21997: PPUSH
21998: CALL 28375 0 2
22002: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22003: LD_EXP 90
22007: PUSH
22008: LD_VAR 0 5
22012: ARRAY
22013: PUSH
22014: LD_EXP 91
22018: GREATEREQUAL
22019: IFFALSE 22023
// exit ;
22021: GO 22223
// ComMoveXY ( unit , x , y ) ;
22023: LD_VAR 0 1
22027: PPUSH
22028: LD_VAR 0 2
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22042: LD_INT 35
22044: PPUSH
22045: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22049: LD_VAR 0 1
22053: PPUSH
22054: LD_VAR 0 2
22058: PPUSH
22059: LD_VAR 0 3
22063: PPUSH
22064: CALL 59147 0 3
22068: NOT
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 314
22079: AND
22080: IFFALSE 22084
// exit ;
22082: GO 22223
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 428
22098: PUSH
22099: LD_VAR 0 1
22103: EQUAL
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 314
22114: NOT
22115: AND
22116: IFFALSE 22042
// PlaySoundXY ( x , y , PlantMine ) ;
22118: LD_VAR 0 2
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: LD_STRING PlantMine
22130: PPUSH
22131: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22135: LD_VAR 0 2
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_VAR 0 1
22149: PPUSH
22150: CALL_OW 255
22154: PPUSH
22155: LD_INT 0
22157: PPUSH
22158: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22162: LD_ADDR_EXP 90
22166: PUSH
22167: LD_EXP 90
22171: PPUSH
22172: LD_VAR 0 5
22176: PUSH
22177: LD_EXP 90
22181: PUSH
22182: LD_VAR 0 5
22186: ARRAY
22187: PUSH
22188: LD_INT 1
22190: PLUS
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PPUSH
22196: LD_VAR 0 2
22200: PUSH
22201: LD_VAR 0 3
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL 28590 0 3
22214: ST_TO_ADDR
// result := true ;
22215: LD_ADDR_VAR 0 4
22219: PUSH
22220: LD_INT 1
22222: ST_TO_ADDR
// end ;
22223: LD_VAR 0 4
22227: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22228: LD_INT 0
22230: PPUSH
22231: PPUSH
22232: PPUSH
// if not unit in minersList then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_EXP 89
22242: IN
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 22640
// index := GetElementIndex ( minersList , unit ) ;
22248: LD_ADDR_VAR 0 6
22252: PUSH
22253: LD_EXP 89
22257: PPUSH
22258: LD_VAR 0 1
22262: PPUSH
22263: CALL 28375 0 2
22267: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22268: LD_ADDR_VAR 0 5
22272: PUSH
22273: DOUBLE
22274: LD_EXP 90
22278: PUSH
22279: LD_VAR 0 6
22283: ARRAY
22284: INC
22285: ST_TO_ADDR
22286: LD_INT 1
22288: PUSH
22289: FOR_DOWNTO
22290: IFFALSE 22451
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22292: LD_EXP 90
22296: PUSH
22297: LD_VAR 0 6
22301: ARRAY
22302: PUSH
22303: LD_VAR 0 5
22307: ARRAY
22308: PUSH
22309: LD_INT 1
22311: ARRAY
22312: PUSH
22313: LD_VAR 0 2
22317: EQUAL
22318: PUSH
22319: LD_EXP 90
22323: PUSH
22324: LD_VAR 0 6
22328: ARRAY
22329: PUSH
22330: LD_VAR 0 5
22334: ARRAY
22335: PUSH
22336: LD_INT 2
22338: ARRAY
22339: PUSH
22340: LD_VAR 0 3
22344: EQUAL
22345: AND
22346: IFFALSE 22449
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22348: LD_EXP 90
22352: PUSH
22353: LD_VAR 0 6
22357: ARRAY
22358: PUSH
22359: LD_VAR 0 5
22363: ARRAY
22364: PUSH
22365: LD_INT 1
22367: ARRAY
22368: PPUSH
22369: LD_EXP 90
22373: PUSH
22374: LD_VAR 0 6
22378: ARRAY
22379: PUSH
22380: LD_VAR 0 5
22384: ARRAY
22385: PUSH
22386: LD_INT 2
22388: ARRAY
22389: PPUSH
22390: LD_VAR 0 1
22394: PPUSH
22395: CALL_OW 255
22399: PPUSH
22400: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22404: LD_ADDR_EXP 90
22408: PUSH
22409: LD_EXP 90
22413: PPUSH
22414: LD_VAR 0 6
22418: PPUSH
22419: LD_EXP 90
22423: PUSH
22424: LD_VAR 0 6
22428: ARRAY
22429: PPUSH
22430: LD_VAR 0 5
22434: PPUSH
22435: CALL_OW 3
22439: PPUSH
22440: CALL_OW 1
22444: ST_TO_ADDR
// exit ;
22445: POP
22446: POP
22447: GO 22640
// end ; end ;
22449: GO 22289
22451: POP
22452: POP
// for i := minerMinesList [ index ] downto 1 do
22453: LD_ADDR_VAR 0 5
22457: PUSH
22458: DOUBLE
22459: LD_EXP 90
22463: PUSH
22464: LD_VAR 0 6
22468: ARRAY
22469: INC
22470: ST_TO_ADDR
22471: LD_INT 1
22473: PUSH
22474: FOR_DOWNTO
22475: IFFALSE 22638
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22477: LD_EXP 90
22481: PUSH
22482: LD_VAR 0 6
22486: ARRAY
22487: PUSH
22488: LD_VAR 0 5
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PPUSH
22498: LD_EXP 90
22502: PUSH
22503: LD_VAR 0 6
22507: ARRAY
22508: PUSH
22509: LD_VAR 0 5
22513: ARRAY
22514: PUSH
22515: LD_INT 2
22517: ARRAY
22518: PPUSH
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_VAR 0 3
22528: PPUSH
22529: CALL_OW 298
22533: PUSH
22534: LD_INT 6
22536: LESS
22537: IFFALSE 22636
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22539: LD_EXP 90
22543: PUSH
22544: LD_VAR 0 6
22548: ARRAY
22549: PUSH
22550: LD_VAR 0 5
22554: ARRAY
22555: PUSH
22556: LD_INT 1
22558: ARRAY
22559: PPUSH
22560: LD_EXP 90
22564: PUSH
22565: LD_VAR 0 6
22569: ARRAY
22570: PUSH
22571: LD_VAR 0 5
22575: ARRAY
22576: PUSH
22577: LD_INT 2
22579: ARRAY
22580: PPUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 255
22590: PPUSH
22591: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22595: LD_ADDR_EXP 90
22599: PUSH
22600: LD_EXP 90
22604: PPUSH
22605: LD_VAR 0 6
22609: PPUSH
22610: LD_EXP 90
22614: PUSH
22615: LD_VAR 0 6
22619: ARRAY
22620: PPUSH
22621: LD_VAR 0 5
22625: PPUSH
22626: CALL_OW 3
22630: PPUSH
22631: CALL_OW 1
22635: ST_TO_ADDR
// end ; end ;
22636: GO 22474
22638: POP
22639: POP
// end ;
22640: LD_VAR 0 4
22644: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22645: LD_INT 0
22647: PPUSH
22648: PPUSH
22649: PPUSH
22650: PPUSH
22651: PPUSH
22652: PPUSH
22653: PPUSH
22654: PPUSH
22655: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22656: LD_VAR 0 1
22660: PPUSH
22661: CALL_OW 264
22665: PUSH
22666: LD_EXP 99
22670: EQUAL
22671: NOT
22672: PUSH
22673: LD_VAR 0 1
22677: PUSH
22678: LD_EXP 89
22682: IN
22683: NOT
22684: OR
22685: IFFALSE 22689
// exit ;
22687: GO 23011
// index := GetElementIndex ( minersList , unit ) ;
22689: LD_ADDR_VAR 0 6
22693: PUSH
22694: LD_EXP 89
22698: PPUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL 28375 0 2
22708: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22709: LD_ADDR_VAR 0 8
22713: PUSH
22714: LD_EXP 91
22718: PUSH
22719: LD_EXP 90
22723: PUSH
22724: LD_VAR 0 6
22728: ARRAY
22729: MINUS
22730: ST_TO_ADDR
// if not minesFreeAmount then
22731: LD_VAR 0 8
22735: NOT
22736: IFFALSE 22740
// exit ;
22738: GO 23011
// tmp := [ ] ;
22740: LD_ADDR_VAR 0 7
22744: PUSH
22745: EMPTY
22746: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22747: LD_ADDR_VAR 0 5
22751: PUSH
22752: DOUBLE
22753: LD_INT 1
22755: DEC
22756: ST_TO_ADDR
22757: LD_VAR 0 8
22761: PUSH
22762: FOR_TO
22763: IFFALSE 22958
// begin _d := rand ( 0 , 5 ) ;
22765: LD_ADDR_VAR 0 11
22769: PUSH
22770: LD_INT 0
22772: PPUSH
22773: LD_INT 5
22775: PPUSH
22776: CALL_OW 12
22780: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22781: LD_ADDR_VAR 0 12
22785: PUSH
22786: LD_INT 2
22788: PPUSH
22789: LD_INT 6
22791: PPUSH
22792: CALL_OW 12
22796: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22797: LD_ADDR_VAR 0 9
22801: PUSH
22802: LD_VAR 0 2
22806: PPUSH
22807: LD_VAR 0 11
22811: PPUSH
22812: LD_VAR 0 12
22816: PPUSH
22817: CALL_OW 272
22821: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22822: LD_ADDR_VAR 0 10
22826: PUSH
22827: LD_VAR 0 3
22831: PPUSH
22832: LD_VAR 0 11
22836: PPUSH
22837: LD_VAR 0 12
22841: PPUSH
22842: CALL_OW 273
22846: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22847: LD_VAR 0 9
22851: PPUSH
22852: LD_VAR 0 10
22856: PPUSH
22857: CALL_OW 488
22861: PUSH
22862: LD_VAR 0 9
22866: PUSH
22867: LD_VAR 0 10
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_VAR 0 7
22880: IN
22881: NOT
22882: AND
22883: PUSH
22884: LD_VAR 0 9
22888: PPUSH
22889: LD_VAR 0 10
22893: PPUSH
22894: CALL_OW 458
22898: NOT
22899: AND
22900: IFFALSE 22942
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22902: LD_ADDR_VAR 0 7
22906: PUSH
22907: LD_VAR 0 7
22911: PPUSH
22912: LD_VAR 0 7
22916: PUSH
22917: LD_INT 1
22919: PLUS
22920: PPUSH
22921: LD_VAR 0 9
22925: PUSH
22926: LD_VAR 0 10
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 1
22939: ST_TO_ADDR
22940: GO 22956
// i := i - 1 ;
22942: LD_ADDR_VAR 0 5
22946: PUSH
22947: LD_VAR 0 5
22951: PUSH
22952: LD_INT 1
22954: MINUS
22955: ST_TO_ADDR
// end ;
22956: GO 22762
22958: POP
22959: POP
// for i in tmp do
22960: LD_ADDR_VAR 0 5
22964: PUSH
22965: LD_VAR 0 7
22969: PUSH
22970: FOR_IN
22971: IFFALSE 23009
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22973: LD_VAR 0 1
22977: PPUSH
22978: LD_VAR 0 5
22982: PUSH
22983: LD_INT 1
22985: ARRAY
22986: PPUSH
22987: LD_VAR 0 5
22991: PUSH
22992: LD_INT 2
22994: ARRAY
22995: PPUSH
22996: CALL 21951 0 3
23000: NOT
23001: IFFALSE 23007
// exit ;
23003: POP
23004: POP
23005: GO 23011
23007: GO 22970
23009: POP
23010: POP
// end ;
23011: LD_VAR 0 4
23015: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23016: LD_INT 0
23018: PPUSH
23019: PPUSH
23020: PPUSH
23021: PPUSH
23022: PPUSH
23023: PPUSH
23024: PPUSH
// if not GetClass ( unit ) = class_sniper then
23025: LD_VAR 0 1
23029: PPUSH
23030: CALL_OW 257
23034: PUSH
23035: LD_INT 5
23037: EQUAL
23038: NOT
23039: IFFALSE 23043
// exit ;
23041: GO 23431
// dist := 8 ;
23043: LD_ADDR_VAR 0 5
23047: PUSH
23048: LD_INT 8
23050: ST_TO_ADDR
// viewRange := 12 ;
23051: LD_ADDR_VAR 0 7
23055: PUSH
23056: LD_INT 12
23058: ST_TO_ADDR
// side := GetSide ( unit ) ;
23059: LD_ADDR_VAR 0 6
23063: PUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 255
23073: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23074: LD_INT 61
23076: PPUSH
23077: LD_VAR 0 6
23081: PPUSH
23082: CALL_OW 321
23086: PUSH
23087: LD_INT 2
23089: EQUAL
23090: IFFALSE 23100
// viewRange := 16 ;
23092: LD_ADDR_VAR 0 7
23096: PUSH
23097: LD_INT 16
23099: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23100: LD_VAR 0 1
23104: PPUSH
23105: LD_VAR 0 2
23109: PPUSH
23110: LD_VAR 0 3
23114: PPUSH
23115: CALL_OW 297
23119: PUSH
23120: LD_VAR 0 5
23124: GREATER
23125: IFFALSE 23204
// begin ComMoveXY ( unit , x , y ) ;
23127: LD_VAR 0 1
23131: PPUSH
23132: LD_VAR 0 2
23136: PPUSH
23137: LD_VAR 0 3
23141: PPUSH
23142: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23146: LD_INT 35
23148: PPUSH
23149: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23153: LD_VAR 0 1
23157: PPUSH
23158: LD_VAR 0 2
23162: PPUSH
23163: LD_VAR 0 3
23167: PPUSH
23168: CALL 59147 0 3
23172: NOT
23173: IFFALSE 23177
// exit ;
23175: GO 23431
// until GetDistUnitXY ( unit , x , y ) < dist ;
23177: LD_VAR 0 1
23181: PPUSH
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 3
23191: PPUSH
23192: CALL_OW 297
23196: PUSH
23197: LD_VAR 0 5
23201: LESS
23202: IFFALSE 23146
// end ; ComTurnXY ( unit , x , y ) ;
23204: LD_VAR 0 1
23208: PPUSH
23209: LD_VAR 0 2
23213: PPUSH
23214: LD_VAR 0 3
23218: PPUSH
23219: CALL_OW 118
// wait ( 5 ) ;
23223: LD_INT 5
23225: PPUSH
23226: CALL_OW 67
// _d := GetDir ( unit ) ;
23230: LD_ADDR_VAR 0 10
23234: PUSH
23235: LD_VAR 0 1
23239: PPUSH
23240: CALL_OW 254
23244: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23245: LD_ADDR_VAR 0 8
23249: PUSH
23250: LD_VAR 0 1
23254: PPUSH
23255: CALL_OW 250
23259: PPUSH
23260: LD_VAR 0 10
23264: PPUSH
23265: LD_VAR 0 5
23269: PPUSH
23270: CALL_OW 272
23274: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23275: LD_ADDR_VAR 0 9
23279: PUSH
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 251
23289: PPUSH
23290: LD_VAR 0 10
23294: PPUSH
23295: LD_VAR 0 5
23299: PPUSH
23300: CALL_OW 273
23304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23305: LD_VAR 0 8
23309: PPUSH
23310: LD_VAR 0 9
23314: PPUSH
23315: CALL_OW 488
23319: NOT
23320: IFFALSE 23324
// exit ;
23322: GO 23431
// ComAnimCustom ( unit , 1 ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23336: LD_VAR 0 8
23340: PPUSH
23341: LD_VAR 0 9
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_VAR 0 7
23355: PPUSH
23356: CALL_OW 330
// repeat wait ( 1 ) ;
23360: LD_INT 1
23362: PPUSH
23363: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 316
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 314
23386: OR
23387: PUSH
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL_OW 302
23397: NOT
23398: OR
23399: PUSH
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 301
23409: OR
23410: IFFALSE 23360
// RemoveSeeing ( _x , _y , side ) ;
23412: LD_VAR 0 8
23416: PPUSH
23417: LD_VAR 0 9
23421: PPUSH
23422: LD_VAR 0 6
23426: PPUSH
23427: CALL_OW 331
// end ; end_of_file
23431: LD_VAR 0 4
23435: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
23436: LD_INT 0
23438: PPUSH
// ar_miner := 81 ;
23439: LD_ADDR_EXP 99
23443: PUSH
23444: LD_INT 81
23446: ST_TO_ADDR
// ar_crane := 88 ;
23447: LD_ADDR_EXP 98
23451: PUSH
23452: LD_INT 88
23454: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23455: LD_ADDR_EXP 93
23459: PUSH
23460: LD_INT 89
23462: ST_TO_ADDR
// us_hack := 99 ;
23463: LD_ADDR_EXP 94
23467: PUSH
23468: LD_INT 99
23470: ST_TO_ADDR
// us_artillery := 97 ;
23471: LD_ADDR_EXP 95
23475: PUSH
23476: LD_INT 97
23478: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23479: LD_ADDR_EXP 96
23483: PUSH
23484: LD_INT 91
23486: ST_TO_ADDR
// ar_mortar := 92 ;
23487: LD_ADDR_EXP 97
23491: PUSH
23492: LD_INT 92
23494: ST_TO_ADDR
// ru_radar := 98 ;
23495: LD_ADDR_EXP 92
23499: PUSH
23500: LD_INT 98
23502: ST_TO_ADDR
// tech_Artillery := 80 ;
23503: LD_ADDR_EXP 100
23507: PUSH
23508: LD_INT 80
23510: ST_TO_ADDR
// tech_RadMat := 81 ;
23511: LD_ADDR_EXP 101
23515: PUSH
23516: LD_INT 81
23518: ST_TO_ADDR
// tech_BasicTools := 82 ;
23519: LD_ADDR_EXP 102
23523: PUSH
23524: LD_INT 82
23526: ST_TO_ADDR
// tech_Cargo := 83 ;
23527: LD_ADDR_EXP 103
23531: PUSH
23532: LD_INT 83
23534: ST_TO_ADDR
// tech_Track := 84 ;
23535: LD_ADDR_EXP 104
23539: PUSH
23540: LD_INT 84
23542: ST_TO_ADDR
// tech_Crane := 85 ;
23543: LD_ADDR_EXP 105
23547: PUSH
23548: LD_INT 85
23550: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23551: LD_ADDR_EXP 106
23555: PUSH
23556: LD_INT 86
23558: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23559: LD_ADDR_EXP 107
23563: PUSH
23564: LD_INT 87
23566: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23567: LD_ADDR_EXP 108
23571: PUSH
23572: LD_INT 88
23574: ST_TO_ADDR
// class_mastodont := 31 ;
23575: LD_ADDR_EXP 109
23579: PUSH
23580: LD_INT 31
23582: ST_TO_ADDR
// class_horse := 21 ;
23583: LD_ADDR_EXP 110
23587: PUSH
23588: LD_INT 21
23590: ST_TO_ADDR
// end ;
23591: LD_VAR 0 1
23595: RET
// every 1 do
23596: GO 23598
23598: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
23599: CALL 23436 0 0
23603: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23604: LD_INT 0
23606: PPUSH
23607: PPUSH
// if exist_mode then
23608: LD_VAR 0 2
23612: IFFALSE 23637
// unit := CreateCharacter ( prefix & ident ) else
23614: LD_ADDR_VAR 0 5
23618: PUSH
23619: LD_VAR 0 3
23623: PUSH
23624: LD_VAR 0 1
23628: STR
23629: PPUSH
23630: CALL_OW 34
23634: ST_TO_ADDR
23635: GO 23652
// unit := NewCharacter ( ident ) ;
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 25
23651: ST_TO_ADDR
// result := unit ;
23652: LD_ADDR_VAR 0 4
23656: PUSH
23657: LD_VAR 0 5
23661: ST_TO_ADDR
// end ;
23662: LD_VAR 0 4
23666: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23667: LD_INT 0
23669: PPUSH
23670: PPUSH
// if not side or not nation then
23671: LD_VAR 0 1
23675: NOT
23676: PUSH
23677: LD_VAR 0 2
23681: NOT
23682: OR
23683: IFFALSE 23687
// exit ;
23685: GO 24455
// case nation of nation_american :
23687: LD_VAR 0 2
23691: PUSH
23692: LD_INT 1
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23914
23700: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23701: LD_ADDR_VAR 0 4
23705: PUSH
23706: LD_INT 35
23708: PUSH
23709: LD_INT 45
23711: PUSH
23712: LD_INT 46
23714: PUSH
23715: LD_INT 47
23717: PUSH
23718: LD_INT 82
23720: PUSH
23721: LD_INT 83
23723: PUSH
23724: LD_INT 84
23726: PUSH
23727: LD_INT 85
23729: PUSH
23730: LD_INT 86
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 6
23741: PUSH
23742: LD_INT 15
23744: PUSH
23745: LD_INT 16
23747: PUSH
23748: LD_INT 7
23750: PUSH
23751: LD_INT 12
23753: PUSH
23754: LD_INT 13
23756: PUSH
23757: LD_INT 10
23759: PUSH
23760: LD_INT 14
23762: PUSH
23763: LD_INT 20
23765: PUSH
23766: LD_INT 21
23768: PUSH
23769: LD_INT 22
23771: PUSH
23772: LD_INT 25
23774: PUSH
23775: LD_INT 32
23777: PUSH
23778: LD_INT 27
23780: PUSH
23781: LD_INT 36
23783: PUSH
23784: LD_INT 69
23786: PUSH
23787: LD_INT 39
23789: PUSH
23790: LD_INT 34
23792: PUSH
23793: LD_INT 40
23795: PUSH
23796: LD_INT 48
23798: PUSH
23799: LD_INT 49
23801: PUSH
23802: LD_INT 50
23804: PUSH
23805: LD_INT 51
23807: PUSH
23808: LD_INT 52
23810: PUSH
23811: LD_INT 53
23813: PUSH
23814: LD_INT 54
23816: PUSH
23817: LD_INT 55
23819: PUSH
23820: LD_INT 56
23822: PUSH
23823: LD_INT 57
23825: PUSH
23826: LD_INT 58
23828: PUSH
23829: LD_INT 59
23831: PUSH
23832: LD_INT 60
23834: PUSH
23835: LD_INT 61
23837: PUSH
23838: LD_INT 62
23840: PUSH
23841: LD_INT 80
23843: PUSH
23844: LD_INT 82
23846: PUSH
23847: LD_INT 83
23849: PUSH
23850: LD_INT 84
23852: PUSH
23853: LD_INT 85
23855: PUSH
23856: LD_INT 86
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: ST_TO_ADDR
23912: GO 24379
23914: LD_INT 2
23916: DOUBLE
23917: EQUAL
23918: IFTRUE 23922
23920: GO 24148
23922: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23923: LD_ADDR_VAR 0 4
23927: PUSH
23928: LD_INT 35
23930: PUSH
23931: LD_INT 45
23933: PUSH
23934: LD_INT 46
23936: PUSH
23937: LD_INT 47
23939: PUSH
23940: LD_INT 82
23942: PUSH
23943: LD_INT 83
23945: PUSH
23946: LD_INT 84
23948: PUSH
23949: LD_INT 85
23951: PUSH
23952: LD_INT 87
23954: PUSH
23955: LD_INT 70
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 11
23963: PUSH
23964: LD_INT 3
23966: PUSH
23967: LD_INT 4
23969: PUSH
23970: LD_INT 5
23972: PUSH
23973: LD_INT 6
23975: PUSH
23976: LD_INT 15
23978: PUSH
23979: LD_INT 18
23981: PUSH
23982: LD_INT 7
23984: PUSH
23985: LD_INT 17
23987: PUSH
23988: LD_INT 8
23990: PUSH
23991: LD_INT 20
23993: PUSH
23994: LD_INT 21
23996: PUSH
23997: LD_INT 22
23999: PUSH
24000: LD_INT 72
24002: PUSH
24003: LD_INT 26
24005: PUSH
24006: LD_INT 69
24008: PUSH
24009: LD_INT 39
24011: PUSH
24012: LD_INT 40
24014: PUSH
24015: LD_INT 41
24017: PUSH
24018: LD_INT 42
24020: PUSH
24021: LD_INT 43
24023: PUSH
24024: LD_INT 48
24026: PUSH
24027: LD_INT 49
24029: PUSH
24030: LD_INT 50
24032: PUSH
24033: LD_INT 51
24035: PUSH
24036: LD_INT 52
24038: PUSH
24039: LD_INT 53
24041: PUSH
24042: LD_INT 54
24044: PUSH
24045: LD_INT 55
24047: PUSH
24048: LD_INT 56
24050: PUSH
24051: LD_INT 60
24053: PUSH
24054: LD_INT 61
24056: PUSH
24057: LD_INT 62
24059: PUSH
24060: LD_INT 66
24062: PUSH
24063: LD_INT 67
24065: PUSH
24066: LD_INT 68
24068: PUSH
24069: LD_INT 81
24071: PUSH
24072: LD_INT 82
24074: PUSH
24075: LD_INT 83
24077: PUSH
24078: LD_INT 84
24080: PUSH
24081: LD_INT 85
24083: PUSH
24084: LD_INT 87
24086: PUSH
24087: LD_INT 88
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: ST_TO_ADDR
24146: GO 24379
24148: LD_INT 3
24150: DOUBLE
24151: EQUAL
24152: IFTRUE 24156
24154: GO 24378
24156: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24157: LD_ADDR_VAR 0 4
24161: PUSH
24162: LD_INT 46
24164: PUSH
24165: LD_INT 47
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 2
24173: PUSH
24174: LD_INT 82
24176: PUSH
24177: LD_INT 83
24179: PUSH
24180: LD_INT 84
24182: PUSH
24183: LD_INT 85
24185: PUSH
24186: LD_INT 86
24188: PUSH
24189: LD_INT 11
24191: PUSH
24192: LD_INT 9
24194: PUSH
24195: LD_INT 20
24197: PUSH
24198: LD_INT 19
24200: PUSH
24201: LD_INT 21
24203: PUSH
24204: LD_INT 24
24206: PUSH
24207: LD_INT 22
24209: PUSH
24210: LD_INT 25
24212: PUSH
24213: LD_INT 28
24215: PUSH
24216: LD_INT 29
24218: PUSH
24219: LD_INT 30
24221: PUSH
24222: LD_INT 31
24224: PUSH
24225: LD_INT 37
24227: PUSH
24228: LD_INT 38
24230: PUSH
24231: LD_INT 32
24233: PUSH
24234: LD_INT 27
24236: PUSH
24237: LD_INT 33
24239: PUSH
24240: LD_INT 69
24242: PUSH
24243: LD_INT 39
24245: PUSH
24246: LD_INT 34
24248: PUSH
24249: LD_INT 40
24251: PUSH
24252: LD_INT 71
24254: PUSH
24255: LD_INT 23
24257: PUSH
24258: LD_INT 44
24260: PUSH
24261: LD_INT 48
24263: PUSH
24264: LD_INT 49
24266: PUSH
24267: LD_INT 50
24269: PUSH
24270: LD_INT 51
24272: PUSH
24273: LD_INT 52
24275: PUSH
24276: LD_INT 53
24278: PUSH
24279: LD_INT 54
24281: PUSH
24282: LD_INT 55
24284: PUSH
24285: LD_INT 56
24287: PUSH
24288: LD_INT 57
24290: PUSH
24291: LD_INT 58
24293: PUSH
24294: LD_INT 59
24296: PUSH
24297: LD_INT 63
24299: PUSH
24300: LD_INT 64
24302: PUSH
24303: LD_INT 65
24305: PUSH
24306: LD_INT 82
24308: PUSH
24309: LD_INT 83
24311: PUSH
24312: LD_INT 84
24314: PUSH
24315: LD_INT 85
24317: PUSH
24318: LD_INT 86
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: ST_TO_ADDR
24376: GO 24379
24378: POP
// if state > - 1 and state < 3 then
24379: LD_VAR 0 3
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: GREATER
24388: PUSH
24389: LD_VAR 0 3
24393: PUSH
24394: LD_INT 3
24396: LESS
24397: AND
24398: IFFALSE 24455
// for i in result do
24400: LD_ADDR_VAR 0 5
24404: PUSH
24405: LD_VAR 0 4
24409: PUSH
24410: FOR_IN
24411: IFFALSE 24453
// if GetTech ( i , side ) <> state then
24413: LD_VAR 0 5
24417: PPUSH
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL_OW 321
24427: PUSH
24428: LD_VAR 0 3
24432: NONEQUAL
24433: IFFALSE 24451
// result := result diff i ;
24435: LD_ADDR_VAR 0 4
24439: PUSH
24440: LD_VAR 0 4
24444: PUSH
24445: LD_VAR 0 5
24449: DIFF
24450: ST_TO_ADDR
24451: GO 24410
24453: POP
24454: POP
// end ;
24455: LD_VAR 0 4
24459: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24460: LD_INT 0
24462: PPUSH
24463: PPUSH
24464: PPUSH
// result := true ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_INT 1
24472: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24473: LD_ADDR_VAR 0 5
24477: PUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: CALL_OW 480
24487: ST_TO_ADDR
// if not tmp then
24488: LD_VAR 0 5
24492: NOT
24493: IFFALSE 24497
// exit ;
24495: GO 24546
// for i in tmp do
24497: LD_ADDR_VAR 0 4
24501: PUSH
24502: LD_VAR 0 5
24506: PUSH
24507: FOR_IN
24508: IFFALSE 24544
// if GetTech ( i , side ) <> state_researched then
24510: LD_VAR 0 4
24514: PPUSH
24515: LD_VAR 0 1
24519: PPUSH
24520: CALL_OW 321
24524: PUSH
24525: LD_INT 2
24527: NONEQUAL
24528: IFFALSE 24542
// begin result := false ;
24530: LD_ADDR_VAR 0 3
24534: PUSH
24535: LD_INT 0
24537: ST_TO_ADDR
// exit ;
24538: POP
24539: POP
24540: GO 24546
// end ;
24542: GO 24507
24544: POP
24545: POP
// end ;
24546: LD_VAR 0 3
24550: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24551: LD_INT 0
24553: PPUSH
24554: PPUSH
24555: PPUSH
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24566: LD_VAR 0 1
24570: NOT
24571: PUSH
24572: LD_VAR 0 1
24576: PPUSH
24577: CALL_OW 257
24581: PUSH
24582: LD_INT 9
24584: NONEQUAL
24585: OR
24586: IFFALSE 24590
// exit ;
24588: GO 25163
// side := GetSide ( unit ) ;
24590: LD_ADDR_VAR 0 9
24594: PUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 255
24604: ST_TO_ADDR
// tech_space := tech_spacanom ;
24605: LD_ADDR_VAR 0 12
24609: PUSH
24610: LD_INT 29
24612: ST_TO_ADDR
// tech_time := tech_taurad ;
24613: LD_ADDR_VAR 0 13
24617: PUSH
24618: LD_INT 28
24620: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24621: LD_ADDR_VAR 0 11
24625: PUSH
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL_OW 310
24635: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24636: LD_VAR 0 11
24640: PPUSH
24641: CALL_OW 247
24645: PUSH
24646: LD_INT 2
24648: EQUAL
24649: IFFALSE 24653
// exit ;
24651: GO 25163
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24653: LD_ADDR_VAR 0 8
24657: PUSH
24658: LD_INT 81
24660: PUSH
24661: LD_VAR 0 9
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PPUSH
24691: CALL_OW 69
24695: ST_TO_ADDR
// if not tmp then
24696: LD_VAR 0 8
24700: NOT
24701: IFFALSE 24705
// exit ;
24703: GO 25163
// if in_unit then
24705: LD_VAR 0 11
24709: IFFALSE 24733
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24711: LD_ADDR_VAR 0 10
24715: PUSH
24716: LD_VAR 0 8
24720: PPUSH
24721: LD_VAR 0 11
24725: PPUSH
24726: CALL_OW 74
24730: ST_TO_ADDR
24731: GO 24753
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24733: LD_ADDR_VAR 0 10
24737: PUSH
24738: LD_VAR 0 8
24742: PPUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 74
24752: ST_TO_ADDR
// if not enemy then
24753: LD_VAR 0 10
24757: NOT
24758: IFFALSE 24762
// exit ;
24760: GO 25163
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24762: LD_VAR 0 11
24766: PUSH
24767: LD_VAR 0 11
24771: PPUSH
24772: LD_VAR 0 10
24776: PPUSH
24777: CALL_OW 296
24781: PUSH
24782: LD_INT 13
24784: GREATER
24785: AND
24786: PUSH
24787: LD_VAR 0 1
24791: PPUSH
24792: LD_VAR 0 10
24796: PPUSH
24797: CALL_OW 296
24801: PUSH
24802: LD_INT 12
24804: GREATER
24805: OR
24806: IFFALSE 24810
// exit ;
24808: GO 25163
// missile := [ 1 ] ;
24810: LD_ADDR_VAR 0 14
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24821: LD_VAR 0 9
24825: PPUSH
24826: LD_VAR 0 12
24830: PPUSH
24831: CALL_OW 325
24835: IFFALSE 24864
// missile := Insert ( missile , missile + 1 , 2 ) ;
24837: LD_ADDR_VAR 0 14
24841: PUSH
24842: LD_VAR 0 14
24846: PPUSH
24847: LD_VAR 0 14
24851: PUSH
24852: LD_INT 1
24854: PLUS
24855: PPUSH
24856: LD_INT 2
24858: PPUSH
24859: CALL_OW 2
24863: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24864: LD_VAR 0 9
24868: PPUSH
24869: LD_VAR 0 13
24873: PPUSH
24874: CALL_OW 325
24878: PUSH
24879: LD_VAR 0 10
24883: PPUSH
24884: CALL_OW 255
24888: PPUSH
24889: LD_VAR 0 13
24893: PPUSH
24894: CALL_OW 325
24898: NOT
24899: AND
24900: IFFALSE 24929
// missile := Insert ( missile , missile + 1 , 3 ) ;
24902: LD_ADDR_VAR 0 14
24906: PUSH
24907: LD_VAR 0 14
24911: PPUSH
24912: LD_VAR 0 14
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: LD_INT 3
24923: PPUSH
24924: CALL_OW 2
24928: ST_TO_ADDR
// if missile < 2 then
24929: LD_VAR 0 14
24933: PUSH
24934: LD_INT 2
24936: LESS
24937: IFFALSE 24941
// exit ;
24939: GO 25163
// x := GetX ( enemy ) ;
24941: LD_ADDR_VAR 0 4
24945: PUSH
24946: LD_VAR 0 10
24950: PPUSH
24951: CALL_OW 250
24955: ST_TO_ADDR
// y := GetY ( enemy ) ;
24956: LD_ADDR_VAR 0 5
24960: PUSH
24961: LD_VAR 0 10
24965: PPUSH
24966: CALL_OW 251
24970: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24971: LD_ADDR_VAR 0 6
24975: PUSH
24976: LD_VAR 0 4
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 12
24992: PLUS
24993: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24994: LD_ADDR_VAR 0 7
24998: PUSH
24999: LD_VAR 0 5
25003: PUSH
25004: LD_INT 1
25006: NEG
25007: PPUSH
25008: LD_INT 1
25010: PPUSH
25011: CALL_OW 12
25015: PLUS
25016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25017: LD_VAR 0 6
25021: PPUSH
25022: LD_VAR 0 7
25026: PPUSH
25027: CALL_OW 488
25031: NOT
25032: IFFALSE 25054
// begin _x := x ;
25034: LD_ADDR_VAR 0 6
25038: PUSH
25039: LD_VAR 0 4
25043: ST_TO_ADDR
// _y := y ;
25044: LD_ADDR_VAR 0 7
25048: PUSH
25049: LD_VAR 0 5
25053: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 1
25061: PPUSH
25062: LD_VAR 0 14
25066: PPUSH
25067: CALL_OW 12
25071: ST_TO_ADDR
// case i of 1 :
25072: LD_VAR 0 3
25076: PUSH
25077: LD_INT 1
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25102
25085: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 10
25095: PPUSH
25096: CALL_OW 115
25100: GO 25163
25102: LD_INT 2
25104: DOUBLE
25105: EQUAL
25106: IFTRUE 25110
25108: GO 25132
25110: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25111: LD_VAR 0 1
25115: PPUSH
25116: LD_VAR 0 6
25120: PPUSH
25121: LD_VAR 0 7
25125: PPUSH
25126: CALL_OW 153
25130: GO 25163
25132: LD_INT 3
25134: DOUBLE
25135: EQUAL
25136: IFTRUE 25140
25138: GO 25162
25140: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_VAR 0 6
25150: PPUSH
25151: LD_VAR 0 7
25155: PPUSH
25156: CALL_OW 154
25160: GO 25163
25162: POP
// end ;
25163: LD_VAR 0 2
25167: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
// if not unit or not building then
25176: LD_VAR 0 1
25180: NOT
25181: PUSH
25182: LD_VAR 0 2
25186: NOT
25187: OR
25188: IFFALSE 25192
// exit ;
25190: GO 25350
// x := GetX ( building ) ;
25192: LD_ADDR_VAR 0 5
25196: PUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL_OW 250
25206: ST_TO_ADDR
// y := GetY ( building ) ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 251
25221: ST_TO_ADDR
// for i = 0 to 5 do
25222: LD_ADDR_VAR 0 4
25226: PUSH
25227: DOUBLE
25228: LD_INT 0
25230: DEC
25231: ST_TO_ADDR
25232: LD_INT 5
25234: PUSH
25235: FOR_TO
25236: IFFALSE 25348
// begin _x := ShiftX ( x , i , 3 ) ;
25238: LD_ADDR_VAR 0 7
25242: PUSH
25243: LD_VAR 0 5
25247: PPUSH
25248: LD_VAR 0 4
25252: PPUSH
25253: LD_INT 3
25255: PPUSH
25256: CALL_OW 272
25260: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25261: LD_ADDR_VAR 0 8
25265: PUSH
25266: LD_VAR 0 6
25270: PPUSH
25271: LD_VAR 0 4
25275: PPUSH
25276: LD_INT 3
25278: PPUSH
25279: CALL_OW 273
25283: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25284: LD_VAR 0 7
25288: PPUSH
25289: LD_VAR 0 8
25293: PPUSH
25294: CALL_OW 488
25298: NOT
25299: IFFALSE 25303
// continue ;
25301: GO 25235
// if HexInfo ( _x , _y ) = 0 then
25303: LD_VAR 0 7
25307: PPUSH
25308: LD_VAR 0 8
25312: PPUSH
25313: CALL_OW 428
25317: PUSH
25318: LD_INT 0
25320: EQUAL
25321: IFFALSE 25346
// begin ComMoveXY ( unit , _x , _y ) ;
25323: LD_VAR 0 1
25327: PPUSH
25328: LD_VAR 0 7
25332: PPUSH
25333: LD_VAR 0 8
25337: PPUSH
25338: CALL_OW 111
// exit ;
25342: POP
25343: POP
25344: GO 25350
// end ; end ;
25346: GO 25235
25348: POP
25349: POP
// end ;
25350: LD_VAR 0 3
25354: RET
// export function ScanBase ( side , base_area ) ; begin
25355: LD_INT 0
25357: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: LD_INT 81
25370: PUSH
25371: LD_VAR 0 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 70
25384: ST_TO_ADDR
// end ;
25385: LD_VAR 0 3
25389: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25390: LD_INT 0
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
// result := false ;
25396: LD_ADDR_VAR 0 2
25400: PUSH
25401: LD_INT 0
25403: ST_TO_ADDR
// side := GetSide ( unit ) ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 255
25418: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25419: LD_ADDR_VAR 0 4
25423: PUSH
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 248
25433: ST_TO_ADDR
// case nat of 1 :
25434: LD_VAR 0 4
25438: PUSH
25439: LD_INT 1
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25458
25447: POP
// tech := tech_lassight ; 2 :
25448: LD_ADDR_VAR 0 5
25452: PUSH
25453: LD_INT 12
25455: ST_TO_ADDR
25456: GO 25497
25458: LD_INT 2
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25477
25466: POP
// tech := tech_mortar ; 3 :
25467: LD_ADDR_VAR 0 5
25471: PUSH
25472: LD_INT 41
25474: ST_TO_ADDR
25475: GO 25497
25477: LD_INT 3
25479: DOUBLE
25480: EQUAL
25481: IFTRUE 25485
25483: GO 25496
25485: POP
// tech := tech_bazooka ; end ;
25486: LD_ADDR_VAR 0 5
25490: PUSH
25491: LD_INT 44
25493: ST_TO_ADDR
25494: GO 25497
25496: POP
// if Researched ( side , tech ) then
25497: LD_VAR 0 3
25501: PPUSH
25502: LD_VAR 0 5
25506: PPUSH
25507: CALL_OW 325
25511: IFFALSE 25538
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25513: LD_ADDR_VAR 0 2
25517: PUSH
25518: LD_INT 5
25520: PUSH
25521: LD_INT 8
25523: PUSH
25524: LD_INT 9
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: PUSH
25532: LD_VAR 0 4
25536: ARRAY
25537: ST_TO_ADDR
// end ;
25538: LD_VAR 0 2
25542: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25543: LD_INT 0
25545: PPUSH
25546: PPUSH
25547: PPUSH
// if not mines then
25548: LD_VAR 0 2
25552: NOT
25553: IFFALSE 25557
// exit ;
25555: GO 25701
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25557: LD_ADDR_VAR 0 5
25561: PUSH
25562: LD_INT 81
25564: PUSH
25565: LD_VAR 0 1
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 3
25576: PUSH
25577: LD_INT 21
25579: PUSH
25580: LD_INT 3
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PPUSH
25595: CALL_OW 69
25599: ST_TO_ADDR
// for i in mines do
25600: LD_ADDR_VAR 0 4
25604: PUSH
25605: LD_VAR 0 2
25609: PUSH
25610: FOR_IN
25611: IFFALSE 25699
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25613: LD_VAR 0 4
25617: PUSH
25618: LD_INT 1
25620: ARRAY
25621: PPUSH
25622: LD_VAR 0 4
25626: PUSH
25627: LD_INT 2
25629: ARRAY
25630: PPUSH
25631: CALL_OW 458
25635: NOT
25636: IFFALSE 25640
// continue ;
25638: GO 25610
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25640: LD_VAR 0 4
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: PPUSH
25649: LD_VAR 0 4
25653: PUSH
25654: LD_INT 2
25656: ARRAY
25657: PPUSH
25658: CALL_OW 428
25662: PUSH
25663: LD_VAR 0 5
25667: IN
25668: IFFALSE 25697
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25670: LD_VAR 0 4
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: PPUSH
25679: LD_VAR 0 4
25683: PUSH
25684: LD_INT 2
25686: ARRAY
25687: PPUSH
25688: LD_VAR 0 1
25692: PPUSH
25693: CALL_OW 456
// end ;
25697: GO 25610
25699: POP
25700: POP
// end ;
25701: LD_VAR 0 3
25705: RET
// export function Count ( array ) ; var i ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
// result := 0 ;
25710: LD_ADDR_VAR 0 2
25714: PUSH
25715: LD_INT 0
25717: ST_TO_ADDR
// for i in array do
25718: LD_ADDR_VAR 0 3
25722: PUSH
25723: LD_VAR 0 1
25727: PUSH
25728: FOR_IN
25729: IFFALSE 25753
// if i then
25731: LD_VAR 0 3
25735: IFFALSE 25751
// result := result + 1 ;
25737: LD_ADDR_VAR 0 2
25741: PUSH
25742: LD_VAR 0 2
25746: PUSH
25747: LD_INT 1
25749: PLUS
25750: ST_TO_ADDR
25751: GO 25728
25753: POP
25754: POP
// end ;
25755: LD_VAR 0 2
25759: RET
// export function IsEmpty ( building ) ; begin
25760: LD_INT 0
25762: PPUSH
// if not building then
25763: LD_VAR 0 1
25767: NOT
25768: IFFALSE 25772
// exit ;
25770: GO 25815
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_VAR 0 1
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 255
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 58
25801: PUSH
25802: EMPTY
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PPUSH
25809: CALL_OW 69
25813: IN
25814: ST_TO_ADDR
// end ;
25815: LD_VAR 0 2
25819: RET
// export function IsNotFull ( building ) ; begin
25820: LD_INT 0
25822: PPUSH
// if not building then
25823: LD_VAR 0 1
25827: NOT
25828: IFFALSE 25832
// exit ;
25830: GO 25851
// result := UnitsInside ( building ) < 6 ;
25832: LD_ADDR_VAR 0 2
25836: PUSH
25837: LD_VAR 0 1
25841: PPUSH
25842: CALL_OW 313
25846: PUSH
25847: LD_INT 6
25849: LESS
25850: ST_TO_ADDR
// end ;
25851: LD_VAR 0 2
25855: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25856: LD_INT 0
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
// tmp := [ ] ;
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: EMPTY
25868: ST_TO_ADDR
// list := [ ] ;
25869: LD_ADDR_VAR 0 5
25873: PUSH
25874: EMPTY
25875: ST_TO_ADDR
// for i = 16 to 25 do
25876: LD_ADDR_VAR 0 4
25880: PUSH
25881: DOUBLE
25882: LD_INT 16
25884: DEC
25885: ST_TO_ADDR
25886: LD_INT 25
25888: PUSH
25889: FOR_TO
25890: IFFALSE 25963
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25892: LD_ADDR_VAR 0 3
25896: PUSH
25897: LD_VAR 0 3
25901: PUSH
25902: LD_INT 22
25904: PUSH
25905: LD_VAR 0 1
25909: PPUSH
25910: CALL_OW 255
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 91
25921: PUSH
25922: LD_VAR 0 1
25926: PUSH
25927: LD_INT 6
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 30
25937: PUSH
25938: LD_VAR 0 4
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: PUSH
25952: EMPTY
25953: LIST
25954: PPUSH
25955: CALL_OW 69
25959: ADD
25960: ST_TO_ADDR
25961: GO 25889
25963: POP
25964: POP
// for i = 1 to tmp do
25965: LD_ADDR_VAR 0 4
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_VAR 0 3
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26069
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25983: LD_ADDR_VAR 0 5
25987: PUSH
25988: LD_VAR 0 5
25992: PUSH
25993: LD_VAR 0 3
25997: PUSH
25998: LD_VAR 0 4
26002: ARRAY
26003: PPUSH
26004: CALL_OW 266
26008: PUSH
26009: LD_VAR 0 3
26013: PUSH
26014: LD_VAR 0 4
26018: ARRAY
26019: PPUSH
26020: CALL_OW 250
26024: PUSH
26025: LD_VAR 0 3
26029: PUSH
26030: LD_VAR 0 4
26034: ARRAY
26035: PPUSH
26036: CALL_OW 251
26040: PUSH
26041: LD_VAR 0 3
26045: PUSH
26046: LD_VAR 0 4
26050: ARRAY
26051: PPUSH
26052: CALL_OW 254
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: ADD
26066: ST_TO_ADDR
26067: GO 25980
26069: POP
26070: POP
// result := list ;
26071: LD_ADDR_VAR 0 2
26075: PUSH
26076: LD_VAR 0 5
26080: ST_TO_ADDR
// end ;
26081: LD_VAR 0 2
26085: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26086: LD_INT 0
26088: PPUSH
26089: PPUSH
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
26094: PPUSH
// if not factory then
26095: LD_VAR 0 1
26099: NOT
26100: IFFALSE 26104
// exit ;
26102: GO 26697
// if control = control_apeman then
26104: LD_VAR 0 4
26108: PUSH
26109: LD_INT 5
26111: EQUAL
26112: IFFALSE 26221
// begin tmp := UnitsInside ( factory ) ;
26114: LD_ADDR_VAR 0 8
26118: PUSH
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 313
26128: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26129: LD_VAR 0 8
26133: PPUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 12
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PPUSH
26144: CALL_OW 72
26148: NOT
26149: IFFALSE 26159
// control := control_manual ;
26151: LD_ADDR_VAR 0 4
26155: PUSH
26156: LD_INT 1
26158: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26159: LD_ADDR_VAR 0 8
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL 25856 0 1
26173: ST_TO_ADDR
// if tmp then
26174: LD_VAR 0 8
26178: IFFALSE 26221
// begin for i in tmp do
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: LD_VAR 0 8
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26219
// if i [ 1 ] = b_ext_radio then
26193: LD_VAR 0 7
26197: PUSH
26198: LD_INT 1
26200: ARRAY
26201: PUSH
26202: LD_INT 22
26204: EQUAL
26205: IFFALSE 26217
// begin control := control_remote ;
26207: LD_ADDR_VAR 0 4
26211: PUSH
26212: LD_INT 2
26214: ST_TO_ADDR
// break ;
26215: GO 26219
// end ;
26217: GO 26190
26219: POP
26220: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26221: LD_VAR 0 1
26225: PPUSH
26226: LD_VAR 0 2
26230: PPUSH
26231: LD_VAR 0 3
26235: PPUSH
26236: LD_VAR 0 4
26240: PPUSH
26241: LD_VAR 0 5
26245: PPUSH
26246: CALL_OW 448
26250: IFFALSE 26285
// begin result := [ chassis , engine , control , weapon ] ;
26252: LD_ADDR_VAR 0 6
26256: PUSH
26257: LD_VAR 0 2
26261: PUSH
26262: LD_VAR 0 3
26266: PUSH
26267: LD_VAR 0 4
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
// exit ;
26283: GO 26697
// end ; _chassis := AvailableChassisList ( factory ) ;
26285: LD_ADDR_VAR 0 9
26289: PUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 475
26299: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26300: LD_ADDR_VAR 0 11
26304: PUSH
26305: LD_VAR 0 1
26309: PPUSH
26310: CALL_OW 476
26314: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26315: LD_ADDR_VAR 0 12
26319: PUSH
26320: LD_VAR 0 1
26324: PPUSH
26325: CALL_OW 477
26329: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26330: LD_ADDR_VAR 0 10
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 478
26344: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26345: LD_VAR 0 9
26349: NOT
26350: PUSH
26351: LD_VAR 0 11
26355: NOT
26356: OR
26357: PUSH
26358: LD_VAR 0 12
26362: NOT
26363: OR
26364: PUSH
26365: LD_VAR 0 10
26369: NOT
26370: OR
26371: IFFALSE 26406
// begin result := [ chassis , engine , control , weapon ] ;
26373: LD_ADDR_VAR 0 6
26377: PUSH
26378: LD_VAR 0 2
26382: PUSH
26383: LD_VAR 0 3
26387: PUSH
26388: LD_VAR 0 4
26392: PUSH
26393: LD_VAR 0 5
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
// exit ;
26404: GO 26697
// end ; if not chassis in _chassis then
26406: LD_VAR 0 2
26410: PUSH
26411: LD_VAR 0 9
26415: IN
26416: NOT
26417: IFFALSE 26443
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26419: LD_ADDR_VAR 0 2
26423: PUSH
26424: LD_VAR 0 9
26428: PUSH
26429: LD_INT 1
26431: PPUSH
26432: LD_VAR 0 9
26436: PPUSH
26437: CALL_OW 12
26441: ARRAY
26442: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26443: LD_VAR 0 2
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL 26702 0 2
26457: NOT
26458: IFFALSE 26517
// repeat engine := _engine [ 1 ] ;
26460: LD_ADDR_VAR 0 3
26464: PUSH
26465: LD_VAR 0 11
26469: PUSH
26470: LD_INT 1
26472: ARRAY
26473: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26474: LD_ADDR_VAR 0 11
26478: PUSH
26479: LD_VAR 0 11
26483: PPUSH
26484: LD_INT 1
26486: PPUSH
26487: CALL_OW 3
26491: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26492: LD_VAR 0 2
26496: PPUSH
26497: LD_VAR 0 3
26501: PPUSH
26502: CALL 26702 0 2
26506: PUSH
26507: LD_VAR 0 11
26511: PUSH
26512: EMPTY
26513: EQUAL
26514: OR
26515: IFFALSE 26460
// if not control in _control then
26517: LD_VAR 0 4
26521: PUSH
26522: LD_VAR 0 12
26526: IN
26527: NOT
26528: IFFALSE 26554
// control := _control [ rand ( 1 , _control ) ] ;
26530: LD_ADDR_VAR 0 4
26534: PUSH
26535: LD_VAR 0 12
26539: PUSH
26540: LD_INT 1
26542: PPUSH
26543: LD_VAR 0 12
26547: PPUSH
26548: CALL_OW 12
26552: ARRAY
26553: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26554: LD_VAR 0 2
26558: PPUSH
26559: LD_VAR 0 5
26563: PPUSH
26564: CALL 26922 0 2
26568: NOT
26569: IFFALSE 26628
// repeat weapon := _weapon [ 1 ] ;
26571: LD_ADDR_VAR 0 5
26575: PUSH
26576: LD_VAR 0 10
26580: PUSH
26581: LD_INT 1
26583: ARRAY
26584: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26585: LD_ADDR_VAR 0 10
26589: PUSH
26590: LD_VAR 0 10
26594: PPUSH
26595: LD_INT 1
26597: PPUSH
26598: CALL_OW 3
26602: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26603: LD_VAR 0 2
26607: PPUSH
26608: LD_VAR 0 5
26612: PPUSH
26613: CALL 26922 0 2
26617: PUSH
26618: LD_VAR 0 10
26622: PUSH
26623: EMPTY
26624: EQUAL
26625: OR
26626: IFFALSE 26571
// result := [ ] ;
26628: LD_ADDR_VAR 0 6
26632: PUSH
26633: EMPTY
26634: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26635: LD_VAR 0 1
26639: PPUSH
26640: LD_VAR 0 2
26644: PPUSH
26645: LD_VAR 0 3
26649: PPUSH
26650: LD_VAR 0 4
26654: PPUSH
26655: LD_VAR 0 5
26659: PPUSH
26660: CALL_OW 448
26664: IFFALSE 26697
// result := [ chassis , engine , control , weapon ] ;
26666: LD_ADDR_VAR 0 6
26670: PUSH
26671: LD_VAR 0 2
26675: PUSH
26676: LD_VAR 0 3
26680: PUSH
26681: LD_VAR 0 4
26685: PUSH
26686: LD_VAR 0 5
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: ST_TO_ADDR
// end ;
26697: LD_VAR 0 6
26701: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26702: LD_INT 0
26704: PPUSH
// if not chassis or not engine then
26705: LD_VAR 0 1
26709: NOT
26710: PUSH
26711: LD_VAR 0 2
26715: NOT
26716: OR
26717: IFFALSE 26721
// exit ;
26719: GO 26917
// case engine of engine_solar :
26721: LD_VAR 0 2
26725: PUSH
26726: LD_INT 2
26728: DOUBLE
26729: EQUAL
26730: IFTRUE 26734
26732: GO 26772
26734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_INT 11
26742: PUSH
26743: LD_INT 12
26745: PUSH
26746: LD_INT 13
26748: PUSH
26749: LD_INT 14
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: ST_TO_ADDR
26770: GO 26901
26772: LD_INT 1
26774: DOUBLE
26775: EQUAL
26776: IFTRUE 26780
26778: GO 26842
26780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26781: LD_ADDR_VAR 0 3
26785: PUSH
26786: LD_INT 11
26788: PUSH
26789: LD_INT 12
26791: PUSH
26792: LD_INT 13
26794: PUSH
26795: LD_INT 14
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 2
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 4
26809: PUSH
26810: LD_INT 5
26812: PUSH
26813: LD_INT 21
26815: PUSH
26816: LD_INT 23
26818: PUSH
26819: LD_INT 22
26821: PUSH
26822: LD_INT 24
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: ST_TO_ADDR
26840: GO 26901
26842: LD_INT 3
26844: DOUBLE
26845: EQUAL
26846: IFTRUE 26850
26848: GO 26900
26850: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26851: LD_ADDR_VAR 0 3
26855: PUSH
26856: LD_INT 13
26858: PUSH
26859: LD_INT 14
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: LD_INT 5
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_INT 23
26882: PUSH
26883: LD_INT 24
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: ST_TO_ADDR
26898: GO 26901
26900: POP
// result := ( chassis in result ) ;
26901: LD_ADDR_VAR 0 3
26905: PUSH
26906: LD_VAR 0 1
26910: PUSH
26911: LD_VAR 0 3
26915: IN
26916: ST_TO_ADDR
// end ;
26917: LD_VAR 0 3
26921: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26922: LD_INT 0
26924: PPUSH
// if not chassis or not weapon then
26925: LD_VAR 0 1
26929: NOT
26930: PUSH
26931: LD_VAR 0 2
26935: NOT
26936: OR
26937: IFFALSE 26941
// exit ;
26939: GO 28003
// case weapon of us_machine_gun :
26941: LD_VAR 0 2
26945: PUSH
26946: LD_INT 2
26948: DOUBLE
26949: EQUAL
26950: IFTRUE 26954
26952: GO 26984
26954: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26955: LD_ADDR_VAR 0 3
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 3
26968: PUSH
26969: LD_INT 4
26971: PUSH
26972: LD_INT 5
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
26982: GO 27987
26984: LD_INT 3
26986: DOUBLE
26987: EQUAL
26988: IFTRUE 26992
26990: GO 27022
26992: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26993: LD_ADDR_VAR 0 3
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 3
27006: PUSH
27007: LD_INT 4
27009: PUSH
27010: LD_INT 5
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: ST_TO_ADDR
27020: GO 27987
27022: LD_INT 11
27024: DOUBLE
27025: EQUAL
27026: IFTRUE 27030
27028: GO 27060
27030: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27031: LD_ADDR_VAR 0 3
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: LD_INT 4
27047: PUSH
27048: LD_INT 5
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: ST_TO_ADDR
27058: GO 27987
27060: LD_INT 4
27062: DOUBLE
27063: EQUAL
27064: IFTRUE 27068
27066: GO 27094
27068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27069: LD_ADDR_VAR 0 3
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 3
27079: PUSH
27080: LD_INT 4
27082: PUSH
27083: LD_INT 5
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
27092: GO 27987
27094: LD_INT 5
27096: DOUBLE
27097: EQUAL
27098: IFTRUE 27102
27100: GO 27128
27102: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27103: LD_ADDR_VAR 0 3
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 3
27113: PUSH
27114: LD_INT 4
27116: PUSH
27117: LD_INT 5
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
27126: GO 27987
27128: LD_INT 9
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27162
27136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: LD_INT 4
27150: PUSH
27151: LD_INT 5
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: ST_TO_ADDR
27160: GO 27987
27162: LD_INT 7
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27196
27170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27171: LD_ADDR_VAR 0 3
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: LD_INT 3
27181: PUSH
27182: LD_INT 4
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: ST_TO_ADDR
27194: GO 27987
27196: LD_INT 12
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27230
27204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27205: LD_ADDR_VAR 0 3
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: LD_INT 3
27215: PUSH
27216: LD_INT 4
27218: PUSH
27219: LD_INT 5
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
27228: GO 27987
27230: LD_INT 13
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27264
27238: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: LD_INT 4
27252: PUSH
27253: LD_INT 5
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
27262: GO 27987
27264: LD_INT 14
27266: DOUBLE
27267: EQUAL
27268: IFTRUE 27272
27270: GO 27290
27272: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27273: LD_ADDR_VAR 0 3
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: LD_INT 5
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: ST_TO_ADDR
27288: GO 27987
27290: LD_INT 6
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27316
27298: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_INT 4
27306: PUSH
27307: LD_INT 5
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: ST_TO_ADDR
27314: GO 27987
27316: LD_INT 10
27318: DOUBLE
27319: EQUAL
27320: IFTRUE 27324
27322: GO 27342
27324: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27325: LD_ADDR_VAR 0 3
27329: PUSH
27330: LD_INT 4
27332: PUSH
27333: LD_INT 5
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: ST_TO_ADDR
27340: GO 27987
27342: LD_INT 22
27344: DOUBLE
27345: EQUAL
27346: IFTRUE 27350
27348: GO 27376
27350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27351: LD_ADDR_VAR 0 3
27355: PUSH
27356: LD_INT 11
27358: PUSH
27359: LD_INT 12
27361: PUSH
27362: LD_INT 13
27364: PUSH
27365: LD_INT 14
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
27374: GO 27987
27376: LD_INT 23
27378: DOUBLE
27379: EQUAL
27380: IFTRUE 27384
27382: GO 27410
27384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_INT 11
27392: PUSH
27393: LD_INT 12
27395: PUSH
27396: LD_INT 13
27398: PUSH
27399: LD_INT 14
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: ST_TO_ADDR
27408: GO 27987
27410: LD_INT 24
27412: DOUBLE
27413: EQUAL
27414: IFTRUE 27418
27416: GO 27444
27418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27419: LD_ADDR_VAR 0 3
27423: PUSH
27424: LD_INT 11
27426: PUSH
27427: LD_INT 12
27429: PUSH
27430: LD_INT 13
27432: PUSH
27433: LD_INT 14
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
27442: GO 27987
27444: LD_INT 30
27446: DOUBLE
27447: EQUAL
27448: IFTRUE 27452
27450: GO 27478
27452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: LD_INT 11
27460: PUSH
27461: LD_INT 12
27463: PUSH
27464: LD_INT 13
27466: PUSH
27467: LD_INT 14
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
27476: GO 27987
27478: LD_INT 25
27480: DOUBLE
27481: EQUAL
27482: IFTRUE 27486
27484: GO 27504
27486: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27487: LD_ADDR_VAR 0 3
27491: PUSH
27492: LD_INT 13
27494: PUSH
27495: LD_INT 14
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: ST_TO_ADDR
27502: GO 27987
27504: LD_INT 27
27506: DOUBLE
27507: EQUAL
27508: IFTRUE 27512
27510: GO 27530
27512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_INT 13
27520: PUSH
27521: LD_INT 14
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: ST_TO_ADDR
27528: GO 27987
27530: LD_EXP 97
27534: DOUBLE
27535: EQUAL
27536: IFTRUE 27540
27538: GO 27566
27540: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_INT 11
27548: PUSH
27549: LD_INT 12
27551: PUSH
27552: LD_INT 13
27554: PUSH
27555: LD_INT 14
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: ST_TO_ADDR
27564: GO 27987
27566: LD_INT 28
27568: DOUBLE
27569: EQUAL
27570: IFTRUE 27574
27572: GO 27592
27574: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27575: LD_ADDR_VAR 0 3
27579: PUSH
27580: LD_INT 13
27582: PUSH
27583: LD_INT 14
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: ST_TO_ADDR
27590: GO 27987
27592: LD_INT 29
27594: DOUBLE
27595: EQUAL
27596: IFTRUE 27600
27598: GO 27618
27600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_INT 13
27608: PUSH
27609: LD_INT 14
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: ST_TO_ADDR
27616: GO 27987
27618: LD_INT 31
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27626
27624: GO 27644
27626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27627: LD_ADDR_VAR 0 3
27631: PUSH
27632: LD_INT 13
27634: PUSH
27635: LD_INT 14
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: ST_TO_ADDR
27642: GO 27987
27644: LD_INT 26
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27652
27650: GO 27670
27652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: LD_INT 13
27660: PUSH
27661: LD_INT 14
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: ST_TO_ADDR
27668: GO 27987
27670: LD_INT 42
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27704
27678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27679: LD_ADDR_VAR 0 3
27683: PUSH
27684: LD_INT 21
27686: PUSH
27687: LD_INT 22
27689: PUSH
27690: LD_INT 23
27692: PUSH
27693: LD_INT 24
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
27702: GO 27987
27704: LD_INT 43
27706: DOUBLE
27707: EQUAL
27708: IFTRUE 27712
27710: GO 27738
27712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: LD_INT 21
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_INT 23
27726: PUSH
27727: LD_INT 24
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
27736: GO 27987
27738: LD_INT 44
27740: DOUBLE
27741: EQUAL
27742: IFTRUE 27746
27744: GO 27772
27746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_INT 21
27754: PUSH
27755: LD_INT 22
27757: PUSH
27758: LD_INT 23
27760: PUSH
27761: LD_INT 24
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
27770: GO 27987
27772: LD_INT 45
27774: DOUBLE
27775: EQUAL
27776: IFTRUE 27780
27778: GO 27806
27780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27781: LD_ADDR_VAR 0 3
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_INT 23
27794: PUSH
27795: LD_INT 24
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: ST_TO_ADDR
27804: GO 27987
27806: LD_INT 49
27808: DOUBLE
27809: EQUAL
27810: IFTRUE 27814
27812: GO 27840
27814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27815: LD_ADDR_VAR 0 3
27819: PUSH
27820: LD_INT 21
27822: PUSH
27823: LD_INT 22
27825: PUSH
27826: LD_INT 23
27828: PUSH
27829: LD_INT 24
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
27838: GO 27987
27840: LD_INT 51
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27874
27848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_INT 21
27856: PUSH
27857: LD_INT 22
27859: PUSH
27860: LD_INT 23
27862: PUSH
27863: LD_INT 24
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
27872: GO 27987
27874: LD_INT 52
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27908
27882: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 21
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_INT 23
27896: PUSH
27897: LD_INT 24
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
27906: GO 27987
27908: LD_INT 53
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27916
27914: GO 27934
27916: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27917: LD_ADDR_VAR 0 3
27921: PUSH
27922: LD_INT 23
27924: PUSH
27925: LD_INT 24
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: ST_TO_ADDR
27932: GO 27987
27934: LD_INT 46
27936: DOUBLE
27937: EQUAL
27938: IFTRUE 27942
27940: GO 27960
27942: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27943: LD_ADDR_VAR 0 3
27947: PUSH
27948: LD_INT 23
27950: PUSH
27951: LD_INT 24
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: ST_TO_ADDR
27958: GO 27987
27960: LD_INT 47
27962: DOUBLE
27963: EQUAL
27964: IFTRUE 27968
27966: GO 27986
27968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27969: LD_ADDR_VAR 0 3
27973: PUSH
27974: LD_INT 23
27976: PUSH
27977: LD_INT 24
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: ST_TO_ADDR
27984: GO 27987
27986: POP
// result := ( chassis in result ) ;
27987: LD_ADDR_VAR 0 3
27991: PUSH
27992: LD_VAR 0 1
27996: PUSH
27997: LD_VAR 0 3
28001: IN
28002: ST_TO_ADDR
// end ;
28003: LD_VAR 0 3
28007: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28008: LD_INT 0
28010: PPUSH
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
// result := array ;
28017: LD_ADDR_VAR 0 5
28021: PUSH
28022: LD_VAR 0 1
28026: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28027: LD_VAR 0 1
28031: NOT
28032: PUSH
28033: LD_VAR 0 2
28037: NOT
28038: OR
28039: PUSH
28040: LD_VAR 0 3
28044: NOT
28045: OR
28046: PUSH
28047: LD_VAR 0 2
28051: PUSH
28052: LD_VAR 0 1
28056: GREATER
28057: OR
28058: PUSH
28059: LD_VAR 0 3
28063: PUSH
28064: LD_VAR 0 1
28068: GREATER
28069: OR
28070: IFFALSE 28074
// exit ;
28072: GO 28370
// if direction then
28074: LD_VAR 0 4
28078: IFFALSE 28142
// begin d := 1 ;
28080: LD_ADDR_VAR 0 9
28084: PUSH
28085: LD_INT 1
28087: ST_TO_ADDR
// if i_from > i_to then
28088: LD_VAR 0 2
28092: PUSH
28093: LD_VAR 0 3
28097: GREATER
28098: IFFALSE 28124
// length := ( array - i_from ) + i_to else
28100: LD_ADDR_VAR 0 11
28104: PUSH
28105: LD_VAR 0 1
28109: PUSH
28110: LD_VAR 0 2
28114: MINUS
28115: PUSH
28116: LD_VAR 0 3
28120: PLUS
28121: ST_TO_ADDR
28122: GO 28140
// length := i_to - i_from ;
28124: LD_ADDR_VAR 0 11
28128: PUSH
28129: LD_VAR 0 3
28133: PUSH
28134: LD_VAR 0 2
28138: MINUS
28139: ST_TO_ADDR
// end else
28140: GO 28203
// begin d := - 1 ;
28142: LD_ADDR_VAR 0 9
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: ST_TO_ADDR
// if i_from > i_to then
28151: LD_VAR 0 2
28155: PUSH
28156: LD_VAR 0 3
28160: GREATER
28161: IFFALSE 28181
// length := i_from - i_to else
28163: LD_ADDR_VAR 0 11
28167: PUSH
28168: LD_VAR 0 2
28172: PUSH
28173: LD_VAR 0 3
28177: MINUS
28178: ST_TO_ADDR
28179: GO 28203
// length := ( array - i_to ) + i_from ;
28181: LD_ADDR_VAR 0 11
28185: PUSH
28186: LD_VAR 0 1
28190: PUSH
28191: LD_VAR 0 3
28195: MINUS
28196: PUSH
28197: LD_VAR 0 2
28201: PLUS
28202: ST_TO_ADDR
// end ; if not length then
28203: LD_VAR 0 11
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28370
// tmp := array ;
28212: LD_ADDR_VAR 0 10
28216: PUSH
28217: LD_VAR 0 1
28221: ST_TO_ADDR
// for i = 1 to length do
28222: LD_ADDR_VAR 0 6
28226: PUSH
28227: DOUBLE
28228: LD_INT 1
28230: DEC
28231: ST_TO_ADDR
28232: LD_VAR 0 11
28236: PUSH
28237: FOR_TO
28238: IFFALSE 28358
// begin for j = 1 to array do
28240: LD_ADDR_VAR 0 7
28244: PUSH
28245: DOUBLE
28246: LD_INT 1
28248: DEC
28249: ST_TO_ADDR
28250: LD_VAR 0 1
28254: PUSH
28255: FOR_TO
28256: IFFALSE 28344
// begin k := j + d ;
28258: LD_ADDR_VAR 0 8
28262: PUSH
28263: LD_VAR 0 7
28267: PUSH
28268: LD_VAR 0 9
28272: PLUS
28273: ST_TO_ADDR
// if k > array then
28274: LD_VAR 0 8
28278: PUSH
28279: LD_VAR 0 1
28283: GREATER
28284: IFFALSE 28294
// k := 1 ;
28286: LD_ADDR_VAR 0 8
28290: PUSH
28291: LD_INT 1
28293: ST_TO_ADDR
// if not k then
28294: LD_VAR 0 8
28298: NOT
28299: IFFALSE 28311
// k := array ;
28301: LD_ADDR_VAR 0 8
28305: PUSH
28306: LD_VAR 0 1
28310: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28311: LD_ADDR_VAR 0 10
28315: PUSH
28316: LD_VAR 0 10
28320: PPUSH
28321: LD_VAR 0 8
28325: PPUSH
28326: LD_VAR 0 1
28330: PUSH
28331: LD_VAR 0 7
28335: ARRAY
28336: PPUSH
28337: CALL_OW 1
28341: ST_TO_ADDR
// end ;
28342: GO 28255
28344: POP
28345: POP
// array := tmp ;
28346: LD_ADDR_VAR 0 1
28350: PUSH
28351: LD_VAR 0 10
28355: ST_TO_ADDR
// end ;
28356: GO 28237
28358: POP
28359: POP
// result := array ;
28360: LD_ADDR_VAR 0 5
28364: PUSH
28365: LD_VAR 0 1
28369: ST_TO_ADDR
// end ;
28370: LD_VAR 0 5
28374: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28375: LD_INT 0
28377: PPUSH
28378: PPUSH
// result := 0 ;
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: LD_INT 0
28386: ST_TO_ADDR
// if not array or not value in array then
28387: LD_VAR 0 1
28391: NOT
28392: PUSH
28393: LD_VAR 0 2
28397: PUSH
28398: LD_VAR 0 1
28402: IN
28403: NOT
28404: OR
28405: IFFALSE 28409
// exit ;
28407: GO 28463
// for i = 1 to array do
28409: LD_ADDR_VAR 0 4
28413: PUSH
28414: DOUBLE
28415: LD_INT 1
28417: DEC
28418: ST_TO_ADDR
28419: LD_VAR 0 1
28423: PUSH
28424: FOR_TO
28425: IFFALSE 28461
// if value = array [ i ] then
28427: LD_VAR 0 2
28431: PUSH
28432: LD_VAR 0 1
28436: PUSH
28437: LD_VAR 0 4
28441: ARRAY
28442: EQUAL
28443: IFFALSE 28459
// begin result := i ;
28445: LD_ADDR_VAR 0 3
28449: PUSH
28450: LD_VAR 0 4
28454: ST_TO_ADDR
// exit ;
28455: POP
28456: POP
28457: GO 28463
// end ;
28459: GO 28424
28461: POP
28462: POP
// end ;
28463: LD_VAR 0 3
28467: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28468: LD_INT 0
28470: PPUSH
// vc_chassis := chassis ;
28471: LD_ADDR_OWVAR 37
28475: PUSH
28476: LD_VAR 0 1
28480: ST_TO_ADDR
// vc_engine := engine ;
28481: LD_ADDR_OWVAR 39
28485: PUSH
28486: LD_VAR 0 2
28490: ST_TO_ADDR
// vc_control := control ;
28491: LD_ADDR_OWVAR 38
28495: PUSH
28496: LD_VAR 0 3
28500: ST_TO_ADDR
// vc_weapon := weapon ;
28501: LD_ADDR_OWVAR 40
28505: PUSH
28506: LD_VAR 0 4
28510: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28511: LD_ADDR_OWVAR 41
28515: PUSH
28516: LD_VAR 0 5
28520: ST_TO_ADDR
// end ;
28521: LD_VAR 0 6
28525: RET
// export function WantPlant ( unit ) ; var task ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
// result := false ;
28530: LD_ADDR_VAR 0 2
28534: PUSH
28535: LD_INT 0
28537: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28538: LD_ADDR_VAR 0 3
28542: PUSH
28543: LD_VAR 0 1
28547: PPUSH
28548: CALL_OW 437
28552: ST_TO_ADDR
// if task then
28553: LD_VAR 0 3
28557: IFFALSE 28585
// if task [ 1 ] [ 1 ] = p then
28559: LD_VAR 0 3
28563: PUSH
28564: LD_INT 1
28566: ARRAY
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PUSH
28572: LD_STRING p
28574: EQUAL
28575: IFFALSE 28585
// result := true ;
28577: LD_ADDR_VAR 0 2
28581: PUSH
28582: LD_INT 1
28584: ST_TO_ADDR
// end ;
28585: LD_VAR 0 2
28589: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28590: LD_INT 0
28592: PPUSH
28593: PPUSH
28594: PPUSH
28595: PPUSH
// if pos < 1 then
28596: LD_VAR 0 2
28600: PUSH
28601: LD_INT 1
28603: LESS
28604: IFFALSE 28608
// exit ;
28606: GO 28911
// if pos = 1 then
28608: LD_VAR 0 2
28612: PUSH
28613: LD_INT 1
28615: EQUAL
28616: IFFALSE 28649
// result := Replace ( arr , pos [ 1 ] , value ) else
28618: LD_ADDR_VAR 0 4
28622: PUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: LD_VAR 0 2
28632: PUSH
28633: LD_INT 1
28635: ARRAY
28636: PPUSH
28637: LD_VAR 0 3
28641: PPUSH
28642: CALL_OW 1
28646: ST_TO_ADDR
28647: GO 28911
// begin tmp := arr ;
28649: LD_ADDR_VAR 0 6
28653: PUSH
28654: LD_VAR 0 1
28658: ST_TO_ADDR
// s_arr := [ tmp ] ;
28659: LD_ADDR_VAR 0 7
28663: PUSH
28664: LD_VAR 0 6
28668: PUSH
28669: EMPTY
28670: LIST
28671: ST_TO_ADDR
// for i = 1 to pos - 1 do
28672: LD_ADDR_VAR 0 5
28676: PUSH
28677: DOUBLE
28678: LD_INT 1
28680: DEC
28681: ST_TO_ADDR
28682: LD_VAR 0 2
28686: PUSH
28687: LD_INT 1
28689: MINUS
28690: PUSH
28691: FOR_TO
28692: IFFALSE 28737
// begin tmp := tmp [ pos [ i ] ] ;
28694: LD_ADDR_VAR 0 6
28698: PUSH
28699: LD_VAR 0 6
28703: PUSH
28704: LD_VAR 0 2
28708: PUSH
28709: LD_VAR 0 5
28713: ARRAY
28714: ARRAY
28715: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28716: LD_ADDR_VAR 0 7
28720: PUSH
28721: LD_VAR 0 7
28725: PUSH
28726: LD_VAR 0 6
28730: PUSH
28731: EMPTY
28732: LIST
28733: ADD
28734: ST_TO_ADDR
// end ;
28735: GO 28691
28737: POP
28738: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28739: LD_ADDR_VAR 0 6
28743: PUSH
28744: LD_VAR 0 6
28748: PPUSH
28749: LD_VAR 0 2
28753: PUSH
28754: LD_VAR 0 2
28758: ARRAY
28759: PPUSH
28760: LD_VAR 0 3
28764: PPUSH
28765: CALL_OW 1
28769: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28770: LD_ADDR_VAR 0 7
28774: PUSH
28775: LD_VAR 0 7
28779: PPUSH
28780: LD_VAR 0 7
28784: PPUSH
28785: LD_VAR 0 6
28789: PPUSH
28790: CALL_OW 1
28794: ST_TO_ADDR
// for i = s_arr downto 2 do
28795: LD_ADDR_VAR 0 5
28799: PUSH
28800: DOUBLE
28801: LD_VAR 0 7
28805: INC
28806: ST_TO_ADDR
28807: LD_INT 2
28809: PUSH
28810: FOR_DOWNTO
28811: IFFALSE 28895
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28813: LD_ADDR_VAR 0 6
28817: PUSH
28818: LD_VAR 0 7
28822: PUSH
28823: LD_VAR 0 5
28827: PUSH
28828: LD_INT 1
28830: MINUS
28831: ARRAY
28832: PPUSH
28833: LD_VAR 0 2
28837: PUSH
28838: LD_VAR 0 5
28842: PUSH
28843: LD_INT 1
28845: MINUS
28846: ARRAY
28847: PPUSH
28848: LD_VAR 0 7
28852: PUSH
28853: LD_VAR 0 5
28857: ARRAY
28858: PPUSH
28859: CALL_OW 1
28863: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28864: LD_ADDR_VAR 0 7
28868: PUSH
28869: LD_VAR 0 7
28873: PPUSH
28874: LD_VAR 0 5
28878: PUSH
28879: LD_INT 1
28881: MINUS
28882: PPUSH
28883: LD_VAR 0 6
28887: PPUSH
28888: CALL_OW 1
28892: ST_TO_ADDR
// end ;
28893: GO 28810
28895: POP
28896: POP
// result := s_arr [ 1 ] ;
28897: LD_ADDR_VAR 0 4
28901: PUSH
28902: LD_VAR 0 7
28906: PUSH
28907: LD_INT 1
28909: ARRAY
28910: ST_TO_ADDR
// end ; end ;
28911: LD_VAR 0 4
28915: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28916: LD_INT 0
28918: PPUSH
28919: PPUSH
// if not list then
28920: LD_VAR 0 1
28924: NOT
28925: IFFALSE 28929
// exit ;
28927: GO 29020
// i := list [ pos1 ] ;
28929: LD_ADDR_VAR 0 5
28933: PUSH
28934: LD_VAR 0 1
28938: PUSH
28939: LD_VAR 0 2
28943: ARRAY
28944: ST_TO_ADDR
// if not i then
28945: LD_VAR 0 5
28949: NOT
28950: IFFALSE 28954
// exit ;
28952: GO 29020
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28954: LD_ADDR_VAR 0 1
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: LD_VAR 0 2
28968: PPUSH
28969: LD_VAR 0 1
28973: PUSH
28974: LD_VAR 0 3
28978: ARRAY
28979: PPUSH
28980: CALL_OW 1
28984: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28985: LD_ADDR_VAR 0 1
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: LD_VAR 0 3
28999: PPUSH
29000: LD_VAR 0 5
29004: PPUSH
29005: CALL_OW 1
29009: ST_TO_ADDR
// result := list ;
29010: LD_ADDR_VAR 0 4
29014: PUSH
29015: LD_VAR 0 1
29019: ST_TO_ADDR
// end ;
29020: LD_VAR 0 4
29024: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29025: LD_INT 0
29027: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29028: LD_ADDR_VAR 0 5
29032: PUSH
29033: LD_VAR 0 1
29037: PPUSH
29038: CALL_OW 250
29042: PPUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 251
29052: PPUSH
29053: LD_VAR 0 2
29057: PPUSH
29058: LD_VAR 0 3
29062: PPUSH
29063: LD_VAR 0 4
29067: PPUSH
29068: CALL 29078 0 5
29072: ST_TO_ADDR
// end ;
29073: LD_VAR 0 5
29077: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29078: LD_INT 0
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
// if not list then
29084: LD_VAR 0 3
29088: NOT
29089: IFFALSE 29093
// exit ;
29091: GO 29481
// result := [ ] ;
29093: LD_ADDR_VAR 0 6
29097: PUSH
29098: EMPTY
29099: ST_TO_ADDR
// for i in list do
29100: LD_ADDR_VAR 0 7
29104: PUSH
29105: LD_VAR 0 3
29109: PUSH
29110: FOR_IN
29111: IFFALSE 29313
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29113: LD_ADDR_VAR 0 9
29117: PUSH
29118: LD_VAR 0 7
29122: PPUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: LD_VAR 0 2
29132: PPUSH
29133: CALL_OW 297
29137: ST_TO_ADDR
// if not result then
29138: LD_VAR 0 6
29142: NOT
29143: IFFALSE 29169
// result := [ [ i , tmp ] ] else
29145: LD_ADDR_VAR 0 6
29149: PUSH
29150: LD_VAR 0 7
29154: PUSH
29155: LD_VAR 0 9
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: EMPTY
29165: LIST
29166: ST_TO_ADDR
29167: GO 29311
// begin if result [ result ] [ 2 ] < tmp then
29169: LD_VAR 0 6
29173: PUSH
29174: LD_VAR 0 6
29178: ARRAY
29179: PUSH
29180: LD_INT 2
29182: ARRAY
29183: PUSH
29184: LD_VAR 0 9
29188: LESS
29189: IFFALSE 29231
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29191: LD_ADDR_VAR 0 6
29195: PUSH
29196: LD_VAR 0 6
29200: PPUSH
29201: LD_VAR 0 6
29205: PUSH
29206: LD_INT 1
29208: PLUS
29209: PPUSH
29210: LD_VAR 0 7
29214: PUSH
29215: LD_VAR 0 9
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PPUSH
29224: CALL_OW 2
29228: ST_TO_ADDR
29229: GO 29311
// for j = 1 to result do
29231: LD_ADDR_VAR 0 8
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_VAR 0 6
29245: PUSH
29246: FOR_TO
29247: IFFALSE 29309
// begin if tmp < result [ j ] [ 2 ] then
29249: LD_VAR 0 9
29253: PUSH
29254: LD_VAR 0 6
29258: PUSH
29259: LD_VAR 0 8
29263: ARRAY
29264: PUSH
29265: LD_INT 2
29267: ARRAY
29268: LESS
29269: IFFALSE 29307
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29271: LD_ADDR_VAR 0 6
29275: PUSH
29276: LD_VAR 0 6
29280: PPUSH
29281: LD_VAR 0 8
29285: PPUSH
29286: LD_VAR 0 7
29290: PUSH
29291: LD_VAR 0 9
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PPUSH
29300: CALL_OW 2
29304: ST_TO_ADDR
// break ;
29305: GO 29309
// end ; end ;
29307: GO 29246
29309: POP
29310: POP
// end ; end ;
29311: GO 29110
29313: POP
29314: POP
// if result and not asc then
29315: LD_VAR 0 6
29319: PUSH
29320: LD_VAR 0 4
29324: NOT
29325: AND
29326: IFFALSE 29401
// begin tmp := result ;
29328: LD_ADDR_VAR 0 9
29332: PUSH
29333: LD_VAR 0 6
29337: ST_TO_ADDR
// for i = tmp downto 1 do
29338: LD_ADDR_VAR 0 7
29342: PUSH
29343: DOUBLE
29344: LD_VAR 0 9
29348: INC
29349: ST_TO_ADDR
29350: LD_INT 1
29352: PUSH
29353: FOR_DOWNTO
29354: IFFALSE 29399
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29356: LD_ADDR_VAR 0 6
29360: PUSH
29361: LD_VAR 0 6
29365: PPUSH
29366: LD_VAR 0 9
29370: PUSH
29371: LD_VAR 0 7
29375: MINUS
29376: PUSH
29377: LD_INT 1
29379: PLUS
29380: PPUSH
29381: LD_VAR 0 9
29385: PUSH
29386: LD_VAR 0 7
29390: ARRAY
29391: PPUSH
29392: CALL_OW 1
29396: ST_TO_ADDR
29397: GO 29353
29399: POP
29400: POP
// end ; tmp := [ ] ;
29401: LD_ADDR_VAR 0 9
29405: PUSH
29406: EMPTY
29407: ST_TO_ADDR
// if mode then
29408: LD_VAR 0 5
29412: IFFALSE 29481
// begin for i = 1 to result do
29414: LD_ADDR_VAR 0 7
29418: PUSH
29419: DOUBLE
29420: LD_INT 1
29422: DEC
29423: ST_TO_ADDR
29424: LD_VAR 0 6
29428: PUSH
29429: FOR_TO
29430: IFFALSE 29469
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29432: LD_ADDR_VAR 0 9
29436: PUSH
29437: LD_VAR 0 9
29441: PPUSH
29442: LD_VAR 0 7
29446: PPUSH
29447: LD_VAR 0 6
29451: PUSH
29452: LD_VAR 0 7
29456: ARRAY
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: CALL_OW 1
29466: ST_TO_ADDR
29467: GO 29429
29469: POP
29470: POP
// result := tmp ;
29471: LD_ADDR_VAR 0 6
29475: PUSH
29476: LD_VAR 0 9
29480: ST_TO_ADDR
// end ; end ;
29481: LD_VAR 0 6
29485: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
29492: PPUSH
29493: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: ST_TO_ADDR
// if not x or not y then
29516: LD_VAR 0 2
29520: NOT
29521: PUSH
29522: LD_VAR 0 3
29526: NOT
29527: OR
29528: IFFALSE 29532
// exit ;
29530: GO 31184
// if not range then
29532: LD_VAR 0 4
29536: NOT
29537: IFFALSE 29547
// range := 10 ;
29539: LD_ADDR_VAR 0 4
29543: PUSH
29544: LD_INT 10
29546: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29547: LD_ADDR_VAR 0 8
29551: PUSH
29552: LD_INT 81
29554: PUSH
29555: LD_VAR 0 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 92
29566: PUSH
29567: LD_VAR 0 2
29571: PUSH
29572: LD_VAR 0 3
29576: PUSH
29577: LD_VAR 0 4
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 3
29590: PUSH
29591: LD_INT 21
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 69
29614: ST_TO_ADDR
// if not tmp then
29615: LD_VAR 0 8
29619: NOT
29620: IFFALSE 29624
// exit ;
29622: GO 31184
// for i in tmp do
29624: LD_ADDR_VAR 0 6
29628: PUSH
29629: LD_VAR 0 8
29633: PUSH
29634: FOR_IN
29635: IFFALSE 31159
// begin points := [ 0 , 0 , 0 ] ;
29637: LD_ADDR_VAR 0 9
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: ST_TO_ADDR
// bpoints := 1 ;
29656: LD_ADDR_VAR 0 10
29660: PUSH
29661: LD_INT 1
29663: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29664: LD_VAR 0 6
29668: PPUSH
29669: CALL_OW 247
29673: PUSH
29674: LD_INT 1
29676: DOUBLE
29677: EQUAL
29678: IFTRUE 29682
29680: GO 30260
29682: POP
// begin if GetClass ( i ) = 1 then
29683: LD_VAR 0 6
29687: PPUSH
29688: CALL_OW 257
29692: PUSH
29693: LD_INT 1
29695: EQUAL
29696: IFFALSE 29717
// points := [ 10 , 5 , 3 ] ;
29698: LD_ADDR_VAR 0 9
29702: PUSH
29703: LD_INT 10
29705: PUSH
29706: LD_INT 5
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29717: LD_VAR 0 6
29721: PPUSH
29722: CALL_OW 257
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 3
29732: PUSH
29733: LD_INT 4
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: IN
29741: IFFALSE 29762
// points := [ 3 , 2 , 1 ] ;
29743: LD_ADDR_VAR 0 9
29747: PUSH
29748: LD_INT 3
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29762: LD_VAR 0 6
29766: PPUSH
29767: CALL_OW 257
29771: PUSH
29772: LD_INT 5
29774: EQUAL
29775: IFFALSE 29796
// points := [ 130 , 5 , 2 ] ;
29777: LD_ADDR_VAR 0 9
29781: PUSH
29782: LD_INT 130
29784: PUSH
29785: LD_INT 5
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29796: LD_VAR 0 6
29800: PPUSH
29801: CALL_OW 257
29805: PUSH
29806: LD_INT 8
29808: EQUAL
29809: IFFALSE 29830
// points := [ 35 , 35 , 30 ] ;
29811: LD_ADDR_VAR 0 9
29815: PUSH
29816: LD_INT 35
29818: PUSH
29819: LD_INT 35
29821: PUSH
29822: LD_INT 30
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29830: LD_VAR 0 6
29834: PPUSH
29835: CALL_OW 257
29839: PUSH
29840: LD_INT 9
29842: EQUAL
29843: IFFALSE 29864
// points := [ 20 , 55 , 40 ] ;
29845: LD_ADDR_VAR 0 9
29849: PUSH
29850: LD_INT 20
29852: PUSH
29853: LD_INT 55
29855: PUSH
29856: LD_INT 40
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29864: LD_VAR 0 6
29868: PPUSH
29869: CALL_OW 257
29873: PUSH
29874: LD_INT 12
29876: PUSH
29877: LD_INT 16
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: IN
29884: IFFALSE 29905
// points := [ 5 , 3 , 2 ] ;
29886: LD_ADDR_VAR 0 9
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: LIST
29904: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29905: LD_VAR 0 6
29909: PPUSH
29910: CALL_OW 257
29914: PUSH
29915: LD_INT 17
29917: EQUAL
29918: IFFALSE 29939
// points := [ 100 , 50 , 75 ] ;
29920: LD_ADDR_VAR 0 9
29924: PUSH
29925: LD_INT 100
29927: PUSH
29928: LD_INT 50
29930: PUSH
29931: LD_INT 75
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29939: LD_VAR 0 6
29943: PPUSH
29944: CALL_OW 257
29948: PUSH
29949: LD_INT 15
29951: EQUAL
29952: IFFALSE 29973
// points := [ 10 , 5 , 3 ] ;
29954: LD_ADDR_VAR 0 9
29958: PUSH
29959: LD_INT 10
29961: PUSH
29962: LD_INT 5
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29973: LD_VAR 0 6
29977: PPUSH
29978: CALL_OW 257
29982: PUSH
29983: LD_INT 14
29985: EQUAL
29986: IFFALSE 30007
// points := [ 10 , 0 , 0 ] ;
29988: LD_ADDR_VAR 0 9
29992: PUSH
29993: LD_INT 10
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30007: LD_VAR 0 6
30011: PPUSH
30012: CALL_OW 257
30016: PUSH
30017: LD_INT 11
30019: EQUAL
30020: IFFALSE 30041
// points := [ 30 , 10 , 5 ] ;
30022: LD_ADDR_VAR 0 9
30026: PUSH
30027: LD_INT 30
30029: PUSH
30030: LD_INT 10
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30041: LD_VAR 0 1
30045: PPUSH
30046: LD_INT 5
30048: PPUSH
30049: CALL_OW 321
30053: PUSH
30054: LD_INT 2
30056: EQUAL
30057: IFFALSE 30074
// bpoints := bpoints * 1.8 ;
30059: LD_ADDR_VAR 0 10
30063: PUSH
30064: LD_VAR 0 10
30068: PUSH
30069: LD_REAL  1.80000000000000E+0000
30072: MUL
30073: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30074: LD_VAR 0 6
30078: PPUSH
30079: CALL_OW 257
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: LD_INT 2
30089: PUSH
30090: LD_INT 3
30092: PUSH
30093: LD_INT 4
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: IN
30102: PUSH
30103: LD_VAR 0 1
30107: PPUSH
30108: LD_INT 51
30110: PPUSH
30111: CALL_OW 321
30115: PUSH
30116: LD_INT 2
30118: EQUAL
30119: AND
30120: IFFALSE 30137
// bpoints := bpoints * 1.2 ;
30122: LD_ADDR_VAR 0 10
30126: PUSH
30127: LD_VAR 0 10
30131: PUSH
30132: LD_REAL  1.20000000000000E+0000
30135: MUL
30136: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30137: LD_VAR 0 6
30141: PPUSH
30142: CALL_OW 257
30146: PUSH
30147: LD_INT 5
30149: PUSH
30150: LD_INT 7
30152: PUSH
30153: LD_INT 9
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: IN
30161: PUSH
30162: LD_VAR 0 1
30166: PPUSH
30167: LD_INT 52
30169: PPUSH
30170: CALL_OW 321
30174: PUSH
30175: LD_INT 2
30177: EQUAL
30178: AND
30179: IFFALSE 30196
// bpoints := bpoints * 1.5 ;
30181: LD_ADDR_VAR 0 10
30185: PUSH
30186: LD_VAR 0 10
30190: PUSH
30191: LD_REAL  1.50000000000000E+0000
30194: MUL
30195: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30196: LD_VAR 0 1
30200: PPUSH
30201: LD_INT 66
30203: PPUSH
30204: CALL_OW 321
30208: PUSH
30209: LD_INT 2
30211: EQUAL
30212: IFFALSE 30229
// bpoints := bpoints * 1.1 ;
30214: LD_ADDR_VAR 0 10
30218: PUSH
30219: LD_VAR 0 10
30223: PUSH
30224: LD_REAL  1.10000000000000E+0000
30227: MUL
30228: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30229: LD_ADDR_VAR 0 10
30233: PUSH
30234: LD_VAR 0 10
30238: PUSH
30239: LD_VAR 0 6
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: CALL_OW 259
30251: PUSH
30252: LD_REAL  1.15000000000000E+0000
30255: MUL
30256: MUL
30257: ST_TO_ADDR
// end ; unit_vehicle :
30258: GO 31088
30260: LD_INT 2
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 31076
30268: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30269: LD_VAR 0 6
30273: PPUSH
30274: CALL_OW 264
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: LD_INT 42
30284: PUSH
30285: LD_INT 24
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: IN
30293: IFFALSE 30314
// points := [ 25 , 5 , 3 ] ;
30295: LD_ADDR_VAR 0 9
30299: PUSH
30300: LD_INT 25
30302: PUSH
30303: LD_INT 5
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30314: LD_VAR 0 6
30318: PPUSH
30319: CALL_OW 264
30323: PUSH
30324: LD_INT 4
30326: PUSH
30327: LD_INT 43
30329: PUSH
30330: LD_INT 25
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: IN
30338: IFFALSE 30359
// points := [ 40 , 15 , 5 ] ;
30340: LD_ADDR_VAR 0 9
30344: PUSH
30345: LD_INT 40
30347: PUSH
30348: LD_INT 15
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30359: LD_VAR 0 6
30363: PPUSH
30364: CALL_OW 264
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: LD_INT 23
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: IN
30379: IFFALSE 30400
// points := [ 7 , 25 , 8 ] ;
30381: LD_ADDR_VAR 0 9
30385: PUSH
30386: LD_INT 7
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 8
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30400: LD_VAR 0 6
30404: PPUSH
30405: CALL_OW 264
30409: PUSH
30410: LD_INT 5
30412: PUSH
30413: LD_INT 27
30415: PUSH
30416: LD_INT 44
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: IN
30424: IFFALSE 30445
// points := [ 14 , 50 , 16 ] ;
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: LD_INT 14
30433: PUSH
30434: LD_INT 50
30436: PUSH
30437: LD_INT 16
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 264
30454: PUSH
30455: LD_INT 6
30457: PUSH
30458: LD_INT 46
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: IN
30465: IFFALSE 30486
// points := [ 32 , 120 , 70 ] ;
30467: LD_ADDR_VAR 0 9
30471: PUSH
30472: LD_INT 32
30474: PUSH
30475: LD_INT 120
30477: PUSH
30478: LD_INT 70
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30486: LD_VAR 0 6
30490: PPUSH
30491: CALL_OW 264
30495: PUSH
30496: LD_INT 7
30498: PUSH
30499: LD_INT 28
30501: PUSH
30502: LD_INT 45
30504: PUSH
30505: LD_EXP 97
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: IN
30516: IFFALSE 30537
// points := [ 35 , 20 , 45 ] ;
30518: LD_ADDR_VAR 0 9
30522: PUSH
30523: LD_INT 35
30525: PUSH
30526: LD_INT 20
30528: PUSH
30529: LD_INT 45
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30537: LD_VAR 0 6
30541: PPUSH
30542: CALL_OW 264
30546: PUSH
30547: LD_INT 47
30549: PUSH
30550: EMPTY
30551: LIST
30552: IN
30553: IFFALSE 30574
// points := [ 67 , 45 , 75 ] ;
30555: LD_ADDR_VAR 0 9
30559: PUSH
30560: LD_INT 67
30562: PUSH
30563: LD_INT 45
30565: PUSH
30566: LD_INT 75
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30574: LD_VAR 0 6
30578: PPUSH
30579: CALL_OW 264
30583: PUSH
30584: LD_INT 26
30586: PUSH
30587: EMPTY
30588: LIST
30589: IN
30590: IFFALSE 30611
// points := [ 120 , 30 , 80 ] ;
30592: LD_ADDR_VAR 0 9
30596: PUSH
30597: LD_INT 120
30599: PUSH
30600: LD_INT 30
30602: PUSH
30603: LD_INT 80
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30611: LD_VAR 0 6
30615: PPUSH
30616: CALL_OW 264
30620: PUSH
30621: LD_INT 22
30623: PUSH
30624: EMPTY
30625: LIST
30626: IN
30627: IFFALSE 30648
// points := [ 40 , 1 , 1 ] ;
30629: LD_ADDR_VAR 0 9
30633: PUSH
30634: LD_INT 40
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30648: LD_VAR 0 6
30652: PPUSH
30653: CALL_OW 264
30657: PUSH
30658: LD_INT 29
30660: PUSH
30661: EMPTY
30662: LIST
30663: IN
30664: IFFALSE 30685
// points := [ 70 , 200 , 400 ] ;
30666: LD_ADDR_VAR 0 9
30670: PUSH
30671: LD_INT 70
30673: PUSH
30674: LD_INT 200
30676: PUSH
30677: LD_INT 400
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30685: LD_VAR 0 6
30689: PPUSH
30690: CALL_OW 264
30694: PUSH
30695: LD_INT 14
30697: PUSH
30698: LD_INT 53
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: IN
30705: IFFALSE 30726
// points := [ 40 , 10 , 20 ] ;
30707: LD_ADDR_VAR 0 9
30711: PUSH
30712: LD_INT 40
30714: PUSH
30715: LD_INT 10
30717: PUSH
30718: LD_INT 20
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30726: LD_VAR 0 6
30730: PPUSH
30731: CALL_OW 264
30735: PUSH
30736: LD_INT 9
30738: PUSH
30739: EMPTY
30740: LIST
30741: IN
30742: IFFALSE 30763
// points := [ 5 , 70 , 20 ] ;
30744: LD_ADDR_VAR 0 9
30748: PUSH
30749: LD_INT 5
30751: PUSH
30752: LD_INT 70
30754: PUSH
30755: LD_INT 20
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30763: LD_VAR 0 6
30767: PPUSH
30768: CALL_OW 264
30772: PUSH
30773: LD_INT 10
30775: PUSH
30776: EMPTY
30777: LIST
30778: IN
30779: IFFALSE 30800
// points := [ 35 , 110 , 70 ] ;
30781: LD_ADDR_VAR 0 9
30785: PUSH
30786: LD_INT 35
30788: PUSH
30789: LD_INT 110
30791: PUSH
30792: LD_INT 70
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30800: LD_VAR 0 6
30804: PPUSH
30805: CALL_OW 265
30809: PUSH
30810: LD_INT 25
30812: EQUAL
30813: IFFALSE 30834
// points := [ 80 , 65 , 100 ] ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_INT 80
30822: PUSH
30823: LD_INT 65
30825: PUSH
30826: LD_INT 100
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 263
30843: PUSH
30844: LD_INT 1
30846: EQUAL
30847: IFFALSE 30882
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30849: LD_ADDR_VAR 0 10
30853: PUSH
30854: LD_VAR 0 10
30858: PUSH
30859: LD_VAR 0 6
30863: PPUSH
30864: CALL_OW 311
30868: PPUSH
30869: LD_INT 3
30871: PPUSH
30872: CALL_OW 259
30876: PUSH
30877: LD_INT 4
30879: MUL
30880: MUL
30881: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30882: LD_VAR 0 6
30886: PPUSH
30887: CALL_OW 263
30891: PUSH
30892: LD_INT 2
30894: EQUAL
30895: IFFALSE 30946
// begin j := IsControledBy ( i ) ;
30897: LD_ADDR_VAR 0 7
30901: PUSH
30902: LD_VAR 0 6
30906: PPUSH
30907: CALL_OW 312
30911: ST_TO_ADDR
// if j then
30912: LD_VAR 0 7
30916: IFFALSE 30946
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30918: LD_ADDR_VAR 0 10
30922: PUSH
30923: LD_VAR 0 10
30927: PUSH
30928: LD_VAR 0 7
30932: PPUSH
30933: LD_INT 3
30935: PPUSH
30936: CALL_OW 259
30940: PUSH
30941: LD_INT 3
30943: MUL
30944: MUL
30945: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30946: LD_VAR 0 6
30950: PPUSH
30951: CALL_OW 264
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: LD_INT 6
30961: PUSH
30962: LD_INT 46
30964: PUSH
30965: LD_INT 44
30967: PUSH
30968: LD_INT 47
30970: PUSH
30971: LD_INT 45
30973: PUSH
30974: LD_INT 28
30976: PUSH
30977: LD_INT 7
30979: PUSH
30980: LD_INT 27
30982: PUSH
30983: LD_INT 29
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: IN
30998: PUSH
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_INT 52
31006: PPUSH
31007: CALL_OW 321
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: AND
31016: IFFALSE 31033
// bpoints := bpoints * 1.2 ;
31018: LD_ADDR_VAR 0 10
31022: PUSH
31023: LD_VAR 0 10
31027: PUSH
31028: LD_REAL  1.20000000000000E+0000
31031: MUL
31032: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31033: LD_VAR 0 6
31037: PPUSH
31038: CALL_OW 264
31042: PUSH
31043: LD_INT 6
31045: PUSH
31046: LD_INT 46
31048: PUSH
31049: LD_INT 47
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: IN
31057: IFFALSE 31074
// bpoints := bpoints * 1.2 ;
31059: LD_ADDR_VAR 0 10
31063: PUSH
31064: LD_VAR 0 10
31068: PUSH
31069: LD_REAL  1.20000000000000E+0000
31072: MUL
31073: ST_TO_ADDR
// end ; unit_building :
31074: GO 31088
31076: LD_INT 3
31078: DOUBLE
31079: EQUAL
31080: IFTRUE 31084
31082: GO 31087
31084: POP
// ; end ;
31085: GO 31088
31087: POP
// for j = 1 to 3 do
31088: LD_ADDR_VAR 0 7
31092: PUSH
31093: DOUBLE
31094: LD_INT 1
31096: DEC
31097: ST_TO_ADDR
31098: LD_INT 3
31100: PUSH
31101: FOR_TO
31102: IFFALSE 31155
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31104: LD_ADDR_VAR 0 5
31108: PUSH
31109: LD_VAR 0 5
31113: PPUSH
31114: LD_VAR 0 7
31118: PPUSH
31119: LD_VAR 0 5
31123: PUSH
31124: LD_VAR 0 7
31128: ARRAY
31129: PUSH
31130: LD_VAR 0 9
31134: PUSH
31135: LD_VAR 0 7
31139: ARRAY
31140: PUSH
31141: LD_VAR 0 10
31145: MUL
31146: PLUS
31147: PPUSH
31148: CALL_OW 1
31152: ST_TO_ADDR
31153: GO 31101
31155: POP
31156: POP
// end ;
31157: GO 29634
31159: POP
31160: POP
// result := Replace ( result , 4 , tmp ) ;
31161: LD_ADDR_VAR 0 5
31165: PUSH
31166: LD_VAR 0 5
31170: PPUSH
31171: LD_INT 4
31173: PPUSH
31174: LD_VAR 0 8
31178: PPUSH
31179: CALL_OW 1
31183: ST_TO_ADDR
// end ;
31184: LD_VAR 0 5
31188: RET
// export function DangerAtRange ( unit , range ) ; begin
31189: LD_INT 0
31191: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31192: LD_ADDR_VAR 0 3
31196: PUSH
31197: LD_VAR 0 1
31201: PPUSH
31202: CALL_OW 255
31206: PPUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: CALL_OW 250
31216: PPUSH
31217: LD_VAR 0 1
31221: PPUSH
31222: CALL_OW 251
31226: PPUSH
31227: LD_VAR 0 2
31231: PPUSH
31232: CALL 29486 0 4
31236: ST_TO_ADDR
// end ;
31237: LD_VAR 0 3
31241: RET
// export function DangerInArea ( side , area ) ; begin
31242: LD_INT 0
31244: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31245: LD_ADDR_VAR 0 3
31249: PUSH
31250: LD_VAR 0 2
31254: PPUSH
31255: LD_INT 81
31257: PUSH
31258: LD_VAR 0 1
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PPUSH
31267: CALL_OW 70
31271: ST_TO_ADDR
// end ;
31272: LD_VAR 0 3
31276: RET
// export function IsExtension ( b ) ; begin
31277: LD_INT 0
31279: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_VAR 0 1
31289: PUSH
31290: LD_INT 23
31292: PUSH
31293: LD_INT 20
31295: PUSH
31296: LD_INT 22
31298: PUSH
31299: LD_INT 17
31301: PUSH
31302: LD_INT 24
31304: PUSH
31305: LD_INT 21
31307: PUSH
31308: LD_INT 19
31310: PUSH
31311: LD_INT 16
31313: PUSH
31314: LD_INT 25
31316: PUSH
31317: LD_INT 18
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: IN
31332: ST_TO_ADDR
// end ;
31333: LD_VAR 0 2
31337: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
// result := [ ] ;
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: EMPTY
31349: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: LD_VAR 0 2
31359: PPUSH
31360: LD_INT 21
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PPUSH
31370: CALL_OW 70
31374: ST_TO_ADDR
// if not tmp then
31375: LD_VAR 0 5
31379: NOT
31380: IFFALSE 31384
// exit ;
31382: GO 31448
// if checkLink then
31384: LD_VAR 0 3
31388: IFFALSE 31438
// begin for i in tmp do
31390: LD_ADDR_VAR 0 6
31394: PUSH
31395: LD_VAR 0 5
31399: PUSH
31400: FOR_IN
31401: IFFALSE 31436
// if GetBase ( i ) <> base then
31403: LD_VAR 0 6
31407: PPUSH
31408: CALL_OW 274
31412: PUSH
31413: LD_VAR 0 1
31417: NONEQUAL
31418: IFFALSE 31434
// ComLinkToBase ( base , i ) ;
31420: LD_VAR 0 1
31424: PPUSH
31425: LD_VAR 0 6
31429: PPUSH
31430: CALL_OW 169
31434: GO 31400
31436: POP
31437: POP
// end ; result := tmp ;
31438: LD_ADDR_VAR 0 4
31442: PUSH
31443: LD_VAR 0 5
31447: ST_TO_ADDR
// end ;
31448: LD_VAR 0 4
31452: RET
// export function ComComplete ( units , b ) ; var i ; begin
31453: LD_INT 0
31455: PPUSH
31456: PPUSH
// if not units then
31457: LD_VAR 0 1
31461: NOT
31462: IFFALSE 31466
// exit ;
31464: GO 31556
// for i in units do
31466: LD_ADDR_VAR 0 4
31470: PUSH
31471: LD_VAR 0 1
31475: PUSH
31476: FOR_IN
31477: IFFALSE 31554
// if BuildingStatus ( b ) = bs_build then
31479: LD_VAR 0 2
31483: PPUSH
31484: CALL_OW 461
31488: PUSH
31489: LD_INT 1
31491: EQUAL
31492: IFFALSE 31552
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31494: LD_VAR 0 4
31498: PPUSH
31499: LD_STRING h
31501: PUSH
31502: LD_VAR 0 2
31506: PPUSH
31507: CALL_OW 250
31511: PUSH
31512: LD_VAR 0 2
31516: PPUSH
31517: CALL_OW 251
31521: PUSH
31522: LD_VAR 0 2
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: PUSH
31545: EMPTY
31546: LIST
31547: PPUSH
31548: CALL_OW 446
31552: GO 31476
31554: POP
31555: POP
// end ;
31556: LD_VAR 0 3
31560: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31561: LD_INT 0
31563: PPUSH
31564: PPUSH
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31569: LD_VAR 0 1
31573: NOT
31574: PUSH
31575: LD_VAR 0 1
31579: PPUSH
31580: CALL_OW 263
31584: PUSH
31585: LD_INT 2
31587: NONEQUAL
31588: OR
31589: IFFALSE 31593
// exit ;
31591: GO 31909
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31593: LD_ADDR_VAR 0 6
31597: PUSH
31598: LD_INT 22
31600: PUSH
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 255
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: LD_INT 36
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 34
31630: PUSH
31631: LD_INT 31
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PPUSH
31647: CALL_OW 69
31651: ST_TO_ADDR
// if not tmp then
31652: LD_VAR 0 6
31656: NOT
31657: IFFALSE 31661
// exit ;
31659: GO 31909
// result := [ ] ;
31661: LD_ADDR_VAR 0 2
31665: PUSH
31666: EMPTY
31667: ST_TO_ADDR
// for i in tmp do
31668: LD_ADDR_VAR 0 3
31672: PUSH
31673: LD_VAR 0 6
31677: PUSH
31678: FOR_IN
31679: IFFALSE 31750
// begin t := UnitsInside ( i ) ;
31681: LD_ADDR_VAR 0 4
31685: PUSH
31686: LD_VAR 0 3
31690: PPUSH
31691: CALL_OW 313
31695: ST_TO_ADDR
// if t then
31696: LD_VAR 0 4
31700: IFFALSE 31748
// for j in t do
31702: LD_ADDR_VAR 0 7
31706: PUSH
31707: LD_VAR 0 4
31711: PUSH
31712: FOR_IN
31713: IFFALSE 31746
// result := Replace ( result , result + 1 , j ) ;
31715: LD_ADDR_VAR 0 2
31719: PUSH
31720: LD_VAR 0 2
31724: PPUSH
31725: LD_VAR 0 2
31729: PUSH
31730: LD_INT 1
31732: PLUS
31733: PPUSH
31734: LD_VAR 0 7
31738: PPUSH
31739: CALL_OW 1
31743: ST_TO_ADDR
31744: GO 31712
31746: POP
31747: POP
// end ;
31748: GO 31678
31750: POP
31751: POP
// if not result then
31752: LD_VAR 0 2
31756: NOT
31757: IFFALSE 31761
// exit ;
31759: GO 31909
// mech := result [ 1 ] ;
31761: LD_ADDR_VAR 0 5
31765: PUSH
31766: LD_VAR 0 2
31770: PUSH
31771: LD_INT 1
31773: ARRAY
31774: ST_TO_ADDR
// if result > 1 then
31775: LD_VAR 0 2
31779: PUSH
31780: LD_INT 1
31782: GREATER
31783: IFFALSE 31895
// begin for i = 2 to result do
31785: LD_ADDR_VAR 0 3
31789: PUSH
31790: DOUBLE
31791: LD_INT 2
31793: DEC
31794: ST_TO_ADDR
31795: LD_VAR 0 2
31799: PUSH
31800: FOR_TO
31801: IFFALSE 31893
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31803: LD_ADDR_VAR 0 4
31807: PUSH
31808: LD_VAR 0 2
31812: PUSH
31813: LD_VAR 0 3
31817: ARRAY
31818: PPUSH
31819: LD_INT 3
31821: PPUSH
31822: CALL_OW 259
31826: PUSH
31827: LD_VAR 0 2
31831: PUSH
31832: LD_VAR 0 3
31836: ARRAY
31837: PPUSH
31838: CALL_OW 432
31842: MINUS
31843: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31844: LD_VAR 0 4
31848: PUSH
31849: LD_VAR 0 5
31853: PPUSH
31854: LD_INT 3
31856: PPUSH
31857: CALL_OW 259
31861: PUSH
31862: LD_VAR 0 5
31866: PPUSH
31867: CALL_OW 432
31871: MINUS
31872: GREATEREQUAL
31873: IFFALSE 31891
// mech := result [ i ] ;
31875: LD_ADDR_VAR 0 5
31879: PUSH
31880: LD_VAR 0 2
31884: PUSH
31885: LD_VAR 0 3
31889: ARRAY
31890: ST_TO_ADDR
// end ;
31891: GO 31800
31893: POP
31894: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31895: LD_VAR 0 1
31899: PPUSH
31900: LD_VAR 0 5
31904: PPUSH
31905: CALL_OW 135
// end ;
31909: LD_VAR 0 2
31913: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31914: LD_INT 0
31916: PPUSH
31917: PPUSH
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
// result := [ ] ;
31929: LD_ADDR_VAR 0 7
31933: PUSH
31934: EMPTY
31935: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 266
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: IN
31956: NOT
31957: IFFALSE 31961
// exit ;
31959: GO 33595
// if name then
31961: LD_VAR 0 3
31965: IFFALSE 31981
// SetBName ( base_dep , name ) ;
31967: LD_VAR 0 1
31971: PPUSH
31972: LD_VAR 0 3
31976: PPUSH
31977: CALL_OW 500
// base := GetBase ( base_dep ) ;
31981: LD_ADDR_VAR 0 15
31985: PUSH
31986: LD_VAR 0 1
31990: PPUSH
31991: CALL_OW 274
31995: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31996: LD_ADDR_VAR 0 16
32000: PUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: CALL_OW 255
32010: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32011: LD_ADDR_VAR 0 17
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL_OW 248
32025: ST_TO_ADDR
// if sources then
32026: LD_VAR 0 5
32030: IFFALSE 32077
// for i = 1 to 3 do
32032: LD_ADDR_VAR 0 8
32036: PUSH
32037: DOUBLE
32038: LD_INT 1
32040: DEC
32041: ST_TO_ADDR
32042: LD_INT 3
32044: PUSH
32045: FOR_TO
32046: IFFALSE 32075
// AddResourceType ( base , i , sources [ i ] ) ;
32048: LD_VAR 0 15
32052: PPUSH
32053: LD_VAR 0 8
32057: PPUSH
32058: LD_VAR 0 5
32062: PUSH
32063: LD_VAR 0 8
32067: ARRAY
32068: PPUSH
32069: CALL_OW 276
32073: GO 32045
32075: POP
32076: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32077: LD_ADDR_VAR 0 18
32081: PUSH
32082: LD_VAR 0 15
32086: PPUSH
32087: LD_VAR 0 2
32091: PPUSH
32092: LD_INT 1
32094: PPUSH
32095: CALL 31338 0 3
32099: ST_TO_ADDR
// InitHc ;
32100: CALL_OW 19
// InitUc ;
32104: CALL_OW 18
// uc_side := side ;
32108: LD_ADDR_OWVAR 20
32112: PUSH
32113: LD_VAR 0 16
32117: ST_TO_ADDR
// uc_nation := nation ;
32118: LD_ADDR_OWVAR 21
32122: PUSH
32123: LD_VAR 0 17
32127: ST_TO_ADDR
// if buildings then
32128: LD_VAR 0 18
32132: IFFALSE 33454
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32134: LD_ADDR_VAR 0 19
32138: PUSH
32139: LD_VAR 0 18
32143: PPUSH
32144: LD_INT 2
32146: PUSH
32147: LD_INT 30
32149: PUSH
32150: LD_INT 29
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 30
32159: PUSH
32160: LD_INT 30
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: PPUSH
32172: CALL_OW 72
32176: ST_TO_ADDR
// if tmp then
32177: LD_VAR 0 19
32181: IFFALSE 32229
// for i in tmp do
32183: LD_ADDR_VAR 0 8
32187: PUSH
32188: LD_VAR 0 19
32192: PUSH
32193: FOR_IN
32194: IFFALSE 32227
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32196: LD_VAR 0 8
32200: PPUSH
32201: CALL_OW 250
32205: PPUSH
32206: LD_VAR 0 8
32210: PPUSH
32211: CALL_OW 251
32215: PPUSH
32216: LD_VAR 0 16
32220: PPUSH
32221: CALL_OW 441
32225: GO 32193
32227: POP
32228: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32229: LD_VAR 0 18
32233: PPUSH
32234: LD_INT 2
32236: PUSH
32237: LD_INT 30
32239: PUSH
32240: LD_INT 32
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 30
32249: PUSH
32250: LD_INT 33
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: PPUSH
32262: CALL_OW 72
32266: IFFALSE 32354
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32268: LD_ADDR_VAR 0 8
32272: PUSH
32273: LD_VAR 0 18
32277: PPUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 30
32283: PUSH
32284: LD_INT 32
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 30
32293: PUSH
32294: LD_INT 33
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: LIST
32305: PPUSH
32306: CALL_OW 72
32310: PUSH
32311: FOR_IN
32312: IFFALSE 32352
// begin if not GetBWeapon ( i ) then
32314: LD_VAR 0 8
32318: PPUSH
32319: CALL_OW 269
32323: NOT
32324: IFFALSE 32350
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32326: LD_VAR 0 8
32330: PPUSH
32331: LD_VAR 0 8
32335: PPUSH
32336: LD_VAR 0 2
32340: PPUSH
32341: CALL 33600 0 2
32345: PPUSH
32346: CALL_OW 431
// end ;
32350: GO 32311
32352: POP
32353: POP
// end ; for i = 1 to personel do
32354: LD_ADDR_VAR 0 8
32358: PUSH
32359: DOUBLE
32360: LD_INT 1
32362: DEC
32363: ST_TO_ADDR
32364: LD_VAR 0 6
32368: PUSH
32369: FOR_TO
32370: IFFALSE 33434
// begin if i > 4 then
32372: LD_VAR 0 8
32376: PUSH
32377: LD_INT 4
32379: GREATER
32380: IFFALSE 32384
// break ;
32382: GO 33434
// case i of 1 :
32384: LD_VAR 0 8
32388: PUSH
32389: LD_INT 1
32391: DOUBLE
32392: EQUAL
32393: IFTRUE 32397
32395: GO 32477
32397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32398: LD_ADDR_VAR 0 12
32402: PUSH
32403: LD_VAR 0 18
32407: PPUSH
32408: LD_INT 22
32410: PUSH
32411: LD_VAR 0 16
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 58
32422: PUSH
32423: EMPTY
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: LD_INT 32
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 30
32441: PUSH
32442: LD_INT 4
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 30
32451: PUSH
32452: LD_INT 5
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: PPUSH
32470: CALL_OW 72
32474: ST_TO_ADDR
32475: GO 32699
32477: LD_INT 2
32479: DOUBLE
32480: EQUAL
32481: IFTRUE 32485
32483: GO 32547
32485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32486: LD_ADDR_VAR 0 12
32490: PUSH
32491: LD_VAR 0 18
32495: PPUSH
32496: LD_INT 22
32498: PUSH
32499: LD_VAR 0 16
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: LD_INT 30
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 72
32544: ST_TO_ADDR
32545: GO 32699
32547: LD_INT 3
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32617
32555: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32556: LD_ADDR_VAR 0 12
32560: PUSH
32561: LD_VAR 0 18
32565: PPUSH
32566: LD_INT 22
32568: PUSH
32569: LD_VAR 0 16
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 30
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 30
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PPUSH
32610: CALL_OW 72
32614: ST_TO_ADDR
32615: GO 32699
32617: LD_INT 4
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32698
32625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32626: LD_ADDR_VAR 0 12
32630: PUSH
32631: LD_VAR 0 18
32635: PPUSH
32636: LD_INT 22
32638: PUSH
32639: LD_VAR 0 16
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 30
32653: PUSH
32654: LD_INT 6
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 30
32663: PUSH
32664: LD_INT 7
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 30
32673: PUSH
32674: LD_INT 8
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PPUSH
32691: CALL_OW 72
32695: ST_TO_ADDR
32696: GO 32699
32698: POP
// if i = 1 then
32699: LD_VAR 0 8
32703: PUSH
32704: LD_INT 1
32706: EQUAL
32707: IFFALSE 32818
// begin tmp := [ ] ;
32709: LD_ADDR_VAR 0 19
32713: PUSH
32714: EMPTY
32715: ST_TO_ADDR
// for j in f do
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_VAR 0 12
32725: PUSH
32726: FOR_IN
32727: IFFALSE 32800
// if GetBType ( j ) = b_bunker then
32729: LD_VAR 0 9
32733: PPUSH
32734: CALL_OW 266
32738: PUSH
32739: LD_INT 32
32741: EQUAL
32742: IFFALSE 32769
// tmp := Insert ( tmp , 1 , j ) else
32744: LD_ADDR_VAR 0 19
32748: PUSH
32749: LD_VAR 0 19
32753: PPUSH
32754: LD_INT 1
32756: PPUSH
32757: LD_VAR 0 9
32761: PPUSH
32762: CALL_OW 2
32766: ST_TO_ADDR
32767: GO 32798
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32769: LD_ADDR_VAR 0 19
32773: PUSH
32774: LD_VAR 0 19
32778: PPUSH
32779: LD_VAR 0 19
32783: PUSH
32784: LD_INT 1
32786: PLUS
32787: PPUSH
32788: LD_VAR 0 9
32792: PPUSH
32793: CALL_OW 2
32797: ST_TO_ADDR
32798: GO 32726
32800: POP
32801: POP
// if tmp then
32802: LD_VAR 0 19
32806: IFFALSE 32818
// f := tmp ;
32808: LD_ADDR_VAR 0 12
32812: PUSH
32813: LD_VAR 0 19
32817: ST_TO_ADDR
// end ; x := personel [ i ] ;
32818: LD_ADDR_VAR 0 13
32822: PUSH
32823: LD_VAR 0 6
32827: PUSH
32828: LD_VAR 0 8
32832: ARRAY
32833: ST_TO_ADDR
// if x = - 1 then
32834: LD_VAR 0 13
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: EQUAL
32843: IFFALSE 33052
// begin for j in f do
32845: LD_ADDR_VAR 0 9
32849: PUSH
32850: LD_VAR 0 12
32854: PUSH
32855: FOR_IN
32856: IFFALSE 33048
// repeat InitHc ;
32858: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32862: LD_VAR 0 9
32866: PPUSH
32867: CALL_OW 266
32871: PUSH
32872: LD_INT 5
32874: EQUAL
32875: IFFALSE 32945
// begin if UnitsInside ( j ) < 3 then
32877: LD_VAR 0 9
32881: PPUSH
32882: CALL_OW 313
32886: PUSH
32887: LD_INT 3
32889: LESS
32890: IFFALSE 32926
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32892: LD_INT 0
32894: PPUSH
32895: LD_INT 5
32897: PUSH
32898: LD_INT 8
32900: PUSH
32901: LD_INT 9
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: LD_VAR 0 17
32913: ARRAY
32914: PPUSH
32915: LD_VAR 0 4
32919: PPUSH
32920: CALL_OW 380
32924: GO 32943
// PrepareHuman ( false , i , skill ) ;
32926: LD_INT 0
32928: PPUSH
32929: LD_VAR 0 8
32933: PPUSH
32934: LD_VAR 0 4
32938: PPUSH
32939: CALL_OW 380
// end else
32943: GO 32962
// PrepareHuman ( false , i , skill ) ;
32945: LD_INT 0
32947: PPUSH
32948: LD_VAR 0 8
32952: PPUSH
32953: LD_VAR 0 4
32957: PPUSH
32958: CALL_OW 380
// un := CreateHuman ;
32962: LD_ADDR_VAR 0 14
32966: PUSH
32967: CALL_OW 44
32971: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32972: LD_ADDR_VAR 0 7
32976: PUSH
32977: LD_VAR 0 7
32981: PPUSH
32982: LD_INT 1
32984: PPUSH
32985: LD_VAR 0 14
32989: PPUSH
32990: CALL_OW 2
32994: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32995: LD_VAR 0 14
32999: PPUSH
33000: LD_VAR 0 9
33004: PPUSH
33005: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33009: LD_VAR 0 9
33013: PPUSH
33014: CALL_OW 313
33018: PUSH
33019: LD_INT 6
33021: EQUAL
33022: PUSH
33023: LD_VAR 0 9
33027: PPUSH
33028: CALL_OW 266
33032: PUSH
33033: LD_INT 32
33035: PUSH
33036: LD_INT 31
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: IN
33043: OR
33044: IFFALSE 32858
33046: GO 32855
33048: POP
33049: POP
// end else
33050: GO 33432
// for j = 1 to x do
33052: LD_ADDR_VAR 0 9
33056: PUSH
33057: DOUBLE
33058: LD_INT 1
33060: DEC
33061: ST_TO_ADDR
33062: LD_VAR 0 13
33066: PUSH
33067: FOR_TO
33068: IFFALSE 33430
// begin InitHc ;
33070: CALL_OW 19
// if not f then
33074: LD_VAR 0 12
33078: NOT
33079: IFFALSE 33168
// begin PrepareHuman ( false , i , skill ) ;
33081: LD_INT 0
33083: PPUSH
33084: LD_VAR 0 8
33088: PPUSH
33089: LD_VAR 0 4
33093: PPUSH
33094: CALL_OW 380
// un := CreateHuman ;
33098: LD_ADDR_VAR 0 14
33102: PUSH
33103: CALL_OW 44
33107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33108: LD_ADDR_VAR 0 7
33112: PUSH
33113: LD_VAR 0 7
33117: PPUSH
33118: LD_INT 1
33120: PPUSH
33121: LD_VAR 0 14
33125: PPUSH
33126: CALL_OW 2
33130: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33131: LD_VAR 0 14
33135: PPUSH
33136: LD_VAR 0 1
33140: PPUSH
33141: CALL_OW 250
33145: PPUSH
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL_OW 251
33155: PPUSH
33156: LD_INT 10
33158: PPUSH
33159: LD_INT 0
33161: PPUSH
33162: CALL_OW 50
// continue ;
33166: GO 33067
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33168: LD_VAR 0 12
33172: PUSH
33173: LD_INT 1
33175: ARRAY
33176: PPUSH
33177: CALL_OW 313
33181: PUSH
33182: LD_VAR 0 12
33186: PUSH
33187: LD_INT 1
33189: ARRAY
33190: PPUSH
33191: CALL_OW 266
33195: PUSH
33196: LD_INT 32
33198: PUSH
33199: LD_INT 31
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: IN
33206: AND
33207: PUSH
33208: LD_VAR 0 12
33212: PUSH
33213: LD_INT 1
33215: ARRAY
33216: PPUSH
33217: CALL_OW 313
33221: PUSH
33222: LD_INT 6
33224: EQUAL
33225: OR
33226: IFFALSE 33246
// f := Delete ( f , 1 ) ;
33228: LD_ADDR_VAR 0 12
33232: PUSH
33233: LD_VAR 0 12
33237: PPUSH
33238: LD_INT 1
33240: PPUSH
33241: CALL_OW 3
33245: ST_TO_ADDR
// if not f then
33246: LD_VAR 0 12
33250: NOT
33251: IFFALSE 33269
// begin x := x + 2 ;
33253: LD_ADDR_VAR 0 13
33257: PUSH
33258: LD_VAR 0 13
33262: PUSH
33263: LD_INT 2
33265: PLUS
33266: ST_TO_ADDR
// continue ;
33267: GO 33067
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33269: LD_VAR 0 12
33273: PUSH
33274: LD_INT 1
33276: ARRAY
33277: PPUSH
33278: CALL_OW 266
33282: PUSH
33283: LD_INT 5
33285: EQUAL
33286: IFFALSE 33360
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33288: LD_VAR 0 12
33292: PUSH
33293: LD_INT 1
33295: ARRAY
33296: PPUSH
33297: CALL_OW 313
33301: PUSH
33302: LD_INT 3
33304: LESS
33305: IFFALSE 33341
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33307: LD_INT 0
33309: PPUSH
33310: LD_INT 5
33312: PUSH
33313: LD_INT 8
33315: PUSH
33316: LD_INT 9
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: PUSH
33324: LD_VAR 0 17
33328: ARRAY
33329: PPUSH
33330: LD_VAR 0 4
33334: PPUSH
33335: CALL_OW 380
33339: GO 33358
// PrepareHuman ( false , i , skill ) ;
33341: LD_INT 0
33343: PPUSH
33344: LD_VAR 0 8
33348: PPUSH
33349: LD_VAR 0 4
33353: PPUSH
33354: CALL_OW 380
// end else
33358: GO 33377
// PrepareHuman ( false , i , skill ) ;
33360: LD_INT 0
33362: PPUSH
33363: LD_VAR 0 8
33367: PPUSH
33368: LD_VAR 0 4
33372: PPUSH
33373: CALL_OW 380
// un := CreateHuman ;
33377: LD_ADDR_VAR 0 14
33381: PUSH
33382: CALL_OW 44
33386: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33387: LD_ADDR_VAR 0 7
33391: PUSH
33392: LD_VAR 0 7
33396: PPUSH
33397: LD_INT 1
33399: PPUSH
33400: LD_VAR 0 14
33404: PPUSH
33405: CALL_OW 2
33409: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33410: LD_VAR 0 14
33414: PPUSH
33415: LD_VAR 0 12
33419: PUSH
33420: LD_INT 1
33422: ARRAY
33423: PPUSH
33424: CALL_OW 52
// end ;
33428: GO 33067
33430: POP
33431: POP
// end ;
33432: GO 32369
33434: POP
33435: POP
// result := result ^ buildings ;
33436: LD_ADDR_VAR 0 7
33440: PUSH
33441: LD_VAR 0 7
33445: PUSH
33446: LD_VAR 0 18
33450: ADD
33451: ST_TO_ADDR
// end else
33452: GO 33595
// begin for i = 1 to personel do
33454: LD_ADDR_VAR 0 8
33458: PUSH
33459: DOUBLE
33460: LD_INT 1
33462: DEC
33463: ST_TO_ADDR
33464: LD_VAR 0 6
33468: PUSH
33469: FOR_TO
33470: IFFALSE 33593
// begin if i > 4 then
33472: LD_VAR 0 8
33476: PUSH
33477: LD_INT 4
33479: GREATER
33480: IFFALSE 33484
// break ;
33482: GO 33593
// x := personel [ i ] ;
33484: LD_ADDR_VAR 0 13
33488: PUSH
33489: LD_VAR 0 6
33493: PUSH
33494: LD_VAR 0 8
33498: ARRAY
33499: ST_TO_ADDR
// if x = - 1 then
33500: LD_VAR 0 13
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: EQUAL
33509: IFFALSE 33513
// continue ;
33511: GO 33469
// PrepareHuman ( false , i , skill ) ;
33513: LD_INT 0
33515: PPUSH
33516: LD_VAR 0 8
33520: PPUSH
33521: LD_VAR 0 4
33525: PPUSH
33526: CALL_OW 380
// un := CreateHuman ;
33530: LD_ADDR_VAR 0 14
33534: PUSH
33535: CALL_OW 44
33539: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33540: LD_VAR 0 14
33544: PPUSH
33545: LD_VAR 0 1
33549: PPUSH
33550: CALL_OW 250
33554: PPUSH
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 251
33564: PPUSH
33565: LD_INT 10
33567: PPUSH
33568: LD_INT 0
33570: PPUSH
33571: CALL_OW 50
// result := result ^ un ;
33575: LD_ADDR_VAR 0 7
33579: PUSH
33580: LD_VAR 0 7
33584: PUSH
33585: LD_VAR 0 14
33589: ADD
33590: ST_TO_ADDR
// end ;
33591: GO 33469
33593: POP
33594: POP
// end ; end ;
33595: LD_VAR 0 7
33599: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33600: LD_INT 0
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
// result := false ;
33618: LD_ADDR_VAR 0 3
33622: PUSH
33623: LD_INT 0
33625: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33626: LD_VAR 0 1
33630: NOT
33631: PUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: CALL_OW 266
33641: PUSH
33642: LD_INT 32
33644: PUSH
33645: LD_INT 33
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: IN
33652: NOT
33653: OR
33654: IFFALSE 33658
// exit ;
33656: GO 34767
// nat := GetNation ( tower ) ;
33658: LD_ADDR_VAR 0 12
33662: PUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 248
33672: ST_TO_ADDR
// side := GetSide ( tower ) ;
33673: LD_ADDR_VAR 0 16
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 255
33687: ST_TO_ADDR
// x := GetX ( tower ) ;
33688: LD_ADDR_VAR 0 10
33692: PUSH
33693: LD_VAR 0 1
33697: PPUSH
33698: CALL_OW 250
33702: ST_TO_ADDR
// y := GetY ( tower ) ;
33703: LD_ADDR_VAR 0 11
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 251
33717: ST_TO_ADDR
// if not x or not y then
33718: LD_VAR 0 10
33722: NOT
33723: PUSH
33724: LD_VAR 0 11
33728: NOT
33729: OR
33730: IFFALSE 33734
// exit ;
33732: GO 34767
// weapon := 0 ;
33734: LD_ADDR_VAR 0 18
33738: PUSH
33739: LD_INT 0
33741: ST_TO_ADDR
// fac_list := [ ] ;
33742: LD_ADDR_VAR 0 17
33746: PUSH
33747: EMPTY
33748: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33749: LD_ADDR_VAR 0 6
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 274
33763: PPUSH
33764: LD_VAR 0 2
33768: PPUSH
33769: LD_INT 0
33771: PPUSH
33772: CALL 31338 0 3
33776: PPUSH
33777: LD_INT 30
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 72
33791: ST_TO_ADDR
// if not factories then
33792: LD_VAR 0 6
33796: NOT
33797: IFFALSE 33801
// exit ;
33799: GO 34767
// for i in factories do
33801: LD_ADDR_VAR 0 8
33805: PUSH
33806: LD_VAR 0 6
33810: PUSH
33811: FOR_IN
33812: IFFALSE 33837
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33814: LD_ADDR_VAR 0 17
33818: PUSH
33819: LD_VAR 0 17
33823: PUSH
33824: LD_VAR 0 8
33828: PPUSH
33829: CALL_OW 478
33833: UNION
33834: ST_TO_ADDR
33835: GO 33811
33837: POP
33838: POP
// if not fac_list then
33839: LD_VAR 0 17
33843: NOT
33844: IFFALSE 33848
// exit ;
33846: GO 34767
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33848: LD_ADDR_VAR 0 5
33852: PUSH
33853: LD_INT 4
33855: PUSH
33856: LD_INT 5
33858: PUSH
33859: LD_INT 9
33861: PUSH
33862: LD_INT 10
33864: PUSH
33865: LD_INT 6
33867: PUSH
33868: LD_INT 7
33870: PUSH
33871: LD_INT 11
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 27
33885: PUSH
33886: LD_INT 28
33888: PUSH
33889: LD_INT 26
33891: PUSH
33892: LD_INT 30
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 43
33903: PUSH
33904: LD_INT 44
33906: PUSH
33907: LD_INT 46
33909: PUSH
33910: LD_INT 45
33912: PUSH
33913: LD_INT 47
33915: PUSH
33916: LD_INT 49
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: PUSH
33932: LD_VAR 0 12
33936: ARRAY
33937: ST_TO_ADDR
// list := list isect fac_list ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 5
33947: PUSH
33948: LD_VAR 0 17
33952: ISECT
33953: ST_TO_ADDR
// if not list then
33954: LD_VAR 0 5
33958: NOT
33959: IFFALSE 33963
// exit ;
33961: GO 34767
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33963: LD_VAR 0 12
33967: PUSH
33968: LD_INT 3
33970: EQUAL
33971: PUSH
33972: LD_INT 49
33974: PUSH
33975: LD_VAR 0 5
33979: IN
33980: AND
33981: PUSH
33982: LD_INT 31
33984: PPUSH
33985: LD_VAR 0 16
33989: PPUSH
33990: CALL_OW 321
33994: PUSH
33995: LD_INT 2
33997: EQUAL
33998: AND
33999: IFFALSE 34059
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34001: LD_INT 22
34003: PUSH
34004: LD_VAR 0 16
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 35
34015: PUSH
34016: LD_INT 49
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 91
34025: PUSH
34026: LD_VAR 0 1
34030: PUSH
34031: LD_INT 10
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: PPUSH
34044: CALL_OW 69
34048: NOT
34049: IFFALSE 34059
// weapon := ru_time_lapser ;
34051: LD_ADDR_VAR 0 18
34055: PUSH
34056: LD_INT 49
34058: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34059: LD_VAR 0 12
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: IN
34074: PUSH
34075: LD_INT 11
34077: PUSH
34078: LD_VAR 0 5
34082: IN
34083: PUSH
34084: LD_INT 30
34086: PUSH
34087: LD_VAR 0 5
34091: IN
34092: OR
34093: AND
34094: PUSH
34095: LD_INT 6
34097: PPUSH
34098: LD_VAR 0 16
34102: PPUSH
34103: CALL_OW 321
34107: PUSH
34108: LD_INT 2
34110: EQUAL
34111: AND
34112: IFFALSE 34277
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34114: LD_INT 22
34116: PUSH
34117: LD_VAR 0 16
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: LD_INT 35
34131: PUSH
34132: LD_INT 11
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 35
34141: PUSH
34142: LD_INT 30
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 91
34156: PUSH
34157: LD_VAR 0 1
34161: PUSH
34162: LD_INT 18
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: PPUSH
34175: CALL_OW 69
34179: NOT
34180: PUSH
34181: LD_INT 22
34183: PUSH
34184: LD_VAR 0 16
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 30
34198: PUSH
34199: LD_INT 32
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 30
34208: PUSH
34209: LD_INT 33
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 91
34223: PUSH
34224: LD_VAR 0 1
34228: PUSH
34229: LD_INT 12
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: PUSH
34242: EMPTY
34243: LIST
34244: PPUSH
34245: CALL_OW 69
34249: PUSH
34250: LD_INT 2
34252: GREATER
34253: AND
34254: IFFALSE 34277
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34256: LD_ADDR_VAR 0 18
34260: PUSH
34261: LD_INT 11
34263: PUSH
34264: LD_INT 30
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_VAR 0 12
34275: ARRAY
34276: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34277: LD_VAR 0 18
34281: NOT
34282: PUSH
34283: LD_INT 40
34285: PPUSH
34286: LD_VAR 0 16
34290: PPUSH
34291: CALL_OW 321
34295: PUSH
34296: LD_INT 2
34298: EQUAL
34299: AND
34300: PUSH
34301: LD_INT 7
34303: PUSH
34304: LD_VAR 0 5
34308: IN
34309: PUSH
34310: LD_INT 28
34312: PUSH
34313: LD_VAR 0 5
34317: IN
34318: OR
34319: PUSH
34320: LD_INT 45
34322: PUSH
34323: LD_VAR 0 5
34327: IN
34328: OR
34329: AND
34330: IFFALSE 34584
// begin hex := GetHexInfo ( x , y ) ;
34332: LD_ADDR_VAR 0 4
34336: PUSH
34337: LD_VAR 0 10
34341: PPUSH
34342: LD_VAR 0 11
34346: PPUSH
34347: CALL_OW 546
34351: ST_TO_ADDR
// if hex [ 1 ] then
34352: LD_VAR 0 4
34356: PUSH
34357: LD_INT 1
34359: ARRAY
34360: IFFALSE 34364
// exit ;
34362: GO 34767
// height := hex [ 2 ] ;
34364: LD_ADDR_VAR 0 15
34368: PUSH
34369: LD_VAR 0 4
34373: PUSH
34374: LD_INT 2
34376: ARRAY
34377: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34378: LD_ADDR_VAR 0 14
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 5
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: ST_TO_ADDR
// for i in tmp do
34401: LD_ADDR_VAR 0 8
34405: PUSH
34406: LD_VAR 0 14
34410: PUSH
34411: FOR_IN
34412: IFFALSE 34582
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34414: LD_ADDR_VAR 0 9
34418: PUSH
34419: LD_VAR 0 10
34423: PPUSH
34424: LD_VAR 0 8
34428: PPUSH
34429: LD_INT 5
34431: PPUSH
34432: CALL_OW 272
34436: PUSH
34437: LD_VAR 0 11
34441: PPUSH
34442: LD_VAR 0 8
34446: PPUSH
34447: LD_INT 5
34449: PPUSH
34450: CALL_OW 273
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34459: LD_VAR 0 9
34463: PUSH
34464: LD_INT 1
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 9
34472: PUSH
34473: LD_INT 2
34475: ARRAY
34476: PPUSH
34477: CALL_OW 488
34481: IFFALSE 34580
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34483: LD_ADDR_VAR 0 4
34487: PUSH
34488: LD_VAR 0 9
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: LD_VAR 0 9
34501: PUSH
34502: LD_INT 2
34504: ARRAY
34505: PPUSH
34506: CALL_OW 546
34510: ST_TO_ADDR
// if hex [ 1 ] then
34511: LD_VAR 0 4
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: IFFALSE 34523
// continue ;
34521: GO 34411
// h := hex [ 2 ] ;
34523: LD_ADDR_VAR 0 13
34527: PUSH
34528: LD_VAR 0 4
34532: PUSH
34533: LD_INT 2
34535: ARRAY
34536: ST_TO_ADDR
// if h + 7 < height then
34537: LD_VAR 0 13
34541: PUSH
34542: LD_INT 7
34544: PLUS
34545: PUSH
34546: LD_VAR 0 15
34550: LESS
34551: IFFALSE 34580
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34553: LD_ADDR_VAR 0 18
34557: PUSH
34558: LD_INT 7
34560: PUSH
34561: LD_INT 28
34563: PUSH
34564: LD_INT 45
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: PUSH
34572: LD_VAR 0 12
34576: ARRAY
34577: ST_TO_ADDR
// break ;
34578: GO 34582
// end ; end ; end ;
34580: GO 34411
34582: POP
34583: POP
// end ; if not weapon then
34584: LD_VAR 0 18
34588: NOT
34589: IFFALSE 34649
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34591: LD_ADDR_VAR 0 5
34595: PUSH
34596: LD_VAR 0 5
34600: PUSH
34601: LD_INT 11
34603: PUSH
34604: LD_INT 30
34606: PUSH
34607: LD_INT 49
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: DIFF
34615: ST_TO_ADDR
// if not list then
34616: LD_VAR 0 5
34620: NOT
34621: IFFALSE 34625
// exit ;
34623: GO 34767
// weapon := list [ rand ( 1 , list ) ] ;
34625: LD_ADDR_VAR 0 18
34629: PUSH
34630: LD_VAR 0 5
34634: PUSH
34635: LD_INT 1
34637: PPUSH
34638: LD_VAR 0 5
34642: PPUSH
34643: CALL_OW 12
34647: ARRAY
34648: ST_TO_ADDR
// end ; if weapon then
34649: LD_VAR 0 18
34653: IFFALSE 34767
// begin tmp := CostOfWeapon ( weapon ) ;
34655: LD_ADDR_VAR 0 14
34659: PUSH
34660: LD_VAR 0 18
34664: PPUSH
34665: CALL_OW 451
34669: ST_TO_ADDR
// j := GetBase ( tower ) ;
34670: LD_ADDR_VAR 0 9
34674: PUSH
34675: LD_VAR 0 1
34679: PPUSH
34680: CALL_OW 274
34684: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34685: LD_VAR 0 9
34689: PPUSH
34690: LD_INT 1
34692: PPUSH
34693: CALL_OW 275
34697: PUSH
34698: LD_VAR 0 14
34702: PUSH
34703: LD_INT 1
34705: ARRAY
34706: GREATEREQUAL
34707: PUSH
34708: LD_VAR 0 9
34712: PPUSH
34713: LD_INT 2
34715: PPUSH
34716: CALL_OW 275
34720: PUSH
34721: LD_VAR 0 14
34725: PUSH
34726: LD_INT 2
34728: ARRAY
34729: GREATEREQUAL
34730: AND
34731: PUSH
34732: LD_VAR 0 9
34736: PPUSH
34737: LD_INT 3
34739: PPUSH
34740: CALL_OW 275
34744: PUSH
34745: LD_VAR 0 14
34749: PUSH
34750: LD_INT 3
34752: ARRAY
34753: GREATEREQUAL
34754: AND
34755: IFFALSE 34767
// result := weapon ;
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_VAR 0 18
34766: ST_TO_ADDR
// end ; end ;
34767: LD_VAR 0 3
34771: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34772: LD_INT 0
34774: PPUSH
34775: PPUSH
// result := true ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_INT 1
34783: ST_TO_ADDR
// if array1 = array2 then
34784: LD_VAR 0 1
34788: PUSH
34789: LD_VAR 0 2
34793: EQUAL
34794: IFFALSE 34854
// begin for i = 1 to array1 do
34796: LD_ADDR_VAR 0 4
34800: PUSH
34801: DOUBLE
34802: LD_INT 1
34804: DEC
34805: ST_TO_ADDR
34806: LD_VAR 0 1
34810: PUSH
34811: FOR_TO
34812: IFFALSE 34850
// if array1 [ i ] <> array2 [ i ] then
34814: LD_VAR 0 1
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: PUSH
34825: LD_VAR 0 2
34829: PUSH
34830: LD_VAR 0 4
34834: ARRAY
34835: NONEQUAL
34836: IFFALSE 34848
// begin result := false ;
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 0
34845: ST_TO_ADDR
// break ;
34846: GO 34850
// end ;
34848: GO 34811
34850: POP
34851: POP
// end else
34852: GO 34862
// result := false ;
34854: LD_ADDR_VAR 0 3
34858: PUSH
34859: LD_INT 0
34861: ST_TO_ADDR
// end ;
34862: LD_VAR 0 3
34866: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
// if not array1 or not array2 then
34871: LD_VAR 0 1
34875: NOT
34876: PUSH
34877: LD_VAR 0 2
34881: NOT
34882: OR
34883: IFFALSE 34887
// exit ;
34885: GO 34951
// result := true ;
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 1
34894: ST_TO_ADDR
// for i = 1 to array1 do
34895: LD_ADDR_VAR 0 4
34899: PUSH
34900: DOUBLE
34901: LD_INT 1
34903: DEC
34904: ST_TO_ADDR
34905: LD_VAR 0 1
34909: PUSH
34910: FOR_TO
34911: IFFALSE 34949
// if array1 [ i ] <> array2 [ i ] then
34913: LD_VAR 0 1
34917: PUSH
34918: LD_VAR 0 4
34922: ARRAY
34923: PUSH
34924: LD_VAR 0 2
34928: PUSH
34929: LD_VAR 0 4
34933: ARRAY
34934: NONEQUAL
34935: IFFALSE 34947
// begin result := false ;
34937: LD_ADDR_VAR 0 3
34941: PUSH
34942: LD_INT 0
34944: ST_TO_ADDR
// break ;
34945: GO 34949
// end ;
34947: GO 34910
34949: POP
34950: POP
// end ;
34951: LD_VAR 0 3
34955: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34956: LD_INT 0
34958: PPUSH
34959: PPUSH
34960: PPUSH
// pom := GetBase ( fac ) ;
34961: LD_ADDR_VAR 0 5
34965: PUSH
34966: LD_VAR 0 1
34970: PPUSH
34971: CALL_OW 274
34975: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34976: LD_ADDR_VAR 0 4
34980: PUSH
34981: LD_VAR 0 2
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 2
34994: PUSH
34995: LD_INT 2
34997: ARRAY
34998: PPUSH
34999: LD_VAR 0 2
35003: PUSH
35004: LD_INT 3
35006: ARRAY
35007: PPUSH
35008: LD_VAR 0 2
35012: PUSH
35013: LD_INT 4
35015: ARRAY
35016: PPUSH
35017: CALL_OW 449
35021: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_VAR 0 5
35031: PPUSH
35032: LD_INT 1
35034: PPUSH
35035: CALL_OW 275
35039: PUSH
35040: LD_VAR 0 4
35044: PUSH
35045: LD_INT 1
35047: ARRAY
35048: GREATEREQUAL
35049: PUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: LD_INT 2
35057: PPUSH
35058: CALL_OW 275
35062: PUSH
35063: LD_VAR 0 4
35067: PUSH
35068: LD_INT 2
35070: ARRAY
35071: GREATEREQUAL
35072: AND
35073: PUSH
35074: LD_VAR 0 5
35078: PPUSH
35079: LD_INT 3
35081: PPUSH
35082: CALL_OW 275
35086: PUSH
35087: LD_VAR 0 4
35091: PUSH
35092: LD_INT 3
35094: ARRAY
35095: GREATEREQUAL
35096: AND
35097: ST_TO_ADDR
// end ;
35098: LD_VAR 0 3
35102: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35103: LD_INT 0
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
// pom := GetBase ( building ) ;
35109: LD_ADDR_VAR 0 3
35113: PUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 274
35123: ST_TO_ADDR
// if not pom then
35124: LD_VAR 0 3
35128: NOT
35129: IFFALSE 35133
// exit ;
35131: GO 35303
// btype := GetBType ( building ) ;
35133: LD_ADDR_VAR 0 5
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 266
35147: ST_TO_ADDR
// if btype = b_armoury then
35148: LD_VAR 0 5
35152: PUSH
35153: LD_INT 4
35155: EQUAL
35156: IFFALSE 35166
// btype := b_barracks ;
35158: LD_ADDR_VAR 0 5
35162: PUSH
35163: LD_INT 5
35165: ST_TO_ADDR
// if btype = b_depot then
35166: LD_VAR 0 5
35170: PUSH
35171: LD_INT 0
35173: EQUAL
35174: IFFALSE 35184
// btype := b_warehouse ;
35176: LD_ADDR_VAR 0 5
35180: PUSH
35181: LD_INT 1
35183: ST_TO_ADDR
// if btype = b_workshop then
35184: LD_VAR 0 5
35188: PUSH
35189: LD_INT 2
35191: EQUAL
35192: IFFALSE 35202
// btype := b_factory ;
35194: LD_ADDR_VAR 0 5
35198: PUSH
35199: LD_INT 3
35201: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35202: LD_ADDR_VAR 0 4
35206: PUSH
35207: LD_VAR 0 5
35211: PPUSH
35212: LD_VAR 0 1
35216: PPUSH
35217: CALL_OW 248
35221: PPUSH
35222: CALL_OW 450
35226: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_VAR 0 3
35236: PPUSH
35237: LD_INT 1
35239: PPUSH
35240: CALL_OW 275
35244: PUSH
35245: LD_VAR 0 4
35249: PUSH
35250: LD_INT 1
35252: ARRAY
35253: GREATEREQUAL
35254: PUSH
35255: LD_VAR 0 3
35259: PPUSH
35260: LD_INT 2
35262: PPUSH
35263: CALL_OW 275
35267: PUSH
35268: LD_VAR 0 4
35272: PUSH
35273: LD_INT 2
35275: ARRAY
35276: GREATEREQUAL
35277: AND
35278: PUSH
35279: LD_VAR 0 3
35283: PPUSH
35284: LD_INT 3
35286: PPUSH
35287: CALL_OW 275
35291: PUSH
35292: LD_VAR 0 4
35296: PUSH
35297: LD_INT 3
35299: ARRAY
35300: GREATEREQUAL
35301: AND
35302: ST_TO_ADDR
// end ;
35303: LD_VAR 0 2
35307: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
35312: PPUSH
// pom := GetBase ( building ) ;
35313: LD_ADDR_VAR 0 4
35317: PUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL_OW 274
35327: ST_TO_ADDR
// if not pom then
35328: LD_VAR 0 4
35332: NOT
35333: IFFALSE 35337
// exit ;
35335: GO 35438
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35337: LD_ADDR_VAR 0 5
35341: PUSH
35342: LD_VAR 0 2
35346: PPUSH
35347: LD_VAR 0 1
35351: PPUSH
35352: CALL_OW 248
35356: PPUSH
35357: CALL_OW 450
35361: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35362: LD_ADDR_VAR 0 3
35366: PUSH
35367: LD_VAR 0 4
35371: PPUSH
35372: LD_INT 1
35374: PPUSH
35375: CALL_OW 275
35379: PUSH
35380: LD_VAR 0 5
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: GREATEREQUAL
35389: PUSH
35390: LD_VAR 0 4
35394: PPUSH
35395: LD_INT 2
35397: PPUSH
35398: CALL_OW 275
35402: PUSH
35403: LD_VAR 0 5
35407: PUSH
35408: LD_INT 2
35410: ARRAY
35411: GREATEREQUAL
35412: AND
35413: PUSH
35414: LD_VAR 0 4
35418: PPUSH
35419: LD_INT 3
35421: PPUSH
35422: CALL_OW 275
35426: PUSH
35427: LD_VAR 0 5
35431: PUSH
35432: LD_INT 3
35434: ARRAY
35435: GREATEREQUAL
35436: AND
35437: ST_TO_ADDR
// end ;
35438: LD_VAR 0 3
35442: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35443: LD_INT 0
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
// result := false ;
35456: LD_ADDR_VAR 0 8
35460: PUSH
35461: LD_INT 0
35463: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35464: LD_VAR 0 5
35468: NOT
35469: PUSH
35470: LD_VAR 0 1
35474: NOT
35475: OR
35476: PUSH
35477: LD_VAR 0 2
35481: NOT
35482: OR
35483: PUSH
35484: LD_VAR 0 3
35488: NOT
35489: OR
35490: IFFALSE 35494
// exit ;
35492: GO 36308
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35494: LD_ADDR_VAR 0 14
35498: PUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: LD_VAR 0 2
35508: PPUSH
35509: LD_VAR 0 3
35513: PPUSH
35514: LD_VAR 0 4
35518: PPUSH
35519: LD_VAR 0 5
35523: PUSH
35524: LD_INT 1
35526: ARRAY
35527: PPUSH
35528: CALL_OW 248
35532: PPUSH
35533: LD_INT 0
35535: PPUSH
35536: CALL 37545 0 6
35540: ST_TO_ADDR
// if not hexes then
35541: LD_VAR 0 14
35545: NOT
35546: IFFALSE 35550
// exit ;
35548: GO 36308
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35550: LD_ADDR_VAR 0 17
35554: PUSH
35555: LD_VAR 0 5
35559: PPUSH
35560: LD_INT 22
35562: PUSH
35563: LD_VAR 0 13
35567: PPUSH
35568: CALL_OW 255
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: LD_INT 30
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 30
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PPUSH
35609: CALL_OW 72
35613: ST_TO_ADDR
// for i = 1 to hexes do
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_VAR 0 14
35628: PUSH
35629: FOR_TO
35630: IFFALSE 36306
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35632: LD_ADDR_VAR 0 13
35636: PUSH
35637: LD_VAR 0 14
35641: PUSH
35642: LD_VAR 0 9
35646: ARRAY
35647: PUSH
35648: LD_INT 1
35650: ARRAY
35651: PPUSH
35652: LD_VAR 0 14
35656: PUSH
35657: LD_VAR 0 9
35661: ARRAY
35662: PUSH
35663: LD_INT 2
35665: ARRAY
35666: PPUSH
35667: CALL_OW 428
35671: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35672: LD_VAR 0 14
35676: PUSH
35677: LD_VAR 0 9
35681: ARRAY
35682: PUSH
35683: LD_INT 1
35685: ARRAY
35686: PPUSH
35687: LD_VAR 0 14
35691: PUSH
35692: LD_VAR 0 9
35696: ARRAY
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PPUSH
35702: CALL_OW 351
35706: PUSH
35707: LD_VAR 0 14
35711: PUSH
35712: LD_VAR 0 9
35716: ARRAY
35717: PUSH
35718: LD_INT 1
35720: ARRAY
35721: PPUSH
35722: LD_VAR 0 14
35726: PUSH
35727: LD_VAR 0 9
35731: ARRAY
35732: PUSH
35733: LD_INT 2
35735: ARRAY
35736: PPUSH
35737: CALL_OW 488
35741: NOT
35742: OR
35743: PUSH
35744: LD_VAR 0 13
35748: PPUSH
35749: CALL_OW 247
35753: PUSH
35754: LD_INT 3
35756: EQUAL
35757: OR
35758: IFFALSE 35764
// exit ;
35760: POP
35761: POP
35762: GO 36308
// if not tmp then
35764: LD_VAR 0 13
35768: NOT
35769: IFFALSE 35773
// continue ;
35771: GO 35629
// result := true ;
35773: LD_ADDR_VAR 0 8
35777: PUSH
35778: LD_INT 1
35780: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35781: LD_VAR 0 6
35785: PUSH
35786: LD_VAR 0 13
35790: PPUSH
35791: CALL_OW 247
35795: PUSH
35796: LD_INT 2
35798: EQUAL
35799: AND
35800: PUSH
35801: LD_VAR 0 13
35805: PPUSH
35806: CALL_OW 263
35810: PUSH
35811: LD_INT 1
35813: EQUAL
35814: AND
35815: IFFALSE 35979
// begin if IsDrivenBy ( tmp ) then
35817: LD_VAR 0 13
35821: PPUSH
35822: CALL_OW 311
35826: IFFALSE 35830
// continue ;
35828: GO 35629
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35830: LD_VAR 0 6
35834: PPUSH
35835: LD_INT 3
35837: PUSH
35838: LD_INT 60
35840: PUSH
35841: EMPTY
35842: LIST
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 55
35853: PUSH
35854: EMPTY
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PPUSH
35865: CALL_OW 72
35869: IFFALSE 35977
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35871: LD_ADDR_VAR 0 18
35875: PUSH
35876: LD_VAR 0 6
35880: PPUSH
35881: LD_INT 3
35883: PUSH
35884: LD_INT 60
35886: PUSH
35887: EMPTY
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 55
35899: PUSH
35900: EMPTY
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PPUSH
35911: CALL_OW 72
35915: PUSH
35916: LD_INT 1
35918: ARRAY
35919: ST_TO_ADDR
// if IsInUnit ( driver ) then
35920: LD_VAR 0 18
35924: PPUSH
35925: CALL_OW 310
35929: IFFALSE 35940
// ComExit ( driver ) ;
35931: LD_VAR 0 18
35935: PPUSH
35936: CALL 60729 0 1
// AddComEnterUnit ( driver , tmp ) ;
35940: LD_VAR 0 18
35944: PPUSH
35945: LD_VAR 0 13
35949: PPUSH
35950: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35954: LD_VAR 0 18
35958: PPUSH
35959: LD_VAR 0 7
35963: PPUSH
35964: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35968: LD_VAR 0 18
35972: PPUSH
35973: CALL_OW 181
// end ; continue ;
35977: GO 35629
// end ; if not cleaners or not tmp in cleaners then
35979: LD_VAR 0 6
35983: NOT
35984: PUSH
35985: LD_VAR 0 13
35989: PUSH
35990: LD_VAR 0 6
35994: IN
35995: NOT
35996: OR
35997: IFFALSE 36304
// begin if dep then
35999: LD_VAR 0 17
36003: IFFALSE 36139
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36005: LD_ADDR_VAR 0 16
36009: PUSH
36010: LD_VAR 0 17
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PPUSH
36019: CALL_OW 250
36023: PPUSH
36024: LD_VAR 0 17
36028: PUSH
36029: LD_INT 1
36031: ARRAY
36032: PPUSH
36033: CALL_OW 254
36037: PPUSH
36038: LD_INT 5
36040: PPUSH
36041: CALL_OW 272
36045: PUSH
36046: LD_VAR 0 17
36050: PUSH
36051: LD_INT 1
36053: ARRAY
36054: PPUSH
36055: CALL_OW 251
36059: PPUSH
36060: LD_VAR 0 17
36064: PUSH
36065: LD_INT 1
36067: ARRAY
36068: PPUSH
36069: CALL_OW 254
36073: PPUSH
36074: LD_INT 5
36076: PPUSH
36077: CALL_OW 273
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36086: LD_VAR 0 16
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: LD_VAR 0 16
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 488
36108: IFFALSE 36139
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36110: LD_VAR 0 13
36114: PPUSH
36115: LD_VAR 0 16
36119: PUSH
36120: LD_INT 1
36122: ARRAY
36123: PPUSH
36124: LD_VAR 0 16
36128: PUSH
36129: LD_INT 2
36131: ARRAY
36132: PPUSH
36133: CALL_OW 111
// continue ;
36137: GO 35629
// end ; end ; r := GetDir ( tmp ) ;
36139: LD_ADDR_VAR 0 15
36143: PUSH
36144: LD_VAR 0 13
36148: PPUSH
36149: CALL_OW 254
36153: ST_TO_ADDR
// if r = 5 then
36154: LD_VAR 0 15
36158: PUSH
36159: LD_INT 5
36161: EQUAL
36162: IFFALSE 36172
// r := 0 ;
36164: LD_ADDR_VAR 0 15
36168: PUSH
36169: LD_INT 0
36171: ST_TO_ADDR
// for j = r to 5 do
36172: LD_ADDR_VAR 0 10
36176: PUSH
36177: DOUBLE
36178: LD_VAR 0 15
36182: DEC
36183: ST_TO_ADDR
36184: LD_INT 5
36186: PUSH
36187: FOR_TO
36188: IFFALSE 36302
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36190: LD_ADDR_VAR 0 11
36194: PUSH
36195: LD_VAR 0 13
36199: PPUSH
36200: CALL_OW 250
36204: PPUSH
36205: LD_VAR 0 10
36209: PPUSH
36210: LD_INT 2
36212: PPUSH
36213: CALL_OW 272
36217: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36218: LD_ADDR_VAR 0 12
36222: PUSH
36223: LD_VAR 0 13
36227: PPUSH
36228: CALL_OW 251
36232: PPUSH
36233: LD_VAR 0 10
36237: PPUSH
36238: LD_INT 2
36240: PPUSH
36241: CALL_OW 273
36245: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36246: LD_VAR 0 11
36250: PPUSH
36251: LD_VAR 0 12
36255: PPUSH
36256: CALL_OW 488
36260: PUSH
36261: LD_VAR 0 11
36265: PPUSH
36266: LD_VAR 0 12
36270: PPUSH
36271: CALL_OW 428
36275: NOT
36276: AND
36277: IFFALSE 36300
// begin ComMoveXY ( tmp , _x , _y ) ;
36279: LD_VAR 0 13
36283: PPUSH
36284: LD_VAR 0 11
36288: PPUSH
36289: LD_VAR 0 12
36293: PPUSH
36294: CALL_OW 111
// break ;
36298: GO 36302
// end ; end ;
36300: GO 36187
36302: POP
36303: POP
// end ; end ;
36304: GO 35629
36306: POP
36307: POP
// end ;
36308: LD_VAR 0 8
36312: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36313: LD_INT 0
36315: PPUSH
// result := true ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_INT 1
36323: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36324: LD_VAR 0 2
36328: PUSH
36329: LD_INT 24
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36343
36335: LD_INT 33
36337: DOUBLE
36338: EQUAL
36339: IFTRUE 36343
36341: GO 36368
36343: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36344: LD_ADDR_VAR 0 3
36348: PUSH
36349: LD_INT 32
36351: PPUSH
36352: LD_VAR 0 1
36356: PPUSH
36357: CALL_OW 321
36361: PUSH
36362: LD_INT 2
36364: EQUAL
36365: ST_TO_ADDR
36366: GO 36688
36368: LD_INT 20
36370: DOUBLE
36371: EQUAL
36372: IFTRUE 36376
36374: GO 36401
36376: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_INT 6
36384: PPUSH
36385: LD_VAR 0 1
36389: PPUSH
36390: CALL_OW 321
36394: PUSH
36395: LD_INT 2
36397: EQUAL
36398: ST_TO_ADDR
36399: GO 36688
36401: LD_INT 22
36403: DOUBLE
36404: EQUAL
36405: IFTRUE 36415
36407: LD_INT 36
36409: DOUBLE
36410: EQUAL
36411: IFTRUE 36415
36413: GO 36440
36415: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: LD_INT 15
36423: PPUSH
36424: LD_VAR 0 1
36428: PPUSH
36429: CALL_OW 321
36433: PUSH
36434: LD_INT 2
36436: EQUAL
36437: ST_TO_ADDR
36438: GO 36688
36440: LD_INT 30
36442: DOUBLE
36443: EQUAL
36444: IFTRUE 36448
36446: GO 36473
36448: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36449: LD_ADDR_VAR 0 3
36453: PUSH
36454: LD_INT 20
36456: PPUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 321
36466: PUSH
36467: LD_INT 2
36469: EQUAL
36470: ST_TO_ADDR
36471: GO 36688
36473: LD_INT 28
36475: DOUBLE
36476: EQUAL
36477: IFTRUE 36487
36479: LD_INT 21
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36487
36485: GO 36512
36487: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36488: LD_ADDR_VAR 0 3
36492: PUSH
36493: LD_INT 21
36495: PPUSH
36496: LD_VAR 0 1
36500: PPUSH
36501: CALL_OW 321
36505: PUSH
36506: LD_INT 2
36508: EQUAL
36509: ST_TO_ADDR
36510: GO 36688
36512: LD_INT 16
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36520
36518: GO 36547
36520: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_EXP 104
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 321
36540: PUSH
36541: LD_INT 2
36543: EQUAL
36544: ST_TO_ADDR
36545: GO 36688
36547: LD_INT 19
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36561
36553: LD_INT 23
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36588
36561: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_EXP 103
36571: PPUSH
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 321
36581: PUSH
36582: LD_INT 2
36584: EQUAL
36585: ST_TO_ADDR
36586: GO 36688
36588: LD_INT 17
36590: DOUBLE
36591: EQUAL
36592: IFTRUE 36596
36594: GO 36621
36596: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36597: LD_ADDR_VAR 0 3
36601: PUSH
36602: LD_INT 39
36604: PPUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 321
36614: PUSH
36615: LD_INT 2
36617: EQUAL
36618: ST_TO_ADDR
36619: GO 36688
36621: LD_INT 18
36623: DOUBLE
36624: EQUAL
36625: IFTRUE 36629
36627: GO 36654
36629: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36630: LD_ADDR_VAR 0 3
36634: PUSH
36635: LD_INT 40
36637: PPUSH
36638: LD_VAR 0 1
36642: PPUSH
36643: CALL_OW 321
36647: PUSH
36648: LD_INT 2
36650: EQUAL
36651: ST_TO_ADDR
36652: GO 36688
36654: LD_INT 27
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36662
36660: GO 36687
36662: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: LD_INT 35
36670: PPUSH
36671: LD_VAR 0 1
36675: PPUSH
36676: CALL_OW 321
36680: PUSH
36681: LD_INT 2
36683: EQUAL
36684: ST_TO_ADDR
36685: GO 36688
36687: POP
// end ;
36688: LD_VAR 0 3
36692: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36693: LD_INT 0
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
// result := false ;
36706: LD_ADDR_VAR 0 6
36710: PUSH
36711: LD_INT 0
36713: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36714: LD_VAR 0 1
36718: NOT
36719: PUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 266
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: IN
36740: NOT
36741: OR
36742: PUSH
36743: LD_VAR 0 2
36747: NOT
36748: OR
36749: PUSH
36750: LD_VAR 0 5
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 3
36766: PUSH
36767: LD_INT 4
36769: PUSH
36770: LD_INT 5
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: IN
36781: NOT
36782: OR
36783: PUSH
36784: LD_VAR 0 3
36788: PPUSH
36789: LD_VAR 0 4
36793: PPUSH
36794: CALL_OW 488
36798: NOT
36799: OR
36800: IFFALSE 36804
// exit ;
36802: GO 37540
// side := GetSide ( depot ) ;
36804: LD_ADDR_VAR 0 9
36808: PUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 255
36818: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36819: LD_VAR 0 9
36823: PPUSH
36824: LD_VAR 0 2
36828: PPUSH
36829: CALL 36313 0 2
36833: NOT
36834: IFFALSE 36838
// exit ;
36836: GO 37540
// pom := GetBase ( depot ) ;
36838: LD_ADDR_VAR 0 10
36842: PUSH
36843: LD_VAR 0 1
36847: PPUSH
36848: CALL_OW 274
36852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36853: LD_ADDR_VAR 0 11
36857: PUSH
36858: LD_VAR 0 2
36862: PPUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 248
36872: PPUSH
36873: CALL_OW 450
36877: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36878: LD_VAR 0 10
36882: PPUSH
36883: LD_INT 1
36885: PPUSH
36886: CALL_OW 275
36890: PUSH
36891: LD_VAR 0 11
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: GREATEREQUAL
36900: PUSH
36901: LD_VAR 0 10
36905: PPUSH
36906: LD_INT 2
36908: PPUSH
36909: CALL_OW 275
36913: PUSH
36914: LD_VAR 0 11
36918: PUSH
36919: LD_INT 2
36921: ARRAY
36922: GREATEREQUAL
36923: AND
36924: PUSH
36925: LD_VAR 0 10
36929: PPUSH
36930: LD_INT 3
36932: PPUSH
36933: CALL_OW 275
36937: PUSH
36938: LD_VAR 0 11
36942: PUSH
36943: LD_INT 3
36945: ARRAY
36946: GREATEREQUAL
36947: AND
36948: NOT
36949: IFFALSE 36953
// exit ;
36951: GO 37540
// if GetBType ( depot ) = b_depot then
36953: LD_VAR 0 1
36957: PPUSH
36958: CALL_OW 266
36962: PUSH
36963: LD_INT 0
36965: EQUAL
36966: IFFALSE 36978
// dist := 28 else
36968: LD_ADDR_VAR 0 14
36972: PUSH
36973: LD_INT 28
36975: ST_TO_ADDR
36976: GO 36986
// dist := 36 ;
36978: LD_ADDR_VAR 0 14
36982: PUSH
36983: LD_INT 36
36985: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36986: LD_VAR 0 1
36990: PPUSH
36991: LD_VAR 0 3
36995: PPUSH
36996: LD_VAR 0 4
37000: PPUSH
37001: CALL_OW 297
37005: PUSH
37006: LD_VAR 0 14
37010: GREATER
37011: IFFALSE 37015
// exit ;
37013: GO 37540
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37015: LD_ADDR_VAR 0 12
37019: PUSH
37020: LD_VAR 0 2
37024: PPUSH
37025: LD_VAR 0 3
37029: PPUSH
37030: LD_VAR 0 4
37034: PPUSH
37035: LD_VAR 0 5
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 248
37049: PPUSH
37050: LD_INT 0
37052: PPUSH
37053: CALL 37545 0 6
37057: ST_TO_ADDR
// if not hexes then
37058: LD_VAR 0 12
37062: NOT
37063: IFFALSE 37067
// exit ;
37065: GO 37540
// hex := GetHexInfo ( x , y ) ;
37067: LD_ADDR_VAR 0 15
37071: PUSH
37072: LD_VAR 0 3
37076: PPUSH
37077: LD_VAR 0 4
37081: PPUSH
37082: CALL_OW 546
37086: ST_TO_ADDR
// if hex [ 1 ] then
37087: LD_VAR 0 15
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: IFFALSE 37099
// exit ;
37097: GO 37540
// height := hex [ 2 ] ;
37099: LD_ADDR_VAR 0 13
37103: PUSH
37104: LD_VAR 0 15
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: ST_TO_ADDR
// for i = 1 to hexes do
37113: LD_ADDR_VAR 0 7
37117: PUSH
37118: DOUBLE
37119: LD_INT 1
37121: DEC
37122: ST_TO_ADDR
37123: LD_VAR 0 12
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37459
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37131: LD_VAR 0 12
37135: PUSH
37136: LD_VAR 0 7
37140: ARRAY
37141: PUSH
37142: LD_INT 1
37144: ARRAY
37145: PPUSH
37146: LD_VAR 0 12
37150: PUSH
37151: LD_VAR 0 7
37155: ARRAY
37156: PUSH
37157: LD_INT 2
37159: ARRAY
37160: PPUSH
37161: CALL_OW 488
37165: NOT
37166: PUSH
37167: LD_VAR 0 12
37171: PUSH
37172: LD_VAR 0 7
37176: ARRAY
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: PPUSH
37182: LD_VAR 0 12
37186: PUSH
37187: LD_VAR 0 7
37191: ARRAY
37192: PUSH
37193: LD_INT 2
37195: ARRAY
37196: PPUSH
37197: CALL_OW 428
37201: PUSH
37202: LD_INT 0
37204: GREATER
37205: OR
37206: PUSH
37207: LD_VAR 0 12
37211: PUSH
37212: LD_VAR 0 7
37216: ARRAY
37217: PUSH
37218: LD_INT 1
37220: ARRAY
37221: PPUSH
37222: LD_VAR 0 12
37226: PUSH
37227: LD_VAR 0 7
37231: ARRAY
37232: PUSH
37233: LD_INT 2
37235: ARRAY
37236: PPUSH
37237: CALL_OW 351
37241: OR
37242: IFFALSE 37248
// exit ;
37244: POP
37245: POP
37246: GO 37540
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37248: LD_ADDR_VAR 0 8
37252: PUSH
37253: LD_VAR 0 12
37257: PUSH
37258: LD_VAR 0 7
37262: ARRAY
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: PPUSH
37268: LD_VAR 0 12
37272: PUSH
37273: LD_VAR 0 7
37277: ARRAY
37278: PUSH
37279: LD_INT 2
37281: ARRAY
37282: PPUSH
37283: CALL_OW 546
37287: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37288: LD_VAR 0 8
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PUSH
37297: LD_VAR 0 8
37301: PUSH
37302: LD_INT 2
37304: ARRAY
37305: PUSH
37306: LD_VAR 0 13
37310: PUSH
37311: LD_INT 2
37313: PLUS
37314: GREATER
37315: OR
37316: PUSH
37317: LD_VAR 0 8
37321: PUSH
37322: LD_INT 2
37324: ARRAY
37325: PUSH
37326: LD_VAR 0 13
37330: PUSH
37331: LD_INT 2
37333: MINUS
37334: LESS
37335: OR
37336: PUSH
37337: LD_VAR 0 8
37341: PUSH
37342: LD_INT 3
37344: ARRAY
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 8
37351: PUSH
37352: LD_INT 9
37354: PUSH
37355: LD_INT 10
37357: PUSH
37358: LD_INT 11
37360: PUSH
37361: LD_INT 12
37363: PUSH
37364: LD_INT 13
37366: PUSH
37367: LD_INT 16
37369: PUSH
37370: LD_INT 17
37372: PUSH
37373: LD_INT 18
37375: PUSH
37376: LD_INT 19
37378: PUSH
37379: LD_INT 20
37381: PUSH
37382: LD_INT 21
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: IN
37400: NOT
37401: OR
37402: PUSH
37403: LD_VAR 0 8
37407: PUSH
37408: LD_INT 5
37410: ARRAY
37411: NOT
37412: OR
37413: PUSH
37414: LD_VAR 0 8
37418: PUSH
37419: LD_INT 6
37421: ARRAY
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 7
37431: PUSH
37432: LD_INT 9
37434: PUSH
37435: LD_INT 10
37437: PUSH
37438: LD_INT 11
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: IN
37449: NOT
37450: OR
37451: IFFALSE 37457
// exit ;
37453: POP
37454: POP
37455: GO 37540
// end ;
37457: GO 37128
37459: POP
37460: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37461: LD_VAR 0 9
37465: PPUSH
37466: LD_VAR 0 3
37470: PPUSH
37471: LD_VAR 0 4
37475: PPUSH
37476: LD_INT 20
37478: PPUSH
37479: CALL 29486 0 4
37483: PUSH
37484: LD_INT 4
37486: ARRAY
37487: IFFALSE 37491
// exit ;
37489: GO 37540
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37491: LD_VAR 0 2
37495: PUSH
37496: LD_INT 29
37498: PUSH
37499: LD_INT 30
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: IN
37506: PUSH
37507: LD_VAR 0 3
37511: PPUSH
37512: LD_VAR 0 4
37516: PPUSH
37517: LD_VAR 0 9
37521: PPUSH
37522: CALL_OW 440
37526: NOT
37527: AND
37528: IFFALSE 37532
// exit ;
37530: GO 37540
// result := true ;
37532: LD_ADDR_VAR 0 6
37536: PUSH
37537: LD_INT 1
37539: ST_TO_ADDR
// end ;
37540: LD_VAR 0 6
37544: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37545: LD_INT 0
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
// result = [ ] ;
37605: LD_ADDR_VAR 0 7
37609: PUSH
37610: EMPTY
37611: ST_TO_ADDR
// temp_list = [ ] ;
37612: LD_ADDR_VAR 0 9
37616: PUSH
37617: EMPTY
37618: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37619: LD_VAR 0 4
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: LD_INT 4
37638: PUSH
37639: LD_INT 5
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: IN
37650: NOT
37651: PUSH
37652: LD_VAR 0 1
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: IN
37667: PUSH
37668: LD_VAR 0 5
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: IN
37687: NOT
37688: AND
37689: OR
37690: IFFALSE 37694
// exit ;
37692: GO 56085
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37694: LD_VAR 0 1
37698: PUSH
37699: LD_INT 6
37701: PUSH
37702: LD_INT 7
37704: PUSH
37705: LD_INT 8
37707: PUSH
37708: LD_INT 13
37710: PUSH
37711: LD_INT 12
37713: PUSH
37714: LD_INT 15
37716: PUSH
37717: LD_INT 11
37719: PUSH
37720: LD_INT 14
37722: PUSH
37723: LD_INT 10
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: IN
37737: IFFALSE 37747
// btype = b_lab ;
37739: LD_ADDR_VAR 0 1
37743: PUSH
37744: LD_INT 6
37746: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37747: LD_VAR 0 6
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: IN
37766: NOT
37767: PUSH
37768: LD_VAR 0 1
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 3
37784: PUSH
37785: LD_INT 6
37787: PUSH
37788: LD_INT 36
37790: PUSH
37791: LD_INT 4
37793: PUSH
37794: LD_INT 5
37796: PUSH
37797: LD_INT 31
37799: PUSH
37800: LD_INT 32
37802: PUSH
37803: LD_INT 33
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: IN
37819: NOT
37820: PUSH
37821: LD_VAR 0 6
37825: PUSH
37826: LD_INT 1
37828: EQUAL
37829: AND
37830: OR
37831: PUSH
37832: LD_VAR 0 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: IN
37847: NOT
37848: PUSH
37849: LD_VAR 0 6
37853: PUSH
37854: LD_INT 2
37856: EQUAL
37857: AND
37858: OR
37859: IFFALSE 37869
// mode = 0 ;
37861: LD_ADDR_VAR 0 6
37865: PUSH
37866: LD_INT 0
37868: ST_TO_ADDR
// case mode of 0 :
37869: LD_VAR 0 6
37873: PUSH
37874: LD_INT 0
37876: DOUBLE
37877: EQUAL
37878: IFTRUE 37882
37880: GO 49335
37882: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37883: LD_ADDR_VAR 0 11
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38076: LD_ADDR_VAR 0 12
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 3
38233: NEG
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38272: LD_ADDR_VAR 0 13
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 3
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: LD_INT 3
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38471: LD_ADDR_VAR 0 14
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38667: LD_ADDR_VAR 0 15
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 1
38725: NEG
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 3
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38860: LD_ADDR_VAR 0 16
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: LD_INT 3
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39053: LD_ADDR_VAR 0 17
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39283: LD_ADDR_VAR 0 18
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39513: LD_ADDR_VAR 0 19
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39743: LD_ADDR_VAR 0 20
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39973: LD_ADDR_VAR 0 21
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40203: LD_ADDR_VAR 0 22
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40433: LD_ADDR_VAR 0 23
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: NEG
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 3
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 3
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40713: LD_ADDR_VAR 0 24
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40989: LD_ADDR_VAR 0 25
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41263: LD_ADDR_VAR 0 26
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 3
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41539: LD_ADDR_VAR 0 27
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 3
41772: NEG
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41819: LD_ADDR_VAR 0 28
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42101: LD_ADDR_VAR 0 29
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 3
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: LD_INT 2
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42380: LD_ADDR_VAR 0 30
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42658: LD_ADDR_VAR 0 31
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: NEG
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 3
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 3
42901: NEG
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42936: LD_ADDR_VAR 0 32
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: NEG
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 3
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43214: LD_ADDR_VAR 0 33
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43493: LD_ADDR_VAR 0 34
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 2
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 3
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 3
43738: NEG
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43773: LD_ADDR_VAR 0 35
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43885: LD_ADDR_VAR 0 36
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43997: LD_ADDR_VAR 0 37
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44109: LD_ADDR_VAR 0 38
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44221: LD_ADDR_VAR 0 39
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44333: LD_ADDR_VAR 0 40
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44445: LD_ADDR_VAR 0 41
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44795: LD_ADDR_VAR 0 42
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 3
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: LD_INT 3
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45145: LD_ADDR_VAR 0 43
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 3
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 3
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 3
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45493: LD_ADDR_VAR 0 44
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 3
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45843: LD_ADDR_VAR 0 45
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: LD_INT 3
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 3
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46193: LD_ADDR_VAR 0 46
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 3
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46541: LD_ADDR_VAR 0 47
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46692: LD_ADDR_VAR 0 48
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46839: LD_ADDR_VAR 0 49
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46983: LD_ADDR_VAR 0 50
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47127: LD_ADDR_VAR 0 51
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47274: LD_ADDR_VAR 0 52
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47425: LD_ADDR_VAR 0 53
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47655: LD_ADDR_VAR 0 54
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47885: LD_ADDR_VAR 0 55
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48115: LD_ADDR_VAR 0 56
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: NEG
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48345: LD_ADDR_VAR 0 57
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48575: LD_ADDR_VAR 0 58
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48805: LD_ADDR_VAR 0 59
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48893: LD_ADDR_VAR 0 60
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48981: LD_ADDR_VAR 0 61
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49069: LD_ADDR_VAR 0 62
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49157: LD_ADDR_VAR 0 63
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49245: LD_ADDR_VAR 0 64
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// end ; 1 :
49333: GO 55230
49335: LD_INT 1
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49343
49341: GO 51966
49343: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49344: LD_ADDR_VAR 0 11
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49388: LD_ADDR_VAR 0 12
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49429: LD_ADDR_VAR 0 13
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49469: LD_ADDR_VAR 0 14
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49510: LD_ADDR_VAR 0 15
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: LIST
49553: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49554: LD_ADDR_VAR 0 16
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: LD_INT 3
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49600: LD_ADDR_VAR 0 17
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 3
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49644: LD_ADDR_VAR 0 18
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49685: LD_ADDR_VAR 0 19
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: LIST
49724: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49725: LD_ADDR_VAR 0 20
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 3
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49766: LD_ADDR_VAR 0 21
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49810: LD_ADDR_VAR 0 22
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49856: LD_ADDR_VAR 0 23
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 4
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 3
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49900: LD_ADDR_VAR 0 24
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49941: LD_ADDR_VAR 0 25
49945: PUSH
49946: LD_INT 3
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: LD_INT 3
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 4
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49981: LD_ADDR_VAR 0 26
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 4
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50022: LD_ADDR_VAR 0 27
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: NEG
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50066: LD_ADDR_VAR 0 28
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50112: LD_ADDR_VAR 0 29
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 4
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 4
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 5
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 5
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 6
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 6
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 5
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50267: LD_ADDR_VAR 0 30
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 4
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 4
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 5
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 5
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 5
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 6
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 6
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50410: LD_ADDR_VAR 0 31
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 4
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 4
50457: PUSH
50458: LD_INT 4
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: LD_INT 4
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 5
50477: PUSH
50478: LD_INT 4
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: LD_INT 5
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 4
50497: PUSH
50498: LD_INT 5
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 6
50507: PUSH
50508: LD_INT 5
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 6
50517: PUSH
50518: LD_INT 6
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 5
50527: PUSH
50528: LD_INT 6
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50549: LD_ADDR_VAR 0 32
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 3
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 4
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 4
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 5
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 6
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 6
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 5
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50692: LD_ADDR_VAR 0 33
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 4
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 4
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 4
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 5
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 5
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 5
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 6
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 6
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50847: LD_ADDR_VAR 0 34
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 4
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 4
50914: NEG
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: NEG
50927: PUSH
50928: LD_INT 5
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 5
50938: NEG
50939: PUSH
50940: LD_INT 4
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 5
50950: NEG
50951: PUSH
50952: LD_INT 5
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 5
50962: NEG
50963: PUSH
50964: LD_INT 6
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 6
50974: NEG
50975: PUSH
50976: LD_INT 5
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 6
50986: NEG
50987: PUSH
50988: LD_INT 6
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51010: LD_ADDR_VAR 0 41
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51054: LD_ADDR_VAR 0 42
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51095: LD_ADDR_VAR 0 43
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51135: LD_ADDR_VAR 0 44
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51176: LD_ADDR_VAR 0 45
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51220: LD_ADDR_VAR 0 46
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51266: LD_ADDR_VAR 0 47
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51299: LD_ADDR_VAR 0 48
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51330: LD_ADDR_VAR 0 49
51334: PUSH
51335: LD_INT 3
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: LD_INT 2
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51359: LD_ADDR_VAR 0 50
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 3
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51388: LD_ADDR_VAR 0 51
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51419: LD_ADDR_VAR 0 52
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51452: LD_ADDR_VAR 0 53
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51496: LD_ADDR_VAR 0 54
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51537: LD_ADDR_VAR 0 55
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51577: LD_ADDR_VAR 0 56
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 3
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51618: LD_ADDR_VAR 0 57
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51662: LD_ADDR_VAR 0 58
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 2
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: NEG
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51708: LD_ADDR_VAR 0 59
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51752: LD_ADDR_VAR 0 60
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 2
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51793: LD_ADDR_VAR 0 61
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51833: LD_ADDR_VAR 0 62
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51874: LD_ADDR_VAR 0 63
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: LIST
51917: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51918: LD_ADDR_VAR 0 64
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: ST_TO_ADDR
// end ; 2 :
51964: GO 55230
51966: LD_INT 2
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 51974
51972: GO 55229
51974: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51975: LD_ADDR_VAR 0 29
51979: PUSH
51980: LD_INT 4
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 4
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 5
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 5
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: LD_INT 2
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 5
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 4
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: LD_INT 4
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 4
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 4
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 5
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 5
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 5
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 4
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 4
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 4
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 4
52360: NEG
52361: PUSH
52362: LD_INT 4
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 4
52372: NEG
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: LD_INT 4
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 4
52408: NEG
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 5
52420: NEG
52421: PUSH
52422: LD_INT 4
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 5
52432: NEG
52433: PUSH
52434: LD_INT 5
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 5
52456: NEG
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52513: LD_ADDR_VAR 0 30
52517: PUSH
52518: LD_INT 4
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 5
52540: PUSH
52541: LD_INT 4
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 5
52550: PUSH
52551: LD_INT 5
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 4
52560: PUSH
52561: LD_INT 5
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 3
52570: PUSH
52571: LD_INT 4
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 5
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 5
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 4
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 4
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 4
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 4
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 4
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 3
52737: NEG
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 4
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 5
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 5
52782: NEG
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: LD_INT 4
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 4
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 4
52877: NEG
52878: PUSH
52879: LD_INT 4
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: LD_INT 4
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: NEG
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 4
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 5
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 4
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 4
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 5
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 5
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53060: LD_ADDR_VAR 0 31
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 4
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 4
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 5
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: LD_INT 4
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: PUSH
53140: LD_INT 5
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: NEG
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 4
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 4
53239: NEG
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 4
53262: NEG
53263: PUSH
53264: LD_INT 4
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: LD_INT 5
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 4
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 4
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 5
53322: NEG
53323: PUSH
53324: LD_INT 4
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 5
53334: NEG
53335: PUSH
53336: LD_INT 5
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 5
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 5
53358: NEG
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 3
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 4
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 4
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 4
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 5
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 5
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 4
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 3
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53610: LD_ADDR_VAR 0 32
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 4
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 3
53640: NEG
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 5
53673: NEG
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 5
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 5
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 4
53791: NEG
53792: PUSH
53793: LD_INT 4
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: NEG
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: NEG
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 4
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 5
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 4
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: LD_INT 5
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: LD_INT 5
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 4
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 4
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 4
54022: PUSH
54023: LD_INT 4
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 4
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: LD_INT 4
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 5
54052: PUSH
54053: LD_INT 5
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 4
54062: PUSH
54063: LD_INT 5
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: LD_INT 4
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 5
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: LD_INT 5
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54157: LD_ADDR_VAR 0 33
54161: PUSH
54162: LD_INT 4
54164: NEG
54165: PUSH
54166: LD_INT 4
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: LD_INT 5
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 4
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 5
54224: NEG
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 5
54236: NEG
54237: PUSH
54238: LD_INT 5
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: NEG
54249: PUSH
54250: LD_INT 5
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 5
54260: NEG
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 4
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 3
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 2
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 3
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 4
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 4
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 4
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 4
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 5
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 3
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 4
54487: PUSH
54488: LD_INT 3
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 4
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 4
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 4
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 4
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 4
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 5
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 5
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 4
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 5
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54695: LD_ADDR_VAR 0 34
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 4
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 5
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 5
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 3
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: LD_INT 5
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 4
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 4
54897: PUSH
54898: LD_INT 4
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 4
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 5
54917: PUSH
54918: LD_INT 4
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: PUSH
54928: LD_INT 5
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 4
54937: PUSH
54938: LD_INT 5
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 5
54967: PUSH
54968: LD_INT 3
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: LD_INT 5
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 4
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 4
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: LD_INT 3
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 4
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 4
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 4
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 4
55125: NEG
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 5
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 5
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 5
55159: NEG
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 3
55171: NEG
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// end ; end ;
55227: GO 55230
55229: POP
// case btype of b_depot , b_warehouse :
55230: LD_VAR 0 1
55234: PUSH
55235: LD_INT 0
55237: DOUBLE
55238: EQUAL
55239: IFTRUE 55249
55241: LD_INT 1
55243: DOUBLE
55244: EQUAL
55245: IFTRUE 55249
55247: GO 55450
55249: POP
// case nation of nation_american :
55250: LD_VAR 0 5
55254: PUSH
55255: LD_INT 1
55257: DOUBLE
55258: EQUAL
55259: IFTRUE 55263
55261: GO 55319
55263: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55264: LD_ADDR_VAR 0 9
55268: PUSH
55269: LD_VAR 0 11
55273: PUSH
55274: LD_VAR 0 12
55278: PUSH
55279: LD_VAR 0 13
55283: PUSH
55284: LD_VAR 0 14
55288: PUSH
55289: LD_VAR 0 15
55293: PUSH
55294: LD_VAR 0 16
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: PUSH
55307: LD_VAR 0 4
55311: PUSH
55312: LD_INT 1
55314: PLUS
55315: ARRAY
55316: ST_TO_ADDR
55317: GO 55448
55319: LD_INT 2
55321: DOUBLE
55322: EQUAL
55323: IFTRUE 55327
55325: GO 55383
55327: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55328: LD_ADDR_VAR 0 9
55332: PUSH
55333: LD_VAR 0 17
55337: PUSH
55338: LD_VAR 0 18
55342: PUSH
55343: LD_VAR 0 19
55347: PUSH
55348: LD_VAR 0 20
55352: PUSH
55353: LD_VAR 0 21
55357: PUSH
55358: LD_VAR 0 22
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: PUSH
55371: LD_VAR 0 4
55375: PUSH
55376: LD_INT 1
55378: PLUS
55379: ARRAY
55380: ST_TO_ADDR
55381: GO 55448
55383: LD_INT 3
55385: DOUBLE
55386: EQUAL
55387: IFTRUE 55391
55389: GO 55447
55391: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55392: LD_ADDR_VAR 0 9
55396: PUSH
55397: LD_VAR 0 23
55401: PUSH
55402: LD_VAR 0 24
55406: PUSH
55407: LD_VAR 0 25
55411: PUSH
55412: LD_VAR 0 26
55416: PUSH
55417: LD_VAR 0 27
55421: PUSH
55422: LD_VAR 0 28
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: PUSH
55435: LD_VAR 0 4
55439: PUSH
55440: LD_INT 1
55442: PLUS
55443: ARRAY
55444: ST_TO_ADDR
55445: GO 55448
55447: POP
55448: GO 56003
55450: LD_INT 2
55452: DOUBLE
55453: EQUAL
55454: IFTRUE 55464
55456: LD_INT 3
55458: DOUBLE
55459: EQUAL
55460: IFTRUE 55464
55462: GO 55520
55464: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55465: LD_ADDR_VAR 0 9
55469: PUSH
55470: LD_VAR 0 29
55474: PUSH
55475: LD_VAR 0 30
55479: PUSH
55480: LD_VAR 0 31
55484: PUSH
55485: LD_VAR 0 32
55489: PUSH
55490: LD_VAR 0 33
55494: PUSH
55495: LD_VAR 0 34
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: PUSH
55508: LD_VAR 0 4
55512: PUSH
55513: LD_INT 1
55515: PLUS
55516: ARRAY
55517: ST_TO_ADDR
55518: GO 56003
55520: LD_INT 16
55522: DOUBLE
55523: EQUAL
55524: IFTRUE 55582
55526: LD_INT 17
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55582
55532: LD_INT 18
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55582
55538: LD_INT 19
55540: DOUBLE
55541: EQUAL
55542: IFTRUE 55582
55544: LD_INT 22
55546: DOUBLE
55547: EQUAL
55548: IFTRUE 55582
55550: LD_INT 20
55552: DOUBLE
55553: EQUAL
55554: IFTRUE 55582
55556: LD_INT 21
55558: DOUBLE
55559: EQUAL
55560: IFTRUE 55582
55562: LD_INT 23
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55582
55568: LD_INT 24
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55582
55574: LD_INT 25
55576: DOUBLE
55577: EQUAL
55578: IFTRUE 55582
55580: GO 55638
55582: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55583: LD_ADDR_VAR 0 9
55587: PUSH
55588: LD_VAR 0 35
55592: PUSH
55593: LD_VAR 0 36
55597: PUSH
55598: LD_VAR 0 37
55602: PUSH
55603: LD_VAR 0 38
55607: PUSH
55608: LD_VAR 0 39
55612: PUSH
55613: LD_VAR 0 40
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: PUSH
55626: LD_VAR 0 4
55630: PUSH
55631: LD_INT 1
55633: PLUS
55634: ARRAY
55635: ST_TO_ADDR
55636: GO 56003
55638: LD_INT 6
55640: DOUBLE
55641: EQUAL
55642: IFTRUE 55694
55644: LD_INT 7
55646: DOUBLE
55647: EQUAL
55648: IFTRUE 55694
55650: LD_INT 8
55652: DOUBLE
55653: EQUAL
55654: IFTRUE 55694
55656: LD_INT 13
55658: DOUBLE
55659: EQUAL
55660: IFTRUE 55694
55662: LD_INT 12
55664: DOUBLE
55665: EQUAL
55666: IFTRUE 55694
55668: LD_INT 15
55670: DOUBLE
55671: EQUAL
55672: IFTRUE 55694
55674: LD_INT 11
55676: DOUBLE
55677: EQUAL
55678: IFTRUE 55694
55680: LD_INT 14
55682: DOUBLE
55683: EQUAL
55684: IFTRUE 55694
55686: LD_INT 10
55688: DOUBLE
55689: EQUAL
55690: IFTRUE 55694
55692: GO 55750
55694: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55695: LD_ADDR_VAR 0 9
55699: PUSH
55700: LD_VAR 0 41
55704: PUSH
55705: LD_VAR 0 42
55709: PUSH
55710: LD_VAR 0 43
55714: PUSH
55715: LD_VAR 0 44
55719: PUSH
55720: LD_VAR 0 45
55724: PUSH
55725: LD_VAR 0 46
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: PUSH
55738: LD_VAR 0 4
55742: PUSH
55743: LD_INT 1
55745: PLUS
55746: ARRAY
55747: ST_TO_ADDR
55748: GO 56003
55750: LD_INT 36
55752: DOUBLE
55753: EQUAL
55754: IFTRUE 55758
55756: GO 55814
55758: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55759: LD_ADDR_VAR 0 9
55763: PUSH
55764: LD_VAR 0 47
55768: PUSH
55769: LD_VAR 0 48
55773: PUSH
55774: LD_VAR 0 49
55778: PUSH
55779: LD_VAR 0 50
55783: PUSH
55784: LD_VAR 0 51
55788: PUSH
55789: LD_VAR 0 52
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: PUSH
55802: LD_VAR 0 4
55806: PUSH
55807: LD_INT 1
55809: PLUS
55810: ARRAY
55811: ST_TO_ADDR
55812: GO 56003
55814: LD_INT 4
55816: DOUBLE
55817: EQUAL
55818: IFTRUE 55840
55820: LD_INT 5
55822: DOUBLE
55823: EQUAL
55824: IFTRUE 55840
55826: LD_INT 34
55828: DOUBLE
55829: EQUAL
55830: IFTRUE 55840
55832: LD_INT 37
55834: DOUBLE
55835: EQUAL
55836: IFTRUE 55840
55838: GO 55896
55840: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55841: LD_ADDR_VAR 0 9
55845: PUSH
55846: LD_VAR 0 53
55850: PUSH
55851: LD_VAR 0 54
55855: PUSH
55856: LD_VAR 0 55
55860: PUSH
55861: LD_VAR 0 56
55865: PUSH
55866: LD_VAR 0 57
55870: PUSH
55871: LD_VAR 0 58
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: PUSH
55884: LD_VAR 0 4
55888: PUSH
55889: LD_INT 1
55891: PLUS
55892: ARRAY
55893: ST_TO_ADDR
55894: GO 56003
55896: LD_INT 31
55898: DOUBLE
55899: EQUAL
55900: IFTRUE 55946
55902: LD_INT 32
55904: DOUBLE
55905: EQUAL
55906: IFTRUE 55946
55908: LD_INT 33
55910: DOUBLE
55911: EQUAL
55912: IFTRUE 55946
55914: LD_INT 27
55916: DOUBLE
55917: EQUAL
55918: IFTRUE 55946
55920: LD_INT 26
55922: DOUBLE
55923: EQUAL
55924: IFTRUE 55946
55926: LD_INT 28
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55946
55932: LD_INT 29
55934: DOUBLE
55935: EQUAL
55936: IFTRUE 55946
55938: LD_INT 30
55940: DOUBLE
55941: EQUAL
55942: IFTRUE 55946
55944: GO 56002
55946: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55947: LD_ADDR_VAR 0 9
55951: PUSH
55952: LD_VAR 0 59
55956: PUSH
55957: LD_VAR 0 60
55961: PUSH
55962: LD_VAR 0 61
55966: PUSH
55967: LD_VAR 0 62
55971: PUSH
55972: LD_VAR 0 63
55976: PUSH
55977: LD_VAR 0 64
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: PUSH
55990: LD_VAR 0 4
55994: PUSH
55995: LD_INT 1
55997: PLUS
55998: ARRAY
55999: ST_TO_ADDR
56000: GO 56003
56002: POP
// temp_list2 = [ ] ;
56003: LD_ADDR_VAR 0 10
56007: PUSH
56008: EMPTY
56009: ST_TO_ADDR
// for i in temp_list do
56010: LD_ADDR_VAR 0 8
56014: PUSH
56015: LD_VAR 0 9
56019: PUSH
56020: FOR_IN
56021: IFFALSE 56073
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56023: LD_ADDR_VAR 0 10
56027: PUSH
56028: LD_VAR 0 10
56032: PUSH
56033: LD_VAR 0 8
56037: PUSH
56038: LD_INT 1
56040: ARRAY
56041: PUSH
56042: LD_VAR 0 2
56046: PLUS
56047: PUSH
56048: LD_VAR 0 8
56052: PUSH
56053: LD_INT 2
56055: ARRAY
56056: PUSH
56057: LD_VAR 0 3
56061: PLUS
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: ADD
56070: ST_TO_ADDR
56071: GO 56020
56073: POP
56074: POP
// result = temp_list2 ;
56075: LD_ADDR_VAR 0 7
56079: PUSH
56080: LD_VAR 0 10
56084: ST_TO_ADDR
// end ;
56085: LD_VAR 0 7
56089: RET
// export function EnemyInRange ( unit , dist ) ; begin
56090: LD_INT 0
56092: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56093: LD_ADDR_VAR 0 3
56097: PUSH
56098: LD_VAR 0 1
56102: PPUSH
56103: CALL_OW 255
56107: PPUSH
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL_OW 250
56117: PPUSH
56118: LD_VAR 0 1
56122: PPUSH
56123: CALL_OW 251
56127: PPUSH
56128: LD_VAR 0 2
56132: PPUSH
56133: CALL 29486 0 4
56137: PUSH
56138: LD_INT 4
56140: ARRAY
56141: ST_TO_ADDR
// end ;
56142: LD_VAR 0 3
56146: RET
// export function PlayerSeeMe ( unit ) ; begin
56147: LD_INT 0
56149: PPUSH
// result := See ( your_side , unit ) ;
56150: LD_ADDR_VAR 0 2
56154: PUSH
56155: LD_OWVAR 2
56159: PPUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: CALL_OW 292
56169: ST_TO_ADDR
// end ;
56170: LD_VAR 0 2
56174: RET
// export function ReverseDir ( unit ) ; begin
56175: LD_INT 0
56177: PPUSH
// if not unit then
56178: LD_VAR 0 1
56182: NOT
56183: IFFALSE 56187
// exit ;
56185: GO 56210
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56187: LD_ADDR_VAR 0 2
56191: PUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: CALL_OW 254
56201: PUSH
56202: LD_INT 3
56204: PLUS
56205: PUSH
56206: LD_INT 6
56208: MOD
56209: ST_TO_ADDR
// end ;
56210: LD_VAR 0 2
56214: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56215: LD_INT 0
56217: PPUSH
56218: PPUSH
56219: PPUSH
56220: PPUSH
56221: PPUSH
// if not hexes then
56222: LD_VAR 0 2
56226: NOT
56227: IFFALSE 56231
// exit ;
56229: GO 56379
// dist := 9999 ;
56231: LD_ADDR_VAR 0 5
56235: PUSH
56236: LD_INT 9999
56238: ST_TO_ADDR
// for i = 1 to hexes do
56239: LD_ADDR_VAR 0 4
56243: PUSH
56244: DOUBLE
56245: LD_INT 1
56247: DEC
56248: ST_TO_ADDR
56249: LD_VAR 0 2
56253: PUSH
56254: FOR_TO
56255: IFFALSE 56367
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56257: LD_VAR 0 1
56261: PPUSH
56262: LD_VAR 0 2
56266: PUSH
56267: LD_VAR 0 4
56271: ARRAY
56272: PUSH
56273: LD_INT 1
56275: ARRAY
56276: PPUSH
56277: LD_VAR 0 2
56281: PUSH
56282: LD_VAR 0 4
56286: ARRAY
56287: PUSH
56288: LD_INT 2
56290: ARRAY
56291: PPUSH
56292: CALL_OW 297
56296: PUSH
56297: LD_VAR 0 5
56301: LESS
56302: IFFALSE 56365
// begin hex := hexes [ i ] ;
56304: LD_ADDR_VAR 0 7
56308: PUSH
56309: LD_VAR 0 2
56313: PUSH
56314: LD_VAR 0 4
56318: ARRAY
56319: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56320: LD_ADDR_VAR 0 5
56324: PUSH
56325: LD_VAR 0 1
56329: PPUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_VAR 0 4
56339: ARRAY
56340: PUSH
56341: LD_INT 1
56343: ARRAY
56344: PPUSH
56345: LD_VAR 0 2
56349: PUSH
56350: LD_VAR 0 4
56354: ARRAY
56355: PUSH
56356: LD_INT 2
56358: ARRAY
56359: PPUSH
56360: CALL_OW 297
56364: ST_TO_ADDR
// end ; end ;
56365: GO 56254
56367: POP
56368: POP
// result := hex ;
56369: LD_ADDR_VAR 0 3
56373: PUSH
56374: LD_VAR 0 7
56378: ST_TO_ADDR
// end ;
56379: LD_VAR 0 3
56383: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56384: LD_INT 0
56386: PPUSH
56387: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56388: LD_VAR 0 1
56392: NOT
56393: PUSH
56394: LD_VAR 0 1
56398: PUSH
56399: LD_INT 21
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 23
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PPUSH
56423: CALL_OW 69
56427: IN
56428: NOT
56429: OR
56430: IFFALSE 56434
// exit ;
56432: GO 56481
// for i = 1 to 3 do
56434: LD_ADDR_VAR 0 3
56438: PUSH
56439: DOUBLE
56440: LD_INT 1
56442: DEC
56443: ST_TO_ADDR
56444: LD_INT 3
56446: PUSH
56447: FOR_TO
56448: IFFALSE 56479
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56450: LD_VAR 0 1
56454: PPUSH
56455: CALL_OW 250
56459: PPUSH
56460: LD_VAR 0 1
56464: PPUSH
56465: CALL_OW 251
56469: PPUSH
56470: LD_INT 1
56472: PPUSH
56473: CALL_OW 453
56477: GO 56447
56479: POP
56480: POP
// end ;
56481: LD_VAR 0 2
56485: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56486: LD_INT 0
56488: PPUSH
56489: PPUSH
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56494: LD_VAR 0 1
56498: NOT
56499: PUSH
56500: LD_VAR 0 2
56504: NOT
56505: OR
56506: PUSH
56507: LD_VAR 0 1
56511: PPUSH
56512: CALL_OW 314
56516: OR
56517: IFFALSE 56521
// exit ;
56519: GO 56962
// x := GetX ( enemy_unit ) ;
56521: LD_ADDR_VAR 0 7
56525: PUSH
56526: LD_VAR 0 2
56530: PPUSH
56531: CALL_OW 250
56535: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56536: LD_ADDR_VAR 0 8
56540: PUSH
56541: LD_VAR 0 2
56545: PPUSH
56546: CALL_OW 251
56550: ST_TO_ADDR
// if not x or not y then
56551: LD_VAR 0 7
56555: NOT
56556: PUSH
56557: LD_VAR 0 8
56561: NOT
56562: OR
56563: IFFALSE 56567
// exit ;
56565: GO 56962
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56567: LD_ADDR_VAR 0 6
56571: PUSH
56572: LD_VAR 0 7
56576: PPUSH
56577: LD_INT 0
56579: PPUSH
56580: LD_INT 4
56582: PPUSH
56583: CALL_OW 272
56587: PUSH
56588: LD_VAR 0 8
56592: PPUSH
56593: LD_INT 0
56595: PPUSH
56596: LD_INT 4
56598: PPUSH
56599: CALL_OW 273
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_VAR 0 7
56612: PPUSH
56613: LD_INT 1
56615: PPUSH
56616: LD_INT 4
56618: PPUSH
56619: CALL_OW 272
56623: PUSH
56624: LD_VAR 0 8
56628: PPUSH
56629: LD_INT 1
56631: PPUSH
56632: LD_INT 4
56634: PPUSH
56635: CALL_OW 273
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_VAR 0 7
56648: PPUSH
56649: LD_INT 2
56651: PPUSH
56652: LD_INT 4
56654: PPUSH
56655: CALL_OW 272
56659: PUSH
56660: LD_VAR 0 8
56664: PPUSH
56665: LD_INT 2
56667: PPUSH
56668: LD_INT 4
56670: PPUSH
56671: CALL_OW 273
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_VAR 0 7
56684: PPUSH
56685: LD_INT 3
56687: PPUSH
56688: LD_INT 4
56690: PPUSH
56691: CALL_OW 272
56695: PUSH
56696: LD_VAR 0 8
56700: PPUSH
56701: LD_INT 3
56703: PPUSH
56704: LD_INT 4
56706: PPUSH
56707: CALL_OW 273
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_VAR 0 7
56720: PPUSH
56721: LD_INT 4
56723: PPUSH
56724: LD_INT 4
56726: PPUSH
56727: CALL_OW 272
56731: PUSH
56732: LD_VAR 0 8
56736: PPUSH
56737: LD_INT 4
56739: PPUSH
56740: LD_INT 4
56742: PPUSH
56743: CALL_OW 273
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_VAR 0 7
56756: PPUSH
56757: LD_INT 5
56759: PPUSH
56760: LD_INT 4
56762: PPUSH
56763: CALL_OW 272
56767: PUSH
56768: LD_VAR 0 8
56772: PPUSH
56773: LD_INT 5
56775: PPUSH
56776: LD_INT 4
56778: PPUSH
56779: CALL_OW 273
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// for i = tmp downto 1 do
56796: LD_ADDR_VAR 0 4
56800: PUSH
56801: DOUBLE
56802: LD_VAR 0 6
56806: INC
56807: ST_TO_ADDR
56808: LD_INT 1
56810: PUSH
56811: FOR_DOWNTO
56812: IFFALSE 56913
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56814: LD_VAR 0 6
56818: PUSH
56819: LD_VAR 0 4
56823: ARRAY
56824: PUSH
56825: LD_INT 1
56827: ARRAY
56828: PPUSH
56829: LD_VAR 0 6
56833: PUSH
56834: LD_VAR 0 4
56838: ARRAY
56839: PUSH
56840: LD_INT 2
56842: ARRAY
56843: PPUSH
56844: CALL_OW 488
56848: NOT
56849: PUSH
56850: LD_VAR 0 6
56854: PUSH
56855: LD_VAR 0 4
56859: ARRAY
56860: PUSH
56861: LD_INT 1
56863: ARRAY
56864: PPUSH
56865: LD_VAR 0 6
56869: PUSH
56870: LD_VAR 0 4
56874: ARRAY
56875: PUSH
56876: LD_INT 2
56878: ARRAY
56879: PPUSH
56880: CALL_OW 428
56884: PUSH
56885: LD_INT 0
56887: NONEQUAL
56888: OR
56889: IFFALSE 56911
// tmp := Delete ( tmp , i ) ;
56891: LD_ADDR_VAR 0 6
56895: PUSH
56896: LD_VAR 0 6
56900: PPUSH
56901: LD_VAR 0 4
56905: PPUSH
56906: CALL_OW 3
56910: ST_TO_ADDR
56911: GO 56811
56913: POP
56914: POP
// j := GetClosestHex ( unit , tmp ) ;
56915: LD_ADDR_VAR 0 5
56919: PUSH
56920: LD_VAR 0 1
56924: PPUSH
56925: LD_VAR 0 6
56929: PPUSH
56930: CALL 56215 0 2
56934: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56935: LD_VAR 0 1
56939: PPUSH
56940: LD_VAR 0 5
56944: PUSH
56945: LD_INT 1
56947: ARRAY
56948: PPUSH
56949: LD_VAR 0 5
56953: PUSH
56954: LD_INT 2
56956: ARRAY
56957: PPUSH
56958: CALL_OW 111
// end ;
56962: LD_VAR 0 3
56966: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56967: LD_INT 0
56969: PPUSH
56970: PPUSH
56971: PPUSH
// uc_side = 0 ;
56972: LD_ADDR_OWVAR 20
56976: PUSH
56977: LD_INT 0
56979: ST_TO_ADDR
// uc_nation = 0 ;
56980: LD_ADDR_OWVAR 21
56984: PUSH
56985: LD_INT 0
56987: ST_TO_ADDR
// InitHc_All ( ) ;
56988: CALL_OW 584
// InitVc ;
56992: CALL_OW 20
// if mastodonts then
56996: LD_VAR 0 6
57000: IFFALSE 57067
// for i = 1 to mastodonts do
57002: LD_ADDR_VAR 0 11
57006: PUSH
57007: DOUBLE
57008: LD_INT 1
57010: DEC
57011: ST_TO_ADDR
57012: LD_VAR 0 6
57016: PUSH
57017: FOR_TO
57018: IFFALSE 57065
// begin vc_chassis := 31 ;
57020: LD_ADDR_OWVAR 37
57024: PUSH
57025: LD_INT 31
57027: ST_TO_ADDR
// vc_control := control_rider ;
57028: LD_ADDR_OWVAR 38
57032: PUSH
57033: LD_INT 4
57035: ST_TO_ADDR
// animal := CreateVehicle ;
57036: LD_ADDR_VAR 0 12
57040: PUSH
57041: CALL_OW 45
57045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57046: LD_VAR 0 12
57050: PPUSH
57051: LD_VAR 0 8
57055: PPUSH
57056: LD_INT 0
57058: PPUSH
57059: CALL 59255 0 3
// end ;
57063: GO 57017
57065: POP
57066: POP
// if horses then
57067: LD_VAR 0 5
57071: IFFALSE 57138
// for i = 1 to horses do
57073: LD_ADDR_VAR 0 11
57077: PUSH
57078: DOUBLE
57079: LD_INT 1
57081: DEC
57082: ST_TO_ADDR
57083: LD_VAR 0 5
57087: PUSH
57088: FOR_TO
57089: IFFALSE 57136
// begin hc_class := 21 ;
57091: LD_ADDR_OWVAR 28
57095: PUSH
57096: LD_INT 21
57098: ST_TO_ADDR
// hc_gallery :=  ;
57099: LD_ADDR_OWVAR 33
57103: PUSH
57104: LD_STRING 
57106: ST_TO_ADDR
// animal := CreateHuman ;
57107: LD_ADDR_VAR 0 12
57111: PUSH
57112: CALL_OW 44
57116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57117: LD_VAR 0 12
57121: PPUSH
57122: LD_VAR 0 8
57126: PPUSH
57127: LD_INT 0
57129: PPUSH
57130: CALL 59255 0 3
// end ;
57134: GO 57088
57136: POP
57137: POP
// if birds then
57138: LD_VAR 0 1
57142: IFFALSE 57209
// for i = 1 to birds do
57144: LD_ADDR_VAR 0 11
57148: PUSH
57149: DOUBLE
57150: LD_INT 1
57152: DEC
57153: ST_TO_ADDR
57154: LD_VAR 0 1
57158: PUSH
57159: FOR_TO
57160: IFFALSE 57207
// begin hc_class = 18 ;
57162: LD_ADDR_OWVAR 28
57166: PUSH
57167: LD_INT 18
57169: ST_TO_ADDR
// hc_gallery =  ;
57170: LD_ADDR_OWVAR 33
57174: PUSH
57175: LD_STRING 
57177: ST_TO_ADDR
// animal := CreateHuman ;
57178: LD_ADDR_VAR 0 12
57182: PUSH
57183: CALL_OW 44
57187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57188: LD_VAR 0 12
57192: PPUSH
57193: LD_VAR 0 8
57197: PPUSH
57198: LD_INT 0
57200: PPUSH
57201: CALL 59255 0 3
// end ;
57205: GO 57159
57207: POP
57208: POP
// if tigers then
57209: LD_VAR 0 2
57213: IFFALSE 57297
// for i = 1 to tigers do
57215: LD_ADDR_VAR 0 11
57219: PUSH
57220: DOUBLE
57221: LD_INT 1
57223: DEC
57224: ST_TO_ADDR
57225: LD_VAR 0 2
57229: PUSH
57230: FOR_TO
57231: IFFALSE 57295
// begin hc_class = class_tiger ;
57233: LD_ADDR_OWVAR 28
57237: PUSH
57238: LD_INT 14
57240: ST_TO_ADDR
// hc_gallery =  ;
57241: LD_ADDR_OWVAR 33
57245: PUSH
57246: LD_STRING 
57248: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57249: LD_ADDR_OWVAR 35
57253: PUSH
57254: LD_INT 7
57256: NEG
57257: PPUSH
57258: LD_INT 7
57260: PPUSH
57261: CALL_OW 12
57265: ST_TO_ADDR
// animal := CreateHuman ;
57266: LD_ADDR_VAR 0 12
57270: PUSH
57271: CALL_OW 44
57275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57276: LD_VAR 0 12
57280: PPUSH
57281: LD_VAR 0 8
57285: PPUSH
57286: LD_INT 0
57288: PPUSH
57289: CALL 59255 0 3
// end ;
57293: GO 57230
57295: POP
57296: POP
// if apemans then
57297: LD_VAR 0 3
57301: IFFALSE 57424
// for i = 1 to apemans do
57303: LD_ADDR_VAR 0 11
57307: PUSH
57308: DOUBLE
57309: LD_INT 1
57311: DEC
57312: ST_TO_ADDR
57313: LD_VAR 0 3
57317: PUSH
57318: FOR_TO
57319: IFFALSE 57422
// begin hc_class = class_apeman ;
57321: LD_ADDR_OWVAR 28
57325: PUSH
57326: LD_INT 12
57328: ST_TO_ADDR
// hc_gallery =  ;
57329: LD_ADDR_OWVAR 33
57333: PUSH
57334: LD_STRING 
57336: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57337: LD_ADDR_OWVAR 35
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PPUSH
57346: LD_INT 2
57348: PPUSH
57349: CALL_OW 12
57353: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57354: LD_ADDR_OWVAR 31
57358: PUSH
57359: LD_INT 1
57361: PPUSH
57362: LD_INT 3
57364: PPUSH
57365: CALL_OW 12
57369: PUSH
57370: LD_INT 1
57372: PPUSH
57373: LD_INT 3
57375: PPUSH
57376: CALL_OW 12
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// animal := CreateHuman ;
57393: LD_ADDR_VAR 0 12
57397: PUSH
57398: CALL_OW 44
57402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57403: LD_VAR 0 12
57407: PPUSH
57408: LD_VAR 0 8
57412: PPUSH
57413: LD_INT 0
57415: PPUSH
57416: CALL 59255 0 3
// end ;
57420: GO 57318
57422: POP
57423: POP
// if enchidnas then
57424: LD_VAR 0 4
57428: IFFALSE 57495
// for i = 1 to enchidnas do
57430: LD_ADDR_VAR 0 11
57434: PUSH
57435: DOUBLE
57436: LD_INT 1
57438: DEC
57439: ST_TO_ADDR
57440: LD_VAR 0 4
57444: PUSH
57445: FOR_TO
57446: IFFALSE 57493
// begin hc_class = 13 ;
57448: LD_ADDR_OWVAR 28
57452: PUSH
57453: LD_INT 13
57455: ST_TO_ADDR
// hc_gallery =  ;
57456: LD_ADDR_OWVAR 33
57460: PUSH
57461: LD_STRING 
57463: ST_TO_ADDR
// animal := CreateHuman ;
57464: LD_ADDR_VAR 0 12
57468: PUSH
57469: CALL_OW 44
57473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57474: LD_VAR 0 12
57478: PPUSH
57479: LD_VAR 0 8
57483: PPUSH
57484: LD_INT 0
57486: PPUSH
57487: CALL 59255 0 3
// end ;
57491: GO 57445
57493: POP
57494: POP
// if fishes then
57495: LD_VAR 0 7
57499: IFFALSE 57566
// for i = 1 to fishes do
57501: LD_ADDR_VAR 0 11
57505: PUSH
57506: DOUBLE
57507: LD_INT 1
57509: DEC
57510: ST_TO_ADDR
57511: LD_VAR 0 7
57515: PUSH
57516: FOR_TO
57517: IFFALSE 57564
// begin hc_class = 20 ;
57519: LD_ADDR_OWVAR 28
57523: PUSH
57524: LD_INT 20
57526: ST_TO_ADDR
// hc_gallery =  ;
57527: LD_ADDR_OWVAR 33
57531: PUSH
57532: LD_STRING 
57534: ST_TO_ADDR
// animal := CreateHuman ;
57535: LD_ADDR_VAR 0 12
57539: PUSH
57540: CALL_OW 44
57544: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57545: LD_VAR 0 12
57549: PPUSH
57550: LD_VAR 0 9
57554: PPUSH
57555: LD_INT 0
57557: PPUSH
57558: CALL 59255 0 3
// end ;
57562: GO 57516
57564: POP
57565: POP
// end ;
57566: LD_VAR 0 10
57570: RET
// export function WantHeal ( sci , unit ) ; begin
57571: LD_INT 0
57573: PPUSH
// if GetTaskList ( sci ) > 0 then
57574: LD_VAR 0 1
57578: PPUSH
57579: CALL_OW 437
57583: PUSH
57584: LD_INT 0
57586: GREATER
57587: IFFALSE 57657
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57589: LD_VAR 0 1
57593: PPUSH
57594: CALL_OW 437
57598: PUSH
57599: LD_INT 1
57601: ARRAY
57602: PUSH
57603: LD_INT 1
57605: ARRAY
57606: PUSH
57607: LD_STRING l
57609: EQUAL
57610: PUSH
57611: LD_VAR 0 1
57615: PPUSH
57616: CALL_OW 437
57620: PUSH
57621: LD_INT 1
57623: ARRAY
57624: PUSH
57625: LD_INT 4
57627: ARRAY
57628: PUSH
57629: LD_VAR 0 2
57633: EQUAL
57634: AND
57635: IFFALSE 57647
// result := true else
57637: LD_ADDR_VAR 0 3
57641: PUSH
57642: LD_INT 1
57644: ST_TO_ADDR
57645: GO 57655
// result := false ;
57647: LD_ADDR_VAR 0 3
57651: PUSH
57652: LD_INT 0
57654: ST_TO_ADDR
// end else
57655: GO 57665
// result := false ;
57657: LD_ADDR_VAR 0 3
57661: PUSH
57662: LD_INT 0
57664: ST_TO_ADDR
// end ;
57665: LD_VAR 0 3
57669: RET
// export function HealTarget ( sci ) ; begin
57670: LD_INT 0
57672: PPUSH
// if not sci then
57673: LD_VAR 0 1
57677: NOT
57678: IFFALSE 57682
// exit ;
57680: GO 57747
// result := 0 ;
57682: LD_ADDR_VAR 0 2
57686: PUSH
57687: LD_INT 0
57689: ST_TO_ADDR
// if GetTaskList ( sci ) then
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 437
57699: IFFALSE 57747
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57701: LD_VAR 0 1
57705: PPUSH
57706: CALL_OW 437
57710: PUSH
57711: LD_INT 1
57713: ARRAY
57714: PUSH
57715: LD_INT 1
57717: ARRAY
57718: PUSH
57719: LD_STRING l
57721: EQUAL
57722: IFFALSE 57747
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57724: LD_ADDR_VAR 0 2
57728: PUSH
57729: LD_VAR 0 1
57733: PPUSH
57734: CALL_OW 437
57738: PUSH
57739: LD_INT 1
57741: ARRAY
57742: PUSH
57743: LD_INT 4
57745: ARRAY
57746: ST_TO_ADDR
// end ;
57747: LD_VAR 0 2
57751: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57752: LD_INT 0
57754: PPUSH
57755: PPUSH
57756: PPUSH
57757: PPUSH
// if not base_units then
57758: LD_VAR 0 1
57762: NOT
57763: IFFALSE 57767
// exit ;
57765: GO 57854
// result := false ;
57767: LD_ADDR_VAR 0 2
57771: PUSH
57772: LD_INT 0
57774: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57775: LD_ADDR_VAR 0 5
57779: PUSH
57780: LD_VAR 0 1
57784: PPUSH
57785: LD_INT 21
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PPUSH
57795: CALL_OW 72
57799: ST_TO_ADDR
// if not tmp then
57800: LD_VAR 0 5
57804: NOT
57805: IFFALSE 57809
// exit ;
57807: GO 57854
// for i in tmp do
57809: LD_ADDR_VAR 0 3
57813: PUSH
57814: LD_VAR 0 5
57818: PUSH
57819: FOR_IN
57820: IFFALSE 57852
// begin result := EnemyInRange ( i , 22 ) ;
57822: LD_ADDR_VAR 0 2
57826: PUSH
57827: LD_VAR 0 3
57831: PPUSH
57832: LD_INT 22
57834: PPUSH
57835: CALL 56090 0 2
57839: ST_TO_ADDR
// if result then
57840: LD_VAR 0 2
57844: IFFALSE 57850
// exit ;
57846: POP
57847: POP
57848: GO 57854
// end ;
57850: GO 57819
57852: POP
57853: POP
// end ;
57854: LD_VAR 0 2
57858: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57859: LD_INT 0
57861: PPUSH
57862: PPUSH
// if not units then
57863: LD_VAR 0 1
57867: NOT
57868: IFFALSE 57872
// exit ;
57870: GO 57942
// result := [ ] ;
57872: LD_ADDR_VAR 0 3
57876: PUSH
57877: EMPTY
57878: ST_TO_ADDR
// for i in units do
57879: LD_ADDR_VAR 0 4
57883: PUSH
57884: LD_VAR 0 1
57888: PUSH
57889: FOR_IN
57890: IFFALSE 57940
// if GetTag ( i ) = tag then
57892: LD_VAR 0 4
57896: PPUSH
57897: CALL_OW 110
57901: PUSH
57902: LD_VAR 0 2
57906: EQUAL
57907: IFFALSE 57938
// result := Replace ( result , result + 1 , i ) ;
57909: LD_ADDR_VAR 0 3
57913: PUSH
57914: LD_VAR 0 3
57918: PPUSH
57919: LD_VAR 0 3
57923: PUSH
57924: LD_INT 1
57926: PLUS
57927: PPUSH
57928: LD_VAR 0 4
57932: PPUSH
57933: CALL_OW 1
57937: ST_TO_ADDR
57938: GO 57889
57940: POP
57941: POP
// end ;
57942: LD_VAR 0 3
57946: RET
// export function IsDriver ( un ) ; begin
57947: LD_INT 0
57949: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57950: LD_ADDR_VAR 0 2
57954: PUSH
57955: LD_VAR 0 1
57959: PUSH
57960: LD_INT 55
57962: PUSH
57963: EMPTY
57964: LIST
57965: PPUSH
57966: CALL_OW 69
57970: IN
57971: ST_TO_ADDR
// end ;
57972: LD_VAR 0 2
57976: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57977: LD_INT 0
57979: PPUSH
57980: PPUSH
// list := [ ] ;
57981: LD_ADDR_VAR 0 5
57985: PUSH
57986: EMPTY
57987: ST_TO_ADDR
// case d of 0 :
57988: LD_VAR 0 3
57992: PUSH
57993: LD_INT 0
57995: DOUBLE
57996: EQUAL
57997: IFTRUE 58001
57999: GO 58134
58001: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58002: LD_ADDR_VAR 0 5
58006: PUSH
58007: LD_VAR 0 1
58011: PUSH
58012: LD_INT 4
58014: MINUS
58015: PUSH
58016: LD_VAR 0 2
58020: PUSH
58021: LD_INT 4
58023: MINUS
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: PUSH
58033: LD_VAR 0 1
58037: PUSH
58038: LD_INT 3
58040: MINUS
58041: PUSH
58042: LD_VAR 0 2
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: PUSH
58055: LD_VAR 0 1
58059: PUSH
58060: LD_INT 4
58062: PLUS
58063: PUSH
58064: LD_VAR 0 2
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: LIST
58076: PUSH
58077: LD_VAR 0 1
58081: PUSH
58082: LD_INT 3
58084: PLUS
58085: PUSH
58086: LD_VAR 0 2
58090: PUSH
58091: LD_INT 3
58093: PLUS
58094: PUSH
58095: LD_INT 5
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: PUSH
58103: LD_VAR 0 1
58107: PUSH
58108: LD_VAR 0 2
58112: PUSH
58113: LD_INT 4
58115: PLUS
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: LIST
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// end ; 1 :
58132: GO 58832
58134: LD_INT 1
58136: DOUBLE
58137: EQUAL
58138: IFTRUE 58142
58140: GO 58275
58142: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58143: LD_ADDR_VAR 0 5
58147: PUSH
58148: LD_VAR 0 1
58152: PUSH
58153: LD_VAR 0 2
58157: PUSH
58158: LD_INT 4
58160: MINUS
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: LIST
58169: PUSH
58170: LD_VAR 0 1
58174: PUSH
58175: LD_INT 3
58177: MINUS
58178: PUSH
58179: LD_VAR 0 2
58183: PUSH
58184: LD_INT 3
58186: MINUS
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: PUSH
58196: LD_VAR 0 1
58200: PUSH
58201: LD_INT 4
58203: MINUS
58204: PUSH
58205: LD_VAR 0 2
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: PUSH
58218: LD_VAR 0 1
58222: PUSH
58223: LD_VAR 0 2
58227: PUSH
58228: LD_INT 3
58230: PLUS
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: PUSH
58240: LD_VAR 0 1
58244: PUSH
58245: LD_INT 4
58247: PLUS
58248: PUSH
58249: LD_VAR 0 2
58253: PUSH
58254: LD_INT 4
58256: PLUS
58257: PUSH
58258: LD_INT 5
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: ST_TO_ADDR
// end ; 2 :
58273: GO 58832
58275: LD_INT 2
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58283
58281: GO 58412
58283: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58284: LD_ADDR_VAR 0 5
58288: PUSH
58289: LD_VAR 0 1
58293: PUSH
58294: LD_VAR 0 2
58298: PUSH
58299: LD_INT 3
58301: MINUS
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: LIST
58310: PUSH
58311: LD_VAR 0 1
58315: PUSH
58316: LD_INT 4
58318: PLUS
58319: PUSH
58320: LD_VAR 0 2
58324: PUSH
58325: LD_INT 4
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: PUSH
58333: LD_VAR 0 1
58337: PUSH
58338: LD_VAR 0 2
58342: PUSH
58343: LD_INT 4
58345: PLUS
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: LD_INT 3
58362: MINUS
58363: PUSH
58364: LD_VAR 0 2
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: PUSH
58377: LD_VAR 0 1
58381: PUSH
58382: LD_INT 4
58384: MINUS
58385: PUSH
58386: LD_VAR 0 2
58390: PUSH
58391: LD_INT 4
58393: MINUS
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// end ; 3 :
58410: GO 58832
58412: LD_INT 3
58414: DOUBLE
58415: EQUAL
58416: IFTRUE 58420
58418: GO 58553
58420: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58421: LD_ADDR_VAR 0 5
58425: PUSH
58426: LD_VAR 0 1
58430: PUSH
58431: LD_INT 3
58433: PLUS
58434: PUSH
58435: LD_VAR 0 2
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 1
58452: PUSH
58453: LD_INT 4
58455: PLUS
58456: PUSH
58457: LD_VAR 0 2
58461: PUSH
58462: LD_INT 4
58464: PLUS
58465: PUSH
58466: LD_INT 5
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: PUSH
58474: LD_VAR 0 1
58478: PUSH
58479: LD_INT 4
58481: MINUS
58482: PUSH
58483: LD_VAR 0 2
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: PUSH
58496: LD_VAR 0 1
58500: PUSH
58501: LD_VAR 0 2
58505: PUSH
58506: LD_INT 4
58508: MINUS
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: LIST
58517: PUSH
58518: LD_VAR 0 1
58522: PUSH
58523: LD_INT 3
58525: MINUS
58526: PUSH
58527: LD_VAR 0 2
58531: PUSH
58532: LD_INT 3
58534: MINUS
58535: PUSH
58536: LD_INT 2
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// end ; 4 :
58551: GO 58832
58553: LD_INT 4
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58561
58559: GO 58694
58561: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58562: LD_ADDR_VAR 0 5
58566: PUSH
58567: LD_VAR 0 1
58571: PUSH
58572: LD_VAR 0 2
58576: PUSH
58577: LD_INT 4
58579: PLUS
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: PUSH
58589: LD_VAR 0 1
58593: PUSH
58594: LD_INT 3
58596: PLUS
58597: PUSH
58598: LD_VAR 0 2
58602: PUSH
58603: LD_INT 3
58605: PLUS
58606: PUSH
58607: LD_INT 5
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: PUSH
58615: LD_VAR 0 1
58619: PUSH
58620: LD_INT 4
58622: PLUS
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: PUSH
58637: LD_VAR 0 1
58641: PUSH
58642: LD_VAR 0 2
58646: PUSH
58647: LD_INT 3
58649: MINUS
58650: PUSH
58651: LD_INT 3
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: PUSH
58659: LD_VAR 0 1
58663: PUSH
58664: LD_INT 4
58666: MINUS
58667: PUSH
58668: LD_VAR 0 2
58672: PUSH
58673: LD_INT 4
58675: MINUS
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// end ; 5 :
58692: GO 58832
58694: LD_INT 5
58696: DOUBLE
58697: EQUAL
58698: IFTRUE 58702
58700: GO 58831
58702: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58703: LD_ADDR_VAR 0 5
58707: PUSH
58708: LD_VAR 0 1
58712: PUSH
58713: LD_INT 4
58715: MINUS
58716: PUSH
58717: LD_VAR 0 2
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: PUSH
58730: LD_VAR 0 1
58734: PUSH
58735: LD_VAR 0 2
58739: PUSH
58740: LD_INT 4
58742: MINUS
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: LIST
58751: PUSH
58752: LD_VAR 0 1
58756: PUSH
58757: LD_INT 4
58759: PLUS
58760: PUSH
58761: LD_VAR 0 2
58765: PUSH
58766: LD_INT 4
58768: PLUS
58769: PUSH
58770: LD_INT 5
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: PUSH
58778: LD_VAR 0 1
58782: PUSH
58783: LD_INT 3
58785: PLUS
58786: PUSH
58787: LD_VAR 0 2
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: LIST
58799: PUSH
58800: LD_VAR 0 1
58804: PUSH
58805: LD_VAR 0 2
58809: PUSH
58810: LD_INT 3
58812: PLUS
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// end ; end ;
58829: GO 58832
58831: POP
// result := list ;
58832: LD_ADDR_VAR 0 4
58836: PUSH
58837: LD_VAR 0 5
58841: ST_TO_ADDR
// end ;
58842: LD_VAR 0 4
58846: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58847: LD_INT 0
58849: PPUSH
58850: PPUSH
58851: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58852: LD_VAR 0 1
58856: NOT
58857: PUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: IN
58881: NOT
58882: OR
58883: IFFALSE 58887
// exit ;
58885: GO 58979
// tmp := [ ] ;
58887: LD_ADDR_VAR 0 5
58891: PUSH
58892: EMPTY
58893: ST_TO_ADDR
// for i in units do
58894: LD_ADDR_VAR 0 4
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: FOR_IN
58905: IFFALSE 58948
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58907: LD_ADDR_VAR 0 5
58911: PUSH
58912: LD_VAR 0 5
58916: PPUSH
58917: LD_VAR 0 5
58921: PUSH
58922: LD_INT 1
58924: PLUS
58925: PPUSH
58926: LD_VAR 0 4
58930: PPUSH
58931: LD_VAR 0 2
58935: PPUSH
58936: CALL_OW 259
58940: PPUSH
58941: CALL_OW 2
58945: ST_TO_ADDR
58946: GO 58904
58948: POP
58949: POP
// if not tmp then
58950: LD_VAR 0 5
58954: NOT
58955: IFFALSE 58959
// exit ;
58957: GO 58979
// result := SortListByListDesc ( units , tmp ) ;
58959: LD_ADDR_VAR 0 3
58963: PUSH
58964: LD_VAR 0 1
58968: PPUSH
58969: LD_VAR 0 5
58973: PPUSH
58974: CALL_OW 77
58978: ST_TO_ADDR
// end ;
58979: LD_VAR 0 3
58983: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58984: LD_INT 0
58986: PPUSH
58987: PPUSH
58988: PPUSH
// result := false ;
58989: LD_ADDR_VAR 0 3
58993: PUSH
58994: LD_INT 0
58996: ST_TO_ADDR
// x := GetX ( building ) ;
58997: LD_ADDR_VAR 0 4
59001: PUSH
59002: LD_VAR 0 2
59006: PPUSH
59007: CALL_OW 250
59011: ST_TO_ADDR
// y := GetY ( building ) ;
59012: LD_ADDR_VAR 0 5
59016: PUSH
59017: LD_VAR 0 2
59021: PPUSH
59022: CALL_OW 251
59026: ST_TO_ADDR
// if not building or not x or not y then
59027: LD_VAR 0 2
59031: NOT
59032: PUSH
59033: LD_VAR 0 4
59037: NOT
59038: OR
59039: PUSH
59040: LD_VAR 0 5
59044: NOT
59045: OR
59046: IFFALSE 59050
// exit ;
59048: GO 59142
// if GetTaskList ( unit ) then
59050: LD_VAR 0 1
59054: PPUSH
59055: CALL_OW 437
59059: IFFALSE 59142
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59061: LD_STRING e
59063: PUSH
59064: LD_VAR 0 1
59068: PPUSH
59069: CALL_OW 437
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PUSH
59078: LD_INT 1
59080: ARRAY
59081: EQUAL
59082: PUSH
59083: LD_VAR 0 4
59087: PUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: CALL_OW 437
59097: PUSH
59098: LD_INT 1
59100: ARRAY
59101: PUSH
59102: LD_INT 2
59104: ARRAY
59105: EQUAL
59106: AND
59107: PUSH
59108: LD_VAR 0 5
59112: PUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: CALL_OW 437
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PUSH
59127: LD_INT 3
59129: ARRAY
59130: EQUAL
59131: AND
59132: IFFALSE 59142
// result := true end ;
59134: LD_ADDR_VAR 0 3
59138: PUSH
59139: LD_INT 1
59141: ST_TO_ADDR
// end ;
59142: LD_VAR 0 3
59146: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59147: LD_INT 0
59149: PPUSH
// result := false ;
59150: LD_ADDR_VAR 0 4
59154: PUSH
59155: LD_INT 0
59157: ST_TO_ADDR
// if GetTaskList ( unit ) then
59158: LD_VAR 0 1
59162: PPUSH
59163: CALL_OW 437
59167: IFFALSE 59250
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59169: LD_STRING M
59171: PUSH
59172: LD_VAR 0 1
59176: PPUSH
59177: CALL_OW 437
59181: PUSH
59182: LD_INT 1
59184: ARRAY
59185: PUSH
59186: LD_INT 1
59188: ARRAY
59189: EQUAL
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_VAR 0 1
59200: PPUSH
59201: CALL_OW 437
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PUSH
59210: LD_INT 2
59212: ARRAY
59213: EQUAL
59214: AND
59215: PUSH
59216: LD_VAR 0 3
59220: PUSH
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL_OW 437
59230: PUSH
59231: LD_INT 1
59233: ARRAY
59234: PUSH
59235: LD_INT 3
59237: ARRAY
59238: EQUAL
59239: AND
59240: IFFALSE 59250
// result := true ;
59242: LD_ADDR_VAR 0 4
59246: PUSH
59247: LD_INT 1
59249: ST_TO_ADDR
// end ; end ;
59250: LD_VAR 0 4
59254: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59255: LD_INT 0
59257: PPUSH
59258: PPUSH
59259: PPUSH
59260: PPUSH
// if not unit or not area then
59261: LD_VAR 0 1
59265: NOT
59266: PUSH
59267: LD_VAR 0 2
59271: NOT
59272: OR
59273: IFFALSE 59277
// exit ;
59275: GO 59441
// tmp := AreaToList ( area , i ) ;
59277: LD_ADDR_VAR 0 6
59281: PUSH
59282: LD_VAR 0 2
59286: PPUSH
59287: LD_VAR 0 5
59291: PPUSH
59292: CALL_OW 517
59296: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59297: LD_ADDR_VAR 0 5
59301: PUSH
59302: DOUBLE
59303: LD_INT 1
59305: DEC
59306: ST_TO_ADDR
59307: LD_VAR 0 6
59311: PUSH
59312: LD_INT 1
59314: ARRAY
59315: PUSH
59316: FOR_TO
59317: IFFALSE 59439
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59319: LD_ADDR_VAR 0 7
59323: PUSH
59324: LD_VAR 0 6
59328: PUSH
59329: LD_INT 1
59331: ARRAY
59332: PUSH
59333: LD_VAR 0 5
59337: ARRAY
59338: PUSH
59339: LD_VAR 0 6
59343: PUSH
59344: LD_INT 2
59346: ARRAY
59347: PUSH
59348: LD_VAR 0 5
59352: ARRAY
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59358: LD_VAR 0 7
59362: PUSH
59363: LD_INT 1
59365: ARRAY
59366: PPUSH
59367: LD_VAR 0 7
59371: PUSH
59372: LD_INT 2
59374: ARRAY
59375: PPUSH
59376: CALL_OW 428
59380: PUSH
59381: LD_INT 0
59383: EQUAL
59384: IFFALSE 59437
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59386: LD_VAR 0 1
59390: PPUSH
59391: LD_VAR 0 7
59395: PUSH
59396: LD_INT 1
59398: ARRAY
59399: PPUSH
59400: LD_VAR 0 7
59404: PUSH
59405: LD_INT 2
59407: ARRAY
59408: PPUSH
59409: LD_VAR 0 3
59413: PPUSH
59414: CALL_OW 48
// result := IsPlaced ( unit ) ;
59418: LD_ADDR_VAR 0 4
59422: PUSH
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 305
59432: ST_TO_ADDR
// exit ;
59433: POP
59434: POP
59435: GO 59441
// end ; end ;
59437: GO 59316
59439: POP
59440: POP
// end ;
59441: LD_VAR 0 4
59445: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59446: LD_INT 0
59448: PPUSH
59449: PPUSH
59450: PPUSH
// if not side or side > 8 then
59451: LD_VAR 0 1
59455: NOT
59456: PUSH
59457: LD_VAR 0 1
59461: PUSH
59462: LD_INT 8
59464: GREATER
59465: OR
59466: IFFALSE 59470
// exit ;
59468: GO 59657
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59470: LD_ADDR_VAR 0 4
59474: PUSH
59475: LD_INT 22
59477: PUSH
59478: LD_VAR 0 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 21
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PPUSH
59501: CALL_OW 69
59505: ST_TO_ADDR
// if not tmp then
59506: LD_VAR 0 4
59510: NOT
59511: IFFALSE 59515
// exit ;
59513: GO 59657
// enable_addtolog := true ;
59515: LD_ADDR_OWVAR 81
59519: PUSH
59520: LD_INT 1
59522: ST_TO_ADDR
// AddToLog ( [ ) ;
59523: LD_STRING [
59525: PPUSH
59526: CALL_OW 561
// for i in tmp do
59530: LD_ADDR_VAR 0 3
59534: PUSH
59535: LD_VAR 0 4
59539: PUSH
59540: FOR_IN
59541: IFFALSE 59648
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59543: LD_STRING [
59545: PUSH
59546: LD_VAR 0 3
59550: PPUSH
59551: CALL_OW 266
59555: STR
59556: PUSH
59557: LD_STRING , 
59559: STR
59560: PUSH
59561: LD_VAR 0 3
59565: PPUSH
59566: CALL_OW 250
59570: STR
59571: PUSH
59572: LD_STRING , 
59574: STR
59575: PUSH
59576: LD_VAR 0 3
59580: PPUSH
59581: CALL_OW 251
59585: STR
59586: PUSH
59587: LD_STRING , 
59589: STR
59590: PUSH
59591: LD_VAR 0 3
59595: PPUSH
59596: CALL_OW 254
59600: STR
59601: PUSH
59602: LD_STRING , 
59604: STR
59605: PUSH
59606: LD_VAR 0 3
59610: PPUSH
59611: LD_INT 1
59613: PPUSH
59614: CALL_OW 268
59618: STR
59619: PUSH
59620: LD_STRING , 
59622: STR
59623: PUSH
59624: LD_VAR 0 3
59628: PPUSH
59629: LD_INT 2
59631: PPUSH
59632: CALL_OW 268
59636: STR
59637: PUSH
59638: LD_STRING ],
59640: STR
59641: PPUSH
59642: CALL_OW 561
// end ;
59646: GO 59540
59648: POP
59649: POP
// AddToLog ( ]; ) ;
59650: LD_STRING ];
59652: PPUSH
59653: CALL_OW 561
// end ;
59657: LD_VAR 0 2
59661: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59662: LD_INT 0
59664: PPUSH
59665: PPUSH
59666: PPUSH
59667: PPUSH
59668: PPUSH
// if not area or not rate or not max then
59669: LD_VAR 0 1
59673: NOT
59674: PUSH
59675: LD_VAR 0 2
59679: NOT
59680: OR
59681: PUSH
59682: LD_VAR 0 4
59686: NOT
59687: OR
59688: IFFALSE 59692
// exit ;
59690: GO 59884
// while 1 do
59692: LD_INT 1
59694: IFFALSE 59884
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59696: LD_ADDR_VAR 0 9
59700: PUSH
59701: LD_VAR 0 1
59705: PPUSH
59706: LD_INT 1
59708: PPUSH
59709: CALL_OW 287
59713: PUSH
59714: LD_INT 10
59716: MUL
59717: ST_TO_ADDR
// r := rate / 10 ;
59718: LD_ADDR_VAR 0 7
59722: PUSH
59723: LD_VAR 0 2
59727: PUSH
59728: LD_INT 10
59730: DIVREAL
59731: ST_TO_ADDR
// time := 1 1$00 ;
59732: LD_ADDR_VAR 0 8
59736: PUSH
59737: LD_INT 2100
59739: ST_TO_ADDR
// if amount < min then
59740: LD_VAR 0 9
59744: PUSH
59745: LD_VAR 0 3
59749: LESS
59750: IFFALSE 59768
// r := r * 2 else
59752: LD_ADDR_VAR 0 7
59756: PUSH
59757: LD_VAR 0 7
59761: PUSH
59762: LD_INT 2
59764: MUL
59765: ST_TO_ADDR
59766: GO 59794
// if amount > max then
59768: LD_VAR 0 9
59772: PUSH
59773: LD_VAR 0 4
59777: GREATER
59778: IFFALSE 59794
// r := r / 2 ;
59780: LD_ADDR_VAR 0 7
59784: PUSH
59785: LD_VAR 0 7
59789: PUSH
59790: LD_INT 2
59792: DIVREAL
59793: ST_TO_ADDR
// time := time / r ;
59794: LD_ADDR_VAR 0 8
59798: PUSH
59799: LD_VAR 0 8
59803: PUSH
59804: LD_VAR 0 7
59808: DIVREAL
59809: ST_TO_ADDR
// if time < 0 then
59810: LD_VAR 0 8
59814: PUSH
59815: LD_INT 0
59817: LESS
59818: IFFALSE 59835
// time := time * - 1 ;
59820: LD_ADDR_VAR 0 8
59824: PUSH
59825: LD_VAR 0 8
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: MUL
59834: ST_TO_ADDR
// wait ( time ) ;
59835: LD_VAR 0 8
59839: PPUSH
59840: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59844: LD_INT 35
59846: PPUSH
59847: LD_INT 875
59849: PPUSH
59850: CALL_OW 12
59854: PPUSH
59855: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59859: LD_INT 1
59861: PPUSH
59862: LD_INT 5
59864: PPUSH
59865: CALL_OW 12
59869: PPUSH
59870: LD_VAR 0 1
59874: PPUSH
59875: LD_INT 1
59877: PPUSH
59878: CALL_OW 55
// end ;
59882: GO 59692
// end ;
59884: LD_VAR 0 5
59888: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
59893: PPUSH
59894: PPUSH
59895: PPUSH
59896: PPUSH
59897: PPUSH
59898: PPUSH
// if not turrets or not factories then
59899: LD_VAR 0 1
59903: NOT
59904: PUSH
59905: LD_VAR 0 2
59909: NOT
59910: OR
59911: IFFALSE 59915
// exit ;
59913: GO 60222
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59915: LD_ADDR_VAR 0 10
59919: PUSH
59920: LD_INT 5
59922: PUSH
59923: LD_INT 6
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: LD_INT 5
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 24
59957: PUSH
59958: LD_INT 25
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 23
59967: PUSH
59968: LD_INT 27
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 42
59981: PUSH
59982: LD_INT 43
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 44
59991: PUSH
59992: LD_INT 46
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 45
60001: PUSH
60002: LD_INT 47
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// result := [ ] ;
60019: LD_ADDR_VAR 0 3
60023: PUSH
60024: EMPTY
60025: ST_TO_ADDR
// for i in turrets do
60026: LD_ADDR_VAR 0 4
60030: PUSH
60031: LD_VAR 0 1
60035: PUSH
60036: FOR_IN
60037: IFFALSE 60220
// begin nat := GetNation ( i ) ;
60039: LD_ADDR_VAR 0 7
60043: PUSH
60044: LD_VAR 0 4
60048: PPUSH
60049: CALL_OW 248
60053: ST_TO_ADDR
// weapon := 0 ;
60054: LD_ADDR_VAR 0 8
60058: PUSH
60059: LD_INT 0
60061: ST_TO_ADDR
// if not nat then
60062: LD_VAR 0 7
60066: NOT
60067: IFFALSE 60071
// continue ;
60069: GO 60036
// for j in list [ nat ] do
60071: LD_ADDR_VAR 0 5
60075: PUSH
60076: LD_VAR 0 10
60080: PUSH
60081: LD_VAR 0 7
60085: ARRAY
60086: PUSH
60087: FOR_IN
60088: IFFALSE 60129
// if GetBWeapon ( i ) = j [ 1 ] then
60090: LD_VAR 0 4
60094: PPUSH
60095: CALL_OW 269
60099: PUSH
60100: LD_VAR 0 5
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: EQUAL
60109: IFFALSE 60127
// begin weapon := j [ 2 ] ;
60111: LD_ADDR_VAR 0 8
60115: PUSH
60116: LD_VAR 0 5
60120: PUSH
60121: LD_INT 2
60123: ARRAY
60124: ST_TO_ADDR
// break ;
60125: GO 60129
// end ;
60127: GO 60087
60129: POP
60130: POP
// if not weapon then
60131: LD_VAR 0 8
60135: NOT
60136: IFFALSE 60140
// continue ;
60138: GO 60036
// for k in factories do
60140: LD_ADDR_VAR 0 6
60144: PUSH
60145: LD_VAR 0 2
60149: PUSH
60150: FOR_IN
60151: IFFALSE 60216
// begin weapons := AvailableWeaponList ( k ) ;
60153: LD_ADDR_VAR 0 9
60157: PUSH
60158: LD_VAR 0 6
60162: PPUSH
60163: CALL_OW 478
60167: ST_TO_ADDR
// if not weapons then
60168: LD_VAR 0 9
60172: NOT
60173: IFFALSE 60177
// continue ;
60175: GO 60150
// if weapon in weapons then
60177: LD_VAR 0 8
60181: PUSH
60182: LD_VAR 0 9
60186: IN
60187: IFFALSE 60214
// begin result := [ i , weapon ] ;
60189: LD_ADDR_VAR 0 3
60193: PUSH
60194: LD_VAR 0 4
60198: PUSH
60199: LD_VAR 0 8
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// exit ;
60208: POP
60209: POP
60210: POP
60211: POP
60212: GO 60222
// end ; end ;
60214: GO 60150
60216: POP
60217: POP
// end ;
60218: GO 60036
60220: POP
60221: POP
// end ;
60222: LD_VAR 0 3
60226: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60227: LD_INT 0
60229: PPUSH
// if not side or side > 8 then
60230: LD_VAR 0 3
60234: NOT
60235: PUSH
60236: LD_VAR 0 3
60240: PUSH
60241: LD_INT 8
60243: GREATER
60244: OR
60245: IFFALSE 60249
// exit ;
60247: GO 60308
// if not range then
60249: LD_VAR 0 4
60253: NOT
60254: IFFALSE 60265
// range := - 12 ;
60256: LD_ADDR_VAR 0 4
60260: PUSH
60261: LD_INT 12
60263: NEG
60264: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60265: LD_VAR 0 1
60269: PPUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: LD_VAR 0 3
60279: PPUSH
60280: LD_VAR 0 4
60284: PPUSH
60285: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60289: LD_VAR 0 1
60293: PPUSH
60294: LD_VAR 0 2
60298: PPUSH
60299: LD_VAR 0 3
60303: PPUSH
60304: CALL_OW 331
// end ;
60308: LD_VAR 0 5
60312: RET
// export function Video ( mode ) ; begin
60313: LD_INT 0
60315: PPUSH
// ingame_video = mode ;
60316: LD_ADDR_OWVAR 52
60320: PUSH
60321: LD_VAR 0 1
60325: ST_TO_ADDR
// interface_hidden = mode ;
60326: LD_ADDR_OWVAR 54
60330: PUSH
60331: LD_VAR 0 1
60335: ST_TO_ADDR
// end ;
60336: LD_VAR 0 2
60340: RET
// export function Join ( array , element ) ; begin
60341: LD_INT 0
60343: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60344: LD_ADDR_VAR 0 3
60348: PUSH
60349: LD_VAR 0 1
60353: PPUSH
60354: LD_VAR 0 1
60358: PUSH
60359: LD_INT 1
60361: PLUS
60362: PPUSH
60363: LD_VAR 0 2
60367: PPUSH
60368: CALL_OW 1
60372: ST_TO_ADDR
// end ;
60373: LD_VAR 0 3
60377: RET
// export function JoinUnion ( array , element ) ; begin
60378: LD_INT 0
60380: PPUSH
// result := array union element ;
60381: LD_ADDR_VAR 0 3
60385: PUSH
60386: LD_VAR 0 1
60390: PUSH
60391: LD_VAR 0 2
60395: UNION
60396: ST_TO_ADDR
// end ;
60397: LD_VAR 0 3
60401: RET
// export function GetBehemoths ( side ) ; begin
60402: LD_INT 0
60404: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60405: LD_ADDR_VAR 0 2
60409: PUSH
60410: LD_INT 22
60412: PUSH
60413: LD_VAR 0 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 31
60424: PUSH
60425: LD_INT 25
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PPUSH
60436: CALL_OW 69
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 2
60445: RET
// export function Shuffle ( array ) ; var i , index ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
// result := [ ] ;
60451: LD_ADDR_VAR 0 2
60455: PUSH
60456: EMPTY
60457: ST_TO_ADDR
// if not array then
60458: LD_VAR 0 1
60462: NOT
60463: IFFALSE 60467
// exit ;
60465: GO 60566
// Randomize ;
60467: CALL_OW 10
// for i = array downto 1 do
60471: LD_ADDR_VAR 0 3
60475: PUSH
60476: DOUBLE
60477: LD_VAR 0 1
60481: INC
60482: ST_TO_ADDR
60483: LD_INT 1
60485: PUSH
60486: FOR_DOWNTO
60487: IFFALSE 60564
// begin index := rand ( 1 , array ) ;
60489: LD_ADDR_VAR 0 4
60493: PUSH
60494: LD_INT 1
60496: PPUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL_OW 12
60506: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 2
60516: PPUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 1
60524: PLUS
60525: PPUSH
60526: LD_VAR 0 1
60530: PUSH
60531: LD_VAR 0 4
60535: ARRAY
60536: PPUSH
60537: CALL_OW 2
60541: ST_TO_ADDR
// array := Delete ( array , index ) ;
60542: LD_ADDR_VAR 0 1
60546: PUSH
60547: LD_VAR 0 1
60551: PPUSH
60552: LD_VAR 0 4
60556: PPUSH
60557: CALL_OW 3
60561: ST_TO_ADDR
// end ;
60562: GO 60486
60564: POP
60565: POP
// end ;
60566: LD_VAR 0 2
60570: RET
// export function GetBaseMaterials ( base ) ; begin
60571: LD_INT 0
60573: PPUSH
// result := [ 0 , 0 , 0 ] ;
60574: LD_ADDR_VAR 0 2
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// if not base then
60593: LD_VAR 0 1
60597: NOT
60598: IFFALSE 60602
// exit ;
60600: GO 60651
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60602: LD_ADDR_VAR 0 2
60606: PUSH
60607: LD_VAR 0 1
60611: PPUSH
60612: LD_INT 1
60614: PPUSH
60615: CALL_OW 275
60619: PUSH
60620: LD_VAR 0 1
60624: PPUSH
60625: LD_INT 2
60627: PPUSH
60628: CALL_OW 275
60632: PUSH
60633: LD_VAR 0 1
60637: PPUSH
60638: LD_INT 3
60640: PPUSH
60641: CALL_OW 275
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: ST_TO_ADDR
// end ;
60651: LD_VAR 0 2
60655: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60656: LD_INT 0
60658: PPUSH
60659: PPUSH
// result := array ;
60660: LD_ADDR_VAR 0 3
60664: PUSH
60665: LD_VAR 0 1
60669: ST_TO_ADDR
// if size > 0 then
60670: LD_VAR 0 2
60674: PUSH
60675: LD_INT 0
60677: GREATER
60678: IFFALSE 60724
// for i := array downto size do
60680: LD_ADDR_VAR 0 4
60684: PUSH
60685: DOUBLE
60686: LD_VAR 0 1
60690: INC
60691: ST_TO_ADDR
60692: LD_VAR 0 2
60696: PUSH
60697: FOR_DOWNTO
60698: IFFALSE 60722
// result := Delete ( result , result ) ;
60700: LD_ADDR_VAR 0 3
60704: PUSH
60705: LD_VAR 0 3
60709: PPUSH
60710: LD_VAR 0 3
60714: PPUSH
60715: CALL_OW 3
60719: ST_TO_ADDR
60720: GO 60697
60722: POP
60723: POP
// end ;
60724: LD_VAR 0 3
60728: RET
// export function ComExit ( unit ) ; var tmp ; begin
60729: LD_INT 0
60731: PPUSH
60732: PPUSH
// if not IsInUnit ( unit ) then
60733: LD_VAR 0 1
60737: PPUSH
60738: CALL_OW 310
60742: NOT
60743: IFFALSE 60747
// exit ;
60745: GO 60807
// tmp := IsInUnit ( unit ) ;
60747: LD_ADDR_VAR 0 3
60751: PUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL_OW 310
60761: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60762: LD_VAR 0 3
60766: PPUSH
60767: CALL_OW 247
60771: PUSH
60772: LD_INT 2
60774: EQUAL
60775: IFFALSE 60788
// ComExitVehicle ( unit ) else
60777: LD_VAR 0 1
60781: PPUSH
60782: CALL_OW 121
60786: GO 60797
// ComExitBuilding ( unit ) ;
60788: LD_VAR 0 1
60792: PPUSH
60793: CALL_OW 122
// result := tmp ;
60797: LD_ADDR_VAR 0 2
60801: PUSH
60802: LD_VAR 0 3
60806: ST_TO_ADDR
// end ;
60807: LD_VAR 0 2
60811: RET
// export function ComExitAll ( units ) ; var i ; begin
60812: LD_INT 0
60814: PPUSH
60815: PPUSH
// if not units then
60816: LD_VAR 0 1
60820: NOT
60821: IFFALSE 60825
// exit ;
60823: GO 60851
// for i in units do
60825: LD_ADDR_VAR 0 3
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: FOR_IN
60836: IFFALSE 60849
// ComExit ( i ) ;
60838: LD_VAR 0 3
60842: PPUSH
60843: CALL 60729 0 1
60847: GO 60835
60849: POP
60850: POP
// end ;
60851: LD_VAR 0 2
60855: RET
// export function ResetHc ; begin
60856: LD_INT 0
60858: PPUSH
// InitHc ;
60859: CALL_OW 19
// hc_importance := 0 ;
60863: LD_ADDR_OWVAR 32
60867: PUSH
60868: LD_INT 0
60870: ST_TO_ADDR
// end ;
60871: LD_VAR 0 1
60875: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60876: LD_INT 0
60878: PPUSH
60879: PPUSH
60880: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60881: LD_ADDR_VAR 0 6
60885: PUSH
60886: LD_VAR 0 1
60890: PUSH
60891: LD_VAR 0 3
60895: PLUS
60896: PUSH
60897: LD_INT 2
60899: DIV
60900: ST_TO_ADDR
// if _x < 0 then
60901: LD_VAR 0 6
60905: PUSH
60906: LD_INT 0
60908: LESS
60909: IFFALSE 60926
// _x := _x * - 1 ;
60911: LD_ADDR_VAR 0 6
60915: PUSH
60916: LD_VAR 0 6
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: MUL
60925: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60926: LD_ADDR_VAR 0 7
60930: PUSH
60931: LD_VAR 0 2
60935: PUSH
60936: LD_VAR 0 4
60940: PLUS
60941: PUSH
60942: LD_INT 2
60944: DIV
60945: ST_TO_ADDR
// if _y < 0 then
60946: LD_VAR 0 7
60950: PUSH
60951: LD_INT 0
60953: LESS
60954: IFFALSE 60971
// _y := _y * - 1 ;
60956: LD_ADDR_VAR 0 7
60960: PUSH
60961: LD_VAR 0 7
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: MUL
60970: ST_TO_ADDR
// result := [ _x , _y ] ;
60971: LD_ADDR_VAR 0 5
60975: PUSH
60976: LD_VAR 0 6
60980: PUSH
60981: LD_VAR 0 7
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// end ;
60990: LD_VAR 0 5
60994: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60995: LD_INT 0
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
// task := GetTaskList ( unit ) ;
61001: LD_ADDR_VAR 0 7
61005: PUSH
61006: LD_VAR 0 1
61010: PPUSH
61011: CALL_OW 437
61015: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61016: LD_VAR 0 7
61020: NOT
61021: PUSH
61022: LD_VAR 0 1
61026: PPUSH
61027: LD_VAR 0 2
61031: PPUSH
61032: CALL_OW 308
61036: NOT
61037: AND
61038: IFFALSE 61042
// exit ;
61040: GO 61160
// if IsInArea ( unit , area ) then
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_VAR 0 2
61051: PPUSH
61052: CALL_OW 308
61056: IFFALSE 61074
// begin ComMoveToArea ( unit , goAway ) ;
61058: LD_VAR 0 1
61062: PPUSH
61063: LD_VAR 0 3
61067: PPUSH
61068: CALL_OW 113
// exit ;
61072: GO 61160
// end ; if task [ 1 ] [ 1 ] <> M then
61074: LD_VAR 0 7
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PUSH
61083: LD_INT 1
61085: ARRAY
61086: PUSH
61087: LD_STRING M
61089: NONEQUAL
61090: IFFALSE 61094
// exit ;
61092: GO 61160
// x := task [ 1 ] [ 2 ] ;
61094: LD_ADDR_VAR 0 5
61098: PUSH
61099: LD_VAR 0 7
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PUSH
61108: LD_INT 2
61110: ARRAY
61111: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61112: LD_ADDR_VAR 0 6
61116: PUSH
61117: LD_VAR 0 7
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PUSH
61126: LD_INT 3
61128: ARRAY
61129: ST_TO_ADDR
// if InArea ( x , y , area ) then
61130: LD_VAR 0 5
61134: PPUSH
61135: LD_VAR 0 6
61139: PPUSH
61140: LD_VAR 0 2
61144: PPUSH
61145: CALL_OW 309
61149: IFFALSE 61160
// ComStop ( unit ) ;
61151: LD_VAR 0 1
61155: PPUSH
61156: CALL_OW 141
// end ;
61160: LD_VAR 0 4
61164: RET
// export function Abs ( value ) ; begin
61165: LD_INT 0
61167: PPUSH
// result := value ;
61168: LD_ADDR_VAR 0 2
61172: PUSH
61173: LD_VAR 0 1
61177: ST_TO_ADDR
// if value < 0 then
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 0
61185: LESS
61186: IFFALSE 61203
// result := value * - 1 ;
61188: LD_ADDR_VAR 0 2
61192: PUSH
61193: LD_VAR 0 1
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: MUL
61202: ST_TO_ADDR
// end ;
61203: LD_VAR 0 2
61207: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61208: LD_INT 0
61210: PPUSH
61211: PPUSH
61212: PPUSH
61213: PPUSH
61214: PPUSH
61215: PPUSH
61216: PPUSH
61217: PPUSH
// if not unit or not building then
61218: LD_VAR 0 1
61222: NOT
61223: PUSH
61224: LD_VAR 0 2
61228: NOT
61229: OR
61230: IFFALSE 61234
// exit ;
61232: GO 61460
// x := GetX ( building ) ;
61234: LD_ADDR_VAR 0 4
61238: PUSH
61239: LD_VAR 0 2
61243: PPUSH
61244: CALL_OW 250
61248: ST_TO_ADDR
// y := GetY ( building ) ;
61249: LD_ADDR_VAR 0 6
61253: PUSH
61254: LD_VAR 0 2
61258: PPUSH
61259: CALL_OW 251
61263: ST_TO_ADDR
// d := GetDir ( building ) ;
61264: LD_ADDR_VAR 0 8
61268: PUSH
61269: LD_VAR 0 2
61273: PPUSH
61274: CALL_OW 254
61278: ST_TO_ADDR
// r := 4 ;
61279: LD_ADDR_VAR 0 9
61283: PUSH
61284: LD_INT 4
61286: ST_TO_ADDR
// for i := 1 to 5 do
61287: LD_ADDR_VAR 0 10
61291: PUSH
61292: DOUBLE
61293: LD_INT 1
61295: DEC
61296: ST_TO_ADDR
61297: LD_INT 5
61299: PUSH
61300: FOR_TO
61301: IFFALSE 61458
// begin _x := ShiftX ( x , d , r + i ) ;
61303: LD_ADDR_VAR 0 5
61307: PUSH
61308: LD_VAR 0 4
61312: PPUSH
61313: LD_VAR 0 8
61317: PPUSH
61318: LD_VAR 0 9
61322: PUSH
61323: LD_VAR 0 10
61327: PLUS
61328: PPUSH
61329: CALL_OW 272
61333: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61334: LD_ADDR_VAR 0 7
61338: PUSH
61339: LD_VAR 0 6
61343: PPUSH
61344: LD_VAR 0 8
61348: PPUSH
61349: LD_VAR 0 9
61353: PUSH
61354: LD_VAR 0 10
61358: PLUS
61359: PPUSH
61360: CALL_OW 273
61364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61365: LD_VAR 0 5
61369: PPUSH
61370: LD_VAR 0 7
61374: PPUSH
61375: CALL_OW 488
61379: PUSH
61380: LD_VAR 0 5
61384: PPUSH
61385: LD_VAR 0 7
61389: PPUSH
61390: CALL_OW 428
61394: PPUSH
61395: CALL_OW 247
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 2
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: IN
61410: NOT
61411: AND
61412: IFFALSE 61456
// begin ComMoveXY ( unit , _x , _y ) ;
61414: LD_VAR 0 1
61418: PPUSH
61419: LD_VAR 0 5
61423: PPUSH
61424: LD_VAR 0 7
61428: PPUSH
61429: CALL_OW 111
// result := [ _x , _y ] ;
61433: LD_ADDR_VAR 0 3
61437: PUSH
61438: LD_VAR 0 5
61442: PUSH
61443: LD_VAR 0 7
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// exit ;
61452: POP
61453: POP
61454: GO 61460
// end ; end ;
61456: GO 61300
61458: POP
61459: POP
// end ;
61460: LD_VAR 0 3
61464: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
61469: PPUSH
// result := 0 ;
61470: LD_ADDR_VAR 0 3
61474: PUSH
61475: LD_INT 0
61477: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61478: LD_VAR 0 1
61482: PUSH
61483: LD_INT 0
61485: LESS
61486: PUSH
61487: LD_VAR 0 1
61491: PUSH
61492: LD_INT 8
61494: GREATER
61495: OR
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_INT 0
61504: LESS
61505: OR
61506: PUSH
61507: LD_VAR 0 2
61511: PUSH
61512: LD_INT 8
61514: GREATER
61515: OR
61516: IFFALSE 61520
// exit ;
61518: GO 61595
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61520: LD_ADDR_VAR 0 4
61524: PUSH
61525: LD_INT 22
61527: PUSH
61528: LD_VAR 0 2
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PPUSH
61537: CALL_OW 69
61541: PUSH
61542: FOR_IN
61543: IFFALSE 61593
// begin un := UnitShoot ( i ) ;
61545: LD_ADDR_VAR 0 5
61549: PUSH
61550: LD_VAR 0 4
61554: PPUSH
61555: CALL_OW 504
61559: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61560: LD_VAR 0 5
61564: PPUSH
61565: CALL_OW 255
61569: PUSH
61570: LD_VAR 0 1
61574: EQUAL
61575: IFFALSE 61591
// begin result := un ;
61577: LD_ADDR_VAR 0 3
61581: PUSH
61582: LD_VAR 0 5
61586: ST_TO_ADDR
// exit ;
61587: POP
61588: POP
61589: GO 61595
// end ; end ;
61591: GO 61542
61593: POP
61594: POP
// end ;
61595: LD_VAR 0 3
61599: RET
// export function GetCargoBay ( units ) ; begin
61600: LD_INT 0
61602: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61603: LD_ADDR_VAR 0 2
61607: PUSH
61608: LD_VAR 0 1
61612: PPUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 34
61618: PUSH
61619: LD_INT 12
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 34
61628: PUSH
61629: LD_INT 51
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 34
61638: PUSH
61639: LD_INT 32
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 34
61648: PUSH
61649: LD_EXP 93
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: PPUSH
61665: CALL_OW 72
61669: ST_TO_ADDR
// end ;
61670: LD_VAR 0 2
61674: RET
// export function Negate ( value ) ; begin
61675: LD_INT 0
61677: PPUSH
// result := not value ;
61678: LD_ADDR_VAR 0 2
61682: PUSH
61683: LD_VAR 0 1
61687: NOT
61688: ST_TO_ADDR
// end ;
61689: LD_VAR 0 2
61693: RET
// export function Inc ( value ) ; begin
61694: LD_INT 0
61696: PPUSH
// result := value + 1 ;
61697: LD_ADDR_VAR 0 2
61701: PUSH
61702: LD_VAR 0 1
61706: PUSH
61707: LD_INT 1
61709: PLUS
61710: ST_TO_ADDR
// end ;
61711: LD_VAR 0 2
61715: RET
// export function Dec ( value ) ; begin
61716: LD_INT 0
61718: PPUSH
// result := value - 1 ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_VAR 0 1
61728: PUSH
61729: LD_INT 1
61731: MINUS
61732: ST_TO_ADDR
// end ;
61733: LD_VAR 0 2
61737: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61738: LD_INT 0
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
61746: PPUSH
61747: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61748: LD_VAR 0 1
61752: PPUSH
61753: LD_VAR 0 2
61757: PPUSH
61758: CALL_OW 488
61762: NOT
61763: PUSH
61764: LD_VAR 0 3
61768: PPUSH
61769: LD_VAR 0 4
61773: PPUSH
61774: CALL_OW 488
61778: NOT
61779: OR
61780: IFFALSE 61793
// begin result := - 1 ;
61782: LD_ADDR_VAR 0 5
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: ST_TO_ADDR
// exit ;
61791: GO 62028
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61793: LD_ADDR_VAR 0 12
61797: PUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: LD_VAR 0 2
61807: PPUSH
61808: LD_VAR 0 3
61812: PPUSH
61813: LD_VAR 0 4
61817: PPUSH
61818: CALL 60876 0 4
61822: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61823: LD_ADDR_VAR 0 11
61827: PUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: LD_VAR 0 2
61837: PPUSH
61838: LD_VAR 0 12
61842: PUSH
61843: LD_INT 1
61845: ARRAY
61846: PPUSH
61847: LD_VAR 0 12
61851: PUSH
61852: LD_INT 2
61854: ARRAY
61855: PPUSH
61856: CALL_OW 298
61860: ST_TO_ADDR
// distance := 9999 ;
61861: LD_ADDR_VAR 0 10
61865: PUSH
61866: LD_INT 9999
61868: ST_TO_ADDR
// for i := 0 to 5 do
61869: LD_ADDR_VAR 0 6
61873: PUSH
61874: DOUBLE
61875: LD_INT 0
61877: DEC
61878: ST_TO_ADDR
61879: LD_INT 5
61881: PUSH
61882: FOR_TO
61883: IFFALSE 62026
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61885: LD_ADDR_VAR 0 7
61889: PUSH
61890: LD_VAR 0 1
61894: PPUSH
61895: LD_VAR 0 6
61899: PPUSH
61900: LD_VAR 0 11
61904: PPUSH
61905: CALL_OW 272
61909: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61910: LD_ADDR_VAR 0 8
61914: PUSH
61915: LD_VAR 0 2
61919: PPUSH
61920: LD_VAR 0 6
61924: PPUSH
61925: LD_VAR 0 11
61929: PPUSH
61930: CALL_OW 273
61934: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61935: LD_VAR 0 7
61939: PPUSH
61940: LD_VAR 0 8
61944: PPUSH
61945: CALL_OW 488
61949: NOT
61950: IFFALSE 61954
// continue ;
61952: GO 61882
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61954: LD_ADDR_VAR 0 9
61958: PUSH
61959: LD_VAR 0 12
61963: PUSH
61964: LD_INT 1
61966: ARRAY
61967: PPUSH
61968: LD_VAR 0 12
61972: PUSH
61973: LD_INT 2
61975: ARRAY
61976: PPUSH
61977: LD_VAR 0 7
61981: PPUSH
61982: LD_VAR 0 8
61986: PPUSH
61987: CALL_OW 298
61991: ST_TO_ADDR
// if tmp < distance then
61992: LD_VAR 0 9
61996: PUSH
61997: LD_VAR 0 10
62001: LESS
62002: IFFALSE 62024
// begin result := i ;
62004: LD_ADDR_VAR 0 5
62008: PUSH
62009: LD_VAR 0 6
62013: ST_TO_ADDR
// distance := tmp ;
62014: LD_ADDR_VAR 0 10
62018: PUSH
62019: LD_VAR 0 9
62023: ST_TO_ADDR
// end ; end ;
62024: GO 61882
62026: POP
62027: POP
// end ;
62028: LD_VAR 0 5
62032: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62033: LD_INT 0
62035: PPUSH
62036: PPUSH
// if not driver or not IsInUnit ( driver ) then
62037: LD_VAR 0 1
62041: NOT
62042: PUSH
62043: LD_VAR 0 1
62047: PPUSH
62048: CALL_OW 310
62052: NOT
62053: OR
62054: IFFALSE 62058
// exit ;
62056: GO 62148
// vehicle := IsInUnit ( driver ) ;
62058: LD_ADDR_VAR 0 3
62062: PUSH
62063: LD_VAR 0 1
62067: PPUSH
62068: CALL_OW 310
62072: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62073: LD_VAR 0 1
62077: PPUSH
62078: LD_STRING \
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: PUSH
62108: LD_STRING E
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_VAR 0 3
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PPUSH
62144: CALL_OW 446
// end ;
62148: LD_VAR 0 2
62152: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62153: LD_INT 0
62155: PPUSH
62156: PPUSH
// if not driver or not IsInUnit ( driver ) then
62157: LD_VAR 0 1
62161: NOT
62162: PUSH
62163: LD_VAR 0 1
62167: PPUSH
62168: CALL_OW 310
62172: NOT
62173: OR
62174: IFFALSE 62178
// exit ;
62176: GO 62268
// vehicle := IsInUnit ( driver ) ;
62178: LD_ADDR_VAR 0 3
62182: PUSH
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL_OW 310
62192: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62193: LD_VAR 0 1
62197: PPUSH
62198: LD_STRING \
62200: PUSH
62201: LD_INT 0
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: PUSH
62228: LD_STRING E
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_VAR 0 3
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PPUSH
62264: CALL_OW 447
// end ;
62268: LD_VAR 0 2
62272: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62273: LD_INT 0
62275: PPUSH
62276: PPUSH
62277: PPUSH
// tmp := [ ] ;
62278: LD_ADDR_VAR 0 5
62282: PUSH
62283: EMPTY
62284: ST_TO_ADDR
// for i in units do
62285: LD_ADDR_VAR 0 4
62289: PUSH
62290: LD_VAR 0 1
62294: PUSH
62295: FOR_IN
62296: IFFALSE 62334
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62298: LD_ADDR_VAR 0 5
62302: PUSH
62303: LD_VAR 0 5
62307: PPUSH
62308: LD_VAR 0 5
62312: PUSH
62313: LD_INT 1
62315: PLUS
62316: PPUSH
62317: LD_VAR 0 4
62321: PPUSH
62322: CALL_OW 256
62326: PPUSH
62327: CALL_OW 2
62331: ST_TO_ADDR
62332: GO 62295
62334: POP
62335: POP
// if not tmp then
62336: LD_VAR 0 5
62340: NOT
62341: IFFALSE 62345
// exit ;
62343: GO 62393
// if asc then
62345: LD_VAR 0 2
62349: IFFALSE 62373
// result := SortListByListAsc ( units , tmp ) else
62351: LD_ADDR_VAR 0 3
62355: PUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_VAR 0 5
62365: PPUSH
62366: CALL_OW 76
62370: ST_TO_ADDR
62371: GO 62393
// result := SortListByListDesc ( units , tmp ) ;
62373: LD_ADDR_VAR 0 3
62377: PUSH
62378: LD_VAR 0 1
62382: PPUSH
62383: LD_VAR 0 5
62387: PPUSH
62388: CALL_OW 77
62392: ST_TO_ADDR
// end ;
62393: LD_VAR 0 3
62397: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62398: LD_INT 0
62400: PPUSH
62401: PPUSH
// task := GetTaskList ( mech ) ;
62402: LD_ADDR_VAR 0 4
62406: PUSH
62407: LD_VAR 0 1
62411: PPUSH
62412: CALL_OW 437
62416: ST_TO_ADDR
// if not task then
62417: LD_VAR 0 4
62421: NOT
62422: IFFALSE 62426
// exit ;
62424: GO 62468
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62426: LD_ADDR_VAR 0 3
62430: PUSH
62431: LD_VAR 0 4
62435: PUSH
62436: LD_INT 1
62438: ARRAY
62439: PUSH
62440: LD_INT 1
62442: ARRAY
62443: PUSH
62444: LD_STRING r
62446: EQUAL
62447: PUSH
62448: LD_VAR 0 4
62452: PUSH
62453: LD_INT 1
62455: ARRAY
62456: PUSH
62457: LD_INT 4
62459: ARRAY
62460: PUSH
62461: LD_VAR 0 2
62465: EQUAL
62466: AND
62467: ST_TO_ADDR
// end ;
62468: LD_VAR 0 3
62472: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62473: LD_INT 0
62475: PPUSH
// SetDir ( unit , d ) ;
62476: LD_VAR 0 1
62480: PPUSH
62481: LD_VAR 0 4
62485: PPUSH
62486: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62490: LD_VAR 0 1
62494: PPUSH
62495: LD_VAR 0 2
62499: PPUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: LD_VAR 0 5
62509: PPUSH
62510: CALL_OW 48
// end ;
62514: LD_VAR 0 6
62518: RET
// export function ToNaturalNumber ( number ) ; begin
62519: LD_INT 0
62521: PPUSH
// result := number div 1 ;
62522: LD_ADDR_VAR 0 2
62526: PUSH
62527: LD_VAR 0 1
62531: PUSH
62532: LD_INT 1
62534: DIV
62535: ST_TO_ADDR
// if number < 0 then
62536: LD_VAR 0 1
62540: PUSH
62541: LD_INT 0
62543: LESS
62544: IFFALSE 62554
// result := 0 ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_INT 0
62553: ST_TO_ADDR
// end ;
62554: LD_VAR 0 2
62558: RET
// export function SortByClass ( units , class ) ; var un ; begin
62559: LD_INT 0
62561: PPUSH
62562: PPUSH
// if not units or not class then
62563: LD_VAR 0 1
62567: NOT
62568: PUSH
62569: LD_VAR 0 2
62573: NOT
62574: OR
62575: IFFALSE 62579
// exit ;
62577: GO 62674
// result := [ ] ;
62579: LD_ADDR_VAR 0 3
62583: PUSH
62584: EMPTY
62585: ST_TO_ADDR
// for un in units do
62586: LD_ADDR_VAR 0 4
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: FOR_IN
62597: IFFALSE 62672
// if GetClass ( un ) = class then
62599: LD_VAR 0 4
62603: PPUSH
62604: CALL_OW 257
62608: PUSH
62609: LD_VAR 0 2
62613: EQUAL
62614: IFFALSE 62641
// result := Insert ( result , 1 , un ) else
62616: LD_ADDR_VAR 0 3
62620: PUSH
62621: LD_VAR 0 3
62625: PPUSH
62626: LD_INT 1
62628: PPUSH
62629: LD_VAR 0 4
62633: PPUSH
62634: CALL_OW 2
62638: ST_TO_ADDR
62639: GO 62670
// result := Replace ( result , result + 1 , un ) ;
62641: LD_ADDR_VAR 0 3
62645: PUSH
62646: LD_VAR 0 3
62650: PPUSH
62651: LD_VAR 0 3
62655: PUSH
62656: LD_INT 1
62658: PLUS
62659: PPUSH
62660: LD_VAR 0 4
62664: PPUSH
62665: CALL_OW 1
62669: ST_TO_ADDR
62670: GO 62596
62672: POP
62673: POP
// end ;
62674: LD_VAR 0 3
62678: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62679: LD_INT 0
62681: PPUSH
62682: PPUSH
62683: PPUSH
62684: PPUSH
62685: PPUSH
62686: PPUSH
62687: PPUSH
// result := [ ] ;
62688: LD_ADDR_VAR 0 4
62692: PUSH
62693: EMPTY
62694: ST_TO_ADDR
// if x - r < 0 then
62695: LD_VAR 0 1
62699: PUSH
62700: LD_VAR 0 3
62704: MINUS
62705: PUSH
62706: LD_INT 0
62708: LESS
62709: IFFALSE 62721
// min_x := 0 else
62711: LD_ADDR_VAR 0 8
62715: PUSH
62716: LD_INT 0
62718: ST_TO_ADDR
62719: GO 62737
// min_x := x - r ;
62721: LD_ADDR_VAR 0 8
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_VAR 0 3
62735: MINUS
62736: ST_TO_ADDR
// if y - r < 0 then
62737: LD_VAR 0 2
62741: PUSH
62742: LD_VAR 0 3
62746: MINUS
62747: PUSH
62748: LD_INT 0
62750: LESS
62751: IFFALSE 62763
// min_y := 0 else
62753: LD_ADDR_VAR 0 7
62757: PUSH
62758: LD_INT 0
62760: ST_TO_ADDR
62761: GO 62779
// min_y := y - r ;
62763: LD_ADDR_VAR 0 7
62767: PUSH
62768: LD_VAR 0 2
62772: PUSH
62773: LD_VAR 0 3
62777: MINUS
62778: ST_TO_ADDR
// max_x := x + r ;
62779: LD_ADDR_VAR 0 9
62783: PUSH
62784: LD_VAR 0 1
62788: PUSH
62789: LD_VAR 0 3
62793: PLUS
62794: ST_TO_ADDR
// max_y := y + r ;
62795: LD_ADDR_VAR 0 10
62799: PUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_VAR 0 3
62809: PLUS
62810: ST_TO_ADDR
// for _x = min_x to max_x do
62811: LD_ADDR_VAR 0 5
62815: PUSH
62816: DOUBLE
62817: LD_VAR 0 8
62821: DEC
62822: ST_TO_ADDR
62823: LD_VAR 0 9
62827: PUSH
62828: FOR_TO
62829: IFFALSE 62930
// for _y = min_y to max_y do
62831: LD_ADDR_VAR 0 6
62835: PUSH
62836: DOUBLE
62837: LD_VAR 0 7
62841: DEC
62842: ST_TO_ADDR
62843: LD_VAR 0 10
62847: PUSH
62848: FOR_TO
62849: IFFALSE 62926
// begin if not ValidHex ( _x , _y ) then
62851: LD_VAR 0 5
62855: PPUSH
62856: LD_VAR 0 6
62860: PPUSH
62861: CALL_OW 488
62865: NOT
62866: IFFALSE 62870
// continue ;
62868: GO 62848
// if GetResourceTypeXY ( _x , _y ) then
62870: LD_VAR 0 5
62874: PPUSH
62875: LD_VAR 0 6
62879: PPUSH
62880: CALL_OW 283
62884: IFFALSE 62924
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62886: LD_ADDR_VAR 0 4
62890: PUSH
62891: LD_VAR 0 4
62895: PPUSH
62896: LD_VAR 0 4
62900: PUSH
62901: LD_INT 1
62903: PLUS
62904: PPUSH
62905: LD_VAR 0 5
62909: PUSH
62910: LD_VAR 0 6
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PPUSH
62919: CALL_OW 1
62923: ST_TO_ADDR
// end ;
62924: GO 62848
62926: POP
62927: POP
62928: GO 62828
62930: POP
62931: POP
// end ;
62932: LD_VAR 0 4
62936: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62937: LD_INT 0
62939: PPUSH
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
62944: PPUSH
62945: PPUSH
62946: PPUSH
// if not units then
62947: LD_VAR 0 1
62951: NOT
62952: IFFALSE 62956
// exit ;
62954: GO 63381
// result := UnitFilter ( units , [ f_ok ] ) ;
62956: LD_ADDR_VAR 0 3
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_INT 50
62968: PUSH
62969: EMPTY
62970: LIST
62971: PPUSH
62972: CALL_OW 72
62976: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62977: LD_ADDR_VAR 0 8
62981: PUSH
62982: LD_VAR 0 1
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PPUSH
62991: CALL_OW 255
62995: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
62996: LD_ADDR_VAR 0 10
63000: PUSH
63001: LD_INT 29
63003: PUSH
63004: LD_EXP 96
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: ST_TO_ADDR
// if not result then
63013: LD_VAR 0 3
63017: NOT
63018: IFFALSE 63022
// exit ;
63020: GO 63381
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63022: LD_ADDR_VAR 0 5
63026: PUSH
63027: LD_INT 81
63029: PUSH
63030: LD_VAR 0 8
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PPUSH
63039: CALL_OW 69
63043: ST_TO_ADDR
// for i in result do
63044: LD_ADDR_VAR 0 4
63048: PUSH
63049: LD_VAR 0 3
63053: PUSH
63054: FOR_IN
63055: IFFALSE 63379
// begin tag := GetTag ( i ) + 1 ;
63057: LD_ADDR_VAR 0 9
63061: PUSH
63062: LD_VAR 0 4
63066: PPUSH
63067: CALL_OW 110
63071: PUSH
63072: LD_INT 1
63074: PLUS
63075: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63076: LD_ADDR_VAR 0 7
63080: PUSH
63081: LD_VAR 0 4
63085: PPUSH
63086: CALL_OW 250
63090: PPUSH
63091: LD_VAR 0 4
63095: PPUSH
63096: CALL_OW 251
63100: PPUSH
63101: LD_INT 6
63103: PPUSH
63104: CALL 62679 0 3
63108: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63109: LD_VAR 0 7
63113: PUSH
63114: LD_VAR 0 4
63118: PPUSH
63119: CALL_OW 264
63123: PUSH
63124: LD_VAR 0 10
63128: IN
63129: NOT
63130: AND
63131: IFFALSE 63170
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63133: LD_VAR 0 4
63137: PPUSH
63138: LD_VAR 0 7
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PUSH
63147: LD_INT 1
63149: ARRAY
63150: PPUSH
63151: LD_VAR 0 7
63155: PUSH
63156: LD_INT 1
63158: ARRAY
63159: PUSH
63160: LD_INT 2
63162: ARRAY
63163: PPUSH
63164: CALL_OW 116
63168: GO 63377
// if path > tag then
63170: LD_VAR 0 2
63174: PUSH
63175: LD_VAR 0 9
63179: GREATER
63180: IFFALSE 63347
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63182: LD_ADDR_VAR 0 6
63186: PUSH
63187: LD_VAR 0 5
63191: PPUSH
63192: LD_INT 91
63194: PUSH
63195: LD_VAR 0 4
63199: PUSH
63200: LD_INT 12
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: PPUSH
63208: CALL_OW 72
63212: ST_TO_ADDR
// if nearEnemy then
63213: LD_VAR 0 6
63217: IFFALSE 63245
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63219: LD_VAR 0 4
63223: PPUSH
63224: LD_VAR 0 6
63228: PPUSH
63229: LD_VAR 0 4
63233: PPUSH
63234: CALL_OW 74
63238: PPUSH
63239: CALL_OW 115
63243: GO 63345
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63245: LD_VAR 0 4
63249: PPUSH
63250: LD_VAR 0 2
63254: PUSH
63255: LD_VAR 0 9
63259: ARRAY
63260: PUSH
63261: LD_INT 1
63263: ARRAY
63264: PPUSH
63265: LD_VAR 0 2
63269: PUSH
63270: LD_VAR 0 9
63274: ARRAY
63275: PUSH
63276: LD_INT 2
63278: ARRAY
63279: PPUSH
63280: CALL_OW 297
63284: PUSH
63285: LD_INT 6
63287: GREATER
63288: IFFALSE 63331
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63290: LD_VAR 0 4
63294: PPUSH
63295: LD_VAR 0 2
63299: PUSH
63300: LD_VAR 0 9
63304: ARRAY
63305: PUSH
63306: LD_INT 1
63308: ARRAY
63309: PPUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_VAR 0 9
63319: ARRAY
63320: PUSH
63321: LD_INT 2
63323: ARRAY
63324: PPUSH
63325: CALL_OW 114
63329: GO 63345
// SetTag ( i , tag ) ;
63331: LD_VAR 0 4
63335: PPUSH
63336: LD_VAR 0 9
63340: PPUSH
63341: CALL_OW 109
// end else
63345: GO 63377
// if enemy then
63347: LD_VAR 0 5
63351: IFFALSE 63377
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63353: LD_VAR 0 4
63357: PPUSH
63358: LD_VAR 0 5
63362: PPUSH
63363: LD_VAR 0 4
63367: PPUSH
63368: CALL_OW 74
63372: PPUSH
63373: CALL_OW 115
// end ;
63377: GO 63054
63379: POP
63380: POP
// end ;
63381: LD_VAR 0 3
63385: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63386: LD_INT 0
63388: PPUSH
63389: PPUSH
63390: PPUSH
// if not unit or IsInUnit ( unit ) then
63391: LD_VAR 0 1
63395: NOT
63396: PUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL_OW 310
63406: OR
63407: IFFALSE 63411
// exit ;
63409: GO 63502
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63411: LD_ADDR_VAR 0 4
63415: PUSH
63416: LD_VAR 0 1
63420: PPUSH
63421: CALL_OW 250
63425: PPUSH
63426: LD_VAR 0 2
63430: PPUSH
63431: LD_INT 1
63433: PPUSH
63434: CALL_OW 272
63438: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63439: LD_ADDR_VAR 0 5
63443: PUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: CALL_OW 251
63453: PPUSH
63454: LD_VAR 0 2
63458: PPUSH
63459: LD_INT 1
63461: PPUSH
63462: CALL_OW 273
63466: ST_TO_ADDR
// if ValidHex ( x , y ) then
63467: LD_VAR 0 4
63471: PPUSH
63472: LD_VAR 0 5
63476: PPUSH
63477: CALL_OW 488
63481: IFFALSE 63502
// ComTurnXY ( unit , x , y ) ;
63483: LD_VAR 0 1
63487: PPUSH
63488: LD_VAR 0 4
63492: PPUSH
63493: LD_VAR 0 5
63497: PPUSH
63498: CALL_OW 118
// end ;
63502: LD_VAR 0 3
63506: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63507: LD_INT 0
63509: PPUSH
63510: PPUSH
// result := false ;
63511: LD_ADDR_VAR 0 3
63515: PUSH
63516: LD_INT 0
63518: ST_TO_ADDR
// if not units then
63519: LD_VAR 0 2
63523: NOT
63524: IFFALSE 63528
// exit ;
63526: GO 63573
// for i in units do
63528: LD_ADDR_VAR 0 4
63532: PUSH
63533: LD_VAR 0 2
63537: PUSH
63538: FOR_IN
63539: IFFALSE 63571
// if See ( side , i ) then
63541: LD_VAR 0 1
63545: PPUSH
63546: LD_VAR 0 4
63550: PPUSH
63551: CALL_OW 292
63555: IFFALSE 63569
// begin result := true ;
63557: LD_ADDR_VAR 0 3
63561: PUSH
63562: LD_INT 1
63564: ST_TO_ADDR
// exit ;
63565: POP
63566: POP
63567: GO 63573
// end ;
63569: GO 63538
63571: POP
63572: POP
// end ;
63573: LD_VAR 0 3
63577: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
63582: PPUSH
63583: PPUSH
// if not unit or not points then
63584: LD_VAR 0 1
63588: NOT
63589: PUSH
63590: LD_VAR 0 2
63594: NOT
63595: OR
63596: IFFALSE 63600
// exit ;
63598: GO 63690
// dist := 99999 ;
63600: LD_ADDR_VAR 0 5
63604: PUSH
63605: LD_INT 99999
63607: ST_TO_ADDR
// for i in points do
63608: LD_ADDR_VAR 0 4
63612: PUSH
63613: LD_VAR 0 2
63617: PUSH
63618: FOR_IN
63619: IFFALSE 63688
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63621: LD_ADDR_VAR 0 6
63625: PUSH
63626: LD_VAR 0 1
63630: PPUSH
63631: LD_VAR 0 4
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PPUSH
63640: LD_VAR 0 4
63644: PUSH
63645: LD_INT 2
63647: ARRAY
63648: PPUSH
63649: CALL_OW 297
63653: ST_TO_ADDR
// if tmpDist < dist then
63654: LD_VAR 0 6
63658: PUSH
63659: LD_VAR 0 5
63663: LESS
63664: IFFALSE 63686
// begin result := i ;
63666: LD_ADDR_VAR 0 3
63670: PUSH
63671: LD_VAR 0 4
63675: ST_TO_ADDR
// dist := tmpDist ;
63676: LD_ADDR_VAR 0 5
63680: PUSH
63681: LD_VAR 0 6
63685: ST_TO_ADDR
// end ; end ;
63686: GO 63618
63688: POP
63689: POP
// end ; end_of_file
63690: LD_VAR 0 3
63694: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63695: LD_VAR 0 1
63699: PPUSH
63700: LD_VAR 0 2
63704: PPUSH
63705: LD_VAR 0 3
63709: PPUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: LD_VAR 0 5
63719: PPUSH
63720: LD_VAR 0 6
63724: PPUSH
63725: CALL 4346 0 6
// end ;
63729: PPOPN 6
63731: END
