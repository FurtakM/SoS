// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3057 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 16
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 18
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 19
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 20
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; begin
 109: LD_INT 0
 111: PPUSH
// InGameOn ;
 112: CALL_OW 8
// PrepareKurtGroup ;
 116: CALL 2904 0 0
// PrepareSheikGroup ;
 120: CALL 2542 0 0
// PrepareHeikeGroup ;
 124: CALL 2454 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 128: LD_INT 51
 130: PPUSH
 131: LD_INT 85
 133: PPUSH
 134: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 138: LD_INT 1
 140: PPUSH
 141: LD_INT 1
 143: PPUSH
 144: LD_INT 5
 146: PPUSH
 147: LD_INT 32763
 149: NEG
 150: PPUSH
 151: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 155: LD_INT 1
 157: PPUSH
 158: LD_INT 1
 160: PPUSH
 161: LD_INT 5
 163: PPUSH
 164: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 168: LD_EXP 1
 172: PPUSH
 173: LD_INT 50
 175: PPUSH
 176: LD_INT 86
 178: PPUSH
 179: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 183: LD_EXP 5
 187: PPUSH
 188: LD_INT 51
 190: PPUSH
 191: LD_INT 90
 193: PPUSH
 194: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 198: LD_EXP 1
 202: PPUSH
 203: LD_EXP 5
 207: PPUSH
 208: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 212: LD_EXP 5
 216: PPUSH
 217: LD_EXP 1
 221: PPUSH
 222: CALL_OW 179
// wait ( 0 0$3 ) ;
 226: LD_INT 105
 228: PPUSH
 229: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 233: LD_EXP 5
 237: PPUSH
 238: LD_STRING DK-1
 240: PPUSH
 241: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 245: LD_EXP 1
 249: PPUSH
 250: LD_STRING DH-1
 252: PPUSH
 253: CALL_OW 88
// wait ( 0 0$2 ) ;
 257: LD_INT 70
 259: PPUSH
 260: CALL_OW 67
// PrepareArabian ;
 264: CALL 3305 0 0
// InGameOff ;
 268: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 272: LD_STRING O1
 274: PPUSH
 275: CALL_OW 337
// goWithHeike := true ;
 279: LD_ADDR_EXP 17
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// SaveForQuickRestart ;
 287: CALL_OW 22
// end ;
 291: LD_VAR 0 1
 295: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 5
 301: PPUSH
 302: CALL_OW 81
 306: PUSH
 307: LD_INT 2
 309: EQUAL
 310: IFFALSE 456
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin goWithHeike := false ;
 318: LD_ADDR_EXP 17
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// DialogueOn ;
 326: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 330: LD_EXP 1
 334: PPUSH
 335: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 339: LD_EXP 5
 343: PPUSH
 344: LD_STRING DK-betray-1
 346: PPUSH
 347: CALL_OW 88
// DialogueOff ;
 351: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 355: LD_EXP 5
 359: PPUSH
 360: LD_INT 90
 362: PPUSH
 363: LD_INT 46
 365: PPUSH
 366: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 370: LD_INT 35
 372: PPUSH
 373: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 377: LD_ADDR_VAR 0 1
 381: PUSH
 382: LD_INT 22
 384: PUSH
 385: LD_INT 5
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 25
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: LD_EXP 5
 415: DIFF
 416: PUSH
 417: FOR_IN
 418: IFFALSE 436
// ComAttackUnit ( i , Heike ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_EXP 1
 429: PPUSH
 430: CALL_OW 115
 434: GO 417
 436: POP
 437: POP
// until IsDead ( Heike ) ;
 438: LD_EXP 1
 442: PPUSH
 443: CALL_OW 301
 447: IFFALSE 370
// YouLost ( Betray ) ;
 449: LD_STRING Betray
 451: PPUSH
 452: CALL_OW 104
// end ;
 456: PPOPN 1
 458: END
// every 0 0$1 trigger goWithHeike do
 459: LD_EXP 17
 463: IFFALSE 518
 465: GO 467
 467: DISABLE
// begin enable ;
 468: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 469: LD_EXP 1
 473: PPUSH
 474: LD_EXP 5
 478: PPUSH
 479: CALL_OW 296
 483: PUSH
 484: LD_INT 3
 486: GREATER
 487: IFFALSE 518
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 489: LD_EXP 5
 493: PPUSH
 494: LD_EXP 1
 498: PPUSH
 499: CALL_OW 250
 503: PPUSH
 504: LD_EXP 1
 508: PPUSH
 509: CALL_OW 251
 513: PPUSH
 514: CALL_OW 111
// end ;
 518: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 519: LD_INT 2
 521: PPUSH
 522: LD_INT 47
 524: PPUSH
 525: LD_INT 68
 527: PPUSH
 528: CALL_OW 293
 532: PUSH
 533: LD_EXP 18
 537: NOT
 538: AND
 539: IFFALSE 583
 541: GO 543
 543: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 544: LD_EXP 1
 548: PPUSH
 549: LD_STRING DH-spot-1
 551: PPUSH
 552: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 556: LD_INT 47
 558: PPUSH
 559: LD_INT 68
 561: PPUSH
 562: CALL_OW 428
 566: PPUSH
 567: CALL_OW 313
 571: PUSH
 572: LD_INT 1
 574: ARRAY
 575: PPUSH
 576: LD_STRING DRa-spot-1
 578: PPUSH
 579: CALL_OW 88
// end ;
 583: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 584: LD_INT 2
 586: PPUSH
 587: LD_INT 93
 589: PPUSH
 590: LD_INT 89
 592: PPUSH
 593: CALL_OW 293
 597: PUSH
 598: LD_EXP 18
 602: NOT
 603: AND
 604: IFFALSE 648
 606: GO 608
 608: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 609: LD_EXP 1
 613: PPUSH
 614: LD_STRING DH-spot-1
 616: PPUSH
 617: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 621: LD_INT 93
 623: PPUSH
 624: LD_INT 89
 626: PPUSH
 627: CALL_OW 428
 631: PPUSH
 632: CALL_OW 313
 636: PUSH
 637: LD_INT 1
 639: ARRAY
 640: PPUSH
 641: LD_STRING DRa-spot-2
 643: PPUSH
 644: CALL_OW 88
// end ;
 648: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 649: LD_EXP 20
 653: PUSH
 654: LD_EXP 14
 658: PPUSH
 659: LD_INT 101
 661: PUSH
 662: LD_INT 2
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: PPUSH
 669: CALL_OW 72
 673: AND
 674: IFFALSE 998
 676: GO 678
 678: DISABLE
 679: LD_INT 0
 681: PPUSH
 682: PPUSH
 683: PPUSH
 684: PPUSH
 685: PPUSH
// begin enable ;
 686: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 687: LD_ADDR_VAR 0 1
 691: PUSH
 692: LD_EXP 14
 696: PPUSH
 697: LD_INT 101
 699: PUSH
 700: LD_INT 2
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PPUSH
 707: CALL_OW 72
 711: ST_TO_ADDR
// if not tmp then
 712: LD_VAR 0 1
 716: NOT
 717: IFFALSE 721
// exit ;
 719: GO 998
// InGameOn ;
 721: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 725: LD_EXP 1
 729: PUSH
 730: LD_EXP 5
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PPUSH
 739: LD_VAR 0 1
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 752: LD_VAR 0 1
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: LD_EXP 1
 765: PPUSH
 766: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 770: LD_VAR 0 1
 774: PUSH
 775: LD_INT 1
 777: ARRAY
 778: PPUSH
 779: LD_STRING DG-meeting-1
 781: PPUSH
 782: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 786: LD_ADDR_VAR 0 3
 790: PUSH
 791: LD_INT 81
 793: PUSH
 794: LD_INT 10
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 63
 803: PUSH
 804: LD_INT 25
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 108
 813: PUSH
 814: LD_INT 73
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: LIST
 825: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: LD_INT 9999
 833: PUSH
 834: EMPTY
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: ST_TO_ADDR
// for i := 1 to 3 do
 840: LD_ADDR_VAR 0 2
 844: PUSH
 845: DOUBLE
 846: LD_INT 1
 848: DEC
 849: ST_TO_ADDR
 850: LD_INT 3
 852: PUSH
 853: FOR_TO
 854: IFFALSE 938
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 856: LD_ADDR_VAR 0 5
 860: PUSH
 861: LD_EXP 1
 865: PPUSH
 866: LD_VAR 0 3
 870: PUSH
 871: LD_VAR 0 2
 875: ARRAY
 876: PUSH
 877: LD_INT 1
 879: ARRAY
 880: PPUSH
 881: LD_VAR 0 3
 885: PUSH
 886: LD_VAR 0 2
 890: ARRAY
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: CALL_OW 297
 900: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 901: LD_VAR 0 4
 905: PUSH
 906: LD_INT 1
 908: ARRAY
 909: PUSH
 910: LD_VAR 0 5
 914: GREATER
 915: IFFALSE 936
// dist := [ tdist , i ] ;
 917: LD_ADDR_VAR 0 4
 921: PUSH
 922: LD_VAR 0 5
 926: PUSH
 927: LD_VAR 0 2
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// end ;
 936: GO 853
 938: POP
 939: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 940: LD_EXP 1
 944: PPUSH
 945: LD_VAR 0 3
 949: PUSH
 950: LD_VAR 0 4
 954: PUSH
 955: LD_INT 2
 957: ARRAY
 958: ARRAY
 959: PUSH
 960: LD_INT 1
 962: ARRAY
 963: PPUSH
 964: LD_VAR 0 3
 968: PUSH
 969: LD_VAR 0 4
 973: PUSH
 974: LD_INT 2
 976: ARRAY
 977: ARRAY
 978: PUSH
 979: LD_INT 2
 981: ARRAY
 982: PPUSH
 983: CALL_OW 111
// wait ( 0 0$3 ) ;
 987: LD_INT 105
 989: PPUSH
 990: CALL_OW 67
// InGameOff ;
 994: CALL_OW 9
// end ;
 998: PPOPN 5
1000: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1001: LD_EXP 1
1005: PPUSH
1006: LD_INT 14
1008: PPUSH
1009: CALL_OW 296
1013: PUSH
1014: LD_INT 40
1016: GREATER
1017: PUSH
1018: LD_EXP 1
1022: PPUSH
1023: CALL_OW 316
1027: AND
1028: IFFALSE 1045
1030: GO 1032
1032: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1033: LD_EXP 5
1037: PPUSH
1038: LD_STRING DK-idle-1
1040: PPUSH
1041: CALL_OW 88
// end ;
1045: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1046: LD_INT 2
1048: PPUSH
1049: LD_INT 59
1051: PPUSH
1052: LD_INT 47
1054: PPUSH
1055: CALL_OW 293
1059: IFFALSE 1209
1061: GO 1063
1063: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1064: LD_INT 59
1066: PPUSH
1067: LD_INT 47
1069: PPUSH
1070: LD_INT 2
1072: PPUSH
1073: LD_INT 10
1075: NEG
1076: PPUSH
1077: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1081: LD_INT 59
1083: PPUSH
1084: LD_INT 47
1086: PPUSH
1087: CALL_OW 86
// goWithHeike := false ;
1091: LD_ADDR_EXP 17
1095: PUSH
1096: LD_INT 0
1098: ST_TO_ADDR
// baseSpotted := true ;
1099: LD_ADDR_EXP 18
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// InGameOn ;
1107: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1111: LD_EXP 1
1115: PUSH
1116: LD_EXP 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: PPUSH
1125: LD_INT 54
1127: PPUSH
1128: LD_INT 45
1130: PPUSH
1131: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1135: LD_EXP 1
1139: PUSH
1140: LD_EXP 5
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PPUSH
1149: LD_INT 59
1151: PPUSH
1152: LD_INT 47
1154: PPUSH
1155: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1159: LD_EXP 1
1163: PPUSH
1164: LD_STRING DH-base-1
1166: PPUSH
1167: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1171: LD_EXP 5
1175: PPUSH
1176: LD_STRING DK-base-1
1178: PPUSH
1179: CALL_OW 88
// InGameOff ;
1183: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1187: LD_ADDR_EXP 16
1191: PUSH
1192: LD_EXP 16
1196: PUSH
1197: LD_INT 1
1199: PLUS
1200: ST_TO_ADDR
// goWithHeike := true ;
1201: LD_ADDR_EXP 17
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// end ;
1209: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1210: LD_INT 2
1212: PPUSH
1213: LD_EXP 8
1217: PPUSH
1218: CALL_OW 292
1222: IFFALSE 2451
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
1231: PPUSH
// begin meetingActive := false ;
1232: LD_ADDR_EXP 20
1236: PUSH
1237: LD_INT 0
1239: ST_TO_ADDR
// goWithHeike := false ;
1240: LD_ADDR_EXP 17
1244: PUSH
1245: LD_INT 0
1247: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1248: LD_ADDR_VAR 0 2
1252: PUSH
1253: LD_INT 6
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL_OW 517
1263: ST_TO_ADDR
// for i := 1 to 4 do
1264: LD_ADDR_VAR 0 1
1268: PUSH
1269: DOUBLE
1270: LD_INT 1
1272: DEC
1273: ST_TO_ADDR
1274: LD_INT 4
1276: PUSH
1277: FOR_TO
1278: IFFALSE 1345
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1280: LD_EXP 15
1284: PUSH
1285: LD_VAR 0 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PUSH
1300: LD_VAR 0 1
1304: ARRAY
1305: PPUSH
1306: LD_VAR 0 2
1310: PUSH
1311: LD_INT 2
1313: ARRAY
1314: PUSH
1315: LD_VAR 0 1
1319: ARRAY
1320: PPUSH
1321: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1325: LD_EXP 15
1329: PUSH
1330: LD_VAR 0 1
1334: ARRAY
1335: PPUSH
1336: LD_INT 14
1338: PPUSH
1339: CALL_OW 179
// end ;
1343: GO 1277
1345: POP
1346: POP
// InGameOn ;
1347: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1351: LD_EXP 1
1355: PPUSH
1356: LD_EXP 8
1360: PPUSH
1361: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1365: LD_EXP 5
1369: PPUSH
1370: LD_EXP 1
1374: PPUSH
1375: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1379: LD_INT 10
1381: PPUSH
1382: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1386: LD_EXP 1
1390: PPUSH
1391: LD_EXP 8
1395: PPUSH
1396: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1400: LD_EXP 5
1404: PPUSH
1405: LD_EXP 1
1409: PPUSH
1410: CALL_OW 250
1414: PPUSH
1415: LD_INT 5
1417: PPUSH
1418: LD_INT 1
1420: PPUSH
1421: CALL_OW 272
1425: PPUSH
1426: LD_EXP 1
1430: PPUSH
1431: CALL_OW 251
1435: PPUSH
1436: LD_INT 5
1438: PPUSH
1439: LD_INT 1
1441: PPUSH
1442: CALL_OW 273
1446: PPUSH
1447: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1451: LD_EXP 1
1455: PPUSH
1456: LD_EXP 8
1460: PPUSH
1461: CALL_OW 296
1465: PUSH
1466: LD_INT 5
1468: LESS
1469: PUSH
1470: LD_EXP 5
1474: PPUSH
1475: LD_EXP 8
1479: PPUSH
1480: CALL_OW 296
1484: PUSH
1485: LD_INT 6
1487: LESS
1488: AND
1489: IFFALSE 1379
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1491: LD_EXP 1
1495: PUSH
1496: LD_EXP 5
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PPUSH
1505: LD_EXP 8
1509: PPUSH
1510: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1514: LD_EXP 8
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_EXP 9
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PPUSH
1534: LD_EXP 1
1538: PPUSH
1539: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1543: LD_INT 7
1545: PPUSH
1546: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1550: LD_EXP 8
1554: PPUSH
1555: LD_STRING DKu-Kurt-1
1557: PPUSH
1558: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1562: LD_EXP 5
1566: PPUSH
1567: LD_STRING DK-Kurt-1
1569: PPUSH
1570: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1574: LD_EXP 8
1578: PPUSH
1579: LD_STRING DKu-Kurt-2
1581: PPUSH
1582: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1586: LD_INT 7
1588: PPUSH
1589: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1593: LD_EXP 1
1597: PPUSH
1598: LD_STRING DH-Kurt-1
1600: PPUSH
1601: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1605: LD_EXP 8
1609: PPUSH
1610: LD_STRING DKu-Kurt-3
1612: PPUSH
1613: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1617: LD_EXP 5
1621: PPUSH
1622: LD_STRING DK-Kurt-3
1624: PPUSH
1625: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1629: LD_EXP 9
1633: PPUSH
1634: LD_STRING DHa-Kurt-3
1636: PPUSH
1637: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1641: LD_EXP 4
1645: PPUSH
1646: LD_STRING DO-Kurt-3
1648: PPUSH
1649: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1653: LD_ADDR_VAR 0 3
1657: PUSH
1658: LD_EXP 8
1662: PUSH
1663: LD_EXP 4
1667: PUSH
1668: LD_EXP 9
1672: PUSH
1673: LD_EXP 5
1677: PUSH
1678: LD_EXP 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i = 1 to 5 do
1690: LD_ADDR_VAR 0 1
1694: PUSH
1695: DOUBLE
1696: LD_INT 1
1698: DEC
1699: ST_TO_ADDR
1700: LD_INT 5
1702: PUSH
1703: FOR_TO
1704: IFFALSE 1779
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1706: LD_VAR 0 3
1710: PUSH
1711: LD_VAR 0 1
1715: ARRAY
1716: PPUSH
1717: LD_VAR 0 2
1721: PUSH
1722: LD_INT 1
1724: ARRAY
1725: PUSH
1726: LD_VAR 0 1
1730: PUSH
1731: LD_INT 4
1733: PLUS
1734: ARRAY
1735: PPUSH
1736: LD_VAR 0 2
1740: PUSH
1741: LD_INT 2
1743: ARRAY
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_INT 4
1752: PLUS
1753: ARRAY
1754: PPUSH
1755: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1759: LD_VAR 0 3
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PPUSH
1770: LD_INT 14
1772: PPUSH
1773: CALL_OW 179
// end ;
1777: GO 1703
1779: POP
1780: POP
// wait ( 0 0$2 ) ;
1781: LD_INT 70
1783: PPUSH
1784: CALL_OW 67
// CenterOnUnits ( eon ) ;
1788: LD_INT 14
1790: PPUSH
1791: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1795: LD_INT 90
1797: PPUSH
1798: LD_INT 43
1800: PPUSH
1801: LD_INT 2
1803: PPUSH
1804: LD_INT 21
1806: NEG
1807: PPUSH
1808: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1812: LD_EXP 2
1816: PPUSH
1817: LD_INT 84
1819: PPUSH
1820: LD_INT 36
1822: PPUSH
1823: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1827: LD_EXP 2
1831: PPUSH
1832: LD_INT 14
1834: PPUSH
1835: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1839: LD_EXP 11
1843: PPUSH
1844: LD_INT 85
1846: PPUSH
1847: LD_INT 36
1849: PPUSH
1850: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1854: LD_EXP 11
1858: PPUSH
1859: LD_INT 14
1861: PPUSH
1862: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1866: LD_EXP 10
1870: PPUSH
1871: LD_INT 86
1873: PPUSH
1874: LD_INT 36
1876: PPUSH
1877: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1881: LD_EXP 10
1885: PPUSH
1886: LD_INT 14
1888: PPUSH
1889: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1893: LD_EXP 7
1897: PPUSH
1898: LD_INT 87
1900: PPUSH
1901: LD_INT 36
1903: PPUSH
1904: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1908: LD_EXP 7
1912: PPUSH
1913: LD_INT 14
1915: PPUSH
1916: CALL_OW 179
// wait ( 0 0$3 ) ;
1920: LD_INT 105
1922: PPUSH
1923: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1927: LD_INT 35
1929: PPUSH
1930: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1934: LD_EXP 1
1938: PPUSH
1939: LD_INT 6
1941: PPUSH
1942: CALL_OW 308
1946: IFFALSE 1927
// heikeNearbyEon := true ;
1948: LD_ADDR_EXP 19
1952: PUSH
1953: LD_INT 1
1955: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1956: LD_EXP 6
1960: PPUSH
1961: LD_INT 88
1963: PPUSH
1964: LD_INT 37
1966: PPUSH
1967: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1971: LD_EXP 6
1975: PPUSH
1976: LD_EXP 13
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PPUSH
1985: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1989: LD_EXP 13
1993: PUSH
1994: LD_INT 1
1996: ARRAY
1997: PPUSH
1998: LD_INT 89
2000: PPUSH
2001: LD_INT 37
2003: PPUSH
2004: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2008: LD_EXP 13
2012: PUSH
2013: LD_INT 2
2015: ARRAY
2016: PPUSH
2017: LD_INT 91
2019: PPUSH
2020: LD_INT 39
2022: PPUSH
2023: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2027: LD_EXP 13
2031: PPUSH
2032: LD_EXP 11
2036: PPUSH
2037: CALL_OW 179
// wait ( 0 0$1 ) ;
2041: LD_INT 35
2043: PPUSH
2044: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2048: LD_EXP 13
2052: PUSH
2053: LD_INT 1
2055: ARRAY
2056: PPUSH
2057: LD_STRING DS-eon-1
2059: PPUSH
2060: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2064: LD_EXP 6
2068: PPUSH
2069: LD_STRING DSh-eon-1
2071: PPUSH
2072: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2076: LD_EXP 13
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: LD_INT 92
2087: PPUSH
2088: LD_INT 43
2090: PPUSH
2091: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2095: LD_EXP 13
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_INT 14
2106: PPUSH
2107: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2111: LD_EXP 13
2115: PUSH
2116: LD_INT 2
2118: ARRAY
2119: PPUSH
2120: LD_INT 93
2122: PPUSH
2123: LD_INT 41
2125: PPUSH
2126: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2130: LD_EXP 13
2134: PUSH
2135: LD_INT 2
2137: ARRAY
2138: PPUSH
2139: LD_INT 93
2141: PPUSH
2142: LD_INT 40
2144: PPUSH
2145: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2149: LD_EXP 6
2153: PPUSH
2154: LD_INT 88
2156: PPUSH
2157: LD_INT 41
2159: PPUSH
2160: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2164: LD_EXP 6
2168: PPUSH
2169: LD_INT 87
2171: PPUSH
2172: LD_INT 41
2174: PPUSH
2175: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2179: LD_INT 35
2181: PPUSH
2182: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2186: LD_EXP 6
2190: PPUSH
2191: LD_INT 88
2193: PPUSH
2194: LD_INT 41
2196: PPUSH
2197: CALL_OW 307
2201: IFFALSE 2179
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2210: LD_EXP 6
2214: PPUSH
2215: LD_STRING DSh-eon-2
2217: PPUSH
2218: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2222: LD_EXP 11
2226: PPUSH
2227: LD_INT 87
2229: PPUSH
2230: LD_INT 40
2232: PPUSH
2233: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2237: LD_EXP 11
2241: PPUSH
2242: LD_INT 86
2244: PPUSH
2245: LD_INT 40
2247: PPUSH
2248: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2252: LD_INT 35
2254: PPUSH
2255: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 87
2266: PPUSH
2267: LD_INT 40
2269: PPUSH
2270: CALL_OW 307
2274: IFFALSE 2252
// Say ( Shariff , DShar-eon-3 ) ;
2276: LD_EXP 11
2280: PPUSH
2281: LD_STRING DShar-eon-3
2283: PPUSH
2284: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2288: LD_EXP 11
2292: PPUSH
2293: LD_STRING DShar-eon-4
2295: PPUSH
2296: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2300: LD_EXP 5
2304: PPUSH
2305: LD_STRING DK-eon-4
2307: PPUSH
2308: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2312: LD_EXP 5
2316: PPUSH
2317: LD_INT 14
2319: PPUSH
2320: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2324: LD_INT 35
2326: PPUSH
2327: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2331: LD_EXP 5
2335: PPUSH
2336: CALL_OW 305
2340: NOT
2341: IFFALSE 2324
// Say ( Shariff , DShar-eon-5 ) ;
2343: LD_EXP 11
2347: PPUSH
2348: LD_STRING DShar-eon-5
2350: PPUSH
2351: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2355: LD_EXP 1
2359: PPUSH
2360: LD_INT 91
2362: PPUSH
2363: LD_INT 44
2365: PPUSH
2366: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2370: LD_EXP 1
2374: PPUSH
2375: LD_INT 14
2377: PPUSH
2378: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2382: LD_INT 35
2384: PPUSH
2385: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2389: LD_EXP 1
2393: PPUSH
2394: LD_INT 91
2396: PPUSH
2397: LD_INT 44
2399: PPUSH
2400: CALL_OW 307
2404: IFFALSE 2382
// Say ( Heike , DH-eon-5 ) ;
2406: LD_EXP 1
2410: PPUSH
2411: LD_STRING DH-eon-5
2413: PPUSH
2414: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2418: LD_EXP 1
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 120
// wait ( 0 0$2 ) ;
2430: LD_INT 70
2432: PPUSH
2433: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2437: LD_INT 1
2439: PPUSH
2440: LD_STRING %_cont
2442: PPUSH
2443: CALL_OW 340
// InGameOff ;
2447: CALL_OW 9
// end ; end_of_file
2451: PPOPN 3
2453: END
// export function PrepareHeikeGroup ; begin
2454: LD_INT 0
2456: PPUSH
// uc_side := 2 ;
2457: LD_ADDR_OWVAR 20
2461: PUSH
2462: LD_INT 2
2464: ST_TO_ADDR
// uc_nation := 2 ;
2465: LD_ADDR_OWVAR 21
2469: PUSH
2470: LD_INT 2
2472: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2473: LD_ADDR_EXP 1
2477: PUSH
2478: LD_STRING Heike
2480: PPUSH
2481: CALL_OW 25
2485: ST_TO_ADDR
// uc_side := 5 ;
2486: LD_ADDR_OWVAR 20
2490: PUSH
2491: LD_INT 5
2493: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2494: LD_ADDR_EXP 5
2498: PUSH
2499: LD_STRING Kaia
2501: PPUSH
2502: CALL_OW 25
2506: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2507: LD_EXP 1
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2522: LD_EXP 5
2526: PPUSH
2527: LD_INT 3
2529: PPUSH
2530: LD_INT 0
2532: PPUSH
2533: CALL_OW 49
// end ;
2537: LD_VAR 0 1
2541: RET
// export function PrepareSheikGroup ; var un , i ; begin
2542: LD_INT 0
2544: PPUSH
2545: PPUSH
2546: PPUSH
// uc_side := 5 ;
2547: LD_ADDR_OWVAR 20
2551: PUSH
2552: LD_INT 5
2554: ST_TO_ADDR
// uc_nation := 2 ;
2555: LD_ADDR_OWVAR 21
2559: PUSH
2560: LD_INT 2
2562: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2563: LD_ADDR_EXP 10
2567: PUSH
2568: LD_STRING Ali
2570: PPUSH
2571: CALL_OW 25
2575: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2576: LD_ADDR_EXP 11
2580: PUSH
2581: LD_STRING Abdul
2583: PPUSH
2584: CALL_OW 25
2588: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2589: LD_ADDR_EXP 2
2593: PUSH
2594: LD_STRING Omar
2596: PPUSH
2597: CALL_OW 25
2601: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2602: LD_ADDR_EXP 7
2606: PUSH
2607: LD_STRING Mahtab
2609: PPUSH
2610: CALL_OW 25
2614: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2615: LD_ADDR_EXP 6
2619: PUSH
2620: LD_STRING Shahrzad
2622: PPUSH
2623: CALL_OW 25
2627: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2628: LD_EXP 10
2632: PPUSH
2633: LD_INT 85
2635: PPUSH
2636: LD_INT 37
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2646: LD_EXP 11
2650: PPUSH
2651: LD_INT 87
2653: PPUSH
2654: LD_INT 37
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2664: LD_EXP 2
2668: PPUSH
2669: LD_INT 85
2671: PPUSH
2672: LD_INT 35
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2682: LD_EXP 7
2686: PPUSH
2687: LD_INT 86
2689: PPUSH
2690: LD_INT 39
2692: PPUSH
2693: LD_INT 0
2695: PPUSH
2696: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2700: LD_EXP 6
2704: PPUSH
2705: LD_INT 88
2707: PPUSH
2708: LD_INT 39
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2718: LD_EXP 10
2722: PPUSH
2723: LD_EXP 11
2727: PPUSH
2728: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2732: LD_EXP 11
2736: PPUSH
2737: LD_EXP 10
2741: PPUSH
2742: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2746: LD_EXP 2
2750: PPUSH
2751: LD_EXP 11
2755: PPUSH
2756: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2760: LD_EXP 7
2764: PUSH
2765: LD_EXP 6
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PPUSH
2774: LD_EXP 11
2778: PPUSH
2779: CALL_OW 119
// for i := 1 to 2 do
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: DOUBLE
2789: LD_INT 1
2791: DEC
2792: ST_TO_ADDR
2793: LD_INT 2
2795: PUSH
2796: FOR_TO
2797: IFFALSE 2883
// begin PrepareHuman ( sex_male , 4 , 6 ) ;
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 4
2804: PPUSH
2805: LD_INT 6
2807: PPUSH
2808: CALL_OW 380
// un := CreateHuman ;
2812: LD_ADDR_VAR 0 2
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_INT 90
2829: PPUSH
2830: LD_INT 44
2832: PPUSH
2833: LD_INT 3
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2843: LD_VAR 0 2
2847: PPUSH
2848: LD_INT 91
2850: PPUSH
2851: LD_INT 43
2853: PPUSH
2854: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2858: LD_ADDR_EXP 13
2862: PUSH
2863: LD_EXP 13
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 2
2880: ST_TO_ADDR
// end ;
2881: GO 2796
2883: POP
2884: POP
// scientists := scientists diff 0 ;
2885: LD_ADDR_EXP 13
2889: PUSH
2890: LD_EXP 13
2894: PUSH
2895: LD_INT 0
2897: DIFF
2898: ST_TO_ADDR
// end ;
2899: LD_VAR 0 1
2903: RET
// export function PrepareKurtGroup ; var i ; begin
2904: LD_INT 0
2906: PPUSH
2907: PPUSH
// uc_side := 5 ;
2908: LD_ADDR_OWVAR 20
2912: PUSH
2913: LD_INT 5
2915: ST_TO_ADDR
// uc_nation := 2 ;
2916: LD_ADDR_OWVAR 21
2920: PUSH
2921: LD_INT 2
2923: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2924: LD_ADDR_EXP 8
2928: PUSH
2929: LD_STRING Kurt
2931: PPUSH
2932: CALL_OW 25
2936: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2937: LD_ADDR_EXP 4
2941: PUSH
2942: LD_STRING Olaf
2944: PPUSH
2945: CALL_OW 25
2949: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2950: LD_ADDR_EXP 9
2954: PUSH
2955: LD_STRING Hans
2957: PPUSH
2958: CALL_OW 25
2962: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_EXP 8
2972: PUSH
2973: LD_EXP 9
2977: PUSH
2978: LD_EXP 4
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: PUSH
2988: FOR_IN
2989: IFFALSE 3008
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_INT 10
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 49
3006: GO 2988
3008: POP
3009: POP
// ComTurnUnit ( Kurt , Hans ) ;
3010: LD_EXP 8
3014: PPUSH
3015: LD_EXP 9
3019: PPUSH
3020: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3024: LD_EXP 4
3028: PPUSH
3029: LD_EXP 9
3033: PPUSH
3034: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3038: LD_EXP 9
3042: PPUSH
3043: LD_EXP 4
3047: PPUSH
3048: CALL_OW 119
// end ;
3052: LD_VAR 0 1
3056: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3057: LD_INT 0
3059: PPUSH
3060: PPUSH
3061: PPUSH
3062: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3063: LD_ADDR_VAR 0 2
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 3
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PPUSH
3078: CALL_OW 69
3082: PUSH
3083: LD_INT 14
3085: DIFF
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3168
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3090: LD_VAR 0 2
3094: PPUSH
3095: CALL_OW 266
3099: PUSH
3100: LD_INT 6
3102: PUSH
3103: LD_INT 31
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: IN
3110: IFFALSE 3134
// SetLives ( i , rand ( 500 , 600 ) ) else
3112: LD_VAR 0 2
3116: PPUSH
3117: LD_INT 500
3119: PPUSH
3120: LD_INT 600
3122: PPUSH
3123: CALL_OW 12
3127: PPUSH
3128: CALL_OW 234
3132: GO 3154
// SetLives ( i , rand ( 300 , 499 ) ) ;
3134: LD_VAR 0 2
3138: PPUSH
3139: LD_INT 300
3141: PPUSH
3142: LD_INT 499
3144: PPUSH
3145: CALL_OW 12
3149: PPUSH
3150: CALL_OW 234
// SetSide ( i , 5 ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 5
3161: PPUSH
3162: CALL_OW 235
// end ;
3166: GO 3087
3168: POP
3169: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_INT 9
3177: PPUSH
3178: LD_INT 0
3180: PPUSH
3181: CALL_OW 517
3185: ST_TO_ADDR
// uc_side := 4 ;
3186: LD_ADDR_OWVAR 20
3190: PUSH
3191: LD_INT 4
3193: ST_TO_ADDR
// uc_nation := 1 ;
3194: LD_ADDR_OWVAR 21
3198: PUSH
3199: LD_INT 1
3201: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: DOUBLE
3208: LD_INT 1
3210: DEC
3211: ST_TO_ADDR
3212: LD_VAR 0 4
3216: PUSH
3217: LD_INT 1
3219: ARRAY
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3298
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 3
3248: MOD
3249: PUSH
3250: LD_INT 1
3252: PLUS
3253: ARRAY
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 380
// un := CreateHuman ;
3262: LD_ADDR_VAR 0 3
3266: PUSH
3267: CALL_OW 44
3271: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3272: LD_VAR 0 3
3276: PPUSH
3277: LD_INT 9
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 49
// KillUnit ( un ) ;
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 66
// end ;
3296: GO 3221
3298: POP
3299: POP
// end ;
3300: LD_VAR 0 1
3304: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3305: LD_INT 0
3307: PPUSH
3308: PPUSH
3309: PPUSH
3310: PPUSH
3311: PPUSH
3312: PPUSH
3313: PPUSH
// uc_side := 5 ;
3314: LD_ADDR_OWVAR 20
3318: PUSH
3319: LD_INT 5
3321: ST_TO_ADDR
// uc_nation := 2 ;
3322: LD_ADDR_OWVAR 21
3326: PUSH
3327: LD_INT 2
3329: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3330: LD_ADDR_VAR 0 6
3334: PUSH
3335: LD_INT 2
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 14
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// InitHc ;
3353: CALL_OW 19
// for i in area do
3357: LD_ADDR_VAR 0 2
3361: PUSH
3362: LD_VAR 0 6
3366: PUSH
3367: FOR_IN
3368: IFFALSE 3532
// begin tmp := AreaToList ( i , 0 ) ;
3370: LD_ADDR_VAR 0 5
3374: PUSH
3375: LD_VAR 0 2
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 517
3387: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_VAR 0 5
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3528
// begin PrepareHuman ( false , 1 , 3 ) ;
3410: LD_INT 0
3412: PPUSH
3413: LD_INT 1
3415: PPUSH
3416: LD_INT 3
3418: PPUSH
3419: CALL_OW 380
// un := CreateHuman ;
3423: LD_ADDR_VAR 0 7
3427: PUSH
3428: CALL_OW 44
3432: ST_TO_ADDR
// if i = spawnBaseArea3 then
3433: LD_VAR 0 2
3437: PUSH
3438: LD_INT 5
3440: EQUAL
3441: IFFALSE 3459
// eonGuards := eonGuards ^ un ;
3443: LD_ADDR_EXP 14
3447: PUSH
3448: LD_EXP 14
3452: PUSH
3453: LD_VAR 0 7
3457: ADD
3458: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3459: LD_VAR 0 7
3463: PPUSH
3464: LD_VAR 0 2
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 49
// ComHold ( un ) ;
3476: LD_VAR 0 7
3480: PPUSH
3481: CALL_OW 140
// if i = spawnBaseArea4 then
3485: LD_VAR 0 2
3489: PUSH
3490: LD_INT 14
3492: EQUAL
3493: IFFALSE 3526
// begin firstGroup := firstGroup ^ un ;
3495: LD_ADDR_EXP 15
3499: PUSH
3500: LD_EXP 15
3504: PUSH
3505: LD_VAR 0 7
3509: ADD
3510: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3511: LD_VAR 0 7
3515: PPUSH
3516: LD_INT 108
3518: PPUSH
3519: LD_INT 47
3521: PPUSH
3522: CALL_OW 118
// end ; end ;
3526: GO 3407
3528: POP
3529: POP
// end ;
3530: GO 3367
3532: POP
3533: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3534: LD_ADDR_VAR 0 2
3538: PUSH
3539: DOUBLE
3540: LD_INT 1
3542: DEC
3543: ST_TO_ADDR
3544: LD_INT 30
3546: PUSH
3547: LD_INT 31
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 69
3558: PUSH
3559: FOR_TO
3560: IFFALSE 3654
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3562: LD_ADDR_VAR 0 4
3566: PUSH
3567: LD_INT 30
3569: PUSH
3570: LD_INT 31
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: CALL_OW 69
3581: PUSH
3582: LD_VAR 0 2
3586: ARRAY
3587: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3588: LD_INT 1
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: LD_INT 3
3596: PPUSH
3597: CALL_OW 380
// un := CreateHuman ;
3601: LD_ADDR_VAR 0 7
3605: PUSH
3606: CALL_OW 44
3610: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3611: LD_VAR 0 7
3615: PPUSH
3616: LD_VAR 0 4
3620: PPUSH
3621: CALL_OW 254
3625: PUSH
3626: LD_INT 3
3628: PLUS
3629: PUSH
3630: LD_INT 6
3632: MOD
3633: PPUSH
3634: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3638: LD_VAR 0 7
3642: PPUSH
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 52
// end ;
3652: GO 3559
3654: POP
3655: POP
// end ; end_of_file
3656: LD_VAR 0 1
3660: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3661: LD_VAR 0 1
3665: PUSH
3666: LD_INT 2
3668: EQUAL
3669: PUSH
3670: LD_VAR 0 2
3674: PUSH
3675: LD_INT 5
3677: EQUAL
3678: AND
3679: IFFALSE 3697
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3681: LD_INT 2
3683: PPUSH
3684: LD_INT 5
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: CALL_OW 80
// end ;
3697: PPOPN 2
3699: END
// every 0 0$1 trigger scientists do var i ;
3700: LD_EXP 13
3704: IFFALSE 3912
3706: GO 3708
3708: DISABLE
3709: LD_INT 0
3711: PPUSH
// begin repeat for i in scientists do
3712: LD_ADDR_VAR 0 1
3716: PUSH
3717: LD_EXP 13
3721: PUSH
3722: FOR_IN
3723: IFFALSE 3897
// begin wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 11
3739: PUSH
3740: LD_INT 13
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: LD_VAR 0 1
3751: PUSH
3752: LD_INT 2
3754: MOD
3755: PUSH
3756: LD_INT 1
3758: PLUS
3759: ARRAY
3760: PPUSH
3761: CALL_OW 308
3765: NOT
3766: IFFALSE 3801
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3768: LD_VAR 0 1
3772: PPUSH
3773: LD_INT 11
3775: PUSH
3776: LD_INT 13
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 1
3787: PUSH
3788: LD_INT 2
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3801: LD_VAR 0 1
3805: PPUSH
3806: LD_INT 14
3808: PPUSH
3809: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3813: LD_VAR 0 1
3817: PPUSH
3818: LD_INT 70
3820: PPUSH
3821: CALL_OW 202
// if rand ( 0 , 1 ) then
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: CALL_OW 12
3835: IFFALSE 3849
// AddComAnim ( i , 15 ) ;
3837: LD_VAR 0 1
3841: PPUSH
3842: LD_INT 15
3844: PPUSH
3845: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3849: LD_VAR 0 1
3853: PPUSH
3854: LD_INT 35
3856: PPUSH
3857: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3861: LD_VAR 0 1
3865: PPUSH
3866: LD_INT 12
3868: PPUSH
3869: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3873: LD_VAR 0 1
3877: PPUSH
3878: LD_INT 93
3880: PPUSH
3881: LD_INT 40
3883: PPUSH
3884: CALL_OW 178
// wait ( 0 0$1 ) ;
3888: LD_INT 35
3890: PPUSH
3891: CALL_OW 67
// end ;
3895: GO 3722
3897: POP
3898: POP
// wait ( 0 0$10 ) ;
3899: LD_INT 350
3901: PPUSH
3902: CALL_OW 67
// until heikeNearbyEon ;
3906: LD_EXP 19
3910: IFFALSE 3712
// end ; end_of_file
3912: PPOPN 1
3914: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3915: GO 3917
3917: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3918: LD_STRING initStreamRollete();
3920: PPUSH
3921: CALL_OW 559
// InitStreamMode ;
3925: CALL 3934 0 0
// DefineStreamItems ( ) ;
3929: CALL 4374 0 0
// end ;
3933: END
// function InitStreamMode ; begin
3934: LD_INT 0
3936: PPUSH
// streamModeActive := false ;
3937: LD_ADDR_EXP 21
3941: PUSH
3942: LD_INT 0
3944: ST_TO_ADDR
// normalCounter := 36 ;
3945: LD_ADDR_EXP 22
3949: PUSH
3950: LD_INT 36
3952: ST_TO_ADDR
// hardcoreCounter := 16 ;
3953: LD_ADDR_EXP 23
3957: PUSH
3958: LD_INT 16
3960: ST_TO_ADDR
// sRocket := false ;
3961: LD_ADDR_EXP 26
3965: PUSH
3966: LD_INT 0
3968: ST_TO_ADDR
// sSpeed := false ;
3969: LD_ADDR_EXP 25
3973: PUSH
3974: LD_INT 0
3976: ST_TO_ADDR
// sEngine := false ;
3977: LD_ADDR_EXP 27
3981: PUSH
3982: LD_INT 0
3984: ST_TO_ADDR
// sSpec := false ;
3985: LD_ADDR_EXP 24
3989: PUSH
3990: LD_INT 0
3992: ST_TO_ADDR
// sLevel := false ;
3993: LD_ADDR_EXP 28
3997: PUSH
3998: LD_INT 0
4000: ST_TO_ADDR
// sArmoury := false ;
4001: LD_ADDR_EXP 29
4005: PUSH
4006: LD_INT 0
4008: ST_TO_ADDR
// sRadar := false ;
4009: LD_ADDR_EXP 30
4013: PUSH
4014: LD_INT 0
4016: ST_TO_ADDR
// sBunker := false ;
4017: LD_ADDR_EXP 31
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// sHack := false ;
4025: LD_ADDR_EXP 32
4029: PUSH
4030: LD_INT 0
4032: ST_TO_ADDR
// sFire := false ;
4033: LD_ADDR_EXP 33
4037: PUSH
4038: LD_INT 0
4040: ST_TO_ADDR
// sRefresh := false ;
4041: LD_ADDR_EXP 34
4045: PUSH
4046: LD_INT 0
4048: ST_TO_ADDR
// sExp := false ;
4049: LD_ADDR_EXP 35
4053: PUSH
4054: LD_INT 0
4056: ST_TO_ADDR
// sDepot := false ;
4057: LD_ADDR_EXP 36
4061: PUSH
4062: LD_INT 0
4064: ST_TO_ADDR
// sFlag := false ;
4065: LD_ADDR_EXP 37
4069: PUSH
4070: LD_INT 0
4072: ST_TO_ADDR
// sKamikadze := false ;
4073: LD_ADDR_EXP 45
4077: PUSH
4078: LD_INT 0
4080: ST_TO_ADDR
// sTroll := false ;
4081: LD_ADDR_EXP 46
4085: PUSH
4086: LD_INT 0
4088: ST_TO_ADDR
// sSlow := false ;
4089: LD_ADDR_EXP 47
4093: PUSH
4094: LD_INT 0
4096: ST_TO_ADDR
// sLack := false ;
4097: LD_ADDR_EXP 48
4101: PUSH
4102: LD_INT 0
4104: ST_TO_ADDR
// sTank := false ;
4105: LD_ADDR_EXP 50
4109: PUSH
4110: LD_INT 0
4112: ST_TO_ADDR
// sRemote := false ;
4113: LD_ADDR_EXP 51
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// sPowell := false ;
4121: LD_ADDR_EXP 52
4125: PUSH
4126: LD_INT 0
4128: ST_TO_ADDR
// sTeleport := false ;
4129: LD_ADDR_EXP 55
4133: PUSH
4134: LD_INT 0
4136: ST_TO_ADDR
// sOilTower := false ;
4137: LD_ADDR_EXP 57
4141: PUSH
4142: LD_INT 0
4144: ST_TO_ADDR
// sShovel := false ;
4145: LD_ADDR_EXP 58
4149: PUSH
4150: LD_INT 0
4152: ST_TO_ADDR
// sSheik := false ;
4153: LD_ADDR_EXP 59
4157: PUSH
4158: LD_INT 0
4160: ST_TO_ADDR
// sEarthquake := false ;
4161: LD_ADDR_EXP 61
4165: PUSH
4166: LD_INT 0
4168: ST_TO_ADDR
// sAI := false ;
4169: LD_ADDR_EXP 62
4173: PUSH
4174: LD_INT 0
4176: ST_TO_ADDR
// sCargo := false ;
4177: LD_ADDR_EXP 65
4181: PUSH
4182: LD_INT 0
4184: ST_TO_ADDR
// sDLaser := false ;
4185: LD_ADDR_EXP 66
4189: PUSH
4190: LD_INT 0
4192: ST_TO_ADDR
// sExchange := false ;
4193: LD_ADDR_EXP 67
4197: PUSH
4198: LD_INT 0
4200: ST_TO_ADDR
// sFac := false ;
4201: LD_ADDR_EXP 68
4205: PUSH
4206: LD_INT 0
4208: ST_TO_ADDR
// sPower := false ;
4209: LD_ADDR_EXP 69
4213: PUSH
4214: LD_INT 0
4216: ST_TO_ADDR
// sRandom := false ;
4217: LD_ADDR_EXP 70
4221: PUSH
4222: LD_INT 0
4224: ST_TO_ADDR
// sShield := false ;
4225: LD_ADDR_EXP 71
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
// sTime := false ;
4233: LD_ADDR_EXP 72
4237: PUSH
4238: LD_INT 0
4240: ST_TO_ADDR
// sTools := false ;
4241: LD_ADDR_EXP 73
4245: PUSH
4246: LD_INT 0
4248: ST_TO_ADDR
// sSold := false ;
4249: LD_ADDR_EXP 38
4253: PUSH
4254: LD_INT 0
4256: ST_TO_ADDR
// sDiff := false ;
4257: LD_ADDR_EXP 39
4261: PUSH
4262: LD_INT 0
4264: ST_TO_ADDR
// sFog := false ;
4265: LD_ADDR_EXP 42
4269: PUSH
4270: LD_INT 0
4272: ST_TO_ADDR
// sReset := false ;
4273: LD_ADDR_EXP 43
4277: PUSH
4278: LD_INT 0
4280: ST_TO_ADDR
// sSun := false ;
4281: LD_ADDR_EXP 44
4285: PUSH
4286: LD_INT 0
4288: ST_TO_ADDR
// sTiger := false ;
4289: LD_ADDR_EXP 40
4293: PUSH
4294: LD_INT 0
4296: ST_TO_ADDR
// sBomb := false ;
4297: LD_ADDR_EXP 41
4301: PUSH
4302: LD_INT 0
4304: ST_TO_ADDR
// sWound := false ;
4305: LD_ADDR_EXP 49
4309: PUSH
4310: LD_INT 0
4312: ST_TO_ADDR
// sBetray := false ;
4313: LD_ADDR_EXP 53
4317: PUSH
4318: LD_INT 0
4320: ST_TO_ADDR
// sContamin := false ;
4321: LD_ADDR_EXP 54
4325: PUSH
4326: LD_INT 0
4328: ST_TO_ADDR
// sOil := false ;
4329: LD_ADDR_EXP 56
4333: PUSH
4334: LD_INT 0
4336: ST_TO_ADDR
// sStu := false ;
4337: LD_ADDR_EXP 60
4341: PUSH
4342: LD_INT 0
4344: ST_TO_ADDR
// sBazooka := false ;
4345: LD_ADDR_EXP 63
4349: PUSH
4350: LD_INT 0
4352: ST_TO_ADDR
// sMortar := false ;
4353: LD_ADDR_EXP 64
4357: PUSH
4358: LD_INT 0
4360: ST_TO_ADDR
// sRanger := false ;
4361: LD_ADDR_EXP 74
4365: PUSH
4366: LD_INT 0
4368: ST_TO_ADDR
// end ;
4369: LD_VAR 0 1
4373: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4374: LD_INT 0
4376: PPUSH
4377: PPUSH
4378: PPUSH
4379: PPUSH
4380: PPUSH
// result := [ ] ;
4381: LD_ADDR_VAR 0 1
4385: PUSH
4386: EMPTY
4387: ST_TO_ADDR
// if campaign_id = 1 then
4388: LD_OWVAR 69
4392: PUSH
4393: LD_INT 1
4395: EQUAL
4396: IFFALSE 7334
// begin case mission_number of 1 :
4398: LD_OWVAR 70
4402: PUSH
4403: LD_INT 1
4405: DOUBLE
4406: EQUAL
4407: IFTRUE 4411
4409: GO 4475
4411: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4412: LD_ADDR_VAR 0 1
4416: PUSH
4417: LD_INT 2
4419: PUSH
4420: LD_INT 4
4422: PUSH
4423: LD_INT 11
4425: PUSH
4426: LD_INT 12
4428: PUSH
4429: LD_INT 15
4431: PUSH
4432: LD_INT 16
4434: PUSH
4435: LD_INT 22
4437: PUSH
4438: LD_INT 23
4440: PUSH
4441: LD_INT 26
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 101
4457: PUSH
4458: LD_INT 102
4460: PUSH
4461: LD_INT 106
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: LIST
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: ST_TO_ADDR
4473: GO 7332
4475: LD_INT 2
4477: DOUBLE
4478: EQUAL
4479: IFTRUE 4483
4481: GO 4555
4483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4484: LD_ADDR_VAR 0 1
4488: PUSH
4489: LD_INT 2
4491: PUSH
4492: LD_INT 4
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 12
4500: PUSH
4501: LD_INT 15
4503: PUSH
4504: LD_INT 16
4506: PUSH
4507: LD_INT 22
4509: PUSH
4510: LD_INT 23
4512: PUSH
4513: LD_INT 26
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 101
4529: PUSH
4530: LD_INT 102
4532: PUSH
4533: LD_INT 105
4535: PUSH
4536: LD_INT 106
4538: PUSH
4539: LD_INT 108
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: ST_TO_ADDR
4553: GO 7332
4555: LD_INT 3
4557: DOUBLE
4558: EQUAL
4559: IFTRUE 4563
4561: GO 4639
4563: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4564: LD_ADDR_VAR 0 1
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: LD_INT 11
4580: PUSH
4581: LD_INT 12
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: LD_INT 16
4589: PUSH
4590: LD_INT 22
4592: PUSH
4593: LD_INT 26
4595: PUSH
4596: LD_INT 36
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 101
4613: PUSH
4614: LD_INT 102
4616: PUSH
4617: LD_INT 105
4619: PUSH
4620: LD_INT 106
4622: PUSH
4623: LD_INT 108
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: ST_TO_ADDR
4637: GO 7332
4639: LD_INT 4
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4647
4645: GO 4731
4647: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4648: LD_ADDR_VAR 0 1
4652: PUSH
4653: LD_INT 2
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: LD_INT 8
4664: PUSH
4665: LD_INT 11
4667: PUSH
4668: LD_INT 12
4670: PUSH
4671: LD_INT 15
4673: PUSH
4674: LD_INT 16
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 26
4685: PUSH
4686: LD_INT 36
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 101
4705: PUSH
4706: LD_INT 102
4708: PUSH
4709: LD_INT 105
4711: PUSH
4712: LD_INT 106
4714: PUSH
4715: LD_INT 108
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: ST_TO_ADDR
4729: GO 7332
4731: LD_INT 5
4733: DOUBLE
4734: EQUAL
4735: IFTRUE 4739
4737: GO 4839
4739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4740: LD_ADDR_VAR 0 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 5
4753: PUSH
4754: LD_INT 6
4756: PUSH
4757: LD_INT 8
4759: PUSH
4760: LD_INT 11
4762: PUSH
4763: LD_INT 12
4765: PUSH
4766: LD_INT 15
4768: PUSH
4769: LD_INT 16
4771: PUSH
4772: LD_INT 22
4774: PUSH
4775: LD_INT 23
4777: PUSH
4778: LD_INT 25
4780: PUSH
4781: LD_INT 26
4783: PUSH
4784: LD_INT 36
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 101
4805: PUSH
4806: LD_INT 102
4808: PUSH
4809: LD_INT 105
4811: PUSH
4812: LD_INT 106
4814: PUSH
4815: LD_INT 108
4817: PUSH
4818: LD_INT 109
4820: PUSH
4821: LD_INT 112
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 7332
4839: LD_INT 6
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4967
4847: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4848: LD_ADDR_VAR 0 1
4852: PUSH
4853: LD_INT 2
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: LD_INT 8
4867: PUSH
4868: LD_INT 11
4870: PUSH
4871: LD_INT 12
4873: PUSH
4874: LD_INT 15
4876: PUSH
4877: LD_INT 16
4879: PUSH
4880: LD_INT 20
4882: PUSH
4883: LD_INT 21
4885: PUSH
4886: LD_INT 22
4888: PUSH
4889: LD_INT 23
4891: PUSH
4892: LD_INT 25
4894: PUSH
4895: LD_INT 26
4897: PUSH
4898: LD_INT 30
4900: PUSH
4901: LD_INT 31
4903: PUSH
4904: LD_INT 32
4906: PUSH
4907: LD_INT 36
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 101
4933: PUSH
4934: LD_INT 102
4936: PUSH
4937: LD_INT 105
4939: PUSH
4940: LD_INT 106
4942: PUSH
4943: LD_INT 108
4945: PUSH
4946: LD_INT 109
4948: PUSH
4949: LD_INT 112
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: ST_TO_ADDR
4965: GO 7332
4967: LD_INT 7
4969: DOUBLE
4970: EQUAL
4971: IFTRUE 4975
4973: GO 5075
4975: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4976: LD_ADDR_VAR 0 1
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: LD_INT 4
4986: PUSH
4987: LD_INT 5
4989: PUSH
4990: LD_INT 7
4992: PUSH
4993: LD_INT 11
4995: PUSH
4996: LD_INT 12
4998: PUSH
4999: LD_INT 15
5001: PUSH
5002: LD_INT 16
5004: PUSH
5005: LD_INT 20
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 23
5016: PUSH
5017: LD_INT 25
5019: PUSH
5020: LD_INT 26
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 101
5041: PUSH
5042: LD_INT 102
5044: PUSH
5045: LD_INT 103
5047: PUSH
5048: LD_INT 105
5050: PUSH
5051: LD_INT 106
5053: PUSH
5054: LD_INT 108
5056: PUSH
5057: LD_INT 112
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
5073: GO 7332
5075: LD_INT 8
5077: DOUBLE
5078: EQUAL
5079: IFTRUE 5083
5081: GO 5211
5083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5084: LD_ADDR_VAR 0 1
5088: PUSH
5089: LD_INT 2
5091: PUSH
5092: LD_INT 4
5094: PUSH
5095: LD_INT 5
5097: PUSH
5098: LD_INT 6
5100: PUSH
5101: LD_INT 7
5103: PUSH
5104: LD_INT 8
5106: PUSH
5107: LD_INT 11
5109: PUSH
5110: LD_INT 12
5112: PUSH
5113: LD_INT 15
5115: PUSH
5116: LD_INT 16
5118: PUSH
5119: LD_INT 20
5121: PUSH
5122: LD_INT 21
5124: PUSH
5125: LD_INT 22
5127: PUSH
5128: LD_INT 23
5130: PUSH
5131: LD_INT 25
5133: PUSH
5134: LD_INT 26
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: LD_INT 32
5145: PUSH
5146: LD_INT 36
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 101
5173: PUSH
5174: LD_INT 102
5176: PUSH
5177: LD_INT 103
5179: PUSH
5180: LD_INT 105
5182: PUSH
5183: LD_INT 106
5185: PUSH
5186: LD_INT 108
5188: PUSH
5189: LD_INT 109
5191: PUSH
5192: LD_INT 112
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: ST_TO_ADDR
5209: GO 7332
5211: LD_INT 9
5213: DOUBLE
5214: EQUAL
5215: IFTRUE 5219
5217: GO 5355
5219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5220: LD_ADDR_VAR 0 1
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: LD_INT 4
5230: PUSH
5231: LD_INT 5
5233: PUSH
5234: LD_INT 6
5236: PUSH
5237: LD_INT 7
5239: PUSH
5240: LD_INT 8
5242: PUSH
5243: LD_INT 11
5245: PUSH
5246: LD_INT 12
5248: PUSH
5249: LD_INT 15
5251: PUSH
5252: LD_INT 16
5254: PUSH
5255: LD_INT 20
5257: PUSH
5258: LD_INT 21
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 23
5266: PUSH
5267: LD_INT 25
5269: PUSH
5270: LD_INT 26
5272: PUSH
5273: LD_INT 28
5275: PUSH
5276: LD_INT 30
5278: PUSH
5279: LD_INT 31
5281: PUSH
5282: LD_INT 32
5284: PUSH
5285: LD_INT 36
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 101
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: LD_INT 103
5319: PUSH
5320: LD_INT 105
5322: PUSH
5323: LD_INT 106
5325: PUSH
5326: LD_INT 108
5328: PUSH
5329: LD_INT 109
5331: PUSH
5332: LD_INT 112
5334: PUSH
5335: LD_INT 114
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: ST_TO_ADDR
5353: GO 7332
5355: LD_INT 10
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5547
5363: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5364: LD_ADDR_VAR 0 1
5368: PUSH
5369: LD_INT 2
5371: PUSH
5372: LD_INT 4
5374: PUSH
5375: LD_INT 5
5377: PUSH
5378: LD_INT 6
5380: PUSH
5381: LD_INT 7
5383: PUSH
5384: LD_INT 8
5386: PUSH
5387: LD_INT 9
5389: PUSH
5390: LD_INT 10
5392: PUSH
5393: LD_INT 11
5395: PUSH
5396: LD_INT 12
5398: PUSH
5399: LD_INT 13
5401: PUSH
5402: LD_INT 14
5404: PUSH
5405: LD_INT 15
5407: PUSH
5408: LD_INT 16
5410: PUSH
5411: LD_INT 17
5413: PUSH
5414: LD_INT 18
5416: PUSH
5417: LD_INT 19
5419: PUSH
5420: LD_INT 20
5422: PUSH
5423: LD_INT 21
5425: PUSH
5426: LD_INT 22
5428: PUSH
5429: LD_INT 23
5431: PUSH
5432: LD_INT 24
5434: PUSH
5435: LD_INT 25
5437: PUSH
5438: LD_INT 26
5440: PUSH
5441: LD_INT 28
5443: PUSH
5444: LD_INT 30
5446: PUSH
5447: LD_INT 31
5449: PUSH
5450: LD_INT 32
5452: PUSH
5453: LD_INT 36
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 101
5489: PUSH
5490: LD_INT 102
5492: PUSH
5493: LD_INT 103
5495: PUSH
5496: LD_INT 104
5498: PUSH
5499: LD_INT 105
5501: PUSH
5502: LD_INT 106
5504: PUSH
5505: LD_INT 107
5507: PUSH
5508: LD_INT 108
5510: PUSH
5511: LD_INT 109
5513: PUSH
5514: LD_INT 110
5516: PUSH
5517: LD_INT 111
5519: PUSH
5520: LD_INT 112
5522: PUSH
5523: LD_INT 114
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: ST_TO_ADDR
5545: GO 7332
5547: LD_INT 11
5549: DOUBLE
5550: EQUAL
5551: IFTRUE 5555
5553: GO 5747
5555: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5556: LD_ADDR_VAR 0 1
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 3
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: LD_INT 5
5572: PUSH
5573: LD_INT 6
5575: PUSH
5576: LD_INT 7
5578: PUSH
5579: LD_INT 8
5581: PUSH
5582: LD_INT 9
5584: PUSH
5585: LD_INT 10
5587: PUSH
5588: LD_INT 11
5590: PUSH
5591: LD_INT 12
5593: PUSH
5594: LD_INT 13
5596: PUSH
5597: LD_INT 14
5599: PUSH
5600: LD_INT 15
5602: PUSH
5603: LD_INT 16
5605: PUSH
5606: LD_INT 17
5608: PUSH
5609: LD_INT 18
5611: PUSH
5612: LD_INT 19
5614: PUSH
5615: LD_INT 20
5617: PUSH
5618: LD_INT 21
5620: PUSH
5621: LD_INT 22
5623: PUSH
5624: LD_INT 23
5626: PUSH
5627: LD_INT 24
5629: PUSH
5630: LD_INT 25
5632: PUSH
5633: LD_INT 26
5635: PUSH
5636: LD_INT 28
5638: PUSH
5639: LD_INT 30
5641: PUSH
5642: LD_INT 31
5644: PUSH
5645: LD_INT 32
5647: PUSH
5648: LD_INT 34
5650: PUSH
5651: LD_INT 36
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 101
5689: PUSH
5690: LD_INT 102
5692: PUSH
5693: LD_INT 103
5695: PUSH
5696: LD_INT 104
5698: PUSH
5699: LD_INT 105
5701: PUSH
5702: LD_INT 106
5704: PUSH
5705: LD_INT 107
5707: PUSH
5708: LD_INT 108
5710: PUSH
5711: LD_INT 109
5713: PUSH
5714: LD_INT 110
5716: PUSH
5717: LD_INT 111
5719: PUSH
5720: LD_INT 112
5722: PUSH
5723: LD_INT 114
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: ST_TO_ADDR
5745: GO 7332
5747: LD_INT 12
5749: DOUBLE
5750: EQUAL
5751: IFTRUE 5755
5753: GO 5963
5755: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5756: LD_ADDR_VAR 0 1
5760: PUSH
5761: LD_INT 1
5763: PUSH
5764: LD_INT 2
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 4
5772: PUSH
5773: LD_INT 5
5775: PUSH
5776: LD_INT 6
5778: PUSH
5779: LD_INT 7
5781: PUSH
5782: LD_INT 8
5784: PUSH
5785: LD_INT 9
5787: PUSH
5788: LD_INT 10
5790: PUSH
5791: LD_INT 11
5793: PUSH
5794: LD_INT 12
5796: PUSH
5797: LD_INT 13
5799: PUSH
5800: LD_INT 14
5802: PUSH
5803: LD_INT 15
5805: PUSH
5806: LD_INT 16
5808: PUSH
5809: LD_INT 17
5811: PUSH
5812: LD_INT 18
5814: PUSH
5815: LD_INT 19
5817: PUSH
5818: LD_INT 20
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 22
5826: PUSH
5827: LD_INT 23
5829: PUSH
5830: LD_INT 24
5832: PUSH
5833: LD_INT 25
5835: PUSH
5836: LD_INT 26
5838: PUSH
5839: LD_INT 27
5841: PUSH
5842: LD_INT 28
5844: PUSH
5845: LD_INT 30
5847: PUSH
5848: LD_INT 31
5850: PUSH
5851: LD_INT 32
5853: PUSH
5854: LD_INT 33
5856: PUSH
5857: LD_INT 34
5859: PUSH
5860: LD_INT 36
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 101
5901: PUSH
5902: LD_INT 102
5904: PUSH
5905: LD_INT 103
5907: PUSH
5908: LD_INT 104
5910: PUSH
5911: LD_INT 105
5913: PUSH
5914: LD_INT 106
5916: PUSH
5917: LD_INT 107
5919: PUSH
5920: LD_INT 108
5922: PUSH
5923: LD_INT 109
5925: PUSH
5926: LD_INT 110
5928: PUSH
5929: LD_INT 111
5931: PUSH
5932: LD_INT 112
5934: PUSH
5935: LD_INT 113
5937: PUSH
5938: LD_INT 114
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: ST_TO_ADDR
5961: GO 7332
5963: LD_INT 13
5965: DOUBLE
5966: EQUAL
5967: IFTRUE 5971
5969: GO 6167
5971: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5972: LD_ADDR_VAR 0 1
5976: PUSH
5977: LD_INT 1
5979: PUSH
5980: LD_INT 2
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: LD_INT 4
5988: PUSH
5989: LD_INT 5
5991: PUSH
5992: LD_INT 8
5994: PUSH
5995: LD_INT 9
5997: PUSH
5998: LD_INT 10
6000: PUSH
6001: LD_INT 11
6003: PUSH
6004: LD_INT 12
6006: PUSH
6007: LD_INT 14
6009: PUSH
6010: LD_INT 15
6012: PUSH
6013: LD_INT 16
6015: PUSH
6016: LD_INT 17
6018: PUSH
6019: LD_INT 18
6021: PUSH
6022: LD_INT 19
6024: PUSH
6025: LD_INT 20
6027: PUSH
6028: LD_INT 21
6030: PUSH
6031: LD_INT 22
6033: PUSH
6034: LD_INT 23
6036: PUSH
6037: LD_INT 24
6039: PUSH
6040: LD_INT 25
6042: PUSH
6043: LD_INT 26
6045: PUSH
6046: LD_INT 27
6048: PUSH
6049: LD_INT 28
6051: PUSH
6052: LD_INT 30
6054: PUSH
6055: LD_INT 31
6057: PUSH
6058: LD_INT 32
6060: PUSH
6061: LD_INT 33
6063: PUSH
6064: LD_INT 34
6066: PUSH
6067: LD_INT 36
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 101
6105: PUSH
6106: LD_INT 102
6108: PUSH
6109: LD_INT 103
6111: PUSH
6112: LD_INT 104
6114: PUSH
6115: LD_INT 105
6117: PUSH
6118: LD_INT 106
6120: PUSH
6121: LD_INT 107
6123: PUSH
6124: LD_INT 108
6126: PUSH
6127: LD_INT 109
6129: PUSH
6130: LD_INT 110
6132: PUSH
6133: LD_INT 111
6135: PUSH
6136: LD_INT 112
6138: PUSH
6139: LD_INT 113
6141: PUSH
6142: LD_INT 114
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: ST_TO_ADDR
6165: GO 7332
6167: LD_INT 14
6169: DOUBLE
6170: EQUAL
6171: IFTRUE 6175
6173: GO 6387
6175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6176: LD_ADDR_VAR 0 1
6180: PUSH
6181: LD_INT 1
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: LD_INT 3
6189: PUSH
6190: LD_INT 4
6192: PUSH
6193: LD_INT 5
6195: PUSH
6196: LD_INT 6
6198: PUSH
6199: LD_INT 7
6201: PUSH
6202: LD_INT 8
6204: PUSH
6205: LD_INT 9
6207: PUSH
6208: LD_INT 10
6210: PUSH
6211: LD_INT 11
6213: PUSH
6214: LD_INT 12
6216: PUSH
6217: LD_INT 13
6219: PUSH
6220: LD_INT 14
6222: PUSH
6223: LD_INT 15
6225: PUSH
6226: LD_INT 16
6228: PUSH
6229: LD_INT 17
6231: PUSH
6232: LD_INT 18
6234: PUSH
6235: LD_INT 19
6237: PUSH
6238: LD_INT 20
6240: PUSH
6241: LD_INT 21
6243: PUSH
6244: LD_INT 22
6246: PUSH
6247: LD_INT 23
6249: PUSH
6250: LD_INT 24
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 26
6258: PUSH
6259: LD_INT 27
6261: PUSH
6262: LD_INT 28
6264: PUSH
6265: LD_INT 29
6267: PUSH
6268: LD_INT 30
6270: PUSH
6271: LD_INT 31
6273: PUSH
6274: LD_INT 32
6276: PUSH
6277: LD_INT 33
6279: PUSH
6280: LD_INT 34
6282: PUSH
6283: LD_INT 36
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 101
6325: PUSH
6326: LD_INT 102
6328: PUSH
6329: LD_INT 103
6331: PUSH
6332: LD_INT 104
6334: PUSH
6335: LD_INT 105
6337: PUSH
6338: LD_INT 106
6340: PUSH
6341: LD_INT 107
6343: PUSH
6344: LD_INT 108
6346: PUSH
6347: LD_INT 109
6349: PUSH
6350: LD_INT 110
6352: PUSH
6353: LD_INT 111
6355: PUSH
6356: LD_INT 112
6358: PUSH
6359: LD_INT 113
6361: PUSH
6362: LD_INT 114
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: ST_TO_ADDR
6385: GO 7332
6387: LD_INT 15
6389: DOUBLE
6390: EQUAL
6391: IFTRUE 6395
6393: GO 6607
6395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: LD_INT 1
6403: PUSH
6404: LD_INT 2
6406: PUSH
6407: LD_INT 3
6409: PUSH
6410: LD_INT 4
6412: PUSH
6413: LD_INT 5
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: LD_INT 7
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: LD_INT 9
6427: PUSH
6428: LD_INT 10
6430: PUSH
6431: LD_INT 11
6433: PUSH
6434: LD_INT 12
6436: PUSH
6437: LD_INT 13
6439: PUSH
6440: LD_INT 14
6442: PUSH
6443: LD_INT 15
6445: PUSH
6446: LD_INT 16
6448: PUSH
6449: LD_INT 17
6451: PUSH
6452: LD_INT 18
6454: PUSH
6455: LD_INT 19
6457: PUSH
6458: LD_INT 20
6460: PUSH
6461: LD_INT 21
6463: PUSH
6464: LD_INT 22
6466: PUSH
6467: LD_INT 23
6469: PUSH
6470: LD_INT 24
6472: PUSH
6473: LD_INT 25
6475: PUSH
6476: LD_INT 26
6478: PUSH
6479: LD_INT 27
6481: PUSH
6482: LD_INT 28
6484: PUSH
6485: LD_INT 29
6487: PUSH
6488: LD_INT 30
6490: PUSH
6491: LD_INT 31
6493: PUSH
6494: LD_INT 32
6496: PUSH
6497: LD_INT 33
6499: PUSH
6500: LD_INT 34
6502: PUSH
6503: LD_INT 36
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 101
6545: PUSH
6546: LD_INT 102
6548: PUSH
6549: LD_INT 103
6551: PUSH
6552: LD_INT 104
6554: PUSH
6555: LD_INT 105
6557: PUSH
6558: LD_INT 106
6560: PUSH
6561: LD_INT 107
6563: PUSH
6564: LD_INT 108
6566: PUSH
6567: LD_INT 109
6569: PUSH
6570: LD_INT 110
6572: PUSH
6573: LD_INT 111
6575: PUSH
6576: LD_INT 112
6578: PUSH
6579: LD_INT 113
6581: PUSH
6582: LD_INT 114
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: ST_TO_ADDR
6605: GO 7332
6607: LD_INT 16
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6739
6615: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6616: LD_ADDR_VAR 0 1
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 4
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: LD_INT 7
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 12
6638: PUSH
6639: LD_INT 15
6641: PUSH
6642: LD_INT 16
6644: PUSH
6645: LD_INT 20
6647: PUSH
6648: LD_INT 21
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: LD_INT 23
6656: PUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 26
6662: PUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 31
6668: PUSH
6669: LD_INT 32
6671: PUSH
6672: LD_INT 33
6674: PUSH
6675: LD_INT 34
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: PUSH
6699: LD_INT 101
6701: PUSH
6702: LD_INT 102
6704: PUSH
6705: LD_INT 103
6707: PUSH
6708: LD_INT 106
6710: PUSH
6711: LD_INT 108
6713: PUSH
6714: LD_INT 112
6716: PUSH
6717: LD_INT 113
6719: PUSH
6720: LD_INT 114
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 7332
6739: LD_INT 17
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6959
6747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6748: LD_ADDR_VAR 0 1
6752: PUSH
6753: LD_INT 1
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 9
6779: PUSH
6780: LD_INT 10
6782: PUSH
6783: LD_INT 11
6785: PUSH
6786: LD_INT 12
6788: PUSH
6789: LD_INT 13
6791: PUSH
6792: LD_INT 14
6794: PUSH
6795: LD_INT 15
6797: PUSH
6798: LD_INT 16
6800: PUSH
6801: LD_INT 17
6803: PUSH
6804: LD_INT 18
6806: PUSH
6807: LD_INT 19
6809: PUSH
6810: LD_INT 20
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 22
6818: PUSH
6819: LD_INT 23
6821: PUSH
6822: LD_INT 24
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: LD_INT 26
6830: PUSH
6831: LD_INT 27
6833: PUSH
6834: LD_INT 28
6836: PUSH
6837: LD_INT 29
6839: PUSH
6840: LD_INT 30
6842: PUSH
6843: LD_INT 31
6845: PUSH
6846: LD_INT 32
6848: PUSH
6849: LD_INT 33
6851: PUSH
6852: LD_INT 34
6854: PUSH
6855: LD_INT 36
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 101
6897: PUSH
6898: LD_INT 102
6900: PUSH
6901: LD_INT 103
6903: PUSH
6904: LD_INT 104
6906: PUSH
6907: LD_INT 105
6909: PUSH
6910: LD_INT 106
6912: PUSH
6913: LD_INT 107
6915: PUSH
6916: LD_INT 108
6918: PUSH
6919: LD_INT 109
6921: PUSH
6922: LD_INT 110
6924: PUSH
6925: LD_INT 111
6927: PUSH
6928: LD_INT 112
6930: PUSH
6931: LD_INT 113
6933: PUSH
6934: LD_INT 114
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: ST_TO_ADDR
6957: GO 7332
6959: LD_INT 18
6961: DOUBLE
6962: EQUAL
6963: IFTRUE 6967
6965: GO 7103
6967: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6968: LD_ADDR_VAR 0 1
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: LD_INT 4
6978: PUSH
6979: LD_INT 5
6981: PUSH
6982: LD_INT 7
6984: PUSH
6985: LD_INT 11
6987: PUSH
6988: LD_INT 12
6990: PUSH
6991: LD_INT 15
6993: PUSH
6994: LD_INT 16
6996: PUSH
6997: LD_INT 20
6999: PUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 25
7011: PUSH
7012: LD_INT 26
7014: PUSH
7015: LD_INT 30
7017: PUSH
7018: LD_INT 31
7020: PUSH
7021: LD_INT 32
7023: PUSH
7024: LD_INT 33
7026: PUSH
7027: LD_INT 34
7029: PUSH
7030: LD_INT 35
7032: PUSH
7033: LD_INT 36
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 101
7061: PUSH
7062: LD_INT 102
7064: PUSH
7065: LD_INT 103
7067: PUSH
7068: LD_INT 106
7070: PUSH
7071: LD_INT 108
7073: PUSH
7074: LD_INT 112
7076: PUSH
7077: LD_INT 113
7079: PUSH
7080: LD_INT 114
7082: PUSH
7083: LD_INT 115
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: ST_TO_ADDR
7101: GO 7332
7103: LD_INT 19
7105: DOUBLE
7106: EQUAL
7107: IFTRUE 7111
7109: GO 7331
7111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7112: LD_ADDR_VAR 0 1
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: LD_INT 2
7122: PUSH
7123: LD_INT 3
7125: PUSH
7126: LD_INT 4
7128: PUSH
7129: LD_INT 5
7131: PUSH
7132: LD_INT 6
7134: PUSH
7135: LD_INT 7
7137: PUSH
7138: LD_INT 8
7140: PUSH
7141: LD_INT 9
7143: PUSH
7144: LD_INT 10
7146: PUSH
7147: LD_INT 11
7149: PUSH
7150: LD_INT 12
7152: PUSH
7153: LD_INT 13
7155: PUSH
7156: LD_INT 14
7158: PUSH
7159: LD_INT 15
7161: PUSH
7162: LD_INT 16
7164: PUSH
7165: LD_INT 17
7167: PUSH
7168: LD_INT 18
7170: PUSH
7171: LD_INT 19
7173: PUSH
7174: LD_INT 20
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 22
7182: PUSH
7183: LD_INT 23
7185: PUSH
7186: LD_INT 24
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 26
7194: PUSH
7195: LD_INT 27
7197: PUSH
7198: LD_INT 28
7200: PUSH
7201: LD_INT 29
7203: PUSH
7204: LD_INT 30
7206: PUSH
7207: LD_INT 31
7209: PUSH
7210: LD_INT 32
7212: PUSH
7213: LD_INT 33
7215: PUSH
7216: LD_INT 34
7218: PUSH
7219: LD_INT 35
7221: PUSH
7222: LD_INT 36
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 101
7265: PUSH
7266: LD_INT 102
7268: PUSH
7269: LD_INT 103
7271: PUSH
7272: LD_INT 104
7274: PUSH
7275: LD_INT 105
7277: PUSH
7278: LD_INT 106
7280: PUSH
7281: LD_INT 107
7283: PUSH
7284: LD_INT 108
7286: PUSH
7287: LD_INT 109
7289: PUSH
7290: LD_INT 110
7292: PUSH
7293: LD_INT 111
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 113
7301: PUSH
7302: LD_INT 114
7304: PUSH
7305: LD_INT 115
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: ST_TO_ADDR
7329: GO 7332
7331: POP
// end else
7332: GO 7551
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7334: LD_ADDR_VAR 0 1
7338: PUSH
7339: LD_INT 1
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: LD_INT 4
7350: PUSH
7351: LD_INT 5
7353: PUSH
7354: LD_INT 6
7356: PUSH
7357: LD_INT 7
7359: PUSH
7360: LD_INT 8
7362: PUSH
7363: LD_INT 9
7365: PUSH
7366: LD_INT 10
7368: PUSH
7369: LD_INT 11
7371: PUSH
7372: LD_INT 12
7374: PUSH
7375: LD_INT 13
7377: PUSH
7378: LD_INT 14
7380: PUSH
7381: LD_INT 15
7383: PUSH
7384: LD_INT 16
7386: PUSH
7387: LD_INT 17
7389: PUSH
7390: LD_INT 18
7392: PUSH
7393: LD_INT 19
7395: PUSH
7396: LD_INT 20
7398: PUSH
7399: LD_INT 21
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 23
7407: PUSH
7408: LD_INT 24
7410: PUSH
7411: LD_INT 25
7413: PUSH
7414: LD_INT 26
7416: PUSH
7417: LD_INT 27
7419: PUSH
7420: LD_INT 28
7422: PUSH
7423: LD_INT 29
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 31
7431: PUSH
7432: LD_INT 32
7434: PUSH
7435: LD_INT 33
7437: PUSH
7438: LD_INT 34
7440: PUSH
7441: LD_INT 35
7443: PUSH
7444: LD_INT 36
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 101
7487: PUSH
7488: LD_INT 102
7490: PUSH
7491: LD_INT 103
7493: PUSH
7494: LD_INT 104
7496: PUSH
7497: LD_INT 105
7499: PUSH
7500: LD_INT 106
7502: PUSH
7503: LD_INT 107
7505: PUSH
7506: LD_INT 108
7508: PUSH
7509: LD_INT 109
7511: PUSH
7512: LD_INT 110
7514: PUSH
7515: LD_INT 111
7517: PUSH
7518: LD_INT 112
7520: PUSH
7521: LD_INT 113
7523: PUSH
7524: LD_INT 114
7526: PUSH
7527: LD_INT 115
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: ST_TO_ADDR
// if result then
7551: LD_VAR 0 1
7555: IFFALSE 7844
// begin normal :=  ;
7557: LD_ADDR_VAR 0 3
7561: PUSH
7562: LD_STRING 
7564: ST_TO_ADDR
// hardcore :=  ;
7565: LD_ADDR_VAR 0 4
7569: PUSH
7570: LD_STRING 
7572: ST_TO_ADDR
// for i = 1 to normalCounter do
7573: LD_ADDR_VAR 0 5
7577: PUSH
7578: DOUBLE
7579: LD_INT 1
7581: DEC
7582: ST_TO_ADDR
7583: LD_EXP 22
7587: PUSH
7588: FOR_TO
7589: IFFALSE 7690
// begin tmp := 0 ;
7591: LD_ADDR_VAR 0 2
7595: PUSH
7596: LD_STRING 0
7598: ST_TO_ADDR
// if result [ 1 ] then
7599: LD_VAR 0 1
7603: PUSH
7604: LD_INT 1
7606: ARRAY
7607: IFFALSE 7672
// if result [ 1 ] [ 1 ] = i then
7609: LD_VAR 0 1
7613: PUSH
7614: LD_INT 1
7616: ARRAY
7617: PUSH
7618: LD_INT 1
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 5
7626: EQUAL
7627: IFFALSE 7672
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7629: LD_ADDR_VAR 0 1
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: LD_INT 1
7641: PPUSH
7642: LD_VAR 0 1
7646: PUSH
7647: LD_INT 1
7649: ARRAY
7650: PPUSH
7651: LD_INT 1
7653: PPUSH
7654: CALL_OW 3
7658: PPUSH
7659: CALL_OW 1
7663: ST_TO_ADDR
// tmp := 1 ;
7664: LD_ADDR_VAR 0 2
7668: PUSH
7669: LD_STRING 1
7671: ST_TO_ADDR
// end ; normal := normal & tmp ;
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: LD_VAR 0 3
7681: PUSH
7682: LD_VAR 0 2
7686: STR
7687: ST_TO_ADDR
// end ;
7688: GO 7588
7690: POP
7691: POP
// for i = 1 to hardcoreCounter do
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_EXP 23
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7813
// begin tmp := 0 ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_STRING 0
7717: ST_TO_ADDR
// if result [ 2 ] then
7718: LD_VAR 0 1
7722: PUSH
7723: LD_INT 2
7725: ARRAY
7726: IFFALSE 7795
// if result [ 2 ] [ 1 ] = 100 + i then
7728: LD_VAR 0 1
7732: PUSH
7733: LD_INT 2
7735: ARRAY
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: PUSH
7741: LD_INT 100
7743: PUSH
7744: LD_VAR 0 5
7748: PLUS
7749: EQUAL
7750: IFFALSE 7795
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7752: LD_ADDR_VAR 0 1
7756: PUSH
7757: LD_VAR 0 1
7761: PPUSH
7762: LD_INT 2
7764: PPUSH
7765: LD_VAR 0 1
7769: PUSH
7770: LD_INT 2
7772: ARRAY
7773: PPUSH
7774: LD_INT 1
7776: PPUSH
7777: CALL_OW 3
7781: PPUSH
7782: CALL_OW 1
7786: ST_TO_ADDR
// tmp := 1 ;
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_STRING 1
7794: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7795: LD_ADDR_VAR 0 4
7799: PUSH
7800: LD_VAR 0 4
7804: PUSH
7805: LD_VAR 0 2
7809: STR
7810: ST_TO_ADDR
// end ;
7811: GO 7707
7813: POP
7814: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7815: LD_STRING getStreamItemsFromMission("
7817: PUSH
7818: LD_VAR 0 3
7822: STR
7823: PUSH
7824: LD_STRING ","
7826: STR
7827: PUSH
7828: LD_VAR 0 4
7832: STR
7833: PUSH
7834: LD_STRING ")
7836: STR
7837: PPUSH
7838: CALL_OW 559
// end else
7842: GO 7851
// ToLua ( getStreamItemsFromMission("","") ) ;
7844: LD_STRING getStreamItemsFromMission("","")
7846: PPUSH
7847: CALL_OW 559
// end ;
7851: LD_VAR 0 1
7855: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7856: LD_VAR 0 2
7860: PUSH
7861: LD_INT 100
7863: EQUAL
7864: IFFALSE 8813
// begin if not StreamModeActive then
7866: LD_EXP 21
7870: NOT
7871: IFFALSE 7881
// StreamModeActive := true ;
7873: LD_ADDR_EXP 21
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 0 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 0
7888: EQUAL
7889: IFFALSE 7895
// InitStreamMode ;
7891: CALL 3934 0 0
// if p3 = 1 then
7895: LD_VAR 0 3
7899: PUSH
7900: LD_INT 1
7902: EQUAL
7903: IFFALSE 7913
// sRocket := true ;
7905: LD_ADDR_EXP 26
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// if p3 = 2 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_INT 2
7920: EQUAL
7921: IFFALSE 7931
// sSpeed := true ;
7923: LD_ADDR_EXP 25
7927: PUSH
7928: LD_INT 1
7930: ST_TO_ADDR
// if p3 = 3 then
7931: LD_VAR 0 3
7935: PUSH
7936: LD_INT 3
7938: EQUAL
7939: IFFALSE 7949
// sEngine := true ;
7941: LD_ADDR_EXP 27
7945: PUSH
7946: LD_INT 1
7948: ST_TO_ADDR
// if p3 = 4 then
7949: LD_VAR 0 3
7953: PUSH
7954: LD_INT 4
7956: EQUAL
7957: IFFALSE 7967
// sSpec := true ;
7959: LD_ADDR_EXP 24
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// if p3 = 5 then
7967: LD_VAR 0 3
7971: PUSH
7972: LD_INT 5
7974: EQUAL
7975: IFFALSE 7985
// sLevel := true ;
7977: LD_ADDR_EXP 28
7981: PUSH
7982: LD_INT 1
7984: ST_TO_ADDR
// if p3 = 6 then
7985: LD_VAR 0 3
7989: PUSH
7990: LD_INT 6
7992: EQUAL
7993: IFFALSE 8003
// sArmoury := true ;
7995: LD_ADDR_EXP 29
7999: PUSH
8000: LD_INT 1
8002: ST_TO_ADDR
// if p3 = 7 then
8003: LD_VAR 0 3
8007: PUSH
8008: LD_INT 7
8010: EQUAL
8011: IFFALSE 8021
// sRadar := true ;
8013: LD_ADDR_EXP 30
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// if p3 = 8 then
8021: LD_VAR 0 3
8025: PUSH
8026: LD_INT 8
8028: EQUAL
8029: IFFALSE 8039
// sBunker := true ;
8031: LD_ADDR_EXP 31
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// if p3 = 9 then
8039: LD_VAR 0 3
8043: PUSH
8044: LD_INT 9
8046: EQUAL
8047: IFFALSE 8057
// sHack := true ;
8049: LD_ADDR_EXP 32
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// if p3 = 10 then
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 10
8064: EQUAL
8065: IFFALSE 8075
// sFire := true ;
8067: LD_ADDR_EXP 33
8071: PUSH
8072: LD_INT 1
8074: ST_TO_ADDR
// if p3 = 11 then
8075: LD_VAR 0 3
8079: PUSH
8080: LD_INT 11
8082: EQUAL
8083: IFFALSE 8093
// sRefresh := true ;
8085: LD_ADDR_EXP 34
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// if p3 = 12 then
8093: LD_VAR 0 3
8097: PUSH
8098: LD_INT 12
8100: EQUAL
8101: IFFALSE 8111
// sExp := true ;
8103: LD_ADDR_EXP 35
8107: PUSH
8108: LD_INT 1
8110: ST_TO_ADDR
// if p3 = 13 then
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 13
8118: EQUAL
8119: IFFALSE 8129
// sDepot := true ;
8121: LD_ADDR_EXP 36
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// if p3 = 14 then
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 14
8136: EQUAL
8137: IFFALSE 8147
// sFlag := true ;
8139: LD_ADDR_EXP 37
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// if p3 = 15 then
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 15
8154: EQUAL
8155: IFFALSE 8165
// sKamikadze := true ;
8157: LD_ADDR_EXP 45
8161: PUSH
8162: LD_INT 1
8164: ST_TO_ADDR
// if p3 = 16 then
8165: LD_VAR 0 3
8169: PUSH
8170: LD_INT 16
8172: EQUAL
8173: IFFALSE 8183
// sTroll := true ;
8175: LD_ADDR_EXP 46
8179: PUSH
8180: LD_INT 1
8182: ST_TO_ADDR
// if p3 = 17 then
8183: LD_VAR 0 3
8187: PUSH
8188: LD_INT 17
8190: EQUAL
8191: IFFALSE 8201
// sSlow := true ;
8193: LD_ADDR_EXP 47
8197: PUSH
8198: LD_INT 1
8200: ST_TO_ADDR
// if p3 = 18 then
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 18
8208: EQUAL
8209: IFFALSE 8219
// sLack := true ;
8211: LD_ADDR_EXP 48
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// if p3 = 19 then
8219: LD_VAR 0 3
8223: PUSH
8224: LD_INT 19
8226: EQUAL
8227: IFFALSE 8237
// sTank := true ;
8229: LD_ADDR_EXP 50
8233: PUSH
8234: LD_INT 1
8236: ST_TO_ADDR
// if p3 = 20 then
8237: LD_VAR 0 3
8241: PUSH
8242: LD_INT 20
8244: EQUAL
8245: IFFALSE 8255
// sRemote := true ;
8247: LD_ADDR_EXP 51
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// if p3 = 21 then
8255: LD_VAR 0 3
8259: PUSH
8260: LD_INT 21
8262: EQUAL
8263: IFFALSE 8273
// sPowell := true ;
8265: LD_ADDR_EXP 52
8269: PUSH
8270: LD_INT 1
8272: ST_TO_ADDR
// if p3 = 22 then
8273: LD_VAR 0 3
8277: PUSH
8278: LD_INT 22
8280: EQUAL
8281: IFFALSE 8291
// sTeleport := true ;
8283: LD_ADDR_EXP 55
8287: PUSH
8288: LD_INT 1
8290: ST_TO_ADDR
// if p3 = 23 then
8291: LD_VAR 0 3
8295: PUSH
8296: LD_INT 23
8298: EQUAL
8299: IFFALSE 8309
// sOilTower := true ;
8301: LD_ADDR_EXP 57
8305: PUSH
8306: LD_INT 1
8308: ST_TO_ADDR
// if p3 = 24 then
8309: LD_VAR 0 3
8313: PUSH
8314: LD_INT 24
8316: EQUAL
8317: IFFALSE 8327
// sShovel := true ;
8319: LD_ADDR_EXP 58
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// if p3 = 25 then
8327: LD_VAR 0 3
8331: PUSH
8332: LD_INT 25
8334: EQUAL
8335: IFFALSE 8345
// sSheik := true ;
8337: LD_ADDR_EXP 59
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// if p3 = 26 then
8345: LD_VAR 0 3
8349: PUSH
8350: LD_INT 26
8352: EQUAL
8353: IFFALSE 8363
// sEarthquake := true ;
8355: LD_ADDR_EXP 61
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// if p3 = 27 then
8363: LD_VAR 0 3
8367: PUSH
8368: LD_INT 27
8370: EQUAL
8371: IFFALSE 8381
// sAI := true ;
8373: LD_ADDR_EXP 62
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// if p3 = 28 then
8381: LD_VAR 0 3
8385: PUSH
8386: LD_INT 28
8388: EQUAL
8389: IFFALSE 8399
// sCargo := true ;
8391: LD_ADDR_EXP 65
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// if p3 = 29 then
8399: LD_VAR 0 3
8403: PUSH
8404: LD_INT 29
8406: EQUAL
8407: IFFALSE 8417
// sDLaser := true ;
8409: LD_ADDR_EXP 66
8413: PUSH
8414: LD_INT 1
8416: ST_TO_ADDR
// if p3 = 30 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 30
8424: EQUAL
8425: IFFALSE 8435
// sExchange := true ;
8427: LD_ADDR_EXP 67
8431: PUSH
8432: LD_INT 1
8434: ST_TO_ADDR
// if p3 = 31 then
8435: LD_VAR 0 3
8439: PUSH
8440: LD_INT 31
8442: EQUAL
8443: IFFALSE 8453
// sFac := true ;
8445: LD_ADDR_EXP 68
8449: PUSH
8450: LD_INT 1
8452: ST_TO_ADDR
// if p3 = 32 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 32
8460: EQUAL
8461: IFFALSE 8471
// sPower := true ;
8463: LD_ADDR_EXP 69
8467: PUSH
8468: LD_INT 1
8470: ST_TO_ADDR
// if p3 = 33 then
8471: LD_VAR 0 3
8475: PUSH
8476: LD_INT 33
8478: EQUAL
8479: IFFALSE 8489
// sRandom := true ;
8481: LD_ADDR_EXP 70
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// if p3 = 34 then
8489: LD_VAR 0 3
8493: PUSH
8494: LD_INT 34
8496: EQUAL
8497: IFFALSE 8507
// sShield := true ;
8499: LD_ADDR_EXP 71
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// if p3 = 35 then
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 35
8514: EQUAL
8515: IFFALSE 8525
// sTime := true ;
8517: LD_ADDR_EXP 72
8521: PUSH
8522: LD_INT 1
8524: ST_TO_ADDR
// if p3 = 36 then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 36
8532: EQUAL
8533: IFFALSE 8543
// sTools := true ;
8535: LD_ADDR_EXP 73
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// if p3 = 101 then
8543: LD_VAR 0 3
8547: PUSH
8548: LD_INT 101
8550: EQUAL
8551: IFFALSE 8561
// sSold := true ;
8553: LD_ADDR_EXP 38
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// if p3 = 102 then
8561: LD_VAR 0 3
8565: PUSH
8566: LD_INT 102
8568: EQUAL
8569: IFFALSE 8579
// sDiff := true ;
8571: LD_ADDR_EXP 39
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// if p3 = 103 then
8579: LD_VAR 0 3
8583: PUSH
8584: LD_INT 103
8586: EQUAL
8587: IFFALSE 8597
// sFog := true ;
8589: LD_ADDR_EXP 42
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// if p3 = 104 then
8597: LD_VAR 0 3
8601: PUSH
8602: LD_INT 104
8604: EQUAL
8605: IFFALSE 8615
// sReset := true ;
8607: LD_ADDR_EXP 43
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// if p3 = 105 then
8615: LD_VAR 0 3
8619: PUSH
8620: LD_INT 105
8622: EQUAL
8623: IFFALSE 8633
// sSun := true ;
8625: LD_ADDR_EXP 44
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// if p3 = 106 then
8633: LD_VAR 0 3
8637: PUSH
8638: LD_INT 106
8640: EQUAL
8641: IFFALSE 8651
// sTiger := true ;
8643: LD_ADDR_EXP 40
8647: PUSH
8648: LD_INT 1
8650: ST_TO_ADDR
// if p3 = 107 then
8651: LD_VAR 0 3
8655: PUSH
8656: LD_INT 107
8658: EQUAL
8659: IFFALSE 8669
// sBomb := true ;
8661: LD_ADDR_EXP 41
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
// if p3 = 108 then
8669: LD_VAR 0 3
8673: PUSH
8674: LD_INT 108
8676: EQUAL
8677: IFFALSE 8687
// sWound := true ;
8679: LD_ADDR_EXP 49
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// if p3 = 109 then
8687: LD_VAR 0 3
8691: PUSH
8692: LD_INT 109
8694: EQUAL
8695: IFFALSE 8705
// sBetray := true ;
8697: LD_ADDR_EXP 53
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// if p3 = 110 then
8705: LD_VAR 0 3
8709: PUSH
8710: LD_INT 110
8712: EQUAL
8713: IFFALSE 8723
// sContamin := true ;
8715: LD_ADDR_EXP 54
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// if p3 = 111 then
8723: LD_VAR 0 3
8727: PUSH
8728: LD_INT 111
8730: EQUAL
8731: IFFALSE 8741
// sOil := true ;
8733: LD_ADDR_EXP 56
8737: PUSH
8738: LD_INT 1
8740: ST_TO_ADDR
// if p3 = 112 then
8741: LD_VAR 0 3
8745: PUSH
8746: LD_INT 112
8748: EQUAL
8749: IFFALSE 8759
// sStu := true ;
8751: LD_ADDR_EXP 60
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if p3 = 113 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 113
8766: EQUAL
8767: IFFALSE 8777
// sBazooka := true ;
8769: LD_ADDR_EXP 63
8773: PUSH
8774: LD_INT 1
8776: ST_TO_ADDR
// if p3 = 114 then
8777: LD_VAR 0 3
8781: PUSH
8782: LD_INT 114
8784: EQUAL
8785: IFFALSE 8795
// sMortar := true ;
8787: LD_ADDR_EXP 64
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
// if p3 = 115 then
8795: LD_VAR 0 3
8799: PUSH
8800: LD_INT 115
8802: EQUAL
8803: IFFALSE 8813
// sRanger := true ;
8805: LD_ADDR_EXP 74
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// end ; end ;
8813: PPOPN 6
8815: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8816: LD_EXP 21
8820: PUSH
8821: LD_EXP 26
8825: AND
8826: IFFALSE 8950
8828: GO 8830
8830: DISABLE
8831: LD_INT 0
8833: PPUSH
8834: PPUSH
// begin enable ;
8835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8836: LD_ADDR_VAR 0 2
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_OWVAR 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 2
8855: PUSH
8856: LD_INT 34
8858: PUSH
8859: LD_INT 7
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 34
8868: PUSH
8869: LD_INT 45
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 34
8878: PUSH
8879: LD_INT 28
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 34
8888: PUSH
8889: LD_INT 47
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: ST_TO_ADDR
// if not tmp then
8912: LD_VAR 0 2
8916: NOT
8917: IFFALSE 8921
// exit ;
8919: GO 8950
// for i in tmp do
8921: LD_ADDR_VAR 0 1
8925: PUSH
8926: LD_VAR 0 2
8930: PUSH
8931: FOR_IN
8932: IFFALSE 8948
// begin SetLives ( i , 0 ) ;
8934: LD_VAR 0 1
8938: PPUSH
8939: LD_INT 0
8941: PPUSH
8942: CALL_OW 234
// end ;
8946: GO 8931
8948: POP
8949: POP
// end ;
8950: PPOPN 2
8952: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8953: LD_EXP 21
8957: PUSH
8958: LD_EXP 27
8962: AND
8963: IFFALSE 9047
8965: GO 8967
8967: DISABLE
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
// begin enable ;
8972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_OWVAR 2
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 32
8992: PUSH
8993: LD_INT 3
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 69
9008: ST_TO_ADDR
// if not tmp then
9009: LD_VAR 0 2
9013: NOT
9014: IFFALSE 9018
// exit ;
9016: GO 9047
// for i in tmp do
9018: LD_ADDR_VAR 0 1
9022: PUSH
9023: LD_VAR 0 2
9027: PUSH
9028: FOR_IN
9029: IFFALSE 9045
// begin SetLives ( i , 0 ) ;
9031: LD_VAR 0 1
9035: PPUSH
9036: LD_INT 0
9038: PPUSH
9039: CALL_OW 234
// end ;
9043: GO 9028
9045: POP
9046: POP
// end ;
9047: PPOPN 2
9049: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9050: LD_EXP 21
9054: PUSH
9055: LD_EXP 24
9059: AND
9060: IFFALSE 9153
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
// begin enable ;
9068: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_INT 22
9076: PUSH
9077: LD_OWVAR 2
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 25
9091: PUSH
9092: LD_INT 5
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 25
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 25
9111: PUSH
9112: LD_INT 8
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PPUSH
9129: CALL_OW 69
9133: PUSH
9134: FOR_IN
9135: IFFALSE 9151
// begin SetClass ( i , 1 ) ;
9137: LD_VAR 0 1
9141: PPUSH
9142: LD_INT 1
9144: PPUSH
9145: CALL_OW 336
// end ;
9149: GO 9134
9151: POP
9152: POP
// end ;
9153: PPOPN 1
9155: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9156: LD_EXP 21
9160: PUSH
9161: LD_EXP 25
9165: AND
9166: PUSH
9167: LD_OWVAR 65
9171: PUSH
9172: LD_INT 7
9174: LESS
9175: AND
9176: IFFALSE 9190
9178: GO 9180
9180: DISABLE
// begin enable ;
9181: ENABLE
// game_speed := 7 ;
9182: LD_ADDR_OWVAR 65
9186: PUSH
9187: LD_INT 7
9189: ST_TO_ADDR
// end ;
9190: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9191: LD_EXP 21
9195: PUSH
9196: LD_EXP 28
9200: AND
9201: IFFALSE 9403
9203: GO 9205
9205: DISABLE
9206: LD_INT 0
9208: PPUSH
9209: PPUSH
9210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_INT 81
9218: PUSH
9219: LD_OWVAR 2
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 21
9230: PUSH
9231: LD_INT 1
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 69
9246: ST_TO_ADDR
// if not tmp then
9247: LD_VAR 0 3
9251: NOT
9252: IFFALSE 9256
// exit ;
9254: GO 9403
// if tmp > 5 then
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 5
9263: GREATER
9264: IFFALSE 9276
// k := 5 else
9266: LD_ADDR_VAR 0 2
9270: PUSH
9271: LD_INT 5
9273: ST_TO_ADDR
9274: GO 9286
// k := tmp ;
9276: LD_ADDR_VAR 0 2
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// for i := 1 to k do
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_VAR 0 2
9300: PUSH
9301: FOR_TO
9302: IFFALSE 9401
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9304: LD_VAR 0 3
9308: PUSH
9309: LD_VAR 0 1
9313: ARRAY
9314: PPUSH
9315: LD_VAR 0 1
9319: PUSH
9320: LD_INT 4
9322: MOD
9323: PUSH
9324: LD_INT 1
9326: PLUS
9327: PPUSH
9328: CALL_OW 259
9332: PUSH
9333: LD_INT 10
9335: LESS
9336: IFFALSE 9399
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9338: LD_VAR 0 3
9342: PUSH
9343: LD_VAR 0 1
9347: ARRAY
9348: PPUSH
9349: LD_VAR 0 1
9353: PUSH
9354: LD_INT 4
9356: MOD
9357: PUSH
9358: LD_INT 1
9360: PLUS
9361: PPUSH
9362: LD_VAR 0 3
9366: PUSH
9367: LD_VAR 0 1
9371: ARRAY
9372: PPUSH
9373: LD_VAR 0 1
9377: PUSH
9378: LD_INT 4
9380: MOD
9381: PUSH
9382: LD_INT 1
9384: PLUS
9385: PPUSH
9386: CALL_OW 259
9390: PUSH
9391: LD_INT 1
9393: PLUS
9394: PPUSH
9395: CALL_OW 237
9399: GO 9301
9401: POP
9402: POP
// end ;
9403: PPOPN 3
9405: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9406: LD_EXP 21
9410: PUSH
9411: LD_EXP 29
9415: AND
9416: IFFALSE 9436
9418: GO 9420
9420: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9421: LD_INT 4
9423: PPUSH
9424: LD_OWVAR 2
9428: PPUSH
9429: LD_INT 0
9431: PPUSH
9432: CALL_OW 324
9436: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9437: LD_EXP 21
9441: PUSH
9442: LD_EXP 58
9446: AND
9447: IFFALSE 9467
9449: GO 9451
9451: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9452: LD_INT 19
9454: PPUSH
9455: LD_OWVAR 2
9459: PPUSH
9460: LD_INT 0
9462: PPUSH
9463: CALL_OW 324
9467: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9468: LD_EXP 21
9472: PUSH
9473: LD_EXP 30
9477: AND
9478: IFFALSE 9580
9480: GO 9482
9482: DISABLE
9483: LD_INT 0
9485: PPUSH
9486: PPUSH
// begin enable ;
9487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9488: LD_ADDR_VAR 0 2
9492: PUSH
9493: LD_INT 22
9495: PUSH
9496: LD_OWVAR 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: LD_INT 2
9507: PUSH
9508: LD_INT 34
9510: PUSH
9511: LD_INT 11
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 34
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// if not tmp then
9542: LD_VAR 0 2
9546: NOT
9547: IFFALSE 9551
// exit ;
9549: GO 9580
// for i in tmp do
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_VAR 0 2
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9578
// begin SetLives ( i , 0 ) ;
9564: LD_VAR 0 1
9568: PPUSH
9569: LD_INT 0
9571: PPUSH
9572: CALL_OW 234
// end ;
9576: GO 9561
9578: POP
9579: POP
// end ;
9580: PPOPN 2
9582: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9583: LD_EXP 21
9587: PUSH
9588: LD_EXP 31
9592: AND
9593: IFFALSE 9613
9595: GO 9597
9597: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9598: LD_INT 32
9600: PPUSH
9601: LD_OWVAR 2
9605: PPUSH
9606: LD_INT 0
9608: PPUSH
9609: CALL_OW 324
9613: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9614: LD_EXP 21
9618: PUSH
9619: LD_EXP 32
9623: AND
9624: IFFALSE 9805
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
9632: PPUSH
9633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9634: LD_ADDR_VAR 0 2
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_OWVAR 2
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 33
9653: PUSH
9654: LD_INT 3
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 69
9669: ST_TO_ADDR
// if not tmp then
9670: LD_VAR 0 2
9674: NOT
9675: IFFALSE 9679
// exit ;
9677: GO 9805
// side := 0 ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_INT 0
9686: ST_TO_ADDR
// for i := 1 to 8 do
9687: LD_ADDR_VAR 0 1
9691: PUSH
9692: DOUBLE
9693: LD_INT 1
9695: DEC
9696: ST_TO_ADDR
9697: LD_INT 8
9699: PUSH
9700: FOR_TO
9701: IFFALSE 9749
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9703: LD_OWVAR 2
9707: PUSH
9708: LD_VAR 0 1
9712: NONEQUAL
9713: PUSH
9714: LD_OWVAR 2
9718: PPUSH
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 81
9728: PUSH
9729: LD_INT 2
9731: EQUAL
9732: AND
9733: IFFALSE 9747
// begin side := i ;
9735: LD_ADDR_VAR 0 3
9739: PUSH
9740: LD_VAR 0 1
9744: ST_TO_ADDR
// break ;
9745: GO 9749
// end ;
9747: GO 9700
9749: POP
9750: POP
// if not side then
9751: LD_VAR 0 3
9755: NOT
9756: IFFALSE 9760
// exit ;
9758: GO 9805
// for i := 1 to tmp do
9760: LD_ADDR_VAR 0 1
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_VAR 0 2
9774: PUSH
9775: FOR_TO
9776: IFFALSE 9803
// if Prob ( 60 ) then
9778: LD_INT 60
9780: PPUSH
9781: CALL_OW 13
9785: IFFALSE 9801
// SetSide ( i , side ) ;
9787: LD_VAR 0 1
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: CALL_OW 235
9801: GO 9775
9803: POP
9804: POP
// end ;
9805: PPOPN 3
9807: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9808: LD_EXP 21
9812: PUSH
9813: LD_EXP 34
9817: AND
9818: IFFALSE 9937
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9826: LD_ADDR_VAR 0 1
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_OWVAR 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 21
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 3
9855: PUSH
9856: LD_INT 23
9858: PUSH
9859: LD_INT 0
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 69
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9935
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 257
9892: PUSH
9893: LD_INT 1
9895: PUSH
9896: LD_INT 2
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: LD_INT 4
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: IN
9911: IFFALSE 9933
// SetClass ( un , rand ( 1 , 4 ) ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: LD_INT 4
9923: PPUSH
9924: CALL_OW 12
9928: PPUSH
9929: CALL_OW 336
9933: GO 9880
9935: POP
9936: POP
// end ;
9937: PPOPN 1
9939: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9940: LD_EXP 21
9944: PUSH
9945: LD_EXP 33
9949: AND
9950: IFFALSE 10029
9952: GO 9954
9954: DISABLE
9955: LD_INT 0
9957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9958: LD_ADDR_VAR 0 1
9962: PUSH
9963: LD_INT 22
9965: PUSH
9966: LD_OWVAR 2
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 21
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: ST_TO_ADDR
// if not tmp then
9994: LD_VAR 0 1
9998: NOT
9999: IFFALSE 10003
// exit ;
10001: GO 10029
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10003: LD_VAR 0 1
10007: PUSH
10008: LD_INT 1
10010: PPUSH
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 12
10020: ARRAY
10021: PPUSH
10022: LD_INT 100
10024: PPUSH
10025: CALL_OW 234
// end ;
10029: PPOPN 1
10031: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10032: LD_EXP 21
10036: PUSH
10037: LD_EXP 35
10041: AND
10042: IFFALSE 10140
10044: GO 10046
10046: DISABLE
10047: LD_INT 0
10049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10050: LD_ADDR_VAR 0 1
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_OWVAR 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 21
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PPUSH
10081: CALL_OW 69
10085: ST_TO_ADDR
// if not tmp then
10086: LD_VAR 0 1
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10140
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10095: LD_VAR 0 1
10099: PUSH
10100: LD_INT 1
10102: PPUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: CALL_OW 12
10112: ARRAY
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: LD_INT 4
10119: PPUSH
10120: CALL_OW 12
10124: PPUSH
10125: LD_INT 3000
10127: PPUSH
10128: LD_INT 9000
10130: PPUSH
10131: CALL_OW 12
10135: PPUSH
10136: CALL_OW 492
// end ;
10140: PPOPN 1
10142: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10143: LD_EXP 21
10147: PUSH
10148: LD_EXP 36
10152: AND
10153: IFFALSE 10173
10155: GO 10157
10157: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10158: LD_INT 1
10160: PPUSH
10161: LD_OWVAR 2
10165: PPUSH
10166: LD_INT 0
10168: PPUSH
10169: CALL_OW 324
10173: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10174: LD_EXP 21
10178: PUSH
10179: LD_EXP 37
10183: AND
10184: IFFALSE 10267
10186: GO 10188
10188: DISABLE
10189: LD_INT 0
10191: PPUSH
10192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_OWVAR 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 21
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: ST_TO_ADDR
// if not tmp then
10229: LD_VAR 0 2
10233: NOT
10234: IFFALSE 10238
// exit ;
10236: GO 10267
// for i in tmp do
10238: LD_ADDR_VAR 0 1
10242: PUSH
10243: LD_VAR 0 2
10247: PUSH
10248: FOR_IN
10249: IFFALSE 10265
// SetBLevel ( i , 10 ) ;
10251: LD_VAR 0 1
10255: PPUSH
10256: LD_INT 10
10258: PPUSH
10259: CALL_OW 241
10263: GO 10248
10265: POP
10266: POP
// end ;
10267: PPOPN 2
10269: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10270: LD_EXP 21
10274: PUSH
10275: LD_EXP 38
10279: AND
10280: IFFALSE 10391
10282: GO 10284
10284: DISABLE
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: LD_INT 22
10297: PUSH
10298: LD_OWVAR 2
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 25
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ST_TO_ADDR
// if not tmp then
10326: LD_VAR 0 3
10330: NOT
10331: IFFALSE 10335
// exit ;
10333: GO 10391
// un := tmp [ rand ( 1 , tmp ) ] ;
10335: LD_ADDR_VAR 0 2
10339: PUSH
10340: LD_VAR 0 3
10344: PUSH
10345: LD_INT 1
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: CALL_OW 12
10357: ARRAY
10358: ST_TO_ADDR
// if Crawls ( un ) then
10359: LD_VAR 0 2
10363: PPUSH
10364: CALL_OW 318
10368: IFFALSE 10379
// ComWalk ( un ) ;
10370: LD_VAR 0 2
10374: PPUSH
10375: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_INT 5
10386: PPUSH
10387: CALL_OW 336
// end ;
10391: PPOPN 3
10393: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10394: LD_EXP 21
10398: PUSH
10399: LD_EXP 39
10403: AND
10404: PUSH
10405: LD_OWVAR 67
10409: PUSH
10410: LD_INT 3
10412: LESS
10413: AND
10414: IFFALSE 10433
10416: GO 10418
10418: DISABLE
// Difficulty := Difficulty + 1 ;
10419: LD_ADDR_OWVAR 67
10423: PUSH
10424: LD_OWVAR 67
10428: PUSH
10429: LD_INT 1
10431: PLUS
10432: ST_TO_ADDR
10433: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10434: LD_EXP 21
10438: PUSH
10439: LD_EXP 40
10443: AND
10444: IFFALSE 10547
10446: GO 10448
10448: DISABLE
10449: LD_INT 0
10451: PPUSH
// begin for i := 1 to 5 do
10452: LD_ADDR_VAR 0 1
10456: PUSH
10457: DOUBLE
10458: LD_INT 1
10460: DEC
10461: ST_TO_ADDR
10462: LD_INT 5
10464: PUSH
10465: FOR_TO
10466: IFFALSE 10545
// begin uc_nation := nation_nature ;
10468: LD_ADDR_OWVAR 21
10472: PUSH
10473: LD_INT 0
10475: ST_TO_ADDR
// uc_side := 0 ;
10476: LD_ADDR_OWVAR 20
10480: PUSH
10481: LD_INT 0
10483: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10484: LD_ADDR_OWVAR 29
10488: PUSH
10489: LD_INT 12
10491: PUSH
10492: LD_INT 12
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// hc_agressivity := 20 ;
10499: LD_ADDR_OWVAR 35
10503: PUSH
10504: LD_INT 20
10506: ST_TO_ADDR
// hc_class := class_tiger ;
10507: LD_ADDR_OWVAR 28
10511: PUSH
10512: LD_INT 14
10514: ST_TO_ADDR
// hc_gallery :=  ;
10515: LD_ADDR_OWVAR 33
10519: PUSH
10520: LD_STRING 
10522: ST_TO_ADDR
// hc_name :=  ;
10523: LD_ADDR_OWVAR 26
10527: PUSH
10528: LD_STRING 
10530: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10531: CALL_OW 44
10535: PPUSH
10536: LD_INT 0
10538: PPUSH
10539: CALL_OW 51
// end ;
10543: GO 10465
10545: POP
10546: POP
// end ;
10547: PPOPN 1
10549: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10550: LD_EXP 21
10554: PUSH
10555: LD_EXP 41
10559: AND
10560: IFFALSE 10569
10562: GO 10564
10564: DISABLE
// StreamSibBomb ;
10565: CALL 10570 0 0
10569: END
// export function StreamSibBomb ; var i , x , y ; begin
10570: LD_INT 0
10572: PPUSH
10573: PPUSH
10574: PPUSH
10575: PPUSH
// result := false ;
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_INT 0
10583: ST_TO_ADDR
// for i := 1 to 16 do
10584: LD_ADDR_VAR 0 2
10588: PUSH
10589: DOUBLE
10590: LD_INT 1
10592: DEC
10593: ST_TO_ADDR
10594: LD_INT 16
10596: PUSH
10597: FOR_TO
10598: IFFALSE 10797
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 10
10607: PUSH
10608: LD_INT 20
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 40
10616: PUSH
10617: LD_INT 50
10619: PUSH
10620: LD_INT 60
10622: PUSH
10623: LD_INT 70
10625: PUSH
10626: LD_INT 80
10628: PUSH
10629: LD_INT 90
10631: PUSH
10632: LD_INT 100
10634: PUSH
10635: LD_INT 110
10637: PUSH
10638: LD_INT 120
10640: PUSH
10641: LD_INT 130
10643: PUSH
10644: LD_INT 140
10646: PUSH
10647: LD_INT 150
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 1
10669: PPUSH
10670: LD_INT 15
10672: PPUSH
10673: CALL_OW 12
10677: ARRAY
10678: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10679: LD_ADDR_VAR 0 4
10683: PUSH
10684: LD_INT 10
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 30
10692: PUSH
10693: LD_INT 40
10695: PUSH
10696: LD_INT 50
10698: PUSH
10699: LD_INT 60
10701: PUSH
10702: LD_INT 70
10704: PUSH
10705: LD_INT 80
10707: PUSH
10708: LD_INT 90
10710: PUSH
10711: LD_INT 100
10713: PUSH
10714: LD_INT 110
10716: PUSH
10717: LD_INT 120
10719: PUSH
10720: LD_INT 130
10722: PUSH
10723: LD_INT 140
10725: PUSH
10726: LD_INT 150
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 1
10748: PPUSH
10749: LD_INT 15
10751: PPUSH
10752: CALL_OW 12
10756: ARRAY
10757: ST_TO_ADDR
// if ValidHex ( x , y ) then
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_VAR 0 4
10767: PPUSH
10768: CALL_OW 488
10772: IFFALSE 10795
// begin result := [ x , y ] ;
10774: LD_ADDR_VAR 0 1
10778: PUSH
10779: LD_VAR 0 3
10783: PUSH
10784: LD_VAR 0 4
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: ST_TO_ADDR
// break ;
10793: GO 10797
// end ; end ;
10795: GO 10597
10797: POP
10798: POP
// if result then
10799: LD_VAR 0 1
10803: IFFALSE 10863
// begin ToLua ( playSibBomb() ) ;
10805: LD_STRING playSibBomb()
10807: PPUSH
10808: CALL_OW 559
// wait ( 0 0$14 ) ;
10812: LD_INT 490
10814: PPUSH
10815: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10819: LD_VAR 0 1
10823: PUSH
10824: LD_INT 1
10826: ARRAY
10827: PPUSH
10828: LD_VAR 0 1
10832: PUSH
10833: LD_INT 2
10835: ARRAY
10836: PPUSH
10837: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10841: LD_VAR 0 1
10845: PUSH
10846: LD_INT 1
10848: ARRAY
10849: PPUSH
10850: LD_VAR 0 1
10854: PUSH
10855: LD_INT 2
10857: ARRAY
10858: PPUSH
10859: CALL_OW 429
// end ; end ;
10863: LD_VAR 0 1
10867: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10868: LD_EXP 21
10872: PUSH
10873: LD_EXP 43
10877: AND
10878: IFFALSE 10890
10880: GO 10882
10882: DISABLE
// YouLost (  ) ;
10883: LD_STRING 
10885: PPUSH
10886: CALL_OW 104
10890: END
// every 0 0$1 trigger StreamModeActive and sFog do
10891: LD_EXP 21
10895: PUSH
10896: LD_EXP 42
10900: AND
10901: IFFALSE 10915
10903: GO 10905
10905: DISABLE
// FogOff ( your_side ) ;
10906: LD_OWVAR 2
10910: PPUSH
10911: CALL_OW 344
10915: END
// every 0 0$1 trigger StreamModeActive and sSun do
10916: LD_EXP 21
10920: PUSH
10921: LD_EXP 44
10925: AND
10926: IFFALSE 10954
10928: GO 10930
10930: DISABLE
// begin solar_recharge_percent := 0 ;
10931: LD_ADDR_OWVAR 79
10935: PUSH
10936: LD_INT 0
10938: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10939: LD_INT 10500
10941: PPUSH
10942: CALL_OW 67
// solar_recharge_percent := 100 ;
10946: LD_ADDR_OWVAR 79
10950: PUSH
10951: LD_INT 100
10953: ST_TO_ADDR
// end ;
10954: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10955: LD_EXP 21
10959: PUSH
10960: LD_EXP 45
10964: AND
10965: IFFALSE 11204
10967: GO 10969
10969: DISABLE
10970: LD_INT 0
10972: PPUSH
10973: PPUSH
10974: PPUSH
// begin tmp := [ ] ;
10975: LD_ADDR_VAR 0 3
10979: PUSH
10980: EMPTY
10981: ST_TO_ADDR
// for i := 1 to 6 do
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: DOUBLE
10988: LD_INT 1
10990: DEC
10991: ST_TO_ADDR
10992: LD_INT 6
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11101
// begin uc_nation := nation_nature ;
10998: LD_ADDR_OWVAR 21
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// uc_side := 0 ;
11006: LD_ADDR_OWVAR 20
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11014: LD_ADDR_OWVAR 29
11018: PUSH
11019: LD_INT 12
11021: PUSH
11022: LD_INT 12
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
// hc_agressivity := 20 ;
11029: LD_ADDR_OWVAR 35
11033: PUSH
11034: LD_INT 20
11036: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11037: LD_ADDR_OWVAR 28
11041: PUSH
11042: LD_INT 17
11044: ST_TO_ADDR
// hc_gallery :=  ;
11045: LD_ADDR_OWVAR 33
11049: PUSH
11050: LD_STRING 
11052: ST_TO_ADDR
// hc_name :=  ;
11053: LD_ADDR_OWVAR 26
11057: PUSH
11058: LD_STRING 
11060: ST_TO_ADDR
// un := CreateHuman ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: CALL_OW 44
11070: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11071: LD_VAR 0 2
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 51
// tmp := tmp ^ un ;
11083: LD_ADDR_VAR 0 3
11087: PUSH
11088: LD_VAR 0 3
11092: PUSH
11093: LD_VAR 0 2
11097: ADD
11098: ST_TO_ADDR
// end ;
11099: GO 10995
11101: POP
11102: POP
// repeat wait ( 0 0$1 ) ;
11103: LD_INT 35
11105: PPUSH
11106: CALL_OW 67
// for un in tmp do
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: LD_VAR 0 3
11119: PUSH
11120: FOR_IN
11121: IFFALSE 11195
// begin if IsDead ( un ) then
11123: LD_VAR 0 2
11127: PPUSH
11128: CALL_OW 301
11132: IFFALSE 11152
// begin tmp := tmp diff un ;
11134: LD_ADDR_VAR 0 3
11138: PUSH
11139: LD_VAR 0 3
11143: PUSH
11144: LD_VAR 0 2
11148: DIFF
11149: ST_TO_ADDR
// continue ;
11150: GO 11120
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11152: LD_VAR 0 2
11156: PPUSH
11157: LD_INT 3
11159: PUSH
11160: LD_INT 22
11162: PUSH
11163: LD_INT 0
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 69
11178: PPUSH
11179: LD_VAR 0 2
11183: PPUSH
11184: CALL_OW 74
11188: PPUSH
11189: CALL_OW 115
// end ;
11193: GO 11120
11195: POP
11196: POP
// until not tmp ;
11197: LD_VAR 0 3
11201: NOT
11202: IFFALSE 11103
// end ;
11204: PPOPN 3
11206: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11207: LD_EXP 21
11211: PUSH
11212: LD_EXP 46
11216: AND
11217: IFFALSE 11271
11219: GO 11221
11221: DISABLE
// begin ToLua ( displayTroll(); ) ;
11222: LD_STRING displayTroll();
11224: PPUSH
11225: CALL_OW 559
// wait ( 3 3$00 ) ;
11229: LD_INT 6300
11231: PPUSH
11232: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11236: LD_STRING hideTroll();
11238: PPUSH
11239: CALL_OW 559
// wait ( 1 1$00 ) ;
11243: LD_INT 2100
11245: PPUSH
11246: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11250: LD_STRING displayTroll();
11252: PPUSH
11253: CALL_OW 559
// wait ( 1 1$00 ) ;
11257: LD_INT 2100
11259: PPUSH
11260: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11264: LD_STRING hideTroll();
11266: PPUSH
11267: CALL_OW 559
// end ;
11271: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11272: LD_EXP 21
11276: PUSH
11277: LD_EXP 47
11281: AND
11282: IFFALSE 11345
11284: GO 11286
11286: DISABLE
11287: LD_INT 0
11289: PPUSH
// begin p := 0 ;
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_INT 0
11297: ST_TO_ADDR
// repeat game_speed := 1 ;
11298: LD_ADDR_OWVAR 65
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11306: LD_INT 35
11308: PPUSH
11309: CALL_OW 67
// p := p + 1 ;
11313: LD_ADDR_VAR 0 1
11317: PUSH
11318: LD_VAR 0 1
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: ST_TO_ADDR
// until p >= 60 ;
11327: LD_VAR 0 1
11331: PUSH
11332: LD_INT 60
11334: GREATEREQUAL
11335: IFFALSE 11298
// game_speed := 4 ;
11337: LD_ADDR_OWVAR 65
11341: PUSH
11342: LD_INT 4
11344: ST_TO_ADDR
// end ;
11345: PPOPN 1
11347: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11348: LD_EXP 21
11352: PUSH
11353: LD_EXP 48
11357: AND
11358: IFFALSE 11504
11360: GO 11362
11362: DISABLE
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11367: LD_ADDR_VAR 0 1
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_OWVAR 2
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 0
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 30
11399: PUSH
11400: LD_INT 1
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 69
11420: ST_TO_ADDR
// if not depot then
11421: LD_VAR 0 1
11425: NOT
11426: IFFALSE 11430
// exit ;
11428: GO 11504
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_VAR 0 1
11439: PUSH
11440: LD_INT 1
11442: PPUSH
11443: LD_VAR 0 1
11447: PPUSH
11448: CALL_OW 12
11452: ARRAY
11453: PPUSH
11454: CALL_OW 274
11458: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11459: LD_VAR 0 2
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: LD_INT 0
11469: PPUSH
11470: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11474: LD_VAR 0 2
11478: PPUSH
11479: LD_INT 2
11481: PPUSH
11482: LD_INT 0
11484: PPUSH
11485: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11489: LD_VAR 0 2
11493: PPUSH
11494: LD_INT 3
11496: PPUSH
11497: LD_INT 0
11499: PPUSH
11500: CALL_OW 277
// end ;
11504: PPOPN 2
11506: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11507: LD_EXP 21
11511: PUSH
11512: LD_EXP 49
11516: AND
11517: IFFALSE 11614
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11525: LD_ADDR_VAR 0 1
11529: PUSH
11530: LD_INT 22
11532: PUSH
11533: LD_OWVAR 2
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 21
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 3
11554: PUSH
11555: LD_INT 23
11557: PUSH
11558: LD_INT 0
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL_OW 69
11578: ST_TO_ADDR
// if not tmp then
11579: LD_VAR 0 1
11583: NOT
11584: IFFALSE 11588
// exit ;
11586: GO 11614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11588: LD_VAR 0 1
11592: PUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 12
11605: ARRAY
11606: PPUSH
11607: LD_INT 200
11609: PPUSH
11610: CALL_OW 234
// end ;
11614: PPOPN 1
11616: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11617: LD_EXP 21
11621: PUSH
11622: LD_EXP 50
11626: AND
11627: IFFALSE 11706
11629: GO 11631
11631: DISABLE
11632: LD_INT 0
11634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11635: LD_ADDR_VAR 0 1
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 21
11654: PUSH
11655: LD_INT 2
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 1
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11680: LD_VAR 0 1
11684: PUSH
11685: LD_INT 1
11687: PPUSH
11688: LD_VAR 0 1
11692: PPUSH
11693: CALL_OW 12
11697: ARRAY
11698: PPUSH
11699: LD_INT 60
11701: PPUSH
11702: CALL_OW 234
// end ;
11706: PPOPN 1
11708: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11709: LD_EXP 21
11713: PUSH
11714: LD_EXP 51
11718: AND
11719: IFFALSE 11818
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
// begin enable ;
11728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11729: LD_ADDR_VAR 0 1
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_OWVAR 2
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 61
11748: PUSH
11749: EMPTY
11750: LIST
11751: PUSH
11752: LD_INT 33
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 1
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11818
// for i in tmp do
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_VAR 0 1
11790: PUSH
11791: FOR_IN
11792: IFFALSE 11816
// if IsControledBy ( i ) then
11794: LD_VAR 0 2
11798: PPUSH
11799: CALL_OW 312
11803: IFFALSE 11814
// ComUnlink ( i ) ;
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL_OW 136
11814: GO 11791
11816: POP
11817: POP
// end ;
11818: PPOPN 2
11820: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11821: LD_EXP 21
11825: PUSH
11826: LD_EXP 52
11830: AND
11831: IFFALSE 11971
11833: GO 11835
11835: DISABLE
11836: LD_INT 0
11838: PPUSH
11839: PPUSH
// begin ToLua ( displayPowell(); ) ;
11840: LD_STRING displayPowell();
11842: PPUSH
11843: CALL_OW 559
// uc_side := 0 ;
11847: LD_ADDR_OWVAR 20
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// uc_nation := 2 ;
11855: LD_ADDR_OWVAR 21
11859: PUSH
11860: LD_INT 2
11862: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11863: LD_ADDR_OWVAR 37
11867: PUSH
11868: LD_INT 14
11870: ST_TO_ADDR
// vc_engine := engine_siberite ;
11871: LD_ADDR_OWVAR 39
11875: PUSH
11876: LD_INT 3
11878: ST_TO_ADDR
// vc_control := control_apeman ;
11879: LD_ADDR_OWVAR 38
11883: PUSH
11884: LD_INT 5
11886: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11887: LD_ADDR_OWVAR 40
11891: PUSH
11892: LD_INT 29
11894: ST_TO_ADDR
// un := CreateVehicle ;
11895: LD_ADDR_VAR 0 2
11899: PUSH
11900: CALL_OW 45
11904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11905: LD_VAR 0 2
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11917: LD_INT 35
11919: PPUSH
11920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11924: LD_VAR 0 2
11928: PPUSH
11929: LD_INT 22
11931: PUSH
11932: LD_OWVAR 2
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PPUSH
11941: CALL_OW 69
11945: PPUSH
11946: LD_VAR 0 2
11950: PPUSH
11951: CALL_OW 74
11955: PPUSH
11956: CALL_OW 115
// until IsDead ( un ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL_OW 301
11969: IFFALSE 11917
// end ;
11971: PPOPN 2
11973: END
// every 0 0$1 trigger StreamModeActive and sStu do
11974: LD_EXP 21
11978: PUSH
11979: LD_EXP 60
11983: AND
11984: IFFALSE 12000
11986: GO 11988
11988: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11989: LD_STRING displayStucuk();
11991: PPUSH
11992: CALL_OW 559
// ResetFog ;
11996: CALL_OW 335
// end ;
12000: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12001: LD_EXP 21
12005: PUSH
12006: LD_EXP 53
12010: AND
12011: IFFALSE 12152
12013: GO 12015
12015: DISABLE
12016: LD_INT 0
12018: PPUSH
12019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_INT 22
12027: PUSH
12028: LD_OWVAR 2
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 1
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// if not tmp then
12056: LD_VAR 0 2
12060: NOT
12061: IFFALSE 12065
// exit ;
12063: GO 12152
// un := tmp [ rand ( 1 , tmp ) ] ;
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_VAR 0 2
12074: PUSH
12075: LD_INT 1
12077: PPUSH
12078: LD_VAR 0 2
12082: PPUSH
12083: CALL_OW 12
12087: ARRAY
12088: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_INT 0
12096: PPUSH
12097: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_OWVAR 3
12110: PUSH
12111: LD_VAR 0 1
12115: DIFF
12116: PPUSH
12117: LD_VAR 0 1
12121: PPUSH
12122: CALL_OW 74
12126: PPUSH
12127: CALL_OW 115
// wait ( 0 0$20 ) ;
12131: LD_INT 700
12133: PPUSH
12134: CALL_OW 67
// SetSide ( un , your_side ) ;
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_OWVAR 2
12147: PPUSH
12148: CALL_OW 235
// end ;
12152: PPOPN 2
12154: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12155: LD_EXP 21
12159: PUSH
12160: LD_EXP 54
12164: AND
12165: IFFALSE 12271
12167: GO 12169
12169: DISABLE
12170: LD_INT 0
12172: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12173: LD_ADDR_VAR 0 1
12177: PUSH
12178: LD_INT 22
12180: PUSH
12181: LD_OWVAR 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 2
12192: PUSH
12193: LD_INT 30
12195: PUSH
12196: LD_INT 0
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 30
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PPUSH
12222: CALL_OW 69
12226: ST_TO_ADDR
// if not depot then
12227: LD_VAR 0 1
12231: NOT
12232: IFFALSE 12236
// exit ;
12234: GO 12271
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: PPUSH
12245: CALL_OW 250
12249: PPUSH
12250: LD_VAR 0 1
12254: PUSH
12255: LD_INT 1
12257: ARRAY
12258: PPUSH
12259: CALL_OW 251
12263: PPUSH
12264: LD_INT 70
12266: PPUSH
12267: CALL_OW 495
// end ;
12271: PPOPN 1
12273: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12274: LD_EXP 21
12278: PUSH
12279: LD_EXP 55
12283: AND
12284: IFFALSE 12495
12286: GO 12288
12288: DISABLE
12289: LD_INT 0
12291: PPUSH
12292: PPUSH
12293: PPUSH
12294: PPUSH
12295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12296: LD_ADDR_VAR 0 5
12300: PUSH
12301: LD_INT 22
12303: PUSH
12304: LD_OWVAR 2
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 21
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: ST_TO_ADDR
// if not tmp then
12332: LD_VAR 0 5
12336: NOT
12337: IFFALSE 12341
// exit ;
12339: GO 12495
// for i in tmp do
12341: LD_ADDR_VAR 0 1
12345: PUSH
12346: LD_VAR 0 5
12350: PUSH
12351: FOR_IN
12352: IFFALSE 12493
// begin d := rand ( 0 , 5 ) ;
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: LD_INT 0
12361: PPUSH
12362: LD_INT 5
12364: PPUSH
12365: CALL_OW 12
12369: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12370: LD_ADDR_VAR 0 2
12374: PUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 250
12384: PPUSH
12385: LD_VAR 0 4
12389: PPUSH
12390: LD_INT 3
12392: PPUSH
12393: LD_INT 12
12395: PPUSH
12396: CALL_OW 12
12400: PPUSH
12401: CALL_OW 272
12405: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_VAR 0 1
12415: PPUSH
12416: CALL_OW 251
12420: PPUSH
12421: LD_VAR 0 4
12425: PPUSH
12426: LD_INT 3
12428: PPUSH
12429: LD_INT 12
12431: PPUSH
12432: CALL_OW 12
12436: PPUSH
12437: CALL_OW 273
12441: ST_TO_ADDR
// if ValidHex ( x , y ) then
12442: LD_VAR 0 2
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: CALL_OW 488
12456: IFFALSE 12491
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12458: LD_VAR 0 1
12462: PPUSH
12463: LD_VAR 0 2
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: LD_INT 3
12475: PPUSH
12476: LD_INT 6
12478: PPUSH
12479: CALL_OW 12
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 483
// end ;
12491: GO 12351
12493: POP
12494: POP
// end ;
12495: PPOPN 5
12497: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12498: LD_EXP 21
12502: PUSH
12503: LD_EXP 56
12507: AND
12508: IFFALSE 12602
12510: GO 12512
12512: DISABLE
12513: LD_INT 0
12515: PPUSH
12516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12517: LD_ADDR_VAR 0 2
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_OWVAR 2
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 32
12536: PUSH
12537: LD_INT 1
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: ST_TO_ADDR
// if not tmp then
12564: LD_VAR 0 2
12568: NOT
12569: IFFALSE 12573
// exit ;
12571: GO 12602
// for i in tmp do
12573: LD_ADDR_VAR 0 1
12577: PUSH
12578: LD_VAR 0 2
12582: PUSH
12583: FOR_IN
12584: IFFALSE 12600
// SetFuel ( i , 0 ) ;
12586: LD_VAR 0 1
12590: PPUSH
12591: LD_INT 0
12593: PPUSH
12594: CALL_OW 240
12598: GO 12583
12600: POP
12601: POP
// end ;
12602: PPOPN 2
12604: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12605: LD_EXP 21
12609: PUSH
12610: LD_EXP 57
12614: AND
12615: IFFALSE 12681
12617: GO 12619
12619: DISABLE
12620: LD_INT 0
12622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_OWVAR 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_INT 29
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 69
12658: ST_TO_ADDR
// if not tmp then
12659: LD_VAR 0 1
12663: NOT
12664: IFFALSE 12668
// exit ;
12666: GO 12681
// DestroyUnit ( tmp [ 1 ] ) ;
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: CALL_OW 65
// end ;
12681: PPOPN 1
12683: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12684: LD_EXP 21
12688: PUSH
12689: LD_EXP 59
12693: AND
12694: IFFALSE 12823
12696: GO 12698
12698: DISABLE
12699: LD_INT 0
12701: PPUSH
// begin uc_side := 0 ;
12702: LD_ADDR_OWVAR 20
12706: PUSH
12707: LD_INT 0
12709: ST_TO_ADDR
// uc_nation := nation_arabian ;
12710: LD_ADDR_OWVAR 21
12714: PUSH
12715: LD_INT 2
12717: ST_TO_ADDR
// hc_gallery :=  ;
12718: LD_ADDR_OWVAR 33
12722: PUSH
12723: LD_STRING 
12725: ST_TO_ADDR
// hc_name :=  ;
12726: LD_ADDR_OWVAR 26
12730: PUSH
12731: LD_STRING 
12733: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12734: LD_INT 1
12736: PPUSH
12737: LD_INT 11
12739: PPUSH
12740: LD_INT 10
12742: PPUSH
12743: CALL_OW 380
// un := CreateHuman ;
12747: LD_ADDR_VAR 0 1
12751: PUSH
12752: CALL_OW 44
12756: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12757: LD_VAR 0 1
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12769: LD_INT 35
12771: PPUSH
12772: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_INT 22
12783: PUSH
12784: LD_OWVAR 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 69
12797: PPUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 74
12807: PPUSH
12808: CALL_OW 115
// until IsDead ( un ) ;
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 301
12821: IFFALSE 12769
// end ;
12823: PPOPN 1
12825: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12826: LD_EXP 21
12830: PUSH
12831: LD_EXP 61
12835: AND
12836: IFFALSE 12848
12838: GO 12840
12840: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12841: LD_STRING earthquake(getX(game), 0, 32)
12843: PPUSH
12844: CALL_OW 559
12848: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12849: LD_EXP 21
12853: PUSH
12854: LD_EXP 62
12858: AND
12859: IFFALSE 12950
12861: GO 12863
12863: DISABLE
12864: LD_INT 0
12866: PPUSH
// begin enable ;
12867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_INT 22
12875: PUSH
12876: LD_OWVAR 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 33
12897: PUSH
12898: LD_INT 3
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: ST_TO_ADDR
// if not tmp then
12915: LD_VAR 0 1
12919: NOT
12920: IFFALSE 12924
// exit ;
12922: GO 12950
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12924: LD_VAR 0 1
12928: PUSH
12929: LD_INT 1
12931: PPUSH
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 12
12941: ARRAY
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: CALL_OW 234
// end ;
12950: PPOPN 1
12952: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12953: LD_EXP 21
12957: PUSH
12958: LD_EXP 63
12962: AND
12963: IFFALSE 13104
12965: GO 12967
12967: DISABLE
12968: LD_INT 0
12970: PPUSH
12971: PPUSH
12972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_OWVAR 2
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 69
13008: ST_TO_ADDR
// if not tmp then
13009: LD_VAR 0 3
13013: NOT
13014: IFFALSE 13018
// exit ;
13016: GO 13104
// un := tmp [ rand ( 1 , tmp ) ] ;
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: CALL_OW 12
13040: ARRAY
13041: ST_TO_ADDR
// if Crawls ( un ) then
13042: LD_VAR 0 2
13046: PPUSH
13047: CALL_OW 318
13051: IFFALSE 13062
// ComWalk ( un ) ;
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 9
13069: PPUSH
13070: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13074: LD_INT 28
13076: PPUSH
13077: LD_OWVAR 2
13081: PPUSH
13082: LD_INT 2
13084: PPUSH
13085: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13089: LD_INT 29
13091: PPUSH
13092: LD_OWVAR 2
13096: PPUSH
13097: LD_INT 2
13099: PPUSH
13100: CALL_OW 322
// end ;
13104: PPOPN 3
13106: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13107: LD_EXP 21
13111: PUSH
13112: LD_EXP 64
13116: AND
13117: IFFALSE 13228
13119: GO 13121
13121: DISABLE
13122: LD_INT 0
13124: PPUSH
13125: PPUSH
13126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13127: LD_ADDR_VAR 0 3
13131: PUSH
13132: LD_INT 22
13134: PUSH
13135: LD_OWVAR 2
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 25
13146: PUSH
13147: LD_INT 1
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: ST_TO_ADDR
// if not tmp then
13163: LD_VAR 0 3
13167: NOT
13168: IFFALSE 13172
// exit ;
13170: GO 13228
// un := tmp [ rand ( 1 , tmp ) ] ;
13172: LD_ADDR_VAR 0 2
13176: PUSH
13177: LD_VAR 0 3
13181: PUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: CALL_OW 12
13194: ARRAY
13195: ST_TO_ADDR
// if Crawls ( un ) then
13196: LD_VAR 0 2
13200: PPUSH
13201: CALL_OW 318
13205: IFFALSE 13216
// ComWalk ( un ) ;
13207: LD_VAR 0 2
13211: PPUSH
13212: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13216: LD_VAR 0 2
13220: PPUSH
13221: LD_INT 8
13223: PPUSH
13224: CALL_OW 336
// end ;
13228: PPOPN 3
13230: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13231: LD_EXP 21
13235: PUSH
13236: LD_EXP 65
13240: AND
13241: IFFALSE 13385
13243: GO 13245
13245: DISABLE
13246: LD_INT 0
13248: PPUSH
13249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13250: LD_ADDR_VAR 0 2
13254: PUSH
13255: LD_INT 22
13257: PUSH
13258: LD_OWVAR 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 34
13282: PUSH
13283: LD_INT 12
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 34
13292: PUSH
13293: LD_INT 51
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 34
13302: PUSH
13303: LD_INT 32
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: ST_TO_ADDR
// if not tmp then
13326: LD_VAR 0 2
13330: NOT
13331: IFFALSE 13335
// exit ;
13333: GO 13385
// for i in tmp do
13335: LD_ADDR_VAR 0 1
13339: PUSH
13340: LD_VAR 0 2
13344: PUSH
13345: FOR_IN
13346: IFFALSE 13383
// if GetCargo ( i , mat_artifact ) = 0 then
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 4
13355: PPUSH
13356: CALL_OW 289
13360: PUSH
13361: LD_INT 0
13363: EQUAL
13364: IFFALSE 13381
// SetCargo ( i , mat_siberit , 100 ) ;
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_INT 3
13373: PPUSH
13374: LD_INT 100
13376: PPUSH
13377: CALL_OW 290
13381: GO 13345
13383: POP
13384: POP
// end ;
13385: PPOPN 2
13387: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13388: LD_EXP 21
13392: PUSH
13393: LD_EXP 66
13397: AND
13398: IFFALSE 13551
13400: GO 13402
13402: DISABLE
13403: LD_INT 0
13405: PPUSH
13406: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_OWVAR 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PPUSH
13424: CALL_OW 69
13428: ST_TO_ADDR
// if not tmp then
13429: LD_VAR 0 2
13433: NOT
13434: IFFALSE 13438
// exit ;
13436: GO 13551
// for i := 1 to 2 do
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: DOUBLE
13444: LD_INT 1
13446: DEC
13447: ST_TO_ADDR
13448: LD_INT 2
13450: PUSH
13451: FOR_TO
13452: IFFALSE 13549
// begin uc_side := your_side ;
13454: LD_ADDR_OWVAR 20
13458: PUSH
13459: LD_OWVAR 2
13463: ST_TO_ADDR
// uc_nation := nation_american ;
13464: LD_ADDR_OWVAR 21
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// vc_chassis := us_morphling ;
13472: LD_ADDR_OWVAR 37
13476: PUSH
13477: LD_INT 5
13479: ST_TO_ADDR
// vc_engine := engine_siberite ;
13480: LD_ADDR_OWVAR 39
13484: PUSH
13485: LD_INT 3
13487: ST_TO_ADDR
// vc_control := control_computer ;
13488: LD_ADDR_OWVAR 38
13492: PUSH
13493: LD_INT 3
13495: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13496: LD_ADDR_OWVAR 40
13500: PUSH
13501: LD_INT 10
13503: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13504: CALL_OW 45
13508: PPUSH
13509: LD_VAR 0 2
13513: PUSH
13514: LD_INT 1
13516: ARRAY
13517: PPUSH
13518: CALL_OW 250
13522: PPUSH
13523: LD_VAR 0 2
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PPUSH
13532: CALL_OW 251
13536: PPUSH
13537: LD_INT 12
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 50
// end ;
13547: GO 13451
13549: POP
13550: POP
// end ;
13551: PPOPN 2
13553: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13554: LD_EXP 21
13558: PUSH
13559: LD_EXP 67
13563: AND
13564: IFFALSE 13786
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
13576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13577: LD_ADDR_VAR 0 6
13581: PUSH
13582: LD_INT 22
13584: PUSH
13585: LD_OWVAR 2
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 21
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 3
13606: PUSH
13607: LD_INT 23
13609: PUSH
13610: LD_INT 0
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: ST_TO_ADDR
// if not tmp then
13631: LD_VAR 0 6
13635: NOT
13636: IFFALSE 13640
// exit ;
13638: GO 13786
// s1 := rand ( 1 , 4 ) ;
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 1
13647: PPUSH
13648: LD_INT 4
13650: PPUSH
13651: CALL_OW 12
13655: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13656: LD_ADDR_VAR 0 4
13660: PUSH
13661: LD_VAR 0 6
13665: PUSH
13666: LD_INT 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 2
13674: PPUSH
13675: CALL_OW 259
13679: ST_TO_ADDR
// if s1 = 1 then
13680: LD_VAR 0 2
13684: PUSH
13685: LD_INT 1
13687: EQUAL
13688: IFFALSE 13708
// s2 := rand ( 2 , 4 ) else
13690: LD_ADDR_VAR 0 3
13694: PUSH
13695: LD_INT 2
13697: PPUSH
13698: LD_INT 4
13700: PPUSH
13701: CALL_OW 12
13705: ST_TO_ADDR
13706: GO 13716
// s2 := 1 ;
13708: LD_ADDR_VAR 0 3
13712: PUSH
13713: LD_INT 1
13715: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13716: LD_ADDR_VAR 0 5
13720: PUSH
13721: LD_VAR 0 6
13725: PUSH
13726: LD_INT 1
13728: ARRAY
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: CALL_OW 259
13739: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13740: LD_VAR 0 6
13744: PUSH
13745: LD_INT 1
13747: ARRAY
13748: PPUSH
13749: LD_VAR 0 2
13753: PPUSH
13754: LD_VAR 0 5
13758: PPUSH
13759: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13763: LD_VAR 0 6
13767: PUSH
13768: LD_INT 1
13770: ARRAY
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_VAR 0 4
13781: PPUSH
13782: CALL_OW 237
// end ;
13786: PPOPN 6
13788: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13789: LD_EXP 21
13793: PUSH
13794: LD_EXP 68
13798: AND
13799: IFFALSE 13878
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 3
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: ST_TO_ADDR
// if not tmp then
13843: LD_VAR 0 1
13847: NOT
13848: IFFALSE 13852
// exit ;
13850: GO 13878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13852: LD_VAR 0 1
13856: PUSH
13857: LD_INT 1
13859: PPUSH
13860: LD_VAR 0 1
13864: PPUSH
13865: CALL_OW 12
13869: ARRAY
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 234
// end ;
13878: PPOPN 1
13880: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13881: LD_EXP 21
13885: PUSH
13886: LD_EXP 69
13890: AND
13891: IFFALSE 14003
13893: GO 13895
13895: DISABLE
13896: LD_INT 0
13898: PPUSH
13899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13900: LD_ADDR_VAR 0 2
13904: PUSH
13905: LD_INT 22
13907: PUSH
13908: LD_OWVAR 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: LD_INT 30
13922: PUSH
13923: LD_INT 27
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 30
13932: PUSH
13933: LD_INT 26
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 30
13942: PUSH
13943: LD_INT 28
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: ST_TO_ADDR
// if not tmp then
13965: LD_VAR 0 2
13969: NOT
13970: IFFALSE 13974
// exit ;
13972: GO 14003
// for i in tmp do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_VAR 0 2
13983: PUSH
13984: FOR_IN
13985: IFFALSE 14001
// SetLives ( i , 1 ) ;
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 234
13999: GO 13984
14001: POP
14002: POP
// end ;
14003: PPOPN 2
14005: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14006: LD_EXP 21
14010: PUSH
14011: LD_EXP 70
14015: AND
14016: IFFALSE 14290
14018: GO 14020
14020: DISABLE
14021: LD_INT 0
14023: PPUSH
14024: PPUSH
14025: PPUSH
// begin i := rand ( 1 , 7 ) ;
14026: LD_ADDR_VAR 0 1
14030: PUSH
14031: LD_INT 1
14033: PPUSH
14034: LD_INT 7
14036: PPUSH
14037: CALL_OW 12
14041: ST_TO_ADDR
// case i of 1 :
14042: LD_VAR 0 1
14046: PUSH
14047: LD_INT 1
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14065
14055: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14056: LD_STRING earthquake(getX(game), 0, 32)
14058: PPUSH
14059: CALL_OW 559
14063: GO 14290
14065: LD_INT 2
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14087
14073: POP
// begin ToLua ( displayStucuk(); ) ;
14074: LD_STRING displayStucuk();
14076: PPUSH
14077: CALL_OW 559
// ResetFog ;
14081: CALL_OW 335
// end ; 3 :
14085: GO 14290
14087: LD_INT 3
14089: DOUBLE
14090: EQUAL
14091: IFTRUE 14095
14093: GO 14199
14095: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14096: LD_ADDR_VAR 0 2
14100: PUSH
14101: LD_INT 22
14103: PUSH
14104: LD_OWVAR 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 25
14115: PUSH
14116: LD_INT 1
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PPUSH
14127: CALL_OW 69
14131: ST_TO_ADDR
// if not tmp then
14132: LD_VAR 0 2
14136: NOT
14137: IFFALSE 14141
// exit ;
14139: GO 14290
// un := tmp [ rand ( 1 , tmp ) ] ;
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_VAR 0 2
14150: PUSH
14151: LD_INT 1
14153: PPUSH
14154: LD_VAR 0 2
14158: PPUSH
14159: CALL_OW 12
14163: ARRAY
14164: ST_TO_ADDR
// if Crawls ( un ) then
14165: LD_VAR 0 3
14169: PPUSH
14170: CALL_OW 318
14174: IFFALSE 14185
// ComWalk ( un ) ;
14176: LD_VAR 0 3
14180: PPUSH
14181: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14185: LD_VAR 0 3
14189: PPUSH
14190: LD_INT 8
14192: PPUSH
14193: CALL_OW 336
// end ; 4 :
14197: GO 14290
14199: LD_INT 4
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14268
14207: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14208: LD_ADDR_VAR 0 2
14212: PUSH
14213: LD_INT 22
14215: PUSH
14216: LD_OWVAR 2
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 30
14227: PUSH
14228: LD_INT 29
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: ST_TO_ADDR
// if not tmp then
14244: LD_VAR 0 2
14248: NOT
14249: IFFALSE 14253
// exit ;
14251: GO 14290
// DestroyUnit ( tmp [ 1 ] ) ;
14253: LD_VAR 0 2
14257: PUSH
14258: LD_INT 1
14260: ARRAY
14261: PPUSH
14262: CALL_OW 65
// end ; 5 .. 7 :
14266: GO 14290
14268: LD_INT 5
14270: DOUBLE
14271: GREATEREQUAL
14272: IFFALSE 14280
14274: LD_INT 7
14276: DOUBLE
14277: LESSEQUAL
14278: IFTRUE 14282
14280: GO 14289
14282: POP
// StreamSibBomb ; end ;
14283: CALL 10570 0 0
14287: GO 14290
14289: POP
// end ;
14290: PPOPN 3
14292: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14293: LD_EXP 21
14297: PUSH
14298: LD_EXP 71
14302: AND
14303: IFFALSE 14459
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
14312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14313: LD_ADDR_VAR 0 2
14317: PUSH
14318: LD_INT 81
14320: PUSH
14321: LD_OWVAR 2
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 21
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 2
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14459
// p := 0 ;
14376: LD_ADDR_VAR 0 3
14380: PUSH
14381: LD_INT 0
14383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14384: LD_INT 35
14386: PPUSH
14387: CALL_OW 67
// p := p + 1 ;
14391: LD_ADDR_VAR 0 3
14395: PUSH
14396: LD_VAR 0 3
14400: PUSH
14401: LD_INT 1
14403: PLUS
14404: ST_TO_ADDR
// for i in tmp do
14405: LD_ADDR_VAR 0 1
14409: PUSH
14410: LD_VAR 0 2
14414: PUSH
14415: FOR_IN
14416: IFFALSE 14447
// if GetLives ( i ) < 1000 then
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 256
14427: PUSH
14428: LD_INT 1000
14430: LESS
14431: IFFALSE 14445
// SetLives ( i , 1000 ) ;
14433: LD_VAR 0 1
14437: PPUSH
14438: LD_INT 1000
14440: PPUSH
14441: CALL_OW 234
14445: GO 14415
14447: POP
14448: POP
// until p > 20 ;
14449: LD_VAR 0 3
14453: PUSH
14454: LD_INT 20
14456: GREATER
14457: IFFALSE 14384
// end ;
14459: PPOPN 3
14461: END
// every 0 0$1 trigger StreamModeActive and sTime do
14462: LD_EXP 21
14466: PUSH
14467: LD_EXP 72
14471: AND
14472: IFFALSE 14507
14474: GO 14476
14476: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14477: LD_INT 28
14479: PPUSH
14480: LD_OWVAR 2
14484: PPUSH
14485: LD_INT 2
14487: PPUSH
14488: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14492: LD_INT 30
14494: PPUSH
14495: LD_OWVAR 2
14499: PPUSH
14500: LD_INT 2
14502: PPUSH
14503: CALL_OW 322
// end ;
14507: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14508: LD_EXP 21
14512: PUSH
14513: LD_EXP 73
14517: AND
14518: IFFALSE 14639
14520: GO 14522
14522: DISABLE
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14527: LD_ADDR_VAR 0 2
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_OWVAR 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 21
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 3
14556: PUSH
14557: LD_INT 23
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 69
14580: ST_TO_ADDR
// if not tmp then
14581: LD_VAR 0 2
14585: NOT
14586: IFFALSE 14590
// exit ;
14588: GO 14639
// for i in tmp do
14590: LD_ADDR_VAR 0 1
14594: PUSH
14595: LD_VAR 0 2
14599: PUSH
14600: FOR_IN
14601: IFFALSE 14637
// begin if Crawls ( i ) then
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 318
14612: IFFALSE 14623
// ComWalk ( i ) ;
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 138
// SetClass ( i , 2 ) ;
14623: LD_VAR 0 1
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: CALL_OW 336
// end ;
14635: GO 14600
14637: POP
14638: POP
// end ;
14639: PPOPN 2
14641: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14642: LD_EXP 21
14646: PUSH
14647: LD_EXP 74
14651: AND
14652: IFFALSE 14933
14654: GO 14656
14656: DISABLE
14657: LD_INT 0
14659: PPUSH
14660: PPUSH
14661: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14662: LD_OWVAR 2
14666: PPUSH
14667: LD_INT 9
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14680: LD_INT 9
14682: PPUSH
14683: LD_OWVAR 2
14687: PPUSH
14688: CALL_OW 343
// uc_side := 9 ;
14692: LD_ADDR_OWVAR 20
14696: PUSH
14697: LD_INT 9
14699: ST_TO_ADDR
// uc_nation := 2 ;
14700: LD_ADDR_OWVAR 21
14704: PUSH
14705: LD_INT 2
14707: ST_TO_ADDR
// hc_name := Dark Warrior ;
14708: LD_ADDR_OWVAR 26
14712: PUSH
14713: LD_STRING Dark Warrior
14715: ST_TO_ADDR
// hc_gallery :=  ;
14716: LD_ADDR_OWVAR 33
14720: PUSH
14721: LD_STRING 
14723: ST_TO_ADDR
// hc_noskilllimit := true ;
14724: LD_ADDR_OWVAR 76
14728: PUSH
14729: LD_INT 1
14731: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14732: LD_ADDR_OWVAR 31
14736: PUSH
14737: LD_INT 30
14739: PUSH
14740: LD_INT 30
14742: PUSH
14743: LD_INT 30
14745: PUSH
14746: LD_INT 30
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: ST_TO_ADDR
// un := CreateHuman ;
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: CALL_OW 44
14764: ST_TO_ADDR
// hc_noskilllimit := false ;
14765: LD_ADDR_OWVAR 76
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 51
// p := 0 ;
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14793: LD_INT 35
14795: PPUSH
14796: CALL_OW 67
// p := p + 1 ;
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_VAR 0 2
14809: PUSH
14810: LD_INT 1
14812: PLUS
14813: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14814: LD_VAR 0 3
14818: PPUSH
14819: CALL_OW 256
14823: PUSH
14824: LD_INT 1000
14826: LESS
14827: IFFALSE 14841
// SetLives ( un , 1000 ) ;
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1000
14836: PPUSH
14837: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14841: LD_VAR 0 3
14845: PPUSH
14846: LD_INT 81
14848: PUSH
14849: LD_OWVAR 2
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 91
14860: PUSH
14861: LD_VAR 0 3
14865: PUSH
14866: LD_INT 30
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 69
14882: PPUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: CALL_OW 74
14892: PPUSH
14893: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 60
14904: GREATER
14905: PUSH
14906: LD_VAR 0 3
14910: PPUSH
14911: CALL_OW 301
14915: OR
14916: IFFALSE 14793
// if un then
14918: LD_VAR 0 3
14922: IFFALSE 14933
// RemoveUnit ( un ) ;
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 64
// end ;
14933: PPOPN 3
14935: END
