Export function Action;
var i;
begin
Video(true);

CenterNowOnXY(18, 15);

ComMoveXY(Schulz, 80, 28);
ComMoveXY(Lemmy, 61, 17);
ComMoveXY(Nia, 72, 28);
ComMoveXY(Jenna, 74, 22);
ComMoveXY(Mia, 68, 22);
ComMoveXY(schulzSecondSquad, 83, 37);

Say(Schulz, 'DL-Intro-8');

CenterOnUnits(Schulz);

Say(Schulz, 'DL-Intro-9');

CenterOnUnits(Schulz);

Say(Schulz, 'DL-Intro-10');

CenterOnXY(80, 28);

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 2], [f_distxy, 80, 28, 6]]);

RaiseSailEvent(1);

wait(0$0.3);

Say(Schulz, 'DL-Intro-11');
SayRadio(Omar, 'DOm-Intro-12');
SayRadio(Omar, 'DOm-Intro-13');
Say(Schulz, 'DL-Intro-14');

ComExitVehicle(Schulz);
wait(0$0.3);
ComMoveXY(Schulz, 73, 17);

wait(0$2);

Say(Schulz, 'DL-Intro-15');
Say(Lemmy, 'DLt-Intro-16');
Say(Lemmy, 'DLt-Intro-17');

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 2], [f_btype, b_depot]]);

wait(0$2);

Video(false);

tick := 0;
ChangeMissionObjectives('M1');

SetRestrict(b_depot, 2, state_disabled);

repeat
 wait(0$1);
until FilterAllUnits([[f_side, 2], [f_btype, b_depot], [f_constructed]]);

DialogueOn;

Say(Schulz, 'DL-Intro-18');
Say(Schulz, 'DL-Intro-19');
Say(Schulz, 'DL-Intro-20');
Say(Lemmy, 'DLt-Intro-21');
Say(Lemmy, 'DLt-Intro-22');
Say(Lemmy, 'DLt-Intro-23');
Say(Schulz, 'DL-Intro-24');
Say(Lemmy, 'DLt-Intro-25');

DialogueOff;

ChangeMissionObjectives('M2');

Query('Prepare');
End;

// camera
Every 0$1 trigger FilterAllUnits([[f_side, 2], [f_btype, b_lab_opto]]) do
Say(Schulz, 'DL-Cam-1');

// faster #1
Every 0$1 trigger tick >= timeToHeikeDead div 2 do
begin
DialogueOn;
Say(Schulz, 'DL-Faster-1');
DialogueOff;
End;

// faster #2
Every 0$1 trigger tick >= (timeToHeikeDead div 2) + 5$00 do
begin
DialogueOn;
Say(Schulz, 'DL-Faster-2');
DialogueOff;
End;

// base constructed
Every 0$1 trigger FilterAllUnits([[f_side, 2], [f_constructed], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]) and
                  FilterAllUnits([[f_side, 2], [f_constructed], [f_btype, b_factory]]) and
                  FilterAllUnits([[f_side, 2], [f_constructed], [f_btype, b_bunker]]) >= 3 and
                  FilterAllUnits([[f_side, 2], [f_constructed], [f_btype, b_barracks]]) and
                  FilterAllUnits([[f_side, 2], [f_constructed], [f_btype, b_siberite_mine]]) and
                  FilterAllUnits([[f_side, 2], [f_constructed], [f_or, [f_btype, b_oil_power], [f_btype, b_siberite_power]]]) do
begin
if tick <= 10$00 then
   SetAchievement('ACH_BOB');

baseDone := true;
ChangeMissionObjectives('M1out');
End;

Every 0$1 trigger baseDone and FilterAllUnits([[f_side, 2], [f_type, unit_vehicle], [f_not, [f_or, [f_weapon, ar_cargo_bay], [f_weapon, ar_crane]]]]) >= Count(FilterAllUnits([[f_side, 2], [f_type, unit_human], [f_nation, nation_arabian]])) do
begin
DialogueOn;
Say(Schulz, 'DL-Ready-1');

if FilterAllUnits([[f_side, 2], [f_nation, nation_nature]]) then
   Say(Schulz, 'DL-Ready-2');

DialogueOff;

ChangeMissionObjectives('M3');

SetAreaMapShow(endArea, 1);
canGo := true;
End;

Every 0$3 trigger canGo and Count(FilterUnitsInArea(endArea, [[f_side, 2], [f_type, unit_vehicle], [f_control, control_manual], [f_not, [f_empty]]])) >= Count(FilterAllUnits([[f_side, 2], [f_type, unit_human], [f_nation, nation_arabian]]))
                        and Count(FilterAllUnits([[f_side, 2], [f_type, unit_human], [f_not, [f_driving]], [f_nation, nation_arabian]])) = 0 do
var i, tmp, saveVehicles, otherVehicles, animals;
begin
enable;

tmp := FilterUnitsInArea(endArea, [[f_side, 2], [f_type, unit_vehicle]]);

if UnitFilter(tmp, [f_or, [f_weapon, ar_crane], [f_weapon, ar_cargo_bay]]) then
   begin
   Query('InvalidWeapon');
   exit;
   end;

if UnitFilter(tmp, [f_not, [f_lives, 1000]]) then
   begin
   Query('HealthLevel');
   exit;
   end;

for i in tmp do
    if GetEngine(i) = engine_combustion and GetFuel(i) < 80 then
       begin
       Query('FuelLevel');
       exit;
       end;

disable;

saveVehicles := [];

for i in tmp do
    saveVehicles := Join(saveVehicles, [GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i), GetNation(i), GetFuel(i), GetMark(i), IsDrivenBy(i)]);

otherVehicles := FilterAllUnits([[f_side, 2], [f_type, unit_vehicle], [f_ok]]) diff tmp;

if otherVehicles then
   begin
   tmp := [];

   for i in otherVehicles do
       tmp := Join(tmp, [GetChassis(i), GetEngine(i), GetControl(i), GetWeapon(i), GetNation(i), GetFuel(i), GetMark(i), GetX(i), GetY(i), GetDir(i), GetLives(i)]);

   SaveVariable(tmp, '09_otherVehicles');
   end;

if not UnitFilter(saveVehicles, [f_engine, engine_combustion]) then
   SetAchievement('ACH_GREEN');

SaveCharacters(Schulz, '09_Schulz');
SaveVariable(Schulz, '09_Schulz_ID'); 
SaveCharacters(Lemmy, '09_Lemmy');
SaveVariable(Lemmy, '09_Lemmy_ID'); 
SaveCharacters(Nia, '09_Nia');
SaveVariable(Nia, '09_Nia_ID'); 
SaveCharacters(Mia, '09_Mia');
SaveVariable(Mia, '09_Mia_ID');
SaveCharacters(Jenna, '09_Jenna');
SaveVariable(Jenna, '09_Jenna_ID');
SaveCharacters(schulzSecondSquad, '09_schulzSecondSquad');

for i := 1 to schulzSecondSquad do
    SaveVariable(schulzSecondSquad[i], '09_random_ID_' & i);

SaveVariable(saveVehicles, '09_vehicles');
SaveVariable(tick, '09_tick');

SaveEnvironment(mapArea, '09_env');
SaveTech(2, '09_tech');
SaveMaterials(2, '09_materials'); 
SaveBase(2, '09_buildings');
SaveCharacters(FilterAllUnits([[f_side, 2], [f_nation, 0]]), '09_apes');
SaveVariable(timeToHeikeDead, '09_timeToHeikeDead');
SaveVariable(hiddenCameras, '09_cameras');

tmp := FilterAllUnits([[f_side, 0], [f_nation, nation_nature], [f_ok]]);

if tmp then
   begin
   animals := [];

   for i in tmp do
       animals := Join(animals, [GetClass(i), GetX(i), GetY(i), GetDir(i), GetLives(i)]);

   SaveVariable(animals, '09_animals');
   end;

wait(3);

ChangeMap(1, '%2');
End;

